[{"uris": "src/test/java/com/binance/connector/client/utils/JSONParser_pullValueTest.java.JSONParser_pullValueTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void setUp()", "original_string": "    @Before\n    public void setUp() {\n        parameters = new JSONObject();\n        parameters.put(\"key1\", \"value1\");\n        parameters.put(\"key2\", 123);\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/utils/JSONParser_pullValueTest.java", "class_name": "JSONParser_pullValueTest", "class_uri": "src/test/java/com/binance/connector/client/utils/JSONParser_pullValueTest.java.JSONParser_pullValueTest", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/utils/JSONParser_sortJSONObjectTest.java.JSONParser_sortJSONObjectTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void setUp()", "original_string": "    @Before\n    public void setUp() {\n        testJson = new JSONObject();\n        testJson.put(\"b\", 2);\n        testJson.put(\"a\", 1);\n        testJson.put(\"c\", 3);\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/utils/JSONParser_sortJSONObjectTest.java", "class_name": "JSONParser_sortJSONObjectTest", "class_uri": "src/test/java/com/binance/connector/client/utils/JSONParser_sortJSONObjectTest.java.JSONParser_sortJSONObjectTest", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Mining_earningListTest.java.Mining_earningListTest.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/Mining_earningListTest.java", "class_name": "Mining_earningListTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/Mining_earningListTest.java.Mining_earningListTest", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Wallet_busdConvertTest.java.Wallet_busdConvertTest.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/Wallet_busdConvertTest.java", "class_name": "Wallet_busdConvertTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/Wallet_busdConvertTest.java.Wallet_busdConvertTest", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Market_bookTickerTest.java.Market_bookTickerTest.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/Market_bookTickerTest.java", "class_name": "Market_bookTickerTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/Market_bookTickerTest.java.Market_bookTickerTest", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_managedSubAccountSnapshotTest.java.SubAccount_managedSubAccountSnapshotTest.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_managedSubAccountSnapshotTest.java", "class_name": "SubAccount_managedSubAccountSnapshotTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_managedSubAccountSnapshotTest.java.SubAccount_managedSubAccountSnapshotTest", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_managedSubDepositTest.java.SubAccount_managedSubDepositTest.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_managedSubDepositTest.java", "class_name": "SubAccount_managedSubDepositTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_managedSubDepositTest.java.SubAccount_managedSubDepositTest", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Wallet_delegationHistoryTest.java.Wallet_delegationHistoryTest.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/Wallet_delegationHistoryTest.java", "class_name": "Wallet_delegationHistoryTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/Wallet_delegationHistoryTest.java.Wallet_delegationHistoryTest", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/UserData_closeIsolatedMarginListenKeyTest.java.UserData_closeIsolatedMarginListenKeyTest.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/UserData_closeIsolatedMarginListenKeyTest.java", "class_name": "UserData_closeIsolatedMarginListenKeyTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/UserData_closeIsolatedMarginListenKeyTest.java.UserData_closeIsolatedMarginListenKeyTest", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_loanBorrowTest.java.CryptoLoans_loanBorrowTest.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_loanBorrowTest.java", "class_name": "CryptoLoans_loanBorrowTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_loanBorrowTest.java.CryptoLoans_loanBorrowTest", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Margin_smallLiabilityExchangeHistoryTest.java.Margin_smallLiabilityExchangeHistoryTest.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/Margin_smallLiabilityExchangeHistoryTest.java", "class_name": "Margin_smallLiabilityExchangeHistoryTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/Margin_smallLiabilityExchangeHistoryTest.java.Margin_smallLiabilityExchangeHistoryTest", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_deleteIpListTest.java.SubAccount_deleteIpListTest.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_deleteIpListTest.java", "class_name": "SubAccount_deleteIpListTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_deleteIpListTest.java.SubAccount_deleteIpListTest", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Mining_bonusListTest.java.Mining_bonusListTest.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/Mining_bonusListTest.java", "class_name": "Mining_bonusListTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/Mining_bonusListTest.java.Mining_bonusListTest", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Trade_testNewOrderTest.java.Trade_testNewOrderTest.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.trade = new Trade(baseUrl, MockData.API_KEY, MockData.SECRET_KEY, false, null);\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/Trade_testNewOrderTest.java", "class_name": "Trade_testNewOrderTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/Trade_testNewOrderTest.java.Trade_testNewOrderTest", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Market_ticker24HTest.java.Market_ticker24HTest.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/Market_ticker24HTest.java", "class_name": "Market_ticker24HTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/Market_ticker24HTest.java.Market_ticker24HTest", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Mining_statsticsListTest.java.Mining_statsticsListTest.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/Mining_statsticsListTest.java", "class_name": "Mining_statsticsListTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/Mining_statsticsListTest.java.Mining_statsticsListTest", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Wallet_busdConvertHistoryTest.java.Wallet_busdConvertHistoryTest.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/Wallet_busdConvertHistoryTest.java", "class_name": "Wallet_busdConvertHistoryTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/Wallet_busdConvertHistoryTest.java.Wallet_busdConvertHistoryTest", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_managedSubWithdrawTest.java.SubAccount_managedSubWithdrawTest.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_managedSubWithdrawTest.java", "class_name": "SubAccount_managedSubWithdrawTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_managedSubWithdrawTest.java.SubAccount_managedSubWithdrawTest", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Mining_minerListTest.java.Mining_minerListTest.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/Mining_minerListTest.java", "class_name": "Mining_minerListTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/Mining_minerListTest.java.Mining_minerListTest", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Market_klinesTest.java.Market_klinesTest.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/Market_klinesTest.java", "class_name": "Market_klinesTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/Market_klinesTest.java.Market_klinesTest", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_collateralRepayRateTest.java.CryptoLoans_collateralRepayRateTest.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_collateralRepayRateTest.java", "class_name": "CryptoLoans_collateralRepayRateTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_collateralRepayRateTest.java.CryptoLoans_collateralRepayRateTest", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_setFlexibleAutoSubscribeTest.java.SimpleEarn_setFlexibleAutoSubscribeTest.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_setFlexibleAutoSubscribeTest.java", "class_name": "SimpleEarn_setFlexibleAutoSubscribeTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_setFlexibleAutoSubscribeTest.java.SimpleEarn_setFlexibleAutoSubscribeTest", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Wallet_universalTransferTest.java.Wallet_universalTransferTest.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/Wallet_universalTransferTest.java", "class_name": "Wallet_universalTransferTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/Wallet_universalTransferTest.java.Wallet_universalTransferTest", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_subAccountToSubAccountTest.java.SubAccount_subAccountToSubAccountTest.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_subAccountToSubAccountTest.java", "class_name": "SubAccount_subAccountToSubAccountTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_subAccountToSubAccountTest.java.SubAccount_subAccountToSubAccountTest", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_flexibleLoanRepayTest.java.CryptoLoans_flexibleLoanRepayTest.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_flexibleLoanRepayTest.java", "class_name": "CryptoLoans_flexibleLoanRepayTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_flexibleLoanRepayTest.java.CryptoLoans_flexibleLoanRepayTest", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/VIPLoans_borrowTest.java.VIPLoans_borrowTest.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/VIPLoans_borrowTest.java", "class_name": "VIPLoans_borrowTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/VIPLoans_borrowTest.java.VIPLoans_borrowTest", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_getIpRestrictionTest.java.SubAccount_getIpRestrictionTest.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_getIpRestrictionTest.java", "class_name": "SubAccount_getIpRestrictionTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_getIpRestrictionTest.java.SubAccount_getIpRestrictionTest", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Trade_newOrderTest.java.Trade_newOrderTest.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.trade = new Trade(baseUrl, \"apiKey\", \"secretKey\", false, new ProxyAuth(null, null));\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/Trade_newOrderTest.java", "class_name": "Trade_newOrderTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/Trade_newOrderTest.java.Trade_newOrderTest", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Trade_cancelReplaceTest.java.Trade_cancelReplaceTest.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/Trade_cancelReplaceTest.java", "class_name": "Trade_cancelReplaceTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/Trade_cancelReplaceTest.java.Trade_cancelReplaceTest", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_flexibleSubscriptionPreviewTest.java.SimpleEarn_flexibleSubscriptionPreviewTest.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_flexibleSubscriptionPreviewTest.java", "class_name": "SimpleEarn_flexibleSubscriptionPreviewTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_flexibleSubscriptionPreviewTest.java.SimpleEarn_flexibleSubscriptionPreviewTest", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Mining_accountListTest.java.Mining_accountListTest.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/Mining_accountListTest.java", "class_name": "Mining_accountListTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/Mining_accountListTest.java.Mining_accountListTest", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_futuresInternalTransferTest.java.SubAccount_futuresInternalTransferTest.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_futuresInternalTransferTest.java", "class_name": "SubAccount_futuresInternalTransferTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_futuresInternalTransferTest.java.SubAccount_futuresInternalTransferTest", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_setLockedAutoSubscribeTest.java.SimpleEarn_setLockedAutoSubscribeTest.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_setLockedAutoSubscribeTest.java", "class_name": "SimpleEarn_setLockedAutoSubscribeTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_setLockedAutoSubscribeTest.java.SimpleEarn_setLockedAutoSubscribeTest", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Futures_futuresTransferTest.java.Futures_futuresTransferTest.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.futures = new Futures(baseUrl, MockData.API_KEY, new HmacSignatureGenerator(MockData.SECRET_KEY), false, null);\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/Futures_futuresTransferTest.java", "class_name": "Futures_futuresTransferTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/Futures_futuresTransferTest.java.Futures_futuresTransferTest", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_updateIpRestrictionTest.java.SubAccount_updateIpRestrictionTest.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_updateIpRestrictionTest.java", "class_name": "SubAccount_updateIpRestrictionTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_updateIpRestrictionTest.java.SubAccount_updateIpRestrictionTest", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_lockedSubscriptionPreviewTest.java.SimpleEarn_lockedSubscriptionPreviewTest.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_lockedSubscriptionPreviewTest.java", "class_name": "SimpleEarn_lockedSubscriptionPreviewTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_lockedSubscriptionPreviewTest.java.SimpleEarn_lockedSubscriptionPreviewTest", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_futuresAccountV2Test.java.SubAccount_futuresAccountV2Test.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_futuresAccountV2Test.java", "class_name": "SubAccount_futuresAccountV2Test", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_futuresAccountV2Test.java.SubAccount_futuresAccountV2Test", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_enableLeverageTokenTest.java.SubAccount_enableLeverageTokenTest.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_enableLeverageTokenTest.java", "class_name": "SubAccount_enableLeverageTokenTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_enableLeverageTokenTest.java.SubAccount_enableLeverageTokenTest", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Wallet_switchBusdAutoConversionTest.java.Wallet_switchBusdAutoConversionTest.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/Wallet_switchBusdAutoConversionTest.java", "class_name": "Wallet_switchBusdAutoConversionTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/Wallet_switchBusdAutoConversionTest.java.Wallet_switchBusdAutoConversionTest", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Market_tradingDayTickerTest.java.Market_tradingDayTickerTest.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/Market_tradingDayTickerTest.java", "class_name": "Market_tradingDayTickerTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/Market_tradingDayTickerTest.java.Market_tradingDayTickerTest", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_loanAdjustLTVTest.java.CryptoLoans_loanAdjustLTVTest.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_loanAdjustLTVTest.java", "class_name": "CryptoLoans_loanAdjustLTVTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_loanAdjustLTVTest.java.CryptoLoans_loanAdjustLTVTest", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_flexibleLoanBorrowTest.java.CryptoLoans_flexibleLoanBorrowTest.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_flexibleLoanBorrowTest.java", "class_name": "CryptoLoans_flexibleLoanBorrowTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_flexibleLoanBorrowTest.java.CryptoLoans_flexibleLoanBorrowTest", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Wallet_cloudMiningHistoryTest.java.Wallet_cloudMiningHistoryTest.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/Wallet_cloudMiningHistoryTest.java", "class_name": "Wallet_cloudMiningHistoryTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/Wallet_cloudMiningHistoryTest.java.Wallet_cloudMiningHistoryTest", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Market_uiKlinesTest.java.Market_uiKlinesTest.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/Market_uiKlinesTest.java", "class_name": "Market_uiKlinesTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/Market_uiKlinesTest.java.Market_uiKlinesTest", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Mining_hashrateResaleRequestTest.java.Mining_hashrateResaleRequestTest.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/Mining_hashrateResaleRequestTest.java", "class_name": "Mining_hashrateResaleRequestTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/Mining_hashrateResaleRequestTest.java.Mining_hashrateResaleRequestTest", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Trade_sorOrderTest.java.Trade_sorOrderTest.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/Trade_sorOrderTest.java", "class_name": "Trade_sorOrderTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/Trade_sorOrderTest.java.Trade_sorOrderTest", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/AutoInvest_redeemIndexPlanTest.java.AutoInvest_redeemIndexPlanTest.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/AutoInvest_redeemIndexPlanTest.java", "class_name": "AutoInvest_redeemIndexPlanTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/AutoInvest_redeemIndexPlanTest.java.AutoInvest_redeemIndexPlanTest", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_marginTransferTest.java.SubAccount_marginTransferTest.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_marginTransferTest.java", "class_name": "SubAccount_marginTransferTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_marginTransferTest.java.SubAccount_marginTransferTest", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Trade_ocoOrderTest.java.Trade_ocoOrderTest.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/Trade_ocoOrderTest.java", "class_name": "Trade_ocoOrderTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/Trade_ocoOrderTest.java.Trade_ocoOrderTest", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_subscribeFlexibleProductTest.java.SimpleEarn_subscribeFlexibleProductTest.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_subscribeFlexibleProductTest.java", "class_name": "SimpleEarn_subscribeFlexibleProductTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_subscribeFlexibleProductTest.java.SimpleEarn_subscribeFlexibleProductTest", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Mining_hashrateResaleDetailTest.java.Mining_hashrateResaleDetailTest.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/Mining_hashrateResaleDetailTest.java", "class_name": "Mining_hashrateResaleDetailTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/Mining_hashrateResaleDetailTest.java.Mining_hashrateResaleDetailTest", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_depositAddressTest.java.SubAccount_depositAddressTest.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_depositAddressTest.java", "class_name": "SubAccount_depositAddressTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_depositAddressTest.java.SubAccount_depositAddressTest", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/MockData.java.MockData.[]MockData()", "name": "MockData", "arg_nums": 0, "params": [], "return_type": "", "signature": "private MockData()", "original_string": "    private MockData() {\n    }", "default_arguments": null, "file": "src/test/java/unit/MockData.java", "class_name": "MockData", "class_uri": "src/test/java/unit/MockData.java.MockData", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/TestResponseHandler.java.TestResponseHandler.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.request = new Request.Builder()\n                .url(mockWebServer.url(\"/\").toString())\n                .addHeader(\"Accept\", \"application/json\")\n                .build();\n    }", "default_arguments": null, "file": "src/test/java/unit/TestResponseHandler.java", "class_name": "TestResponseHandler", "class_uri": "src/test/java/unit/TestResponseHandler.java.TestResponseHandler", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/MockWebServerDispatcher.java.MockWebServerDispatcher.[]MockWebServerDispatcher()", "name": "MockWebServerDispatcher", "arg_nums": 0, "params": [], "return_type": "", "signature": "private MockWebServerDispatcher()", "original_string": "    private MockWebServerDispatcher() {\n    }", "default_arguments": null, "file": "src/test/java/unit/MockWebServerDispatcher.java", "class_name": "MockWebServerDispatcher", "class_uri": "src/test/java/unit/MockWebServerDispatcher.java.MockWebServerDispatcher", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/MockWebServerDispatcher.java.MockWebServerDispatcher.[Dispatcher]getDispatcher(String,String,String,HttpMethod,int)", "name": "getDispatcher", "arg_nums": 5, "params": [{"name": "prefix", "type": "String"}, {"name": "path", "type": "String"}, {"name": "response", "type": "String"}, {"name": "method", "type": "HttpMethod"}, {"name": "statusCode", "type": "int"}], "return_type": "Dispatcher", "signature": "public static Dispatcher getDispatcher(String prefix, String path, String response, HttpMethod method, int statusCode)", "original_string": "    public static Dispatcher getDispatcher(String prefix, String path, String response, HttpMethod method, int statusCode) {\n        final Dispatcher dispatcher = new Dispatcher() {\n            @Override\n            public MockResponse dispatch(RecordedRequest request) {\n                if ((request.getPath()).contains(prefix + path) && request.getMethod().equals(method.toString())) {\n                    return new MockResponse()\n                            .addHeader(\"Content-Type\", \"application/json; charset=utf-8\")\n                            .setResponseCode(statusCode)\n                            .setBody(response);\n                }\n                return new MockResponse().setResponseCode(MockData.HTTP_STATUS_CLIENT_ERROR);\n            }\n        };\n        return dispatcher;\n    }", "default_arguments": null, "file": "src/test/java/unit/MockWebServerDispatcher.java", "class_name": "MockWebServerDispatcher", "class_uri": "src/test/java/unit/MockWebServerDispatcher.java.MockWebServerDispatcher", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Dispatcher", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/websocketapi/TestWebSocketApiRequestHandler.java.TestWebSocketApiRequestHandler.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.params = new JSONObject();\n    }", "default_arguments": null, "file": "src/test/java/unit/websocketapi/TestWebSocketApiRequestHandler.java", "class_name": "TestWebSocketApiRequestHandler", "class_uri": "src/test/java/unit/websocketapi/TestWebSocketApiRequestHandler.java.TestWebSocketApiRequestHandler", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestFuturesPositionRisk.java.TestFuturesPositionRisk.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestFuturesPositionRisk.java", "class_name": "TestFuturesPositionRisk", "class_uri": "src/test/java/unit/spot/subaccount/TestFuturesPositionRisk.java.TestFuturesPositionRisk", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestFuturesPositionRiskV2.java.TestFuturesPositionRiskV2.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestFuturesPositionRiskV2.java", "class_name": "TestFuturesPositionRiskV2", "class_uri": "src/test/java/unit/spot/subaccount/TestFuturesPositionRiskV2.java.TestFuturesPositionRiskV2", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestFuturesAccountV2.java.TestFuturesAccountV2.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestFuturesAccountV2.java", "class_name": "TestFuturesAccountV2", "class_uri": "src/test/java/unit/spot/subaccount/TestFuturesAccountV2.java.TestFuturesAccountV2", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestFuturesAccount.java.TestFuturesAccount.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestFuturesAccount.java", "class_name": "TestFuturesAccount", "class_uri": "src/test/java/unit/spot/subaccount/TestFuturesAccount.java.TestFuturesAccount", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestFuturesAccountSummaryV2.java.TestFuturesAccountSummaryV2.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestFuturesAccountSummaryV2.java", "class_name": "TestFuturesAccountSummaryV2", "class_uri": "src/test/java/unit/spot/subaccount/TestFuturesAccountSummaryV2.java.TestFuturesAccountSummaryV2", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestDepositHistory.java.TestDepositHistory.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestDepositHistory.java", "class_name": "TestDepositHistory", "class_uri": "src/test/java/unit/spot/subaccount/TestDepositHistory.java.TestDepositHistory", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestFuturesInternalTransfer.java.TestFuturesInternalTransfer.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestFuturesInternalTransfer.java", "class_name": "TestFuturesInternalTransfer", "class_uri": "src/test/java/unit/spot/subaccount/TestFuturesInternalTransfer.java.TestFuturesInternalTransfer", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestTransferHistory.java.TestTransferHistory.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestTransferHistory.java", "class_name": "TestTransferHistory", "class_uri": "src/test/java/unit/spot/subaccount/TestTransferHistory.java.TestTransferHistory", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestGetIpRestriction.java.TestGetIpRestriction.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestGetIpRestriction.java", "class_name": "TestGetIpRestriction", "class_uri": "src/test/java/unit/spot/subaccount/TestGetIpRestriction.java.TestGetIpRestriction", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestEnableLeverageToken.java.TestEnableLeverageToken.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestEnableLeverageToken.java", "class_name": "TestEnableLeverageToken", "class_uri": "src/test/java/unit/spot/subaccount/TestEnableLeverageToken.java.TestEnableLeverageToken", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestEnableFutures.java.TestEnableFutures.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestEnableFutures.java", "class_name": "TestEnableFutures", "class_uri": "src/test/java/unit/spot/subaccount/TestEnableFutures.java.TestEnableFutures", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestManagedSubDeposit.java.TestManagedSubDeposit.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestManagedSubDeposit.java", "class_name": "TestManagedSubDeposit", "class_uri": "src/test/java/unit/spot/subaccount/TestManagedSubDeposit.java.TestManagedSubDeposit", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestEnableMargin.java.TestEnableMargin.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestEnableMargin.java", "class_name": "TestEnableMargin", "class_uri": "src/test/java/unit/spot/subaccount/TestEnableMargin.java.TestEnableMargin", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestFuturesSummary.java.TestFuturesSummary.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestFuturesSummary.java", "class_name": "TestFuturesSummary", "class_uri": "src/test/java/unit/spot/subaccount/TestFuturesSummary.java.TestFuturesSummary", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestManagedSubDetails.java.TestManagedSubDetails.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestManagedSubDetails.java", "class_name": "TestManagedSubDetails", "class_uri": "src/test/java/unit/spot/subaccount/TestManagedSubDetails.java.TestManagedSubDetails", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestDepositAddress.java.TestDepositAddress.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestDepositAddress.java", "class_name": "TestDepositAddress", "class_uri": "src/test/java/unit/spot/subaccount/TestDepositAddress.java.TestDepositAddress", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestSubAccountToMaster.java.TestSubAccountToMaster.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestSubAccountToMaster.java", "class_name": "TestSubAccountToMaster", "class_uri": "src/test/java/unit/spot/subaccount/TestSubAccountToMaster.java.TestSubAccountToMaster", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestSubAccountList.java.TestSubAccountList.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestSubAccountList.java", "class_name": "TestSubAccountList", "class_uri": "src/test/java/unit/spot/subaccount/TestSubAccountList.java.TestSubAccountList", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestUpdateIpRestriction.java.TestUpdateIpRestriction.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestUpdateIpRestriction.java", "class_name": "TestUpdateIpRestriction", "class_uri": "src/test/java/unit/spot/subaccount/TestUpdateIpRestriction.java.TestUpdateIpRestriction", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestAssets.java.TestAssets.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestAssets.java", "class_name": "TestAssets", "class_uri": "src/test/java/unit/spot/subaccount/TestAssets.java.TestAssets", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestFuturesTransfer.java.TestFuturesTransfer.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestFuturesTransfer.java", "class_name": "TestFuturesTransfer", "class_uri": "src/test/java/unit/spot/subaccount/TestFuturesTransfer.java.TestFuturesTransfer", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestDeleteIpList.java.TestDeleteIpList.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestDeleteIpList.java", "class_name": "TestDeleteIpList", "class_uri": "src/test/java/unit/spot/subaccount/TestDeleteIpList.java.TestDeleteIpList", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestMarginAccount.java.TestMarginAccount.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestMarginAccount.java", "class_name": "TestMarginAccount", "class_uri": "src/test/java/unit/spot/subaccount/TestMarginAccount.java.TestMarginAccount", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestMarginAccountSummary.java.TestMarginAccountSummary.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestMarginAccountSummary.java", "class_name": "TestMarginAccountSummary", "class_uri": "src/test/java/unit/spot/subaccount/TestMarginAccountSummary.java.TestMarginAccountSummary", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestGetFuturesInternalTransfer.java.TestGetFuturesInternalTransfer.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestGetFuturesInternalTransfer.java", "class_name": "TestGetFuturesInternalTransfer", "class_uri": "src/test/java/unit/spot/subaccount/TestGetFuturesInternalTransfer.java.TestGetFuturesInternalTransfer", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestUniversalTransfer.java.TestUniversalTransfer.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestUniversalTransfer.java", "class_name": "TestUniversalTransfer", "class_uri": "src/test/java/unit/spot/subaccount/TestUniversalTransfer.java.TestUniversalTransfer", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestAccountStatus.java.TestAccountStatus.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestAccountStatus.java", "class_name": "TestAccountStatus", "class_uri": "src/test/java/unit/spot/subaccount/TestAccountStatus.java.TestAccountStatus", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestMarginTransfer.java.TestMarginTransfer.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestMarginTransfer.java", "class_name": "TestMarginTransfer", "class_uri": "src/test/java/unit/spot/subaccount/TestMarginTransfer.java.TestMarginTransfer", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestSpotAccountSummary.java.TestSpotAccountSummary.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestSpotAccountSummary.java", "class_name": "TestSpotAccountSummary", "class_uri": "src/test/java/unit/spot/subaccount/TestSpotAccountSummary.java.TestSpotAccountSummary", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestSubAccountToSubAccount.java.TestSubAccountToSubAccount.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestSubAccountToSubAccount.java", "class_name": "TestSubAccountToSubAccount", "class_uri": "src/test/java/unit/spot/subaccount/TestSubAccountToSubAccount.java.TestSubAccountToSubAccount", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestQueryUniversalTransfer.java.TestQueryUniversalTransfer.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestQueryUniversalTransfer.java", "class_name": "TestQueryUniversalTransfer", "class_uri": "src/test/java/unit/spot/subaccount/TestQueryUniversalTransfer.java.TestQueryUniversalTransfer", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestManagedSubAccountSnapshot.java.TestManagedSubAccountSnapshot.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestManagedSubAccountSnapshot.java", "class_name": "TestManagedSubAccountSnapshot", "class_uri": "src/test/java/unit/spot/subaccount/TestManagedSubAccountSnapshot.java.TestManagedSubAccountSnapshot", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestSpotTransferHistory.java.TestSpotTransferHistory.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestSpotTransferHistory.java", "class_name": "TestSpotTransferHistory", "class_uri": "src/test/java/unit/spot/subaccount/TestSpotTransferHistory.java.TestSpotTransferHistory", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestManagedSubWithdraw.java.TestManagedSubWithdraw.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestManagedSubWithdraw.java", "class_name": "TestManagedSubWithdraw", "class_uri": "src/test/java/unit/spot/subaccount/TestManagedSubWithdraw.java.TestManagedSubWithdraw", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestCreateVirtualSubAccount.java.TestCreateVirtualSubAccount.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestCreateVirtualSubAccount.java", "class_name": "TestCreateVirtualSubAccount", "class_uri": "src/test/java/unit/spot/subaccount/TestCreateVirtualSubAccount.java.TestCreateVirtualSubAccount", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestIsolatedMarginTier.java.TestIsolatedMarginTier.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestIsolatedMarginTier.java", "class_name": "TestIsolatedMarginTier", "class_uri": "src/test/java/unit/spot/margin/TestIsolatedMarginTier.java.TestIsolatedMarginTier", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestGetOcoOrder.java.TestGetOcoOrder.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestGetOcoOrder.java", "class_name": "TestGetOcoOrder", "class_uri": "src/test/java/unit/spot/margin/TestGetOcoOrder.java.TestGetOcoOrder", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestAllIsolatedSymbols.java.TestAllIsolatedSymbols.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestAllIsolatedSymbols.java", "class_name": "TestAllIsolatedSymbols", "class_uri": "src/test/java/unit/spot/margin/TestAllIsolatedSymbols.java.TestAllIsolatedSymbols", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestGetMarginOpenOrders.java.TestGetMarginOpenOrders.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestGetMarginOpenOrders.java", "class_name": "TestGetMarginOpenOrders", "class_uri": "src/test/java/unit/spot/margin/TestGetMarginOpenOrders.java.TestGetMarginOpenOrders", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestGetAllMarginOrders.java.TestGetAllMarginOrders.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestGetAllMarginOrders.java", "class_name": "TestGetAllMarginOrders", "class_uri": "src/test/java/unit/spot/margin/TestGetAllMarginOrders.java.TestGetAllMarginOrders", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestOrderRateLimit.java.TestOrderRateLimit.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestOrderRateLimit.java", "class_name": "TestOrderRateLimit", "class_uri": "src/test/java/unit/spot/margin/TestOrderRateLimit.java.TestOrderRateLimit", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestMaxBorrow.java.TestMaxBorrow.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestMaxBorrow.java", "class_name": "TestMaxBorrow", "class_uri": "src/test/java/unit/spot/margin/TestMaxBorrow.java.TestMaxBorrow", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestIsolatedAccount.java.TestIsolatedAccount.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestIsolatedAccount.java", "class_name": "TestIsolatedAccount", "class_uri": "src/test/java/unit/spot/margin/TestIsolatedAccount.java.TestIsolatedAccount", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestMaxTransferable.java.TestMaxTransferable.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestMaxTransferable.java", "class_name": "TestMaxTransferable", "class_uri": "src/test/java/unit/spot/margin/TestMaxTransferable.java.TestMaxTransferable", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestLeverageBracket.java.TestLeverageBracket.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestLeverageBracket.java", "class_name": "TestLeverageBracket", "class_uri": "src/test/java/unit/spot/margin/TestLeverageBracket.java.TestLeverageBracket", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestSmallLiabilityAssets.java.TestSmallLiabilityAssets.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestSmallLiabilityAssets.java", "class_name": "TestSmallLiabilityAssets", "class_uri": "src/test/java/unit/spot/margin/TestSmallLiabilityAssets.java.TestSmallLiabilityAssets", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestTransferHistory.java.TestTransferHistory.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestTransferHistory.java", "class_name": "TestTransferHistory", "class_uri": "src/test/java/unit/spot/margin/TestTransferHistory.java.TestTransferHistory", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestCancelMarginOcoOrder.java.TestCancelMarginOcoOrder.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestCancelMarginOcoOrder.java", "class_name": "TestCancelMarginOcoOrder", "class_uri": "src/test/java/unit/spot/margin/TestCancelMarginOcoOrder.java.TestCancelMarginOcoOrder", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestGetMarginOrder.java.TestGetMarginOrder.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestGetMarginOrder.java", "class_name": "TestGetMarginOrder", "class_uri": "src/test/java/unit/spot/margin/TestGetMarginOrder.java.TestGetMarginOrder", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestNextHourlyInterestRate.java.TestNextHourlyInterestRate.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestNextHourlyInterestRate.java", "class_name": "TestNextHourlyInterestRate", "class_uri": "src/test/java/unit/spot/margin/TestNextHourlyInterestRate.java.TestNextHourlyInterestRate", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestIsolatedMarginData.java.TestIsolatedMarginData.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestIsolatedMarginData.java", "class_name": "TestIsolatedMarginData", "class_uri": "src/test/java/unit/spot/margin/TestIsolatedMarginData.java.TestIsolatedMarginData", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestCancelAllMarginOrders.java.TestCancelAllMarginOrders.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestCancelAllMarginOrders.java", "class_name": "TestCancelAllMarginOrders", "class_uri": "src/test/java/unit/spot/margin/TestCancelAllMarginOrders.java.TestCancelAllMarginOrders", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestAllAssets.java.TestAllAssets.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestAllAssets.java", "class_name": "TestAllAssets", "class_uri": "src/test/java/unit/spot/margin/TestAllAssets.java.TestAllAssets", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestTrades.java.TestTrades.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestTrades.java", "class_name": "TestTrades", "class_uri": "src/test/java/unit/spot/margin/TestTrades.java.TestTrades", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestForceLiquidationRec.java.TestForceLiquidationRec.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestForceLiquidationRec.java", "class_name": "TestForceLiquidationRec", "class_uri": "src/test/java/unit/spot/margin/TestForceLiquidationRec.java.TestForceLiquidationRec", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestInterestHistory.java.TestInterestHistory.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestInterestHistory.java", "class_name": "TestInterestHistory", "class_uri": "src/test/java/unit/spot/margin/TestInterestHistory.java.TestInterestHistory", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestPriceIndex.java.TestPriceIndex.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestPriceIndex.java", "class_name": "TestPriceIndex", "class_uri": "src/test/java/unit/spot/margin/TestPriceIndex.java.TestPriceIndex", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestCapitalFlow.java.TestCapitalFlow.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestCapitalFlow.java", "class_name": "TestCapitalFlow", "class_uri": "src/test/java/unit/spot/margin/TestCapitalFlow.java.TestCapitalFlow", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestSmallLiabilityExchangeHistory.java.TestSmallLiabilityExchangeHistory.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestSmallLiabilityExchangeHistory.java", "class_name": "TestSmallLiabilityExchangeHistory", "class_uri": "src/test/java/unit/spot/margin/TestSmallLiabilityExchangeHistory.java.TestSmallLiabilityExchangeHistory", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestNewMarginOrder.java.TestNewMarginOrder.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestNewMarginOrder.java", "class_name": "TestNewMarginOrder", "class_uri": "src/test/java/unit/spot/margin/TestNewMarginOrder.java.TestNewMarginOrder", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestCrossMarginCollateralRatio.java.TestCrossMarginCollateralRatio.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestCrossMarginCollateralRatio.java", "class_name": "TestCrossMarginCollateralRatio", "class_uri": "src/test/java/unit/spot/margin/TestCrossMarginCollateralRatio.java.TestCrossMarginCollateralRatio", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestIsolatedAccountLimit.java.TestIsolatedAccountLimit.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestIsolatedAccountLimit.java", "class_name": "TestIsolatedAccountLimit", "class_uri": "src/test/java/unit/spot/margin/TestIsolatedAccountLimit.java.TestIsolatedAccountLimit", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestGetBnbBurn.java.TestGetBnbBurn.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestGetBnbBurn.java", "class_name": "TestGetBnbBurn", "class_uri": "src/test/java/unit/spot/margin/TestGetBnbBurn.java.TestGetBnbBurn", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestEnableIsolatedAccount.java.TestEnableIsolatedAccount.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestEnableIsolatedAccount.java", "class_name": "TestEnableIsolatedAccount", "class_uri": "src/test/java/unit/spot/margin/TestEnableIsolatedAccount.java.TestEnableIsolatedAccount", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestMarginAccount.java.TestMarginAccount.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestMarginAccount.java", "class_name": "TestMarginAccount", "class_uri": "src/test/java/unit/spot/margin/TestMarginAccount.java.TestMarginAccount", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestGetAllMarginOcoOrders.java.TestGetAllMarginOcoOrders.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestGetAllMarginOcoOrders.java", "class_name": "TestGetAllMarginOcoOrders", "class_uri": "src/test/java/unit/spot/margin/TestGetAllMarginOcoOrders.java.TestGetAllMarginOcoOrders", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestBnbBurn.java.TestBnbBurn.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestBnbBurn.java", "class_name": "TestBnbBurn", "class_uri": "src/test/java/unit/spot/margin/TestBnbBurn.java.TestBnbBurn", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestNewMarginOcoOrder.java.TestNewMarginOcoOrder.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestNewMarginOcoOrder.java", "class_name": "TestNewMarginOcoOrder", "class_uri": "src/test/java/unit/spot/margin/TestNewMarginOcoOrder.java.TestNewMarginOcoOrder", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestExchangeSmallLiability.java.TestExchangeSmallLiability.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestExchangeSmallLiability.java", "class_name": "TestExchangeSmallLiability", "class_uri": "src/test/java/unit/spot/margin/TestExchangeSmallLiability.java.TestExchangeSmallLiability", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestAvailableInventory.java.TestAvailableInventory.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestAvailableInventory.java", "class_name": "TestAvailableInventory", "class_uri": "src/test/java/unit/spot/margin/TestAvailableInventory.java.TestAvailableInventory", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestDelistSchedule.java.TestDelistSchedule.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestDelistSchedule.java", "class_name": "TestDelistSchedule", "class_uri": "src/test/java/unit/spot/margin/TestDelistSchedule.java.TestDelistSchedule", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestCrossMarginData.java.TestCrossMarginData.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestCrossMarginData.java", "class_name": "TestCrossMarginData", "class_uri": "src/test/java/unit/spot/margin/TestCrossMarginData.java.TestCrossMarginData", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestInterestRateHistory.java.TestInterestRateHistory.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestInterestRateHistory.java", "class_name": "TestInterestRateHistory", "class_uri": "src/test/java/unit/spot/margin/TestInterestRateHistory.java.TestInterestRateHistory", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestAdjustCrossMarginMaxLeverage.java.TestAdjustCrossMarginMaxLeverage.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestAdjustCrossMarginMaxLeverage.java", "class_name": "TestAdjustCrossMarginMaxLeverage", "class_uri": "src/test/java/unit/spot/margin/TestAdjustCrossMarginMaxLeverage.java.TestAdjustCrossMarginMaxLeverage", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestGetMarginOcoOpenOrders.java.TestGetMarginOcoOpenOrders.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestGetMarginOcoOpenOrders.java", "class_name": "TestGetMarginOcoOpenOrders", "class_uri": "src/test/java/unit/spot/margin/TestGetMarginOcoOpenOrders.java.TestGetMarginOcoOpenOrders", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestTradeCoeff.java.TestTradeCoeff.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestTradeCoeff.java", "class_name": "TestTradeCoeff", "class_uri": "src/test/java/unit/spot/margin/TestTradeCoeff.java.TestTradeCoeff", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestCancelMarginOrder.java.TestCancelMarginOrder.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestCancelMarginOrder.java", "class_name": "TestCancelMarginOrder", "class_uri": "src/test/java/unit/spot/margin/TestCancelMarginOrder.java.TestCancelMarginOrder", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestAllPairs.java.TestAllPairs.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestAllPairs.java", "class_name": "TestAllPairs", "class_uri": "src/test/java/unit/spot/margin/TestAllPairs.java.TestAllPairs", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestDisableIsolatedAccount.java.TestDisableIsolatedAccount.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestDisableIsolatedAccount.java", "class_name": "TestDisableIsolatedAccount", "class_uri": "src/test/java/unit/spot/margin/TestDisableIsolatedAccount.java.TestDisableIsolatedAccount", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/portfoliomargin/TestAutoRepayFuturesStatus.java.TestAutoRepayFuturesStatus.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/portfoliomargin/TestAutoRepayFuturesStatus.java", "class_name": "TestAutoRepayFuturesStatus", "class_uri": "src/test/java/unit/spot/portfoliomargin/TestAutoRepayFuturesStatus.java.TestAutoRepayFuturesStatus", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/portfoliomargin/TestAssetIndexPrice.java.TestAssetIndexPrice.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/portfoliomargin/TestAssetIndexPrice.java", "class_name": "TestAssetIndexPrice", "class_uri": "src/test/java/unit/spot/portfoliomargin/TestAssetIndexPrice.java.TestAssetIndexPrice", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/portfoliomargin/TestBnbTransfer.java.TestBnbTransfer.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/portfoliomargin/TestBnbTransfer.java", "class_name": "TestBnbTransfer", "class_uri": "src/test/java/unit/spot/portfoliomargin/TestBnbTransfer.java.TestBnbTransfer", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/portfoliomargin/TestGetAccount.java.TestGetAccount.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/portfoliomargin/TestGetAccount.java", "class_name": "TestGetAccount", "class_uri": "src/test/java/unit/spot/portfoliomargin/TestGetAccount.java.TestGetAccount", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/portfoliomargin/TestCollateralRate.java.TestCollateralRate.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/portfoliomargin/TestCollateralRate.java", "class_name": "TestCollateralRate", "class_uri": "src/test/java/unit/spot/portfoliomargin/TestCollateralRate.java.TestCollateralRate", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/portfoliomargin/TestBankruptcyLoanRecord.java.TestBankruptcyLoanRecord.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/portfoliomargin/TestBankruptcyLoanRecord.java", "class_name": "TestBankruptcyLoanRecord", "class_uri": "src/test/java/unit/spot/portfoliomargin/TestBankruptcyLoanRecord.java.TestBankruptcyLoanRecord", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/portfoliomargin/TestInterestHistory.java.TestInterestHistory.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/portfoliomargin/TestInterestHistory.java", "class_name": "TestInterestHistory", "class_uri": "src/test/java/unit/spot/portfoliomargin/TestInterestHistory.java.TestInterestHistory", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/portfoliomargin/TestRepayFutures.java.TestRepayFutures.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/portfoliomargin/TestRepayFutures.java", "class_name": "TestRepayFutures", "class_uri": "src/test/java/unit/spot/portfoliomargin/TestRepayFutures.java.TestRepayFutures", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/portfoliomargin/TestAssetCollection.java.TestAssetCollection.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/portfoliomargin/TestAssetCollection.java", "class_name": "TestAssetCollection", "class_uri": "src/test/java/unit/spot/portfoliomargin/TestAssetCollection.java.TestAssetCollection", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/portfoliomargin/TestAssetLeverage.java.TestAssetLeverage.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/portfoliomargin/TestAssetLeverage.java", "class_name": "TestAssetLeverage", "class_uri": "src/test/java/unit/spot/portfoliomargin/TestAssetLeverage.java.TestAssetLeverage", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/portfoliomargin/TestSwitchAutoRepayFutures.java.TestSwitchAutoRepayFutures.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/portfoliomargin/TestSwitchAutoRepayFutures.java", "class_name": "TestSwitchAutoRepayFutures", "class_uri": "src/test/java/unit/spot/portfoliomargin/TestSwitchAutoRepayFutures.java.TestSwitchAutoRepayFutures", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/portfoliomargin/TestRepay.java.TestRepay.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/portfoliomargin/TestRepay.java", "class_name": "TestRepay", "class_uri": "src/test/java/unit/spot/portfoliomargin/TestRepay.java.TestRepay", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/portfoliomargin/TestAutoCollection.java.TestAutoCollection.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/portfoliomargin/TestAutoCollection.java", "class_name": "TestAutoCollection", "class_uri": "src/test/java/unit/spot/portfoliomargin/TestAutoCollection.java.TestAutoCollection", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/spotalgo/TestCancelOrder.java.TestCancelOrder.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/spotalgo/TestCancelOrder.java", "class_name": "TestCancelOrder", "class_uri": "src/test/java/unit/spot/spotalgo/TestCancelOrder.java.TestCancelOrder", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/spotalgo/TestGetHistoricalOrders.java.TestGetHistoricalOrders.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/spotalgo/TestGetHistoricalOrders.java", "class_name": "TestGetHistoricalOrders", "class_uri": "src/test/java/unit/spot/spotalgo/TestGetHistoricalOrders.java.TestGetHistoricalOrders", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/spotalgo/TestGetSubOrders.java.TestGetSubOrders.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/spotalgo/TestGetSubOrders.java", "class_name": "TestGetSubOrders", "class_uri": "src/test/java/unit/spot/spotalgo/TestGetSubOrders.java.TestGetSubOrders", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/spotalgo/TestGetOpenTwapOrders.java.TestGetOpenTwapOrders.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/spotalgo/TestGetOpenTwapOrders.java", "class_name": "TestGetOpenTwapOrders", "class_uri": "src/test/java/unit/spot/spotalgo/TestGetOpenTwapOrders.java.TestGetOpenTwapOrders", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/spotalgo/TestTwapOrder.java.TestTwapOrder.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/spotalgo/TestTwapOrder.java", "class_name": "TestTwapOrder", "class_uri": "src/test/java/unit/spot/spotalgo/TestTwapOrder.java.TestTwapOrder", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/pay/TestTransactions.java.TestTransactions.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/pay/TestTransactions.java", "class_name": "TestTransactions", "class_uri": "src/test/java/unit/spot/pay/TestTransactions.java.TestTransactions", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/mining/TestHashrateResaleList.java.TestHashrateResaleList.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/mining/TestHashrateResaleList.java", "class_name": "TestHashrateResaleList", "class_uri": "src/test/java/unit/spot/mining/TestHashrateResaleList.java.TestHashrateResaleList", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/mining/TestHashrateResaleRequest.java.TestHashrateResaleRequest.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/mining/TestHashrateResaleRequest.java", "class_name": "TestHashrateResaleRequest", "class_uri": "src/test/java/unit/spot/mining/TestHashrateResaleRequest.java.TestHashrateResaleRequest", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/mining/TestAccountList.java.TestAccountList.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/mining/TestAccountList.java", "class_name": "TestAccountList", "class_uri": "src/test/java/unit/spot/mining/TestAccountList.java.TestAccountList", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/mining/TestDetailMinerList.java.TestDetailMinerList.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/mining/TestDetailMinerList.java", "class_name": "TestDetailMinerList", "class_uri": "src/test/java/unit/spot/mining/TestDetailMinerList.java.TestDetailMinerList", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/mining/TestMinerList.java.TestMinerList.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/mining/TestMinerList.java", "class_name": "TestMinerList", "class_uri": "src/test/java/unit/spot/mining/TestMinerList.java.TestMinerList", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/mining/TestBonusList.java.TestBonusList.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/mining/TestBonusList.java", "class_name": "TestBonusList", "class_uri": "src/test/java/unit/spot/mining/TestBonusList.java.TestBonusList", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/mining/TestCancelHashrateResaleConfig.java.TestCancelHashrateResaleConfig.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/mining/TestCancelHashrateResaleConfig.java", "class_name": "TestCancelHashrateResaleConfig", "class_uri": "src/test/java/unit/spot/mining/TestCancelHashrateResaleConfig.java.TestCancelHashrateResaleConfig", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/mining/TestAccountEarning.java.TestAccountEarning.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/mining/TestAccountEarning.java", "class_name": "TestAccountEarning", "class_uri": "src/test/java/unit/spot/mining/TestAccountEarning.java.TestAccountEarning", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/mining/TestStatisticsList.java.TestStatisticsList.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/mining/TestStatisticsList.java", "class_name": "TestStatisticsList", "class_uri": "src/test/java/unit/spot/mining/TestStatisticsList.java.TestStatisticsList", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/mining/TestAlogrithm.java.TestAlogrithm.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/mining/TestAlogrithm.java", "class_name": "TestAlogrithm", "class_uri": "src/test/java/unit/spot/mining/TestAlogrithm.java.TestAlogrithm", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/mining/TestCoinName.java.TestCoinName.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/mining/TestCoinName.java", "class_name": "TestCoinName", "class_uri": "src/test/java/unit/spot/mining/TestCoinName.java.TestCoinName", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/mining/TestEarningList.java.TestEarningList.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/mining/TestEarningList.java", "class_name": "TestEarningList", "class_uri": "src/test/java/unit/spot/mining/TestEarningList.java.TestEarningList", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/mining/TestHashrateResaleDetail.java.TestHashrateResaleDetail.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/mining/TestHashrateResaleDetail.java", "class_name": "TestHashrateResaleDetail", "class_uri": "src/test/java/unit/spot/mining/TestHashrateResaleDetail.java.TestHashrateResaleDetail", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/fiat/TestPayments.java.TestPayments.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/fiat/TestPayments.java", "class_name": "TestPayments", "class_uri": "src/test/java/unit/spot/fiat/TestPayments.java.TestPayments", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/fiat/TestOrders.java.TestOrders.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/fiat/TestOrders.java", "class_name": "TestOrders", "class_uri": "src/test/java/unit/spot/fiat/TestOrders.java.TestOrders", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/staking/TestSubEthStaking.java.TestSubEthStaking.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/staking/TestSubEthStaking.java", "class_name": "TestSubEthStaking", "class_uri": "src/test/java/unit/spot/staking/TestSubEthStaking.java.TestSubEthStaking", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/staking/TestEthStakingWbethWrapHistory.java.TestEthStakingWbethWrapHistory.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/staking/TestEthStakingWbethWrapHistory.java", "class_name": "TestEthStakingWbethWrapHistory", "class_uri": "src/test/java/unit/spot/staking/TestEthStakingWbethWrapHistory.java.TestEthStakingWbethWrapHistory", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/staking/TestWrapEthStakingWbeth.java.TestWrapEthStakingWbeth.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/staking/TestWrapEthStakingWbeth.java", "class_name": "TestWrapEthStakingWbeth", "class_uri": "src/test/java/unit/spot/staking/TestWrapEthStakingWbeth.java.TestWrapEthStakingWbeth", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/staking/TestRedeemEthStaking.java.TestRedeemEthStaking.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/staking/TestRedeemEthStaking.java", "class_name": "TestRedeemEthStaking", "class_uri": "src/test/java/unit/spot/staking/TestRedeemEthStaking.java.TestRedeemEthStaking", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/staking/TestEthStakingSubHistory.java.TestEthStakingSubHistory.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/staking/TestEthStakingSubHistory.java", "class_name": "TestEthStakingSubHistory", "class_uri": "src/test/java/unit/spot/staking/TestEthStakingSubHistory.java.TestEthStakingSubHistory", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/staking/TestEthStakingRateHistory.java.TestEthStakingRateHistory.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/staking/TestEthStakingRateHistory.java", "class_name": "TestEthStakingRateHistory", "class_uri": "src/test/java/unit/spot/staking/TestEthStakingRateHistory.java.TestEthStakingRateHistory", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/staking/TestEthStakingRewardsHistory.java.TestEthStakingRewardsHistory.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/staking/TestEthStakingRewardsHistory.java", "class_name": "TestEthStakingRewardsHistory", "class_uri": "src/test/java/unit/spot/staking/TestEthStakingRewardsHistory.java.TestEthStakingRewardsHistory", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/staking/TestEthStakingRedeemHistory.java.TestEthStakingRedeemHistory.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/staking/TestEthStakingRedeemHistory.java", "class_name": "TestEthStakingRedeemHistory", "class_uri": "src/test/java/unit/spot/staking/TestEthStakingRedeemHistory.java.TestEthStakingRedeemHistory", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/staking/TestEthStakingWbethRewardHistory.java.TestEthStakingWbethRewardHistory.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/staking/TestEthStakingWbethRewardHistory.java", "class_name": "TestEthStakingWbethRewardHistory", "class_uri": "src/test/java/unit/spot/staking/TestEthStakingWbethRewardHistory.java.TestEthStakingWbethRewardHistory", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/staking/TestEthStakingAccount.java.TestEthStakingAccount.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/staking/TestEthStakingAccount.java", "class_name": "TestEthStakingAccount", "class_uri": "src/test/java/unit/spot/staking/TestEthStakingAccount.java.TestEthStakingAccount", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/staking/TestEthStakingWbethUnwrapHistory.java.TestEthStakingWbethUnwrapHistory.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/staking/TestEthStakingWbethUnwrapHistory.java", "class_name": "TestEthStakingWbethUnwrapHistory", "class_uri": "src/test/java/unit/spot/staking/TestEthStakingWbethUnwrapHistory.java.TestEthStakingWbethUnwrapHistory", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/staking/TestEthStakingQuota.java.TestEthStakingQuota.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/staking/TestEthStakingQuota.java", "class_name": "TestEthStakingQuota", "class_uri": "src/test/java/unit/spot/staking/TestEthStakingQuota.java.TestEthStakingQuota", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/userdata/TestExtendIsolatedMarginListenKey.java.TestExtendIsolatedMarginListenKey.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/userdata/TestExtendIsolatedMarginListenKey.java", "class_name": "TestExtendIsolatedMarginListenKey", "class_uri": "src/test/java/unit/spot/userdata/TestExtendIsolatedMarginListenKey.java.TestExtendIsolatedMarginListenKey", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/userdata/TestExtendMarginListenKey.java.TestExtendMarginListenKey.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/userdata/TestExtendMarginListenKey.java", "class_name": "TestExtendMarginListenKey", "class_uri": "src/test/java/unit/spot/userdata/TestExtendMarginListenKey.java.TestExtendMarginListenKey", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/userdata/TestCloseMarginListenKey.java.TestCloseMarginListenKey.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/userdata/TestCloseMarginListenKey.java", "class_name": "TestCloseMarginListenKey", "class_uri": "src/test/java/unit/spot/userdata/TestCloseMarginListenKey.java.TestCloseMarginListenKey", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/userdata/TestCloseIsolatedMarginListenKey.java.TestCloseIsolatedMarginListenKey.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/userdata/TestCloseIsolatedMarginListenKey.java", "class_name": "TestCloseIsolatedMarginListenKey", "class_uri": "src/test/java/unit/spot/userdata/TestCloseIsolatedMarginListenKey.java.TestCloseIsolatedMarginListenKey", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/userdata/TestCreateListenKey.java.TestCreateListenKey.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/userdata/TestCreateListenKey.java", "class_name": "TestCreateListenKey", "class_uri": "src/test/java/unit/spot/userdata/TestCreateListenKey.java.TestCreateListenKey", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/userdata/TestCloseListenKey.java.TestCloseListenKey.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/userdata/TestCloseListenKey.java", "class_name": "TestCloseListenKey", "class_uri": "src/test/java/unit/spot/userdata/TestCloseListenKey.java.TestCloseListenKey", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/userdata/TestExtendListenKey.java.TestExtendListenKey.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/userdata/TestExtendListenKey.java", "class_name": "TestExtendListenKey", "class_uri": "src/test/java/unit/spot/userdata/TestExtendListenKey.java.TestExtendListenKey", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/userdata/TestCreateIsolatedMarginListenKey.java.TestCreateIsolatedMarginListenKey.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/userdata/TestCreateIsolatedMarginListenKey.java", "class_name": "TestCreateIsolatedMarginListenKey", "class_uri": "src/test/java/unit/spot/userdata/TestCreateIsolatedMarginListenKey.java.TestCreateIsolatedMarginListenKey", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/userdata/TestCreateMarginListenKey.java.TestCreateMarginListenKey.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/userdata/TestCreateMarginListenKey.java", "class_name": "TestCreateMarginListenKey", "class_uri": "src/test/java/unit/spot/userdata/TestCreateMarginListenKey.java.TestCreateMarginListenKey", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/autoinvest/TestTargetAssetList.java.TestTargetAssetList.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/autoinvest/TestTargetAssetList.java", "class_name": "TestTargetAssetList", "class_uri": "src/test/java/unit/spot/autoinvest/TestTargetAssetList.java.TestTargetAssetList", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/autoinvest/TestIndexPlanRebalanceInfo.java.TestIndexPlanRebalanceInfo.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/autoinvest/TestIndexPlanRebalanceInfo.java", "class_name": "TestIndexPlanRebalanceInfo", "class_uri": "src/test/java/unit/spot/autoinvest/TestIndexPlanRebalanceInfo.java.TestIndexPlanRebalanceInfo", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/autoinvest/TestIndexPlanRedeemHistory.java.TestIndexPlanRedeemHistory.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/autoinvest/TestIndexPlanRedeemHistory.java", "class_name": "TestIndexPlanRedeemHistory", "class_uri": "src/test/java/unit/spot/autoinvest/TestIndexPlanRedeemHistory.java.TestIndexPlanRedeemHistory", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/autoinvest/TestSourceAssetList.java.TestSourceAssetList.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/autoinvest/TestSourceAssetList.java", "class_name": "TestSourceAssetList", "class_uri": "src/test/java/unit/spot/autoinvest/TestSourceAssetList.java.TestSourceAssetList", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/autoinvest/TestAllSourceAndTargetAssets.java.TestAllSourceAndTargetAssets.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/autoinvest/TestAllSourceAndTargetAssets.java", "class_name": "TestAllSourceAndTargetAssets", "class_uri": "src/test/java/unit/spot/autoinvest/TestAllSourceAndTargetAssets.java.TestAllSourceAndTargetAssets", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/autoinvest/TestRedeemIndexPlan.java.TestRedeemIndexPlan.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/autoinvest/TestRedeemIndexPlan.java", "class_name": "TestRedeemIndexPlan", "class_uri": "src/test/java/unit/spot/autoinvest/TestRedeemIndexPlan.java.TestRedeemIndexPlan", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/autoinvest/TestIndexInfo.java.TestIndexInfo.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/autoinvest/TestIndexInfo.java", "class_name": "TestIndexInfo", "class_uri": "src/test/java/unit/spot/autoinvest/TestIndexInfo.java.TestIndexInfo", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/autoinvest/TestChangePlanStatus.java.TestChangePlanStatus.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/autoinvest/TestChangePlanStatus.java", "class_name": "TestChangePlanStatus", "class_uri": "src/test/java/unit/spot/autoinvest/TestChangePlanStatus.java.TestChangePlanStatus", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/autoinvest/TestPlanSubsHistory.java.TestPlanSubsHistory.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/autoinvest/TestPlanSubsHistory.java", "class_name": "TestPlanSubsHistory", "class_uri": "src/test/java/unit/spot/autoinvest/TestPlanSubsHistory.java.TestPlanSubsHistory", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/autoinvest/TestTargetAssetRoiList.java.TestTargetAssetRoiList.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/autoinvest/TestTargetAssetRoiList.java", "class_name": "TestTargetAssetRoiList", "class_uri": "src/test/java/unit/spot/autoinvest/TestTargetAssetRoiList.java.TestTargetAssetRoiList", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/autoinvest/TestOnetimeTransactionStatus.java.TestOnetimeTransactionStatus.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/autoinvest/TestOnetimeTransactionStatus.java", "class_name": "TestOnetimeTransactionStatus", "class_uri": "src/test/java/unit/spot/autoinvest/TestOnetimeTransactionStatus.java.TestOnetimeTransactionStatus", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/autoinvest/TestUserIndexPlans.java.TestUserIndexPlans.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/autoinvest/TestUserIndexPlans.java", "class_name": "TestUserIndexPlans", "class_uri": "src/test/java/unit/spot/autoinvest/TestUserIndexPlans.java.TestUserIndexPlans", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/autoinvest/TestSubmitOneTimeTransaction.java.TestSubmitOneTimeTransaction.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/autoinvest/TestSubmitOneTimeTransaction.java", "class_name": "TestSubmitOneTimeTransaction", "class_uri": "src/test/java/unit/spot/autoinvest/TestSubmitOneTimeTransaction.java.TestSubmitOneTimeTransaction", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/autoinvest/TestPlansList.java.TestPlansList.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/autoinvest/TestPlansList.java", "class_name": "TestPlansList", "class_uri": "src/test/java/unit/spot/autoinvest/TestPlansList.java.TestPlansList", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/autoinvest/TestHoldingPlan.java.TestHoldingPlan.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/autoinvest/TestHoldingPlan.java", "class_name": "TestHoldingPlan", "class_uri": "src/test/java/unit/spot/autoinvest/TestHoldingPlan.java.TestHoldingPlan", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/wallet/TestDustLog.java.TestDustLog.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/wallet/TestDustLog.java", "class_name": "TestDustLog", "class_uri": "src/test/java/unit/spot/wallet/TestDustLog.java.TestDustLog", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/wallet/TestCoinInfo.java.TestCoinInfo.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/wallet/TestCoinInfo.java", "class_name": "TestCoinInfo", "class_uri": "src/test/java/unit/spot/wallet/TestCoinInfo.java.TestCoinInfo", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/wallet/TestDepositHistory.java.TestDepositHistory.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/wallet/TestDepositHistory.java", "class_name": "TestDepositHistory", "class_uri": "src/test/java/unit/spot/wallet/TestDepositHistory.java.TestDepositHistory", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/wallet/TestWalletBalance.java.TestWalletBalance.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/wallet/TestWalletBalance.java", "class_name": "TestWalletBalance", "class_uri": "src/test/java/unit/spot/wallet/TestWalletBalance.java.TestWalletBalance", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/wallet/TestGetUserAsset.java.TestGetUserAsset.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/wallet/TestGetUserAsset.java", "class_name": "TestGetUserAsset", "class_uri": "src/test/java/unit/spot/wallet/TestGetUserAsset.java.TestGetUserAsset", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/wallet/TestDepositAddresses.java.TestDepositAddresses.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/wallet/TestDepositAddresses.java", "class_name": "TestDepositAddresses", "class_uri": "src/test/java/unit/spot/wallet/TestDepositAddresses.java.TestDepositAddresses", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/wallet/TestWithdraw.java.TestWithdraw.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/wallet/TestWithdraw.java", "class_name": "TestWithdraw", "class_uri": "src/test/java/unit/spot/wallet/TestWithdraw.java.TestWithdraw", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/wallet/TestAssetDividend.java.TestAssetDividend.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/wallet/TestAssetDividend.java", "class_name": "TestAssetDividend", "class_uri": "src/test/java/unit/spot/wallet/TestAssetDividend.java.TestAssetDividend", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/wallet/TestDisableFastWithdraw.java.TestDisableFastWithdraw.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/wallet/TestDisableFastWithdraw.java", "class_name": "TestDisableFastWithdraw", "class_uri": "src/test/java/unit/spot/wallet/TestDisableFastWithdraw.java.TestDisableFastWithdraw", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/wallet/TestEnableFastWithdraw.java.TestEnableFastWithdraw.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/wallet/TestEnableFastWithdraw.java", "class_name": "TestEnableFastWithdraw", "class_uri": "src/test/java/unit/spot/wallet/TestEnableFastWithdraw.java.TestEnableFastWithdraw", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/wallet/TestAssetDetail.java.TestAssetDetail.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/wallet/TestAssetDetail.java", "class_name": "TestAssetDetail", "class_uri": "src/test/java/unit/spot/wallet/TestAssetDetail.java.TestAssetDetail", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/wallet/TestBusdConvertHistory.java.TestBusdConvertHistory.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/wallet/TestBusdConvertHistory.java", "class_name": "TestBusdConvertHistory", "class_uri": "src/test/java/unit/spot/wallet/TestBusdConvertHistory.java.TestBusdConvertHistory", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/wallet/TestDepositAddress.java.TestDepositAddress.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/wallet/TestDepositAddress.java", "class_name": "TestDepositAddress", "class_uri": "src/test/java/unit/spot/wallet/TestDepositAddress.java.TestDepositAddress", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/wallet/TestApiPermission.java.TestApiPermission.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/wallet/TestApiPermission.java", "class_name": "TestApiPermission", "class_uri": "src/test/java/unit/spot/wallet/TestApiPermission.java.TestApiPermission", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/wallet/TestSystemStatus.java.TestSystemStatus.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/wallet/TestSystemStatus.java", "class_name": "TestSystemStatus", "class_uri": "src/test/java/unit/spot/wallet/TestSystemStatus.java.TestSystemStatus", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/wallet/TestCloudMiningHistory.java.TestCloudMiningHistory.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/wallet/TestCloudMiningHistory.java", "class_name": "TestCloudMiningHistory", "class_uri": "src/test/java/unit/spot/wallet/TestCloudMiningHistory.java.TestCloudMiningHistory", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/wallet/TestBnbConvertibleAssets.java.TestBnbConvertibleAssets.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/wallet/TestBnbConvertibleAssets.java", "class_name": "TestBnbConvertibleAssets", "class_uri": "src/test/java/unit/spot/wallet/TestBnbConvertibleAssets.java.TestBnbConvertibleAssets", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/wallet/TestWithdrawHistory.java.TestWithdrawHistory.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/wallet/TestWithdrawHistory.java", "class_name": "TestWithdrawHistory", "class_uri": "src/test/java/unit/spot/wallet/TestWithdrawHistory.java.TestWithdrawHistory", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/wallet/TestApplyOneClickArrivalDeposit.java.TestApplyOneClickArrivalDeposit.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/wallet/TestApplyOneClickArrivalDeposit.java", "class_name": "TestApplyOneClickArrivalDeposit", "class_uri": "src/test/java/unit/spot/wallet/TestApplyOneClickArrivalDeposit.java.TestApplyOneClickArrivalDeposit", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/wallet/TestUniversalTransfer.java.TestUniversalTransfer.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/wallet/TestUniversalTransfer.java", "class_name": "TestUniversalTransfer", "class_uri": "src/test/java/unit/spot/wallet/TestUniversalTransfer.java.TestUniversalTransfer", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/wallet/TestSwitchBusdAutoConversion.java.TestSwitchBusdAutoConversion.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/wallet/TestSwitchBusdAutoConversion.java", "class_name": "TestSwitchBusdAutoConversion", "class_uri": "src/test/java/unit/spot/wallet/TestSwitchBusdAutoConversion.java.TestSwitchBusdAutoConversion", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/wallet/TestGetBusdAutoConvertions.java.TestGetBusdAutoConvertions.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/wallet/TestGetBusdAutoConvertions.java", "class_name": "TestGetBusdAutoConvertions", "class_uri": "src/test/java/unit/spot/wallet/TestGetBusdAutoConvertions.java.TestGetBusdAutoConvertions", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/wallet/TestAccountStatus.java.TestAccountStatus.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/wallet/TestAccountStatus.java", "class_name": "TestAccountStatus", "class_uri": "src/test/java/unit/spot/wallet/TestAccountStatus.java.TestAccountStatus", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/wallet/TestTradeFee.java.TestTradeFee.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/wallet/TestTradeFee.java", "class_name": "TestTradeFee", "class_uri": "src/test/java/unit/spot/wallet/TestTradeFee.java.TestTradeFee", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/wallet/TestQueryUniversalTransfer.java.TestQueryUniversalTransfer.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/wallet/TestQueryUniversalTransfer.java", "class_name": "TestQueryUniversalTransfer", "class_uri": "src/test/java/unit/spot/wallet/TestQueryUniversalTransfer.java.TestQueryUniversalTransfer", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/wallet/TestApiTradingStatus.java.TestApiTradingStatus.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/wallet/TestApiTradingStatus.java", "class_name": "TestApiTradingStatus", "class_uri": "src/test/java/unit/spot/wallet/TestApiTradingStatus.java.TestApiTradingStatus", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/wallet/TestAccountSnapshot.java.TestAccountSnapshot.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/wallet/TestAccountSnapshot.java", "class_name": "TestAccountSnapshot", "class_uri": "src/test/java/unit/spot/wallet/TestAccountSnapshot.java.TestAccountSnapshot", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/wallet/TestFundingWallet.java.TestFundingWallet.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/wallet/TestFundingWallet.java", "class_name": "TestFundingWallet", "class_uri": "src/test/java/unit/spot/wallet/TestFundingWallet.java.TestFundingWallet", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/wallet/TestBusdConvert.java.TestBusdConvert.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/wallet/TestBusdConvert.java", "class_name": "TestBusdConvert", "class_uri": "src/test/java/unit/spot/wallet/TestBusdConvert.java.TestBusdConvert", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/wallet/TestDelegationHistory.java.TestDelegationHistory.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/wallet/TestDelegationHistory.java", "class_name": "TestDelegationHistory", "class_uri": "src/test/java/unit/spot/wallet/TestDelegationHistory.java.TestDelegationHistory", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/wallet/TestDustTransfer.java.TestDustTransfer.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/wallet/TestDustTransfer.java", "class_name": "TestDustTransfer", "class_uri": "src/test/java/unit/spot/wallet/TestDustTransfer.java.TestDustTransfer", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/nft/TestDepositHistory.java.TestDepositHistory.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/nft/TestDepositHistory.java", "class_name": "TestDepositHistory", "class_uri": "src/test/java/unit/spot/nft/TestDepositHistory.java.TestDepositHistory", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/nft/TestTransactionsHistory.java.TestTransactionsHistory.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/nft/TestTransactionsHistory.java", "class_name": "TestTransactionsHistory", "class_uri": "src/test/java/unit/spot/nft/TestTransactionsHistory.java.TestTransactionsHistory", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/nft/TestWithdrawHistory.java.TestWithdrawHistory.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/nft/TestWithdrawHistory.java", "class_name": "TestWithdrawHistory", "class_uri": "src/test/java/unit/spot/nft/TestWithdrawHistory.java.TestWithdrawHistory", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/nft/TestGetAsset.java.TestGetAsset.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/nft/TestGetAsset.java", "class_name": "TestGetAsset", "class_uri": "src/test/java/unit/spot/nft/TestGetAsset.java.TestGetAsset", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/trade/TestRateLimitOrder.java.TestRateLimitOrder.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/trade/TestRateLimitOrder.java", "class_name": "TestRateLimitOrder", "class_uri": "src/test/java/unit/spot/trade/TestRateLimitOrder.java.TestRateLimitOrder", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/trade/TestCancelOrder.java.TestCancelOrder.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/trade/TestCancelOrder.java", "class_name": "TestCancelOrder", "class_uri": "src/test/java/unit/spot/trade/TestCancelOrder.java.TestCancelOrder", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/trade/TestGetOcoOrder.java.TestGetOcoOrder.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/trade/TestGetOcoOrder.java", "class_name": "TestGetOcoOrder", "class_uri": "src/test/java/unit/spot/trade/TestGetOcoOrder.java.TestGetOcoOrder", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/trade/TestCancelReplace.java.TestCancelReplace.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/trade/TestCancelReplace.java", "class_name": "TestCancelReplace", "class_uri": "src/test/java/unit/spot/trade/TestCancelReplace.java.TestCancelReplace", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/trade/TestMyTrades.java.TestMyTrades.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/trade/TestMyTrades.java", "class_name": "TestMyTrades", "class_uri": "src/test/java/unit/spot/trade/TestMyTrades.java.TestMyTrades", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/trade/TestTestSorOrder.java.TestTestSorOrder.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/trade/TestTestSorOrder.java", "class_name": "TestTestSorOrder", "class_uri": "src/test/java/unit/spot/trade/TestTestSorOrder.java.TestTestSorOrder", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/trade/TestGetOrders.java.TestGetOrders.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/trade/TestGetOrders.java", "class_name": "TestGetOrders", "class_uri": "src/test/java/unit/spot/trade/TestGetOrders.java.TestGetOrders", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/trade/TestGetOpenOrders.java.TestGetOpenOrders.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/trade/TestGetOpenOrders.java", "class_name": "TestGetOpenOrders", "class_uri": "src/test/java/unit/spot/trade/TestGetOpenOrders.java.TestGetOpenOrders", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/trade/TestGetOrder.java.TestGetOrder.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/trade/TestGetOrder.java", "class_name": "TestGetOrder", "class_uri": "src/test/java/unit/spot/trade/TestGetOrder.java.TestGetOrder", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/trade/TestOcoOrder.java.TestOcoOrder.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/trade/TestOcoOrder.java", "class_name": "TestOcoOrder", "class_uri": "src/test/java/unit/spot/trade/TestOcoOrder.java.TestOcoOrder", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/trade/TestAccount.java.TestAccount.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/trade/TestAccount.java", "class_name": "TestAccount", "class_uri": "src/test/java/unit/spot/trade/TestAccount.java.TestAccount", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/trade/TestNewOrderTest.java.TestNewOrderTest.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/trade/TestNewOrderTest.java", "class_name": "TestNewOrderTest", "class_uri": "src/test/java/unit/spot/trade/TestNewOrderTest.java.TestNewOrderTest", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/trade/TestSorAllocations.java.TestSorAllocations.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/trade/TestSorAllocations.java", "class_name": "TestSorAllocations", "class_uri": "src/test/java/unit/spot/trade/TestSorAllocations.java.TestSorAllocations", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/trade/TestGetOcoOrders.java.TestGetOcoOrders.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/trade/TestGetOcoOrders.java", "class_name": "TestGetOcoOrders", "class_uri": "src/test/java/unit/spot/trade/TestGetOcoOrders.java.TestGetOcoOrders", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/trade/TestCancelOcoOrder.java.TestCancelOcoOrder.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/trade/TestCancelOcoOrder.java", "class_name": "TestCancelOcoOrder", "class_uri": "src/test/java/unit/spot/trade/TestCancelOcoOrder.java.TestCancelOcoOrder", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/trade/TestPreventedMatches.java.TestPreventedMatches.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/trade/TestPreventedMatches.java", "class_name": "TestPreventedMatches", "class_uri": "src/test/java/unit/spot/trade/TestPreventedMatches.java.TestPreventedMatches", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/trade/TestSorOrder.java.TestSorOrder.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/trade/TestSorOrder.java", "class_name": "TestSorOrder", "class_uri": "src/test/java/unit/spot/trade/TestSorOrder.java.TestSorOrder", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/trade/TestGetOpenOcoOrders.java.TestGetOpenOcoOrders.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/trade/TestGetOpenOcoOrders.java", "class_name": "TestGetOpenOcoOrders", "class_uri": "src/test/java/unit/spot/trade/TestGetOpenOcoOrders.java.TestGetOpenOcoOrders", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/trade/TestCancelOpenOrders.java.TestCancelOpenOrders.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/trade/TestCancelOpenOrders.java", "class_name": "TestCancelOpenOrders", "class_uri": "src/test/java/unit/spot/trade/TestCancelOpenOrders.java.TestCancelOpenOrders", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/trade/TestCommission.java.TestCommission.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/trade/TestCommission.java", "class_name": "TestCommission", "class_uri": "src/test/java/unit/spot/trade/TestCommission.java.TestCommission", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/trade/TestNewOrder.java.TestNewOrder.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/trade/TestNewOrder.java", "class_name": "TestNewOrder", "class_uri": "src/test/java/unit/spot/trade/TestNewOrder.java.TestNewOrder", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/cryptoloans/TestLoanIncome.java.TestLoanIncome.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/cryptoloans/TestLoanIncome.java", "class_name": "TestLoanIncome", "class_uri": "src/test/java/unit/spot/cryptoloans/TestLoanIncome.java.TestLoanIncome", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanRepayHistory.java.TestFlexibleLoanRepayHistory.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanRepayHistory.java", "class_name": "TestFlexibleLoanRepayHistory", "class_uri": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanRepayHistory.java.TestFlexibleLoanRepayHistory", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanAssets.java.TestFlexibleLoanAssets.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanAssets.java", "class_name": "TestFlexibleLoanAssets", "class_uri": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanAssets.java.TestFlexibleLoanAssets", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/cryptoloans/TestLoanBorrowHistory.java.TestLoanBorrowHistory.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/cryptoloans/TestLoanBorrowHistory.java", "class_name": "TestLoanBorrowHistory", "class_uri": "src/test/java/unit/spot/cryptoloans/TestLoanBorrowHistory.java.TestLoanBorrowHistory", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/cryptoloans/TestLoanAssetsData.java.TestLoanAssetsData.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/cryptoloans/TestLoanAssetsData.java", "class_name": "TestLoanAssetsData", "class_uri": "src/test/java/unit/spot/cryptoloans/TestLoanAssetsData.java.TestLoanAssetsData", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/cryptoloans/TestLoanAdjustLTV.java.TestLoanAdjustLTV.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/cryptoloans/TestLoanAdjustLTV.java", "class_name": "TestLoanAdjustLTV", "class_uri": "src/test/java/unit/spot/cryptoloans/TestLoanAdjustLTV.java.TestLoanAdjustLTV", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/cryptoloans/TestCollateralRepayRate.java.TestCollateralRepayRate.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/cryptoloans/TestCollateralRepayRate.java", "class_name": "TestCollateralRepayRate", "class_uri": "src/test/java/unit/spot/cryptoloans/TestCollateralRepayRate.java.TestCollateralRepayRate", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/cryptoloans/TestLoanAdjustLTVHistory.java.TestLoanAdjustLTVHistory.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/cryptoloans/TestLoanAdjustLTVHistory.java", "class_name": "TestLoanAdjustLTVHistory", "class_uri": "src/test/java/unit/spot/cryptoloans/TestLoanAdjustLTVHistory.java.TestLoanAdjustLTVHistory", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanRepay.java.TestFlexibleLoanRepay.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanRepay.java", "class_name": "TestFlexibleLoanRepay", "class_uri": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanRepay.java.TestFlexibleLoanRepay", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanLtvAdjustHistory.java.TestFlexibleLoanLtvAdjustHistory.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanLtvAdjustHistory.java", "class_name": "TestFlexibleLoanLtvAdjustHistory", "class_uri": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanLtvAdjustHistory.java.TestFlexibleLoanLtvAdjustHistory", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanBorrow.java.TestFlexibleLoanBorrow.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanBorrow.java", "class_name": "TestFlexibleLoanBorrow", "class_uri": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanBorrow.java.TestFlexibleLoanBorrow", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/cryptoloans/TestLoanRepayHistory.java.TestLoanRepayHistory.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/cryptoloans/TestLoanRepayHistory.java", "class_name": "TestLoanRepayHistory", "class_uri": "src/test/java/unit/spot/cryptoloans/TestLoanRepayHistory.java.TestLoanRepayHistory", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanAdjustLtv.java.TestFlexibleLoanAdjustLtv.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanAdjustLtv.java", "class_name": "TestFlexibleLoanAdjustLtv", "class_uri": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanAdjustLtv.java.TestFlexibleLoanAdjustLtv", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanCollateralAssets.java.TestFlexibleLoanCollateralAssets.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanCollateralAssets.java", "class_name": "TestFlexibleLoanCollateralAssets", "class_uri": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanCollateralAssets.java.TestFlexibleLoanCollateralAssets", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/cryptoloans/TestLoanRepay.java.TestLoanRepay.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/cryptoloans/TestLoanRepay.java", "class_name": "TestLoanRepay", "class_uri": "src/test/java/unit/spot/cryptoloans/TestLoanRepay.java.TestLoanRepay", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/cryptoloans/TestCustomizeMarginCall.java.TestCustomizeMarginCall.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/cryptoloans/TestCustomizeMarginCall.java", "class_name": "TestCustomizeMarginCall", "class_uri": "src/test/java/unit/spot/cryptoloans/TestCustomizeMarginCall.java.TestCustomizeMarginCall", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/cryptoloans/TestCollateralAssetsData.java.TestCollateralAssetsData.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/cryptoloans/TestCollateralAssetsData.java", "class_name": "TestCollateralAssetsData", "class_uri": "src/test/java/unit/spot/cryptoloans/TestCollateralAssetsData.java.TestCollateralAssetsData", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanOngoingOrders.java.TestFlexibleLoanOngoingOrders.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanOngoingOrders.java", "class_name": "TestFlexibleLoanOngoingOrders", "class_uri": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanOngoingOrders.java.TestFlexibleLoanOngoingOrders", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanBorrowHistory.java.TestFlexibleLoanBorrowHistory.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanBorrowHistory.java", "class_name": "TestFlexibleLoanBorrowHistory", "class_uri": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanBorrowHistory.java.TestFlexibleLoanBorrowHistory", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/cryptoloans/TestLoanOngoingOrders.java.TestLoanOngoingOrders.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/cryptoloans/TestLoanOngoingOrders.java", "class_name": "TestLoanOngoingOrders", "class_uri": "src/test/java/unit/spot/cryptoloans/TestLoanOngoingOrders.java.TestLoanOngoingOrders", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/cryptoloans/TestLoanBorrow.java.TestLoanBorrow.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/cryptoloans/TestLoanBorrow.java", "class_name": "TestLoanBorrow", "class_uri": "src/test/java/unit/spot/cryptoloans/TestLoanBorrow.java.TestLoanBorrow", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/viploans/TestBorrowInterestRate.java.TestBorrowInterestRate.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/viploans/TestBorrowInterestRate.java", "class_name": "TestBorrowInterestRate", "class_uri": "src/test/java/unit/spot/viploans/TestBorrowInterestRate.java.TestBorrowInterestRate", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/viploans/TestCollateralAccount.java.TestCollateralAccount.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/viploans/TestCollateralAccount.java", "class_name": "TestCollateralAccount", "class_uri": "src/test/java/unit/spot/viploans/TestCollateralAccount.java.TestCollateralAccount", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/viploans/TestOrderStatus.java.TestOrderStatus.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/viploans/TestOrderStatus.java", "class_name": "TestOrderStatus", "class_uri": "src/test/java/unit/spot/viploans/TestOrderStatus.java.TestOrderStatus", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/viploans/TestBorrow.java.TestBorrow.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/viploans/TestBorrow.java", "class_name": "TestBorrow", "class_uri": "src/test/java/unit/spot/viploans/TestBorrow.java.TestBorrow", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/viploans/TestLoanableAssets.java.TestLoanableAssets.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/viploans/TestLoanableAssets.java", "class_name": "TestLoanableAssets", "class_uri": "src/test/java/unit/spot/viploans/TestLoanableAssets.java.TestLoanableAssets", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/viploans/TestCollateralAsset.java.TestCollateralAsset.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/viploans/TestCollateralAsset.java", "class_name": "TestCollateralAsset", "class_uri": "src/test/java/unit/spot/viploans/TestCollateralAsset.java.TestCollateralAsset", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/viploans/TestRepay.java.TestRepay.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/viploans/TestRepay.java", "class_name": "TestRepay", "class_uri": "src/test/java/unit/spot/viploans/TestRepay.java.TestRepay", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/viploans/TestRenew.java.TestRenew.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/viploans/TestRenew.java", "class_name": "TestRenew", "class_uri": "src/test/java/unit/spot/viploans/TestRenew.java.TestRenew", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/viploans/TestRepaymentHistory.java.TestRepaymentHistory.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/viploans/TestRepaymentHistory.java", "class_name": "TestRepaymentHistory", "class_uri": "src/test/java/unit/spot/viploans/TestRepaymentHistory.java.TestRepaymentHistory", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/viploans/TestOngoingOrders.java.TestOngoingOrders.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/viploans/TestOngoingOrders.java", "class_name": "TestOngoingOrders", "class_uri": "src/test/java/unit/spot/viploans/TestOngoingOrders.java.TestOngoingOrders", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/rebate/TestTaxQuery.java.TestTaxQuery.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/rebate/TestTaxQuery.java", "class_name": "TestTaxQuery", "class_uri": "src/test/java/unit/spot/rebate/TestTaxQuery.java.TestTaxQuery", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/proxy/TestHttpProxy.java.TestHttpProxy.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/proxy/TestHttpProxy.java", "class_name": "TestHttpProxy", "class_uri": "src/test/java/unit/spot/proxy/TestHttpProxy.java.TestHttpProxy", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/market/TestTickerPrice.java.TestTickerPrice.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/market/TestTickerPrice.java", "class_name": "TestTickerPrice", "class_uri": "src/test/java/unit/spot/market/TestTickerPrice.java.TestTickerPrice", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/market/TestPing.java.TestPing.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/market/TestPing.java", "class_name": "TestPing", "class_uri": "src/test/java/unit/spot/market/TestPing.java.TestPing", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/market/TestTicker.java.TestTicker.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/market/TestTicker.java", "class_name": "TestTicker", "class_uri": "src/test/java/unit/spot/market/TestTicker.java.TestTicker", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/market/TestAvgPrice.java.TestAvgPrice.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/market/TestAvgPrice.java", "class_name": "TestAvgPrice", "class_uri": "src/test/java/unit/spot/market/TestAvgPrice.java.TestAvgPrice", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/market/TestTicker24H.java.TestTicker24H.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/market/TestTicker24H.java", "class_name": "TestTicker24H", "class_uri": "src/test/java/unit/spot/market/TestTicker24H.java.TestTicker24H", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/market/TestDepth.java.TestDepth.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/market/TestDepth.java", "class_name": "TestDepth", "class_uri": "src/test/java/unit/spot/market/TestDepth.java.TestDepth", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/market/TestTrades.java.TestTrades.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/market/TestTrades.java", "class_name": "TestTrades", "class_uri": "src/test/java/unit/spot/market/TestTrades.java.TestTrades", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/market/TestBookTicker.java.TestBookTicker.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/market/TestBookTicker.java", "class_name": "TestBookTicker", "class_uri": "src/test/java/unit/spot/market/TestBookTicker.java.TestBookTicker", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/market/TestExchangeInfo.java.TestExchangeInfo.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/market/TestExchangeInfo.java", "class_name": "TestExchangeInfo", "class_uri": "src/test/java/unit/spot/market/TestExchangeInfo.java.TestExchangeInfo", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/market/TestUIKlines.java.TestUIKlines.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/market/TestUIKlines.java", "class_name": "TestUIKlines", "class_uri": "src/test/java/unit/spot/market/TestUIKlines.java.TestUIKlines", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/market/TestKlines.java.TestKlines.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/market/TestKlines.java", "class_name": "TestKlines", "class_uri": "src/test/java/unit/spot/market/TestKlines.java.TestKlines", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/market/TestTime.java.TestTime.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/market/TestTime.java", "class_name": "TestTime", "class_uri": "src/test/java/unit/spot/market/TestTime.java.TestTime", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/market/TestAggTrades.java.TestAggTrades.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/market/TestAggTrades.java", "class_name": "TestAggTrades", "class_uri": "src/test/java/unit/spot/market/TestAggTrades.java.TestAggTrades", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/market/TestTradingDayTicker.java.TestTradingDayTicker.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/market/TestTradingDayTicker.java", "class_name": "TestTradingDayTicker", "class_uri": "src/test/java/unit/spot/market/TestTradingDayTicker.java.TestTradingDayTicker", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/market/TestHistoricalTrades.java.TestHistoricalTrades.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/market/TestHistoricalTrades.java", "class_name": "TestHistoricalTrades", "class_uri": "src/test/java/unit/spot/market/TestHistoricalTrades.java.TestHistoricalTrades", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/convert/TestQuoteInquiry.java.TestQuoteInquiry.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/convert/TestQuoteInquiry.java", "class_name": "TestQuoteInquiry", "class_uri": "src/test/java/unit/spot/convert/TestQuoteInquiry.java.TestQuoteInquiry", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/convert/TestTradeFlow.java.TestTradeFlow.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/convert/TestTradeFlow.java", "class_name": "TestTradeFlow", "class_uri": "src/test/java/unit/spot/convert/TestTradeFlow.java.TestTradeFlow", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/convert/TestOrderStatus.java.TestOrderStatus.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/convert/TestOrderStatus.java", "class_name": "TestOrderStatus", "class_uri": "src/test/java/unit/spot/convert/TestOrderStatus.java.TestOrderStatus", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/convert/TestAssetQuantityPrecision.java.TestAssetQuantityPrecision.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/convert/TestAssetQuantityPrecision.java", "class_name": "TestAssetQuantityPrecision", "class_uri": "src/test/java/unit/spot/convert/TestAssetQuantityPrecision.java.TestAssetQuantityPrecision", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/convert/TestExchangeInfo.java.TestExchangeInfo.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/convert/TestExchangeInfo.java", "class_name": "TestExchangeInfo", "class_uri": "src/test/java/unit/spot/convert/TestExchangeInfo.java.TestExchangeInfo", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/convert/TestAcceptQuote.java.TestAcceptQuote.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/convert/TestAcceptQuote.java", "class_name": "TestAcceptQuote", "class_uri": "src/test/java/unit/spot/convert/TestAcceptQuote.java.TestAcceptQuote", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/futures/TestFuturesTransferHistory.java.TestFuturesTransferHistory.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/futures/TestFuturesTransferHistory.java", "class_name": "TestFuturesTransferHistory", "class_uri": "src/test/java/unit/spot/futures/TestFuturesTransferHistory.java.TestFuturesTransferHistory", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/futures/TestFuturesTransfer.java.TestFuturesTransfer.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/futures/TestFuturesTransfer.java", "class_name": "TestFuturesTransfer", "class_uri": "src/test/java/unit/spot/futures/TestFuturesTransfer.java.TestFuturesTransfer", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/futures/TestFuturesOrderBookHistory.java.TestFuturesOrderBookHistory.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/futures/TestFuturesOrderBookHistory.java", "class_name": "TestFuturesOrderBookHistory", "class_uri": "src/test/java/unit/spot/futures/TestFuturesOrderBookHistory.java.TestFuturesOrderBookHistory", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/giftcard/TestCreateDualTokensCode.java.TestCreateDualTokensCode.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/giftcard/TestCreateDualTokensCode.java", "class_name": "TestCreateDualTokensCode", "class_uri": "src/test/java/unit/spot/giftcard/TestCreateDualTokensCode.java.TestCreateDualTokensCode", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/giftcard/TestRedeemCode.java.TestRedeemCode.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/giftcard/TestRedeemCode.java", "class_name": "TestRedeemCode", "class_uri": "src/test/java/unit/spot/giftcard/TestRedeemCode.java.TestRedeemCode", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/giftcard/TestCreateCode.java.TestCreateCode.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/giftcard/TestCreateCode.java", "class_name": "TestCreateCode", "class_uri": "src/test/java/unit/spot/giftcard/TestCreateCode.java.TestCreateCode", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/giftcard/TestTokensLimit.java.TestTokensLimit.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/giftcard/TestTokensLimit.java", "class_name": "TestTokensLimit", "class_uri": "src/test/java/unit/spot/giftcard/TestTokensLimit.java.TestTokensLimit", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/giftcard/TestRsaPublicKey.java.TestRsaPublicKey.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/giftcard/TestRsaPublicKey.java", "class_name": "TestRsaPublicKey", "class_uri": "src/test/java/unit/spot/giftcard/TestRsaPublicKey.java.TestRsaPublicKey", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/giftcard/TestVerify.java.TestVerify.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/giftcard/TestVerify.java", "class_name": "TestVerify", "class_uri": "src/test/java/unit/spot/giftcard/TestVerify.java.TestVerify", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/simpleearn/TestSimpleAccount.java.TestSimpleAccount.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/simpleearn/TestSimpleAccount.java", "class_name": "TestSimpleAccount", "class_uri": "src/test/java/unit/spot/simpleearn/TestSimpleAccount.java.TestSimpleAccount", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/simpleearn/TestSubscribeLockedProduct.java.TestSubscribeLockedProduct.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/simpleearn/TestSubscribeLockedProduct.java", "class_name": "TestSubscribeLockedProduct", "class_uri": "src/test/java/unit/spot/simpleearn/TestSubscribeLockedProduct.java.TestSubscribeLockedProduct", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/simpleearn/TestSetFlexibleAutoSubscribe.java.TestSetFlexibleAutoSubscribe.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/simpleearn/TestSetFlexibleAutoSubscribe.java", "class_name": "TestSetFlexibleAutoSubscribe", "class_uri": "src/test/java/unit/spot/simpleearn/TestSetFlexibleAutoSubscribe.java.TestSetFlexibleAutoSubscribe", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/simpleearn/TestLockedProductList.java.TestLockedProductList.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/simpleearn/TestLockedProductList.java", "class_name": "TestLockedProductList", "class_uri": "src/test/java/unit/spot/simpleearn/TestLockedProductList.java.TestLockedProductList", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/simpleearn/TestFlexibleProductPosition.java.TestFlexibleProductPosition.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/simpleearn/TestFlexibleProductPosition.java", "class_name": "TestFlexibleProductPosition", "class_uri": "src/test/java/unit/spot/simpleearn/TestFlexibleProductPosition.java.TestFlexibleProductPosition", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/simpleearn/TestCollateralRecord.java.TestCollateralRecord.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/simpleearn/TestCollateralRecord.java", "class_name": "TestCollateralRecord", "class_uri": "src/test/java/unit/spot/simpleearn/TestCollateralRecord.java.TestCollateralRecord", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/simpleearn/TestFlexibleRedemptionRecord.java.TestFlexibleRedemptionRecord.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/simpleearn/TestFlexibleRedemptionRecord.java", "class_name": "TestFlexibleRedemptionRecord", "class_uri": "src/test/java/unit/spot/simpleearn/TestFlexibleRedemptionRecord.java.TestFlexibleRedemptionRecord", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/simpleearn/TestSubscribeFlexibleProduct.java.TestSubscribeFlexibleProduct.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/simpleearn/TestSubscribeFlexibleProduct.java", "class_name": "TestSubscribeFlexibleProduct", "class_uri": "src/test/java/unit/spot/simpleearn/TestSubscribeFlexibleProduct.java.TestSubscribeFlexibleProduct", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/simpleearn/TestFlexibleRewardsHistory.java.TestFlexibleRewardsHistory.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/simpleearn/TestFlexibleRewardsHistory.java", "class_name": "TestFlexibleRewardsHistory", "class_uri": "src/test/java/unit/spot/simpleearn/TestFlexibleRewardsHistory.java.TestFlexibleRewardsHistory", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/simpleearn/TestRedeemLockedProduct.java.TestRedeemLockedProduct.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/simpleearn/TestRedeemLockedProduct.java", "class_name": "TestRedeemLockedProduct", "class_uri": "src/test/java/unit/spot/simpleearn/TestRedeemLockedProduct.java.TestRedeemLockedProduct", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/simpleearn/TestFlexibleSubscriptionRecord.java.TestFlexibleSubscriptionRecord.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/simpleearn/TestFlexibleSubscriptionRecord.java", "class_name": "TestFlexibleSubscriptionRecord", "class_uri": "src/test/java/unit/spot/simpleearn/TestFlexibleSubscriptionRecord.java.TestFlexibleSubscriptionRecord", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/simpleearn/TestFlexiblePersonalLeftQuota.java.TestFlexiblePersonalLeftQuota.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/simpleearn/TestFlexiblePersonalLeftQuota.java", "class_name": "TestFlexiblePersonalLeftQuota", "class_uri": "src/test/java/unit/spot/simpleearn/TestFlexiblePersonalLeftQuota.java.TestFlexiblePersonalLeftQuota", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/simpleearn/TestLockedPersonalLeftQuota.java.TestLockedPersonalLeftQuota.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/simpleearn/TestLockedPersonalLeftQuota.java", "class_name": "TestLockedPersonalLeftQuota", "class_uri": "src/test/java/unit/spot/simpleearn/TestLockedPersonalLeftQuota.java.TestLockedPersonalLeftQuota", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/simpleearn/TestFlexibleSubscriptionPreview.java.TestFlexibleSubscriptionPreview.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/simpleearn/TestFlexibleSubscriptionPreview.java", "class_name": "TestFlexibleSubscriptionPreview", "class_uri": "src/test/java/unit/spot/simpleearn/TestFlexibleSubscriptionPreview.java.TestFlexibleSubscriptionPreview", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/simpleearn/TestLockedRewardsHistory.java.TestLockedRewardsHistory.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/simpleearn/TestLockedRewardsHistory.java", "class_name": "TestLockedRewardsHistory", "class_uri": "src/test/java/unit/spot/simpleearn/TestLockedRewardsHistory.java.TestLockedRewardsHistory", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/simpleearn/TestLockedSubscriptionPreview.java.TestLockedSubscriptionPreview.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/simpleearn/TestLockedSubscriptionPreview.java", "class_name": "TestLockedSubscriptionPreview", "class_uri": "src/test/java/unit/spot/simpleearn/TestLockedSubscriptionPreview.java.TestLockedSubscriptionPreview", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/simpleearn/TestLockedSubscriptionRecord.java.TestLockedSubscriptionRecord.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/simpleearn/TestLockedSubscriptionRecord.java", "class_name": "TestLockedSubscriptionRecord", "class_uri": "src/test/java/unit/spot/simpleearn/TestLockedSubscriptionRecord.java.TestLockedSubscriptionRecord", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/simpleearn/TestRedeemFlexibleProduct.java.TestRedeemFlexibleProduct.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/simpleearn/TestRedeemFlexibleProduct.java", "class_name": "TestRedeemFlexibleProduct", "class_uri": "src/test/java/unit/spot/simpleearn/TestRedeemFlexibleProduct.java.TestRedeemFlexibleProduct", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/simpleearn/TestLockedRedemptionRecord.java.TestLockedRedemptionRecord.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/simpleearn/TestLockedRedemptionRecord.java", "class_name": "TestLockedRedemptionRecord", "class_uri": "src/test/java/unit/spot/simpleearn/TestLockedRedemptionRecord.java.TestLockedRedemptionRecord", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/simpleearn/TestFlexibleProductList.java.TestFlexibleProductList.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/simpleearn/TestFlexibleProductList.java", "class_name": "TestFlexibleProductList", "class_uri": "src/test/java/unit/spot/simpleearn/TestFlexibleProductList.java.TestFlexibleProductList", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/simpleearn/TestRateHistory.java.TestRateHistory.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/simpleearn/TestRateHistory.java", "class_name": "TestRateHistory", "class_uri": "src/test/java/unit/spot/simpleearn/TestRateHistory.java.TestRateHistory", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/simpleearn/TestSetLockedAutoSubscribe.java.TestSetLockedAutoSubscribe.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/simpleearn/TestSetLockedAutoSubscribe.java", "class_name": "TestSetLockedAutoSubscribe", "class_uri": "src/test/java/unit/spot/simpleearn/TestSetLockedAutoSubscribe.java.TestSetLockedAutoSubscribe", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/simpleearn/TestLockedProductPosition.java.TestLockedProductPosition.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/simpleearn/TestLockedProductPosition.java", "class_name": "TestLockedProductPosition", "class_uri": "src/test/java/unit/spot/simpleearn/TestLockedProductPosition.java.TestLockedProductPosition", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/c2c/TestListUserOrderHistory.java.TestListUserOrderHistory.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/c2c/TestListUserOrderHistory.java", "class_name": "TestListUserOrderHistory", "class_uri": "src/test/java/unit/spot/c2c/TestListUserOrderHistory.java.TestListUserOrderHistory", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/blvt/TestBlvtInfo.java.TestBlvtInfo.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/blvt/TestBlvtInfo.java", "class_name": "TestBlvtInfo", "class_uri": "src/test/java/unit/spot/blvt/TestBlvtInfo.java.TestBlvtInfo", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/blvt/TestRedeem.java.TestRedeem.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/blvt/TestRedeem.java", "class_name": "TestRedeem", "class_uri": "src/test/java/unit/spot/blvt/TestRedeem.java.TestRedeem", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/blvt/TestSubscribe.java.TestSubscribe.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/blvt/TestSubscribe.java", "class_name": "TestSubscribe", "class_uri": "src/test/java/unit/spot/blvt/TestSubscribe.java.TestSubscribe", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/blvt/TestSubscriptionRecord.java.TestSubscriptionRecord.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/blvt/TestSubscriptionRecord.java", "class_name": "TestSubscriptionRecord", "class_uri": "src/test/java/unit/spot/blvt/TestSubscriptionRecord.java.TestSubscriptionRecord", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/blvt/TestUserLimit.java.TestUserLimit.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/blvt/TestUserLimit.java", "class_name": "TestUserLimit", "class_uri": "src/test/java/unit/spot/blvt/TestUserLimit.java.TestUserLimit", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/blvt/TestRedeemRecord.java.TestRedeemRecord.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void init()", "original_string": "    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/blvt/TestRedeemRecord.java", "class_name": "TestRedeemRecord", "class_uri": "src/test/java/unit/spot/blvt/TestRedeemRecord.java.TestRedeemRecord", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/PrivateConfig.java.PrivateConfig.[]PrivateConfig()", "name": "PrivateConfig", "arg_nums": 0, "params": [], "return_type": "", "signature": "private PrivateConfig()", "original_string": "    private PrivateConfig() {\n    }", "default_arguments": null, "file": "src/test/java/examples/PrivateConfig.java", "class_name": "PrivateConfig", "class_uri": "src/test/java/examples/PrivateConfig.java.PrivateConfig", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/WsStreamWithWsApiTrade.java.WsStreamWithWsApiTrade.[]WsStreamWithWsApiTrade()", "name": "WsStreamWithWsApiTrade", "arg_nums": 0, "params": [], "return_type": "", "signature": "private WsStreamWithWsApiTrade()", "original_string": "    private WsStreamWithWsApiTrade() {\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/WsStreamWithWsApiTrade.java", "class_name": "WsStreamWithWsApiTrade", "class_uri": "src/test/java/examples/websocketapi/WsStreamWithWsApiTrade.java.WsStreamWithWsApiTrade", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/WsStreamWithWsApiTrade.java.WsStreamWithWsApiTrade.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) throws InterruptedException {\n\n        // ws stream call\n        WebSocketStreamClient streamClient = new WebSocketStreamClientImpl(DefaultUrls.TESTNET_WS_URL);\n\n        WebSocketMessageCallback streamOnMsgCallback = (event) -> {\n            System.out.println(event);\n        };\n        \n        streamClient.tradeStream(\"BTCUSDT\", streamOnMsgCallback);\n\n        Thread.sleep(waitTime);\n\n        // ws api call\n        HmacSignatureGenerator signatureGenerator = new HmacSignatureGenerator(PrivateConfig.TESTNET_SECRET_KEY);\n        WebSocketApiClient apiClient = new WebSocketApiClientImpl(PrivateConfig.TESTNET_API_KEY, signatureGenerator, DefaultUrls.TESTNET_WS_API_URL);\n        apiClient.connect(((event) -> {\n            System.out.println(event);\n        }));\n\n        JSONObject params = new JSONObject();\n        params.put(\"quantity\", quantity);\n\n        apiClient.trade().testNewOrder(\"BTCUSDT\", \"BUY\", \"MARKET\", params);\n\n        Thread.sleep(waitTime);\n        \n        // closing all connections\n        streamClient.closeAllConnections();\n        apiClient.close();\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/WsStreamWithWsApiTrade.java", "class_name": "WsStreamWithWsApiTrade", "class_uri": "src/test/java/examples/websocketapi/WsStreamWithWsApiTrade.java.WsStreamWithWsApiTrade", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/WsApiwithAllCallbacks.java.WsApiwithAllCallbacks.[]WsApiwithAllCallbacks()", "name": "WsApiwithAllCallbacks", "arg_nums": 0, "params": [], "return_type": "", "signature": "private WsApiwithAllCallbacks()", "original_string": "    private WsApiwithAllCallbacks() {\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/WsApiwithAllCallbacks.java", "class_name": "WsApiwithAllCallbacks", "class_uri": "src/test/java/examples/websocketapi/WsApiwithAllCallbacks.java.WsApiwithAllCallbacks", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/WsApiwithAllCallbacks.java.WsApiwithAllCallbacks.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) throws InterruptedException {\n\n        onOpenCallback = openEvent -> {\n            System.out.println(\"Open Connection: \" + openEvent.toString());\n        };\n\n        onMessageCallback = (message) -> {\n            System.out.println(\"Connection Message:\" + message);\n        };\n\n        onClosingCallback = (code, reason) -> {\n            System.out.println(\"Closing Connection: code=\" + code + \", reason=\" + reason);\n        };\n\n        onClosedCallback = (code, reason) -> {\n            System.out.println(\"Closed Connection: code=\" + code + \", reason=\" + reason);\n        };\n\n        onFailureCallback = (throwable, response) -> {\n            System.out.println(\"Connection Failed: throwable=\" + throwable.getMessage());\n        };\n\n        WebSocketApiClient client = new WebSocketApiClientImpl();\n        client.connect(onOpenCallback, onMessageCallback, onClosingCallback, onClosedCallback, onFailureCallback);\n        \n        JSONObject params = new JSONObject();\n        params.put(\"requestId\", \"randomId\");\n        client.general().ping(params);\n\n        Thread.sleep(waitTime);\n        client.close();\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/WsApiwithAllCallbacks.java", "class_name": "WsApiwithAllCallbacks", "class_uri": "src/test/java/examples/websocketapi/WsApiwithAllCallbacks.java.WsApiwithAllCallbacks", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/general/Ping.java.Ping.[]Ping()", "name": "Ping", "arg_nums": 0, "params": [], "return_type": "", "signature": "private Ping()", "original_string": "    private Ping() {\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/general/Ping.java", "class_name": "Ping", "class_uri": "src/test/java/examples/websocketapi/general/Ping.java.Ping", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/general/Ping.java.Ping.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) throws InterruptedException {\n        WebSocketApiClient client = new WebSocketApiClientImpl();\n        client.connect(((event) -> {\n            System.out.println(event);\n        }));\n        \n        JSONObject params = new JSONObject();\n        params.put(\"requestId\", \"randomId\");\n        client.general().ping(params);\n\n        Thread.sleep(waitTime);\n        client.close();\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/general/Ping.java", "class_name": "Ping", "class_uri": "src/test/java/examples/websocketapi/general/Ping.java.Ping", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/general/ServerTime.java.ServerTime.[]ServerTime()", "name": "ServerTime", "arg_nums": 0, "params": [], "return_type": "", "signature": "private ServerTime()", "original_string": "    private ServerTime() {\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/general/ServerTime.java", "class_name": "ServerTime", "class_uri": "src/test/java/examples/websocketapi/general/ServerTime.java.ServerTime", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/general/ServerTime.java.ServerTime.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) throws InterruptedException {\n        WebSocketApiClient client = new WebSocketApiClientImpl();\n\n        WebSocketMessageCallback onMessageCallback = (event) -> {\n            System.out.println(event);\n        };\n\n        client.connect(onMessageCallback);\n        \n        client.general().serverTime(null);\n\n        Thread.sleep(waitTime);\n        client.close();\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/general/ServerTime.java", "class_name": "ServerTime", "class_uri": "src/test/java/examples/websocketapi/general/ServerTime.java.ServerTime", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/general/ExchangeInfo.java.ExchangeInfo.[]ExchangeInfo()", "name": "ExchangeInfo", "arg_nums": 0, "params": [], "return_type": "", "signature": "private ExchangeInfo()", "original_string": "    private ExchangeInfo() {\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/general/ExchangeInfo.java", "class_name": "ExchangeInfo", "class_uri": "src/test/java/examples/websocketapi/general/ExchangeInfo.java.ExchangeInfo", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/general/ExchangeInfo.java.ExchangeInfo.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) throws InterruptedException {\n        WebSocketApiClient client = new WebSocketApiClientImpl();\n        client.connect(((event) -> {\n            System.out.println(event + \"\\n\");\n        }));\n\n        // empty params\n        JSONObject params = new JSONObject();\n        client.general().exchangeInfo(params);\n        Thread.sleep(waitTime);\n\n        // one symbol\n        params.put(\"symbol\", \"ETHRUB\");\n        client.general().exchangeInfo(params);\n        Thread.sleep(waitTime);\n\n        // multiple symbols\n        params.clear();\n        String[] symbols = new String[]{\"BTCUSDT\", \"BNBUSDT\"};\n        params.put(\"symbols\", symbols);\n        client.general().exchangeInfo(params);\n        Thread.sleep(waitTime);\n\n        // specific permissions\n        params.clear();\n        String[] permissions = new String[]{\"SPOT\", \"MARGIN\"};\n        params.put(\"permissions\", permissions);\n        client.general().exchangeInfo(params);\n\n        Thread.sleep(waitTime);\n        client.close();\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/general/ExchangeInfo.java", "class_name": "ExchangeInfo", "class_uri": "src/test/java/examples/websocketapi/general/ExchangeInfo.java.ExchangeInfo", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/authentication/Logout.java.Logout.[]Logout()", "name": "Logout", "arg_nums": 0, "params": [], "return_type": "", "signature": "private Logout()", "original_string": "    private Logout() {\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/authentication/Logout.java", "class_name": "Logout", "class_uri": "src/test/java/examples/websocketapi/authentication/Logout.java.Logout", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/authentication/Logout.java.Logout.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) throws InterruptedException {\n\n        HmacSignatureGenerator signatureGenerator = new HmacSignatureGenerator(PrivateConfig.TESTNET_SECRET_KEY);\n        WebSocketApiClient wsApiClient = new WebSocketApiClientImpl(PrivateConfig.TESTNET_API_KEY, signatureGenerator, DefaultUrls.TESTNET_WS_API_URL);\n\n        wsApiClient.connect(((message) -> {\n            System.out.println(message);\n        }));\n        \n        WebSocketApiAuth auth = wsApiClient.auth();\n\n        JSONObject params = new JSONObject();\n        auth.logon(params);\n\n        params.clear();\n        params.put(\"requestId\", \"randomId\");\n        auth.status(params);\n\n        params.clear();\n        params.put(\"requestId\", \"randomId\");\n        auth.logout(params);\n\n        params.clear();\n        wsApiClient.account().accountAllOrders(\"BTCUSDT\", params);\n\n        Thread.sleep(waitTime);\n\n        wsApiClient.close();\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/authentication/Logout.java", "class_name": "Logout", "class_uri": "src/test/java/examples/websocketapi/authentication/Logout.java.Logout", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/authentication/Status.java.Status.[]Status()", "name": "Status", "arg_nums": 0, "params": [], "return_type": "", "signature": "private Status()", "original_string": "    private Status() {\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/authentication/Status.java", "class_name": "Status", "class_uri": "src/test/java/examples/websocketapi/authentication/Status.java.Status", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/authentication/Status.java.Status.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) throws InterruptedException {\n\n        HmacSignatureGenerator signatureGenerator = new HmacSignatureGenerator(PrivateConfig.TESTNET_SECRET_KEY);\n        WebSocketApiClient wsApiClient = new WebSocketApiClientImpl(PrivateConfig.TESTNET_API_KEY, signatureGenerator, DefaultUrls.TESTNET_WS_API_URL);\n\n        wsApiClient.connect(((message) -> {\n            System.out.println(message);\n        }));\n\n        JSONObject params = new JSONObject();\n        params.put(\"requestId\", \"randomId\");\n        wsApiClient.auth().status(params);\n\n        Thread.sleep(waitTime);\n\n        wsApiClient.close();\n\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/authentication/Status.java", "class_name": "Status", "class_uri": "src/test/java/examples/websocketapi/authentication/Status.java.Status", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/authentication/Logon.java.Logon.[]Logon()", "name": "Logon", "arg_nums": 0, "params": [], "return_type": "", "signature": "private Logon()", "original_string": "    private Logon() {\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/authentication/Logon.java", "class_name": "Logon", "class_uri": "src/test/java/examples/websocketapi/authentication/Logon.java.Logon", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/authentication/Logon.java.Logon.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) throws InterruptedException {\n\n        HmacSignatureGenerator signatureGenerator = new HmacSignatureGenerator(PrivateConfig.TESTNET_SECRET_KEY);\n        WebSocketApiClient wsApiClient = new WebSocketApiClientImpl(PrivateConfig.TESTNET_API_KEY, signatureGenerator, DefaultUrls.TESTNET_WS_API_URL);\n\n        wsApiClient.connect(((message) -> {\n            System.out.println(message);\n        }));\n        \n        WebSocketApiAuth auth = wsApiClient.auth();\n\n        JSONObject params = new JSONObject();\n        auth.logon(params);\n\n        params.clear(); \n        wsApiClient.account().accountAllOrders(\"BTCUSDT\", params);\n\n        Thread.sleep(waitTime);\n\n        wsApiClient.close();\n\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/authentication/Logon.java", "class_name": "Logon", "class_uri": "src/test/java/examples/websocketapi/authentication/Logon.java.Logon", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/account/AccountAllocations.java.AccountAllocations.[]AccountAllocations()", "name": "AccountAllocations", "arg_nums": 0, "params": [], "return_type": "", "signature": "private AccountAllocations()", "original_string": "    private AccountAllocations() {\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/account/AccountAllocations.java", "class_name": "AccountAllocations", "class_uri": "src/test/java/examples/websocketapi/account/AccountAllocations.java.AccountAllocations", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/account/AccountAllocations.java.AccountAllocations.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) throws InterruptedException {\n        \n        HmacSignatureGenerator signatureGenerator = new HmacSignatureGenerator(PrivateConfig.TESTNET_SECRET_KEY);\n        WebSocketApiClient client = new WebSocketApiClientImpl(PrivateConfig.TESTNET_API_KEY, signatureGenerator, DefaultUrls.TESTNET_WS_API_URL);\n\n        client.connect(((event) -> {\n            System.out.println(event);\n        }));\n        \n        client.account().accountAllocations(\"BTCUSDT\", null);\n        Thread.sleep(waitTime);\n\n        client.close();\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/account/AccountAllocations.java", "class_name": "AccountAllocations", "class_uri": "src/test/java/examples/websocketapi/account/AccountAllocations.java.AccountAllocations", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/account/AccountAllOrders.java.AccountAllOrders.[]AccountAllOrders()", "name": "AccountAllOrders", "arg_nums": 0, "params": [], "return_type": "", "signature": "private AccountAllOrders()", "original_string": "    private AccountAllOrders() {\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/account/AccountAllOrders.java", "class_name": "AccountAllOrders", "class_uri": "src/test/java/examples/websocketapi/account/AccountAllOrders.java.AccountAllOrders", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/account/AccountAllOrders.java.AccountAllOrders.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) throws InterruptedException {\n        \n        HmacSignatureGenerator signatureGenerator = new HmacSignatureGenerator(PrivateConfig.TESTNET_SECRET_KEY);\n        WebSocketApiClient client = new WebSocketApiClientImpl(PrivateConfig.TESTNET_API_KEY, signatureGenerator, DefaultUrls.TESTNET_WS_API_URL);\n\n        client.connect(((event) -> {\n            System.out.println(event);\n        }));\n        \n        client.account().accountAllOrders(\"BTCUSDT\", null);\n        Thread.sleep(waitTime);\n\n        client.close();\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/account/AccountAllOrders.java", "class_name": "AccountAllOrders", "class_uri": "src/test/java/examples/websocketapi/account/AccountAllOrders.java.AccountAllOrders", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/account/AccountTradeHistory.java.AccountTradeHistory.[]AccountTradeHistory()", "name": "AccountTradeHistory", "arg_nums": 0, "params": [], "return_type": "", "signature": "private AccountTradeHistory()", "original_string": "    private AccountTradeHistory() {\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/account/AccountTradeHistory.java", "class_name": "AccountTradeHistory", "class_uri": "src/test/java/examples/websocketapi/account/AccountTradeHistory.java.AccountTradeHistory", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/account/AccountTradeHistory.java.AccountTradeHistory.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) throws InterruptedException {\n        \n        HmacSignatureGenerator signatureGenerator = new HmacSignatureGenerator(PrivateConfig.TESTNET_SECRET_KEY);\n        WebSocketApiClient client = new WebSocketApiClientImpl(PrivateConfig.TESTNET_API_KEY, signatureGenerator, DefaultUrls.TESTNET_WS_API_URL);\n\n        client.connect(((event) -> {\n            System.out.println(event);\n        }));\n        \n        client.account().accountTradeHistory(\"BTCUSDT\", null);\n        Thread.sleep(waitTime);\n\n        client.close();\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/account/AccountTradeHistory.java", "class_name": "AccountTradeHistory", "class_uri": "src/test/java/examples/websocketapi/account/AccountTradeHistory.java.AccountTradeHistory", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/account/AccountRateLimitsOrders.java.AccountRateLimitsOrders.[]AccountRateLimitsOrders()", "name": "AccountRateLimitsOrders", "arg_nums": 0, "params": [], "return_type": "", "signature": "private AccountRateLimitsOrders()", "original_string": "    private AccountRateLimitsOrders() {\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/account/AccountRateLimitsOrders.java", "class_name": "AccountRateLimitsOrders", "class_uri": "src/test/java/examples/websocketapi/account/AccountRateLimitsOrders.java.AccountRateLimitsOrders", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/account/AccountRateLimitsOrders.java.AccountRateLimitsOrders.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) throws InterruptedException {\n        \n        HmacSignatureGenerator signatureGenerator = new HmacSignatureGenerator(PrivateConfig.TESTNET_SECRET_KEY);\n        WebSocketApiClient client = new WebSocketApiClientImpl(PrivateConfig.TESTNET_API_KEY, signatureGenerator, DefaultUrls.TESTNET_WS_API_URL);\n\n        client.connect(((event) -> {\n            System.out.println(event);\n        }));\n        \n        client.account().accountRateLimitsOrders(null);\n        Thread.sleep(waitTime);\n\n        client.close();\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/account/AccountRateLimitsOrders.java", "class_name": "AccountRateLimitsOrders", "class_uri": "src/test/java/examples/websocketapi/account/AccountRateLimitsOrders.java.AccountRateLimitsOrders", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/account/AccountAllOcoOrders.java.AccountAllOcoOrders.[]AccountAllOcoOrders()", "name": "AccountAllOcoOrders", "arg_nums": 0, "params": [], "return_type": "", "signature": "private AccountAllOcoOrders()", "original_string": "    private AccountAllOcoOrders() {\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/account/AccountAllOcoOrders.java", "class_name": "AccountAllOcoOrders", "class_uri": "src/test/java/examples/websocketapi/account/AccountAllOcoOrders.java.AccountAllOcoOrders", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/account/AccountAllOcoOrders.java.AccountAllOcoOrders.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) throws InterruptedException {\n        \n        HmacSignatureGenerator signatureGenerator = new HmacSignatureGenerator(PrivateConfig.TESTNET_SECRET_KEY);\n        WebSocketApiClient client = new WebSocketApiClientImpl(PrivateConfig.TESTNET_API_KEY, signatureGenerator, DefaultUrls.TESTNET_WS_API_URL);\n\n        client.connect(((event) -> {\n            System.out.println(event);\n        }));\n        \n        client.account().accountAllOcoOrders(null);\n        Thread.sleep(waitTime);\n\n        client.close();\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/account/AccountAllOcoOrders.java", "class_name": "AccountAllOcoOrders", "class_uri": "src/test/java/examples/websocketapi/account/AccountAllOcoOrders.java.AccountAllOcoOrders", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/account/AccountCommissionRates.java.AccountCommissionRates.[]AccountCommissionRates()", "name": "AccountCommissionRates", "arg_nums": 0, "params": [], "return_type": "", "signature": "private AccountCommissionRates()", "original_string": "    private AccountCommissionRates() {\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/account/AccountCommissionRates.java", "class_name": "AccountCommissionRates", "class_uri": "src/test/java/examples/websocketapi/account/AccountCommissionRates.java.AccountCommissionRates", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/account/AccountCommissionRates.java.AccountCommissionRates.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) throws InterruptedException {\n        \n        HmacSignatureGenerator signatureGenerator = new HmacSignatureGenerator(PrivateConfig.TESTNET_SECRET_KEY);\n        WebSocketApiClient client = new WebSocketApiClientImpl(PrivateConfig.TESTNET_API_KEY, signatureGenerator, DefaultUrls.TESTNET_WS_API_URL);\n\n        client.connect(((event) -> {\n            System.out.println(event);\n        }));\n\n        client.account().accountCommissionRates(\"BTCUSDT\", null);\n        Thread.sleep(waitTime);\n\n        client.close();\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/account/AccountCommissionRates.java", "class_name": "AccountCommissionRates", "class_uri": "src/test/java/examples/websocketapi/account/AccountCommissionRates.java.AccountCommissionRates", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/account/AccountPreventedMatches.java.AccountPreventedMatches.[]AccountPreventedMatches()", "name": "AccountPreventedMatches", "arg_nums": 0, "params": [], "return_type": "", "signature": "private AccountPreventedMatches()", "original_string": "    private AccountPreventedMatches() {\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/account/AccountPreventedMatches.java", "class_name": "AccountPreventedMatches", "class_uri": "src/test/java/examples/websocketapi/account/AccountPreventedMatches.java.AccountPreventedMatches", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/account/AccountPreventedMatches.java.AccountPreventedMatches.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) throws InterruptedException {\n        \n        HmacSignatureGenerator signatureGenerator = new HmacSignatureGenerator(PrivateConfig.TESTNET_SECRET_KEY);\n        WebSocketApiClient client = new WebSocketApiClientImpl(PrivateConfig.TESTNET_API_KEY, signatureGenerator, DefaultUrls.TESTNET_WS_API_URL);\n\n        client.connect(((event) -> {\n            System.out.println(event);\n        }));\n        \n        JSONObject parameters = new JSONObject();\n        parameters.put(\"preventedMatchId\", preventedMatchId);\n\n        client.account().accountPreventedMatches(\"BTCUSDT\", parameters);\n        Thread.sleep(waitTime);\n\n        client.close();\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/account/AccountPreventedMatches.java", "class_name": "AccountPreventedMatches", "class_uri": "src/test/java/examples/websocketapi/account/AccountPreventedMatches.java.AccountPreventedMatches", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/account/AccountStatus.java.AccountStatus.[]AccountStatus()", "name": "AccountStatus", "arg_nums": 0, "params": [], "return_type": "", "signature": "private AccountStatus()", "original_string": "    private AccountStatus() {\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/account/AccountStatus.java", "class_name": "AccountStatus", "class_uri": "src/test/java/examples/websocketapi/account/AccountStatus.java.AccountStatus", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/account/AccountStatus.java.AccountStatus.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) throws InterruptedException {\n        \n        HmacSignatureGenerator signatureGenerator = new HmacSignatureGenerator(PrivateConfig.TESTNET_SECRET_KEY);\n        WebSocketApiClient client = new WebSocketApiClientImpl(PrivateConfig.TESTNET_API_KEY, signatureGenerator, DefaultUrls.TESTNET_WS_API_URL);\n\n        client.connect(((event) -> {\n            System.out.println(event + \"\\n\");\n        }));\n        \n        JSONObject params = new JSONObject();\n        params.put(\"recvWindow\", recvWindow);\n\n        // with empty requestId\n        params.put(\"requestId\", \"\");\n        client.account().accountStatus(params);\n        Thread.sleep(waitTime);\n\n        // without requestId\n        params.clear();\n        client.account().accountStatus(params);\n        Thread.sleep(waitTime);\n\n        // with string requestId\n        params.clear();\n        params.put(\"requestId\", \"requestId\");\n        client.account().accountStatus(params);\n        Thread.sleep(waitTime);\n        \n        // with int requestId\n        params.clear();\n        params.put(\"requestId\", requestId);\n        client.account().accountStatus(params);\n        Thread.sleep(waitTime);\n\n        client.close();\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/account/AccountStatus.java", "class_name": "AccountStatus", "class_uri": "src/test/java/examples/websocketapi/account/AccountStatus.java.AccountStatus", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/signature/Rsa.java.Rsa.[]Rsa()", "name": "Rsa", "arg_nums": 0, "params": [], "return_type": "", "signature": "private Rsa()", "original_string": "    private Rsa() {\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/signature/Rsa.java", "class_name": "Rsa", "class_uri": "src/test/java/examples/websocketapi/signature/Rsa.java.Rsa", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/signature/Rsa.java.Rsa.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) throws InterruptedException {\n        RsaSignatureGenerator signatureGenerator =  new RsaSignatureGenerator(PrivateConfig.TESTNET_PRIVATE_KEY_PATH);\n        WebSocketApiClient client = new WebSocketApiClientImpl(PrivateConfig.TESTNET_API_KEY, signatureGenerator, DefaultUrls.TESTNET_WS_API_URL);\n        client.connect(((event) -> {\n            System.out.println(event);\n        }));\n\n        JSONObject params = new JSONObject();\n        params.put(\"requestId\", \"randomId\");\n        params.put(\"quantity\", quantity);\n\n        client.trade().testNewOrder(\"BTCUSDT\", \"BUY\", \"MARKET\", params);\n\n        Thread.sleep(waitTime);\n        client.close();\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/signature/Rsa.java", "class_name": "Rsa", "class_uri": "src/test/java/examples/websocketapi/signature/Rsa.java.Rsa", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/signature/Ed25519.java.Ed25519.[]Ed25519()", "name": "Ed25519", "arg_nums": 0, "params": [], "return_type": "", "signature": "private Ed25519()", "original_string": "    private Ed25519() {\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/signature/Ed25519.java", "class_name": "Ed25519", "class_uri": "src/test/java/examples/websocketapi/signature/Ed25519.java.Ed25519", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/signature/Ed25519.java.Ed25519.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) throws InterruptedException, FileNotFoundException, IOException {\n        Ed25519SignatureGenerator signatureGenerator =  new Ed25519SignatureGenerator(PrivateConfig.TESTNET_PRIVATE_KEY_PATH);\n        WebSocketApiClient client = new WebSocketApiClientImpl(PrivateConfig.TESTNET_API_KEY, signatureGenerator, DefaultUrls.TESTNET_WS_API_URL);\n        client.connect(((event) -> {\n            System.out.println(event);\n        }));\n\n        client.account().accountStatus(null);\n\n        Thread.sleep(waitTime);\n        client.close();\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/signature/Ed25519.java", "class_name": "Ed25519", "class_uri": "src/test/java/examples/websocketapi/signature/Ed25519.java.Ed25519", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/trade/NewSorOrder.java.NewSorOrder.[]NewSorOrder()", "name": "NewSorOrder", "arg_nums": 0, "params": [], "return_type": "", "signature": "private NewSorOrder()", "original_string": "    private NewSorOrder() {\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/trade/NewSorOrder.java", "class_name": "NewSorOrder", "class_uri": "src/test/java/examples/websocketapi/trade/NewSorOrder.java.NewSorOrder", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/trade/NewSorOrder.java.NewSorOrder.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) throws InterruptedException {\n\n        HmacSignatureGenerator signatureGenerator = new HmacSignatureGenerator(PrivateConfig.TESTNET_SECRET_KEY);\n        WebSocketApiClient wsApiClient = new WebSocketApiClientImpl(PrivateConfig.TESTNET_API_KEY, signatureGenerator, DefaultUrls.TESTNET_WS_API_URL);\n\n        wsApiClient.connect(((message) -> {\n            System.out.println(message);\n        }));\n      \n        JSONObject params = new JSONObject();\n        params.put(\"requestId\", \"randomId\");\n      \n        wsApiClient.trade().newSorOrder(\"BTCUSDT\", \"BUY\", \"MARKET\", quantity, params);\n      \n        Thread.sleep(waitTime);\n      \n        wsApiClient.close();\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/trade/NewSorOrder.java", "class_name": "NewSorOrder", "class_uri": "src/test/java/examples/websocketapi/trade/NewSorOrder.java.NewSorOrder", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/trade/GetOpenOrders.java.GetOpenOrders.[]GetOpenOrders()", "name": "GetOpenOrders", "arg_nums": 0, "params": [], "return_type": "", "signature": "private GetOpenOrders()", "original_string": "    private GetOpenOrders() {\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/trade/GetOpenOrders.java", "class_name": "GetOpenOrders", "class_uri": "src/test/java/examples/websocketapi/trade/GetOpenOrders.java.GetOpenOrders", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/trade/GetOpenOrders.java.GetOpenOrders.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) throws InterruptedException {\n\n        HmacSignatureGenerator signatureGenerator = new HmacSignatureGenerator(PrivateConfig.TESTNET_SECRET_KEY);\n        WebSocketApiClient wsApiClient = new WebSocketApiClientImpl(PrivateConfig.TESTNET_API_KEY, signatureGenerator, DefaultUrls.TESTNET_WS_API_URL);\n\n        wsApiClient.connect(((message) -> {\n            System.out.println(message);\n        }));\n      \n        wsApiClient.trade().getOpenOrders(null);\n      \n        Thread.sleep(waitTime);\n      \n        wsApiClient.close();\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/trade/GetOpenOrders.java", "class_name": "GetOpenOrders", "class_uri": "src/test/java/examples/websocketapi/trade/GetOpenOrders.java.GetOpenOrders", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/trade/CancelAllOpenOrders.java.CancelAllOpenOrders.[]CancelAllOpenOrders()", "name": "CancelAllOpenOrders", "arg_nums": 0, "params": [], "return_type": "", "signature": "private CancelAllOpenOrders()", "original_string": "    private CancelAllOpenOrders() {\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/trade/CancelAllOpenOrders.java", "class_name": "CancelAllOpenOrders", "class_uri": "src/test/java/examples/websocketapi/trade/CancelAllOpenOrders.java.CancelAllOpenOrders", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/trade/CancelAllOpenOrders.java.CancelAllOpenOrders.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) throws InterruptedException {\n\n        HmacSignatureGenerator signatureGenerator = new HmacSignatureGenerator(PrivateConfig.TESTNET_SECRET_KEY);\n        WebSocketApiClient wsApiClient = new WebSocketApiClientImpl(PrivateConfig.TESTNET_API_KEY, signatureGenerator, DefaultUrls.TESTNET_WS_API_URL);\n\n        wsApiClient.connect(((message) -> {\n            System.out.println(message);\n        }));\n      \n        JSONObject params = new JSONObject();\n      \n        wsApiClient.trade().cancelAllOpenOrders(\"BTCUSDT\", params);\n      \n        Thread.sleep(waitTime);\n      \n        wsApiClient.close();\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/trade/CancelAllOpenOrders.java", "class_name": "CancelAllOpenOrders", "class_uri": "src/test/java/examples/websocketapi/trade/CancelAllOpenOrders.java.CancelAllOpenOrders", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/trade/GetOrder.java.GetOrder.[]GetOrder()", "name": "GetOrder", "arg_nums": 0, "params": [], "return_type": "", "signature": "private GetOrder()", "original_string": "    private GetOrder() {\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/trade/GetOrder.java", "class_name": "GetOrder", "class_uri": "src/test/java/examples/websocketapi/trade/GetOrder.java.GetOrder", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/trade/GetOrder.java.GetOrder.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) throws InterruptedException {\n\n        HmacSignatureGenerator signatureGenerator = new HmacSignatureGenerator(PrivateConfig.TESTNET_SECRET_KEY);\n        WebSocketApiClient wsApiClient = new WebSocketApiClientImpl(PrivateConfig.TESTNET_API_KEY, signatureGenerator, DefaultUrls.TESTNET_WS_API_URL);\n\n        wsApiClient.connect(((message) -> {\n            System.out.println(message);\n        }));\n      \n        JSONObject params = new JSONObject();\n        params.put(\"orderId\", orderId);\n      \n        wsApiClient.trade().getOrder(\"BTCUSDT\", params);\n      \n        Thread.sleep(waitTime);\n      \n        wsApiClient.close();\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/trade/GetOrder.java", "class_name": "GetOrder", "class_uri": "src/test/java/examples/websocketapi/trade/GetOrder.java.GetOrder", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/trade/CancelOcoOrder.java.CancelOcoOrder.[]CancelOcoOrder()", "name": "CancelOcoOrder", "arg_nums": 0, "params": [], "return_type": "", "signature": "private CancelOcoOrder()", "original_string": "    private CancelOcoOrder() {\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/trade/CancelOcoOrder.java", "class_name": "CancelOcoOrder", "class_uri": "src/test/java/examples/websocketapi/trade/CancelOcoOrder.java.CancelOcoOrder", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/trade/CancelOcoOrder.java.CancelOcoOrder.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) throws InterruptedException {\n\n        HmacSignatureGenerator signatureGenerator = new HmacSignatureGenerator(PrivateConfig.TESTNET_SECRET_KEY);\n        WebSocketApiClient wsApiClient = new WebSocketApiClientImpl(PrivateConfig.TESTNET_API_KEY, signatureGenerator, DefaultUrls.TESTNET_WS_API_URL);\n\n        wsApiClient.connect(((message) -> {\n            System.out.println(message);\n        }));\n      \n        JSONObject params = new JSONObject();\n        params.put(\"orderListId\", orderListId);\n      \n        wsApiClient.trade().cancelOcoOrder(\"ETHBTC\", params);\n      \n        Thread.sleep(waitTime);\n      \n        wsApiClient.close();\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/trade/CancelOcoOrder.java", "class_name": "CancelOcoOrder", "class_uri": "src/test/java/examples/websocketapi/trade/CancelOcoOrder.java.CancelOcoOrder", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/trade/NewOrder.java.NewOrder.[]NewOrder()", "name": "NewOrder", "arg_nums": 0, "params": [], "return_type": "", "signature": "private NewOrder()", "original_string": "    private NewOrder() {\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/trade/NewOrder.java", "class_name": "NewOrder", "class_uri": "src/test/java/examples/websocketapi/trade/NewOrder.java.NewOrder", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/trade/NewOrder.java.NewOrder.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) throws InterruptedException {\n\n        HmacSignatureGenerator signatureGenerator = new HmacSignatureGenerator(PrivateConfig.TESTNET_SECRET_KEY);\n        WebSocketApiClient wsApiClient = new WebSocketApiClientImpl(PrivateConfig.TESTNET_API_KEY, signatureGenerator, DefaultUrls.TESTNET_WS_API_URL);\n\n        wsApiClient.connect(((message) -> {\n            System.out.println(message);\n        }));\n      \n        JSONObject params = new JSONObject();\n        params.put(\"requestId\", \"randomId\");\n        params.put(\"quantity\", quantity);\n      \n        wsApiClient.trade().newOrder(\"BTCUSDT\", \"BUY\", \"MARKET\", params);\n      \n        Thread.sleep(waitTime);\n      \n        wsApiClient.close();\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/trade/NewOrder.java", "class_name": "NewOrder", "class_uri": "src/test/java/examples/websocketapi/trade/NewOrder.java.NewOrder", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/trade/CancelReplaceOrder.java.CancelReplaceOrder.[]CancelReplaceOrder()", "name": "CancelReplaceOrder", "arg_nums": 0, "params": [], "return_type": "", "signature": "private CancelReplaceOrder()", "original_string": "    private CancelReplaceOrder() {\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/trade/CancelReplaceOrder.java", "class_name": "CancelReplaceOrder", "class_uri": "src/test/java/examples/websocketapi/trade/CancelReplaceOrder.java.CancelReplaceOrder", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/trade/CancelReplaceOrder.java.CancelReplaceOrder.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) throws InterruptedException {\n\n        HmacSignatureGenerator signatureGenerator = new HmacSignatureGenerator(PrivateConfig.TESTNET_SECRET_KEY);\n        WebSocketApiClient wsApiClient = new WebSocketApiClientImpl(PrivateConfig.TESTNET_API_KEY, signatureGenerator, DefaultUrls.TESTNET_WS_API_URL);\n\n        wsApiClient.connect(((message) -> {\n            System.out.println(message);\n        }));\n      \n        JSONObject params = new JSONObject();\n        params.put(\"requestId\", \"randomId\");\n        params.put(\"quantity\", quantity);\n        params.put(\"cancelOrigClientOrderId\", \"randomClientOrderId\");\n      \n        wsApiClient.trade().cancelReplaceOrder(\"BTCUSDT\", \"STOP_ON_FAILURE\", \"BUY\", \"MARKET\", params);\n      \n        Thread.sleep(waitTime);\n      \n        wsApiClient.close();\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/trade/CancelReplaceOrder.java", "class_name": "CancelReplaceOrder", "class_uri": "src/test/java/examples/websocketapi/trade/CancelReplaceOrder.java.CancelReplaceOrder", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/trade/GetOcoOrder.java.GetOcoOrder.[]GetOcoOrder()", "name": "GetOcoOrder", "arg_nums": 0, "params": [], "return_type": "", "signature": "private GetOcoOrder()", "original_string": "    private GetOcoOrder() {\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/trade/GetOcoOrder.java", "class_name": "GetOcoOrder", "class_uri": "src/test/java/examples/websocketapi/trade/GetOcoOrder.java.GetOcoOrder", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/trade/GetOcoOrder.java.GetOcoOrder.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) throws InterruptedException {\n\n        HmacSignatureGenerator signatureGenerator = new HmacSignatureGenerator(PrivateConfig.TESTNET_SECRET_KEY);\n        WebSocketApiClient wsApiClient = new WebSocketApiClientImpl(PrivateConfig.TESTNET_API_KEY, signatureGenerator, DefaultUrls.TESTNET_WS_API_URL);\n\n        wsApiClient.connect(((message) -> {\n            System.out.println(message);\n        }));\n      \n        JSONObject params = new JSONObject();\n        params.put(\"orderListId\", orderListId);\n      \n        wsApiClient.trade().getOcoOrder(params);\n      \n        Thread.sleep(waitTime);\n      \n        wsApiClient.close();\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/trade/GetOcoOrder.java", "class_name": "GetOcoOrder", "class_uri": "src/test/java/examples/websocketapi/trade/GetOcoOrder.java.GetOcoOrder", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/trade/GetOpenOcoOrders.java.GetOpenOcoOrders.[]GetOpenOcoOrders()", "name": "GetOpenOcoOrders", "arg_nums": 0, "params": [], "return_type": "", "signature": "private GetOpenOcoOrders()", "original_string": "    private GetOpenOcoOrders() {\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/trade/GetOpenOcoOrders.java", "class_name": "GetOpenOcoOrders", "class_uri": "src/test/java/examples/websocketapi/trade/GetOpenOcoOrders.java.GetOpenOcoOrders", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/trade/GetOpenOcoOrders.java.GetOpenOcoOrders.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) throws InterruptedException {\n\n        HmacSignatureGenerator signatureGenerator = new HmacSignatureGenerator(PrivateConfig.TESTNET_SECRET_KEY);\n        WebSocketApiClient wsApiClient = new WebSocketApiClientImpl(PrivateConfig.TESTNET_API_KEY, signatureGenerator, DefaultUrls.TESTNET_WS_API_URL);\n\n        wsApiClient.connect(((message) -> {\n            System.out.println(message);\n        }));\n      \n        wsApiClient.trade().getOpenOcoOrders(null);\n      \n        Thread.sleep(waitTime);\n      \n        wsApiClient.close();\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/trade/GetOpenOcoOrders.java", "class_name": "GetOpenOcoOrders", "class_uri": "src/test/java/examples/websocketapi/trade/GetOpenOcoOrders.java.GetOpenOcoOrders", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/trade/CancelOrder.java.CancelOrder.[]CancelOrder()", "name": "CancelOrder", "arg_nums": 0, "params": [], "return_type": "", "signature": "private CancelOrder()", "original_string": "    private CancelOrder() {\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/trade/CancelOrder.java", "class_name": "CancelOrder", "class_uri": "src/test/java/examples/websocketapi/trade/CancelOrder.java.CancelOrder", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/trade/CancelOrder.java.CancelOrder.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) throws InterruptedException {\n\n        HmacSignatureGenerator signatureGenerator = new HmacSignatureGenerator(PrivateConfig.TESTNET_SECRET_KEY);\n        WebSocketApiClient wsApiClient = new WebSocketApiClientImpl(PrivateConfig.TESTNET_API_KEY, signatureGenerator, DefaultUrls.TESTNET_WS_API_URL);\n\n        wsApiClient.connect(((message) -> {\n            System.out.println(message);\n        }));\n      \n        JSONObject params = new JSONObject();\n        params.put(\"orderId\", orderId);\n      \n        wsApiClient.trade().cancelOrder(\"BTCUSDT\", params);\n      \n        Thread.sleep(waitTime);\n      \n        wsApiClient.close();\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/trade/CancelOrder.java", "class_name": "CancelOrder", "class_uri": "src/test/java/examples/websocketapi/trade/CancelOrder.java.CancelOrder", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/trade/NewOrderTest.java.NewOrderTest.[]NewOrderTest()", "name": "NewOrderTest", "arg_nums": 0, "params": [], "return_type": "", "signature": "private NewOrderTest()", "original_string": "    private NewOrderTest() {\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/trade/NewOrderTest.java", "class_name": "NewOrderTest", "class_uri": "src/test/java/examples/websocketapi/trade/NewOrderTest.java.NewOrderTest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/trade/NewOrderTest.java.NewOrderTest.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) throws InterruptedException {\n\n        HmacSignatureGenerator signatureGenerator = new HmacSignatureGenerator(PrivateConfig.TESTNET_SECRET_KEY);\n        WebSocketApiClient wsApiClient = new WebSocketApiClientImpl(PrivateConfig.TESTNET_API_KEY, signatureGenerator, DefaultUrls.TESTNET_WS_API_URL);\n\n        wsApiClient.connect(((message) -> {\n            System.out.println(message);\n        }));\n      \n        JSONObject params = new JSONObject();\n        params.put(\"requestId\", \"randomId\");\n        params.put(\"quantity\", quantity);\n      \n        wsApiClient.trade().testNewOrder(\"BTCUSDT\", \"BUY\", \"MARKET\", params);\n      \n        Thread.sleep(waitTime);\n      \n        wsApiClient.close();\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/trade/NewOrderTest.java", "class_name": "NewOrderTest", "class_uri": "src/test/java/examples/websocketapi/trade/NewOrderTest.java.NewOrderTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/trade/NewSorOrderTest.java.NewSorOrderTest.[]NewSorOrderTest()", "name": "NewSorOrderTest", "arg_nums": 0, "params": [], "return_type": "", "signature": "private NewSorOrderTest()", "original_string": "    private NewSorOrderTest() {\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/trade/NewSorOrderTest.java", "class_name": "NewSorOrderTest", "class_uri": "src/test/java/examples/websocketapi/trade/NewSorOrderTest.java.NewSorOrderTest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/trade/NewSorOrderTest.java.NewSorOrderTest.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) throws InterruptedException {\n\n        HmacSignatureGenerator signatureGenerator = new HmacSignatureGenerator(PrivateConfig.TESTNET_SECRET_KEY);\n        WebSocketApiClient wsApiClient = new WebSocketApiClientImpl(PrivateConfig.TESTNET_API_KEY, signatureGenerator, DefaultUrls.TESTNET_WS_API_URL);\n\n        wsApiClient.connect(((message) -> {\n            System.out.println(message);\n        }));\n      \n        JSONObject params = new JSONObject();\n        params.put(\"requestId\", \"randomId\");\n        params.put(\"computeCommissionRates\", true);\n      \n        wsApiClient.trade().testNewSorOrder(\"BTCUSDT\", \"BUY\", \"MARKET\", quantity, params);\n      \n        Thread.sleep(waitTime);\n      \n        wsApiClient.close();\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/trade/NewSorOrderTest.java", "class_name": "NewSorOrderTest", "class_uri": "src/test/java/examples/websocketapi/trade/NewSorOrderTest.java.NewSorOrderTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/trade/NewOcoOrder.java.NewOcoOrder.[]NewOcoOrder()", "name": "NewOcoOrder", "arg_nums": 0, "params": [], "return_type": "", "signature": "private NewOcoOrder()", "original_string": "    private NewOcoOrder() {\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/trade/NewOcoOrder.java", "class_name": "NewOcoOrder", "class_uri": "src/test/java/examples/websocketapi/trade/NewOcoOrder.java.NewOcoOrder", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/trade/NewOcoOrder.java.NewOcoOrder.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) throws InterruptedException {\n\n        HmacSignatureGenerator signatureGenerator = new HmacSignatureGenerator(PrivateConfig.TESTNET_SECRET_KEY);\n        WebSocketApiClient wsApiClient = new WebSocketApiClientImpl(PrivateConfig.TESTNET_API_KEY, signatureGenerator, DefaultUrls.TESTNET_WS_API_URL);\n\n        wsApiClient.connect(((message) -> {\n            System.out.println(message);\n        }));\n      \n        JSONObject params = new JSONObject();\n        params.put(\"requestId\", \"randomId\");\n        params.put(\"stopPrice\", stopPrice);\n        params.put(\"stopLimitPrice\", stopLimitPrice);\n        params.put(\"stopLimitTimeInForce\", \"GTC\");\n      \n        wsApiClient.trade().newOcoOrder(\"ETHBTC\", \"SELL\", limitPrice, quantity, params);\n      \n        Thread.sleep(waitTime);\n      \n        wsApiClient.close();\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/trade/NewOcoOrder.java", "class_name": "NewOcoOrder", "class_uri": "src/test/java/examples/websocketapi/trade/NewOcoOrder.java.NewOcoOrder", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/market/Ticker24H.java.Ticker24H.[]Ticker24H()", "name": "Ticker24H", "arg_nums": 0, "params": [], "return_type": "", "signature": "private Ticker24H()", "original_string": "    private Ticker24H() {\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/market/Ticker24H.java", "class_name": "Ticker24H", "class_uri": "src/test/java/examples/websocketapi/market/Ticker24H.java.Ticker24H", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/market/Ticker24H.java.Ticker24H.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) throws InterruptedException {\n        WebSocketApiClient client = new WebSocketApiClientImpl();\n        client.connect(((event) -> {\n            System.out.println(event);\n        }));\n\n        JSONObject params = new JSONObject();\n        String[] symbols = new String[]{\"BTCUSDT\", \"BNBUSDT\"};\n\n        params.put(\"symbols\", symbols);\n        client.market().ticker24H(params);\n\n        Thread.sleep(waitTime);\n        client.close();\n\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/market/Ticker24H.java", "class_name": "Ticker24H", "class_uri": "src/test/java/examples/websocketapi/market/Ticker24H.java.Ticker24H", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/market/HistoricaTrades.java.HistoricaTrades.[]HistoricaTrades()", "name": "HistoricaTrades", "arg_nums": 0, "params": [], "return_type": "", "signature": "private HistoricaTrades()", "original_string": "    private HistoricaTrades() {\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/market/HistoricaTrades.java", "class_name": "HistoricaTrades", "class_uri": "src/test/java/examples/websocketapi/market/HistoricaTrades.java.HistoricaTrades", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/market/HistoricaTrades.java.HistoricaTrades.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) throws InterruptedException {\n        HmacSignatureGenerator signatureGenerator = new HmacSignatureGenerator(PrivateConfig.TESTNET_SECRET_KEY);\n        WebSocketApiClient client = new WebSocketApiClientImpl(PrivateConfig.TESTNET_API_KEY, signatureGenerator, DefaultUrls.TESTNET_WS_API_URL);\n        client.connect(((event) -> {\n            System.out.println(event);\n        }));\n\n        client.market().historicalTrades(\"BTCUSDT\", null);\n\n        Thread.sleep(waitTime);\n        client.close();\n\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/market/HistoricaTrades.java", "class_name": "HistoricaTrades", "class_uri": "src/test/java/examples/websocketapi/market/HistoricaTrades.java.HistoricaTrades", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/market/RecentTrades.java.RecentTrades.[]RecentTrades()", "name": "RecentTrades", "arg_nums": 0, "params": [], "return_type": "", "signature": "private RecentTrades()", "original_string": "    private RecentTrades() {\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/market/RecentTrades.java", "class_name": "RecentTrades", "class_uri": "src/test/java/examples/websocketapi/market/RecentTrades.java.RecentTrades", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/market/RecentTrades.java.RecentTrades.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) throws InterruptedException {\n        WebSocketApiClient client = new WebSocketApiClientImpl();\n        client.connect(((event) -> {\n            System.out.println(event);\n        }));\n\n        client.market().recentTrades(\"BTCUSDT\", null);\n\n        Thread.sleep(waitTime);\n        client.close();\n\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/market/RecentTrades.java", "class_name": "RecentTrades", "class_uri": "src/test/java/examples/websocketapi/market/RecentTrades.java.RecentTrades", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/market/Depth.java.Depth.[]Depth()", "name": "Depth", "arg_nums": 0, "params": [], "return_type": "", "signature": "private Depth()", "original_string": "    private Depth() {\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/market/Depth.java", "class_name": "Depth", "class_uri": "src/test/java/examples/websocketapi/market/Depth.java.Depth", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/market/Depth.java.Depth.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) throws InterruptedException {\n        WebSocketApiClient client = new WebSocketApiClientImpl();\n        client.connect(((event) -> {\n            System.out.println(event);\n        }));\n\n        client.market().depth(\"BTCUSDT\", null);\n\n        Thread.sleep(waitTime);\n        client.close();\n\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/market/Depth.java", "class_name": "Depth", "class_uri": "src/test/java/examples/websocketapi/market/Depth.java.Depth", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/market/AvgPrice.java.AvgPrice.[]AvgPrice()", "name": "AvgPrice", "arg_nums": 0, "params": [], "return_type": "", "signature": "private AvgPrice()", "original_string": "    private AvgPrice() {\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/market/AvgPrice.java", "class_name": "AvgPrice", "class_uri": "src/test/java/examples/websocketapi/market/AvgPrice.java.AvgPrice", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/market/AvgPrice.java.AvgPrice.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) throws InterruptedException {\n        WebSocketApiClient client = new WebSocketApiClientImpl();\n        client.connect(((event) -> {\n            System.out.println(event);\n        }));\n\n        client.market().avgPrice(\"BTCUSDT\", null);\n\n        Thread.sleep(waitTime);\n        client.close();\n\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/market/AvgPrice.java", "class_name": "AvgPrice", "class_uri": "src/test/java/examples/websocketapi/market/AvgPrice.java.AvgPrice", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/market/TickerPrice.java.TickerPrice.[]TickerPrice()", "name": "TickerPrice", "arg_nums": 0, "params": [], "return_type": "", "signature": "private TickerPrice()", "original_string": "    private TickerPrice() {\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/market/TickerPrice.java", "class_name": "TickerPrice", "class_uri": "src/test/java/examples/websocketapi/market/TickerPrice.java.TickerPrice", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/market/TickerPrice.java.TickerPrice.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) throws InterruptedException {\n        WebSocketApiClient client = new WebSocketApiClientImpl();\n        client.connect(((event) -> {\n            System.out.println(event);\n        }));\n\n        JSONObject params = new JSONObject();\n        String[] symbols = new String[]{\"BTCUSDT\", \"BNBUSDT\"};\n\n        params.put(\"symbols\", symbols);\n        client.market().tickerPrice(params);\n\n        Thread.sleep(waitTime);\n        client.close();\n\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/market/TickerPrice.java", "class_name": "TickerPrice", "class_uri": "src/test/java/examples/websocketapi/market/TickerPrice.java.TickerPrice", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/market/AggTrades.java.AggTrades.[]AggTrades()", "name": "AggTrades", "arg_nums": 0, "params": [], "return_type": "", "signature": "private AggTrades()", "original_string": "    private AggTrades() {\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/market/AggTrades.java", "class_name": "AggTrades", "class_uri": "src/test/java/examples/websocketapi/market/AggTrades.java.AggTrades", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/market/AggTrades.java.AggTrades.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) throws InterruptedException {\n        WebSocketApiClient client = new WebSocketApiClientImpl();\n        client.connect(((event) -> {\n            System.out.println(event);\n        }));\n\n        client.market().aggTrades(\"BTCUSDT\", null);\n\n        Thread.sleep(waitTime);\n        client.close();\n\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/market/AggTrades.java", "class_name": "AggTrades", "class_uri": "src/test/java/examples/websocketapi/market/AggTrades.java.AggTrades", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/market/TickerBook.java.TickerBook.[]TickerBook()", "name": "TickerBook", "arg_nums": 0, "params": [], "return_type": "", "signature": "private TickerBook()", "original_string": "    private TickerBook() {\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/market/TickerBook.java", "class_name": "TickerBook", "class_uri": "src/test/java/examples/websocketapi/market/TickerBook.java.TickerBook", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/market/TickerBook.java.TickerBook.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) throws InterruptedException {\n        WebSocketApiClient client = new WebSocketApiClientImpl();\n        client.connect(((event) -> {\n            System.out.println(event);\n        }));\n\n        JSONObject params = new JSONObject();\n        String[] symbols = new String[]{\"BTCUSDT\", \"BNBUSDT\"};\n\n        params.put(\"symbols\", symbols);\n        client.market().tickerBook(params);\n\n        Thread.sleep(waitTime);\n        client.close();\n\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/market/TickerBook.java", "class_name": "TickerBook", "class_uri": "src/test/java/examples/websocketapi/market/TickerBook.java.TickerBook", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/market/UiKlines.java.UiKlines.[]UiKlines()", "name": "UiKlines", "arg_nums": 0, "params": [], "return_type": "", "signature": "private UiKlines()", "original_string": "    private UiKlines() {\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/market/UiKlines.java", "class_name": "UiKlines", "class_uri": "src/test/java/examples/websocketapi/market/UiKlines.java.UiKlines", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/market/UiKlines.java.UiKlines.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) throws InterruptedException {\n        WebSocketApiClient client = new WebSocketApiClientImpl();\n        client.connect(((event) -> {\n            System.out.println(event);\n        }));\n\n        client.market().uiKlines(\"BTCUSDT\", \"1d\", null);\n\n        Thread.sleep(waitTime);\n        client.close();\n\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/market/UiKlines.java", "class_name": "UiKlines", "class_uri": "src/test/java/examples/websocketapi/market/UiKlines.java.UiKlines", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/market/Ticker.java.Ticker.[]Ticker()", "name": "Ticker", "arg_nums": 0, "params": [], "return_type": "", "signature": "private Ticker()", "original_string": "    private Ticker() {\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/market/Ticker.java", "class_name": "Ticker", "class_uri": "src/test/java/examples/websocketapi/market/Ticker.java.Ticker", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/market/Ticker.java.Ticker.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) throws InterruptedException {\n        WebSocketApiClient client = new WebSocketApiClientImpl();\n        client.connect(((event) -> {\n            System.out.println(event);\n        }));\n\n        JSONObject params = new JSONObject();\n        String[] symbols = new String[]{\"BTCUSDT\", \"BNBUSDT\"};\n\n        params.put(\"symbols\", symbols);\n        client.market().ticker(params);\n\n        Thread.sleep(waitTime);\n        client.close();\n\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/market/Ticker.java", "class_name": "Ticker", "class_uri": "src/test/java/examples/websocketapi/market/Ticker.java.Ticker", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/market/Klines.java.Klines.[]Klines()", "name": "Klines", "arg_nums": 0, "params": [], "return_type": "", "signature": "private Klines()", "original_string": "    private Klines() {\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/market/Klines.java", "class_name": "Klines", "class_uri": "src/test/java/examples/websocketapi/market/Klines.java.Klines", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/market/Klines.java.Klines.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) throws InterruptedException {\n        WebSocketApiClient client = new WebSocketApiClientImpl();\n        client.connect(((event) -> {\n            System.out.println(event);\n        }));\n\n        client.market().klines(\"BTCUSDT\", \"1d\", null);\n\n        Thread.sleep(waitTime);\n        client.close();\n\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/market/Klines.java", "class_name": "Klines", "class_uri": "src/test/java/examples/websocketapi/market/Klines.java.Klines", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/market/TickerTradingDay.java.TickerTradingDay.[]TickerTradingDay()", "name": "TickerTradingDay", "arg_nums": 0, "params": [], "return_type": "", "signature": "private TickerTradingDay()", "original_string": "    private TickerTradingDay() {\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/market/TickerTradingDay.java", "class_name": "TickerTradingDay", "class_uri": "src/test/java/examples/websocketapi/market/TickerTradingDay.java.TickerTradingDay", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/market/TickerTradingDay.java.TickerTradingDay.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) throws InterruptedException {\n        WebSocketApiClient client = new WebSocketApiClientImpl();\n        client.connect(((event) -> {\n            System.out.println(event);\n        }));\n\n        JSONObject params = new JSONObject();\n        String[] symbols = new String[]{\"BTCUSDT\", \"BNBUSDT\"};\n\n        params.put(\"symbols\", symbols);\n        client.market().tickerTradingDay(params);\n\n        Thread.sleep(waitTime);\n        client.close();\n\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/market/TickerTradingDay.java", "class_name": "TickerTradingDay", "class_uri": "src/test/java/examples/websocketapi/market/TickerTradingDay.java.TickerTradingDay", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/userdatastream/UserDataStreamPing.java.UserDataStreamPing.[]UserDataStreamPing()", "name": "UserDataStreamPing", "arg_nums": 0, "params": [], "return_type": "", "signature": "private UserDataStreamPing()", "original_string": "    private UserDataStreamPing() {\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/userdatastream/UserDataStreamPing.java", "class_name": "UserDataStreamPing", "class_uri": "src/test/java/examples/websocketapi/userdatastream/UserDataStreamPing.java.UserDataStreamPing", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/userdatastream/UserDataStreamPing.java.UserDataStreamPing.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) throws InterruptedException {\n        HmacSignatureGenerator signatureGenerator = new HmacSignatureGenerator(PrivateConfig.TESTNET_SECRET_KEY);\n        WebSocketApiClient client = new WebSocketApiClientImpl(PrivateConfig.TESTNET_API_KEY, signatureGenerator, DefaultUrls.TESTNET_WS_API_URL);\n\n        client.connect(((event) -> {\n            System.out.println(event);\n        }));\n        \n        client.userDataStream().userDataStreamPing(\"listenKey\", null);\n\n        Thread.sleep(waitTime);\n        client.close();\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/userdatastream/UserDataStreamPing.java", "class_name": "UserDataStreamPing", "class_uri": "src/test/java/examples/websocketapi/userdatastream/UserDataStreamPing.java.UserDataStreamPing", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/userdatastream/UserDataStreamStart.java.UserDataStreamStart.[]UserDataStreamStart()", "name": "UserDataStreamStart", "arg_nums": 0, "params": [], "return_type": "", "signature": "private UserDataStreamStart()", "original_string": "    private UserDataStreamStart() {\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/userdatastream/UserDataStreamStart.java", "class_name": "UserDataStreamStart", "class_uri": "src/test/java/examples/websocketapi/userdatastream/UserDataStreamStart.java.UserDataStreamStart", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/userdatastream/UserDataStreamStart.java.UserDataStreamStart.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) throws InterruptedException {\n        HmacSignatureGenerator signatureGenerator = new HmacSignatureGenerator(PrivateConfig.TESTNET_SECRET_KEY);\n        WebSocketApiClient client = new WebSocketApiClientImpl(PrivateConfig.TESTNET_API_KEY, signatureGenerator, DefaultUrls.TESTNET_WS_API_URL);\n\n        client.connect(((event) -> {\n            System.out.println(event);\n        }));\n        \n        client.userDataStream().userDataStreamStart(null);\n\n        Thread.sleep(waitTime);\n        client.close();\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/userdatastream/UserDataStreamStart.java", "class_name": "UserDataStreamStart", "class_uri": "src/test/java/examples/websocketapi/userdatastream/UserDataStreamStart.java.UserDataStreamStart", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/userdatastream/UserDataStreamStop.java.UserDataStreamStop.[]UserDataStreamStop()", "name": "UserDataStreamStop", "arg_nums": 0, "params": [], "return_type": "", "signature": "private UserDataStreamStop()", "original_string": "    private UserDataStreamStop() {\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/userdatastream/UserDataStreamStop.java", "class_name": "UserDataStreamStop", "class_uri": "src/test/java/examples/websocketapi/userdatastream/UserDataStreamStop.java.UserDataStreamStop", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketapi/userdatastream/UserDataStreamStop.java.UserDataStreamStop.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) throws InterruptedException {\n        HmacSignatureGenerator signatureGenerator = new HmacSignatureGenerator(PrivateConfig.TESTNET_SECRET_KEY);\n        WebSocketApiClient client = new WebSocketApiClientImpl(PrivateConfig.TESTNET_API_KEY, signatureGenerator, DefaultUrls.TESTNET_WS_API_URL);\n\n        client.connect(((event) -> {\n            System.out.println(event);\n        }));\n        \n        client.userDataStream().userDataStreamStop(\"listenKey\", null);\n\n        Thread.sleep(waitTime);\n        client.close();\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketapi/userdatastream/UserDataStreamStop.java", "class_name": "UserDataStreamStop", "class_uri": "src/test/java/examples/websocketapi/userdatastream/UserDataStreamStop.java.UserDataStreamStop", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/subaccount/FuturesAccount.java.FuturesAccount.[]FuturesAccount()", "name": "FuturesAccount", "arg_nums": 0, "params": [], "return_type": "", "signature": "private FuturesAccount()", "original_string": "    private FuturesAccount() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/subaccount/FuturesAccount.java", "class_name": "FuturesAccount", "class_uri": "src/test/java/examples/spot/subaccount/FuturesAccount.java.FuturesAccount", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/subaccount/FuturesAccount.java.FuturesAccount.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSubAccount().futuresAccount(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/subaccount/FuturesAccount.java", "class_name": "FuturesAccount", "class_uri": "src/test/java/examples/spot/subaccount/FuturesAccount.java.FuturesAccount", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/subaccount/ManagedSubWithdraw.java.ManagedSubWithdraw.[]ManagedSubWithdraw()", "name": "ManagedSubWithdraw", "arg_nums": 0, "params": [], "return_type": "", "signature": "private ManagedSubWithdraw()", "original_string": "    private ManagedSubWithdraw() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/subaccount/ManagedSubWithdraw.java", "class_name": "ManagedSubWithdraw", "class_uri": "src/test/java/examples/spot/subaccount/ManagedSubWithdraw.java.ManagedSubWithdraw", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/subaccount/ManagedSubWithdraw.java.ManagedSubWithdraw.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"fromEmail\", \"\");\n        parameters.put(\"asset\", \"USDT\");\n        parameters.put(\"amount\", amount);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSubAccount().managedSubWithdraw(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/subaccount/ManagedSubWithdraw.java", "class_name": "ManagedSubWithdraw", "class_uri": "src/test/java/examples/spot/subaccount/ManagedSubWithdraw.java.ManagedSubWithdraw", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/subaccount/FuturesPositionRisk.java.FuturesPositionRisk.[]FuturesPositionRisk()", "name": "FuturesPositionRisk", "arg_nums": 0, "params": [], "return_type": "", "signature": "private FuturesPositionRisk()", "original_string": "    private FuturesPositionRisk() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/subaccount/FuturesPositionRisk.java", "class_name": "FuturesPositionRisk", "class_uri": "src/test/java/examples/spot/subaccount/FuturesPositionRisk.java.FuturesPositionRisk", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/subaccount/FuturesPositionRisk.java.FuturesPositionRisk.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"another_virtual@q6c1dsmxnoemail.com\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSubAccount().futuresPositionRisk(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/subaccount/FuturesPositionRisk.java", "class_name": "FuturesPositionRisk", "class_uri": "src/test/java/examples/spot/subaccount/FuturesPositionRisk.java.FuturesPositionRisk", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/subaccount/EnableFutures.java.EnableFutures.[]EnableFutures()", "name": "EnableFutures", "arg_nums": 0, "params": [], "return_type": "", "signature": "private EnableFutures()", "original_string": "    private EnableFutures() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/subaccount/EnableFutures.java", "class_name": "EnableFutures", "class_uri": "src/test/java/examples/spot/subaccount/EnableFutures.java.EnableFutures", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/subaccount/EnableFutures.java.EnableFutures.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"another_virtual@q6c1dsmxnoemail.com\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSubAccount().enableFutures(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/subaccount/EnableFutures.java", "class_name": "EnableFutures", "class_uri": "src/test/java/examples/spot/subaccount/EnableFutures.java.EnableFutures", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/subaccount/EnableLeverageToken.java.EnableLeverageToken.[]EnableLeverageToken()", "name": "EnableLeverageToken", "arg_nums": 0, "params": [], "return_type": "", "signature": "private EnableLeverageToken()", "original_string": "    private EnableLeverageToken() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/subaccount/EnableLeverageToken.java", "class_name": "EnableLeverageToken", "class_uri": "src/test/java/examples/spot/subaccount/EnableLeverageToken.java.EnableLeverageToken", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/subaccount/EnableLeverageToken.java.EnableLeverageToken.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"\");\n        parameters.put(\"enableBlvt\", true);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSubAccount().enableLeverageToken(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/subaccount/EnableLeverageToken.java", "class_name": "EnableLeverageToken", "class_uri": "src/test/java/examples/spot/subaccount/EnableLeverageToken.java.EnableLeverageToken", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/subaccount/UpdateIpRestriction.java.UpdateIpRestriction.[]UpdateIpRestriction()", "name": "UpdateIpRestriction", "arg_nums": 0, "params": [], "return_type": "", "signature": "private UpdateIpRestriction()", "original_string": "    private UpdateIpRestriction() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/subaccount/UpdateIpRestriction.java", "class_name": "UpdateIpRestriction", "class_uri": "src/test/java/examples/spot/subaccount/UpdateIpRestriction.java.UpdateIpRestriction", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/subaccount/UpdateIpRestriction.java.UpdateIpRestriction.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"alice@test.com\");\n        parameters.put(\"subAccountApiKey\", \"apiKey\");\n        parameters.put(\"status\", \"2\");\n        parameters.put(\"ipAddress\", \"1.2.3.4\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSubAccount().updateIpRestriction(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/subaccount/UpdateIpRestriction.java", "class_name": "UpdateIpRestriction", "class_uri": "src/test/java/examples/spot/subaccount/UpdateIpRestriction.java.UpdateIpRestriction", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/subaccount/SubAccountList.java.SubAccountList.[]SubAccountList()", "name": "SubAccountList", "arg_nums": 0, "params": [], "return_type": "", "signature": "private SubAccountList()", "original_string": "    private SubAccountList() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/subaccount/SubAccountList.java", "class_name": "SubAccountList", "class_uri": "src/test/java/examples/spot/subaccount/SubAccountList.java.SubAccountList", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/subaccount/SubAccountList.java.SubAccountList.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSubAccount().subAccountList(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/subaccount/SubAccountList.java", "class_name": "SubAccountList", "class_uri": "src/test/java/examples/spot/subaccount/SubAccountList.java.SubAccountList", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/subaccount/FuturesAccountSummary.java.FuturesAccountSummary.[]FuturesAccountSummary()", "name": "FuturesAccountSummary", "arg_nums": 0, "params": [], "return_type": "", "signature": "private FuturesAccountSummary()", "original_string": "    private FuturesAccountSummary() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/subaccount/FuturesAccountSummary.java", "class_name": "FuturesAccountSummary", "class_uri": "src/test/java/examples/spot/subaccount/FuturesAccountSummary.java.FuturesAccountSummary", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/subaccount/FuturesAccountSummary.java.FuturesAccountSummary.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSubAccount().futuresAccountSummary(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/subaccount/FuturesAccountSummary.java", "class_name": "FuturesAccountSummary", "class_uri": "src/test/java/examples/spot/subaccount/FuturesAccountSummary.java.FuturesAccountSummary", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/subaccount/MarginTransfer.java.MarginTransfer.[]MarginTransfer()", "name": "MarginTransfer", "arg_nums": 0, "params": [], "return_type": "", "signature": "private MarginTransfer()", "original_string": "    private MarginTransfer() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/subaccount/MarginTransfer.java", "class_name": "MarginTransfer", "class_uri": "src/test/java/examples/spot/subaccount/MarginTransfer.java.MarginTransfer", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/subaccount/MarginTransfer.java.MarginTransfer.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"\");\n        parameters.put(\"asset\", \"USDT\");\n        parameters.put(\"amount\", amount);\n        parameters.put(\"type\", type);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSubAccount().marginTransfer(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/subaccount/MarginTransfer.java", "class_name": "MarginTransfer", "class_uri": "src/test/java/examples/spot/subaccount/MarginTransfer.java.MarginTransfer", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/subaccount/MarginAccountSummary.java.MarginAccountSummary.[]MarginAccountSummary()", "name": "MarginAccountSummary", "arg_nums": 0, "params": [], "return_type": "", "signature": "private MarginAccountSummary()", "original_string": "    private MarginAccountSummary() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/subaccount/MarginAccountSummary.java", "class_name": "MarginAccountSummary", "class_uri": "src/test/java/examples/spot/subaccount/MarginAccountSummary.java.MarginAccountSummary", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/subaccount/MarginAccountSummary.java.MarginAccountSummary.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSubAccount().marginAccountSummary(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/subaccount/MarginAccountSummary.java", "class_name": "MarginAccountSummary", "class_uri": "src/test/java/examples/spot/subaccount/MarginAccountSummary.java.MarginAccountSummary", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/subaccount/DepositHistory.java.DepositHistory.[]DepositHistory()", "name": "DepositHistory", "arg_nums": 0, "params": [], "return_type": "", "signature": "private DepositHistory()", "original_string": "    private DepositHistory() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/subaccount/DepositHistory.java", "class_name": "DepositHistory", "class_uri": "src/test/java/examples/spot/subaccount/DepositHistory.java.DepositHistory", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/subaccount/DepositHistory.java.DepositHistory.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSubAccount().depositHistory(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/subaccount/DepositHistory.java", "class_name": "DepositHistory", "class_uri": "src/test/java/examples/spot/subaccount/DepositHistory.java.DepositHistory", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/subaccount/Assets.java.Assets.[]Assets()", "name": "Assets", "arg_nums": 0, "params": [], "return_type": "", "signature": "private Assets()", "original_string": "    private Assets() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/subaccount/Assets.java", "class_name": "Assets", "class_uri": "src/test/java/examples/spot/subaccount/Assets.java.Assets", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/subaccount/Assets.java.Assets.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"alice@test.com\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSubAccount().assets(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/subaccount/Assets.java", "class_name": "Assets", "class_uri": "src/test/java/examples/spot/subaccount/Assets.java.Assets", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/subaccount/SubAccountSummary.java.SubAccountSummary.[]SubAccountSummary()", "name": "SubAccountSummary", "arg_nums": 0, "params": [], "return_type": "", "signature": "private SubAccountSummary()", "original_string": "    private SubAccountSummary() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/subaccount/SubAccountSummary.java", "class_name": "SubAccountSummary", "class_uri": "src/test/java/examples/spot/subaccount/SubAccountSummary.java.SubAccountSummary", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/subaccount/SubAccountSummary.java.SubAccountSummary.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSubAccount().spotAccountSummary(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/subaccount/SubAccountSummary.java", "class_name": "SubAccountSummary", "class_uri": "src/test/java/examples/spot/subaccount/SubAccountSummary.java.SubAccountSummary", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/subaccount/SubAccountToSubAccount.java.SubAccountToSubAccount.[]SubAccountToSubAccount()", "name": "SubAccountToSubAccount", "arg_nums": 0, "params": [], "return_type": "", "signature": "private SubAccountToSubAccount()", "original_string": "    private SubAccountToSubAccount() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/subaccount/SubAccountToSubAccount.java", "class_name": "SubAccountToSubAccount", "class_uri": "src/test/java/examples/spot/subaccount/SubAccountToSubAccount.java.SubAccountToSubAccount", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/subaccount/SubAccountToSubAccount.java.SubAccountToSubAccount.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"toEmail\", \"\");\n        parameters.put(\"asset\", \"USDT\");\n        parameters.put(\"amount\", amount);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSubAccount().subAccountToSubAccount(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/subaccount/SubAccountToSubAccount.java", "class_name": "SubAccountToSubAccount", "class_uri": "src/test/java/examples/spot/subaccount/SubAccountToSubAccount.java.SubAccountToSubAccount", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/subaccount/EnableMargin.java.EnableMargin.[]EnableMargin()", "name": "EnableMargin", "arg_nums": 0, "params": [], "return_type": "", "signature": "private EnableMargin()", "original_string": "    private EnableMargin() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/subaccount/EnableMargin.java", "class_name": "EnableMargin", "class_uri": "src/test/java/examples/spot/subaccount/EnableMargin.java.EnableMargin", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/subaccount/EnableMargin.java.EnableMargin.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"another_virtual@q6c1dsmxnoemail.com\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSubAccount().enableMargin(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/subaccount/EnableMargin.java", "class_name": "EnableMargin", "class_uri": "src/test/java/examples/spot/subaccount/EnableMargin.java.EnableMargin", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/subaccount/SpotTransferHistory.java.SpotTransferHistory.[]SpotTransferHistory()", "name": "SpotTransferHistory", "arg_nums": 0, "params": [], "return_type": "", "signature": "private SpotTransferHistory()", "original_string": "    private SpotTransferHistory() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/subaccount/SpotTransferHistory.java", "class_name": "SpotTransferHistory", "class_uri": "src/test/java/examples/spot/subaccount/SpotTransferHistory.java.SpotTransferHistory", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/subaccount/SpotTransferHistory.java.SpotTransferHistory.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSubAccount().spotTransferHistory(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/subaccount/SpotTransferHistory.java", "class_name": "SpotTransferHistory", "class_uri": "src/test/java/examples/spot/subaccount/SpotTransferHistory.java.SpotTransferHistory", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/subaccount/ManagedSubDetails.java.ManagedSubDetails.[]ManagedSubDetails()", "name": "ManagedSubDetails", "arg_nums": 0, "params": [], "return_type": "", "signature": "private ManagedSubDetails()", "original_string": "    private ManagedSubDetails() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/subaccount/ManagedSubDetails.java", "class_name": "ManagedSubDetails", "class_uri": "src/test/java/examples/spot/subaccount/ManagedSubDetails.java.ManagedSubDetails", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/subaccount/ManagedSubDetails.java.ManagedSubDetails.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSubAccount().managedSubDetails(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/subaccount/ManagedSubDetails.java", "class_name": "ManagedSubDetails", "class_uri": "src/test/java/examples/spot/subaccount/ManagedSubDetails.java.ManagedSubDetails", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/subaccount/MarginAccount.java.MarginAccount.[]MarginAccount()", "name": "MarginAccount", "arg_nums": 0, "params": [], "return_type": "", "signature": "private MarginAccount()", "original_string": "    private MarginAccount() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/subaccount/MarginAccount.java", "class_name": "MarginAccount", "class_uri": "src/test/java/examples/spot/subaccount/MarginAccount.java.MarginAccount", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/subaccount/MarginAccount.java.MarginAccount.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"another_virtual@q6c1dsmxnoemail.com\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSubAccount().marginAccount(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/subaccount/MarginAccount.java", "class_name": "MarginAccount", "class_uri": "src/test/java/examples/spot/subaccount/MarginAccount.java.MarginAccount", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/subaccount/MangedSubDeposit.java.MangedSubDeposit.[]MangedSubDeposit()", "name": "MangedSubDeposit", "arg_nums": 0, "params": [], "return_type": "", "signature": "private MangedSubDeposit()", "original_string": "    private MangedSubDeposit() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/subaccount/MangedSubDeposit.java", "class_name": "MangedSubDeposit", "class_uri": "src/test/java/examples/spot/subaccount/MangedSubDeposit.java.MangedSubDeposit", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/subaccount/MangedSubDeposit.java.MangedSubDeposit.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"toEmail\", \"\");\n        parameters.put(\"asset\", \"USDT\");\n        parameters.put(\"amount\", amount);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSubAccount().managedSubDeposit(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/subaccount/MangedSubDeposit.java", "class_name": "MangedSubDeposit", "class_uri": "src/test/java/examples/spot/subaccount/MangedSubDeposit.java.MangedSubDeposit", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/subaccount/SubAccountToMaster.java.SubAccountToMaster.[]SubAccountToMaster()", "name": "SubAccountToMaster", "arg_nums": 0, "params": [], "return_type": "", "signature": "private SubAccountToMaster()", "original_string": "    private SubAccountToMaster() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/subaccount/SubAccountToMaster.java", "class_name": "SubAccountToMaster", "class_uri": "src/test/java/examples/spot/subaccount/SubAccountToMaster.java.SubAccountToMaster", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/subaccount/SubAccountToMaster.java.SubAccountToMaster.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"asset\", \"USDT\");\n        parameters.put(\"amount\", amount);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSubAccount().subAccountToMaster(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/subaccount/SubAccountToMaster.java", "class_name": "SubAccountToMaster", "class_uri": "src/test/java/examples/spot/subaccount/SubAccountToMaster.java.SubAccountToMaster", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/subaccount/CreateVirtualSubAccount.java.CreateVirtualSubAccount.[]CreateVirtualSubAccount()", "name": "CreateVirtualSubAccount", "arg_nums": 0, "params": [], "return_type": "", "signature": "private CreateVirtualSubAccount()", "original_string": "    private CreateVirtualSubAccount() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/subaccount/CreateVirtualSubAccount.java", "class_name": "CreateVirtualSubAccount", "class_uri": "src/test/java/examples/spot/subaccount/CreateVirtualSubAccount.java.CreateVirtualSubAccount", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/subaccount/CreateVirtualSubAccount.java.CreateVirtualSubAccount.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"subAccountString\", \"\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSubAccount().createVirtualSubAccount(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/subaccount/CreateVirtualSubAccount.java", "class_name": "CreateVirtualSubAccount", "class_uri": "src/test/java/examples/spot/subaccount/CreateVirtualSubAccount.java.CreateVirtualSubAccount", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/subaccount/GetIpRestriction.java.GetIpRestriction.[]GetIpRestriction()", "name": "GetIpRestriction", "arg_nums": 0, "params": [], "return_type": "", "signature": "private GetIpRestriction()", "original_string": "    private GetIpRestriction() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/subaccount/GetIpRestriction.java", "class_name": "GetIpRestriction", "class_uri": "src/test/java/examples/spot/subaccount/GetIpRestriction.java.GetIpRestriction", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/subaccount/GetIpRestriction.java.GetIpRestriction.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"\");\n        parameters.put(\"subAccountApiKey\", \"\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSubAccount().getIpRestriction(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/subaccount/GetIpRestriction.java", "class_name": "GetIpRestriction", "class_uri": "src/test/java/examples/spot/subaccount/GetIpRestriction.java.GetIpRestriction", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/subaccount/TransferHistory.java.TransferHistory.[]TransferHistory()", "name": "TransferHistory", "arg_nums": 0, "params": [], "return_type": "", "signature": "private TransferHistory()", "original_string": "    private TransferHistory() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/subaccount/TransferHistory.java", "class_name": "TransferHistory", "class_uri": "src/test/java/examples/spot/subaccount/TransferHistory.java.TransferHistory", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/subaccount/TransferHistory.java.TransferHistory.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSubAccount().transferHistory(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/subaccount/TransferHistory.java", "class_name": "TransferHistory", "class_uri": "src/test/java/examples/spot/subaccount/TransferHistory.java.TransferHistory", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/subaccount/AccountStatus.java.AccountStatus.[]AccountStatus()", "name": "AccountStatus", "arg_nums": 0, "params": [], "return_type": "", "signature": "private AccountStatus()", "original_string": "    private AccountStatus() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/subaccount/AccountStatus.java", "class_name": "AccountStatus", "class_uri": "src/test/java/examples/spot/subaccount/AccountStatus.java.AccountStatus", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/subaccount/AccountStatus.java.AccountStatus.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSubAccount().accountStatus(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/subaccount/AccountStatus.java", "class_name": "AccountStatus", "class_uri": "src/test/java/examples/spot/subaccount/AccountStatus.java.AccountStatus", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/subaccount/FuturesAccountV2.java.FuturesAccountV2.[]FuturesAccountV2()", "name": "FuturesAccountV2", "arg_nums": 0, "params": [], "return_type": "", "signature": "private FuturesAccountV2()", "original_string": "    private FuturesAccountV2() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/subaccount/FuturesAccountV2.java", "class_name": "FuturesAccountV2", "class_uri": "src/test/java/examples/spot/subaccount/FuturesAccountV2.java.FuturesAccountV2", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/subaccount/FuturesAccountV2.java.FuturesAccountV2.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"\");\n        parameters.put(\"futuresType\", futuresType);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSubAccount().futuresAccountV2(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/subaccount/FuturesAccountV2.java", "class_name": "FuturesAccountV2", "class_uri": "src/test/java/examples/spot/subaccount/FuturesAccountV2.java.FuturesAccountV2", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/subaccount/QueryUniversalTransfer.java.QueryUniversalTransfer.[]QueryUniversalTransfer()", "name": "QueryUniversalTransfer", "arg_nums": 0, "params": [], "return_type": "", "signature": "private QueryUniversalTransfer()", "original_string": "    private QueryUniversalTransfer() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/subaccount/QueryUniversalTransfer.java", "class_name": "QueryUniversalTransfer", "class_uri": "src/test/java/examples/spot/subaccount/QueryUniversalTransfer.java.QueryUniversalTransfer", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/subaccount/QueryUniversalTransfer.java.QueryUniversalTransfer.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSubAccount().queryUniversalTransfer(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/subaccount/QueryUniversalTransfer.java", "class_name": "QueryUniversalTransfer", "class_uri": "src/test/java/examples/spot/subaccount/QueryUniversalTransfer.java.QueryUniversalTransfer", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/subaccount/FuturesAccountSummaryV2.java.FuturesAccountSummaryV2.[]FuturesAccountSummaryV2()", "name": "FuturesAccountSummaryV2", "arg_nums": 0, "params": [], "return_type": "", "signature": "private FuturesAccountSummaryV2()", "original_string": "    private FuturesAccountSummaryV2() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/subaccount/FuturesAccountSummaryV2.java", "class_name": "FuturesAccountSummaryV2", "class_uri": "src/test/java/examples/spot/subaccount/FuturesAccountSummaryV2.java.FuturesAccountSummaryV2", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/subaccount/FuturesAccountSummaryV2.java.FuturesAccountSummaryV2.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"futuresType\", futuresType);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSubAccount().futuresAccountSummaryV2(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/subaccount/FuturesAccountSummaryV2.java", "class_name": "FuturesAccountSummaryV2", "class_uri": "src/test/java/examples/spot/subaccount/FuturesAccountSummaryV2.java.FuturesAccountSummaryV2", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/subaccount/GetFuturesInternalTransfer.java.GetFuturesInternalTransfer.[]GetFuturesInternalTransfer()", "name": "GetFuturesInternalTransfer", "arg_nums": 0, "params": [], "return_type": "", "signature": "private GetFuturesInternalTransfer()", "original_string": "    private GetFuturesInternalTransfer() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/subaccount/GetFuturesInternalTransfer.java", "class_name": "GetFuturesInternalTransfer", "class_uri": "src/test/java/examples/spot/subaccount/GetFuturesInternalTransfer.java.GetFuturesInternalTransfer", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/subaccount/GetFuturesInternalTransfer.java.GetFuturesInternalTransfer.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"\");\n        parameters.put(\"futuresType\", futuresType);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSubAccount().getFuturesInternalTransfer(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/subaccount/GetFuturesInternalTransfer.java", "class_name": "GetFuturesInternalTransfer", "class_uri": "src/test/java/examples/spot/subaccount/GetFuturesInternalTransfer.java.GetFuturesInternalTransfer", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/subaccount/UniversalTransfer.java.UniversalTransfer.[]UniversalTransfer()", "name": "UniversalTransfer", "arg_nums": 0, "params": [], "return_type": "", "signature": "private UniversalTransfer()", "original_string": "    private UniversalTransfer() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/subaccount/UniversalTransfer.java", "class_name": "UniversalTransfer", "class_uri": "src/test/java/examples/spot/subaccount/UniversalTransfer.java.UniversalTransfer", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/subaccount/UniversalTransfer.java.UniversalTransfer.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"fromAccountType\", \"SPOT\");\n        parameters.put(\"toAccountType\", \"USDT_FUTURE\");\n        parameters.put(\"asset\", \"USDT\");\n        parameters.put(\"amount\", amount);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSubAccount().universalTransfer(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/subaccount/UniversalTransfer.java", "class_name": "UniversalTransfer", "class_uri": "src/test/java/examples/spot/subaccount/UniversalTransfer.java.UniversalTransfer", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/subaccount/FuturesTransfer.java.FuturesTransfer.[]FuturesTransfer()", "name": "FuturesTransfer", "arg_nums": 0, "params": [], "return_type": "", "signature": "private FuturesTransfer()", "original_string": "    private FuturesTransfer() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/subaccount/FuturesTransfer.java", "class_name": "FuturesTransfer", "class_uri": "src/test/java/examples/spot/subaccount/FuturesTransfer.java.FuturesTransfer", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/subaccount/FuturesTransfer.java.FuturesTransfer.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"\");\n        parameters.put(\"asset\", \"USDT\");\n        parameters.put(\"amount\", amount);\n        parameters.put(\"type\", type);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSubAccount().futuresTransfer(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/subaccount/FuturesTransfer.java", "class_name": "FuturesTransfer", "class_uri": "src/test/java/examples/spot/subaccount/FuturesTransfer.java.FuturesTransfer", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/subaccount/FuturesPositionRiskV2.java.FuturesPositionRiskV2.[]FuturesPositionRiskV2()", "name": "FuturesPositionRiskV2", "arg_nums": 0, "params": [], "return_type": "", "signature": "private FuturesPositionRiskV2()", "original_string": "    private FuturesPositionRiskV2() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/subaccount/FuturesPositionRiskV2.java", "class_name": "FuturesPositionRiskV2", "class_uri": "src/test/java/examples/spot/subaccount/FuturesPositionRiskV2.java.FuturesPositionRiskV2", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/subaccount/FuturesPositionRiskV2.java.FuturesPositionRiskV2.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"\");\n        parameters.put(\"futuresType\", futuresType);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSubAccount().futuresPositionRiskV2(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/subaccount/FuturesPositionRiskV2.java", "class_name": "FuturesPositionRiskV2", "class_uri": "src/test/java/examples/spot/subaccount/FuturesPositionRiskV2.java.FuturesPositionRiskV2", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/subaccount/DepositAddress.java.DepositAddress.[]DepositAddress()", "name": "DepositAddress", "arg_nums": 0, "params": [], "return_type": "", "signature": "private DepositAddress()", "original_string": "    private DepositAddress() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/subaccount/DepositAddress.java", "class_name": "DepositAddress", "class_uri": "src/test/java/examples/spot/subaccount/DepositAddress.java.DepositAddress", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/subaccount/DepositAddress.java.DepositAddress.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"\");\n        parameters.put(\"coin\", \"USDT\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSubAccount().depositAddress(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/subaccount/DepositAddress.java", "class_name": "DepositAddress", "class_uri": "src/test/java/examples/spot/subaccount/DepositAddress.java.DepositAddress", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/subaccount/DeleteIpList.java.DeleteIpList.[]DeleteIpList()", "name": "DeleteIpList", "arg_nums": 0, "params": [], "return_type": "", "signature": "private DeleteIpList()", "original_string": "    private DeleteIpList() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/subaccount/DeleteIpList.java", "class_name": "DeleteIpList", "class_uri": "src/test/java/examples/spot/subaccount/DeleteIpList.java.DeleteIpList", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/subaccount/DeleteIpList.java.DeleteIpList.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"\");\n        parameters.put(\"subAccountApiKey\", \"\");\n        parameters.put(\"ipAddress\", \"\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSubAccount().deleteIpList(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/subaccount/DeleteIpList.java", "class_name": "DeleteIpList", "class_uri": "src/test/java/examples/spot/subaccount/DeleteIpList.java.DeleteIpList", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/subaccount/ManagedSubAccountSnapshot.java.ManagedSubAccountSnapshot.[]ManagedSubAccountSnapshot()", "name": "ManagedSubAccountSnapshot", "arg_nums": 0, "params": [], "return_type": "", "signature": "private ManagedSubAccountSnapshot()", "original_string": "    private ManagedSubAccountSnapshot() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/subaccount/ManagedSubAccountSnapshot.java", "class_name": "ManagedSubAccountSnapshot", "class_uri": "src/test/java/examples/spot/subaccount/ManagedSubAccountSnapshot.java.ManagedSubAccountSnapshot", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/subaccount/ManagedSubAccountSnapshot.java.ManagedSubAccountSnapshot.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"\");\n        parameters.put(\"type\", \"SPOT\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSubAccount().managedSubAccountSnapshot(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/subaccount/ManagedSubAccountSnapshot.java", "class_name": "ManagedSubAccountSnapshot", "class_uri": "src/test/java/examples/spot/subaccount/ManagedSubAccountSnapshot.java.ManagedSubAccountSnapshot", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/subaccount/FuturesInternalTransfer.java.FuturesInternalTransfer.[]FuturesInternalTransfer()", "name": "FuturesInternalTransfer", "arg_nums": 0, "params": [], "return_type": "", "signature": "private FuturesInternalTransfer()", "original_string": "    private FuturesInternalTransfer() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/subaccount/FuturesInternalTransfer.java", "class_name": "FuturesInternalTransfer", "class_uri": "src/test/java/examples/spot/subaccount/FuturesInternalTransfer.java.FuturesInternalTransfer", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/subaccount/FuturesInternalTransfer.java.FuturesInternalTransfer.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"fromEmail\", \"\");\n        parameters.put(\"toEmail\", \"\");\n        parameters.put(\"futuresType\", futuresType);\n        parameters.put(\"asset\", \"USDT\");\n        parameters.put(\"amount\", amount);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSubAccount().futuresInternalTransfer(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/subaccount/FuturesInternalTransfer.java", "class_name": "FuturesInternalTransfer", "class_uri": "src/test/java/examples/spot/subaccount/FuturesInternalTransfer.java.FuturesInternalTransfer", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/InterestHistory.java.InterestHistory.[]InterestHistory()", "name": "InterestHistory", "arg_nums": 0, "params": [], "return_type": "", "signature": "private InterestHistory()", "original_string": "    private InterestHistory() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/InterestHistory.java", "class_name": "InterestHistory", "class_uri": "src/test/java/examples/spot/margin/InterestHistory.java.InterestHistory", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/InterestHistory.java.InterestHistory.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMargin().interestHistory(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/InterestHistory.java", "class_name": "InterestHistory", "class_uri": "src/test/java/examples/spot/margin/InterestHistory.java.InterestHistory", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/CrossMarginData.java.CrossMarginData.[]CrossMarginData()", "name": "CrossMarginData", "arg_nums": 0, "params": [], "return_type": "", "signature": "private CrossMarginData()", "original_string": "    private CrossMarginData() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/CrossMarginData.java", "class_name": "CrossMarginData", "class_uri": "src/test/java/examples/spot/margin/CrossMarginData.java.CrossMarginData", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/CrossMarginData.java.CrossMarginData.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"coin\", \"BNB\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMargin().crossMarginData(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/CrossMarginData.java", "class_name": "CrossMarginData", "class_uri": "src/test/java/examples/spot/margin/CrossMarginData.java.CrossMarginData", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/CancelAllMarginOrders.java.CancelAllMarginOrders.[]CancelAllMarginOrders()", "name": "CancelAllMarginOrders", "arg_nums": 0, "params": [], "return_type": "", "signature": "private CancelAllMarginOrders()", "original_string": "    private CancelAllMarginOrders() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/CancelAllMarginOrders.java", "class_name": "CancelAllMarginOrders", "class_uri": "src/test/java/examples/spot/margin/CancelAllMarginOrders.java.CancelAllMarginOrders", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/CancelAllMarginOrders.java.CancelAllMarginOrders.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMargin().cancelOpenOrders(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/CancelAllMarginOrders.java", "class_name": "CancelAllMarginOrders", "class_uri": "src/test/java/examples/spot/margin/CancelAllMarginOrders.java.CancelAllMarginOrders", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/AllIsolatedSymbols.java.AllIsolatedSymbols.[]AllIsolatedSymbols()", "name": "AllIsolatedSymbols", "arg_nums": 0, "params": [], "return_type": "", "signature": "private AllIsolatedSymbols()", "original_string": "    private AllIsolatedSymbols() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/AllIsolatedSymbols.java", "class_name": "AllIsolatedSymbols", "class_uri": "src/test/java/examples/spot/margin/AllIsolatedSymbols.java.AllIsolatedSymbols", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/AllIsolatedSymbols.java.AllIsolatedSymbols.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMargin().getAllIsolatedSymbols(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/AllIsolatedSymbols.java", "class_name": "AllIsolatedSymbols", "class_uri": "src/test/java/examples/spot/margin/AllIsolatedSymbols.java.AllIsolatedSymbols", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/CrossMarginCollateralRatio.java.CrossMarginCollateralRatio.[]CrossMarginCollateralRatio()", "name": "CrossMarginCollateralRatio", "arg_nums": 0, "params": [], "return_type": "", "signature": "private CrossMarginCollateralRatio()", "original_string": "    private CrossMarginCollateralRatio() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/CrossMarginCollateralRatio.java", "class_name": "CrossMarginCollateralRatio", "class_uri": "src/test/java/examples/spot/margin/CrossMarginCollateralRatio.java.CrossMarginCollateralRatio", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/CrossMarginCollateralRatio.java.CrossMarginCollateralRatio.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMargin().crossMarginCollateralRatio();\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/CrossMarginCollateralRatio.java", "class_name": "CrossMarginCollateralRatio", "class_uri": "src/test/java/examples/spot/margin/CrossMarginCollateralRatio.java.CrossMarginCollateralRatio", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/AdjustCrossMarginMaxLeverage.java.AdjustCrossMarginMaxLeverage.[]AdjustCrossMarginMaxLeverage()", "name": "AdjustCrossMarginMaxLeverage", "arg_nums": 0, "params": [], "return_type": "", "signature": "private AdjustCrossMarginMaxLeverage()", "original_string": "    private AdjustCrossMarginMaxLeverage() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/AdjustCrossMarginMaxLeverage.java", "class_name": "AdjustCrossMarginMaxLeverage", "class_uri": "src/test/java/examples/spot/margin/AdjustCrossMarginMaxLeverage.java.AdjustCrossMarginMaxLeverage", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/AdjustCrossMarginMaxLeverage.java.AdjustCrossMarginMaxLeverage.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"maxLeverage\", leverage);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMargin().adjustCrossMarginMaxLeverage(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/AdjustCrossMarginMaxLeverage.java", "class_name": "AdjustCrossMarginMaxLeverage", "class_uri": "src/test/java/examples/spot/margin/AdjustCrossMarginMaxLeverage.java.AdjustCrossMarginMaxLeverage", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/Trades.java.Trades.[]Trades()", "name": "Trades", "arg_nums": 0, "params": [], "return_type": "", "signature": "private Trades()", "original_string": "    private Trades() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/Trades.java", "class_name": "Trades", "class_uri": "src/test/java/examples/spot/margin/Trades.java.Trades", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/Trades.java.Trades.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMargin().trades(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/Trades.java", "class_name": "Trades", "class_uri": "src/test/java/examples/spot/margin/Trades.java.Trades", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/BnbBurn.java.BnbBurn.[]BnbBurn()", "name": "BnbBurn", "arg_nums": 0, "params": [], "return_type": "", "signature": "private BnbBurn()", "original_string": "    private BnbBurn() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/BnbBurn.java", "class_name": "BnbBurn", "class_uri": "src/test/java/examples/spot/margin/BnbBurn.java.BnbBurn", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/BnbBurn.java.BnbBurn.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"spotBNBBurn\", true);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMargin().bnbBurn(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/BnbBurn.java", "class_name": "BnbBurn", "class_uri": "src/test/java/examples/spot/margin/BnbBurn.java.BnbBurn", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/DelistSchedule.java.DelistSchedule.[]DelistSchedule()", "name": "DelistSchedule", "arg_nums": 0, "params": [], "return_type": "", "signature": "private DelistSchedule()", "original_string": "    private DelistSchedule() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/DelistSchedule.java", "class_name": "DelistSchedule", "class_uri": "src/test/java/examples/spot/margin/DelistSchedule.java.DelistSchedule", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/DelistSchedule.java.DelistSchedule.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMargin().delistSchedule(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/DelistSchedule.java", "class_name": "DelistSchedule", "class_uri": "src/test/java/examples/spot/margin/DelistSchedule.java.DelistSchedule", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/AvailableInventory.java.AvailableInventory.[]AvailableInventory()", "name": "AvailableInventory", "arg_nums": 0, "params": [], "return_type": "", "signature": "private AvailableInventory()", "original_string": "    private AvailableInventory() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/AvailableInventory.java", "class_name": "AvailableInventory", "class_uri": "src/test/java/examples/spot/margin/AvailableInventory.java.AvailableInventory", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/AvailableInventory.java.AvailableInventory.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"type\", \"MARGIN\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMargin().availableInventory(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/AvailableInventory.java", "class_name": "AvailableInventory", "class_uri": "src/test/java/examples/spot/margin/AvailableInventory.java.AvailableInventory", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/GetMarginOpenOrders.java.GetMarginOpenOrders.[]GetMarginOpenOrders()", "name": "GetMarginOpenOrders", "arg_nums": 0, "params": [], "return_type": "", "signature": "private GetMarginOpenOrders()", "original_string": "    private GetMarginOpenOrders() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/GetMarginOpenOrders.java", "class_name": "GetMarginOpenOrders", "class_uri": "src/test/java/examples/spot/margin/GetMarginOpenOrders.java.GetMarginOpenOrders", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/GetMarginOpenOrders.java.GetMarginOpenOrders.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMargin().getOpenOrders(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/GetMarginOpenOrders.java", "class_name": "GetMarginOpenOrders", "class_uri": "src/test/java/examples/spot/margin/GetMarginOpenOrders.java.GetMarginOpenOrders", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/GetBnbBurn.java.GetBnbBurn.[]GetBnbBurn()", "name": "GetBnbBurn", "arg_nums": 0, "params": [], "return_type": "", "signature": "private GetBnbBurn()", "original_string": "    private GetBnbBurn() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/GetBnbBurn.java", "class_name": "GetBnbBurn", "class_uri": "src/test/java/examples/spot/margin/GetBnbBurn.java.GetBnbBurn", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/GetBnbBurn.java.GetBnbBurn.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMargin().getBnbBurn(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/GetBnbBurn.java", "class_name": "GetBnbBurn", "class_uri": "src/test/java/examples/spot/margin/GetBnbBurn.java.GetBnbBurn", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/DisableIsolatedAccount.java.DisableIsolatedAccount.[]DisableIsolatedAccount()", "name": "DisableIsolatedAccount", "arg_nums": 0, "params": [], "return_type": "", "signature": "private DisableIsolatedAccount()", "original_string": "    private DisableIsolatedAccount() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/DisableIsolatedAccount.java", "class_name": "DisableIsolatedAccount", "class_uri": "src/test/java/examples/spot/margin/DisableIsolatedAccount.java.DisableIsolatedAccount", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/DisableIsolatedAccount.java.DisableIsolatedAccount.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        String result = client.createMargin().disableIsolatedAccount(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/DisableIsolatedAccount.java", "class_name": "DisableIsolatedAccount", "class_uri": "src/test/java/examples/spot/margin/DisableIsolatedAccount.java.DisableIsolatedAccount", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/IsolatedMarginData.java.IsolatedMarginData.[]IsolatedMarginData()", "name": "IsolatedMarginData", "arg_nums": 0, "params": [], "return_type": "", "signature": "private IsolatedMarginData()", "original_string": "    private IsolatedMarginData() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/IsolatedMarginData.java", "class_name": "IsolatedMarginData", "class_uri": "src/test/java/examples/spot/margin/IsolatedMarginData.java.IsolatedMarginData", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/IsolatedMarginData.java.IsolatedMarginData.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMargin().isolatedMarginTier(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/IsolatedMarginData.java", "class_name": "IsolatedMarginData", "class_uri": "src/test/java/examples/spot/margin/IsolatedMarginData.java.IsolatedMarginData", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/AllAssets.java.AllAssets.[]AllAssets()", "name": "AllAssets", "arg_nums": 0, "params": [], "return_type": "", "signature": "private AllAssets()", "original_string": "    private AllAssets() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/AllAssets.java", "class_name": "AllAssets", "class_uri": "src/test/java/examples/spot/margin/AllAssets.java.AllAssets", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/AllAssets.java.AllAssets.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMargin().allAssets();\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/AllAssets.java", "class_name": "AllAssets", "class_uri": "src/test/java/examples/spot/margin/AllAssets.java.AllAssets", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/MarginAccount.java.MarginAccount.[]MarginAccount()", "name": "MarginAccount", "arg_nums": 0, "params": [], "return_type": "", "signature": "private MarginAccount()", "original_string": "    private MarginAccount() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/MarginAccount.java", "class_name": "MarginAccount", "class_uri": "src/test/java/examples/spot/margin/MarginAccount.java.MarginAccount", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/MarginAccount.java.MarginAccount.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMargin().account(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/MarginAccount.java", "class_name": "MarginAccount", "class_uri": "src/test/java/examples/spot/margin/MarginAccount.java.MarginAccount", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/GetAllMarginOrders.java.GetAllMarginOrders.[]GetAllMarginOrders()", "name": "GetAllMarginOrders", "arg_nums": 0, "params": [], "return_type": "", "signature": "private GetAllMarginOrders()", "original_string": "    private GetAllMarginOrders() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/GetAllMarginOrders.java", "class_name": "GetAllMarginOrders", "class_uri": "src/test/java/examples/spot/margin/GetAllMarginOrders.java.GetAllMarginOrders", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/GetAllMarginOrders.java.GetAllMarginOrders.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMargin().getAllOrders(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/GetAllMarginOrders.java", "class_name": "GetAllMarginOrders", "class_uri": "src/test/java/examples/spot/margin/GetAllMarginOrders.java.GetAllMarginOrders", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/SmallLiabilityAssets.java.SmallLiabilityAssets.[]SmallLiabilityAssets()", "name": "SmallLiabilityAssets", "arg_nums": 0, "params": [], "return_type": "", "signature": "private SmallLiabilityAssets()", "original_string": "    private SmallLiabilityAssets() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/SmallLiabilityAssets.java", "class_name": "SmallLiabilityAssets", "class_uri": "src/test/java/examples/spot/margin/SmallLiabilityAssets.java.SmallLiabilityAssets", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/SmallLiabilityAssets.java.SmallLiabilityAssets.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMargin().smallLiabilityAssets(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/SmallLiabilityAssets.java", "class_name": "SmallLiabilityAssets", "class_uri": "src/test/java/examples/spot/margin/SmallLiabilityAssets.java.SmallLiabilityAssets", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/ForceLiquidationRec.java.ForceLiquidationRec.[]ForceLiquidationRec()", "name": "ForceLiquidationRec", "arg_nums": 0, "params": [], "return_type": "", "signature": "private ForceLiquidationRec()", "original_string": "    private ForceLiquidationRec() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/ForceLiquidationRec.java", "class_name": "ForceLiquidationRec", "class_uri": "src/test/java/examples/spot/margin/ForceLiquidationRec.java.ForceLiquidationRec", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/ForceLiquidationRec.java.ForceLiquidationRec.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMargin().forceLiquidationRec(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/ForceLiquidationRec.java", "class_name": "ForceLiquidationRec", "class_uri": "src/test/java/examples/spot/margin/ForceLiquidationRec.java.ForceLiquidationRec", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/EnableIsolatedAccount.java.EnableIsolatedAccount.[]EnableIsolatedAccount()", "name": "EnableIsolatedAccount", "arg_nums": 0, "params": [], "return_type": "", "signature": "private EnableIsolatedAccount()", "original_string": "    private EnableIsolatedAccount() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/EnableIsolatedAccount.java", "class_name": "EnableIsolatedAccount", "class_uri": "src/test/java/examples/spot/margin/EnableIsolatedAccount.java.EnableIsolatedAccount", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/EnableIsolatedAccount.java.EnableIsolatedAccount.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        String result = client.createMargin().enableIsolatedAccount(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/EnableIsolatedAccount.java", "class_name": "EnableIsolatedAccount", "class_uri": "src/test/java/examples/spot/margin/EnableIsolatedAccount.java.EnableIsolatedAccount", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/GetAllMarginOcoOrders.java.GetAllMarginOcoOrders.[]GetAllMarginOcoOrders()", "name": "GetAllMarginOcoOrders", "arg_nums": 0, "params": [], "return_type": "", "signature": "private GetAllMarginOcoOrders()", "original_string": "    private GetAllMarginOcoOrders() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/GetAllMarginOcoOrders.java", "class_name": "GetAllMarginOcoOrders", "class_uri": "src/test/java/examples/spot/margin/GetAllMarginOcoOrders.java.GetAllMarginOcoOrders", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/GetAllMarginOcoOrders.java.GetAllMarginOcoOrders.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMargin().getAllOcoOrders(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/GetAllMarginOcoOrders.java", "class_name": "GetAllMarginOcoOrders", "class_uri": "src/test/java/examples/spot/margin/GetAllMarginOcoOrders.java.GetAllMarginOcoOrders", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/TransferHistory.java.TransferHistory.[]TransferHistory()", "name": "TransferHistory", "arg_nums": 0, "params": [], "return_type": "", "signature": "private TransferHistory()", "original_string": "    private TransferHistory() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/TransferHistory.java", "class_name": "TransferHistory", "class_uri": "src/test/java/examples/spot/margin/TransferHistory.java.TransferHistory", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/TransferHistory.java.TransferHistory.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMargin().transferHistory(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/TransferHistory.java", "class_name": "TransferHistory", "class_uri": "src/test/java/examples/spot/margin/TransferHistory.java.TransferHistory", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/OrderRateLimit.java.OrderRateLimit.[]OrderRateLimit()", "name": "OrderRateLimit", "arg_nums": 0, "params": [], "return_type": "", "signature": "private OrderRateLimit()", "original_string": "    private OrderRateLimit() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/OrderRateLimit.java", "class_name": "OrderRateLimit", "class_uri": "src/test/java/examples/spot/margin/OrderRateLimit.java.OrderRateLimit", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/OrderRateLimit.java.OrderRateLimit.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMargin().orderRateLimit(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/OrderRateLimit.java", "class_name": "OrderRateLimit", "class_uri": "src/test/java/examples/spot/margin/OrderRateLimit.java.OrderRateLimit", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/PriceIndex.java.PriceIndex.[]PriceIndex()", "name": "PriceIndex", "arg_nums": 0, "params": [], "return_type": "", "signature": "private PriceIndex()", "original_string": "    private PriceIndex() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/PriceIndex.java", "class_name": "PriceIndex", "class_uri": "src/test/java/examples/spot/margin/PriceIndex.java.PriceIndex", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/PriceIndex.java.PriceIndex.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMargin().priceIndex(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/PriceIndex.java", "class_name": "PriceIndex", "class_uri": "src/test/java/examples/spot/margin/PriceIndex.java.PriceIndex", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/TradeCoeff.java.TradeCoeff.[]TradeCoeff()", "name": "TradeCoeff", "arg_nums": 0, "params": [], "return_type": "", "signature": "private TradeCoeff()", "original_string": "    private TradeCoeff() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/TradeCoeff.java", "class_name": "TradeCoeff", "class_uri": "src/test/java/examples/spot/margin/TradeCoeff.java.TradeCoeff", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/TradeCoeff.java.TradeCoeff.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMargin().tradeCoeff(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/TradeCoeff.java", "class_name": "TradeCoeff", "class_uri": "src/test/java/examples/spot/margin/TradeCoeff.java.TradeCoeff", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/NextHourlyInterestRate.java.NextHourlyInterestRate.[]NextHourlyInterestRate()", "name": "NextHourlyInterestRate", "arg_nums": 0, "params": [], "return_type": "", "signature": "private NextHourlyInterestRate()", "original_string": "    private NextHourlyInterestRate() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/NextHourlyInterestRate.java", "class_name": "NextHourlyInterestRate", "class_uri": "src/test/java/examples/spot/margin/NextHourlyInterestRate.java.NextHourlyInterestRate", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/NextHourlyInterestRate.java.NextHourlyInterestRate.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"assets\", \"BTC,ETH\");\n        parameters.put(\"isIsolated\", true);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMargin().nextHourlyInterestRate(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/NextHourlyInterestRate.java", "class_name": "NextHourlyInterestRate", "class_uri": "src/test/java/examples/spot/margin/NextHourlyInterestRate.java.NextHourlyInterestRate", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/SmallLiabilityExchangeHistory.java.SmallLiabilityExchangeHistory.[]SmallLiabilityExchangeHistory()", "name": "SmallLiabilityExchangeHistory", "arg_nums": 0, "params": [], "return_type": "", "signature": "private SmallLiabilityExchangeHistory()", "original_string": "    private SmallLiabilityExchangeHistory() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/SmallLiabilityExchangeHistory.java", "class_name": "SmallLiabilityExchangeHistory", "class_uri": "src/test/java/examples/spot/margin/SmallLiabilityExchangeHistory.java.SmallLiabilityExchangeHistory", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/SmallLiabilityExchangeHistory.java.SmallLiabilityExchangeHistory.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"current\", current);\n        parameters.put(\"size\", size);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMargin().smallLiabilityExchangeHistory(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/SmallLiabilityExchangeHistory.java", "class_name": "SmallLiabilityExchangeHistory", "class_uri": "src/test/java/examples/spot/margin/SmallLiabilityExchangeHistory.java.SmallLiabilityExchangeHistory", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/NewMarginOrder.java.NewMarginOrder.[]NewMarginOrder()", "name": "NewMarginOrder", "arg_nums": 0, "params": [], "return_type": "", "signature": "private NewMarginOrder()", "original_string": "    private NewMarginOrder() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/NewMarginOrder.java", "class_name": "NewMarginOrder", "class_uri": "src/test/java/examples/spot/margin/NewMarginOrder.java.NewMarginOrder", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/NewMarginOrder.java.NewMarginOrder.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"side\", \"SELL\");\n        parameters.put(\"type\", \"MARKET\");\n        parameters.put(\"quantity\", quantity);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMargin().newOrder(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/NewMarginOrder.java", "class_name": "NewMarginOrder", "class_uri": "src/test/java/examples/spot/margin/NewMarginOrder.java.NewMarginOrder", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/CancelMarginOrder.java.CancelMarginOrder.[]CancelMarginOrder()", "name": "CancelMarginOrder", "arg_nums": 0, "params": [], "return_type": "", "signature": "private CancelMarginOrder()", "original_string": "    private CancelMarginOrder() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/CancelMarginOrder.java", "class_name": "CancelMarginOrder", "class_uri": "src/test/java/examples/spot/margin/CancelMarginOrder.java.CancelMarginOrder", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/CancelMarginOrder.java.CancelMarginOrder.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"orderId\", \"\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMargin().cancelOrder(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/CancelMarginOrder.java", "class_name": "CancelMarginOrder", "class_uri": "src/test/java/examples/spot/margin/CancelMarginOrder.java.CancelMarginOrder", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/NewMarginOcoOrder.java.NewMarginOcoOrder.[]NewMarginOcoOrder()", "name": "NewMarginOcoOrder", "arg_nums": 0, "params": [], "return_type": "", "signature": "private NewMarginOcoOrder()", "original_string": "    private NewMarginOcoOrder() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/NewMarginOcoOrder.java", "class_name": "NewMarginOcoOrder", "class_uri": "src/test/java/examples/spot/margin/NewMarginOcoOrder.java.NewMarginOcoOrder", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/NewMarginOcoOrder.java.NewMarginOcoOrder.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n\n        parameters.put(\"symbol\", \"BTCUSDT\");\n        parameters.put(\"side\", \"SELL\");\n        parameters.put(\"stopPrice\", stopPrice);\n        parameters.put(\"quantity\", quantity);\n        parameters.put(\"price\", price);\n\n        String result = client.createMargin().ocoOrder(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/NewMarginOcoOrder.java", "class_name": "NewMarginOcoOrder", "class_uri": "src/test/java/examples/spot/margin/NewMarginOcoOrder.java.NewMarginOcoOrder", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/GetMarginOcoOpenOrders.java.GetMarginOcoOpenOrders.[]GetMarginOcoOpenOrders()", "name": "GetMarginOcoOpenOrders", "arg_nums": 0, "params": [], "return_type": "", "signature": "private GetMarginOcoOpenOrders()", "original_string": "    private GetMarginOcoOpenOrders() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/GetMarginOcoOpenOrders.java", "class_name": "GetMarginOcoOpenOrders", "class_uri": "src/test/java/examples/spot/margin/GetMarginOcoOpenOrders.java.GetMarginOcoOpenOrders", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/GetMarginOcoOpenOrders.java.GetMarginOcoOpenOrders.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMargin().getOcoOpenOrders(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/GetMarginOcoOpenOrders.java", "class_name": "GetMarginOcoOpenOrders", "class_uri": "src/test/java/examples/spot/margin/GetMarginOcoOpenOrders.java.GetMarginOcoOpenOrders", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/CancelMarginOcoOrder.java.CancelMarginOcoOrder.[]CancelMarginOcoOrder()", "name": "CancelMarginOcoOrder", "arg_nums": 0, "params": [], "return_type": "", "signature": "private CancelMarginOcoOrder()", "original_string": "    private CancelMarginOcoOrder() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/CancelMarginOcoOrder.java", "class_name": "CancelMarginOcoOrder", "class_uri": "src/test/java/examples/spot/margin/CancelMarginOcoOrder.java.CancelMarginOcoOrder", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/CancelMarginOcoOrder.java.CancelMarginOcoOrder.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n\n        parameters.put(\"symbol\", \"BTCUSDT\");\n        parameters.put(\"orderListId\", \"\");\n\n        String result = client.createMargin().cancelOcoOrder(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/CancelMarginOcoOrder.java", "class_name": "CancelMarginOcoOrder", "class_uri": "src/test/java/examples/spot/margin/CancelMarginOcoOrder.java.CancelMarginOcoOrder", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/IsolatedMarginTier.java.IsolatedMarginTier.[]IsolatedMarginTier()", "name": "IsolatedMarginTier", "arg_nums": 0, "params": [], "return_type": "", "signature": "private IsolatedMarginTier()", "original_string": "    private IsolatedMarginTier() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/IsolatedMarginTier.java", "class_name": "IsolatedMarginTier", "class_uri": "src/test/java/examples/spot/margin/IsolatedMarginTier.java.IsolatedMarginTier", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/IsolatedMarginTier.java.IsolatedMarginTier.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMargin().isolatedMarginData(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/IsolatedMarginTier.java", "class_name": "IsolatedMarginTier", "class_uri": "src/test/java/examples/spot/margin/IsolatedMarginTier.java.IsolatedMarginTier", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/IsolatedAccountLimit.java.IsolatedAccountLimit.[]IsolatedAccountLimit()", "name": "IsolatedAccountLimit", "arg_nums": 0, "params": [], "return_type": "", "signature": "private IsolatedAccountLimit()", "original_string": "    private IsolatedAccountLimit() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/IsolatedAccountLimit.java", "class_name": "IsolatedAccountLimit", "class_uri": "src/test/java/examples/spot/margin/IsolatedAccountLimit.java.IsolatedAccountLimit", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/IsolatedAccountLimit.java.IsolatedAccountLimit.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMargin().getIsolatedAccountLimit(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/IsolatedAccountLimit.java", "class_name": "IsolatedAccountLimit", "class_uri": "src/test/java/examples/spot/margin/IsolatedAccountLimit.java.IsolatedAccountLimit", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/InterestRateHistory.java.InterestRateHistory.[]InterestRateHistory()", "name": "InterestRateHistory", "arg_nums": 0, "params": [], "return_type": "", "signature": "private InterestRateHistory()", "original_string": "    private InterestRateHistory() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/InterestRateHistory.java", "class_name": "InterestRateHistory", "class_uri": "src/test/java/examples/spot/margin/InterestRateHistory.java.InterestRateHistory", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/InterestRateHistory.java.InterestRateHistory.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"asset\", \"USDT\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMargin().interestRateHistory(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/InterestRateHistory.java", "class_name": "InterestRateHistory", "class_uri": "src/test/java/examples/spot/margin/InterestRateHistory.java.InterestRateHistory", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/MaxTransferable.java.MaxTransferable.[]MaxTransferable()", "name": "MaxTransferable", "arg_nums": 0, "params": [], "return_type": "", "signature": "private MaxTransferable()", "original_string": "    private MaxTransferable() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/MaxTransferable.java", "class_name": "MaxTransferable", "class_uri": "src/test/java/examples/spot/margin/MaxTransferable.java.MaxTransferable", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/MaxTransferable.java.MaxTransferable.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"asset\", \"USDT\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMargin().maxTransferable(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/MaxTransferable.java", "class_name": "MaxTransferable", "class_uri": "src/test/java/examples/spot/margin/MaxTransferable.java.MaxTransferable", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/GetOcoOrder.java.GetOcoOrder.[]GetOcoOrder()", "name": "GetOcoOrder", "arg_nums": 0, "params": [], "return_type": "", "signature": "private GetOcoOrder()", "original_string": "    private GetOcoOrder() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/GetOcoOrder.java", "class_name": "GetOcoOrder", "class_uri": "src/test/java/examples/spot/margin/GetOcoOrder.java.GetOcoOrder", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/GetOcoOrder.java.GetOcoOrder.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMargin().getOcoOrder(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/GetOcoOrder.java", "class_name": "GetOcoOrder", "class_uri": "src/test/java/examples/spot/margin/GetOcoOrder.java.GetOcoOrder", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/GetMarginOrder.java.GetMarginOrder.[]GetMarginOrder()", "name": "GetMarginOrder", "arg_nums": 0, "params": [], "return_type": "", "signature": "private GetMarginOrder()", "original_string": "    private GetMarginOrder() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/GetMarginOrder.java", "class_name": "GetMarginOrder", "class_uri": "src/test/java/examples/spot/margin/GetMarginOrder.java.GetMarginOrder", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/GetMarginOrder.java.GetMarginOrder.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMargin().getOrder(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/GetMarginOrder.java", "class_name": "GetMarginOrder", "class_uri": "src/test/java/examples/spot/margin/GetMarginOrder.java.GetMarginOrder", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/AllPairs.java.AllPairs.[]AllPairs()", "name": "AllPairs", "arg_nums": 0, "params": [], "return_type": "", "signature": "private AllPairs()", "original_string": "    private AllPairs() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/AllPairs.java", "class_name": "AllPairs", "class_uri": "src/test/java/examples/spot/margin/AllPairs.java.AllPairs", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/AllPairs.java.AllPairs.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMargin().allPairs();\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/AllPairs.java", "class_name": "AllPairs", "class_uri": "src/test/java/examples/spot/margin/AllPairs.java.AllPairs", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/CapitalFlow.java.CapitalFlow.[]CapitalFlow()", "name": "CapitalFlow", "arg_nums": 0, "params": [], "return_type": "", "signature": "private CapitalFlow()", "original_string": "    private CapitalFlow() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/CapitalFlow.java", "class_name": "CapitalFlow", "class_uri": "src/test/java/examples/spot/margin/CapitalFlow.java.CapitalFlow", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/CapitalFlow.java.CapitalFlow.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMargin().capitalFlow(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/CapitalFlow.java", "class_name": "CapitalFlow", "class_uri": "src/test/java/examples/spot/margin/CapitalFlow.java.CapitalFlow", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/IsolatedAccount.java.IsolatedAccount.[]IsolatedAccount()", "name": "IsolatedAccount", "arg_nums": 0, "params": [], "return_type": "", "signature": "private IsolatedAccount()", "original_string": "    private IsolatedAccount() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/IsolatedAccount.java", "class_name": "IsolatedAccount", "class_uri": "src/test/java/examples/spot/margin/IsolatedAccount.java.IsolatedAccount", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/IsolatedAccount.java.IsolatedAccount.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbols\", \"BNBUSDT,BTCUSDT\");\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMargin().isolatedAccount(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/IsolatedAccount.java", "class_name": "IsolatedAccount", "class_uri": "src/test/java/examples/spot/margin/IsolatedAccount.java.IsolatedAccount", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/ExchangeSmallLiability.java.ExchangeSmallLiability.[]ExchangeSmallLiability()", "name": "ExchangeSmallLiability", "arg_nums": 0, "params": [], "return_type": "", "signature": "private ExchangeSmallLiability()", "original_string": "    private ExchangeSmallLiability() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/ExchangeSmallLiability.java", "class_name": "ExchangeSmallLiability", "class_uri": "src/test/java/examples/spot/margin/ExchangeSmallLiability.java.ExchangeSmallLiability", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/ExchangeSmallLiability.java.ExchangeSmallLiability.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"assetNames\", \"BTC,ETH\");\n\n        String result = client.createMargin().exchangeSmallLiability(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/ExchangeSmallLiability.java", "class_name": "ExchangeSmallLiability", "class_uri": "src/test/java/examples/spot/margin/ExchangeSmallLiability.java.ExchangeSmallLiability", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/LeverageBracket.java.LeverageBracket.[]LeverageBracket()", "name": "LeverageBracket", "arg_nums": 0, "params": [], "return_type": "", "signature": "private LeverageBracket()", "original_string": "    private LeverageBracket() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/LeverageBracket.java", "class_name": "LeverageBracket", "class_uri": "src/test/java/examples/spot/margin/LeverageBracket.java.LeverageBracket", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/LeverageBracket.java.LeverageBracket.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMargin().leverageBracket();\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/LeverageBracket.java", "class_name": "LeverageBracket", "class_uri": "src/test/java/examples/spot/margin/LeverageBracket.java.LeverageBracket", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/MaxBorrow.java.MaxBorrow.[]MaxBorrow()", "name": "MaxBorrow", "arg_nums": 0, "params": [], "return_type": "", "signature": "private MaxBorrow()", "original_string": "    private MaxBorrow() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/MaxBorrow.java", "class_name": "MaxBorrow", "class_uri": "src/test/java/examples/spot/margin/MaxBorrow.java.MaxBorrow", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/margin/MaxBorrow.java.MaxBorrow.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"asset\", \"USDT\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMargin().maxBorrow(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/margin/MaxBorrow.java", "class_name": "MaxBorrow", "class_uri": "src/test/java/examples/spot/margin/MaxBorrow.java.MaxBorrow", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/portfoliomargin/BnbTransfer.java.BnbTransfer.[]BnbTransfer()", "name": "BnbTransfer", "arg_nums": 0, "params": [], "return_type": "", "signature": "private BnbTransfer()", "original_string": "    private BnbTransfer() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/portfoliomargin/BnbTransfer.java", "class_name": "BnbTransfer", "class_uri": "src/test/java/examples/spot/portfoliomargin/BnbTransfer.java.BnbTransfer", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/portfoliomargin/BnbTransfer.java.BnbTransfer.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"transferSide\", \"TO_UM\");\n        parameters.put(\"amount\", amount);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createPortfolioMargin().bnbTransfer(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/portfoliomargin/BnbTransfer.java", "class_name": "BnbTransfer", "class_uri": "src/test/java/examples/spot/portfoliomargin/BnbTransfer.java.BnbTransfer", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/portfoliomargin/InterestHistory.java.InterestHistory.[]InterestHistory()", "name": "InterestHistory", "arg_nums": 0, "params": [], "return_type": "", "signature": "private InterestHistory()", "original_string": "    private InterestHistory() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/portfoliomargin/InterestHistory.java", "class_name": "InterestHistory", "class_uri": "src/test/java/examples/spot/portfoliomargin/InterestHistory.java.InterestHistory", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/portfoliomargin/InterestHistory.java.InterestHistory.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"asset\", \"BTC\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createPortfolioMargin().interestHistory(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/portfoliomargin/InterestHistory.java", "class_name": "InterestHistory", "class_uri": "src/test/java/examples/spot/portfoliomargin/InterestHistory.java.InterestHistory", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/portfoliomargin/GetAccount.java.GetAccount.[]GetAccount()", "name": "GetAccount", "arg_nums": 0, "params": [], "return_type": "", "signature": "private GetAccount()", "original_string": "    private GetAccount() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/portfoliomargin/GetAccount.java", "class_name": "GetAccount", "class_uri": "src/test/java/examples/spot/portfoliomargin/GetAccount.java.GetAccount", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/portfoliomargin/GetAccount.java.GetAccount.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createPortfolioMargin().getAccount(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/portfoliomargin/GetAccount.java", "class_name": "GetAccount", "class_uri": "src/test/java/examples/spot/portfoliomargin/GetAccount.java.GetAccount", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/portfoliomargin/SwitchAutoRepayFutures.java.SwitchAutoRepayFutures.[]SwitchAutoRepayFutures()", "name": "SwitchAutoRepayFutures", "arg_nums": 0, "params": [], "return_type": "", "signature": "private SwitchAutoRepayFutures()", "original_string": "    private SwitchAutoRepayFutures() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/portfoliomargin/SwitchAutoRepayFutures.java", "class_name": "SwitchAutoRepayFutures", "class_uri": "src/test/java/examples/spot/portfoliomargin/SwitchAutoRepayFutures.java.SwitchAutoRepayFutures", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/portfoliomargin/SwitchAutoRepayFutures.java.SwitchAutoRepayFutures.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"autoRepay\", true);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createPortfolioMargin().switchAutoRepayFutures(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/portfoliomargin/SwitchAutoRepayFutures.java", "class_name": "SwitchAutoRepayFutures", "class_uri": "src/test/java/examples/spot/portfoliomargin/SwitchAutoRepayFutures.java.SwitchAutoRepayFutures", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/portfoliomargin/CollateralRate.java.CollateralRate.[]CollateralRate()", "name": "CollateralRate", "arg_nums": 0, "params": [], "return_type": "", "signature": "private CollateralRate()", "original_string": "    private CollateralRate() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/portfoliomargin/CollateralRate.java", "class_name": "CollateralRate", "class_uri": "src/test/java/examples/spot/portfoliomargin/CollateralRate.java.CollateralRate", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/portfoliomargin/CollateralRate.java.CollateralRate.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createPortfolioMargin().collateralRate(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/portfoliomargin/CollateralRate.java", "class_name": "CollateralRate", "class_uri": "src/test/java/examples/spot/portfoliomargin/CollateralRate.java.CollateralRate", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/portfoliomargin/RepayFutures.java.RepayFutures.[]RepayFutures()", "name": "RepayFutures", "arg_nums": 0, "params": [], "return_type": "", "signature": "private RepayFutures()", "original_string": "    private RepayFutures() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/portfoliomargin/RepayFutures.java", "class_name": "RepayFutures", "class_uri": "src/test/java/examples/spot/portfoliomargin/RepayFutures.java.RepayFutures", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/portfoliomargin/RepayFutures.java.RepayFutures.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createPortfolioMargin().repayFutures(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/portfoliomargin/RepayFutures.java", "class_name": "RepayFutures", "class_uri": "src/test/java/examples/spot/portfoliomargin/RepayFutures.java.RepayFutures", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/portfoliomargin/AutoRepayFuturesStatus.java.AutoRepayFuturesStatus.[]AutoRepayFuturesStatus()", "name": "AutoRepayFuturesStatus", "arg_nums": 0, "params": [], "return_type": "", "signature": "private AutoRepayFuturesStatus()", "original_string": "    private AutoRepayFuturesStatus() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/portfoliomargin/AutoRepayFuturesStatus.java", "class_name": "AutoRepayFuturesStatus", "class_uri": "src/test/java/examples/spot/portfoliomargin/AutoRepayFuturesStatus.java.AutoRepayFuturesStatus", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/portfoliomargin/AutoRepayFuturesStatus.java.AutoRepayFuturesStatus.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createPortfolioMargin().autoRepayFuturesStatus(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/portfoliomargin/AutoRepayFuturesStatus.java", "class_name": "AutoRepayFuturesStatus", "class_uri": "src/test/java/examples/spot/portfoliomargin/AutoRepayFuturesStatus.java.AutoRepayFuturesStatus", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/portfoliomargin/AssetLeverage.java.AssetLeverage.[]AssetLeverage()", "name": "AssetLeverage", "arg_nums": 0, "params": [], "return_type": "", "signature": "private AssetLeverage()", "original_string": "    private AssetLeverage() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/portfoliomargin/AssetLeverage.java", "class_name": "AssetLeverage", "class_uri": "src/test/java/examples/spot/portfoliomargin/AssetLeverage.java.AssetLeverage", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/portfoliomargin/AssetLeverage.java.AssetLeverage.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createPortfolioMargin().assetLeverage();\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/portfoliomargin/AssetLeverage.java", "class_name": "AssetLeverage", "class_uri": "src/test/java/examples/spot/portfoliomargin/AssetLeverage.java.AssetLeverage", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/portfoliomargin/BankruptcyLoanRecord.java.BankruptcyLoanRecord.[]BankruptcyLoanRecord()", "name": "BankruptcyLoanRecord", "arg_nums": 0, "params": [], "return_type": "", "signature": "private BankruptcyLoanRecord()", "original_string": "    private BankruptcyLoanRecord() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/portfoliomargin/BankruptcyLoanRecord.java", "class_name": "BankruptcyLoanRecord", "class_uri": "src/test/java/examples/spot/portfoliomargin/BankruptcyLoanRecord.java.BankruptcyLoanRecord", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/portfoliomargin/BankruptcyLoanRecord.java.BankruptcyLoanRecord.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createPortfolioMargin().bankruptcyLoanRecord(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/portfoliomargin/BankruptcyLoanRecord.java", "class_name": "BankruptcyLoanRecord", "class_uri": "src/test/java/examples/spot/portfoliomargin/BankruptcyLoanRecord.java.BankruptcyLoanRecord", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/portfoliomargin/AutoCollection.java.AutoCollection.[]AutoCollection()", "name": "AutoCollection", "arg_nums": 0, "params": [], "return_type": "", "signature": "private AutoCollection()", "original_string": "    private AutoCollection() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/portfoliomargin/AutoCollection.java", "class_name": "AutoCollection", "class_uri": "src/test/java/examples/spot/portfoliomargin/AutoCollection.java.AutoCollection", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/portfoliomargin/AutoCollection.java.AutoCollection.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createPortfolioMargin().autoCollection(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/portfoliomargin/AutoCollection.java", "class_name": "AutoCollection", "class_uri": "src/test/java/examples/spot/portfoliomargin/AutoCollection.java.AutoCollection", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/portfoliomargin/Repay.java.Repay.[]Repay()", "name": "Repay", "arg_nums": 0, "params": [], "return_type": "", "signature": "private Repay()", "original_string": "    private Repay() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/portfoliomargin/Repay.java", "class_name": "Repay", "class_uri": "src/test/java/examples/spot/portfoliomargin/Repay.java.Repay", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/portfoliomargin/Repay.java.Repay.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createPortfolioMargin().repay(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/portfoliomargin/Repay.java", "class_name": "Repay", "class_uri": "src/test/java/examples/spot/portfoliomargin/Repay.java.Repay", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/portfoliomargin/AssetIndexPrice.java.AssetIndexPrice.[]AssetIndexPrice()", "name": "AssetIndexPrice", "arg_nums": 0, "params": [], "return_type": "", "signature": "private AssetIndexPrice()", "original_string": "    private AssetIndexPrice() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/portfoliomargin/AssetIndexPrice.java", "class_name": "AssetIndexPrice", "class_uri": "src/test/java/examples/spot/portfoliomargin/AssetIndexPrice.java.AssetIndexPrice", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/portfoliomargin/AssetIndexPrice.java.AssetIndexPrice.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createPortfolioMargin().assetIndexPrice(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/portfoliomargin/AssetIndexPrice.java", "class_name": "AssetIndexPrice", "class_uri": "src/test/java/examples/spot/portfoliomargin/AssetIndexPrice.java.AssetIndexPrice", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/portfoliomargin/AssetCollection.java.AssetCollection.[]AssetCollection()", "name": "AssetCollection", "arg_nums": 0, "params": [], "return_type": "", "signature": "private AssetCollection()", "original_string": "    private AssetCollection() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/portfoliomargin/AssetCollection.java", "class_name": "AssetCollection", "class_uri": "src/test/java/examples/spot/portfoliomargin/AssetCollection.java.AssetCollection", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/portfoliomargin/AssetCollection.java.AssetCollection.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"asset\", \"BTC\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createPortfolioMargin().assetCollection(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/portfoliomargin/AssetCollection.java", "class_name": "AssetCollection", "class_uri": "src/test/java/examples/spot/portfoliomargin/AssetCollection.java.AssetCollection", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/spotalgo/TwapOrder.java.TwapOrder.[]TwapOrder()", "name": "TwapOrder", "arg_nums": 0, "params": [], "return_type": "", "signature": "private TwapOrder()", "original_string": "    private TwapOrder() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/spotalgo/TwapOrder.java", "class_name": "TwapOrder", "class_uri": "src/test/java/examples/spot/spotalgo/TwapOrder.java.TwapOrder", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/spotalgo/TwapOrder.java.TwapOrder.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"side\", \"SELL\");\n        parameters.put(\"quantity\", quantity);\n        parameters.put(\"duration\", duration);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSpotAlgo().twapOrder(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/spotalgo/TwapOrder.java", "class_name": "TwapOrder", "class_uri": "src/test/java/examples/spot/spotalgo/TwapOrder.java.TwapOrder", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/spotalgo/GetOpenOrders.java.GetOpenOrders.[]GetOpenOrders()", "name": "GetOpenOrders", "arg_nums": 0, "params": [], "return_type": "", "signature": "private GetOpenOrders()", "original_string": "    private GetOpenOrders() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/spotalgo/GetOpenOrders.java", "class_name": "GetOpenOrders", "class_uri": "src/test/java/examples/spot/spotalgo/GetOpenOrders.java.GetOpenOrders", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/spotalgo/GetOpenOrders.java.GetOpenOrders.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSpotAlgo().getOpenOrders(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/spotalgo/GetOpenOrders.java", "class_name": "GetOpenOrders", "class_uri": "src/test/java/examples/spot/spotalgo/GetOpenOrders.java.GetOpenOrders", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/spotalgo/GetSubOrders.java.GetSubOrders.[]GetSubOrders()", "name": "GetSubOrders", "arg_nums": 0, "params": [], "return_type": "", "signature": "private GetSubOrders()", "original_string": "    private GetSubOrders() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/spotalgo/GetSubOrders.java", "class_name": "GetSubOrders", "class_uri": "src/test/java/examples/spot/spotalgo/GetSubOrders.java.GetSubOrders", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/spotalgo/GetSubOrders.java.GetSubOrders.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"algoId\", algoId);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSpotAlgo().getSubOrders(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/spotalgo/GetSubOrders.java", "class_name": "GetSubOrders", "class_uri": "src/test/java/examples/spot/spotalgo/GetSubOrders.java.GetSubOrders", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/spotalgo/GetHistoricalOrders.java.GetHistoricalOrders.[]GetHistoricalOrders()", "name": "GetHistoricalOrders", "arg_nums": 0, "params": [], "return_type": "", "signature": "private GetHistoricalOrders()", "original_string": "    private GetHistoricalOrders() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/spotalgo/GetHistoricalOrders.java", "class_name": "GetHistoricalOrders", "class_uri": "src/test/java/examples/spot/spotalgo/GetHistoricalOrders.java.GetHistoricalOrders", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/spotalgo/GetHistoricalOrders.java.GetHistoricalOrders.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"side\", \"SELL\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSpotAlgo().getHistoricalOrders(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/spotalgo/GetHistoricalOrders.java", "class_name": "GetHistoricalOrders", "class_uri": "src/test/java/examples/spot/spotalgo/GetHistoricalOrders.java.GetHistoricalOrders", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/spotalgo/CancelOrder.java.CancelOrder.[]CancelOrder()", "name": "CancelOrder", "arg_nums": 0, "params": [], "return_type": "", "signature": "private CancelOrder()", "original_string": "    private CancelOrder() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/spotalgo/CancelOrder.java", "class_name": "CancelOrder", "class_uri": "src/test/java/examples/spot/spotalgo/CancelOrder.java.CancelOrder", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/spotalgo/CancelOrder.java.CancelOrder.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"algoId\", algoId);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSpotAlgo().cancelOrder(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/spotalgo/CancelOrder.java", "class_name": "CancelOrder", "class_uri": "src/test/java/examples/spot/spotalgo/CancelOrder.java.CancelOrder", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/pay/Transactions.java.Transactions.[]Transactions()", "name": "Transactions", "arg_nums": 0, "params": [], "return_type": "", "signature": "private Transactions()", "original_string": "    private Transactions() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/pay/Transactions.java", "class_name": "Transactions", "class_uri": "src/test/java/examples/spot/pay/Transactions.java.Transactions", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/pay/Transactions.java.Transactions.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createPay().transactions(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/pay/Transactions.java", "class_name": "Transactions", "class_uri": "src/test/java/examples/spot/pay/Transactions.java.Transactions", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/mining/DetailMinerList.java.DetailMinerList.[]DetailMinerList()", "name": "DetailMinerList", "arg_nums": 0, "params": [], "return_type": "", "signature": "private DetailMinerList()", "original_string": "    private DetailMinerList() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/mining/DetailMinerList.java", "class_name": "DetailMinerList", "class_uri": "src/test/java/examples/spot/mining/DetailMinerList.java.DetailMinerList", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/mining/DetailMinerList.java.DetailMinerList.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"algo\", \"sha256\");\n        parameters.put(\"userName\", \"\");\n        parameters.put(\"workerName\", \"\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMining().detailMinerList(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/mining/DetailMinerList.java", "class_name": "DetailMinerList", "class_uri": "src/test/java/examples/spot/mining/DetailMinerList.java.DetailMinerList", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/mining/CancelHashrateResaleConfig.java.CancelHashrateResaleConfig.[]CancelHashrateResaleConfig()", "name": "CancelHashrateResaleConfig", "arg_nums": 0, "params": [], "return_type": "", "signature": "private CancelHashrateResaleConfig()", "original_string": "    private CancelHashrateResaleConfig() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/mining/CancelHashrateResaleConfig.java", "class_name": "CancelHashrateResaleConfig", "class_uri": "src/test/java/examples/spot/mining/CancelHashrateResaleConfig.java.CancelHashrateResaleConfig", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/mining/CancelHashrateResaleConfig.java.CancelHashrateResaleConfig.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"configId\", configId);\n        parameters.put(\"userName\", \"\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMining().cancelHashrateResaleConfig(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/mining/CancelHashrateResaleConfig.java", "class_name": "CancelHashrateResaleConfig", "class_uri": "src/test/java/examples/spot/mining/CancelHashrateResaleConfig.java.CancelHashrateResaleConfig", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/mining/Alogrithm.java.Alogrithm.[]Alogrithm()", "name": "Alogrithm", "arg_nums": 0, "params": [], "return_type": "", "signature": "private Alogrithm()", "original_string": "    private Alogrithm() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/mining/Alogrithm.java", "class_name": "Alogrithm", "class_uri": "src/test/java/examples/spot/mining/Alogrithm.java.Alogrithm", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/mining/Alogrithm.java.Alogrithm.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMining().algorithm(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/mining/Alogrithm.java", "class_name": "Alogrithm", "class_uri": "src/test/java/examples/spot/mining/Alogrithm.java.Alogrithm", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/mining/CoinName.java.CoinName.[]CoinName()", "name": "CoinName", "arg_nums": 0, "params": [], "return_type": "", "signature": "private CoinName()", "original_string": "    private CoinName() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/mining/CoinName.java", "class_name": "CoinName", "class_uri": "src/test/java/examples/spot/mining/CoinName.java.CoinName", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/mining/CoinName.java.CoinName.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMining().coinName(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/mining/CoinName.java", "class_name": "CoinName", "class_uri": "src/test/java/examples/spot/mining/CoinName.java.CoinName", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/mining/AccountList.java.AccountList.[]AccountList()", "name": "AccountList", "arg_nums": 0, "params": [], "return_type": "", "signature": "private AccountList()", "original_string": "    private AccountList() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/mining/AccountList.java", "class_name": "AccountList", "class_uri": "src/test/java/examples/spot/mining/AccountList.java.AccountList", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/mining/AccountList.java.AccountList.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"algo\", \"sha256\");\n        parameters.put(\"userName\", \"\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMining().accountList(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/mining/AccountList.java", "class_name": "AccountList", "class_uri": "src/test/java/examples/spot/mining/AccountList.java.AccountList", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/mining/MinerList.java.MinerList.[]MinerList()", "name": "MinerList", "arg_nums": 0, "params": [], "return_type": "", "signature": "private MinerList()", "original_string": "    private MinerList() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/mining/MinerList.java", "class_name": "MinerList", "class_uri": "src/test/java/examples/spot/mining/MinerList.java.MinerList", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/mining/MinerList.java.MinerList.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"algo\", \"sha256\");\n        parameters.put(\"userName\", \"\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMining().minerList(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/mining/MinerList.java", "class_name": "MinerList", "class_uri": "src/test/java/examples/spot/mining/MinerList.java.MinerList", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/mining/HashrateResaleList.java.HashrateResaleList.[]HashrateResaleList()", "name": "HashrateResaleList", "arg_nums": 0, "params": [], "return_type": "", "signature": "private HashrateResaleList()", "original_string": "    private HashrateResaleList() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/mining/HashrateResaleList.java", "class_name": "HashrateResaleList", "class_uri": "src/test/java/examples/spot/mining/HashrateResaleList.java.HashrateResaleList", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/mining/HashrateResaleList.java.HashrateResaleList.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMining().hashrateResaleList(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/mining/HashrateResaleList.java", "class_name": "HashrateResaleList", "class_uri": "src/test/java/examples/spot/mining/HashrateResaleList.java.HashrateResaleList", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/mining/HashrateResaleDetail.java.HashrateResaleDetail.[]HashrateResaleDetail()", "name": "HashrateResaleDetail", "arg_nums": 0, "params": [], "return_type": "", "signature": "private HashrateResaleDetail()", "original_string": "    private HashrateResaleDetail() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/mining/HashrateResaleDetail.java", "class_name": "HashrateResaleDetail", "class_uri": "src/test/java/examples/spot/mining/HashrateResaleDetail.java.HashrateResaleDetail", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/mining/HashrateResaleDetail.java.HashrateResaleDetail.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"configId\", configId);\n        parameters.put(\"userName\", \"\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMining().hashrateResaleDetail(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/mining/HashrateResaleDetail.java", "class_name": "HashrateResaleDetail", "class_uri": "src/test/java/examples/spot/mining/HashrateResaleDetail.java.HashrateResaleDetail", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/mining/AccountEarning.java.AccountEarning.[]AccountEarning()", "name": "AccountEarning", "arg_nums": 0, "params": [], "return_type": "", "signature": "private AccountEarning()", "original_string": "    private AccountEarning() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/mining/AccountEarning.java", "class_name": "AccountEarning", "class_uri": "src/test/java/examples/spot/mining/AccountEarning.java.AccountEarning", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/mining/AccountEarning.java.AccountEarning.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"algo\", \"sha256\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMining().accountEarning(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/mining/AccountEarning.java", "class_name": "AccountEarning", "class_uri": "src/test/java/examples/spot/mining/AccountEarning.java.AccountEarning", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/mining/BonusList.java.BonusList.[]BonusList()", "name": "BonusList", "arg_nums": 0, "params": [], "return_type": "", "signature": "private BonusList()", "original_string": "    private BonusList() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/mining/BonusList.java", "class_name": "BonusList", "class_uri": "src/test/java/examples/spot/mining/BonusList.java.BonusList", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/mining/BonusList.java.BonusList.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"algo\", \"sha256\");\n        parameters.put(\"userName\", \"\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMining().bonusList(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/mining/BonusList.java", "class_name": "BonusList", "class_uri": "src/test/java/examples/spot/mining/BonusList.java.BonusList", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/mining/StatisticsList.java.StatisticsList.[]StatisticsList()", "name": "StatisticsList", "arg_nums": 0, "params": [], "return_type": "", "signature": "private StatisticsList()", "original_string": "    private StatisticsList() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/mining/StatisticsList.java", "class_name": "StatisticsList", "class_uri": "src/test/java/examples/spot/mining/StatisticsList.java.StatisticsList", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/mining/StatisticsList.java.StatisticsList.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"algo\", \"sha256\");\n        parameters.put(\"userName\", \"\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMining().statsticsList(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/mining/StatisticsList.java", "class_name": "StatisticsList", "class_uri": "src/test/java/examples/spot/mining/StatisticsList.java.StatisticsList", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/mining/HashrateResaleRequest.java.HashrateResaleRequest.[]HashrateResaleRequest()", "name": "HashrateResaleRequest", "arg_nums": 0, "params": [], "return_type": "", "signature": "private HashrateResaleRequest()", "original_string": "    private HashrateResaleRequest() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/mining/HashrateResaleRequest.java", "class_name": "HashrateResaleRequest", "class_uri": "src/test/java/examples/spot/mining/HashrateResaleRequest.java.HashrateResaleRequest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/mining/HashrateResaleRequest.java.HashrateResaleRequest.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"userName\", \"test\");\n        parameters.put(\"algo\", \"sha256\");\n        parameters.put(\"endDate\", endDate);\n        parameters.put(\"startDate\", startDate);\n        parameters.put(\"toPoolUser\", \"S19pro\");\n        parameters.put(\"hashRate\", hashRate);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMining().hashrateResaleRequest(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/mining/HashrateResaleRequest.java", "class_name": "HashrateResaleRequest", "class_uri": "src/test/java/examples/spot/mining/HashrateResaleRequest.java.HashrateResaleRequest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/mining/EarningList.java.EarningList.[]EarningList()", "name": "EarningList", "arg_nums": 0, "params": [], "return_type": "", "signature": "private EarningList()", "original_string": "    private EarningList() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/mining/EarningList.java", "class_name": "EarningList", "class_uri": "src/test/java/examples/spot/mining/EarningList.java.EarningList", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/mining/EarningList.java.EarningList.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"algo\", \"sha256\");\n        parameters.put(\"userName\", \"\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMining().earningList(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/mining/EarningList.java", "class_name": "EarningList", "class_uri": "src/test/java/examples/spot/mining/EarningList.java.EarningList", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/fiat/Orders.java.Orders.[]Orders()", "name": "Orders", "arg_nums": 0, "params": [], "return_type": "", "signature": "private Orders()", "original_string": "    private Orders() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/fiat/Orders.java", "class_name": "Orders", "class_uri": "src/test/java/examples/spot/fiat/Orders.java.Orders", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/fiat/Orders.java.Orders.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"transactionType\", \"0\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createFiat().orders(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/fiat/Orders.java", "class_name": "Orders", "class_uri": "src/test/java/examples/spot/fiat/Orders.java.Orders", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/fiat/Payments.java.Payments.[]Payments()", "name": "Payments", "arg_nums": 0, "params": [], "return_type": "", "signature": "private Payments()", "original_string": "    private Payments() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/fiat/Payments.java", "class_name": "Payments", "class_uri": "src/test/java/examples/spot/fiat/Payments.java.Payments", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/fiat/Payments.java.Payments.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"transactionType\", \"0\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createFiat().payments(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/fiat/Payments.java", "class_name": "Payments", "class_uri": "src/test/java/examples/spot/fiat/Payments.java.Payments", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/staking/EthStakingRateHistory.java.EthStakingRateHistory.[]EthStakingRateHistory()", "name": "EthStakingRateHistory", "arg_nums": 0, "params": [], "return_type": "", "signature": "private EthStakingRateHistory()", "original_string": "    private EthStakingRateHistory() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/staking/EthStakingRateHistory.java", "class_name": "EthStakingRateHistory", "class_uri": "src/test/java/examples/spot/staking/EthStakingRateHistory.java.EthStakingRateHistory", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/staking/EthStakingRateHistory.java.EthStakingRateHistory.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createStaking().ethStakingRateHistory(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/staking/EthStakingRateHistory.java", "class_name": "EthStakingRateHistory", "class_uri": "src/test/java/examples/spot/staking/EthStakingRateHistory.java.EthStakingRateHistory", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/staking/EthStakingWbethUnwrapHistory.java.EthStakingWbethUnwrapHistory.[]EthStakingWbethUnwrapHistory()", "name": "EthStakingWbethUnwrapHistory", "arg_nums": 0, "params": [], "return_type": "", "signature": "private EthStakingWbethUnwrapHistory()", "original_string": "    private EthStakingWbethUnwrapHistory() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/staking/EthStakingWbethUnwrapHistory.java", "class_name": "EthStakingWbethUnwrapHistory", "class_uri": "src/test/java/examples/spot/staking/EthStakingWbethUnwrapHistory.java.EthStakingWbethUnwrapHistory", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/staking/EthStakingWbethUnwrapHistory.java.EthStakingWbethUnwrapHistory.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createStaking().ethStakingWbethUnwrapHistory(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/staking/EthStakingWbethUnwrapHistory.java", "class_name": "EthStakingWbethUnwrapHistory", "class_uri": "src/test/java/examples/spot/staking/EthStakingWbethUnwrapHistory.java.EthStakingWbethUnwrapHistory", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/staking/EthStakingWbethWrapHistory.java.EthStakingWbethWrapHistory.[]EthStakingWbethWrapHistory()", "name": "EthStakingWbethWrapHistory", "arg_nums": 0, "params": [], "return_type": "", "signature": "private EthStakingWbethWrapHistory()", "original_string": "    private EthStakingWbethWrapHistory() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/staking/EthStakingWbethWrapHistory.java", "class_name": "EthStakingWbethWrapHistory", "class_uri": "src/test/java/examples/spot/staking/EthStakingWbethWrapHistory.java.EthStakingWbethWrapHistory", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/staking/EthStakingWbethWrapHistory.java.EthStakingWbethWrapHistory.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createStaking().ethStakingWbethWrapHistory(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/staking/EthStakingWbethWrapHistory.java", "class_name": "EthStakingWbethWrapHistory", "class_uri": "src/test/java/examples/spot/staking/EthStakingWbethWrapHistory.java.EthStakingWbethWrapHistory", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/staking/EthStakingAccount.java.EthStakingAccount.[]EthStakingAccount()", "name": "EthStakingAccount", "arg_nums": 0, "params": [], "return_type": "", "signature": "private EthStakingAccount()", "original_string": "    private EthStakingAccount() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/staking/EthStakingAccount.java", "class_name": "EthStakingAccount", "class_uri": "src/test/java/examples/spot/staking/EthStakingAccount.java.EthStakingAccount", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/staking/EthStakingAccount.java.EthStakingAccount.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createStaking().ethStakingAccount(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/staking/EthStakingAccount.java", "class_name": "EthStakingAccount", "class_uri": "src/test/java/examples/spot/staking/EthStakingAccount.java.EthStakingAccount", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/staking/EthStakingQuota.java.EthStakingQuota.[]EthStakingQuota()", "name": "EthStakingQuota", "arg_nums": 0, "params": [], "return_type": "", "signature": "private EthStakingQuota()", "original_string": "    private EthStakingQuota() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/staking/EthStakingQuota.java", "class_name": "EthStakingQuota", "class_uri": "src/test/java/examples/spot/staking/EthStakingQuota.java.EthStakingQuota", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/staking/EthStakingQuota.java.EthStakingQuota.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createStaking().ethStakingQuota(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/staking/EthStakingQuota.java", "class_name": "EthStakingQuota", "class_uri": "src/test/java/examples/spot/staking/EthStakingQuota.java.EthStakingQuota", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/staking/SubEthStaking.java.SubEthStaking.[]SubEthStaking()", "name": "SubEthStaking", "arg_nums": 0, "params": [], "return_type": "", "signature": "private SubEthStaking()", "original_string": "    private SubEthStaking() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/staking/SubEthStaking.java", "class_name": "SubEthStaking", "class_uri": "src/test/java/examples/spot/staking/SubEthStaking.java.SubEthStaking", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/staking/SubEthStaking.java.SubEthStaking.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"amount\", amount);\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createStaking().subEthStaking(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/staking/SubEthStaking.java", "class_name": "SubEthStaking", "class_uri": "src/test/java/examples/spot/staking/SubEthStaking.java.SubEthStaking", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/staking/RedeemEthStaking.java.RedeemEthStaking.[]RedeemEthStaking()", "name": "RedeemEthStaking", "arg_nums": 0, "params": [], "return_type": "", "signature": "private RedeemEthStaking()", "original_string": "    private RedeemEthStaking() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/staking/RedeemEthStaking.java", "class_name": "RedeemEthStaking", "class_uri": "src/test/java/examples/spot/staking/RedeemEthStaking.java.RedeemEthStaking", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/staking/RedeemEthStaking.java.RedeemEthStaking.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"amount\", amount);\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createStaking().redeemEthStaking(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/staking/RedeemEthStaking.java", "class_name": "RedeemEthStaking", "class_uri": "src/test/java/examples/spot/staking/RedeemEthStaking.java.RedeemEthStaking", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/staking/EthStakingRedeemHistory.java.EthStakingRedeemHistory.[]EthStakingRedeemHistory()", "name": "EthStakingRedeemHistory", "arg_nums": 0, "params": [], "return_type": "", "signature": "private EthStakingRedeemHistory()", "original_string": "    private EthStakingRedeemHistory() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/staking/EthStakingRedeemHistory.java", "class_name": "EthStakingRedeemHistory", "class_uri": "src/test/java/examples/spot/staking/EthStakingRedeemHistory.java.EthStakingRedeemHistory", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/staking/EthStakingRedeemHistory.java.EthStakingRedeemHistory.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createStaking().ethStakingRedeemHistory(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/staking/EthStakingRedeemHistory.java", "class_name": "EthStakingRedeemHistory", "class_uri": "src/test/java/examples/spot/staking/EthStakingRedeemHistory.java.EthStakingRedeemHistory", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/staking/WrapEthStakingWbeth.java.WrapEthStakingWbeth.[]WrapEthStakingWbeth()", "name": "WrapEthStakingWbeth", "arg_nums": 0, "params": [], "return_type": "", "signature": "private WrapEthStakingWbeth()", "original_string": "    private WrapEthStakingWbeth() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/staking/WrapEthStakingWbeth.java", "class_name": "WrapEthStakingWbeth", "class_uri": "src/test/java/examples/spot/staking/WrapEthStakingWbeth.java.WrapEthStakingWbeth", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/staking/WrapEthStakingWbeth.java.WrapEthStakingWbeth.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"amount\", amount);\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createStaking().wrapEthStakingWbeth(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/staking/WrapEthStakingWbeth.java", "class_name": "WrapEthStakingWbeth", "class_uri": "src/test/java/examples/spot/staking/WrapEthStakingWbeth.java.WrapEthStakingWbeth", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/staking/EthStakingWbethRewardHistory.java.EthStakingWbethRewardHistory.[]EthStakingWbethRewardHistory()", "name": "EthStakingWbethRewardHistory", "arg_nums": 0, "params": [], "return_type": "", "signature": "private EthStakingWbethRewardHistory()", "original_string": "    private EthStakingWbethRewardHistory() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/staking/EthStakingWbethRewardHistory.java", "class_name": "EthStakingWbethRewardHistory", "class_uri": "src/test/java/examples/spot/staking/EthStakingWbethRewardHistory.java.EthStakingWbethRewardHistory", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/staking/EthStakingWbethRewardHistory.java.EthStakingWbethRewardHistory.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createStaking().ethStakingWbethRewardHistory(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/staking/EthStakingWbethRewardHistory.java", "class_name": "EthStakingWbethRewardHistory", "class_uri": "src/test/java/examples/spot/staking/EthStakingWbethRewardHistory.java.EthStakingWbethRewardHistory", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/staking/EthStakingSubHistory.java.EthStakingSubHistory.[]EthStakingSubHistory()", "name": "EthStakingSubHistory", "arg_nums": 0, "params": [], "return_type": "", "signature": "private EthStakingSubHistory()", "original_string": "    private EthStakingSubHistory() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/staking/EthStakingSubHistory.java", "class_name": "EthStakingSubHistory", "class_uri": "src/test/java/examples/spot/staking/EthStakingSubHistory.java.EthStakingSubHistory", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/staking/EthStakingSubHistory.java.EthStakingSubHistory.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createStaking().ethStakingSubHistory(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/staking/EthStakingSubHistory.java", "class_name": "EthStakingSubHistory", "class_uri": "src/test/java/examples/spot/staking/EthStakingSubHistory.java.EthStakingSubHistory", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/staking/EthStakingRewardsHistory.java.EthStakingRewardsHistory.[]EthStakingRewardsHistory()", "name": "EthStakingRewardsHistory", "arg_nums": 0, "params": [], "return_type": "", "signature": "private EthStakingRewardsHistory()", "original_string": "    private EthStakingRewardsHistory() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/staking/EthStakingRewardsHistory.java", "class_name": "EthStakingRewardsHistory", "class_uri": "src/test/java/examples/spot/staking/EthStakingRewardsHistory.java.EthStakingRewardsHistory", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/staking/EthStakingRewardsHistory.java.EthStakingRewardsHistory.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createStaking().ethStakingRewardsHistory(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/staking/EthStakingRewardsHistory.java", "class_name": "EthStakingRewardsHistory", "class_uri": "src/test/java/examples/spot/staking/EthStakingRewardsHistory.java.EthStakingRewardsHistory", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/userdata/CreateIsolatedMarginListenKey.java.CreateIsolatedMarginListenKey.[]CreateIsolatedMarginListenKey()", "name": "CreateIsolatedMarginListenKey", "arg_nums": 0, "params": [], "return_type": "", "signature": "private CreateIsolatedMarginListenKey()", "original_string": "    private CreateIsolatedMarginListenKey() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/userdata/CreateIsolatedMarginListenKey.java", "class_name": "CreateIsolatedMarginListenKey", "class_uri": "src/test/java/examples/spot/userdata/CreateIsolatedMarginListenKey.java.CreateIsolatedMarginListenKey", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/userdata/CreateIsolatedMarginListenKey.java.CreateIsolatedMarginListenKey.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BTCUSDT\");\n\n        String result = client.createUserData().createIsolatedMarginListenKey(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/userdata/CreateIsolatedMarginListenKey.java", "class_name": "CreateIsolatedMarginListenKey", "class_uri": "src/test/java/examples/spot/userdata/CreateIsolatedMarginListenKey.java.CreateIsolatedMarginListenKey", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/userdata/CloseIsolatedMarginListenKey.java.CloseIsolatedMarginListenKey.[]CloseIsolatedMarginListenKey()", "name": "CloseIsolatedMarginListenKey", "arg_nums": 0, "params": [], "return_type": "", "signature": "private CloseIsolatedMarginListenKey()", "original_string": "    private CloseIsolatedMarginListenKey() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/userdata/CloseIsolatedMarginListenKey.java", "class_name": "CloseIsolatedMarginListenKey", "class_uri": "src/test/java/examples/spot/userdata/CloseIsolatedMarginListenKey.java.CloseIsolatedMarginListenKey", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/userdata/CloseIsolatedMarginListenKey.java.CloseIsolatedMarginListenKey.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BTCUSDT\");\n        parameters.put(\"listenKey\", \"\");\n\n        String result = client.createUserData().closeIsolatedMarginListenKey(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/userdata/CloseIsolatedMarginListenKey.java", "class_name": "CloseIsolatedMarginListenKey", "class_uri": "src/test/java/examples/spot/userdata/CloseIsolatedMarginListenKey.java.CloseIsolatedMarginListenKey", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/userdata/CloseListenKey.java.CloseListenKey.[]CloseListenKey()", "name": "CloseListenKey", "arg_nums": 0, "params": [], "return_type": "", "signature": "private CloseListenKey()", "original_string": "    private CloseListenKey() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/userdata/CloseListenKey.java", "class_name": "CloseListenKey", "class_uri": "src/test/java/examples/spot/userdata/CloseListenKey.java.CloseListenKey", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/userdata/CloseListenKey.java.CloseListenKey.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"listenKey\", \"\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n\n        String result = client.createUserData().closeListenKey(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/userdata/CloseListenKey.java", "class_name": "CloseListenKey", "class_uri": "src/test/java/examples/spot/userdata/CloseListenKey.java.CloseListenKey", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/userdata/ExtendIsolatedMarginListenKey.java.ExtendIsolatedMarginListenKey.[]ExtendIsolatedMarginListenKey()", "name": "ExtendIsolatedMarginListenKey", "arg_nums": 0, "params": [], "return_type": "", "signature": "private ExtendIsolatedMarginListenKey()", "original_string": "    private ExtendIsolatedMarginListenKey() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/userdata/ExtendIsolatedMarginListenKey.java", "class_name": "ExtendIsolatedMarginListenKey", "class_uri": "src/test/java/examples/spot/userdata/ExtendIsolatedMarginListenKey.java.ExtendIsolatedMarginListenKey", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/userdata/ExtendIsolatedMarginListenKey.java.ExtendIsolatedMarginListenKey.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BTCUSDT\");\n        parameters.put(\"listenKey\", \"\");\n\n        String result = client.createUserData().extendIsolatedMarginListenKey(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/userdata/ExtendIsolatedMarginListenKey.java", "class_name": "ExtendIsolatedMarginListenKey", "class_uri": "src/test/java/examples/spot/userdata/ExtendIsolatedMarginListenKey.java.ExtendIsolatedMarginListenKey", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/userdata/CreateMarginListenKey.java.CreateMarginListenKey.[]CreateMarginListenKey()", "name": "CreateMarginListenKey", "arg_nums": 0, "params": [], "return_type": "", "signature": "private CreateMarginListenKey()", "original_string": "    private CreateMarginListenKey() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/userdata/CreateMarginListenKey.java", "class_name": "CreateMarginListenKey", "class_uri": "src/test/java/examples/spot/userdata/CreateMarginListenKey.java.CreateMarginListenKey", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/userdata/CreateMarginListenKey.java.CreateMarginListenKey.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n\n        String result = client.createUserData().createMarginListenKey();\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/userdata/CreateMarginListenKey.java", "class_name": "CreateMarginListenKey", "class_uri": "src/test/java/examples/spot/userdata/CreateMarginListenKey.java.CreateMarginListenKey", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/userdata/ExtendListenKey.java.ExtendListenKey.[]ExtendListenKey()", "name": "ExtendListenKey", "arg_nums": 0, "params": [], "return_type": "", "signature": "private ExtendListenKey()", "original_string": "    private ExtendListenKey() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/userdata/ExtendListenKey.java", "class_name": "ExtendListenKey", "class_uri": "src/test/java/examples/spot/userdata/ExtendListenKey.java.ExtendListenKey", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/userdata/ExtendListenKey.java.ExtendListenKey.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"listenKey\", \"\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n\n        String result = client.createUserData().extendListenKey(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/userdata/ExtendListenKey.java", "class_name": "ExtendListenKey", "class_uri": "src/test/java/examples/spot/userdata/ExtendListenKey.java.ExtendListenKey", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/userdata/CreateListenKey.java.CreateListenKey.[]CreateListenKey()", "name": "CreateListenKey", "arg_nums": 0, "params": [], "return_type": "", "signature": "private CreateListenKey()", "original_string": "    private CreateListenKey() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/userdata/CreateListenKey.java", "class_name": "CreateListenKey", "class_uri": "src/test/java/examples/spot/userdata/CreateListenKey.java.CreateListenKey", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/userdata/CreateListenKey.java.CreateListenKey.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n\n        String result = client.createUserData().createListenKey();\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/userdata/CreateListenKey.java", "class_name": "CreateListenKey", "class_uri": "src/test/java/examples/spot/userdata/CreateListenKey.java.CreateListenKey", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/userdata/CloseMarginListenKey.java.CloseMarginListenKey.[]CloseMarginListenKey()", "name": "CloseMarginListenKey", "arg_nums": 0, "params": [], "return_type": "", "signature": "private CloseMarginListenKey()", "original_string": "    private CloseMarginListenKey() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/userdata/CloseMarginListenKey.java", "class_name": "CloseMarginListenKey", "class_uri": "src/test/java/examples/spot/userdata/CloseMarginListenKey.java.CloseMarginListenKey", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/userdata/CloseMarginListenKey.java.CloseMarginListenKey.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"listenKey\", \"\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n\n        String result = client.createUserData().closeMarginListenKey(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/userdata/CloseMarginListenKey.java", "class_name": "CloseMarginListenKey", "class_uri": "src/test/java/examples/spot/userdata/CloseMarginListenKey.java.CloseMarginListenKey", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/userdata/ExtendMarginListenKey.java.ExtendMarginListenKey.[]ExtendMarginListenKey()", "name": "ExtendMarginListenKey", "arg_nums": 0, "params": [], "return_type": "", "signature": "private ExtendMarginListenKey()", "original_string": "    private ExtendMarginListenKey() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/userdata/ExtendMarginListenKey.java", "class_name": "ExtendMarginListenKey", "class_uri": "src/test/java/examples/spot/userdata/ExtendMarginListenKey.java.ExtendMarginListenKey", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/userdata/ExtendMarginListenKey.java.ExtendMarginListenKey.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"listenKey\", \"\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n\n        String result = client.createUserData().extendMarginListenKey(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/userdata/ExtendMarginListenKey.java", "class_name": "ExtendMarginListenKey", "class_uri": "src/test/java/examples/spot/userdata/ExtendMarginListenKey.java.ExtendMarginListenKey", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/autoinvest/IndexInfo.java.IndexInfo.[]IndexInfo()", "name": "IndexInfo", "arg_nums": 0, "params": [], "return_type": "", "signature": "private IndexInfo()", "original_string": "    private IndexInfo() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/autoinvest/IndexInfo.java", "class_name": "IndexInfo", "class_uri": "src/test/java/examples/spot/autoinvest/IndexInfo.java.IndexInfo", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/autoinvest/IndexInfo.java.IndexInfo.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"indexId\", indexId);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createAutoInvest().indexInfo(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/autoinvest/IndexInfo.java", "class_name": "IndexInfo", "class_uri": "src/test/java/examples/spot/autoinvest/IndexInfo.java.IndexInfo", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/autoinvest/SourceAssetList.java.SourceAssetList.[]SourceAssetList()", "name": "SourceAssetList", "arg_nums": 0, "params": [], "return_type": "", "signature": "private SourceAssetList()", "original_string": "    private SourceAssetList() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/autoinvest/SourceAssetList.java", "class_name": "SourceAssetList", "class_uri": "src/test/java/examples/spot/autoinvest/SourceAssetList.java.SourceAssetList", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/autoinvest/SourceAssetList.java.SourceAssetList.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"usageType\", \"RECURRING\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createAutoInvest().sourceAssetList(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/autoinvest/SourceAssetList.java", "class_name": "SourceAssetList", "class_uri": "src/test/java/examples/spot/autoinvest/SourceAssetList.java.SourceAssetList", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/autoinvest/OneTimeTransactionStatus.java.OneTimeTransactionStatus.[]OneTimeTransactionStatus()", "name": "OneTimeTransactionStatus", "arg_nums": 0, "params": [], "return_type": "", "signature": "private OneTimeTransactionStatus()", "original_string": "    private OneTimeTransactionStatus() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/autoinvest/OneTimeTransactionStatus.java", "class_name": "OneTimeTransactionStatus", "class_uri": "src/test/java/examples/spot/autoinvest/OneTimeTransactionStatus.java.OneTimeTransactionStatus", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/autoinvest/OneTimeTransactionStatus.java.OneTimeTransactionStatus.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"transactionId\", transactionId);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createAutoInvest().oneTimeTransactionStatus(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/autoinvest/OneTimeTransactionStatus.java", "class_name": "OneTimeTransactionStatus", "class_uri": "src/test/java/examples/spot/autoinvest/OneTimeTransactionStatus.java.OneTimeTransactionStatus", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/autoinvest/SubmitOneTimeTransaction.java.SubmitOneTimeTransaction.[]SubmitOneTimeTransaction()", "name": "SubmitOneTimeTransaction", "arg_nums": 0, "params": [], "return_type": "", "signature": "private SubmitOneTimeTransaction()", "original_string": "    private SubmitOneTimeTransaction() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/autoinvest/SubmitOneTimeTransaction.java", "class_name": "SubmitOneTimeTransaction", "class_uri": "src/test/java/examples/spot/autoinvest/SubmitOneTimeTransaction.java.SubmitOneTimeTransaction", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/autoinvest/SubmitOneTimeTransaction.java.SubmitOneTimeTransaction.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"sourceType\", \"MAIN_SITE\");\n        parameters.put(\"subscriptionAmount\", subscriptionAmount);\n        parameters.put(\"sourceAsset\", \"USDT\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createAutoInvest().submitOneTimeTransaction(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/autoinvest/SubmitOneTimeTransaction.java", "class_name": "SubmitOneTimeTransaction", "class_uri": "src/test/java/examples/spot/autoinvest/SubmitOneTimeTransaction.java.SubmitOneTimeTransaction", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/autoinvest/IndexPlanRebalanceInfo.java.IndexPlanRebalanceInfo.[]IndexPlanRebalanceInfo()", "name": "IndexPlanRebalanceInfo", "arg_nums": 0, "params": [], "return_type": "", "signature": "private IndexPlanRebalanceInfo()", "original_string": "    private IndexPlanRebalanceInfo() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/autoinvest/IndexPlanRebalanceInfo.java", "class_name": "IndexPlanRebalanceInfo", "class_uri": "src/test/java/examples/spot/autoinvest/IndexPlanRebalanceInfo.java.IndexPlanRebalanceInfo", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/autoinvest/IndexPlanRebalanceInfo.java.IndexPlanRebalanceInfo.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createAutoInvest().indexPlanRebalanceInfo(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/autoinvest/IndexPlanRebalanceInfo.java", "class_name": "IndexPlanRebalanceInfo", "class_uri": "src/test/java/examples/spot/autoinvest/IndexPlanRebalanceInfo.java.IndexPlanRebalanceInfo", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/autoinvest/PlansList.java.PlansList.[]PlansList()", "name": "PlansList", "arg_nums": 0, "params": [], "return_type": "", "signature": "private PlansList()", "original_string": "    private PlansList() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/autoinvest/PlansList.java", "class_name": "PlansList", "class_uri": "src/test/java/examples/spot/autoinvest/PlansList.java.PlansList", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/autoinvest/PlansList.java.PlansList.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"planType\", \"SINGLE\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createAutoInvest().plansList(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/autoinvest/PlansList.java", "class_name": "PlansList", "class_uri": "src/test/java/examples/spot/autoinvest/PlansList.java.PlansList", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/autoinvest/UserIndexPlans.java.UserIndexPlans.[]UserIndexPlans()", "name": "UserIndexPlans", "arg_nums": 0, "params": [], "return_type": "", "signature": "private UserIndexPlans()", "original_string": "    private UserIndexPlans() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/autoinvest/UserIndexPlans.java", "class_name": "UserIndexPlans", "class_uri": "src/test/java/examples/spot/autoinvest/UserIndexPlans.java.UserIndexPlans", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/autoinvest/UserIndexPlans.java.UserIndexPlans.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"indexId\", indexId);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createAutoInvest().userIndexPlans(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/autoinvest/UserIndexPlans.java", "class_name": "UserIndexPlans", "class_uri": "src/test/java/examples/spot/autoinvest/UserIndexPlans.java.UserIndexPlans", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/autoinvest/TargetAssetRoiList.java.TargetAssetRoiList.[]TargetAssetRoiList()", "name": "TargetAssetRoiList", "arg_nums": 0, "params": [], "return_type": "", "signature": "private TargetAssetRoiList()", "original_string": "    private TargetAssetRoiList() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/autoinvest/TargetAssetRoiList.java", "class_name": "TargetAssetRoiList", "class_uri": "src/test/java/examples/spot/autoinvest/TargetAssetRoiList.java.TargetAssetRoiList", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/autoinvest/TargetAssetRoiList.java.TargetAssetRoiList.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"targetAsset\", \"BTC\");\n        parameters.put(\"hisRoiType\", \"FIVE_YEAR\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createAutoInvest().targetAssetRoiList(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/autoinvest/TargetAssetRoiList.java", "class_name": "TargetAssetRoiList", "class_uri": "src/test/java/examples/spot/autoinvest/TargetAssetRoiList.java.TargetAssetRoiList", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/autoinvest/RedeemIndexPlan.java.RedeemIndexPlan.[]RedeemIndexPlan()", "name": "RedeemIndexPlan", "arg_nums": 0, "params": [], "return_type": "", "signature": "private RedeemIndexPlan()", "original_string": "    private RedeemIndexPlan() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/autoinvest/RedeemIndexPlan.java", "class_name": "RedeemIndexPlan", "class_uri": "src/test/java/examples/spot/autoinvest/RedeemIndexPlan.java.RedeemIndexPlan", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/autoinvest/RedeemIndexPlan.java.RedeemIndexPlan.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"indexId\", indexId);\n        parameters.put(\"redemptionPercentage\", redemptionPercentage);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createAutoInvest().redeemIndexPlan(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/autoinvest/RedeemIndexPlan.java", "class_name": "RedeemIndexPlan", "class_uri": "src/test/java/examples/spot/autoinvest/RedeemIndexPlan.java.RedeemIndexPlan", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/autoinvest/HoldingPlan.java.HoldingPlan.[]HoldingPlan()", "name": "HoldingPlan", "arg_nums": 0, "params": [], "return_type": "", "signature": "private HoldingPlan()", "original_string": "    private HoldingPlan() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/autoinvest/HoldingPlan.java", "class_name": "HoldingPlan", "class_uri": "src/test/java/examples/spot/autoinvest/HoldingPlan.java.HoldingPlan", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/autoinvest/HoldingPlan.java.HoldingPlan.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createAutoInvest().holdingPlan(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/autoinvest/HoldingPlan.java", "class_name": "HoldingPlan", "class_uri": "src/test/java/examples/spot/autoinvest/HoldingPlan.java.HoldingPlan", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/autoinvest/AllSourceAndTargetAssets.java.AllSourceAndTargetAssets.[]AllSourceAndTargetAssets()", "name": "AllSourceAndTargetAssets", "arg_nums": 0, "params": [], "return_type": "", "signature": "private AllSourceAndTargetAssets()", "original_string": "    private AllSourceAndTargetAssets() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/autoinvest/AllSourceAndTargetAssets.java", "class_name": "AllSourceAndTargetAssets", "class_uri": "src/test/java/examples/spot/autoinvest/AllSourceAndTargetAssets.java.AllSourceAndTargetAssets", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/autoinvest/AllSourceAndTargetAssets.java.AllSourceAndTargetAssets.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createAutoInvest().allSourceAndTargetAssets(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/autoinvest/AllSourceAndTargetAssets.java", "class_name": "AllSourceAndTargetAssets", "class_uri": "src/test/java/examples/spot/autoinvest/AllSourceAndTargetAssets.java.AllSourceAndTargetAssets", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/autoinvest/ChangePlanStatus.java.ChangePlanStatus.[]ChangePlanStatus()", "name": "ChangePlanStatus", "arg_nums": 0, "params": [], "return_type": "", "signature": "private ChangePlanStatus()", "original_string": "    private ChangePlanStatus() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/autoinvest/ChangePlanStatus.java", "class_name": "ChangePlanStatus", "class_uri": "src/test/java/examples/spot/autoinvest/ChangePlanStatus.java.ChangePlanStatus", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/autoinvest/ChangePlanStatus.java.ChangePlanStatus.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"planId\", planId);\n        parameters.put(\"status\", \"PAUSED\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createAutoInvest().changePlanStatus(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/autoinvest/ChangePlanStatus.java", "class_name": "ChangePlanStatus", "class_uri": "src/test/java/examples/spot/autoinvest/ChangePlanStatus.java.ChangePlanStatus", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/autoinvest/PlanSubsHistory.java.PlanSubsHistory.[]PlanSubsHistory()", "name": "PlanSubsHistory", "arg_nums": 0, "params": [], "return_type": "", "signature": "private PlanSubsHistory()", "original_string": "    private PlanSubsHistory() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/autoinvest/PlanSubsHistory.java", "class_name": "PlanSubsHistory", "class_uri": "src/test/java/examples/spot/autoinvest/PlanSubsHistory.java.PlanSubsHistory", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/autoinvest/PlanSubsHistory.java.PlanSubsHistory.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createAutoInvest().planSubsHistory(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/autoinvest/PlanSubsHistory.java", "class_name": "PlanSubsHistory", "class_uri": "src/test/java/examples/spot/autoinvest/PlanSubsHistory.java.PlanSubsHistory", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/autoinvest/TargetAssetList.java.TargetAssetList.[]TargetAssetList()", "name": "TargetAssetList", "arg_nums": 0, "params": [], "return_type": "", "signature": "private TargetAssetList()", "original_string": "    private TargetAssetList() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/autoinvest/TargetAssetList.java", "class_name": "TargetAssetList", "class_uri": "src/test/java/examples/spot/autoinvest/TargetAssetList.java.TargetAssetList", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/autoinvest/TargetAssetList.java.TargetAssetList.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createAutoInvest().targetAssetList(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/autoinvest/TargetAssetList.java", "class_name": "TargetAssetList", "class_uri": "src/test/java/examples/spot/autoinvest/TargetAssetList.java.TargetAssetList", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/autoinvest/IndexPlanRedeemHistory.java.IndexPlanRedeemHistory.[]IndexPlanRedeemHistory()", "name": "IndexPlanRedeemHistory", "arg_nums": 0, "params": [], "return_type": "", "signature": "private IndexPlanRedeemHistory()", "original_string": "    private IndexPlanRedeemHistory() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/autoinvest/IndexPlanRedeemHistory.java", "class_name": "IndexPlanRedeemHistory", "class_uri": "src/test/java/examples/spot/autoinvest/IndexPlanRedeemHistory.java.IndexPlanRedeemHistory", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/autoinvest/IndexPlanRedeemHistory.java.IndexPlanRedeemHistory.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"requestId\", requestId);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createAutoInvest().indexPlanRedeemHistory(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/autoinvest/IndexPlanRedeemHistory.java", "class_name": "IndexPlanRedeemHistory", "class_uri": "src/test/java/examples/spot/autoinvest/IndexPlanRedeemHistory.java.IndexPlanRedeemHistory", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/wallet/WalletBalance.java.WalletBalance.[]WalletBalance()", "name": "WalletBalance", "arg_nums": 0, "params": [], "return_type": "", "signature": "private WalletBalance()", "original_string": "    private WalletBalance() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/wallet/WalletBalance.java", "class_name": "WalletBalance", "class_uri": "src/test/java/examples/spot/wallet/WalletBalance.java.WalletBalance", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/wallet/WalletBalance.java.WalletBalance.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createWallet().walletBalance(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/wallet/WalletBalance.java", "class_name": "WalletBalance", "class_uri": "src/test/java/examples/spot/wallet/WalletBalance.java.WalletBalance", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/wallet/ApplyOneClickArrivalDeposit.java.ApplyOneClickArrivalDeposit.[]ApplyOneClickArrivalDeposit()", "name": "ApplyOneClickArrivalDeposit", "arg_nums": 0, "params": [], "return_type": "", "signature": "private ApplyOneClickArrivalDeposit()", "original_string": "    private ApplyOneClickArrivalDeposit() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/wallet/ApplyOneClickArrivalDeposit.java", "class_name": "ApplyOneClickArrivalDeposit", "class_uri": "src/test/java/examples/spot/wallet/ApplyOneClickArrivalDeposit.java.ApplyOneClickArrivalDeposit", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/wallet/ApplyOneClickArrivalDeposit.java.ApplyOneClickArrivalDeposit.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createWallet().applyOneClickArrivalDeposit(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/wallet/ApplyOneClickArrivalDeposit.java", "class_name": "ApplyOneClickArrivalDeposit", "class_uri": "src/test/java/examples/spot/wallet/ApplyOneClickArrivalDeposit.java.ApplyOneClickArrivalDeposit", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/wallet/DustLog.java.DustLog.[]DustLog()", "name": "DustLog", "arg_nums": 0, "params": [], "return_type": "", "signature": "private DustLog()", "original_string": "    private DustLog() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/wallet/DustLog.java", "class_name": "DustLog", "class_uri": "src/test/java/examples/spot/wallet/DustLog.java.DustLog", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/wallet/DustLog.java.DustLog.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createWallet().dustLog(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/wallet/DustLog.java", "class_name": "DustLog", "class_uri": "src/test/java/examples/spot/wallet/DustLog.java.DustLog", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/wallet/GetBusdAutoConvertions.java.GetBusdAutoConvertions.[]GetBusdAutoConvertions()", "name": "GetBusdAutoConvertions", "arg_nums": 0, "params": [], "return_type": "", "signature": "private GetBusdAutoConvertions()", "original_string": "    private GetBusdAutoConvertions() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/wallet/GetBusdAutoConvertions.java", "class_name": "GetBusdAutoConvertions", "class_uri": "src/test/java/examples/spot/wallet/GetBusdAutoConvertions.java.GetBusdAutoConvertions", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/wallet/GetBusdAutoConvertions.java.GetBusdAutoConvertions.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createWallet().getBusdAutoConvertions();\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/wallet/GetBusdAutoConvertions.java", "class_name": "GetBusdAutoConvertions", "class_uri": "src/test/java/examples/spot/wallet/GetBusdAutoConvertions.java.GetBusdAutoConvertions", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/wallet/AssetDividend.java.AssetDividend.[]AssetDividend()", "name": "AssetDividend", "arg_nums": 0, "params": [], "return_type": "", "signature": "private AssetDividend()", "original_string": "    private AssetDividend() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/wallet/AssetDividend.java", "class_name": "AssetDividend", "class_uri": "src/test/java/examples/spot/wallet/AssetDividend.java.AssetDividend", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/wallet/AssetDividend.java.AssetDividend.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createWallet().assetDividend(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/wallet/AssetDividend.java", "class_name": "AssetDividend", "class_uri": "src/test/java/examples/spot/wallet/AssetDividend.java.AssetDividend", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/wallet/FundingWallet.java.FundingWallet.[]FundingWallet()", "name": "FundingWallet", "arg_nums": 0, "params": [], "return_type": "", "signature": "private FundingWallet()", "original_string": "    private FundingWallet() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/wallet/FundingWallet.java", "class_name": "FundingWallet", "class_uri": "src/test/java/examples/spot/wallet/FundingWallet.java.FundingWallet", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/wallet/FundingWallet.java.FundingWallet.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createWallet().fundingWallet(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/wallet/FundingWallet.java", "class_name": "FundingWallet", "class_uri": "src/test/java/examples/spot/wallet/FundingWallet.java.FundingWallet", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/wallet/EnableFastWithdraw.java.EnableFastWithdraw.[]EnableFastWithdraw()", "name": "EnableFastWithdraw", "arg_nums": 0, "params": [], "return_type": "", "signature": "private EnableFastWithdraw()", "original_string": "    private EnableFastWithdraw() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/wallet/EnableFastWithdraw.java", "class_name": "EnableFastWithdraw", "class_uri": "src/test/java/examples/spot/wallet/EnableFastWithdraw.java.EnableFastWithdraw", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/wallet/EnableFastWithdraw.java.EnableFastWithdraw.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createWallet().enableFastWithdraw(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/wallet/EnableFastWithdraw.java", "class_name": "EnableFastWithdraw", "class_uri": "src/test/java/examples/spot/wallet/EnableFastWithdraw.java.EnableFastWithdraw", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/wallet/DisableFastWithdraw.java.DisableFastWithdraw.[]DisableFastWithdraw()", "name": "DisableFastWithdraw", "arg_nums": 0, "params": [], "return_type": "", "signature": "private DisableFastWithdraw()", "original_string": "    private DisableFastWithdraw() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/wallet/DisableFastWithdraw.java", "class_name": "DisableFastWithdraw", "class_uri": "src/test/java/examples/spot/wallet/DisableFastWithdraw.java.DisableFastWithdraw", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/wallet/DisableFastWithdraw.java.DisableFastWithdraw.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createWallet().disableFastWithdraw(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/wallet/DisableFastWithdraw.java", "class_name": "DisableFastWithdraw", "class_uri": "src/test/java/examples/spot/wallet/DisableFastWithdraw.java.DisableFastWithdraw", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/wallet/DepositAddresses.java.DepositAddresses.[]DepositAddresses()", "name": "DepositAddresses", "arg_nums": 0, "params": [], "return_type": "", "signature": "private DepositAddresses()", "original_string": "    private DepositAddresses() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/wallet/DepositAddresses.java", "class_name": "DepositAddresses", "class_uri": "src/test/java/examples/spot/wallet/DepositAddresses.java.DepositAddresses", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/wallet/DepositAddresses.java.DepositAddresses.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"coin\", \"BTC\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createWallet().depositAddresses(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/wallet/DepositAddresses.java", "class_name": "DepositAddresses", "class_uri": "src/test/java/examples/spot/wallet/DepositAddresses.java.DepositAddresses", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/wallet/DepositHistory.java.DepositHistory.[]DepositHistory()", "name": "DepositHistory", "arg_nums": 0, "params": [], "return_type": "", "signature": "private DepositHistory()", "original_string": "    private DepositHistory() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/wallet/DepositHistory.java", "class_name": "DepositHistory", "class_uri": "src/test/java/examples/spot/wallet/DepositHistory.java.DepositHistory", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/wallet/DepositHistory.java.DepositHistory.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createWallet().depositHistory(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/wallet/DepositHistory.java", "class_name": "DepositHistory", "class_uri": "src/test/java/examples/spot/wallet/DepositHistory.java.DepositHistory", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/wallet/BusdConvert.java.BusdConvert.[]BusdConvert()", "name": "BusdConvert", "arg_nums": 0, "params": [], "return_type": "", "signature": "private BusdConvert()", "original_string": "    private BusdConvert() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/wallet/BusdConvert.java", "class_name": "BusdConvert", "class_uri": "src/test/java/examples/spot/wallet/BusdConvert.java.BusdConvert", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/wallet/BusdConvert.java.BusdConvert.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        final BigDecimal amount = new BigDecimal(1);\n        parameters.put(\"clientTranId\", \"118263407119\");\n        parameters.put(\"asset\", \"BUSD\");\n        parameters.put(\"amount\", amount);\n        parameters.put(\"targetAsset\", \"USDC\");\n        parameters.put(\"accountType\", \"MAIN\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createWallet().busdConvert(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/wallet/BusdConvert.java", "class_name": "BusdConvert", "class_uri": "src/test/java/examples/spot/wallet/BusdConvert.java.BusdConvert", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/wallet/SystemStatus.java.SystemStatus.[]SystemStatus()", "name": "SystemStatus", "arg_nums": 0, "params": [], "return_type": "", "signature": "private SystemStatus()", "original_string": "    private SystemStatus() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/wallet/SystemStatus.java", "class_name": "SystemStatus", "class_uri": "src/test/java/examples/spot/wallet/SystemStatus.java.SystemStatus", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/wallet/SystemStatus.java.SystemStatus.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n\n        SpotClient client = new SpotClientImpl();\n        String result = client.createWallet().systemStatus();\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/wallet/SystemStatus.java", "class_name": "SystemStatus", "class_uri": "src/test/java/examples/spot/wallet/SystemStatus.java.SystemStatus", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/wallet/WithdrawHistory.java.WithdrawHistory.[]WithdrawHistory()", "name": "WithdrawHistory", "arg_nums": 0, "params": [], "return_type": "", "signature": "private WithdrawHistory()", "original_string": "    private WithdrawHistory() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/wallet/WithdrawHistory.java", "class_name": "WithdrawHistory", "class_uri": "src/test/java/examples/spot/wallet/WithdrawHistory.java.WithdrawHistory", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/wallet/WithdrawHistory.java.WithdrawHistory.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createWallet().withdrawHistory(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/wallet/WithdrawHistory.java", "class_name": "WithdrawHistory", "class_uri": "src/test/java/examples/spot/wallet/WithdrawHistory.java.WithdrawHistory", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/wallet/ApiPermission.java.ApiPermission.[]ApiPermission()", "name": "ApiPermission", "arg_nums": 0, "params": [], "return_type": "", "signature": "private ApiPermission()", "original_string": "    private ApiPermission() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/wallet/ApiPermission.java", "class_name": "ApiPermission", "class_uri": "src/test/java/examples/spot/wallet/ApiPermission.java.ApiPermission", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/wallet/ApiPermission.java.ApiPermission.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createWallet().apiPermission(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/wallet/ApiPermission.java", "class_name": "ApiPermission", "class_uri": "src/test/java/examples/spot/wallet/ApiPermission.java.ApiPermission", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/wallet/CoinInfo.java.CoinInfo.[]CoinInfo()", "name": "CoinInfo", "arg_nums": 0, "params": [], "return_type": "", "signature": "private CoinInfo()", "original_string": "    private CoinInfo() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/wallet/CoinInfo.java", "class_name": "CoinInfo", "class_uri": "src/test/java/examples/spot/wallet/CoinInfo.java.CoinInfo", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/wallet/CoinInfo.java.CoinInfo.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createWallet().coinInfo(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/wallet/CoinInfo.java", "class_name": "CoinInfo", "class_uri": "src/test/java/examples/spot/wallet/CoinInfo.java.CoinInfo", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/wallet/DustTransfer.java.DustTransfer.[]DustTransfer()", "name": "DustTransfer", "arg_nums": 0, "params": [], "return_type": "", "signature": "private DustTransfer()", "original_string": "    private DustTransfer() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/wallet/DustTransfer.java", "class_name": "DustTransfer", "class_uri": "src/test/java/examples/spot/wallet/DustTransfer.java.DustTransfer", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/wallet/DustTransfer.java.DustTransfer.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        ArrayList<String> assets = new ArrayList<>();\n        assets.add(\"CHR\");\n        assets.add(\"CTSI\");\n        parameters.put(\"asset\", assets);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createWallet().dustTransfer(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/wallet/DustTransfer.java", "class_name": "DustTransfer", "class_uri": "src/test/java/examples/spot/wallet/DustTransfer.java.DustTransfer", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/wallet/ApiTradingStatus.java.ApiTradingStatus.[]ApiTradingStatus()", "name": "ApiTradingStatus", "arg_nums": 0, "params": [], "return_type": "", "signature": "private ApiTradingStatus()", "original_string": "    private ApiTradingStatus() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/wallet/ApiTradingStatus.java", "class_name": "ApiTradingStatus", "class_uri": "src/test/java/examples/spot/wallet/ApiTradingStatus.java.ApiTradingStatus", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/wallet/ApiTradingStatus.java.ApiTradingStatus.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createWallet().accountStatus(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/wallet/ApiTradingStatus.java", "class_name": "ApiTradingStatus", "class_uri": "src/test/java/examples/spot/wallet/ApiTradingStatus.java.ApiTradingStatus", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/wallet/SwitchBusdAutoConversion.java.SwitchBusdAutoConversion.[]SwitchBusdAutoConversion()", "name": "SwitchBusdAutoConversion", "arg_nums": 0, "params": [], "return_type": "", "signature": "private SwitchBusdAutoConversion()", "original_string": "    private SwitchBusdAutoConversion() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/wallet/SwitchBusdAutoConversion.java", "class_name": "SwitchBusdAutoConversion", "class_uri": "src/test/java/examples/spot/wallet/SwitchBusdAutoConversion.java.SwitchBusdAutoConversion", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/wallet/SwitchBusdAutoConversion.java.SwitchBusdAutoConversion.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"coin\", \"USDC\");\n        parameters.put(\"enable\", false);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createWallet().switchBusdAutoConversion(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/wallet/SwitchBusdAutoConversion.java", "class_name": "SwitchBusdAutoConversion", "class_uri": "src/test/java/examples/spot/wallet/SwitchBusdAutoConversion.java.SwitchBusdAutoConversion", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/wallet/CloudMiningHistory.java.CloudMiningHistory.[]CloudMiningHistory()", "name": "CloudMiningHistory", "arg_nums": 0, "params": [], "return_type": "", "signature": "private CloudMiningHistory()", "original_string": "    private CloudMiningHistory() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/wallet/CloudMiningHistory.java", "class_name": "CloudMiningHistory", "class_uri": "src/test/java/examples/spot/wallet/CloudMiningHistory.java.CloudMiningHistory", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/wallet/CloudMiningHistory.java.CloudMiningHistory.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        final Long startTime = 118263400000L;\n        final Long endTime = 118263407119L;\n        final Integer size = 20;\n\n        parameters.put(\"startTime\", startTime);\n        parameters.put(\"endTime\", endTime);\n        parameters.put(\"asset\", \"USDC\");\n        parameters.put(\"size\", size);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createWallet().cloudMiningHistory(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/wallet/CloudMiningHistory.java", "class_name": "CloudMiningHistory", "class_uri": "src/test/java/examples/spot/wallet/CloudMiningHistory.java.CloudMiningHistory", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/wallet/GetUserAsset.java.GetUserAsset.[]GetUserAsset()", "name": "GetUserAsset", "arg_nums": 0, "params": [], "return_type": "", "signature": "private GetUserAsset()", "original_string": "    private GetUserAsset() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/wallet/GetUserAsset.java", "class_name": "GetUserAsset", "class_uri": "src/test/java/examples/spot/wallet/GetUserAsset.java.GetUserAsset", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/wallet/GetUserAsset.java.GetUserAsset.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createWallet().getUserAsset(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/wallet/GetUserAsset.java", "class_name": "GetUserAsset", "class_uri": "src/test/java/examples/spot/wallet/GetUserAsset.java.GetUserAsset", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/wallet/AccountStatus.java.AccountStatus.[]AccountStatus()", "name": "AccountStatus", "arg_nums": 0, "params": [], "return_type": "", "signature": "private AccountStatus()", "original_string": "    private AccountStatus() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/wallet/AccountStatus.java", "class_name": "AccountStatus", "class_uri": "src/test/java/examples/spot/wallet/AccountStatus.java.AccountStatus", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/wallet/AccountStatus.java.AccountStatus.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createWallet().apiTradingStatus(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/wallet/AccountStatus.java", "class_name": "AccountStatus", "class_uri": "src/test/java/examples/spot/wallet/AccountStatus.java.AccountStatus", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/wallet/QueryUniversalTransfer.java.QueryUniversalTransfer.[]QueryUniversalTransfer()", "name": "QueryUniversalTransfer", "arg_nums": 0, "params": [], "return_type": "", "signature": "private QueryUniversalTransfer()", "original_string": "    private QueryUniversalTransfer() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/wallet/QueryUniversalTransfer.java", "class_name": "QueryUniversalTransfer", "class_uri": "src/test/java/examples/spot/wallet/QueryUniversalTransfer.java.QueryUniversalTransfer", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/wallet/QueryUniversalTransfer.java.QueryUniversalTransfer.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"type\", \"MAIN_MARGIN\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createWallet().queryUniversalTransfer(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/wallet/QueryUniversalTransfer.java", "class_name": "QueryUniversalTransfer", "class_uri": "src/test/java/examples/spot/wallet/QueryUniversalTransfer.java.QueryUniversalTransfer", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/wallet/AssetDetail.java.AssetDetail.[]AssetDetail()", "name": "AssetDetail", "arg_nums": 0, "params": [], "return_type": "", "signature": "private AssetDetail()", "original_string": "    private AssetDetail() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/wallet/AssetDetail.java", "class_name": "AssetDetail", "class_uri": "src/test/java/examples/spot/wallet/AssetDetail.java.AssetDetail", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/wallet/AssetDetail.java.AssetDetail.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createWallet().assetDetail(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/wallet/AssetDetail.java", "class_name": "AssetDetail", "class_uri": "src/test/java/examples/spot/wallet/AssetDetail.java.AssetDetail", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/wallet/AccountSnapshot.java.AccountSnapshot.[]AccountSnapshot()", "name": "AccountSnapshot", "arg_nums": 0, "params": [], "return_type": "", "signature": "private AccountSnapshot()", "original_string": "    private AccountSnapshot() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/wallet/AccountSnapshot.java", "class_name": "AccountSnapshot", "class_uri": "src/test/java/examples/spot/wallet/AccountSnapshot.java.AccountSnapshot", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/wallet/AccountSnapshot.java.AccountSnapshot.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"type\", \"SPOT\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createWallet().accountSnapshot(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/wallet/AccountSnapshot.java", "class_name": "AccountSnapshot", "class_uri": "src/test/java/examples/spot/wallet/AccountSnapshot.java.AccountSnapshot", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/wallet/BnbConvertibleAssets.java.BnbConvertibleAssets.[]BnbConvertibleAssets()", "name": "BnbConvertibleAssets", "arg_nums": 0, "params": [], "return_type": "", "signature": "private BnbConvertibleAssets()", "original_string": "    private BnbConvertibleAssets() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/wallet/BnbConvertibleAssets.java", "class_name": "BnbConvertibleAssets", "class_uri": "src/test/java/examples/spot/wallet/BnbConvertibleAssets.java.BnbConvertibleAssets", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/wallet/BnbConvertibleAssets.java.BnbConvertibleAssets.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createWallet().bnbConvertableAssets(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/wallet/BnbConvertibleAssets.java", "class_name": "BnbConvertibleAssets", "class_uri": "src/test/java/examples/spot/wallet/BnbConvertibleAssets.java.BnbConvertibleAssets", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/wallet/TradeFee.java.TradeFee.[]TradeFee()", "name": "TradeFee", "arg_nums": 0, "params": [], "return_type": "", "signature": "private TradeFee()", "original_string": "    private TradeFee() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/wallet/TradeFee.java", "class_name": "TradeFee", "class_uri": "src/test/java/examples/spot/wallet/TradeFee.java.TradeFee", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/wallet/TradeFee.java.TradeFee.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createWallet().tradeFee(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/wallet/TradeFee.java", "class_name": "TradeFee", "class_uri": "src/test/java/examples/spot/wallet/TradeFee.java.TradeFee", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/wallet/UniversalTransfer.java.UniversalTransfer.[]UniversalTransfer()", "name": "UniversalTransfer", "arg_nums": 0, "params": [], "return_type": "", "signature": "private UniversalTransfer()", "original_string": "    private UniversalTransfer() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/wallet/UniversalTransfer.java", "class_name": "UniversalTransfer", "class_uri": "src/test/java/examples/spot/wallet/UniversalTransfer.java.UniversalTransfer", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/wallet/UniversalTransfer.java.UniversalTransfer.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"type\", \"MAIN_MARGIN\");\n        parameters.put(\"asset\", \"USDT\");\n        parameters.put(\"amount\", amount);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createWallet().universalTransfer(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/wallet/UniversalTransfer.java", "class_name": "UniversalTransfer", "class_uri": "src/test/java/examples/spot/wallet/UniversalTransfer.java.UniversalTransfer", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/wallet/BusdConvertHistory.java.BusdConvertHistory.[]BusdConvertHistory()", "name": "BusdConvertHistory", "arg_nums": 0, "params": [], "return_type": "", "signature": "private BusdConvertHistory()", "original_string": "    private BusdConvertHistory() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/wallet/BusdConvertHistory.java", "class_name": "BusdConvertHistory", "class_uri": "src/test/java/examples/spot/wallet/BusdConvertHistory.java.BusdConvertHistory", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/wallet/BusdConvertHistory.java.BusdConvertHistory.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        final Long startTime = 118263400000L;\n        final Long endTime = 118263407119L;\n        final Integer size = 20;\n\n        parameters.put(\"startTime\", startTime);\n        parameters.put(\"endTime\", endTime);\n        parameters.put(\"asset\", \"USDC\");\n        parameters.put(\"size\", size);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createWallet().busdConvertHistory(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/wallet/BusdConvertHistory.java", "class_name": "BusdConvertHistory", "class_uri": "src/test/java/examples/spot/wallet/BusdConvertHistory.java.BusdConvertHistory", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/wallet/DelegationHistory.java.DelegationHistory.[]DelegationHistory()", "name": "DelegationHistory", "arg_nums": 0, "params": [], "return_type": "", "signature": "private DelegationHistory()", "original_string": "    private DelegationHistory() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/wallet/DelegationHistory.java", "class_name": "DelegationHistory", "class_uri": "src/test/java/examples/spot/wallet/DelegationHistory.java.DelegationHistory", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/wallet/DelegationHistory.java.DelegationHistory.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"alice@test.com\");\n        parameters.put(\"startTime\", startTime);\n        parameters.put(\"endTime\", endTime);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createWallet().delegationHistory(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/wallet/DelegationHistory.java", "class_name": "DelegationHistory", "class_uri": "src/test/java/examples/spot/wallet/DelegationHistory.java.DelegationHistory", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/wallet/DepositAddress.java.DepositAddress.[]DepositAddress()", "name": "DepositAddress", "arg_nums": 0, "params": [], "return_type": "", "signature": "private DepositAddress()", "original_string": "    private DepositAddress() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/wallet/DepositAddress.java", "class_name": "DepositAddress", "class_uri": "src/test/java/examples/spot/wallet/DepositAddress.java.DepositAddress", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/wallet/DepositAddress.java.DepositAddress.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"coin\", \"BNBUSDT\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createWallet().depositAddress(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/wallet/DepositAddress.java", "class_name": "DepositAddress", "class_uri": "src/test/java/examples/spot/wallet/DepositAddress.java.DepositAddress", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/wallet/Withdraw.java.Withdraw.[]Withdraw()", "name": "Withdraw", "arg_nums": 0, "params": [], "return_type": "", "signature": "private Withdraw()", "original_string": "    private Withdraw() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/wallet/Withdraw.java", "class_name": "Withdraw", "class_uri": "src/test/java/examples/spot/wallet/Withdraw.java.Withdraw", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/wallet/Withdraw.java.Withdraw.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"coin\", \"BNBUSDT\");\n        parameters.put(\"address\", \"\");\n        parameters.put(\"amount\", \"0.001\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createWallet().withdraw(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/wallet/Withdraw.java", "class_name": "Withdraw", "class_uri": "src/test/java/examples/spot/wallet/Withdraw.java.Withdraw", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/nft/GetAsset.java.GetAsset.[]GetAsset()", "name": "GetAsset", "arg_nums": 0, "params": [], "return_type": "", "signature": "private GetAsset()", "original_string": "    private GetAsset() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/nft/GetAsset.java", "class_name": "GetAsset", "class_uri": "src/test/java/examples/spot/nft/GetAsset.java.GetAsset", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/nft/GetAsset.java.GetAsset.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createNFT().getAsset(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/nft/GetAsset.java", "class_name": "GetAsset", "class_uri": "src/test/java/examples/spot/nft/GetAsset.java.GetAsset", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/nft/DepositHistory.java.DepositHistory.[]DepositHistory()", "name": "DepositHistory", "arg_nums": 0, "params": [], "return_type": "", "signature": "private DepositHistory()", "original_string": "    private DepositHistory() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/nft/DepositHistory.java", "class_name": "DepositHistory", "class_uri": "src/test/java/examples/spot/nft/DepositHistory.java.DepositHistory", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/nft/DepositHistory.java.DepositHistory.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createNFT().depositHistory(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/nft/DepositHistory.java", "class_name": "DepositHistory", "class_uri": "src/test/java/examples/spot/nft/DepositHistory.java.DepositHistory", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/nft/WithdrawHistory.java.WithdrawHistory.[]WithdrawHistory()", "name": "WithdrawHistory", "arg_nums": 0, "params": [], "return_type": "", "signature": "private WithdrawHistory()", "original_string": "    private WithdrawHistory() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/nft/WithdrawHistory.java", "class_name": "WithdrawHistory", "class_uri": "src/test/java/examples/spot/nft/WithdrawHistory.java.WithdrawHistory", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/nft/WithdrawHistory.java.WithdrawHistory.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createNFT().withdrawHistory(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/nft/WithdrawHistory.java", "class_name": "WithdrawHistory", "class_uri": "src/test/java/examples/spot/nft/WithdrawHistory.java.WithdrawHistory", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/nft/TransactionsHistory.java.TransactionsHistory.[]TransactionsHistory()", "name": "TransactionsHistory", "arg_nums": 0, "params": [], "return_type": "", "signature": "private TransactionsHistory()", "original_string": "    private TransactionsHistory() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/nft/TransactionsHistory.java", "class_name": "TransactionsHistory", "class_uri": "src/test/java/examples/spot/nft/TransactionsHistory.java.TransactionsHistory", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/nft/TransactionsHistory.java.TransactionsHistory.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"orderType\", orderType);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createNFT().transactionsHistory(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/nft/TransactionsHistory.java", "class_name": "TransactionsHistory", "class_uri": "src/test/java/examples/spot/nft/TransactionsHistory.java.TransactionsHistory", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/signature/Rsa.java.Rsa.[]Rsa()", "name": "Rsa", "arg_nums": 0, "params": [], "return_type": "", "signature": "private Rsa()", "original_string": "    private Rsa() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/signature/Rsa.java", "class_name": "Rsa", "class_uri": "src/test/java/examples/spot/signature/Rsa.java.Rsa", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/signature/Rsa.java.Rsa.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        RsaSignatureGenerator signGenerator =  new RsaSignatureGenerator(PrivateConfig.TESTNET_PRIVATE_KEY_PATH); // Private Key file path as input\n        SpotClient client = new SpotClientImpl(PrivateConfig.TESTNET_API_KEY, signGenerator, PrivateConfig.BASE_URL);\n\n        try {\n            String result = client.createTrade().account(parameters);\n            System.out.println(result);\n        } catch (BinanceConnectorException e) {\n            System.err.println((String) String.format(\"fullErrMessage: %s\", e.getMessage()));\n        } catch (BinanceClientException e) {\n            System.err.println((String) String.format(\"fullErrMessage: %s \\nerrMessage: %s \\nerrCode: %d \\nHTTPStatusCode: %d\",\n                    e.getMessage(), e.getErrMsg(), e.getErrorCode(), e.getHttpStatusCode()));\n        }\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/signature/Rsa.java", "class_name": "Rsa", "class_uri": "src/test/java/examples/spot/signature/Rsa.java.Rsa", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/signature/Hmac.java.Hmac.[]Hmac()", "name": "Hmac", "arg_nums": 0, "params": [], "return_type": "", "signature": "private Hmac()", "original_string": "    private Hmac() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/signature/Hmac.java", "class_name": "Hmac", "class_uri": "src/test/java/examples/spot/signature/Hmac.java.Hmac", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/signature/Hmac.java.Hmac.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.TESTNET_API_KEY, new HmacSignatureGenerator(PrivateConfig.TESTNET_SECRET_KEY), PrivateConfig.BASE_URL);\n\n        try {\n            String result = client.createTrade().account(parameters);\n            System.out.println(result);\n        } catch (BinanceConnectorException e) {\n            System.err.println((String) String.format(\"fullErrMessage: %s\", e.getMessage()));\n        } catch (BinanceClientException e) {\n            System.err.println((String) String.format(\"fullErrMessage: %s \\nerrMessage: %s \\nerrCode: %d \\nHTTPStatusCode: %d\",\n                    e.getMessage(), e.getErrMsg(), e.getErrorCode(), e.getHttpStatusCode()));\n        }\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/signature/Hmac.java", "class_name": "Hmac", "class_uri": "src/test/java/examples/spot/signature/Hmac.java.Hmac", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/signature/EncryptedRsa.java.EncryptedRsa.[]EncryptedRsa()", "name": "EncryptedRsa", "arg_nums": 0, "params": [], "return_type": "", "signature": "private EncryptedRsa()", "original_string": "    private EncryptedRsa() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/signature/EncryptedRsa.java", "class_name": "EncryptedRsa", "class_uri": "src/test/java/examples/spot/signature/EncryptedRsa.java.EncryptedRsa", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/signature/EncryptedRsa.java.EncryptedRsa.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        RsaSignatureGenerator signGenerator =  new RsaSignatureGenerator(PrivateConfig.TESTNET_PRIVATE_KEY_PATH, \"password\");\n        SpotClient client = new SpotClientImpl(PrivateConfig.TESTNET_API_KEY, signGenerator, PrivateConfig.BASE_URL);\n\n        try {\n            String result = client.createTrade().account(parameters);\n            System.out.println(result);\n        } catch (BinanceConnectorException e) {\n            System.err.println((String) String.format(\"fullErrMessage: %s\", e.getMessage()));\n        } catch (BinanceClientException e) {\n            System.err.println((String) String.format(\"fullErrMessage: %s \\nerrMessage: %s \\nerrCode: %d \\nHTTPStatusCode: %d\",\n                    e.getMessage(), e.getErrMsg(), e.getErrorCode(), e.getHttpStatusCode()));\n        }\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/signature/EncryptedRsa.java", "class_name": "EncryptedRsa", "class_uri": "src/test/java/examples/spot/signature/EncryptedRsa.java.EncryptedRsa", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/signature/Ed25519.java.Ed25519.[]Ed25519()", "name": "Ed25519", "arg_nums": 0, "params": [], "return_type": "", "signature": "private Ed25519()", "original_string": "    private Ed25519() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/signature/Ed25519.java", "class_name": "Ed25519", "class_uri": "src/test/java/examples/spot/signature/Ed25519.java.Ed25519", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/signature/Ed25519.java.Ed25519.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) throws FileNotFoundException, IOException {\n\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Ed25519SignatureGenerator signGenerator =  new Ed25519SignatureGenerator(PrivateConfig.TESTNET_PRIVATE_KEY_PATH); // Private Key file path as input\n        SpotClient client = new SpotClientImpl(PrivateConfig.TESTNET_API_KEY, signGenerator, PrivateConfig.BASE_URL);\n\n        try {\n            String result = client.createTrade().account(parameters);\n            System.out.println(result);\n        } catch (BinanceConnectorException e) {\n            System.err.println((String) String.format(\"fullErrMessage: %s\", e.getMessage()));\n        } catch (BinanceClientException e) {\n            System.err.println((String) String.format(\"fullErrMessage: %s \\nerrMessage: %s \\nerrCode: %d \\nHTTPStatusCode: %d\",\n                    e.getMessage(), e.getErrMsg(), e.getErrorCode(), e.getHttpStatusCode()));\n        }\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/signature/Ed25519.java", "class_name": "Ed25519", "class_uri": "src/test/java/examples/spot/signature/Ed25519.java.Ed25519", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/trade/OcoOrder.java.OcoOrder.[]OcoOrder()", "name": "OcoOrder", "arg_nums": 0, "params": [], "return_type": "", "signature": "private OcoOrder()", "original_string": "    private OcoOrder() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/trade/OcoOrder.java", "class_name": "OcoOrder", "class_uri": "src/test/java/examples/spot/trade/OcoOrder.java.OcoOrder", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/trade/OcoOrder.java.OcoOrder.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.TESTNET_API_KEY, PrivateConfig.TESTNET_SECRET_KEY, PrivateConfig.BASE_URL);\n\n        parameters.put(\"symbol\", \"BTCUSDT\");\n        parameters.put(\"side\", \"SELL\");\n        parameters.put(\"stopPrice\", stopPrice);\n        parameters.put(\"quantity\", quantity);\n        parameters.put(\"price\", price);\n\n        try {\n            String result = client.createTrade().ocoOrder(parameters);\n            System.out.println(result);\n        } catch (BinanceConnectorException e) {\n            System.err.println((String) String.format(\"fullErrMessage: %s\", e.getMessage()));\n        } catch (BinanceClientException e) {\n            System.err.println((String) String.format(\"fullErrMessage: %s \\nerrMessage: %s \\nerrCode: %d \\nHTTPStatusCode: %d\",\n                    e.getMessage(), e.getErrMsg(), e.getErrorCode(), e.getHttpStatusCode()));\n        }\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/trade/OcoOrder.java", "class_name": "OcoOrder", "class_uri": "src/test/java/examples/spot/trade/OcoOrder.java.OcoOrder", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/trade/CancelOpenOrders.java.CancelOpenOrders.[]CancelOpenOrders()", "name": "CancelOpenOrders", "arg_nums": 0, "params": [], "return_type": "", "signature": "private CancelOpenOrders()", "original_string": "    private CancelOpenOrders() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/trade/CancelOpenOrders.java", "class_name": "CancelOpenOrders", "class_uri": "src/test/java/examples/spot/trade/CancelOpenOrders.java.CancelOpenOrders", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/trade/CancelOpenOrders.java.CancelOpenOrders.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.TESTNET_API_KEY, PrivateConfig.TESTNET_SECRET_KEY, PrivateConfig.BASE_URL);\n\n        parameters.put(\"symbol\", \"BTCUSDT\");\n\n        try {\n            String result = client.createTrade().cancelOpenOrders(parameters);\n            System.out.println(result);\n        } catch (BinanceConnectorException e) {\n            System.err.println((String) String.format(\"fullErrMessage: %s\", e.getMessage()));\n        } catch (BinanceClientException e) {\n            System.err.println((String) String.format(\"fullErrMessage: %s \\nerrMessage: %s \\nerrCode: %d \\nHTTPStatusCode: %d\",\n                    e.getMessage(), e.getErrMsg(), e.getErrorCode(), e.getHttpStatusCode()));\n        }\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/trade/CancelOpenOrders.java", "class_name": "CancelOpenOrders", "class_uri": "src/test/java/examples/spot/trade/CancelOpenOrders.java.CancelOpenOrders", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/trade/MyTrades.java.MyTrades.[]MyTrades()", "name": "MyTrades", "arg_nums": 0, "params": [], "return_type": "", "signature": "private MyTrades()", "original_string": "    private MyTrades() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/trade/MyTrades.java", "class_name": "MyTrades", "class_uri": "src/test/java/examples/spot/trade/MyTrades.java.MyTrades", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/trade/MyTrades.java.MyTrades.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.TESTNET_API_KEY, PrivateConfig.TESTNET_SECRET_KEY, PrivateConfig.BASE_URL);\n\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        try {\n            String result = client.createTrade().myTrades(parameters);\n            System.out.println(result);\n        } catch (BinanceConnectorException e) {\n            System.err.println((String) String.format(\"fullErrMessage: %s\", e.getMessage()));\n        } catch (BinanceClientException e) {\n            System.err.println((String) String.format(\"fullErrMessage: %s \\nerrMessage: %s \\nerrCode: %d \\nHTTPStatusCode: %d\",\n                    e.getMessage(), e.getErrMsg(), e.getErrorCode(), e.getHttpStatusCode()));\n        }\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/trade/MyTrades.java", "class_name": "MyTrades", "class_uri": "src/test/java/examples/spot/trade/MyTrades.java.MyTrades", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/trade/Account.java.Account.[]Account()", "name": "Account", "arg_nums": 0, "params": [], "return_type": "", "signature": "private Account()", "original_string": "    private Account() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/trade/Account.java", "class_name": "Account", "class_uri": "src/test/java/examples/spot/trade/Account.java.Account", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/trade/Account.java.Account.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.TESTNET_API_KEY, PrivateConfig.TESTNET_SECRET_KEY, PrivateConfig.BASE_URL);\n\n        try {\n            String result = client.createTrade().account(parameters);\n            System.out.println(result);\n        } catch (BinanceConnectorException e) {\n            System.err.println((String) String.format((String) String.format(\"fullErrMessage: %s\", e.getMessage(), e)));\n        } catch (BinanceClientException e) {\n            System.err.println((String) String.format(\"fullErrMessage: %s \\nerrMessage: %s \\nerrCode: %d \\nHTTPStatusCode: %d\",\n                    e.getMessage(), e.getErrMsg(), e.getErrorCode(), e.getHttpStatusCode()));\n        }\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/trade/Account.java", "class_name": "Account", "class_uri": "src/test/java/examples/spot/trade/Account.java.Account", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/trade/GetOpenOrders.java.GetOpenOrders.[]GetOpenOrders()", "name": "GetOpenOrders", "arg_nums": 0, "params": [], "return_type": "", "signature": "private GetOpenOrders()", "original_string": "    private GetOpenOrders() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/trade/GetOpenOrders.java", "class_name": "GetOpenOrders", "class_uri": "src/test/java/examples/spot/trade/GetOpenOrders.java.GetOpenOrders", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/trade/GetOpenOrders.java.GetOpenOrders.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.TESTNET_API_KEY, PrivateConfig.TESTNET_SECRET_KEY, PrivateConfig.BASE_URL);\n\n        parameters.put(\"symbol\", \"BTCUSDT\");\n\n        try {\n            String result = client.createTrade().getOpenOrders(parameters);\n            System.out.println(result);\n        } catch (BinanceConnectorException e) {\n            System.err.println((String) String.format(\"fullErrMessage: %s\", e.getMessage()));\n        } catch (BinanceClientException e) {\n            System.err.println((String) String.format(\"fullErrMessage: %s \\nerrMessage: %s \\nerrCode: %d \\nHTTPStatusCode: %d\",\n                    e.getMessage(), e.getErrMsg(), e.getErrorCode(), e.getHttpStatusCode()));\n        }\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/trade/GetOpenOrders.java", "class_name": "GetOpenOrders", "class_uri": "src/test/java/examples/spot/trade/GetOpenOrders.java.GetOpenOrders", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/trade/RateLimitOrder.java.RateLimitOrder.[]RateLimitOrder()", "name": "RateLimitOrder", "arg_nums": 0, "params": [], "return_type": "", "signature": "private RateLimitOrder()", "original_string": "    private RateLimitOrder() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/trade/RateLimitOrder.java", "class_name": "RateLimitOrder", "class_uri": "src/test/java/examples/spot/trade/RateLimitOrder.java.RateLimitOrder", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/trade/RateLimitOrder.java.RateLimitOrder.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.TESTNET_API_KEY, PrivateConfig.TESTNET_SECRET_KEY, PrivateConfig.BASE_URL);\n\n        try {\n            String result = client.createTrade().rateLimitOrder(parameters);\n            System.out.println(result);\n        } catch (BinanceConnectorException e) {\n            System.err.println((String) String.format(\"fullErrMessage: %s\", e.getMessage()));\n        } catch (BinanceClientException e) {\n            System.err.println((String) String.format(\"fullErrMessage: %s \\nerrMessage: %s \\nerrCode: %d \\nHTTPStatusCode: %d\",\n                    e.getMessage(), e.getErrMsg(), e.getErrorCode(), e.getHttpStatusCode()));\n        }\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/trade/RateLimitOrder.java", "class_name": "RateLimitOrder", "class_uri": "src/test/java/examples/spot/trade/RateLimitOrder.java.RateLimitOrder", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/trade/GetOrders.java.GetOrders.[]GetOrders()", "name": "GetOrders", "arg_nums": 0, "params": [], "return_type": "", "signature": "private GetOrders()", "original_string": "    private GetOrders() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/trade/GetOrders.java", "class_name": "GetOrders", "class_uri": "src/test/java/examples/spot/trade/GetOrders.java.GetOrders", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/trade/GetOrders.java.GetOrders.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.TESTNET_API_KEY, PrivateConfig.TESTNET_SECRET_KEY, PrivateConfig.BASE_URL);\n        parameters.put(\"symbol\", \"BTCUSDT\");\n\n        try {\n            String result = client.createTrade().getOrders(parameters);\n            System.out.println(result);\n        } catch (BinanceConnectorException e) {\n            System.err.println((String) String.format(\"fullErrMessage: %s\", e.getMessage()));\n        } catch (BinanceClientException e) {\n            System.err.println((String) String.format(\"fullErrMessage: %s \\nerrMessage: %s \\nerrCode: %d \\nHTTPStatusCode: %d\",\n                    e.getMessage(), e.getErrMsg(), e.getErrorCode(), e.getHttpStatusCode()));\n        }\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/trade/GetOrders.java", "class_name": "GetOrders", "class_uri": "src/test/java/examples/spot/trade/GetOrders.java.GetOrders", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/trade/GetOcoOrders.java.GetOcoOrders.[]GetOcoOrders()", "name": "GetOcoOrders", "arg_nums": 0, "params": [], "return_type": "", "signature": "private GetOcoOrders()", "original_string": "    private GetOcoOrders() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/trade/GetOcoOrders.java", "class_name": "GetOcoOrders", "class_uri": "src/test/java/examples/spot/trade/GetOcoOrders.java.GetOcoOrders", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/trade/GetOcoOrders.java.GetOcoOrders.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.TESTNET_API_KEY, PrivateConfig.TESTNET_SECRET_KEY, PrivateConfig.BASE_URL);\n\n        parameters.put(\"fromId\", fromId);\n        parameters.put(\"limit\", limit);\n\n        try {\n            String result = client.createTrade().getOCOOrders(parameters);\n            System.out.println(result);\n        } catch (BinanceConnectorException e) {\n            System.err.println((String) String.format(\"fullErrMessage: %s\", e.getMessage()));\n        } catch (BinanceClientException e) {\n            System.err.println((String) String.format(\"fullErrMessage: %s \\nerrMessage: %s \\nerrCode: %d \\nHTTPStatusCode: %d\",\n                    e.getMessage(), e.getErrMsg(), e.getErrorCode(), e.getHttpStatusCode()));\n        }\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/trade/GetOcoOrders.java", "class_name": "GetOcoOrders", "class_uri": "src/test/java/examples/spot/trade/GetOcoOrders.java.GetOcoOrders", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/trade/Commission.java.Commission.[]Commission()", "name": "Commission", "arg_nums": 0, "params": [], "return_type": "", "signature": "private Commission()", "original_string": "    private Commission() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/trade/Commission.java", "class_name": "Commission", "class_uri": "src/test/java/examples/spot/trade/Commission.java.Commission", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/trade/Commission.java.Commission.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createTrade().commission(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/trade/Commission.java", "class_name": "Commission", "class_uri": "src/test/java/examples/spot/trade/Commission.java.Commission", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/trade/GetOrder.java.GetOrder.[]GetOrder()", "name": "GetOrder", "arg_nums": 0, "params": [], "return_type": "", "signature": "private GetOrder()", "original_string": "    private GetOrder() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/trade/GetOrder.java", "class_name": "GetOrder", "class_uri": "src/test/java/examples/spot/trade/GetOrder.java.GetOrder", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/trade/GetOrder.java.GetOrder.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.TESTNET_API_KEY, PrivateConfig.TESTNET_SECRET_KEY, PrivateConfig.BASE_URL);\n\n        parameters.put(\"symbol\", \"BTCUSDT\");\n        parameters.put(\"orderId\", \"6687791\");\n\n        try {\n            String result = client.createTrade().getOrder(parameters);\n            System.out.println(result);\n        } catch (BinanceConnectorException e) {\n            System.err.println((String) String.format(\"fullErrMessage: %s\", e.getMessage()));\n        } catch (BinanceClientException e) {\n            System.err.println((String) String.format(\"fullErrMessage: %s \\nerrMessage: %s \\nerrCode: %d \\nHTTPStatusCode: %d\",\n                    e.getMessage(), e.getErrMsg(), e.getErrorCode(), e.getHttpStatusCode()));\n        }\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/trade/GetOrder.java", "class_name": "GetOrder", "class_uri": "src/test/java/examples/spot/trade/GetOrder.java.GetOrder", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/trade/CancelOcoOrder.java.CancelOcoOrder.[]CancelOcoOrder()", "name": "CancelOcoOrder", "arg_nums": 0, "params": [], "return_type": "", "signature": "private CancelOcoOrder()", "original_string": "    private CancelOcoOrder() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/trade/CancelOcoOrder.java", "class_name": "CancelOcoOrder", "class_uri": "src/test/java/examples/spot/trade/CancelOcoOrder.java.CancelOcoOrder", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/trade/CancelOcoOrder.java.CancelOcoOrder.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.TESTNET_API_KEY, PrivateConfig.TESTNET_SECRET_KEY, PrivateConfig.BASE_URL);\n\n        parameters.put(\"symbol\", \"BTCUSDT\");\n        parameters.put(\"orderListId\", \"\");\n\n        try {\n            String result = client.createTrade().cancelOCO(parameters);\n            System.out.println(result);\n        } catch (BinanceConnectorException e) {\n            System.err.println((String) String.format(\"fullErrMessage: %s\", e.getMessage()));\n        } catch (BinanceClientException e) {\n            System.err.println((String) String.format(\"fullErrMessage: %s \\nerrMessage: %s \\nerrCode: %d \\nHTTPStatusCode: %d\",\n                    e.getMessage(), e.getErrMsg(), e.getErrorCode(), e.getHttpStatusCode()));\n        }\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/trade/CancelOcoOrder.java", "class_name": "CancelOcoOrder", "class_uri": "src/test/java/examples/spot/trade/CancelOcoOrder.java.CancelOcoOrder", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/trade/CancelReplace.java.CancelReplace.[]CancelReplace()", "name": "CancelReplace", "arg_nums": 0, "params": [], "return_type": "", "signature": "private CancelReplace()", "original_string": "    private CancelReplace() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/trade/CancelReplace.java", "class_name": "CancelReplace", "class_uri": "src/test/java/examples/spot/trade/CancelReplace.java.CancelReplace", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/trade/CancelReplace.java.CancelReplace.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.TESTNET_API_KEY, PrivateConfig.TESTNET_SECRET_KEY, PrivateConfig.BASE_URL);\n\n        parameters.put(\"symbol\", \"BTCUSDT\");\n        parameters.put(\"side\", \"SELL\");\n        parameters.put(\"type\", \"LIMIT\");\n        parameters.put(\"cancelReplaceMode\", \"STOP_ON_FAILURE\");\n        parameters.put(\"timeInForce\", \"GTC\");\n        parameters.put(\"quantity\", quantity);\n        parameters.put(\"price\", price);\n        parameters.put(\"cancelOrderId\", cancelOrderId);\n\n        try {\n            String result = client.createTrade().cancelReplace(parameters);\n            System.out.println(result);\n        } catch (BinanceConnectorException e) {\n            System.err.println((String) String.format(\"fullErrMessage: %s\", e.getMessage()));\n        } catch (BinanceClientException e) {\n            System.err.println((String) String.format(\"fullErrMessage: %s \\nerrMessage: %s \\nerrCode: %d \\nHTTPStatusCode: %d\",\n                    e.getMessage(), e.getErrMsg(), e.getErrorCode(), e.getHttpStatusCode()));\n        }\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/trade/CancelReplace.java", "class_name": "CancelReplace", "class_uri": "src/test/java/examples/spot/trade/CancelReplace.java.CancelReplace", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/trade/NewOrder.java.NewOrder.[]NewOrder()", "name": "NewOrder", "arg_nums": 0, "params": [], "return_type": "", "signature": "private NewOrder()", "original_string": "    private NewOrder() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/trade/NewOrder.java", "class_name": "NewOrder", "class_uri": "src/test/java/examples/spot/trade/NewOrder.java.NewOrder", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/trade/NewOrder.java.NewOrder.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.TESTNET_API_KEY, PrivateConfig.TESTNET_SECRET_KEY, PrivateConfig.BASE_URL);\n\n        parameters.put(\"symbol\", \"BTCUSDT\");\n        parameters.put(\"side\", \"SELL\");\n        parameters.put(\"type\", \"LIMIT\");\n        parameters.put(\"timeInForce\", \"GTC\");\n        parameters.put(\"quantity\", quantity);\n        parameters.put(\"price\", price);\n\n        try {\n            String result = client.createTrade().newOrder(parameters);\n            System.out.println(result);\n        } catch (BinanceConnectorException e) {\n            System.err.println((String) String.format(\"fullErrMessage: %s\", e.getMessage()));\n        } catch (BinanceClientException e) {\n            System.err.println((String) String.format(\"fullErrMessage: %s \\nerrMessage: %s \\nerrCode: %d \\nHTTPStatusCode: %d\",\n                    e.getMessage(), e.getErrMsg(), e.getErrorCode(), e.getHttpStatusCode()));\n        }\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/trade/NewOrder.java", "class_name": "NewOrder", "class_uri": "src/test/java/examples/spot/trade/NewOrder.java.NewOrder", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/trade/PreventedMatches.java.PreventedMatches.[]PreventedMatches()", "name": "PreventedMatches", "arg_nums": 0, "params": [], "return_type": "", "signature": "private PreventedMatches()", "original_string": "    private PreventedMatches() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/trade/PreventedMatches.java", "class_name": "PreventedMatches", "class_uri": "src/test/java/examples/spot/trade/PreventedMatches.java.PreventedMatches", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/trade/PreventedMatches.java.PreventedMatches.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createTrade().preventedMatches(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/trade/PreventedMatches.java", "class_name": "PreventedMatches", "class_uri": "src/test/java/examples/spot/trade/PreventedMatches.java.PreventedMatches", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/trade/TestSorOrder.java.TestSorOrder.[]TestSorOrder()", "name": "TestSorOrder", "arg_nums": 0, "params": [], "return_type": "", "signature": "private TestSorOrder()", "original_string": "    private TestSorOrder() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/trade/TestSorOrder.java", "class_name": "TestSorOrder", "class_uri": "src/test/java/examples/spot/trade/TestSorOrder.java.TestSorOrder", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/trade/TestSorOrder.java.TestSorOrder.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"side\", \"SELL\");\n        parameters.put(\"type\", \"LIMIT\");\n        parameters.put(\"quantity\", quantity);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createTrade().testSorOrder(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/trade/TestSorOrder.java", "class_name": "TestSorOrder", "class_uri": "src/test/java/examples/spot/trade/TestSorOrder.java.TestSorOrder", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/trade/SorOrder.java.SorOrder.[]SorOrder()", "name": "SorOrder", "arg_nums": 0, "params": [], "return_type": "", "signature": "private SorOrder()", "original_string": "    private SorOrder() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/trade/SorOrder.java", "class_name": "SorOrder", "class_uri": "src/test/java/examples/spot/trade/SorOrder.java.SorOrder", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/trade/SorOrder.java.SorOrder.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"side\", \"SELL\");\n        parameters.put(\"type\", \"LIMIT\");\n        parameters.put(\"quantity\", quantity);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createTrade().sorOrder(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/trade/SorOrder.java", "class_name": "SorOrder", "class_uri": "src/test/java/examples/spot/trade/SorOrder.java.SorOrder", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/trade/GetOcoOrder.java.GetOcoOrder.[]GetOcoOrder()", "name": "GetOcoOrder", "arg_nums": 0, "params": [], "return_type": "", "signature": "private GetOcoOrder()", "original_string": "    private GetOcoOrder() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/trade/GetOcoOrder.java", "class_name": "GetOcoOrder", "class_uri": "src/test/java/examples/spot/trade/GetOcoOrder.java.GetOcoOrder", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/trade/GetOcoOrder.java.GetOcoOrder.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.TESTNET_API_KEY, PrivateConfig.TESTNET_SECRET_KEY, PrivateConfig.BASE_URL);\n\n        parameters.put(\"orderListId\", \"\");\n\n        try {\n            String result = client.createTrade().getOCOOrder(parameters);\n            System.out.println(result);\n        } catch (BinanceConnectorException e) {\n            System.err.println((String) String.format(\"fullErrMessage: %s\", e.getMessage()));\n        } catch (BinanceClientException e) {\n            System.err.println((String) String.format(\"fullErrMessage: %s \\nerrMessage: %s \\nerrCode: %d \\nHTTPStatusCode: %d\",\n                    e.getMessage(), e.getErrMsg(), e.getErrorCode(), e.getHttpStatusCode()));\n        }\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/trade/GetOcoOrder.java", "class_name": "GetOcoOrder", "class_uri": "src/test/java/examples/spot/trade/GetOcoOrder.java.GetOcoOrder", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/trade/TestNewOrder.java.TestNewOrder.[]TestNewOrder()", "name": "TestNewOrder", "arg_nums": 0, "params": [], "return_type": "", "signature": "private TestNewOrder()", "original_string": "    private TestNewOrder() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/trade/TestNewOrder.java", "class_name": "TestNewOrder", "class_uri": "src/test/java/examples/spot/trade/TestNewOrder.java.TestNewOrder", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/trade/TestNewOrder.java.TestNewOrder.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.TESTNET_API_KEY, PrivateConfig.TESTNET_SECRET_KEY, PrivateConfig.BASE_URL);\n\n        parameters.put(\"symbol\", \"BTCUSDT\");\n        parameters.put(\"side\", \"SELL\");\n        parameters.put(\"type\", \"LIMIT\");\n        parameters.put(\"timeInForce\", \"GTC\");\n        parameters.put(\"quantity\", quantity);\n        parameters.put(\"price\", price);\n\n        try {\n            String result = client.createTrade().testNewOrder(parameters);\n            System.out.println(result);\n        } catch (BinanceConnectorException e) {\n            System.err.println((String) String.format(\"fullErrMessage: %s\", e.getMessage()));\n        } catch (BinanceClientException e) {\n            System.err.println((String) String.format(\"fullErrMessage: %s \\nerrMessage: %s \\nerrCode: %d \\nHTTPStatusCode: %d\",\n                    e.getMessage(), e.getErrMsg(), e.getErrorCode(), e.getHttpStatusCode()));\n        }\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/trade/TestNewOrder.java", "class_name": "TestNewOrder", "class_uri": "src/test/java/examples/spot/trade/TestNewOrder.java.TestNewOrder", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/trade/GetOpenOcoOrders.java.GetOpenOcoOrders.[]GetOpenOcoOrders()", "name": "GetOpenOcoOrders", "arg_nums": 0, "params": [], "return_type": "", "signature": "private GetOpenOcoOrders()", "original_string": "    private GetOpenOcoOrders() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/trade/GetOpenOcoOrders.java", "class_name": "GetOpenOcoOrders", "class_uri": "src/test/java/examples/spot/trade/GetOpenOcoOrders.java.GetOpenOcoOrders", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/trade/GetOpenOcoOrders.java.GetOpenOcoOrders.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.TESTNET_API_KEY, PrivateConfig.TESTNET_SECRET_KEY, PrivateConfig.BASE_URL);\n\n        try {\n            String result = client.createTrade().getOpenOCOOrders(parameters);\n            System.out.println(result);\n        } catch (BinanceConnectorException e) {\n            System.err.println((String) String.format(\"fullErrMessage: %s\", e.getMessage()));\n        } catch (BinanceClientException e) {\n            System.err.println((String) String.format(\"fullErrMessage: %s \\nerrMessage: %s \\nerrCode: %d \\nHTTPStatusCode: %d\",\n                    e.getMessage(), e.getErrMsg(), e.getErrorCode(), e.getHttpStatusCode()));\n        }\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/trade/GetOpenOcoOrders.java", "class_name": "GetOpenOcoOrders", "class_uri": "src/test/java/examples/spot/trade/GetOpenOcoOrders.java.GetOpenOcoOrders", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/trade/CancelOrder.java.CancelOrder.[]CancelOrder()", "name": "CancelOrder", "arg_nums": 0, "params": [], "return_type": "", "signature": "private CancelOrder()", "original_string": "    private CancelOrder() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/trade/CancelOrder.java", "class_name": "CancelOrder", "class_uri": "src/test/java/examples/spot/trade/CancelOrder.java.CancelOrder", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/trade/CancelOrder.java.CancelOrder.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.TESTNET_API_KEY, PrivateConfig.TESTNET_SECRET_KEY, PrivateConfig.BASE_URL);\n\n        parameters.put(\"symbol\", \"BTCUSDT\");\n        parameters.put(\"orderId\", \"\");\n\n        try {\n            String result = client.createTrade().cancelOrder(parameters);\n            System.out.println(result);\n        } catch (BinanceConnectorException e) {\n            System.err.println((String) String.format(\"fullErrMessage: %s\", e.getMessage()));\n        } catch (BinanceClientException e) {\n            System.err.println((String) String.format(\"fullErrMessage: %s \\nerrMessage: %s \\nerrCode: %d \\nHTTPStatusCode: %d\",\n                    e.getMessage(), e.getErrMsg(), e.getErrorCode(), e.getHttpStatusCode()));\n        }\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/trade/CancelOrder.java", "class_name": "CancelOrder", "class_uri": "src/test/java/examples/spot/trade/CancelOrder.java.CancelOrder", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/trade/SorAllocations.java.SorAllocations.[]SorAllocations()", "name": "SorAllocations", "arg_nums": 0, "params": [], "return_type": "", "signature": "private SorAllocations()", "original_string": "    private SorAllocations() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/trade/SorAllocations.java", "class_name": "SorAllocations", "class_uri": "src/test/java/examples/spot/trade/SorAllocations.java.SorAllocations", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/trade/SorAllocations.java.SorAllocations.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createTrade().sorAllocations(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/trade/SorAllocations.java", "class_name": "SorAllocations", "class_uri": "src/test/java/examples/spot/trade/SorAllocations.java.SorAllocations", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/cryptoloans/FlexibleLoanAdjustLtv.java.FlexibleLoanAdjustLtv.[]FlexibleLoanAdjustLtv()", "name": "FlexibleLoanAdjustLtv", "arg_nums": 0, "params": [], "return_type": "", "signature": "private FlexibleLoanAdjustLtv()", "original_string": "    private FlexibleLoanAdjustLtv() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/cryptoloans/FlexibleLoanAdjustLtv.java", "class_name": "FlexibleLoanAdjustLtv", "class_uri": "src/test/java/examples/spot/cryptoloans/FlexibleLoanAdjustLtv.java.FlexibleLoanAdjustLtv", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/cryptoloans/FlexibleLoanAdjustLtv.java.FlexibleLoanAdjustLtv.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"loanCoin\", \"BUSD\");\n        parameters.put(\"collateralCoin\", \"BNB\");\n        parameters.put(\"adjustmentAmount\", adjustmentAmount);\n        parameters.put(\"direction\", \"ADDITIONAL\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createCryptoLoans().flexibleLoanAdjustLtv(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/cryptoloans/FlexibleLoanAdjustLtv.java", "class_name": "FlexibleLoanAdjustLtv", "class_uri": "src/test/java/examples/spot/cryptoloans/FlexibleLoanAdjustLtv.java.FlexibleLoanAdjustLtv", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/cryptoloans/FlexibleLoanRepay.java.FlexibleLoanRepay.[]FlexibleLoanRepay()", "name": "FlexibleLoanRepay", "arg_nums": 0, "params": [], "return_type": "", "signature": "private FlexibleLoanRepay()", "original_string": "    private FlexibleLoanRepay() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/cryptoloans/FlexibleLoanRepay.java", "class_name": "FlexibleLoanRepay", "class_uri": "src/test/java/examples/spot/cryptoloans/FlexibleLoanRepay.java.FlexibleLoanRepay", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/cryptoloans/FlexibleLoanRepay.java.FlexibleLoanRepay.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"loanCoin\", \"BUSD\");\n        parameters.put(\"collateralCoin\", \"BNB\");\n        parameters.put(\"repayAmount\", repayAmount);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createCryptoLoans().flexibleLoanRepay(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/cryptoloans/FlexibleLoanRepay.java", "class_name": "FlexibleLoanRepay", "class_uri": "src/test/java/examples/spot/cryptoloans/FlexibleLoanRepay.java.FlexibleLoanRepay", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/cryptoloans/FlexibleLoanOngoingOrders.java.FlexibleLoanOngoingOrders.[]FlexibleLoanOngoingOrders()", "name": "FlexibleLoanOngoingOrders", "arg_nums": 0, "params": [], "return_type": "", "signature": "private FlexibleLoanOngoingOrders()", "original_string": "    private FlexibleLoanOngoingOrders() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/cryptoloans/FlexibleLoanOngoingOrders.java", "class_name": "FlexibleLoanOngoingOrders", "class_uri": "src/test/java/examples/spot/cryptoloans/FlexibleLoanOngoingOrders.java.FlexibleLoanOngoingOrders", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/cryptoloans/FlexibleLoanOngoingOrders.java.FlexibleLoanOngoingOrders.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createCryptoLoans().flexibleLoanOngoingOrders(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/cryptoloans/FlexibleLoanOngoingOrders.java", "class_name": "FlexibleLoanOngoingOrders", "class_uri": "src/test/java/examples/spot/cryptoloans/FlexibleLoanOngoingOrders.java.FlexibleLoanOngoingOrders", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/cryptoloans/LoanRepay.java.LoanRepay.[]LoanRepay()", "name": "LoanRepay", "arg_nums": 0, "params": [], "return_type": "", "signature": "private LoanRepay()", "original_string": "    private LoanRepay() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/cryptoloans/LoanRepay.java", "class_name": "LoanRepay", "class_uri": "src/test/java/examples/spot/cryptoloans/LoanRepay.java.LoanRepay", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/cryptoloans/LoanRepay.java.LoanRepay.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"orderId\", orderId);\n        parameters.put(\"amount\", amount);\n        \n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createCryptoLoans().loanRepay(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/cryptoloans/LoanRepay.java", "class_name": "LoanRepay", "class_uri": "src/test/java/examples/spot/cryptoloans/LoanRepay.java.LoanRepay", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/cryptoloans/CustomizeMarginCall.java.CustomizeMarginCall.[]CustomizeMarginCall()", "name": "CustomizeMarginCall", "arg_nums": 0, "params": [], "return_type": "", "signature": "private CustomizeMarginCall()", "original_string": "    private CustomizeMarginCall() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/cryptoloans/CustomizeMarginCall.java", "class_name": "CustomizeMarginCall", "class_uri": "src/test/java/examples/spot/cryptoloans/CustomizeMarginCall.java.CustomizeMarginCall", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/cryptoloans/CustomizeMarginCall.java.CustomizeMarginCall.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"marginCall\", marginCall);\n        parameters.put(\"collateralCoin\", \"BNB\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createCryptoLoans().customizeMarginCall(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/cryptoloans/CustomizeMarginCall.java", "class_name": "CustomizeMarginCall", "class_uri": "src/test/java/examples/spot/cryptoloans/CustomizeMarginCall.java.CustomizeMarginCall", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/cryptoloans/LoanOngoingOrders.java.LoanOngoingOrders.[]LoanOngoingOrders()", "name": "LoanOngoingOrders", "arg_nums": 0, "params": [], "return_type": "", "signature": "private LoanOngoingOrders()", "original_string": "    private LoanOngoingOrders() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/cryptoloans/LoanOngoingOrders.java", "class_name": "LoanOngoingOrders", "class_uri": "src/test/java/examples/spot/cryptoloans/LoanOngoingOrders.java.LoanOngoingOrders", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/cryptoloans/LoanOngoingOrders.java.LoanOngoingOrders.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"orderId\", orderId);\n        parameters.put(\"loanCoin\", \"BUSD\");\n        \n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createCryptoLoans().loanOngoingOrders(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/cryptoloans/LoanOngoingOrders.java", "class_name": "LoanOngoingOrders", "class_uri": "src/test/java/examples/spot/cryptoloans/LoanOngoingOrders.java.LoanOngoingOrders", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/cryptoloans/LoanAdjustLTV.java.LoanAdjustLTV.[]LoanAdjustLTV()", "name": "LoanAdjustLTV", "arg_nums": 0, "params": [], "return_type": "", "signature": "private LoanAdjustLTV()", "original_string": "    private LoanAdjustLTV() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/cryptoloans/LoanAdjustLTV.java", "class_name": "LoanAdjustLTV", "class_uri": "src/test/java/examples/spot/cryptoloans/LoanAdjustLTV.java.LoanAdjustLTV", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/cryptoloans/LoanAdjustLTV.java.LoanAdjustLTV.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"orderId\", orderId);\n        parameters.put(\"amount\", amount);\n        \n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createCryptoLoans().loanAdjustLTV(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/cryptoloans/LoanAdjustLTV.java", "class_name": "LoanAdjustLTV", "class_uri": "src/test/java/examples/spot/cryptoloans/LoanAdjustLTV.java.LoanAdjustLTV", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/cryptoloans/LoanBorrowHistory.java.LoanBorrowHistory.[]LoanBorrowHistory()", "name": "LoanBorrowHistory", "arg_nums": 0, "params": [], "return_type": "", "signature": "private LoanBorrowHistory()", "original_string": "    private LoanBorrowHistory() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/cryptoloans/LoanBorrowHistory.java", "class_name": "LoanBorrowHistory", "class_uri": "src/test/java/examples/spot/cryptoloans/LoanBorrowHistory.java.LoanBorrowHistory", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/cryptoloans/LoanBorrowHistory.java.LoanBorrowHistory.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"orderId\", orderId);\n        parameters.put(\"loanCoin\", \"BUSD\");\n        \n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createCryptoLoans().loanBorrowHistory(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/cryptoloans/LoanBorrowHistory.java", "class_name": "LoanBorrowHistory", "class_uri": "src/test/java/examples/spot/cryptoloans/LoanBorrowHistory.java.LoanBorrowHistory", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/cryptoloans/LoanAssetsData.java.LoanAssetsData.[]LoanAssetsData()", "name": "LoanAssetsData", "arg_nums": 0, "params": [], "return_type": "", "signature": "private LoanAssetsData()", "original_string": "    private LoanAssetsData() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/cryptoloans/LoanAssetsData.java", "class_name": "LoanAssetsData", "class_uri": "src/test/java/examples/spot/cryptoloans/LoanAssetsData.java.LoanAssetsData", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/cryptoloans/LoanAssetsData.java.LoanAssetsData.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"loanCoin\", \"BUSD\");\n        parameters.put(\"vipLevel\", vipLevel); \n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createCryptoLoans().loanAssetsData(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/cryptoloans/LoanAssetsData.java", "class_name": "LoanAssetsData", "class_uri": "src/test/java/examples/spot/cryptoloans/LoanAssetsData.java.LoanAssetsData", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/cryptoloans/FlexibleLoanLtvAdjustHistory.java.FlexibleLoanLtvAdjustHistory.[]FlexibleLoanLtvAdjustHistory()", "name": "FlexibleLoanLtvAdjustHistory", "arg_nums": 0, "params": [], "return_type": "", "signature": "private FlexibleLoanLtvAdjustHistory()", "original_string": "    private FlexibleLoanLtvAdjustHistory() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/cryptoloans/FlexibleLoanLtvAdjustHistory.java", "class_name": "FlexibleLoanLtvAdjustHistory", "class_uri": "src/test/java/examples/spot/cryptoloans/FlexibleLoanLtvAdjustHistory.java.FlexibleLoanLtvAdjustHistory", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/cryptoloans/FlexibleLoanLtvAdjustHistory.java.FlexibleLoanLtvAdjustHistory.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"loanCoin\", \"BUSD\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createCryptoLoans().flexibleLoanLtvAdjustHistory(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/cryptoloans/FlexibleLoanLtvAdjustHistory.java", "class_name": "FlexibleLoanLtvAdjustHistory", "class_uri": "src/test/java/examples/spot/cryptoloans/FlexibleLoanLtvAdjustHistory.java.FlexibleLoanLtvAdjustHistory", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/cryptoloans/LoanRepayHistory.java.LoanRepayHistory.[]LoanRepayHistory()", "name": "LoanRepayHistory", "arg_nums": 0, "params": [], "return_type": "", "signature": "private LoanRepayHistory()", "original_string": "    private LoanRepayHistory() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/cryptoloans/LoanRepayHistory.java", "class_name": "LoanRepayHistory", "class_uri": "src/test/java/examples/spot/cryptoloans/LoanRepayHistory.java.LoanRepayHistory", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/cryptoloans/LoanRepayHistory.java.LoanRepayHistory.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"orderId\", orderId);\n        parameters.put(\"loanCoin\", \"BUSD\");\n        \n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createCryptoLoans().loanRepayHistory(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/cryptoloans/LoanRepayHistory.java", "class_name": "LoanRepayHistory", "class_uri": "src/test/java/examples/spot/cryptoloans/LoanRepayHistory.java.LoanRepayHistory", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/cryptoloans/FlexibleLoanAssets.java.FlexibleLoanAssets.[]FlexibleLoanAssets()", "name": "FlexibleLoanAssets", "arg_nums": 0, "params": [], "return_type": "", "signature": "private FlexibleLoanAssets()", "original_string": "    private FlexibleLoanAssets() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/cryptoloans/FlexibleLoanAssets.java", "class_name": "FlexibleLoanAssets", "class_uri": "src/test/java/examples/spot/cryptoloans/FlexibleLoanAssets.java.FlexibleLoanAssets", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/cryptoloans/FlexibleLoanAssets.java.FlexibleLoanAssets.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createCryptoLoans().flexibleLoanAssets(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/cryptoloans/FlexibleLoanAssets.java", "class_name": "FlexibleLoanAssets", "class_uri": "src/test/java/examples/spot/cryptoloans/FlexibleLoanAssets.java.FlexibleLoanAssets", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/cryptoloans/LoanBorrow.java.LoanBorrow.[]LoanBorrow()", "name": "LoanBorrow", "arg_nums": 0, "params": [], "return_type": "", "signature": "private LoanBorrow()", "original_string": "    private LoanBorrow() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/cryptoloans/LoanBorrow.java", "class_name": "LoanBorrow", "class_uri": "src/test/java/examples/spot/cryptoloans/LoanBorrow.java.LoanBorrow", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/cryptoloans/LoanBorrow.java.LoanBorrow.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"loanCoin\", \"BUSD\");\n        parameters.put(\"collateralCoin\", \"BNB\");\n        parameters.put(\"loanAmount\", loanAmount);\n        parameters.put(\"loanTerm\", loanTerm);\n        \n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createCryptoLoans().loanBorrow(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/cryptoloans/LoanBorrow.java", "class_name": "LoanBorrow", "class_uri": "src/test/java/examples/spot/cryptoloans/LoanBorrow.java.LoanBorrow", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/cryptoloans/FlexibleLoanRepayHistory.java.FlexibleLoanRepayHistory.[]FlexibleLoanRepayHistory()", "name": "FlexibleLoanRepayHistory", "arg_nums": 0, "params": [], "return_type": "", "signature": "private FlexibleLoanRepayHistory()", "original_string": "    private FlexibleLoanRepayHistory() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/cryptoloans/FlexibleLoanRepayHistory.java", "class_name": "FlexibleLoanRepayHistory", "class_uri": "src/test/java/examples/spot/cryptoloans/FlexibleLoanRepayHistory.java.FlexibleLoanRepayHistory", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/cryptoloans/FlexibleLoanRepayHistory.java.FlexibleLoanRepayHistory.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createCryptoLoans().flexibleLoanRepayHistory(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/cryptoloans/FlexibleLoanRepayHistory.java", "class_name": "FlexibleLoanRepayHistory", "class_uri": "src/test/java/examples/spot/cryptoloans/FlexibleLoanRepayHistory.java.FlexibleLoanRepayHistory", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/cryptoloans/FlexibleLoanCollateralAssets.java.FlexibleLoanCollateralAssets.[]FlexibleLoanCollateralAssets()", "name": "FlexibleLoanCollateralAssets", "arg_nums": 0, "params": [], "return_type": "", "signature": "private FlexibleLoanCollateralAssets()", "original_string": "    private FlexibleLoanCollateralAssets() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/cryptoloans/FlexibleLoanCollateralAssets.java", "class_name": "FlexibleLoanCollateralAssets", "class_uri": "src/test/java/examples/spot/cryptoloans/FlexibleLoanCollateralAssets.java.FlexibleLoanCollateralAssets", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/cryptoloans/FlexibleLoanCollateralAssets.java.FlexibleLoanCollateralAssets.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createCryptoLoans().flexibleLoanCollateralAssets(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/cryptoloans/FlexibleLoanCollateralAssets.java", "class_name": "FlexibleLoanCollateralAssets", "class_uri": "src/test/java/examples/spot/cryptoloans/FlexibleLoanCollateralAssets.java.FlexibleLoanCollateralAssets", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/cryptoloans/LoanIncome.java.LoanIncome.[]LoanIncome()", "name": "LoanIncome", "arg_nums": 0, "params": [], "return_type": "", "signature": "private LoanIncome()", "original_string": "    private LoanIncome() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/cryptoloans/LoanIncome.java", "class_name": "LoanIncome", "class_uri": "src/test/java/examples/spot/cryptoloans/LoanIncome.java.LoanIncome", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/cryptoloans/LoanIncome.java.LoanIncome.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"asset\", \"BNB\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createCryptoLoans().loanIncome(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/cryptoloans/LoanIncome.java", "class_name": "LoanIncome", "class_uri": "src/test/java/examples/spot/cryptoloans/LoanIncome.java.LoanIncome", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/cryptoloans/LoanAdjustLTVHistory.java.LoanAdjustLTVHistory.[]LoanAdjustLTVHistory()", "name": "LoanAdjustLTVHistory", "arg_nums": 0, "params": [], "return_type": "", "signature": "private LoanAdjustLTVHistory()", "original_string": "    private LoanAdjustLTVHistory() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/cryptoloans/LoanAdjustLTVHistory.java", "class_name": "LoanAdjustLTVHistory", "class_uri": "src/test/java/examples/spot/cryptoloans/LoanAdjustLTVHistory.java.LoanAdjustLTVHistory", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/cryptoloans/LoanAdjustLTVHistory.java.LoanAdjustLTVHistory.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"orderId\", orderId);\n        parameters.put(\"loanCoin\", \"BUSD\");\n        \n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createCryptoLoans().loanAdjustLTVHistory(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/cryptoloans/LoanAdjustLTVHistory.java", "class_name": "LoanAdjustLTVHistory", "class_uri": "src/test/java/examples/spot/cryptoloans/LoanAdjustLTVHistory.java.LoanAdjustLTVHistory", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/cryptoloans/CollateralAssetsData.java.CollateralAssetsData.[]CollateralAssetsData()", "name": "CollateralAssetsData", "arg_nums": 0, "params": [], "return_type": "", "signature": "private CollateralAssetsData()", "original_string": "    private CollateralAssetsData() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/cryptoloans/CollateralAssetsData.java", "class_name": "CollateralAssetsData", "class_uri": "src/test/java/examples/spot/cryptoloans/CollateralAssetsData.java.CollateralAssetsData", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/cryptoloans/CollateralAssetsData.java.CollateralAssetsData.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"collateralCoin\", \"BNB\");\n        \n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createCryptoLoans().collateralAssetsData(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/cryptoloans/CollateralAssetsData.java", "class_name": "CollateralAssetsData", "class_uri": "src/test/java/examples/spot/cryptoloans/CollateralAssetsData.java.CollateralAssetsData", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/cryptoloans/FlexibleLoanBorrow.java.FlexibleLoanBorrow.[]FlexibleLoanBorrow()", "name": "FlexibleLoanBorrow", "arg_nums": 0, "params": [], "return_type": "", "signature": "private FlexibleLoanBorrow()", "original_string": "    private FlexibleLoanBorrow() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/cryptoloans/FlexibleLoanBorrow.java", "class_name": "FlexibleLoanBorrow", "class_uri": "src/test/java/examples/spot/cryptoloans/FlexibleLoanBorrow.java.FlexibleLoanBorrow", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/cryptoloans/FlexibleLoanBorrow.java.FlexibleLoanBorrow.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"loanCoin\", \"USDT\");\n        parameters.put(\"collateralCoin\", \"BTC\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createCryptoLoans().flexibleLoanBorrow(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/cryptoloans/FlexibleLoanBorrow.java", "class_name": "FlexibleLoanBorrow", "class_uri": "src/test/java/examples/spot/cryptoloans/FlexibleLoanBorrow.java.FlexibleLoanBorrow", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/cryptoloans/CollateralRepayRate.java.CollateralRepayRate.[]CollateralRepayRate()", "name": "CollateralRepayRate", "arg_nums": 0, "params": [], "return_type": "", "signature": "private CollateralRepayRate()", "original_string": "    private CollateralRepayRate() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/cryptoloans/CollateralRepayRate.java", "class_name": "CollateralRepayRate", "class_uri": "src/test/java/examples/spot/cryptoloans/CollateralRepayRate.java.CollateralRepayRate", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/cryptoloans/CollateralRepayRate.java.CollateralRepayRate.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"loanCoin\", \"BUSD\");\n        parameters.put(\"collateralCoin\", \"BNB\");\n        parameters.put(\"repayAmount\", repayAmount);\n        \n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createCryptoLoans().collateralRepayRate(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/cryptoloans/CollateralRepayRate.java", "class_name": "CollateralRepayRate", "class_uri": "src/test/java/examples/spot/cryptoloans/CollateralRepayRate.java.CollateralRepayRate", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/cryptoloans/FlexibleLoanBorrowHistory.java.FlexibleLoanBorrowHistory.[]FlexibleLoanBorrowHistory()", "name": "FlexibleLoanBorrowHistory", "arg_nums": 0, "params": [], "return_type": "", "signature": "private FlexibleLoanBorrowHistory()", "original_string": "    private FlexibleLoanBorrowHistory() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/cryptoloans/FlexibleLoanBorrowHistory.java", "class_name": "FlexibleLoanBorrowHistory", "class_uri": "src/test/java/examples/spot/cryptoloans/FlexibleLoanBorrowHistory.java.FlexibleLoanBorrowHistory", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/cryptoloans/FlexibleLoanBorrowHistory.java.FlexibleLoanBorrowHistory.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"loanCoin\", \"USDT\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createCryptoLoans().flexibleLoanBorrowHistory(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/cryptoloans/FlexibleLoanBorrowHistory.java", "class_name": "FlexibleLoanBorrowHistory", "class_uri": "src/test/java/examples/spot/cryptoloans/FlexibleLoanBorrowHistory.java.FlexibleLoanBorrowHistory", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/viploans/CollateralAsset.java.CollateralAsset.[]CollateralAsset()", "name": "CollateralAsset", "arg_nums": 0, "params": [], "return_type": "", "signature": "private CollateralAsset()", "original_string": "    private CollateralAsset() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/viploans/CollateralAsset.java", "class_name": "CollateralAsset", "class_uri": "src/test/java/examples/spot/viploans/CollateralAsset.java.CollateralAsset", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/viploans/CollateralAsset.java.CollateralAsset.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createVIPLoans().collateralAccount(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/viploans/CollateralAsset.java", "class_name": "CollateralAsset", "class_uri": "src/test/java/examples/spot/viploans/CollateralAsset.java.CollateralAsset", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/viploans/Borrow.java.Borrow.[]Borrow()", "name": "Borrow", "arg_nums": 0, "params": [], "return_type": "", "signature": "private Borrow()", "original_string": "    private Borrow() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/viploans/Borrow.java", "class_name": "Borrow", "class_uri": "src/test/java/examples/spot/viploans/Borrow.java.Borrow", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/viploans/Borrow.java.Borrow.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"loanAccountId\", loanAccountId);\n        parameters.put(\"loanAmount\", loanAmount);\n        parameters.put(\"loanCoin\", \"BUSD\");\n        parameters.put(\"collateralAccountId\", \"87654321\");\n        parameters.put(\"collateralCoin\", \"BUSD\");\n        parameters.put(\"isFlexibleRate\", true);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createVIPLoans().borrow(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/viploans/Borrow.java", "class_name": "Borrow", "class_uri": "src/test/java/examples/spot/viploans/Borrow.java.Borrow", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/viploans/BorrowInterestRate.java.BorrowInterestRate.[]BorrowInterestRate()", "name": "BorrowInterestRate", "arg_nums": 0, "params": [], "return_type": "", "signature": "private BorrowInterestRate()", "original_string": "    private BorrowInterestRate() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/viploans/BorrowInterestRate.java", "class_name": "BorrowInterestRate", "class_uri": "src/test/java/examples/spot/viploans/BorrowInterestRate.java.BorrowInterestRate", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/viploans/BorrowInterestRate.java.BorrowInterestRate.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"loanCoin\", \"BUSD\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createVIPLoans().borrowInterestRate(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/viploans/BorrowInterestRate.java", "class_name": "BorrowInterestRate", "class_uri": "src/test/java/examples/spot/viploans/BorrowInterestRate.java.BorrowInterestRate", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/viploans/RepaymentHistory.java.RepaymentHistory.[]RepaymentHistory()", "name": "RepaymentHistory", "arg_nums": 0, "params": [], "return_type": "", "signature": "private RepaymentHistory()", "original_string": "    private RepaymentHistory() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/viploans/RepaymentHistory.java", "class_name": "RepaymentHistory", "class_uri": "src/test/java/examples/spot/viploans/RepaymentHistory.java.RepaymentHistory", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/viploans/RepaymentHistory.java.RepaymentHistory.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createVIPLoans().repaymentHistory(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/viploans/RepaymentHistory.java", "class_name": "RepaymentHistory", "class_uri": "src/test/java/examples/spot/viploans/RepaymentHistory.java.RepaymentHistory", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/viploans/CollateralAccount.java.CollateralAccount.[]CollateralAccount()", "name": "CollateralAccount", "arg_nums": 0, "params": [], "return_type": "", "signature": "private CollateralAccount()", "original_string": "    private CollateralAccount() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/viploans/CollateralAccount.java", "class_name": "CollateralAccount", "class_uri": "src/test/java/examples/spot/viploans/CollateralAccount.java.CollateralAccount", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/viploans/CollateralAccount.java.CollateralAccount.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createVIPLoans().collateralAsset(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/viploans/CollateralAccount.java", "class_name": "CollateralAccount", "class_uri": "src/test/java/examples/spot/viploans/CollateralAccount.java.CollateralAccount", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/viploans/Repay.java.Repay.[]Repay()", "name": "Repay", "arg_nums": 0, "params": [], "return_type": "", "signature": "private Repay()", "original_string": "    private Repay() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/viploans/Repay.java", "class_name": "Repay", "class_uri": "src/test/java/examples/spot/viploans/Repay.java.Repay", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/viploans/Repay.java.Repay.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"orderId\", orderId);\n        parameters.put(\"amount\", amount);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createVIPLoans().repay(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/viploans/Repay.java", "class_name": "Repay", "class_uri": "src/test/java/examples/spot/viploans/Repay.java.Repay", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/viploans/Renew.java.Renew.[]Renew()", "name": "Renew", "arg_nums": 0, "params": [], "return_type": "", "signature": "private Renew()", "original_string": "    private Renew() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/viploans/Renew.java", "class_name": "Renew", "class_uri": "src/test/java/examples/spot/viploans/Renew.java.Renew", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/viploans/Renew.java.Renew.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"orderId\", orderId);\n        parameters.put(\"loanTerm\", loanTerm);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createVIPLoans().renew(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/viploans/Renew.java", "class_name": "Renew", "class_uri": "src/test/java/examples/spot/viploans/Renew.java.Renew", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/viploans/OrderStatus.java.OrderStatus.[]OrderStatus()", "name": "OrderStatus", "arg_nums": 0, "params": [], "return_type": "", "signature": "private OrderStatus()", "original_string": "    private OrderStatus() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/viploans/OrderStatus.java", "class_name": "OrderStatus", "class_uri": "src/test/java/examples/spot/viploans/OrderStatus.java.OrderStatus", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/viploans/OrderStatus.java.OrderStatus.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createVIPLoans().orderStatus(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/viploans/OrderStatus.java", "class_name": "OrderStatus", "class_uri": "src/test/java/examples/spot/viploans/OrderStatus.java.OrderStatus", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/viploans/LoanableAssets.java.LoanableAssets.[]LoanableAssets()", "name": "LoanableAssets", "arg_nums": 0, "params": [], "return_type": "", "signature": "private LoanableAssets()", "original_string": "    private LoanableAssets() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/viploans/LoanableAssets.java", "class_name": "LoanableAssets", "class_uri": "src/test/java/examples/spot/viploans/LoanableAssets.java.LoanableAssets", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/viploans/LoanableAssets.java.LoanableAssets.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createVIPLoans().loanableAssets(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/viploans/LoanableAssets.java", "class_name": "LoanableAssets", "class_uri": "src/test/java/examples/spot/viploans/LoanableAssets.java.LoanableAssets", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/viploans/OngoingOrders.java.OngoingOrders.[]OngoingOrders()", "name": "OngoingOrders", "arg_nums": 0, "params": [], "return_type": "", "signature": "private OngoingOrders()", "original_string": "    private OngoingOrders() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/viploans/OngoingOrders.java", "class_name": "OngoingOrders", "class_uri": "src/test/java/examples/spot/viploans/OngoingOrders.java.OngoingOrders", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/viploans/OngoingOrders.java.OngoingOrders.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"orderId\", \"BUSD\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createVIPLoans().ongoingOrders(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/viploans/OngoingOrders.java", "class_name": "OngoingOrders", "class_uri": "src/test/java/examples/spot/viploans/OngoingOrders.java.OngoingOrders", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/rebate/TaxQuery.java.TaxQuery.[]TaxQuery()", "name": "TaxQuery", "arg_nums": 0, "params": [], "return_type": "", "signature": "private TaxQuery()", "original_string": "    private TaxQuery() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/rebate/TaxQuery.java", "class_name": "TaxQuery", "class_uri": "src/test/java/examples/spot/rebate/TaxQuery.java.TaxQuery", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/rebate/TaxQuery.java.TaxQuery.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createRebate().taxQuery(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/rebate/TaxQuery.java", "class_name": "TaxQuery", "class_uri": "src/test/java/examples/spot/rebate/TaxQuery.java.TaxQuery", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/proxy/UnauthProxy.java.UnauthProxy.[]UnauthProxy()", "name": "UnauthProxy", "arg_nums": 0, "params": [], "return_type": "", "signature": "private UnauthProxy()", "original_string": "    private UnauthProxy() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/proxy/UnauthProxy.java", "class_name": "UnauthProxy", "class_uri": "src/test/java/examples/spot/proxy/UnauthProxy.java.UnauthProxy", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/proxy/UnauthProxy.java.UnauthProxy.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        SpotClient client = new SpotClientImpl();\n        \n        Proxy proxyConn = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(\"127.0.0.1\", proxyPort));\n        ProxyAuth proxy = new ProxyAuth(proxyConn, null);\n        client.setProxy(proxy);\n        System.out.println(client.createMarket().time());\n\n        client.unsetProxy();\n        System.out.println(client.createMarket().time());\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/proxy/UnauthProxy.java", "class_name": "UnauthProxy", "class_uri": "src/test/java/examples/spot/proxy/UnauthProxy.java.UnauthProxy", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/proxy/AuthProxy.java.AuthProxy.[]AuthProxy()", "name": "AuthProxy", "arg_nums": 0, "params": [], "return_type": "", "signature": "private AuthProxy()", "original_string": "    private AuthProxy() {\n\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/proxy/AuthProxy.java", "class_name": "AuthProxy", "class_uri": "src/test/java/examples/spot/proxy/AuthProxy.java.AuthProxy", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/proxy/AuthProxy.java.AuthProxy.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) throws IOException { \n        SpotClient client = new SpotClientImpl();\n\n        Proxy proxyConn = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(\"127.0.0.1\",  proxyPort));\n        Authenticator auth = new Authenticator() {\n            public Request authenticate(Route route, Response response) throws IOException {\n                // Reactive Authentication\n                if (response.request().header(\"Proxy-Authorization\") != null) {\n                    return null; // Give up, we've already failed to authenticate.\n                }\n              \n                String credential = Credentials.basic(\"username\", \"password\");\n                return response.request().newBuilder().header(\"Proxy-Authorization\", credential).build();\n               \n            }\n        };\n\n        ProxyAuth proxy = new ProxyAuth(proxyConn, auth);\n\n        client.setProxy(proxy);\n        System.out.println(client.createMarket().time());\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/proxy/AuthProxy.java", "class_name": "AuthProxy", "class_uri": "src/test/java/examples/spot/proxy/AuthProxy.java.AuthProxy", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/market/BookTicker.java.BookTicker.[]BookTicker()", "name": "BookTicker", "arg_nums": 0, "params": [], "return_type": "", "signature": "private BookTicker()", "original_string": "    private BookTicker() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/market/BookTicker.java", "class_name": "BookTicker", "class_uri": "src/test/java/examples/spot/market/BookTicker.java.BookTicker", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/market/BookTicker.java.BookTicker.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        String result = client.createMarket().bookTicker(parameters);\n        System.out.println(result);\n        parameters.clear();\n\n        ArrayList<String> symbols = new ArrayList<>();\n        symbols.add(\"BTCUSDT\");\n        symbols.add(\"BNBUSDT\");\n        parameters.put(\"symbols\", symbols);\n        result = client.createMarket().bookTicker(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/market/BookTicker.java", "class_name": "BookTicker", "class_uri": "src/test/java/examples/spot/market/BookTicker.java.BookTicker", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/market/UIKlines.java.UIKlines.[]UIKlines()", "name": "UIKlines", "arg_nums": 0, "params": [], "return_type": "", "signature": "private UIKlines()", "original_string": "    private UIKlines() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/market/UIKlines.java", "class_name": "UIKlines", "class_uri": "src/test/java/examples/spot/market/UIKlines.java.UIKlines", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/market/UIKlines.java.UIKlines.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"interval\", \"1m\");\n\n        String result = client.createMarket().uiKlines(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/market/UIKlines.java", "class_name": "UIKlines", "class_uri": "src/test/java/examples/spot/market/UIKlines.java.UIKlines", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/market/Trades.java.Trades.[]Trades()", "name": "Trades", "arg_nums": 0, "params": [], "return_type": "", "signature": "private Trades()", "original_string": "    private Trades() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/market/Trades.java", "class_name": "Trades", "class_uri": "src/test/java/examples/spot/market/Trades.java.Trades", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/market/Trades.java.Trades.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl();\n\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        String result = client.createMarket().trades(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/market/Trades.java", "class_name": "Trades", "class_uri": "src/test/java/examples/spot/market/Trades.java.Trades", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/market/Ticker24H.java.Ticker24H.[]Ticker24H()", "name": "Ticker24H", "arg_nums": 0, "params": [], "return_type": "", "signature": "private Ticker24H()", "original_string": "    private Ticker24H() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/market/Ticker24H.java", "class_name": "Ticker24H", "class_uri": "src/test/java/examples/spot/market/Ticker24H.java.Ticker24H", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/market/Ticker24H.java.Ticker24H.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"type\", \"MINI\");\n        String result = client.createMarket().ticker24H(parameters);\n        System.out.println(result);\n        parameters.clear();\n\n        ArrayList<String> symbols = new ArrayList<>();\n        symbols.add(\"BTCUSDT\");\n        symbols.add(\"BNBUSDT\");\n        parameters.put(\"symbols\", symbols);\n        result = client.createMarket().ticker24H(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/market/Ticker24H.java", "class_name": "Ticker24H", "class_uri": "src/test/java/examples/spot/market/Ticker24H.java.Ticker24H", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/market/HistoricalTrades.java.HistoricalTrades.[]HistoricalTrades()", "name": "HistoricalTrades", "arg_nums": 0, "params": [], "return_type": "", "signature": "private HistoricalTrades()", "original_string": "    private HistoricalTrades() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/market/HistoricalTrades.java", "class_name": "HistoricalTrades", "class_uri": "src/test/java/examples/spot/market/HistoricalTrades.java.HistoricalTrades", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/market/HistoricalTrades.java.HistoricalTrades.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n\n        parameters.put(\"symbol\", \"BTCUSDT\");\n        parameters.put(\"limit\", \"10\");\n        String result = client.createMarket().historicalTrades(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/market/HistoricalTrades.java", "class_name": "HistoricalTrades", "class_uri": "src/test/java/examples/spot/market/HistoricalTrades.java.HistoricalTrades", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/market/AveragePrice.java.AveragePrice.[]AveragePrice()", "name": "AveragePrice", "arg_nums": 0, "params": [], "return_type": "", "signature": "private AveragePrice()", "original_string": "    private AveragePrice() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/market/AveragePrice.java", "class_name": "AveragePrice", "class_uri": "src/test/java/examples/spot/market/AveragePrice.java.AveragePrice", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/market/AveragePrice.java.AveragePrice.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl();\n\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        String result = client.createMarket().averagePrice(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/market/AveragePrice.java", "class_name": "AveragePrice", "class_uri": "src/test/java/examples/spot/market/AveragePrice.java.AveragePrice", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/market/Depth.java.Depth.[]Depth()", "name": "Depth", "arg_nums": 0, "params": [], "return_type": "", "signature": "private Depth()", "original_string": "    private Depth() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/market/Depth.java", "class_name": "Depth", "class_uri": "src/test/java/examples/spot/market/Depth.java.Depth", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/market/Depth.java.Depth.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        String result = client.createMarket().depth(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/market/Depth.java", "class_name": "Depth", "class_uri": "src/test/java/examples/spot/market/Depth.java.Depth", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/market/Ping.java.Ping.[]Ping()", "name": "Ping", "arg_nums": 0, "params": [], "return_type": "", "signature": "private Ping()", "original_string": "    private Ping() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/market/Ping.java", "class_name": "Ping", "class_uri": "src/test/java/examples/spot/market/Ping.java.Ping", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/market/Ping.java.Ping.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMarket().ping();\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/market/Ping.java", "class_name": "Ping", "class_uri": "src/test/java/examples/spot/market/Ping.java.Ping", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/market/AggTrades.java.AggTrades.[]AggTrades()", "name": "AggTrades", "arg_nums": 0, "params": [], "return_type": "", "signature": "private AggTrades()", "original_string": "    private AggTrades() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/market/AggTrades.java", "class_name": "AggTrades", "class_uri": "src/test/java/examples/spot/market/AggTrades.java.AggTrades", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/market/AggTrades.java.AggTrades.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        String result = client.createMarket().aggTrades(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/market/AggTrades.java", "class_name": "AggTrades", "class_uri": "src/test/java/examples/spot/market/AggTrades.java.AggTrades", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/market/TradingDayTicker.java.TradingDayTicker.[]TradingDayTicker()", "name": "TradingDayTicker", "arg_nums": 0, "params": [], "return_type": "", "signature": "private TradingDayTicker()", "original_string": "    private TradingDayTicker() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/market/TradingDayTicker.java", "class_name": "TradingDayTicker", "class_uri": "src/test/java/examples/spot/market/TradingDayTicker.java.TradingDayTicker", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/market/TradingDayTicker.java.TradingDayTicker.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        Market market = client.createMarket();\n\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"type\", \"MINI\");\n        String result = market.tradingDayTicker(parameters);\n        System.out.println(result);\n        parameters.clear();\n\n        ArrayList<String> symbols = new ArrayList<>();\n        symbols.add(\"BTCUSDT\");\n        symbols.add(\"BNBUSDT\");\n        parameters.put(\"symbols\", symbols);\n        result = market.tradingDayTicker(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/market/TradingDayTicker.java", "class_name": "TradingDayTicker", "class_uri": "src/test/java/examples/spot/market/TradingDayTicker.java.TradingDayTicker", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/market/TickerSymbol.java.TickerSymbol.[]TickerSymbol()", "name": "TickerSymbol", "arg_nums": 0, "params": [], "return_type": "", "signature": "private TickerSymbol()", "original_string": "    private TickerSymbol() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/market/TickerSymbol.java", "class_name": "TickerSymbol", "class_uri": "src/test/java/examples/spot/market/TickerSymbol.java.TickerSymbol", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/market/TickerSymbol.java.TickerSymbol.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        String result = client.createMarket().tickerSymbol(parameters);\n        System.out.println(result);\n        parameters.clear();\n\n        ArrayList<String> symbols = new ArrayList<>();\n        symbols.add(\"BTCUSDT\");\n        symbols.add(\"BNBUSDT\");\n        parameters.put(\"symbols\", symbols);\n        result = client.createMarket().tickerSymbol(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/market/TickerSymbol.java", "class_name": "TickerSymbol", "class_uri": "src/test/java/examples/spot/market/TickerSymbol.java.TickerSymbol", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/market/Ticker.java.Ticker.[]Ticker()", "name": "Ticker", "arg_nums": 0, "params": [], "return_type": "", "signature": "private Ticker()", "original_string": "    private Ticker() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/market/Ticker.java", "class_name": "Ticker", "class_uri": "src/test/java/examples/spot/market/Ticker.java.Ticker", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/market/Ticker.java.Ticker.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        Market market = client.createMarket();\n\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"type\", \"MINI\");\n        String result = market.ticker(parameters);\n        System.out.println(result);\n        parameters.clear();\n\n        ArrayList<String> symbols = new ArrayList<>();\n        symbols.add(\"BTCUSDT\");\n        symbols.add(\"BNBUSDT\");\n        parameters.put(\"symbols\", symbols);\n        result = market.ticker(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/market/Ticker.java", "class_name": "Ticker", "class_uri": "src/test/java/examples/spot/market/Ticker.java.Ticker", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/market/ServerTime.java.ServerTime.[]ServerTime()", "name": "ServerTime", "arg_nums": 0, "params": [], "return_type": "", "signature": "private ServerTime()", "original_string": "    private ServerTime() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/market/ServerTime.java", "class_name": "ServerTime", "class_uri": "src/test/java/examples/spot/market/ServerTime.java.ServerTime", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/market/ServerTime.java.ServerTime.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n\n        SpotClient client = new SpotClientImpl();\n        String result = client.createMarket().time();\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/market/ServerTime.java", "class_name": "ServerTime", "class_uri": "src/test/java/examples/spot/market/ServerTime.java.ServerTime", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/market/Klines.java.Klines.[]Klines()", "name": "Klines", "arg_nums": 0, "params": [], "return_type": "", "signature": "private Klines()", "original_string": "    private Klines() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/market/Klines.java", "class_name": "Klines", "class_uri": "src/test/java/examples/spot/market/Klines.java.Klines", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/market/Klines.java.Klines.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"interval\", \"1m\");\n\n        String result = client.createMarket().klines(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/market/Klines.java", "class_name": "Klines", "class_uri": "src/test/java/examples/spot/market/Klines.java.Klines", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/market/ExchangeInfo.java.ExchangeInfo.[]ExchangeInfo()", "name": "ExchangeInfo", "arg_nums": 0, "params": [], "return_type": "", "signature": "private ExchangeInfo()", "original_string": "    private ExchangeInfo() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/market/ExchangeInfo.java", "class_name": "ExchangeInfo", "class_uri": "src/test/java/examples/spot/market/ExchangeInfo.java.ExchangeInfo", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/market/ExchangeInfo.java.ExchangeInfo.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        SpotClient client = new SpotClientImpl();\n        Market market = client.createMarket();\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        String result = market.exchangeInfo(parameters);\n        System.out.println(result);\n\n        parameters.put(\"symbol\", \"BTCUSDT\");\n        result = market.exchangeInfo(parameters);\n        System.out.println(result);\n        parameters.clear();\n\n        ArrayList<String> symbols = new ArrayList<>();\n        symbols.add(\"BTCUSDT\");\n        symbols.add(\"BNBUSDT\");\n        parameters.put(\"symbols\", symbols);\n        result = market.exchangeInfo(parameters);\n        System.out.println(result);\n        parameters.clear();\n\n        ArrayList<String> permissions = new ArrayList<>();\n        permissions.add(\"SPOT\");\n        permissions.add(\"MARGIN\");\n        parameters.put(\"permissions\", permissions);\n        result = market.exchangeInfo(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/market/ExchangeInfo.java", "class_name": "ExchangeInfo", "class_uri": "src/test/java/examples/spot/market/ExchangeInfo.java.ExchangeInfo", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/convert/AssetQuantityPrecision.java.AssetQuantityPrecision.[]AssetQuantityPrecision()", "name": "AssetQuantityPrecision", "arg_nums": 0, "params": [], "return_type": "", "signature": "private AssetQuantityPrecision()", "original_string": "    private AssetQuantityPrecision() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/convert/AssetQuantityPrecision.java", "class_name": "AssetQuantityPrecision", "class_uri": "src/test/java/examples/spot/convert/AssetQuantityPrecision.java.AssetQuantityPrecision", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/convert/AssetQuantityPrecision.java.AssetQuantityPrecision.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        \n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createConvert().assetQuantityPrecision(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/convert/AssetQuantityPrecision.java", "class_name": "AssetQuantityPrecision", "class_uri": "src/test/java/examples/spot/convert/AssetQuantityPrecision.java.AssetQuantityPrecision", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/convert/QuoteInquiry.java.QuoteInquiry.[]QuoteInquiry()", "name": "QuoteInquiry", "arg_nums": 0, "params": [], "return_type": "", "signature": "private QuoteInquiry()", "original_string": "    private QuoteInquiry() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/convert/QuoteInquiry.java", "class_name": "QuoteInquiry", "class_uri": "src/test/java/examples/spot/convert/QuoteInquiry.java.QuoteInquiry", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/convert/QuoteInquiry.java.QuoteInquiry.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        parameters.put(\"fromAsset\", \"BTC\");\n        parameters.put(\"toAsset\", \"USDT\");\n        parameters.put(\"fromAmount\", amount);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createConvert().quoteInquiry(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/convert/QuoteInquiry.java", "class_name": "QuoteInquiry", "class_uri": "src/test/java/examples/spot/convert/QuoteInquiry.java.QuoteInquiry", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/convert/TradeFlow.java.TradeFlow.[]TradeFlow()", "name": "TradeFlow", "arg_nums": 0, "params": [], "return_type": "", "signature": "private TradeFlow()", "original_string": "    private TradeFlow() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/convert/TradeFlow.java", "class_name": "TradeFlow", "class_uri": "src/test/java/examples/spot/convert/TradeFlow.java.TradeFlow", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/convert/TradeFlow.java.TradeFlow.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        parameters.put(\"startTime\", startTime);\n        parameters.put(\"endTime\", endTime);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createConvert().tradeFlow(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/convert/TradeFlow.java", "class_name": "TradeFlow", "class_uri": "src/test/java/examples/spot/convert/TradeFlow.java.TradeFlow", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/convert/AcceptQuote.java.AcceptQuote.[]AcceptQuote()", "name": "AcceptQuote", "arg_nums": 0, "params": [], "return_type": "", "signature": "private AcceptQuote()", "original_string": "    private AcceptQuote() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/convert/AcceptQuote.java", "class_name": "AcceptQuote", "class_uri": "src/test/java/examples/spot/convert/AcceptQuote.java.AcceptQuote", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/convert/AcceptQuote.java.AcceptQuote.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        parameters.put(\"quoteId\", \"12415572564\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createConvert().acceptQuote(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/convert/AcceptQuote.java", "class_name": "AcceptQuote", "class_uri": "src/test/java/examples/spot/convert/AcceptQuote.java.AcceptQuote", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/convert/OrderStatus.java.OrderStatus.[]OrderStatus()", "name": "OrderStatus", "arg_nums": 0, "params": [], "return_type": "", "signature": "private OrderStatus()", "original_string": "    private OrderStatus() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/convert/OrderStatus.java", "class_name": "OrderStatus", "class_uri": "src/test/java/examples/spot/convert/OrderStatus.java.OrderStatus", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/convert/OrderStatus.java.OrderStatus.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        parameters.put(\"quoteId\", \"12415572564\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createConvert().orderStatus(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/convert/OrderStatus.java", "class_name": "OrderStatus", "class_uri": "src/test/java/examples/spot/convert/OrderStatus.java.OrderStatus", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/convert/ExchangeInfo.java.ExchangeInfo.[]ExchangeInfo()", "name": "ExchangeInfo", "arg_nums": 0, "params": [], "return_type": "", "signature": "private ExchangeInfo()", "original_string": "    private ExchangeInfo() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/convert/ExchangeInfo.java", "class_name": "ExchangeInfo", "class_uri": "src/test/java/examples/spot/convert/ExchangeInfo.java.ExchangeInfo", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/convert/ExchangeInfo.java.ExchangeInfo.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        parameters.put(\"fromAsset\", \"BTC\");\n        parameters.put(\"toAsset\", \"USDT\");\n\n        SpotClient client = new SpotClientImpl();\n        String result = client.createConvert().exchangeInfo(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/convert/ExchangeInfo.java", "class_name": "ExchangeInfo", "class_uri": "src/test/java/examples/spot/convert/ExchangeInfo.java.ExchangeInfo", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/futures/FuturesTransferHistory.java.FuturesTransferHistory.[]FuturesTransferHistory()", "name": "FuturesTransferHistory", "arg_nums": 0, "params": [], "return_type": "", "signature": "private FuturesTransferHistory()", "original_string": "    private FuturesTransferHistory() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/futures/FuturesTransferHistory.java", "class_name": "FuturesTransferHistory", "class_uri": "src/test/java/examples/spot/futures/FuturesTransferHistory.java.FuturesTransferHistory", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/futures/FuturesTransferHistory.java.FuturesTransferHistory.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"asset\", \"USDT\");\n        parameters.put(\"startTime\", startTime);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createFutures().futuresTransferHistory(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/futures/FuturesTransferHistory.java", "class_name": "FuturesTransferHistory", "class_uri": "src/test/java/examples/spot/futures/FuturesTransferHistory.java.FuturesTransferHistory", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/futures/FuturesOrderBookHistory.java.FuturesOrderBookHistory.[]FuturesOrderBookHistory()", "name": "FuturesOrderBookHistory", "arg_nums": 0, "params": [], "return_type": "", "signature": "private FuturesOrderBookHistory()", "original_string": "    private FuturesOrderBookHistory() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/futures/FuturesOrderBookHistory.java", "class_name": "FuturesOrderBookHistory", "class_uri": "src/test/java/examples/spot/futures/FuturesOrderBookHistory.java.FuturesOrderBookHistory", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/futures/FuturesOrderBookHistory.java.FuturesOrderBookHistory.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BTCUSDT\");\n        parameters.put(\"dataType\", \"T_DEPTH\");\n        parameters.put(\"startTime\", startTime);\n        parameters.put(\"endTime\", endTime);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createFutures().futuresOrderBookHistory(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/futures/FuturesOrderBookHistory.java", "class_name": "FuturesOrderBookHistory", "class_uri": "src/test/java/examples/spot/futures/FuturesOrderBookHistory.java.FuturesOrderBookHistory", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/futures/FuturesTransfer.java.FuturesTransfer.[]FuturesTransfer()", "name": "FuturesTransfer", "arg_nums": 0, "params": [], "return_type": "", "signature": "private FuturesTransfer()", "original_string": "    private FuturesTransfer() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/futures/FuturesTransfer.java", "class_name": "FuturesTransfer", "class_uri": "src/test/java/examples/spot/futures/FuturesTransfer.java.FuturesTransfer", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/futures/FuturesTransfer.java.FuturesTransfer.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"asset\", \"USDT\");\n        parameters.put(\"amount\", amount);\n        parameters.put(\"type\", type);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createFutures().futuresTransfer(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/futures/FuturesTransfer.java", "class_name": "FuturesTransfer", "class_uri": "src/test/java/examples/spot/futures/FuturesTransfer.java.FuturesTransfer", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/giftcard/RedeemCode.java.RedeemCode.[]RedeemCode()", "name": "RedeemCode", "arg_nums": 0, "params": [], "return_type": "", "signature": "private RedeemCode()", "original_string": "    private RedeemCode() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/giftcard/RedeemCode.java", "class_name": "RedeemCode", "class_uri": "src/test/java/examples/spot/giftcard/RedeemCode.java.RedeemCode", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/giftcard/RedeemCode.java.RedeemCode.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"code\", \"\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createGiftCard().redeemCode(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/giftcard/RedeemCode.java", "class_name": "RedeemCode", "class_uri": "src/test/java/examples/spot/giftcard/RedeemCode.java.RedeemCode", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/giftcard/TokensLimit.java.TokensLimit.[]TokensLimit()", "name": "TokensLimit", "arg_nums": 0, "params": [], "return_type": "", "signature": "private TokensLimit()", "original_string": "    private TokensLimit() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/giftcard/TokensLimit.java", "class_name": "TokensLimit", "class_uri": "src/test/java/examples/spot/giftcard/TokensLimit.java.TokensLimit", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/giftcard/TokensLimit.java.TokensLimit.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"baseToken\", \"BUSD\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createGiftCard().tokensLimit(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/giftcard/TokensLimit.java", "class_name": "TokensLimit", "class_uri": "src/test/java/examples/spot/giftcard/TokensLimit.java.TokensLimit", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/giftcard/Verify.java.Verify.[]Verify()", "name": "Verify", "arg_nums": 0, "params": [], "return_type": "", "signature": "private Verify()", "original_string": "    private Verify() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/giftcard/Verify.java", "class_name": "Verify", "class_uri": "src/test/java/examples/spot/giftcard/Verify.java.Verify", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/giftcard/Verify.java.Verify.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"referenceNo\", \"\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createGiftCard().verify(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/giftcard/Verify.java", "class_name": "Verify", "class_uri": "src/test/java/examples/spot/giftcard/Verify.java.Verify", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/giftcard/CreateDualTokensCode.java.CreateDualTokensCode.[]CreateDualTokensCode()", "name": "CreateDualTokensCode", "arg_nums": 0, "params": [], "return_type": "", "signature": "private CreateDualTokensCode()", "original_string": "    private CreateDualTokensCode() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/giftcard/CreateDualTokensCode.java", "class_name": "CreateDualTokensCode", "class_uri": "src/test/java/examples/spot/giftcard/CreateDualTokensCode.java.CreateDualTokensCode", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/giftcard/CreateDualTokensCode.java.CreateDualTokensCode.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"baseToken\", \"BUSD\");\n        parameters.put(\"faceToken\", \"BNB\");\n        parameters.put(\"baseTokenAmount\", baseTokenAmount);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createGiftCard().createDualTokensCode(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/giftcard/CreateDualTokensCode.java", "class_name": "CreateDualTokensCode", "class_uri": "src/test/java/examples/spot/giftcard/CreateDualTokensCode.java.CreateDualTokensCode", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/giftcard/RsaPublicKey.java.RsaPublicKey.[]RsaPublicKey()", "name": "RsaPublicKey", "arg_nums": 0, "params": [], "return_type": "", "signature": "private RsaPublicKey()", "original_string": "    private RsaPublicKey() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/giftcard/RsaPublicKey.java", "class_name": "RsaPublicKey", "class_uri": "src/test/java/examples/spot/giftcard/RsaPublicKey.java.RsaPublicKey", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/giftcard/RsaPublicKey.java.RsaPublicKey.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createGiftCard().rsaPublicKey(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/giftcard/RsaPublicKey.java", "class_name": "RsaPublicKey", "class_uri": "src/test/java/examples/spot/giftcard/RsaPublicKey.java.RsaPublicKey", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/giftcard/CreateCode.java.CreateCode.[]CreateCode()", "name": "CreateCode", "arg_nums": 0, "params": [], "return_type": "", "signature": "private CreateCode()", "original_string": "    private CreateCode() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/giftcard/CreateCode.java", "class_name": "CreateCode", "class_uri": "src/test/java/examples/spot/giftcard/CreateCode.java.CreateCode", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/giftcard/CreateCode.java.CreateCode.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"token\", \"\");\n        parameters.put(\"amount\", amount);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createGiftCard().createCode(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/giftcard/CreateCode.java", "class_name": "CreateCode", "class_uri": "src/test/java/examples/spot/giftcard/CreateCode.java.CreateCode", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/simpleearn/FlexibleRedemptionRecord.java.FlexibleRedemptionRecord.[]FlexibleRedemptionRecord()", "name": "FlexibleRedemptionRecord", "arg_nums": 0, "params": [], "return_type": "", "signature": "private FlexibleRedemptionRecord()", "original_string": "    private FlexibleRedemptionRecord() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/simpleearn/FlexibleRedemptionRecord.java", "class_name": "FlexibleRedemptionRecord", "class_uri": "src/test/java/examples/spot/simpleearn/FlexibleRedemptionRecord.java.FlexibleRedemptionRecord", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/simpleearn/FlexibleRedemptionRecord.java.FlexibleRedemptionRecord.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSimpleEarn().flexibleRedemptionRecord(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/simpleearn/FlexibleRedemptionRecord.java", "class_name": "FlexibleRedemptionRecord", "class_uri": "src/test/java/examples/spot/simpleearn/FlexibleRedemptionRecord.java.FlexibleRedemptionRecord", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/simpleearn/FlexibleProductPosition.java.FlexibleProductPosition.[]FlexibleProductPosition()", "name": "FlexibleProductPosition", "arg_nums": 0, "params": [], "return_type": "", "signature": "private FlexibleProductPosition()", "original_string": "    private FlexibleProductPosition() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/simpleearn/FlexibleProductPosition.java", "class_name": "FlexibleProductPosition", "class_uri": "src/test/java/examples/spot/simpleearn/FlexibleProductPosition.java.FlexibleProductPosition", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/simpleearn/FlexibleProductPosition.java.FlexibleProductPosition.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSimpleEarn().flexibleProductPosition(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/simpleearn/FlexibleProductPosition.java", "class_name": "FlexibleProductPosition", "class_uri": "src/test/java/examples/spot/simpleearn/FlexibleProductPosition.java.FlexibleProductPosition", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/simpleearn/LockedSubscriptionPreview.java.LockedSubscriptionPreview.[]LockedSubscriptionPreview()", "name": "LockedSubscriptionPreview", "arg_nums": 0, "params": [], "return_type": "", "signature": "private LockedSubscriptionPreview()", "original_string": "    private LockedSubscriptionPreview() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/simpleearn/LockedSubscriptionPreview.java", "class_name": "LockedSubscriptionPreview", "class_uri": "src/test/java/examples/spot/simpleearn/LockedSubscriptionPreview.java.LockedSubscriptionPreview", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/simpleearn/LockedSubscriptionPreview.java.LockedSubscriptionPreview.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"projectId\", \"USDT001\");\n        parameters.put(\"amount\", amount);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSimpleEarn().lockedSubscriptionPreview(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/simpleearn/LockedSubscriptionPreview.java", "class_name": "LockedSubscriptionPreview", "class_uri": "src/test/java/examples/spot/simpleearn/LockedSubscriptionPreview.java.LockedSubscriptionPreview", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/simpleearn/RateHistory.java.RateHistory.[]RateHistory()", "name": "RateHistory", "arg_nums": 0, "params": [], "return_type": "", "signature": "private RateHistory()", "original_string": "    private RateHistory() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/simpleearn/RateHistory.java", "class_name": "RateHistory", "class_uri": "src/test/java/examples/spot/simpleearn/RateHistory.java.RateHistory", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/simpleearn/RateHistory.java.RateHistory.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"productId\", \"40607\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSimpleEarn().rateHistory(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/simpleearn/RateHistory.java", "class_name": "RateHistory", "class_uri": "src/test/java/examples/spot/simpleearn/RateHistory.java.RateHistory", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/simpleearn/RedeemFlexibleProduct.java.RedeemFlexibleProduct.[]RedeemFlexibleProduct()", "name": "RedeemFlexibleProduct", "arg_nums": 0, "params": [], "return_type": "", "signature": "private RedeemFlexibleProduct()", "original_string": "    private RedeemFlexibleProduct() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/simpleearn/RedeemFlexibleProduct.java", "class_name": "RedeemFlexibleProduct", "class_uri": "src/test/java/examples/spot/simpleearn/RedeemFlexibleProduct.java.RedeemFlexibleProduct", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/simpleearn/RedeemFlexibleProduct.java.RedeemFlexibleProduct.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"productId\", \"40604\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSimpleEarn().redeemFlexibleProduct(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/simpleearn/RedeemFlexibleProduct.java", "class_name": "RedeemFlexibleProduct", "class_uri": "src/test/java/examples/spot/simpleearn/RedeemFlexibleProduct.java.RedeemFlexibleProduct", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/simpleearn/LockedSubscriptionRecord.java.LockedSubscriptionRecord.[]LockedSubscriptionRecord()", "name": "LockedSubscriptionRecord", "arg_nums": 0, "params": [], "return_type": "", "signature": "private LockedSubscriptionRecord()", "original_string": "    private LockedSubscriptionRecord() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/simpleearn/LockedSubscriptionRecord.java", "class_name": "LockedSubscriptionRecord", "class_uri": "src/test/java/examples/spot/simpleearn/LockedSubscriptionRecord.java.LockedSubscriptionRecord", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/simpleearn/LockedSubscriptionRecord.java.LockedSubscriptionRecord.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSimpleEarn().lockedSubscriptionRecord(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/simpleearn/LockedSubscriptionRecord.java", "class_name": "LockedSubscriptionRecord", "class_uri": "src/test/java/examples/spot/simpleearn/LockedSubscriptionRecord.java.LockedSubscriptionRecord", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/simpleearn/CollateralRecord.java.CollateralRecord.[]CollateralRecord()", "name": "CollateralRecord", "arg_nums": 0, "params": [], "return_type": "", "signature": "private CollateralRecord()", "original_string": "    private CollateralRecord() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/simpleearn/CollateralRecord.java", "class_name": "CollateralRecord", "class_uri": "src/test/java/examples/spot/simpleearn/CollateralRecord.java.CollateralRecord", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/simpleearn/CollateralRecord.java.CollateralRecord.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSimpleEarn().collateralRecord(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/simpleearn/CollateralRecord.java", "class_name": "CollateralRecord", "class_uri": "src/test/java/examples/spot/simpleearn/CollateralRecord.java.CollateralRecord", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/simpleearn/FlexibleSubscriptionRecord.java.FlexibleSubscriptionRecord.[]FlexibleSubscriptionRecord()", "name": "FlexibleSubscriptionRecord", "arg_nums": 0, "params": [], "return_type": "", "signature": "private FlexibleSubscriptionRecord()", "original_string": "    private FlexibleSubscriptionRecord() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/simpleearn/FlexibleSubscriptionRecord.java", "class_name": "FlexibleSubscriptionRecord", "class_uri": "src/test/java/examples/spot/simpleearn/FlexibleSubscriptionRecord.java.FlexibleSubscriptionRecord", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/simpleearn/FlexibleSubscriptionRecord.java.FlexibleSubscriptionRecord.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSimpleEarn().flexibleSubscriptionRecord(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/simpleearn/FlexibleSubscriptionRecord.java", "class_name": "FlexibleSubscriptionRecord", "class_uri": "src/test/java/examples/spot/simpleearn/FlexibleSubscriptionRecord.java.FlexibleSubscriptionRecord", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/simpleearn/FlexibleSubscriptionPreview.java.FlexibleSubscriptionPreview.[]FlexibleSubscriptionPreview()", "name": "FlexibleSubscriptionPreview", "arg_nums": 0, "params": [], "return_type": "", "signature": "private FlexibleSubscriptionPreview()", "original_string": "    private FlexibleSubscriptionPreview() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/simpleearn/FlexibleSubscriptionPreview.java", "class_name": "FlexibleSubscriptionPreview", "class_uri": "src/test/java/examples/spot/simpleearn/FlexibleSubscriptionPreview.java.FlexibleSubscriptionPreview", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/simpleearn/FlexibleSubscriptionPreview.java.FlexibleSubscriptionPreview.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"productId\", \"40607\");\n        parameters.put(\"amount\", amount);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSimpleEarn().flexibleSubscriptionPreview(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/simpleearn/FlexibleSubscriptionPreview.java", "class_name": "FlexibleSubscriptionPreview", "class_uri": "src/test/java/examples/spot/simpleearn/FlexibleSubscriptionPreview.java.FlexibleSubscriptionPreview", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/simpleearn/LockedRewardsHistory.java.LockedRewardsHistory.[]LockedRewardsHistory()", "name": "LockedRewardsHistory", "arg_nums": 0, "params": [], "return_type": "", "signature": "private LockedRewardsHistory()", "original_string": "    private LockedRewardsHistory() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/simpleearn/LockedRewardsHistory.java", "class_name": "LockedRewardsHistory", "class_uri": "src/test/java/examples/spot/simpleearn/LockedRewardsHistory.java.LockedRewardsHistory", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/simpleearn/LockedRewardsHistory.java.LockedRewardsHistory.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSimpleEarn().lockedRewardsHistory(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/simpleearn/LockedRewardsHistory.java", "class_name": "LockedRewardsHistory", "class_uri": "src/test/java/examples/spot/simpleearn/LockedRewardsHistory.java.LockedRewardsHistory", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/simpleearn/LockedRedemptionRecord.java.LockedRedemptionRecord.[]LockedRedemptionRecord()", "name": "LockedRedemptionRecord", "arg_nums": 0, "params": [], "return_type": "", "signature": "private LockedRedemptionRecord()", "original_string": "    private LockedRedemptionRecord() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/simpleearn/LockedRedemptionRecord.java", "class_name": "LockedRedemptionRecord", "class_uri": "src/test/java/examples/spot/simpleearn/LockedRedemptionRecord.java.LockedRedemptionRecord", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/simpleearn/LockedRedemptionRecord.java.LockedRedemptionRecord.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSimpleEarn().lockedRedemptionRecord(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/simpleearn/LockedRedemptionRecord.java", "class_name": "LockedRedemptionRecord", "class_uri": "src/test/java/examples/spot/simpleearn/LockedRedemptionRecord.java.LockedRedemptionRecord", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/simpleearn/LockedProductPosition.java.LockedProductPosition.[]LockedProductPosition()", "name": "LockedProductPosition", "arg_nums": 0, "params": [], "return_type": "", "signature": "private LockedProductPosition()", "original_string": "    private LockedProductPosition() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/simpleearn/LockedProductPosition.java", "class_name": "LockedProductPosition", "class_uri": "src/test/java/examples/spot/simpleearn/LockedProductPosition.java.LockedProductPosition", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/simpleearn/LockedProductPosition.java.LockedProductPosition.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSimpleEarn().lockedProductPosition(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/simpleearn/LockedProductPosition.java", "class_name": "LockedProductPosition", "class_uri": "src/test/java/examples/spot/simpleearn/LockedProductPosition.java.LockedProductPosition", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/simpleearn/SimpleAccount.java.SimpleAccount.[]SimpleAccount()", "name": "SimpleAccount", "arg_nums": 0, "params": [], "return_type": "", "signature": "private SimpleAccount()", "original_string": "    private SimpleAccount() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/simpleearn/SimpleAccount.java", "class_name": "SimpleAccount", "class_uri": "src/test/java/examples/spot/simpleearn/SimpleAccount.java.SimpleAccount", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/simpleearn/SimpleAccount.java.SimpleAccount.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSimpleEarn().simpleAccount(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/simpleearn/SimpleAccount.java", "class_name": "SimpleAccount", "class_uri": "src/test/java/examples/spot/simpleearn/SimpleAccount.java.SimpleAccount", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/simpleearn/SubscribeLockedProduct.java.SubscribeLockedProduct.[]SubscribeLockedProduct()", "name": "SubscribeLockedProduct", "arg_nums": 0, "params": [], "return_type": "", "signature": "private SubscribeLockedProduct()", "original_string": "    private SubscribeLockedProduct() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/simpleearn/SubscribeLockedProduct.java", "class_name": "SubscribeLockedProduct", "class_uri": "src/test/java/examples/spot/simpleearn/SubscribeLockedProduct.java.SubscribeLockedProduct", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/simpleearn/SubscribeLockedProduct.java.SubscribeLockedProduct.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"projectId\", \"40607\");\n        parameters.put(\"amount\", amount);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSimpleEarn().subscribeLockedProduct(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/simpleearn/SubscribeLockedProduct.java", "class_name": "SubscribeLockedProduct", "class_uri": "src/test/java/examples/spot/simpleearn/SubscribeLockedProduct.java.SubscribeLockedProduct", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/simpleearn/SetFlexibleAutoSubscribe.java.SetFlexibleAutoSubscribe.[]SetFlexibleAutoSubscribe()", "name": "SetFlexibleAutoSubscribe", "arg_nums": 0, "params": [], "return_type": "", "signature": "private SetFlexibleAutoSubscribe()", "original_string": "    private SetFlexibleAutoSubscribe() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/simpleearn/SetFlexibleAutoSubscribe.java", "class_name": "SetFlexibleAutoSubscribe", "class_uri": "src/test/java/examples/spot/simpleearn/SetFlexibleAutoSubscribe.java.SetFlexibleAutoSubscribe", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/simpleearn/SetFlexibleAutoSubscribe.java.SetFlexibleAutoSubscribe.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"productId\", \"40607\");\n        parameters.put(\"autoSubscribe\", true);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSimpleEarn().setFlexibleAutoSubscribe(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/simpleearn/SetFlexibleAutoSubscribe.java", "class_name": "SetFlexibleAutoSubscribe", "class_uri": "src/test/java/examples/spot/simpleearn/SetFlexibleAutoSubscribe.java.SetFlexibleAutoSubscribe", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/simpleearn/LockedPersonalLeftQuota.java.LockedPersonalLeftQuota.[]LockedPersonalLeftQuota()", "name": "LockedPersonalLeftQuota", "arg_nums": 0, "params": [], "return_type": "", "signature": "private LockedPersonalLeftQuota()", "original_string": "    private LockedPersonalLeftQuota() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/simpleearn/LockedPersonalLeftQuota.java", "class_name": "LockedPersonalLeftQuota", "class_uri": "src/test/java/examples/spot/simpleearn/LockedPersonalLeftQuota.java.LockedPersonalLeftQuota", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/simpleearn/LockedPersonalLeftQuota.java.LockedPersonalLeftQuota.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"projectId\", \"USDT001\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSimpleEarn().lockedPersonalLeftQuota(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/simpleearn/LockedPersonalLeftQuota.java", "class_name": "LockedPersonalLeftQuota", "class_uri": "src/test/java/examples/spot/simpleearn/LockedPersonalLeftQuota.java.LockedPersonalLeftQuota", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/simpleearn/FlexibleProductList.java.FlexibleProductList.[]FlexibleProductList()", "name": "FlexibleProductList", "arg_nums": 0, "params": [], "return_type": "", "signature": "private FlexibleProductList()", "original_string": "    private FlexibleProductList() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/simpleearn/FlexibleProductList.java", "class_name": "FlexibleProductList", "class_uri": "src/test/java/examples/spot/simpleearn/FlexibleProductList.java.FlexibleProductList", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/simpleearn/FlexibleProductList.java.FlexibleProductList.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSimpleEarn().flexibleProductList(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/simpleearn/FlexibleProductList.java", "class_name": "FlexibleProductList", "class_uri": "src/test/java/examples/spot/simpleearn/FlexibleProductList.java.FlexibleProductList", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/simpleearn/FlexibleRewardsHistory.java.FlexibleRewardsHistory.[]FlexibleRewardsHistory()", "name": "FlexibleRewardsHistory", "arg_nums": 0, "params": [], "return_type": "", "signature": "private FlexibleRewardsHistory()", "original_string": "    private FlexibleRewardsHistory() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/simpleearn/FlexibleRewardsHistory.java", "class_name": "FlexibleRewardsHistory", "class_uri": "src/test/java/examples/spot/simpleearn/FlexibleRewardsHistory.java.FlexibleRewardsHistory", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/simpleearn/FlexibleRewardsHistory.java.FlexibleRewardsHistory.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"type\", \"BONUS\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSimpleEarn().flexibleRewardsHistory(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/simpleearn/FlexibleRewardsHistory.java", "class_name": "FlexibleRewardsHistory", "class_uri": "src/test/java/examples/spot/simpleearn/FlexibleRewardsHistory.java.FlexibleRewardsHistory", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/simpleearn/FlexiblePersonalLeftQuota.java.FlexiblePersonalLeftQuota.[]FlexiblePersonalLeftQuota()", "name": "FlexiblePersonalLeftQuota", "arg_nums": 0, "params": [], "return_type": "", "signature": "private FlexiblePersonalLeftQuota()", "original_string": "    private FlexiblePersonalLeftQuota() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/simpleearn/FlexiblePersonalLeftQuota.java", "class_name": "FlexiblePersonalLeftQuota", "class_uri": "src/test/java/examples/spot/simpleearn/FlexiblePersonalLeftQuota.java.FlexiblePersonalLeftQuota", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/simpleearn/FlexiblePersonalLeftQuota.java.FlexiblePersonalLeftQuota.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"productId\", \"40607\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSimpleEarn().flexiblePersonalLeftQuota(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/simpleearn/FlexiblePersonalLeftQuota.java", "class_name": "FlexiblePersonalLeftQuota", "class_uri": "src/test/java/examples/spot/simpleearn/FlexiblePersonalLeftQuota.java.FlexiblePersonalLeftQuota", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/simpleearn/SubscribeFlexibleProduct.java.SubscribeFlexibleProduct.[]SubscribeFlexibleProduct()", "name": "SubscribeFlexibleProduct", "arg_nums": 0, "params": [], "return_type": "", "signature": "private SubscribeFlexibleProduct()", "original_string": "    private SubscribeFlexibleProduct() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/simpleearn/SubscribeFlexibleProduct.java", "class_name": "SubscribeFlexibleProduct", "class_uri": "src/test/java/examples/spot/simpleearn/SubscribeFlexibleProduct.java.SubscribeFlexibleProduct", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/simpleearn/SubscribeFlexibleProduct.java.SubscribeFlexibleProduct.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"productId\", \"40607\");\n        parameters.put(\"amount\", amount);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSimpleEarn().subscribeFlexibleProduct(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/simpleearn/SubscribeFlexibleProduct.java", "class_name": "SubscribeFlexibleProduct", "class_uri": "src/test/java/examples/spot/simpleearn/SubscribeFlexibleProduct.java.SubscribeFlexibleProduct", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/simpleearn/LockedProductList.java.LockedProductList.[]LockedProductList()", "name": "LockedProductList", "arg_nums": 0, "params": [], "return_type": "", "signature": "private LockedProductList()", "original_string": "    private LockedProductList() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/simpleearn/LockedProductList.java", "class_name": "LockedProductList", "class_uri": "src/test/java/examples/spot/simpleearn/LockedProductList.java.LockedProductList", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/simpleearn/LockedProductList.java.LockedProductList.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSimpleEarn().lockedProductList(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/simpleearn/LockedProductList.java", "class_name": "LockedProductList", "class_uri": "src/test/java/examples/spot/simpleearn/LockedProductList.java.LockedProductList", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/simpleearn/RedeemLockedProduct.java.RedeemLockedProduct.[]RedeemLockedProduct()", "name": "RedeemLockedProduct", "arg_nums": 0, "params": [], "return_type": "", "signature": "private RedeemLockedProduct()", "original_string": "    private RedeemLockedProduct() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/simpleearn/RedeemLockedProduct.java", "class_name": "RedeemLockedProduct", "class_uri": "src/test/java/examples/spot/simpleearn/RedeemLockedProduct.java.RedeemLockedProduct", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/simpleearn/RedeemLockedProduct.java.RedeemLockedProduct.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"positionId\", \"40604\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSimpleEarn().redeemLockedProduct(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/simpleearn/RedeemLockedProduct.java", "class_name": "RedeemLockedProduct", "class_uri": "src/test/java/examples/spot/simpleearn/RedeemLockedProduct.java.RedeemLockedProduct", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/simpleearn/SetLockedAutoSubscribe.java.SetLockedAutoSubscribe.[]SetLockedAutoSubscribe()", "name": "SetLockedAutoSubscribe", "arg_nums": 0, "params": [], "return_type": "", "signature": "private SetLockedAutoSubscribe()", "original_string": "    private SetLockedAutoSubscribe() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/simpleearn/SetLockedAutoSubscribe.java", "class_name": "SetLockedAutoSubscribe", "class_uri": "src/test/java/examples/spot/simpleearn/SetLockedAutoSubscribe.java.SetLockedAutoSubscribe", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/simpleearn/SetLockedAutoSubscribe.java.SetLockedAutoSubscribe.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"positionId\", \"BUSD001\");\n        parameters.put(\"autoSubscribe\", true);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSimpleEarn().setLockedAutoSubscribe(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/simpleearn/SetLockedAutoSubscribe.java", "class_name": "SetLockedAutoSubscribe", "class_uri": "src/test/java/examples/spot/simpleearn/SetLockedAutoSubscribe.java.SetLockedAutoSubscribe", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/c2c/ListUserOrderHistory.java.ListUserOrderHistory.[]ListUserOrderHistory()", "name": "ListUserOrderHistory", "arg_nums": 0, "params": [], "return_type": "", "signature": "private ListUserOrderHistory()", "original_string": "    private ListUserOrderHistory() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/c2c/ListUserOrderHistory.java", "class_name": "ListUserOrderHistory", "class_uri": "src/test/java/examples/spot/c2c/ListUserOrderHistory.java.ListUserOrderHistory", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/c2c/ListUserOrderHistory.java.ListUserOrderHistory.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"tradeType\", \"BUY\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createC2C().listUserOrderHistory(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/c2c/ListUserOrderHistory.java", "class_name": "ListUserOrderHistory", "class_uri": "src/test/java/examples/spot/c2c/ListUserOrderHistory.java.ListUserOrderHistory", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/blvt/BlvtInfo.java.BlvtInfo.[]BlvtInfo()", "name": "BlvtInfo", "arg_nums": 0, "params": [], "return_type": "", "signature": "private BlvtInfo()", "original_string": "    private BlvtInfo() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/blvt/BlvtInfo.java", "class_name": "BlvtInfo", "class_uri": "src/test/java/examples/spot/blvt/BlvtInfo.java.BlvtInfo", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/blvt/BlvtInfo.java.BlvtInfo.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createBlvt().blvtInfo(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/blvt/BlvtInfo.java", "class_name": "BlvtInfo", "class_uri": "src/test/java/examples/spot/blvt/BlvtInfo.java.BlvtInfo", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/blvt/Subscribe.java.Subscribe.[]Subscribe()", "name": "Subscribe", "arg_nums": 0, "params": [], "return_type": "", "signature": "private Subscribe()", "original_string": "    private Subscribe() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/blvt/Subscribe.java", "class_name": "Subscribe", "class_uri": "src/test/java/examples/spot/blvt/Subscribe.java.Subscribe", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/blvt/Subscribe.java.Subscribe.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"tokenName\", \"BTCDOWN\");\n        parameters.put(\"cost\", cost);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createBlvt().subscribe(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/blvt/Subscribe.java", "class_name": "Subscribe", "class_uri": "src/test/java/examples/spot/blvt/Subscribe.java.Subscribe", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/blvt/UserLimit.java.UserLimit.[]UserLimit()", "name": "UserLimit", "arg_nums": 0, "params": [], "return_type": "", "signature": "private UserLimit()", "original_string": "    private UserLimit() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/blvt/UserLimit.java", "class_name": "UserLimit", "class_uri": "src/test/java/examples/spot/blvt/UserLimit.java.UserLimit", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/blvt/UserLimit.java.UserLimit.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createBlvt().userLimit(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/blvt/UserLimit.java", "class_name": "UserLimit", "class_uri": "src/test/java/examples/spot/blvt/UserLimit.java.UserLimit", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/blvt/SubscriptionRecord.java.SubscriptionRecord.[]SubscriptionRecord()", "name": "SubscriptionRecord", "arg_nums": 0, "params": [], "return_type": "", "signature": "private SubscriptionRecord()", "original_string": "    private SubscriptionRecord() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/blvt/SubscriptionRecord.java", "class_name": "SubscriptionRecord", "class_uri": "src/test/java/examples/spot/blvt/SubscriptionRecord.java.SubscriptionRecord", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/blvt/SubscriptionRecord.java.SubscriptionRecord.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createBlvt().subscriptionRecord(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/blvt/SubscriptionRecord.java", "class_name": "SubscriptionRecord", "class_uri": "src/test/java/examples/spot/blvt/SubscriptionRecord.java.SubscriptionRecord", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/blvt/Redeem.java.Redeem.[]Redeem()", "name": "Redeem", "arg_nums": 0, "params": [], "return_type": "", "signature": "private Redeem()", "original_string": "    private Redeem() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/blvt/Redeem.java", "class_name": "Redeem", "class_uri": "src/test/java/examples/spot/blvt/Redeem.java.Redeem", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/blvt/Redeem.java.Redeem.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"tokenName\", \"BTCDOWN\");\n        parameters.put(\"amount\", amount);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createBlvt().redeem(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/blvt/Redeem.java", "class_name": "Redeem", "class_uri": "src/test/java/examples/spot/blvt/Redeem.java.Redeem", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/blvt/RedeemRecord.java.RedeemRecord.[]RedeemRecord()", "name": "RedeemRecord", "arg_nums": 0, "params": [], "return_type": "", "signature": "private RedeemRecord()", "original_string": "    private RedeemRecord() {\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/blvt/RedeemRecord.java", "class_name": "RedeemRecord", "class_uri": "src/test/java/examples/spot/blvt/RedeemRecord.java.RedeemRecord", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/spot/blvt/RedeemRecord.java.RedeemRecord.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createBlvt().redeemRecord(parameters);\n        System.out.println(result);\n    }", "default_arguments": null, "file": "src/test/java/examples/spot/blvt/RedeemRecord.java", "class_name": "RedeemRecord", "class_uri": "src/test/java/examples/spot/blvt/RedeemRecord.java.RedeemRecord", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketstream/BookTicker.java.BookTicker.[]BookTicker()", "name": "BookTicker", "arg_nums": 0, "params": [], "return_type": "", "signature": "private BookTicker()", "original_string": "    private BookTicker() {\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketstream/BookTicker.java", "class_name": "BookTicker", "class_uri": "src/test/java/examples/websocketstream/BookTicker.java.BookTicker", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketstream/BookTicker.java.BookTicker.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        WebSocketStreamClient client = new WebSocketStreamClientImpl();\n        client.bookTicker(\"btcusdt\", ((event) -> {\n            System.out.println(event);\n            client.closeAllConnections();\n        }));\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketstream/BookTicker.java", "class_name": "BookTicker", "class_uri": "src/test/java/examples/websocketstream/BookTicker.java.BookTicker", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketstream/AllRollingWindowTicker.java.AllRollingWindowTicker.[]AllRollingWindowTicker()", "name": "AllRollingWindowTicker", "arg_nums": 0, "params": [], "return_type": "", "signature": "private AllRollingWindowTicker()", "original_string": "    private AllRollingWindowTicker() {\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketstream/AllRollingWindowTicker.java", "class_name": "AllRollingWindowTicker", "class_uri": "src/test/java/examples/websocketstream/AllRollingWindowTicker.java.AllRollingWindowTicker", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketstream/AllRollingWindowTicker.java.AllRollingWindowTicker.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        WebSocketStreamClient client = new WebSocketStreamClientImpl();\n        client.allRollingWindowTicker(\"1h\", ((event) -> {\n            System.out.println(event);\n            client.closeAllConnections();\n        }));\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketstream/AllRollingWindowTicker.java", "class_name": "AllRollingWindowTicker", "class_uri": "src/test/java/examples/websocketstream/AllRollingWindowTicker.java.AllRollingWindowTicker", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketstream/SymbolTicker.java.SymbolTicker.[]SymbolTicker()", "name": "SymbolTicker", "arg_nums": 0, "params": [], "return_type": "", "signature": "private SymbolTicker()", "original_string": "    private SymbolTicker() {\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketstream/SymbolTicker.java", "class_name": "SymbolTicker", "class_uri": "src/test/java/examples/websocketstream/SymbolTicker.java.SymbolTicker", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketstream/SymbolTicker.java.SymbolTicker.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        WebSocketStreamClient client = new WebSocketStreamClientImpl();\n        client.symbolTicker(\"btcusdt\", ((event) -> {\n            System.out.println(event);\n            client.closeAllConnections();\n        }));\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketstream/SymbolTicker.java", "class_name": "SymbolTicker", "class_uri": "src/test/java/examples/websocketstream/SymbolTicker.java.SymbolTicker", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketstream/MiniTickerStream.java.MiniTickerStream.[]MiniTickerStream()", "name": "MiniTickerStream", "arg_nums": 0, "params": [], "return_type": "", "signature": "private MiniTickerStream()", "original_string": "    private MiniTickerStream() {\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketstream/MiniTickerStream.java", "class_name": "MiniTickerStream", "class_uri": "src/test/java/examples/websocketstream/MiniTickerStream.java.MiniTickerStream", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketstream/MiniTickerStream.java.MiniTickerStream.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        WebSocketStreamClient client = new WebSocketStreamClientImpl();\n        client.miniTickerStream(\"btcusdt\", ((event) -> {\n            System.out.println(event);\n            client.closeAllConnections();\n        }));\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketstream/MiniTickerStream.java", "class_name": "MiniTickerStream", "class_uri": "src/test/java/examples/websocketstream/MiniTickerStream.java.MiniTickerStream", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketstream/UserStream.java.UserStream.[]UserStream()", "name": "UserStream", "arg_nums": 0, "params": [], "return_type": "", "signature": "private UserStream()", "original_string": "    private UserStream() {\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketstream/UserStream.java", "class_name": "UserStream", "class_uri": "src/test/java/examples/websocketstream/UserStream.java.UserStream", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketstream/UserStream.java.UserStream.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        WebSocketStreamClient wsClient = new WebSocketStreamClientImpl(DefaultUrls.TESTNET_WS_URL);\n        SpotClientImpl spotClient = new SpotClientImpl(PrivateConfig.TESTNET_API_KEY, PrivateConfig.TESTNET_SECRET_KEY, DefaultUrls.TESTNET_URL);\n        JSONObject obj = new JSONObject(spotClient.createUserData().createListenKey());\n        String listenKey = obj.getString(\"listenKey\");\n        System.out.println(\"listenKey:\" + listenKey);\n        wsClient.listenUserStream(listenKey, ((event) -> {\n            System.out.println(event);\n            wsClient.closeAllConnections();\n        }));\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketstream/UserStream.java", "class_name": "UserStream", "class_uri": "src/test/java/examples/websocketstream/UserStream.java.UserStream", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketstream/PartialDepthStream.java.PartialDepthStream.[]PartialDepthStream()", "name": "PartialDepthStream", "arg_nums": 0, "params": [], "return_type": "", "signature": "private PartialDepthStream()", "original_string": "    private PartialDepthStream() {\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketstream/PartialDepthStream.java", "class_name": "PartialDepthStream", "class_uri": "src/test/java/examples/websocketstream/PartialDepthStream.java.PartialDepthStream", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketstream/PartialDepthStream.java.PartialDepthStream.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        WebSocketStreamClient client = new WebSocketStreamClientImpl();\n        client.partialDepthStream(\"btcusdt\", levels, speed, ((event) -> {\n            System.out.println(event);\n            client.closeAllConnections();\n        }));\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketstream/PartialDepthStream.java", "class_name": "PartialDepthStream", "class_uri": "src/test/java/examples/websocketstream/PartialDepthStream.java.PartialDepthStream", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketstream/TradeStream.java.TradeStream.[]TradeStream()", "name": "TradeStream", "arg_nums": 0, "params": [], "return_type": "", "signature": "private TradeStream()", "original_string": "    private TradeStream() {\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketstream/TradeStream.java", "class_name": "TradeStream", "class_uri": "src/test/java/examples/websocketstream/TradeStream.java.TradeStream", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketstream/TradeStream.java.TradeStream.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        WebSocketStreamClient client = new WebSocketStreamClientImpl();\n        client.tradeStream(\"btcusdt\", ((event) -> {\n            System.out.println(event);\n            client.closeAllConnections();\n        }));\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketstream/TradeStream.java", "class_name": "TradeStream", "class_uri": "src/test/java/examples/websocketstream/TradeStream.java.TradeStream", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketstream/KlineStream.java.KlineStream.[]KlineStream()", "name": "KlineStream", "arg_nums": 0, "params": [], "return_type": "", "signature": "private KlineStream()", "original_string": "    private KlineStream() {\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketstream/KlineStream.java", "class_name": "KlineStream", "class_uri": "src/test/java/examples/websocketstream/KlineStream.java.KlineStream", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketstream/KlineStream.java.KlineStream.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        WebSocketStreamClient client = new WebSocketStreamClientImpl();\n        client.klineStream(\"btcusdt\", \"1h\", ((event) -> {\n            System.out.println(event);\n            client.closeAllConnections();\n        }));\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketstream/KlineStream.java", "class_name": "KlineStream", "class_uri": "src/test/java/examples/websocketstream/KlineStream.java.KlineStream", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketstream/AggTradeStream.java.AggTradeStream.[]AggTradeStream()", "name": "AggTradeStream", "arg_nums": 0, "params": [], "return_type": "", "signature": "private AggTradeStream()", "original_string": "    private AggTradeStream() {\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketstream/AggTradeStream.java", "class_name": "AggTradeStream", "class_uri": "src/test/java/examples/websocketstream/AggTradeStream.java.AggTradeStream", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketstream/AggTradeStream.java.AggTradeStream.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        WebSocketStreamClient client = new WebSocketStreamClientImpl();\n        int streamId1 = client.aggTradeStream(\"btcusdt\", ((event) -> {\n            System.out.println(event);\n        }));\n        int streamId2 = client.aggTradeStream(\"ethusdt\", ((event) -> {\n            System.out.println(event);\n        }));\n        client.closeConnection(streamId1);\n        client.closeConnection(streamId2);\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketstream/AggTradeStream.java", "class_name": "AggTradeStream", "class_uri": "src/test/java/examples/websocketstream/AggTradeStream.java.AggTradeStream", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketstream/AllTickerStream.java.AllTickerStream.[]AllTickerStream()", "name": "AllTickerStream", "arg_nums": 0, "params": [], "return_type": "", "signature": "private AllTickerStream()", "original_string": "    private AllTickerStream() {\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketstream/AllTickerStream.java", "class_name": "AllTickerStream", "class_uri": "src/test/java/examples/websocketstream/AllTickerStream.java.AllTickerStream", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketstream/AllTickerStream.java.AllTickerStream.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        WebSocketStreamClient client = new WebSocketStreamClientImpl();\n        client.allTickerStream(((event) -> {\n            System.out.println(event);\n            client.closeAllConnections();\n        }));\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketstream/AllTickerStream.java", "class_name": "AllTickerStream", "class_uri": "src/test/java/examples/websocketstream/AllTickerStream.java.AllTickerStream", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketstream/TradeStreamWithAllCallbacks.java.TradeStreamWithAllCallbacks.[]TradeStreamWithAllCallbacks()", "name": "TradeStreamWithAllCallbacks", "arg_nums": 0, "params": [], "return_type": "", "signature": "private TradeStreamWithAllCallbacks()", "original_string": "    private TradeStreamWithAllCallbacks() {\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketstream/TradeStreamWithAllCallbacks.java", "class_name": "TradeStreamWithAllCallbacks", "class_uri": "src/test/java/examples/websocketstream/TradeStreamWithAllCallbacks.java.TradeStreamWithAllCallbacks", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketstream/TradeStreamWithAllCallbacks.java.TradeStreamWithAllCallbacks.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) throws InterruptedException {\n        WebSocketStreamClient client = new WebSocketStreamClientImpl();\n        final long sleepTime = 1000;\n        \n        onOpenCallback = openEvent -> {\n            System.out.println(\"Open Connection: \" + openEvent.toString());\n        };\n\n        onMessageCallback = (message) -> {\n            System.out.println(\"Connection Message: \" +  message);\n        };\n\n        onClosingCallback = (code, reason) -> {\n            System.out.println(\"Closing Connection: code=\" + code + \", reason=\" + reason);\n        };\n\n        onClosedCallback = (code, reason) -> {\n            System.out.println(\"Closed Connection: code=\" + code + \", reason=\" + reason);\n        };\n\n        onFailureCallback = (throwable, response) -> {\n            System.out.println(\"Connection Failed: throwable=\" + throwable.getMessage());\n        };\n\n        client.tradeStream(\"btcusdt\", onOpenCallback, onMessageCallback, onClosingCallback, onClosedCallback, onFailureCallback);\n\n        Thread.sleep(sleepTime);\n\n        // Close connection for onClosingCallback and onClosedCallback examples purpose\n        client.closeAllConnections();\n\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketstream/TradeStreamWithAllCallbacks.java", "class_name": "TradeStreamWithAllCallbacks", "class_uri": "src/test/java/examples/websocketstream/TradeStreamWithAllCallbacks.java.TradeStreamWithAllCallbacks", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketstream/CombineStreams.java.CombineStreams.[]CombineStreams()", "name": "CombineStreams", "arg_nums": 0, "params": [], "return_type": "", "signature": "private CombineStreams()", "original_string": "    private CombineStreams() {\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketstream/CombineStreams.java", "class_name": "CombineStreams", "class_uri": "src/test/java/examples/websocketstream/CombineStreams.java.CombineStreams", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketstream/CombineStreams.java.CombineStreams.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) throws InterruptedException {\n        final long sleepTime = 3000;\n        WebSocketStreamClient client = new WebSocketStreamClientImpl();\n\n        ArrayList<String> streams = new ArrayList<>();\n        streams.add(\"btcusdt@trade\");\n        streams.add(\"bnbusdt@trade\");\n\n        client.combineStreams(streams, ((event) -> {\n            System.out.println(event);\n        }));\n\n        Thread.sleep(sleepTime);\n        client.closeAllConnections();\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketstream/CombineStreams.java", "class_name": "CombineStreams", "class_uri": "src/test/java/examples/websocketstream/CombineStreams.java.CombineStreams", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketstream/DiffDepthStream.java.DiffDepthStream.[]DiffDepthStream()", "name": "DiffDepthStream", "arg_nums": 0, "params": [], "return_type": "", "signature": "private DiffDepthStream()", "original_string": "    private DiffDepthStream() {\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketstream/DiffDepthStream.java", "class_name": "DiffDepthStream", "class_uri": "src/test/java/examples/websocketstream/DiffDepthStream.java.DiffDepthStream", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketstream/DiffDepthStream.java.DiffDepthStream.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        WebSocketStreamClient client = new WebSocketStreamClientImpl();\n        client.diffDepthStream(\"btcusdt\", speed, ((event) -> {\n            System.out.println(event);\n            client.closeAllConnections();\n        }));\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketstream/DiffDepthStream.java", "class_name": "DiffDepthStream", "class_uri": "src/test/java/examples/websocketstream/DiffDepthStream.java.DiffDepthStream", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketstream/RollingWindowTicker.java.RollingWindowTicker.[]RollingWindowTicker()", "name": "RollingWindowTicker", "arg_nums": 0, "params": [], "return_type": "", "signature": "private RollingWindowTicker()", "original_string": "    private RollingWindowTicker() {\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketstream/RollingWindowTicker.java", "class_name": "RollingWindowTicker", "class_uri": "src/test/java/examples/websocketstream/RollingWindowTicker.java.RollingWindowTicker", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketstream/RollingWindowTicker.java.RollingWindowTicker.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        WebSocketStreamClient client = new WebSocketStreamClientImpl();\n        client.rollingWindowTicker(\"btcusdt\", \"1h\", ((event) -> {\n            System.out.println(event);\n            client.closeAllConnections();\n        }));\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketstream/RollingWindowTicker.java", "class_name": "RollingWindowTicker", "class_uri": "src/test/java/examples/websocketstream/RollingWindowTicker.java.RollingWindowTicker", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketstream/AllMiniTickerStream.java.AllMiniTickerStream.[]AllMiniTickerStream()", "name": "AllMiniTickerStream", "arg_nums": 0, "params": [], "return_type": "", "signature": "private AllMiniTickerStream()", "original_string": "    private AllMiniTickerStream() {\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketstream/AllMiniTickerStream.java", "class_name": "AllMiniTickerStream", "class_uri": "src/test/java/examples/websocketstream/AllMiniTickerStream.java.AllMiniTickerStream", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/examples/websocketstream/AllMiniTickerStream.java.AllMiniTickerStream.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        WebSocketStreamClient client = new WebSocketStreamClientImpl();\n        client.allMiniTickerStream(((event) -> {\n            System.out.println(event);\n            client.closeAllConnections();\n        }));\n    }", "default_arguments": null, "file": "src/test/java/examples/websocketstream/AllMiniTickerStream.java", "class_name": "AllMiniTickerStream", "class_uri": "src/test/java/examples/websocketstream/AllMiniTickerStream.java.AllMiniTickerStream", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient.[int]aggTradeStream(String,WebSocketMessageCallback)", "name": "aggTradeStream", "arg_nums": 2, "params": [{"name": "symbol", "type": "String"}, {"name": "callback", "type": "WebSocketMessageCallback"}], "return_type": "int", "signature": "int aggTradeStream(String symbol, WebSocketMessageCallback callback)", "original_string": "    int aggTradeStream(String symbol, WebSocketMessageCallback callback);", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java", "class_name": "WebSocketStreamClient", "class_uri": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient.[int]aggTradeStream(String,WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "name": "aggTradeStream", "arg_nums": 6, "params": [{"name": "symbol", "type": "String"}, {"name": "onOpenCallback", "type": "WebSocketOpenCallback"}, {"name": "onMessageCallback", "type": "WebSocketMessageCallback"}, {"name": "onClosingCallback", "type": "WebSocketClosingCallback"}, {"name": "onClosedCallback", "type": "WebSocketClosedCallback"}, {"name": "onFailureCallback", "type": "WebSocketFailureCallback"}], "return_type": "int", "signature": "int aggTradeStream(String symbol, WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback)", "original_string": "    int aggTradeStream(String symbol, WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback);", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java", "class_name": "WebSocketStreamClient", "class_uri": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient.[int]tradeStream(String,WebSocketMessageCallback)", "name": "tradeStream", "arg_nums": 2, "params": [{"name": "symbol", "type": "String"}, {"name": "callback", "type": "WebSocketMessageCallback"}], "return_type": "int", "signature": "int tradeStream(String symbol, WebSocketMessageCallback callback)", "original_string": "    int tradeStream(String symbol, WebSocketMessageCallback callback);", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java", "class_name": "WebSocketStreamClient", "class_uri": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient.[int]tradeStream(String,WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "name": "tradeStream", "arg_nums": 6, "params": [{"name": "symbol", "type": "String"}, {"name": "onOpenCallback", "type": "WebSocketOpenCallback"}, {"name": "onMessageCallback", "type": "WebSocketMessageCallback"}, {"name": "onClosingCallback", "type": "WebSocketClosingCallback"}, {"name": "onClosedCallback", "type": "WebSocketClosedCallback"}, {"name": "onFailureCallback", "type": "WebSocketFailureCallback"}], "return_type": "int", "signature": "int tradeStream(String symbol, WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback)", "original_string": "    int tradeStream(String symbol, WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback);", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java", "class_name": "WebSocketStreamClient", "class_uri": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient.[int]klineStream(String,String,WebSocketMessageCallback)", "name": "klineStream", "arg_nums": 3, "params": [{"name": "symbol", "type": "String"}, {"name": "interval", "type": "String"}, {"name": "callback", "type": "WebSocketMessageCallback"}], "return_type": "int", "signature": "int klineStream(String symbol, String interval, WebSocketMessageCallback callback)", "original_string": "    int klineStream(String symbol, String interval, WebSocketMessageCallback callback);", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java", "class_name": "WebSocketStreamClient", "class_uri": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient.[int]klineStream(String,String,WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "name": "klineStream", "arg_nums": 7, "params": [{"name": "symbol", "type": "String"}, {"name": "interval", "type": "String"}, {"name": "onOpenCallback", "type": "WebSocketOpenCallback"}, {"name": "onMessageCallback", "type": "WebSocketMessageCallback"}, {"name": "onClosingCallback", "type": "WebSocketClosingCallback"}, {"name": "onClosedCallback", "type": "WebSocketClosedCallback"}, {"name": "onFailureCallback", "type": "WebSocketFailureCallback"}], "return_type": "int", "signature": "int klineStream(String symbol, String interval, WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback)", "original_string": "    int klineStream(String symbol, String interval, WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback);", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java", "class_name": "WebSocketStreamClient", "class_uri": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient.[int]miniTickerStream(String,WebSocketMessageCallback)", "name": "miniTickerStream", "arg_nums": 2, "params": [{"name": "symbol", "type": "String"}, {"name": "callback", "type": "WebSocketMessageCallback"}], "return_type": "int", "signature": "int miniTickerStream(String symbol, WebSocketMessageCallback callback)", "original_string": "    int miniTickerStream(String symbol, WebSocketMessageCallback callback);", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java", "class_name": "WebSocketStreamClient", "class_uri": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient.[int]miniTickerStream(String,WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "name": "miniTickerStream", "arg_nums": 6, "params": [{"name": "symbol", "type": "String"}, {"name": "onOpenCallback", "type": "WebSocketOpenCallback"}, {"name": "onMessageCallback", "type": "WebSocketMessageCallback"}, {"name": "onClosingCallback", "type": "WebSocketClosingCallback"}, {"name": "onClosedCallback", "type": "WebSocketClosedCallback"}, {"name": "onFailureCallback", "type": "WebSocketFailureCallback"}], "return_type": "int", "signature": "int miniTickerStream(String symbol, WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback)", "original_string": "    int miniTickerStream(String symbol, WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback);", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java", "class_name": "WebSocketStreamClient", "class_uri": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient.[int]allMiniTickerStream(WebSocketMessageCallback)", "name": "allMiniTickerStream", "arg_nums": 1, "params": [{"name": "callback", "type": "WebSocketMessageCallback"}], "return_type": "int", "signature": "int allMiniTickerStream(WebSocketMessageCallback callback)", "original_string": "    int allMiniTickerStream(WebSocketMessageCallback callback);", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java", "class_name": "WebSocketStreamClient", "class_uri": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient.[int]allMiniTickerStream(WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "name": "allMiniTickerStream", "arg_nums": 5, "params": [{"name": "onOpenCallback", "type": "WebSocketOpenCallback"}, {"name": "onMessageCallback", "type": "WebSocketMessageCallback"}, {"name": "onClosingCallback", "type": "WebSocketClosingCallback"}, {"name": "onClosedCallback", "type": "WebSocketClosedCallback"}, {"name": "onFailureCallback", "type": "WebSocketFailureCallback"}], "return_type": "int", "signature": "int allMiniTickerStream(WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback)", "original_string": "    int allMiniTickerStream(WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback);", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java", "class_name": "WebSocketStreamClient", "class_uri": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient.[int]symbolTicker(String,WebSocketMessageCallback)", "name": "symbolTicker", "arg_nums": 2, "params": [{"name": "symbol", "type": "String"}, {"name": "callback", "type": "WebSocketMessageCallback"}], "return_type": "int", "signature": "int symbolTicker(String symbol, WebSocketMessageCallback callback)", "original_string": "    int symbolTicker(String symbol, WebSocketMessageCallback callback);", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java", "class_name": "WebSocketStreamClient", "class_uri": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient.[int]symbolTicker(String,WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "name": "symbolTicker", "arg_nums": 6, "params": [{"name": "symbol", "type": "String"}, {"name": "onOpenCallback", "type": "WebSocketOpenCallback"}, {"name": "onMessageCallback", "type": "WebSocketMessageCallback"}, {"name": "onClosingCallback", "type": "WebSocketClosingCallback"}, {"name": "onClosedCallback", "type": "WebSocketClosedCallback"}, {"name": "onFailureCallback", "type": "WebSocketFailureCallback"}], "return_type": "int", "signature": "int symbolTicker(String symbol, WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback)", "original_string": "    int symbolTicker(String symbol, WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback);", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java", "class_name": "WebSocketStreamClient", "class_uri": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient.[int]allTickerStream(WebSocketMessageCallback)", "name": "allTickerStream", "arg_nums": 1, "params": [{"name": "callback", "type": "WebSocketMessageCallback"}], "return_type": "int", "signature": "int allTickerStream(WebSocketMessageCallback callback)", "original_string": "    int allTickerStream(WebSocketMessageCallback callback);", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java", "class_name": "WebSocketStreamClient", "class_uri": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient.[int]allTickerStream(WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "name": "allTickerStream", "arg_nums": 5, "params": [{"name": "onOpenCallback", "type": "WebSocketOpenCallback"}, {"name": "onMessageCallback", "type": "WebSocketMessageCallback"}, {"name": "onClosingCallback", "type": "WebSocketClosingCallback"}, {"name": "onClosedCallback", "type": "WebSocketClosedCallback"}, {"name": "onFailureCallback", "type": "WebSocketFailureCallback"}], "return_type": "int", "signature": "int allTickerStream(WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback)", "original_string": "    int allTickerStream(WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback);", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java", "class_name": "WebSocketStreamClient", "class_uri": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient.[int]rollingWindowTicker(String,String,WebSocketMessageCallback)", "name": "rollingWindowTicker", "arg_nums": 3, "params": [{"name": "symbol", "type": "String"}, {"name": "windowSize", "type": "String"}, {"name": "callback", "type": "WebSocketMessageCallback"}], "return_type": "int", "signature": "int rollingWindowTicker(String symbol, String windowSize, WebSocketMessageCallback callback)", "original_string": "    int rollingWindowTicker(String symbol, String windowSize, WebSocketMessageCallback callback);", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java", "class_name": "WebSocketStreamClient", "class_uri": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient.[int]rollingWindowTicker(String,String,WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "name": "rollingWindowTicker", "arg_nums": 7, "params": [{"name": "symbol", "type": "String"}, {"name": "windowSize", "type": "String"}, {"name": "onOpenCallback", "type": "WebSocketOpenCallback"}, {"name": "onMessageCallback", "type": "WebSocketMessageCallback"}, {"name": "onClosingCallback", "type": "WebSocketClosingCallback"}, {"name": "onClosedCallback", "type": "WebSocketClosedCallback"}, {"name": "onFailureCallback", "type": "WebSocketFailureCallback"}], "return_type": "int", "signature": "int rollingWindowTicker(String symbol, String windowSize, WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback)", "original_string": "    int rollingWindowTicker(String symbol, String windowSize, WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback);", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java", "class_name": "WebSocketStreamClient", "class_uri": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient.[int]allRollingWindowTicker(String,WebSocketMessageCallback)", "name": "allRollingWindowTicker", "arg_nums": 2, "params": [{"name": "windowSize", "type": "String"}, {"name": "callback", "type": "WebSocketMessageCallback"}], "return_type": "int", "signature": "int allRollingWindowTicker(String windowSize, WebSocketMessageCallback callback)", "original_string": "    int allRollingWindowTicker(String windowSize, WebSocketMessageCallback callback);", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java", "class_name": "WebSocketStreamClient", "class_uri": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient.[int]allRollingWindowTicker(String,WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "name": "allRollingWindowTicker", "arg_nums": 6, "params": [{"name": "windowSize", "type": "String"}, {"name": "onOpenCallback", "type": "WebSocketOpenCallback"}, {"name": "onMessageCallback", "type": "WebSocketMessageCallback"}, {"name": "onClosingCallback", "type": "WebSocketClosingCallback"}, {"name": "onClosedCallback", "type": "WebSocketClosedCallback"}, {"name": "onFailureCallback", "type": "WebSocketFailureCallback"}], "return_type": "int", "signature": "int allRollingWindowTicker(String windowSize, WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback)", "original_string": "    int allRollingWindowTicker(String windowSize, WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback);", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java", "class_name": "WebSocketStreamClient", "class_uri": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient.[int]bookTicker(String,WebSocketMessageCallback)", "name": "bookTicker", "arg_nums": 2, "params": [{"name": "symbol", "type": "String"}, {"name": "callback", "type": "WebSocketMessageCallback"}], "return_type": "int", "signature": "int bookTicker(String symbol, WebSocketMessageCallback callback)", "original_string": "    int bookTicker(String symbol, WebSocketMessageCallback callback);", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java", "class_name": "WebSocketStreamClient", "class_uri": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient.[int]bookTicker(String,WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "name": "bookTicker", "arg_nums": 6, "params": [{"name": "symbol", "type": "String"}, {"name": "onOpenCallback", "type": "WebSocketOpenCallback"}, {"name": "onMessageCallback", "type": "WebSocketMessageCallback"}, {"name": "onClosingCallback", "type": "WebSocketClosingCallback"}, {"name": "onClosedCallback", "type": "WebSocketClosedCallback"}, {"name": "onFailureCallback", "type": "WebSocketFailureCallback"}], "return_type": "int", "signature": "int bookTicker(String symbol, WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback)", "original_string": "    int bookTicker(String symbol, WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback);", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java", "class_name": "WebSocketStreamClient", "class_uri": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient.[int]partialDepthStream(String,int,int,WebSocketMessageCallback)", "name": "partialDepthStream", "arg_nums": 4, "params": [{"name": "symbol", "type": "String"}, {"name": "levels", "type": "int"}, {"name": "speed", "type": "int"}, {"name": "callback", "type": "WebSocketMessageCallback"}], "return_type": "int", "signature": "int partialDepthStream(String symbol, int levels, int speed, WebSocketMessageCallback callback)", "original_string": "    int partialDepthStream(String symbol, int levels, int speed, WebSocketMessageCallback callback);", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java", "class_name": "WebSocketStreamClient", "class_uri": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient.[int]partialDepthStream(String,int,int,WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "name": "partialDepthStream", "arg_nums": 8, "params": [{"name": "symbol", "type": "String"}, {"name": "levels", "type": "int"}, {"name": "speed", "type": "int"}, {"name": "onOpenCallback", "type": "WebSocketOpenCallback"}, {"name": "onMessageCallback", "type": "WebSocketMessageCallback"}, {"name": "onClosingCallback", "type": "WebSocketClosingCallback"}, {"name": "onClosedCallback", "type": "WebSocketClosedCallback"}, {"name": "onFailureCallback", "type": "WebSocketFailureCallback"}], "return_type": "int", "signature": "int partialDepthStream(String symbol, int levels, int speed, WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback)", "original_string": "    int partialDepthStream(String symbol, int levels, int speed, WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback);", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java", "class_name": "WebSocketStreamClient", "class_uri": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient.[int]diffDepthStream(String,int,WebSocketMessageCallback)", "name": "diffDepthStream", "arg_nums": 3, "params": [{"name": "symbol", "type": "String"}, {"name": "speed", "type": "int"}, {"name": "callback", "type": "WebSocketMessageCallback"}], "return_type": "int", "signature": "int diffDepthStream(String symbol, int speed, WebSocketMessageCallback callback)", "original_string": "    int diffDepthStream(String symbol, int speed, WebSocketMessageCallback callback);", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java", "class_name": "WebSocketStreamClient", "class_uri": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient.[int]diffDepthStream(String,int,WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "name": "diffDepthStream", "arg_nums": 7, "params": [{"name": "symbol", "type": "String"}, {"name": "speed", "type": "int"}, {"name": "onOpenCallback", "type": "WebSocketOpenCallback"}, {"name": "onMessageCallback", "type": "WebSocketMessageCallback"}, {"name": "onClosingCallback", "type": "WebSocketClosingCallback"}, {"name": "onClosedCallback", "type": "WebSocketClosedCallback"}, {"name": "onFailureCallback", "type": "WebSocketFailureCallback"}], "return_type": "int", "signature": "int diffDepthStream(String symbol, int speed, WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback)", "original_string": "    int diffDepthStream(String symbol, int speed, WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback);", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java", "class_name": "WebSocketStreamClient", "class_uri": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient.[int]listenUserStream(String,WebSocketMessageCallback)", "name": "listenUserStream", "arg_nums": 2, "params": [{"name": "listenKey", "type": "String"}, {"name": "callback", "type": "WebSocketMessageCallback"}], "return_type": "int", "signature": "int listenUserStream(String listenKey, WebSocketMessageCallback callback)", "original_string": "    int listenUserStream(String listenKey, WebSocketMessageCallback callback);", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java", "class_name": "WebSocketStreamClient", "class_uri": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient.[int]listenUserStream(String,WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "name": "listenUserStream", "arg_nums": 6, "params": [{"name": "listenKey", "type": "String"}, {"name": "onOpenCallback", "type": "WebSocketOpenCallback"}, {"name": "onMessageCallback", "type": "WebSocketMessageCallback"}, {"name": "onClosingCallback", "type": "WebSocketClosingCallback"}, {"name": "onClosedCallback", "type": "WebSocketClosedCallback"}, {"name": "onFailureCallback", "type": "WebSocketFailureCallback"}], "return_type": "int", "signature": "int listenUserStream(String listenKey, WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback)", "original_string": "    int listenUserStream(String listenKey, WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback);", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java", "class_name": "WebSocketStreamClient", "class_uri": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient.[int]combineStreams(ArrayList<String>,WebSocketMessageCallback)", "name": "combineStreams", "arg_nums": 2, "params": [{"name": "streams", "type": "ArrayList<String>"}, {"name": "callback", "type": "WebSocketMessageCallback"}], "return_type": "int", "signature": "int combineStreams(ArrayList<String> streams, WebSocketMessageCallback callback)", "original_string": "    int combineStreams(ArrayList<String> streams, WebSocketMessageCallback callback);", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java", "class_name": "WebSocketStreamClient", "class_uri": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient.[int]combineStreams(ArrayList<String>,WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "name": "combineStreams", "arg_nums": 6, "params": [{"name": "streams", "type": "ArrayList<String>"}, {"name": "onOpenCallback", "type": "WebSocketOpenCallback"}, {"name": "onMessageCallback", "type": "WebSocketMessageCallback"}, {"name": "onClosingCallback", "type": "WebSocketClosingCallback"}, {"name": "onClosedCallback", "type": "WebSocketClosedCallback"}, {"name": "onFailureCallback", "type": "WebSocketFailureCallback"}], "return_type": "int", "signature": "int combineStreams(ArrayList<String> streams, WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback)", "original_string": "    int combineStreams(ArrayList<String> streams, WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback);", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java", "class_name": "WebSocketStreamClient", "class_uri": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient.[void]closeConnection(int)", "name": "closeConnection", "arg_nums": 1, "params": [{"name": "streamId", "type": "int"}], "return_type": "void", "signature": "void closeConnection(int streamId)", "original_string": "    void closeConnection(int streamId);", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java", "class_name": "WebSocketStreamClient", "class_uri": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient.[void]closeAllConnections()", "name": "closeAllConnections", "arg_nums": 0, "params": [], "return_type": "void", "signature": "void closeAllConnections()", "original_string": "    void closeAllConnections();", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java", "class_name": "WebSocketStreamClient", "class_uri": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/SpotClient.java.SpotClient.[void]setShowLimitUsage(boolean)", "name": "setShowLimitUsage", "arg_nums": 1, "params": [{"name": "showLimitUsage", "type": "boolean"}], "return_type": "void", "signature": "void setShowLimitUsage(boolean showLimitUsage)", "original_string": "    void setShowLimitUsage(boolean showLimitUsage);", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/SpotClient.java", "class_name": "SpotClient", "class_uri": "src/main/java/com/binance/connector/client/SpotClient.java.SpotClient", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/SpotClient.java.SpotClient.[void]setProxy(ProxyAuth)", "name": "setProxy", "arg_nums": 1, "params": [{"name": "proxy", "type": "ProxyAuth"}], "return_type": "void", "signature": "void setProxy(ProxyAuth proxy)", "original_string": "    void setProxy(ProxyAuth proxy);", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/SpotClient.java", "class_name": "SpotClient", "class_uri": "src/main/java/com/binance/connector/client/SpotClient.java.SpotClient", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/SpotClient.java.SpotClient.[void]unsetProxy()", "name": "unsetProxy", "arg_nums": 0, "params": [], "return_type": "void", "signature": "void unsetProxy()", "original_string": "    void unsetProxy();", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/SpotClient.java", "class_name": "SpotClient", "class_uri": "src/main/java/com/binance/connector/client/SpotClient.java.SpotClient", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/SpotClient.java.SpotClient.[AutoInvest]createAutoInvest()", "name": "createAutoInvest", "arg_nums": 0, "params": [], "return_type": "AutoInvest", "signature": "AutoInvest createAutoInvest()", "original_string": "    AutoInvest createAutoInvest();", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/SpotClient.java", "class_name": "SpotClient", "class_uri": "src/main/java/com/binance/connector/client/SpotClient.java.SpotClient", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "AutoInvest", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/SpotClient.java.SpotClient.[Blvt]createBlvt()", "name": "createBlvt", "arg_nums": 0, "params": [], "return_type": "Blvt", "signature": "Blvt createBlvt()", "original_string": "    Blvt createBlvt();", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/SpotClient.java", "class_name": "SpotClient", "class_uri": "src/main/java/com/binance/connector/client/SpotClient.java.SpotClient", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "Blvt", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/SpotClient.java.SpotClient.[C2C]createC2C()", "name": "createC2C", "arg_nums": 0, "params": [], "return_type": "C2C", "signature": "C2C createC2C()", "original_string": "    C2C createC2C();", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/SpotClient.java", "class_name": "SpotClient", "class_uri": "src/main/java/com/binance/connector/client/SpotClient.java.SpotClient", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "C2C", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/SpotClient.java.SpotClient.[Convert]createConvert()", "name": "createConvert", "arg_nums": 0, "params": [], "return_type": "Convert", "signature": "Convert createConvert()", "original_string": "    Convert createConvert();", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/SpotClient.java", "class_name": "SpotClient", "class_uri": "src/main/java/com/binance/connector/client/SpotClient.java.SpotClient", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "Convert", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/SpotClient.java.SpotClient.[CryptoLoans]createCryptoLoans()", "name": "createCryptoLoans", "arg_nums": 0, "params": [], "return_type": "CryptoLoans", "signature": "CryptoLoans createCryptoLoans()", "original_string": "    CryptoLoans createCryptoLoans();", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/SpotClient.java", "class_name": "SpotClient", "class_uri": "src/main/java/com/binance/connector/client/SpotClient.java.SpotClient", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "CryptoLoans", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/SpotClient.java.SpotClient.[Fiat]createFiat()", "name": "createFiat", "arg_nums": 0, "params": [], "return_type": "Fiat", "signature": "Fiat createFiat()", "original_string": "    Fiat createFiat();", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/SpotClient.java", "class_name": "SpotClient", "class_uri": "src/main/java/com/binance/connector/client/SpotClient.java.SpotClient", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "Fiat", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/SpotClient.java.SpotClient.[Futures]createFutures()", "name": "createFutures", "arg_nums": 0, "params": [], "return_type": "Futures", "signature": "Futures createFutures()", "original_string": "    Futures createFutures();", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/SpotClient.java", "class_name": "SpotClient", "class_uri": "src/main/java/com/binance/connector/client/SpotClient.java.SpotClient", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "Futures", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/SpotClient.java.SpotClient.[GiftCard]createGiftCard()", "name": "createGiftCard", "arg_nums": 0, "params": [], "return_type": "GiftCard", "signature": "GiftCard createGiftCard()", "original_string": "    GiftCard createGiftCard();", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/SpotClient.java", "class_name": "SpotClient", "class_uri": "src/main/java/com/binance/connector/client/SpotClient.java.SpotClient", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "GiftCard", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/SpotClient.java.SpotClient.[Market]createMarket()", "name": "createMarket", "arg_nums": 0, "params": [], "return_type": "Market", "signature": "Market createMarket()", "original_string": "    Market createMarket();", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/SpotClient.java", "class_name": "SpotClient", "class_uri": "src/main/java/com/binance/connector/client/SpotClient.java.SpotClient", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "Market", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/SpotClient.java.SpotClient.[Margin]createMargin()", "name": "createMargin", "arg_nums": 0, "params": [], "return_type": "Margin", "signature": "Margin createMargin()", "original_string": "    Margin createMargin();", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/SpotClient.java", "class_name": "SpotClient", "class_uri": "src/main/java/com/binance/connector/client/SpotClient.java.SpotClient", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "Margin", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/SpotClient.java.SpotClient.[Mining]createMining()", "name": "createMining", "arg_nums": 0, "params": [], "return_type": "Mining", "signature": "Mining createMining()", "original_string": "    Mining createMining();", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/SpotClient.java", "class_name": "SpotClient", "class_uri": "src/main/java/com/binance/connector/client/SpotClient.java.SpotClient", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "Mining", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/SpotClient.java.SpotClient.[NFT]createNFT()", "name": "createNFT", "arg_nums": 0, "params": [], "return_type": "NFT", "signature": "NFT createNFT()", "original_string": "    NFT createNFT();", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/SpotClient.java", "class_name": "SpotClient", "class_uri": "src/main/java/com/binance/connector/client/SpotClient.java.SpotClient", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "NFT", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/SpotClient.java.SpotClient.[Pay]createPay()", "name": "createPay", "arg_nums": 0, "params": [], "return_type": "Pay", "signature": "Pay createPay()", "original_string": "    Pay createPay();", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/SpotClient.java", "class_name": "SpotClient", "class_uri": "src/main/java/com/binance/connector/client/SpotClient.java.SpotClient", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "Pay", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/SpotClient.java.SpotClient.[PortfolioMargin]createPortfolioMargin()", "name": "createPortfolioMargin", "arg_nums": 0, "params": [], "return_type": "PortfolioMargin", "signature": "PortfolioMargin createPortfolioMargin()", "original_string": "    PortfolioMargin createPortfolioMargin();", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/SpotClient.java", "class_name": "SpotClient", "class_uri": "src/main/java/com/binance/connector/client/SpotClient.java.SpotClient", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "PortfolioMargin", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/SpotClient.java.SpotClient.[Rebate]createRebate()", "name": "createRebate", "arg_nums": 0, "params": [], "return_type": "Rebate", "signature": "Rebate createRebate()", "original_string": "    Rebate createRebate();", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/SpotClient.java", "class_name": "SpotClient", "class_uri": "src/main/java/com/binance/connector/client/SpotClient.java.SpotClient", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "Rebate", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/SpotClient.java.SpotClient.[SimpleEarn]createSimpleEarn()", "name": "createSimpleEarn", "arg_nums": 0, "params": [], "return_type": "SimpleEarn", "signature": "SimpleEarn createSimpleEarn()", "original_string": "    SimpleEarn createSimpleEarn();", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/SpotClient.java", "class_name": "SpotClient", "class_uri": "src/main/java/com/binance/connector/client/SpotClient.java.SpotClient", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "SimpleEarn", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/SpotClient.java.SpotClient.[SpotAlgo]createSpotAlgo()", "name": "createSpotAlgo", "arg_nums": 0, "params": [], "return_type": "SpotAlgo", "signature": "SpotAlgo createSpotAlgo()", "original_string": "    SpotAlgo createSpotAlgo();", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/SpotClient.java", "class_name": "SpotClient", "class_uri": "src/main/java/com/binance/connector/client/SpotClient.java.SpotClient", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "SpotAlgo", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/SpotClient.java.SpotClient.[Staking]createStaking()", "name": "createStaking", "arg_nums": 0, "params": [], "return_type": "Staking", "signature": "Staking createStaking()", "original_string": "    Staking createStaking();", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/SpotClient.java", "class_name": "SpotClient", "class_uri": "src/main/java/com/binance/connector/client/SpotClient.java.SpotClient", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "Staking", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/SpotClient.java.SpotClient.[SubAccount]createSubAccount()", "name": "createSubAccount", "arg_nums": 0, "params": [], "return_type": "SubAccount", "signature": "SubAccount createSubAccount()", "original_string": "    SubAccount createSubAccount();", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/SpotClient.java", "class_name": "SpotClient", "class_uri": "src/main/java/com/binance/connector/client/SpotClient.java.SpotClient", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "SubAccount", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/SpotClient.java.SpotClient.[Trade]createTrade()", "name": "createTrade", "arg_nums": 0, "params": [], "return_type": "Trade", "signature": "Trade createTrade()", "original_string": "    Trade createTrade();", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/SpotClient.java", "class_name": "SpotClient", "class_uri": "src/main/java/com/binance/connector/client/SpotClient.java.SpotClient", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "Trade", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/SpotClient.java.SpotClient.[UserData]createUserData()", "name": "createUserData", "arg_nums": 0, "params": [], "return_type": "UserData", "signature": "UserData createUserData()", "original_string": "    UserData createUserData();", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/SpotClient.java", "class_name": "SpotClient", "class_uri": "src/main/java/com/binance/connector/client/SpotClient.java.SpotClient", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "UserData", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/SpotClient.java.SpotClient.[VIPLoans]createVIPLoans()", "name": "createVIPLoans", "arg_nums": 0, "params": [], "return_type": "VIPLoans", "signature": "VIPLoans createVIPLoans()", "original_string": "    VIPLoans createVIPLoans();", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/SpotClient.java", "class_name": "SpotClient", "class_uri": "src/main/java/com/binance/connector/client/SpotClient.java.SpotClient", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "VIPLoans", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/SpotClient.java.SpotClient.[Wallet]createWallet()", "name": "createWallet", "arg_nums": 0, "params": [], "return_type": "Wallet", "signature": "Wallet createWallet()", "original_string": "    Wallet createWallet();", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/SpotClient.java", "class_name": "SpotClient", "class_uri": "src/main/java/com/binance/connector/client/SpotClient.java.SpotClient", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "Wallet", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/WebSocketApiClient.java.WebSocketApiClient.[void]connect(WebSocketMessageCallback)", "name": "connect", "arg_nums": 1, "params": [{"name": "onMessageCallback", "type": "WebSocketMessageCallback"}], "return_type": "void", "signature": "void connect(WebSocketMessageCallback onMessageCallback)", "original_string": "    void connect(WebSocketMessageCallback onMessageCallback);", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/WebSocketApiClient.java", "class_name": "WebSocketApiClient", "class_uri": "src/main/java/com/binance/connector/client/WebSocketApiClient.java.WebSocketApiClient", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/WebSocketApiClient.java.WebSocketApiClient.[void]connect(WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "name": "connect", "arg_nums": 5, "params": [{"name": "onOpenCallback", "type": "WebSocketOpenCallback"}, {"name": "onMessageCallback", "type": "WebSocketMessageCallback"}, {"name": "onClosingCallback", "type": "WebSocketClosingCallback"}, {"name": "onClosedCallback", "type": "WebSocketClosedCallback"}, {"name": "onFailureCallback", "type": "WebSocketFailureCallback"}], "return_type": "void", "signature": "void connect(WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback)", "original_string": "    void connect(WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback);", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/WebSocketApiClient.java", "class_name": "WebSocketApiClient", "class_uri": "src/main/java/com/binance/connector/client/WebSocketApiClient.java.WebSocketApiClient", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/WebSocketApiClient.java.WebSocketApiClient.[void]close()", "name": "close", "arg_nums": 0, "params": [], "return_type": "void", "signature": "void close()", "original_string": "    void close();", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/WebSocketApiClient.java", "class_name": "WebSocketApiClient", "class_uri": "src/main/java/com/binance/connector/client/WebSocketApiClient.java.WebSocketApiClient", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/WebSocketApiClient.java.WebSocketApiClient.[WebSocketApiAccount]account()", "name": "account", "arg_nums": 0, "params": [], "return_type": "WebSocketApiAccount", "signature": "WebSocketApiAccount account()", "original_string": "    WebSocketApiAccount account();", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/WebSocketApiClient.java", "class_name": "WebSocketApiClient", "class_uri": "src/main/java/com/binance/connector/client/WebSocketApiClient.java.WebSocketApiClient", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "WebSocketApiAccount", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/WebSocketApiClient.java.WebSocketApiClient.[WebSocketApiAuth]auth()", "name": "auth", "arg_nums": 0, "params": [], "return_type": "WebSocketApiAuth", "signature": "WebSocketApiAuth auth()", "original_string": "    WebSocketApiAuth auth();", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/WebSocketApiClient.java", "class_name": "WebSocketApiClient", "class_uri": "src/main/java/com/binance/connector/client/WebSocketApiClient.java.WebSocketApiClient", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "WebSocketApiAuth", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/WebSocketApiClient.java.WebSocketApiClient.[WebSocketApiGeneral]general()", "name": "general", "arg_nums": 0, "params": [], "return_type": "WebSocketApiGeneral", "signature": "WebSocketApiGeneral general()", "original_string": "    WebSocketApiGeneral general();", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/WebSocketApiClient.java", "class_name": "WebSocketApiClient", "class_uri": "src/main/java/com/binance/connector/client/WebSocketApiClient.java.WebSocketApiClient", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "WebSocketApiGeneral", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/WebSocketApiClient.java.WebSocketApiClient.[WebSocketApiMarket]market()", "name": "market", "arg_nums": 0, "params": [], "return_type": "WebSocketApiMarket", "signature": "WebSocketApiMarket market()", "original_string": "    WebSocketApiMarket market();", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/WebSocketApiClient.java", "class_name": "WebSocketApiClient", "class_uri": "src/main/java/com/binance/connector/client/WebSocketApiClient.java.WebSocketApiClient", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "WebSocketApiMarket", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/WebSocketApiClient.java.WebSocketApiClient.[WebSocketApiTrade]trade()", "name": "trade", "arg_nums": 0, "params": [], "return_type": "WebSocketApiTrade", "signature": "WebSocketApiTrade trade()", "original_string": "    WebSocketApiTrade trade();", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/WebSocketApiClient.java", "class_name": "WebSocketApiClient", "class_uri": "src/main/java/com/binance/connector/client/WebSocketApiClient.java.WebSocketApiClient", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "WebSocketApiTrade", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/WebSocketApiClient.java.WebSocketApiClient.[WebSocketApiUserDataStream]userDataStream()", "name": "userDataStream", "arg_nums": 0, "params": [], "return_type": "WebSocketApiUserDataStream", "signature": "WebSocketApiUserDataStream userDataStream()", "original_string": "    WebSocketApiUserDataStream userDataStream();", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/WebSocketApiClient.java", "class_name": "WebSocketApiClient", "class_uri": "src/main/java/com/binance/connector/client/WebSocketApiClient.java.WebSocketApiClient", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "WebSocketApiUserDataStream", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/utils/UrlBuilder.java.UrlBuilder.[]UrlBuilder()", "name": "UrlBuilder", "arg_nums": 0, "params": [], "return_type": "", "signature": "private UrlBuilder()", "original_string": "    private UrlBuilder() {\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/UrlBuilder.java", "class_name": "UrlBuilder", "class_uri": "src/main/java/com/binance/connector/client/utils/UrlBuilder.java.UrlBuilder", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/utils/UrlBuilder.java.UrlBuilder.[String]buildFullUrl(String,String,Map<String, Object>)", "name": "buildFullUrl", "arg_nums": 3, "params": [{"name": "baseUrl", "type": "String"}, {"name": "urlPath", "type": "String"}, {"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public static String buildFullUrl(String baseUrl, String urlPath, Map<String, Object> parameters)", "original_string": "    public static String buildFullUrl(String baseUrl, String urlPath, Map<String, Object> parameters) {\n        StringBuilder sb = new StringBuilder(baseUrl).append(urlPath);\n        if (parameters != null && !parameters.isEmpty()) {\n            sb.append(\"?\");\n            sb.append(joinQueryParameters(parameters));\n        }\n        return sb.toString();\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/UrlBuilder.java", "class_name": "UrlBuilder", "class_uri": "src/main/java/com/binance/connector/client/utils/UrlBuilder.java.UrlBuilder", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/utils/UrlBuilder.java.UrlBuilder.[String]buildStreamUrl(String,ArrayList<String>)", "name": "buildStreamUrl", "arg_nums": 2, "params": [{"name": "baseUrl", "type": "String"}, {"name": "streams", "type": "ArrayList<String>"}], "return_type": "String", "signature": "public static String buildStreamUrl(String baseUrl, ArrayList<String> streams)", "original_string": "    public static String buildStreamUrl(String baseUrl, ArrayList<String> streams) {\n        StringBuilder sb = new StringBuilder(baseUrl).append(\"/stream\");\n        if (streams != null && !streams.isEmpty()) {\n            sb.append(\"?streams=\");\n            sb.append(joinStreamUrls(streams));\n        }\n        return sb.toString();\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/UrlBuilder.java", "class_name": "UrlBuilder", "class_uri": "src/main/java/com/binance/connector/client/utils/UrlBuilder.java.UrlBuilder", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/utils/UrlBuilder.java.UrlBuilder.[String]joinQueryParameters(Map<String, Object>)", "name": "joinQueryParameters", "arg_nums": 1, "params": [{"name": "params", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public static String joinQueryParameters(Map<String, Object> params)", "original_string": "    public static String joinQueryParameters(Map<String, Object> params) {\n        return joinQueryParameters(new StringBuilder(), params).toString();\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/UrlBuilder.java", "class_name": "UrlBuilder", "class_uri": "src/main/java/com/binance/connector/client/utils/UrlBuilder.java.UrlBuilder", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nJoins query parameters from a Map into a String representation.\n@param params The Map containing the query parameters.\n@return The String representation of the joined query parameters.\n"}, {"uris": "src/main/java/com/binance/connector/client/utils/UrlBuilder.java.UrlBuilder.[StringBuilder]joinQueryParameters(StringBuilder,Map<String, Object>)", "name": "joinQueryParameters", "arg_nums": 2, "params": [{"name": "sb", "type": "StringBuilder"}, {"name": "params", "type": "Map<String, Object>"}], "return_type": "StringBuilder", "signature": "public static StringBuilder joinQueryParameters(StringBuilder sb, Map<String, Object> params)", "original_string": "    public static StringBuilder joinQueryParameters(StringBuilder sb, Map<String, Object> params) {\n        if (params != null && !params.isEmpty()) {\n            Iterator<String> keys = params.keySet().iterator();\n            while (keys.hasNext()) {\n                String key = keys.next();\n                sb.append(key);\n                sb.append(\"=\");\n\n                String value;\n                if (params.get(key) instanceof Double) {\n                    value = getFormatter().format(params.get(key));\n                } else {\n                    value = params.get(key).toString();\n                }\n                sb.append(urlEncode(value));\n\n                sb.append(\"&\");\n            }\n            sb.deleteCharAt(sb.length() - DIFF_TILL_POSITION_INDEX);\n        }\n        return sb;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/UrlBuilder.java", "class_name": "UrlBuilder", "class_uri": "src/main/java/com/binance/connector/client/utils/UrlBuilder.java.UrlBuilder", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "StringBuilder", "classes": []}, "docstring": "\nJoins query parameters from a Map into a StringBuilder representation.\n@param sb The StringBuilder to append the query parameters to.\n@param params The Map containing the query parameters.\n@return The StringBuilder representation of the joined query parameters.\n"}, {"uris": "src/main/java/com/binance/connector/client/utils/UrlBuilder.java.UrlBuilder.[String]joinStreamUrls(ArrayList<String>)", "name": "joinStreamUrls", "arg_nums": 1, "params": [{"name": "streams", "type": "ArrayList<String>"}], "return_type": "String", "signature": "public static String joinStreamUrls(ArrayList<String> streams)", "original_string": "    public static String joinStreamUrls(ArrayList<String> streams) {\n        return joinStreamUrls(new StringBuilder(), streams).toString();\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/UrlBuilder.java", "class_name": "UrlBuilder", "class_uri": "src/main/java/com/binance/connector/client/utils/UrlBuilder.java.UrlBuilder", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nJoins streams from an ArrayList into a String representation.\n@param params The ArrayList containing the streams.\n@return The String representation of the joined streams.\n"}, {"uris": "src/main/java/com/binance/connector/client/utils/UrlBuilder.java.UrlBuilder.[StringBuilder]joinStreamUrls(StringBuilder,ArrayList<String>)", "name": "joinStreamUrls", "arg_nums": 2, "params": [{"name": "sb", "type": "StringBuilder"}, {"name": "streams", "type": "ArrayList<String>"}], "return_type": "StringBuilder", "signature": "public static StringBuilder joinStreamUrls(StringBuilder sb, ArrayList<String> streams)", "original_string": "    public static StringBuilder joinStreamUrls(StringBuilder sb, ArrayList<String> streams) {\n\n        if (streams != null && !streams.isEmpty()) {\n            for (String stream: streams) {\n                sb.append(stream);\n                sb.append(\"/\");\n            }\n            sb.deleteCharAt(sb.length() - DIFF_TILL_POSITION_INDEX);\n        }\n        return sb;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/UrlBuilder.java", "class_name": "UrlBuilder", "class_uri": "src/main/java/com/binance/connector/client/utils/UrlBuilder.java.UrlBuilder", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "StringBuilder", "classes": []}, "docstring": "\nJoins streams from an ArrayList into a StringBuilder representation.\n@param sb The StringBuilder to append the streams to.\n@param params The ArrayList containing the streams.\n@return The StringBuilder representation of the joined streams.\n"}, {"uris": "src/main/java/com/binance/connector/client/utils/UrlBuilder.java.UrlBuilder.[String]urlEncode(String)", "name": "urlEncode", "arg_nums": 1, "params": [{"name": "s", "type": "String"}], "return_type": "String", "signature": "public static String urlEncode(String s)", "original_string": "    public static String urlEncode(String s) {\n        try {\n            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());\n        } catch (UnsupportedEncodingException e) {\n            throw new RuntimeException(StandardCharsets.UTF_8.name() + \" is unsupported\", e);\n        }\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/UrlBuilder.java", "class_name": "UrlBuilder", "class_uri": "src/main/java/com/binance/connector/client/utils/UrlBuilder.java.UrlBuilder", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/utils/UrlBuilder.java.UrlBuilder.[String]buildTimestamp()", "name": "buildTimestamp", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public static String buildTimestamp()", "original_string": "    public static String buildTimestamp() {\n        return String.valueOf(System.currentTimeMillis());\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/UrlBuilder.java", "class_name": "UrlBuilder", "class_uri": "src/main/java/com/binance/connector/client/utils/UrlBuilder.java.UrlBuilder", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/utils/UrlBuilder.java.UrlBuilder.[DecimalFormat]getFormatter()", "name": "getFormatter", "arg_nums": 0, "params": [], "return_type": "DecimalFormat", "signature": "private static DecimalFormat getFormatter()", "original_string": "    private static DecimalFormat getFormatter() {\n        if (null == df) {\n            // Overrides the default Locale\n            DecimalFormatSymbols symbols = new DecimalFormatSymbols(Locale.ENGLISH);\n            df = new DecimalFormat(\"#,##0.###\", symbols);\n            df.setMaximumFractionDigits(MAX_DECIMAL_DIGITS);\n            df.setGroupingUsed(false);\n        }\n        return df;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/UrlBuilder.java", "class_name": "UrlBuilder", "class_uri": "src/main/java/com/binance/connector/client/utils/UrlBuilder.java.UrlBuilder", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "DecimalFormat", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/utils/RequestHandler.java.RequestHandler.[]RequestHandler(String,ProxyAuth)", "name": "RequestHandler", "arg_nums": 2, "params": [{"name": "apiKey", "type": "String"}, {"name": "proxy", "type": "ProxyAuth"}], "return_type": "", "signature": "public RequestHandler(String apiKey, ProxyAuth proxy)", "original_string": "    public RequestHandler(String apiKey, ProxyAuth proxy) {\n        this(apiKey, null, proxy);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/RequestHandler.java", "class_name": "RequestHandler", "class_uri": "src/main/java/com/binance/connector/client/utils/RequestHandler.java.RequestHandler", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/utils/RequestHandler.java.RequestHandler.[]RequestHandler(String,SignatureGenerator,ProxyAuth)", "name": "RequestHandler", "arg_nums": 3, "params": [{"name": "apiKey", "type": "String"}, {"name": "signatureGenerator", "type": "SignatureGenerator"}, {"name": "proxy", "type": "ProxyAuth"}], "return_type": "", "signature": "public RequestHandler(String apiKey, SignatureGenerator signatureGenerator, ProxyAuth proxy)", "original_string": "    public RequestHandler(String apiKey, SignatureGenerator signatureGenerator, ProxyAuth proxy) {\n        this.apiKey = apiKey;\n        this.signatureGenerator = signatureGenerator;\n        this.proxy = proxy;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/RequestHandler.java", "class_name": "RequestHandler", "class_uri": "src/main/java/com/binance/connector/client/utils/RequestHandler.java.RequestHandler", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/utils/RequestHandler.java.RequestHandler.[String]sendPublicRequest(String,String,Map<String, Object>,HttpMethod,boolean)", "name": "sendPublicRequest", "arg_nums": 5, "params": [{"name": "baseUrl", "type": "String"}, {"name": "urlPath", "type": "String"}, {"name": "parameters", "type": "Map<String, Object>"}, {"name": "httpMethod", "type": "HttpMethod"}, {"name": "showLimitUsage", "type": "boolean"}], "return_type": "String", "signature": "public String sendPublicRequest(String baseUrl, String urlPath, Map<String, Object> parameters, HttpMethod httpMethod, boolean showLimitUsage)", "original_string": "    public String sendPublicRequest(String baseUrl, String urlPath, Map<String, Object> parameters, HttpMethod httpMethod, boolean showLimitUsage) {\n        String fullUrl = UrlBuilder.buildFullUrl(baseUrl, urlPath, parameters);\n        logger.info(\"{} {}\", httpMethod, fullUrl);\n\n        return ResponseHandler.handleResponse(RequestBuilder.buildPublicRequest(fullUrl, httpMethod), showLimitUsage, proxy);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/RequestHandler.java", "class_name": "RequestHandler", "class_uri": "src/main/java/com/binance/connector/client/utils/RequestHandler.java.RequestHandler", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/utils/RequestHandler.java.RequestHandler.[String]sendApiRequest(String,String,Map<String, Object>,HttpMethod,boolean)", "name": "sendApiRequest", "arg_nums": 5, "params": [{"name": "baseUrl", "type": "String"}, {"name": "urlPath", "type": "String"}, {"name": "parameters", "type": "Map<String, Object>"}, {"name": "httpMethod", "type": "HttpMethod"}, {"name": "showLimitUsage", "type": "boolean"}], "return_type": "String", "signature": "public String sendApiRequest(String baseUrl, String urlPath, Map<String, Object> parameters, HttpMethod httpMethod, boolean showLimitUsage)", "original_string": "    public String sendApiRequest(String baseUrl, String urlPath, Map<String, Object> parameters, HttpMethod httpMethod, boolean showLimitUsage) {\n        if (null == apiKey || apiKey.isEmpty()) {\n            throw new BinanceConnectorException(\"[RequestHandler] API key cannot be null or empty!\");\n        }\n\n        String fullUrl = UrlBuilder.buildFullUrl(baseUrl, urlPath, parameters);\n        logger.info(\"{} {}\", httpMethod, fullUrl);\n\n        return ResponseHandler.handleResponse(RequestBuilder.buildApiKeyRequest(fullUrl, httpMethod, apiKey), showLimitUsage, proxy);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/RequestHandler.java", "class_name": "RequestHandler", "class_uri": "src/main/java/com/binance/connector/client/utils/RequestHandler.java.RequestHandler", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/utils/RequestHandler.java.RequestHandler.[String]sendSignedRequest(String,String,Map<String, Object>,HttpMethod,boolean)", "name": "sendSignedRequest", "arg_nums": 5, "params": [{"name": "baseUrl", "type": "String"}, {"name": "urlPath", "type": "String"}, {"name": "parameters", "type": "Map<String, Object>"}, {"name": "httpMethod", "type": "HttpMethod"}, {"name": "showLimitUsage", "type": "boolean"}], "return_type": "String", "signature": "public String sendSignedRequest(String baseUrl, String urlPath, Map<String, Object> parameters, HttpMethod httpMethod, boolean showLimitUsage)", "original_string": "    public String sendSignedRequest(String baseUrl, String urlPath, Map<String, Object> parameters, HttpMethod httpMethod, boolean showLimitUsage) {                          \n        if (signatureGenerator.getClass() == HmacSignatureGenerator.class && (null == apiKey || apiKey.isEmpty())) {\n            throw new BinanceConnectorException(\"[RequestHandler] Secret key/API key cannot be null or empty!\");\n        }\n        if ((signatureGenerator.getClass() == RsaSignatureGenerator.class || signatureGenerator.getClass() == Ed25519SignatureGenerator.class) && (null == apiKey || apiKey.isEmpty())) {\n            throw new BinanceConnectorException(\"[RequestHandler] Private key/API key cannot be null or empty!\");\n        }\n\n        parameters = (parameters == null) ? new HashMap<String, Object>() : parameters;\n        parameters.putIfAbsent(\"timestamp\", UrlBuilder.buildTimestamp());\n        parameters.put(\"signature\", this.signatureGenerator.getSignature(UrlBuilder.joinQueryParameters(parameters)));\n\n        String fullUrl = UrlBuilder.buildFullUrl(baseUrl, urlPath, parameters);\n        logger.info(\"{} {}\", httpMethod, fullUrl);\n\n        return ResponseHandler.handleResponse(RequestBuilder.buildApiKeyRequest(fullUrl, httpMethod, apiKey), showLimitUsage, proxy);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/RequestHandler.java", "class_name": "RequestHandler", "class_uri": "src/main/java/com/binance/connector/client/utils/RequestHandler.java.RequestHandler", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/utils/JSONParser.java.JSONParser.[]JSONParser()", "name": "JSONParser", "arg_nums": 0, "params": [], "return_type": "", "signature": "private JSONParser()", "original_string": "    private JSONParser() {\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/JSONParser.java", "class_name": "JSONParser", "class_uri": "src/main/java/com/binance/connector/client/utils/JSONParser.java.JSONParser", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/utils/JSONParser.java.JSONParser.[String]getJSONStringValue(String,String)", "name": "getJSONStringValue", "arg_nums": 2, "params": [{"name": "json", "type": "String"}, {"name": "key", "type": "String"}], "return_type": "String", "signature": "public static String getJSONStringValue(String json, String key)", "original_string": "    public static String getJSONStringValue(String json, String key) {\n        try {\n            JSONObject obj = new JSONObject(json);\n            return obj.getString(key);\n        } catch (JSONException e) {\n            throw new JSONException(String.format(\"[JSONParser] Failed to get \\\"%s\\\"  from JSON object\", key));\n        }\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/JSONParser.java", "class_name": "JSONParser", "class_uri": "src/main/java/com/binance/connector/client/utils/JSONParser.java.JSONParser", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/utils/JSONParser.java.JSONParser.[int]getJSONIntValue(String,String)", "name": "getJSONIntValue", "arg_nums": 2, "params": [{"name": "json", "type": "String"}, {"name": "key", "type": "String"}], "return_type": "int", "signature": "public static int getJSONIntValue(String json, String key)", "original_string": "    public static int getJSONIntValue(String json, String key) {\n        try {\n            JSONObject obj = new JSONObject(json);\n            return obj.getInt(key);\n        } catch (JSONException e) {\n            throw new JSONException(String.format(\"[JSONParser] Failed to get \\\"%s\\\" from JSON object\", key));\n        }\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/JSONParser.java", "class_name": "JSONParser", "class_uri": "src/main/java/com/binance/connector/client/utils/JSONParser.java.JSONParser", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/utils/JSONParser.java.JSONParser.[String]getJSONArray(ArrayList<?>,String)", "name": "getJSONArray", "arg_nums": 2, "params": [{"name": "symbols", "type": "ArrayList<?>"}, {"name": "key", "type": "String"}], "return_type": "String", "signature": "public static String getJSONArray(ArrayList<?> symbols, String key)", "original_string": "    public static String getJSONArray(ArrayList<?> symbols, String key) {\n        try {\n            JSONArray arr = new JSONArray(symbols);\n            return arr.toString();\n        } catch (JSONException e) {\n            throw new JSONException(String.format(\"[JSONParser] Failed to convert \\\"%s\\\" to JSON array\", key));\n        }\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/JSONParser.java", "class_name": "JSONParser", "class_uri": "src/main/java/com/binance/connector/client/utils/JSONParser.java.JSONParser", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/utils/JSONParser.java.JSONParser.[String]buildJSONString(Object,String,JSONObject)", "name": "buildJSONString", "arg_nums": 3, "params": [{"name": "id", "type": "Object"}, {"name": "method", "type": "String"}, {"name": "parameters", "type": "JSONObject"}], "return_type": "String", "signature": "public static String buildJSONString(Object id, String method, JSONObject parameters)", "original_string": "    public static String buildJSONString(Object id, String method, JSONObject parameters) {\n        try {\n            JSONObject json = new JSONObject();\n            json.put(\"id\", id);\n            json.put(\"method\", method);\n            json.put(\"params\", parameters);\n            return json.toString();\n        } catch (JSONException e) {\n            throw new JSONException(String.format(\"[JSONParser] Failed to convert to JSON string\"));\n        }\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/JSONParser.java", "class_name": "JSONParser", "class_uri": "src/main/java/com/binance/connector/client/utils/JSONParser.java.JSONParser", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/utils/JSONParser.java.JSONParser.[Map<String, Object>]sortJSONObject(JSONObject)", "name": "sortJSONObject", "arg_nums": 1, "params": [{"name": "parameters", "type": "JSONObject"}], "return_type": "Map<String, Object>", "signature": "public static Map<String, Object> sortJSONObject(JSONObject parameters)", "original_string": "    public static Map<String, Object> sortJSONObject(JSONObject parameters) {\n        LinkedList<String> keys = new LinkedList<>(parameters.keySet());\n        Map<String, Object> sortedParams = new LinkedHashMap<>();\n        keys.stream().sorted().forEach(key -> sortedParams.put(key, parameters.get(key)));\n\n        return sortedParams;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/JSONParser.java", "class_name": "JSONParser", "class_uri": "src/main/java/com/binance/connector/client/utils/JSONParser.java.JSONParser", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Map<String, Object>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/utils/JSONParser.java.JSONParser.[JSONObject]addKeyValue(JSONObject,String,Object)", "name": "addKeyValue", "arg_nums": 3, "params": [{"name": "parameters", "type": "JSONObject"}, {"name": "key", "type": "String"}, {"name": "value", "type": "Object"}], "return_type": "JSONObject", "signature": "public static JSONObject addKeyValue(JSONObject parameters, String key, Object value)", "original_string": "    public static JSONObject addKeyValue(JSONObject parameters, String key, Object value) {\n        if (parameters == null) {\n            parameters = new JSONObject();\n        }\n\n        return parameters.put(key, value);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/JSONParser.java", "class_name": "JSONParser", "class_uri": "src/main/java/com/binance/connector/client/utils/JSONParser.java.JSONParser", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "JSONObject", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/utils/JSONParser.java.JSONParser.[Object]pullValue(JSONObject,String)", "name": "pullValue", "arg_nums": 2, "params": [{"name": "parameters", "type": "JSONObject"}, {"name": "key", "type": "String"}], "return_type": "Object", "signature": "public static Object pullValue(JSONObject parameters, String key)", "original_string": "    public static Object pullValue(JSONObject parameters, String key) {\n        if (parameters == null) {\n            return null;\n        }\n        Object value = parameters.opt(key);\n        parameters.remove(key);\n        return value;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/JSONParser.java", "class_name": "JSONParser", "class_uri": "src/main/java/com/binance/connector/client/utils/JSONParser.java.JSONParser", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Object", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/utils/RequestBuilder.java.RequestBuilder.[]RequestBuilder()", "name": "RequestBuilder", "arg_nums": 0, "params": [], "return_type": "", "signature": "private RequestBuilder()", "original_string": "    private RequestBuilder() {\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/RequestBuilder.java", "class_name": "RequestBuilder", "class_uri": "src/main/java/com/binance/connector/client/utils/RequestBuilder.java.RequestBuilder", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/utils/RequestBuilder.java.RequestBuilder.[Request]buildPublicRequest(String,HttpMethod)", "name": "buildPublicRequest", "arg_nums": 2, "params": [{"name": "fullUrl", "type": "String"}, {"name": "httpMethod", "type": "HttpMethod"}], "return_type": "Request", "signature": "public static Request buildPublicRequest(String fullUrl, HttpMethod httpMethod)", "original_string": "    public static Request buildPublicRequest(String fullUrl, HttpMethod httpMethod) {\n        try {\n            final Request.Builder requestBuilder = new Request.Builder().addHeader(\"User-Agent\", USER_AGENT).addHeader(\"Content-Type\", CONTENT_TYPE).url(fullUrl);\n            switch (httpMethod) {\n                case POST:\n                    return requestBuilder.post(RequestBody.create(\"\", JSON_TYPE)).build();\n                case GET:\n                    return requestBuilder.get().build();\n                case PUT:\n                    return requestBuilder.put(RequestBody.create(\"\", JSON_TYPE)).build();\n                case DELETE:\n                    return requestBuilder.delete().build();\n                default:\n                    throw new BinanceConnectorException(\"Invalid HTTP method: \" + httpMethod);\n            }\n        } catch (IllegalArgumentException e) {\n            throw new BinanceConnectorException(\"Invalid URL: \" + e.getMessage());\n        }\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/RequestBuilder.java", "class_name": "RequestBuilder", "class_uri": "src/main/java/com/binance/connector/client/utils/RequestBuilder.java.RequestBuilder", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Request", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/utils/RequestBuilder.java.RequestBuilder.[Request]buildApiKeyRequest(String,HttpMethod,String)", "name": "buildApiKeyRequest", "arg_nums": 3, "params": [{"name": "fullUrl", "type": "String"}, {"name": "httpMethod", "type": "HttpMethod"}, {"name": "apiKey", "type": "String"}], "return_type": "Request", "signature": "public static Request buildApiKeyRequest(String fullUrl, HttpMethod httpMethod, String apiKey)", "original_string": "    public static Request buildApiKeyRequest(String fullUrl, HttpMethod httpMethod, String apiKey) {\n        try {\n            final Request.Builder requestBuilder = new Request.Builder().addHeader(\"User-Agent\", USER_AGENT).addHeader(\"Content-Type\", CONTENT_TYPE).addHeader(\"X-MBX-APIKEY\", apiKey).url(fullUrl);\n            switch (httpMethod) {\n                case POST:\n                    return requestBuilder.post(RequestBody.create(\"\", JSON_TYPE)).build();\n                case GET:\n                    return requestBuilder.get().build();\n                case PUT:\n                    return requestBuilder.put(RequestBody.create(\"\", JSON_TYPE)).build();\n                case DELETE:\n                    return requestBuilder.delete().build();\n                default:\n                    throw new BinanceConnectorException(\"Invalid HTTP method: \" + httpMethod);\n            }\n        } catch (IllegalArgumentException e) {\n            throw new BinanceConnectorException(\"Invalid URL: \" + e.getMessage());\n        }\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/RequestBuilder.java", "class_name": "RequestBuilder", "class_uri": "src/main/java/com/binance/connector/client/utils/RequestBuilder.java.RequestBuilder", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Request", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/utils/RequestBuilder.java.RequestBuilder.[Request]buildWebSocketRequest(String)", "name": "buildWebSocketRequest", "arg_nums": 1, "params": [{"name": "fullUrl", "type": "String"}], "return_type": "Request", "signature": "public static Request buildWebSocketRequest(String fullUrl)", "original_string": "    public static Request buildWebSocketRequest(String fullUrl) {\n        return new Request.Builder().url(fullUrl).build();\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/RequestBuilder.java", "class_name": "RequestBuilder", "class_uri": "src/main/java/com/binance/connector/client/utils/RequestBuilder.java.RequestBuilder", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Request", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/utils/WebSocketConnection.java.WebSocketConnection.[]WebSocketConnection(WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback,Request,OkHttpClient)", "name": "WebSocketConnection", "arg_nums": 7, "params": [{"name": "onOpenCallback", "type": "WebSocketOpenCallback"}, {"name": "onMessageCallback", "type": "WebSocketMessageCallback"}, {"name": "onClosingCallback", "type": "WebSocketClosingCallback"}, {"name": "onClosedCallback", "type": "WebSocketClosedCallback"}, {"name": "onFailureCallback", "type": "WebSocketFailureCallback"}, {"name": "request", "type": "Request"}, {"name": "client", "type": "OkHttpClient"}], "return_type": "", "signature": "public WebSocketConnection(\n\t\t\tWebSocketOpenCallback onOpenCallback,\n\t\t\tWebSocketMessageCallback onMessageCallback,\n\t\t\tWebSocketClosingCallback onClosingCallback,\n            WebSocketClosedCallback onClosedCallback,\n\t\t\tWebSocketFailureCallback onFailureCallback,\n            Request request,\n            OkHttpClient client\n    )", "original_string": "    public WebSocketConnection(\n\t\t\tWebSocketOpenCallback onOpenCallback,\n\t\t\tWebSocketMessageCallback onMessageCallback,\n\t\t\tWebSocketClosingCallback onClosingCallback,\n            WebSocketClosedCallback onClosedCallback,\n\t\t\tWebSocketFailureCallback onFailureCallback,\n            Request request,\n            OkHttpClient client\n    ) {\n        this.onOpenCallback = onOpenCallback;\n        this.onMessageCallback = onMessageCallback;\n        this.onClosingCallback = onClosingCallback;\n        this.onClosedCallback = onClosedCallback;\n        this.onFailureCallback = onFailureCallback;\n        this.connectionId = WebSocketConnection.connectionCounter.incrementAndGet();\n        this.request = request;\n        this.streamName = request.url().host() + request.url().encodedPath();\n        this.webSocket = null;\n        this.mutex = new Object();\n        WebSocketConnection.client = client;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/WebSocketConnection.java", "class_name": "WebSocketConnection", "class_uri": "src/main/java/com/binance/connector/client/utils/WebSocketConnection.java.WebSocketConnection", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/utils/WebSocketConnection.java.WebSocketConnection.[void]connect()", "name": "connect", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void connect()", "original_string": "    public void connect() {\n        synchronized (mutex) {\n            if (null == webSocket) {\n                logger.info(\"[Connection {}] Connecting to {}\", connectionId, streamName);\n                webSocket = client.newWebSocket(request, this);\n            } else {\n                logger.info(\"[Connection {}] is already connected to {}\", connectionId, streamName);\n            }\n        }\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/WebSocketConnection.java", "class_name": "WebSocketConnection", "class_uri": "src/main/java/com/binance/connector/client/utils/WebSocketConnection.java.WebSocketConnection", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/utils/WebSocketConnection.java.WebSocketConnection.[int]getConnectionId()", "name": "getConnectionId", "arg_nums": 0, "params": [], "return_type": "int", "signature": "public int getConnectionId()", "original_string": "    public int getConnectionId() {\n        return connectionId;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/WebSocketConnection.java", "class_name": "WebSocketConnection", "class_uri": "src/main/java/com/binance/connector/client/utils/WebSocketConnection.java.WebSocketConnection", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/utils/WebSocketConnection.java.WebSocketConnection.[boolean]getSessionStatus()", "name": "getSessionStatus", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "public boolean getSessionStatus()", "original_string": "    public boolean getSessionStatus() {\n        return sessionStatus;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/WebSocketConnection.java", "class_name": "WebSocketConnection", "class_uri": "src/main/java/com/binance/connector/client/utils/WebSocketConnection.java.WebSocketConnection", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/utils/WebSocketConnection.java.WebSocketConnection.[void]send(String)", "name": "send", "arg_nums": 1, "params": [{"name": "message", "type": "String"}], "return_type": "void", "signature": "public void send(String message)", "original_string": "    public void send(String message) {\n        if (null == webSocket) {\n            throw new BinanceConnectorException(\"No WebSocket connection. Please connect first!\");\n        } \n        webSocket.send(message);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/WebSocketConnection.java", "class_name": "WebSocketConnection", "class_uri": "src/main/java/com/binance/connector/client/utils/WebSocketConnection.java.WebSocketConnection", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/utils/WebSocketConnection.java.WebSocketConnection.[void]close()", "name": "close", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void close()", "original_string": "    public void close() {\n        if (null != webSocket) {\n            logger.info(\"[Connection {}] Closing connection to {}\", connectionId, streamName);\n            webSocket.close(NORMAL_CLOSURE_STATUS, null);\n        }\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/WebSocketConnection.java", "class_name": "WebSocketConnection", "class_uri": "src/main/java/com/binance/connector/client/utils/WebSocketConnection.java.WebSocketConnection", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/utils/WebSocketConnection.java.WebSocketConnection.[void]onOpen(WebSocket,Response)", "name": "onOpen", "arg_nums": 2, "params": [{"name": "ws", "type": "WebSocket"}, {"name": "response", "type": "Response"}], "return_type": "void", "signature": "@Override\n    public void onOpen(WebSocket ws, Response response)", "original_string": "    @Override\n    public void onOpen(WebSocket ws, Response response) {\n        logger.info(\"[Connection {}] Connected to Server\", connectionId);\n        onOpenCallback.onOpen(response);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/WebSocketConnection.java", "class_name": "WebSocketConnection", "class_uri": "src/main/java/com/binance/connector/client/utils/WebSocketConnection.java.WebSocketConnection", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/utils/WebSocketConnection.java.WebSocketConnection.[void]onClosing(WebSocket,int,String)", "name": "onClosing", "arg_nums": 3, "params": [{"name": "ws", "type": "WebSocket"}, {"name": "code", "type": "int"}, {"name": "reason", "type": "String"}], "return_type": "void", "signature": "@Override\n    public void onClosing(WebSocket ws, int code, String reason)", "original_string": "    @Override\n    public void onClosing(WebSocket ws, int code, String reason) {\n        super.onClosing(ws, code, reason);\n        onClosingCallback.onClosing(code, reason);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/WebSocketConnection.java", "class_name": "WebSocketConnection", "class_uri": "src/main/java/com/binance/connector/client/utils/WebSocketConnection.java.WebSocketConnection", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/utils/WebSocketConnection.java.WebSocketConnection.[void]onClosed(WebSocket,int,String)", "name": "onClosed", "arg_nums": 3, "params": [{"name": "ws", "type": "WebSocket"}, {"name": "code", "type": "int"}, {"name": "reason", "type": "String"}], "return_type": "void", "signature": "@Override\n    public void onClosed(WebSocket ws, int code, String reason)", "original_string": "    @Override\n    public void onClosed(WebSocket ws, int code, String reason) {\n        super.onClosed(ws, code, reason);\n        onClosedCallback.onClosed(code, reason);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/WebSocketConnection.java", "class_name": "WebSocketConnection", "class_uri": "src/main/java/com/binance/connector/client/utils/WebSocketConnection.java.WebSocketConnection", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/utils/WebSocketConnection.java.WebSocketConnection.[void]onMessage(WebSocket,String)", "name": "onMessage", "arg_nums": 2, "params": [{"name": "ws", "type": "WebSocket"}, {"name": "text", "type": "String"}], "return_type": "void", "signature": "@Override\n    public void onMessage(WebSocket ws, String text)", "original_string": "    @Override\n    public void onMessage(WebSocket ws, String text) {\n\n        // session status\n        if (text.contains(\"authorizedSince\")) {\n            JSONObject result =  new JSONObject(text).getJSONObject(\"result\");\n            WebSocketConnection.sessionStatus = !result.isNull(\"authorizedSince\");\n        }\n        onMessageCallback.onMessage(text);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/WebSocketConnection.java", "class_name": "WebSocketConnection", "class_uri": "src/main/java/com/binance/connector/client/utils/WebSocketConnection.java.WebSocketConnection", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/utils/WebSocketConnection.java.WebSocketConnection.[void]onFailure(WebSocket,Throwable,Response)", "name": "onFailure", "arg_nums": 3, "params": [{"name": "ws", "type": "WebSocket"}, {"name": "t", "type": "Throwable"}, {"name": "response", "type": "Response"}], "return_type": "void", "signature": "@Override\n    public void onFailure(WebSocket ws, Throwable t, Response response)", "original_string": "    @Override\n    public void onFailure(WebSocket ws, Throwable t, Response response) {\n        logger.error(\"[Connection {}] Failure\", connectionId, t);\n        onFailureCallback.onFailure(t, response);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/WebSocketConnection.java", "class_name": "WebSocketConnection", "class_uri": "src/main/java/com/binance/connector/client/utils/WebSocketConnection.java.WebSocketConnection", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/utils/ResponseHandler.java.ResponseHandler.[]ResponseHandler()", "name": "ResponseHandler", "arg_nums": 0, "params": [], "return_type": "", "signature": "private ResponseHandler()", "original_string": "    private ResponseHandler() {\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/ResponseHandler.java", "class_name": "ResponseHandler", "class_uri": "src/main/java/com/binance/connector/client/utils/ResponseHandler.java.ResponseHandler", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/utils/ResponseHandler.java.ResponseHandler.[String]handleResponse(Request,boolean,ProxyAuth)", "name": "handleResponse", "arg_nums": 3, "params": [{"name": "request", "type": "Request"}, {"name": "showLimitUsage", "type": "boolean"}, {"name": "proxy", "type": "ProxyAuth"}], "return_type": "String", "signature": "public static String handleResponse(Request request, boolean showLimitUsage, ProxyAuth proxy)", "original_string": "    public static String handleResponse(Request request, boolean showLimitUsage, ProxyAuth proxy) {\n        client = HttpClientSingleton.getHttpClient(proxy);\n        try (Response response = client.newCall(request).execute()) {\n            if (null == response) {\n                throw new BinanceServerException(\"[ResponseHandler] No response from server\");\n            }\n\n            String responseAsString = getResponseBodyAsString(response.body());\n\n            if (response.code() >= HTTP_STATUS_CODE_400 && response.code() <= HTTP_STATUS_CODE_499) {\n                throw handleErrorResponse(responseAsString, response.code());\n            } else if (response.code() >= HTTP_STATUS_CODE_500) {\n                throw new BinanceServerException(responseAsString, response.code());\n            }\n\n            if (showLimitUsage) {\n                return getLimitUsage(response, responseAsString);\n            } else {\n                return responseAsString;\n            }\n        } catch (IOException | IllegalStateException e) {\n            String exceptionMsg = \"OKHTTP Error: \";\n            if (proxy != null) {\n                if ((e.getClass().equals(ConnectException.class))) {\n                    exceptionMsg = \"Proxy Connection Error: \";\n                } else if ((e.getClass().equals(UnknownHostException.class))) {\n                    exceptionMsg = \"Proxy Unknown Host Error: \";\n                }\n            }\n            throw new BinanceConnectorException(\"[ResponseHandler] \" + exceptionMsg + e.getMessage());\n        }\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/ResponseHandler.java", "class_name": "ResponseHandler", "class_uri": "src/main/java/com/binance/connector/client/utils/ResponseHandler.java.ResponseHandler", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/utils/ResponseHandler.java.ResponseHandler.[String]getLimitUsage(Response,String)", "name": "getLimitUsage", "arg_nums": 2, "params": [{"name": "response", "type": "Response"}, {"name": "resposeBodyAsString", "type": "String"}], "return_type": "String", "signature": "private static String getLimitUsage(Response response, String resposeBodyAsString)", "original_string": "    private static String getLimitUsage(Response response, String resposeBodyAsString) {\n        JSONObject json = new JSONObject();\n        json.put(\"x-sapi-used-ip-weight-1m\", response.header(\"X-SAPI-USED-IP-WEIGHT-1M\"));\n        json.put(\"x-sapi-used-uid-weight-1m\", response.header(\"X-SAPI-USED-UID-WEIGHT-1M\"));\n        json.put(\"x-mbx-used-weight\", response.header(\"x-mbx-used-weight\"));\n        json.put(\"x-mbx-used-weight-1m\", response.header(\"x-mbx-used-weight-1m\"));\n        json.put(\"data\", resposeBodyAsString);\n\n        return json.toString();\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/ResponseHandler.java", "class_name": "ResponseHandler", "class_uri": "src/main/java/com/binance/connector/client/utils/ResponseHandler.java.ResponseHandler", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/utils/ResponseHandler.java.ResponseHandler.[BinanceClientException]handleErrorResponse(String,int)", "name": "handleErrorResponse", "arg_nums": 2, "params": [{"name": "responseBody", "type": "String"}, {"name": "responseCode", "type": "int"}], "return_type": "BinanceClientException", "signature": "private static BinanceClientException handleErrorResponse(String responseBody, int responseCode)", "original_string": "    private static BinanceClientException handleErrorResponse(String responseBody, int responseCode) {\n        try {\n            String errorMsg = JSONParser.getJSONStringValue(responseBody, \"msg\");\n            int errorCode = JSONParser.getJSONIntValue(responseBody, \"code\");\n            return new BinanceClientException(responseBody, errorMsg, responseCode, errorCode);\n        } catch (JSONException e) {\n            throw new BinanceClientException(responseBody, responseCode);\n        }\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/ResponseHandler.java", "class_name": "ResponseHandler", "class_uri": "src/main/java/com/binance/connector/client/utils/ResponseHandler.java.ResponseHandler", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "BinanceClientException", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/utils/ResponseHandler.java.ResponseHandler.[String]getResponseBodyAsString(ResponseBody)", "name": "getResponseBodyAsString", "arg_nums": 1, "params": [{"name": "body", "type": "ResponseBody"}], "return_type": "String", "signature": "private static String getResponseBodyAsString(ResponseBody body)", "original_string": "    private static String getResponseBodyAsString(ResponseBody body) throws IOException {\n        if (null != body) {\n            return body.string();\n        } else {\n            return \"\";\n        }\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/ResponseHandler.java", "class_name": "ResponseHandler", "class_uri": "src/main/java/com/binance/connector/client/utils/ResponseHandler.java.ResponseHandler", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/utils/ProxyAuth.java.ProxyAuth.[]ProxyAuth(Proxy,Authenticator)", "name": "ProxyAuth", "arg_nums": 2, "params": [{"name": "proxy", "type": "Proxy"}, {"name": "auth", "type": "Authenticator"}], "return_type": "", "signature": "public ProxyAuth(Proxy proxy, Authenticator auth)", "original_string": "    public ProxyAuth(Proxy proxy, Authenticator auth) {\n        this.proxy = proxy;\n        this.auth = auth;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/ProxyAuth.java", "class_name": "ProxyAuth", "class_uri": "src/main/java/com/binance/connector/client/utils/ProxyAuth.java.ProxyAuth", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/utils/ProxyAuth.java.ProxyAuth.[Proxy]getProxy()", "name": "getProxy", "arg_nums": 0, "params": [], "return_type": "Proxy", "signature": "public Proxy getProxy()", "original_string": "    public Proxy getProxy() {\n        return proxy;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/ProxyAuth.java", "class_name": "ProxyAuth", "class_uri": "src/main/java/com/binance/connector/client/utils/ProxyAuth.java.ProxyAuth", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Proxy", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/utils/ProxyAuth.java.ProxyAuth.[Authenticator]getAuth()", "name": "getAuth", "arg_nums": 0, "params": [], "return_type": "Authenticator", "signature": "public Authenticator getAuth()", "original_string": "    public Authenticator getAuth() {\n        return auth;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/ProxyAuth.java", "class_name": "ProxyAuth", "class_uri": "src/main/java/com/binance/connector/client/utils/ProxyAuth.java.ProxyAuth", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Authenticator", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/utils/ParameterChecker.java.ParameterChecker.[]ParameterChecker()", "name": "ParameterChecker", "arg_nums": 0, "params": [], "return_type": "", "signature": "private ParameterChecker()", "original_string": "    private ParameterChecker() {\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/ParameterChecker.java", "class_name": "ParameterChecker", "class_uri": "src/main/java/com/binance/connector/client/utils/ParameterChecker.java.ParameterChecker", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/utils/ParameterChecker.java.ParameterChecker.[void]checkParameter(Map<String, Object>,String,Class<?>)", "name": "checkParameter", "arg_nums": 3, "params": [{"name": "parameters", "type": "Map<String, Object>"}, {"name": "parameter", "type": "String"}, {"name": "t", "type": "Class<?>"}], "return_type": "void", "signature": "public static void checkParameter(Map<String, Object> parameters, String parameter, Class<?> t)", "original_string": "    public static void checkParameter(Map<String, Object> parameters, String parameter, Class<?> t) {\n        checkRequiredParameter(parameters, parameter);\n        checkParameterType(parameters.get(parameter), t, parameter);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/ParameterChecker.java", "class_name": "ParameterChecker", "class_uri": "src/main/java/com/binance/connector/client/utils/ParameterChecker.java.ParameterChecker", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/utils/ParameterChecker.java.ParameterChecker.[void]checkRequiredParameter(Map<String, Object>,String)", "name": "checkRequiredParameter", "arg_nums": 2, "params": [{"name": "parameters", "type": "Map<String, Object>"}, {"name": "parameter", "type": "String"}], "return_type": "void", "signature": "public static void checkRequiredParameter(Map<String, Object> parameters, String parameter)", "original_string": "    public static void checkRequiredParameter(Map<String, Object> parameters, String parameter) {\n        if (!parameters.containsKey(parameter)) {\n            throw new BinanceConnectorException(String.format(\"\\\"%s\\\" is a mandatory parameter!\", parameter));\n        }\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/ParameterChecker.java", "class_name": "ParameterChecker", "class_uri": "src/main/java/com/binance/connector/client/utils/ParameterChecker.java.ParameterChecker", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/utils/ParameterChecker.java.ParameterChecker.[void]checkParameterType(Object,Class<?>,String)", "name": "checkParameterType", "arg_nums": 3, "params": [{"name": "parameter", "type": "Object"}, {"name": "t", "type": "Class<?>"}, {"name": "name", "type": "String"}], "return_type": "void", "signature": "public static void checkParameterType(Object parameter, Class<?> t, String name)", "original_string": "    public static void checkParameterType(Object parameter, Class<?> t, String name) {\n        if (!t.isInstance(parameter)) {\n            throw new BinanceConnectorException(String.format(\"\\\"%s\\\" must be of %s type.\", name, t));\n        } else if (parameter instanceof String && ((String) parameter).isEmpty()) {\n            throw new BinanceConnectorException(String.format(\"\\\"%s\\\" must not be empty.\", name));\n        }\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/ParameterChecker.java", "class_name": "ParameterChecker", "class_uri": "src/main/java/com/binance/connector/client/utils/ParameterChecker.java.ParameterChecker", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/utils/ParameterChecker.java.ParameterChecker.[Object]processId(Object,String)", "name": "processId", "arg_nums": 2, "params": [{"name": "id", "type": "Object"}, {"name": "name", "type": "String"}], "return_type": "Object", "signature": "public static Object processId(Object id, String name)", "original_string": "    public static Object processId(Object id, String name) {\n        if (!(id instanceof Integer || id instanceof String || id == null)) {\n            throw new BinanceConnectorException(name + \" must be of Int or String type.\");\n        } else if (id == null || (id instanceof String && ((String) id).isEmpty())) {\n            return UUID.randomUUID().toString();\n        }\n        return id;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/ParameterChecker.java", "class_name": "ParameterChecker", "class_uri": "src/main/java/com/binance/connector/client/utils/ParameterChecker.java.ParameterChecker", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Object", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/utils/ParameterChecker.java.ParameterChecker.[void]checkOnlyOneOfParameters(JSONObject)", "name": "checkOnlyOneOfParameters", "arg_nums": 1, "params": [{"name": "params", "type": "JSONObject"}], "return_type": "void", "signature": "public static void checkOnlyOneOfParameters(JSONObject params, String... parameters)", "original_string": "    public static void checkOnlyOneOfParameters(JSONObject params, String... parameters) {\n        // checks if only one of the \"parameters\" is present at \"params\"\n        if (params != null) {\n            int count = countStart;\n            for (String parameter : parameters) {\n                if (params.has(parameter)) {\n                    count++;\n                }\n            }\n            if (count > countFinal) { // more than one parameter is present\n                throw new BinanceConnectorException(\"Only one of the following parameters is allowed: \" + Arrays.toString(parameters));\n            }\n        }\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/ParameterChecker.java", "class_name": "ParameterChecker", "class_uri": "src/main/java/com/binance/connector/client/utils/ParameterChecker.java.ParameterChecker", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/utils/ParameterChecker.java.ParameterChecker.[void]checkOneOfParametersRequired(JSONObject)", "name": "checkOneOfParametersRequired", "arg_nums": 1, "params": [{"name": "params", "type": "JSONObject"}], "return_type": "void", "signature": "public static void checkOneOfParametersRequired(JSONObject params, String... parameters)", "original_string": "    public static void checkOneOfParametersRequired(JSONObject params, String... parameters) {\n        // checks if at least one of the \"parameters\" is present at \"params\"\n        String exceptMsg = \"One of the following parameters is required: \" + Arrays.toString(parameters);\n        if (params != null) {\n            int count = countStart;\n            for (String parameter : parameters) {\n                if (!params.has(parameter)) {\n                    count++;\n                }\n            }\n            if (count == parameters.length) { // none of the parameters is present\n                throw new BinanceConnectorException(exceptMsg);\n            }\n        } else {\n            throw new BinanceConnectorException(exceptMsg);\n        }\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/ParameterChecker.java", "class_name": "ParameterChecker", "class_uri": "src/main/java/com/binance/connector/client/utils/ParameterChecker.java.ParameterChecker", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/utils/websocketapi/WebSocketApiRequestHandler.java.WebSocketApiRequestHandler.[]WebSocketApiRequestHandler(WebSocketConnection,String,SignatureGenerator)", "name": "WebSocketApiRequestHandler", "arg_nums": 3, "params": [{"name": "connection", "type": "WebSocketConnection"}, {"name": "apiKey", "type": "String"}, {"name": "signatureGenerator", "type": "SignatureGenerator"}], "return_type": "", "signature": "public WebSocketApiRequestHandler(WebSocketConnection connection, String apiKey, SignatureGenerator signatureGenerator)", "original_string": "    public WebSocketApiRequestHandler(WebSocketConnection connection, String apiKey, SignatureGenerator signatureGenerator) {\n        if (connection == null) {\n            throw new BinanceConnectorException(\"[WebSocketApiRequestHandler] WebSocketConnection cannot be null\");\n        }\n        this.connection = connection;\n        this.apiKey = apiKey;\n        this.signatureGenerator = signatureGenerator;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/websocketapi/WebSocketApiRequestHandler.java", "class_name": "WebSocketApiRequestHandler", "class_uri": "src/main/java/com/binance/connector/client/utils/websocketapi/WebSocketApiRequestHandler.java.WebSocketApiRequestHandler", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/utils/websocketapi/WebSocketApiRequestHandler.java.WebSocketApiRequestHandler.[void]publicRequest(String)", "name": "publicRequest", "arg_nums": 1, "params": [{"name": "method", "type": "String"}], "return_type": "void", "signature": "public void publicRequest(String method)", "original_string": "    public void publicRequest(String method) {\n        this.request(RequestType.PUBLIC, method, null);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/websocketapi/WebSocketApiRequestHandler.java", "class_name": "WebSocketApiRequestHandler", "class_uri": "src/main/java/com/binance/connector/client/utils/websocketapi/WebSocketApiRequestHandler.java.WebSocketApiRequestHandler", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/utils/websocketapi/WebSocketApiRequestHandler.java.WebSocketApiRequestHandler.[void]publicRequest(String,JSONObject)", "name": "publicRequest", "arg_nums": 2, "params": [{"name": "method", "type": "String"}, {"name": "parameters", "type": "JSONObject"}], "return_type": "void", "signature": "public void publicRequest(String method, JSONObject parameters)", "original_string": "    public void publicRequest(String method, JSONObject parameters) {\n        this.request(RequestType.PUBLIC, method, parameters);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/websocketapi/WebSocketApiRequestHandler.java", "class_name": "WebSocketApiRequestHandler", "class_uri": "src/main/java/com/binance/connector/client/utils/websocketapi/WebSocketApiRequestHandler.java.WebSocketApiRequestHandler", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/utils/websocketapi/WebSocketApiRequestHandler.java.WebSocketApiRequestHandler.[void]apiRequest(String,JSONObject)", "name": "apiRequest", "arg_nums": 2, "params": [{"name": "method", "type": "String"}, {"name": "parameters", "type": "JSONObject"}], "return_type": "void", "signature": "public void apiRequest(String method, JSONObject parameters)", "original_string": "    public void apiRequest(String method, JSONObject parameters) {\n        RequestType requestType = this.connection.getSessionStatus() ? RequestType.PUBLIC : RequestType.WITH_API_KEY;\n        this.request(requestType, method, parameters);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/websocketapi/WebSocketApiRequestHandler.java", "class_name": "WebSocketApiRequestHandler", "class_uri": "src/main/java/com/binance/connector/client/utils/websocketapi/WebSocketApiRequestHandler.java.WebSocketApiRequestHandler", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/utils/websocketapi/WebSocketApiRequestHandler.java.WebSocketApiRequestHandler.[void]signedRequest(String,JSONObject)", "name": "signedRequest", "arg_nums": 2, "params": [{"name": "method", "type": "String"}, {"name": "parameters", "type": "JSONObject"}], "return_type": "void", "signature": "public void signedRequest(String method, JSONObject parameters)", "original_string": "    public void signedRequest(String method, JSONObject parameters) {\n        RequestType requestType = this.connection.getSessionStatus() ? RequestType.PUBLIC : RequestType.SIGNED;\n        this.request(requestType, method, parameters);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/websocketapi/WebSocketApiRequestHandler.java", "class_name": "WebSocketApiRequestHandler", "class_uri": "src/main/java/com/binance/connector/client/utils/websocketapi/WebSocketApiRequestHandler.java.WebSocketApiRequestHandler", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/utils/websocketapi/WebSocketApiRequestHandler.java.WebSocketApiRequestHandler.[void]request(RequestType,String,JSONObject)", "name": "request", "arg_nums": 3, "params": [{"name": "requestType", "type": "RequestType"}, {"name": "method", "type": "String"}, {"name": "parameters", "type": "JSONObject"}], "return_type": "void", "signature": "public void request(RequestType requestType, String method, JSONObject parameters)", "original_string": "    public void request(RequestType requestType, String method, JSONObject parameters) {\n        Object requestId = ParameterChecker.processId(JSONParser.pullValue(parameters, \"requestId\"), \"requestId\"); \n        ParameterChecker.checkParameterType(method, String.class, \"method\");\n\n        switch (requestType) {\n            case PUBLIC:\n                this.connection.send(JSONParser.buildJSONString(requestId, method, parameters));\n                break;\n            case WITH_API_KEY:\n                ParameterChecker.checkParameterType(this.apiKey, String.class, \"apiKey\");\n                parameters = JSONParser.addKeyValue(parameters, \"apiKey\", this.apiKey);\n\n                this.connection.send(JSONParser.buildJSONString(requestId, method, parameters));\n                break;\n            case SIGNED:\n                ParameterChecker.checkParameterType(this.apiKey, String.class, \"apiKey\");\n                parameters = JSONParser.addKeyValue(parameters, \"apiKey\", this.apiKey);\n                if (!parameters.has(\"timestamp\")) {\n                    parameters.put(\"timestamp\", UrlBuilder.buildTimestamp());\n                }\n\n                // signature\n                ParameterChecker.checkParameterType(this.signatureGenerator, SignatureGenerator.class, \"signatureGenerator\");\n                String payload = UrlBuilder.joinQueryParameters(JSONParser.sortJSONObject(parameters));\n                String signature = this.signatureGenerator.getSignature(payload);\n                parameters.put(\"signature\", signature);\n\n                this.connection.send(JSONParser.buildJSONString(requestId, method, parameters));\n                break;\n            default:\n                throw new BinanceConnectorException(\"[WebSocketApiRequestHandler] Invalid request type: \" + requestType);\n        }\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/websocketapi/WebSocketApiRequestHandler.java", "class_name": "WebSocketApiRequestHandler", "class_uri": "src/main/java/com/binance/connector/client/utils/websocketapi/WebSocketApiRequestHandler.java.WebSocketApiRequestHandler", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/utils/signaturegenerator/Ed25519SignatureGenerator.java.Ed25519SignatureGenerator.[]Ed25519SignatureGenerator(String)", "name": "Ed25519SignatureGenerator", "arg_nums": 1, "params": [{"name": "privateKey", "type": "String"}], "return_type": "", "signature": "public Ed25519SignatureGenerator(String privateKey)", "original_string": "    public Ed25519SignatureGenerator(String privateKey) throws FileNotFoundException, IOException {\n\n        ParameterChecker.checkParameterType(privateKey, String.class, \"privateKey\");\n\n        Security.addProvider(new BouncyCastleProvider());\n        PemReader pemReader = new PemReader(new FileReader(privateKey));\n        PemObject pemObject = pemReader.readPemObject();\n        byte[] privateKeyBytes = pemObject.getContent();\n        this.privateKey = (Ed25519PrivateKeyParameters) PrivateKeyFactory.createKey(privateKeyBytes);\n        pemReader.close();\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/signaturegenerator/Ed25519SignatureGenerator.java", "class_name": "Ed25519SignatureGenerator", "class_uri": "src/main/java/com/binance/connector/client/utils/signaturegenerator/Ed25519SignatureGenerator.java.Ed25519SignatureGenerator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/utils/signaturegenerator/Ed25519SignatureGenerator.java.Ed25519SignatureGenerator.[String]getSignature(String)", "name": "getSignature", "arg_nums": 1, "params": [{"name": "data", "type": "String"}], "return_type": "String", "signature": "public String getSignature(String data)", "original_string": "    public String getSignature(String data) {\n\n        byte[] dataBytes = data.getBytes(StandardCharsets.UTF_8);\n\n        Ed25519Signer signer = new Ed25519Signer();\n        signer.init(true, this.privateKey);\n        signer.update(dataBytes, offset, dataBytes.length);\n        byte[] signatureBytes = signer.generateSignature();\n        return Base64.getEncoder().encodeToString(signatureBytes);\n\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/signaturegenerator/Ed25519SignatureGenerator.java", "class_name": "Ed25519SignatureGenerator", "class_uri": "src/main/java/com/binance/connector/client/utils/signaturegenerator/Ed25519SignatureGenerator.java.Ed25519SignatureGenerator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/utils/signaturegenerator/SignatureGenerator.java.SignatureGenerator.[String]getSignature(String)", "name": "getSignature", "arg_nums": 1, "params": [{"name": "payload", "type": "String"}], "return_type": "String", "signature": "String getSignature(String payload)", "original_string": "    String getSignature(String payload);", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/signaturegenerator/SignatureGenerator.java", "class_name": "SignatureGenerator", "class_uri": "src/main/java/com/binance/connector/client/utils/signaturegenerator/SignatureGenerator.java.SignatureGenerator", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/utils/signaturegenerator/HmacSignatureGenerator.java.HmacSignatureGenerator.[]HmacSignatureGenerator(String)", "name": "HmacSignatureGenerator", "arg_nums": 1, "params": [{"name": "apiSecret", "type": "String"}], "return_type": "", "signature": "public HmacSignatureGenerator(String apiSecret)", "original_string": "    public HmacSignatureGenerator(String apiSecret) {\n        ParameterChecker.checkParameterType(apiSecret, String.class, \"apiSecret\");\n        this.apiSecret = apiSecret;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/signaturegenerator/HmacSignatureGenerator.java", "class_name": "HmacSignatureGenerator", "class_uri": "src/main/java/com/binance/connector/client/utils/signaturegenerator/HmacSignatureGenerator.java.HmacSignatureGenerator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/utils/signaturegenerator/HmacSignatureGenerator.java.HmacSignatureGenerator.[String]getSignature(String)", "name": "getSignature", "arg_nums": 1, "params": [{"name": "data", "type": "String"}], "return_type": "String", "signature": "public String getSignature(String data)", "original_string": "    public String getSignature(String data) {\n        byte[] hmacSha256;\n        try {\n            SecretKeySpec secretKeySpec = new SecretKeySpec(apiSecret.getBytes(), HMAC_SHA256);\n            Mac mac = Mac.getInstance(HMAC_SHA256);\n            mac.init(secretKeySpec);\n            hmacSha256 = mac.doFinal(data.getBytes());\n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to calculate hmac-sha256\", e);\n        }\n        return Hex.encodeHexString(hmacSha256);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/signaturegenerator/HmacSignatureGenerator.java", "class_name": "HmacSignatureGenerator", "class_uri": "src/main/java/com/binance/connector/client/utils/signaturegenerator/HmacSignatureGenerator.java.HmacSignatureGenerator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/utils/signaturegenerator/RsaSignatureGenerator.java.RsaSignatureGenerator.[]RsaSignatureGenerator(String)", "name": "RsaSignatureGenerator", "arg_nums": 1, "params": [{"name": "privateKey", "type": "String"}], "return_type": "", "signature": "public RsaSignatureGenerator(String privateKey)", "original_string": "    public RsaSignatureGenerator(String privateKey) {\n        this(privateKey, null);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/signaturegenerator/RsaSignatureGenerator.java", "class_name": "RsaSignatureGenerator", "class_uri": "src/main/java/com/binance/connector/client/utils/signaturegenerator/RsaSignatureGenerator.java.RsaSignatureGenerator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/utils/signaturegenerator/RsaSignatureGenerator.java.RsaSignatureGenerator.[]RsaSignatureGenerator(String,String)", "name": "RsaSignatureGenerator", "arg_nums": 2, "params": [{"name": "privateKey", "type": "String"}, {"name": "password", "type": "String"}], "return_type": "", "signature": "public RsaSignatureGenerator(String privateKey, String password)", "original_string": "    public RsaSignatureGenerator(String privateKey, String password) {\n        ParameterChecker.checkParameterType(privateKey, String.class, \"privateKey\");\n        \n        try {\n            String privateKeyPem = privateKey;\n            if (new File(privateKey).exists()) {\n                privateKeyPem = new String(Files.readAllBytes(Paths.get(privateKey)));\n            }\n            this.privateKey = this.parsePrivateKey(privateKeyPem, password);\n        } catch (IOException e) {\n            throw new RuntimeException(\"Unable to find/read private key at given file path\", e);\n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to parse RSA private key\", e);\n        }\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/signaturegenerator/RsaSignatureGenerator.java", "class_name": "RsaSignatureGenerator", "class_uri": "src/main/java/com/binance/connector/client/utils/signaturegenerator/RsaSignatureGenerator.java.RsaSignatureGenerator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/utils/signaturegenerator/RsaSignatureGenerator.java.RsaSignatureGenerator.[String]getSignature(String)", "name": "getSignature", "arg_nums": 1, "params": [{"name": "data", "type": "String"}], "return_type": "String", "signature": "public String getSignature(String data)", "original_string": "    public String getSignature(String data) {\n        try {\n            Signature privateSignature = Signature.getInstance(RSA_SHA256);\n            privateSignature.initSign(this.privateKey);\n            privateSignature.update(data.getBytes());\n        \n            byte[] signature = privateSignature.sign();\n        \n            return Base64.getEncoder().encodeToString(signature);\n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to calculate rsa-sha256\", e);\n        }\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/signaturegenerator/RsaSignatureGenerator.java", "class_name": "RsaSignatureGenerator", "class_uri": "src/main/java/com/binance/connector/client/utils/signaturegenerator/RsaSignatureGenerator.java.RsaSignatureGenerator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/utils/signaturegenerator/RsaSignatureGenerator.java.RsaSignatureGenerator.[RSAPrivateKey]parsePrivateKey(String,String)", "name": "parsePrivateKey", "arg_nums": 2, "params": [{"name": "privateKeyPem", "type": "String"}, {"name": "password", "type": "String"}], "return_type": "RSAPrivateKey", "signature": "private RSAPrivateKey parsePrivateKey(String privateKeyPem, String password)", "original_string": "    private RSAPrivateKey parsePrivateKey(String privateKeyPem, String password) throws Exception {\n        // Private Key in PKCS#8 standard\n        String parsedPem = privateKeyPem.replace(\"\\n\", \"\").trim();\n        if (password != null) {\n            parsedPem = parsedPem\n            .replace(\"-----BEGIN ENCRYPTED PRIVATE KEY-----\", \"\")\n            .replace(\"-----END ENCRYPTED PRIVATE KEY-----\", \"\");\n        } else {\n            parsedPem = parsedPem\n            .replace(\"-----BEGIN PRIVATE KEY-----\", \"\")\n            .replace(\"-----END PRIVATE KEY-----\", \"\");\n        }\n        byte[] encoded = Base64.getDecoder().decode(parsedPem); //illegal character\n        PKCS8EncodedKeySpec encodedKeySpec;\n        if (password != null) {\n            EncryptedPrivateKeyInfo pkInfo = new EncryptedPrivateKeyInfo(encoded);\n            PBEKeySpec keySpec = new PBEKeySpec(password.toCharArray());\n            SecretKeyFactory pbeKeyFactory = SecretKeyFactory.getInstance(pkInfo.getAlgName());\n            encodedKeySpec = pkInfo.getKeySpec(pbeKeyFactory.generateSecret(keySpec));\n        } else {\n            encodedKeySpec = new PKCS8EncodedKeySpec(encoded);\n        }\n\n        KeyFactory kf = KeyFactory.getInstance(RSA);\n        return (RSAPrivateKey) kf.generatePrivate(encodedKeySpec);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/signaturegenerator/RsaSignatureGenerator.java", "class_name": "RsaSignatureGenerator", "class_uri": "src/main/java/com/binance/connector/client/utils/signaturegenerator/RsaSignatureGenerator.java.RsaSignatureGenerator", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "RSAPrivateKey", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/utils/httpclient/WebSocketStreamHttpClientSingleton.java.WebSocketStreamHttpClientSingleton.[]WebSocketStreamHttpClientSingleton()", "name": "WebSocketStreamHttpClientSingleton", "arg_nums": 0, "params": [], "return_type": "", "signature": "private WebSocketStreamHttpClientSingleton()", "original_string": "    private WebSocketStreamHttpClientSingleton() {\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/httpclient/WebSocketStreamHttpClientSingleton.java", "class_name": "WebSocketStreamHttpClientSingleton", "class_uri": "src/main/java/com/binance/connector/client/utils/httpclient/WebSocketStreamHttpClientSingleton.java.WebSocketStreamHttpClientSingleton", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/utils/httpclient/WebSocketStreamHttpClientSingleton.java.WebSocketStreamHttpClientSingleton.[OkHttpClient]getHttpClient()", "name": "getHttpClient", "arg_nums": 0, "params": [], "return_type": "OkHttpClient", "signature": "public static OkHttpClient getHttpClient()", "original_string": "    public static OkHttpClient getHttpClient() {\n        return httpClient;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/httpclient/WebSocketStreamHttpClientSingleton.java", "class_name": "WebSocketStreamHttpClientSingleton", "class_uri": "src/main/java/com/binance/connector/client/utils/httpclient/WebSocketStreamHttpClientSingleton.java.WebSocketStreamHttpClientSingleton", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "OkHttpClient", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/utils/httpclient/HttpClientSingleton.java.HttpClientSingleton.[]HttpClientSingleton()", "name": "HttpClientSingleton", "arg_nums": 0, "params": [], "return_type": "", "signature": "private HttpClientSingleton()", "original_string": "    private HttpClientSingleton() {\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/httpclient/HttpClientSingleton.java", "class_name": "HttpClientSingleton", "class_uri": "src/main/java/com/binance/connector/client/utils/httpclient/HttpClientSingleton.java.HttpClientSingleton", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/utils/httpclient/HttpClientSingleton.java.HttpClientSingleton.[void]createHttpClient(ProxyAuth)", "name": "createHttpClient", "arg_nums": 1, "params": [{"name": "proxy", "type": "ProxyAuth"}], "return_type": "void", "signature": "private static void createHttpClient(ProxyAuth proxy)", "original_string": "    private static void createHttpClient(ProxyAuth proxy) {\n        if (proxy == null) {\n            httpClient = new OkHttpClient();\n        } else {\n            if (proxy.getAuth() == null) {\n                httpClient = new OkHttpClient.Builder().proxy(proxy.getProxy()).build();\n            } else {\n                httpClient = new OkHttpClient.Builder().proxy(proxy.getProxy()).proxyAuthenticator(proxy.getAuth()).build();\n            }\n        }\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/httpclient/HttpClientSingleton.java", "class_name": "HttpClientSingleton", "class_uri": "src/main/java/com/binance/connector/client/utils/httpclient/HttpClientSingleton.java.HttpClientSingleton", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/utils/httpclient/HttpClientSingleton.java.HttpClientSingleton.[void]verifyHttpClient(ProxyAuth)", "name": "verifyHttpClient", "arg_nums": 1, "params": [{"name": "proxy", "type": "ProxyAuth"}], "return_type": "void", "signature": "private static void verifyHttpClient(ProxyAuth proxy)", "original_string": "    private static void verifyHttpClient(ProxyAuth proxy) {\n        Proxy prevProxy = httpClient.proxy();\n\n        if ((proxy != null && !proxy.getProxy().equals(prevProxy)) || (proxy == null && prevProxy != null)) {\n            createHttpClient(proxy);\n        }\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/httpclient/HttpClientSingleton.java", "class_name": "HttpClientSingleton", "class_uri": "src/main/java/com/binance/connector/client/utils/httpclient/HttpClientSingleton.java.HttpClientSingleton", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/utils/httpclient/HttpClientSingleton.java.HttpClientSingleton.[OkHttpClient]getHttpClient(ProxyAuth)", "name": "getHttpClient", "arg_nums": 1, "params": [{"name": "proxy", "type": "ProxyAuth"}], "return_type": "OkHttpClient", "signature": "public static OkHttpClient getHttpClient(ProxyAuth proxy)", "original_string": "    public static OkHttpClient getHttpClient(ProxyAuth proxy) {\n        if (httpClient == null) {\n            createHttpClient(proxy);\n        } else {\n            verifyHttpClient(proxy);\n        }\n        return httpClient;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/httpclient/HttpClientSingleton.java", "class_name": "HttpClientSingleton", "class_uri": "src/main/java/com/binance/connector/client/utils/httpclient/HttpClientSingleton.java.HttpClientSingleton", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "OkHttpClient", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/utils/httpclient/HttpClientSingleton.java.HttpClientSingleton.[OkHttpClient]getHttpClient()", "name": "getHttpClient", "arg_nums": 0, "params": [], "return_type": "OkHttpClient", "signature": "public static OkHttpClient getHttpClient()", "original_string": "    public static OkHttpClient getHttpClient() {\n        if (httpClient == null) {\n            createHttpClient(null);\n        } \n        return httpClient;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/httpclient/HttpClientSingleton.java", "class_name": "HttpClientSingleton", "class_uri": "src/main/java/com/binance/connector/client/utils/httpclient/HttpClientSingleton.java.HttpClientSingleton", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "OkHttpClient", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/utils/httpclient/WebSocketApiHttpClientSingleton.java.WebSocketApiHttpClientSingleton.[]WebSocketApiHttpClientSingleton()", "name": "WebSocketApiHttpClientSingleton", "arg_nums": 0, "params": [], "return_type": "", "signature": "private WebSocketApiHttpClientSingleton()", "original_string": "    private WebSocketApiHttpClientSingleton() {\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/httpclient/WebSocketApiHttpClientSingleton.java", "class_name": "WebSocketApiHttpClientSingleton", "class_uri": "src/main/java/com/binance/connector/client/utils/httpclient/WebSocketApiHttpClientSingleton.java.WebSocketApiHttpClientSingleton", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/utils/httpclient/WebSocketApiHttpClientSingleton.java.WebSocketApiHttpClientSingleton.[OkHttpClient]getHttpClient()", "name": "getHttpClient", "arg_nums": 0, "params": [], "return_type": "OkHttpClient", "signature": "public static OkHttpClient getHttpClient()", "original_string": "    public static OkHttpClient getHttpClient() {\n        return httpClient;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/httpclient/WebSocketApiHttpClientSingleton.java", "class_name": "WebSocketApiHttpClientSingleton", "class_uri": "src/main/java/com/binance/connector/client/utils/httpclient/WebSocketApiHttpClientSingleton.java.WebSocketApiHttpClientSingleton", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "OkHttpClient", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/utils/websocketcallback/WebSocketClosedCallback.java.WebSocketClosedCallback.[void]onClosed(int,String)", "name": "onClosed", "arg_nums": 2, "params": [{"name": "code", "type": "int"}, {"name": "reason", "type": "String"}], "return_type": "void", "signature": "void onClosed(int code, String reason)", "original_string": "    void onClosed(int code, String reason);", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/websocketcallback/WebSocketClosedCallback.java", "class_name": "WebSocketClosedCallback", "class_uri": "src/main/java/com/binance/connector/client/utils/websocketcallback/WebSocketClosedCallback.java.WebSocketClosedCallback", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nonclosed will be called when websocket connection has been successfully released. No further calls to this listener will be made.\n\n@param code The code send by server.\n@param reason The reason send by server.\n"}, {"uris": "src/main/java/com/binance/connector/client/utils/websocketcallback/WebSocketMessageCallback.java.WebSocketMessageCallback.[void]onMessage(String)", "name": "onMessage", "arg_nums": 1, "params": [{"name": "data", "type": "String"}], "return_type": "void", "signature": "void onMessage(String data)", "original_string": "    void onMessage(String data);", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/websocketcallback/WebSocketMessageCallback.java", "class_name": "WebSocketMessageCallback", "class_uri": "src/main/java/com/binance/connector/client/utils/websocketcallback/WebSocketMessageCallback.java.WebSocketMessageCallback", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nonMessage will be called when data is received from server.\n\n@param data The data send by server.\n"}, {"uris": "src/main/java/com/binance/connector/client/utils/websocketcallback/WebSocketFailureCallback.java.WebSocketFailureCallback.[void]onFailure(Throwable,Response)", "name": "onFailure", "arg_nums": 2, "params": [{"name": "t", "type": "Throwable"}, {"name": "response", "type": "Response"}], "return_type": "void", "signature": "void onFailure(Throwable t, Response response)", "original_string": "    void onFailure(Throwable t, Response response);", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/websocketcallback/WebSocketFailureCallback.java", "class_name": "WebSocketFailureCallback", "class_uri": "src/main/java/com/binance/connector/client/utils/websocketcallback/WebSocketFailureCallback.java.WebSocketFailureCallback", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nonFailure will be called when the websocket has been closed and an error has occurred.\n\n@param t The exception thrown by server.\n@param response The associated response.\n"}, {"uris": "src/main/java/com/binance/connector/client/utils/websocketcallback/WebSocketOpenCallback.java.WebSocketOpenCallback.[void]onOpen(Response)", "name": "onOpen", "arg_nums": 1, "params": [{"name": "response", "type": "Response"}], "return_type": "void", "signature": "void onOpen(Response response)", "original_string": "    void onOpen(Response response);", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/websocketcallback/WebSocketOpenCallback.java", "class_name": "WebSocketOpenCallback", "class_uri": "src/main/java/com/binance/connector/client/utils/websocketcallback/WebSocketOpenCallback.java.WebSocketOpenCallback", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nonOpen will be called when the websocket has been accepted by server and may begin transmitting messages.\n\n@param response The response send by server.\n"}, {"uris": "src/main/java/com/binance/connector/client/utils/websocketcallback/WebSocketClosingCallback.java.WebSocketClosingCallback.[void]onClosing(int,String)", "name": "onClosing", "arg_nums": 2, "params": [{"name": "code", "type": "int"}, {"name": "reason", "type": "String"}], "return_type": "void", "signature": "void onClosing(int code, String reason)", "original_string": "    void onClosing(int code, String reason);", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/utils/websocketcallback/WebSocketClosingCallback.java", "class_name": "WebSocketClosingCallback", "class_uri": "src/main/java/com/binance/connector/client/utils/websocketcallback/WebSocketClosingCallback.java.WebSocketClosingCallback", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nonClosing will be called when websocket is informed that no more incoming messages will be transmitted.\n\n@param code The code send by server.\n@param reason The reason send by server.\n"}, {"uris": "src/main/java/com/binance/connector/client/exceptions/BinanceServerException.java.BinanceServerException.[]BinanceServerException(String)", "name": "BinanceServerException", "arg_nums": 1, "params": [{"name": "fullErrMsg", "type": "String"}], "return_type": "", "signature": "public BinanceServerException(String fullErrMsg)", "original_string": "    public BinanceServerException(String fullErrMsg) {\n        super(fullErrMsg);\n        this.httpStatusCode = invalidStatusCode;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/exceptions/BinanceServerException.java", "class_name": "BinanceServerException", "class_uri": "src/main/java/com/binance/connector/client/exceptions/BinanceServerException.java.BinanceServerException", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/exceptions/BinanceServerException.java.BinanceServerException.[]BinanceServerException(String,int)", "name": "BinanceServerException", "arg_nums": 2, "params": [{"name": "fullErrMsg", "type": "String"}, {"name": "httpStatusCode", "type": "int"}], "return_type": "", "signature": "public BinanceServerException(String fullErrMsg, int httpStatusCode)", "original_string": "    public BinanceServerException(String fullErrMsg, int httpStatusCode) {\n        super(fullErrMsg);\n        this.httpStatusCode = httpStatusCode;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/exceptions/BinanceServerException.java", "class_name": "BinanceServerException", "class_uri": "src/main/java/com/binance/connector/client/exceptions/BinanceServerException.java.BinanceServerException", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/exceptions/BinanceServerException.java.BinanceServerException.[int]getHttpStatusCode()", "name": "getHttpStatusCode", "arg_nums": 0, "params": [], "return_type": "int", "signature": "public int getHttpStatusCode()", "original_string": "    public int getHttpStatusCode() {\n        return httpStatusCode;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/exceptions/BinanceServerException.java", "class_name": "BinanceServerException", "class_uri": "src/main/java/com/binance/connector/client/exceptions/BinanceServerException.java.BinanceServerException", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/exceptions/BinanceClientException.java.BinanceClientException.[]BinanceClientException(String,int)", "name": "BinanceClientException", "arg_nums": 2, "params": [{"name": "fullErrMsg", "type": "String"}, {"name": "httpStatusCode", "type": "int"}], "return_type": "", "signature": "public BinanceClientException(String fullErrMsg, int httpStatusCode)", "original_string": "    public BinanceClientException(String fullErrMsg, int httpStatusCode) {\n        super(fullErrMsg);\n        this.httpStatusCode = httpStatusCode;\n        this.errorCode = ERROR_CODE_0;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/exceptions/BinanceClientException.java", "class_name": "BinanceClientException", "class_uri": "src/main/java/com/binance/connector/client/exceptions/BinanceClientException.java.BinanceClientException", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/exceptions/BinanceClientException.java.BinanceClientException.[]BinanceClientException(String,String,int,int)", "name": "BinanceClientException", "arg_nums": 4, "params": [{"name": "fullErrMsg", "type": "String"}, {"name": "errMsg", "type": "String"}, {"name": "httpStatusCode", "type": "int"}, {"name": "errorCode", "type": "int"}], "return_type": "", "signature": "public BinanceClientException(String fullErrMsg, String errMsg, int httpStatusCode, int errorCode)", "original_string": "    public BinanceClientException(String fullErrMsg, String errMsg, int httpStatusCode, int errorCode) {\n        super(fullErrMsg);\n        this.httpStatusCode = httpStatusCode;\n        this.errorCode = errorCode;\n        this.errMsg =  errMsg;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/exceptions/BinanceClientException.java", "class_name": "BinanceClientException", "class_uri": "src/main/java/com/binance/connector/client/exceptions/BinanceClientException.java.BinanceClientException", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/exceptions/BinanceClientException.java.BinanceClientException.[int]getErrorCode()", "name": "getErrorCode", "arg_nums": 0, "params": [], "return_type": "int", "signature": "public int getErrorCode()", "original_string": "    public int getErrorCode() {\n        return errorCode;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/exceptions/BinanceClientException.java", "class_name": "BinanceClientException", "class_uri": "src/main/java/com/binance/connector/client/exceptions/BinanceClientException.java.BinanceClientException", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/exceptions/BinanceClientException.java.BinanceClientException.[int]getHttpStatusCode()", "name": "getHttpStatusCode", "arg_nums": 0, "params": [], "return_type": "int", "signature": "public int getHttpStatusCode()", "original_string": "    public int getHttpStatusCode() {\n        return httpStatusCode;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/exceptions/BinanceClientException.java", "class_name": "BinanceClientException", "class_uri": "src/main/java/com/binance/connector/client/exceptions/BinanceClientException.java.BinanceClientException", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/exceptions/BinanceClientException.java.BinanceClientException.[String]getErrMsg()", "name": "getErrMsg", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getErrMsg()", "original_string": "    public String getErrMsg() {\n        return errMsg;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/exceptions/BinanceClientException.java", "class_name": "BinanceClientException", "class_uri": "src/main/java/com/binance/connector/client/exceptions/BinanceClientException.java.BinanceClientException", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/exceptions/BinanceConnectorException.java.BinanceConnectorException.[]BinanceConnectorException(String)", "name": "BinanceConnectorException", "arg_nums": 1, "params": [{"name": "fullErrMsg", "type": "String"}], "return_type": "", "signature": "public BinanceConnectorException(String fullErrMsg)", "original_string": "    public BinanceConnectorException(String fullErrMsg) {\n        super(fullErrMsg);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/exceptions/BinanceConnectorException.java", "class_name": "BinanceConnectorException", "class_uri": "src/main/java/com/binance/connector/client/exceptions/BinanceConnectorException.java.BinanceConnectorException", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/enums/DefaultUrls.java.DefaultUrls.[]DefaultUrls()", "name": "DefaultUrls", "arg_nums": 0, "params": [], "return_type": "", "signature": "private DefaultUrls()", "original_string": "    private DefaultUrls() {\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/enums/DefaultUrls.java", "class_name": "DefaultUrls", "class_uri": "src/main/java/com/binance/connector/client/enums/DefaultUrls.java.DefaultUrls", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl.[]SpotClientImpl()", "name": "SpotClientImpl", "arg_nums": 0, "params": [], "return_type": "", "signature": "public SpotClientImpl()", "original_string": "    public SpotClientImpl() {\n        this(DefaultUrls.PROD_URL);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java", "class_name": "SpotClientImpl", "class_uri": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl.[]SpotClientImpl(String)", "name": "SpotClientImpl", "arg_nums": 1, "params": [{"name": "baseUrl", "type": "String"}], "return_type": "", "signature": "public SpotClientImpl(String baseUrl)", "original_string": "    public SpotClientImpl(String baseUrl) {\n        this(\"\", (SignatureGenerator) null, baseUrl);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java", "class_name": "SpotClientImpl", "class_uri": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl.[]SpotClientImpl(String,boolean)", "name": "SpotClientImpl", "arg_nums": 2, "params": [{"name": "baseUrl", "type": "String"}, {"name": "showLimitUsage", "type": "boolean"}], "return_type": "", "signature": "public SpotClientImpl(String baseUrl, boolean showLimitUsage)", "original_string": "    public SpotClientImpl(String baseUrl, boolean showLimitUsage) {\n        this(baseUrl);\n        this.showLimitUsage = showLimitUsage;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java", "class_name": "SpotClientImpl", "class_uri": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl.[]SpotClientImpl(String,String)", "name": "SpotClientImpl", "arg_nums": 2, "params": [{"name": "apiKey", "type": "String"}, {"name": "secretKey", "type": "String"}], "return_type": "", "signature": "public SpotClientImpl(String apiKey, String secretKey)", "original_string": "    public SpotClientImpl(String apiKey, String secretKey) {\n        this(apiKey, secretKey, DefaultUrls.PROD_URL);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java", "class_name": "SpotClientImpl", "class_uri": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl.[]SpotClientImpl(String,String,String)", "name": "SpotClientImpl", "arg_nums": 3, "params": [{"name": "apiKey", "type": "String"}, {"name": "secretKey", "type": "String"}, {"name": "baseUrl", "type": "String"}], "return_type": "", "signature": "public SpotClientImpl(String apiKey, String secretKey, String baseUrl)", "original_string": "    public SpotClientImpl(String apiKey, String secretKey, String baseUrl) {\n        this(apiKey, new HmacSignatureGenerator(secretKey), baseUrl);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java", "class_name": "SpotClientImpl", "class_uri": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl.[]SpotClientImpl(String,SignatureGenerator,String)", "name": "SpotClientImpl", "arg_nums": 3, "params": [{"name": "apiKey", "type": "String"}, {"name": "signatureGenerator", "type": "SignatureGenerator"}, {"name": "baseUrl", "type": "String"}], "return_type": "", "signature": "public SpotClientImpl(String apiKey, SignatureGenerator signatureGenerator, String baseUrl)", "original_string": "    public SpotClientImpl(String apiKey, SignatureGenerator signatureGenerator, String baseUrl) {\n        this.apiKey = apiKey;\n        this.signatureGenerator = signatureGenerator;\n        this.baseUrl = baseUrl;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java", "class_name": "SpotClientImpl", "class_uri": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl.[void]setShowLimitUsage(boolean)", "name": "setShowLimitUsage", "arg_nums": 1, "params": [{"name": "showLimitUsage", "type": "boolean"}], "return_type": "void", "signature": "@Override\n    public void setShowLimitUsage(boolean showLimitUsage)", "original_string": "    @Override\n    public void setShowLimitUsage(boolean showLimitUsage) {\n        this.showLimitUsage = showLimitUsage;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java", "class_name": "SpotClientImpl", "class_uri": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl.[void]setProxy(ProxyAuth)", "name": "setProxy", "arg_nums": 1, "params": [{"name": "proxy", "type": "ProxyAuth"}], "return_type": "void", "signature": "@Override\n    public void setProxy(ProxyAuth proxy)", "original_string": "    @Override\n    public void setProxy(ProxyAuth proxy) {\n        this.proxy = proxy;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java", "class_name": "SpotClientImpl", "class_uri": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl.[void]unsetProxy()", "name": "unsetProxy", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    public void unsetProxy()", "original_string": "    @Override\n    public void unsetProxy() {\n        this.proxy = null;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java", "class_name": "SpotClientImpl", "class_uri": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl.[AutoInvest]createAutoInvest()", "name": "createAutoInvest", "arg_nums": 0, "params": [], "return_type": "AutoInvest", "signature": "@Override\n    public AutoInvest createAutoInvest()", "original_string": "    @Override\n    public AutoInvest createAutoInvest() {\n        return new AutoInvest(baseUrl, apiKey, signatureGenerator, showLimitUsage, proxy);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java", "class_name": "SpotClientImpl", "class_uri": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "AutoInvest", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl.[Blvt]createBlvt()", "name": "createBlvt", "arg_nums": 0, "params": [], "return_type": "Blvt", "signature": "@Override\n    public Blvt createBlvt()", "original_string": "    @Override\n    public Blvt createBlvt() {\n        return new Blvt(baseUrl, apiKey, signatureGenerator, showLimitUsage, proxy);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java", "class_name": "SpotClientImpl", "class_uri": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Blvt", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl.[C2C]createC2C()", "name": "createC2C", "arg_nums": 0, "params": [], "return_type": "C2C", "signature": "@Override\n    public C2C createC2C()", "original_string": "    @Override\n    public C2C createC2C() {\n        return new C2C(baseUrl, apiKey, signatureGenerator, showLimitUsage, proxy);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java", "class_name": "SpotClientImpl", "class_uri": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "C2C", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl.[Convert]createConvert()", "name": "createConvert", "arg_nums": 0, "params": [], "return_type": "Convert", "signature": "@Override\n    public Convert createConvert()", "original_string": "    @Override\n    public Convert createConvert() {\n        return new Convert(baseUrl, apiKey, signatureGenerator, showLimitUsage, proxy);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java", "class_name": "SpotClientImpl", "class_uri": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Convert", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl.[CryptoLoans]createCryptoLoans()", "name": "createCryptoLoans", "arg_nums": 0, "params": [], "return_type": "CryptoLoans", "signature": "@Override\n    public CryptoLoans createCryptoLoans()", "original_string": "    @Override\n    public CryptoLoans createCryptoLoans() {\n        return new CryptoLoans(baseUrl, apiKey, signatureGenerator, showLimitUsage, proxy);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java", "class_name": "SpotClientImpl", "class_uri": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "CryptoLoans", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl.[Fiat]createFiat()", "name": "createFiat", "arg_nums": 0, "params": [], "return_type": "Fiat", "signature": "@Override\n    public Fiat createFiat()", "original_string": "    @Override\n    public Fiat createFiat() {\n        return new Fiat(baseUrl, apiKey, signatureGenerator, showLimitUsage, proxy);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java", "class_name": "SpotClientImpl", "class_uri": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Fiat", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl.[Futures]createFutures()", "name": "createFutures", "arg_nums": 0, "params": [], "return_type": "Futures", "signature": "@Override\n    public Futures createFutures()", "original_string": "    @Override\n    public Futures createFutures() {\n        return new Futures(baseUrl, apiKey, signatureGenerator, showLimitUsage, proxy);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java", "class_name": "SpotClientImpl", "class_uri": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Futures", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl.[GiftCard]createGiftCard()", "name": "createGiftCard", "arg_nums": 0, "params": [], "return_type": "GiftCard", "signature": "@Override\n    public GiftCard createGiftCard()", "original_string": "    @Override\n    public GiftCard createGiftCard() {\n        return new GiftCard(baseUrl, apiKey, signatureGenerator, showLimitUsage, proxy); }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java", "class_name": "SpotClientImpl", "class_uri": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "GiftCard", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl.[Margin]createMargin()", "name": "createMargin", "arg_nums": 0, "params": [], "return_type": "Margin", "signature": "@Override\n    public Margin createMargin()", "original_string": "    @Override\n    public Margin createMargin() {\n        return new Margin(baseUrl, apiKey, signatureGenerator, showLimitUsage, proxy);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java", "class_name": "SpotClientImpl", "class_uri": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Margin", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl.[Market]createMarket()", "name": "createMarket", "arg_nums": 0, "params": [], "return_type": "Market", "signature": "@Override\n    public Market createMarket()", "original_string": "    @Override\n    public Market createMarket() {\n        return new Market(baseUrl, apiKey, showLimitUsage, proxy);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java", "class_name": "SpotClientImpl", "class_uri": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Market", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl.[Mining]createMining()", "name": "createMining", "arg_nums": 0, "params": [], "return_type": "Mining", "signature": "@Override\n    public Mining createMining()", "original_string": "    @Override\n    public Mining createMining() {\n        return new Mining(baseUrl, apiKey, signatureGenerator, showLimitUsage, proxy);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java", "class_name": "SpotClientImpl", "class_uri": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Mining", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl.[NFT]createNFT()", "name": "createNFT", "arg_nums": 0, "params": [], "return_type": "NFT", "signature": "@Override\n    public NFT createNFT()", "original_string": "    @Override\n    public NFT createNFT() {\n        return new NFT(baseUrl, apiKey, signatureGenerator, showLimitUsage, proxy);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java", "class_name": "SpotClientImpl", "class_uri": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "NFT", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl.[Pay]createPay()", "name": "createPay", "arg_nums": 0, "params": [], "return_type": "Pay", "signature": "@Override\n    public Pay createPay()", "original_string": "    @Override\n    public Pay createPay() {\n        return new Pay(baseUrl, apiKey, signatureGenerator, showLimitUsage, proxy);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java", "class_name": "SpotClientImpl", "class_uri": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Pay", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl.[PortfolioMargin]createPortfolioMargin()", "name": "createPortfolioMargin", "arg_nums": 0, "params": [], "return_type": "PortfolioMargin", "signature": "@Override\n    public PortfolioMargin createPortfolioMargin()", "original_string": "    @Override\n    public PortfolioMargin createPortfolioMargin() {\n        return new PortfolioMargin(baseUrl, apiKey, signatureGenerator, showLimitUsage, proxy);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java", "class_name": "SpotClientImpl", "class_uri": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "PortfolioMargin", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl.[Rebate]createRebate()", "name": "createRebate", "arg_nums": 0, "params": [], "return_type": "Rebate", "signature": "@Override\n    public Rebate createRebate()", "original_string": "    @Override\n    public Rebate createRebate() {\n        return new Rebate(baseUrl, apiKey, signatureGenerator, showLimitUsage, proxy);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java", "class_name": "SpotClientImpl", "class_uri": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Rebate", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl.[SimpleEarn]createSimpleEarn()", "name": "createSimpleEarn", "arg_nums": 0, "params": [], "return_type": "SimpleEarn", "signature": "@Override\n    public SimpleEarn createSimpleEarn()", "original_string": "    @Override\n    public SimpleEarn createSimpleEarn() {\n        return new SimpleEarn(baseUrl, apiKey, signatureGenerator, showLimitUsage, proxy);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java", "class_name": "SpotClientImpl", "class_uri": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "SimpleEarn", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl.[SpotAlgo]createSpotAlgo()", "name": "createSpotAlgo", "arg_nums": 0, "params": [], "return_type": "SpotAlgo", "signature": "@Override\n    public SpotAlgo createSpotAlgo()", "original_string": "    @Override\n    public SpotAlgo createSpotAlgo() {\n        return new SpotAlgo(baseUrl, apiKey, signatureGenerator, showLimitUsage, proxy);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java", "class_name": "SpotClientImpl", "class_uri": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "SpotAlgo", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl.[Staking]createStaking()", "name": "createStaking", "arg_nums": 0, "params": [], "return_type": "Staking", "signature": "@Override\n    public Staking createStaking()", "original_string": "    @Override\n    public Staking createStaking() {\n        return new Staking(baseUrl, apiKey, signatureGenerator, showLimitUsage, proxy);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java", "class_name": "SpotClientImpl", "class_uri": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Staking", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl.[SubAccount]createSubAccount()", "name": "createSubAccount", "arg_nums": 0, "params": [], "return_type": "SubAccount", "signature": "@Override\n    public SubAccount createSubAccount()", "original_string": "    @Override\n    public SubAccount createSubAccount() {\n        return new SubAccount(baseUrl, apiKey, signatureGenerator, showLimitUsage, proxy);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java", "class_name": "SpotClientImpl", "class_uri": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "SubAccount", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl.[Trade]createTrade()", "name": "createTrade", "arg_nums": 0, "params": [], "return_type": "Trade", "signature": "@Override\n    public Trade createTrade()", "original_string": "    @Override\n    public Trade createTrade() {\n        return new Trade(baseUrl, apiKey, signatureGenerator, showLimitUsage, proxy);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java", "class_name": "SpotClientImpl", "class_uri": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Trade", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl.[UserData]createUserData()", "name": "createUserData", "arg_nums": 0, "params": [], "return_type": "UserData", "signature": "@Override\n    public UserData createUserData()", "original_string": "    @Override\n    public UserData createUserData() {\n        return new UserData(baseUrl, apiKey, showLimitUsage, proxy);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java", "class_name": "SpotClientImpl", "class_uri": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "UserData", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl.[VIPLoans]createVIPLoans()", "name": "createVIPLoans", "arg_nums": 0, "params": [], "return_type": "VIPLoans", "signature": "@Override\n    public VIPLoans createVIPLoans()", "original_string": "    @Override\n    public VIPLoans createVIPLoans() {\n        return new VIPLoans(baseUrl, apiKey, signatureGenerator, showLimitUsage, proxy);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java", "class_name": "SpotClientImpl", "class_uri": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "VIPLoans", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl.[Wallet]createWallet()", "name": "createWallet", "arg_nums": 0, "params": [], "return_type": "Wallet", "signature": "@Override\n    public Wallet createWallet()", "original_string": "    @Override\n    public Wallet createWallet() {\n        return new Wallet(baseUrl, apiKey, signatureGenerator, showLimitUsage, proxy);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java", "class_name": "SpotClientImpl", "class_uri": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Wallet", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/WebSocketApiClientImpl.java.WebSocketApiClientImpl.[]WebSocketApiClientImpl()", "name": "WebSocketApiClientImpl", "arg_nums": 0, "params": [], "return_type": "", "signature": "public WebSocketApiClientImpl()", "original_string": "    public WebSocketApiClientImpl() {\n        this(\"\", null);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/WebSocketApiClientImpl.java", "class_name": "WebSocketApiClientImpl", "class_uri": "src/main/java/com/binance/connector/client/impl/WebSocketApiClientImpl.java.WebSocketApiClientImpl", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/WebSocketApiClientImpl.java.WebSocketApiClientImpl.[]WebSocketApiClientImpl(String)", "name": "WebSocketApiClientImpl", "arg_nums": 1, "params": [{"name": "baseUrl", "type": "String"}], "return_type": "", "signature": "public WebSocketApiClientImpl(String baseUrl)", "original_string": "    public WebSocketApiClientImpl(String baseUrl) {\n        this(\"\", null, baseUrl);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/WebSocketApiClientImpl.java", "class_name": "WebSocketApiClientImpl", "class_uri": "src/main/java/com/binance/connector/client/impl/WebSocketApiClientImpl.java.WebSocketApiClientImpl", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/WebSocketApiClientImpl.java.WebSocketApiClientImpl.[]WebSocketApiClientImpl(String,SignatureGenerator)", "name": "WebSocketApiClientImpl", "arg_nums": 2, "params": [{"name": "apiKey", "type": "String"}, {"name": "signatureGenerator", "type": "SignatureGenerator"}], "return_type": "", "signature": "public WebSocketApiClientImpl(String apiKey, SignatureGenerator signatureGenerator)", "original_string": "    public WebSocketApiClientImpl(String apiKey, SignatureGenerator signatureGenerator) {\n        this(apiKey, signatureGenerator, DefaultUrls.WS_API_URL);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/WebSocketApiClientImpl.java", "class_name": "WebSocketApiClientImpl", "class_uri": "src/main/java/com/binance/connector/client/impl/WebSocketApiClientImpl.java.WebSocketApiClientImpl", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/WebSocketApiClientImpl.java.WebSocketApiClientImpl.[]WebSocketApiClientImpl(String,SignatureGenerator,String)", "name": "WebSocketApiClientImpl", "arg_nums": 3, "params": [{"name": "apiKey", "type": "String"}, {"name": "signatureGenerator", "type": "SignatureGenerator"}, {"name": "baseUrl", "type": "String"}], "return_type": "", "signature": "public WebSocketApiClientImpl(String apiKey, SignatureGenerator signatureGenerator, String baseUrl)", "original_string": "    public WebSocketApiClientImpl(String apiKey, SignatureGenerator signatureGenerator, String baseUrl) {\n        this.apiKey = apiKey;\n        this.signatureGenerator = signatureGenerator;\n        this.baseUrl = baseUrl;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/WebSocketApiClientImpl.java", "class_name": "WebSocketApiClientImpl", "class_uri": "src/main/java/com/binance/connector/client/impl/WebSocketApiClientImpl.java.WebSocketApiClientImpl", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/WebSocketApiClientImpl.java.WebSocketApiClientImpl.[void]checkRequestHandler()", "name": "checkRequestHandler", "arg_nums": 0, "params": [], "return_type": "void", "signature": "private void checkRequestHandler()", "original_string": "    private void checkRequestHandler() {\n        if (this.requestHandler == null) {\n            throw new BinanceConnectorException(\"No WebSocket API connection to submit request. Please connect first.\");\n        }\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/WebSocketApiClientImpl.java", "class_name": "WebSocketApiClientImpl", "class_uri": "src/main/java/com/binance/connector/client/impl/WebSocketApiClientImpl.java.WebSocketApiClientImpl", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/WebSocketApiClientImpl.java.WebSocketApiClientImpl.[void]connect(WebSocketMessageCallback)", "name": "connect", "arg_nums": 1, "params": [{"name": "onMessageCallback", "type": "WebSocketMessageCallback"}], "return_type": "void", "signature": "@Override\n    public void connect(WebSocketMessageCallback onMessageCallback)", "original_string": "    @Override\n    public void connect(WebSocketMessageCallback onMessageCallback) {\n        connect(noopOpenCallback, onMessageCallback, noopClosingCallback, noopClosedCallback, noopFailureCallback);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/WebSocketApiClientImpl.java", "class_name": "WebSocketApiClientImpl", "class_uri": "src/main/java/com/binance/connector/client/impl/WebSocketApiClientImpl.java.WebSocketApiClientImpl", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/WebSocketApiClientImpl.java.WebSocketApiClientImpl.[void]connect(WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "name": "connect", "arg_nums": 5, "params": [{"name": "onOpenCallback", "type": "WebSocketOpenCallback"}, {"name": "onMessageCallback", "type": "WebSocketMessageCallback"}, {"name": "onClosingCallback", "type": "WebSocketClosingCallback"}, {"name": "onClosedCallback", "type": "WebSocketClosedCallback"}, {"name": "onFailureCallback", "type": "WebSocketFailureCallback"}], "return_type": "void", "signature": "@Override\n    public void connect(WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback)", "original_string": "    @Override\n    public void connect(WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback) {\n        Request request = RequestBuilder.buildWebSocketRequest(baseUrl);\n\n        this.connection = new WebSocketConnection(onOpenCallback, onMessageCallback, onClosingCallback, onClosedCallback, onFailureCallback, request, client);\n        this.requestHandler = new WebSocketApiRequestHandler(this.connection, this.apiKey, this.signatureGenerator);\n        this.connection.connect();\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/WebSocketApiClientImpl.java", "class_name": "WebSocketApiClientImpl", "class_uri": "src/main/java/com/binance/connector/client/impl/WebSocketApiClientImpl.java.WebSocketApiClientImpl", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/WebSocketApiClientImpl.java.WebSocketApiClientImpl.[void]close()", "name": "close", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    public void close()", "original_string": "    @Override\n    public void close() {\n        this.connection.close();\n        client.dispatcher().executorService().shutdown();\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/WebSocketApiClientImpl.java", "class_name": "WebSocketApiClientImpl", "class_uri": "src/main/java/com/binance/connector/client/impl/WebSocketApiClientImpl.java.WebSocketApiClientImpl", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/WebSocketApiClientImpl.java.WebSocketApiClientImpl.[WebSocketApiAccount]account()", "name": "account", "arg_nums": 0, "params": [], "return_type": "WebSocketApiAccount", "signature": "@Override\n    public WebSocketApiAccount account()", "original_string": "    @Override\n    public WebSocketApiAccount account() {\n        checkRequestHandler();\n        return (WebSocketApiAccount) WebSocketApiModuleFactory.build(Category.ACCOUNT, this.requestHandler);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/WebSocketApiClientImpl.java", "class_name": "WebSocketApiClientImpl", "class_uri": "src/main/java/com/binance/connector/client/impl/WebSocketApiClientImpl.java.WebSocketApiClientImpl", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "WebSocketApiAccount", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/WebSocketApiClientImpl.java.WebSocketApiClientImpl.[WebSocketApiAuth]auth()", "name": "auth", "arg_nums": 0, "params": [], "return_type": "WebSocketApiAuth", "signature": "@Override\n    public WebSocketApiAuth auth()", "original_string": "    @Override\n    public WebSocketApiAuth auth() {\n        checkRequestHandler();\n        return (WebSocketApiAuth) WebSocketApiModuleFactory.build(Category.AUTH, this.requestHandler);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/WebSocketApiClientImpl.java", "class_name": "WebSocketApiClientImpl", "class_uri": "src/main/java/com/binance/connector/client/impl/WebSocketApiClientImpl.java.WebSocketApiClientImpl", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "WebSocketApiAuth", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/WebSocketApiClientImpl.java.WebSocketApiClientImpl.[WebSocketApiGeneral]general()", "name": "general", "arg_nums": 0, "params": [], "return_type": "WebSocketApiGeneral", "signature": "@Override\n    public WebSocketApiGeneral general()", "original_string": "    @Override\n    public WebSocketApiGeneral general() {\n        checkRequestHandler();\n        return (WebSocketApiGeneral) WebSocketApiModuleFactory.build(Category.GENERAL, this.requestHandler);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/WebSocketApiClientImpl.java", "class_name": "WebSocketApiClientImpl", "class_uri": "src/main/java/com/binance/connector/client/impl/WebSocketApiClientImpl.java.WebSocketApiClientImpl", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "WebSocketApiGeneral", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/WebSocketApiClientImpl.java.WebSocketApiClientImpl.[WebSocketApiMarket]market()", "name": "market", "arg_nums": 0, "params": [], "return_type": "WebSocketApiMarket", "signature": "@Override\n    public WebSocketApiMarket market()", "original_string": "    @Override\n    public WebSocketApiMarket market() {\n        checkRequestHandler();\n        return (WebSocketApiMarket) WebSocketApiModuleFactory.build(Category.MARKET, this.requestHandler);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/WebSocketApiClientImpl.java", "class_name": "WebSocketApiClientImpl", "class_uri": "src/main/java/com/binance/connector/client/impl/WebSocketApiClientImpl.java.WebSocketApiClientImpl", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "WebSocketApiMarket", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/WebSocketApiClientImpl.java.WebSocketApiClientImpl.[WebSocketApiTrade]trade()", "name": "trade", "arg_nums": 0, "params": [], "return_type": "WebSocketApiTrade", "signature": "@Override\n    public WebSocketApiTrade trade()", "original_string": "    @Override\n    public WebSocketApiTrade trade() {\n        checkRequestHandler();\n        return (WebSocketApiTrade) WebSocketApiModuleFactory.build(Category.TRADE, this.requestHandler);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/WebSocketApiClientImpl.java", "class_name": "WebSocketApiClientImpl", "class_uri": "src/main/java/com/binance/connector/client/impl/WebSocketApiClientImpl.java.WebSocketApiClientImpl", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "WebSocketApiTrade", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/WebSocketApiClientImpl.java.WebSocketApiClientImpl.[WebSocketApiUserDataStream]userDataStream()", "name": "userDataStream", "arg_nums": 0, "params": [], "return_type": "WebSocketApiUserDataStream", "signature": "@Override\n    public WebSocketApiUserDataStream userDataStream()", "original_string": "    @Override\n    public WebSocketApiUserDataStream userDataStream() {\n        checkRequestHandler();\n        return (WebSocketApiUserDataStream) WebSocketApiModuleFactory.build(Category.USER_DATA_STREAM, this.requestHandler);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/WebSocketApiClientImpl.java", "class_name": "WebSocketApiClientImpl", "class_uri": "src/main/java/com/binance/connector/client/impl/WebSocketApiClientImpl.java.WebSocketApiClientImpl", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "WebSocketApiUserDataStream", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl.[]WebSocketStreamClientImpl()", "name": "WebSocketStreamClientImpl", "arg_nums": 0, "params": [], "return_type": "", "signature": "public WebSocketStreamClientImpl()", "original_string": "    public WebSocketStreamClientImpl() {\n        this.baseUrl = DefaultUrls.WS_URL;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java", "class_name": "WebSocketStreamClientImpl", "class_uri": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl.[]WebSocketStreamClientImpl(String)", "name": "WebSocketStreamClientImpl", "arg_nums": 1, "params": [{"name": "baseUrl", "type": "String"}], "return_type": "", "signature": "public WebSocketStreamClientImpl(String baseUrl)", "original_string": "    public WebSocketStreamClientImpl(String baseUrl) {\n        this.baseUrl = baseUrl;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java", "class_name": "WebSocketStreamClientImpl", "class_uri": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl.[int]aggTradeStream(String,WebSocketMessageCallback)", "name": "aggTradeStream", "arg_nums": 2, "params": [{"name": "symbol", "type": "String"}, {"name": "callback", "type": "WebSocketMessageCallback"}], "return_type": "int", "signature": "@Override\n    public int aggTradeStream(String symbol, WebSocketMessageCallback callback)", "original_string": "    @Override\n    public int aggTradeStream(String symbol, WebSocketMessageCallback callback) {\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n        return aggTradeStream(symbol.toLowerCase(), noopOpenCallback, callback, noopClosingCallback, noopClosedCallback, noopFailureCallback);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java", "class_name": "WebSocketStreamClientImpl", "class_uri": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nThe Aggregate Trade Streams push trade information that is aggregated for a single taker order.\n<br><br>\n&lt;symbol&gt;@aggTrade\n<br><br>\nUpdate Speed: Real-time\n\n@param symbol Name of the trading pair\n@return int - Connection ID\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#aggregate-trade-streams\">\nhttps://binance-docs.github.io/apidocs/spot/en/#aggregate-trade-streams</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl.[int]aggTradeStream(String,WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "name": "aggTradeStream", "arg_nums": 6, "params": [{"name": "symbol", "type": "String"}, {"name": "onOpenCallback", "type": "WebSocketOpenCallback"}, {"name": "onMessageCallback", "type": "WebSocketMessageCallback"}, {"name": "onClosingCallback", "type": "WebSocketClosingCallback"}, {"name": "onClosedCallback", "type": "WebSocketClosedCallback"}, {"name": "onFailureCallback", "type": "WebSocketFailureCallback"}], "return_type": "int", "signature": "@Override\n    public int aggTradeStream(String symbol, WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback)", "original_string": "    @Override\n    public int aggTradeStream(String symbol, WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback) {\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n        Request request = RequestBuilder.buildWebSocketRequest(String.format(\"%s/ws/%s@aggTrade\", baseUrl, symbol.toLowerCase()));\n        return createConnection(onOpenCallback, onMessageCallback, onClosingCallback, onClosedCallback, onFailureCallback, request);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java", "class_name": "WebSocketStreamClientImpl", "class_uri": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nSame as {@link #aggTradeStream(String, WebSocketMessageCallback)} plus accepts callbacks for all major websocket connection events.\n\n@param symbol Name of the trading pair\n@param onOpenCallback Callback for when the websocket connection is opened\n@param onMessageCallback Callback for when a message is received\n@param onClosingCallback Callback for when the websocket connection is closing\n@param onFailureCallback Callback for when an error occurs\n@return int - Connection ID\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl.[int]tradeStream(String,WebSocketMessageCallback)", "name": "tradeStream", "arg_nums": 2, "params": [{"name": "symbol", "type": "String"}, {"name": "callback", "type": "WebSocketMessageCallback"}], "return_type": "int", "signature": "@Override\n    public int tradeStream(String symbol, WebSocketMessageCallback callback)", "original_string": "    @Override\n    public int tradeStream(String symbol, WebSocketMessageCallback callback) {\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n        return tradeStream(symbol.toLowerCase(), noopOpenCallback, callback, noopClosingCallback, noopClosedCallback, noopFailureCallback);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java", "class_name": "WebSocketStreamClientImpl", "class_uri": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nThe Trade Streams push raw trade information; each trade has a unique buyer and seller.\n<br><br>\n&lt;symbol&gt;@trade\n<br><br>\nUpdate Speed: Real-time\n\n@param symbol Name of the trading pair\n@return int - Connection ID\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#trade-streams\">\nhttps://binance-docs.github.io/apidocs/spot/en/#trade-streams</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl.[int]tradeStream(String,WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "name": "tradeStream", "arg_nums": 6, "params": [{"name": "symbol", "type": "String"}, {"name": "onOpenCallback", "type": "WebSocketOpenCallback"}, {"name": "onMessageCallback", "type": "WebSocketMessageCallback"}, {"name": "onClosingCallback", "type": "WebSocketClosingCallback"}, {"name": "onClosedCallback", "type": "WebSocketClosedCallback"}, {"name": "onFailureCallback", "type": "WebSocketFailureCallback"}], "return_type": "int", "signature": "@Override\n    public int tradeStream(String symbol, WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback)", "original_string": "    @Override\n    public int tradeStream(String symbol, WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback) {\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n        Request request = RequestBuilder.buildWebSocketRequest(String.format(\"%s/ws/%s@trade\", baseUrl, symbol.toLowerCase()));\n        return createConnection(onOpenCallback, onMessageCallback, onClosingCallback, onClosedCallback, onFailureCallback, request);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java", "class_name": "WebSocketStreamClientImpl", "class_uri": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nSame as {@link #tradeStream(String, WebSocketMessageCallback)} plus accepts callbacks for all major websocket connection events.\n\n@param symbol Name of the trading pair\n@param onOpenCallback Callback for when the websocket connection is opened\n@param onMessageCallback Callback for when a message is received\n@param onClosingCallback Callback for when the websocket connection is closing\n@param onFailureCallback Callback for when an error occurs\n@return int - Connection ID\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl.[int]klineStream(String,String,WebSocketMessageCallback)", "name": "klineStream", "arg_nums": 3, "params": [{"name": "symbol", "type": "String"}, {"name": "interval", "type": "String"}, {"name": "callback", "type": "WebSocketMessageCallback"}], "return_type": "int", "signature": "@Override\n    public int klineStream(String symbol, String interval, WebSocketMessageCallback callback)", "original_string": "    @Override\n    public int klineStream(String symbol, String interval, WebSocketMessageCallback callback) {\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n        return klineStream(symbol.toLowerCase(), interval, noopOpenCallback, callback, noopClosingCallback, noopClosedCallback, noopFailureCallback);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java", "class_name": "WebSocketStreamClientImpl", "class_uri": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nThe Kline/Candlestick Stream push updates to the current klines/candlestick every second.\n<br><br>\n&lt;symbol&gt;@kline_&lt;interval&gt;\n<br><br>\nUpdate Speed: Real-time\n\n@param symbol Name of the trading pair\n@param interval Time interval for kline/candlestick\n@return int - Connection ID\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#kline-candlestick-streams\">\nhttps://binance-docs.github.io/apidocs/spot/en/#kline-candlestick-streams</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl.[int]klineStream(String,String,WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "name": "klineStream", "arg_nums": 7, "params": [{"name": "symbol", "type": "String"}, {"name": "interval", "type": "String"}, {"name": "onOpenCallback", "type": "WebSocketOpenCallback"}, {"name": "onMessageCallback", "type": "WebSocketMessageCallback"}, {"name": "onClosingCallback", "type": "WebSocketClosingCallback"}, {"name": "onClosedCallback", "type": "WebSocketClosedCallback"}, {"name": "onFailureCallback", "type": "WebSocketFailureCallback"}], "return_type": "int", "signature": "@Override\n    public int klineStream(String symbol, String interval, WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback)", "original_string": "    @Override\n    public int klineStream(String symbol, String interval, WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback) {\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n        Request request = RequestBuilder.buildWebSocketRequest(String.format(\"%s/ws/%s@kline_%s\", baseUrl, symbol.toLowerCase(), interval));\n        return createConnection(onOpenCallback, onMessageCallback, onClosingCallback, onClosedCallback, onFailureCallback, request);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java", "class_name": "WebSocketStreamClientImpl", "class_uri": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nSame as {@link #klineStream(String, String, WebSocketMessageCallback)} plus accepts callbacks for all major websocket connection events.\n\n@param symbol Name of the trading pair\n@param interval Time interval for kline/candlestick\n@param onOpenCallback Callback for when the websocket connection is opened\n@param onMessageCallback Callback for when a message is received\n@param onClosingCallback Callback for when the websocket connection is closing\n@param onFailureCallback Callback for when an error occurs\n@return int - Connection ID\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl.[int]miniTickerStream(String,WebSocketMessageCallback)", "name": "miniTickerStream", "arg_nums": 2, "params": [{"name": "symbol", "type": "String"}, {"name": "callback", "type": "WebSocketMessageCallback"}], "return_type": "int", "signature": "@Override\n    public int miniTickerStream(String symbol, WebSocketMessageCallback callback)", "original_string": "    @Override\n    public int miniTickerStream(String symbol, WebSocketMessageCallback callback) {\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n        return miniTickerStream(symbol.toLowerCase(), noopOpenCallback, callback, noopClosingCallback, noopClosedCallback, noopFailureCallback);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java", "class_name": "WebSocketStreamClientImpl", "class_uri": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\n24hr rolling window mini-ticker statistics.\nThese are NOT the statistics of the UTC day, but a 24hr rolling window for the previous 24hrs.\n<br><br>\n&lt;symbol&gt;@miniTicker\n<br><br>\nUpdate Speed: Real-time\n\n@param symbol Name of the trading pair\n@return int - Connection ID\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#individual-symbol-mini-ticker-stream\">\nhttps://binance-docs.github.io/apidocs/spot/en/#individual-symbol-mini-ticker-stream</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl.[int]miniTickerStream(String,WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "name": "miniTickerStream", "arg_nums": 6, "params": [{"name": "symbol", "type": "String"}, {"name": "onOpenCallback", "type": "WebSocketOpenCallback"}, {"name": "onMessageCallback", "type": "WebSocketMessageCallback"}, {"name": "onClosingCallback", "type": "WebSocketClosingCallback"}, {"name": "onClosedCallback", "type": "WebSocketClosedCallback"}, {"name": "onFailureCallback", "type": "WebSocketFailureCallback"}], "return_type": "int", "signature": "@Override\n    public int miniTickerStream(String symbol, WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback)", "original_string": "    @Override\n    public int miniTickerStream(String symbol, WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback) {\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n        Request request = RequestBuilder.buildWebSocketRequest(String.format(\"%s/ws/%s@miniTicker\", baseUrl, symbol.toLowerCase()));\n        return createConnection(onOpenCallback, onMessageCallback, onClosingCallback, onClosedCallback, onFailureCallback, request);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java", "class_name": "WebSocketStreamClientImpl", "class_uri": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nSame as {@link #miniTickerStream(String, WebSocketMessageCallback)} plus accepts callbacks for all major websocket connection events.\n\n@param symbol Name of the trading pair\n@param onOpenCallback Callback for when the websocket connection is opened\n@param onMessageCallback Callback for when a message is received\n@param onClosingCallback Callback for when the websocket connection is closing\n@param onFailureCallback Callback for when an error occurs\n@return int - Connection ID\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl.[int]allMiniTickerStream(WebSocketMessageCallback)", "name": "allMiniTickerStream", "arg_nums": 1, "params": [{"name": "callback", "type": "WebSocketMessageCallback"}], "return_type": "int", "signature": "@Override\n    public int allMiniTickerStream(WebSocketMessageCallback callback)", "original_string": "    @Override\n    public int allMiniTickerStream(WebSocketMessageCallback callback) {\n        return allMiniTickerStream(noopOpenCallback, callback, noopClosingCallback, noopClosedCallback, noopFailureCallback);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java", "class_name": "WebSocketStreamClientImpl", "class_uri": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\n24hr rolling window mini-ticker statistics for all symbols that changed in an array.\nThese are NOT the statistics of the UTC day, but a 24hr rolling window for the previous 24hrs.\nNote that only tickers that have changed will be present in the array.\n<br><br>\n!miniTicker@arr\n<br><br>\nUpdate Speed: Real-time\n\n@return int - Connection ID\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#all-market-mini-tickers-stream\">\nhttps://binance-docs.github.io/apidocs/spot/en/#all-market-mini-tickers-stream</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl.[int]allMiniTickerStream(WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "name": "allMiniTickerStream", "arg_nums": 5, "params": [{"name": "onOpenCallback", "type": "WebSocketOpenCallback"}, {"name": "onMessageCallback", "type": "WebSocketMessageCallback"}, {"name": "onClosingCallback", "type": "WebSocketClosingCallback"}, {"name": "onClosedCallback", "type": "WebSocketClosedCallback"}, {"name": "onFailureCallback", "type": "WebSocketFailureCallback"}], "return_type": "int", "signature": "@Override\n    public int allMiniTickerStream(WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback)", "original_string": "    @Override\n    public int allMiniTickerStream(WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback) {\n        Request request = RequestBuilder.buildWebSocketRequest(String.format(\"%s/ws/!miniTicker@arr\", baseUrl));\n        return createConnection(onOpenCallback, onMessageCallback, onClosingCallback, onClosedCallback, onFailureCallback, request);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java", "class_name": "WebSocketStreamClientImpl", "class_uri": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nSame as {@link #allMiniTickerStream(WebSocketMessageCallback)} plus accepts callbacks for all major websocket connection events.\n\n@param onOpenCallback Callback for when the websocket connection is opened\n@param onMessageCallback Callback for when a message is received\n@param onClosingCallback Callback for when the websocket connection is closing\n@param onFailureCallback Callback for when an error occurs\n@return int - Connection ID\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl.[int]symbolTicker(String,WebSocketMessageCallback)", "name": "symbolTicker", "arg_nums": 2, "params": [{"name": "symbol", "type": "String"}, {"name": "callback", "type": "WebSocketMessageCallback"}], "return_type": "int", "signature": "@Override\n    public int symbolTicker(String symbol, WebSocketMessageCallback callback)", "original_string": "    @Override\n    public int symbolTicker(String symbol, WebSocketMessageCallback callback) {\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n        return symbolTicker(symbol.toLowerCase(), noopOpenCallback, callback, noopClosingCallback, noopClosedCallback, noopFailureCallback);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java", "class_name": "WebSocketStreamClientImpl", "class_uri": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\n24hr rolling window ticker statistics for a single symbol.\nThese are NOT the statistics of the UTC day, but a 24hr rolling window for the previous 24hrs.\n<br><br>\n&lt;symbol&gt;@ticker\n<br><br>\nUpdate Speed: Real-time\n\n@param symbol Name of the trading pair\n@return int - Connection ID\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#individual-symbol-ticker-streams\">\nhttps://binance-docs.github.io/apidocs/spot/en/#individual-symbol-ticker-streams</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl.[int]symbolTicker(String,WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "name": "symbolTicker", "arg_nums": 6, "params": [{"name": "symbol", "type": "String"}, {"name": "onOpenCallback", "type": "WebSocketOpenCallback"}, {"name": "onMessageCallback", "type": "WebSocketMessageCallback"}, {"name": "onClosingCallback", "type": "WebSocketClosingCallback"}, {"name": "onClosedCallback", "type": "WebSocketClosedCallback"}, {"name": "onFailureCallback", "type": "WebSocketFailureCallback"}], "return_type": "int", "signature": "@Override\n    public int symbolTicker(String symbol, WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback)", "original_string": "    @Override\n    public int symbolTicker(String symbol, WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback) {\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n        Request request = RequestBuilder.buildWebSocketRequest(String.format(\"%s/ws/%s@ticker\", baseUrl, symbol.toLowerCase()));\n        return createConnection(onOpenCallback, onMessageCallback, onClosingCallback, onClosedCallback, onFailureCallback, request);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java", "class_name": "WebSocketStreamClientImpl", "class_uri": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nSame as {@link #symbolTicker(String, WebSocketMessageCallback)} plus accepts callbacks for all major websocket connection events.\n\n@param symbol Name of the trading pair\n@param onOpenCallback Callback for when the websocket connection is opened\n@param onMessageCallback Callback for when a message is received\n@param onClosingCallback Callback for when the websocket connection is closing\n@param onFailureCallback Callback for when an error occurs\n@return int - Connection ID\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl.[int]allTickerStream(WebSocketMessageCallback)", "name": "allTickerStream", "arg_nums": 1, "params": [{"name": "callback", "type": "WebSocketMessageCallback"}], "return_type": "int", "signature": "@Override\n    public int allTickerStream(WebSocketMessageCallback callback)", "original_string": "    @Override\n    public int allTickerStream(WebSocketMessageCallback callback) {\n        return allTickerStream(noopOpenCallback, callback, noopClosingCallback, noopClosedCallback, noopFailureCallback);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java", "class_name": "WebSocketStreamClientImpl", "class_uri": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\n24hr rolling window ticker statistics for all symbols that changed in an array.\nThese are NOT the statistics of the UTC day, but a 24hr rolling window for the previous 24hrs.\nNote that only tickers that have changed will be present in the array.\n<br><br>\n!ticker@arr\n<br><br>\nUpdate Speed: Real-time\n\n@return int - Connection ID\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#all-market-tickers-stream\">\nhttps://binance-docs.github.io/apidocs/spot/en/#all-market-tickers-stream</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl.[int]allTickerStream(WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "name": "allTickerStream", "arg_nums": 5, "params": [{"name": "onOpenCallback", "type": "WebSocketOpenCallback"}, {"name": "onMessageCallback", "type": "WebSocketMessageCallback"}, {"name": "onClosingCallback", "type": "WebSocketClosingCallback"}, {"name": "onClosedCallback", "type": "WebSocketClosedCallback"}, {"name": "onFailureCallback", "type": "WebSocketFailureCallback"}], "return_type": "int", "signature": "@Override\n    public int allTickerStream(WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback)", "original_string": "    @Override\n    public int allTickerStream(WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback) {\n        Request request = RequestBuilder.buildWebSocketRequest(String.format(\"%s/ws/!ticker@arr\", baseUrl));\n        return createConnection(onOpenCallback, onMessageCallback, onClosingCallback, onClosedCallback, onFailureCallback, request);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java", "class_name": "WebSocketStreamClientImpl", "class_uri": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nSame as {@link #allTickerStream(WebSocketMessageCallback)} plus accepts callbacks for all major websocket connection events.\n\n@param onOpenCallback Callback for when the websocket connection is opened\n@param onMessageCallback Callback for when a message is received\n@param onClosingCallback Callback for when the websocket connection is closing\n@param onFailureCallback Callback for when an error occurs\n@return int - Connection ID\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl.[int]rollingWindowTicker(String,String,WebSocketMessageCallback)", "name": "rollingWindowTicker", "arg_nums": 3, "params": [{"name": "symbol", "type": "String"}, {"name": "windowSize", "type": "String"}, {"name": "callback", "type": "WebSocketMessageCallback"}], "return_type": "int", "signature": "public int rollingWindowTicker(String symbol, String windowSize, WebSocketMessageCallback callback)", "original_string": "    public int rollingWindowTicker(String symbol, String windowSize, WebSocketMessageCallback callback) {\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n        ParameterChecker.checkParameterType(symbol, String.class, \"windowSize\");\n        ArrayList<String> allowedWindowSize = new ArrayList<String>() {{\n                add(\"1h\");\n                add(\"4h\");\n            }};\n        if (!allowedWindowSize.contains(windowSize)) {\n            throw new BinanceConnectorException(String.format(\"\\\"%s\\\" is not a valid window size.\", windowSize));\n        }\n        return rollingWindowTicker(symbol.toLowerCase(), windowSize, noopOpenCallback, callback, noopClosingCallback, noopClosedCallback, noopFailureCallback);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java", "class_name": "WebSocketStreamClientImpl", "class_uri": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nRolling window ticker statistics for a single symbol, computed over multiple windows.\n<br><br>\n&lt;symbol&gt;@ticker_&lt;window_size&gt;\n<br><br>\nUpdate Speed: Real-time\n\n@param symbol Name of the trading pair\n@param windowSize Window Sizes: 1h,4h\n@return int - Connection ID\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#individual-symbol-rolling-window-statistics-streams\">\nhttps://binance-docs.github.io/apidocs/spot/en/#individual-symbol-rolling-window-statistics-streams</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl.[int]rollingWindowTicker(String,String,WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "name": "rollingWindowTicker", "arg_nums": 7, "params": [{"name": "symbol", "type": "String"}, {"name": "windowSize", "type": "String"}, {"name": "onOpenCallback", "type": "WebSocketOpenCallback"}, {"name": "onMessageCallback", "type": "WebSocketMessageCallback"}, {"name": "onClosingCallback", "type": "WebSocketClosingCallback"}, {"name": "onClosedCallback", "type": "WebSocketClosedCallback"}, {"name": "onFailureCallback", "type": "WebSocketFailureCallback"}], "return_type": "int", "signature": "@Override\n    public int rollingWindowTicker(String symbol, String windowSize, WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback)", "original_string": "    @Override\n    public int rollingWindowTicker(String symbol, String windowSize, WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback) {\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n        ParameterChecker.checkParameterType(symbol, String.class, \"windowSize\");\n        ArrayList<String> allowedWindowSize = new ArrayList<String>() {{\n                add(\"1h\");\n                add(\"4h\");\n            }};\n        if (!allowedWindowSize.contains(windowSize)) {\n            throw new BinanceConnectorException(String.format(\"\\\"%s\\\" is not a valid window size.\", windowSize));\n        }\n        Request request = RequestBuilder.buildWebSocketRequest(String.format(\"%s/ws/%s@ticker_%s\", baseUrl, symbol.toLowerCase(), windowSize));\n        return createConnection(onOpenCallback, onMessageCallback, onClosingCallback, onClosedCallback, onFailureCallback, request);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java", "class_name": "WebSocketStreamClientImpl", "class_uri": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nSame as {@link #rollingWindowTicker(String, String, WebSocketMessageCallback)} (String, WebSocketCallback)} plus accepts callbacks for all major websocket connection events.\n\n@param symbol Name of the trading pair\n@param onOpenCallback Callback for when the websocket connection is opened\n@param onMessageCallback Callback for when a message is received\n@param onClosingCallback Callback for when the websocket connection is closing\n@param onFailureCallback Callback for when an error occurs\n@return int - Connection ID\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl.[int]allRollingWindowTicker(String,WebSocketMessageCallback)", "name": "allRollingWindowTicker", "arg_nums": 2, "params": [{"name": "windowSize", "type": "String"}, {"name": "callback", "type": "WebSocketMessageCallback"}], "return_type": "int", "signature": "@Override\n    public int allRollingWindowTicker(String windowSize, WebSocketMessageCallback callback)", "original_string": "    @Override\n    public int allRollingWindowTicker(String windowSize, WebSocketMessageCallback callback) {\n        ParameterChecker.checkParameterType(windowSize, String.class, \"windowSize\");\n        ArrayList<String> allowedWindowSize = new ArrayList<String>() {{\n                add(\"1h\");\n                add(\"4h\");\n            }};\n        if (!allowedWindowSize.contains(windowSize.toLowerCase())) {\n            throw new BinanceConnectorException(String.format(\"\\\"%s\\\" is not a valid window size.\", windowSize.toLowerCase()));\n        }\n        return allRollingWindowTicker(windowSize.toLowerCase(), noopOpenCallback, callback, noopClosingCallback, noopClosedCallback, noopFailureCallback);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java", "class_name": "WebSocketStreamClientImpl", "class_uri": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nRolling window ticker statistics for all market symbols, computed over multiple windows.\nNote that only tickers that have changed will be present in the array.\n<br><br>\n!ticker_&lt;window-size&gt;@arr\n<br><br>\nUpdate Speed: Real-time\n\n@param windowSize Window Sizes: 1h,4h\n@return int - Connection ID\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#all-market-rolling-window-statistics-streams\">\nhttps://binance-docs.github.io/apidocs/spot/en/#all-market-rolling-window-statistics-streams</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl.[int]allRollingWindowTicker(String,WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "name": "allRollingWindowTicker", "arg_nums": 6, "params": [{"name": "windowSize", "type": "String"}, {"name": "onOpenCallback", "type": "WebSocketOpenCallback"}, {"name": "onMessageCallback", "type": "WebSocketMessageCallback"}, {"name": "onClosingCallback", "type": "WebSocketClosingCallback"}, {"name": "onClosedCallback", "type": "WebSocketClosedCallback"}, {"name": "onFailureCallback", "type": "WebSocketFailureCallback"}], "return_type": "int", "signature": "@Override\n    public int allRollingWindowTicker(String windowSize, WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback)", "original_string": "    @Override\n    public int allRollingWindowTicker(String windowSize, WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback) {\n        ParameterChecker.checkParameterType(windowSize, String.class, \"windowSize\");\n        Request request = RequestBuilder.buildWebSocketRequest(String.format(\"%s/ws/!ticker_%s@arr\", baseUrl, windowSize.toLowerCase()));\n        return createConnection(onOpenCallback, onMessageCallback, onClosingCallback, onClosedCallback, onFailureCallback, request);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java", "class_name": "WebSocketStreamClientImpl", "class_uri": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nSame as {@link #allRollingWindowTicker(String, WebSocketMessageCallback)} plus accepts callbacks for all major websocket connection events.\n\n@param windowSize Window Sizes: 1h,4h\n@param onOpenCallback Callback for when the websocket connection is opened\n@param onMessageCallback Callback for when a message is received\n@param onClosingCallback Callback for when the websocket connection is closing\n@param onFailureCallback Callback for when an error occurs\n@return int - Connection ID\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl.[int]bookTicker(String,WebSocketMessageCallback)", "name": "bookTicker", "arg_nums": 2, "params": [{"name": "symbol", "type": "String"}, {"name": "callback", "type": "WebSocketMessageCallback"}], "return_type": "int", "signature": "@Override\n    public int bookTicker(String symbol, WebSocketMessageCallback callback)", "original_string": "    @Override\n    public int bookTicker(String symbol, WebSocketMessageCallback callback) {\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n        return bookTicker(symbol.toLowerCase(), noopOpenCallback, callback, noopClosingCallback, noopClosedCallback, noopFailureCallback);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java", "class_name": "WebSocketStreamClientImpl", "class_uri": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nPushes any update to the best bid or ask's price or quantity in real-time for a specified symbol.\n<br><br>\n&lt;symbol&gt;@bookTicker\n<br><br>\nUpdate Speed: Real-time\n\n@param symbol Name of the trading pair\n@return int - Connection ID\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#individual-symbol-book-ticker-streams\">\nhttps://binance-docs.github.io/apidocs/spot/en/#individual-symbol-book-ticker-streams</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl.[int]bookTicker(String,WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "name": "bookTicker", "arg_nums": 6, "params": [{"name": "symbol", "type": "String"}, {"name": "onOpenCallback", "type": "WebSocketOpenCallback"}, {"name": "onMessageCallback", "type": "WebSocketMessageCallback"}, {"name": "onClosingCallback", "type": "WebSocketClosingCallback"}, {"name": "onClosedCallback", "type": "WebSocketClosedCallback"}, {"name": "onFailureCallback", "type": "WebSocketFailureCallback"}], "return_type": "int", "signature": "@Override\n    public int bookTicker(String symbol, WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback)", "original_string": "    @Override\n    public int bookTicker(String symbol, WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback) {\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n        Request request = RequestBuilder.buildWebSocketRequest(String.format(\"%s/ws/%s@bookTicker\", baseUrl, symbol.toLowerCase()));\n        return createConnection(onOpenCallback, onMessageCallback, onClosingCallback, onClosedCallback, onFailureCallback, request);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java", "class_name": "WebSocketStreamClientImpl", "class_uri": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nSame as {@link #bookTicker(String, WebSocketMessageCallback)} plus accepts callbacks for all major websocket connection events.\n\n@param symbol Name of the trading pair\n@param onOpenCallback Callback for when the websocket connection is opened\n@param onMessageCallback Callback for when a message is received\n@param onClosingCallback Callback for when the websocket connection is closing\n@param onFailureCallback Callback for when an error occurs\n@return int - Connection ID\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl.[int]partialDepthStream(String,int,int,WebSocketMessageCallback)", "name": "partialDepthStream", "arg_nums": 4, "params": [{"name": "symbol", "type": "String"}, {"name": "levels", "type": "int"}, {"name": "speed", "type": "int"}, {"name": "callback", "type": "WebSocketMessageCallback"}], "return_type": "int", "signature": "@Override\n    public int partialDepthStream(String symbol, int levels, int speed, WebSocketMessageCallback callback)", "original_string": "    @Override\n    public int partialDepthStream(String symbol, int levels, int speed, WebSocketMessageCallback callback) {\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n        return partialDepthStream(symbol.toLowerCase(), levels, speed, noopOpenCallback, callback, noopClosingCallback, noopClosedCallback, noopFailureCallback);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java", "class_name": "WebSocketStreamClientImpl", "class_uri": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nTop bids and asks, Valid are 5, 10, or 20.\n<br><br>\n&lt;symbol&gt;@depth&lt;levels&gt;@&lt;speed&gt;ms\n<br><br>\nUpdate Speed: 1000ms or 100ms\n\n@param symbol Name of the trading pair\n@param levels Valid are 5, 10, or 20\n@param speed  1000ms or 100ms\n@return int - Connection ID\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#partial-book-depth-streams\">\nhttps://binance-docs.github.io/apidocs/spot/en/#partial-book-depth-streams</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl.[int]partialDepthStream(String,int,int,WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "name": "partialDepthStream", "arg_nums": 8, "params": [{"name": "symbol", "type": "String"}, {"name": "levels", "type": "int"}, {"name": "speed", "type": "int"}, {"name": "onOpenCallback", "type": "WebSocketOpenCallback"}, {"name": "onMessageCallback", "type": "WebSocketMessageCallback"}, {"name": "onClosingCallback", "type": "WebSocketClosingCallback"}, {"name": "onClosedCallback", "type": "WebSocketClosedCallback"}, {"name": "onFailureCallback", "type": "WebSocketFailureCallback"}], "return_type": "int", "signature": "@Override\n    public int partialDepthStream(String symbol, int levels, int speed, WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback)", "original_string": "    @Override\n    public int partialDepthStream(String symbol, int levels, int speed, WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback) {\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n        Request request = RequestBuilder.buildWebSocketRequest(String.format(\"%s/ws/%s@depth%s@%sms\", baseUrl, symbol.toLowerCase(), levels, speed));\n        return createConnection(onOpenCallback, onMessageCallback, onClosingCallback, onClosedCallback, onFailureCallback, request);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java", "class_name": "WebSocketStreamClientImpl", "class_uri": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nSame as {@link #partialDepthStream(String, int, int, WebSocketMessageCallback)} plus accepts callbacks for all major websocket connection events.\n\n@param symbol Name of the trading pair\n@param levels Valid are 5, 10, or 20\n@param speed  1000ms or 100ms\n@param onOpenCallback Callback for when the websocket connection is opened\n@param onMessageCallback Callback for when a message is received\n@param onClosingCallback Callback for when the websocket connection is closing\n@param onFailureCallback Callback for when an error occurs\n@return int - Connection ID\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl.[int]diffDepthStream(String,int,WebSocketMessageCallback)", "name": "diffDepthStream", "arg_nums": 3, "params": [{"name": "symbol", "type": "String"}, {"name": "speed", "type": "int"}, {"name": "callback", "type": "WebSocketMessageCallback"}], "return_type": "int", "signature": "@Override\n    public int diffDepthStream(String symbol, int speed, WebSocketMessageCallback callback)", "original_string": "    @Override\n    public int diffDepthStream(String symbol, int speed, WebSocketMessageCallback callback) {\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n        return diffDepthStream(symbol.toLowerCase(), speed, noopOpenCallback, callback, noopClosingCallback, noopClosedCallback, noopFailureCallback);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java", "class_name": "WebSocketStreamClientImpl", "class_uri": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nOrder book price and quantity depth updates used to locally manage an order book.\n<br><br>\n&lt;symbol&gt;@depth@&lt;speed&gt;ms\n<br><br>\nUpdate Speed: 1000ms or 100ms\n\n@param symbol Name of the trading pair\n@param speed  1000ms or 100ms\n@return int - Connection ID\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#diff-depth-stream\">\nhttps://binance-docs.github.io/apidocs/spot/en/#diff-depth-stream</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl.[int]diffDepthStream(String,int,WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "name": "diffDepthStream", "arg_nums": 7, "params": [{"name": "symbol", "type": "String"}, {"name": "speed", "type": "int"}, {"name": "onOpenCallback", "type": "WebSocketOpenCallback"}, {"name": "onMessageCallback", "type": "WebSocketMessageCallback"}, {"name": "onClosingCallback", "type": "WebSocketClosingCallback"}, {"name": "onClosedCallback", "type": "WebSocketClosedCallback"}, {"name": "onFailureCallback", "type": "WebSocketFailureCallback"}], "return_type": "int", "signature": "@Override\n    public int diffDepthStream(String symbol, int speed, WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback)", "original_string": "    @Override\n    public int diffDepthStream(String symbol, int speed, WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback) {\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n        Request request = RequestBuilder.buildWebSocketRequest(String.format(\"%s/ws/%s@depth@%sms\", baseUrl, symbol.toLowerCase(), speed));\n        return createConnection(onOpenCallback, onMessageCallback, onClosingCallback, onClosedCallback, onFailureCallback, request);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java", "class_name": "WebSocketStreamClientImpl", "class_uri": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nSame as {@link #diffDepthStream(String, int, WebSocketMessageCallback)} plus accepts callbacks for all major websocket connection events.\n\n@param symbol Name of the trading pair\n@param speed  1000ms or 100ms\n@param onOpenCallback Callback for when the websocket connection is opened\n@param onMessageCallback Callback for when a message is received\n@param onClosingCallback Callback for when the websocket connection is closing\n@param onFailureCallback Callback for when an error occurs\n@return int - Connection ID\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl.[int]listenUserStream(String,WebSocketMessageCallback)", "name": "listenUserStream", "arg_nums": 2, "params": [{"name": "listenKey", "type": "String"}, {"name": "callback", "type": "WebSocketMessageCallback"}], "return_type": "int", "signature": "@Override\n    public int listenUserStream(String listenKey, WebSocketMessageCallback callback)", "original_string": "    @Override\n    public int listenUserStream(String listenKey, WebSocketMessageCallback callback) {\n        return listenUserStream(listenKey, noopOpenCallback, callback, noopClosingCallback, noopClosedCallback, noopFailureCallback);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java", "class_name": "WebSocketStreamClientImpl", "class_uri": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nUser Data Streams are accessed at /ws/&lt;listenKey&gt;\n\n@param listenKey listen key obtained from this\n                 <a href=\"https://binance-docs.github.io/apidocs/spot/en/#listen-key-spot\">endpoint</a>\n@return int - Connection ID\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#user-data-streams\">\nhttps://binance-docs.github.io/apidocs/spot/en/#user-data-streams</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl.[int]listenUserStream(String,WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "name": "listenUserStream", "arg_nums": 6, "params": [{"name": "listenKey", "type": "String"}, {"name": "onOpenCallback", "type": "WebSocketOpenCallback"}, {"name": "onMessageCallback", "type": "WebSocketMessageCallback"}, {"name": "onClosingCallback", "type": "WebSocketClosingCallback"}, {"name": "onClosedCallback", "type": "WebSocketClosedCallback"}, {"name": "onFailureCallback", "type": "WebSocketFailureCallback"}], "return_type": "int", "signature": "@Override\n    public int listenUserStream(String listenKey, WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback)", "original_string": "    @Override\n    public int listenUserStream(String listenKey, WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback) {\n        Request request = RequestBuilder.buildWebSocketRequest(String.format(\"%s/ws/%s\", baseUrl, listenKey));\n        return createConnection(onOpenCallback, onMessageCallback, onClosingCallback, onClosedCallback, onFailureCallback, request);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java", "class_name": "WebSocketStreamClientImpl", "class_uri": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nSame as {@link #listenUserStream(String, WebSocketMessageCallback)} plus accepts callbacks for all major websocket connection events.\n\n@param listenKey listen key obtained from this\n                 <a href=\"https://binance-docs.github.io/apidocs/spot/en/#listen-key-spot\">endpoint</a>\n@param onOpenCallback Callback for when the websocket connection is opened\n@param onMessageCallback Callback for when a message is received\n@param onClosingCallback Callback for when the websocket connection is closing\n@param onFailureCallback Callback for when an error occurs\n@return int - Connection ID\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl.[int]combineStreams(ArrayList<String>,WebSocketMessageCallback)", "name": "combineStreams", "arg_nums": 2, "params": [{"name": "streams", "type": "ArrayList<String>"}, {"name": "callback", "type": "WebSocketMessageCallback"}], "return_type": "int", "signature": "@Override\n    public int combineStreams(ArrayList<String> streams, WebSocketMessageCallback callback)", "original_string": "    @Override\n    public int combineStreams(ArrayList<String> streams, WebSocketMessageCallback callback) {\n        return combineStreams(streams, noopOpenCallback, callback, noopClosingCallback, noopClosedCallback, noopFailureCallback);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java", "class_name": "WebSocketStreamClientImpl", "class_uri": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nCombined streams are accessed at /stream?streams=&lt;streamName1&gt;/&lt;streamName2&gt;/&lt;streamName3&gt;\n\n@param streams ArrayList of stream names to be combined <br>\n@return int - Connection ID\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#websocket-market-streams\">\nhttps://binance-docs.github.io/apidocs/spot/en/#websocket-market-streams</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl.[int]combineStreams(ArrayList<String>,WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "name": "combineStreams", "arg_nums": 6, "params": [{"name": "streams", "type": "ArrayList<String>"}, {"name": "onOpenCallback", "type": "WebSocketOpenCallback"}, {"name": "onMessageCallback", "type": "WebSocketMessageCallback"}, {"name": "onClosingCallback", "type": "WebSocketClosingCallback"}, {"name": "onClosedCallback", "type": "WebSocketClosedCallback"}, {"name": "onFailureCallback", "type": "WebSocketFailureCallback"}], "return_type": "int", "signature": "@Override\n    public int combineStreams(ArrayList<String> streams, WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback)", "original_string": "    @Override\n    public int combineStreams(ArrayList<String> streams, WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback) {\n        String url = UrlBuilder.buildStreamUrl(baseUrl, streams);\n        Request request = RequestBuilder.buildWebSocketRequest(url);\n        return createConnection(onOpenCallback, onMessageCallback, onClosingCallback, onClosedCallback, onFailureCallback, request);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java", "class_name": "WebSocketStreamClientImpl", "class_uri": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nSame as {@link #combineStreams(ArrayList, WebSocketMessageCallback)} plus accepts callbacks for all major websocket connection events.\n\n@param streams ArrayList of stream names to be combined <br>\n@param onOpenCallback Callback for when the websocket connection is opened\n@param onMessageCallback Callback for when a message is received\n@param onClosingCallback Callback for when the websocket connection is closing\n@param onFailureCallback Callback for when an error occurs\n@return int - Connection ID\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl.[void]closeConnection(int)", "name": "closeConnection", "arg_nums": 1, "params": [{"name": "connectionId", "type": "int"}], "return_type": "void", "signature": "@Override\n    public void closeConnection(int connectionId)", "original_string": "    @Override\n    public void closeConnection(int connectionId) {\n        if (connections.containsKey(connectionId)) {\n            connections.get(connectionId).close();\n            logger.info(\"Closing Connection ID {}\", connectionId);\n            connections.remove(connectionId);\n        } else {\n            logger.info(\"Connection ID {} does not exist!\", connectionId);\n        }\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java", "class_name": "WebSocketStreamClientImpl", "class_uri": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nCloses a specific stream based on stream ID.\n\n@param connectionId The connection ID to close.\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl.[void]closeAllConnections()", "name": "closeAllConnections", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    public void closeAllConnections()", "original_string": "    @Override\n    public void closeAllConnections() {\n        if (!connections.isEmpty()) {\n            logger.info(\"Closing {} connections(s)\", connections.size());\n            Iterator<Map.Entry<Integer, WebSocketConnection>> iter = connections.entrySet().iterator();\n            while (iter.hasNext()) {\n                WebSocketConnection connection = iter.next().getValue();\n                connection.close();\n                iter.remove();\n            }\n        }\n\n        if (connections.isEmpty()) {\n            client.dispatcher().executorService().shutdown();\n            logger.info(\"All connections are closed!\");\n        }\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java", "class_name": "WebSocketStreamClientImpl", "class_uri": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nCloses all streams\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl.[int]createConnection(WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback,Request)", "name": "createConnection", "arg_nums": 6, "params": [{"name": "onOpenCallback", "type": "WebSocketOpenCallback"}, {"name": "onMessageCallback", "type": "WebSocketMessageCallback"}, {"name": "onClosingCallback", "type": "WebSocketClosingCallback"}, {"name": "onClosedCallback", "type": "WebSocketClosedCallback"}, {"name": "onFailureCallback", "type": "WebSocketFailureCallback"}, {"name": "request", "type": "Request"}], "return_type": "int", "signature": "private int createConnection(\n            WebSocketOpenCallback onOpenCallback,\n            WebSocketMessageCallback onMessageCallback,\n            WebSocketClosingCallback onClosingCallback,\n            WebSocketClosedCallback onClosedCallback,\n            WebSocketFailureCallback onFailureCallback,\n            Request request\n    )", "original_string": "    private int createConnection(\n            WebSocketOpenCallback onOpenCallback,\n            WebSocketMessageCallback onMessageCallback,\n            WebSocketClosingCallback onClosingCallback,\n            WebSocketClosedCallback onClosedCallback,\n            WebSocketFailureCallback onFailureCallback,\n            Request request\n    ) {\n        WebSocketConnection connection = new WebSocketConnection(onOpenCallback, onMessageCallback, onClosingCallback, onClosedCallback, onFailureCallback, request, client);\n        connection.connect();\n        int connectionId = connection.getConnectionId();\n        connections.put(connectionId, connection);\n        return connectionId;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java", "class_name": "WebSocketStreamClientImpl", "class_uri": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/WebSocketApiModuleFactory.java.WebSocketApiModuleFactory.[]WebSocketApiModuleFactory()", "name": "WebSocketApiModuleFactory", "arg_nums": 0, "params": [], "return_type": "", "signature": "private WebSocketApiModuleFactory()", "original_string": "    private WebSocketApiModuleFactory() {\n        // Private constructor to prevent instantiation\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/WebSocketApiModuleFactory.java", "class_name": "WebSocketApiModuleFactory", "class_uri": "src/main/java/com/binance/connector/client/impl/WebSocketApiModuleFactory.java.WebSocketApiModuleFactory", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/WebSocketApiModuleFactory.java.WebSocketApiModuleFactory.[WebSocketApiModule]obtainModule(WebSocketApiModule,ModuleCreator)", "name": "obtainModule", "arg_nums": 2, "params": [{"name": "module", "type": "WebSocketApiModule"}, {"name": "creator", "type": "ModuleCreator"}], "return_type": "WebSocketApiModule", "signature": "private static WebSocketApiModule obtainModule(WebSocketApiModule module, ModuleCreator creator)", "original_string": "    private static WebSocketApiModule obtainModule(WebSocketApiModule module, ModuleCreator creator) {\n        if (module == null) {\n            module = creator.create();\n        }\n        return module;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/WebSocketApiModuleFactory.java", "class_name": "WebSocketApiModuleFactory", "class_uri": "src/main/java/com/binance/connector/client/impl/WebSocketApiModuleFactory.java.WebSocketApiModuleFactory", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "WebSocketApiModule", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/WebSocketApiModuleFactory.java.WebSocketApiModuleFactory.[WebSocketApiModule]build(Category,WebSocketApiRequestHandler)", "name": "build", "arg_nums": 2, "params": [{"name": "category", "type": "Category"}, {"name": "requestHandler", "type": "WebSocketApiRequestHandler"}], "return_type": "WebSocketApiModule", "signature": "public static WebSocketApiModule build(Category category, WebSocketApiRequestHandler requestHandler)", "original_string": "    public static WebSocketApiModule build(Category category, WebSocketApiRequestHandler requestHandler) {\n        switch (category) {\n            case ACCOUNT:\n                return obtainModule(wsApiAccount, () -> new WebSocketApiAccount(requestHandler));\n            case AUTH:\n                return obtainModule(wsApiAuth, () -> new WebSocketApiAuth(requestHandler));\n            case GENERAL:\n                return obtainModule(wsApiGeneral, () -> new WebSocketApiGeneral(requestHandler));\n            case MARKET:\n                return obtainModule(wsApiMarket, () -> new WebSocketApiMarket(requestHandler));\n            case TRADE:\n                return obtainModule(wsApiTrade, () -> new WebSocketApiTrade(requestHandler));\n            case USER_DATA_STREAM:\n                return obtainModule(wsApiUserDataStream, () -> new WebSocketApiUserDataStream(requestHandler));\n            default:\n                throw new BinanceConnectorException(\"Unknown WebSocket API Category: \" + category);\n        }\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/WebSocketApiModuleFactory.java", "class_name": "WebSocketApiModuleFactory", "class_uri": "src/main/java/com/binance/connector/client/impl/WebSocketApiModuleFactory.java.WebSocketApiModuleFactory", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "WebSocketApiModule", "classes": []}, "docstring": "\nBuild WebSocketApiModule for the given WebSocket API category if it does not exist yet.\nOtherwise, return the existing one.\n\n@param category WebSocket API Category\n@param requestHandler WebSocketApiRequestHandler\n@return WebSocketApiModule\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiMarket.java.WebSocketApiMarket.[]WebSocketApiMarket(WebSocketApiRequestHandler)", "name": "WebSocketApiMarket", "arg_nums": 1, "params": [{"name": "handler", "type": "WebSocketApiRequestHandler"}], "return_type": "", "signature": "public WebSocketApiMarket(WebSocketApiRequestHandler handler)", "original_string": "    public WebSocketApiMarket(WebSocketApiRequestHandler handler) {\n        this.handler = handler;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiMarket.java", "class_name": "WebSocketApiMarket", "class_uri": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiMarket.java.WebSocketApiMarket", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiMarket.java.WebSocketApiMarket.[void]depth(String,JSONObject)", "name": "depth", "arg_nums": 2, "params": [{"name": "symbol", "type": "String"}, {"name": "parameters", "type": "JSONObject"}], "return_type": "void", "signature": "public void depth(String symbol, JSONObject parameters)", "original_string": "    public void depth(String symbol, JSONObject parameters) {\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n        parameters = JSONParser.addKeyValue(parameters, \"symbol\", symbol);\n        this.handler.publicRequest(\"depth\", parameters);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiMarket.java", "class_name": "WebSocketApiMarket", "class_uri": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiMarket.java.WebSocketApiMarket", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nGet current order book.<br>\n\nNote that this request returns limited market depth.<br>\n\nIf you need to continuously monitor order book updates, please consider using WebSocket Streams:<br>\n&lt;symbol&gt;@depth&lt;levels&gt;<br>\n&lt;symbol&gt;@depth<br>\n\n@param symbol String\n@param parameters JSONObject composed by key-value pairs:\n<br><br>\nlimit -- optional/int -- Default 100; max 5000. <br>\nrequestId -- optional/String or int <br>\n\n@see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#order-book\">\n    https://binance-docs.github.io/apidocs/websocket_api/en/#order-book</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiMarket.java.WebSocketApiMarket.[void]recentTrades(String,JSONObject)", "name": "recentTrades", "arg_nums": 2, "params": [{"name": "symbol", "type": "String"}, {"name": "parameters", "type": "JSONObject"}], "return_type": "void", "signature": "public void recentTrades(String symbol, JSONObject parameters)", "original_string": "    public void recentTrades(String symbol, JSONObject parameters) {\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n        parameters = JSONParser.addKeyValue(parameters, \"symbol\", symbol);\n        this.handler.publicRequest(\"trades.recent\", parameters);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiMarket.java", "class_name": "WebSocketApiMarket", "class_uri": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiMarket.java.WebSocketApiMarket", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nGet recent trades.\n\n@param symbol String\n@param parameters JSONObject composed by key-value pairs:\n<br><br>\nlimit -- optional/int -- Default 100; max 1000. <br>\nrequestId -- optional/String or int <br>\n\n@see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#recent-trades\">\n    https://binance-docs.github.io/apidocs/websocket_api/en/#recent-trades</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiMarket.java.WebSocketApiMarket.[void]historicalTrades(String,JSONObject)", "name": "historicalTrades", "arg_nums": 2, "params": [{"name": "symbol", "type": "String"}, {"name": "parameters", "type": "JSONObject"}], "return_type": "void", "signature": "public void historicalTrades(String symbol, JSONObject parameters)", "original_string": "    public void historicalTrades(String symbol, JSONObject parameters) {\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n        parameters = JSONParser.addKeyValue(parameters, \"symbol\", symbol);\n        this.handler.publicRequest(\"trades.historical\", parameters);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiMarket.java", "class_name": "WebSocketApiMarket", "class_uri": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiMarket.java.WebSocketApiMarket", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nGet historical trades.<br>\n\nIf fromId is not specified, the most recent trades are returned.<br>\n\n@param symbol String\n@param parameters JSONObject composed by key-value pairs:\n<br><br>\nfromId -- optional/int -- Trade ID to begin at. <br>\nlimit -- optional/int -- Default 500; max 1000. <br>\nrequestId -- optional/String or int <br>\n\n@see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#historical-trades\">\n    https://binance-docs.github.io/apidocs/websocket_api/en/#historical-trades</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiMarket.java.WebSocketApiMarket.[void]aggTrades(String,JSONObject)", "name": "aggTrades", "arg_nums": 2, "params": [{"name": "symbol", "type": "String"}, {"name": "parameters", "type": "JSONObject"}], "return_type": "void", "signature": "public void aggTrades(String symbol, JSONObject parameters)", "original_string": "    public void aggTrades(String symbol, JSONObject parameters) {\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n        parameters = JSONParser.addKeyValue(parameters, \"symbol\", symbol);\n        this.handler.publicRequest(\"trades.aggregate\", parameters);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiMarket.java", "class_name": "WebSocketApiMarket", "class_uri": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiMarket.java.WebSocketApiMarket", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nGet aggregate trades.<br>\n\nAn aggregate trade (aggtrade) represents one or more individual trades.<br>\nTrades that fill at the same time, from the same taker order, with the same price \u2013 those trades are collected into an aggregate trade with total quantity of the individual trades.<br>\n\n@param symbol String\n@param parameters JSONObject composed by key-value pairs:\n<br><br>\nfromId -- optional/int -- Trade ID to begin at. <br>\nlimit -- optional/int -- Default 500; max 1000. <br>\nstartTime -- optional/int <br>\nendTime -- optional/int <br>\nrequestId -- optional/String or int <br>\n\n@see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#aggregate-trades\">\n    https://binance-docs.github.io/apidocs/websocket_api/en/#aggregate-trades</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiMarket.java.WebSocketApiMarket.[void]klines(String,String,JSONObject)", "name": "klines", "arg_nums": 3, "params": [{"name": "symbol", "type": "String"}, {"name": "interval", "type": "String"}, {"name": "parameters", "type": "JSONObject"}], "return_type": "void", "signature": "public void klines(String symbol, String interval, JSONObject parameters)", "original_string": "    public void klines(String symbol, String interval, JSONObject parameters) {\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n        ParameterChecker.checkParameterType(interval, String.class, \"interval\");\n\n        parameters = JSONParser.addKeyValue(parameters, \"symbol\", symbol);\n        parameters = JSONParser.addKeyValue(parameters, \"interval\", interval);\n\n        this.handler.publicRequest(\"klines\", parameters);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiMarket.java", "class_name": "WebSocketApiMarket", "class_uri": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiMarket.java.WebSocketApiMarket", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nGet klines (candlestick bars).<br>\n\nKlines are uniquely identified by their open and close time.<br>\n\n@param symbol String\n@param interval String -- Kline interval.\n@param parameters JSONObject composed by key-value pairs:\n<br><br>\nstartTime -- optional/int <br>\nendTime -- optional/int <br>\nlimit -- optional/int -- Default 500; max 1000. <br>\ntimeZone -- optional/String --  Default: 0 (UTC) <br>\nrequestId -- optional/String or int <br>\n\n@see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#klines\">\n    https://binance-docs.github.io/apidocs/websocket_api/en/#klines</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiMarket.java.WebSocketApiMarket.[void]uiKlines(String,String,JSONObject)", "name": "uiKlines", "arg_nums": 3, "params": [{"name": "symbol", "type": "String"}, {"name": "interval", "type": "String"}, {"name": "parameters", "type": "JSONObject"}], "return_type": "void", "signature": "public void uiKlines(String symbol, String interval, JSONObject parameters)", "original_string": "    public void uiKlines(String symbol, String interval, JSONObject parameters) {\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n        ParameterChecker.checkParameterType(interval, String.class, \"interval\");\n\n        parameters = JSONParser.addKeyValue(parameters, \"symbol\", symbol);\n        parameters = JSONParser.addKeyValue(parameters, \"interval\", interval);\n\n        this.handler.publicRequest(\"uiKlines\", parameters);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiMarket.java", "class_name": "WebSocketApiMarket", "class_uri": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiMarket.java.WebSocketApiMarket", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nGet klines (candlestick bars) optimized for presentation.<br>\n\nThis request is similar to klines, having the same parameters and response. uiKlines return modified kline data, optimized for presentation of candlestick charts.<br>\n\n@param symbol String\n@param interval String -- Kline interval.\n@param parameters JSONObject composed by key-value pairs:\n<br><br>\nstartTime -- optional/int <br>\nendTime -- optional/int <br>\nlimit -- optional/int -- Default 500; max 1000. <br>\ntimeZone -- optional/String --  Default: 0 (UTC) <br>\nrequestId -- optional/String or int <br>\n\n@see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#ui-klines\">\n    https://binance-docs.github.io/apidocs/websocket_api/en/#ui-klines</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiMarket.java.WebSocketApiMarket.[void]avgPrice(String,JSONObject)", "name": "avgPrice", "arg_nums": 2, "params": [{"name": "symbol", "type": "String"}, {"name": "parameters", "type": "JSONObject"}], "return_type": "void", "signature": "public void avgPrice(String symbol, JSONObject parameters)", "original_string": "    public void avgPrice(String symbol, JSONObject parameters) {\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n        parameters = JSONParser.addKeyValue(parameters, \"symbol\", symbol);\n        this.handler.publicRequest(\"avgPrice\", parameters);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiMarket.java", "class_name": "WebSocketApiMarket", "class_uri": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiMarket.java.WebSocketApiMarket", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nGet current average price for a symbol.<br>\n\n@param symbol String\n@param parameters JSONObject composed by key-value pairs:\n<br><br>\nrequestId -- optional/String or int <br>\n\n@see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#current-average-price\">\n    https://binance-docs.github.io/apidocs/websocket_api/en/#current-average-price</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiMarket.java.WebSocketApiMarket.[void]ticker24H(JSONObject)", "name": "ticker24H", "arg_nums": 1, "params": [{"name": "parameters", "type": "JSONObject"}], "return_type": "void", "signature": "public void ticker24H(JSONObject parameters)", "original_string": "    public void ticker24H(JSONObject parameters) {\n        ParameterChecker.checkOnlyOneOfParameters(parameters, \"symbol\", \"symbols\");\n        this.handler.publicRequest(\"ticker.24hr\", parameters);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiMarket.java", "class_name": "WebSocketApiMarket", "class_uri": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiMarket.java.WebSocketApiMarket", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nGet 24-hour rolling window price change statistics.<br>\n\n@param parameters JSONObject composed by key-value pairs:\n<br><br>\nsymbol -- optional/String -- Query ticker for a single symbol<br>\nsymbols -- optional/Array of String -- Query ticker for multiple symbols<br>\ntype -- optional/String -- Ticker type: FULL (default) or MINI<br>\nrequestId -- optional/String or int <br>\n\n@see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#24hr-ticker-price-change-statistics\">\n    https://binance-docs.github.io/apidocs/websocket_api/en/#24hr-ticker-price-change-statistics</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiMarket.java.WebSocketApiMarket.[void]ticker(JSONObject)", "name": "ticker", "arg_nums": 1, "params": [{"name": "parameters", "type": "JSONObject"}], "return_type": "void", "signature": "public void ticker(JSONObject parameters)", "original_string": "    public void ticker(JSONObject parameters) {\n        ParameterChecker.checkOnlyOneOfParameters(parameters, \"symbol\", \"symbols\");\n        ParameterChecker.checkOneOfParametersRequired(parameters, \"symbol\", \"symbols\");\n        this.handler.publicRequest(\"ticker\", parameters);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiMarket.java", "class_name": "WebSocketApiMarket", "class_uri": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiMarket.java.WebSocketApiMarket", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nGet rolling window price change statistics with a custom window.<br>\n\nNote: <br>\nWindow size precision is limited to 1 minute.<br>\nWhile the closeTime is the current time of the request, openTime always start on a minute boundary.<br>\nAs such, the effective window might be up to 59999 ms wider than the requested windowSize.<br>\n\nEither symbol or symbols must be specified.<br>\n\n@param parameters JSONObject composed by key-value pairs:\n<br><br>\nsymbol -- optional/String -- Query ticker for a single symbol<br>\nsymbols -- optional/Array of String -- Query ticker for multiple symbols<br>\ntype -- optional/String -- Ticker type: FULL (default) or MINI<br>\nwindowSize -- optional/int -- Default \"1d\"<br>\nrequestId -- optional/String or int <br>\n\n@see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#rolling-window-price-change-statistics\">\n    https://binance-docs.github.io/apidocs/websocket_api/en/#rolling-window-price-change-statistics</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiMarket.java.WebSocketApiMarket.[void]tickerPrice(JSONObject)", "name": "tickerPrice", "arg_nums": 1, "params": [{"name": "parameters", "type": "JSONObject"}], "return_type": "void", "signature": "public void tickerPrice(JSONObject parameters)", "original_string": "    public void tickerPrice(JSONObject parameters) {\n        ParameterChecker.checkOnlyOneOfParameters(parameters, \"symbol\", \"symbols\");\n        this.handler.publicRequest(\"ticker.price\", parameters);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiMarket.java", "class_name": "WebSocketApiMarket", "class_uri": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiMarket.java.WebSocketApiMarket", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nGet the latest market price for a symbol.\n\n@param parameters JSONObject composed by key-value pairs:\n<br><br>\nsymbol -- optional/String -- Query ticker for a single symbol<br>\nsymbols -- optional/Array of String -- Query ticker for multiple symbols<br>\nrequestId -- optional/String or int <br>\n\n@see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#symbol-price-ticker\">\n    https://binance-docs.github.io/apidocs/websocket_api/en/#symbol-price-ticker</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiMarket.java.WebSocketApiMarket.[void]tickerBook(JSONObject)", "name": "tickerBook", "arg_nums": 1, "params": [{"name": "parameters", "type": "JSONObject"}], "return_type": "void", "signature": "public void tickerBook(JSONObject parameters)", "original_string": "    public void tickerBook(JSONObject parameters) {\n        ParameterChecker.checkOnlyOneOfParameters(parameters, \"symbol\", \"symbols\");\n        this.handler.publicRequest(\"ticker.book\", parameters);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiMarket.java", "class_name": "WebSocketApiMarket", "class_uri": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiMarket.java.WebSocketApiMarket", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nGet the current best price and quantity on the order book.\n\n@param parameters JSONObject composed by key-value pairs:\n<br><br>\nsymbol -- optional/String -- Query ticker for a single symbol<br>\nsymbols -- optional/Array of String -- Query ticker for multiple symbols<br>\nrequestId -- optional/String or int <br>\n\n@see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#symbol-order-book-ticker\">\n    https://binance-docs.github.io/apidocs/websocket_api/en/#symbol-order-book-ticker</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiMarket.java.WebSocketApiMarket.[void]tickerTradingDay(JSONObject)", "name": "tickerTradingDay", "arg_nums": 1, "params": [{"name": "parameters", "type": "JSONObject"}], "return_type": "void", "signature": "public void tickerTradingDay(JSONObject parameters)", "original_string": "    public void tickerTradingDay(JSONObject parameters) {\n        ParameterChecker.checkOnlyOneOfParameters(parameters, \"symbol\", \"symbols\");\n        ParameterChecker.checkOneOfParametersRequired(parameters, \"symbol\", \"symbols\");\n        this.handler.publicRequest(\"ticker.tradingDay\", parameters);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiMarket.java", "class_name": "WebSocketApiMarket", "class_uri": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiMarket.java.WebSocketApiMarket", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nGet the current best price and quantity on the order book.<br>\n\nNote: Either symbol or symbols must be specified.<br>\n\n@param parameters JSONObject composed by key-value pairs:\n<br><br>\nsymbol -- optional/String -- Query ticker for a single symbol<br>\nsymbols -- optional/Array of String -- Query ticker for multiple symbols<br>\ntimeZone -- optional/String -- Default: 0 (UTC) <br>\ntype -- optional/String -- Ticker type: FULL (default) or MINI<br>\nrequestId -- optional/String or int <br>\n\n@see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#trading-day-ticker\">\n    https://binance-docs.github.io/apidocs/websocket_api/en/#trading-day-ticker</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiUserDataStream.java.WebSocketApiUserDataStream.[]WebSocketApiUserDataStream(WebSocketApiRequestHandler)", "name": "WebSocketApiUserDataStream", "arg_nums": 1, "params": [{"name": "handler", "type": "WebSocketApiRequestHandler"}], "return_type": "", "signature": "public WebSocketApiUserDataStream(WebSocketApiRequestHandler handler)", "original_string": "    public WebSocketApiUserDataStream(WebSocketApiRequestHandler handler) {\n        this.handler = handler;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiUserDataStream.java", "class_name": "WebSocketApiUserDataStream", "class_uri": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiUserDataStream.java.WebSocketApiUserDataStream", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiUserDataStream.java.WebSocketApiUserDataStream.[void]userDataStreamStart(JSONObject)", "name": "userDataStreamStart", "arg_nums": 1, "params": [{"name": "parameters", "type": "JSONObject"}], "return_type": "void", "signature": "public void userDataStreamStart(JSONObject parameters)", "original_string": "    public void userDataStreamStart(JSONObject parameters) {\n        this.handler.apiRequest(\"userDataStream.start\", parameters);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiUserDataStream.java", "class_name": "WebSocketApiUserDataStream", "class_uri": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiUserDataStream.java.WebSocketApiUserDataStream", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nStart a new user data stream.<br>\n\nThe response will output a listen key that can be subscribed through on the WebSocket stream afterwards.<br>\n\nNote: the stream will close in 60 minutes unless userDataStream.ping requests are sent regularly.<br>\n\n@param parameters JSONObject composed by key-value pairs:\n<br><br>\nrequestId -- optional/String or int <br>\n\n@see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#start-user-data-stream-user_stream\">\n    https://binance-docs.github.io/apidocs/websocket_api/en/#start-user-data-stream-user_stream</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiUserDataStream.java.WebSocketApiUserDataStream.[void]userDataStreamPing(String,JSONObject)", "name": "userDataStreamPing", "arg_nums": 2, "params": [{"name": "listenKey", "type": "String"}, {"name": "parameters", "type": "JSONObject"}], "return_type": "void", "signature": "public void userDataStreamPing(String listenKey, JSONObject parameters)", "original_string": "    public void userDataStreamPing(String listenKey, JSONObject parameters) {\n        ParameterChecker.checkParameterType(listenKey, String.class, \"listenKey\");\n        parameters = JSONParser.addKeyValue(parameters, \"listenKey\", listenKey);\n        this.handler.apiRequest(\"userDataStream.ping\", parameters);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiUserDataStream.java", "class_name": "WebSocketApiUserDataStream", "class_uri": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiUserDataStream.java.WebSocketApiUserDataStream", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nPing a user data stream to keep it alive.<br>\n\nUser data streams close automatically after 60 minutes, even if you're listening to them on WebSocket Streams.<br>\nIn order to keep the stream open, you have to regularly send pings using the userDataStream.ping request.<br>\nIt is recommended to send a ping once every 30 minutes.<br>\n\nNote: the stream will close in 60 minutes unless userDataStream.ping requests are sent regularly.<br>\n\n@param listenKey -- required/String <br>\n@param parameters JSONObject composed by key-value pairs:\n<br><br>\nrequestId -- optional/String or int <br>\n\n@see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#ping-user-data-stream-user_stream\">\n    https://binance-docs.github.io/apidocs/websocket_api/en/#ping-user-data-stream-user_stream</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiUserDataStream.java.WebSocketApiUserDataStream.[void]userDataStreamStop(String,JSONObject)", "name": "userDataStreamStop", "arg_nums": 2, "params": [{"name": "listenKey", "type": "String"}, {"name": "parameters", "type": "JSONObject"}], "return_type": "void", "signature": "public void userDataStreamStop(String listenKey, JSONObject parameters)", "original_string": "    public void userDataStreamStop(String listenKey, JSONObject parameters) {\n        ParameterChecker.checkParameterType(listenKey, String.class, \"listenKey\");\n        parameters = JSONParser.addKeyValue(parameters, \"listenKey\", listenKey);\n        this.handler.apiRequest(\"userDataStream.stop\", parameters);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiUserDataStream.java", "class_name": "WebSocketApiUserDataStream", "class_uri": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiUserDataStream.java.WebSocketApiUserDataStream", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nExplicitly stop and close the user data stream.<br>\n\n@param listenKey -- required/String <br>\n@param parameters JSONObject composed by key-value pairs:\n<br><br>\nrequestId -- optional/String or int <br>\n\n@see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#stop-user-data-stream-user_stream\">\n    https://binance-docs.github.io/apidocs/websocket_api/en/#stop-user-data-stream-user_stream</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiGeneral.java.WebSocketApiGeneral.[]WebSocketApiGeneral(WebSocketApiRequestHandler)", "name": "WebSocketApiGeneral", "arg_nums": 1, "params": [{"name": "handler", "type": "WebSocketApiRequestHandler"}], "return_type": "", "signature": "public WebSocketApiGeneral(WebSocketApiRequestHandler handler)", "original_string": "    public WebSocketApiGeneral(WebSocketApiRequestHandler handler) {\n        this.handler = handler;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiGeneral.java", "class_name": "WebSocketApiGeneral", "class_uri": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiGeneral.java.WebSocketApiGeneral", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiGeneral.java.WebSocketApiGeneral.[void]ping(JSONObject)", "name": "ping", "arg_nums": 1, "params": [{"name": "parameters", "type": "JSONObject"}], "return_type": "void", "signature": "public void ping(JSONObject parameters)", "original_string": "    public void ping(JSONObject parameters) {\n        this.handler.publicRequest(\"ping\", parameters);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiGeneral.java", "class_name": "WebSocketApiGeneral", "class_uri": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiGeneral.java.WebSocketApiGeneral", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest connectivity to the WebSocket API.<br>\nNote:<br>\nYou can use regular WebSocket ping frames to test connectivity as well, WebSocket API will respond with pong frames as soon as possible.<br>\nping request along with time is a safe way to test request-response handling in your application.<br>\n\n@param parameters JSONObject composed by key-value pairs:\n<br><br>\nrequestId -- optional/String or int <br>\n\n@see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#test-connectivity\">\n    https://binance-docs.github.io/apidocs/websocket_api/en/#test-connectivity</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiGeneral.java.WebSocketApiGeneral.[void]serverTime(JSONObject)", "name": "serverTime", "arg_nums": 1, "params": [{"name": "parameters", "type": "JSONObject"}], "return_type": "void", "signature": "public void serverTime(JSONObject parameters)", "original_string": "    public void serverTime(JSONObject parameters) {\n        this.handler.publicRequest(\"time\", parameters);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiGeneral.java", "class_name": "WebSocketApiGeneral", "class_uri": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiGeneral.java.WebSocketApiGeneral", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest connectivity to the WebSocket API and get the current server time.\n\n@param parameters JSONObject composed by key-value pairs:\n<br><br>\nrequestId -- optional/String or int <br>\n\n@see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#check-server-time\">\n    https://binance-docs.github.io/apidocs/websocket_api/en/#check-server-time</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiGeneral.java.WebSocketApiGeneral.[void]exchangeInfo(JSONObject)", "name": "exchangeInfo", "arg_nums": 1, "params": [{"name": "parameters", "type": "JSONObject"}], "return_type": "void", "signature": "public void exchangeInfo(JSONObject parameters)", "original_string": "    public void exchangeInfo(JSONObject parameters) {\n        ParameterChecker.checkOnlyOneOfParameters(parameters, \"symbol\", \"symbols\", \"permissions\");\n        this.handler.publicRequest(\"exchangeInfo\", parameters);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiGeneral.java", "class_name": "WebSocketApiGeneral", "class_uri": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiGeneral.java.WebSocketApiGeneral", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nQuery current exchange trading rules, rate limits, and symbol information.<br>\n\nNotes:<br>\nWithout parameters, exchangeInfo displays all symbols with [\"SPOT, \"MARGIN\", \"LEVERAGED\"] permissions.<br>\nIn order to list all active symbols on the exchange, you need to explicitly request all permissions.<br>\n<a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#enum-definitions\">Available Permissions</a>\n\n@param parameters JSONObject composed by key-value pairs:\n<br><br>\nsymbol -- optional/String <br>\nsymbols -- optional/Array of String <br>\npermissions -- optional/Array of String  <br>\nrequestId -- optional/String or int <br>\n\n@see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#exchange-information\">\n    https://binance-docs.github.io/apidocs/websocket_api/en/#exchange-information</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiAccount.java.WebSocketApiAccount.[]WebSocketApiAccount(WebSocketApiRequestHandler)", "name": "WebSocketApiAccount", "arg_nums": 1, "params": [{"name": "handler", "type": "WebSocketApiRequestHandler"}], "return_type": "", "signature": "public WebSocketApiAccount(WebSocketApiRequestHandler handler)", "original_string": "    public WebSocketApiAccount(WebSocketApiRequestHandler handler) {\n        this.handler = handler;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiAccount.java", "class_name": "WebSocketApiAccount", "class_uri": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiAccount.java.WebSocketApiAccount", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiAccount.java.WebSocketApiAccount.[void]accountStatus(JSONObject)", "name": "accountStatus", "arg_nums": 1, "params": [{"name": "parameters", "type": "JSONObject"}], "return_type": "void", "signature": "public void accountStatus(JSONObject parameters)", "original_string": "    public void accountStatus(JSONObject parameters) {\n        this.handler.signedRequest(\"account.status\", parameters);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiAccount.java", "class_name": "WebSocketApiAccount", "class_uri": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiAccount.java.WebSocketApiAccount", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nQuery account information.\n\n@param parameters JSONObject composed by key-value pairs:\n<br><br>\nrecvWindow -- optional/int -- The value cannot be greater than 60000 <br>\nrequestId -- optional/String or int <br>\n\n@see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#account-information-user_data\">\n    https://binance-docs.github.io/apidocs/websocket_api/en/#account-information-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiAccount.java.WebSocketApiAccount.[void]accountRateLimitsOrders(JSONObject)", "name": "accountRateLimitsOrders", "arg_nums": 1, "params": [{"name": "parameters", "type": "JSONObject"}], "return_type": "void", "signature": "public void accountRateLimitsOrders(JSONObject parameters)", "original_string": "    public void accountRateLimitsOrders(JSONObject parameters) {\n        this.handler.signedRequest(\"account.rateLimits.orders\", parameters);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiAccount.java", "class_name": "WebSocketApiAccount", "class_uri": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiAccount.java.WebSocketApiAccount", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nQuery your current order rate limit.\n\n@param parameters JSONObject composed by key-value pairs:\n<br><br>\nrecvWindow -- optional/int -- The value cannot be greater than 60000 <br>\nrequestId -- optional/String or int <br>\n\n@see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#account-order-rate-limits-user_data\">\n    https://binance-docs.github.io/apidocs/websocket_api/en/#account-order-rate-limits-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiAccount.java.WebSocketApiAccount.[void]accountAllOrders(String,JSONObject)", "name": "accountAllOrders", "arg_nums": 2, "params": [{"name": "symbol", "type": "String"}, {"name": "parameters", "type": "JSONObject"}], "return_type": "void", "signature": "public void accountAllOrders(String symbol, JSONObject parameters)", "original_string": "    public void accountAllOrders(String symbol, JSONObject parameters) {\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n        parameters = JSONParser.addKeyValue(parameters, \"symbol\", symbol);\n\n        this.handler.signedRequest(\"allOrders\", parameters);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiAccount.java", "class_name": "WebSocketApiAccount", "class_uri": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiAccount.java.WebSocketApiAccount", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nQuery information about all your orders \u2013 active, canceled, filled \u2013 filtered by time range.<br>\n\nIf startTime and/or endTime are specified, orderId is ignored.<br>\n\n@param symbol String\n@param parameters JSONObject composed by key-value pairs:\n<br><br>\norderId -- optional/int -- Order ID to begin at<br>\nstartTime -- optional/int -- Timestamp in ms <br>\nendTime -- optional/int -- Timestamp in ms <br>\nlimit -- optional/int -- Default 500; max 1000. <br>\nrecvWindow -- optional/int -- The value cannot be greater than 60000 <br>\nrequestId -- optional/String or int <br>\n\n@see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#account-order-history-user_data\">\n    https://binance-docs.github.io/apidocs/websocket_api/en/#account-order-history-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiAccount.java.WebSocketApiAccount.[void]accountAllOcoOrders(JSONObject)", "name": "accountAllOcoOrders", "arg_nums": 1, "params": [{"name": "parameters", "type": "JSONObject"}], "return_type": "void", "signature": "public void accountAllOcoOrders(JSONObject parameters)", "original_string": "    public void accountAllOcoOrders(JSONObject parameters) {\n        this.handler.signedRequest(\"allOrderLists\", parameters);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiAccount.java", "class_name": "WebSocketApiAccount", "class_uri": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiAccount.java.WebSocketApiAccount", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nQuery information about all your OCOs, filtered by time range.<br>\n\nIf startTime and/or endTime are specified, fromId is ignored.<br>\n\n@param parameters JSONObject composed by key-value pairs:\n<br><br>\nfromId -- optional/int -- Order list ID to begin at<br>\nstartTime -- optional/int -- Timestamp in ms <br>\nendTime -- optional/int -- Timestamp in ms <br>\nlimit -- optional/int -- Default 500; max 1000. <br>\nrecvWindow -- optional/int -- The value cannot be greater than 60000 <br>\nrequestId -- optional/String or int <br>\n\n@see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#account-oco-history-user_data\">\n    https://binance-docs.github.io/apidocs/websocket_api/en/#account-oco-history-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiAccount.java.WebSocketApiAccount.[void]accountTradeHistory(String,JSONObject)", "name": "accountTradeHistory", "arg_nums": 2, "params": [{"name": "symbol", "type": "String"}, {"name": "parameters", "type": "JSONObject"}], "return_type": "void", "signature": "public void accountTradeHistory(String symbol, JSONObject parameters)", "original_string": "    public void accountTradeHistory(String symbol, JSONObject parameters) {\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n        parameters = JSONParser.addKeyValue(parameters, \"symbol\", symbol);\n\n        this.handler.signedRequest(\"myTrades\", parameters);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiAccount.java", "class_name": "WebSocketApiAccount", "class_uri": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiAccount.java.WebSocketApiAccount", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nQuery information about all your trades, filtered by time range.<br>\n\n@param symbol String\n@param parameters JSONObject composed by key-value pairs:\n<br><br>\norderId -- optional/int -- Order list ID to begin at<br>\nstartTime -- optional/int -- Timestamp in ms <br>\nendTime -- optional/int -- Timestamp in ms <br>\nfromId -- optional/int -- Trade ID to begin at<br>\nlimit -- optional/int -- Default 500; max 1000. <br>\nrecvWindow -- optional/int -- The value cannot be greater than 60000 <br>\nrequestId -- optional/String or int <br>\n\n@see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#account-trade-history-user_data\">\n    https://binance-docs.github.io/apidocs/websocket_api/en/#account-trade-history-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiAccount.java.WebSocketApiAccount.[void]accountPreventedMatches(String,JSONObject)", "name": "accountPreventedMatches", "arg_nums": 2, "params": [{"name": "symbol", "type": "String"}, {"name": "parameters", "type": "JSONObject"}], "return_type": "void", "signature": "public void accountPreventedMatches(String symbol, JSONObject parameters)", "original_string": "    public void accountPreventedMatches(String symbol, JSONObject parameters) {\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n        ParameterChecker.checkOneOfParametersRequired(parameters, \"preventedMatchId\", \"orderId\");\n        ParameterChecker.checkOnlyOneOfParameters(parameters, \"preventedMatchId\", \"orderId\");\n        parameters = JSONParser.addKeyValue(parameters, \"symbol\", symbol);\n\n        this.handler.signedRequest(\"myPreventedMatches\", parameters);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiAccount.java", "class_name": "WebSocketApiAccount", "class_uri": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiAccount.java.WebSocketApiAccount", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nDisplays the list of orders that were expired because of STP trigger.<br>\n\n@param symbol String\n@param parameters JSONObject composed by key-value pairs:\n<br><br>\npreventedMatchId -- optional/long <br>\norderId -- optional/long <br>\nfromPreventedMatchId -- optional/long <br>\nlimit -- optional/int -- Default 500; max 1000. <br>\nrecvWindow -- optional/int -- The value cannot be greater than 60000 <br>\nrequestId -- optional/String or int <br>\n\n@see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#account-prevented-matches-user_data\">\n    https://binance-docs.github.io/apidocs/websocket_api/en/#account-prevented-matches-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiAccount.java.WebSocketApiAccount.[void]accountAllocations(String,JSONObject)", "name": "accountAllocations", "arg_nums": 2, "params": [{"name": "symbol", "type": "String"}, {"name": "parameters", "type": "JSONObject"}], "return_type": "void", "signature": "public void accountAllocations(String symbol, JSONObject parameters)", "original_string": "    public void accountAllocations(String symbol, JSONObject parameters) {\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n        parameters = JSONParser.addKeyValue(parameters, \"symbol\", symbol);\n\n        this.handler.signedRequest(\"myAllocations\", parameters);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiAccount.java", "class_name": "WebSocketApiAccount", "class_uri": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiAccount.java.WebSocketApiAccount", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nRetrieves allocations resulting from SOR order placement.<br>\n\n@param symbol String\n@param parameters JSONObject composed by key-value pairs:\n<br><br>\nstartTime -- optional/long -- Timestamp in ms <br>\nendTime -- optional/long -- Timestamp in ms <br>\nfromAllocationId -- optional/int <br>\nlimit -- optional/int -- Default 500; max 1000. <br>\norderId -- optional/long <br>\nrecvWindow -- optional/int -- The value cannot be greater than 60000 <br>\nrequestId -- optional/String or int <br>\n\n@see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#account-allocations-user_data\">\n    https://binance-docs.github.io/apidocs/websocket_api/en/#account-allocations-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiAccount.java.WebSocketApiAccount.[void]accountCommissionRates(String,JSONObject)", "name": "accountCommissionRates", "arg_nums": 2, "params": [{"name": "symbol", "type": "String"}, {"name": "parameters", "type": "JSONObject"}], "return_type": "void", "signature": "public void accountCommissionRates(String symbol, JSONObject parameters)", "original_string": "    public void accountCommissionRates(String symbol, JSONObject parameters) {\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n        parameters = JSONParser.addKeyValue(parameters, \"symbol\", symbol);\n\n        this.handler.signedRequest(\"account.commission\", parameters);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiAccount.java", "class_name": "WebSocketApiAccount", "class_uri": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiAccount.java.WebSocketApiAccount", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nGet current account commission rates. <br>\n\n@param symbol String\n@param parameters JSONObject composed by key-value pairs:\n<br><br>\nrequestId -- optional/String or int <br>\n\n@see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#account-commission-rates-user_data\">\n    https://binance-docs.github.io/apidocs/websocket_api/en/#account-commission-rates-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiTrade.java.WebSocketApiTrade.[]WebSocketApiTrade(WebSocketApiRequestHandler)", "name": "WebSocketApiTrade", "arg_nums": 1, "params": [{"name": "handler", "type": "WebSocketApiRequestHandler"}], "return_type": "", "signature": "public WebSocketApiTrade(WebSocketApiRequestHandler handler)", "original_string": "    public WebSocketApiTrade(WebSocketApiRequestHandler handler) {  \n        this.handler = handler;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiTrade.java", "class_name": "WebSocketApiTrade", "class_uri": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiTrade.java.WebSocketApiTrade", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiTrade.java.WebSocketApiTrade.[void]newOrder(String,String,String,JSONObject)", "name": "newOrder", "arg_nums": 4, "params": [{"name": "symbol", "type": "String"}, {"name": "side", "type": "String"}, {"name": "type", "type": "String"}, {"name": "parameters", "type": "JSONObject"}], "return_type": "void", "signature": "public void newOrder(String symbol, String side, String type, JSONObject parameters)", "original_string": "    public void newOrder(String symbol, String side, String type, JSONObject parameters) {\n\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n        ParameterChecker.checkParameterType(side, String.class, \"side\");\n        ParameterChecker.checkParameterType(type, String.class, \"type\");\n\n        parameters = JSONParser.addKeyValue(parameters, \"symbol\", symbol);\n        parameters = JSONParser.addKeyValue(parameters, \"side\", side);\n        parameters = JSONParser.addKeyValue(parameters, \"type\", type);\n        \n        this.handler.signedRequest(\"order.place\", parameters);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiTrade.java", "class_name": "WebSocketApiTrade", "class_uri": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiTrade.java.WebSocketApiTrade", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSend in a new order.<br>\n\nAdditional mandatory parameters (*) are determined by the new order type.<br>\n\n@param symbol String\n@param side String -- BUY or SELL\n@param type String\n@param parameters JSONObject composed by key-value pairs:\n<br><br>\ntimeInForce -- optional/String <br>\nprice -- optional/double <br>\nquantity -- optional/double <br>\nquoteOrderQty -- optional/double <br>\nnewClientOrderId -- optional/String -- Arbitrary unique ID among open orders. Automatically generated if not sent<br>\nnewOrderRespType -- optional/String -- Select response format: ACK, RESULT, FULL. MARKET and LIMIT orders use FULL by default, other order types default to ACK.<br>\nstopPrice -- optional/double <br>\ntrailingDelta -- optional/int -- see https://github.com/binance/binance-spot-api-docs/blob/master/faqs/trailing-stop-faq.md<br>\nicebergQty -- optional/double <br>\nstrategyId -- optional/int -- Arbitrary numeric value identifying the order within an order strategy.<br>\nstrategyType -- optional/int -- Arbitrary numeric value identifying the order strategy. Values smaller than 1000000 are reserved and cannot be used.<br>\nselfTradePreventionMode -- optional/String -- The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER, EXPIRE_MAKER, EXPIRE_BOTH, NONE.<br>\nrecvWindow -- optional/int -- The value cannot be greater than 60000<br>\nrequestId -- optional/String or int <br>\n\n@see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#place-new-order-trade\">\n    https://binance-docs.github.io/apidocs/websocket_api/en/#place-new-order-trade</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiTrade.java.WebSocketApiTrade.[void]testNewOrder(String,String,String,JSONObject)", "name": "testNewOrder", "arg_nums": 4, "params": [{"name": "symbol", "type": "String"}, {"name": "side", "type": "String"}, {"name": "type", "type": "String"}, {"name": "parameters", "type": "JSONObject"}], "return_type": "void", "signature": "public void testNewOrder(String symbol, String side, String type, JSONObject parameters)", "original_string": "    public void testNewOrder(String symbol, String side, String type, JSONObject parameters) {\n\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n        ParameterChecker.checkParameterType(side, String.class, \"side\");\n        ParameterChecker.checkParameterType(type, String.class, \"type\");\n\n        parameters = JSONParser.addKeyValue(parameters, \"symbol\", symbol);\n        parameters = JSONParser.addKeyValue(parameters, \"side\", side);\n        parameters = JSONParser.addKeyValue(parameters, \"type\", type);\n        \n        this.handler.signedRequest(\"order.test\", parameters);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiTrade.java", "class_name": "WebSocketApiTrade", "class_uri": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiTrade.java.WebSocketApiTrade", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest order placement.<br>\n\nValidates new order parameters and verifies your signature but does not send the order into the matching engine.<br>\nAdditional mandatory parameters (*) are determined by the new order type.<br>\n\n@param symbol String\n@param side String -- BUY or SELL\n@param type String\n@param parameters JSONObject composed by key-value pairs:\n<br><br>\ntimeInForce -- optional/String <br>\nprice -- optional/double <br>\nquantity -- optional/double <br>\nquoteOrderQty -- optional/double <br>\nnewClientOrderId -- optional/String -- Arbitrary unique ID among open orders. Automatically generated if not sent<br>\nnewOrderRespType -- optional/String -- Select response format: ACK, RESULT, FULL. MARKET and LIMIT orders use FULL by default, other order types default to ACK.<br>\nstopPrice -- optional/double <br>\ntrailingDelta -- optional/int -- see https://github.com/binance/binance-spot-api-docs/blob/master/faqs/trailing-stop-faq.md<br>\nicebergQty -- optional/double <br>\nstrategyId -- optional/int -- Arbitrary numeric value identifying the order within an order strategy.<br>\nstrategyType -- optional/int -- Arbitrary numeric value identifying the order strategy. Values smaller than 1000000 are reserved and cannot be used.<br>\nselfTradePreventionMode -- optional/String -- The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER, EXPIRE_MAKER, EXPIRE_BOTH, NONE.<br>\ncomputeCommissionRates -- optional/boolean -- Default: false.<br>\nrecvWindow -- optional/int -- The value cannot be greater than 60000<br>\nrequestId -- optional/String or int <br>\n\n@see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#test-new-order-trade\">\n    https://binance-docs.github.io/apidocs/websocket_api/en/#test-new-order-trade</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiTrade.java.WebSocketApiTrade.[void]getOrder(String,JSONObject)", "name": "getOrder", "arg_nums": 2, "params": [{"name": "symbol", "type": "String"}, {"name": "parameters", "type": "JSONObject"}], "return_type": "void", "signature": "public void getOrder(String symbol, JSONObject parameters)", "original_string": "    public void getOrder(String symbol, JSONObject parameters) {\n        ParameterChecker.checkOneOfParametersRequired(parameters, \"orderId\", \"origClientOrderId\");\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n\n        parameters = JSONParser.addKeyValue(parameters, \"symbol\", symbol);\n        this.handler.signedRequest(\"order.status\", parameters);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiTrade.java", "class_name": "WebSocketApiTrade", "class_uri": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiTrade.java.WebSocketApiTrade", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nCheck execution status of an order.<br>\n\nIf both orderId and origClientOrderId parameters are specified, only orderId is used and origClientOrderId is ignored.<br>\n\n@param symbol String\n@param parameters JSONObject composed by key-value pairs:\n<br><br>\norderId -- optional/int -- Lookup order by orderId<br>\norigClientOrderId -- optional/String -- Lookup order by clientOrderId<br>\nrecvWindow -- optional/int -- The value cannot be greater than 60000<br>\nrequestId -- optional/String or int <br>\n\n@see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#query-order-user_data\">\n    https://binance-docs.github.io/apidocs/websocket_api/en/#query-order-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiTrade.java.WebSocketApiTrade.[void]cancelOrder(String,JSONObject)", "name": "cancelOrder", "arg_nums": 2, "params": [{"name": "symbol", "type": "String"}, {"name": "parameters", "type": "JSONObject"}], "return_type": "void", "signature": "public void cancelOrder(String symbol, JSONObject parameters)", "original_string": "    public void cancelOrder(String symbol, JSONObject parameters) {\n        ParameterChecker.checkOneOfParametersRequired(parameters, \"orderId\", \"origClientOrderId\");\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n\n        parameters = JSONParser.addKeyValue(parameters, \"symbol\", symbol);\n        this.handler.signedRequest(\"order.cancel\", parameters);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiTrade.java", "class_name": "WebSocketApiTrade", "class_uri": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiTrade.java.WebSocketApiTrade", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nCancel an active order.<br>\n\nIf both orderId and origClientOrderId parameters are specified, only orderId is used and origClientOrderId is ignored.<br>\n\n@param symbol String\n@param parameters JSONObject composed by key-value pairs:\n<br><br>\norderId -- optional/int -- Cancel order by orderId<br>\norigClientOrderId -- optional/String -- Cancel order by clientOrderId<br>\nnewClientOrderId -- optional/String -- New ID for the canceled order. Automatically generated if not sent<br>\ncancelRestrictions -- optional/enum -- Supported values: ONLY_NEW - Cancel will succeed if the order status is NEW. ONLY_PARTIALLY_FILLED - Cancel will succeed if order status is PARTIALLY_FILLED.<br>\nrecvWindow -- optional/int -- The value cannot be greater than 60000<br>\nrequestId -- optional/String or int <br>\n\n@see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#cancel-order-trade\">\n    https://binance-docs.github.io/apidocs/websocket_api/en/#cancel-order-trade</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiTrade.java.WebSocketApiTrade.[void]cancelReplaceOrder(String,String,String,String,JSONObject)", "name": "cancelReplaceOrder", "arg_nums": 5, "params": [{"name": "symbol", "type": "String"}, {"name": "cancelReplaceMode", "type": "String"}, {"name": "side", "type": "String"}, {"name": "type", "type": "String"}, {"name": "parameters", "type": "JSONObject"}], "return_type": "void", "signature": "public void cancelReplaceOrder(String symbol, String cancelReplaceMode, String side, String type, JSONObject parameters)", "original_string": "    public void cancelReplaceOrder(String symbol, String cancelReplaceMode, String side, String type, JSONObject parameters) {\n\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n        ParameterChecker.checkParameterType(cancelReplaceMode, String.class, \"cancelReplaceMode\");\n        ParameterChecker.checkParameterType(side, String.class, \"side\");\n        ParameterChecker.checkParameterType(type, String.class, \"type\");\n        ParameterChecker.checkOneOfParametersRequired(parameters, \"cancelOrderId\", \"cancelOrigClientOrderId\");\n\n        parameters = JSONParser.addKeyValue(parameters, \"symbol\", symbol);\n        parameters = JSONParser.addKeyValue(parameters, \"cancelReplaceMode\", cancelReplaceMode);\n        parameters = JSONParser.addKeyValue(parameters, \"side\", side);\n        parameters = JSONParser.addKeyValue(parameters, \"type\", type);\n\n        this.handler.signedRequest(\"order.cancelReplace\", parameters);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiTrade.java", "class_name": "WebSocketApiTrade", "class_uri": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiTrade.java.WebSocketApiTrade", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nCancel an existing order and immediately place a new order instead of the canceled one.<br>\n\nSimilar to the order.place request, additional mandatory parameters (*) are determined by the new order type.<br>\nIf both cancelOrderId and cancelOrigClientOrderId parameters are specified, only cancelOrderId is used and cancelOrigClientOrderId is ignored.<br>\n\n@param symbol String\n@param cancelReplaceMode String -- STOP_ON_FAILURE or ALLOW_FAILURE\n@param side String -- BUY or SELL\n@param type String\n@param parameters JSONObject composed by key-value pairs:\n<br><br>\ncancelOrderId -- optional/int -- Cancel order by orderId<br>\ncancelOrigClientOrderId -- optional/String -- Cancel order by clientOrderId<br>\ncancelNewClientOrderId -- optional/String -- New ID for the canceled order. Automatically generated if not sent<br>\ntimeInForce -- optional/String <br>\nprice -- optional/double <br>\nquantity -- optional/double <br>\nquoteOrderQty -- optional/double <br>\nnewClientOrderId -- optional/String -- Arbitrary unique ID among open orders. Automatically generated if not sent<br>\nnewOrderRespType -- optional/String -- Select response format: ACK, RESULT, FULL. MARKET and LIMIT orders use FULL by default, other order types default to ACK.<br>\nstopPrice -- optional/double <br>\ntrailingDelta -- optional/int -- see https://github.com/binance/binance-spot-api-docs/blob/master/faqs/trailing-stop-faq.md<br>\nicebergQty -- optional/double <br>\nstrategyId -- optional/int -- Arbitrary numeric value identifying the order within an order strategy.<br>\nstrategyType -- optional/int -- Arbitrary numeric value identifying the order strategy. Values smaller than 1000000 are reserved and cannot be used.<br>\nselfTradePreventionMode -- optional/String -- The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER, EXPIRE_MAKER, EXPIRE_BOTH, NONE.<br>\ncancelRestrictions -- optional/enum -- Supported values: ONLY_NEW - Cancel will succeed if the order status is NEW. ONLY_PARTIALLY_FILLED - Cancel will succeed if order status is PARTIALLY_FILLED.<br>\nrecvWindow -- optional/int -- The value cannot be greater than 60000<br>\nrequestId -- optional/String or int <br>\n\n@see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#cancel-and-replace-order-trade\">\n    https://binance-docs.github.io/apidocs/websocket_api/en/#cancel-and-replace-order-trade</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiTrade.java.WebSocketApiTrade.[void]getOpenOrders(JSONObject)", "name": "getOpenOrders", "arg_nums": 1, "params": [{"name": "parameters", "type": "JSONObject"}], "return_type": "void", "signature": "public void getOpenOrders(JSONObject parameters)", "original_string": "    public void getOpenOrders(JSONObject parameters) {\n        this.handler.signedRequest(\"openOrders.status\", parameters);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiTrade.java", "class_name": "WebSocketApiTrade", "class_uri": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiTrade.java.WebSocketApiTrade", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nQuery execution status of all open orders.<br>\n\n@param parameters JSONObject composed by key-value pairs:\n<br><br>\nsymbol -- optional/String -- If omitted, open orders for all symbols are returned<br>\nrecvWindow -- optional/int -- The value cannot be greater than 60000<br>\nrequestId -- optional/String or int <br>\n\n@see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#current-open-orders-user_data\">\n    https://binance-docs.github.io/apidocs/websocket_api/en/#current-open-orders-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiTrade.java.WebSocketApiTrade.[void]cancelAllOpenOrders(String,JSONObject)", "name": "cancelAllOpenOrders", "arg_nums": 2, "params": [{"name": "symbol", "type": "String"}, {"name": "parameters", "type": "JSONObject"}], "return_type": "void", "signature": "public void cancelAllOpenOrders(String symbol, JSONObject parameters)", "original_string": "    public void cancelAllOpenOrders(String symbol, JSONObject parameters) {\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n\n        parameters = JSONParser.addKeyValue(parameters, \"symbol\", symbol);\n        this.handler.signedRequest(\"openOrders.cancelAll\", parameters);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiTrade.java", "class_name": "WebSocketApiTrade", "class_uri": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiTrade.java.WebSocketApiTrade", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nCancel all open orders on a symbol, including OCO orders. <br>\nCancellation reports for orders and OCOs have the same format as in order.cancel.<br>\n\n@param symbol String\n@param parameters JSONObject composed by key-value pairs:\n<br><br>\nrecvWindow -- optional/int -- The value cannot be greater than 60000<br>\nrequestId -- optional/String or int <br>\n\n@see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#cancel-open-orders-trade\">\n    https://binance-docs.github.io/apidocs/websocket_api/en/#cancel-open-orders-trade</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiTrade.java.WebSocketApiTrade.[void]newOcoOrder(String,String,double,double,JSONObject)", "name": "newOcoOrder", "arg_nums": 5, "params": [{"name": "symbol", "type": "String"}, {"name": "side", "type": "String"}, {"name": "price", "type": "double"}, {"name": "quantity", "type": "double"}, {"name": "parameters", "type": "JSONObject"}], "return_type": "void", "signature": "public void newOcoOrder(String symbol, String side, double price, double quantity, JSONObject parameters)", "original_string": "    public void newOcoOrder(String symbol, String side, double price, double quantity, JSONObject parameters) {\n        ParameterChecker.checkOneOfParametersRequired(parameters, \"stopPrice\", \"trailingDelta\");\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n        ParameterChecker.checkParameterType(side, String.class, \"side\");\n        ParameterChecker.checkParameterType(price, Double.class, \"price\");\n        ParameterChecker.checkParameterType(quantity, Double.class, \"quantity\");\n\n        parameters = JSONParser.addKeyValue(parameters, \"symbol\", symbol);\n        parameters = JSONParser.addKeyValue(parameters, \"side\", side);\n        parameters = JSONParser.addKeyValue(parameters, \"price\", price);\n        parameters = JSONParser.addKeyValue(parameters, \"quantity\", quantity);\n        \n        this.handler.signedRequest(\"orderList.place\", parameters);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiTrade.java", "class_name": "WebSocketApiTrade", "class_uri": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiTrade.java.WebSocketApiTrade", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSend in a new one-cancels-the-other (OCO) pair: LIMIT_MAKER + STOP_LOSS/STOP_LOSS_LIMIT orders (called legs), where activation of one order immediately cancels the other.\n\n@param symbol String\n@param side String -- BUY or SELL\n@param price double -- Price for the limit order\n@param quantity double\n@param parameters JSONObject composed by key-value pairs:\n<br><br>\nlistClientOrderId -- optional/String -- Arbitrary unique ID among open OCOs. Automatically generated if not sent.<br>\nlimitClientOrderId -- optional/String -- Arbitrary unique ID among open orders for the limit order. Automatically generated if not sent.<br>\nlimitIcebergQty -- optional/double <br>\nlimitStrategyId -- optional/int -- Arbitrary numeric value identifying the limit order within an order strategy.<br>\nlimitStrategyType -- optional/int -- Arbitrary numeric value identifying the limit order strategy. Values smaller than 1000000 are reserved and cannot be used.<br>\nstopPrice -- optional/double -- Either stopPrice or trailingDelta, or both must be specified <br>\ntrailingDelta -- optional/int -- see https://github.com/binance/binance-spot-api-docs/blob/master/faqs/trailing-stop-faq.md<br>\nstopClientOrderId -- optional/String -- Arbitrary unique ID among open orders for the stop order. Automatically generated if not sent.<br>\nstopLimitPrice -- optional/double <br>\nstopLimitTimeInForce -- optional/String -- See order.place for available options<br>\nstopIcebergQty -- optional/double <br>\nstopStrategyId -- optional/int -- Arbitrary numeric value identifying the stop order within an order strategy.<br>\nstopStrategyType -- optional/int -- Arbitrary numeric value identifying the stop order strategy. Values smaller than 1000000 are reserved and cannot be used.<br>\nnewOrderRespType -- optional/String -- Select response format: ACK, RESULT, FULL (default). <br>\nselfTradePreventionMode -- optional/String -- The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER, EXPIRE_MAKER, EXPIRE_BOTH, NONE.<br>\nrecvWindow -- optional/int -- The value cannot be greater than 60000<br>\nrequestId -- optional/String or int <br>\n\n@see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#place-new-oco-trade\">\n    https://binance-docs.github.io/apidocs/websocket_api/en/#place-new-oco-trade</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiTrade.java.WebSocketApiTrade.[void]getOcoOrder(JSONObject)", "name": "getOcoOrder", "arg_nums": 1, "params": [{"name": "parameters", "type": "JSONObject"}], "return_type": "void", "signature": "public void getOcoOrder(JSONObject parameters)", "original_string": "    public void getOcoOrder(JSONObject parameters) {\n        ParameterChecker.checkOneOfParametersRequired(parameters, \"origClientOrderId\", \"orderListId\");\n        this.handler.signedRequest(\"orderList.status\", parameters);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiTrade.java", "class_name": "WebSocketApiTrade", "class_uri": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiTrade.java.WebSocketApiTrade", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nCheck execution status of an OCO. <br>\n\nIf both origClientOrderId and orderListId parameters are specified, only origClientOrderId is used and orderListId is ignored. <br>\n\n@param parameters JSONObject composed by key-value pairs:\n<br><br>\norigClientOrderId -- optional/String -- Query OCO by listClientOrderId <br>\norderListId -- required/int -- Query OCO by orderListId <br>\nrecvWindow -- optional/int -- The value cannot be greater than 60000 <br>\nrequestId -- optional/String or int <br>\n\n@see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#query-oco-user_data\">\n    https://binance-docs.github.io/apidocs/websocket_api/en/#query-oco-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiTrade.java.WebSocketApiTrade.[void]cancelOcoOrder(String,JSONObject)", "name": "cancelOcoOrder", "arg_nums": 2, "params": [{"name": "symbol", "type": "String"}, {"name": "parameters", "type": "JSONObject"}], "return_type": "void", "signature": "public void cancelOcoOrder(String symbol, JSONObject parameters)", "original_string": "    public void cancelOcoOrder(String symbol, JSONObject parameters) {\n        ParameterChecker.checkOneOfParametersRequired(parameters, \"listClientOrderId\", \"orderListId\");\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n        \n        parameters = JSONParser.addKeyValue(parameters, \"symbol\", symbol);\n        this.handler.signedRequest(\"orderList.cancel\", parameters);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiTrade.java", "class_name": "WebSocketApiTrade", "class_uri": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiTrade.java.WebSocketApiTrade", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nCancel an active OCO.<br>\n\nIf both orderListId and listClientOrderId parameters are specified, only orderListId is used and listClientOrderId is ignored.<br>\nCanceling an individual leg with order.cancel will cancel the entire OCO as well.<br>\n\n@param symbol String\n@param parameters JSONObject composed by key-value pairs:\n<br><br>\nlistClientOrderId -- optional/String -- Cancel OCO by listClientOrderId <br>\norderListId -- required/int -- Cancel OCO by orderListId <br>\nnewClientOrderId -- optional/String -- New ID for the canceled OCO. Automatically generated if not sent.<br>\nrecvWindow -- optional/int -- The value cannot be greater than 60000 <br>\nrequestId -- optional/String or int <br>\n\n@see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#cancel-oco-trade\">\n    https://binance-docs.github.io/apidocs/websocket_api/en/#cancel-oco-trade</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiTrade.java.WebSocketApiTrade.[void]getOpenOcoOrders(JSONObject)", "name": "getOpenOcoOrders", "arg_nums": 1, "params": [{"name": "parameters", "type": "JSONObject"}], "return_type": "void", "signature": "public void getOpenOcoOrders(JSONObject parameters)", "original_string": "    public void getOpenOcoOrders(JSONObject parameters) {\n        this.handler.signedRequest(\"openOrderLists.status\", parameters);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiTrade.java", "class_name": "WebSocketApiTrade", "class_uri": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiTrade.java.WebSocketApiTrade", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nQuery execution status of all open OCOs.<br>\n\nIf both orderListId and listClientOrderId parameters are specified, only orderListId is used and listClientOrderId is ignored.<br>\nCanceling an individual leg with order.cancel will cancel the entire OCO as well.<br>\n\n@param parameters JSONObject composed by key-value pairs:\n<br><br>\nrecvWindow -- optional/int -- The value cannot be greater than 60000 <br>\nrequestId -- optional/String or int <br>\n\n@see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#current-open-ocos-user_data\">\n    https://binance-docs.github.io/apidocs/websocket_api/en/#current-open-ocos-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiTrade.java.WebSocketApiTrade.[void]newSorOrder(String,String,String,double,JSONObject)", "name": "newSorOrder", "arg_nums": 5, "params": [{"name": "symbol", "type": "String"}, {"name": "side", "type": "String"}, {"name": "type", "type": "String"}, {"name": "quantity", "type": "double"}, {"name": "parameters", "type": "JSONObject"}], "return_type": "void", "signature": "public void newSorOrder(String symbol, String side, String type, double quantity, JSONObject parameters)", "original_string": "    public void newSorOrder(String symbol, String side, String type, double quantity, JSONObject parameters) {\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n        ParameterChecker.checkParameterType(side, String.class, \"side\");\n        ParameterChecker.checkParameterType(type, String.class, \"type\");\n        ParameterChecker.checkParameterType(quantity, Double.class, \"quantity\");\n\n        parameters = JSONParser.addKeyValue(parameters, \"symbol\", symbol);\n        parameters = JSONParser.addKeyValue(parameters, \"side\", side);\n        parameters = JSONParser.addKeyValue(parameters, \"type\", type);\n        parameters = JSONParser.addKeyValue(parameters, \"quantity\", quantity);\n        \n        this.handler.signedRequest(\"sor.order.place\", parameters);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiTrade.java", "class_name": "WebSocketApiTrade", "class_uri": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiTrade.java.WebSocketApiTrade", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nPlaces an order using smart order routing (SOR).\n\n@param symbol String\n@param side String -- BUY or SELL\n@param type String\n@param quantity double\n@param parameters JSONObject composed by key-value pairs:\n<br><br>\ntimeInForce -- optional/String -- Applicable only to LIMIT order type.<br>\nprice -- optional/double -- Applicable only to LIMIT order type.<br>\nnewClientOrderId -- optional/String -- Arbitrary unique ID among open orders. Automatically generated if not sent<br>\nnewOrderRespType -- optional/String -- Select response format: ACK, RESULT, FULL. MARKET and LIMIT orders use FULL by default, other order types default to ACK.<br>\nstopPrice -- optional/double <br>\nicebergQty -- optional/double <br>\nstrategyId -- optional/int -- Arbitrary numeric value identifying the order within an order strategy.<br>\nstrategyType -- optional/int -- Arbitrary numeric value identifying the order strategy. Values smaller than 1000000 are reserved and cannot be used.<br>\nselfTradePreventionMode -- optional/String -- The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER, EXPIRE_MAKER, EXPIRE_BOTH, NONE.<br>\nrecvWindow -- optional/int -- The value cannot be greater than 60000<br>\nrequestId -- optional/String or int <br>\n\n@see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#place-new-order-using-sor-trade\">\n    https://binance-docs.github.io/apidocs/websocket_api/en/#place-new-order-using-sor-trade</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiTrade.java.WebSocketApiTrade.[void]testNewSorOrder(String,String,String,double,JSONObject)", "name": "testNewSorOrder", "arg_nums": 5, "params": [{"name": "symbol", "type": "String"}, {"name": "side", "type": "String"}, {"name": "type", "type": "String"}, {"name": "quantity", "type": "double"}, {"name": "parameters", "type": "JSONObject"}], "return_type": "void", "signature": "public void testNewSorOrder(String symbol, String side, String type, double quantity, JSONObject parameters)", "original_string": "    public void testNewSorOrder(String symbol, String side, String type, double quantity, JSONObject parameters) {\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n        ParameterChecker.checkParameterType(side, String.class, \"side\");\n        ParameterChecker.checkParameterType(type, String.class, \"type\");\n        ParameterChecker.checkParameterType(quantity, Double.class, \"quantity\");\n\n        parameters = JSONParser.addKeyValue(parameters, \"symbol\", symbol);\n        parameters = JSONParser.addKeyValue(parameters, \"side\", side);\n        parameters = JSONParser.addKeyValue(parameters, \"type\", type);\n        parameters = JSONParser.addKeyValue(parameters, \"quantity\", quantity);\n        \n        this.handler.signedRequest(\"sor.order.test\", parameters);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiTrade.java", "class_name": "WebSocketApiTrade", "class_uri": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiTrade.java.WebSocketApiTrade", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest new order creation and signature/recvWindow using smart order routing (SOR). Creates and validates a new order but does not send it into the matching engine.\n\n@param symbol String\n@param side String -- BUY or SELL\n@param type String\n@param quantity double\n@param parameters JSONObject composed by key-value pairs:\n<br><br>\ntimeInForce -- optional/String -- Applicable only to LIMIT order type.<br>\nprice -- optional/double -- Applicable only to LIMIT order type.<br>\nnewClientOrderId -- optional/String -- Arbitrary unique ID among open orders. Automatically generated if not sent<br>\nnewOrderRespType -- optional/String -- Select response format: ACK, RESULT, FULL. MARKET and LIMIT orders use FULL by default, other order types default to ACK.<br>\nstopPrice -- optional/double <br>\nicebergQty -- optional/double <br>\nstrategyId -- optional/int -- Arbitrary numeric value identifying the order within an order strategy.<br>\nstrategyType -- optional/int -- Arbitrary numeric value identifying the order strategy. Values smaller than 1000000 are reserved and cannot be used.<br>\nselfTradePreventionMode -- optional/String -- The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER, EXPIRE_MAKER, EXPIRE_BOTH, NONE.<br>\ncomputeCommissionRates -- optional/boolean -- Default: false.<br>\nrecvWindow -- optional/int -- The value cannot be greater than 60000<br>\nrequestId -- optional/String or int <br>\n\n@see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#test-new-order-using-sor-trade\">\n    https://binance-docs.github.io/apidocs/websocket_api/en/#test-new-order-using-sor-trade</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiAuth.java.WebSocketApiAuth.[]WebSocketApiAuth(WebSocketApiRequestHandler)", "name": "WebSocketApiAuth", "arg_nums": 1, "params": [{"name": "handler", "type": "WebSocketApiRequestHandler"}], "return_type": "", "signature": "public WebSocketApiAuth(WebSocketApiRequestHandler handler)", "original_string": "    public WebSocketApiAuth(WebSocketApiRequestHandler handler) {\n        this.handler = handler;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiAuth.java", "class_name": "WebSocketApiAuth", "class_uri": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiAuth.java.WebSocketApiAuth", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiAuth.java.WebSocketApiAuth.[void]logon(JSONObject)", "name": "logon", "arg_nums": 1, "params": [{"name": "parameters", "type": "JSONObject"}], "return_type": "void", "signature": "public void logon(JSONObject parameters)", "original_string": "    public void logon(JSONObject parameters) {\n        this.handler.signedRequest(\"session.logon\", parameters);\n        \n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiAuth.java", "class_name": "WebSocketApiAuth", "class_uri": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiAuth.java.WebSocketApiAuth", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nAuthenticate WebSocket connection using the provided API key.<br>\n\nAfter calling session.logon, future requests under same connection won't send apiKey and signature parameters. <br>\nCalling session.logon multiple times changes the current authenticated API key.<br>\n\n@param parameters JSONObject composed by key-value pairs:\n<br><br>\nrecvWindow -- optional/int -- The value cannot be greater than 60000<br>\nrequestId -- optional/String or int <br>\n\n@see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#log-in-with-api-key-signed\">\n    https://binance-docs.github.io/apidocs/websocket_api/en/#log-in-with-api-key-signed</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiAuth.java.WebSocketApiAuth.[void]status(JSONObject)", "name": "status", "arg_nums": 1, "params": [{"name": "parameters", "type": "JSONObject"}], "return_type": "void", "signature": "public void status(JSONObject parameters)", "original_string": "    public void status(JSONObject parameters) {\n        this.handler.publicRequest(\"session.status\", parameters);\n        \n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiAuth.java", "class_name": "WebSocketApiAuth", "class_uri": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiAuth.java.WebSocketApiAuth", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nQuery the status of the WebSocket connection, inspecting which API key (if any) is used to authorize requests.<br>\n\n@param parameters JSONObject composed by key-value pairs:\n<br><br>\nrequestId -- optional/String or int <br>\n\n@see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#query-session-status\">\n    https://binance-docs.github.io/apidocs/websocket_api/en/#query-session-status</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiAuth.java.WebSocketApiAuth.[void]logout(JSONObject)", "name": "logout", "arg_nums": 1, "params": [{"name": "parameters", "type": "JSONObject"}], "return_type": "void", "signature": "public void logout(JSONObject parameters)", "original_string": "    public void logout(JSONObject parameters) {\n        this.handler.publicRequest(\"session.logout\", parameters);\n        \n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiAuth.java", "class_name": "WebSocketApiAuth", "class_uri": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiAuth.java.WebSocketApiAuth", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nForget the API key previously authenticated. If the connection is not authenticated, this request does nothing.<br>\n\nNote that the WebSocket connection stays open after session.logout request.<br>\nYou can continue using the connection, but now the requests will send the apiKey and signature parameters where is needed.<br>\n\n@param parameters JSONObject composed by key-value pairs:\n<br><br>\nrequestId -- optional/String or int <br>\n\n@see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#log-out-of-the-session\">\n    https://binance-docs.github.io/apidocs/websocket_api/en/#log-out-of-the-session</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount.[]SubAccount(String,String,String,boolean,ProxyAuth)", "name": "SubAccount", "arg_nums": 5, "params": [{"name": "baseUrl", "type": "String"}, {"name": "apiKey", "type": "String"}, {"name": "secretKey", "type": "String"}, {"name": "showLimitUsage", "type": "boolean"}, {"name": "proxy", "type": "ProxyAuth"}], "return_type": "", "signature": "public SubAccount(String baseUrl, String apiKey, String secretKey, boolean showLimitUsage, ProxyAuth proxy)", "original_string": "    public SubAccount(String baseUrl, String apiKey, String secretKey, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, new HmacSignatureGenerator(secretKey), proxy);\n        this.showLimitUsage = showLimitUsage;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java", "class_name": "SubAccount", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount.[]SubAccount(String,String,SignatureGenerator,boolean,ProxyAuth)", "name": "SubAccount", "arg_nums": 5, "params": [{"name": "baseUrl", "type": "String"}, {"name": "apiKey", "type": "String"}, {"name": "signatureGenerator", "type": "SignatureGenerator"}, {"name": "showLimitUsage", "type": "boolean"}, {"name": "proxy", "type": "ProxyAuth"}], "return_type": "", "signature": "public SubAccount(String baseUrl, String apiKey, SignatureGenerator signatureGenerator, boolean showLimitUsage, ProxyAuth proxy)", "original_string": "    public SubAccount(String baseUrl, String apiKey, SignatureGenerator signatureGenerator, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, signatureGenerator, proxy);\n        this.showLimitUsage = showLimitUsage;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java", "class_name": "SubAccount", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount.[String]createVirtualSubAccount(Map<String, Object>)", "name": "createVirtualSubAccount", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String createVirtualSubAccount(Map<String, Object> parameters)", "original_string": "    public String createVirtualSubAccount(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"subAccountString\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, CREATE_SUB, parameters, HttpMethod.POST, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java", "class_name": "SubAccount", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nPOST /sapi/v1/sub-account/virtualSubAccount\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nsubAccountString -- mandatory/string -- Please input a string. We will create a virtual email using that string for you to register <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#create-a-virtual-sub-account-for-master-account\">\n    https://binance-docs.github.io/apidocs/spot/en/#create-a-virtual-sub-account-for-master-account</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount.[String]subAccountList(Map<String, Object>)", "name": "subAccountList", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String subAccountList(Map<String, Object> parameters)", "original_string": "    public String subAccountList(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, QUERY_SUB_LIST, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java", "class_name": "SubAccount", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/sub-account/list\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nemail -- optional/string <br>\nisFreeze -- optional/string -- true or false <br>\npage -- optional/int -- Default value: 1 <br>\nlimit -- optional/int -- Default value: 1, Max value: 200 <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-sub-account-list-for-master-account\">\n    https://binance-docs.github.io/apidocs/spot/en/#query-sub-account-list-for-master-account</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount.[String]spotTransferHistory(Map<String, Object>)", "name": "spotTransferHistory", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String spotTransferHistory(Map<String, Object> parameters)", "original_string": "    public String spotTransferHistory(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, QUERY_SPOT_TRANSFER_HIST, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java", "class_name": "SubAccount", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/sub-account/sub/transfer/history\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nfromEmail -- optional/string <br>\ntoEmail -- optional/string -- true or false <br>\nstartTime -- optional/long <br>\nendTime\t -- optional/long <br>\npage -- optional/int -- Default value: 1 <br>\nlimit -- optional/int -- Default value: 1, Max value: 200 <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-sub-account-spot-asset-transfer-history-for-master-account\">\n    https://binance-docs.github.io/apidocs/spot/en/#query-sub-account-spot-asset-transfer-history-for-master-account</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount.[String]getFuturesInternalTransfer(Map<String, Object>)", "name": "getFuturesInternalTransfer", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String getFuturesInternalTransfer(Map<String, Object> parameters)", "original_string": "    public String getFuturesInternalTransfer(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"email\", String.class);\n        ParameterChecker.checkParameter(parameters, \"futuresType\", Integer.class);\n        return requestHandler.sendSignedRequest(baseUrl, FUTURES_TRANSFER, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java", "class_name": "SubAccount", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/sub-account/futures/internalTransfer\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nemail -- mandatory/string <br>\nfuturesType -- mandatory/long -- 1:USDT-margined Futures,2: Coin-margined Futures <br>\nstartTime -- optional/long <br>\nendTime\t -- optional/long <br>\npage -- optional/int -- Default value: 1 <br>\nlimit -- optional/int -- Default value: 1, Max value: 200 <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-sub-account-futures-asset-transfer-history-for-master-account\">\n    https://binance-docs.github.io/apidocs/spot/en/#query-sub-account-futures-asset-transfer-history-for-master-account</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount.[String]futuresInternalTransfer(Map<String, Object>)", "name": "futuresInternalTransfer", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String futuresInternalTransfer(Map<String, Object> parameters)", "original_string": "    public String futuresInternalTransfer(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"fromEmail\", String.class);\n        ParameterChecker.checkParameter(parameters, \"toEmail\", String.class);\n        ParameterChecker.checkParameter(parameters, \"futuresType\", Integer.class);\n        ParameterChecker.checkParameter(parameters, \"asset\", String.class);\n        ParameterChecker.checkRequiredParameter(parameters, \"amount\");\n        return requestHandler.sendSignedRequest(baseUrl, FUTURES_TRANSFER, parameters, HttpMethod.POST, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java", "class_name": "SubAccount", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nPOST /sapi/v1/sub-account/futures/internalTransfer\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nfromEmail -- mandatory/string -- Sender email <br>\ntoEmail -- mandatory/string -- Recipient email <br>\nfuturesType -- mandatory/long -- 1:USDT-margined Futures,2: Coin-margined Futures <br>\nasset -- mandatory/string <br>\namount -- mandatory/decimal <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#sub-account-futures-asset-transfer-for-master-account\">\n    https://binance-docs.github.io/apidocs/spot/en/#sub-account-futures-asset-transfer-for-master-account</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount.[String]assets(Map<String, Object>)", "name": "assets", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String assets(Map<String, Object> parameters)", "original_string": "    public String assets(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"email\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, SUB_ACC_ASSETS, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java", "class_name": "SubAccount", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nFetch sub-account assets.\n<br><br>\nGET /sapi/v3/sub-account/assets\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nemail -- mandatory/string -- Sub account email <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-sub-account-assets-for-master-account\">\n    https://binance-docs.github.io/apidocs/spot/en/#query-sub-account-assets-for-master-account</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount.[String]spotAccountSummary(Map<String, Object>)", "name": "spotAccountSummary", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String spotAccountSummary(Map<String, Object> parameters)", "original_string": "    public String spotAccountSummary(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, SPOT_ASSET_SUMMARY, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java", "class_name": "SubAccount", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGet BTC valued asset summary of subaccounts.\n<br><br>\nGET /sapi/v1/sub-account/spotSummary\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nemail -- optional/string -- Sub account email <br>\npage -- optional/long -- default 1 <br>\nsize -- optional/long -- default 10, max 20 <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-sub-account-spot-assets-summary-for-master-account\">\n    https://binance-docs.github.io/apidocs/spot/en/#query-sub-account-spot-assets-summary-for-master-account</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount.[String]depositAddress(Map<String, Object>)", "name": "depositAddress", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String depositAddress(Map<String, Object> parameters)", "original_string": "    public String depositAddress(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"email\", String.class);\n        ParameterChecker.checkParameter(parameters, \"coin\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, SUB_DEPOSIT_ADDRESS, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java", "class_name": "SubAccount", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nFetch sub-account deposit address.\n<br><br>\nGET /sapi/v1/capital/deposit/subAddress\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nemail -- mandatory/string -- Sub account email <br>\ncoin -- mandatory/string <br>\nnetwork -- optional/string <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-sub-account-deposit-address-for-master-account\">\n    https://binance-docs.github.io/apidocs/spot/en/#get-sub-account-deposit-address-for-master-account</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount.[String]depositHistory(Map<String, Object>)", "name": "depositHistory", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String depositHistory(Map<String, Object> parameters)", "original_string": "    public String depositHistory(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"email\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, SUB_DEPOSIT_HISTORY, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java", "class_name": "SubAccount", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nFetch sub-account deposit history.\n<br><br>\nGET /sapi/v1/capital/deposit/subHisrec\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nemail -- mandatory/string -- Sub account email <br>\ncoin -- optional/string <br>\nstatus -- optional/int -- 0(0:pending,6: credited but cannot withdraw, 1:success) <br>\nstartTime -- optional/long <br>\nendTime -- optional/long <br>\nlimit -- optional/int <br>\noffset -- optional/int -- default:0 <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-sub-account-deposit-history-for-master-account\">\n    https://binance-docs.github.io/apidocs/spot/en/#get-sub-account-deposit-history-for-master-account</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount.[String]accountStatus(Map<String, Object>)", "name": "accountStatus", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String accountStatus(Map<String, Object> parameters)", "original_string": "    public String accountStatus(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, SUB_ACC_STATUS, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java", "class_name": "SubAccount", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/sub-account/status\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nemail -- optional/string -- Sub account email <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-sub-account-39-s-status-on-margin-futures-for-master-account\">\n    https://binance-docs.github.io/apidocs/spot/en/#get-sub-account-39-s-status-on-margin-futures-for-master-account</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount.[String]enableMargin(Map<String, Object>)", "name": "enableMargin", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String enableMargin(Map<String, Object> parameters)", "original_string": "    public String enableMargin(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"email\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, ENABLE_MARGIN, parameters, HttpMethod.POST, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java", "class_name": "SubAccount", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nPOST /sapi/v1/sub-account/margin/enable\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nemail -- mandatory/string -- Sub account email <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#enable-margin-for-sub-account-for-master-account\">\n    https://binance-docs.github.io/apidocs/spot/en/#enable-margin-for-sub-account-for-master-account</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount.[String]marginAccount(Map<String, Object>)", "name": "marginAccount", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String marginAccount(Map<String, Object> parameters)", "original_string": "    public String marginAccount(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"email\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, SUB_ACC_MARGIN, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java", "class_name": "SubAccount", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/sub-account/margin/account\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nemail -- mandatory/string -- Sub account email <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-detail-on-sub-account-39-s-margin-account-for-master-account\">\n    https://binance-docs.github.io/apidocs/spot/en/#get-detail-on-sub-account-39-s-margin-account-for-master-account</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount.[String]marginAccountSummary(Map<String, Object>)", "name": "marginAccountSummary", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String marginAccountSummary(Map<String, Object> parameters)", "original_string": "    public String marginAccountSummary(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, SUB_ACC_MARGIN_SUMMARY, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java", "class_name": "SubAccount", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/sub-account/margin/accountSummary\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-summary-of-sub-account-39-s-margin-account-for-master-account\">\n    https://binance-docs.github.io/apidocs/spot/en/#get-summary-of-sub-account-39-s-margin-account-for-master-account</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount.[String]enableFutures(Map<String, Object>)", "name": "enableFutures", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String enableFutures(Map<String, Object> parameters)", "original_string": "    public String enableFutures(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"email\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, ENABLE_FUTURES, parameters, HttpMethod.POST, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java", "class_name": "SubAccount", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nPOST /sapi/v1/sub-account/futures/enable\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nemail -- mandatory/string -- Sub-account email <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#enable-futures-for-sub-account-for-master-account\">\n    https://binance-docs.github.io/apidocs/spot/en/#enable-futures-for-sub-account-for-master-account</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount.[String]futuresAccount(Map<String, Object>)", "name": "futuresAccount", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String futuresAccount(Map<String, Object> parameters)", "original_string": "    public String futuresAccount(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"email\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, SUB_ACC_FUTURES, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java", "class_name": "SubAccount", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/sub-account/futures/account\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nemail -- mandatory/string -- Sub-account email <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-detail-on-sub-account-39-s-futures-account-for-master-account\">\n    https://binance-docs.github.io/apidocs/spot/en/#get-detail-on-sub-account-39-s-futures-account-for-master-account</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount.[String]futuresAccountSummary(Map<String, Object>)", "name": "futuresAccountSummary", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String futuresAccountSummary(Map<String, Object> parameters)", "original_string": "    public String futuresAccountSummary(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, SUB_ACC_FUTURES_SUMMARY, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java", "class_name": "SubAccount", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/sub-account/futures/accountSummary\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-summary-of-sub-account-39-s-futures-account-for-master-account\">\n    https://binance-docs.github.io/apidocs/spot/en/#get-summary-of-sub-account-39-s-futures-account-for-master-account</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount.[String]futuresPositionRisk(Map<String, Object>)", "name": "futuresPositionRisk", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String futuresPositionRisk(Map<String, Object> parameters)", "original_string": "    public String futuresPositionRisk(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"email\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, SUB_ACC_POSITION_RISK, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java", "class_name": "SubAccount", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/sub-account/futures/positionRisk\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nemail -- mandatory/string -- Sub-Account email <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-futures-position-risk-of-sub-account-for-master-account\">\n    https://binance-docs.github.io/apidocs/spot/en/#get-futures-position-risk-of-sub-account-for-master-account</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount.[String]futuresTransfer(Map<String, Object>)", "name": "futuresTransfer", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String futuresTransfer(Map<String, Object> parameters)", "original_string": "    public String futuresTransfer(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"email\", String.class);\n        ParameterChecker.checkParameter(parameters, \"asset\", String.class);\n        ParameterChecker.checkRequiredParameter(parameters, \"amount\");\n        ParameterChecker.checkParameter(parameters, \"type\", Integer.class);\n        return requestHandler.sendSignedRequest(baseUrl, SUB_ACC_FUTURES_TRANSFER, parameters, HttpMethod.POST, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java", "class_name": "SubAccount", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nPOST /sapi/v1/sub-account/futures/transfer\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nemail -- mandatory/string -- Sub-Account email <br>\nasset -- mandatory/string -- The asset being transferred, e.g., USDT <br>\namount -- mandatory/decimal -- The amount to be transferred <br>\ntype -- mandatory/int -- 1: transfer from subaccount's spot account to its USDT-margined futures account\n           2: transfer from subaccount's USDT-margined futures account to its spot account\n           3: transfer from subaccount's spot account to its COIN-margined futures account\n           4:transfer from subaccount's COIN-margined futures account to its spot account <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#futures-transfer-for-sub-account-for-master-account\">\n    https://binance-docs.github.io/apidocs/spot/en/#futures-transfer-for-sub-account-for-master-account</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount.[String]marginTransfer(Map<String, Object>)", "name": "marginTransfer", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String marginTransfer(Map<String, Object> parameters)", "original_string": "    public String marginTransfer(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"email\", String.class);\n        ParameterChecker.checkParameter(parameters, \"asset\", String.class);\n        ParameterChecker.checkRequiredParameter(parameters, \"amount\");\n        ParameterChecker.checkParameter(parameters, \"type\", Integer.class);\n        return requestHandler.sendSignedRequest(baseUrl, SUB_ACC_MARGIN_TRANSFER, parameters, HttpMethod.POST, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java", "class_name": "SubAccount", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nPOST /sapi/v1/sub-account/margin/transfer\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nemail -- mandatory/string -- Sub-Account email <br>\nasset -- mandatory/string -- The asset being transferred, e.g., USDT <br>\namount -- mandatory/decimal -- The amount to be transferred <br>\ntype -- mandatory/int -- 1: transfer from subaccount's spot account to margin account\n                         2: transfer from subaccount's margin account to its spot account <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#margin-transfer-for-sub-account-for-master-account\">\n    https://binance-docs.github.io/apidocs/spot/en/#margin-transfer-for-sub-account-for-master-account</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount.[String]subAccountToSubAccount(Map<String, Object>)", "name": "subAccountToSubAccount", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String subAccountToSubAccount(Map<String, Object> parameters)", "original_string": "    public String subAccountToSubAccount(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"toEmail\", String.class);\n        ParameterChecker.checkParameter(parameters, \"asset\", String.class);\n        ParameterChecker.checkRequiredParameter(parameters, \"amount\");\n        return requestHandler.sendSignedRequest(baseUrl, SUB_TO_SUB, parameters, HttpMethod.POST, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java", "class_name": "SubAccount", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nPOST /sapi/v1/sub-account/transfer/subToSub\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\ntoEmail -- mandatory/string -- Sub-Account email <br>\nasset -- mandatory/string -- The asset being transferred, e.g., USDT <br>\namount -- mandatory/decimal -- The amount to be transferred <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#transfer-to-sub-account-of-same-master-for-sub-account\">\n    https://binance-docs.github.io/apidocs/spot/en/#transfer-to-sub-account-of-same-master-for-sub-account</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount.[String]subAccountToMaster(Map<String, Object>)", "name": "subAccountToMaster", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String subAccountToMaster(Map<String, Object> parameters)", "original_string": "    public String subAccountToMaster(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"asset\", String.class);\n        ParameterChecker.checkRequiredParameter(parameters, \"amount\");\n        return requestHandler.sendSignedRequest(baseUrl, SUB_TO_MASTER, parameters, HttpMethod.POST, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java", "class_name": "SubAccount", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nPOST /sapi/v1/sub-account/transfer/subToMaster\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nasset -- mandatory/string -- The asset being transferred, e.g., USDT <br>\namount -- mandatory/decimal -- The amount to be transferred <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#transfer-to-master-for-sub-account\">\n    https://binance-docs.github.io/apidocs/spot/en/#transfer-to-master-for-sub-account</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount.[String]transferHistory(Map<String, Object>)", "name": "transferHistory", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String transferHistory(Map<String, Object> parameters)", "original_string": "    public String transferHistory(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, SUB_TRANSFER_HIST, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java", "class_name": "SubAccount", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/sub-account/transfer/subUserHistory\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nasset -- optional/string -- If not sent, result of all assets will be returned <br>\ntype -- optional/int -- \t1: transfer in, 2: transfer out <br>\nstartTime -- optional/long <br>\nendTime -- optional/long <br>\nlimit -- optional/int -- Default 500 <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#sub-account-transfer-history-for-sub-account\">\n    https://binance-docs.github.io/apidocs/spot/en/#sub-account-transfer-history-for-sub-account</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount.[String]universalTransfer(Map<String, Object>)", "name": "universalTransfer", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String universalTransfer(Map<String, Object> parameters)", "original_string": "    public String universalTransfer(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"fromAccountType\", String.class);\n        ParameterChecker.checkParameter(parameters, \"toAccountType\", String.class);\n        ParameterChecker.checkParameter(parameters, \"asset\", String.class);\n        ParameterChecker.checkRequiredParameter(parameters, \"amount\");\n        return requestHandler.sendSignedRequest(baseUrl, SUB_UNIVERSAL_TRANSFER, parameters, HttpMethod.POST, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java", "class_name": "SubAccount", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nPOST /sapi/v1/sub-account/universalTransfer\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nfromEmail -- optional/string <br>\ntoEmail -- optional/string <br>\nfromAccountType -- mandatory/string -- \"SPOT\",\"USDT_FUTURE\",\"COIN_FUTURE\" <br>\ntoAccountType -- mandatory/string -- \"SPOT\",\"USDT_FUTURE\",\"COIN_FUTURE\" <br>\nclientTranId -- optional/string -- Must be unique <br>\nasset -- mandatory/string <br>\namount -- mandatory/decimal <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#universal-transfer-for-master-account\">\n    https://binance-docs.github.io/apidocs/spot/en/#universal-transfer-for-master-account</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount.[String]queryUniversalTransfer(Map<String, Object>)", "name": "queryUniversalTransfer", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String queryUniversalTransfer(Map<String, Object> parameters)", "original_string": "    public String queryUniversalTransfer(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, SUB_UNIVERSAL_TRANSFER, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java", "class_name": "SubAccount", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/sub-account/universalTransfer\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nfromEmail -- optional/string <br>\ntoEmail -- optional/string <br>\nclientTranId -- optional/string -- Must be unique <br>\nstartTime -- optional/long <br>\nendTime -- optional/long <br>\npage -- optional/int -- Default 1 <br>\nlimit -- optional/int -- Default 500, Max 500 <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-universal-transfer-history-for-master-account\">\n    https://binance-docs.github.io/apidocs/spot/en/#query-universal-transfer-history-for-master-account</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount.[String]futuresAccountV2(Map<String, Object>)", "name": "futuresAccountV2", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String futuresAccountV2(Map<String, Object> parameters)", "original_string": "    public String futuresAccountV2(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"email\", String.class);\n        ParameterChecker.checkParameter(parameters, \"futuresType\", Integer.class);\n        return requestHandler.sendSignedRequest(baseUrl, SUB_FUTURES_ACCOUNT_V2, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java", "class_name": "SubAccount", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v2/sub-account/futures/account\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nemail -- mandatory/string -- Sub-account email <br>\nfuturesType -- mandatory/int -- 1:USDT Margined Futures, 2:COIN Margined Futures <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-detail-on-sub-account-39-s-futures-account-v2-for-master-account\">\n    https://binance-docs.github.io/apidocs/spot/en/#get-detail-on-sub-account-39-s-futures-account-v2-for-master-account</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount.[String]futuresAccountSummaryV2(Map<String, Object>)", "name": "futuresAccountSummaryV2", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String futuresAccountSummaryV2(Map<String, Object> parameters)", "original_string": "    public String futuresAccountSummaryV2(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"futuresType\", Integer.class);\n        return requestHandler.sendSignedRequest(baseUrl, SUB_FUTURES_ACCOUNT_SUMMARY_V2, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java", "class_name": "SubAccount", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v2/sub-account/futures/accountSummary\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nfuturesType -- mandatory/int -- 1:USDT Margined Futures, 2:COIN Margined Futures <br>\npage -- optional/int -- \tdefault:1 <br>\nlimit -- optional/int -- default:10, max:20 <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-summary-of-sub-account-39-s-futures-account-v2-for-master-account\">\n    https://binance-docs.github.io/apidocs/spot/en/#get-summary-of-sub-account-39-s-futures-account-v2-for-master-account</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount.[String]futuresPositionRiskV2(Map<String, Object>)", "name": "futuresPositionRiskV2", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String futuresPositionRiskV2(Map<String, Object> parameters)", "original_string": "    public String futuresPositionRiskV2(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"email\", String.class);\n        ParameterChecker.checkParameter(parameters, \"futuresType\", Integer.class);\n        return requestHandler.sendSignedRequest(baseUrl, SUB_FUTURES_POSITION_RISK_V2, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java", "class_name": "SubAccount", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v2/sub-account/futures/positionRisk\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nemail -- mandatory/string -- Sub-account email <br>\nfuturesType -- mandatory/int -- 1:USDT Margined Futures, 2:COIN Margined Futures <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-futures-position-risk-of-sub-account-v2-for-master-account\">\n    https://binance-docs.github.io/apidocs/spot/en/#get-futures-position-risk-of-sub-account-v2-for-master-account</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount.[String]enableLeverageToken(Map<String, Object>)", "name": "enableLeverageToken", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String enableLeverageToken(Map<String, Object> parameters)", "original_string": "    public String enableLeverageToken(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"email\", String.class);\n        ParameterChecker.checkParameter(parameters, \"enableBlvt\", Boolean.class);\n        return requestHandler.sendSignedRequest(baseUrl, ENABLE_LEVERAGE, parameters, HttpMethod.POST, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java", "class_name": "SubAccount", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v2/sub-account/futures/positionRisk\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nemail -- mandatory/string -- Sub-account email <br>\nenableBlvt -- mandatory/boolean -- Only true for now <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#enable-leverage-token-for-sub-account-for-master-account\">\n    https://binance-docs.github.io/apidocs/spot/en/#enable-leverage-token-for-sub-account-for-master-account</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount.[String]getIpRestriction(Map<String, Object>)", "name": "getIpRestriction", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String getIpRestriction(Map<String, Object> parameters)", "original_string": "    public String getIpRestriction(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"email\", String.class);\n        ParameterChecker.checkParameter(parameters, \"subAccountApiKey\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, IP_RESTRICTION, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java", "class_name": "SubAccount", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/sub-account/subAccountApi/ipRestriction\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nemail -- mandatory/string -- Sub-account email <br>\nsubAccountApiKey -- mandatory/string <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-ip-restriction-for-a-sub-account-api-key-for-master-account\">\n    https://binance-docs.github.io/apidocs/spot/en/#get-ip-restriction-for-a-sub-account-api-key-for-master-account</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount.[String]deleteIpList(Map<String, Object>)", "name": "deleteIpList", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String deleteIpList(Map<String, Object> parameters)", "original_string": "    public String deleteIpList(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"email\", String.class);\n        ParameterChecker.checkParameter(parameters, \"subAccountApiKey\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, IP_LIST, parameters, HttpMethod.DELETE, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java", "class_name": "SubAccount", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nDELETE /sapi/v1/sub-account/subAccountApi/ipRestriction/ipList\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nemail -- mandatory/string -- Sub-account email <br>\nsubAccountApiKey -- mandatory/string <br>\nipAddress -- optional/string -- Can be added in batches, separated by commas <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#delete-ip-list-for-a-sub-account-api-key-for-master-account\">\n    https://binance-docs.github.io/apidocs/spot/en/#delete-ip-list-for-a-sub-account-api-key-for-master-account</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount.[String]managedSubDeposit(Map<String, Object>)", "name": "managedSubDeposit", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String managedSubDeposit(Map<String, Object> parameters)", "original_string": "    public String managedSubDeposit(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"toEmail\", String.class);\n        ParameterChecker.checkParameter(parameters, \"asset\", String.class);\n        ParameterChecker.checkRequiredParameter(parameters, \"amount\");\n        return requestHandler.sendSignedRequest(baseUrl, MANAGED_SUB_DEPOSIT, parameters, HttpMethod.POST, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java", "class_name": "SubAccount", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nPOST /sapi/v1/managed-subaccount/deposit\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\ntoEmail -- mandatory/string <br>\nasset -- mandatory/string <br>\namount -- mandatory/decimal <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#deposit-assets-into-the-managed-sub-account-for-investor-master-account\">\n    https://binance-docs.github.io/apidocs/spot/en/#deposit-assets-into-the-managed-sub-account-for-investor-master-account</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount.[String]managedSubDetails(Map<String, Object>)", "name": "managedSubDetails", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String managedSubDetails(Map<String, Object> parameters)", "original_string": "    public String managedSubDetails(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"email\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, MANAGED_SUB_DETAILS, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java", "class_name": "SubAccount", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/managed-subaccount/asset\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nemail -- mandatory/string <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-managed-sub-account-asset-details-for-investor-master-account\">\n    https://binance-docs.github.io/apidocs/spot/en/#query-managed-sub-account-asset-details-for-investor-master-account</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount.[String]managedSubWithdraw(Map<String, Object>)", "name": "managedSubWithdraw", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String managedSubWithdraw(Map<String, Object> parameters)", "original_string": "    public String managedSubWithdraw(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"fromEmail\", String.class);\n        ParameterChecker.checkParameter(parameters, \"asset\", String.class);\n        ParameterChecker.checkRequiredParameter(parameters, \"amount\");\n        return requestHandler.sendSignedRequest(baseUrl, MANAGED_SUB_WITHDRAW, parameters, HttpMethod.POST, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java", "class_name": "SubAccount", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nPOST /sapi/v1/managed-subaccount/withdraw\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nfromEmail -- mandatory/string <br>\nasset -- mandatory/string <br>\namount -- mandatory/decimal <br>\ntransferDate -- optional/decimal -- Withdrawals is automatically occur on the transfer date(UTC0).\n                                    If a date is not selected, the withdrawal occurs right now <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#withdrawl-assets-from-the-managed-sub-account-for-investor-master-account\">\n    https://binance-docs.github.io/apidocs/spot/en/#withdrawl-assets-from-the-managed-sub-account-for-investor-master-account</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount.[String]managedSubAccountSnapshot(Map<String, Object>)", "name": "managedSubAccountSnapshot", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String managedSubAccountSnapshot(Map<String, Object> parameters)", "original_string": "    public String managedSubAccountSnapshot(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"email\", String.class);\n        ParameterChecker.checkParameter(parameters, \"type\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, MANAGED_SUB_SNAPSHOT, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java", "class_name": "SubAccount", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/managed-subaccount/accountSnapshot\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nemail -- mandatory/string <br>\ntype -- mandatory/string -- \"SPOT\", \"MARGIN\"(Cross), \"FUTURES\"(UM) <br>\nstartTime -- optional/long <br>\nendTime -- optional/long <br>\nlimit -- int/long <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-managed-sub-account-snapshot-for-investor-master-account\">\n    https://binance-docs.github.io/apidocs/spot/en/#query-managed-sub-account-snapshot-for-investor-master-account</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount.[String]updateIpRestriction(Map<String, Object>)", "name": "updateIpRestriction", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String updateIpRestriction(Map<String, Object> parameters)", "original_string": "    public String updateIpRestriction(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"email\", String.class);\n        ParameterChecker.checkParameter(parameters, \"subAccountApiKey\", String.class);\n        ParameterChecker.checkParameter(parameters, \"status\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, IP_RESTRICTION_V2, parameters, HttpMethod.POST, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java", "class_name": "SubAccount", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nPOST /sapi/v2/sub-account/subAccountApi/ipRestriction\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nemail -- mandatory/string -- Sub-account email <br>\nsubAccountApiKey -- mandatory/string <br>\nstatus -- mandatory/string -- IP Restriction status. 1 = IP Unrestricted. 2 = Restrict access to trusted IPs only.<br>\nipAddress -- optional/string -- Insert static IP in batch, separated by commas. <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#add-ip-restriction-for-sub-account-api-key-for-master-account\">\n    https://binance-docs.github.io/apidocs/spot/en/#add-ip-restriction-for-sub-account-api-key-for-master-account</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/NFT.java.NFT.[]NFT(String,String,String,boolean,ProxyAuth)", "name": "NFT", "arg_nums": 5, "params": [{"name": "baseUrl", "type": "String"}, {"name": "apiKey", "type": "String"}, {"name": "secretKey", "type": "String"}, {"name": "showLimitUsage", "type": "boolean"}, {"name": "proxy", "type": "ProxyAuth"}], "return_type": "", "signature": "public NFT(String baseUrl, String apiKey, String secretKey, boolean showLimitUsage, ProxyAuth proxy)", "original_string": "    public NFT(String baseUrl, String apiKey, String secretKey, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, new HmacSignatureGenerator(secretKey), proxy);\n        this.showLimitUsage = showLimitUsage;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/NFT.java", "class_name": "NFT", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/NFT.java.NFT", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/NFT.java.NFT.[]NFT(String,String,SignatureGenerator,boolean,ProxyAuth)", "name": "NFT", "arg_nums": 5, "params": [{"name": "baseUrl", "type": "String"}, {"name": "apiKey", "type": "String"}, {"name": "signatureGenerator", "type": "SignatureGenerator"}, {"name": "showLimitUsage", "type": "boolean"}, {"name": "proxy", "type": "ProxyAuth"}], "return_type": "", "signature": "public NFT(String baseUrl, String apiKey, SignatureGenerator signatureGenerator, boolean showLimitUsage, ProxyAuth proxy)", "original_string": "    public NFT(String baseUrl, String apiKey, SignatureGenerator signatureGenerator, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, signatureGenerator, proxy);\n        this.showLimitUsage = showLimitUsage;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/NFT.java", "class_name": "NFT", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/NFT.java.NFT", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/NFT.java.NFT.[String]transactionsHistory(Map<String, Object>)", "name": "transactionsHistory", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String transactionsHistory(Map<String, Object> parameters)", "original_string": "    public String transactionsHistory(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"orderType\", Integer.class);\n        return requestHandler.sendSignedRequest(baseUrl, TRANSACTIONS, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/NFT.java", "class_name": "NFT", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/NFT.java.NFT", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/pay/transactions\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\norderType -- mandatory/int -- 0: purchase order, 1: sell order, 2: royalty income,\n           3: primary market order, 4: mint fee <br>\nstartTime -- optional/long <br>\nendTime -- optional/long <br>\nlimit -- optional/int -- Default 50, Max 50 <br>\npage -- optional/int -- Default 1 <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-nft-transaction-history-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#get-nft-transaction-history-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/NFT.java.NFT.[String]depositHistory(Map<String, Object>)", "name": "depositHistory", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String depositHistory(Map<String, Object> parameters)", "original_string": "    public String depositHistory(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, DEPOSIT, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/NFT.java", "class_name": "NFT", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/NFT.java.NFT", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/nft/history/deposit\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nstartTime -- optional/long <br>\nendTime -- optional/long <br>\nlimit -- optional/int -- Default 50, Max 50 <br>\npage -- optional/int -- Default 1 <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-nft-deposit-history-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#get-nft-deposit-history-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/NFT.java.NFT.[String]withdrawHistory(Map<String, Object>)", "name": "withdrawHistory", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String withdrawHistory(Map<String, Object> parameters)", "original_string": "    public String withdrawHistory(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, WITHDRAW, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/NFT.java", "class_name": "NFT", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/NFT.java.NFT", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/nft/history/withdraw\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nstartTime -- optional/long <br>\nendTime -- optional/long <br>\nlimit -- optional/int -- Default 50, Max 50 <br>\npage -- optional/int -- Default 1 <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-nft-withdraw-history-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#get-nft-withdraw-history-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/NFT.java.NFT.[String]getAsset(Map<String, Object>)", "name": "getAsset", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String getAsset(Map<String, Object> parameters)", "original_string": "    public String getAsset(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, GET_ASSET, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/NFT.java", "class_name": "NFT", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/NFT.java.NFT", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/nft/user/getAsset\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nlimit -- optional/int -- Default 50, Max 50 <br>\npage -- optional/int -- Default 1 <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-nft-asset-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#get-nft-asset-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Pay.java.Pay.[]Pay(String,String,String,boolean,ProxyAuth)", "name": "Pay", "arg_nums": 5, "params": [{"name": "baseUrl", "type": "String"}, {"name": "apiKey", "type": "String"}, {"name": "secretKey", "type": "String"}, {"name": "showLimitUsage", "type": "boolean"}, {"name": "proxy", "type": "ProxyAuth"}], "return_type": "", "signature": "public Pay(String baseUrl, String apiKey, String secretKey, boolean showLimitUsage, ProxyAuth proxy)", "original_string": "    public Pay(String baseUrl, String apiKey, String secretKey, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, new HmacSignatureGenerator(secretKey), proxy);\n        this.showLimitUsage = showLimitUsage;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Pay.java", "class_name": "Pay", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Pay.java.Pay", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Pay.java.Pay.[]Pay(String,String,SignatureGenerator,boolean,ProxyAuth)", "name": "Pay", "arg_nums": 5, "params": [{"name": "baseUrl", "type": "String"}, {"name": "apiKey", "type": "String"}, {"name": "signatureGenerator", "type": "SignatureGenerator"}, {"name": "showLimitUsage", "type": "boolean"}, {"name": "proxy", "type": "ProxyAuth"}], "return_type": "", "signature": "public Pay(String baseUrl, String apiKey, SignatureGenerator signatureGenerator, boolean showLimitUsage, ProxyAuth proxy)", "original_string": "    public Pay(String baseUrl, String apiKey, SignatureGenerator signatureGenerator, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, signatureGenerator, proxy);\n        this.showLimitUsage = showLimitUsage;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Pay.java", "class_name": "Pay", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Pay.java.Pay", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Pay.java.Pay.[String]transactions(Map<String, Object>)", "name": "transactions", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String transactions(Map<String, Object> parameters)", "original_string": "    public String transactions(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, TRANSACTIONS, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Pay.java", "class_name": "Pay", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Pay.java.Pay", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/pay/transactions\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nstartTime -- optional/long <br>\nendTime -- optional/long <br>\nlimit -- optional/int -- default 100, max 100 <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-pay-trade-history-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#get-pay-trade-history-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Trade.java.Trade.[]Trade(String,String,String,boolean,ProxyAuth)", "name": "Trade", "arg_nums": 5, "params": [{"name": "baseUrl", "type": "String"}, {"name": "apiKey", "type": "String"}, {"name": "secretKey", "type": "String"}, {"name": "showLimitUsage", "type": "boolean"}, {"name": "proxy", "type": "ProxyAuth"}], "return_type": "", "signature": "public Trade(String baseUrl, String apiKey, String secretKey, boolean showLimitUsage, ProxyAuth proxy)", "original_string": "    public Trade(String baseUrl, String apiKey, String secretKey, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, new HmacSignatureGenerator(secretKey), proxy);\n        this.showLimitUsage = showLimitUsage;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Trade.java", "class_name": "Trade", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Trade.java.Trade", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Trade.java.Trade.[]Trade(String,String,SignatureGenerator,boolean,ProxyAuth)", "name": "Trade", "arg_nums": 5, "params": [{"name": "baseUrl", "type": "String"}, {"name": "apiKey", "type": "String"}, {"name": "signatureGenerator", "type": "SignatureGenerator"}, {"name": "showLimitUsage", "type": "boolean"}, {"name": "proxy", "type": "ProxyAuth"}], "return_type": "", "signature": "public Trade(String baseUrl, String apiKey, SignatureGenerator signatureGenerator, boolean showLimitUsage, ProxyAuth proxy)", "original_string": "    public Trade(String baseUrl, String apiKey, SignatureGenerator signatureGenerator, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, signatureGenerator, proxy);\n        this.showLimitUsage = showLimitUsage;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Trade.java", "class_name": "Trade", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Trade.java.Trade", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Trade.java.Trade.[String]testNewOrder(Map<String, Object>)", "name": "testNewOrder", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String testNewOrder(Map<String, Object> parameters)", "original_string": "    public String testNewOrder(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        ParameterChecker.checkParameter(parameters, \"side\", String.class);\n        ParameterChecker.checkParameter(parameters, \"type\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, TEST_NEW_ORDER, parameters, HttpMethod.POST, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Trade.java", "class_name": "Trade", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Trade.java.Trade", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nTest new order creation and signature/recvWindow long.\nCreates and validates a new order but does not send it into the matching engine.\n<br><br>\nPOST /api/v3/order/test\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nIn addition to all parameters accepted by POST /api/v3/order, the following optional parameters are also accepted: <br>\ncomputeCommissionRates -- optional/boolean -- Default: false <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#test-new-order-trade\">\n    https://binance-docs.github.io/apidocs/spot/en/#test-new-order-trade</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Trade.java.Trade.[String]newOrder(Map<String, Object>)", "name": "newOrder", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String newOrder(Map<String, Object> parameters)", "original_string": "    public String newOrder(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        ParameterChecker.checkParameter(parameters, \"side\", String.class);\n        ParameterChecker.checkParameter(parameters, \"type\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, ORDER, parameters, HttpMethod.POST, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Trade.java", "class_name": "Trade", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Trade.java.Trade", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nSend in a new order.\n<br><br>\nPOST /api/v3/order\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nsymbol -- mandatory/string <br>\nside -- mandatory/enum <br>\ntype -- mandatory/enum <br>\ntimeInForce -- optional/enum <br>\nquantity -- optional/decimal <br>\nquoteOrderQty -- optional/decimal <br>\nprice -- optional/decimal <br>\nnewClientOrderId -- optional/string -- A unique id among open orders. Automatically generated if not sent.<br>\nstrategyId -- optional/int <br>\nstrategyType -- optional/int -- The value cannot be less than 1000000.<br>\nstopPrice -- optional/decimal -- Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders.<br>\ntrailingDelta -- optional/long -- Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders.<br>\nicebergQty -- optional/decimal -- Used with LIMIT, STOP_LOSS_LIMIT, and TAKE_PROFIT_LIMIT to create an iceberg order.<br>\nnewOrderRespType -- optional/enum -- Set the response JSON. ACK, RESULT, or FULL; MARKET and LIMIT order types default to FULL, all other orders default to ACK.<br>\nselfTradePrevention -- optional/enum -- \tThe allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER, EXPIRE_MAKER, EXPIRE_BOTH, NONE.<br>s\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#new-order-trade\">\n    https://binance-docs.github.io/apidocs/spot/en/#new-order-trade</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Trade.java.Trade.[String]cancelOrder(Map<String, Object>)", "name": "cancelOrder", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String cancelOrder(Map<String, Object> parameters)", "original_string": "    public String cancelOrder(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, ORDER, parameters, HttpMethod.DELETE, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Trade.java", "class_name": "Trade", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Trade.java.Trade", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nCancel an active order.\n<br><br>\nDELETE /api/v3/order\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nsymbol -- mandatory/string <br>\norderId -- optional/long <br>\norigClientOrderId -- optional/string <br>\nnewClientOrderId -- optional/string <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#cancel-order-trade\">\n    https://binance-docs.github.io/apidocs/spot/en/#cancel-order-trade</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Trade.java.Trade.[String]cancelOpenOrders(Map<String, Object>)", "name": "cancelOpenOrders", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String cancelOpenOrders(Map<String, Object> parameters)", "original_string": "    public String cancelOpenOrders(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, ALL_OPEN_ORDERS, parameters, HttpMethod.DELETE, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Trade.java", "class_name": "Trade", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Trade.java.Trade", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nCancels all active orders on a symbol.\nThis includes OCO orders.\n<br><br>\nDELETE /api/v3/openOrders\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nsymbol -- mandatory/string <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#cancel-order-trade\">\n    https://binance-docs.github.io/apidocs/spot/en/#cancel-order-trade</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Trade.java.Trade.[String]getOrder(Map<String, Object>)", "name": "getOrder", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String getOrder(Map<String, Object> parameters)", "original_string": "    public String getOrder(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, ORDER, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Trade.java", "class_name": "Trade", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Trade.java.Trade", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nCheck an order's status.\n<br><br>\nGET /api/v3/order\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nsymbol -- mandatory/string <br>\norderId -- optional/long <br>\norigClientOrderId -- optional/string <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-order-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#query-order-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Trade.java.Trade.[String]cancelReplace(Map<String, Object>)", "name": "cancelReplace", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String cancelReplace(Map<String, Object> parameters)", "original_string": "    public String cancelReplace(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        ParameterChecker.checkParameter(parameters, \"side\", String.class);\n        ParameterChecker.checkParameter(parameters, \"type\", String.class);\n        ParameterChecker.checkParameter(parameters, \"cancelReplaceMode\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, CANCEL_REPLACE, parameters, HttpMethod.POST, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Trade.java", "class_name": "Trade", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Trade.java.Trade", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nCancels an existing order and places a new order on the same symbol.<br>\nFilters are evaluated before the cancel order is placed.<br>\nIf the new order placement is successfully sent to the engine, the order count will increase by 1.\n<br><br>\nPOST /api/v3/order/cancelReplace\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nsymbol -- mandatory/string <br>\nside -- mandatory/enum <br>\ntype -- mandatory/enum <br>\ncancelReplaceMode -- mandatory/enum -- The allowed values are: STOP_ON_FAILURE - If the cancel request fails, the new order placement will not be attempted. ALLOW_FAILURES - new order placement will be attempted even if cancel request fails. <br>\ntimeInForce -- optional/enum <br>\nquantity -- optional/decimal <br>\nquoteOrderQty -- optional/decimal <br>\nprice -- optional/decimal <br>\ncancelNewClientOrderId -- optional/string <br>\ncancelOrigClientOrderId -- optional/string -- Either the cancelOrigClientOrderId or cancelOrderId must be provided. If both are provided, cancelOrderId takes precedence. <br>\ncancelOrderId -- optional/long -- Either the cancelOrigClientOrderId or cancelOrderId must be provided. If both are provided, cancelOrderId takes precedence. <br>\nnewClientOrderId -- optional/string -- Used to identify the new order. <br>\nstopStrategyId -- optional/int <br>\nstopStrategyType -- optional/int -- The value cannot be less than 1000000.<br>\nstopPrice -- optional/decimal <br>\nicebergQty -- optional/decimal <br>\ntrailingDelta -- optional/long <br>\nnewOrderRespType -- optional/enum -- Allowed values: ACK, RESULT, FULL. MARKET and LIMIT orders types default to FULL; all other orders default to ACK<br>\nselfTradePreventionMode -- optional/enum -- The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER, EXPIRE_MAKER, EXPIRE_BOTH, NONE.<br>\ncancelRestrictions -- optional/enum -- Supported values: ONLY_NEW - Cancel will succeed if the order status is NEW. ONLY_PARTIALLY_FILLED - Cancel will succeed if order status is PARTIALLY_FILLED.<br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#cancel-an-existing-order-and-send-a-new-order-trade\">\n    https://binance-docs.github.io/apidocs/spot/en/#cancel-an-existing-order-and-send-a-new-order-trade</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Trade.java.Trade.[String]getOpenOrders(Map<String, Object>)", "name": "getOpenOrders", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String getOpenOrders(Map<String, Object> parameters)", "original_string": "    public String getOpenOrders(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, ALL_OPEN_ORDERS, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Trade.java", "class_name": "Trade", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Trade.java.Trade", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGet all open orders on a symbol. Careful when accessing this with no symbol.\n<br><br>\nGET /api/v3/openOrders\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nsymbol -- optional/string <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#current-open-orders-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#current-open-orders-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Trade.java.Trade.[String]getOrders(Map<String, Object>)", "name": "getOrders", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String getOrders(Map<String, Object> parameters)", "original_string": "    public String getOrders(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, ALL_ORDERS, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Trade.java", "class_name": "Trade", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Trade.java.Trade", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGet all account orders; active, canceled, or filled.\n<br><br>\nGET /api/v3/allOrders\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nsymbol -- mandatory/string <br>\norderId -- optional/long <br>\nstartTime -- optional/long <br>\nendTime -- optional/long <br>\nlimit -- optional/int <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#all-orders-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#all-orders-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Trade.java.Trade.[String]ocoOrder(Map<String, Object>)", "name": "ocoOrder", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String ocoOrder(Map<String, Object> parameters)", "original_string": "    public String ocoOrder(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        ParameterChecker.checkParameter(parameters, \"side\", String.class);\n        ParameterChecker.checkRequiredParameter(parameters, \"quantity\");\n        ParameterChecker.checkRequiredParameter(parameters, \"price\");\n        ParameterChecker.checkRequiredParameter(parameters, \"stopPrice\");\n        return requestHandler.sendSignedRequest(baseUrl, OCO_ORDER, parameters, HttpMethod.POST, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Trade.java", "class_name": "Trade", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Trade.java.Trade", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nSend in a new OCO.\n<br><br>\nPOST /api/v3/order/oco\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nsymbol -- mandatory/string <br>\nlistClientOrderId -- optional/string <br>\nside -- mandatory/enum <br>\nquantity -- mandatory/decimal <br>\nlimitClientOrderId -- optional/string <br>\nlimitStrategyId -- optional/int <br>\nlimitStrategyType -- optional/int <br>\nprice -- mandatory/decimal <br>\nlimitIcebergQty -- optional/decimal <br>\ntrailingDelta -- optional/long <br>\nstopClientOrderId -- optional/string <br>\nstopPrice -- mandatory/decimal <br>\nstopStrategyId -- optional/int <br>\nstopStrategyType -- optional/int -- The value cannot be less than 1000000.<br>\nstopLimitPrice -- optional/decimal -- If provided, stopLimitTimeInForce is required.<br>\nstopIcebergQty -- optional/decimal <br>\nstopLimitTimeInForce -- optional/enum <br>\nnewOrderRespType -- optional/enum <br>\nselfTradePreventionMode -- optional/enum -- The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER, EXPIRE_MAKER, EXPIRE_BOTH, NONE.<br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#new-oco-trade\">\n    https://binance-docs.github.io/apidocs/spot/en/#new-oco-trade</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Trade.java.Trade.[String]cancelOCO(Map<String, Object>)", "name": "cancelOCO", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String cancelOCO(Map<String, Object> parameters)", "original_string": "    public String cancelOCO(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, OCO_LIST, parameters, HttpMethod.DELETE, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Trade.java", "class_name": "Trade", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Trade.java.Trade", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nCancel an entire Order List.\n<br><br>\nDELETE /api/v3/orderList\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nsymbol -- mandatory/string <br>\norderListId -- optional/string <br>\nlistClientOrderId -- optional/string <br>\nnewClientOrderId -- optional/string <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#cancel-oco-trade\">\n    https://binance-docs.github.io/apidocs/spot/en/#cancel-oco-trade</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Trade.java.Trade.[String]getOCOOrder(Map<String, Object>)", "name": "getOCOOrder", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String getOCOOrder(Map<String, Object> parameters)", "original_string": "    public String getOCOOrder(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, OCO_LIST, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Trade.java", "class_name": "Trade", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Trade.java.Trade", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nRetrieves a specific OCO based on provided optional parameters\n<br><br>\nGET /api/v3/orderList\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\norderListId -- optional/string <br>\norigClientOrderId -- optional/string <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-oco-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#query-oco-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Trade.java.Trade.[String]getOCOOrders(Map<String, Object>)", "name": "getOCOOrders", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String getOCOOrders(Map<String, Object> parameters)", "original_string": "    public String getOCOOrders(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, ALL_OCO_LIST, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Trade.java", "class_name": "Trade", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Trade.java.Trade", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nRetrieves all OCO based on provided optional parameters\n<br><br>\nGET /api/v3/allOrderList\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nfromId -- optional/long <br>\nstartTime -- optional/long <br>\nendTime -- optional/long <br>\nlimit -- optional/int <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-oco-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#query-oco-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Trade.java.Trade.[String]getOpenOCOOrders(Map<String, Object>)", "name": "getOpenOCOOrders", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String getOpenOCOOrders(Map<String, Object> parameters)", "original_string": "    public String getOpenOCOOrders(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, ALL_OPEN_OCO_LIST, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Trade.java", "class_name": "Trade", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Trade.java.Trade", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /api/v3/openOrderList\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-open-oco-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#query-open-oco-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Trade.java.Trade.[String]account(Map<String, Object>)", "name": "account", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String account(Map<String, Object> parameters)", "original_string": "    public String account(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, ACCOUNT_INFO, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Trade.java", "class_name": "Trade", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Trade.java.Trade", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGet current account information.\n<br><br>\nGET /api/v3/account\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#account-information-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#account-information-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Trade.java.Trade.[String]myTrades(Map<String, Object>)", "name": "myTrades", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String myTrades(Map<String, Object> parameters)", "original_string": "    public String myTrades(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, ACCOUNT_TRADES, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Trade.java", "class_name": "Trade", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Trade.java.Trade", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGet trades for a specific account and symbol.\n<br><br>\nGET /api/v3/myTrades\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nsymbol -- mandatory/string <br>\norderId -- optional/long <br>\nstartTime -- optional/long <br>\nendTime -- optional/long <br>\nfromId -- optional/long <br>\nlimit -- optional/int <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#account-trade-list-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#account-trade-list-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Trade.java.Trade.[String]rateLimitOrder(Map<String, Object>)", "name": "rateLimitOrder", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String rateLimitOrder(Map<String, Object> parameters)", "original_string": "    public String rateLimitOrder(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, RATE_LIMIT, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Trade.java", "class_name": "Trade", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Trade.java.Trade", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nDisplays the user's current order count usage for all intervals.\n<br><br>\nGET /api/v3/rateLimit/order\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-current-order-count-usage-trade\">\n    https://binance-docs.github.io/apidocs/spot/en/#query-current-order-count-usage-trade</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Trade.java.Trade.[String]preventedMatches(Map<String, Object>)", "name": "preventedMatches", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String preventedMatches(Map<String, Object> parameters)", "original_string": "    public String preventedMatches(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, PREVENTED_MATCHES, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Trade.java", "class_name": "Trade", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Trade.java.Trade", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nDisplays the list of orders that were expired because of STP.\n\nThese are the combinations supported:\n\n* symbol + preventedMatchId\n* symbol + orderId\n* symbol + orderId + fromPreventedMatchId (limit will default to 500)\n* symbol + orderId + fromPreventedMatchId + limit\n\n<br><br>\nGET /api/v3/myPreventedMatches\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nsymbol -- mandatory/string <br>\npreventedMatchId -- optional/long <br>\norderId -- optional/long -- Order id <br>\nfromPreventedMatchId -- optional/long <br>\nlimit -- optional/int -- Default 500; max 1000. <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-prevented-matches-user_data\">\n     https://binance-docs.github.io/apidocs/spot/en/#query-prevented-matches-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Trade.java.Trade.[String]sorAllocations(Map<String, Object>)", "name": "sorAllocations", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String sorAllocations(Map<String, Object> parameters)", "original_string": "    public String sorAllocations(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, SOR_ALLOCATIONS, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Trade.java", "class_name": "Trade", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Trade.java.Trade", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nRetrieves allocations resulting from SOR order placement.\n\n\nSupported parameter combinations:\nParameters \t                          Response\nsymbol \t                              allocations from oldest to newest\nsymbol + startTime \t                  oldest allocations since startTime\nsymbol + endTime \t                    newest allocations until endTime\nsymbol + startTime + endTime \t        allocations within the time range\nsymbol + fromAllocationId \t          allocations by allocation ID\nsymbol + orderId \t                    allocations related to an order starting with oldest\nsymbol + orderId + fromAllocationId \tallocations related to an order by allocation ID\n\nNote: The time between startTime and endTime can't be longer than 24 hours.\n<br><br>\nGET /api/v3/myAllocations\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nsymbol -- mandatory/string -- Trading symbol, e.g. BNBUSDT <br>\nstartTime -- optional/long -- UTC timestamp in ms <br>\nendTime -- optional/long -- UTC timestamp in ms <br>\nfromAllocationId -- optional/int <br>\nlimit -- optional/int -- Default 500; max 1000. <br>\norderId -- optional/long -- Order id <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-allocations-user_data\">\n     https://binance-docs.github.io/apidocs/spot/en/#query-allocations-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Trade.java.Trade.[String]commission(Map<String, Object>)", "name": "commission", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String commission(Map<String, Object> parameters)", "original_string": "    public String commission(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, COMMISSION, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Trade.java", "class_name": "Trade", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Trade.java.Trade", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGet current account commission rates.\n<br><br>\nGET /api/v3/account/commission\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nsymbol -- mandatory/string <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-commission-rates-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#query-commission-rates-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Trade.java.Trade.[String]sorOrder(Map<String, Object>)", "name": "sorOrder", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String sorOrder(Map<String, Object> parameters)", "original_string": "    public String sorOrder(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        ParameterChecker.checkParameter(parameters, \"side\", String.class);\n        ParameterChecker.checkParameter(parameters, \"type\", String.class);\n        ParameterChecker.checkRequiredParameter(parameters, \"quantity\");\n        return requestHandler.sendSignedRequest(baseUrl, SOR_ORDER, parameters, HttpMethod.POST, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Trade.java", "class_name": "Trade", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Trade.java.Trade", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nPlaces an order using smart order routing (SOR).\n\n<br><br>\nPOST /api/v3/sor/order\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nsymbol -- mandatory/string -- Trading symbol, e.g. BNBUSDT <br>\nside -- mandatory/enum <br>\ntype -- mandatory/enum -- only supports LIMIT and MARKET orders <br>\ntimeInForce -- optional/enum -- Order time in force <br>\nquantity -- mandatory/decimal <br>\nprice -- optional/decimal <br>\nnewClientOrderId -- optional/string -- Used to uniquely identify this cancel. Automatically generated by default <br>\nstrategyId -- optional/int <br>\nstrategyType -- optional/int -- The value cannot be less than 1000000. <br>\nicebergQty -- optional/decimal -- Used with LIMIT to create an iceberg order. <br>\nnewOrderRespType -- optional/enum -- Set the response JSON. MARKET and LIMIT order types default to FULL, all other orders default to ACK. <br>\nselfTradePreventionMode -- optional/enum -- The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER, EXPIRE_MAKER, EXPIRE_BOTH, NONE. <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#new-order-using-sor-trade\">\n     https://binance-docs.github.io/apidocs/spot/en/#new-order-using-sor-trade</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Trade.java.Trade.[String]testSorOrder(Map<String, Object>)", "name": "testSorOrder", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String testSorOrder(Map<String, Object> parameters)", "original_string": "    public String testSorOrder(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        ParameterChecker.checkParameter(parameters, \"side\", String.class);\n        ParameterChecker.checkParameter(parameters, \"type\", String.class);\n        ParameterChecker.checkRequiredParameter(parameters, \"quantity\");\n        return requestHandler.sendSignedRequest(baseUrl, TEST_SOR_ORDER, parameters, HttpMethod.POST, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Trade.java", "class_name": "Trade", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Trade.java.Trade", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nTest new order creation and signature/recvWindow using smart order routing (SOR).\nCreates and validates a new order but does not send it into the matching engine.\n<br><br>\nPOST /api/v3/sor/order/test\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nIn addition to all parameters accepted by POST /api/v3/sor/order, the following optional parameters are also accepted: <br>\ncomputeCommissionRates -- optional/boolean -- Default: false <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#test-new-order-using-sor-trade\">\n     https://binance-docs.github.io/apidocs/spot/en/#test-new-order-using-sor-trade</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/SpotAlgo.java.SpotAlgo.[]SpotAlgo(String,String,String,boolean,ProxyAuth)", "name": "SpotAlgo", "arg_nums": 5, "params": [{"name": "baseUrl", "type": "String"}, {"name": "apiKey", "type": "String"}, {"name": "secretKey", "type": "String"}, {"name": "showLimitUsage", "type": "boolean"}, {"name": "proxy", "type": "ProxyAuth"}], "return_type": "", "signature": "public SpotAlgo(String baseUrl, String apiKey, String secretKey, boolean showLimitUsage, ProxyAuth proxy)", "original_string": "    public SpotAlgo(String baseUrl, String apiKey, String secretKey, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, new HmacSignatureGenerator(secretKey), proxy);\n        this.showLimitUsage = showLimitUsage;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/SpotAlgo.java", "class_name": "SpotAlgo", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/SpotAlgo.java.SpotAlgo", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/SpotAlgo.java.SpotAlgo.[]SpotAlgo(String,String,SignatureGenerator,boolean,ProxyAuth)", "name": "SpotAlgo", "arg_nums": 5, "params": [{"name": "baseUrl", "type": "String"}, {"name": "apiKey", "type": "String"}, {"name": "signatureGenerator", "type": "SignatureGenerator"}, {"name": "showLimitUsage", "type": "boolean"}, {"name": "proxy", "type": "ProxyAuth"}], "return_type": "", "signature": "public SpotAlgo(String baseUrl, String apiKey, SignatureGenerator signatureGenerator, boolean showLimitUsage, ProxyAuth proxy)", "original_string": "    public SpotAlgo(String baseUrl, String apiKey, SignatureGenerator signatureGenerator, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, signatureGenerator, proxy);\n        this.showLimitUsage = showLimitUsage;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/SpotAlgo.java", "class_name": "SpotAlgo", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/SpotAlgo.java.SpotAlgo", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/SpotAlgo.java.SpotAlgo.[String]twapOrder(Map<String, Object>)", "name": "twapOrder", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String twapOrder(Map<String, Object> parameters)", "original_string": "    public String twapOrder(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        ParameterChecker.checkParameter(parameters, \"side\", String.class);\n        ParameterChecker.checkRequiredParameter(parameters, \"quantity\");\n        ParameterChecker.checkParameter(parameters, \"duration\", Long.class);\n        return requestHandler.sendSignedRequest(baseUrl, TWAP_ORDER, parameters, HttpMethod.POST, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/SpotAlgo.java", "class_name": "SpotAlgo", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/SpotAlgo.java.SpotAlgo", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nPlace a new spot TWAP order with Algo service.\n\n<br><br>\nPOST /sapi/v1/algo/spot/newOrderTwap\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nsymbol -- mandatory/string -- Trading symbol, e.g. BNBUSDT <br>\nside -- mandatory/enum <br>\nquantity -- mandatory/decimal -- Quantity of base asset; The notional (quantity * last price(base asset)) must be more than the equivalent of 1,000 USDT and less than the equivalent of 100,000 USDT. <br>\nduration -- mandatory/long -- Duration for TWAP orders in seconds. [300, 86400]<br>\nclientAlgoId -- optional/string -- A unique id among Algo orders (length should be 32 characters)\uff0c If it is not sent, we will give default value. <br>\nlimitPrice -- optional/decimal -- Limit price of the order; If it is not sent, will place order by market price by default. <br>\nstpMode -- optional/enum -- The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER, EXPIRE_MAKER, EXPIRE_BOTH, NONE\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#time-weighted-average-price-twap-new-order-trade-2\">\n     https://binance-docs.github.io/apidocs/spot/en/#time-weighted-average-price-twap-new-order-trade-2</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/SpotAlgo.java.SpotAlgo.[String]cancelOrder(Map<String, Object>)", "name": "cancelOrder", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String cancelOrder(Map<String, Object> parameters)", "original_string": "    public String cancelOrder(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"algoId\", Long.class);\n        return requestHandler.sendPublicRequest(baseUrl, CANCEL_ORDER, parameters, HttpMethod.DELETE, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/SpotAlgo.java", "class_name": "SpotAlgo", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/SpotAlgo.java.SpotAlgo", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nCancel an open TWAP order\n\n<br><br>\nDELETE /sapi/v1/algo/spot/order\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nalgoId -- mandatory/long <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#cancel-algo-order-trade-2\">\n     https://binance-docs.github.io/apidocs/spot/en/#cancel-algo-order-trade-2</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/SpotAlgo.java.SpotAlgo.[String]getOpenOrders(Map<String, Object>)", "name": "getOpenOrders", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String getOpenOrders(Map<String, Object> parameters)", "original_string": "    public String getOpenOrders(Map<String, Object> parameters) {\n        return requestHandler.sendPublicRequest(baseUrl, OPEN_ORDERS, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/SpotAlgo.java", "class_name": "SpotAlgo", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/SpotAlgo.java.SpotAlgo", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGet all open SPOT TWAP orders\n\n<br><br>\nGET /sapi/v1/algo/spot/openOrders\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-current-algo-open-orders-user_data-2\">\n     https://binance-docs.github.io/apidocs/spot/en/#query-current-algo-open-orders-user_data-2</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/SpotAlgo.java.SpotAlgo.[String]getHistoricalOrders(Map<String, Object>)", "name": "getHistoricalOrders", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String getHistoricalOrders(Map<String, Object> parameters)", "original_string": "    public String getHistoricalOrders(Map<String, Object> parameters) {\n        return requestHandler.sendPublicRequest(baseUrl, HISTORICAL_ORDERS, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/SpotAlgo.java", "class_name": "SpotAlgo", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/SpotAlgo.java.SpotAlgo", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGet all historical SPOT TWAP orders\n\n<br><br>\nGET /sapi/v1/algo/spot/historicalOrders\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nsymbol -- optional/string -- Trading symbol, e.g. BNBUSDT <br>\nside -- optional/enum <br>\nstartTime -- optional/long -- UTC timestamp in ms <br>\nendTime -- optional/long -- UTC timestamp in ms <br>\npage -- optional/int -- Default 1 <br>\npageSize -- optional/int -- MIN 1, MAX 100; Default 100 <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-historical-algo-orders-user_data-2\">\n     https://binance-docs.github.io/apidocs/spot/en/#query-historical-algo-orders-user_data-2</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/SpotAlgo.java.SpotAlgo.[String]getSubOrders(Map<String, Object>)", "name": "getSubOrders", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String getSubOrders(Map<String, Object> parameters)", "original_string": "    public String getSubOrders(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"algoId\", Long.class);\n        return requestHandler.sendPublicRequest(baseUrl, SUB_ORDERS, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/SpotAlgo.java", "class_name": "SpotAlgo", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/SpotAlgo.java.SpotAlgo", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGet respective sub orders for a specified algoId\n\n<br><br>\nGET /sapi/v1/algo/spot/subOrders\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nalgoId -- mandatory/long <br>\npage -- optional/int -- Default 1 <br>\npageSize -- optional/int -- MIN 1, MAX 100; Default 100 <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-sub-orders-user_data-2\">\n     https://binance-docs.github.io/apidocs/spot/en/#query-sub-orders-user_data-2</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Mining.java.Mining.[]Mining(String,String,String,boolean,ProxyAuth)", "name": "Mining", "arg_nums": 5, "params": [{"name": "baseUrl", "type": "String"}, {"name": "apiKey", "type": "String"}, {"name": "secretKey", "type": "String"}, {"name": "showLimitUsage", "type": "boolean"}, {"name": "proxy", "type": "ProxyAuth"}], "return_type": "", "signature": "public Mining(String baseUrl, String apiKey, String secretKey, boolean showLimitUsage, ProxyAuth proxy)", "original_string": "    public Mining(String baseUrl, String apiKey, String secretKey, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, new HmacSignatureGenerator(secretKey), proxy);\n        this.showLimitUsage = showLimitUsage;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Mining.java", "class_name": "Mining", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Mining.java.Mining", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Mining.java.Mining.[]Mining(String,String,SignatureGenerator,boolean,ProxyAuth)", "name": "Mining", "arg_nums": 5, "params": [{"name": "baseUrl", "type": "String"}, {"name": "apiKey", "type": "String"}, {"name": "signatureGenerator", "type": "SignatureGenerator"}, {"name": "showLimitUsage", "type": "boolean"}, {"name": "proxy", "type": "ProxyAuth"}], "return_type": "", "signature": "public Mining(String baseUrl, String apiKey, SignatureGenerator signatureGenerator, boolean showLimitUsage, ProxyAuth proxy)", "original_string": "    public Mining(String baseUrl, String apiKey, SignatureGenerator signatureGenerator, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, signatureGenerator, proxy);\n        this.showLimitUsage = showLimitUsage;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Mining.java", "class_name": "Mining", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Mining.java.Mining", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Mining.java.Mining.[String]algorithm(Map<String, Object>)", "name": "algorithm", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String algorithm(Map<String, Object> parameters)", "original_string": "    public String algorithm(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, ALGO, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Mining.java", "class_name": "Mining", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Mining.java.Mining", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/mining/pub/algoList\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#acquiring-algorithm-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#acquiring-algorithm-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Mining.java.Mining.[String]coinName(Map<String, Object>)", "name": "coinName", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String coinName(Map<String, Object> parameters)", "original_string": "    public String coinName(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, COIN_NAME, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Mining.java", "class_name": "Mining", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Mining.java.Mining", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/mining/pub/coinList\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#acquiring-coinname-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#acquiring-coinname-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Mining.java.Mining.[String]detailMinerList(Map<String, Object>)", "name": "detailMinerList", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String detailMinerList(Map<String, Object> parameters)", "original_string": "    public String detailMinerList(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"algo\", String.class);\n        ParameterChecker.checkParameter(parameters, \"userName\", String.class);\n        ParameterChecker.checkParameter(parameters, \"workerName\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, DETAIL_MINER_LIST, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Mining.java", "class_name": "Mining", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Mining.java.Mining", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/mining/worker/detail\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nalgo -- mandatory/string -- sha256 <br>\nuserName -- mandatory/string -- Mining account <br>\nworkerName -- mandatory/string -- Miner's name(required) <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#request-for-detail-miner-list-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#request-for-detail-miner-list-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Mining.java.Mining.[String]minerList(Map<String, Object>)", "name": "minerList", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String minerList(Map<String, Object> parameters)", "original_string": "    public String minerList(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"algo\", String.class);\n        ParameterChecker.checkParameter(parameters, \"userName\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, MINER_LIST, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Mining.java", "class_name": "Mining", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Mining.java.Mining", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/mining/worker/list\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nalgo -- mandatory/string -- sha256 <br>\nuserName -- mandatory/string -- Mining account <br>\npageIndex -- optional/int -- Page number,default is first page,start form 1 <br>\nsort -- optional/int -- sort sequence(default=0)0 positive sequence, 1 negative sequence <br>\nsortColumn -- optional/int -- Sort by( default 1):\n1: miner name,\n2: real-time computing power,\n3: daily average computing power,\n4: real-time rejection rate,\n5: last submission time <br>\nworkerStatus -- optional/int -- miners status(default=0)0 all,1 valid,2 invalid,3 failure <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#request-for-miner-list-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#request-for-miner-list-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Mining.java.Mining.[String]earningList(Map<String, Object>)", "name": "earningList", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String earningList(Map<String, Object> parameters)", "original_string": "    public String earningList(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"algo\", String.class);\n        ParameterChecker.checkParameter(parameters, \"userName\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, EARNING_LIST, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Mining.java", "class_name": "Mining", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Mining.java.Mining", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/mining/payment/list\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nalgo -- mandatory/string -- sha256 <br>\nuserName -- mandatory/string -- Mining account <br>\ncoin -- optional/string <br>\nstartDate -- optional/long -- Search date, millisecond timestamp, while empty query all\t <br>\nendDate -- optional/long -- Search date, millisecond timestamp, while empty query all <br>\npageIndex -- optional/int -- Page number, empty default first page, starting from 1 <br>\npageSize -- optional/int -- \tNumber of pages, minimum 10, maximum 200 <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#earnings-list-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#earnings-list-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Mining.java.Mining.[String]bonusList(Map<String, Object>)", "name": "bonusList", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String bonusList(Map<String, Object> parameters)", "original_string": "    public String bonusList(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"algo\", String.class);\n        ParameterChecker.checkParameter(parameters, \"userName\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, BONUS_LIST, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Mining.java", "class_name": "Mining", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Mining.java.Mining", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/mining/payment/other\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nalgo -- mandatory/string -- sha256 <br>\nuserName -- mandatory/string -- Mining account <br>\ncoin -- optional/string <br>\nstartDate -- optional/long -- Search date, millisecond timestamp, while empty query all\t <br>\nendDate -- optional/long -- Search date, millisecond timestamp, while empty query all <br>\npageIndex -- optional/int -- Page number, empty default first page, starting from 1 <br>\npageSize -- optional/int -- \tNumber of pages, minimum 10, maximum 200 <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#extra-bonus-list-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#extra-bonus-list-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Mining.java.Mining.[String]hashrateResaleList(Map<String, Object>)", "name": "hashrateResaleList", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String hashrateResaleList(Map<String, Object> parameters)", "original_string": "    public String hashrateResaleList(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, HASHRATE_RESALE_LIST, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Mining.java", "class_name": "Mining", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Mining.java.Mining", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/mining/hash-transfer/config/details/list\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\npageIndex -- optional/int -- Page number, empty default first page, starting from 1 <br>\npageSize -- optional/int -- \tNumber of pages, minimum 10, maximum 200 <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#hashrate-resale-list-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#hashrate-resale-list-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Mining.java.Mining.[String]hashrateResaleDetail(Map<String, Object>)", "name": "hashrateResaleDetail", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String hashrateResaleDetail(Map<String, Object> parameters)", "original_string": "    public String hashrateResaleDetail(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"configId\", Integer.class);\n        ParameterChecker.checkParameter(parameters, \"userName\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, HASHRATE_RESALE_DETAIL, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Mining.java", "class_name": "Mining", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Mining.java.Mining", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/mining/hash-transfer/profit/details\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nconfigId -- mandatory/int -- Mining ID <br>\nuserName -- mandatory/string -- Mining Account <br>\npageIndex -- optional/int -- Page number, empty default first page, starting from 1 <br>\npageSize -- optional/int -- \tNumber of pages, minimum 10, maximum 200 <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#hashrate-resale-detail-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#hashrate-resale-detail-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Mining.java.Mining.[String]hashrateResaleRequest(Map<String, Object>)", "name": "hashrateResaleRequest", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String hashrateResaleRequest(Map<String, Object> parameters)", "original_string": "    public String hashrateResaleRequest(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"userName\", String.class);\n        ParameterChecker.checkParameter(parameters, \"algo\", String.class);\n        ParameterChecker.checkParameter(parameters, \"endDate\", Long.class);\n        ParameterChecker.checkParameter(parameters, \"startDate\", Long.class);\n        ParameterChecker.checkParameter(parameters, \"toPoolUser\", String.class);\n        ParameterChecker.checkParameter(parameters, \"hashRate\", Long.class);\n        return requestHandler.sendSignedRequest(baseUrl, HASHRATE_RESALE_REQUEST, parameters, HttpMethod.POST, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Mining.java", "class_name": "Mining", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Mining.java.Mining", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/mining/hash-transfer/config\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nuserName -- mandatory/string -- Mining Account <br>\nalgo -- mandatory/string -- Transfer algorithm(sha256) <br>\nendDate -- mandatory/long -- Resale End Time (Millisecond timestamp) <br>\nstartDate -- mandatory/long -- Resale Start Time(Millisecond timestamp) <br>\ntoPoolUser -- mandatory/string -- Mining Account <br>\nhashRate -- mandatory/long -- Resale hashrate h/s must be transferred (BTC is greater than 500000000000 ETH is greater than 500000) <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#hashrate-resale-request-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#hashrate-resale-request-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Mining.java.Mining.[String]cancelHashrateResaleConfig(Map<String, Object>)", "name": "cancelHashrateResaleConfig", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String cancelHashrateResaleConfig(Map<String, Object> parameters)", "original_string": "    public String cancelHashrateResaleConfig(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"configId\", Integer.class);\n        ParameterChecker.checkParameter(parameters, \"userName\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, CANCEL_HASHRATE_RESALE_CONFIG, parameters, HttpMethod.POST, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Mining.java", "class_name": "Mining", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Mining.java.Mining", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/mining/hash-transfer/config/cancel\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nconfigId -- mandatory/int -- Mining ID <br>\nuserName -- mandatory/string -- Mining Account <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#cancel-hashrate-resale-configuration-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#cancel-hashrate-resale-configuration-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Mining.java.Mining.[String]statsticsList(Map<String, Object>)", "name": "statsticsList", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String statsticsList(Map<String, Object> parameters)", "original_string": "    public String statsticsList(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"algo\", String.class);\n        ParameterChecker.checkParameter(parameters, \"userName\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, STATSTICS_LIST, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Mining.java", "class_name": "Mining", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Mining.java.Mining", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/mining/statistics/user/status\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nalgo -- mandatory/string -- Algorithm(sha256) <br>\nuserName -- mandatory/string -- Mining Account <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#statistic-list-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#statistic-list-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Mining.java.Mining.[String]accountList(Map<String, Object>)", "name": "accountList", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String accountList(Map<String, Object> parameters)", "original_string": "    public String accountList(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"algo\", String.class);\n        ParameterChecker.checkParameter(parameters, \"userName\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, ACCOUNT_LIST, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Mining.java", "class_name": "Mining", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Mining.java.Mining", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/mining/statistics/user/list\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nalgo -- mandatory/string -- Algorithm(sha256) <br>\nuserName -- mandatory/string -- Mining Account <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#account-list-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#account-list-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Mining.java.Mining.[String]accountEarning(Map<String, Object>)", "name": "accountEarning", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String accountEarning(Map<String, Object> parameters)", "original_string": "    public String accountEarning(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"algo\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, ACCOUNT_EARNING, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Mining.java", "class_name": "Mining", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Mining.java.Mining", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/mining/payment/uid\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nalgo -- mandatory/string -- Algorithm(sha256) <br>\nstartDate -- optional/long -- Millisecond timestamp <br>\nendDate -- optional/long -- Millisecond timestamp <br>\npageIndex -- optional/int -- Default 1 <br>\npageSize -- optional/int -- \tMin 10,Max 200 <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#mining-account-earning-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#mining-account-earning-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/PortfolioMargin.java.PortfolioMargin.[]PortfolioMargin(String,String,String,boolean,ProxyAuth)", "name": "PortfolioMargin", "arg_nums": 5, "params": [{"name": "baseUrl", "type": "String"}, {"name": "apiKey", "type": "String"}, {"name": "secretKey", "type": "String"}, {"name": "showLimitUsage", "type": "boolean"}, {"name": "proxy", "type": "ProxyAuth"}], "return_type": "", "signature": "public PortfolioMargin(String baseUrl, String apiKey, String secretKey, boolean showLimitUsage, ProxyAuth proxy)", "original_string": "    public PortfolioMargin(String baseUrl, String apiKey, String secretKey, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, new HmacSignatureGenerator(secretKey), proxy);\n        this.showLimitUsage = showLimitUsage;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/PortfolioMargin.java", "class_name": "PortfolioMargin", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/PortfolioMargin.java.PortfolioMargin", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/PortfolioMargin.java.PortfolioMargin.[]PortfolioMargin(String,String,SignatureGenerator,boolean,ProxyAuth)", "name": "PortfolioMargin", "arg_nums": 5, "params": [{"name": "baseUrl", "type": "String"}, {"name": "apiKey", "type": "String"}, {"name": "signatureGenerator", "type": "SignatureGenerator"}, {"name": "showLimitUsage", "type": "boolean"}, {"name": "proxy", "type": "ProxyAuth"}], "return_type": "", "signature": "public PortfolioMargin(String baseUrl, String apiKey, SignatureGenerator signatureGenerator, boolean showLimitUsage, ProxyAuth proxy)", "original_string": "    public PortfolioMargin(String baseUrl, String apiKey, SignatureGenerator signatureGenerator, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, signatureGenerator, proxy);\n        this.showLimitUsage = showLimitUsage;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/PortfolioMargin.java", "class_name": "PortfolioMargin", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/PortfolioMargin.java.PortfolioMargin", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/PortfolioMargin.java.PortfolioMargin.[String]getAccount(Map<String, Object>)", "name": "getAccount", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String getAccount(Map<String, Object> parameters)", "original_string": "    public String getAccount(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, ACCOUNT, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/PortfolioMargin.java", "class_name": "PortfolioMargin", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/PortfolioMargin.java.PortfolioMargin", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/portfolio/account\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-classic-portfolio-margin-account-info-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#get-classic-portfolio-margin-account-info-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/PortfolioMargin.java.PortfolioMargin.[String]collateralRate(Map<String, Object>)", "name": "collateralRate", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String collateralRate(Map<String, Object> parameters)", "original_string": "    public String collateralRate(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, COLLATERAL_RATE, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/PortfolioMargin.java", "class_name": "PortfolioMargin", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/PortfolioMargin.java.PortfolioMargin", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nPortfolio Margin Collateral Rate\n<br><br>\nGET /sapi/v1/portfolio/collateralRate\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#classic-portfolio-margin-collateral-rate-market_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#classic-portfolio-margin-collateral-rate-market_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/PortfolioMargin.java.PortfolioMargin.[String]bankruptcyLoanRecord(Map<String, Object>)", "name": "bankruptcyLoanRecord", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String bankruptcyLoanRecord(Map<String, Object> parameters)", "original_string": "    public String bankruptcyLoanRecord(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, PM_LOAN, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/PortfolioMargin.java", "class_name": "PortfolioMargin", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/PortfolioMargin.java.PortfolioMargin", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nQuery Portfolio Margin Bankruptcy Loan Record\n<br><br>\nGET /sapi/v1/portfolio/pmLoan\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-classic-portfolio-margin-bankruptcy-loan-amount-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#query-classic-portfolio-margin-bankruptcy-loan-amount-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/PortfolioMargin.java.PortfolioMargin.[String]repay(Map<String, Object>)", "name": "repay", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String repay(Map<String, Object> parameters)", "original_string": "    public String repay(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, REPAY, parameters, HttpMethod.POST, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/PortfolioMargin.java", "class_name": "PortfolioMargin", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/PortfolioMargin.java.PortfolioMargin", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nRepay Portfolio Margin Bankruptcy Loan\n<br><br>\nPOST /sapi/v1/portfolio/repay\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nfrom -- optional/string -- SPOT or MARGIN\uff0cdefault SPOT<br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#classic-portfolio-margin-bankruptcy-loan-repay\">\n    https://binance-docs.github.io/apidocs/spot/en/#classic-portfolio-margin-bankruptcy-loan-repay</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/PortfolioMargin.java.PortfolioMargin.[String]interestHistory(Map<String, Object>)", "name": "interestHistory", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String interestHistory(Map<String, Object> parameters)", "original_string": "    public String interestHistory(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, INTEREST_HISTORY, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/PortfolioMargin.java", "class_name": "PortfolioMargin", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/PortfolioMargin.java.PortfolioMargin", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nQuery interest history of negative balance for portfolio margin.\n\n<br><br>\nGET /sapi/v1/portfolio/interest-history\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nasset -- optional/string <br>\nstartTime -- optional/long -- UTC timestamp in ms <br>\nendTime -- optional/long -- UTC timestamp in ms <br>\nsize -- optional/integer -- Default:10 Max:100 <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-classic-portfolio-margin-negative-balance-interest-history-user_data\">\n     https://binance-docs.github.io/apidocs/spot/en/#query-classic-portfolio-margin-negative-balance-interest-history-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/PortfolioMargin.java.PortfolioMargin.[String]assetIndexPrice(Map<String, Object>)", "name": "assetIndexPrice", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String assetIndexPrice(Map<String, Object> parameters)", "original_string": "    public String assetIndexPrice(Map<String, Object> parameters) {\n        return requestHandler.sendApiRequest(baseUrl, ASSET_INDEX_PRICE, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/PortfolioMargin.java", "class_name": "PortfolioMargin", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/PortfolioMargin.java.PortfolioMargin", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nQuery Portfolio Margin Asset Index Price\n\n<br><br>\nGET /sapi/v1/portfolio/asset-index-price\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nasset -- optional/string <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-portfolio-margin-asset-index-price-market_data\">\n     https://binance-docs.github.io/apidocs/spot/en/#query-portfolio-margin-asset-index-price-market_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/PortfolioMargin.java.PortfolioMargin.[String]autoCollection(Map<String, Object>)", "name": "autoCollection", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String autoCollection(Map<String, Object> parameters)", "original_string": "    public String autoCollection(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, AUTO_COLLECTION, parameters, HttpMethod.POST, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/PortfolioMargin.java", "class_name": "PortfolioMargin", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/PortfolioMargin.java.PortfolioMargin", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nTransfers all assets from Futures Account to Margin account\n\n- The BNB would not be collected from UM-PM account to the Portfolio Margin account.\n- You can only use this function 500 times per hour in a rolling manner.\n<br><br>\nPOST /sapi/v1/portfolio/auto-collection\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#fund-auto-collection-user_data\">\n     https://binance-docs.github.io/apidocs/spot/en/#fund-auto-collection-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/PortfolioMargin.java.PortfolioMargin.[String]assetCollection(Map<String, Object>)", "name": "assetCollection", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String assetCollection(Map<String, Object> parameters)", "original_string": "    public String assetCollection(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"asset\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, ASSET_COLLECTION, parameters, HttpMethod.POST, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/PortfolioMargin.java", "class_name": "PortfolioMargin", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/PortfolioMargin.java.PortfolioMargin", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nTransfers specific asset from Futures Account to Margin account\n\n<br><br>\nPOST /sapi/v1/portfolio/asset-collection\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nasset -- mandatory/string <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#fund-collection-by-asset-user_data\">\n     https://binance-docs.github.io/apidocs/spot/en/#fund-collection-by-asset-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/PortfolioMargin.java.PortfolioMargin.[String]bnbTransfer(Map<String, Object>)", "name": "bnbTransfer", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String bnbTransfer(Map<String, Object> parameters)", "original_string": "    public String bnbTransfer(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"transferSide\", String.class);\n        ParameterChecker.checkRequiredParameter(parameters, \"amount\");\n        return requestHandler.sendSignedRequest(baseUrl, BNB_TRANSFER, parameters, HttpMethod.POST, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/PortfolioMargin.java", "class_name": "PortfolioMargin", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/PortfolioMargin.java.PortfolioMargin", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nBNB transfer can be between Margin Account and USDM Account\n\n<br><br>\nPOST /sapi/v1/portfolio/bnb-transfer\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\ntransferSide -- mandatory/string -- \"TO_UM\",\"FROM_UM\" <br>\namount -- mandatory/decimal <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#bnb-transfer-user_data\">\n     https://binance-docs.github.io/apidocs/spot/en/#bnb-transfer-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/PortfolioMargin.java.PortfolioMargin.[String]switchAutoRepayFutures(Map<String, Object>)", "name": "switchAutoRepayFutures", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String switchAutoRepayFutures(Map<String, Object> parameters)", "original_string": "    public String switchAutoRepayFutures(Map<String, Object> parameters) {\n        ParameterChecker.checkRequiredParameter(parameters, \"autoRepay\");\n        return requestHandler.sendSignedRequest(baseUrl, SWITCH_AUTO_REPAY_FUTURES, parameters, HttpMethod.POST, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/PortfolioMargin.java", "class_name": "PortfolioMargin", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/PortfolioMargin.java.PortfolioMargin", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nChange Auto-repay-futures Status\n\n<br><br>\nPOST /sapi/v1/portfolio/repay-futures-switch\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nautoRepay -- mandatory/boolean <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#change-auto-repay-futures-status-trade\">\n     https://binance-docs.github.io/apidocs/spot/en/#change-auto-repay-futures-status-trade</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/PortfolioMargin.java.PortfolioMargin.[String]autoRepayFuturesStatus(Map<String, Object>)", "name": "autoRepayFuturesStatus", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String autoRepayFuturesStatus(Map<String, Object> parameters)", "original_string": "    public String autoRepayFuturesStatus(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, AUTO_REPAY_FUTURES_STATUS, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/PortfolioMargin.java", "class_name": "PortfolioMargin", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/PortfolioMargin.java.PortfolioMargin", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nQuery Auto-repay-futures Status\n\n<br><br>\nGET /sapi/v1/portfolio/repay-futures-switch\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-auto-repay-futures-status-user_data\">\n     https://binance-docs.github.io/apidocs/spot/en/#get-auto-repay-futures-status-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/PortfolioMargin.java.PortfolioMargin.[String]repayFutures(Map<String, Object>)", "name": "repayFutures", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String repayFutures(Map<String, Object> parameters)", "original_string": "    public String repayFutures(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, REPAY_FUTURES, parameters, HttpMethod.POST, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/PortfolioMargin.java", "class_name": "PortfolioMargin", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/PortfolioMargin.java.PortfolioMargin", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nRepay futures Negative Balance\n\n<br><br>\nPOST /sapi/v1/portfolio/repay-futures-negative-balance\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#repay-futures-negative-balance-user_data\">\n     https://binance-docs.github.io/apidocs/spot/en/#repay-futures-negative-balance-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/PortfolioMargin.java.PortfolioMargin.[String]assetLeverage()", "name": "assetLeverage", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String assetLeverage()", "original_string": "    public String assetLeverage() {\n        return requestHandler.sendSignedRequest(baseUrl, ASSET_LEVERAGE, null, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/PortfolioMargin.java", "class_name": "PortfolioMargin", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/PortfolioMargin.java.PortfolioMargin", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/portfolio/margin-asset-leverage\n<br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-portfolio-margin-asset-leverage-user_data\">\n     https://binance-docs.github.io/apidocs/spot/en/#get-portfolio-margin-asset-leverage-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Market.java.Market.[]Market(String,String,boolean,ProxyAuth)", "name": "Market", "arg_nums": 4, "params": [{"name": "baseUrl", "type": "String"}, {"name": "apiKey", "type": "String"}, {"name": "showLimitUsage", "type": "boolean"}, {"name": "proxy", "type": "ProxyAuth"}], "return_type": "", "signature": "public Market(String baseUrl, String apiKey, boolean showLimitUsage, ProxyAuth proxy)", "original_string": "    public Market(String baseUrl, String apiKey, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, proxy);\n        this.showLimitUsage = showLimitUsage;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Market.java", "class_name": "Market", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Market.java.Market", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Market.java.Market.[String]ping()", "name": "ping", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String ping()", "original_string": "    public String ping() {\n        return requestHandler.sendPublicRequest(baseUrl, PING, null, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Market.java", "class_name": "Market", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Market.java.Market", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nTest connectivity to the Rest API.\n<br><br>\nGET /api/v3/ping\n<br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#test-connectivity\">\n    https://binance-docs.github.io/apidocs/spot/en/#test-connectivity</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Market.java.Market.[String]time()", "name": "time", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String time()", "original_string": "    public String time() {\n        return requestHandler.sendPublicRequest(baseUrl, TIME, null, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Market.java", "class_name": "Market", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Market.java.Market", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nTest connectivity to the Rest API and get the current server time.\n<br><br>\nGET /api/v3/time\n<br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#test-connectivity\">\n    https://binance-docs.github.io/apidocs/spot/en/#check-server-time</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Market.java.Market.[String]exchangeInfo(Map<String, Object>)", "name": "exchangeInfo", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String exchangeInfo(Map<String, Object> parameters)", "original_string": "    public String exchangeInfo(Map<String, Object> parameters) {\n        if (parameters.containsKey(\"symbol\") && parameters.containsKey(\"symbols\")) {\n            throw new BinanceConnectorException(\"symbol and symbols cannot be sent together.\");\n        }\n        if ((parameters.containsKey(\"symbol\") && parameters.containsKey(\"permissions\"))\n             || parameters.containsKey(\"symbols\") && parameters.containsKey(\"permissions\")) {\n            throw new BinanceConnectorException(\"permissions cannot be sent together with symbol or symbols.\");\n        }\n        if (parameters.containsKey(\"symbols\")) {\n            ParameterChecker.checkParameterType(parameters.get(\"symbols\"), ArrayList.class, \"symbols\");\n            parameters.put(\"symbols\", JSONParser.getJSONArray(\n                                    (ArrayList<?>) parameters.get(\"symbols\"), \"symbols\"));\n        }\n        if (parameters.containsKey(\"permissions\")) {\n            ParameterChecker.checkParameterType(parameters.get(\"permissions\"), ArrayList.class, \"permissions\");\n            parameters.put(\"permissions\", JSONParser.getJSONArray(\n                                    (ArrayList<?>) parameters.get(\"permissions\"), \"permissions\"));\n        }\n        return requestHandler.sendPublicRequest(baseUrl, EXCHANGE_INFO, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Market.java", "class_name": "Market", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Market.java.Market", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nCurrent exchange trading rules and symbol information.\n<br><br>\nGET /api/v3/exchangeinfo\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nsymbol -- optional/string <br>\nsymbols -- optional/ArrayList <br>\npermissions -- optional/ArrayList -- support single or multiple values (e.g. \"SPOT\", [\"MARGIN\",\"LEVERAGED\"]) <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#exchange-information\">\n    https://binance-docs.github.io/apidocs/spot/en/#exchange-information</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Market.java.Market.[String]depth(Map<String, Object>)", "name": "depth", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String depth(Map<String, Object> parameters)", "original_string": "    public String depth(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        return requestHandler.sendPublicRequest(baseUrl, DEPTH, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Market.java", "class_name": "Market", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Market.java.Market", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /api/v3/depth\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nsymbol -- mandatory/string <br>\nlimit -- optional/integer -- limit the results\n           Default 100; max 5000. Valid limits:[5, 10, 20, 50, 100, 500, 1000, 5000] <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#order-book\">\n    https://binance-docs.github.io/apidocs/spot/en/#order-book</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Market.java.Market.[String]trades(Map<String, Object>)", "name": "trades", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String trades(Map<String, Object> parameters)", "original_string": "    public String trades(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        return requestHandler.sendPublicRequest(baseUrl, TRADES, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Market.java", "class_name": "Market", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Market.java.Market", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGet recent trades.\n<br><br>\nGET /api/v3/trades\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nsymbol -- mandatory/string <br>\nlimit -- optional/integer -- limit the results Default 500; max 1000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#recent-trades-list\">\n    https://binance-docs.github.io/apidocs/spot/en/#recent-trades-list</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Market.java.Market.[String]historicalTrades(Map<String, Object>)", "name": "historicalTrades", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String historicalTrades(Map<String, Object> parameters)", "original_string": "    public String historicalTrades(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        return requestHandler.sendApiRequest(baseUrl, HISTORICAL_TRADES, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Market.java", "class_name": "Market", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Market.java.Market", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGet older market trades.\n<br><br>\nGET /api/v3/historicalTrades\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nsymbol -- mandatory/string <br>\nlimit -- optional/integer -- limit the result Default 500; max 1000 <br>\nfromId -- optional/long -- trade id to fetch from. Default gets most recent trades <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#old-trade-lookup\">\n    https://binance-docs.github.io/apidocs/spot/en/#old-trade-lookup</a>\n\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Market.java.Market.[String]aggTrades(Map<String, Object>)", "name": "aggTrades", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String aggTrades(Map<String, Object> parameters)", "original_string": "    public String aggTrades(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        return requestHandler.sendPublicRequest(baseUrl, AGG_TRADES, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Market.java", "class_name": "Market", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Market.java.Market", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGet compressed, aggregate trades. Trades that fill at the time, from the same order,\nwith the same price will have the quantity aggregated.\n<br><br>\nGET /api/v3/aggTrades\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nsymbol -- mandatory/string <br>\nfromId -- optional/long -- id to get aggregate trades from INCLUSIVE <br>\nstartTime -- optional/long -- Timestamp in ms to get aggregate trades from INCLUSIVE <br>\nendTime -- optional/long -- Timestamp in ms to get aggregate trades until INCLUSIVE <br>\nlimit -- optional/integer -- limit the results Default 500; max 1000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#compressed-aggregate-trades-list\">\n    https://binance-docs.github.io/apidocs/spot/en/#compressed-aggregate-trades-list</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Market.java.Market.[String]klines(Map<String, Object>)", "name": "klines", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String klines(Map<String, Object> parameters)", "original_string": "    public String klines(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        ParameterChecker.checkParameter(parameters, \"interval\", String.class);\n        return requestHandler.sendPublicRequest(baseUrl, KLINES, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Market.java", "class_name": "Market", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Market.java.Market", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nKline/candlestick bars for a symbol.\nKlines are uniquely identified by their open time.\n<br><br>\nGET /api/v3/klines\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nsymbol -- mandatory/string <br>\ninterval -- mandatory/string <br>\nstartTime -- optional/long <br>\nendTime -- optional/long <br>\ntimeZone -- optional/string -- Default:0 (UTC) <br>\nlimit -- optional/integer -- limit the results Default 500; max 1000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#kline-candlestick-data\">\n    https://binance-docs.github.io/apidocs/spot/en/#kline-candlestick-data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Market.java.Market.[String]uiKlines(Map<String, Object>)", "name": "uiKlines", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String uiKlines(Map<String, Object> parameters)", "original_string": "    public String uiKlines(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        ParameterChecker.checkParameter(parameters, \"interval\", String.class);\n        return requestHandler.sendPublicRequest(baseUrl, UIKLINES, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Market.java", "class_name": "Market", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Market.java.Market", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nThe request is similar to klines having the same parameters and response.\nuiKlines return modified kline data, optimized for presentation of candlestick charts.\n<br><br>\nGET /api/v3/uiKlines\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nsymbol -- mandatory/string <br>\ninterval -- mandatory/string <br>\nstartTime -- optional/long <br>\nendTime -- optional/long <br>\ntimeZone -- optional/string -- Default:0 (UTC) <br>\nlimit -- optional/integer -- limit the results Default 500; max 1000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#uiklines\">\n    https://binance-docs.github.io/apidocs/spot/en/#uiklines</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Market.java.Market.[String]averagePrice(Map<String, Object>)", "name": "averagePrice", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String averagePrice(Map<String, Object> parameters)", "original_string": "    public String averagePrice(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        return requestHandler.sendPublicRequest(baseUrl, AVG_PRICE, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Market.java", "class_name": "Market", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Market.java.Market", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nCurrent average price for a symbol.\n<br><br>\nGET /api/v3/avgPrice\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nsymbol -- mandatory/string -- the trading pair <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#current-average-price\">\n    https://binance-docs.github.io/apidocs/spot/en/#current-average-price</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Market.java.Market.[String]ticker24H(Map<String, Object>)", "name": "ticker24H", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String ticker24H(Map<String, Object> parameters)", "original_string": "    public String ticker24H(Map<String, Object> parameters) {\n        if (parameters.containsKey(\"symbol\") && parameters.containsKey(\"symbols\")) {\n            throw new BinanceConnectorException(\"symbol and symbols cannot be sent together.\");\n        }\n        if (parameters.containsKey(\"symbols\")) {\n            ParameterChecker.checkParameterType(parameters.get(\"symbols\"), ArrayList.class, \"symbols\");\n            parameters.put(\"symbols\", JSONParser.getJSONArray(\n                    (ArrayList<?>) parameters.get(\"symbols\"), \"symbols\"));\n        }\n        return requestHandler.sendPublicRequest(baseUrl, TICKER_24H, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Market.java", "class_name": "Market", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Market.java.Market", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n24 hour rolling window price change statistics. Careful when accessing this with no symbol.\n<br><br>\nGET /api/v3/ticker/24hr\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nsymbol -- optional/string -- the trading pair <br>\nsymbols -- optional/string <br>\ntype -- optional/enum -- Supported values: FULL or MINI. If none provided, the default is FULL <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#24hr-ticker-price-change-statistics\">\n    https://binance-docs.github.io/apidocs/spot/en/#24hr-ticker-price-change-statistics</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Market.java.Market.[String]tickerSymbol(Map<String, Object>)", "name": "tickerSymbol", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String tickerSymbol(Map<String, Object> parameters)", "original_string": "    public String tickerSymbol(Map<String, Object> parameters) {\n        if (parameters.containsKey(\"symbol\") && parameters.containsKey(\"symbols\")) {\n            throw new BinanceConnectorException(\"symbol and symbols cannot be sent together.\");\n        }\n        if (parameters.containsKey(\"symbols\")) {\n            ParameterChecker.checkParameterType(parameters.get(\"symbols\"), ArrayList.class, \"symbols\");\n            parameters.put(\"symbols\", JSONParser.getJSONArray(\n                    (ArrayList<?>) parameters.get(\"symbols\"), \"symbols\"));\n        }\n        return requestHandler.sendPublicRequest(baseUrl, TICKER_SYMBOL, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Market.java", "class_name": "Market", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Market.java.Market", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nLatest price for a symbol or symbols.\n<br><br>\nGET /api/v3/ticker/price\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nsymbol -- optional/string -- the trading pair <br>\nsymbols -- optional/string <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#symbol-price-ticker\">\n    https://binance-docs.github.io/apidocs/spot/en/#symbol-price-ticker</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Market.java.Market.[String]bookTicker(Map<String, Object>)", "name": "bookTicker", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String bookTicker(Map<String, Object> parameters)", "original_string": "    public String bookTicker(Map<String, Object> parameters) {\n        if (parameters.containsKey(\"symbol\") && parameters.containsKey(\"symbols\")) {\n            throw new BinanceConnectorException(\"symbol and symbols cannot be sent together.\");\n        }\n        if (parameters.containsKey(\"symbols\")) {\n            ParameterChecker.checkParameterType(parameters.get(\"symbols\"), ArrayList.class, \"symbols\");\n            parameters.put(\"symbols\", JSONParser.getJSONArray(\n                    (ArrayList<?>) parameters.get(\"symbols\"), \"symbols\"));\n        }\n        return requestHandler.sendPublicRequest(baseUrl, BOOK_TICKER, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Market.java", "class_name": "Market", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Market.java.Market", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nBest price/qty on the order book for a symbol or symbols.\n<br><br>\nGET /api/v3/ticker/bookTicker\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nsymbol -- optional/string -- the trading pair <br>\nsymbols -- optional/string <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#symbol-order-book-ticker\">\n    https://binance-docs.github.io/apidocs/spot/en/#symbol-order-book-ticker</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Market.java.Market.[String]ticker(Map<String, Object>)", "name": "ticker", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String ticker(Map<String, Object> parameters)", "original_string": "    public String ticker(Map<String, Object> parameters) {\n        if (parameters.containsKey(\"symbol\") && parameters.containsKey(\"symbols\")) {\n            throw new BinanceConnectorException(\"symbol and symbols cannot be sent together.\");\n        }\n        if (parameters.containsKey(\"symbols\")) {\n            ParameterChecker.checkParameterType(parameters.get(\"symbols\"), ArrayList.class, \"symbols\");\n            parameters.put(\"symbols\", JSONParser.getJSONArray(\n                    (ArrayList<?>) parameters.get(\"symbols\"), \"symbols\"));\n        } else {\n            ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        }\n        return requestHandler.sendPublicRequest(baseUrl, TICKER, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Market.java", "class_name": "Market", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Market.java.Market", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nThe window used to compute statistics will be no more than 59999ms from the requested windowSize.\nopenTime for /api/v3/ticker always starts on a minute, while the closeTime is the current time of the request.\nAs such, the effective window will be up to 59999ms wider than windowSize.\n<br><br>\nGET /api/v3/ticker\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nsymbol -- mandatory/string -- Either symbol or symbols must be provided.\nsymbols -- optional/string -- Example: [\"BTCUSDT\",\"BNBUSDT\"] or %5B%22BTCUSDT%22,%22BNBUSDT%22%5D. The maximum number of symbols allowed in a request is 100. <br>\nwindowSize -- optional/enum -- Defaults to 1d if no parameter provided <br>\ntype -- optional/enum -- Supported values: FULL or MINI. If none provided, the default is FULL <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#rolling-window-price-change-statistics\">\n    https://binance-docs.github.io/apidocs/spot/en/#rolling-window-price-change-statistics</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Market.java.Market.[String]tradingDayTicker(Map<String, Object>)", "name": "tradingDayTicker", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String tradingDayTicker(Map<String, Object> parameters)", "original_string": "    public String tradingDayTicker(Map<String, Object> parameters) {\n        if (parameters.containsKey(\"symbol\") && parameters.containsKey(\"symbols\")) {\n            throw new BinanceConnectorException(\"symbol and symbols cannot be sent together.\");\n        }\n        if (parameters.containsKey(\"symbols\")) {\n            ParameterChecker.checkParameterType(parameters.get(\"symbols\"), ArrayList.class, \"symbols\");\n            parameters.put(\"symbols\", JSONParser.getJSONArray(\n                    (ArrayList<?>) parameters.get(\"symbols\"), \"symbols\"));\n        } else {\n            ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        }\n        return requestHandler.sendPublicRequest(baseUrl, TRADING_DAY, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Market.java", "class_name": "Market", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Market.java.Market", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nPrice change statistics for a trading day.\n<br><br>\nGET /api/v3/ticker/tradingDay\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nsymbol -- mandatory/string -- Either symbol or symbols must be provided.\nsymbols -- optional/string -- Example: [\"BTCUSDT\",\"BNBUSDT\"] or %5B%22BTCUSDT%22,%22BNBUSDT%22%5D. The maximum number of symbols allowed in a request is 100. <br>\nwindowSize -- optional/string -- Defaults to 1d if no parameter provided <br>\ntimeZone -- optional/enum -- Default: 0 (UTC) <br>\ntype -- optional/enum -- Supported values: FULL or MINI. If none provided, the default is FULL <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#trading-day-ticker\">\n    https://binance-docs.github.io/apidocs/spot/en/#trading-day-ticker</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java.CryptoLoans.[]CryptoLoans(String,String,String,boolean,ProxyAuth)", "name": "CryptoLoans", "arg_nums": 5, "params": [{"name": "baseUrl", "type": "String"}, {"name": "apiKey", "type": "String"}, {"name": "secretKey", "type": "String"}, {"name": "showLimitUsage", "type": "boolean"}, {"name": "proxy", "type": "ProxyAuth"}], "return_type": "", "signature": "public CryptoLoans(String baseUrl, String apiKey, String secretKey, boolean showLimitUsage, ProxyAuth proxy)", "original_string": "    public CryptoLoans(String baseUrl, String apiKey, String secretKey, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, new HmacSignatureGenerator(secretKey), proxy);\n        this.showLimitUsage = showLimitUsage;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java", "class_name": "CryptoLoans", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java.CryptoLoans", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java.CryptoLoans.[]CryptoLoans(String,String,SignatureGenerator,boolean,ProxyAuth)", "name": "CryptoLoans", "arg_nums": 5, "params": [{"name": "baseUrl", "type": "String"}, {"name": "apiKey", "type": "String"}, {"name": "signatureGenerator", "type": "SignatureGenerator"}, {"name": "showLimitUsage", "type": "boolean"}, {"name": "proxy", "type": "ProxyAuth"}], "return_type": "", "signature": "public CryptoLoans(String baseUrl, String apiKey, SignatureGenerator signatureGenerator, boolean showLimitUsage, ProxyAuth proxy)", "original_string": "    public CryptoLoans(String baseUrl, String apiKey, SignatureGenerator signatureGenerator, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, signatureGenerator, proxy);\n        this.showLimitUsage = showLimitUsage;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java", "class_name": "CryptoLoans", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java.CryptoLoans", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java.CryptoLoans.[String]loanIncome(Map<String, Object>)", "name": "loanIncome", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String loanIncome(Map<String, Object> parameters)", "original_string": "    public String loanIncome(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"asset\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, LOAN_INCOME, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java", "class_name": "CryptoLoans", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java.CryptoLoans", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/loan/income\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nasset -- mandatory/string <br>\ntype -- optional/string -- All types will be returned by default. Enum: borrowIn, collateralSpent, repayAmount, collateralReturn(Collateral return after repayment), addCollateral, removeCollateral, collateralReturnAfterLiquidation <br>\nstartTime -- optional/long <br>\nendTime -- optional/long <br>\nlimit -- optional/int -- default 20, max 100 <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-crypto-loans-income-history-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#get-crypto-loans-income-history-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java.CryptoLoans.[String]loanBorrow(Map<String, Object>)", "name": "loanBorrow", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String loanBorrow(Map<String, Object> parameters)", "original_string": "    public String loanBorrow(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"loanCoin\", String.class);\n        ParameterChecker.checkParameter(parameters, \"collateralCoin\", String.class);\n        ParameterChecker.checkParameter(parameters, \"loanTerm\", Integer.class);\n        return requestHandler.sendSignedRequest(baseUrl, LOAN_BORROW, parameters, HttpMethod.POST, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java", "class_name": "CryptoLoans", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java.CryptoLoans", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nPOST /sapi/v1/loan/borrow\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nloanCoin -- mandatory/string <br>\ncollateralCoin -- mandatory/string <br>\nloanTerm -- mandatory/int -- 7/14/30/90/180 days <br>\nloanAmount -- optional/decimal -- Mandatory when collateralAmount is empty <br>\ncollateralAmount\t-- optional/decimal -- Mandatory when loanAmount is empty <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#borrow-crypto-loan-borrow-trade\">\n    https://binance-docs.github.io/apidocs/spot/en/#borrow-crypto-loan-borrow-trade</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java.CryptoLoans.[String]loanBorrowHistory(Map<String, Object>)", "name": "loanBorrowHistory", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String loanBorrowHistory(Map<String, Object> parameters)", "original_string": "    public String loanBorrowHistory(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, LOAN_BORROW_HISTORY, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java", "class_name": "CryptoLoans", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java.CryptoLoans", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/loan/borrow/history\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\norderId -- optional/long -- orderId in POST /sapi/v1/loan/borrow <br>\nloanCoin -- optional/string <br>\ncollateralCoin -- optional/string <br>\nstartTime -- optional/long <br>\nendTime -- optional/long <br>\ncurrent\t-- optional/long -- Current querying page. Start from 1; default: 1; max: 1000 <br>\nlimit -- optional/long -- Default: 10; max: 100; <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#borrow-get-loan-borrow-history-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#borrow-get-loan-borrow-history-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java.CryptoLoans.[String]loanOngoingOrders(Map<String, Object>)", "name": "loanOngoingOrders", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String loanOngoingOrders(Map<String, Object> parameters)", "original_string": "    public String loanOngoingOrders(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, LOAN_ONGOING_ORDERS, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java", "class_name": "CryptoLoans", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java.CryptoLoans", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/loan/ongoing/orders\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\norderId -- optional/long -- orderId in POST /sapi/v1/loan/borrow <br>\nloanCoin -- optional/string <br>\ncollateralCoin -- optional/string <br>\ncurrent\t-- optional/long -- Current querying page. Start from 1; default: 1; max: 1000 <br>\nlimit -- optional/long -- Default: 10; max: 100; <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#borrow-get-loan-ongoing-orders-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#borrow-get-loan-ongoing-orders-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java.CryptoLoans.[String]loanRepay(Map<String, Object>)", "name": "loanRepay", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String loanRepay(Map<String, Object> parameters)", "original_string": "    public String loanRepay(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"orderId\", Long.class);\n        ParameterChecker.checkRequiredParameter(parameters, \"amount\");\n        return requestHandler.sendSignedRequest(baseUrl, LOAN_REPAY, parameters, HttpMethod.POST, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java", "class_name": "CryptoLoans", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java.CryptoLoans", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nPOST /sapi/v1/loan/repay\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\norderId -- mandatory/long <br>\namount -- mandatory/decimal <br>\ntype -- optional/int -- Default: 1. 1 for \"repay with borrowed coin\"; 2 for \"repay with collateral\" <br>\ncollateralReturn\t-- optional/boolean -- \tDefault: TRUE. TRUE: Return extra collateral to spot account; FALSE: Keep extra collateral in the order <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#repay-crypto-loan-repay-trade\">\n    https://binance-docs.github.io/apidocs/spot/en/#repay-crypto-loan-repay-trade</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java.CryptoLoans.[String]loanRepayHistory(Map<String, Object>)", "name": "loanRepayHistory", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String loanRepayHistory(Map<String, Object> parameters)", "original_string": "    public String loanRepayHistory(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, LOAN_REPAY_HISTORY, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java", "class_name": "CryptoLoans", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java.CryptoLoans", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/loan/repay/history\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\norderId -- optional/long <br>\nloanCoin -- optional/string <br>\ncollateralCoin -- optional/string <br>\nstartTime -- optional/long <br>\nendTime -- optional/long <br>\ncurrent\t-- optional/long -- Current querying page. Start from 1; default: 1; max: 1000 <br>\nlimit -- optional/long -- Default: 10; max: 100; <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#repay-get-loan-repayment-history-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#repay-get-loan-repayment-history-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java.CryptoLoans.[String]loanAdjustLTV(Map<String, Object>)", "name": "loanAdjustLTV", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String loanAdjustLTV(Map<String, Object> parameters)", "original_string": "    public String loanAdjustLTV(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"orderId\", Long.class);\n        ParameterChecker.checkRequiredParameter(parameters, \"amount\");\n        return requestHandler.sendSignedRequest(baseUrl, LOAN_ADJUST_LTV, parameters, HttpMethod.POST, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java", "class_name": "CryptoLoans", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java.CryptoLoans", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nPOST /sapi/v1/loan/adjust/ltv\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\norderId -- mandatory/long <br>\namount -- mandatory/decimal <br>\ndirection -- optional/enum -- \"ADDITIONAL\", \"REDUCED\" <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#adjust-ltv-crypto-loan-adjust-ltv-trade\">\n    https://binance-docs.github.io/apidocs/spot/en/#adjust-ltv-crypto-loan-adjust-ltv-trade</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java.CryptoLoans.[String]loanAdjustLTVHistory(Map<String, Object>)", "name": "loanAdjustLTVHistory", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String loanAdjustLTVHistory(Map<String, Object> parameters)", "original_string": "    public String loanAdjustLTVHistory(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, LOAN_ADJUST_LTV_HISTORY, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java", "class_name": "CryptoLoans", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java.CryptoLoans", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/loan/ltv/adjustment/history\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\norderId -- optional/long <br>\nloanCoin -- optional/string <br>\ncollateralCoin -- optional/string <br>\nstartTime -- optional/long <br>\nendTime -- optional/long <br>\ncurrent\t-- optional/long -- Current querying page. Start from 1; default: 1; max: 1000 <br>\nlimit -- optional/long -- Default: 10; max: 100; <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#adjust-ltv-get-loan-ltv-adjustment-history-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#adjust-ltv-crypto-loan-adjust-ltv-trade</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java.CryptoLoans.[String]loanAssetsData(Map<String, Object>)", "name": "loanAssetsData", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String loanAssetsData(Map<String, Object> parameters)", "original_string": "    public String loanAssetsData(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, LOANABLE_ASSETS_DATA, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java", "class_name": "CryptoLoans", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java.CryptoLoans", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/loan/loanable/data\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nloanCoin -- optional/string <br>\nvipLevel -- optional/int -- Default: user's VIP level. In case there's specific configuration, send \"-1\"<br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-loanable-assets-data-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#get-loanable-assets-data-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java.CryptoLoans.[String]collateralAssetsData(Map<String, Object>)", "name": "collateralAssetsData", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String collateralAssetsData(Map<String, Object> parameters)", "original_string": "    public String collateralAssetsData(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, COLLATERAL_ASSETS_DATA, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java", "class_name": "CryptoLoans", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java.CryptoLoans", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/loan/collateral/data\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\ncollateralCoin -- optional/string <br>\nvipLevel -- optional/int -- Default: user's VIP level. In case there's specific configuration, send \"-1\"<br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-collateral-assets-data-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#get-collateral-assets-data-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java.CryptoLoans.[String]collateralRepayRate(Map<String, Object>)", "name": "collateralRepayRate", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String collateralRepayRate(Map<String, Object> parameters)", "original_string": "    public String collateralRepayRate(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"loanCoin\", String.class);\n        ParameterChecker.checkParameter(parameters, \"collateralCoin\", String.class);\n        ParameterChecker.checkRequiredParameter(parameters, \"repayAmount\");\n        return requestHandler.sendSignedRequest(baseUrl, COLLATERAL_REPAY_RATE, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java", "class_name": "CryptoLoans", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java.CryptoLoans", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/loan/repay/collateral/rate\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nloanCoin -- mandatory/string <br>\ncollateralCoin -- mandatory/string <br>\nrepayAmount -- mandatory/decimal -- repay amount of loanCoin<br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#check-collateral-repay-rate-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#check-collateral-repay-rate-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java.CryptoLoans.[String]customizeMarginCall(Map<String, Object>)", "name": "customizeMarginCall", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String customizeMarginCall(Map<String, Object> parameters)", "original_string": "    public String customizeMarginCall(Map<String, Object> parameters) {\n        ParameterChecker.checkRequiredParameter(parameters, \"marginCall\");\n        return requestHandler.sendSignedRequest(baseUrl, CUSTOMIZE_MARGIN_CALL, parameters, HttpMethod.POST, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java", "class_name": "CryptoLoans", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java.CryptoLoans", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/loan/customize/margin_call\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\norderId -- optional/long -- Mandatory when collateralCoin is empty. Send either orderId or collateralCoin, if both parameters are sent, take orderId only. <br>\ncollateralCoin -- optional/string -- Mandatory when orderId is empty. Send either orderId or collateralCoin, if both parameters are sent, take orderId only.<br>\nmarginCall -- mandatory/decimal<br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#crypto-loan-customize-margin-call-trade\">\n    https://binance-docs.github.io/apidocs/spot/en/#crypto-loan-customize-margin-call-trade</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java.CryptoLoans.[String]flexibleLoanBorrow(Map<String, Object>)", "name": "flexibleLoanBorrow", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String flexibleLoanBorrow(Map<String, Object> parameters)", "original_string": "    public String flexibleLoanBorrow(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"loanCoin\", String.class);\n        ParameterChecker.checkParameter(parameters, \"collateralCoin\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, FLEXIBLE_LOAN_BORROW, parameters, HttpMethod.POST, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java", "class_name": "CryptoLoans", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java.CryptoLoans", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nPOST /sapi/v1/loan/flexible/borrow\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nloanCoin -- mandatory/string -- Coin loaned. <br>\nloanAmount -- optional/decimal -- Loan amount. Mandatory when collateralAmount is empty. <br>\ncollateralCoin -- mandatory/string -- Coin used as collateral. <br>\ncollateralAmount -- optional/decimal -- Mandatory when loanAmount is empty. <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#borrow-flexible-loan-borrow-trade\">\n     https://binance-docs.github.io/apidocs/spot/en/#borrow-flexible-loan-borrow-trade</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java.CryptoLoans.[String]flexibleLoanOngoingOrders(Map<String, Object>)", "name": "flexibleLoanOngoingOrders", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String flexibleLoanOngoingOrders(Map<String, Object> parameters)", "original_string": "    public String flexibleLoanOngoingOrders(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, FLEXIBLE_LOAN_ONGOING_ORDERS, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java", "class_name": "CryptoLoans", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java.CryptoLoans", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/loan/flexible/ongoing/orders\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nloanCoin -- optional/string -- Coin loaned. <br>\ncollateralCoin -- optional/string -- Coin used as collateral <br>\ncurrent -- optional/long -- Current querying page. Start from 1; default: 1; max: 1000; <br>\nlimit -- optional/long -- Default: 10; max: 100 <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#borrow-get-flexible-loan-ongoing-orders-user_data\">\n     https://binance-docs.github.io/apidocs/spot/en/#borrow-get-flexible-loan-ongoing-orders-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java.CryptoLoans.[String]flexibleLoanBorrowHistory(Map<String, Object>)", "name": "flexibleLoanBorrowHistory", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String flexibleLoanBorrowHistory(Map<String, Object> parameters)", "original_string": "    public String flexibleLoanBorrowHistory(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, FLEXIBLE_LOAN_BORROW_HISTORY, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java", "class_name": "CryptoLoans", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java.CryptoLoans", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/loan/flexible/borrow/history\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nloanCoin -- optional/string -- Coin loaned <br>\ncollateralCoin -- optional/string -- Coin used as collateral <br>\nstartTime -- optional/long -- UTC timestamp in ms <br>\nendTime -- optional/long -- UTC timestamp in ms <br>\ncurrent -- optional/long -- Current querying page. Start from 1; default: 1; max: 1000; <br>\nlimit -- optional/long -- Default: 10; max: 100; <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#borrow-get-flexible-loan-borrow-history-user_data\">\n     https://binance-docs.github.io/apidocs/spot/en/#borrow-get-flexible-loan-borrow-history-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java.CryptoLoans.[String]flexibleLoanRepay(Map<String, Object>)", "name": "flexibleLoanRepay", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String flexibleLoanRepay(Map<String, Object> parameters)", "original_string": "    public String flexibleLoanRepay(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"loanCoin\", String.class);\n        ParameterChecker.checkParameter(parameters, \"collateralCoin\", String.class);\n        ParameterChecker.checkRequiredParameter(parameters, \"repayAmount\");\n        return requestHandler.sendSignedRequest(baseUrl, FLEXIBLE_LOAN_REPAY, parameters, HttpMethod.POST, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java", "class_name": "CryptoLoans", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java.CryptoLoans", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nPOST /sapi/v1/loan/flexible/repay\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nloanCoin -- mandatory/string -- Coin loaned <br>\ncollateralCoin -- mandatory/string -- Coin used as collateral <br>\nrepayAmount -- mandatory/decimal -- repay amount of loanCoin <br>\ncollateralReturn -- optional/boolean -- Default: TRUE. TRUE: Return extra collateral to earn account; FALSE: Keep extra collateral in the order, and lower LTV.<br>\nfullRepayment -- optional/boolean -- Default: FALSE. TRUE: Full repayment; FALSE: Partial repayment, based on loanAmount. <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#repay-flexible-loan-repay-trade\">\n     https://binance-docs.github.io/apidocs/spot/en/#repay-flexible-loan-repay-trade</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java.CryptoLoans.[String]flexibleLoanRepayHistory(Map<String, Object>)", "name": "flexibleLoanRepayHistory", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String flexibleLoanRepayHistory(Map<String, Object> parameters)", "original_string": "    public String flexibleLoanRepayHistory(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, FLEXIBLE_LOAN_REPAY_HISTORY, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java", "class_name": "CryptoLoans", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java.CryptoLoans", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/loan/flexible/repay/history\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nloanCoin -- optional/string -- Coin loaned <br>\ncollateralCoin -- optional/string -- Coin used as collateral <br>\nstartTime -- optional/long -- UTC timestamp in ms <br>\nendTime -- optional/long -- UTC timestamp in ms <br>\ncurrent -- optional/long -- Current querying page. Start from 1; default: 1; max: 1000; <br>\nlimit -- optional/long -- Default: 10; max: 100; <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#repay-get-flexible-loan-repayment-history-user_data\">\n     https://binance-docs.github.io/apidocs/spot/en/#repay-get-flexible-loan-repayment-history-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java.CryptoLoans.[String]flexibleLoanAdjustLtv(Map<String, Object>)", "name": "flexibleLoanAdjustLtv", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String flexibleLoanAdjustLtv(Map<String, Object> parameters)", "original_string": "    public String flexibleLoanAdjustLtv(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"loanCoin\", String.class);\n        ParameterChecker.checkParameter(parameters, \"collateralCoin\", String.class);\n        ParameterChecker.checkRequiredParameter(parameters, \"adjustmentAmount\");\n        ParameterChecker.checkParameter(parameters, \"direction\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, FLEXIBLE_LOAN_ADJUST_LTV, parameters, HttpMethod.POST, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java", "class_name": "CryptoLoans", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java.CryptoLoans", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nPOST /sapi/v1/loan/flexible/adjust/ltv\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nloanCoin -- mandatory/string -- Coin loaned <br>\ncollateralCoin -- mandatory/string -- Coin used as collateral <br>\nadjustmentAmount -- mandatory/decimal <br>\ndirection -- mandatory/enum -- \"ADDITIONAL\", \"REDUCED\"<br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#adjust-ltv-flexible-loan-adjust-ltv-trade\">\n     https://binance-docs.github.io/apidocs/spot/en/#adjust-ltv-flexible-loan-adjust-ltv-trade</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java.CryptoLoans.[String]flexibleLoanLtvAdjustHistory(Map<String, Object>)", "name": "flexibleLoanLtvAdjustHistory", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String flexibleLoanLtvAdjustHistory(Map<String, Object> parameters)", "original_string": "    public String flexibleLoanLtvAdjustHistory(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, FLEXIBLE_LOAN_LTV_ADJUST_HISTORY, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java", "class_name": "CryptoLoans", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java.CryptoLoans", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/loan/flexible/ltv/adjustment/history\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nloanCoin -- optional/string -- Coin loaned <br>\ncollateralCoin -- optional/string -- Coin used as collateral <br>\nstartTime -- optional/long -- UTC timestamp in ms <br>\nendTime -- optional/long -- UTC timestamp in ms <br>\ncurrent -- optional/long -- Current querying page. Start from 1. Default:1 Max:1000 <br>\nlimit -- optional/long -- Default: 10; max: 100; <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#adjust-ltv-get-flexible-loan-ltv-adjustment-history-user_data\">\n     https://binance-docs.github.io/apidocs/spot/en/#adjust-ltv-get-flexible-loan-ltv-adjustment-history-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java.CryptoLoans.[String]flexibleLoanAssets(Map<String, Object>)", "name": "flexibleLoanAssets", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String flexibleLoanAssets(Map<String, Object> parameters)", "original_string": "    public String flexibleLoanAssets(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, FLEXIBLE_LOAN_ASSETS, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java", "class_name": "CryptoLoans", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java.CryptoLoans", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGet interest rate and borrow limit of flexible loanable assets. The borrow limit is shown in USD value.\n\n<br><br>\nGET /sapi/v1/loan/flexible/loanable/data\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nloanCoin -- optional/string -- Coin loaned <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-flexible-loan-assets-data-user_data\">\n     https://binance-docs.github.io/apidocs/spot/en/#get-flexible-loan-assets-data-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java.CryptoLoans.[String]flexibleLoanCollateralAssets(Map<String, Object>)", "name": "flexibleLoanCollateralAssets", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String flexibleLoanCollateralAssets(Map<String, Object> parameters)", "original_string": "    public String flexibleLoanCollateralAssets(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, FLEXIBLE_LOAN_COLLATERAL_ASSETS, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java", "class_name": "CryptoLoans", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java.CryptoLoans", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGet LTV information and collateral limit of flexible loan's collateral assets. The collateral limit is shown in USD value.\n\n<br><br>\nGET /sapi/v1/loan/flexible/collateral/data\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\ncollateralCoin -- optional/string -- Coin used as collateral <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-flexible-loan-collateral-assets-data-user_data\">\n     https://binance-docs.github.io/apidocs/spot/en/#get-flexible-loan-collateral-assets-data-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[]Margin(String,String,String,boolean,ProxyAuth)", "name": "Margin", "arg_nums": 5, "params": [{"name": "baseUrl", "type": "String"}, {"name": "apiKey", "type": "String"}, {"name": "secretKey", "type": "String"}, {"name": "showLimitUsage", "type": "boolean"}, {"name": "proxy", "type": "ProxyAuth"}], "return_type": "", "signature": "public Margin(String baseUrl, String apiKey, String secretKey, boolean showLimitUsage, ProxyAuth proxy)", "original_string": "    public Margin(String baseUrl, String apiKey, String secretKey, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, new HmacSignatureGenerator(secretKey), proxy);\n        this.showLimitUsage = showLimitUsage;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Margin.java", "class_name": "Margin", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[]Margin(String,String,SignatureGenerator,boolean,ProxyAuth)", "name": "Margin", "arg_nums": 5, "params": [{"name": "baseUrl", "type": "String"}, {"name": "apiKey", "type": "String"}, {"name": "signatureGenerator", "type": "SignatureGenerator"}, {"name": "showLimitUsage", "type": "boolean"}, {"name": "proxy", "type": "ProxyAuth"}], "return_type": "", "signature": "public Margin(String baseUrl, String apiKey, SignatureGenerator signatureGenerator, boolean showLimitUsage, ProxyAuth proxy)", "original_string": "    public Margin(String baseUrl, String apiKey, SignatureGenerator signatureGenerator, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, signatureGenerator, proxy);\n        this.showLimitUsage = showLimitUsage;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Margin.java", "class_name": "Margin", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]allAssets()", "name": "allAssets", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String allAssets()", "original_string": "    public String allAssets() {\n        return requestHandler.sendApiRequest(baseUrl, ALL_ASSETS, null, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Margin.java", "class_name": "Margin", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/margin/allAssets\n<br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-all-margin-assets-market_data\">\n   https://binance-docs.github.io/apidocs/spot/en/#get-all-margin-assets-market_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]allPairs()", "name": "allPairs", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String allPairs()", "original_string": "    public String allPairs() {\n        return requestHandler.sendApiRequest(baseUrl, ALL_PAIRS, null, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Margin.java", "class_name": "Margin", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/margin/allPairs\n<br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-all-cross-margin-pairs-market_data\">\n   https://binance-docs.github.io/apidocs/spot/en/#get-all-cross-margin-pairs-market_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]priceIndex(Map<String, Object>)", "name": "priceIndex", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String priceIndex(Map<String, Object> parameters)", "original_string": "    public String priceIndex(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        return requestHandler.sendApiRequest(baseUrl, PRICE_INDEX, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Margin.java", "class_name": "Margin", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/margin/priceIndex\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nsymbol -- mandatory/string\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-margin-priceindex-market_data\">\n   https://binance-docs.github.io/apidocs/spot/en/#query-margin-priceindex-market_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]newOrder(Map<String, Object>)", "name": "newOrder", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String newOrder(Map<String, Object> parameters)", "original_string": "    public String newOrder(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        ParameterChecker.checkParameter(parameters, \"side\", String.class);\n        ParameterChecker.checkParameter(parameters, \"type\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, ORDER, parameters, HttpMethod.POST, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Margin.java", "class_name": "Margin", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nPost a new order for margin account.\n<br><br>\nPOST /sapi/v1/margin/order\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nsymbol -- mandatory/string <br>\nisIsolated -- optional/string -- for isolated margin or not, \"TRUE\", \"FALSE\",default \"FALSE\" <br>\nside -- mandatory/enum <br>\ntype -- mandatory/enum <br>\nquantity -- optional/decimal <br>\nquoteOrderQty -- optional/decimal <br>\nprice -- optional/decimal <br>\nstopPrice -- optional/decimal -- Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders. <br>\nnewClientOrderId -- optional/string -- A unique id among open orders. Automatically generated if not sent. <br>\nicebergQty -- optional/decimal -- Used with LIMIT, STOP_LOSS_LIMIT, and TAKE_PROFIT_LIMIT to create an iceberg order. <br>\nnewOrderRespType -- optional/enum -- Set the response JSON. ACK, RESULT, or FULL; MARKET and LIMIT order types default to FULL, all other orders default to ACK. <br>\nsideEffectType -- optional/enum -- NO_SIDE_EFFECT, MARGIN_BUY, AUTO_REPAY, AUTO_BORROW_REPAY; default NO_SIDE_EFFECT. <br>\ntimeInForce -- optional/enum -- GTC,IOC,FOK <br>\nselfTradePreventionMode -- optional/enum -- The possible supported values are EXPIRE_TAKER, EXPIRE_MAKER, EXPIRE_BOTH, NONE <br>\nautoRepayAtCancel -- optional/boolean -- Only for when it's a MARGIN_BUY or AUTO_BORROW_REPAY. Default: true (debt generated by the order needs to be repaid after cancellation.) <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#margin-account-new-order-trade\">\n    https://binance-docs.github.io/apidocs/spot/en/#margin-account-new-order-trade</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]cancelOrder(Map<String, Object>)", "name": "cancelOrder", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String cancelOrder(Map<String, Object> parameters)", "original_string": "    public String cancelOrder(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, ORDER, parameters, HttpMethod.DELETE, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Margin.java", "class_name": "Margin", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nCancel an active order for margin account.\n<br><br>\nDELETE /sapi/v1/margin/order\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nsymbol -- mandatory/string <br>\nisIsolated -- optional/string -- for isolated margin or not, \"TRUE\", \"FALSE\",default \"FALSE\" <br>\norderId -- optional/long <br>\norigClientOrderId -- optional/string <br>\nnewClientOrderId -- optional/string -- Used to uniquely identify this cancel. Automatically generated by default. <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#margin-account-cancel-order-trade\">\n    https://binance-docs.github.io/apidocs/spot/en/#margin-account-cancel-order-trade</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]cancelOpenOrders(Map<String, Object>)", "name": "cancelOpenOrders", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String cancelOpenOrders(Map<String, Object> parameters)", "original_string": "    public String cancelOpenOrders(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, OPEN_ORDERS, parameters, HttpMethod.DELETE, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Margin.java", "class_name": "Margin", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nCancels all active orders on a symbol for margin account.\nThis includes OCO orders.\n<br><br>\nDELETE /sapi/v1/margin/openOrders\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nsymbol -- mandatory/string <br>\nisIsolated -- optional/string -- for isolated margin or not, \"TRUE\", \"FALSE, default \"FALSE\" <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#margin-account-cancel-all-open-orders-on-a-symbol-trade\">\n    https://binance-docs.github.io/apidocs/spot/en/#margin-account-cancel-all-open-orders-on-a-symbol-trade</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]transferHistory(Map<String, Object>)", "name": "transferHistory", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String transferHistory(Map<String, Object> parameters)", "original_string": "    public String transferHistory(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, TRANSFER_HISTORY, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Margin.java", "class_name": "Margin", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/margin/transfer\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nasset -- optional/string <br>\ntype -- optional/string -- Transfer Type: ROLL_IN, ROLL_OUT <br>\nstartTime -- optional/long <br>\nendTime -- optional/long <br>\ncurrent -- optional/long -- Currently querying page. Start from 1. Default:1 <br>\nsize -- optional/long -- Default:10 Max:100 <br>\narchived -- optional/string -- Default: false. Set to true for archived data from 6 months ago <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-cross-margin-transfer-history-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#get-cross-margin-transfer-history-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]repayRecord(Map<String, Object>)", "name": "repayRecord", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String repayRecord(Map<String, Object> parameters)", "original_string": "    public String repayRecord(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"asset\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, REPAY_RECORD, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Margin.java", "class_name": "Margin", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/margin/repay\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nasset -- mandatory/string <br>\nisolatedSymbol -- optional/string <br>\ntxId -- optional/long -- the tranId in POST /sapi/v1/margin/loan <br>\nstartTime -- optional/long <br>\nendTime -- optional/long <br>\ncurrent -- optional/long -- Currently querying page. Start from 1. Default:1 <br>\nsize -- optional/long -- Default:10 Max:100 <br>\narchived -- optional/string -- Default: false. Set to true for archived data from 6 months ago <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-repay-record-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#query-repay-record-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]interestHistory(Map<String, Object>)", "name": "interestHistory", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String interestHistory(Map<String, Object> parameters)", "original_string": "    public String interestHistory(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, INTEREST_HISTORY, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Margin.java", "class_name": "Margin", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/margin/interestHistory\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nasset -- optional/string <br>\nisolatedSymbol -- optional/string <br>\nstartTime -- optional/long <br>\nendTime -- optional/long <br>\ncurrent -- optional/long -- Currently querying page. Start from 1. Default:1 <br>\nsize -- optional/long -- Default:10 Max:100 <br>\narchived -- optional/string -- Default: false. Set to true for archived data from 6 months ago <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-interest-history-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#get-interest-history-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]forceLiquidationRec(Map<String, Object>)", "name": "forceLiquidationRec", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String forceLiquidationRec(Map<String, Object> parameters)", "original_string": "    public String forceLiquidationRec(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, FORCE_LIQUIDATION_RECORD, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Margin.java", "class_name": "Margin", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/margin/forceLiquidationRec\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nstartTime -- optional/long <br>\nendTime -- optional/long <br>\nisolatedSymbol -- optional/string <br>\ncurrent -- optional/long -- Currently querying page. Start from 1. Default:1 <br>\nsize -- optional/long -- Default:10 Max:100 <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-force-liquidation-record-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#get-force-liquidation-record-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]account(Map<String, Object>)", "name": "account", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String account(Map<String, Object> parameters)", "original_string": "    public String account(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, ACCOUNT, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Margin.java", "class_name": "Margin", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/margin/account\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-cross-margin-account-details-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#query-cross-margin-account-details-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]getOrder(Map<String, Object>)", "name": "getOrder", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String getOrder(Map<String, Object> parameters)", "original_string": "    public String getOrder(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, ORDER, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Margin.java", "class_name": "Margin", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/margin/order\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nsymbol -- mandatory/string <br>\nisIsolated -- optional/string -- for isolated margin or not, \"TRUE\", \"FALSE\",default \"FALSE\" <br>\norderId -- optional/long <br>\norigClientOrderId -- optional/string <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-margin-account-39-s-order-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#query-margin-account-39-s-order-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]getOpenOrders(Map<String, Object>)", "name": "getOpenOrders", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String getOpenOrders(Map<String, Object> parameters)", "original_string": "    public String getOpenOrders(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, OPEN_ORDERS, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Margin.java", "class_name": "Margin", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/margin/openOrders\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nsymbol -- optional/string <br>\nisIsolated -- optional/string -- for isolated margin or not, \"TRUE\", \"FALSE\",default \"FALSE\" <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-margin-account-39-s-open-orders-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#query-margin-account-39-s-open-orders-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]getAllOrders(Map<String, Object>)", "name": "getAllOrders", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String getAllOrders(Map<String, Object> parameters)", "original_string": "    public String getAllOrders(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, ALL_ORDERS, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Margin.java", "class_name": "Margin", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/margin/allOrders\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nsymbol -- mandatory/string <br>\nisIsolated -- optional/string -- for isolated margin or not, \"TRUE\", \"FALSE\",default \"FALSE\" <br>\norderId -- optional/long <br>\nstartTime -- optional/long <br>\nendTime -- optional/long <br>\nlimit -- optional/int -- Default 500; max 500. <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-margin-account-39-s-all-orders-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#query-margin-account-39-s-all-orders-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]ocoOrder(Map<String, Object>)", "name": "ocoOrder", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String ocoOrder(Map<String, Object> parameters)", "original_string": "    public String ocoOrder(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        ParameterChecker.checkParameter(parameters, \"side\", String.class);\n        ParameterChecker.checkRequiredParameter(parameters, \"quantity\");\n        ParameterChecker.checkRequiredParameter(parameters, \"price\");\n        ParameterChecker.checkRequiredParameter(parameters, \"stopPrice\");\n        return requestHandler.sendSignedRequest(baseUrl, OCO_ORDER, parameters, HttpMethod.POST, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Margin.java", "class_name": "Margin", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nSend in a new OCO for a margin account.\n<br><br>\nPOST /sapi/v1/margin/order/oco\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nsymbol -- mandatory/string <br>\nisIsolated -- optional/string -- for isolated margin or not, \"TRUE\", \"FALSE\",default \"FALSE\" <br>\nlistClientOrderId -- optional/string -- A unique Id for the entire orderList <br>\nside -- mandatory/enum <br>\nquantity -- mandatory/decimal <br>\nlimitClientOrderId -- optional/string -- A unique Id for the limit order <br>\nprice -- mandatory/decimal <br>\nlimitIcebergQty -- optional/decimal <br>\nstopClientOrderId -- optional/string -- A unique Id for the stop loss/stop loss limit leg <br>\nstopPrice -- optional/decimal -- Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders. <br>\nstopLimitPrice -- optional/decimal -- If provided, stopLimitTimeInForce is required. <br>\nstopIcebergQty -- optional/enum -- NO_SIDE_EFFECT, MARGIN_BUY, AUTO_REPAY; default NO_SIDE_EFFECT. <br>\nstopLimitTimeInForce -- optional/enum -- GTC,IOC,FOK <br>\nnewOrderRespType -- optional/enum -- Set the response JSON. <br>\nsideEffectType -- optional/enum -- NO_SIDE_EFFECT, MARGIN_BUY, AUTO_REPAY, AUTO_BORROW_REPAY; default NO_SIDE_EFFECT. <br>\nselfTradePreventionMode -- optional/enum -- The possible supported values are EXPIRE_TAKER, EXPIRE_MAKER, EXPIRE_BOTH, NONE <br>\nautoRepayAtCancel -- optional/boolean -- Only for when it's a MARGIN_BUY or AUTO_BORROW_REPAY. Default: true (debt generated by the order needs to be repaid after cancellation.) <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#margin-account-new-oco-trade\">\n    https://binance-docs.github.io/apidocs/spot/en/#margin-account-new-oco-trade</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]cancelOcoOrder(Map<String, Object>)", "name": "cancelOcoOrder", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String cancelOcoOrder(Map<String, Object> parameters)", "original_string": "    public String cancelOcoOrder(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, ORDER_LIST, parameters, HttpMethod.DELETE, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Margin.java", "class_name": "Margin", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nCancel an entire Order List for a margin account.\n<br><br>\nDELETE /sapi/v1/margin/orderList\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nsymbol -- mandatory/string <br>\nisIsolated -- optional/string -- for isolated margin or not, \"TRUE\", \"FALSE\", default \"FALSE\" <br>\norderListId -- optional/long -- Either orderListId or listClientOrderId must be provided <br>\nlistClientOrderId -- optional/string -- Either orderListId or listClientOrderId must be provided<br>\nnewClientOrderId -- optional/string -- Used to uniquely identify this cancel. Automatically generated by default <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#margin-account-cancel-oco-trade\">\n    https://binance-docs.github.io/apidocs/spot/en/#margin-account-cancel-oco-trade</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]getOcoOrder(Map<String, Object>)", "name": "getOcoOrder", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String getOcoOrder(Map<String, Object> parameters)", "original_string": "    public String getOcoOrder(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, ORDER_LIST, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Margin.java", "class_name": "Margin", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nRetrieves a specific OCO based on provided optional parameters.\n<br><br>\nGET /sapi/v1/margin/orderList\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nsymbol -- optional/string -- mandatory for isolated margin, not supported for cross margin <br>\nisIsolated -- optional/string -- for isolated margin or not, \"TRUE\", \"FALSE\",default \"FALSE\" <br>\norderListId -- optional/long -- Either orderListId or listClientOrderId must be provided <br>\nlistClientOrderId -- optional/string -- Either orderListId or listClientOrderId must be provided<br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-margin-account-39-s-oco-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#query-margin-account-39-s-oco-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]getAllOcoOrders(Map<String, Object>)", "name": "getAllOcoOrders", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String getAllOcoOrders(Map<String, Object> parameters)", "original_string": "    public String getAllOcoOrders(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, GET_ALL_OCO, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Margin.java", "class_name": "Margin", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nRetrieves all OCO for a specific margin account based on provided optional parameters.\n<br><br>\nGET /sapi/v1/margin/allOrderList\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nsymbol -- optional/string -- mandatory for isolated margin, not supported for cross margin <br>\nisIsolated -- optional/string -- for isolated margin or not, \"TRUE\", \"FALSE\",default \"FALSE\" <br>\nfromId -- optional/long -- If supplied, neither startTime or endTime can be provided <br>\nstartTime -- optional/long <br>\nendTime -- optional/long <br>\nlimit -- optional/int -- Default Value: 500; Max Value: 1000 <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-margin-account-39-s-all-oco-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#query-margin-account-39-s-all-oco-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]getOcoOpenOrders(Map<String, Object>)", "name": "getOcoOpenOrders", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String getOcoOpenOrders(Map<String, Object> parameters)", "original_string": "    public String getOcoOpenOrders(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, GET_OPEN_OCO, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Margin.java", "class_name": "Margin", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/margin/openOrderList\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nsymbol -- optional/string -- mandatory for isolated margin, not supported for cross margin <br>\nisIsolated -- optional/string -- for isolated margin or not, \"TRUE\", \"FALSE\", default \"FALSE\" <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-margin-account-39-s-open-oco-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#query-margin-account-39-s-open-oco-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]trades(Map<String, Object>)", "name": "trades", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String trades(Map<String, Object> parameters)", "original_string": "    public String trades(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, MY_TRADES, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Margin.java", "class_name": "Margin", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/margin/myTrades\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nsymbol -- mandatory/string -- mandatory for isolated margin, not supported for cross margin <br>\nisIsolated -- optional/string -- for isolated margin or not, \"TRUE\", \"FALSE,default \"FALSE\" <br>\nstartTime -- optional/long <br>\nendTime -- optional/long <br>\nfromId -- optional/long -- TradeId to fetch from. Default gets most recent trades. <br>\nlimit -- optional/int -- Default Value: 500; Max Value: 1000 <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-margin-account-39-s-trade-list-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#query-margin-account-39-s-trade-list-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]maxBorrow(Map<String, Object>)", "name": "maxBorrow", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String maxBorrow(Map<String, Object> parameters)", "original_string": "    public String maxBorrow(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"asset\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, MAX_BORROW, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Margin.java", "class_name": "Margin", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/margin/maxBorrowable\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nasset -- mandatory/string <br>\nisIsolated -- optional/string -- for isolated margin or not, \"TRUE\", \"FALSE,default \"FALSE\" <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-max-borrow-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#query-max-borrow-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]maxTransferable(Map<String, Object>)", "name": "maxTransferable", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String maxTransferable(Map<String, Object> parameters)", "original_string": "    public String maxTransferable(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"asset\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, MAX_TRANSFERABLE, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Margin.java", "class_name": "Margin", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/margin/maxTransferable\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nasset -- mandatory/string <br>\nisIsolated -- optional/string -- for isolated margin or not, \"TRUE\", \"FALSE,default \"FALSE\" <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-max-transfer-out-amount-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#query-max-transfer-out-amount-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]isolatedAccount(Map<String, Object>)", "name": "isolatedAccount", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String isolatedAccount(Map<String, Object> parameters)", "original_string": "    public String isolatedAccount(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, ISOLATED_ACCOUNT, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Margin.java", "class_name": "Margin", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/margin/isolated/account\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nsymbols -- optional/string -- Max 5 symbols can be sent; separated by \",\". e.g. \"BTCUSDT,BNBUSDT,ADAUSDT\" <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-isolated-margin-account-info-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#query-isolated-margin-account-info-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]disableIsolatedAccount(Map<String, Object>)", "name": "disableIsolatedAccount", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String disableIsolatedAccount(Map<String, Object> parameters)", "original_string": "    public String disableIsolatedAccount(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, ISOLATED_ACCOUNT, parameters, HttpMethod.DELETE, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Margin.java", "class_name": "Margin", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nDELETE /sapi/v1/margin/isolated/account\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nsymbol -- mandatory/string <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#disable-isolated-margin-account-trade\">\n    https://binance-docs.github.io/apidocs/spot/en/#disable-isolated-margin-account-trade</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]enableIsolatedAccount(Map<String, Object>)", "name": "enableIsolatedAccount", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String enableIsolatedAccount(Map<String, Object> parameters)", "original_string": "    public String enableIsolatedAccount(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, ISOLATED_ACCOUNT, parameters, HttpMethod.POST, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Margin.java", "class_name": "Margin", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nEnable isolated margin account for a specific symbol.\n<br><br>\nPOST /sapi/v1/margin/isolated/account\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nsymbol -- mandatory/string <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#enable-isolated-margin-account-trade\">\n    https://binance-docs.github.io/apidocs/spot/en/#enable-isolated-margin-account-trade</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]getIsolatedAccountLimit(Map<String, Object>)", "name": "getIsolatedAccountLimit", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String getIsolatedAccountLimit(Map<String, Object> parameters)", "original_string": "    public String getIsolatedAccountLimit(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, ISOLATED_ACCOUNT_LIMIT, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Margin.java", "class_name": "Margin", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nQuery enabled isolated margin account limit.\n<br><br>\nGET /sapi/v1/margin/isolated/accountLimit\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-enabled-isolated-margin-account-limit-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#query-enabled-isolated-margin-account-limit-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]getAllIsolatedSymbols(Map<String, Object>)", "name": "getAllIsolatedSymbols", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String getAllIsolatedSymbols(Map<String, Object> parameters)", "original_string": "    public String getAllIsolatedSymbols(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, ALL_ISOLATED_SYMBOL, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Margin.java", "class_name": "Margin", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/margin/isolated/allPairs\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-all-isolated-margin-symbol-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#get-all-isolated-margin-symbol-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]bnbBurn(Map<String, Object>)", "name": "bnbBurn", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String bnbBurn(Map<String, Object> parameters)", "original_string": "    public String bnbBurn(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, BNB_BURN, parameters, HttpMethod.POST, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Margin.java", "class_name": "Margin", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nPOST /sapi/v1/bnbBurn\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nspotBNBBurn -- optional/string -- \"true\" or \"false\"; Determines whether to use BNB to pay for trading fees on SPOT <br>\ninterestBNBBurn -- optional/string -- \"true\" or \"false\"; Determines whether to use BNB to pay for margin loan's interest  <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#toggle-bnb-burn-on-spot-trade-and-margin-interest-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#toggle-bnb-burn-on-spot-trade-and-margin-interest-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]getBnbBurn(Map<String, Object>)", "name": "getBnbBurn", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String getBnbBurn(Map<String, Object> parameters)", "original_string": "    public String getBnbBurn(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, BNB_BURN, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Margin.java", "class_name": "Margin", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/bnbBurn\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-bnb-burn-status-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#get-bnb-burn-status-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]interestRateHistory(Map<String, Object>)", "name": "interestRateHistory", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String interestRateHistory(Map<String, Object> parameters)", "original_string": "    public String interestRateHistory(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"asset\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, INTEREST_RATE_HIST, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Margin.java", "class_name": "Margin", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/margin/interestRateHistory\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nasset -- mandatory/string -- asset,such as BTC <br>\nvipLevel -- optional/int -- Default: user's vip level <br>\nstartTime -- optional/long -- Default: 7 days ago <br>\nendTime -- optional/long -- Default: present. Maximum range: 3 months. <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-margin-interest-rate-history-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#query-margin-interest-rate-history-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]crossMarginData(Map<String, Object>)", "name": "crossMarginData", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String crossMarginData(Map<String, Object> parameters)", "original_string": "    public String crossMarginData(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, CROSS_MARGIN_DATA, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Margin.java", "class_name": "Margin", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGet cross margin fee data collection with any vip level or user's current specific data as https://www.binance.com/en/margin-fee.\n<br><br>\nGET /sapi/v1/margin/crossMarginData\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nvipLevel -- optional/int -- \tUser's current specific margin data will be returned if vipLevel is omitted <br>\ncoin -- optional/string <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-cross-margin-fee-data-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#query-cross-margin-fee-data-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]crossMarginCollateralRatio()", "name": "crossMarginCollateralRatio", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String crossMarginCollateralRatio()", "original_string": "    public String crossMarginCollateralRatio() {\n        return requestHandler.sendApiRequest(baseUrl, CROSS_MARGIN_COLLATERAL_RATIO, null, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Margin.java", "class_name": "Margin", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGet cross margin collateral ratio\n\n<br><br>\nGET /sapi/v1/margin/crossMarginCollateralRatio\n<br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#cross-margin-collateral-ratio-market_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#cross-margin-collateral-ratio-market_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]adjustCrossMarginMaxLeverage(Map<String, Object>)", "name": "adjustCrossMarginMaxLeverage", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String adjustCrossMarginMaxLeverage(Map<String, Object> parameters)", "original_string": "    public String adjustCrossMarginMaxLeverage(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"maxLeverage\", Integer.class);\n        return requestHandler.sendSignedRequest(baseUrl, ADJUST_CROSS_MARGIN_MAX_LEVERAGE, parameters, HttpMethod.POST, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Margin.java", "class_name": "Margin", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nAdjust cross margin max leverage\n\n<br><br>\nPOST /sapi/v1/margin/max-leverage\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nmaxLeverage -- mandatory/integer -- Can only adjust to 3, 5 or 10. Example: maxLeverage=10 for Cross Margin Pro, maxLeverage = 5 or 3 for Cross Margin Classic <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#adjust-cross-margin-max-leverage-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#adjust-cross-margin-max-leverage-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]isolatedMarginData(Map<String, Object>)", "name": "isolatedMarginData", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String isolatedMarginData(Map<String, Object> parameters)", "original_string": "    public String isolatedMarginData(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, ISOLATED_MARGIN_DATA, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Margin.java", "class_name": "Margin", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGet isolated margin fee data collection with any vip level or user's current specific data as https://www.binance.com/en/margin-fee.\n<br><br>\nGET /sapi/v1/margin/isolatedMarginData\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nvipLevel -- optional/int -- \tUser's current specific margin data will be returned if vipLevel is omitted <br>\nsymbol -- optional/string <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-isolated-margin-fee-data-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#query-isolated-margin-fee-data-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]isolatedMarginTier(Map<String, Object>)", "name": "isolatedMarginTier", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String isolatedMarginTier(Map<String, Object> parameters)", "original_string": "    public String isolatedMarginTier(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, ISOLATED_MARGIN_TIER, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Margin.java", "class_name": "Margin", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGet isolated margin tier data collection with any tier as https://www.binance.com/en/margin-data.\n<br><br>\nGET /sapi/v1/margin/isolatedMarginTier\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nsymbol -- mandatory/string <br>\ntier -- optional/string -- All margin tier data will be returned if tier is omitted <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-isolated-margin-tier-data-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#query-isolated-margin-tier-data-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]orderRateLimit(Map<String, Object>)", "name": "orderRateLimit", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String orderRateLimit(Map<String, Object> parameters)", "original_string": "    public String orderRateLimit(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, ORDER_RATE_LIMIT, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Margin.java", "class_name": "Margin", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nDisplays the user's current margin order count usage for all intervals.\n<br><br>\nGET /sapi/v1/margin/rateLimit/order\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nisIsolated -- optional/string -- for isolated margin or not, \"TRUE\", \"FALSE\", default \"FALSE\" <br>\nsymbol -- optional/string -- isolated symbol, mandatory for isolated margin <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-current-margin-order-count-usage-trade\">\n    https://binance-docs.github.io/apidocs/spot/en/#query-current-margin-order-count-usage-trade</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]availableInventory(Map<String, Object>)", "name": "availableInventory", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String availableInventory(Map<String, Object> parameters)", "original_string": "    public String availableInventory(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"type\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, AVAILABLE_INVENTORY, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Margin.java", "class_name": "Margin", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGet the available margin inventory\n<br><br>\nGET /sapi/v1/margin/available-inventory\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\ntype -- mandatory/string -- MARGIN, ISOLATED<br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-margin-available-inventory-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#query-margin-available-inventory-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]capitalFlow(Map<String, Object>)", "name": "capitalFlow", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String capitalFlow(Map<String, Object> parameters)", "original_string": "    public String capitalFlow(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, CAPITAL_FLOW, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Margin.java", "class_name": "Margin", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGet cross or isolated margin capital flow\n\n<br><br>\nGET /sapi/v1/margin/capital-flow\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nasset -- optional/string <br>\nsymbol -- optional/string -- Required when querying isolated margin data <br>\ntype -- optional/string -- MARGIN, ISOLATED <br>\nstartTime -- optional/long -- Only supports querying the data of the last 90 days <br>\nendTime -- optional/long -- UTC timestamp in ms <br>\nfromId -- optional/long -- If fromId is set, the data with \"id\" above \"fromId\" will be returned. Otherwise the latest data will be returned <br>\nlimit -- optional/long -- The number of data items returned each time is limited. Default 500; Max 1000. <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-cross-or-isolated-margin-capital-flow-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#get-cross-or-isolated-margin-capital-flow-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]delistSchedule(Map<String, Object>)", "name": "delistSchedule", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String delistSchedule(Map<String, Object> parameters)", "original_string": "    public String delistSchedule(Map<String, Object> parameters) {\n        return requestHandler.sendApiRequest(baseUrl, DELIST_SCHEDULE, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Margin.java", "class_name": "Margin", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGet tokens or symbols delist schedule for cross margin and isolated margin\n\n<br><br>\nGET /sapi/v1/margin/delist-schedule\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-tokens-or-symbols-delist-schedule-for-cross-margin-and-isolated-margin-market_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#get-tokens-or-symbols-delist-schedule-for-cross-margin-and-isolated-margin-market_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]nextHourlyInterestRate(Map<String, Object>)", "name": "nextHourlyInterestRate", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String nextHourlyInterestRate(Map<String, Object> parameters)", "original_string": "    public String nextHourlyInterestRate(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"assets\", String.class);\n        ParameterChecker.checkParameter(parameters, \"isIsolated\", Boolean.class);\n        return requestHandler.sendSignedRequest(baseUrl, NEXT_HOURLY_INTEREST_RATE, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Margin.java", "class_name": "Margin", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGet the next hourly interest estimation\n\n<br><br>\nGET /sapi/v1/margin/next-hourly-interest-rate\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nassets -- mandatory/string -- List of assets, separated by commas, up to 20 <br>\nisIsolated -- mandatory/boolean -- Whether it's for isolated margin or not: \"TRUE\", \"FALSE\" <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-a-future-hourly-interest-rate-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#get-a-future-hourly-interest-rate-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]smallLiabilityAssets(Map<String, Object>)", "name": "smallLiabilityAssets", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String smallLiabilityAssets(Map<String, Object> parameters)", "original_string": "    public String smallLiabilityAssets(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, SMALL_LIABILITY_ASSETS, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Margin.java", "class_name": "Margin", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nQuery the assets suitable for small liability exchanges.\n\n<br><br>\nGET /sapi/v1/margin/exchange-small-liability\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-small-liability-exchange-coin-list-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#get-small-liability-exchange-coin-list-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]exchangeSmallLiability(Map<String, Object>)", "name": "exchangeSmallLiability", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String exchangeSmallLiability(Map<String, Object> parameters)", "original_string": "    public String exchangeSmallLiability(Map<String, Object> parameters) {\n        ParameterChecker.checkRequiredParameter(parameters, \"assetNames\");\n        return requestHandler.sendSignedRequest(baseUrl, EXCHANGE_SMALL_LIABILITY, parameters, HttpMethod.POST, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Margin.java", "class_name": "Margin", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nConvert cross margin assets with low liability value\n\n<br><br>\nPOST /sapi/v1/margin/exchange-small-liability\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nassetNames - mandatory/array -- List of asset names. Example: assetNames = BTC,ETH <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#small-liability-exchange-margin\">\n    https://binance-docs.github.io/apidocs/spot/en/#small-liability-exchange-margin</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]smallLiabilityExchangeHistory(Map<String, Object>)", "name": "smallLiabilityExchangeHistory", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String smallLiabilityExchangeHistory(Map<String, Object> parameters)", "original_string": "    public String smallLiabilityExchangeHistory(Map<String, Object> parameters) {\n        ParameterChecker.checkRequiredParameter(parameters, \"current\");\n        ParameterChecker.checkRequiredParameter(parameters, \"size\");\n        return requestHandler.sendSignedRequest(baseUrl, SMALL_LIABILITY_EXCHANGE_HISTORY, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Margin.java", "class_name": "Margin", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGet the conversion history of low liabilities\n\n<br><br>\nGET /sapi/v1/margin/exchange-small-liability-history\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\ncurrent -- mandatory/int -- Current querying page. Start from 1. Default:1 <br>\nsize --mandatory/int -- Default:10 Max:100 <br>\nstartTime -- optional/long -- Default: 30 days from current timestamp <br>\nendTime -- optional/long -- Default: present timestamp <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-small-liability-exchange-history-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#get-small-liability-exchange-history-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]leverageBracket()", "name": "leverageBracket", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String leverageBracket()", "original_string": "    public String leverageBracket() {\n        return requestHandler.sendApiRequest(baseUrl, LEVERAGE_BRACKET, null, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Margin.java", "class_name": "Margin", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGet the liability assets leverage bracket in Cross Margin Pro Mode\n\n<br><br>\nGET /sapi/v1/margin/leverageBracket\n<br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-liability-coin-leverage-bracket-in-cross-margin-pro-mode-market_data\">\n     https://binance-docs.github.io/apidocs/spot/en/#query-liability-coin-leverage-bracket-in-cross-margin-pro-mode-market_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]tradeCoeff(Map<String, Object>)", "name": "tradeCoeff", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String tradeCoeff(Map<String, Object> parameters)", "original_string": "    public String tradeCoeff(Map<String, Object> parameters) {\n        return requestHandler.sendApiRequest(baseUrl, TRADE_COEFF, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Margin.java", "class_name": "Margin", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGet personal margin level information\n\n<br><br>\nGET /sapi/v1/margin/tradeCoeff\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-summary-of-margin-account-user_data\">\n     https://binance-docs.github.io/apidocs/spot/en/#get-summary-of-margin-account-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/GiftCard.java.GiftCard.[]GiftCard(String,String,String,boolean,ProxyAuth)", "name": "GiftCard", "arg_nums": 5, "params": [{"name": "baseUrl", "type": "String"}, {"name": "apiKey", "type": "String"}, {"name": "secretKey", "type": "String"}, {"name": "showLimitUsage", "type": "boolean"}, {"name": "proxy", "type": "ProxyAuth"}], "return_type": "", "signature": "public GiftCard(String baseUrl, String apiKey, String secretKey, boolean showLimitUsage, ProxyAuth proxy)", "original_string": "    public GiftCard(String baseUrl, String apiKey, String secretKey, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, new HmacSignatureGenerator(secretKey), proxy);\n        this.showLimitUsage = showLimitUsage;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/GiftCard.java", "class_name": "GiftCard", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/GiftCard.java.GiftCard", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/GiftCard.java.GiftCard.[]GiftCard(String,String,SignatureGenerator,boolean,ProxyAuth)", "name": "GiftCard", "arg_nums": 5, "params": [{"name": "baseUrl", "type": "String"}, {"name": "apiKey", "type": "String"}, {"name": "signatureGenerator", "type": "SignatureGenerator"}, {"name": "showLimitUsage", "type": "boolean"}, {"name": "proxy", "type": "ProxyAuth"}], "return_type": "", "signature": "public GiftCard(String baseUrl, String apiKey, SignatureGenerator signatureGenerator, boolean showLimitUsage, ProxyAuth proxy)", "original_string": "    public GiftCard(String baseUrl, String apiKey, SignatureGenerator signatureGenerator, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, signatureGenerator, proxy);\n        this.showLimitUsage = showLimitUsage;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/GiftCard.java", "class_name": "GiftCard", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/GiftCard.java.GiftCard", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/GiftCard.java.GiftCard.[String]createCode(Map<String, Object>)", "name": "createCode", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String createCode(Map<String, Object> parameters)", "original_string": "    public String createCode(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"token\", String.class);\n        ParameterChecker.checkParameter(parameters, \"amount\", Double.class);\n        return requestHandler.sendSignedRequest(baseUrl, CREATE_CODE, parameters, HttpMethod.POST, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/GiftCard.java", "class_name": "GiftCard", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/GiftCard.java.GiftCard", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nThis API is for creating a Binance Code. To get started with, please make sure:\n\nYou have a Binance account <br>\nYou have passed kyc <br>\nYou have a sufficient balance in your Binance funding wallet <br>\nYou need Enable Withdrawals for the API Key which requests this endpoint. <br>\n<br><br>\nPOST /sapi/v1/giftcard/createCode\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\ntoken -- mandatory/string -- The coin type contained in the Binance Code <br>\namount -- mandatory/double -- The amount of the coin <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#create-a-single-token-gift-card-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#create-a-single-token-gift-card-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/GiftCard.java.GiftCard.[String]redeemCode(Map<String, Object>)", "name": "redeemCode", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String redeemCode(Map<String, Object> parameters)", "original_string": "    public String redeemCode(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"code\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, REDEEM_CODE, parameters, HttpMethod.POST, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/GiftCard.java", "class_name": "GiftCard", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/GiftCard.java.GiftCard", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nThis API is for redeeming the Binance Code. Once redeemed, the coins will be deposited in your funding wallet. <br>\nPlease note that if you enter the wrong code 5 times within 24 hours,\nyou will no longer be able to redeem any Binance Code that day. <br>\n<br><br>\nPOST /sapi/v1/giftcard/redeemCode\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\ncode -- mandatory/string -- Binance code <br>\nexternalUid -- optional/string -- Each external unique ID represents a unique user on the partner platform.\n                                 The function helps you to identify the redemption behavior of different users,\n                                 such as redemption frequency and amount. It also helps risk and limit control of a single account,\n                                 such as daily limit on redemption volume, frequency, and incorrect number of entries. This will also prevent a single user account reach the partner's daily redemption limits. We strongly recommend you to use this feature and transfer us the User ID of your users if you have different users redeeming Binance codes on your platform.\n                                 To protect user data privacy, you may choose to transfer the user id in any desired format (max. 400 characters). <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#redeem-a-binance-gift-card-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#redeem-a-binance-gift-card-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/GiftCard.java.GiftCard.[String]verify(Map<String, Object>)", "name": "verify", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String verify(Map<String, Object> parameters)", "original_string": "    public String verify(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"referenceNo\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, VERIFY, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/GiftCard.java", "class_name": "GiftCard", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/GiftCard.java.GiftCard", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nThis API is for verifying whether the Binance Code is valid or not by entering Binance Code or reference number. <br>\nPlease note that if you enter the wrong binance code 5 times within an hour,\nyou will no longer be able to verify any binance code for that hour. <br>\n<br><br>\nGET /sapi/v1/giftcard/verify\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nreferenceNo -- mandatory/string -- reference number <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#verify-binance-gift-card-by-gift-card-number-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#verify-binance-gift-card-by-gift-card-number-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/GiftCard.java.GiftCard.[String]rsaPublicKey(Map<String, Object>)", "name": "rsaPublicKey", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String rsaPublicKey(Map<String, Object> parameters)", "original_string": "    public String rsaPublicKey(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, RSA_PUB, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/GiftCard.java", "class_name": "GiftCard", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/GiftCard.java.GiftCard", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nThis API is for fetching the RSA Public Key. This RSA Public key will be used to encrypt the card code.\n<br><br>\nGET /sapi/v1/giftcard/cryptography/rsa-public-key\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#fetch-rsa-public-key-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#fetch-rsa-public-key-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/GiftCard.java.GiftCard.[String]createDualTokensCode(Map<String, Object>)", "name": "createDualTokensCode", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String createDualTokensCode(Map<String, Object> parameters)", "original_string": "    public String createDualTokensCode(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"baseToken\", String.class);\n        ParameterChecker.checkParameter(parameters, \"faceToken\", String.class);\n        ParameterChecker.checkParameter(parameters, \"baseTokenAmount\", Double.class);\n        return requestHandler.sendSignedRequest(baseUrl, CREATE_DUAL_TOKEN_CODE, parameters, HttpMethod.POST, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/GiftCard.java", "class_name": "GiftCard", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/GiftCard.java.GiftCard", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nThis API is for buying a fixed-value Binance Code, which means your Binance Code will be redeemable to a token that is different to the token that you are paying in. If the token you\u2019re paying and the redeemable token are the same, please use the Create Binance Code endpoint.\nYou can use supported crypto currency or fiat token as baseToken to buy Binance Code that is redeemable to your chosen faceToken.\nOnce successfully purchased, the amount of baseToken would be deducted from your funding wallet.\n\nTo get started with, please make sure:\n- You have a Binance account\n- You have passed kyc\n- You have a sufficient balance in your Binance funding wallet\n- You need Enable Withdrawals for the API Key which requests this endpoint.\n\n<br><br>\nPOST /sapi/v1/giftcard/buyCode\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nbaseToken -- mandatory/string -- The token you want to pay, example BUSD <br>\nfaceToken -- mandatory/string -- The token you want to buy, example BNB. If faceToken = baseToken, it's the same as createCode endpoint. <br>\nbaseTokenAmount -- mandatory/double -- The base token asset quantity, example 1.002 <br>\ndiscount -- optional/double -- The discount rate, example 0.1 <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#create-a-dual-token-gift-card-fixed-value-discount-feature-trade\">\n     https://binance-docs.github.io/apidocs/spot/en/#create-a-dual-token-gift-card-fixed-value-discount-feature-trade</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/GiftCard.java.GiftCard.[String]tokensLimit(Map<String, Object>)", "name": "tokensLimit", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String tokensLimit(Map<String, Object> parameters)", "original_string": "    public String tokensLimit(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"baseToken\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, TOKEN_LIMIT, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/GiftCard.java", "class_name": "GiftCard", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/GiftCard.java.GiftCard", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nThis API is to help you verify which tokens are available for you to purchase fixed-value gift cards.\n\n<br><br>\nGET /sapi/v1/giftcard/buyCode/token-limit\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nbaseToken -- mandatory/string -- The token you want to pay, example BUSD <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#fetch-token-limit-user_data\">\n     https://binance-docs.github.io/apidocs/spot/en/#fetch-token-limit-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Rebate.java.Rebate.[]Rebate(String,String,String,boolean,ProxyAuth)", "name": "Rebate", "arg_nums": 5, "params": [{"name": "baseUrl", "type": "String"}, {"name": "apiKey", "type": "String"}, {"name": "secretKey", "type": "String"}, {"name": "showLimitUsage", "type": "boolean"}, {"name": "proxy", "type": "ProxyAuth"}], "return_type": "", "signature": "public Rebate(String baseUrl, String apiKey, String secretKey, boolean showLimitUsage, ProxyAuth proxy)", "original_string": "    public Rebate(String baseUrl, String apiKey, String secretKey, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, new HmacSignatureGenerator(secretKey), proxy);\n        this.showLimitUsage = showLimitUsage;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Rebate.java", "class_name": "Rebate", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Rebate.java.Rebate", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Rebate.java.Rebate.[]Rebate(String,String,SignatureGenerator,boolean,ProxyAuth)", "name": "Rebate", "arg_nums": 5, "params": [{"name": "baseUrl", "type": "String"}, {"name": "apiKey", "type": "String"}, {"name": "signatureGenerator", "type": "SignatureGenerator"}, {"name": "showLimitUsage", "type": "boolean"}, {"name": "proxy", "type": "ProxyAuth"}], "return_type": "", "signature": "public Rebate(String baseUrl, String apiKey, SignatureGenerator signatureGenerator, boolean showLimitUsage, ProxyAuth proxy)", "original_string": "    public Rebate(String baseUrl, String apiKey, SignatureGenerator signatureGenerator, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, signatureGenerator, proxy);\n        this.showLimitUsage = showLimitUsage;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Rebate.java", "class_name": "Rebate", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Rebate.java.Rebate", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Rebate.java.Rebate.[String]taxQuery(Map<String, Object>)", "name": "taxQuery", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String taxQuery(Map<String, Object> parameters)", "original_string": "    public String taxQuery(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, TAX_QUERY, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Rebate.java", "class_name": "Rebate", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Rebate.java.Rebate", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/rebate/taxQuery\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nstartTime -- optional/long <br>\nendTime -- optional/long <br>\npage -- optional/int -- \tDefault 1 <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-spot-rebate-history-records-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#get-spot-rebate-history-records-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/C2C.java.C2C.[]C2C(String,String,String,boolean,ProxyAuth)", "name": "C2C", "arg_nums": 5, "params": [{"name": "baseUrl", "type": "String"}, {"name": "apiKey", "type": "String"}, {"name": "secretKey", "type": "String"}, {"name": "showLimitUsage", "type": "boolean"}, {"name": "proxy", "type": "ProxyAuth"}], "return_type": "", "signature": "public C2C(String baseUrl, String apiKey, String secretKey, boolean showLimitUsage, ProxyAuth proxy)", "original_string": "    public C2C(String baseUrl, String apiKey, String secretKey, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, new HmacSignatureGenerator(secretKey), proxy);\n        this.showLimitUsage = showLimitUsage;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/C2C.java", "class_name": "C2C", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/C2C.java.C2C", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/C2C.java.C2C.[]C2C(String,String,SignatureGenerator,boolean,ProxyAuth)", "name": "C2C", "arg_nums": 5, "params": [{"name": "baseUrl", "type": "String"}, {"name": "apiKey", "type": "String"}, {"name": "signatureGenerator", "type": "SignatureGenerator"}, {"name": "showLimitUsage", "type": "boolean"}, {"name": "proxy", "type": "ProxyAuth"}], "return_type": "", "signature": "public C2C(String baseUrl, String apiKey, SignatureGenerator signatureGenerator, boolean showLimitUsage, ProxyAuth proxy)", "original_string": "    public C2C(String baseUrl, String apiKey, SignatureGenerator signatureGenerator, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, signatureGenerator, proxy);\n        this.showLimitUsage = showLimitUsage;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/C2C.java", "class_name": "C2C", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/C2C.java.C2C", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/C2C.java.C2C.[String]listUserOrderHistory(Map<String, Object>)", "name": "listUserOrderHistory", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String listUserOrderHistory(Map<String, Object> parameters)", "original_string": "    public String listUserOrderHistory(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"tradeType\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, LIST_ORDER_HISTORY, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/C2C.java", "class_name": "C2C", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/C2C.java.C2C", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/c2c/orderMatch/listUserOrderHistory\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\ntradeType -- mandatory/string -- BUY, SELL <br>\nstartTimestamp -- optional/long <br>\nendTimestamp -- optional/long <br>\npage -- optional/int -- default 1 <br>\nrows -- optional/int -- default 100, max 500 <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-c2c-trade-history-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#get-c2c-trade-history-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/UserData.java.UserData.[]UserData(String,String,boolean,ProxyAuth)", "name": "UserData", "arg_nums": 4, "params": [{"name": "baseUrl", "type": "String"}, {"name": "apiKey", "type": "String"}, {"name": "showLimitUsage", "type": "boolean"}, {"name": "proxy", "type": "ProxyAuth"}], "return_type": "", "signature": "public UserData(String baseUrl, String apiKey, boolean showLimitUsage, ProxyAuth proxy)", "original_string": "    public UserData(String baseUrl, String apiKey, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, proxy);\n        this.showLimitUsage = showLimitUsage;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/UserData.java", "class_name": "UserData", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/UserData.java.UserData", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/UserData.java.UserData.[String]createListenKey()", "name": "createListenKey", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String createListenKey()", "original_string": "    public String createListenKey() {\n        return requestHandler.sendApiRequest(baseUrl, SPOT_LISTEN_KEY, null, HttpMethod.POST, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/UserData.java", "class_name": "UserData", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/UserData.java.UserData", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nStart a new user data stream. The stream will close after 60 minutes unless a keepalive is sent.\nIf the account has an active listenKey, that listenKey will be returned and its validity will be extended for 60 minutes.\n<br><br>\nPOST /api/v3/userDataStream\n<br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#listen-key-spot\">\n    https://binance-docs.github.io/apidocs/spot/en/#listen-key-spot</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/UserData.java.UserData.[String]extendListenKey(Map<String, Object>)", "name": "extendListenKey", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String extendListenKey(Map<String, Object> parameters)", "original_string": "    public String extendListenKey(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"listenKey\", String.class);\n        return requestHandler.sendApiRequest(baseUrl, SPOT_LISTEN_KEY, parameters, HttpMethod.PUT, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/UserData.java", "class_name": "UserData", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/UserData.java.UserData", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nKeepalive a user data stream to prevent a time out. User data streams will close after 60 minutes.\nIt's recommended to send a ping about every 30 minutes.\n<br><br>\nPUT /api/v3/userDataStream\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nlistenKey -- mandatory/string <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#listen-key-spot\">\n    https://binance-docs.github.io/apidocs/spot/en/#listen-key-spot</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/UserData.java.UserData.[String]closeListenKey(Map<String, Object>)", "name": "closeListenKey", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String closeListenKey(Map<String, Object> parameters)", "original_string": "    public String closeListenKey(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"listenKey\", String.class);\n        return requestHandler.sendApiRequest(baseUrl, SPOT_LISTEN_KEY, parameters, HttpMethod.DELETE, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/UserData.java", "class_name": "UserData", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/UserData.java.UserData", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nClose out a user data stream.\n<br><br>\nDELETE /api/v3/userDataStream\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nlistenKey -- mandatory/string <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#listen-key-spot\">\n    https://binance-docs.github.io/apidocs/spot/en/#listen-key-spot</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/UserData.java.UserData.[String]createMarginListenKey()", "name": "createMarginListenKey", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String createMarginListenKey()", "original_string": "    public String createMarginListenKey() {\n        return requestHandler.sendApiRequest(baseUrl, MARGIN_LISTEN_KEY, null, HttpMethod.POST, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/UserData.java", "class_name": "UserData", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/UserData.java.UserData", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nPOST /sapi/v1/userDataStream\n<br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#listen-key-margin\">\n    https://binance-docs.github.io/apidocs/spot/en/#listen-key-margin</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/UserData.java.UserData.[String]extendMarginListenKey(Map<String, Object>)", "name": "extendMarginListenKey", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String extendMarginListenKey(Map<String, Object> parameters)", "original_string": "    public String extendMarginListenKey(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"listenKey\", String.class);\n        return requestHandler.sendApiRequest(baseUrl, MARGIN_LISTEN_KEY, parameters, HttpMethod.PUT, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/UserData.java", "class_name": "UserData", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/UserData.java.UserData", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nPUT /sapi/v1/userDataStream\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nlistenKey -- mandatory/string <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#listen-key-margin\">\n    https://binance-docs.github.io/apidocs/spot/en/#listen-key-margin</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/UserData.java.UserData.[String]closeMarginListenKey(Map<String, Object>)", "name": "closeMarginListenKey", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String closeMarginListenKey(Map<String, Object> parameters)", "original_string": "    public String closeMarginListenKey(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"listenKey\", String.class);\n        return requestHandler.sendApiRequest(baseUrl, MARGIN_LISTEN_KEY, parameters, HttpMethod.DELETE, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/UserData.java", "class_name": "UserData", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/UserData.java.UserData", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nDELETE /sapi/v1/userDataStream\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nlistenKey -- mandatory/string <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#listen-key-margin\">\n    https://binance-docs.github.io/apidocs/spot/en/#listen-key-margin</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/UserData.java.UserData.[String]createIsolatedMarginListenKey(Map<String, Object>)", "name": "createIsolatedMarginListenKey", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String createIsolatedMarginListenKey(Map<String, Object> parameters)", "original_string": "    public String createIsolatedMarginListenKey(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        return requestHandler.sendApiRequest(baseUrl, ISOLATED_LISTEN_KEY, parameters, HttpMethod.POST, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/UserData.java", "class_name": "UserData", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/UserData.java.UserData", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nPOST /sapi/v1/userDataStream/isolated\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nsymbol -- mandatory/string <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#listen-key-isolated-margin\">\n    https://binance-docs.github.io/apidocs/spot/en/#listen-key-isolated-margin</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/UserData.java.UserData.[String]extendIsolatedMarginListenKey(Map<String, Object>)", "name": "extendIsolatedMarginListenKey", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String extendIsolatedMarginListenKey(Map<String, Object> parameters)", "original_string": "    public String extendIsolatedMarginListenKey(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        ParameterChecker.checkParameter(parameters, \"listenKey\", String.class);\n        return requestHandler.sendApiRequest(baseUrl, ISOLATED_LISTEN_KEY, parameters, HttpMethod.PUT, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/UserData.java", "class_name": "UserData", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/UserData.java.UserData", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nPUT /sapi/v1/userDataStream/isolated\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nsymbol -- mandatory/string <br>\nlistenKey -- mandatory/string <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#listen-key-isolated-margin\">\n    https://binance-docs.github.io/apidocs/spot/en/#listen-key-isolated-margin</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/UserData.java.UserData.[String]closeIsolatedMarginListenKey(Map<String, Object>)", "name": "closeIsolatedMarginListenKey", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String closeIsolatedMarginListenKey(Map<String, Object> parameters)", "original_string": "    public String closeIsolatedMarginListenKey(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        ParameterChecker.checkParameter(parameters, \"listenKey\", String.class);\n        return requestHandler.sendApiRequest(baseUrl, ISOLATED_LISTEN_KEY, parameters, HttpMethod.DELETE, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/UserData.java", "class_name": "UserData", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/UserData.java.UserData", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nDELETE /sapi/v1/userDataStream/isolated\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nsymbol -- mandatory/string <br>\nlistenKey -- mandatory/string <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#listen-key-isolated-margin\">\n    https://binance-docs.github.io/apidocs/spot/en/#listen-key-isolated-margin</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Staking.java.Staking.[]Staking(String,String,String,boolean,ProxyAuth)", "name": "Staking", "arg_nums": 5, "params": [{"name": "baseUrl", "type": "String"}, {"name": "apiKey", "type": "String"}, {"name": "secretKey", "type": "String"}, {"name": "showLimitUsage", "type": "boolean"}, {"name": "proxy", "type": "ProxyAuth"}], "return_type": "", "signature": "public Staking(String baseUrl, String apiKey, String secretKey, boolean showLimitUsage, ProxyAuth proxy)", "original_string": "    public Staking(String baseUrl, String apiKey, String secretKey, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, new HmacSignatureGenerator(secretKey), proxy);\n        this.showLimitUsage = showLimitUsage;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Staking.java", "class_name": "Staking", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Staking.java.Staking", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Staking.java.Staking.[]Staking(String,String,SignatureGenerator,boolean,ProxyAuth)", "name": "Staking", "arg_nums": 5, "params": [{"name": "baseUrl", "type": "String"}, {"name": "apiKey", "type": "String"}, {"name": "signatureGenerator", "type": "SignatureGenerator"}, {"name": "showLimitUsage", "type": "boolean"}, {"name": "proxy", "type": "ProxyAuth"}], "return_type": "", "signature": "public Staking(String baseUrl, String apiKey, SignatureGenerator signatureGenerator, boolean showLimitUsage, ProxyAuth proxy)", "original_string": "    public Staking(String baseUrl, String apiKey, SignatureGenerator signatureGenerator, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, signatureGenerator, proxy);\n        this.showLimitUsage = showLimitUsage;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Staking.java", "class_name": "Staking", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Staking.java.Staking", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Staking.java.Staking.[String]subEthStaking(Map<String, Object>)", "name": "subEthStaking", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String subEthStaking(Map<String, Object> parameters)", "original_string": "    public String subEthStaking(Map<String, Object> parameters) {\n        ParameterChecker.checkRequiredParameter(parameters, \"amount\");\n        return requestHandler.sendSignedRequest(baseUrl, SUB_ETH_STAKING, parameters, HttpMethod.POST, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Staking.java", "class_name": "Staking", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Staking.java.Staking", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nStake ETH to get WBETH\n\n<br><br>\nPOST /sapi/v2/eth-staking/eth/stake\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\namount -- mandatory/decimal -- Amount in ETH, limit 4 decimals <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#subscribe-eth-staking-trade\">\n    https://binance-docs.github.io/apidocs/spot/en/#subscribe-eth-staking-trade</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Staking.java.Staking.[String]redeemEthStaking(Map<String, Object>)", "name": "redeemEthStaking", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String redeemEthStaking(Map<String, Object> parameters)", "original_string": "    public String redeemEthStaking(Map<String, Object> parameters) {\n        ParameterChecker.checkRequiredParameter(parameters, \"amount\");\n        return requestHandler.sendSignedRequest(baseUrl, REDEEM_ETH, parameters, HttpMethod.POST, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Staking.java", "class_name": "Staking", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Staking.java.Staking", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nRedeem WBETH or BETH and get ETH\n\n<br><br>\nPOST /sapi/v1/eth-staking/eth/redeem\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\namount -- mandatory/decimal -- Amount in ETH, limit 4 decimals <br>\nasset -- optional/string -- \"BETH\" or \"WBETH\", default \"BETH\" <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#redeem-eth-trade\">\n    https://binance-docs.github.io/apidocs/spot/en/#redeem-eth-trade</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Staking.java.Staking.[String]ethStakingSubHistory(Map<String, Object>)", "name": "ethStakingSubHistory", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String ethStakingSubHistory(Map<String, Object> parameters)", "original_string": "    public String ethStakingSubHistory(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, ETH_STAKING_HISTORY, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Staking.java", "class_name": "Staking", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Staking.java.Staking", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/eth-staking/eth/history/stakingHistory\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nstartTime -- optional/long <br>\nendTime -- optional/long <br>\ncurrent -- optional/long -- Currently querying page. Start from 1. Default:1 <br>\nsize -- optional/long -- Default: 10, Max: 100 <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-eth-staking-history-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#get-eth-staking-history-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Staking.java.Staking.[String]ethStakingRedeemHistory(Map<String, Object>)", "name": "ethStakingRedeemHistory", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String ethStakingRedeemHistory(Map<String, Object> parameters)", "original_string": "    public String ethStakingRedeemHistory(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, ETH_STAKING_REDEEM_HISTORY, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Staking.java", "class_name": "Staking", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Staking.java.Staking", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/eth-staking/eth/history/redemptionHistory\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nstartTime -- optional/long <br>\nendTime -- optional/long <br>\ncurrent -- optional/long -- Currently querying page. Start from 1. Default:1 <br>\nsize -- optional/long -- Default: 10, Max: 100 <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-eth-redemption-history-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#get-eth-redemption-history-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Staking.java.Staking.[String]ethStakingRewardsHistory(Map<String, Object>)", "name": "ethStakingRewardsHistory", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String ethStakingRewardsHistory(Map<String, Object> parameters)", "original_string": "    public String ethStakingRewardsHistory(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, ETH_STAKING_REWARDS_HISTORY, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Staking.java", "class_name": "Staking", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Staking.java.Staking", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/eth-staking/eth/history/rewardsHistory\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nstartTime -- optional/long <br>\nendTime -- optional/long <br>\ncurrent -- optional/long -- Currently querying page. Start from 1. Default:1 <br>\nsize -- optional/long -- Default: 10, Max: 100 <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-beth-rewards-distribution-history-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#get-beth-rewards-distribution-history-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Staking.java.Staking.[String]ethStakingQuota(Map<String, Object>)", "name": "ethStakingQuota", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String ethStakingQuota(Map<String, Object> parameters)", "original_string": "    public String ethStakingQuota(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, ETH_STAKING_QUOTA, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Staking.java", "class_name": "Staking", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Staking.java.Staking", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/eth-staking/eth/quota\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-current-eth-staking-quota-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#get-current-eth-staking-quota-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Staking.java.Staking.[String]ethStakingRateHistory(Map<String, Object>)", "name": "ethStakingRateHistory", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String ethStakingRateHistory(Map<String, Object> parameters)", "original_string": "    public String ethStakingRateHistory(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, ETH_STAKING_RATE_HISTORY, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Staking.java", "class_name": "Staking", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Staking.java.Staking", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/eth-staking/eth/history/rateHistory\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nstartTime -- optional/long <br>\nendTime -- optional/long <br>\ncurrent -- optional/long -- Currently querying page. Start from 1. Default:1 <br>\nsize -- optional/long -- Default: 10, Max: 100 <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-wbeth-rate-history-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#get-wbeth-rate-history-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Staking.java.Staking.[String]ethStakingAccount(Map<String, Object>)", "name": "ethStakingAccount", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String ethStakingAccount(Map<String, Object> parameters)", "original_string": "    public String ethStakingAccount(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, ETH_STAKING_ACCOUNT, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Staking.java", "class_name": "Staking", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Staking.java.Staking", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v2/eth-staking/account\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#eth-staking-account-v2-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#eth-staking-account-v2-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Staking.java.Staking.[String]wrapEthStakingWbeth(Map<String, Object>)", "name": "wrapEthStakingWbeth", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String wrapEthStakingWbeth(Map<String, Object> parameters)", "original_string": "    public String wrapEthStakingWbeth(Map<String, Object> parameters) {\n        ParameterChecker.checkRequiredParameter(parameters, \"amount\");\n        return requestHandler.sendSignedRequest(baseUrl, WRAP_WBETH, parameters, HttpMethod.POST, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Staking.java", "class_name": "Staking", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Staking.java.Staking", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nPOST /sapi/v1/eth-staking/wbeth/wrap\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\namount -- mandatory/decimal -- Amount in BETH, limit 4 decimals <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#wrap-beth-trade\">\n    https://binance-docs.github.io/apidocs/spot/en/#wrap-beth-trade</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Staking.java.Staking.[String]ethStakingWbethWrapHistory(Map<String, Object>)", "name": "ethStakingWbethWrapHistory", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String ethStakingWbethWrapHistory(Map<String, Object> parameters)", "original_string": "    public String ethStakingWbethWrapHistory(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, ETH_STAKING_WBETH_WRAP_HISTORY, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Staking.java", "class_name": "Staking", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Staking.java.Staking", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/eth-staking/wbeth/history/wrapHistory\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nstartTime -- optional/long <br>\nendTime -- optional/long <br>\ncurrent -- optional/long -- Currently querying page. Start from 1. Default:1 <br>\nsize -- optional/long -- Default: 10, Max: 100 <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-wbeth-wrap-history-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#get-wbeth-wrap-history-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Staking.java.Staking.[String]ethStakingWbethUnwrapHistory(Map<String, Object>)", "name": "ethStakingWbethUnwrapHistory", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String ethStakingWbethUnwrapHistory(Map<String, Object> parameters)", "original_string": "    public String ethStakingWbethUnwrapHistory(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, ETH_STAKING_WBETH_UNWRAP_HISTORY, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Staking.java", "class_name": "Staking", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Staking.java.Staking", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/eth-staking/wbeth/history/unwrapHistory\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nstartTime -- optional/long <br>\nendTime -- optional/long <br>\ncurrent -- optional/long -- Currently querying page. Start from 1. Default:1 <br>\nsize -- optional/long -- Default: 10, Max: 100 <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-wbeth-unwrap-history-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#get-wbeth-unwrap-history-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Staking.java.Staking.[String]ethStakingWbethRewardHistory(Map<String, Object>)", "name": "ethStakingWbethRewardHistory", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String ethStakingWbethRewardHistory(Map<String, Object> parameters)", "original_string": "    public String ethStakingWbethRewardHistory(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, ETH_STAKING_WBETH_REWARD_HISTORY, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Staking.java", "class_name": "Staking", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Staking.java.Staking", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/eth-staking/eth/history/wbethRewardsHistory\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nstartTime -- optional/long <br>\nendTime -- optional/long <br>\ncurrent -- optional/long -- Currently querying page. Start from 1. Default:1 <br>\nsize -- optional/long -- Default: 10, Max: 100 <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-wbeth-rewards-history-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#get-wbeth-rewards-history-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet.[]Wallet(String,String,String,boolean,ProxyAuth)", "name": "Wallet", "arg_nums": 5, "params": [{"name": "baseUrl", "type": "String"}, {"name": "apiKey", "type": "String"}, {"name": "secretKey", "type": "String"}, {"name": "showLimitUsage", "type": "boolean"}, {"name": "proxy", "type": "ProxyAuth"}], "return_type": "", "signature": "public Wallet(String baseUrl, String apiKey, String secretKey, boolean showLimitUsage, ProxyAuth proxy)", "original_string": "    public Wallet(String baseUrl, String apiKey, String secretKey, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, new HmacSignatureGenerator(secretKey), proxy);\n        this.showLimitUsage = showLimitUsage;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java", "class_name": "Wallet", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet.[]Wallet(String,String,SignatureGenerator,boolean,ProxyAuth)", "name": "Wallet", "arg_nums": 5, "params": [{"name": "baseUrl", "type": "String"}, {"name": "apiKey", "type": "String"}, {"name": "signatureGenerator", "type": "SignatureGenerator"}, {"name": "showLimitUsage", "type": "boolean"}, {"name": "proxy", "type": "ProxyAuth"}], "return_type": "", "signature": "public Wallet(String baseUrl, String apiKey, SignatureGenerator signatureGenerator, boolean showLimitUsage, ProxyAuth proxy)", "original_string": "    public Wallet(String baseUrl, String apiKey, SignatureGenerator signatureGenerator, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, signatureGenerator, proxy);\n        this.showLimitUsage = showLimitUsage;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java", "class_name": "Wallet", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet.[String]systemStatus()", "name": "systemStatus", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String systemStatus()", "original_string": "    public String systemStatus() {\n        return requestHandler.sendPublicRequest(baseUrl, SYSTEM_STATUS, null, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java", "class_name": "Wallet", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nFetch system status.\n<br><br>\nGET /sapi/v1/system/status\n<br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#system-status-system\">\n    https://binance-docs.github.io/apidocs/spot/en/#system-status-system</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet.[String]coinInfo(Map<String, Object>)", "name": "coinInfo", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String coinInfo(Map<String, Object> parameters)", "original_string": "    public String coinInfo(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, COIN_INFO, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java", "class_name": "Wallet", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGet information of coins (available for deposit and withdraw) for user.\n<br><br>\nGET /sapi/v1/capital/config/getall\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#all-coins-39-information-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#all-coins-39-information-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet.[String]accountSnapshot(Map<String, Object>)", "name": "accountSnapshot", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String accountSnapshot(Map<String, Object> parameters)", "original_string": "    public String accountSnapshot(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"type\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, ACCOUNT_SNAPSHOT, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java", "class_name": "Wallet", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n- The query time period must be less than 30 days\n- Support query within the last one month only\n- If startTime and endTime are both not sent, records from the last 7 days are returned by default\n<br><br>\nGET /sapi/v1/accountSnapshot\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\ntype -- mandatory/string -- \"SPOT\", \"MARGIN\", \"FUTURES\" <br>\nstartTime -- optional/long <br>\nendTime -- optional/long <br>\nlimit -- optional/int -- min 5, max 30, default 5 <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#daily-account-snapshot-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#daily-account-snapshot-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet.[String]disableFastWithdraw(Map<String, Object>)", "name": "disableFastWithdraw", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String disableFastWithdraw(Map<String, Object> parameters)", "original_string": "    public String disableFastWithdraw(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, DISABLE_FAST_WITHDRAW, parameters, HttpMethod.POST, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java", "class_name": "Wallet", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n- This request will disable fastwithdraw switch under your account.\n- You need to enable \"trade\" option for the api key which requests this endpoint.\n<br><br>\nPOST /sapi/v1/account/disableFastWithdrawSwitch\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#disable-fast-withdraw-switch-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#disable-fast-withdraw-switch-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet.[String]enableFastWithdraw(Map<String, Object>)", "name": "enableFastWithdraw", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String enableFastWithdraw(Map<String, Object> parameters)", "original_string": "    public String enableFastWithdraw(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, ENABLE_FAST_WITHDRAW, parameters, HttpMethod.POST, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java", "class_name": "Wallet", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n- This request will enable fastwithdraw switch under your account. You need to enable \"trade\" option for the api key which requests this endpoint.\n- When Fast Withdraw Switch is on, transferring funds to a Binance account will be done instantly. There is no on-chain transaction, no transaction ID and no withdrawal fee.\n<br><br>\nPOST /sapi/v1/account/enableFastWithdrawSwitch\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#enable-fast-withdraw-switch-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#enable-fast-withdraw-switch-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet.[String]withdraw(Map<String, Object>)", "name": "withdraw", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String withdraw(Map<String, Object> parameters)", "original_string": "    public String withdraw(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"coin\", String.class);\n        ParameterChecker.checkParameter(parameters, \"address\", String.class);\n        ParameterChecker.checkRequiredParameter(parameters, \"amount\");\n        return requestHandler.sendSignedRequest(baseUrl, WITHDRAW, parameters, HttpMethod.POST, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java", "class_name": "Wallet", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nSubmit a withdraw request.\n\n- If `network` not send, return with default network of the coin.\n- You can get `network` and `isDefault` in `networkList` of a coin in the response of `Get /sapi/v1/capital/config/getall (HMAC SHA256)`.\n<br><br>\nPOST /sapi/v1/capital/withdraw/apply\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\ncoin -- mandatory/string <br>\nwithdrawOrderId -- optional/string -- Client ID for withdraw <br>\nnetwork -- optional/string <br>\naddress -- mandatory/string <br>\naddressTag -- optional/string -- Secondary address identifier for coins like XRP,XMR etc. <br>\namount -- mandatory/decimal <br>\ntransactionFeeFlag -- optional/boolean -- When making internal transfer, true for returning the fee to the destination account;\n           false for returning the fee back to the departure account. Default false. <br>\nname -- optional/string -- Description of the address. Space in name should be encoded into %20. <br>\nwalletType -- optional/int -- The wallet type for withdraw, 0-spot wallet , 1-funding wallet.Default spot wallet <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#withdraw-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#withdraw-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet.[String]depositHistory(Map<String, Object>)", "name": "depositHistory", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String depositHistory(Map<String, Object> parameters)", "original_string": "    public String depositHistory(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, DEPOSIT_HISTORY, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java", "class_name": "Wallet", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nFetch deposit history.\n\n- Please notice the default `startTime` and `endTime` to make sure that time interval is within 0-90 days.\n- If both `startTime` and `endTime` are sent, time between `startTime` and `endTime` must be less than 90 days.\n<br><br>\nGET /sapi/v1/capital/deposit/hisrec\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\ncoin -- optional/string <br>\nstatus -- optional/int -- 0(0:pending,6: credited but cannot withdraw, 1:success) <br>\nstartTime -- optional/long -- Default: 90 days from current timestamp <br>\nendTime -- optional/long -- Default: present timestamp <br>\noffset -- optional/int -- Default:0 <br>\nlimit -- optional/int -- Default:1000, Max:1000 <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#deposit-history-supporting-network-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#deposit-history-supporting-network-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet.[String]withdrawHistory(Map<String, Object>)", "name": "withdrawHistory", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String withdrawHistory(Map<String, Object> parameters)", "original_string": "    public String withdrawHistory(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, WITHDRAW_HISTORY, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java", "class_name": "Wallet", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nFetch withdraw history.\n\nThis endpoint specifically uses per second UID rate limit, user's total second level IP rate limit is 180000/second. Response from the endpoint contains header key X-SAPI-USED-UID-WEIGHT-1S, which defines weight used by the current IP.\n\n- `network` may not be in the response for old withdraw.\n- Please notice the default `startTime` and `endTime` to make sure that time interval is within 0-90 days.\n- If both `startTime` and `endTime` are sent, time between `startTime` and `endTime` must be less than 90 days\n- If withdrawOrderId is sent, time between startTime and endTime must be less than 7 days.\n- If withdrawOrderId is sent, startTime and endTime are not sent, will return last 7 days records by default.\n<br><br>\nGET /sapi/v1/capital/withdraw/history\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\ncoin -- optional/string <br>\nwithdrawOrderId -- optional/string <br>\nstatus -- optional/int -- 0(0:Email Sent,1:Cancelled 2:Awaiting Approval 3:Rejected 4:Processing 5:Failure 6:Completed) <br>\nstartTime -- optional/long -- Default: 90 days from current timestamp <br>\nendTime -- optional/long -- Default: present timestamp <br>\noffset -- optional/int <br>\nlimit -- optional/int -- Default:1000, Max:1000 <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#withdraw-history-supporting-network-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#withdraw-history-supporting-network-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet.[String]depositAddress(Map<String, Object>)", "name": "depositAddress", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String depositAddress(Map<String, Object> parameters)", "original_string": "    public String depositAddress(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"coin\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, DEPOSIT_ADDRESS, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java", "class_name": "Wallet", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nFetch deposit address with network.\n\n- If network is not send, return with default network of the coin.\n- You can get network and isDefault in networkList in the response of Get /sapi/v1/capital/config/getall.\n<br><br>\nGET /sapi/v1/capital/deposit/address\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\ncoin -- mandatory/string <br>\nnetwork -- optional/string <br>\namount -- optional/decimal -- mandatory if using LIGHTNING network <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#deposit-address-supporting-network-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#deposit-address-supporting-network-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet.[String]depositAddresses(Map<String, Object>)", "name": "depositAddresses", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String depositAddresses(Map<String, Object> parameters)", "original_string": "    public String depositAddresses(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"coin\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, DEPOSIT_ADDRESSES, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java", "class_name": "Wallet", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nFetch deposit address list with network.\n\n- If network is not send, return with default network of the coin.\n- You can get network and isDefault in networkList in the response of Get /sapi/v1/capital/config/getall.\n<br><br>\nGET /sapi/v1/capital/deposit/address/list\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\ncoin -- mandatory/string <br>\nnetwork -- optional/string <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#fetch-deposit-address-list-with-network-user_data\">\n     https://binance-docs.github.io/apidocs/spot/en/#fetch-deposit-address-list-with-network-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet.[String]accountStatus(Map<String, Object>)", "name": "accountStatus", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String accountStatus(Map<String, Object> parameters)", "original_string": "    public String accountStatus(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, ACCOUNT_STATUS, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java", "class_name": "Wallet", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nFetch account status detail.\n<br><br>\nGET /sapi/v1/account/status\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#account-status-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#account-status-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet.[String]apiTradingStatus(Map<String, Object>)", "name": "apiTradingStatus", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String apiTradingStatus(Map<String, Object> parameters)", "original_string": "    public String apiTradingStatus(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, API_TRADE_STATUS, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java", "class_name": "Wallet", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nFetch account API trading status with details.\n<br><br>\nGET /sapi/v1/account/apiTradingStatus\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#account-api-trading-status-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#account-api-trading-status-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet.[String]dustLog(Map<String, Object>)", "name": "dustLog", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String dustLog(Map<String, Object> parameters)", "original_string": "    public String dustLog(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, DUST_LOG, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java", "class_name": "Wallet", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/asset/dribblet\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nstartTime -- optional/long <br>\nendTime -- optional/long <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#dustlog-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#dustlog-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet.[String]bnbConvertableAssets(Map<String, Object>)", "name": "bnbConvertableAssets", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String bnbConvertableAssets(Map<String, Object> parameters)", "original_string": "    public String bnbConvertableAssets(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, BNB_CONVERTIBLE_ASSETS, parameters, HttpMethod.POST, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java", "class_name": "Wallet", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nPOST /sapi/v1/asset/dust-btc\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-assets-that-can-be-converted-into-bnb-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#get-assets-that-can-be-converted-into-bnb-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet.[String]dustTransfer(Map<String, Object>)", "name": "dustTransfer", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String dustTransfer(Map<String, Object> parameters)", "original_string": "    public String dustTransfer(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"asset\", ArrayList.class);\n        return requestHandler.sendSignedRequest(baseUrl, DUST_TRANSFER, parameters, HttpMethod.POST, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java", "class_name": "Wallet", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nConvert dust assets to BNB.\n<br><br>\nPOST /sapi/v1/asset/dust\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nasset -- mandatory/array -- The asset being converted. For example: asset=BTC&amp;asset=USDT <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#dust-transfer-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#dust-transfer-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet.[String]assetDividend(Map<String, Object>)", "name": "assetDividend", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String assetDividend(Map<String, Object> parameters)", "original_string": "    public String assetDividend(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, ASSET_DIVIDEND, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java", "class_name": "Wallet", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nQuery asset dividend record.\n<br><br>\nGET /sapi/v1/asset/assetDividend\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nasset -- optional/string <br>\nstartTime -- optional/long <br>\nendTime -- optional/long <br>\nlimit -- optional/int -- Default 20, max 500 <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#asset-dividend-record-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#asset-dividend-record-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet.[String]assetDetail(Map<String, Object>)", "name": "assetDetail", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String assetDetail(Map<String, Object> parameters)", "original_string": "    public String assetDetail(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, ASSET_DETAIL, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java", "class_name": "Wallet", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nFetch details of assets supported on Binance.\n\n- Please get network and other deposit or withdraw details from `GET /sapi/v1/capital/config/getall`.\n<br><br>\nGET /sapi/v1/asset/assetDetail\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nasset -- optional/string <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#asset-detail-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#asset-detail-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet.[String]tradeFee(Map<String, Object>)", "name": "tradeFee", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String tradeFee(Map<String, Object> parameters)", "original_string": "    public String tradeFee(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, TRADE_FEE, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java", "class_name": "Wallet", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nFetch trade fee.\n<br><br>\nGET /sapi/v1/asset/tradeFee\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nsymbol -- optional/string <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#trade-fee-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#trade-fee-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet.[String]universalTransfer(Map<String, Object>)", "name": "universalTransfer", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String universalTransfer(Map<String, Object> parameters)", "original_string": "    public String universalTransfer(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"type\", String.class);\n        ParameterChecker.checkParameter(parameters, \"asset\", String.class);\n        ParameterChecker.checkRequiredParameter(parameters, \"amount\");\n        return requestHandler.sendSignedRequest(baseUrl, UNIVERSAL_TRANSFER, parameters, HttpMethod.POST, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java", "class_name": "Wallet", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nYou need to enable Permits Universal Transfer option for the api key which requests this endpoint.\n<br><br>\nPOST /sapi/v1/asset/transfer\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\ntype -- mandatory/enum -- Universal transfer type <br>\nasset -- mandatory/string <br>\namount -- mandatory/decimal <br>\nfromSymbol -- optional/string <br>\ntoSymbol -- optional/string <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#user-universal-transfer-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#user-universal-transfer-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet.[String]queryUniversalTransfer(Map<String, Object>)", "name": "queryUniversalTransfer", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String queryUniversalTransfer(Map<String, Object> parameters)", "original_string": "    public String queryUniversalTransfer(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"type\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, UNIVERSAL_TRANSFER, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java", "class_name": "Wallet", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/asset/transfer\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\ntype -- mandatory/enum <br>\nstartTime -- optional/long <br>\nendTime -- optional/long <br>\ncurrent -- optional/int -- Default 1 <br>\nsize -- optional/int -- \tDefault 10, Max 100 <br>\nfromSymbol -- optional/string <br>\ntoSymbol -- optional/string <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-user-universal-transfer-history-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#query-user-universal-transfer-history-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet.[String]fundingWallet(Map<String, Object>)", "name": "fundingWallet", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String fundingWallet(Map<String, Object> parameters)", "original_string": "    public String fundingWallet(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, FUNDING_WALLET, parameters, HttpMethod.POST, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java", "class_name": "Wallet", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nPOST /sapi/v1/asset/get-funding-asset\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nasset -- optional/string <br>\nneedBtcValuation -- optional/string -- true or false <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#funding-wallet-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#funding-wallet-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet.[String]apiPermission(Map<String, Object>)", "name": "apiPermission", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String apiPermission(Map<String, Object> parameters)", "original_string": "    public String apiPermission(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, API_PERMISSION, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java", "class_name": "Wallet", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/account/apiRestrictions\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-api-key-permission-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#get-api-key-permission-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet.[String]getUserAsset(Map<String, Object>)", "name": "getUserAsset", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String getUserAsset(Map<String, Object> parameters)", "original_string": "    public String getUserAsset(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, USER_ASSET, parameters, HttpMethod.POST, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java", "class_name": "Wallet", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGet user assets, just for positive data.\n<br><br>\nPOST /sapi/v3/asset/getUserAsset\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nasset -- optional/string -- If asset is blank, then query all positive assets user have. <br>\nneedBtcValuation -- optional/boolean -- \tWhether need btc valuation or not. <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#user-asset-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#user-asset-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet.[String]busdConvert(Map<String, Object>)", "name": "busdConvert", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String busdConvert(Map<String, Object> parameters)", "original_string": "    public String busdConvert(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"clientTranId\", String.class);\n        ParameterChecker.checkParameter(parameters, \"asset\", String.class);\n        ParameterChecker.checkRequiredParameter(parameters, \"amount\");\n        ParameterChecker.checkParameter(parameters, \"targetAsset\", String.class);\n\n        return requestHandler.sendSignedRequest(baseUrl, BUSD_CONVERT, parameters, HttpMethod.POST, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java", "class_name": "Wallet", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nConvert transfer, convert between BUSD and stablecoins.\n\n- If the clientId has been used before, will not do the convert transfer, the original transfer will be returned.\n<br><br>\nPOST /sapi/v1/asset/convert-transfer\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nclientTranId -- mandatory/string -- The unique user-defined transaction id, min length 20 <br>\nasset -- mandatory/string -- The current asset <br>\namount -- mandatory/BigDecimal -- The amount must be positive number <br>\ntargetAsset -- mandatory/string -- Target asset you want to convert <br>\naccountType -- optional/string -- Only MAIN and CARD, default MAIN <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#busd-convert-trade\">\n    https://binance-docs.github.io/apidocs/spot/en/#busd-convert-trade</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet.[String]busdConvertHistory(Map<String, Object>)", "name": "busdConvertHistory", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String busdConvertHistory(Map<String, Object> parameters)", "original_string": "    public String busdConvertHistory(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"startTime\", Long.class);\n        ParameterChecker.checkParameter(parameters, \"endTime\", Long.class);\n\n        return requestHandler.sendSignedRequest(baseUrl, BUSD_CONVERT_HISTORY, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java", "class_name": "Wallet", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n<br><br>\nGET /sapi/v1/asset/convert-transfer/queryByPage\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\n\nstartTime -- mandatory/long -- inclusive, unit: ms <br>\nendTime -- mandatory/long -- exclusive, unit: ms <br>\ntranId -- optional/long -- The transaction id <br>\nclientTranId -- optional/string -- The unique user-defined transaction id <br>\nasset -- optional/string -- If not sent or null, deducted asset and target asset are returned. <br>\naccountType -- optional/string -- MAIN: main account. CARD: funding account. If not sent or null, spot and card wallet will be queried. <br>\ncurrent -- optional/integer -- current page, default 1, the min value is 1 <br>\nsize -- optional/integer -- page size, default 10, the max value is 100 <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#busd-convert-history-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#busd-convert-history-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet.[String]cloudMiningHistory(Map<String, Object>)", "name": "cloudMiningHistory", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String cloudMiningHistory(Map<String, Object> parameters)", "original_string": "    public String cloudMiningHistory(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"startTime\", Long.class);\n        ParameterChecker.checkParameter(parameters, \"endTime\", Long.class);\n\n        return requestHandler.sendSignedRequest(baseUrl, CLOUD_MINING_HISTORY, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java", "class_name": "Wallet", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nThe query of Cloud-Mining payment and refund history\n<br><br>\nGET /sapi/v1/asset/ledger-transfer/cloud-mining/queryByPage\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\n\nstartTime -- mandatory/long -- inclusive, unit: ms <br>\nendTime -- mandatory/long -- exclusive, unit: ms <br>\ntranId -- optional/long -- The transaction id <br>\nclientTranId -- optional/string -- The unique flag <br>\nasset -- optional/string -- If not sent, we will query all assets. <br>\ncurrent -- optional/integer -- current page, default 1, the min value is 1 <br>\nsize -- optional/integer -- page size, default 10, the max value is 100 <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-cloud-mining-payment-and-refund-history-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#get-cloud-mining-payment-and-refund-history-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet.[String]getBusdAutoConvertions()", "name": "getBusdAutoConvertions", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getBusdAutoConvertions()", "original_string": "    public String getBusdAutoConvertions() {\n        return requestHandler.sendSignedRequest(baseUrl, BUSD_AUTO_CONVERT, null, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java", "class_name": "Wallet", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGet the stable coins set for auto-conversion to BUSD at deposit/withdrawal moments.\n\n<br><br>\nGET /sapi/v1/capital/contract/convertible-coins\n<br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-auto-converting-stable-coins-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#query-auto-converting-stable-coins-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet.[String]switchBusdAutoConversion(Map<String, Object>)", "name": "switchBusdAutoConversion", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String switchBusdAutoConversion(Map<String, Object> parameters)", "original_string": "    public String switchBusdAutoConversion(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"coin\", String.class);\n        ParameterChecker.checkParameter(parameters, \"enable\", Boolean.class);\n        return requestHandler.sendSignedRequest(baseUrl, BUSD_AUTO_CONVERT, parameters, HttpMethod.POST, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java", "class_name": "Wallet", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nSwitch on/off the BUSD auto-conversion from/to a specific stable coin.\n\n<br><br>\nPOST /sapi/v1/capital/contract/convertible-coins\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\ncoin -- mandatory/string -- Must be USDC, USDP or TUSD <br>\nenable -- mandatory/boolean -- true: turn on the auto-conversion. false: turn off the auto-conversion <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#switch-on-off-busd-and-stable-coins-conversion-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#switch-on-off-busd-and-stable-coins-conversion-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet.[String]applyOneClickArrivalDeposit(Map<String, Object>)", "name": "applyOneClickArrivalDeposit", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String applyOneClickArrivalDeposit(Map<String, Object> parameters)", "original_string": "    public String applyOneClickArrivalDeposit(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, APPLY_ONE_CLICK_ARRIVAL_DEPOSIT, parameters, HttpMethod.POST, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java", "class_name": "Wallet", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nApply deposit credit for expired address (One click arrival)\n\n<br><br>\nPOST /sapi/v1/capital/deposit/credit-apply\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\ndepositId -- optional/long -- Deposit record ID, priority use <br>\ntxId -- optional/string -- Deposit txId, used when depositId is not specified <br>\nsubAccountId -- optional/long <br>\nsubUserId -- optional/long <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#one-click-arrival-deposit-apply-for-expired-address-deposit-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#one-click-arrival-deposit-apply-for-expired-address-deposit-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet.[String]walletBalance(Map<String, Object>)", "name": "walletBalance", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String walletBalance(Map<String, Object> parameters)", "original_string": "    public String walletBalance(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, WALLET_BALANCE, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java", "class_name": "Wallet", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nQuery User Wallet Balance\n\n<br><br>\nGET /sapi/v1/asset/wallet/balance\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-user-wallet-balance-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#query-user-wallet-balance-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet.[String]delegationHistory(Map<String, Object>)", "name": "delegationHistory", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String delegationHistory(Map<String, Object> parameters)", "original_string": "    public String delegationHistory(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"email\", String.class);\n        ParameterChecker.checkParameter(parameters, \"startTime\", Long.class);\n        ParameterChecker.checkParameter(parameters, \"endTime\", Long.class);\n        return requestHandler.sendSignedRequest(baseUrl, QUERY_USER_DELEGATION_HISTORY, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java", "class_name": "Wallet", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nQuery User Delegation History\n\nYou need to open Enable Spot and Margin Trading permission for the API Key which requests this endpoint\n\n<br><br>\nGET /sapi/v1/asset/custody/transfer-history\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nemail -- mandatory/string <br>\nstartTime -- mandatory/long <br>\nendTime -- mandatory/long <br>\ntype -- optional/enum -- \"Delegate\" or \"Undelegate\"<br>\nasset -- optional/string <br>\ncurrent -- optional/integer -- Current querying page. Start from 1. Default:1 <br>\nsize -- optional/integer -- Default:10 Max:100 <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-user-delegation-history-for-master-account-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#query-user-delegation-history-for-master-account-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Convert.java.Convert.[]Convert(String,String,String,boolean,ProxyAuth)", "name": "Convert", "arg_nums": 5, "params": [{"name": "baseUrl", "type": "String"}, {"name": "apiKey", "type": "String"}, {"name": "secretKey", "type": "String"}, {"name": "showLimitUsage", "type": "boolean"}, {"name": "proxy", "type": "ProxyAuth"}], "return_type": "", "signature": "public Convert(String baseUrl, String apiKey, String secretKey, boolean showLimitUsage, ProxyAuth proxy)", "original_string": "    public Convert(String baseUrl, String apiKey, String secretKey, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, new HmacSignatureGenerator(secretKey), proxy);\n        this.showLimitUsage = showLimitUsage;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Convert.java", "class_name": "Convert", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Convert.java.Convert", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Convert.java.Convert.[]Convert(String,String,SignatureGenerator,boolean,ProxyAuth)", "name": "Convert", "arg_nums": 5, "params": [{"name": "baseUrl", "type": "String"}, {"name": "apiKey", "type": "String"}, {"name": "signatureGenerator", "type": "SignatureGenerator"}, {"name": "showLimitUsage", "type": "boolean"}, {"name": "proxy", "type": "ProxyAuth"}], "return_type": "", "signature": "public Convert(String baseUrl, String apiKey, SignatureGenerator signatureGenerator, boolean showLimitUsage, ProxyAuth proxy)", "original_string": "    public Convert(String baseUrl, String apiKey, SignatureGenerator signatureGenerator, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, signatureGenerator, proxy);\n        this.showLimitUsage = showLimitUsage;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Convert.java", "class_name": "Convert", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Convert.java.Convert", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Convert.java.Convert.[String]tradeFlow(Map<String, Object>)", "name": "tradeFlow", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String tradeFlow(Map<String, Object> parameters)", "original_string": "    public String tradeFlow(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"startTime\", Long.class);\n        ParameterChecker.checkParameter(parameters, \"endTime\", Long.class);\n        return requestHandler.sendSignedRequest(baseUrl, TRADE_FLOW, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Convert.java", "class_name": "Convert", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Convert.java.Convert", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/convert/tradeFlow\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nstartTime -- mandatory/long <br>\nendTime -- mandatory/long <br>\nlimit -- optional/int -- Default 100, Max 1000 <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-convert-trade-history-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#get-convert-trade-history-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Convert.java.Convert.[String]exchangeInfo(Map<String, Object>)", "name": "exchangeInfo", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String exchangeInfo(Map<String, Object> parameters)", "original_string": "    public String exchangeInfo(Map<String, Object> parameters) {\n        return requestHandler.sendPublicRequest(baseUrl, EXCHANGE_INFO, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Convert.java", "class_name": "Convert", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Convert.java.Convert", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/convert/exchangeInfo\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nfromAsset -- optional/string <br>\ntoAsset -- optional/string <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#list-all-convert-pairs\">\n    https://binance-docs.github.io/apidocs/spot/en/#list-all-convert-pairs</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Convert.java.Convert.[String]assetQuantityPrecision(Map<String, Object>)", "name": "assetQuantityPrecision", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String assetQuantityPrecision(Map<String, Object> parameters)", "original_string": "    public String assetQuantityPrecision(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, ASSET_QUANTITY_PRECISION, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Convert.java", "class_name": "Convert", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Convert.java.Convert", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/convert/assetInfo\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-order-quantity-precision-per-asset-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#query-order-quantity-precision-per-asset-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Convert.java.Convert.[String]quoteInquiry(Map<String, Object>)", "name": "quoteInquiry", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String quoteInquiry(Map<String, Object> parameters)", "original_string": "    public String quoteInquiry(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"fromAsset\", String.class);\n        ParameterChecker.checkParameter(parameters, \"toAsset\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, QUOTE_INQUIRY, parameters, HttpMethod.POST, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Convert.java", "class_name": "Convert", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Convert.java.Convert", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nPOST /sapi/v1/convert/getQuote\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nfromAsset -- mandatory/string <br>\ntoAsset -- mandatory/string <br>\nfromAmount -- optional/double -- Send either fromAmount or toAmount<br>\ntoAmount -- optional/double -- Send either fromAmount or toAmount<br>\nwalletType -- optional/string -- SPOT or FUNDING. Default is SPOT <br>\nvalidTime -- optional/string -- 10s, 30s, 1m, 2m, default 10s <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#send-quote-request-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#send-quote-request-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Convert.java.Convert.[String]acceptQuote(Map<String, Object>)", "name": "acceptQuote", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String acceptQuote(Map<String, Object> parameters)", "original_string": "    public String acceptQuote(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"quoteId\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, ACCEPT_QUOTE, parameters, HttpMethod.POST, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Convert.java", "class_name": "Convert", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Convert.java.Convert", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nPOST /sapi/v1/convert/acceptQuote\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nquoteId -- mandatory/string <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#accept-quote-trade\">\n    https://binance-docs.github.io/apidocs/spot/en/#accept-quote-trade</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Convert.java.Convert.[String]orderStatus(Map<String, Object>)", "name": "orderStatus", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String orderStatus(Map<String, Object> parameters)", "original_string": "    public String orderStatus(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, ORDER_STATUS, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Convert.java", "class_name": "Convert", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Convert.java.Convert", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/convert/orderStatus\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nquoteId -- optional/string <br>\nquoteId -- optional/string <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#order-status-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#order-status-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/AutoInvest.java.AutoInvest.[]AutoInvest(String,String,String,boolean,ProxyAuth)", "name": "AutoInvest", "arg_nums": 5, "params": [{"name": "baseUrl", "type": "String"}, {"name": "apiKey", "type": "String"}, {"name": "secretKey", "type": "String"}, {"name": "showLimitUsage", "type": "boolean"}, {"name": "proxy", "type": "ProxyAuth"}], "return_type": "", "signature": "public AutoInvest(String baseUrl, String apiKey, String secretKey, boolean showLimitUsage, ProxyAuth proxy)", "original_string": "    public AutoInvest(String baseUrl, String apiKey, String secretKey, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, new HmacSignatureGenerator(secretKey), proxy);\n        this.showLimitUsage = showLimitUsage;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/AutoInvest.java", "class_name": "AutoInvest", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/AutoInvest.java.AutoInvest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/AutoInvest.java.AutoInvest.[]AutoInvest(String,String,SignatureGenerator,boolean,ProxyAuth)", "name": "AutoInvest", "arg_nums": 5, "params": [{"name": "baseUrl", "type": "String"}, {"name": "apiKey", "type": "String"}, {"name": "signatureGenerator", "type": "SignatureGenerator"}, {"name": "showLimitUsage", "type": "boolean"}, {"name": "proxy", "type": "ProxyAuth"}], "return_type": "", "signature": "public AutoInvest(String baseUrl, String apiKey, SignatureGenerator signatureGenerator, boolean showLimitUsage, ProxyAuth proxy)", "original_string": "    public AutoInvest(String baseUrl, String apiKey, SignatureGenerator signatureGenerator, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, signatureGenerator, proxy);\n        this.showLimitUsage = showLimitUsage;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/AutoInvest.java", "class_name": "AutoInvest", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/AutoInvest.java.AutoInvest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/AutoInvest.java.AutoInvest.[String]targetAssetList(Map<String, Object>)", "name": "targetAssetList", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String targetAssetList(Map<String, Object> parameters)", "original_string": "    public String targetAssetList(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, TARGET_ASSET_LIST, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/AutoInvest.java", "class_name": "AutoInvest", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/AutoInvest.java.AutoInvest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/lending/auto-invest/target-asset/list\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\ntargetAsset -- optional/string <br>\nsize -- optional/long -- Default:8 Max:100 <br>\ncurrent -- optional/long -- Current querying page. Start from 1. Default:1 <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-target-asset-list-user_data\">\n     https://binance-docs.github.io/apidocs/spot/en/#get-target-asset-list-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/AutoInvest.java.AutoInvest.[String]targetAssetRoiList(Map<String, Object>)", "name": "targetAssetRoiList", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String targetAssetRoiList(Map<String, Object> parameters)", "original_string": "    public String targetAssetRoiList(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"targetAsset\", String.class);\n        ParameterChecker.checkParameter(parameters, \"hisRoiType\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, TARGET_ASSET_ROI_LIST, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/AutoInvest.java", "class_name": "AutoInvest", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/AutoInvest.java.AutoInvest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nROI return list for target asset\n\n<br><br>\nGET /sapi/v1/lending/auto-invest/target-asset/roi/list\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\ntargetAsset -- mandatory/string <br>\nhisRoiType -- mandatory/enum -- FIVE_YEAR,THREE_YEAR,ONE_YEAR,SIX_MONTH,THREE_MONTH,SEVEN_DAY <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-target-asset-roi-data-user_data\">\n     https://binance-docs.github.io/apidocs/spot/en/#get-target-asset-roi-data-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/AutoInvest.java.AutoInvest.[String]allSourceAndTargetAssets(Map<String, Object>)", "name": "allSourceAndTargetAssets", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String allSourceAndTargetAssets(Map<String, Object> parameters)", "original_string": "    public String allSourceAndTargetAssets(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, ALL_SOURCE_AND_TARGET_ASSETS, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/AutoInvest.java", "class_name": "AutoInvest", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/AutoInvest.java.AutoInvest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nQuery all source assets and target assets\n\n<br><br>\nGET /sapi/v1/lending/auto-invest/all/asset\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-all-source-asset-and-target-asset-user_data\">\n     https://binance-docs.github.io/apidocs/spot/en/#query-all-source-asset-and-target-asset-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/AutoInvest.java.AutoInvest.[String]sourceAssetList(Map<String, Object>)", "name": "sourceAssetList", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String sourceAssetList(Map<String, Object> parameters)", "original_string": "    public String sourceAssetList(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"usageType\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, SOURCE_ASSET_LIST, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/AutoInvest.java", "class_name": "AutoInvest", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/AutoInvest.java.AutoInvest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nQuery Source Asset to be used for investment\n\n<br><br>\nGET /sapi/v1/lending/auto-invest/source-asset/list\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\ntargetAsset -- optional/string -- Example: BTC,ETH,BNB <br>\nindexId -- optional/long <br>\nusageType -- mandatory/string -- \"RECURRING\", \"ONE_TIME\" <br>\nflexibleAllowedToUse -- optional/boolean <br>\nsourceType -- optional/enum -- MAIN_SITE for Binance user,TR for Binance Turkey user <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-source-asset-list-user_data\">\n     https://binance-docs.github.io/apidocs/spot/en/#query-source-asset-list-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/AutoInvest.java.AutoInvest.[String]changePlanStatus(Map<String, Object>)", "name": "changePlanStatus", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String changePlanStatus(Map<String, Object> parameters)", "original_string": "    public String changePlanStatus(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"planId\", Long.class);\n        ParameterChecker.checkParameter(parameters, \"status\", String.class);\n        return requestHandler.sendPublicRequest(baseUrl, CHANGE_PLAN_STATUS, parameters, HttpMethod.POST, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/AutoInvest.java", "class_name": "AutoInvest", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/AutoInvest.java.AutoInvest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nChange Plan Status\n<br><br>\nPOST /sapi/v1/lending/auto-invest/plan/edit-status\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nplanId -- mandatory/long <br>\nstatus -- mandatory/enum -- \"ONGOING\",\"PAUSED\",\"REMOVED\"<br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#change-plan-status-trade\">\n     https://binance-docs.github.io/apidocs/spot/en/#change-plan-status-trade</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/AutoInvest.java.AutoInvest.[String]plansList(Map<String, Object>)", "name": "plansList", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String plansList(Map<String, Object> parameters)", "original_string": "    public String plansList(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"planType\", String.class);\n        return requestHandler.sendPublicRequest(baseUrl, PLANS, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/AutoInvest.java", "class_name": "AutoInvest", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/AutoInvest.java.AutoInvest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nQuery plan lists\n<br><br>\nGET /sapi/v1/lending/auto-invest/plan/list\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nplanType -- mandatory/string <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-list-of-plans-user_data\">\n     https://binance-docs.github.io/apidocs/spot/en/#get-list-of-plans-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/AutoInvest.java.AutoInvest.[String]holdingPlan(Map<String, Object>)", "name": "holdingPlan", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String holdingPlan(Map<String, Object> parameters)", "original_string": "    public String holdingPlan(Map<String, Object> parameters) {\n        return requestHandler.sendPublicRequest(baseUrl, HOLDING_PLAN, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/AutoInvest.java", "class_name": "AutoInvest", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/AutoInvest.java.AutoInvest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nQuery holding details of the plan\n\n<br><br>\nGET /sapi/v1/lending/auto-invest/plan/id\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nplanId -- optional/long <br>\nrequestId -- optional/string <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-holding-details-of-the-plan-user_data\">\n     https://binance-docs.github.io/apidocs/spot/en/#query-holding-details-of-the-plan-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/AutoInvest.java.AutoInvest.[String]planSubsHistory(Map<String, Object>)", "name": "planSubsHistory", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String planSubsHistory(Map<String, Object> parameters)", "original_string": "    public String planSubsHistory(Map<String, Object> parameters) {\n        return requestHandler.sendPublicRequest(baseUrl, PLAN_SUBSCRIPTIONS_HISTORY, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/AutoInvest.java", "class_name": "AutoInvest", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/AutoInvest.java.AutoInvest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nQuery the transaction history of plan subscriptions\n\n<br><br>\nGET /sapi/v1/lending/auto-invest/history/list\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nplanId -- optional/long <br>\nstartTime -- optional/long -- UTC timestamp in ms <br>\nendTime -- optional/long -- UTC timestamp in ms <br>\ntargetAsset -- optional/string <br>\nplanType -- optional/enum <br>\nsize -- optional/long -- Default:10 Max:100 <br>\ncurrent -- optional/long -- Current querying page. Start from 1. Default:1 <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-subscription-transaction-history-user_data\">\n     https://binance-docs.github.io/apidocs/spot/en/#query-subscription-transaction-history-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/AutoInvest.java.AutoInvest.[String]indexInfo(Map<String, Object>)", "name": "indexInfo", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String indexInfo(Map<String, Object> parameters)", "original_string": "    public String indexInfo(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"indexId\", Long.class);\n        return requestHandler.sendSignedRequest(baseUrl, INDEX_INFO, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/AutoInvest.java", "class_name": "AutoInvest", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/AutoInvest.java.AutoInvest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nQuery index details\n\n<br><br>\nGET /sapi/v1/lending/auto-invest/index/info\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nindexId -- mandatory/long <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-index-details-user_data\">\n     https://binance-docs.github.io/apidocs/spot/en/#query-index-details-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/AutoInvest.java.AutoInvest.[String]userIndexPlans(Map<String, Object>)", "name": "userIndexPlans", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String userIndexPlans(Map<String, Object> parameters)", "original_string": "    public String userIndexPlans(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"indexId\", Long.class);\n        return requestHandler.sendSignedRequest(baseUrl, INDEX_USER_SUMMARY, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/AutoInvest.java", "class_name": "AutoInvest", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/AutoInvest.java.AutoInvest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nDetails on users Index-Linked plan position details\n\n<br><br>\nGET /sapi/v1/lending/auto-invest/index/user-summary\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nindexId -- mandatory/long <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-index-linked-plan-position-details-user_data\">\n     https://binance-docs.github.io/apidocs/spot/en/#query-index-linked-plan-position-details-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/AutoInvest.java.AutoInvest.[String]submitOneTimeTransaction(Map<String, Object>)", "name": "submitOneTimeTransaction", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String submitOneTimeTransaction(Map<String, Object> parameters)", "original_string": "    public String submitOneTimeTransaction(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"sourceType\", String.class);\n        ParameterChecker.checkRequiredParameter(parameters, \"subscriptionAmount\");\n        ParameterChecker.checkParameter(parameters, \"sourceAsset\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, ONE_TIME_TRANSACTION, parameters, HttpMethod.POST, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/AutoInvest.java", "class_name": "AutoInvest", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/AutoInvest.java.AutoInvest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nOne time transaction\n\n<br><br>\nPOST /sapi/v1/lending/auto-invest/one-off\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nsourceType -- mandatory/string -- \"MAIN_SITE\" for Binance,\"TR\" for Binance Turkey<br>\nrequestId -- optional/string -- If not null, must follow sourceType + unique string, e.g: TR12354859<br>\nsubscriptionAmount -- mandatory/decimal <br>\nsourceAsset -- mandatory/string <br>\nflexibleAllowedToUse -- optional/boolean -- true/false\uff1btrue: using flexible wallet<br>\nplanId -- optional/long -- portfolio plan's Id<br>\nindexId -- optional/long <br>\ndetails -- optional/arraylist --  The \"PortfolioDetail\" class contains 2 fields: \"targetAsset\" and \"percentage\". <br>\n                                  The sum of all the \"PortfolioDetail\" percentages in the Array should be 100. <br>\n                                  \"details\" example:<br>\n                                     details[0].targetAsset=BTC, details[0].percentage=60 <br>\n                                     details[1].targetAsset=ETH, details[1].percentage=40 <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#one-time-transaction-trade\">\n     https://binance-docs.github.io/apidocs/spot/en/#one-time-transaction-trade</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/AutoInvest.java.AutoInvest.[String]oneTimeTransactionStatus(Map<String, Object>)", "name": "oneTimeTransactionStatus", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String oneTimeTransactionStatus(Map<String, Object> parameters)", "original_string": "    public String oneTimeTransactionStatus(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"transactionId\", Long.class);\n        return requestHandler.sendSignedRequest(baseUrl, ONE_TIME_TRANSACTION_STATUS, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/AutoInvest.java", "class_name": "AutoInvest", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/AutoInvest.java.AutoInvest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nTransaction status for one-time transaction\n\n<br><br>\nGET /sapi/v1/lending/auto-invest/one-off/status\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\ntransactionId -- mandatory/long -- portfolio plan's Id<br>\nrequestId -- optional/string -- transactionId and requestId cannot be empty at the same time <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-one-time-transaction-status-user_data\">\n     https://binance-docs.github.io/apidocs/spot/en/#query-one-time-transaction-status-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/AutoInvest.java.AutoInvest.[String]redeemIndexPlan(Map<String, Object>)", "name": "redeemIndexPlan", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String redeemIndexPlan(Map<String, Object> parameters)", "original_string": "    public String redeemIndexPlan(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"indexId\", Long.class);\n        ParameterChecker.checkParameter(parameters, \"redemptionPercentage\", Integer.class);\n        return requestHandler.sendSignedRequest(baseUrl, REDEEM_INDEX_PLAN, parameters, HttpMethod.POST, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/AutoInvest.java", "class_name": "AutoInvest", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/AutoInvest.java.AutoInvest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nTo redeem index-Linked plan holdings\n\n<br><br>\nPOST /sapi/v1/lending/auto-invest/redeem\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nindexId -- mandatory/long -- portfolio plan's Id <br>\nrequestId -- optional/string -- transactionId and requestId cannot be empty at the same time <br>\nredemptionPercentage -- mandatory/long -- user redeem percentage,10/20/100. <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#index-linked-plan-redemption-trade\">\n     https://binance-docs.github.io/apidocs/spot/en/#index-linked-plan-redemption-trade</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/AutoInvest.java.AutoInvest.[String]indexPlanRedeemHistory(Map<String, Object>)", "name": "indexPlanRedeemHistory", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String indexPlanRedeemHistory(Map<String, Object> parameters)", "original_string": "    public String indexPlanRedeemHistory(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"requestId\", Long.class);\n        return requestHandler.sendSignedRequest(baseUrl, INDEX_LINKED_PLAN_REDEMPTION_HISTORY, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/AutoInvest.java", "class_name": "AutoInvest", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/AutoInvest.java.AutoInvest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGet the history of Index Linked Plan Redemption transactions\n\nMax 30 day difference between startTime and endTime\nIf no startTime and endTime, default to show past 30 day records\n\n<br><br>\nGET /sapi/v1/lending/auto-invest/redeem/history\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nrequestId -- mandatory/long <br>\nstartTime -- optional/long -- UTC timestamp in ms <br>\nendTime -- optional/long -- UTC timestamp in ms <br>\ncurrent -- optional/long -- Current querying page. Start from 1. Default:1 <br>\nasset -- optional/string <br>\nsize -- optional/long -- Default:10 Max:100 <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#index-linked-plan-redemption-user_data\">\n     https://binance-docs.github.io/apidocs/spot/en/#index-linked-plan-redemption-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/AutoInvest.java.AutoInvest.[String]indexPlanRebalanceInfo(Map<String, Object>)", "name": "indexPlanRebalanceInfo", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String indexPlanRebalanceInfo(Map<String, Object> parameters)", "original_string": "    public String indexPlanRebalanceInfo(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, INDEX_LINKED_PLAN_REBALANCE_DETAILS, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/AutoInvest.java", "class_name": "AutoInvest", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/AutoInvest.java.AutoInvest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/lending/auto-invest/rebalance/history\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nstartTime -- optional/long -- UTC timestamp in ms <br>\nendTime -- optional/long -- UTC timestamp in ms <br>\ncurrent -- optional/long -- Current querying page. Start from 1. Default:1 <br>\nsize -- optional/long -- Default:10 Max:100 <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#index-linked-plan-rebalance-details-user_data\">\n     https://binance-docs.github.io/apidocs/spot/en/#index-linked-plan-rebalance-details-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Fiat.java.Fiat.[]Fiat(String,String,String,boolean,ProxyAuth)", "name": "Fiat", "arg_nums": 5, "params": [{"name": "baseUrl", "type": "String"}, {"name": "apiKey", "type": "String"}, {"name": "secretKey", "type": "String"}, {"name": "showLimitUsage", "type": "boolean"}, {"name": "proxy", "type": "ProxyAuth"}], "return_type": "", "signature": "public Fiat(String baseUrl, String apiKey, String secretKey, boolean showLimitUsage, ProxyAuth proxy)", "original_string": "    public Fiat(String baseUrl, String apiKey, String secretKey, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, new HmacSignatureGenerator(secretKey), proxy);\n        this.showLimitUsage = showLimitUsage;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Fiat.java", "class_name": "Fiat", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Fiat.java.Fiat", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Fiat.java.Fiat.[]Fiat(String,String,SignatureGenerator,boolean,ProxyAuth)", "name": "Fiat", "arg_nums": 5, "params": [{"name": "baseUrl", "type": "String"}, {"name": "apiKey", "type": "String"}, {"name": "signatureGenerator", "type": "SignatureGenerator"}, {"name": "showLimitUsage", "type": "boolean"}, {"name": "proxy", "type": "ProxyAuth"}], "return_type": "", "signature": "public Fiat(String baseUrl, String apiKey, SignatureGenerator signatureGenerator, boolean showLimitUsage, ProxyAuth proxy)", "original_string": "    public Fiat(String baseUrl, String apiKey, SignatureGenerator signatureGenerator, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, signatureGenerator, proxy);\n        this.showLimitUsage = showLimitUsage;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Fiat.java", "class_name": "Fiat", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Fiat.java.Fiat", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Fiat.java.Fiat.[String]orders(Map<String, Object>)", "name": "orders", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String orders(Map<String, Object> parameters)", "original_string": "    public String orders(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"transactionType\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, ORDERS, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Fiat.java", "class_name": "Fiat", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Fiat.java.Fiat", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/fiat/orders\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\ntransactionType -- mandatory/string -- 0-deposit,1-withdraw <br>\nbeginTime -- optional/long <br>\nendTime -- optional/long <br>\npage -- optional/int -- default 1 <br>\nrows -- optional/int -- default 100, max 500 <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-fiat-deposit-withdraw-history-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#get-fiat-deposit-withdraw-history-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Fiat.java.Fiat.[String]payments(Map<String, Object>)", "name": "payments", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String payments(Map<String, Object> parameters)", "original_string": "    public String payments(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"transactionType\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, PAYMENTS, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Fiat.java", "class_name": "Fiat", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Fiat.java.Fiat", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/fiat/payments\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\ntransactionType -- mandatory/string -- 0-buy,1-sell <br>\nbeginTime -- optional/long <br>\nendTime -- optional/long <br>\npage -- optional/int -- default 1 <br>\nrows -- optional/int -- default 100, max 500 <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-fiat-payments-history-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#get-fiat-payments-history-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Blvt.java.Blvt.[]Blvt(String,String,String,boolean,ProxyAuth)", "name": "Blvt", "arg_nums": 5, "params": [{"name": "baseUrl", "type": "String"}, {"name": "apiKey", "type": "String"}, {"name": "secretKey", "type": "String"}, {"name": "showLimitUsage", "type": "boolean"}, {"name": "proxy", "type": "ProxyAuth"}], "return_type": "", "signature": "public Blvt(String baseUrl, String apiKey, String secretKey, boolean showLimitUsage, ProxyAuth proxy)", "original_string": "    public Blvt(String baseUrl, String apiKey, String secretKey, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, new HmacSignatureGenerator(secretKey), proxy);\n        this.showLimitUsage = showLimitUsage;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Blvt.java", "class_name": "Blvt", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Blvt.java.Blvt", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Blvt.java.Blvt.[]Blvt(String,String,SignatureGenerator,boolean,ProxyAuth)", "name": "Blvt", "arg_nums": 5, "params": [{"name": "baseUrl", "type": "String"}, {"name": "apiKey", "type": "String"}, {"name": "signatureGenerator", "type": "SignatureGenerator"}, {"name": "showLimitUsage", "type": "boolean"}, {"name": "proxy", "type": "ProxyAuth"}], "return_type": "", "signature": "public Blvt(String baseUrl, String apiKey, SignatureGenerator signatureGenerator, boolean showLimitUsage, ProxyAuth proxy)", "original_string": "    public Blvt(String baseUrl, String apiKey, SignatureGenerator signatureGenerator, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, signatureGenerator, proxy);\n        this.showLimitUsage = showLimitUsage;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Blvt.java", "class_name": "Blvt", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Blvt.java.Blvt", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Blvt.java.Blvt.[String]blvtInfo(Map<String, Object>)", "name": "blvtInfo", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String blvtInfo(Map<String, Object> parameters)", "original_string": "    public String blvtInfo(Map<String, Object> parameters) {\n        return requestHandler.sendApiRequest(baseUrl, BLVT_INFO, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Blvt.java", "class_name": "Blvt", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Blvt.java.Blvt", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/blvt/tokenInfo\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\ntokenName -- optional/string -- BTCDOWN, BTCUP <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-blvt-info-market_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#get-blvt-info-market_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Blvt.java.Blvt.[String]subscribe(Map<String, Object>)", "name": "subscribe", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String subscribe(Map<String, Object> parameters)", "original_string": "    public String subscribe(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"tokenName\", String.class);\n        ParameterChecker.checkRequiredParameter(parameters, \"cost\");\n        return requestHandler.sendSignedRequest(baseUrl, SUBSCRIBE, parameters, HttpMethod.POST, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Blvt.java", "class_name": "Blvt", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Blvt.java.Blvt", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nPOST /sapi/v1/blvt/subscribe\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\ntokenName -- mandatory/string -- BTCDOWN, BTCUP <br>\ncost -- mandatory/decimal -- spot balance <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#subscribe-blvt-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#subscribe-blvt-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Blvt.java.Blvt.[String]subscriptionRecord(Map<String, Object>)", "name": "subscriptionRecord", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String subscriptionRecord(Map<String, Object> parameters)", "original_string": "    public String subscriptionRecord(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, SUBSCRIPTION_RECORD, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Blvt.java", "class_name": "Blvt", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Blvt.java.Blvt", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/blvt/subscribe/record\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\ntokenName -- optional/string -- BTCDOWN, BTCUP <br>\nid -- optional/long <br>\nstartTime -- optional/long <br>\nendTime -- optional/long <br>\nlimit -- optional/int -- default 1000, max 1000 <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-subscription-record-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#query-subscription-record-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Blvt.java.Blvt.[String]redeem(Map<String, Object>)", "name": "redeem", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String redeem(Map<String, Object> parameters)", "original_string": "    public String redeem(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"tokenName\", String.class);\n        ParameterChecker.checkRequiredParameter(parameters, \"amount\");\n        return requestHandler.sendSignedRequest(baseUrl, REDEEM, parameters, HttpMethod.POST, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Blvt.java", "class_name": "Blvt", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Blvt.java.Blvt", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nPOST /sapi/v1/blvt/redeem\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\ntokenName -- mandatory/string -- BTCDOWN, BTCUP <br>\namount -- mandatory/decimal -- spot balance <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#redeem-blvt-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#redeem-blvt-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Blvt.java.Blvt.[String]redeemRecord(Map<String, Object>)", "name": "redeemRecord", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String redeemRecord(Map<String, Object> parameters)", "original_string": "    public String redeemRecord(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, REDEEM_RECORD, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Blvt.java", "class_name": "Blvt", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Blvt.java.Blvt", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/blvt/redeem/record\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\ntokenName -- optional/string -- BTCDOWN, BTCUP <br>\nid -- optional/long <br>\nstartTime -- optional/long <br>\nendTime -- optional/long <br>\nlimit -- optional/int -- default 1000, max 1000 <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-redemption-record-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#query-redemption-record-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Blvt.java.Blvt.[String]userLimit(Map<String, Object>)", "name": "userLimit", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String userLimit(Map<String, Object> parameters)", "original_string": "    public String userLimit(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, USER_LIMIT, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Blvt.java", "class_name": "Blvt", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Blvt.java.Blvt", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/blvt/userLimit\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\ntokenName -- optional/string -- BTCDOWN, BTCUP <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-blvt-user-limit-info-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#get-blvt-user-limit-info-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/VIPLoans.java.VIPLoans.[]VIPLoans(String,String,String,boolean,ProxyAuth)", "name": "VIPLoans", "arg_nums": 5, "params": [{"name": "baseUrl", "type": "String"}, {"name": "apiKey", "type": "String"}, {"name": "secretKey", "type": "String"}, {"name": "showLimitUsage", "type": "boolean"}, {"name": "proxy", "type": "ProxyAuth"}], "return_type": "", "signature": "public VIPLoans(String baseUrl, String apiKey, String secretKey, boolean showLimitUsage, ProxyAuth proxy)", "original_string": "    public VIPLoans(String baseUrl, String apiKey, String secretKey, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, new HmacSignatureGenerator(secretKey), proxy);\n        this.showLimitUsage = showLimitUsage;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/VIPLoans.java", "class_name": "VIPLoans", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/VIPLoans.java.VIPLoans", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/VIPLoans.java.VIPLoans.[]VIPLoans(String,String,SignatureGenerator,boolean,ProxyAuth)", "name": "VIPLoans", "arg_nums": 5, "params": [{"name": "baseUrl", "type": "String"}, {"name": "apiKey", "type": "String"}, {"name": "signatureGenerator", "type": "SignatureGenerator"}, {"name": "showLimitUsage", "type": "boolean"}, {"name": "proxy", "type": "ProxyAuth"}], "return_type": "", "signature": "public VIPLoans(String baseUrl, String apiKey, SignatureGenerator signatureGenerator, boolean showLimitUsage, ProxyAuth proxy)", "original_string": "    public VIPLoans(String baseUrl, String apiKey, SignatureGenerator signatureGenerator, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, signatureGenerator, proxy);\n        this.showLimitUsage = showLimitUsage;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/VIPLoans.java", "class_name": "VIPLoans", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/VIPLoans.java.VIPLoans", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/VIPLoans.java.VIPLoans.[String]ongoingOrders(Map<String, Object>)", "name": "ongoingOrders", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String ongoingOrders(Map<String, Object> parameters)", "original_string": "    public String ongoingOrders(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, ONGOING_ORDERS, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/VIPLoans.java", "class_name": "VIPLoans", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/VIPLoans.java.VIPLoans", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nVIP loan is available for VIP users only.\n\n<br><br>\nGET /sapi/v1/loan/vip/ongoing/orders\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\norderId -- optional/long -- Order ID <br>\ncollateralAccountId -- optional/long <br>\nloanCoin -- optional/string -- Coin loaned <br>\ncollateralCoin -- optional/string -- Coin used as collateral <br>\ncurrent -- optional/long -- Current querying page. Start from 1, Default:1, Max:1000<br>\nlimit -- optional/long -- Default 10; max 100. <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-vip-loan-ongoing-orders-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#get-vip-loan-ongoing-orders-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/VIPLoans.java.VIPLoans.[String]repay(Map<String, Object>)", "name": "repay", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String repay(Map<String, Object> parameters)", "original_string": "    public String repay(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"orderId\", Long.class);\n        ParameterChecker.checkRequiredParameter(parameters, \"amount\");\n        return requestHandler.sendSignedRequest(baseUrl, REPAY, parameters, HttpMethod.POST, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/VIPLoans.java", "class_name": "VIPLoans", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/VIPLoans.java.VIPLoans", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nVIP loan is available for VIP users only.\n\n<br><br>\nPOST /sapi/v1/loan/vip/repay\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\norderId -- mandatory/long -- Order ID <br>\namount -- mandatory/decimal <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#vip-loan-repay-trade\">\n    https://binance-docs.github.io/apidocs/spot/en/#vip-loan-repay-trade</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/VIPLoans.java.VIPLoans.[String]repaymentHistory(Map<String, Object>)", "name": "repaymentHistory", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String repaymentHistory(Map<String, Object> parameters)", "original_string": "    public String repaymentHistory(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, REPAYMENT_HISTORY, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/VIPLoans.java", "class_name": "VIPLoans", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/VIPLoans.java.VIPLoans", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nVIP loan is available for VIP users only.\n\n<br><br>\nGET /sapi/v1/loan/vip/repay/history\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\norderId -- optional/long -- Order ID <br>\nloanCoin -- optional/string -- Coin loaned <br>\nstartTime -- optional/long -- UTC timestamp in ms <br>\nendTime -- optional/long -- UTC timestamp in ms <br>\ncurrent -- optional/long -- Current querying page. Start from 1, Default:1, Max:1000<br>\nlimit -- optional/long -- Default 10; max 100. <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-vip-loan-repayment-history-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#get-vip-loan-repayment-history-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/VIPLoans.java.VIPLoans.[String]renew(Map<String, Object>)", "name": "renew", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String renew(Map<String, Object> parameters)", "original_string": "    public String renew(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"orderId\", Long.class);\n        return requestHandler.sendSignedRequest(baseUrl, RENEW, parameters, HttpMethod.POST, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/VIPLoans.java", "class_name": "VIPLoans", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/VIPLoans.java.VIPLoans", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nVIP loan is available for VIP users only.\n\n<br><br>\nPOST /sapi/v1/loan/vip/renew\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\norderId -- mandatory/long -- Order ID <br>\nloanTerm -- optional/int -- 30/60 days <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#vip-loan-renew-trade\">\n    https://binance-docs.github.io/apidocs/spot/en/#vip-loan-renew-trade</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/VIPLoans.java.VIPLoans.[String]collateralAccount(Map<String, Object>)", "name": "collateralAccount", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String collateralAccount(Map<String, Object> parameters)", "original_string": "    public String collateralAccount(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, COLLATERAL_ACCOUNT, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/VIPLoans.java", "class_name": "VIPLoans", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/VIPLoans.java.VIPLoans", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nVIP loan is available for VIP users only.\n\n<br><br>\nGET /sapi/v1/loan/vip/collateral/account\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\norderId -- optional/long -- Order ID <br>\ncollateralAccountId -- optional/long <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#check-locked-value-of-vip-collateral-account-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#check-locked-value-of-vip-collateral-account-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/VIPLoans.java.VIPLoans.[String]borrow(Map<String, Object>)", "name": "borrow", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String borrow(Map<String, Object> parameters)", "original_string": "    public String borrow(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"loanAccountId\", Long.class);\n        ParameterChecker.checkParameter(parameters, \"loanCoin\", String.class);\n        ParameterChecker.checkRequiredParameter(parameters, \"loanAmount\");\n        ParameterChecker.checkParameter(parameters, \"collateralAccountId\", String.class);\n        ParameterChecker.checkParameter(parameters, \"collateralCoin\", String.class);\n        ParameterChecker.checkParameter(parameters, \"isFlexibleRate\", Boolean.class);\n        return requestHandler.sendSignedRequest(baseUrl, BORROW, parameters, HttpMethod.POST, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/VIPLoans.java", "class_name": "VIPLoans", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/VIPLoans.java.VIPLoans", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nVIP loan is available for VIP users only.\n\n<br><br>\nPOST /sapi/v1/loan/vip/borrow\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nloanAccountId -- mandatory/long <br>\nloanCoin -- mandatory/string -- Coin loaned <br>\nloanAmount -- mandatory/decimal <br>\ncollateralAccountId -- mandatory/string -- Multiple split by ',' <br>\ncollateralCoin -- mandatory/string -- Multiple split by ',' <br>\nisFlexibleRate -- mandatory/boolean -- TRUE : flexible rate; FALSE: fixed rate. Default: TRUE.<br>\nloanTerm -- optional/integer -- Mandatory for fixed rate. Optional for fixed interest rate. Eg: 30/60 days <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#vip-loan-borrow-trade\">\n    https://binance-docs.github.io/apidocs/spot/en/#vip-loan-borrow-trade</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/VIPLoans.java.VIPLoans.[String]loanableAssets(Map<String, Object>)", "name": "loanableAssets", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String loanableAssets(Map<String, Object> parameters)", "original_string": "    public String loanableAssets(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, LOANABLE_ASSETS, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/VIPLoans.java", "class_name": "VIPLoans", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/VIPLoans.java.VIPLoans", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGet interest rate and borrow limit of loanable assets. The borrow limit is shown in USD value.\n\n<br><br>\nGET /sapi/v1/loan/vip/loanable/data\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nloanCoin -- optional/string -- Coin loaned <br>\nvipLevel -- optional/integer -- Defaults to user's vip level <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-loanable-assets-data-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#get-loanable-assets-data-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/VIPLoans.java.VIPLoans.[String]collateralAsset(Map<String, Object>)", "name": "collateralAsset", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String collateralAsset(Map<String, Object> parameters)", "original_string": "    public String collateralAsset(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, COLLATERAL_ASSET_DATA, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/VIPLoans.java", "class_name": "VIPLoans", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/VIPLoans.java.VIPLoans", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGet Collateral Asset Data\n\n<br><br>\nGET /sapi/v1/loan/vip/collateral/data\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\ncollateralCoin -- optional/string <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-collateral-asset-data-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#get-collateral-asset-data-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/VIPLoans.java.VIPLoans.[String]orderStatus(Map<String, Object>)", "name": "orderStatus", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String orderStatus(Map<String, Object> parameters)", "original_string": "    public String orderStatus(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, ORDER_STATUS, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/VIPLoans.java", "class_name": "VIPLoans", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/VIPLoans.java.VIPLoans", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGet order status\n\n<br><br>\nGET /sapi/v1/loan/vip/request/data\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\ncurrent -- optional/long -- Current querying page. Start from 1. Default:1 <br>\nlimit -- optional/long -- Default 10; max 100. <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-application-status-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#query-application-status-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/VIPLoans.java.VIPLoans.[String]borrowInterestRate(Map<String, Object>)", "name": "borrowInterestRate", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String borrowInterestRate(Map<String, Object> parameters)", "original_string": "    public String borrowInterestRate(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"loanCoin\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, BORROW_INTEREST_RATE, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/VIPLoans.java", "class_name": "VIPLoans", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/VIPLoans.java.VIPLoans", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGet Borrow Interest Rate \n\n<br><br>\nGET /sapi/v1/loan/vip/request/interestRate\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nloanCoin -- mandatory/string -- Max 10 assets, Multiple split by \",\" <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-borrow-interest-rate-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#get-borrow-interest-rate-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Futures.java.Futures.[]Futures(String,String,String,boolean,ProxyAuth)", "name": "Futures", "arg_nums": 5, "params": [{"name": "baseUrl", "type": "String"}, {"name": "apiKey", "type": "String"}, {"name": "secretKey", "type": "String"}, {"name": "showLimitUsage", "type": "boolean"}, {"name": "proxy", "type": "ProxyAuth"}], "return_type": "", "signature": "public Futures(String baseUrl, String apiKey, String secretKey, boolean showLimitUsage, ProxyAuth proxy)", "original_string": "    public Futures(String baseUrl, String apiKey, String secretKey, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, new HmacSignatureGenerator(secretKey), proxy);\n        this.showLimitUsage = showLimitUsage;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Futures.java", "class_name": "Futures", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Futures.java.Futures", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Futures.java.Futures.[]Futures(String,String,SignatureGenerator,boolean,ProxyAuth)", "name": "Futures", "arg_nums": 5, "params": [{"name": "baseUrl", "type": "String"}, {"name": "apiKey", "type": "String"}, {"name": "signatureGenerator", "type": "SignatureGenerator"}, {"name": "showLimitUsage", "type": "boolean"}, {"name": "proxy", "type": "ProxyAuth"}], "return_type": "", "signature": "public Futures(String baseUrl, String apiKey, SignatureGenerator signatureGenerator, boolean showLimitUsage, ProxyAuth proxy)", "original_string": "    public Futures(String baseUrl, String apiKey, SignatureGenerator signatureGenerator, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, signatureGenerator, proxy);\n        this.showLimitUsage = showLimitUsage;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Futures.java", "class_name": "Futures", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Futures.java.Futures", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Futures.java.Futures.[String]futuresTransfer(Map<String, Object>)", "name": "futuresTransfer", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String futuresTransfer(Map<String, Object> parameters)", "original_string": "    public String futuresTransfer(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"asset\", String.class);\n        ParameterChecker.checkRequiredParameter(parameters, \"amount\");\n        ParameterChecker.checkParameter(parameters, \"type\", Integer.class);\n        return requestHandler.sendSignedRequest(baseUrl, FUTURES_TRANSFER, parameters, HttpMethod.POST, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Futures.java", "class_name": "Futures", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Futures.java.Futures", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nExecute transfer between spot account and futures account.\n<br><br>\nPOST /sapi/v1/futures/transfer\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nasset -- mandatory/string -- The asset being transferred, e.g. USDT <br>\namount -- mandatory/decimal -- The amount to be transferred <br>\ntype -- mandatory/int -- 1: transfer from spot account to USDT-M futures account.\n2: transfer from USDT-M futures account to spot account.\n3: transfer from spot account to COIN-M futures account.\n4: transfer from COIN-M futures account to spot account. <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#new-future-account-transfer-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#new-future-account-transfer-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Futures.java.Futures.[String]futuresTransferHistory(Map<String, Object>)", "name": "futuresTransferHistory", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String futuresTransferHistory(Map<String, Object> parameters)", "original_string": "    public String futuresTransferHistory(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"asset\", String.class);\n        ParameterChecker.checkParameter(parameters, \"startTime\", Long.class);\n        return requestHandler.sendSignedRequest(baseUrl, FUTURES_TRANSFER, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Futures.java", "class_name": "Futures", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Futures.java.Futures", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/futures/transfer\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nasset -- optional/string -- The asset being transferred, e.g. USDT <br>\nstartTime -- mandatory/long <br>\nendTime -- optional/long <br>\ncurrent -- optional/long -- Currently querying page. Start from 1. Default:1 <br>\nsize -- optional/long -- Default:10 Max:100 <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-future-account-transaction-history-list-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#get-future-account-transaction-history-list-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Futures.java.Futures.[String]futuresOrderBookHistory(Map<String, Object>)", "name": "futuresOrderBookHistory", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String futuresOrderBookHistory(Map<String, Object> parameters)", "original_string": "    public String futuresOrderBookHistory(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        ParameterChecker.checkParameter(parameters, \"dataType\", String.class);\n        ParameterChecker.checkParameter(parameters, \"startTime\", Long.class);\n        ParameterChecker.checkParameter(parameters, \"endTime\", Long.class);\n        return requestHandler.sendSignedRequest(baseUrl, HISTORICAL_DATA, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/Futures.java", "class_name": "Futures", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/Futures.java.Futures", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/futures/histDataLink\n\n- The span between startTime and endTime can't be more than 7 days\n- The downloand link will be valid for 1 day\n- Only VIP user can query this endpoint\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nsymbol -- mandatory/string -- symbol name, e.g. BTCUSDT or BTCUSD_PERP <br>\ndataType -- mandatory/enum -- \"T_DEPTH\" for ticklevel orderbook data, \"S_DEPTH\" for orderbook snapshot data <br>\nstartTime -- mandatory/long <br>\nendTime -- mandatory/long <br>\nrecvWindow -- optional/long <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-future-ticklevel-orderbook-historical-data-download-link-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#get-future-ticklevel-orderbook-historical-data-download-link-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java.SimpleEarn.[]SimpleEarn(String,String,String,boolean,ProxyAuth)", "name": "SimpleEarn", "arg_nums": 5, "params": [{"name": "baseUrl", "type": "String"}, {"name": "apiKey", "type": "String"}, {"name": "secretKey", "type": "String"}, {"name": "showLimitUsage", "type": "boolean"}, {"name": "proxy", "type": "ProxyAuth"}], "return_type": "", "signature": "public SimpleEarn(String baseUrl, String apiKey, String secretKey, boolean showLimitUsage, ProxyAuth proxy)", "original_string": "    public SimpleEarn(String baseUrl, String apiKey, String secretKey, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, new HmacSignatureGenerator(secretKey), proxy);\n        this.showLimitUsage = showLimitUsage;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java", "class_name": "SimpleEarn", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java.SimpleEarn", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java.SimpleEarn.[]SimpleEarn(String,String,SignatureGenerator,boolean,ProxyAuth)", "name": "SimpleEarn", "arg_nums": 5, "params": [{"name": "baseUrl", "type": "String"}, {"name": "apiKey", "type": "String"}, {"name": "signatureGenerator", "type": "SignatureGenerator"}, {"name": "showLimitUsage", "type": "boolean"}, {"name": "proxy", "type": "ProxyAuth"}], "return_type": "", "signature": "public SimpleEarn(String baseUrl, String apiKey, SignatureGenerator signatureGenerator, boolean showLimitUsage, ProxyAuth proxy)", "original_string": "    public SimpleEarn(String baseUrl, String apiKey, SignatureGenerator signatureGenerator, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, signatureGenerator, proxy);\n        this.showLimitUsage = showLimitUsage;\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java", "class_name": "SimpleEarn", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java.SimpleEarn", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java.SimpleEarn.[String]flexibleProductList(Map<String, Object>)", "name": "flexibleProductList", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String flexibleProductList(Map<String, Object> parameters)", "original_string": "    public String flexibleProductList(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, FLEXIBLE_PRODUCT_LIST, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java", "class_name": "SimpleEarn", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java.SimpleEarn", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGet available Simple Earn flexible product list\n<br><br>\nGET /sapi/v1/simple-earn/flexible/list\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nasset -- optional/string <br>\ncurrent -- optional/long -- Current querying page. Start from 1. Default:1 <br>\nsize -- optional/long -- Default:10 Max:100 <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-simple-earn-flexible-product-list-user_data\">\n     https://binance-docs.github.io/apidocs/spot/en/#get-simple-earn-flexible-product-list-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java.SimpleEarn.[String]lockedProductList(Map<String, Object>)", "name": "lockedProductList", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String lockedProductList(Map<String, Object> parameters)", "original_string": "    public String lockedProductList(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, LOCKED_PRODUCT_LIST, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java", "class_name": "SimpleEarn", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java.SimpleEarn", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/simple-earn/locked/list\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nasset -- optional/string <br>\ncurrent -- optional/long -- Current querying page. Start from 1. Default:1 <br>\nsize -- optional/long -- Default:10 Max:100 <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-simple-earn-locked-product-list-user_data\">\n     https://binance-docs.github.io/apidocs/spot/en/#get-simple-earn-locked-product-list-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java.SimpleEarn.[String]subscribeFlexibleProduct(Map<String, Object>)", "name": "subscribeFlexibleProduct", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String subscribeFlexibleProduct(Map<String, Object> parameters)", "original_string": "    public String subscribeFlexibleProduct(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"productId\", String.class);\n        ParameterChecker.checkRequiredParameter(parameters, \"amount\");\n        return requestHandler.sendSignedRequest(baseUrl, SUBSCRIBE_FLEXIBLE_PRODUCT, parameters, HttpMethod.POST, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java", "class_name": "SimpleEarn", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java.SimpleEarn", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nPOST /sapi/v1/simple-earn/flexible/subscribe\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nproductId -- mandatory/string <br>\namount -- mandatory/decimal <br>\nautoSubscribe -- optional/boolean -- true or false, default true. <br>\nsourceAccount -- optional/enum -- SPOT,FUND,ALL, default SPOT <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#subscribe-flexible-product-trade\">\n     https://binance-docs.github.io/apidocs/spot/en/#subscribe-flexible-product-trade</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java.SimpleEarn.[String]subscribeLockedProduct(Map<String, Object>)", "name": "subscribeLockedProduct", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String subscribeLockedProduct(Map<String, Object> parameters)", "original_string": "    public String subscribeLockedProduct(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"projectId\", String.class);\n        ParameterChecker.checkRequiredParameter(parameters, \"amount\");\n        return requestHandler.sendSignedRequest(baseUrl, SUBSCRIBE_LOCKED_PRODUCT, parameters, HttpMethod.POST, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java", "class_name": "SimpleEarn", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java.SimpleEarn", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nPOST /sapi/v1/simple-earn/locked/subscribe\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nprojectId -- mandatory/string <br>\namount -- mandatory/decimal <br>\nautoSubscribe -- optional/boolean -- true or false, default true. <br>\nsourceAccount -- optional/enum -- SPOT,FUND,ALL, default SPOT <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#subscribe-locked-product-trade\">\n     https://binance-docs.github.io/apidocs/spot/en/#subscribe-locked-product-trade</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java.SimpleEarn.[String]redeemFlexibleProduct(Map<String, Object>)", "name": "redeemFlexibleProduct", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String redeemFlexibleProduct(Map<String, Object> parameters)", "original_string": "    public String redeemFlexibleProduct(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"productId\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, REDEEM_FLEXIBLE_PRODUCT, parameters, HttpMethod.POST, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java", "class_name": "SimpleEarn", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java.SimpleEarn", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nPOST /sapi/v1/simple-earn/flexible/redeem\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nproductId -- mandatory/string <br>\nredeemAll -- optional/boolean -- true or false, default to false <br>\namount -- optional/decimal -- if redeemAll is false, amount is mandatory <br>\ndestAccount -- optional/enum -- SPOT,FUND,ALL, default SPOT <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#redeem-flexible-product-trade\">\n     https://binance-docs.github.io/apidocs/spot/en/#redeem-flexible-product-trade</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java.SimpleEarn.[String]redeemLockedProduct(Map<String, Object>)", "name": "redeemLockedProduct", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String redeemLockedProduct(Map<String, Object> parameters)", "original_string": "    public String redeemLockedProduct(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"positionId\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, REDEEM_LOCKED_PRODUCT, parameters, HttpMethod.POST, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java", "class_name": "SimpleEarn", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java.SimpleEarn", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nPOST /sapi/v1/simple-earn/locked/redeem\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\npositionId -- mandatory/string -- 1234 <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#redeem-locked-product-trade\">\n     https://binance-docs.github.io/apidocs/spot/en/#redeem-locked-product-trade</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java.SimpleEarn.[String]flexibleProductPosition(Map<String, Object>)", "name": "flexibleProductPosition", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String flexibleProductPosition(Map<String, Object> parameters)", "original_string": "    public String flexibleProductPosition(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, FLEXIBLE_PRODUCT_POSITION, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java", "class_name": "SimpleEarn", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java.SimpleEarn", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/simple-earn/flexible/position\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nasset -- optional/string <br>\nproductId -- optional/string <br>\ncurrent -- optional/long -- Current querying page. Start from 1. Default:1 <br>\nsize -- optional/long -- Default:10 Max:100 <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-flexible-product-position-user_data\">\n     https://binance-docs.github.io/apidocs/spot/en/#get-flexible-product-position-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java.SimpleEarn.[String]lockedProductPosition(Map<String, Object>)", "name": "lockedProductPosition", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String lockedProductPosition(Map<String, Object> parameters)", "original_string": "    public String lockedProductPosition(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, LOCKED_PRODUCT_POSITION, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java", "class_name": "SimpleEarn", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java.SimpleEarn", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/simple-earn/locked/position\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nasset -- optional/string <br>\npositionId -- optional/string <br>\nprojectId -- optional/string <br>\ncurrent -- optional/long -- Current querying page. Start from 1. Default:1 <br>\nsize -- optional/long -- Default:10 Max:100 <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-locked-product-position-user_data\">\n     https://binance-docs.github.io/apidocs/spot/en/#get-locked-product-position-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java.SimpleEarn.[String]simpleAccount(Map<String, Object>)", "name": "simpleAccount", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String simpleAccount(Map<String, Object> parameters)", "original_string": "    public String simpleAccount(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, SIMPLE_ACCOUNT, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java", "class_name": "SimpleEarn", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java.SimpleEarn", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/simple-earn/account\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#simple-account-user_data\">\n     https://binance-docs.github.io/apidocs/spot/en/#simple-account-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java.SimpleEarn.[String]flexibleSubscriptionRecord(Map<String, Object>)", "name": "flexibleSubscriptionRecord", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String flexibleSubscriptionRecord(Map<String, Object> parameters)", "original_string": "    public String flexibleSubscriptionRecord(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, FLEXIBLE_SUBSCRIPTION_RECORD, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java", "class_name": "SimpleEarn", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java.SimpleEarn", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/simple-earn/flexible/history/subscriptionRecord\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nproductId -- optional/string <br>\npurchaseId -- optional/string <br>\nasset -- optional/string <br>\nstartTime -- optional/long -- UTC timestamp in ms <br>\nendTime -- optional/long -- UTC timestamp in ms <br>\ncurrent -- optional/long -- Current querying page. Start from 1. Default:1 <br>\nsize -- optional/long -- Default:10 Max:100 <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-flexible-subscription-record-user_data\">\n     https://binance-docs.github.io/apidocs/spot/en/#get-flexible-subscription-record-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java.SimpleEarn.[String]lockedSubscriptionRecord(Map<String, Object>)", "name": "lockedSubscriptionRecord", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String lockedSubscriptionRecord(Map<String, Object> parameters)", "original_string": "    public String lockedSubscriptionRecord(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, LOCKED_SUBSCRIPTION_RECORD, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java", "class_name": "SimpleEarn", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java.SimpleEarn", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/simple-earn/locked/history/subscriptionRecord\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\npurchaseId -- optional/string <br>\nasset -- optional/string <br>\nstartTime -- optional/long -- UTC timestamp in ms <br>\nendTime -- optional/long -- UTC timestamp in ms <br>\ncurrent -- optional/long -- Current querying page. Start from 1. Default:1 <br>\nsize -- optional/long -- Default:10 Max:100 <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-locked-subscription-record-user_data\">\n     https://binance-docs.github.io/apidocs/spot/en/#get-locked-subscription-record-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java.SimpleEarn.[String]flexibleRedemptionRecord(Map<String, Object>)", "name": "flexibleRedemptionRecord", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String flexibleRedemptionRecord(Map<String, Object> parameters)", "original_string": "    public String flexibleRedemptionRecord(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, FLEXIBLE_REDEMPTION_RECORD, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java", "class_name": "SimpleEarn", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java.SimpleEarn", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/simple-earn/flexible/history/redemptionRecord\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nproductId -- optional/string <br>\nredeemId -- optional/string <br>\nasset -- optional/string <br>\nstartTime -- optional/long -- UTC timestamp in ms <br>\nendTime -- optional/long -- UTC timestamp in ms <br>\ncurrent -- optional/long -- Current querying page. Start from 1. Default:1 <br>\nsize -- optional/long -- Default:10 Max:100 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-flexible-redemption-record-user_data\">\n     https://binance-docs.github.io/apidocs/spot/en/#get-flexible-redemption-record-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java.SimpleEarn.[String]lockedRedemptionRecord(Map<String, Object>)", "name": "lockedRedemptionRecord", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String lockedRedemptionRecord(Map<String, Object> parameters)", "original_string": "    public String lockedRedemptionRecord(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, LOCKED_REDEMPTION_RECORD, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java", "class_name": "SimpleEarn", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java.SimpleEarn", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/simple-earn/locked/history/redemptionRecord\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\npositionId -- optional/string <br>\nredeemId -- optional/string <br>\nasset -- optional/string <br>\nstartTime -- optional/long -- UTC timestamp in ms <br>\nendTime -- optional/long -- UTC timestamp in ms <br>\ncurrent -- optional/long -- Current querying page. Start from 1. Default:1 <br>\nsize -- optional/long -- Default:10 Max:100 <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-locked-redemption-record-user_data\">\n     https://binance-docs.github.io/apidocs/spot/en/#get-locked-redemption-record-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java.SimpleEarn.[String]flexibleRewardsHistory(Map<String, Object>)", "name": "flexibleRewardsHistory", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String flexibleRewardsHistory(Map<String, Object> parameters)", "original_string": "    public String flexibleRewardsHistory(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"type\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, FLEXIBLE_REWARDS_HISTORY, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java", "class_name": "SimpleEarn", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java.SimpleEarn", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/simple-earn/flexible/history/rewardsRecord\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nproductId -- optional/string <br>\nasset -- optional/string <br>\nstartTime -- optional/long -- UTC timestamp in ms <br>\nendTime -- optional/long -- UTC timestamp in ms <br>\ntype -- mandatory/enum -- \"BONUS\", \"REALTIME\", \"REWARDS\" <br>\ncurrent -- optional/long -- Start from 1. Default:1 <br>\nsize -- optional/long -- Default:10 Max:100 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-flexible-rewards-history-user_data\">\n     https://binance-docs.github.io/apidocs/spot/en/#get-flexible-rewards-history-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java.SimpleEarn.[String]lockedRewardsHistory(Map<String, Object>)", "name": "lockedRewardsHistory", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String lockedRewardsHistory(Map<String, Object> parameters)", "original_string": "    public String lockedRewardsHistory(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, LOCKED_REWARDS_HISTORY, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java", "class_name": "SimpleEarn", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java.SimpleEarn", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/simple-earn/locked/history/rewardsRecord\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\npositionId -- optional/string <br>\nasset -- optional/string <br>\nstartTime -- optional/long -- UTC timestamp in ms <br>\nendTime -- optional/long -- UTC timestamp in ms <br>\ncurrent -- optional/long -- Currently querying the page. Start from 1. Default:1 <br>\nsize -- optional/long -- Default:10 Max:100 <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-locked-rewards-history-user_data\">\n    https://binance-docs.github.io/apidocs/spot/en/#get-locked-rewards-history-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java.SimpleEarn.[String]setFlexibleAutoSubscribe(Map<String, Object>)", "name": "setFlexibleAutoSubscribe", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String setFlexibleAutoSubscribe(Map<String, Object> parameters)", "original_string": "    public String setFlexibleAutoSubscribe(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"productId\", String.class);\n        ParameterChecker.checkParameter(parameters, \"autoSubscribe\", Boolean.class);\n        return requestHandler.sendSignedRequest(baseUrl, SET_FLEXIBLE_AUTO_SUBSCRIBE, parameters, HttpMethod.POST, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java", "class_name": "SimpleEarn", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java.SimpleEarn", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nPOST /sapi/v1/simple-earn/flexible/setAutoSubscribe\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nproductId -- mandatory/string <br>\nautoSubscribe -- mandatory/boolean -- true or false <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#set-flexible-auto-subscribe-user_data\">\n     https://binance-docs.github.io/apidocs/spot/en/#set-flexible-auto-subscribe-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java.SimpleEarn.[String]setLockedAutoSubscribe(Map<String, Object>)", "name": "setLockedAutoSubscribe", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String setLockedAutoSubscribe(Map<String, Object> parameters)", "original_string": "    public String setLockedAutoSubscribe(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"positionId\", String.class);\n        ParameterChecker.checkParameter(parameters, \"autoSubscribe\", Boolean.class);\n        return requestHandler.sendSignedRequest(baseUrl, SET_LOCKED_AUTO_SUBSCRIBE, parameters, HttpMethod.POST, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java", "class_name": "SimpleEarn", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java.SimpleEarn", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nPOST /sapi/v1/simple-earn/locked/setAutoSubscribe\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\npositionId -- mandatory/string <br>\nautoSubscribe -- mandatory/boolean -- true or false <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#set-locked-auto-subscribe-user_data\">\n     https://binance-docs.github.io/apidocs/spot/en/#set-locked-auto-subscribe-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java.SimpleEarn.[String]flexiblePersonalLeftQuota(Map<String, Object>)", "name": "flexiblePersonalLeftQuota", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String flexiblePersonalLeftQuota(Map<String, Object> parameters)", "original_string": "    public String flexiblePersonalLeftQuota(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"productId\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, FLEXIBLE_PERSONAL_LEFT_QUOTA, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java", "class_name": "SimpleEarn", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java.SimpleEarn", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/simple-earn/flexible/personalLeftQuota\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nproductId -- mandatory/string <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-flexible-personal-left-quota-user_data\">\n     https://binance-docs.github.io/apidocs/spot/en/#get-flexible-personal-left-quota-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java.SimpleEarn.[String]lockedPersonalLeftQuota(Map<String, Object>)", "name": "lockedPersonalLeftQuota", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String lockedPersonalLeftQuota(Map<String, Object> parameters)", "original_string": "    public String lockedPersonalLeftQuota(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"projectId\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, LOCKED_PERSONAL_LEFT_QUOTA, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java", "class_name": "SimpleEarn", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java.SimpleEarn", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/simple-earn/locked/personalLeftQuota\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nprojectId -- mandatory/string <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-locked-personal-left-quota-user_data\">\n     https://binance-docs.github.io/apidocs/spot/en/#get-locked-personal-left-quota-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java.SimpleEarn.[String]flexibleSubscriptionPreview(Map<String, Object>)", "name": "flexibleSubscriptionPreview", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String flexibleSubscriptionPreview(Map<String, Object> parameters)", "original_string": "    public String flexibleSubscriptionPreview(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"productId\", String.class);\n        ParameterChecker.checkRequiredParameter(parameters, \"amount\");\n        return requestHandler.sendSignedRequest(baseUrl, FLEXIBLE_SUBSCRIPTION_PREVIEW, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java", "class_name": "SimpleEarn", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java.SimpleEarn", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/simple-earn/flexible/subscriptionPreview\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nproductId -- mandatory/string <br>\namount -- mandatory/decimal <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-flexible-subscription-preview-user_data\">\n     https://binance-docs.github.io/apidocs/spot/en/#get-flexible-subscription-preview-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java.SimpleEarn.[String]lockedSubscriptionPreview(Map<String, Object>)", "name": "lockedSubscriptionPreview", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String lockedSubscriptionPreview(Map<String, Object> parameters)", "original_string": "    public String lockedSubscriptionPreview(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"projectId\", String.class);\n        ParameterChecker.checkRequiredParameter(parameters, \"amount\");\n        return requestHandler.sendSignedRequest(baseUrl, LOCKED_SUBSCRIPTION_PREVIEW, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java", "class_name": "SimpleEarn", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java.SimpleEarn", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/simple-earn/locked/subscriptionPreview\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nprojectId -- mandatory/string <br>\namount -- mandatory/decimal <br>\nautoSubscribe -- optional/boolean -- true or false, default true. <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-locked-subscription-preview-user_data\">\n     https://binance-docs.github.io/apidocs/spot/en/#get-locked-subscription-preview-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java.SimpleEarn.[String]rateHistory(Map<String, Object>)", "name": "rateHistory", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String rateHistory(Map<String, Object> parameters)", "original_string": "    public String rateHistory(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"productId\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, RATE_HISTORY, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java", "class_name": "SimpleEarn", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java.SimpleEarn", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/simple-earn/flexible/history/rateHistory\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nproductId -- mandatory/string <br>\nstartTime -- optional/long -- UTC timestamp in ms <br>\nendTime -- optional/long -- UTC timestamp in ms <br>\ncurrent -- optional/long -- Current querying page. Start from 1. Default:1 <br>\nsize -- optional/long -- Default:10 Max:100 <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-rate-history-user_data\">\n     https://binance-docs.github.io/apidocs/spot/en/#get-rate-history-user_data</a>\n"}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java.SimpleEarn.[String]collateralRecord(Map<String, Object>)", "name": "collateralRecord", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, Object>"}], "return_type": "String", "signature": "public String collateralRecord(Map<String, Object> parameters)", "original_string": "    public String collateralRecord(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, COLLATERAL_RECORD, parameters, HttpMethod.GET, showLimitUsage);\n    }", "default_arguments": null, "file": "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java", "class_name": "SimpleEarn", "class_uri": "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java.SimpleEarn", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGET /sapi/v1/simple-earn/flexible/history/collateralRecord\n<br>\n@param\nparameters Map of String,Object pair\n           where String is the name of the parameter and Object is the value of the parameter\n<br><br>\nproductId -- optional/string <br>\nstartTime -- optional/long -- UTC timestamp in ms <br>\nendTime -- optional/long -- UTC timestamp in ms <br>\ncurrent -- optional/long -- Current querying page. Start from 1. Default:1 <br>\nsize -- optional/long -- Default:10 Max:100 <br>\nrecvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n@return String\n@see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-collateral-record-user_data\">\n     https://binance-docs.github.io/apidocs/spot/en/#get-collateral-record-user_data</a>\n"}]