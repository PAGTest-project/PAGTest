[{"strategy": "retry", "code": "\npackage com.binance.connector.client.impl.spot;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertThrows;\n\nimport java.util.LinkedHashMap;\nimport java.util.Map;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport com.binance.connector.client.enums.HttpMethod;\nimport com.binance.connector.client.exceptions.BinanceConnectorException;\nimport com.binance.connector.client.utils.MockWebServerDispatcher;\nimport com.binance.connector.client.utils.RequestHandler;\nimport com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;\n\nimport okhttp3.mockwebserver.Dispatcher;\nimport okhttp3.mockwebserver.MockWebServer;\n\npublic class Wallet_withdrawTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private Wallet wallet;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(\"/\").toString();\n        RequestHandler requestHandler = new RequestHandler(\"apiKey\", new HmacSignatureGenerator(\"secretKey\"), null);\n        this.wallet = new Wallet(baseUrl, \"apiKey\", \"secretKey\", false, null);\n    }\n\n    @Test\n    public void testWithdrawSuccess() {\n        String path = \"/sapi/v1/capital/withdraw/apply\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"coin\", \"BTC\");\n        parameters.put(\"address\", \"1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\");\n        parameters.put(\"amount\", \"0.01\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(\"/\", path, \"{\\\"success\\\":true}\", HttpMethod.POST, 200);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = wallet.withdraw(parameters);\n        assertEquals(\"{\\\"success\\\":true}\", result);\n    }\n\n    @Test\n    public void testWithdrawMissingCoin() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"address\", \"1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\");\n        parameters.put(\"amount\", \"0.01\");\n\n        assertThrows(BinanceConnectorException.class, () -> wallet.withdraw(parameters));\n    }\n\n    @Test\n    public void testWithdrawMissingAddress() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"coin\", \"BTC\");\n        parameters.put(\"amount\", \"0.01\");\n\n        assertThrows(BinanceConnectorException.class, () -> wallet.withdraw(parameters));\n    }\n\n    @Test\n    public void testWithdrawMissingAmount() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"coin\", \"BTC\");\n        parameters.put(\"address\", \"1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\");\n\n        assertThrows(BinanceConnectorException.class, () -> wallet.withdraw(parameters));\n    }\n}\n"}]