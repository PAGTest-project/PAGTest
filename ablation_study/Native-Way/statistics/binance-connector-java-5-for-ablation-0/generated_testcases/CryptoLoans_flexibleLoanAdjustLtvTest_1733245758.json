[{"strategy": "generate", "code": "\npackage com.binance.connector.client.impl.spot;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertThrows;\n\nimport java.util.LinkedHashMap;\nimport java.util.Map;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport com.binance.connector.client.SpotClient;\nimport com.binance.connector.client.enums.HttpMethod;\nimport com.binance.connector.client.exceptions.BinanceConnectorException;\nimport com.binance.connector.client.impl.SpotClientImpl;\nimport com.binance.connector.client.utils.ProxyAuth;\nimport com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;\n\nimport okhttp3.mockwebserver.Dispatcher;\nimport okhttp3.mockwebserver.MockWebServer;\nimport unit.MockData;\nimport unit.MockWebServerDispatcher;\n\npublic class CryptoLoans_flexibleLoanAdjustLtvTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    private static final String apiKey = \"apiKey\";\n    private static final String secretKey = \"secretKey\";\n    private static final boolean showLimitUsage = false;\n    private static final ProxyAuth proxy = null;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testFlexibleLoanAdjustLtv() {\n        String path = \"/sapi/v1/loan/flexible/adjust/ltv?loanCoin=BTC&collateralCoin=ETH&adjustmentAmount=10.1&direction=ADDITIONAL\";\n\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"loanCoin\", \"BTC\");\n        parameters.put(\"collateralCoin\", \"ETH\");\n        parameters.put(\"adjustmentAmount\", 10.1);\n        parameters.put(\"direction\", \"ADDITIONAL\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(apiKey, secretKey, baseUrl, showLimitUsage, proxy);\n        String result = client.createCryptoLoans().flexibleLoanAdjustLtv(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testFlexibleLoanAdjustLtvWithoutParameters() {\n        String path = \"/sapi/v1/loan/flexible/adjust/ltv\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(apiKey, secretKey, baseUrl, showLimitUsage, proxy);\n        assertThrows(BinanceConnectorException.class, () -> client.createCryptoLoans().flexibleLoanAdjustLtv(parameters));\n    }\n}\n"}]