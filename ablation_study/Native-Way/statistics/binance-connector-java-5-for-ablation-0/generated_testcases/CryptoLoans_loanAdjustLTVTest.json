[{"strategy": "retry", "code": "\npackage com.binance.connector.client.impl.spot;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertThrows;\n\nimport java.util.LinkedHashMap;\nimport java.util.Map;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport com.binance.connector.client.enums.HttpMethod;\nimport com.binance.connector.client.exceptions.BinanceConnectorException;\nimport com.binance.connector.client.utils.ProxyAuth;\nimport com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;\n\nimport okhttp3.mockwebserver.Dispatcher;\nimport okhttp3.mockwebserver.MockWebServer;\nimport unit.MockData;\nimport unit.MockWebServerDispatcher;\n\npublic class CryptoLoans_loanAdjustLTVTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    private static final long orderId = 123456789L;\n    private static final double amount = 100.0;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testLoanAdjustLTVWithoutParameters() {\n        String path = \"/sapi/v1/loan/adjust/ltv\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        CryptoLoans cryptoLoans = new CryptoLoans(baseUrl, MockData.API_KEY, new HmacSignatureGenerator(MockData.SECRET_KEY), false, new ProxyAuth(null, null));\n        assertThrows(BinanceConnectorException.class, () -> cryptoLoans.loanAdjustLTV(parameters));\n    }\n\n    @Test\n    public void testLoanAdjustLTVWithParameters() {\n        String path = \"/sapi/v1/loan/adjust/ltv\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"orderId\", orderId);\n        parameters.put(\"amount\", amount);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        CryptoLoans cryptoLoans = new CryptoLoans(baseUrl, MockData.API_KEY, new HmacSignatureGenerator(MockData.SECRET_KEY), false, new ProxyAuth(null, null));\n        String result = cryptoLoans.loanAdjustLTV(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}\n"}]