[{"strategy": "retry", "code": "\npackage com.binance.connector.client.utils;\n\nimport com.binance.connector.client.exceptions.BinanceClientException;\nimport com.binance.connector.client.exceptions.BinanceConnectorException;\nimport com.binance.connector.client.exceptions.BinanceServerException;\nimport okhttp3.OkHttpClient;\nimport okhttp3.Request;\nimport okhttp3.Response;\nimport okhttp3.ResponseBody;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.Mockito;\n\nimport java.io.IOException;\nimport java.net.ConnectException;\nimport java.net.UnknownHostException;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertThrows;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\npublic class ResponseHandler_handleResponseTest {\n\n    private Request mockRequest;\n    private ProxyAuth mockProxy;\n    private OkHttpClient mockClient;\n    private Response mockResponse;\n    private ResponseBody mockResponseBody;\n\n    @Before\n    public void setUp() {\n        mockRequest = mock(Request.class);\n        mockProxy = mock(ProxyAuth.class);\n        mockClient = mock(OkHttpClient.class);\n        mockResponse = mock(Response.class);\n        mockResponseBody = mock(ResponseBody.class);\n    }\n\n    @Test\n    public void testHandleResponseSuccess() throws IOException {\n        when(mockClient.newCall(mockRequest)).thenReturn(new okhttp3.Call() {\n            @Override\n            public Response execute() throws IOException {\n                return mockResponse;\n            }\n\n            @Override\n            public void enqueue(okhttp3.Callback responseCallback) {}\n\n            @Override\n            public void cancel() {}\n\n            @Override\n            public boolean isExecuted() {\n                return false;\n            }\n\n            @Override\n            public boolean isCanceled() {\n                return false;\n            }\n\n            @Override\n            public Request request() {\n                return mockRequest;\n            }\n\n            @Override\n            public okhttp3.Call clone() {\n                return null;\n            }\n\n            @Override\n            public okhttp3.Call.Timeout timeout() {\n                return null;\n            }\n        });\n\n        when(mockResponse.code()).thenReturn(200);\n        when(mockResponse.body()).thenReturn(mockResponseBody);\n        when(mockResponseBody.string()).thenReturn(\"{\\\"data\\\":\\\"success\\\"}\");\n\n        String result = ResponseHandler.handleResponse(mockRequest, false, mockProxy);\n        assertEquals(\"{\\\"data\\\":\\\"success\\\"}\", result);\n    }\n\n    @Test\n    public void testHandleResponseClientError() throws IOException {\n        when(mockClient.newCall(mockRequest)).thenReturn(new okhttp3.Call() {\n            @Override\n            public Response execute() throws IOException {\n                return mockResponse;\n            }\n\n            @Override\n            public void enqueue(okhttp3.Callback responseCallback) {}\n\n            @Override\n            public void cancel() {}\n\n            @Override\n            public boolean isExecuted() {\n                return false;\n            }\n\n            @Override\n            public boolean isCanceled() {\n                return false;\n            }\n\n            @Override\n            public Request request() {\n                return mockRequest;\n            }\n\n            @Override\n            public okhttp3.Call clone() {\n                return null;\n            }\n\n            @Override\n            public okhttp3.Call.Timeout timeout() {\n                return null;\n            }\n        });\n\n        when(mockResponse.code()).thenReturn(400);\n        when(mockResponse.body()).thenReturn(mockResponseBody);\n        when(mockResponseBody.string()).thenReturn(\"{\\\"code\\\":-1,\\\"msg\\\":\\\"error\\\"}\");\n\n        assertThrows(BinanceClientException.class, () -> ResponseHandler.handleResponse(mockRequest, false, mockProxy));\n    }\n\n    @Test\n    public void testHandleResponseServerError() throws IOException {\n        when(mockClient.newCall(mockRequest)).thenReturn(new okhttp3.Call() {\n            @Override\n            public Response execute() throws IOException {\n                return mockResponse;\n            }\n\n            @Override\n            public void enqueue(okhttp3.Callback responseCallback) {}\n\n            @Override\n            public void cancel() {}\n\n            @Override\n            public boolean isExecuted() {\n                return false;\n            }\n\n            @Override\n            public boolean isCanceled() {\n                return false;\n            }\n\n            @Override\n            public Request request() {\n                return mockRequest;\n            }\n\n            @Override\n            public okhttp3.Call clone() {\n                return null;\n            }\n\n            @Override\n            public okhttp3.Call.Timeout timeout() {\n                return null;\n            }\n        });\n\n        when(mockResponse.code()).thenReturn(500);\n        when(mockResponse.body()).thenReturn(mockResponseBody);\n        when(mockResponseBody.string()).thenReturn(\"{\\\"error\\\":\\\"server error\\\"}\");\n\n        assertThrows(BinanceServerException.class, () -> ResponseHandler.handleResponse(mockRequest, false, mockProxy));\n    }\n\n    @Test\n    public void testHandleResponseIOException() throws IOException {\n        when(mockClient.newCall(mockRequest)).thenReturn(new okhttp3.Call() {\n            @Override\n            public Response execute() throws IOException {\n                throw new IOException(\"Network error\");\n            }\n\n            @Override\n            public void enqueue(okhttp3.Callback responseCallback) {}\n\n            @Override\n            public void cancel() {}\n\n            @Override\n            public boolean isExecuted() {\n                return false;\n            }\n\n            @Override\n            public boolean isCanceled() {\n                return false;\n            }\n\n            @Override\n            public Request request() {\n                return mockRequest;\n            }\n\n            @Override\n            public okhttp3.Call clone() {\n                return null;\n            }\n\n            @Override\n            public okhttp3.Call.Timeout timeout() {\n                return null;\n            }\n        });\n\n        assertThrows(BinanceConnectorException.class, () -> ResponseHandler.handleResponse(mockRequest, false, mockProxy));\n    }\n\n    @Test\n    public void testHandleResponseConnectException() throws IOException {\n        when(mockClient.newCall(mockRequest)).thenReturn(new okhttp3.Call() {\n            @Override\n            public Response execute() throws IOException {\n                throw new ConnectException(\"Connection error\");\n            }\n\n            @Override\n            public void enqueue(okhttp3.Callback responseCallback) {}\n\n            @Override\n            public void cancel() {}\n\n            @Override\n            public boolean isExecuted() {\n                return false;\n            }\n\n            @Override\n            public boolean isCanceled() {\n                return false;\n            }\n\n            @Override\n            public Request request() {\n                return mockRequest;\n            }\n\n            @Override\n            public okhttp3.Call clone() {\n                return null;\n            }\n\n            @Override\n            public okhttp3.Call.Timeout timeout() {\n                return null;\n            }\n        });\n\n        assertThrows(BinanceConnectorException.class, () -> ResponseHandler.handleResponse(mockRequest, false, mockProxy));\n    }\n\n    @Test\n    public void testHandleResponseUnknownHostException() throws IOException {\n        when(mockClient.newCall(mockRequest)).thenReturn(new okhttp3.Call() {\n            @Override\n            public Response execute() throws IOException {\n                throw new UnknownHostException(\"Unknown host\");\n            }\n\n            @Override\n            public void enqueue(okhttp3.Callback responseCallback) {}\n\n            @Override\n            public void cancel() {}\n\n            @Override\n            public boolean isExecuted() {\n                return false;\n            }\n\n            @Override\n            public boolean isCanceled() {\n                return false;\n            }\n\n            @Override\n            public Request request() {\n                return mockRequest;\n            }\n\n            @Override\n            public okhttp3.Call clone() {\n                return null;\n            }\n\n            @Override\n            public okhttp3.Call.Timeout timeout() {\n                return null;\n            }\n        });\n\n        assertThrows(BinanceConnectorException.class, () -> ResponseHandler.handleResponse(mockRequest, false, mockProxy));\n    }\n}\n"}]