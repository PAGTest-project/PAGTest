[{"strategy": "generate", "code": "\npackage com.binance.connector.client.utils.signaturegenerator;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport javax.crypto.Mac;\nimport javax.crypto.spec.SecretKeySpec;\nimport org.apache.commons.codec.binary.Hex;\nimport java.security.InvalidKeyException;\nimport java.security.NoSuchAlgorithmException;\n\npublic class HmacSignatureGenerator_getSignatureTest {\n\n    @Test\n    public void testGetSignature_Success() throws Exception {\n        HmacSignatureGenerator generator = new HmacSignatureGenerator(\"secret\");\n        String data = \"testData\";\n        String expectedSignature = Hex.encodeHexString(Mac.getInstance(\"HmacSHA256\").doFinal(data.getBytes()));\n        assertEquals(expectedSignature, generator.getSignature(data));\n    }\n\n    @Test(expected = RuntimeException.class)\n    public void testGetSignature_Exception() throws Exception {\n        HmacSignatureGenerator generator = new HmacSignatureGenerator(\"secret\");\n        String data = \"testData\";\n        Mac mockMac = Mac.getInstance(\"HmacSHA256\");\n        SecretKeySpec secretKeySpec = new SecretKeySpec(\"secret\".getBytes(), \"HmacSHA256\");\n        mockMac.init(secretKeySpec);\n        // Simulate an exception by overriding the doFinal method\n        Mac spyMac = spy(mockMac);\n        doThrow(new InvalidKeyException(\"Simulated exception\")).when(spyMac).doFinal(any(byte[].class));\n        // Replace the Mac instance with the mocked one\n        HmacSignatureGenerator spyGenerator = spy(generator);\n        doReturn(spyMac).when(spyGenerator).getMacInstance();\n        spyGenerator.getSignature(data);\n    }\n\n    // Helper method to mock the Mac instance\n    private Mac getMacInstance() throws NoSuchAlgorithmException {\n        return Mac.getInstance(\"HmacSHA256\");\n    }\n}\n"}]