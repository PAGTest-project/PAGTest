[{"strategy": "retry", "code": "\npackage com.binance.connector.client.utils.signaturegenerator;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.mockito.Mockito.*;\nimport java.security.Signature;\nimport java.security.interfaces.RSAPrivateKey;\nimport java.util.Base64;\n\npublic class RsaSignatureGenerator_getSignatureTest {\n\n    @Test\n    public void testGetSignature_Success() throws Exception {\n        // Given\n        String data = \"testData\";\n        RSAPrivateKey mockPrivateKey = mock(RSAPrivateKey.class);\n        Signature mockSignature = mock(Signature.class);\n        byte[] mockSignedBytes = \"mockSignature\".getBytes();\n        String expectedSignature = Base64.getEncoder().encodeToString(mockSignedBytes);\n\n        RsaSignatureGenerator generator = spy(new RsaSignatureGenerator(\"dummyPrivateKey\"));\n        doReturn(mockPrivateKey).when(generator).parsePrivateKey(anyString(), anyString());\n\n        // When\n        when(Signature.getInstance(\"SHA256withRSA\")).thenReturn(mockSignature);\n        when(mockSignature.sign()).thenReturn(mockSignedBytes);\n\n        String result = generator.getSignature(data);\n\n        // Then\n        assertEquals(expectedSignature, result);\n        verify(mockSignature).initSign(mockPrivateKey);\n        verify(mockSignature).update(data.getBytes());\n        verify(mockSignature).sign();\n    }\n\n    @Test(expected = RuntimeException.class)\n    public void testGetSignature_Exception() throws Exception {\n        // Given\n        String data = \"testData\";\n        RSAPrivateKey mockPrivateKey = mock(RSAPrivateKey.class);\n        Signature mockSignature = mock(Signature.class);\n\n        RsaSignatureGenerator generator = spy(new RsaSignatureGenerator(\"dummyPrivateKey\"));\n        doReturn(mockPrivateKey).when(generator).parsePrivateKey(anyString(), anyString());\n\n        // When\n        when(Signature.getInstance(\"SHA256withRSA\")).thenReturn(mockSignature);\n        doThrow(new Exception(\"Mock Exception\")).when(mockSignature).initSign(mockPrivateKey);\n\n        generator.getSignature(data);\n\n        // Then\n        // Expecting RuntimeException to be thrown\n    }\n}\n"}]