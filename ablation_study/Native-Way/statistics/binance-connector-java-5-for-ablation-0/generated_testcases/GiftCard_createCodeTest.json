[{"strategy": "retry", "code": "\npackage com.binance.connector.client.impl.spot;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport java.util.LinkedHashMap;\nimport java.util.Map;\nimport com.binance.connector.client.enums.HttpMethod;\nimport com.binance.connector.client.utils.ParameterChecker;\nimport com.binance.connector.client.utils.ProxyAuth;\nimport com.binance.connector.client.utils.RequestHandler;\nimport com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;\nimport com.binance.connector.client.utils.signaturegenerator.SignatureGenerator;\nimport com.binance.connector.client.exceptions.BinanceConnectorException;\nimport okhttp3.mockwebserver.Dispatcher;\nimport okhttp3.mockwebserver.MockWebServer;\nimport unit.MockData;\nimport unit.MockWebServerDispatcher;\n\npublic class GiftCard_createCodeTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private GiftCard giftCard;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.giftCard = new GiftCard(baseUrl, MockData.API_KEY, new HmacSignatureGenerator(MockData.SECRET_KEY), true, null);\n    }\n\n    @Test\n    public void testCreateCodeSuccess() {\n        String path = \"/sapi/v1/giftcard/createCode?token=BTC&amount=1.0\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"token\", \"BTC\");\n        parameters.put(\"amount\", 1.0);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = giftCard.createCode(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testCreateCodeMissingToken() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"amount\", 1.0);\n\n        Exception exception = assertThrows(BinanceConnectorException.class, () -> {\n            giftCard.createCode(parameters);\n        });\n\n        assertEquals(\"\\\"token\\\" is a mandatory parameter!\", exception.getMessage());\n    }\n\n    @Test\n    public void testCreateCodeMissingAmount() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"token\", \"BTC\");\n\n        Exception exception = assertThrows(BinanceConnectorException.class, () -> {\n            giftCard.createCode(parameters);\n        });\n\n        assertEquals(\"\\\"amount\\\" is a mandatory parameter!\", exception.getMessage());\n    }\n}\n"}]