[{"strategy": "generate", "code": "\npackage com.binance.connector.client.impl.spot;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertThrows;\n\nimport java.util.LinkedHashMap;\nimport java.util.Map;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport com.binance.connector.client.enums.HttpMethod;\nimport com.binance.connector.client.exceptions.BinanceConnectorException;\nimport com.binance.connector.client.utils.ProxyAuth;\nimport com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;\n\nimport okhttp3.mockwebserver.Dispatcher;\nimport okhttp3.mockwebserver.MockWebServer;\nimport unit.MockData;\nimport unit.MockWebServerDispatcher;\n\npublic class CryptoLoans_flexibleLoanRepayTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    private final String apiKey = \"apiKey\";\n    private final String secretKey = \"secretKey\";\n    private final boolean showLimitUsage = false;\n    private final ProxyAuth proxy = null;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testFlexibleLoanRepayWithoutParameters() {\n        String path = \"/sapi/v1/loan/flexible/repay\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        CryptoLoans cryptoLoans = new CryptoLoans(baseUrl, apiKey, new HmacSignatureGenerator(secretKey), showLimitUsage, proxy);\n        assertThrows(BinanceConnectorException.class, () -> cryptoLoans.flexibleLoanRepay(parameters));\n    }\n\n    @Test\n    public void testFlexibleLoanRepayWithValidParameters() {\n        String path = \"/sapi/v1/loan/flexible/repay\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"loanCoin\", \"BTC\");\n        parameters.put(\"collateralCoin\", \"ETH\");\n        parameters.put(\"repayAmount\", 1.0);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        CryptoLoans cryptoLoans = new CryptoLoans(baseUrl, apiKey, new HmacSignatureGenerator(secretKey), showLimitUsage, proxy);\n        String result = cryptoLoans.flexibleLoanRepay(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}\n"}]