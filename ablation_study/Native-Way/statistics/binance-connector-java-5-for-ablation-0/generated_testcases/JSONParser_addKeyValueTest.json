[{"strategy": "retry", "code": "\npackage com.binance.connector.client.utils;\n\nimport org.json.JSONObject;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class JSONParser_addKeyValueTest {\n\n    @Test\n    public void testAddKeyValueWithNullParameters() {\n        JSONObject result = JSONParser.addKeyValue(null, \"key\", \"value\");\n        assertEquals(\"value\", result.get(\"key\"));\n    }\n\n    @Test\n    public void testAddKeyValueWithExistingParameters() {\n        JSONObject parameters = new JSONObject();\n        parameters.put(\"existingKey\", \"existingValue\");\n        JSONObject result = JSONParser.addKeyValue(parameters, \"newKey\", \"newValue\");\n        assertEquals(\"existingValue\", result.get(\"existingKey\"));\n        assertEquals(\"newValue\", result.get(\"newKey\"));\n    }\n\n    @Test\n    public void testAddKeyValueWithNullValue() {\n        JSONObject parameters = new JSONObject();\n        JSONObject result = JSONParser.addKeyValue(parameters, \"key\", null);\n        assertNull(result.opt(\"key\"));\n    }\n\n    @Test\n    public void testAddKeyValueWithExistingKey() {\n        JSONObject parameters = new JSONObject();\n        parameters.put(\"key\", \"oldValue\");\n        JSONObject result = JSONParser.addKeyValue(parameters, \"key\", \"newValue\");\n        assertEquals(\"newValue\", result.get(\"key\"));\n    }\n}\n"}]