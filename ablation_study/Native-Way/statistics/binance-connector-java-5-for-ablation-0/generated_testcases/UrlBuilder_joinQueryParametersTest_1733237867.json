[{"strategy": "retry", "code": "\npackage com.binance.connector.client.utils;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class UrlBuilder_joinQueryParametersTest {\n\n    private StringBuilder sb;\n\n    @Before\n    public void setUp() {\n        sb = new StringBuilder();\n    }\n\n    @Test\n    public void testJoinQueryParametersWithNullParams() {\n        Map<String, Object> params = null;\n        StringBuilder result = UrlBuilder.joinQueryParameters(sb, params);\n        assertEquals(sb.toString(), result.toString());\n    }\n\n    @Test\n    public void testJoinQueryParametersWithEmptyParams() {\n        Map<String, Object> params = new HashMap<>();\n        StringBuilder result = UrlBuilder.joinQueryParameters(sb, params);\n        assertEquals(sb.toString(), result.toString());\n    }\n\n    @Test\n    public void testJoinQueryParametersWithSingleParam() {\n        Map<String, Object> params = new HashMap<>();\n        params.put(\"key1\", \"value1\");\n        StringBuilder expected = new StringBuilder(\"key1=value1\");\n        StringBuilder result = UrlBuilder.joinQueryParameters(sb, params);\n        assertEquals(expected.toString(), result.toString());\n    }\n\n    @Test\n    public void testJoinQueryParametersWithMultipleParams() {\n        Map<String, Object> params = new HashMap<>();\n        params.put(\"key1\", \"value1\");\n        params.put(\"key2\", 123);\n        params.put(\"key3\", 123.456);\n        StringBuilder expected = new StringBuilder(\"key1=value1&key2=123&key3=123.456\");\n        StringBuilder result = UrlBuilder.joinQueryParameters(sb, params);\n        assertEquals(expected.toString(), result.toString());\n    }\n\n    @Test\n    public void testJoinQueryParametersWithSpecialCharacters() {\n        Map<String, Object> params = new HashMap<>();\n        params.put(\"key1\", \"value with spaces\");\n        params.put(\"key2\", \"value&with&special&chars\");\n        StringBuilder expected = new StringBuilder(\"key1=value%20with%20spaces&key2=value%26with%26special%26chars\");\n        StringBuilder result = UrlBuilder.joinQueryParameters(sb, params);\n        assertEquals(expected.toString(), result.toString());\n    }\n}\n"}]