[{"strategy": "retry", "code": "\npackage com.binance.connector.client.utils.signaturegenerator;\n\nimport org.bouncycastle.crypto.signers.Ed25519Signer;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.Mockito;\n\nimport java.nio.charset.StandardCharsets;\nimport java.util.Base64;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.mockito.Mockito.*;\n\npublic class Ed25519SignatureGenerator_getSignatureTest {\n\n    private Ed25519SignatureGenerator signatureGenerator;\n    private Ed25519Signer mockSigner;\n\n    @Before\n    public void setUp() throws Exception {\n        mockSigner = mock(Ed25519Signer.class);\n        signatureGenerator = Mockito.spy(new Ed25519SignatureGenerator(\"testPrivateKey\"));\n        doReturn(mockSigner).when(signatureGenerator).createSigner();\n    }\n\n    @Test\n    public void testGetSignature() {\n        String data = \"testData\";\n        byte[] dataBytes = data.getBytes(StandardCharsets.UTF_8);\n        byte[] signatureBytes = \"signature\".getBytes(StandardCharsets.UTF_8);\n        String expectedSignature = Base64.getEncoder().encodeToString(signatureBytes);\n\n        when(mockSigner.generateSignature()).thenReturn(signatureBytes);\n\n        String actualSignature = signatureGenerator.getSignature(data);\n\n        verify(mockSigner).init(true, any());\n        verify(mockSigner).update(dataBytes, 0, dataBytes.length);\n        assertEquals(expectedSignature, actualSignature);\n    }\n\n    private Ed25519Signer createSigner() {\n        return new Ed25519Signer();\n    }\n}\n"}]