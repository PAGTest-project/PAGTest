[{"strategy": "retry", "code": "\npackage org.openapitools.openapidiff.core.output;\n\nimport static org.mockito.Mockito.*;\n\nimport java.io.IOException;\nimport java.io.OutputStreamWriter;\nimport j2html.tags.specialized.OlTag;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.Mock;\nimport org.mockito.junit.jupiter.MockitoExtension;\nimport org.openapitools.openapidiff.core.exception.RendererException;\n\n@ExtendWith(MockitoExtension.class)\npublic class HtmlRender_renderHtmlTest {\n\n    @Mock\n    private OlTag ol_new;\n\n    @Mock\n    private OlTag ol_miss;\n\n    @Mock\n    private OlTag ol_deprec;\n\n    @Mock\n    private OlTag ol_changed;\n\n    @Mock\n    private OutputStreamWriter outputStreamWriter;\n\n    @Test\n    public void testRenderHtml_Success() throws IOException {\n        HtmlRender htmlRender = new HtmlRender();\n        htmlRender.renderHtml(ol_new, ol_miss, ol_deprec, ol_changed, outputStreamWriter);\n\n        verify(outputStreamWriter).close();\n    }\n\n    @Test\n    public void testRenderHtml_IOException() throws IOException {\n        doThrow(new IOException()).when(outputStreamWriter).close();\n\n        HtmlRender htmlRender = new HtmlRender();\n        try {\n            htmlRender.renderHtml(ol_new, ol_miss, ol_deprec, ol_changed, outputStreamWriter);\n        } catch (RendererException e) {\n            // Expected exception\n            return;\n        }\n        throw new AssertionError(\"Expected RendererException was not thrown\");\n    }\n}\n"}]