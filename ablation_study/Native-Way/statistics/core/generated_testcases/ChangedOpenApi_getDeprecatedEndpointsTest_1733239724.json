[{"strategy": "generate", "code": "\npackage org.openapitools.openapidiff.core.model;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.openapitools.openapidiff.core.compare.OpenApiDiffOptions;\nimport org.openapitools.openapidiff.core.model.Endpoint;\nimport org.openapitools.openapidiff.core.model.ChangedOperation;\nimport org.openapitools.openapidiff.core.model.ChangedOpenApi;\nimport org.openapitools.openapidiff.core.utils.EndpointUtils;\nimport io.swagger.v3.oas.models.PathItem;\nimport io.swagger.v3.oas.models.Operation;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class ChangedOpenApi_getDeprecatedEndpointsTest {\n\n    private ChangedOpenApi changedOpenApi;\n\n    @BeforeEach\n    public void setUp() {\n        OpenApiDiffOptions options = new OpenApiDiffOptions();\n        changedOpenApi = new ChangedOpenApi(options);\n    }\n\n    @Test\n    public void testGetDeprecatedEndpoints_NoDeprecatedOperations() {\n        ChangedOperation op1 = new ChangedOperation(\"path1\", PathItem.HttpMethod.GET, new Operation(), new Operation());\n        op1.setDeprecated(false);\n        ChangedOperation op2 = new ChangedOperation(\"path2\", PathItem.HttpMethod.POST, new Operation(), new Operation());\n        op2.setDeprecated(false);\n\n        changedOpenApi.setChangedOperations(Arrays.asList(op1, op2));\n\n        List<Endpoint> deprecatedEndpoints = changedOpenApi.getDeprecatedEndpoints();\n        assertThat(deprecatedEndpoints).isEmpty();\n    }\n\n    @Test\n    public void testGetDeprecatedEndpoints_WithDeprecatedOperations() {\n        ChangedOperation op1 = new ChangedOperation(\"path1\", PathItem.HttpMethod.GET, new Operation(), new Operation());\n        op1.setDeprecated(true);\n        ChangedOperation op2 = new ChangedOperation(\"path2\", PathItem.HttpMethod.POST, new Operation(), new Operation());\n        op2.setDeprecated(false);\n\n        changedOpenApi.setChangedOperations(Arrays.asList(op1, op2));\n\n        List<Endpoint> deprecatedEndpoints = changedOpenApi.getDeprecatedEndpoints();\n        assertThat(deprecatedEndpoints).hasSize(1);\n        assertThat(deprecatedEndpoints.get(0).getPathUrl()).isEqualTo(\"path1\");\n        assertThat(deprecatedEndpoints.get(0).getMethod()).isEqualTo(PathItem.HttpMethod.GET);\n    }\n\n    @Test\n    public void testGetDeprecatedEndpoints_AllDeprecatedOperations() {\n        ChangedOperation op1 = new ChangedOperation(\"path1\", PathItem.HttpMethod.GET, new Operation(), new Operation());\n        op1.setDeprecated(true);\n        ChangedOperation op2 = new ChangedOperation(\"path2\", PathItem.HttpMethod.POST, new Operation(), new Operation());\n        op2.setDeprecated(true);\n\n        changedOpenApi.setChangedOperations(Arrays.asList(op1, op2));\n\n        List<Endpoint> deprecatedEndpoints = changedOpenApi.getDeprecatedEndpoints();\n        assertThat(deprecatedEndpoints).hasSize(2);\n        assertThat(deprecatedEndpoints.get(0).getPathUrl()).isEqualTo(\"path1\");\n        assertThat(deprecatedEndpoints.get(0).getMethod()).isEqualTo(PathItem.HttpMethod.GET);\n        assertThat(deprecatedEndpoints.get(1).getPathUrl()).isEqualTo(\"path2\");\n        assertThat(deprecatedEndpoints.get(1).getMethod()).isEqualTo(PathItem.HttpMethod.POST);\n    }\n}\n"}]