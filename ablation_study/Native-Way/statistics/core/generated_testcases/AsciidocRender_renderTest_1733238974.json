[{"strategy": "retry", "code": "\npackage org.openapitools.openapidiff.core.output;\n\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\nimport org.openapitools.openapidiff.core.model.ChangedOpenApi;\nimport org.openapitools.openapidiff.core.model.Endpoint;\nimport org.openapitools.openapidiff.core.exception.RendererException;\nimport io.swagger.v3.oas.models.OpenAPI;\nimport io.swagger.v3.oas.models.info.Info;\nimport java.io.IOException;\nimport java.io.OutputStreamWriter;\nimport java.util.Collections;\nimport java.util.List;\n\nimport static org.mockito.Mockito.*;\n\npublic class AsciidocRender_renderTest {\n\n    @Test\n    public void testRenderUnchanged() throws Exception {\n        ChangedOpenApi diff = mock(ChangedOpenApi.class);\n        OutputStreamWriter outputStreamWriter = mock(OutputStreamWriter.class);\n\n        when(diff.isUnchanged()).thenReturn(true);\n        when(diff.getNewSpecOpenApi()).thenReturn(mock(OpenAPI.class));\n        when(diff.getNewSpecOpenApi().getInfo()).thenReturn(mock(Info.class));\n        when(diff.getNewSpecOpenApi().getInfo().getTitle()).thenReturn(\"Test Title\");\n        when(diff.getNewSpecOpenApi().getInfo().getVersion()).thenReturn(\"1.0\");\n\n        AsciidocRender asciidocRender = new AsciidocRender();\n        asciidocRender.render(diff, outputStreamWriter);\n\n        verify(outputStreamWriter, times(4)).write(anyString());\n        verify(outputStreamWriter).close();\n    }\n\n    @Test\n    public void testRenderChanged() throws Exception {\n        ChangedOpenApi diff = mock(ChangedOpenApi.class);\n        OutputStreamWriter outputStreamWriter = mock(OutputStreamWriter.class);\n\n        when(diff.isUnchanged()).thenReturn(false);\n        when(diff.isCompatible()).thenReturn(true);\n        when(diff.getNewSpecOpenApi()).thenReturn(mock(OpenAPI.class));\n        when(diff.getNewSpecOpenApi().getInfo()).thenReturn(mock(Info.class));\n        when(diff.getNewSpecOpenApi().getInfo().getTitle()).thenReturn(\"Test Title\");\n        when(diff.getNewSpecOpenApi().getInfo().getVersion()).thenReturn(\"1.0\");\n        when(diff.getNewEndpoints()).thenReturn(Collections.emptyList());\n        when(diff.getMissingEndpoints()).thenReturn(Collections.emptyList());\n        when(diff.getDeprecatedEndpoints()).thenReturn(Collections.emptyList());\n        when(diff.getChangedOperations()).thenReturn(Collections.emptyList());\n\n        AsciidocRender asciidocRender = new AsciidocRender();\n        asciidocRender.render(diff, outputStreamWriter);\n\n        verify(outputStreamWriter, times(6)).write(anyString());\n        verify(outputStreamWriter).close();\n    }\n\n    @Test\n    public void testRenderIOException() throws Exception {\n        ChangedOpenApi diff = mock(ChangedOpenApi.class);\n        OutputStreamWriter outputStreamWriter = mock(OutputStreamWriter.class);\n\n        when(diff.isUnchanged()).thenReturn(true);\n        when(diff.getNewSpecOpenApi()).thenReturn(mock(OpenAPI.class));\n        when(diff.getNewSpecOpenApi().getInfo()).thenReturn(mock(Info.class));\n        when(diff.getNewSpecOpenApi().getInfo().getTitle()).thenReturn(\"Test Title\");\n        when(diff.getNewSpecOpenApi().getInfo().getVersion()).thenReturn(\"1.0\");\n\n        doThrow(new IOException()).when(outputStreamWriter).close();\n\n        AsciidocRender asciidocRender = new AsciidocRender();\n        try {\n            asciidocRender.render(diff, outputStreamWriter);\n        } catch (RendererException e) {\n            // Expected exception\n        }\n\n        verify(outputStreamWriter, times(4)).write(anyString());\n        verify(outputStreamWriter).close();\n    }\n}\n"}]