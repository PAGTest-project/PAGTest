[{"strategy": "retry", "code": "\npackage org.openapitools.openapidiff.core.model.deferred;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.*;\n\nimport java.util.Optional;\nimport java.util.function.Function;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.Mock;\nimport org.mockito.junit.jupiter.MockitoExtension;\n\n@ExtendWith(MockitoExtension.class)\npublic class PendingChanged_flatMapTest {\n\n    @Mock\n    private Function<Optional<String>, DeferredChanged<Integer>> mockFunction;\n\n    @Mock\n    private DeferredChanged<Integer> mockDeferredChanged;\n\n    @Test\n    public void testFlatMapWithValueSet() {\n        PendingChanged<String> pendingChanged = new PendingChanged<>();\n        pendingChanged.setValue(Optional.of(\"test\"));\n\n        when(mockFunction.apply(any())).thenReturn(mockDeferredChanged);\n\n        DeferredChanged<Integer> result = pendingChanged.flatMap(mockFunction);\n\n        verify(mockFunction).apply(Optional.of(\"test\"));\n        verify(mockDeferredChanged).whenSet(any());\n        assertEquals(mockDeferredChanged, result);\n    }\n\n    @Test\n    public void testFlatMapWithoutValueSet() {\n        PendingChanged<String> pendingChanged = new PendingChanged<>();\n\n        when(mockFunction.apply(any())).thenReturn(mockDeferredChanged);\n\n        DeferredChanged<Integer> result = pendingChanged.flatMap(mockFunction);\n\n        verify(mockFunction, never()).apply(any());\n        verify(mockDeferredChanged, never()).whenSet(any());\n        assertEquals(PendingChanged.class, result.getClass());\n    }\n}\n"}]