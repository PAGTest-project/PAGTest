[{"strategy": "generate", "code": "\npackage org.openapitools.openapidiff.core.output;\n\nimport static org.mockito.Mockito.*;\n\nimport java.io.IOException;\nimport java.io.OutputStreamWriter;\nimport java.util.Collections;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.mockito.Mockito;\nimport org.openapitools.openapidiff.core.model.*;\n\npublic class ConsoleRender_renderTest {\n\n    private ConsoleRender consoleRender;\n    private ChangedOpenApi diff;\n    private OutputStreamWriter outputStreamWriter;\n\n    @BeforeEach\n    public void setUp() {\n        consoleRender = new ConsoleRender();\n        diff = mock(ChangedOpenApi.class);\n        outputStreamWriter = mock(OutputStreamWriter.class);\n    }\n\n    @Test\n    public void testRenderUnchanged() throws IOException {\n        when(diff.isUnchanged()).thenReturn(true);\n\n        consoleRender.render(diff, outputStreamWriter);\n\n        verify(outputStreamWriter).write(\"No differences. Specifications are equivalents\");\n        verify(outputStreamWriter).close();\n    }\n\n    @Test\n    public void testRenderChanged() throws IOException {\n        when(diff.isUnchanged()).thenReturn(false);\n        when(diff.getNewSpecOpenApi()).thenReturn(new OpenApi());\n        when(diff.getNewSpecOpenApi().getInfo()).thenReturn(new Info());\n        when(diff.getNewSpecOpenApi().getInfo().getTitle()).thenReturn(\"Test API\");\n        when(diff.getNewEndpoints()).thenReturn(Collections.emptyList());\n        when(diff.getMissingEndpoints()).thenReturn(Collections.emptyList());\n        when(diff.getDeprecatedEndpoints()).thenReturn(Collections.emptyList());\n        when(diff.getChangedOperations()).thenReturn(Collections.emptyList());\n        when(diff.isCompatible()).thenReturn(true);\n\n        consoleRender.render(diff, outputStreamWriter);\n\n        verify(outputStreamWriter).write(Mockito.anyString());\n        verify(outputStreamWriter).close();\n    }\n\n    @Test\n    public void testRenderIOException() throws IOException {\n        when(diff.isUnchanged()).thenReturn(true);\n        doThrow(new IOException(\"Test Exception\")).when(outputStreamWriter).close();\n\n        try {\n            consoleRender.render(diff, outputStreamWriter);\n        } catch (RendererException e) {\n            assert(e.getCause().getMessage().equals(\"Test Exception\"));\n        }\n    }\n}\n"}]