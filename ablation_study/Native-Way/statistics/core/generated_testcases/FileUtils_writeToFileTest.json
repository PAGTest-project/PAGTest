[{"strategy": "retry", "code": "\npackage org.openapitools.openapidiff.core.utils;\n\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\nimport org.openapitools.openapidiff.core.model.ChangedOpenApi;\nimport org.openapitools.openapidiff.core.output.Render;\n\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.OutputStreamWriter;\nimport java.nio.file.Paths;\n\nimport static org.mockito.Mockito.*;\n\nclass FileUtils_writeToFileTest {\n\n    @Test\n    void testWriteToFile_Success() throws IOException {\n        Render render = mock(Render.class);\n        ChangedOpenApi diff = mock(ChangedOpenApi.class);\n        String fileName = \"testFile.txt\";\n\n        FileOutputStream fileOutputStream = mock(FileOutputStream.class);\n        OutputStreamWriter outputStreamWriter = mock(OutputStreamWriter.class);\n\n        whenNew(FileOutputStream.class).withArguments(any(java.io.File.class)).thenReturn(fileOutputStream);\n        whenNew(OutputStreamWriter.class).withArguments(any(FileOutputStream.class)).thenReturn(outputStreamWriter);\n\n        FileUtils.writeToFile(render, diff, fileName);\n\n        verify(render).render(diff, outputStreamWriter);\n    }\n\n    @Test\n    void testWriteToFile_FileNameNullOrEmpty() {\n        Render render = mock(Render.class);\n        ChangedOpenApi diff = mock(ChangedOpenApi.class);\n        String fileName = null;\n\n        FileUtils.writeToFile(render, diff, fileName);\n\n        fileName = \"\";\n        FileUtils.writeToFile(render, diff, fileName);\n    }\n\n    @Test\n    void testWriteToFile_IOException() throws IOException {\n        Render render = mock(Render.class);\n        ChangedOpenApi diff = mock(ChangedOpenApi.class);\n        String fileName = \"testFile.txt\";\n\n        FileOutputStream fileOutputStream = mock(FileOutputStream.class);\n        OutputStreamWriter outputStreamWriter = mock(OutputStreamWriter.class);\n\n        whenNew(FileOutputStream.class).withArguments(any(java.io.File.class)).thenReturn(fileOutputStream);\n        whenNew(OutputStreamWriter.class).withArguments(any(FileOutputStream.class)).thenReturn(outputStreamWriter);\n\n        doThrow(new IOException(\"Test Exception\")).when(outputStreamWriter).close();\n\n        FileUtils.writeToFile(render, diff, fileName);\n\n        verify(render, never()).render(any(), any());\n    }\n}\n"}]