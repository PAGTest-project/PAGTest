[{"strategy": "retry", "code": "\npackage org.openapitools.openapidiff.core.model.deferred;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.*;\n\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.function.Consumer;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\nimport org.mockito.Mock;\nimport org.mockito.junit.jupiter.MockitoExtension;\nimport org.junit.jupiter.api.extension.ExtendWith;\n\n@ExtendWith(MockitoExtension.class)\npublic class DeferredBuilder_buildTest {\n\n    private DeferredBuilder<Object> builder;\n\n    @Mock\n    private DeferredChanged<Object> deferredItem1;\n\n    @Mock\n    private DeferredChanged<Object> deferredItem2;\n\n    @Mock\n    private PendingChanged<List<Optional<? super Object>>> pendingChanged;\n\n    @BeforeEach\n    public void setUp() {\n        builder = new DeferredBuilder<>();\n    }\n\n    @Test\n    public void testBuildWithEmptyDeferredValues() {\n        DeferredChanged<List<Optional<? super Object>>> result = builder.build();\n        assertEquals(DeferredChanged.empty(), result);\n    }\n\n    @Test\n    public void testBuildWithNonEmptyDeferredValues() {\n        builder.add(deferredItem1);\n        builder.add(deferredItem2);\n\n        when(pendingChanged.setValue(any())).thenReturn(true);\n\n        DeferredChanged<List<Optional<? super Object>>> result = builder.build();\n\n        verify(deferredItem1).whenSet(any());\n        verify(deferredItem2).whenSet(any());\n    }\n}\n"}]