[{"uris": "src/test/java/org/openapitools/openapidiff/core/TestUtils.java.TestUtils", "name": "TestUtils", "file_path": "src/test/java/org/openapitools/openapidiff/core/TestUtils.java", "superclasses": "", "methods": ["[void]assertOpenApiAreEquals(String,String)", "[void]assertOpenApiChangedEndpoints(String,String)", "[void]assertSpecUnchanged(String,String)", "[void]assertSpecChangedButCompatible(String,String)", "[void]assertSpecIncompatible(String,String,BackwardIncompatibleProp)", "[void]assertOpenApiBackwardCompatible(String,String,boolean)", "[void]assertOpenApiBackwardIncompatible(String,String)"], "method_uris": ["src/test/java/org/openapitools/openapidiff/core/TestUtils.java.TestUtils.[void]assertOpenApiAreEquals(String,String)", "src/test/java/org/openapitools/openapidiff/core/TestUtils.java.TestUtils.[void]assertOpenApiChangedEndpoints(String,String)", "src/test/java/org/openapitools/openapidiff/core/TestUtils.java.TestUtils.[void]assertSpecUnchanged(String,String)", "src/test/java/org/openapitools/openapidiff/core/TestUtils.java.TestUtils.[void]assertSpecChangedButCompatible(String,String)", "src/test/java/org/openapitools/openapidiff/core/TestUtils.java.TestUtils.[void]assertSpecIncompatible(String,String,BackwardIncompatibleProp)", "src/test/java/org/openapitools/openapidiff/core/TestUtils.java.TestUtils.[void]assertOpenApiBackwardCompatible(String,String,boolean)", "src/test/java/org/openapitools/openapidiff/core/TestUtils.java.TestUtils.[void]assertOpenApiBackwardIncompatible(String,String)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestUtils {\n  public static final Logger LOG = getLogger(TestUtils.class);\n\n  public static void assertOpenApiAreEquals(String oldSpec, String newSpec) {\n    ChangedOpenApi changedOpenApi = OpenApiCompare.fromLocations(oldSpec, newSpec);\n    LOG.info(\"Result: {}\", changedOpenApi.isChanged().getValue());\n    assertThat(changedOpenApi.getNewEndpoints()).isEmpty();\n    assertThat(changedOpenApi.getMissingEndpoints()).isEmpty();\n    assertThat(changedOpenApi.getChangedOperations()).isEmpty();\n  }\n\n  public static void assertOpenApiChangedEndpoints(String oldSpec, String newSpec) {\n    ChangedOpenApi changedOpenApi = OpenApiCompare.fromLocations(oldSpec, newSpec);\n    LOG.info(\"Result: {}\", changedOpenApi.isChanged().getValue());\n    assertThat(changedOpenApi.getNewEndpoints()).isEmpty();\n    assertThat(changedOpenApi.getMissingEndpoints()).isEmpty();\n    assertThat(changedOpenApi.getChangedOperations()).isNotEmpty();\n  }\n\n  public static void assertSpecUnchanged(String oldSpec, String newSpec) {\n    ChangedOpenApi changedOpenApi = OpenApiCompare.fromLocations(oldSpec, newSpec);\n    LOG.info(\"Result: {}\", changedOpenApi.isChanged().getValue());\n    assertThat(changedOpenApi.isUnchanged()).isTrue();\n  }\n\n  public static void assertSpecChangedButCompatible(String oldSpec, String newSpec) {\n    ChangedOpenApi changedOpenApi = OpenApiCompare.fromLocations(oldSpec, newSpec);\n    DiffResult diffResult = changedOpenApi.isChanged();\n    LOG.info(\"Result: {}\", diffResult.getValue());\n    assertThat(diffResult.isDifferent()).isTrue();\n    assertThat(diffResult.isCompatible()).isTrue();\n  }\n\n  public static void assertSpecIncompatible(\n      String oldSpec, String newSpec, BackwardIncompatibleProp prop) {\n    OpenApiDiffOptions.Builder builder = OpenApiDiffOptions.builder();\n    // Expect incompatible when BackwardIncompatibleProp enabled\n    builder.configProperty(prop.getPropertyName(), \"true\");\n    OpenApiDiffOptions optsIncompat = builder.build();\n    ChangedOpenApi apiIncompat = OpenApiCompare.fromLocations(oldSpec, newSpec, null, optsIncompat);\n    LOG.info(\"Result: {}\", apiIncompat.isChanged().getValue());\n    assertThat(apiIncompat.isIncompatible()).isTrue();\n    // Expect changed but compatible when BackwardIncompatibleProp disabled\n    builder.configProperty(prop.getPropertyName(), \"false\");\n    OpenApiDiffOptions optsCompat = builder.build();\n    ChangedOpenApi apiCompat = OpenApiCompare.fromLocations(oldSpec, newSpec, null, optsCompat);\n    LOG.info(\"Result: {}\", apiCompat.isChanged().getValue());\n    assertThat(apiCompat.isDifferent()).isTrue();\n    assertThat(apiCompat.isCompatible()).isTrue();\n  }\n\n  public static void assertOpenApiBackwardCompatible(\n      String oldSpec, String newSpec, boolean isDiff) {\n    ChangedOpenApi changedOpenApi = OpenApiCompare.fromLocations(oldSpec, newSpec);\n    LOG.info(\"Result: {}\", changedOpenApi.isChanged().getValue());\n    assertThat(changedOpenApi.isCompatible()).isTrue();\n  }\n\n  public static void assertOpenApiBackwardIncompatible(String oldSpec, String newSpec) {\n    ChangedOpenApi changedOpenApi = OpenApiCompare.fromLocations(oldSpec, newSpec);\n    LOG.info(\"Result: {}\", changedOpenApi.isChanged().getValue());\n    assertThat(changedOpenApi.isIncompatible()).isTrue();\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "public static final Logger LOG = getLogger(TestUtils.class);", "docstring": "", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "Logger", "name": "LOG = getLogger(TestUtils.class)", "syntax_pass": true}]}, {"uris": "src/main/java/org/openapitools/openapidiff/core/OpenApiCompare.java.OpenApiCompare", "name": "OpenApiCompare", "file_path": "src/main/java/org/openapitools/openapidiff/core/OpenApiCompare.java", "superclasses": "", "methods": ["[]OpenApiCompare()", "[ChangedOpenApi]fromContents(String,String)", "[ChangedOpenApi]fromContents(String,String,List<AuthorizationValue>)", "[ChangedOpenApi]fromContents(String,String,List<AuthorizationValue>,OpenApiDiffOptions)", "[ChangedOpenApi]fromFiles(File,File)", "[ChangedOpenApi]fromFiles(File,File,List<AuthorizationValue>)", "[ChangedOpenApi]fromFiles(File,File,List<AuthorizationValue>,OpenApiDiffOptions)", "[ChangedOpenApi]fromLocations(String,String)", "[ChangedOpenApi]fromLocations(String,String,List<AuthorizationValue>)", "[ChangedOpenApi]fromLocations(String,String,List<AuthorizationValue>,OpenApiDiffOptions)", "[ChangedOpenApi]fromSpecifications(OpenAPI,OpenAPI)", "[ChangedOpenApi]fromSpecifications(OpenAPI,OpenAPI,OpenApiDiffOptions)", "[OpenAPI]notNull(OpenAPI,String)", "[OpenAPI]readContent(String,List<AuthorizationValue>)", "[OpenAPI]readLocation(String,List<AuthorizationValue>)"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/OpenApiCompare.java.OpenApiCompare.[]OpenApiCompare()", "src/main/java/org/openapitools/openapidiff/core/OpenApiCompare.java.OpenApiCompare.[ChangedOpenApi]fromContents(String,String)", "src/main/java/org/openapitools/openapidiff/core/OpenApiCompare.java.OpenApiCompare.[ChangedOpenApi]fromContents(String,String,List<AuthorizationValue>)", "src/main/java/org/openapitools/openapidiff/core/OpenApiCompare.java.OpenApiCompare.[ChangedOpenApi]fromContents(String,String,List<AuthorizationValue>,OpenApiDiffOptions)", "src/main/java/org/openapitools/openapidiff/core/OpenApiCompare.java.OpenApiCompare.[ChangedOpenApi]fromFiles(File,File)", "src/main/java/org/openapitools/openapidiff/core/OpenApiCompare.java.OpenApiCompare.[ChangedOpenApi]fromFiles(File,File,List<AuthorizationValue>)", "src/main/java/org/openapitools/openapidiff/core/OpenApiCompare.java.OpenApiCompare.[ChangedOpenApi]fromFiles(File,File,List<AuthorizationValue>,OpenApiDiffOptions)", "src/main/java/org/openapitools/openapidiff/core/OpenApiCompare.java.OpenApiCompare.[ChangedOpenApi]fromLocations(String,String)", "src/main/java/org/openapitools/openapidiff/core/OpenApiCompare.java.OpenApiCompare.[ChangedOpenApi]fromLocations(String,String,List<AuthorizationValue>)", "src/main/java/org/openapitools/openapidiff/core/OpenApiCompare.java.OpenApiCompare.[ChangedOpenApi]fromLocations(String,String,List<AuthorizationValue>,OpenApiDiffOptions)", "src/main/java/org/openapitools/openapidiff/core/OpenApiCompare.java.OpenApiCompare.[ChangedOpenApi]fromSpecifications(OpenAPI,OpenAPI)", "src/main/java/org/openapitools/openapidiff/core/OpenApiCompare.java.OpenApiCompare.[ChangedOpenApi]fromSpecifications(OpenAPI,OpenAPI,OpenApiDiffOptions)", "src/main/java/org/openapitools/openapidiff/core/OpenApiCompare.java.OpenApiCompare.[OpenAPI]notNull(OpenAPI,String)", "src/main/java/org/openapitools/openapidiff/core/OpenApiCompare.java.OpenApiCompare.[OpenAPI]readContent(String,List<AuthorizationValue>)", "src/main/java/org/openapitools/openapidiff/core/OpenApiCompare.java.OpenApiCompare.[OpenAPI]readLocation(String,List<AuthorizationValue>)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class OpenApiCompare {\n  private static final OpenAPIParser PARSER = new OpenAPIParser();\n  private static final ParseOptions OPTIONS = new ParseOptions();\n\n  static {\n    OPTIONS.setResolve(true);\n  }\n\n  private OpenApiCompare() {}\n\n  /**\n   * compare two openapi doc\n   *\n   * @param oldContent old api-doc location:Json or Http\n   * @param newContent new api-doc location:Json or Http\n   * @return Comparison result\n   */\n  public static ChangedOpenApi fromContents(String oldContent, String newContent) {\n    return fromContents(oldContent, newContent, null);\n  }\n\n  /**\n   * compare two openapi doc\n   *\n   * @param oldContent old api-doc location:Json or Http\n   * @param newContent new api-doc location:Json or Http\n   * @param auths\n   * @return Comparison result\n   */\n  public static ChangedOpenApi fromContents(\n      String oldContent, String newContent, List<AuthorizationValue> auths) {\n    return fromContents(oldContent, newContent, auths, OpenApiDiffOptions.builder().build());\n  }\n\n  /**\n   * compare two openapi doc\n   *\n   * @param oldContent old api-doc location:Json or Http\n   * @param newContent new api-doc location:Json or Http\n   * @param auths\n   * @param options\n   * @return Comparison result\n   */\n  public static ChangedOpenApi fromContents(\n      String oldContent,\n      String newContent,\n      List<AuthorizationValue> auths,\n      OpenApiDiffOptions options) {\n    return fromSpecifications(\n        readContent(oldContent, auths), readContent(newContent, auths), options);\n  }\n\n  /**\n   * compare two openapi doc\n   *\n   * @param oldFile old api-doc file\n   * @param newFile new api-doc file\n   * @return Comparison result\n   */\n  public static ChangedOpenApi fromFiles(File oldFile, File newFile) {\n    return fromFiles(oldFile, newFile, null);\n  }\n\n  /**\n   * compare two openapi doc\n   *\n   * @param oldFile old api-doc file\n   * @param newFile new api-doc file\n   * @param auths\n   * @return Comparison result\n   */\n  public static ChangedOpenApi fromFiles(\n      File oldFile, File newFile, List<AuthorizationValue> auths) {\n    return fromFiles(oldFile, newFile, auths, OpenApiDiffOptions.builder().build());\n  }\n\n  /**\n   * compare two openapi doc\n   *\n   * @param oldFile old api-doc file\n   * @param newFile new api-doc file\n   * @param auths\n   * @param options\n   * @return Comparison result\n   */\n  public static ChangedOpenApi fromFiles(\n      File oldFile, File newFile, List<AuthorizationValue> auths, OpenApiDiffOptions options) {\n    return fromLocations(oldFile.getAbsolutePath(), newFile.getAbsolutePath(), auths, options);\n  }\n\n  /**\n   * compare two openapi doc\n   *\n   * @param oldLocation old api-doc location (local or http)\n   * @param newLocation new api-doc location (local or http)\n   * @return Comparison result\n   */\n  public static ChangedOpenApi fromLocations(String oldLocation, String newLocation) {\n    return fromLocations(oldLocation, newLocation, null);\n  }\n\n  /**\n   * compare two openapi doc\n   *\n   * @param oldLocation old api-doc location (local or http)\n   * @param newLocation new api-doc location (local or http)\n   * @param auths\n   * @return Comparison result\n   */\n  public static ChangedOpenApi fromLocations(\n      String oldLocation, String newLocation, List<AuthorizationValue> auths) {\n    return fromLocations(oldLocation, newLocation, auths, OpenApiDiffOptions.builder().build());\n  }\n\n  /**\n   * compare two openapi doc\n   *\n   * @param oldLocation old api-doc location (local or http)\n   * @param newLocation new api-doc location (local or http)\n   * @param auths\n   * @param options\n   * @return Comparison result\n   */\n  public static ChangedOpenApi fromLocations(\n      String oldLocation,\n      String newLocation,\n      List<AuthorizationValue> auths,\n      OpenApiDiffOptions options) {\n    return fromSpecifications(\n        readLocation(oldLocation, auths), readLocation(newLocation, auths), options);\n  }\n\n  /**\n   * compare two openapi doc\n   *\n   * @param oldSpec old api-doc specification\n   * @param newSpec new api-doc specification\n   * @return Comparison result\n   */\n  public static ChangedOpenApi fromSpecifications(OpenAPI oldSpec, OpenAPI newSpec) {\n    return fromSpecifications(oldSpec, newSpec, OpenApiDiffOptions.builder().build());\n  }\n\n  /**\n   * compare two openapi doc\n   *\n   * @param oldSpec old api-doc specification\n   * @param newSpec new api-doc specification\n   * @param options\n   * @return Comparison result\n   */\n  public static ChangedOpenApi fromSpecifications(\n      OpenAPI oldSpec, OpenAPI newSpec, OpenApiDiffOptions options) {\n    return OpenApiDiff.compare(notNull(oldSpec, \"old\"), notNull(newSpec, \"new\"), options);\n  }\n\n  private static OpenAPI notNull(OpenAPI spec, String type) {\n    if (spec == null) {\n      throw new RuntimeException(String.format(\"Cannot read %s OpenAPI spec\", type));\n    }\n    return spec;\n  }\n\n  private static OpenAPI readContent(String content, List<AuthorizationValue> auths) {\n    return PARSER.readContents(content, auths, OPTIONS).getOpenAPI();\n  }\n\n  private static OpenAPI readLocation(String location, List<AuthorizationValue> auths) {\n    return PARSER.readLocation(location, auths, OPTIONS).getOpenAPI();\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final OpenAPIParser PARSER = new OpenAPIParser();", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "OpenAPIParser", "name": "PARSER = new OpenAPIParser()", "syntax_pass": true}, {"attribute_expression": "private static final ParseOptions OPTIONS = new ParseOptions();", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "ParseOptions", "name": "OPTIONS = new ParseOptions()", "syntax_pass": true}]}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender", "name": "MarkdownRender", "file_path": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java", "superclasses": "", "methods": ["[void]render(ChangedOpenApi,OutputStreamWriter)", "[String]sectionTitle(String)", "[void]listEndpoints(String,List<Endpoint>,OutputStreamWriter)", "[String]itemEndpoint(String,String,String)", "[String]itemEndpoint(String,String,ChangedMetadata)", "[String]titleH5(String)", "[void]listEndpoints(List<ChangedOperation>,OutputStreamWriter)", "[String]responses(ChangedApiResponse)", "[String]listResponse(String,Map<String, ApiResponse>)", "[String]itemResponse(String,String,ApiResponse)", "[String]itemResponse(String,ChangedResponse)", "[String]itemResponse(String,String,String)", "[String]headers(ChangedHeaders)", "[String]listHeader(String,Map<String, Header>)", "[String]itemHeader(String,String,Header)", "[String]itemHeader(String,ChangedHeader)", "[String]itemHeader(String,String,String)", "[String]bodyContent(String,ChangedContent)", "[String]bodyContent(ChangedContent)", "[String]listContent(String,String,Map<String, MediaType>)", "[String]itemContent(String,String)", "[String]itemContent(String,String,MediaType)", "[String]itemContent(int,String,ChangedMediaType)", "[String]schema(ChangedSchema)", "[String]oneOfSchema(int,ChangedOneOfSchema,String)", "[String]required(int,String,List<String>)", "[String]schema(int,ChangedSchema)", "[String]schema(int,ComposedSchema,DiffContext)", "[String]schema(int,Schema,DiffContext)", "[String]items(int,ChangedSchema)", "[String]items(int,Schema<?>,DiffContext)", "[String]items(int,String,String,String)", "[String]properties(int,String,Map<String, Schema<?>>,boolean,DiffContext)", "[String]resolveProperty(int,Schema<?>,String,String)", "[String]property(int,String,ChangedSchema)", "[String]property(int,String,String,Schema<?>)", "[String]property(int,String,String,String,String)", "[String]listDiff(int,String,ChangedList<?>)", "[String]listItem(int,String,List<T>)", "[String]parameters(ChangedParameters)", "[String]listParameter(String,List<Parameter>)", "[String]itemParameter(String,Parameter)", "[String]itemParameter(String,String,String,String)", "[String]itemParameter(ChangedParameter)", "[String]code(String)", "[String]metadata(String,ChangedMetadata)", "[String]metadata(String,String,ChangedMetadata)", "[String]metadata(String)", "[String]metadata(String,String,String)", "[String]metadata(String,String)", "[String]blockquote(String)", "[String]blockquote(String,String)", "[String]type(Schema<?>)", "[String]indent(int)", "[Schema<?>]resolve(Schema<?>)", "[boolean]isShowChangedMetadata()", "[void]setShowChangedMetadata(boolean)"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[void]render(ChangedOpenApi,OutputStreamWriter)", "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]sectionTitle(String)", "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[void]listEndpoints(String,List<Endpoint>,OutputStreamWriter)", "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]itemEndpoint(String,String,String)", "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]itemEndpoint(String,String,ChangedMetadata)", "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]titleH5(String)", "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[void]listEndpoints(List<ChangedOperation>,OutputStreamWriter)", "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]responses(ChangedApiResponse)", "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]listResponse(String,Map<String, ApiResponse>)", "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]itemResponse(String,String,ApiResponse)", "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]itemResponse(String,ChangedResponse)", "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]itemResponse(String,String,String)", "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]headers(ChangedHeaders)", "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]listHeader(String,Map<String, Header>)", "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]itemHeader(String,String,Header)", "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]itemHeader(String,ChangedHeader)", "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]itemHeader(String,String,String)", "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]bodyContent(String,ChangedContent)", "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]bodyContent(ChangedContent)", "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]listContent(String,String,Map<String, MediaType>)", "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]itemContent(String,String)", "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]itemContent(String,String,MediaType)", "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]itemContent(int,String,ChangedMediaType)", "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]schema(ChangedSchema)", "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]oneOfSchema(int,ChangedOneOfSchema,String)", "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]required(int,String,List<String>)", "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]schema(int,ChangedSchema)", "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]schema(int,ComposedSchema,DiffContext)", "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]schema(int,Schema,DiffContext)", "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]items(int,ChangedSchema)", "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]items(int,Schema<?>,DiffContext)", "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]items(int,String,String,String)", "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]properties(int,String,Map<String, Schema<?>>,boolean,DiffContext)", "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]resolveProperty(int,Schema<?>,String,String)", "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]property(int,String,ChangedSchema)", "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]property(int,String,String,Schema<?>)", "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]property(int,String,String,String,String)", "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]listDiff(int,String,ChangedList<?>)", "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]listItem(int,String,List<T>)", "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]parameters(ChangedParameters)", "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]listParameter(String,List<Parameter>)", "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]itemParameter(String,Parameter)", "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]itemParameter(String,String,String,String)", "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]itemParameter(ChangedParameter)", "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]code(String)", "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]metadata(String,ChangedMetadata)", "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]metadata(String,String,ChangedMetadata)", "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]metadata(String)", "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]metadata(String,String,String)", "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]metadata(String,String)", "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]blockquote(String)", "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]blockquote(String,String)", "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]type(Schema<?>)", "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]indent(int)", "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[Schema<?>]resolve(Schema<?>)", "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[boolean]isShowChangedMetadata()", "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[void]setShowChangedMetadata(boolean)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class MarkdownRender implements Render {\n  private static final Logger LOGGER = LoggerFactory.getLogger(MarkdownRender.class);\n  private static final String H3 = \"### \";\n  private static final String H4 = \"#### \";\n  private static final String H5 = \"##### \";\n  private static final String H6 = \"###### \";\n  private static final String BLOCKQUOTE = \"> \";\n  private static final String CODE = \"`\";\n  private static final String PRE_CODE = \"    \";\n  private static final String PRE_LI = \"    \";\n  private static final String LI = \"* \";\n  private static final String HR = \"---\\n\";\n\n  protected RefPointer<Schema<?>> refPointer = new RefPointer<>(RefType.SCHEMAS);\n  protected ChangedOpenApi diff;\n  protected Set<Schema<?>> handledSchemas = new HashSet<>();\n  /**\n   * A parameter which indicates whether or not metadata (summary and metadata) changes should be\n   * logged in the changelog file.\n   */\n  protected boolean showChangedMetadata;\n\n  public void render(ChangedOpenApi diff, OutputStreamWriter outputStreamWriter) {\n    this.diff = diff;\n    this.handledSchemas.clear();\n    listEndpoints(\"What's New\", diff.getNewEndpoints(), outputStreamWriter);\n    listEndpoints(\"What's Deleted\", diff.getMissingEndpoints(), outputStreamWriter);\n    listEndpoints(\"What's Deprecated\", diff.getDeprecatedEndpoints(), outputStreamWriter);\n    listEndpoints(diff.getChangedOperations(), outputStreamWriter);\n    try {\n      outputStreamWriter.close();\n    } catch (IOException e) {\n      throw new RendererException(e);\n    }\n  }\n\n  protected String sectionTitle(String title) {\n    return H4 + title + '\\n' + HR + '\\n';\n  }\n\n  protected void listEndpoints(\n      String title, List<Endpoint> endpoints, OutputStreamWriter outputStreamWriter) {\n    if (null == endpoints || endpoints.isEmpty()) {\n      return;\n    }\n    safelyAppend(outputStreamWriter, sectionTitle(title));\n    endpoints.stream()\n        .map(e -> itemEndpoint(e.getMethod().toString(), e.getPathUrl(), e.getSummary()))\n        .forEach(csq -> safelyAppend(outputStreamWriter, csq));\n  }\n\n  protected String itemEndpoint(String method, String path, String summary) {\n    return H5 + CODE + method + CODE + \" \" + path + \"\\n\\n\" + metadata(summary) + \"\\n\";\n  }\n\n  protected String itemEndpoint(String method, String path, ChangedMetadata summary) {\n    return H5 + CODE + method + CODE + \" \" + path + \"\\n\\n\" + metadata(\"summary\", summary) + \"\\n\";\n  }\n\n  protected String titleH5(String title) {\n    return H6 + title + '\\n';\n  }\n\n  protected void listEndpoints(\n      List<ChangedOperation> changedOperations, OutputStreamWriter outputStreamWriter) {\n    if (null == changedOperations || changedOperations.isEmpty()) {\n      return;\n    }\n    safelyAppend(outputStreamWriter, sectionTitle(\"What's Changed\"));\n    changedOperations.forEach(\n        operation -> {\n          safelyAppend(\n              outputStreamWriter,\n              itemEndpoint(\n                  operation.getHttpMethod().toString(),\n                  operation.getPathUrl(),\n                  operation.getSummary()));\n          if (result(operation.getParameters()).isDifferent()) {\n            safelyAppend(outputStreamWriter, titleH5(\"Parameters:\"));\n            safelyAppend(outputStreamWriter, parameters(operation.getParameters()));\n          }\n          if (operation.resultRequestBody().isDifferent()) {\n            safelyAppend(outputStreamWriter, titleH5(\"Request:\"));\n            safelyAppend(\n                outputStreamWriter,\n                metadata(\"Description\", operation.getRequestBody().getDescription()));\n            safelyAppend(outputStreamWriter, bodyContent(operation.getRequestBody().getContent()));\n          }\n          if (operation.resultApiResponses().isDifferent()) {\n            safelyAppend(outputStreamWriter, titleH5(\"Return Type:\"));\n            safelyAppend(outputStreamWriter, responses(operation.getApiResponses()));\n          }\n        });\n  }\n\n  protected String responses(ChangedApiResponse changedApiResponse) {\n    StringBuilder sb = new StringBuilder(\"\\n\");\n    sb.append(listResponse(\"New response\", changedApiResponse.getIncreased()));\n    sb.append(listResponse(\"Deleted response\", changedApiResponse.getMissing()));\n    changedApiResponse.getChanged().entrySet().stream()\n        .map(e -> this.itemResponse(e.getKey(), e.getValue()))\n        .forEach(sb::append);\n    return sb.toString();\n  }\n\n  protected String listResponse(String title, Map<String, ApiResponse> responses) {\n    StringBuilder sb = new StringBuilder();\n    responses.entrySet().stream()\n        .map(e -> this.itemResponse(title, e.getKey(), e.getValue()))\n        .forEach(sb::append);\n    return sb.toString();\n  }\n\n  protected String itemResponse(String title, String code, ApiResponse response) {\n    return this.itemResponse(title, code, response.getDescription());\n  }\n\n  protected String itemResponse(String code, ChangedResponse response) {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\n        this.itemResponse(\n            \"Changed response\",\n            code,\n            null == response.getNewApiResponse()\n                ? \"\"\n                : response.getNewApiResponse().getDescription()));\n    sb.append(headers(response.getHeaders()));\n    if (response.getContent() != null) {\n      sb.append(this.bodyContent(LI, response.getContent()));\n    }\n    return sb.toString();\n  }\n\n  protected String itemResponse(String title, String code, String description) {\n    StringBuilder sb = new StringBuilder();\n    String status = \"\";\n    if (!code.equals(\"default\") && !code.matches(\"[1-5]XX\")) {\n      status = HttpStatus.getReasonPhrase(Integer.parseInt(code));\n    }\n    sb.append(format(\"%s : **%s %s**\\n\", title, code, status));\n    sb.append(metadata(description));\n    return sb.toString();\n  }\n\n  protected String headers(ChangedHeaders headers) {\n    StringBuilder sb = new StringBuilder();\n    if (headers != null) {\n      sb.append(listHeader(\"New header\", headers.getIncreased()))\n          .append(listHeader(\"Deleted header\", headers.getMissing()));\n      headers.getChanged().entrySet().stream()\n          .map(e -> this.itemHeader(e.getKey(), e.getValue()))\n          .forEach(sb::append);\n    }\n    return sb.toString();\n  }\n\n  protected String listHeader(String title, Map<String, Header> headers) {\n    StringBuilder sb = new StringBuilder();\n    headers.entrySet().stream()\n        .map(e -> this.itemHeader(title, e.getKey(), e.getValue()))\n        .forEach(sb::append);\n    return sb.toString();\n  }\n\n  protected String itemHeader(String title, String name, Header header) {\n    return this.itemHeader(title, name, header.getDescription());\n  }\n\n  protected String itemHeader(String code, ChangedHeader header) {\n    return this.itemHeader(\n        \"Changed header\",\n        code,\n        null == header.getNewHeader() ? \"\" : header.getNewHeader().getDescription());\n  }\n\n  protected String itemHeader(String title, String mediaType, String description) {\n    return format(\"%s : `%s`\\n\\n\", title, mediaType) + metadata(description) + '\\n';\n  }\n\n  protected String bodyContent(String prefix, ChangedContent changedContent) {\n    if (changedContent == null) {\n      return \"\";\n    }\n    StringBuilder sb = new StringBuilder(\"\\n\");\n    sb.append(listContent(prefix, \"New content type\", changedContent.getIncreased()));\n    sb.append(listContent(prefix, \"Deleted content type\", changedContent.getMissing()));\n    final int deepness;\n    if (StringUtils.isNotBlank(prefix)) {\n      deepness = 1;\n    } else {\n      deepness = 0;\n    }\n    changedContent.getChanged().entrySet().stream()\n        .map(e -> this.itemContent(deepness, e.getKey(), e.getValue()))\n        .forEach(e -> sb.append(prefix).append(e));\n    return sb.toString();\n  }\n\n  protected String bodyContent(ChangedContent changedContent) {\n    return bodyContent(\"\", changedContent);\n  }\n\n  protected String listContent(String prefix, String title, Map<String, MediaType> mediaTypes) {\n    StringBuilder sb = new StringBuilder();\n    mediaTypes.entrySet().stream()\n        .map(e -> this.itemContent(title, e.getKey(), e.getValue()))\n        .forEach(e -> sb.append(prefix).append(e));\n    return sb.toString();\n  }\n\n  protected String itemContent(String title, String mediaType) {\n    return format(\"%s : `%s`\\n\\n\", title, mediaType);\n  }\n\n  protected String itemContent(String title, String mediaType, MediaType content) {\n    return itemContent(title, mediaType);\n  }\n\n  protected String itemContent(int deepness, String mediaType, ChangedMediaType content) {\n    return itemContent(\"Changed content type\", mediaType) + schema(deepness, content.getSchema());\n  }\n\n  protected String schema(ChangedSchema schema) {\n    return schema(1, schema);\n  }\n\n  protected String oneOfSchema(int deepness, ChangedOneOfSchema schema, String discriminator) {\n    StringBuilder sb = new StringBuilder();\n    schema\n        .getMissing()\n        .keySet()\n        .forEach(\n            key -> sb.append(format(\"%sDeleted '%s' %s\\n\", indent(deepness), key, discriminator)));\n    schema\n        .getIncreased()\n        .forEach(\n            (key, sub) ->\n                sb.append(format(\"%sAdded '%s' %s:\\n\", indent(deepness), key, discriminator))\n                    .append(schema(deepness, sub, schema.getContext())));\n    schema\n        .getChanged()\n        .forEach(\n            (key, sub) ->\n                sb.append(format(\"%sUpdated `%s` %s:\\n\", indent(deepness), key, discriminator))\n                    .append(schema(deepness, sub)));\n    return sb.toString();\n  }\n\n  protected String required(int deepness, String title, List<String> required) {\n    StringBuilder sb = new StringBuilder();\n    if (!required.isEmpty()) {\n      sb.append(format(\"%s%s:\\n\", indent(deepness), title));\n      required.forEach(s -> sb.append(format(\"%s- `%s`\\n\", indent(deepness), s)));\n      sb.append(\"\\n\");\n    }\n    return sb.toString();\n  }\n\n  protected String schema(int deepness, ChangedSchema schema) {\n    StringBuilder sb = new StringBuilder();\n    if (schema.isDiscriminatorPropertyChanged()) {\n      LOGGER.debug(\"Discriminator property changed\");\n    }\n    if (schema.getOneOfSchema() != null) {\n      String discriminator =\n          schema.getNewSchema().getDiscriminator() != null\n              ? schema.getNewSchema().getDiscriminator().getPropertyName()\n              : \"\";\n      sb.append(oneOfSchema(deepness, schema.getOneOfSchema(), discriminator));\n    }\n    if (schema.getRequired() != null) {\n      sb.append(required(deepness, \"New required properties\", schema.getRequired().getIncreased()));\n      sb.append(required(deepness, \"New optional properties\", schema.getRequired().getMissing()));\n    }\n    if (schema.getItems() != null) {\n      sb.append(items(deepness, schema.getItems()));\n    }\n    sb.append(listDiff(deepness, \"enum\", schema.getEnumeration()));\n    sb.append(\n        properties(\n            deepness,\n            \"Added property\",\n            schema.getIncreasedProperties(),\n            true,\n            schema.getContext()));\n    sb.append(\n        properties(\n            deepness,\n            \"Deleted property\",\n            schema.getMissingProperties(),\n            false,\n            schema.getContext()));\n    schema\n        .getChangedProperties()\n        .forEach((name, property) -> sb.append(property(deepness, name, property)));\n    return sb.toString();\n  }\n\n  protected String schema(int deepness, ComposedSchema schema, DiffContext context) {\n    StringBuilder sb = new StringBuilder();\n    if (schema.getAllOf() != null) {\n      LOGGER.debug(\"All of schema\");\n      schema.getAllOf().stream()\n          .map(this::resolve)\n          .forEach(composedChild -> sb.append(schema(deepness, composedChild, context)));\n    }\n    if (schema.getOneOf() != null) {\n      LOGGER.debug(\"One of schema\");\n      sb.append(format(\"%sOne of:\\n\\n\", indent(deepness)));\n      schema.getOneOf().stream()\n          .map(this::resolve)\n          .forEach(composedChild -> sb.append(schema(deepness + 1, composedChild, context)));\n    }\n    return sb.toString();\n  }\n\n  protected String schema(int deepness, Schema schema, DiffContext context) {\n    if (handledSchemas.contains(schema)) return \"\";\n    handledSchemas.add(schema);\n    StringBuilder sb = new StringBuilder();\n    sb.append(listItem(deepness, \"Enum\", schema.getEnum()));\n    sb.append(properties(deepness, \"Property\", schema.getProperties(), true, context));\n    if (schema instanceof ComposedSchema) {\n      sb.append(schema(deepness, (ComposedSchema) schema, context));\n    } else if (schema instanceof ArraySchema) {\n      sb.append(items(deepness, resolve(((ArraySchema) schema).getItems()), context));\n    }\n    return sb.toString();\n  }\n\n  protected String items(int deepness, ChangedSchema schema) {\n    StringBuilder sb = new StringBuilder();\n    String type = type(schema.getNewSchema());\n    if (schema.isChangedType()) {\n      type = type(schema.getOldSchema()) + \" -> \" + type(schema.getNewSchema());\n    }\n    sb.append(items(deepness, \"Changed items\", type, schema.getNewSchema().getDescription()));\n    sb.append(schema(deepness, schema));\n    return sb.toString();\n  }\n\n  protected String items(int deepness, Schema<?> schema, DiffContext context) {\n    return items(deepness, \"Items\", type(schema), schema.getDescription())\n        + schema(deepness, schema, context);\n  }\n\n  protected String items(int deepness, String title, String type, String description) {\n    return format(\n        \"%s%s (%s):\" + \"\\n%s\\n\",\n        indent(deepness), title, type, metadata(indent(deepness + 1), description));\n  }\n\n  protected String properties(\n      final int deepness,\n      String title,\n      Map<String, Schema<?>> properties,\n      boolean showContent,\n      DiffContext context) {\n    StringBuilder sb = new StringBuilder();\n    if (properties != null) {\n      properties.forEach(\n          (key, value) -> {\n            sb.append(resolveProperty(deepness, value, key, title));\n            if (showContent) {\n              sb.append(schema(deepness + 1, resolve(value), context));\n            }\n          });\n    }\n    return sb.toString();\n  }\n\n  private String resolveProperty(int deepness, Schema<?> value, String key, String title) {\n    try {\n      return property(deepness, title, key, resolve(value));\n    } catch (Exception e) {\n      return property(deepness, title, key, type(value), \"\");\n    }\n  }\n\n  protected String property(int deepness, String name, ChangedSchema schema) {\n    StringBuilder sb = new StringBuilder();\n    String type = type(schema.getNewSchema());\n    if (schema.isChangedType()) {\n      type = type(schema.getOldSchema()) + \" -> \" + type(schema.getNewSchema());\n    }\n    sb.append(\n        property(deepness, \"Changed property\", name, type, schema.getNewSchema().getDescription()));\n    sb.append(schema(++deepness, schema));\n    return sb.toString();\n  }\n\n  protected String property(int deepness, String title, String name, Schema<?> schema) {\n    return property(deepness, title, name, type(schema), schema.getDescription());\n  }\n\n  protected String property(\n      int deepness, String title, String name, String type, String description) {\n    return format(\n        \"%s* %s `%s` (%s)\\n%s\\n\",\n        indent(deepness), title, name, type, metadata(indent(deepness + 1), description));\n  }\n\n  protected String listDiff(int deepness, String name, ChangedList<?> listDiff) {\n    if (listDiff == null) {\n      return \"\";\n    }\n    return listItem(deepness, \"Added \" + name, listDiff.getIncreased())\n        + listItem(deepness, \"Removed \" + name, listDiff.getMissing());\n  }\n\n  protected <T> String listItem(int deepness, String name, List<T> list) {\n    StringBuilder sb = new StringBuilder();\n    if (list != null && !list.isEmpty()) {\n      sb.append(format(\"%s%s value%s:\\n\\n\", indent(deepness), name, list.size() > 1 ? \"s\" : \"\"));\n      list.forEach(p -> sb.append(format(\"%s* `%s`\\n\", indent(deepness), p)));\n    }\n    return sb.toString();\n  }\n\n  protected String parameters(ChangedParameters changedParameters) {\n    List<ChangedParameter> changed = changedParameters.getChanged();\n    StringBuilder sb = new StringBuilder(\"\\n\");\n    sb.append(listParameter(\"Added\", changedParameters.getIncreased()))\n        .append(listParameter(\"Deleted\", changedParameters.getMissing()));\n    changed.stream().map(this::itemParameter).forEach(sb::append);\n    return sb.toString();\n  }\n\n  protected String listParameter(String title, List<Parameter> parameters) {\n    StringBuilder sb = new StringBuilder();\n    parameters.stream().map(p -> itemParameter(title, p)).forEach(sb::append);\n    return sb.toString();\n  }\n\n  protected String itemParameter(String title, Parameter parameter) {\n    return this.itemParameter(\n        title, parameter.getName(), parameter.getIn(), parameter.getDescription());\n  }\n\n  protected String itemParameter(String title, String name, String in, String description) {\n    return format(\"%s: \", title)\n        + code(name)\n        + \" in \"\n        + code(in)\n        + '\\n'\n        + metadata(description)\n        + '\\n';\n  }\n\n  protected String itemParameter(ChangedParameter param) {\n    Parameter rightParam = param.getNewParameter();\n    if (param.isDeprecated()) {\n      return itemParameter(\n          \"Deprecated\", rightParam.getName(), rightParam.getIn(), rightParam.getDescription());\n    }\n    return itemParameter(\n        \"Changed\", rightParam.getName(), rightParam.getIn(), rightParam.getDescription());\n  }\n\n  protected String code(String string) {\n    return CODE + string + CODE;\n  }\n\n  protected String metadata(String name, ChangedMetadata changedMetadata) {\n    return metadata(\"\", name, changedMetadata);\n  }\n\n  protected String metadata(String beginning, String name, ChangedMetadata changedMetadata) {\n    if (changedMetadata == null) {\n      return \"\";\n    }\n    if (!isUnchanged(changedMetadata) && showChangedMetadata) {\n      return format(\n          \"Changed %s:\\n%s\\nto:\\n%s\\n\\n\",\n          name,\n          metadata(beginning, changedMetadata.getLeft()),\n          metadata(beginning, changedMetadata.getRight()));\n    } else {\n      return metadata(beginning, name, changedMetadata.getRight());\n    }\n  }\n\n  protected String metadata(String metadata) {\n    return metadata(\"\", metadata);\n  }\n\n  protected String metadata(String beginning, String name, String metadata) {\n    if (StringUtils.isBlank(metadata)) {\n      return \"\";\n    }\n    return blockquote(beginning, metadata);\n  }\n\n  protected String metadata(String beginning, String metadata) {\n    if (StringUtils.isBlank(metadata)) {\n      return \"\";\n    }\n    return blockquote(beginning, metadata);\n  }\n\n  protected String blockquote(String beginning) {\n    return beginning + BLOCKQUOTE;\n  }\n\n  protected String blockquote(String beginning, String text) {\n    String blockquote = blockquote(beginning);\n    return blockquote + text.trim().replace(\"\\n\", \"\\n\" + blockquote) + \"\\n\\n\";\n  }\n\n  protected String type(Schema<?> schema) {\n    String result = \"object\";\n    if (schema instanceof ArraySchema) {\n      result = \"array\";\n    } else if (schema.getType() != null) {\n      result = schema.getType();\n    }\n    return result;\n  }\n\n  protected String indent(int deepness) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < deepness; i++) {\n      sb.append(PRE_LI);\n    }\n    return sb.toString();\n  }\n\n  protected Schema<?> resolve(Schema<?> schema) {\n    return refPointer.resolveRef(\n        diff.getNewSpecOpenApi().getComponents(), schema, schema.get$ref());\n  }\n\n  /**\n   * A parameter which indicates whether or not metadata (summary and metadata) changes should be\n   * logged in the changelog file.\n   */\n  public boolean isShowChangedMetadata() {\n    return this.showChangedMetadata;\n  }\n\n  /**\n   * A parameter which indicates whether or not metadata (summary and metadata) changes should be\n   * logged in the changelog file.\n   */\n  public void setShowChangedMetadata(final boolean showChangedMetadata) {\n    this.showChangedMetadata = showChangedMetadata;\n  }\n}", "super_interfaces": ["Render"], "fields": [{"attribute_expression": "private static final Logger LOGGER = LoggerFactory.getLogger(MarkdownRender.class);", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "Logger", "name": "LOGGER = LoggerFactory.getLogger(MarkdownRender.class)", "syntax_pass": true}, {"attribute_expression": "private static final String H3 = \"### \";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "H3 = \"### \"", "syntax_pass": true}, {"attribute_expression": "private static final String H4 = \"#### \";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "H4 = \"#### \"", "syntax_pass": true}, {"attribute_expression": "private static final String H5 = \"##### \";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "H5 = \"##### \"", "syntax_pass": true}, {"attribute_expression": "private static final String H6 = \"###### \";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "H6 = \"###### \"", "syntax_pass": true}, {"attribute_expression": "private static final String BLOCKQUOTE = \"> \";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "BLOCKQUOTE = \"> \"", "syntax_pass": true}, {"attribute_expression": "private static final String CODE = \"`\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "CODE = \"`\"", "syntax_pass": true}, {"attribute_expression": "private static final String PRE_CODE = \"    \";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "PRE_CODE = \"    \"", "syntax_pass": true}, {"attribute_expression": "private static final String PRE_LI = \"    \";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "PRE_LI = \"    \"", "syntax_pass": true}, {"attribute_expression": "private static final String LI = \"* \";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "LI = \"* \"", "syntax_pass": true}, {"attribute_expression": "private static final String HR = \"---\\n\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "HR = \"---\\n\"", "syntax_pass": true}, {"attribute_expression": "protected RefPointer<Schema<?>> refPointer = new RefPointer<>(RefType.SCHEMAS);", "docstring": "", "modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "type": "RefPointer<Schema<?>>", "name": "refPointer = new RefPointer<>(RefType.SCHEMAS)", "syntax_pass": true}, {"attribute_expression": "protected ChangedOpenApi diff;", "docstring": "", "modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "type": "ChangedOpenApi", "name": "diff", "syntax_pass": true}, {"attribute_expression": "protected Set<Schema<?>> handledSchemas = new HashSet<>();", "docstring": "", "modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "type": "Set<Schema<?>>", "name": "handledSchemas = new HashSet<>()", "syntax_pass": true}, {"attribute_expression": "protected boolean showChangedMetadata;", "docstring": "\nA parameter which indicates whether or not metadata (summary and metadata) changes should be\nlogged in the changelog file.\n", "modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "type": "boolean", "name": "showChangedMetadata", "syntax_pass": true}]}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/HttpStatus.java.HttpStatus", "name": "HttpStatus", "file_path": "src/main/java/org/openapitools/openapidiff/core/output/HttpStatus.java", "superclasses": "", "methods": ["[String]getReasonPhrase(int)", "[]HttpStatus()"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/output/HttpStatus.java.HttpStatus.[String]getReasonPhrase(int)", "src/main/java/org/openapitools/openapidiff/core/output/HttpStatus.java.HttpStatus.[]HttpStatus()"], "overrides": null, "attributes": [], "class_docstring": "\nConstants enumerating the HTTP status codes. All status codes defined in RFC1945 (HTTP/1.0,\nRFC2616 (HTTP/1.1), and RFC2518 (WebDAV) are supported.\n", "original_string": "public final class HttpStatus {\n\n  private static final Map<Integer, String> REASON_PHRASES = new HashMap<>();\n\n  static {\n    REASON_PHRASES.put(100, \"Continue\");\n    REASON_PHRASES.put(101, \"Switching Protocols\");\n    REASON_PHRASES.put(102, \"Processing\");\n    REASON_PHRASES.put(200, \"OK\");\n    REASON_PHRASES.put(201, \"Created\");\n    REASON_PHRASES.put(202, \"Accepted\");\n    REASON_PHRASES.put(203, \"Non Authoritative Information\");\n    REASON_PHRASES.put(204, \"No Content\");\n    REASON_PHRASES.put(205, \"Reset Content\");\n    REASON_PHRASES.put(206, \"Partial Content\");\n    REASON_PHRASES.put(207, \"Multi-Status\");\n    REASON_PHRASES.put(300, \"Multiple Choices\");\n    REASON_PHRASES.put(301, \"Moved Permanently\");\n    REASON_PHRASES.put(302, \"Moved Temporarily\");\n    REASON_PHRASES.put(303, \"See Other\");\n    REASON_PHRASES.put(304, \"Not Modified\");\n    REASON_PHRASES.put(305, \"Use Proxy\");\n    REASON_PHRASES.put(307, \"Temporary Redirect\");\n    REASON_PHRASES.put(400, \"Bad Request\");\n    REASON_PHRASES.put(401, \"Unauthorized\");\n    REASON_PHRASES.put(402, \"Payment Required\");\n    REASON_PHRASES.put(403, \"Forbidden\");\n    REASON_PHRASES.put(404, \"Not Found\");\n    REASON_PHRASES.put(405, \"Method Not Allowed\");\n    REASON_PHRASES.put(406, \"Not Acceptable\");\n    REASON_PHRASES.put(407, \"Proxy Authentication Required\");\n    REASON_PHRASES.put(408, \"Request Timeout\");\n    REASON_PHRASES.put(409, \"Conflict\");\n    REASON_PHRASES.put(410, \"Gone\");\n    REASON_PHRASES.put(411, \"Length Required\");\n    REASON_PHRASES.put(412, \"Precondition Failed\");\n    REASON_PHRASES.put(413, \"Request Too Long\");\n    REASON_PHRASES.put(414, \"Request-URI Too Long\");\n    REASON_PHRASES.put(415, \"Unsupported Media Type\");\n    REASON_PHRASES.put(416, \"Requested Range Not Satisfiable\");\n    REASON_PHRASES.put(417, \"Expectation Failed\");\n    REASON_PHRASES.put(419, \"Insufficient Space On Resource\");\n    REASON_PHRASES.put(420, \"Method Failure\");\n    REASON_PHRASES.put(422, \"Unprocessable Entity\");\n    REASON_PHRASES.put(423, \"Locked\");\n    REASON_PHRASES.put(424, \"Failed Dependency\");\n    REASON_PHRASES.put(500, \"Internal Server Error\");\n    REASON_PHRASES.put(501, \"Not Implemented\");\n    REASON_PHRASES.put(502, \"Bad Gateway\");\n    REASON_PHRASES.put(503, \"Service Unavailable\");\n    REASON_PHRASES.put(504, \"Gateway Timeout\");\n    REASON_PHRASES.put(505, \"Http Version Not Supported\");\n    REASON_PHRASES.put(507, \"Insufficient Storage\");\n  }\n\n  /**\n   * Get the reason phrase for a particular status code.\n   *\n   * <p>This method always returns the English text as specified in the relevant RFCs and is not\n   * internationalized.\n   *\n   * @param statusCode the numeric status code\n   * @return the reason phrase associated with the given status code or null if the status code is\n   *     not recognized.\n   */\n  public static String getReasonPhrase(int statusCode) {\n    if (statusCode < 0) {\n      throw new IllegalArgumentException(\"status code may not be negative\");\n    }\n    return REASON_PHRASES.get(statusCode);\n  }\n\n  private HttpStatus() {}\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final Map<Integer, String> REASON_PHRASES = new HashMap<>();", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "Map<Integer, String>", "name": "REASON_PHRASES = new HashMap<>()", "syntax_pass": true}]}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender", "name": "HtmlRender", "file_path": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java", "superclasses": "", "methods": ["[]HtmlRender()", "[]HtmlRender(boolean)", "[]HtmlRender(String,String)", "[]HtmlRender(String,String,boolean)", "[void]render(ChangedOpenApi,OutputStreamWriter)", "[void]renderHtml(OlTag,OlTag,OlTag,OlTag,OutputStreamWriter)", "[OlTag]ol_newEndpoint(List<Endpoint>)", "[LiTag]li_newEndpoint(String,String,String)", "[OlTag]ol_missingEndpoint(List<Endpoint>)", "[LiTag]li_missingEndpoint(String,String,String)", "[OlTag]ol_deprecatedEndpoint(List<Endpoint>)", "[LiTag]li_deprecatedEndpoint(String,String,String)", "[OlTag]ol_changed(List<ChangedOperation>)", "[UlTag]ul_securityRequirements(ChangedSecurityRequirements)", "[LiTag]li_addSecurityRequirement(SecurityRequirement)", "[LiTag]li_missingSecurityRequirement(SecurityRequirement)", "[LiTag]li_changedSecurityRequirement(ChangedSecurityRequirement)", "[UlTag]ul_response(ChangedApiResponse)", "[LiTag]li_addResponse(String,ApiResponse)", "[LiTag]li_missingResponse(String,ApiResponse)", "[LiTag]li_changedResponse(String,ChangedResponse)", "[UlTag]ul_request(ChangedContent)", "[LiTag]li_addRequest(String,MediaType)", "[LiTag]li_missingRequest(String,MediaType)", "[LiTag]li_changedRequest(String,ChangedMediaType)", "[DivTag]div_changedSchema(ChangedSchema)", "[void]allChanges(LiTag,ChangedSchema)", "[void]allChanges(ContainerTag<?>,String,ChangedSchema)", "[void]incompatibilities(LiTag,ChangedSchema)", "[void]incompatibilities(ContainerTag<?>,String,ChangedSchema)", "[void]items(ContainerTag<?>,String,ChangedSchema)", "[void]itemsAllChanges(ContainerTag<?>,String,ChangedSchema)", "[void]properties(ContainerTag<?>,String,String,Map<String, Schema<?>>,DiffContext)", "[void]propertiesChanged(ContainerTag<?>,String,String,Map<String, ChangedSchema>,DiffContext)", "[void]resolveProperty(ContainerTag<?>,String,String,Schema<?>,String)", "[void]resolveProperty(ContainerTag<?>,String,String,ChangedSchema,String)", "[void]property(ContainerTag<?>,String,String,Schema<?>)", "[void]property(ContainerTag<?>,String,String,String)", "[Schema<?>]resolve(Schema<?>)", "[Schema<?>]resolve(ChangedSchema)", "[String]type(Schema<?>)", "[String]type(ChangedSchema)", "[UlTag]ul_param(ChangedParameters)", "[LiTag]li_addParam(Parameter)", "[LiTag]li_missingParam(Parameter)", "[LiTag]li_deprecatedParam(ChangedParameter)", "[LiTag]li_changedParam(ChangedParameter)"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[]HtmlRender()", "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[]HtmlRender(boolean)", "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[]HtmlRender(String,String)", "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[]HtmlRender(String,String,boolean)", "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[void]render(ChangedOpenApi,OutputStreamWriter)", "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[void]renderHtml(OlTag,OlTag,OlTag,OlTag,OutputStreamWriter)", "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[OlTag]ol_newEndpoint(List<Endpoint>)", "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[LiTag]li_newEndpoint(String,String,String)", "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[OlTag]ol_missingEndpoint(List<Endpoint>)", "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[LiTag]li_missingEndpoint(String,String,String)", "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[OlTag]ol_deprecatedEndpoint(List<Endpoint>)", "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[LiTag]li_deprecatedEndpoint(String,String,String)", "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[OlTag]ol_changed(List<ChangedOperation>)", "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[UlTag]ul_securityRequirements(ChangedSecurityRequirements)", "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[LiTag]li_addSecurityRequirement(SecurityRequirement)", "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[LiTag]li_missingSecurityRequirement(SecurityRequirement)", "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[LiTag]li_changedSecurityRequirement(ChangedSecurityRequirement)", "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[UlTag]ul_response(ChangedApiResponse)", "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[LiTag]li_addResponse(String,ApiResponse)", "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[LiTag]li_missingResponse(String,ApiResponse)", "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[LiTag]li_changedResponse(String,ChangedResponse)", "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[UlTag]ul_request(ChangedContent)", "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[LiTag]li_addRequest(String,MediaType)", "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[LiTag]li_missingRequest(String,MediaType)", "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[LiTag]li_changedRequest(String,ChangedMediaType)", "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[DivTag]div_changedSchema(ChangedSchema)", "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[void]allChanges(LiTag,ChangedSchema)", "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[void]allChanges(ContainerTag<?>,String,ChangedSchema)", "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[void]incompatibilities(LiTag,ChangedSchema)", "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[void]incompatibilities(ContainerTag<?>,String,ChangedSchema)", "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[void]items(ContainerTag<?>,String,ChangedSchema)", "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[void]itemsAllChanges(ContainerTag<?>,String,ChangedSchema)", "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[void]properties(ContainerTag<?>,String,String,Map<String, Schema<?>>,DiffContext)", "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[void]propertiesChanged(ContainerTag<?>,String,String,Map<String, ChangedSchema>,DiffContext)", "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[void]resolveProperty(ContainerTag<?>,String,String,Schema<?>,String)", "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[void]resolveProperty(ContainerTag<?>,String,String,ChangedSchema,String)", "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[void]property(ContainerTag<?>,String,String,Schema<?>)", "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[void]property(ContainerTag<?>,String,String,String)", "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[Schema<?>]resolve(Schema<?>)", "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[Schema<?>]resolve(ChangedSchema)", "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[String]type(Schema<?>)", "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[String]type(ChangedSchema)", "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[UlTag]ul_param(ChangedParameters)", "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[LiTag]li_addParam(Parameter)", "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[LiTag]li_missingParam(Parameter)", "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[LiTag]li_deprecatedParam(ChangedParameter)", "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[LiTag]li_changedParam(ChangedParameter)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class HtmlRender implements Render {\n\n  private static final RefPointer<Schema<?>> refPointer = new RefPointer<>(RefType.SCHEMAS);\n  public static final String COMMENT = \"comment\";\n  public static final String MISSING = \"missing\";\n\n  private final String title;\n  private final String linkCss;\n  private final boolean showAllChanges;\n  protected ChangedOpenApi diff;\n\n  public HtmlRender() {\n    this(\"Api Change Log\", \"http://deepoove.com/swagger-diff/stylesheets/demo.css\");\n  }\n\n  public HtmlRender(boolean showAllChanges) {\n    this(\"Api Change Log\", \"http://deepoove.com/swagger-diff/stylesheets/demo.css\", showAllChanges);\n  }\n\n  public HtmlRender(String title, String linkCss) {\n    this.title = title;\n    this.linkCss = linkCss;\n    this.showAllChanges = false;\n  }\n\n  public HtmlRender(String title, String linkCss, boolean showAllChanges) {\n    this.title = title;\n    this.linkCss = linkCss;\n    this.showAllChanges = showAllChanges;\n  }\n\n  public void render(ChangedOpenApi diff, OutputStreamWriter outputStreamWriter) {\n    this.diff = diff;\n\n    List<Endpoint> newEndpoints = diff.getNewEndpoints();\n    OlTag ol_newEndpoint = ol_newEndpoint(newEndpoints);\n\n    List<Endpoint> missingEndpoints = diff.getMissingEndpoints();\n    OlTag ol_missingEndpoint = ol_missingEndpoint(missingEndpoints);\n\n    List<Endpoint> deprecatedEndpoints = diff.getDeprecatedEndpoints();\n    OlTag ol_deprecatedEndpoint = ol_deprecatedEndpoint(deprecatedEndpoints);\n\n    List<ChangedOperation> changedOperations = diff.getChangedOperations();\n    OlTag ol_changed = ol_changed(changedOperations);\n\n    renderHtml(\n        ol_newEndpoint, ol_missingEndpoint, ol_deprecatedEndpoint, ol_changed, outputStreamWriter);\n  }\n\n  public void renderHtml(\n      OlTag ol_new,\n      OlTag ol_miss,\n      OlTag ol_deprec,\n      OlTag ol_changed,\n      OutputStreamWriter outputStreamWriter) {\n    HtmlTag html =\n        html()\n            .attr(\"lang\", \"en\")\n            .with(\n                head()\n                    .with(\n                        meta().withCharset(\"utf-8\"),\n                        title(title),\n                        link().withRel(\"stylesheet\").withHref(linkCss)),\n                body()\n                    .with(\n                        header().with(h1(title)),\n                        div()\n                            .withClass(\"article\")\n                            .with(\n                                div().with(h2(\"What's New\"), hr(), ol_new),\n                                div().with(h2(\"What's Deleted\"), hr(), ol_miss),\n                                div().with(h2(\"What's Deprecated\"), hr(), ol_deprec),\n                                div().with(h2(\"What's Changed\"), hr(), ol_changed))));\n\n    try {\n      FlatHtml<OutputStreamWriter> flatHtml = FlatHtml.into(outputStreamWriter);\n      document().render(flatHtml);\n      html.render(flatHtml);\n      outputStreamWriter.close();\n    } catch (IOException e) {\n      throw new RendererException(\"Problem rendering html document.\", e);\n    }\n  }\n\n  private OlTag ol_newEndpoint(List<Endpoint> endpoints) {\n    if (null == endpoints) return ol();\n    OlTag ol = ol();\n    for (Endpoint endpoint : endpoints) {\n      ol.with(\n          li_newEndpoint(\n              endpoint.getMethod().toString(), endpoint.getPathUrl(), endpoint.getSummary()));\n    }\n    return ol;\n  }\n\n  private LiTag li_newEndpoint(String method, String path, String desc) {\n    return li().with(span(method).withClass(method)).withText(path + \" \").with(span(desc));\n  }\n\n  private OlTag ol_missingEndpoint(List<Endpoint> endpoints) {\n    if (null == endpoints) return ol();\n    OlTag ol = ol();\n    for (Endpoint endpoint : endpoints) {\n      ol.with(\n          li_missingEndpoint(\n              endpoint.getMethod().toString(), endpoint.getPathUrl(), endpoint.getSummary()));\n    }\n    return ol;\n  }\n\n  private LiTag li_missingEndpoint(String method, String path, String desc) {\n    return li().with(span(method).withClass(method), del().withText(path)).with(span(\" \" + desc));\n  }\n\n  private OlTag ol_deprecatedEndpoint(List<Endpoint> endpoints) {\n    if (null == endpoints) return ol();\n    OlTag ol = ol();\n    for (Endpoint endpoint : endpoints) {\n      ol.with(\n          li_deprecatedEndpoint(\n              endpoint.getMethod().toString(), endpoint.getPathUrl(), endpoint.getSummary()));\n    }\n    return ol;\n  }\n\n  private LiTag li_deprecatedEndpoint(String method, String path, String desc) {\n    return li().with(span(method).withClass(method), del().withText(path)).with(span(\" \" + desc));\n  }\n\n  private OlTag ol_changed(List<ChangedOperation> changedOperations) {\n    if (null == changedOperations) return ol();\n    OlTag ol = ol();\n    for (ChangedOperation changedOperation : changedOperations) {\n      String pathUrl = changedOperation.getPathUrl();\n      String method = changedOperation.getHttpMethod().toString();\n      String desc =\n          Optional.ofNullable(changedOperation.getSummary())\n              .map(ChangedMetadata::getRight)\n              .orElse(\"\");\n\n      UlTag ul_detail = ul().withClass(\"detail\");\n      if (result(changedOperation.getParameters()).isDifferent()) {\n        ul_detail.with(\n            li().with(h3(\"Parameters\")).with(ul_param(changedOperation.getParameters())));\n      }\n      if (changedOperation.resultRequestBody().isDifferent()) {\n        ul_detail.with(\n            li().with(h3(\"Request\"))\n                .with(ul_request(changedOperation.getRequestBody().getContent())));\n      }\n      if (changedOperation.resultApiResponses().isDifferent()) {\n        ul_detail.with(\n            li().with(h3(\"Response\")).with(ul_response(changedOperation.getApiResponses())));\n      }\n      if (showAllChanges && changedOperation.resultSecurityRequirements().isDifferent()) {\n        ul_detail.with(\n            li().with(h3(\"Security Requirements\"))\n                .with(ul_securityRequirements(changedOperation.getSecurityRequirements())));\n      }\n      ol.with(\n          li().with(span(method).withClass(method))\n              .withText(pathUrl + \" \")\n              .with(span(desc))\n              .with(ul_detail));\n    }\n    return ol;\n  }\n\n  private UlTag ul_securityRequirements(ChangedSecurityRequirements changedSecurityRequirements) {\n    List<SecurityRequirement> addRequirements = changedSecurityRequirements.getIncreased();\n    List<SecurityRequirement> delRequirements = changedSecurityRequirements.getMissing();\n    List<ChangedSecurityRequirement> changedRequirements = changedSecurityRequirements.getChanged();\n    UlTag ul = ul().withClass(\"change security requirements\");\n    if (addRequirements != null) {\n      for (SecurityRequirement addRequirement : addRequirements) {\n        ul.with(li_addSecurityRequirement(addRequirement));\n      }\n    }\n    if (delRequirements != null) {\n      for (SecurityRequirement delRequirement : delRequirements) {\n        ul.with(li_missingSecurityRequirement(delRequirement));\n      }\n    }\n    if (changedRequirements != null) {\n      for (ChangedSecurityRequirement changedRequirement : changedRequirements) {\n        ul.with(li_changedSecurityRequirement(changedRequirement));\n      }\n    }\n\n    return ul;\n  }\n\n  private LiTag li_addSecurityRequirement(SecurityRequirement securityRequirement) {\n    return li().withText(\"New security requirement : \")\n        .with(span(null == securityRequirement.toString() ? \"\" : (securityRequirement.toString())));\n  }\n\n  private LiTag li_missingSecurityRequirement(SecurityRequirement securityRequirement) {\n    return li().withText(\"Deleted security requirement : \")\n        .with(span(null == securityRequirement.toString() ? \"\" : (securityRequirement.toString())));\n  }\n\n  private LiTag li_changedSecurityRequirement(\n      ChangedSecurityRequirement changedSecurityRequirement) {\n    return li().withText(String.format(\"Changed security requirement : \"))\n        .with(\n            span(\n                (null == changedSecurityRequirement.getNewSecurityRequirement()\n                        || null\n                            == changedSecurityRequirement.getNewSecurityRequirement().toString())\n                    ? \"\"\n                    : (changedSecurityRequirement.getNewSecurityRequirement().toString())));\n  }\n\n  private UlTag ul_response(ChangedApiResponse changedApiResponse) {\n    Map<String, ApiResponse> addResponses = changedApiResponse.getIncreased();\n    Map<String, ApiResponse> delResponses = changedApiResponse.getMissing();\n    Map<String, ChangedResponse> changedResponses = changedApiResponse.getChanged();\n    UlTag ul = ul().withClass(\"change response\");\n    for (Entry<String, ApiResponse> prop : addResponses.entrySet()) {\n      ul.with(li_addResponse(prop.getKey(), prop.getValue()));\n    }\n    for (Entry<String, ApiResponse> prop : delResponses.entrySet()) {\n      ul.with(li_missingResponse(prop.getKey(), prop.getValue()));\n    }\n    for (Entry<String, ChangedResponse> prop : changedResponses.entrySet()) {\n      ul.with(li_changedResponse(prop.getKey(), prop.getValue()));\n    }\n    return ul;\n  }\n\n  private LiTag li_addResponse(String name, ApiResponse response) {\n    return li().withText(String.format(\"New response : [%s]\", name))\n        .with(\n            span(null == response.getDescription() ? \"\" : (\"//\" + response.getDescription()))\n                .withClass(COMMENT));\n  }\n\n  private LiTag li_missingResponse(String name, ApiResponse response) {\n    return li().withText(String.format(\"Deleted response : [%s]\", name))\n        .with(\n            span(null == response.getDescription() ? \"\" : (\"//\" + response.getDescription()))\n                .withClass(COMMENT));\n  }\n\n  private LiTag li_changedResponse(String name, ChangedResponse response) {\n    return li().withText(String.format(\"Changed response : [%s]\", name))\n        .with(\n            span((null == response.getNewApiResponse()\n                        || null == response.getNewApiResponse().getDescription())\n                    ? \"\"\n                    : (\"//\" + response.getNewApiResponse().getDescription()))\n                .withClass(COMMENT))\n        .with(ul_request(response.getContent()));\n  }\n\n  private UlTag ul_request(ChangedContent changedContent) {\n    UlTag ul = ul().withClass(\"change request-body\");\n    if (changedContent != null) {\n      for (String propName : changedContent.getIncreased().keySet()) {\n        ul.with(li_addRequest(propName, changedContent.getIncreased().get(propName)));\n      }\n      for (String propName : changedContent.getMissing().keySet()) {\n        ul.with(li_missingRequest(propName, changedContent.getMissing().get(propName)));\n      }\n      for (String propName : changedContent.getChanged().keySet()) {\n        ul.with(li_changedRequest(propName, changedContent.getChanged().get(propName)));\n      }\n    }\n    return ul;\n  }\n\n  private LiTag li_addRequest(String name, MediaType request) {\n    return li().withText(String.format(\"New body: '%s'\", name));\n  }\n\n  private LiTag li_missingRequest(String name, MediaType request) {\n    return li().withText(String.format(\"Deleted body: '%s'\", name));\n  }\n\n  private LiTag li_changedRequest(String name, ChangedMediaType request) {\n    LiTag li =\n        li().with(div_changedSchema(request.getSchema()))\n            .withText(String.format(\"Changed body: '%s'\", name));\n    if (request.isIncompatible() && !showAllChanges) {\n      incompatibilities(li, request.getSchema());\n    } else if (showAllChanges) {\n      allChanges(li, request.getSchema());\n    }\n    return li;\n  }\n\n  private DivTag div_changedSchema(ChangedSchema schema) {\n    DivTag div = div();\n    div.with(h3(\"Schema\" + (schema.isIncompatible() ? \" incompatible\" : \"\")));\n    return div;\n  }\n\n  private void allChanges(final LiTag output, final ChangedSchema schema) {\n    allChanges(output, \"\", schema);\n  }\n\n  private void allChanges(\n      final ContainerTag<?> output, String propName, final ChangedSchema schema) {\n    String prefix = propName.isEmpty() ? \"\" : propName + \".\";\n    properties(\n        output, prefix, \"Missing property\", schema.getMissingProperties(), schema.getContext());\n    properties(\n        output, prefix, \"Added property\", schema.getIncreasedProperties(), schema.getContext());\n\n    propertiesChanged(\n        output, prefix, \"Changed property\", schema.getChangedProperties(), schema.getContext());\n    if (schema.getItems() != null) {\n      itemsAllChanges(output, propName, schema.getItems());\n    }\n    schema\n        .getChangedProperties()\n        .forEach((name, property) -> allChanges(output, prefix + name, property));\n  }\n\n  private void incompatibilities(final LiTag output, final ChangedSchema schema) {\n    incompatibilities(output, \"\", schema);\n  }\n\n  private void incompatibilities(\n      final ContainerTag<?> output, String propName, final ChangedSchema schema) {\n    if (schema.getItems() != null) {\n      items(output, propName, schema.getItems());\n    }\n    if (schema.isCoreChanged() == DiffResult.INCOMPATIBLE && schema.isChangedType()) {\n      String type = type(schema.getOldSchema()) + \" -> \" + type(schema.getNewSchema());\n      property(output, propName, \"Changed property type\", type);\n    }\n    String prefix = propName.isEmpty() ? \"\" : propName + \".\";\n    properties(\n        output, prefix, \"Missing property\", schema.getMissingProperties(), schema.getContext());\n    schema\n        .getChangedProperties()\n        .forEach((name, property) -> incompatibilities(output, prefix + name, property));\n  }\n\n  private void items(ContainerTag<?> output, String propName, ChangedSchema schema) {\n    incompatibilities(output, propName + \"[n]\", schema);\n  }\n\n  private void itemsAllChanges(ContainerTag<?> output, String propName, ChangedSchema schema) {\n    allChanges(output, propName + \"[n]\", schema);\n  }\n\n  private void properties(\n      ContainerTag<?> output,\n      String propPrefix,\n      String title,\n      Map<String, Schema<?>> properties,\n      DiffContext context) {\n    if (properties != null) {\n      properties.forEach((key, value) -> resolveProperty(output, propPrefix, key, value, title));\n    }\n  }\n\n  private void propertiesChanged(\n      ContainerTag<?> output,\n      String propPrefix,\n      String title,\n      Map<String, ChangedSchema> properties,\n      DiffContext context) {\n    if (properties != null) {\n      properties.forEach((key, value) -> resolveProperty(output, propPrefix, key, value, title));\n    }\n  }\n\n  private void resolveProperty(\n      ContainerTag<?> output, String propPrefix, String key, Schema<?> value, String title) {\n    try {\n      property(output, propPrefix + key, title, resolve(value));\n    } catch (Exception e) {\n      property(output, propPrefix + key, title, type(value));\n    }\n  }\n\n  private void resolveProperty(\n      ContainerTag<?> output, String propPrefix, String key, ChangedSchema value, String title) {\n    try {\n      property(output, propPrefix + key, title, resolve(value));\n    } catch (Exception e) {\n      property(output, propPrefix + key, title, type(value));\n    }\n  }\n\n  protected void property(ContainerTag<?> output, String name, String title, Schema<?> schema) {\n    property(output, name, title, type(schema));\n  }\n\n  protected void property(ContainerTag<?> output, String name, String title, String type) {\n    output.with(p(String.format(\"%s: %s (%s)\", title, name, type)).withClass(MISSING));\n  }\n\n  protected Schema<?> resolve(Schema<?> schema) {\n    return refPointer.resolveRef(\n        diff.getNewSpecOpenApi().getComponents(), schema, schema.get$ref());\n  }\n\n  protected Schema<?> resolve(ChangedSchema schema) {\n    return refPointer.resolveRef(\n        diff.getNewSpecOpenApi().getComponents(),\n        schema.getNewSchema(),\n        schema.getNewSchema().get$ref());\n  }\n\n  protected String type(Schema<?> schema) {\n    String result = \"object\";\n    if (schema == null) {\n      result = \"no schema\";\n    } else if (schema instanceof ArraySchema) {\n      result = \"array\";\n    } else if (schema.getType() != null) {\n      result = schema.getType();\n    }\n    return result;\n  }\n\n  protected String type(ChangedSchema schema) {\n    return type(schema.getNewSchema());\n  }\n\n  private UlTag ul_param(ChangedParameters changedParameters) {\n    List<Parameter> addParameters = changedParameters.getIncreased();\n    List<Parameter> delParameters = changedParameters.getMissing();\n    List<ChangedParameter> changed = changedParameters.getChanged();\n    UlTag ul = ul().withClass(\"change param\");\n    for (Parameter param : addParameters) {\n      ul.with(li_addParam(param));\n    }\n    for (ChangedParameter param : changed) {\n      ul.with(li_changedParam(param));\n    }\n    for (Parameter param : delParameters) {\n      ul.with(li_missingParam(param));\n    }\n    return ul;\n  }\n\n  private LiTag li_addParam(Parameter param) {\n    return li().withText(\"Add \" + param.getName() + \" in \" + param.getIn())\n        .with(\n            span(null == param.getDescription() ? \"\" : (\"//\" + param.getDescription()))\n                .withClass(COMMENT));\n  }\n\n  private LiTag li_missingParam(Parameter param) {\n    return li().withClass(MISSING)\n        .with(span(\"Delete\"))\n        .with(del(param.getName()))\n        .with(span(\"in \").withText(param.getIn()))\n        .with(\n            span(null == param.getDescription() ? \"\" : (\"//\" + param.getDescription()))\n                .withClass(COMMENT));\n  }\n\n  private LiTag li_deprecatedParam(ChangedParameter param) {\n    return li().withClass(MISSING)\n        .with(span(\"Deprecated\"))\n        .with(del(param.getName()))\n        .with(span(\"in \").withText(param.getIn()))\n        .with(\n            span(null == param.getNewParameter().getDescription()\n                    ? \"\"\n                    : (\"//\" + param.getNewParameter().getDescription()))\n                .withClass(COMMENT));\n  }\n\n  private LiTag li_changedParam(ChangedParameter changeParam) {\n    if (changeParam.isDeprecated()) {\n      return li_deprecatedParam(changeParam);\n    }\n    boolean changeRequired = changeParam.isChangeRequired();\n    boolean changeDescription =\n        Optional.ofNullable(changeParam.getDescription())\n            .map(ChangedMetadata::isDifferent)\n            .orElse(false);\n    Parameter rightParam = changeParam.getNewParameter();\n    Parameter leftParam = changeParam.getOldParameter();\n    LiTag li = li().withText(changeParam.getName() + \" in \" + changeParam.getIn());\n    if (changeRequired) {\n      li.withText(\n          \" change into \"\n              + (rightParam.getRequired() != null && rightParam.getRequired()\n                  ? \"required\"\n                  : \"not required\"));\n    }\n    if (changeDescription) {\n      li.withText(\" Notes \")\n          .with(del(leftParam.getDescription()).withClass(COMMENT))\n          .withText(\" change into \")\n          .with(span(rightParam.getDescription()).withClass(COMMENT));\n    }\n    return li;\n  }\n}", "super_interfaces": ["Render"], "fields": [{"attribute_expression": "private static final RefPointer<Schema<?>> refPointer = new RefPointer<>(RefType.SCHEMAS);", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "RefPointer<Schema<?>>", "name": "refPointer = new RefPointer<>(RefType.SCHEMAS)", "syntax_pass": true}, {"attribute_expression": "public static final String COMMENT = \"comment\";", "docstring": "", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "String", "name": "COMMENT = \"comment\"", "syntax_pass": true}, {"attribute_expression": "public static final String MISSING = \"missing\";", "docstring": "", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "String", "name": "MISSING = \"missing\"", "syntax_pass": true}, {"attribute_expression": "private final String title;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "title", "syntax_pass": true}, {"attribute_expression": "private final String linkCss;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "linkCss", "syntax_pass": true}, {"attribute_expression": "private final boolean showAllChanges;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "boolean", "name": "showAllChanges", "syntax_pass": true}, {"attribute_expression": "protected ChangedOpenApi diff;", "docstring": "", "modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "type": "ChangedOpenApi", "name": "diff", "syntax_pass": true}]}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender", "name": "ConsoleRender", "file_path": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java", "superclasses": "", "methods": ["[void]render(ChangedOpenApi,OutputStreamWriter)", "[void]ol_changed(List<ChangedOperation>,OutputStreamWriter)", "[String]ul_response(ChangedApiResponse)", "[String]itemResponse(String,String)", "[String]itemChangedResponse(String,String,ChangedResponse)", "[String]ul_content(ChangedContent,boolean)", "[String]itemContent(String,String)", "[String]itemContent(String,String,ChangedMediaType,boolean)", "[String]incompatibilities(ChangedSchema)", "[String]incompatibilities(String,ChangedSchema)", "[String]items(String,ChangedSchema)", "[String]properties(String,String,Map<String, Schema<?>>,DiffContext)", "[String]resolveProperty(String,Schema<?>,String,String)", "[String]property(String,String,Schema<?>)", "[String]property(String,String,String)", "[Schema<?>]resolve(Schema<?>)", "[String]type(Schema<?>)", "[String]ul_param(ChangedParameters)", "[String]itemParam(String,Parameter)", "[String]li_changedParam(ChangedParameter)", "[void]listEndpoints(List<Endpoint>,String,OutputStreamWriter)", "[String]itemEndpoint(String,String,String)", "[String]renderBody(String,String,String,String)", "[String]bigTitle(String)", "[String]title(String)", "[String]title(String,char)", "[String]separator(char)"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender.[void]render(ChangedOpenApi,OutputStreamWriter)", "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender.[void]ol_changed(List<ChangedOperation>,OutputStreamWriter)", "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender.[String]ul_response(ChangedApiResponse)", "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender.[String]itemResponse(String,String)", "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender.[String]itemChangedResponse(String,String,ChangedResponse)", "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender.[String]ul_content(ChangedContent,boolean)", "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender.[String]itemContent(String,String)", "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender.[String]itemContent(String,String,ChangedMediaType,boolean)", "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender.[String]incompatibilities(ChangedSchema)", "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender.[String]incompatibilities(String,ChangedSchema)", "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender.[String]items(String,ChangedSchema)", "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender.[String]properties(String,String,Map<String, Schema<?>>,DiffContext)", "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender.[String]resolveProperty(String,Schema<?>,String,String)", "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender.[String]property(String,String,Schema<?>)", "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender.[String]property(String,String,String)", "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender.[Schema<?>]resolve(Schema<?>)", "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender.[String]type(Schema<?>)", "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender.[String]ul_param(ChangedParameters)", "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender.[String]itemParam(String,Parameter)", "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender.[String]li_changedParam(ChangedParameter)", "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender.[void]listEndpoints(List<Endpoint>,String,OutputStreamWriter)", "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender.[String]itemEndpoint(String,String,String)", "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender.[String]renderBody(String,String,String,String)", "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender.[String]bigTitle(String)", "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender.[String]title(String)", "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender.[String]title(String,char)", "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender.[String]separator(char)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class ConsoleRender implements Render {\n  private static final int LINE_LENGTH = 74;\n  protected static RefPointer<Schema<?>> refPointer = new RefPointer<>(RefType.SCHEMAS);\n  protected ChangedOpenApi diff;\n\n  @Override\n  public void render(ChangedOpenApi diff, OutputStreamWriter outputStreamWriter) {\n    this.diff = diff;\n    if (diff.isUnchanged()) {\n      safelyAppend(outputStreamWriter, \"No differences. Specifications are equivalents\");\n    } else {\n      safelyAppend(outputStreamWriter, bigTitle(\"Api Change Log\"));\n      safelyAppend(\n          outputStreamWriter,\n          StringUtils.center(diff.getNewSpecOpenApi().getInfo().getTitle(), LINE_LENGTH));\n      safelyAppend(outputStreamWriter, System.lineSeparator());\n\n      List<Endpoint> newEndpoints = diff.getNewEndpoints();\n      listEndpoints(newEndpoints, \"What's New\", outputStreamWriter);\n\n      List<Endpoint> missingEndpoints = diff.getMissingEndpoints();\n      listEndpoints(missingEndpoints, \"What's Deleted\", outputStreamWriter);\n\n      List<Endpoint> deprecatedEndpoints = diff.getDeprecatedEndpoints();\n      listEndpoints(deprecatedEndpoints, \"What's Deprecated\", outputStreamWriter);\n\n      List<ChangedOperation> changedOperations = diff.getChangedOperations();\n      ol_changed(changedOperations, outputStreamWriter);\n\n      safelyAppend(outputStreamWriter, title(\"Result\"));\n      safelyAppend(\n          outputStreamWriter,\n          StringUtils.center(\n              diff.isCompatible()\n                  ? \"API changes are backward compatible\"\n                  : \"API changes broke backward compatibility\",\n              LINE_LENGTH));\n      safelyAppend(outputStreamWriter, System.lineSeparator());\n      safelyAppend(outputStreamWriter, separator('-'));\n    }\n    try {\n      outputStreamWriter.close();\n    } catch (IOException e) {\n      throw new RendererException(e);\n    }\n  }\n\n  private void ol_changed(\n      List<ChangedOperation> operations, OutputStreamWriter outputStreamWriter) {\n    if (null == operations || operations.isEmpty()) {\n      return;\n    }\n    safelyAppend(outputStreamWriter, title(\"What's Changed\"));\n    for (ChangedOperation operation : operations) {\n      String pathUrl = operation.getPathUrl();\n      String method = operation.getHttpMethod().toString();\n      String desc =\n          Optional.ofNullable(operation.getSummary()).map(ChangedMetadata::getRight).orElse(\"\");\n\n      safelyAppend(outputStreamWriter, itemEndpoint(method, pathUrl, desc));\n\n      if (result(operation.getParameters()).isDifferent()) {\n        safelyAppend(outputStreamWriter, StringUtils.repeat(' ', 2));\n        safelyAppend(outputStreamWriter, \"Parameter:\");\n        safelyAppend(outputStreamWriter, System.lineSeparator());\n        safelyAppend(outputStreamWriter, ul_param(operation.getParameters()));\n      }\n      if (operation.resultRequestBody().isDifferent()) {\n        safelyAppend(outputStreamWriter, StringUtils.repeat(' ', 2));\n        safelyAppend(outputStreamWriter, \"Request:\");\n        safelyAppend(outputStreamWriter, System.lineSeparator());\n        safelyAppend(outputStreamWriter, ul_content(operation.getRequestBody().getContent(), true));\n      }\n      if (operation.resultApiResponses().isDifferent()) {\n        safelyAppend(outputStreamWriter, StringUtils.repeat(' ', 2));\n        safelyAppend(outputStreamWriter, \"Return Type:\");\n        safelyAppend(outputStreamWriter, System.lineSeparator());\n        safelyAppend(outputStreamWriter, ul_response(operation.getApiResponses()));\n      }\n    }\n  }\n\n  private String ul_response(ChangedApiResponse changedApiResponse) {\n    Map<String, ApiResponse> addResponses = changedApiResponse.getIncreased();\n    Map<String, ApiResponse> delResponses = changedApiResponse.getMissing();\n    Map<String, ChangedResponse> changedResponses = changedApiResponse.getChanged();\n    StringBuilder sb = new StringBuilder();\n    for (String propName : addResponses.keySet()) {\n      sb.append(itemResponse(\"Add \", propName));\n    }\n    for (String propName : delResponses.keySet()) {\n      sb.append(itemResponse(\"Deleted \", propName));\n    }\n    for (Entry<String, ChangedResponse> entry : changedResponses.entrySet()) {\n      sb.append(itemChangedResponse(\"Changed \", entry.getKey(), entry.getValue()));\n    }\n    return sb.toString();\n  }\n\n  private String itemResponse(String title, String code) {\n    StringBuilder sb = new StringBuilder();\n    String status = \"\";\n    if (!code.equals(\"default\") && !code.matches(\"[1-5]XX\")) {\n      status = HttpStatus.getReasonPhrase(Integer.parseInt(code));\n    }\n    sb.append(StringUtils.repeat(' ', 4))\n        .append(\"- \")\n        .append(title)\n        .append(code)\n        .append(' ')\n        .append(status)\n        .append(System.lineSeparator());\n    return sb.toString();\n  }\n\n  private String itemChangedResponse(String title, String contentType, ChangedResponse response) {\n    return itemResponse(title, contentType)\n        + StringUtils.repeat(' ', 6)\n        + \"Media types:\"\n        + System.lineSeparator()\n        + ul_content(response.getContent(), false);\n  }\n\n  private String ul_content(ChangedContent changedContent, boolean isRequest) {\n    StringBuilder sb = new StringBuilder();\n    if (changedContent == null) {\n      return sb.toString();\n    }\n    for (String propName : changedContent.getIncreased().keySet()) {\n      sb.append(itemContent(\"Added \", propName));\n    }\n    for (String propName : changedContent.getMissing().keySet()) {\n      sb.append(itemContent(\"Deleted \", propName));\n    }\n    for (String propName : changedContent.getChanged().keySet()) {\n      sb.append(\n          itemContent(\"Changed \", propName, changedContent.getChanged().get(propName), isRequest));\n    }\n    return sb.toString();\n  }\n\n  private String itemContent(String title, String contentType) {\n    return StringUtils.repeat(' ', 8) + \"- \" + title + contentType + System.lineSeparator();\n  }\n\n  private String itemContent(\n      String title, String contentType, ChangedMediaType changedMediaType, boolean isRequest) {\n    StringBuilder sb = new StringBuilder();\n    sb.append(itemContent(title, contentType))\n        .append(StringUtils.repeat(' ', 10))\n        .append(\"Schema: \")\n        .append(changedMediaType.isCompatible() ? \"Backward compatible\" : \"Broken compatibility\")\n        .append(System.lineSeparator());\n    if (!changedMediaType.isCompatible()) {\n      sb.append(incompatibilities(changedMediaType.getSchema()));\n    }\n    return sb.toString();\n  }\n\n  private String incompatibilities(final ChangedSchema schema) {\n    return incompatibilities(\"\", schema);\n  }\n\n  private String incompatibilities(String propName, final ChangedSchema schema) {\n    StringBuilder sb = new StringBuilder();\n    if (schema.getItems() != null) {\n      sb.append(items(propName, schema.getItems()));\n    }\n    if (schema.isCoreChanged() == DiffResult.INCOMPATIBLE && schema.isChangedType()) {\n      String type = type(schema.getOldSchema()) + \" -> \" + type(schema.getNewSchema());\n      sb.append(property(propName, \"Changed property type\", type));\n    }\n    String prefix = propName.isEmpty() ? \"\" : propName + \".\";\n    sb.append(\n        properties(prefix, \"Missing property\", schema.getMissingProperties(), schema.getContext()));\n    schema\n        .getChangedProperties()\n        .forEach((name, property) -> sb.append(incompatibilities(prefix + name, property)));\n    return sb.toString();\n  }\n\n  private String items(String propName, ChangedSchema schema) {\n    return incompatibilities(propName + \"[n]\", schema);\n  }\n\n  private String properties(\n      String propPrefix, String title, Map<String, Schema<?>> properties, DiffContext context) {\n    StringBuilder sb = new StringBuilder();\n    if (properties != null) {\n      properties.forEach((key, value) -> sb.append(resolveProperty(propPrefix, value, key, title)));\n    }\n    return sb.toString();\n  }\n\n  private String resolveProperty(String propPrefix, Schema<?> value, String key, String title) {\n    try {\n      return property(propPrefix + key, title, resolve(value));\n    } catch (Exception e) {\n      return property(propPrefix + key, title, type(value));\n    }\n  }\n\n  protected String property(String name, String title, Schema<?> schema) {\n    return property(name, title, type(schema));\n  }\n\n  protected String property(String name, String title, String type) {\n    return String.format(\"%s%s: %s (%s)%n\", StringUtils.repeat(' ', 10), title, name, type);\n  }\n\n  protected Schema<?> resolve(Schema<?> schema) {\n    return refPointer.resolveRef(\n        diff.getNewSpecOpenApi().getComponents(), schema, schema.get$ref());\n  }\n\n  protected String type(Schema<?> schema) {\n    String result = \"object\";\n    if (schema == null) {\n      result = \"no schema\";\n    } else if (schema instanceof ArraySchema) {\n      result = \"array\";\n    } else if (schema.getType() != null) {\n      result = schema.getType();\n    }\n    return result;\n  }\n\n  private String ul_param(ChangedParameters changedParameters) {\n    List<Parameter> addParameters = changedParameters.getIncreased();\n    List<Parameter> delParameters = changedParameters.getMissing();\n    List<ChangedParameter> changed = changedParameters.getChanged();\n    StringBuilder sb = new StringBuilder();\n    for (Parameter param : addParameters) {\n      sb.append(itemParam(\"Add \", param));\n    }\n    for (ChangedParameter param : changed) {\n      sb.append(li_changedParam(param));\n    }\n    for (Parameter param : delParameters) {\n      sb.append(itemParam(\"Delete \", param));\n    }\n    return sb.toString();\n  }\n\n  private String itemParam(String title, Parameter param) {\n    return \"\"\n        + StringUtils.repeat(' ', 4)\n        + \"- \"\n        + title\n        + param.getName()\n        + \" in \"\n        + param.getIn()\n        + System.lineSeparator();\n  }\n\n  private String li_changedParam(ChangedParameter changeParam) {\n    if (changeParam.isDeprecated()) {\n      return itemParam(\"Deprecated \", changeParam.getNewParameter());\n    } else {\n      return itemParam(\"Changed \", changeParam.getNewParameter());\n    }\n  }\n\n  private void listEndpoints(\n      List<Endpoint> endpoints, String title, OutputStreamWriter outputStreamWriter) {\n    if (null == endpoints || endpoints.isEmpty()) {\n      return;\n    }\n    StringBuilder sb = new StringBuilder();\n    sb.append(title(title));\n    for (Endpoint endpoint : endpoints) {\n      sb.append(\n          itemEndpoint(\n              endpoint.getMethod().toString(), endpoint.getPathUrl(), endpoint.getSummary()));\n    }\n\n    safelyAppend(outputStreamWriter, sb.append(System.lineSeparator()).toString());\n  }\n\n  private String itemEndpoint(String method, String path, String desc) {\n    return String.format(\"- %s %s%n\", StringUtils.rightPad(method, 6), path);\n  }\n\n  public String renderBody(String ol_new, String ol_miss, String ol_deprec, String ol_changed) {\n    return ol_new + ol_miss + ol_deprec + ol_changed;\n  }\n\n  public String bigTitle(String title) {\n    char ch = '=';\n    return this.title(title.toUpperCase(), ch);\n  }\n\n  public String title(String title) {\n    return this.title(title, '-');\n  }\n\n  public String title(String title, char ch) {\n    String little = StringUtils.repeat(ch, 2);\n    return String.format(\n        \"%s%s%s%s%n%s\",\n        separator(ch), little, StringUtils.center(title, LINE_LENGTH - 4), little, separator(ch));\n  }\n\n  public String separator(char ch) {\n    return StringUtils.repeat(ch, LINE_LENGTH) + System.lineSeparator();\n  }\n}", "super_interfaces": ["Render"], "fields": [{"attribute_expression": "private static final int LINE_LENGTH = 74;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "LINE_LENGTH = 74", "syntax_pass": true}, {"attribute_expression": "protected static RefPointer<Schema<?>> refPointer = new RefPointer<>(RefType.SCHEMAS);", "docstring": "", "modifiers": "protected static", "marker_annotations": [], "non_marker_annotations": ["protected", "static"], "comments": [], "type": "RefPointer<Schema<?>>", "name": "refPointer = new RefPointer<>(RefType.SCHEMAS)", "syntax_pass": true}, {"attribute_expression": "protected ChangedOpenApi diff;", "docstring": "", "modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "type": "ChangedOpenApi", "name": "diff", "syntax_pass": true}]}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/JsonRender.java.JsonRender", "name": "JsonRender", "file_path": "src/main/java/org/openapitools/openapidiff/core/output/JsonRender.java", "superclasses": "", "methods": ["[]JsonRender()", "[void]render(ChangedOpenApi,OutputStreamWriter)"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/output/JsonRender.java.JsonRender.[]JsonRender()", "src/main/java/org/openapitools/openapidiff/core/output/JsonRender.java.JsonRender.[void]render(ChangedOpenApi,OutputStreamWriter)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class JsonRender implements Render {\n  private final ObjectMapper objectMapper;\n\n  public JsonRender() {\n    objectMapper = new ObjectMapper();\n    objectMapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);\n    objectMapper.findAndRegisterModules();\n  }\n\n  @Override\n  public void render(ChangedOpenApi diff, OutputStreamWriter outputStreamWriter) {\n    try {\n      objectMapper.writeValue(outputStreamWriter, diff);\n      outputStreamWriter.close();\n    } catch (JsonProcessingException e) {\n      throw new RendererException(\"Could not serialize diff as JSON\", e);\n    } catch (IOException e) {\n      throw new RendererException(e);\n    }\n  }\n}", "super_interfaces": ["Render"], "fields": [{"attribute_expression": "private final ObjectMapper objectMapper;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "ObjectMapper", "name": "objectMapper", "syntax_pass": true}]}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java.AsciidocRender", "name": "AsciidocRender", "file_path": "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java", "superclasses": "", "methods": ["[void]render(ChangedOpenApi,OutputStreamWriter)", "[void]ol_changed(List<ChangedOperation>,OutputStreamWriter)", "[String]ul_response(ChangedApiResponse)", "[String]itemResponse(String,String)", "[String]itemChangedResponse(String,String,ChangedResponse)", "[String]ul_content(ChangedContent,boolean,int)", "[String]itemContent(String,String,int)", "[String]itemContent(String,String,int,ChangedMediaType,boolean)", "[String]incompatibilities(ChangedSchema)", "[String]incompatibilities(String,ChangedSchema)", "[String]items(String,ChangedSchema)", "[String]properties(String,String,Map<String, Schema<?>>,DiffContext)", "[String]resolveProperty(String,Schema<?>,String,String)", "[String]property(String,String,Schema<?>)", "[String]property(String,String,String)", "[Schema<?>]resolve(Schema<?>)", "[String]type(Schema<?>)", "[String]ul_param(ChangedParameters)", "[String]itemParam(String,Parameter)", "[String]li_changedParam(ChangedParameter)", "[String]listEndpoints(List<Endpoint>,String,OutputStreamWriter)", "[String]itemEndpoint(String,String,String)", "[String]bigTitle(String,String)", "[String]title(String)", "[String]title(String,int)"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java.AsciidocRender.[void]render(ChangedOpenApi,OutputStreamWriter)", "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java.AsciidocRender.[void]ol_changed(List<ChangedOperation>,OutputStreamWriter)", "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java.AsciidocRender.[String]ul_response(ChangedApiResponse)", "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java.AsciidocRender.[String]itemResponse(String,String)", "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java.AsciidocRender.[String]itemChangedResponse(String,String,ChangedResponse)", "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java.AsciidocRender.[String]ul_content(ChangedContent,boolean,int)", "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java.AsciidocRender.[String]itemContent(String,String,int)", "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java.AsciidocRender.[String]itemContent(String,String,int,ChangedMediaType,boolean)", "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java.AsciidocRender.[String]incompatibilities(ChangedSchema)", "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java.AsciidocRender.[String]incompatibilities(String,ChangedSchema)", "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java.AsciidocRender.[String]items(String,ChangedSchema)", "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java.AsciidocRender.[String]properties(String,String,Map<String, Schema<?>>,DiffContext)", "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java.AsciidocRender.[String]resolveProperty(String,Schema<?>,String,String)", "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java.AsciidocRender.[String]property(String,String,Schema<?>)", "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java.AsciidocRender.[String]property(String,String,String)", "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java.AsciidocRender.[Schema<?>]resolve(Schema<?>)", "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java.AsciidocRender.[String]type(Schema<?>)", "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java.AsciidocRender.[String]ul_param(ChangedParameters)", "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java.AsciidocRender.[String]itemParam(String,Parameter)", "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java.AsciidocRender.[String]li_changedParam(ChangedParameter)", "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java.AsciidocRender.[String]listEndpoints(List<Endpoint>,String,OutputStreamWriter)", "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java.AsciidocRender.[String]itemEndpoint(String,String,String)", "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java.AsciidocRender.[String]bigTitle(String,String)", "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java.AsciidocRender.[String]title(String)", "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java.AsciidocRender.[String]title(String,int)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class AsciidocRender implements Render {\n  private static final int LINE_LENGTH = 74;\n  protected static RefPointer<Schema<?>> refPointer = new RefPointer<>(RefType.SCHEMAS);\n  protected ChangedOpenApi diff;\n\n  @Override\n  public void render(ChangedOpenApi diff, OutputStreamWriter outputStreamWriter) {\n    this.diff = diff;\n    if (diff.isUnchanged()) {\n      safelyAppend(\n          outputStreamWriter,\n          bigTitle(\n              diff.getNewSpecOpenApi().getInfo().getTitle(),\n              diff.getNewSpecOpenApi().getInfo().getVersion()));\n      safelyAppend(outputStreamWriter, System.lineSeparator());\n      safelyAppend(outputStreamWriter, System.lineSeparator());\n      safelyAppend(outputStreamWriter, \"NOTE: No differences. Specifications are equivalents\");\n    } else {\n      safelyAppend(\n          outputStreamWriter,\n          bigTitle(\n              diff.getNewSpecOpenApi().getInfo().getTitle(),\n              diff.getNewSpecOpenApi().getInfo().getVersion()));\n      safelyAppend(outputStreamWriter, System.lineSeparator());\n      safelyAppend(outputStreamWriter, \":reproducible:\\n:sectlinks:\\n:toc:\\n\");\n      safelyAppend(outputStreamWriter, System.lineSeparator());\n\n      List<Endpoint> newEndpoints = diff.getNewEndpoints();\n      listEndpoints(newEndpoints, \"What's New\", outputStreamWriter);\n\n      List<Endpoint> missingEndpoints = diff.getMissingEndpoints();\n      listEndpoints(missingEndpoints, \"What's Deleted\", outputStreamWriter);\n\n      List<Endpoint> deprecatedEndpoints = diff.getDeprecatedEndpoints();\n      listEndpoints(deprecatedEndpoints, \"What's Deprecated\", outputStreamWriter);\n\n      List<ChangedOperation> changedOperations = diff.getChangedOperations();\n      ol_changed(changedOperations, outputStreamWriter);\n\n      safelyAppend(outputStreamWriter, System.lineSeparator());\n      safelyAppend(\n          outputStreamWriter,\n          diff.isCompatible()\n              ? \"NOTE: API changes are backward compatible\"\n              : \"WARNING: API changes broke backward compatibility\");\n      safelyAppend(outputStreamWriter, System.lineSeparator());\n    }\n    try {\n      outputStreamWriter.close();\n    } catch (IOException e) {\n      throw new RendererException(e);\n    }\n  }\n\n  private void ol_changed(\n      List<ChangedOperation> operations, OutputStreamWriter outputStreamWriter) {\n    if (null == operations || operations.isEmpty()) {\n      return;\n    }\n    safelyAppend(outputStreamWriter, title(\"What's Changed\", 2));\n    safelyAppend(outputStreamWriter, System.lineSeparator());\n    for (ChangedOperation operation : operations) {\n      String pathUrl = operation.getPathUrl();\n      String method = operation.getHttpMethod().toString();\n      String desc =\n          Optional.ofNullable(operation.getSummary()).map(ChangedMetadata::getRight).orElse(\"\");\n\n      safelyAppend(outputStreamWriter, itemEndpoint(method, pathUrl, desc));\n      if (result(operation.getParameters()).isDifferent()) {\n        safelyAppend(outputStreamWriter, \"* Parameter:\\n\");\n        safelyAppend(outputStreamWriter, ul_param(operation.getParameters()));\n        safelyAppend(outputStreamWriter, System.lineSeparator());\n      }\n      if (operation.resultRequestBody().isDifferent()) {\n        safelyAppend(outputStreamWriter, \"* Request:\\n\");\n        safelyAppend(\n            outputStreamWriter, ul_content(operation.getRequestBody().getContent(), true, 2));\n        safelyAppend(outputStreamWriter, System.lineSeparator());\n      }\n      if (operation.resultApiResponses().isDifferent()) {\n        safelyAppend(outputStreamWriter, \"* Return Type:\\n\");\n        safelyAppend(outputStreamWriter, ul_response(operation.getApiResponses()));\n        safelyAppend(outputStreamWriter, System.lineSeparator());\n      }\n    }\n  }\n\n  private String ul_response(ChangedApiResponse changedApiResponse) {\n    Map<String, ApiResponse> addResponses = changedApiResponse.getIncreased();\n    Map<String, ApiResponse> delResponses = changedApiResponse.getMissing();\n    Map<String, ChangedResponse> changedResponses = changedApiResponse.getChanged();\n    StringBuilder sb = new StringBuilder();\n    for (String propName : addResponses.keySet()) {\n      sb.append(itemResponse(\"** Add \", propName));\n    }\n    for (String propName : delResponses.keySet()) {\n      sb.append(itemResponse(\"** Deleted \", propName));\n    }\n    for (Entry<String, ChangedResponse> entry : changedResponses.entrySet()) {\n      sb.append(itemChangedResponse(\"** Changed \", entry.getKey(), entry.getValue()));\n    }\n    return sb.toString();\n  }\n\n  private String itemResponse(String title, String code) {\n    StringBuilder sb = new StringBuilder();\n    String status = \"\";\n    if (!code.equals(\"default\") && !code.matches(\"[1-5]XX\")) {\n      status = HttpStatus.getReasonPhrase(Integer.parseInt(code));\n    }\n    sb.append(title).append(code).append(' ').append(status).append(\"\\n\");\n    return sb.toString();\n  }\n\n  private String itemChangedResponse(String title, String contentType, ChangedResponse response) {\n    return itemResponse(title, contentType)\n        + \"** Media types:\\n\"\n        + ul_content(response.getContent(), false, 3);\n  }\n\n  private String ul_content(ChangedContent changedContent, boolean isRequest, int indent) {\n    StringBuilder sb = new StringBuilder();\n    if (changedContent == null) {\n      return sb.toString();\n    }\n    for (String propName : changedContent.getIncreased().keySet()) {\n      sb.append(itemContent(\"Added \", propName, indent));\n    }\n    for (String propName : changedContent.getMissing().keySet()) {\n      sb.append(itemContent(\"Deleted \", propName, indent));\n    }\n    for (String propName : changedContent.getChanged().keySet()) {\n      sb.append(\n          itemContent(\n              \"Changed \", propName, indent, changedContent.getChanged().get(propName), isRequest));\n    }\n    return sb.toString();\n  }\n\n  private String itemContent(String title, String contentType, int indent) {\n    return StringUtils.repeat('*', indent) + \" \" + title + contentType + \"\\n\";\n  }\n\n  private String itemContent(\n      String title,\n      String contentType,\n      int indent,\n      ChangedMediaType changedMediaType,\n      boolean isRequest) {\n    StringBuilder sb = new StringBuilder();\n    sb.append(itemContent(title, contentType, indent))\n        .append(itemContent(\"Schema:\", \"\", indent))\n        .append(changedMediaType.isCompatible() ? \"Backward compatible\" : \"Broken compatibility\")\n        .append(\"\\n\");\n    if (!changedMediaType.isCompatible()) {\n      sb.append(incompatibilities(changedMediaType.getSchema()));\n    }\n    return sb.toString();\n  }\n\n  private String incompatibilities(final ChangedSchema schema) {\n    return incompatibilities(\"\", schema);\n  }\n\n  private String incompatibilities(String propName, final ChangedSchema schema) {\n    StringBuilder sb = new StringBuilder();\n    if (schema.getItems() != null) {\n      sb.append(items(propName, schema.getItems()));\n    }\n    if (schema.isCoreChanged() == DiffResult.INCOMPATIBLE && schema.isChangedType()) {\n      String type = type(schema.getOldSchema()) + \" -> \" + type(schema.getNewSchema());\n      sb.append(property(propName, \"Changed property type\", type));\n    }\n    String prefix = propName.isEmpty() ? \"\" : propName + \".\";\n    sb.append(\n        properties(prefix, \"Missing property\", schema.getMissingProperties(), schema.getContext()));\n    schema\n        .getChangedProperties()\n        .forEach((name, property) -> sb.append(incompatibilities(prefix + name, property)));\n    return sb.toString();\n  }\n\n  private String items(String propName, ChangedSchema schema) {\n    return incompatibilities(propName + \"[n]\", schema);\n  }\n\n  private String properties(\n      String propPrefix, String title, Map<String, Schema<?>> properties, DiffContext context) {\n    StringBuilder sb = new StringBuilder();\n    if (properties != null) {\n      properties.forEach((key, value) -> sb.append(resolveProperty(propPrefix, value, key, title)));\n    }\n    return sb.toString();\n  }\n\n  private String resolveProperty(String propPrefix, Schema<?> value, String key, String title) {\n    try {\n      return property(propPrefix + key, title, resolve(value));\n    } catch (Exception e) {\n      return property(propPrefix + key, title, type(value));\n    }\n  }\n\n  protected String property(String name, String title, Schema<?> schema) {\n    return property(name, title, type(schema));\n  }\n\n  protected String property(String name, String title, String type) {\n    return String.format(\"*** %s: %s (%s)%n\\n\", title, name, type);\n  }\n\n  protected Schema<?> resolve(Schema<?> schema) {\n    return refPointer.resolveRef(\n        diff.getNewSpecOpenApi().getComponents(), schema, schema.get$ref());\n  }\n\n  protected String type(Schema<?> schema) {\n    String result = \"object\";\n    if (schema == null) {\n      result = \"no schema\";\n    } else if (schema instanceof ArraySchema) {\n      result = \"array\";\n    } else if (schema.getType() != null) {\n      result = schema.getType();\n    }\n    return result;\n  }\n\n  private String ul_param(ChangedParameters changedParameters) {\n    List<Parameter> addParameters = changedParameters.getIncreased();\n    List<Parameter> delParameters = changedParameters.getMissing();\n    List<ChangedParameter> changed = changedParameters.getChanged();\n    StringBuilder sb = new StringBuilder();\n    for (Parameter param : addParameters) {\n      sb.append(itemParam(\"** Add \", param));\n    }\n    for (ChangedParameter param : changed) {\n      sb.append(li_changedParam(param));\n    }\n    for (Parameter param : delParameters) {\n      sb.append(itemParam(\"** Delete \", param));\n    }\n    return sb.toString();\n  }\n\n  private String itemParam(String title, Parameter param) {\n    return title + param.getName() + \" in \" + param.getIn() + System.lineSeparator();\n  }\n\n  private String li_changedParam(ChangedParameter changeParam) {\n    if (changeParam.isDeprecated()) {\n      return itemParam(\"** Deprecated \", changeParam.getNewParameter());\n    } else {\n      return itemParam(\"** Changed \", changeParam.getNewParameter());\n    }\n  }\n\n  private String listEndpoints(\n      List<Endpoint> endpoints, String title, OutputStreamWriter outputStreamWriter) {\n    if (null == endpoints || endpoints.isEmpty()) {\n      return \"\";\n    }\n    StringBuilder sb = new StringBuilder();\n    sb.append(title(title));\n    for (Endpoint endpoint : endpoints) {\n      sb.append(\n          itemEndpoint(\n              endpoint.getMethod().toString(), endpoint.getPathUrl(), endpoint.getSummary()));\n    }\n    return sb.append(System.lineSeparator()).toString();\n  }\n\n  private String itemEndpoint(String method, String path, String desc) {\n    return String.format(\"=== %s%s%n\", StringUtils.rightPad(method, 6), path);\n  }\n\n  public String bigTitle(String title, String version) {\n    char ch = '=';\n\n    return String.format(\"= %s (v %s)\", title.toUpperCase(), version);\n  }\n\n  public String title(String title) {\n    return this.title(title, '-');\n  }\n\n  public String title(String title, int level) {\n    String little = StringUtils.repeat(\"=\", level);\n    return String.format(\"%s %s\", little, title);\n  }\n}", "super_interfaces": ["Render"], "fields": [{"attribute_expression": "private static final int LINE_LENGTH = 74;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "LINE_LENGTH = 74", "syntax_pass": true}, {"attribute_expression": "protected static RefPointer<Schema<?>> refPointer = new RefPointer<>(RefType.SCHEMAS);", "docstring": "", "modifiers": "protected static", "marker_annotations": [], "non_marker_annotations": ["protected", "static"], "comments": [], "type": "RefPointer<Schema<?>>", "name": "refPointer = new RefPointer<>(RefType.SCHEMAS)", "syntax_pass": true}, {"attribute_expression": "protected ChangedOpenApi diff;", "docstring": "", "modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "type": "ChangedOpenApi", "name": "diff", "syntax_pass": true}]}, {"uris": "src/main/java/org/openapitools/openapidiff/core/utils/Copy.java.Copy", "name": "Copy", "file_path": "src/main/java/org/openapitools/openapidiff/core/utils/Copy.java", "superclasses": "", "methods": ["[]Copy()", "[Map<K, V>]copyMap(Map<K, V>)"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/utils/Copy.java.Copy.[]Copy()", "src/main/java/org/openapitools/openapidiff/core/utils/Copy.java.Copy.[Map<K, V>]copyMap(Map<K, V>)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Copy {\n\n  private Copy() {\n    throw new UnsupportedOperationException(\"Utility class. Do not instantiate\");\n  }\n\n  public static <K, V> Map<K, V> copyMap(Map<K, V> map) {\n    if (map == null) {\n      return new LinkedHashMap<>();\n    } else {\n      return new LinkedHashMap<>(map);\n    }\n  }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/org/openapitools/openapidiff/core/utils/EndpointUtils.java.EndpointUtils", "name": "EndpointUtils", "file_path": "src/main/java/org/openapitools/openapidiff/core/utils/EndpointUtils.java", "superclasses": "", "methods": ["[]EndpointUtils()", "[Collection<Endpoint>]convert2Endpoints(String,Map<PathItem.HttpMethod, Operation>)", "[Endpoint]convert2Endpoint(String,PathItem.HttpMethod,Operation)", "[List<Endpoint>]convert2EndpointList(Map<String, PathItem>)"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/utils/EndpointUtils.java.EndpointUtils.[]EndpointUtils()", "src/main/java/org/openapitools/openapidiff/core/utils/EndpointUtils.java.EndpointUtils.[Collection<Endpoint>]convert2Endpoints(String,Map<PathItem.HttpMethod, Operation>)", "src/main/java/org/openapitools/openapidiff/core/utils/EndpointUtils.java.EndpointUtils.[Endpoint]convert2Endpoint(String,PathItem.HttpMethod,Operation)", "src/main/java/org/openapitools/openapidiff/core/utils/EndpointUtils.java.EndpointUtils.[List<Endpoint>]convert2EndpointList(Map<String, PathItem>)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class EndpointUtils {\n\n  private EndpointUtils() {\n    throw new UnsupportedOperationException(\"Utility class. Do not instantiate\");\n  }\n\n  public static Collection<Endpoint> convert2Endpoints(\n      String pathUrl, Map<PathItem.HttpMethod, Operation> map) {\n    List<Endpoint> endpoints = new ArrayList<>();\n    if (null == map) {\n      return endpoints;\n    }\n    for (Map.Entry<PathItem.HttpMethod, Operation> entry : map.entrySet()) {\n      PathItem.HttpMethod httpMethod = entry.getKey();\n      Operation operation = entry.getValue();\n      Endpoint endpoint = convert2Endpoint(pathUrl, httpMethod, operation);\n      endpoints.add(endpoint);\n    }\n    return endpoints;\n  }\n\n  public static Endpoint convert2Endpoint(\n      String pathUrl, PathItem.HttpMethod httpMethod, Operation operation) {\n    Endpoint endpoint = new Endpoint();\n    endpoint.setPathUrl(pathUrl);\n    endpoint.setMethod(httpMethod);\n    endpoint.setSummary(operation.getSummary());\n    endpoint.setOperation(operation);\n    return endpoint;\n  }\n\n  public static List<Endpoint> convert2EndpointList(Map<String, PathItem> map) {\n    List<Endpoint> endpoints = new ArrayList<>();\n    if (null == map) {\n      return endpoints;\n    }\n    for (Map.Entry<String, PathItem> entry : map.entrySet()) {\n      String url = entry.getKey();\n      PathItem path = entry.getValue();\n\n      Map<PathItem.HttpMethod, Operation> operationMap = path.readOperationsMap();\n      for (Map.Entry<PathItem.HttpMethod, Operation> entryOper : operationMap.entrySet()) {\n        PathItem.HttpMethod httpMethod = entryOper.getKey();\n        Operation operation = entryOper.getValue();\n\n        Endpoint endpoint = new Endpoint();\n        endpoint.setPathUrl(url);\n        endpoint.setMethod(httpMethod);\n        endpoint.setSummary(operation.getSummary());\n        endpoint.setPath(path);\n        endpoint.setOperation(operation);\n        endpoints.add(endpoint);\n      }\n    }\n    return endpoints;\n  }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/org/openapitools/openapidiff/core/utils/ChangedUtils.java.ChangedUtils", "name": "ChangedUtils", "file_path": "src/main/java/org/openapitools/openapidiff/core/utils/ChangedUtils.java", "superclasses": "", "methods": ["[]ChangedUtils()", "[boolean]isUnchanged(Changed)", "[boolean]isCompatible(Changed)", "[Optional<T>]isChanged(T)"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/utils/ChangedUtils.java.ChangedUtils.[]ChangedUtils()", "src/main/java/org/openapitools/openapidiff/core/utils/ChangedUtils.java.ChangedUtils.[boolean]isUnchanged(Changed)", "src/main/java/org/openapitools/openapidiff/core/utils/ChangedUtils.java.ChangedUtils.[boolean]isCompatible(Changed)", "src/main/java/org/openapitools/openapidiff/core/utils/ChangedUtils.java.ChangedUtils.[Optional<T>]isChanged(T)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class ChangedUtils {\n\n  private ChangedUtils() {\n    throw new UnsupportedOperationException(\"Utility class. Do not instantiate\");\n  }\n\n  public static boolean isUnchanged(Changed changed) {\n    return changed == null || changed.isUnchanged();\n  }\n\n  public static boolean isCompatible(Changed changed) {\n    return changed == null || changed.isCompatible();\n  }\n\n  public static <T extends Changed> Optional<T> isChanged(T changed) {\n    if (isUnchanged(changed)) {\n      return Optional.empty();\n    }\n    return Optional.of(changed);\n  }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/org/openapitools/openapidiff/core/utils/FileUtils.java.FileUtils", "name": "FileUtils", "file_path": "src/main/java/org/openapitools/openapidiff/core/utils/FileUtils.java", "superclasses": "", "methods": ["[]FileUtils()", "[void]writeToFile(Render,ChangedOpenApi,String)"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/utils/FileUtils.java.FileUtils.[]FileUtils()", "src/main/java/org/openapitools/openapidiff/core/utils/FileUtils.java.FileUtils.[void]writeToFile(Render,ChangedOpenApi,String)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class FileUtils {\n  private static final Logger logger = LoggerFactory.getLogger(FileUtils.class);\n\n  private FileUtils() {\n    throw new UnsupportedOperationException(\"Utility class. Do not instantiate\");\n  }\n\n  public static void writeToFile(\n      final Render render, final ChangedOpenApi diff, final String fileName) {\n    if (fileName == null || fileName.isEmpty()) {\n      logger.debug(\"File name cannot be null or empty.\");\n      return;\n    }\n\n    final Path filePath = Paths.get(fileName);\n    try (final FileOutputStream outputStream = new FileOutputStream(filePath.toFile());\n        final OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream)) {\n      render.render(diff, outputStreamWriter);\n    } catch (final IOException e) {\n      logger.error(\"Exception while writing to file {}\", fileName, e);\n    }\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final Logger logger = LoggerFactory.getLogger(FileUtils.class);", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "Logger", "name": "logger = LoggerFactory.getLogger(FileUtils.class)", "syntax_pass": true}]}, {"uris": "src/main/java/org/openapitools/openapidiff/core/utils/RefPointer.java.RefPointer", "name": "RefPointer", "file_path": "src/main/java/org/openapitools/openapidiff/core/utils/RefPointer.java", "superclasses": "", "methods": ["[]RefPointer(RefType)", "[T]resolveRef(Components,T,String)", "[Map<String, T>]getMap(Components)", "[String]getBaseRefForType(String)", "[String]getRefName(String)"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/utils/RefPointer.java.RefPointer.[]RefPointer(RefType)", "src/main/java/org/openapitools/openapidiff/core/utils/RefPointer.java.RefPointer.[T]resolveRef(Components,T,String)", "src/main/java/org/openapitools/openapidiff/core/utils/RefPointer.java.RefPointer.[Map<String, T>]getMap(Components)", "src/main/java/org/openapitools/openapidiff/core/utils/RefPointer.java.RefPointer.[String]getBaseRefForType(String)", "src/main/java/org/openapitools/openapidiff/core/utils/RefPointer.java.RefPointer.[String]getRefName(String)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class RefPointer<T> {\n  public static final String BASE_REF = \"#/components/\";\n  private final RefType refType;\n\n  public RefPointer(RefType refType) {\n    this.refType = refType;\n  }\n\n  public T resolveRef(Components components, T t, String ref) {\n    if (ref != null) {\n      String refName = getRefName(ref);\n      T result = getMap(components).get(refName);\n      if (result == null) {\n        throw new IllegalArgumentException(String.format(\"ref '%s' doesn't exist.\", ref));\n      }\n      return result;\n    }\n    return t;\n  }\n\n  @SuppressWarnings(\"unchecked\")\n  private Map<String, T> getMap(Components components) {\n    switch (refType) {\n      case REQUEST_BODIES:\n        return (Map<String, T>) components.getRequestBodies();\n      case RESPONSES:\n        return (Map<String, T>) components.getResponses();\n      case PARAMETERS:\n        return (Map<String, T>) components.getParameters();\n      case SCHEMAS:\n        return (Map<String, T>) components.getSchemas();\n      case HEADERS:\n        return (Map<String, T>) components.getHeaders();\n      case SECURITY_SCHEMES:\n        return (Map<String, T>) components.getSecuritySchemes();\n      default:\n        throw new IllegalArgumentException(\"Not mapped for refType: \" + refType);\n    }\n  }\n\n  private String getBaseRefForType(String type) {\n    return String.format(\"%s%s/\", BASE_REF, type);\n  }\n\n  public String getRefName(String ref) {\n    if (ref == null) {\n      return null;\n    }\n    if (refType == RefType.SECURITY_SCHEMES) {\n      return ref;\n    }\n\n    final String baseRef = getBaseRefForType(refType.getName());\n    if (!ref.startsWith(baseRef)) {\n      throw new IllegalArgumentException(\"Invalid ref: \" + ref);\n    }\n    return ref.substring(baseRef.length());\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "public static final String BASE_REF = \"#/components/\";", "docstring": "", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "String", "name": "BASE_REF = \"#/components/\"", "syntax_pass": true}, {"attribute_expression": "private final RefType refType;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "RefType", "name": "refType", "syntax_pass": true}]}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedMediaType.java.ChangedMediaType", "name": "ChangedMediaType", "file_path": "src/main/java/org/openapitools/openapidiff/core/model/ChangedMediaType.java", "superclasses": "", "methods": ["[]ChangedMediaType(Schema,Schema,DiffContext)", "[List<Changed>]getChangedElements()", "[DiffResult]isCoreChanged()", "[Schema]getOldSchema()", "[Schema]getNewSchema()", "[DiffContext]getContext()", "[ChangedSchema]getSchema()", "[ChangedMediaType]setSchema(ChangedSchema)", "[boolean]equals(Object)", "[int]hashCode()", "[java.lang.String]toString()"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/model/ChangedMediaType.java.ChangedMediaType.[]ChangedMediaType(Schema,Schema,DiffContext)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedMediaType.java.ChangedMediaType.[List<Changed>]getChangedElements()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedMediaType.java.ChangedMediaType.[DiffResult]isCoreChanged()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedMediaType.java.ChangedMediaType.[Schema]getOldSchema()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedMediaType.java.ChangedMediaType.[Schema]getNewSchema()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedMediaType.java.ChangedMediaType.[DiffContext]getContext()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedMediaType.java.ChangedMediaType.[ChangedSchema]getSchema()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedMediaType.java.ChangedMediaType.[ChangedMediaType]setSchema(ChangedSchema)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedMediaType.java.ChangedMediaType.[boolean]equals(Object)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedMediaType.java.ChangedMediaType.[int]hashCode()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedMediaType.java.ChangedMediaType.[java.lang.String]toString()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class ChangedMediaType implements ComposedChanged {\n  private final Schema oldSchema;\n  private final Schema newSchema;\n  private final DiffContext context;\n  private ChangedSchema schema;\n\n  public ChangedMediaType(Schema oldSchema, Schema newSchema, DiffContext context) {\n    this.oldSchema = oldSchema;\n    this.newSchema = newSchema;\n    this.context = context;\n  }\n\n  @Override\n  public List<Changed> getChangedElements() {\n    return Collections.singletonList(schema);\n  }\n\n  @Override\n  public DiffResult isCoreChanged() {\n    return DiffResult.NO_CHANGES;\n  }\n\n  public Schema getOldSchema() {\n    return this.oldSchema;\n  }\n\n  public Schema getNewSchema() {\n    return this.newSchema;\n  }\n\n  public DiffContext getContext() {\n    return this.context;\n  }\n\n  public ChangedSchema getSchema() {\n    return this.schema;\n  }\n\n  public ChangedMediaType setSchema(final ChangedSchema schema) {\n    this.schema = schema;\n    return this;\n  }\n\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    ChangedMediaType that = (ChangedMediaType) o;\n    return Objects.equals(oldSchema, that.oldSchema)\n        && Objects.equals(newSchema, that.newSchema)\n        && Objects.equals(context, that.context)\n        && Objects.equals(schema, that.schema);\n  }\n\n  @Override\n  public int hashCode() {\n    return Objects.hash(oldSchema, newSchema, context, schema);\n  }\n\n  @java.lang.Override\n  public java.lang.String toString() {\n    return \"ChangedMediaType(oldSchema=\"\n        + this.getOldSchema()\n        + \", newSchema=\"\n        + this.getNewSchema()\n        + \", context=\"\n        + this.getContext()\n        + \", schema=\"\n        + this.getSchema()\n        + \")\";\n  }\n}", "super_interfaces": ["ComposedChanged"], "fields": [{"attribute_expression": "private final Schema oldSchema;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Schema", "name": "oldSchema", "syntax_pass": true}, {"attribute_expression": "private final Schema newSchema;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Schema", "name": "newSchema", "syntax_pass": true}, {"attribute_expression": "private final DiffContext context;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "DiffContext", "name": "context", "syntax_pass": true}, {"attribute_expression": "private ChangedSchema schema;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "ChangedSchema", "name": "schema", "syntax_pass": true}]}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements.java.ChangedSecurityRequirements", "name": "ChangedSecurityRequirements", "file_path": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements.java", "superclasses": "", "methods": ["[]ChangedSecurityRequirements(List<SecurityRequirement>,List<SecurityRequirement>,DiffContext)", "[List<Changed>]getChangedElements()", "[DiffResult]isCoreChanged()", "[void]addMissing(SecurityRequirement)", "[void]addIncreased(SecurityRequirement)", "[void]addChanged(ChangedSecurityRequirement)", "[List<SecurityRequirement>]getOldSecurityRequirements()", "[List<SecurityRequirement>]getNewSecurityRequirements()", "[List<SecurityRequirement>]getMissing()", "[List<SecurityRequirement>]getIncreased()", "[List<ChangedSecurityRequirement>]getChanged()", "[ChangedSecurityRequirements]setOldSecurityRequirements(List<SecurityRequirement>)", "[ChangedSecurityRequirements]setNewSecurityRequirements(List<SecurityRequirement>)", "[ChangedSecurityRequirements]setMissing(List<SecurityRequirement>)", "[ChangedSecurityRequirements]setIncreased(List<SecurityRequirement>)", "[ChangedSecurityRequirements]setChanged(List<ChangedSecurityRequirement>)", "[boolean]equals(Object)", "[int]hashCode()", "[java.lang.String]toString()"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements.java.ChangedSecurityRequirements.[]ChangedSecurityRequirements(List<SecurityRequirement>,List<SecurityRequirement>,DiffContext)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements.java.ChangedSecurityRequirements.[List<Changed>]getChangedElements()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements.java.ChangedSecurityRequirements.[DiffResult]isCoreChanged()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements.java.ChangedSecurityRequirements.[void]addMissing(SecurityRequirement)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements.java.ChangedSecurityRequirements.[void]addIncreased(SecurityRequirement)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements.java.ChangedSecurityRequirements.[void]addChanged(ChangedSecurityRequirement)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements.java.ChangedSecurityRequirements.[List<SecurityRequirement>]getOldSecurityRequirements()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements.java.ChangedSecurityRequirements.[List<SecurityRequirement>]getNewSecurityRequirements()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements.java.ChangedSecurityRequirements.[List<SecurityRequirement>]getMissing()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements.java.ChangedSecurityRequirements.[List<SecurityRequirement>]getIncreased()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements.java.ChangedSecurityRequirements.[List<ChangedSecurityRequirement>]getChanged()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements.java.ChangedSecurityRequirements.[ChangedSecurityRequirements]setOldSecurityRequirements(List<SecurityRequirement>)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements.java.ChangedSecurityRequirements.[ChangedSecurityRequirements]setNewSecurityRequirements(List<SecurityRequirement>)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements.java.ChangedSecurityRequirements.[ChangedSecurityRequirements]setMissing(List<SecurityRequirement>)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements.java.ChangedSecurityRequirements.[ChangedSecurityRequirements]setIncreased(List<SecurityRequirement>)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements.java.ChangedSecurityRequirements.[ChangedSecurityRequirements]setChanged(List<ChangedSecurityRequirement>)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements.java.ChangedSecurityRequirements.[boolean]equals(Object)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements.java.ChangedSecurityRequirements.[int]hashCode()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements.java.ChangedSecurityRequirements.[java.lang.String]toString()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class ChangedSecurityRequirements implements ComposedChanged {\n  private List<SecurityRequirement> oldSecurityRequirements;\n  private List<SecurityRequirement> newSecurityRequirements;\n  private final DiffContext context;\n  private List<SecurityRequirement> missing;\n  private List<SecurityRequirement> increased;\n  private List<ChangedSecurityRequirement> changed;\n\n  public ChangedSecurityRequirements(\n      List<SecurityRequirement> oldSecurityRequirements,\n      List<SecurityRequirement> newSecurityRequirements,\n      DiffContext context) {\n    this.oldSecurityRequirements = oldSecurityRequirements;\n    this.newSecurityRequirements = newSecurityRequirements;\n    this.context = context;\n    this.changed = new ArrayList<>();\n  }\n\n  @Override\n  public List<Changed> getChangedElements() {\n    return new ArrayList<>(changed);\n  }\n\n  @Override\n  public DiffResult isCoreChanged() {\n    if (CollectionUtils.isEmpty(missing) && CollectionUtils.isEmpty(increased)) {\n      return DiffResult.NO_CHANGES;\n    }\n    if (CollectionUtils.isNotEmpty(missing)) {\n      if (SECURITY_REQUIREMENTS_DECREASED.enabled(context)) {\n        return DiffResult.INCOMPATIBLE;\n      }\n    }\n    return DiffResult.COMPATIBLE;\n  }\n\n  public void addMissing(SecurityRequirement securityRequirement) {\n    if (this.missing == null) {\n      this.missing = new ArrayList<>();\n    }\n    this.missing.add(securityRequirement);\n  }\n\n  public void addIncreased(SecurityRequirement securityRequirement) {\n    if (this.increased == null) {\n      this.increased = new ArrayList<>();\n    }\n    this.increased.add(securityRequirement);\n  }\n\n  public void addChanged(ChangedSecurityRequirement changedSecurityRequirement) {\n    if (this.changed == null) {\n      this.changed = new ArrayList<>();\n    }\n    this.changed.add(changedSecurityRequirement);\n  }\n\n  public List<SecurityRequirement> getOldSecurityRequirements() {\n    return this.oldSecurityRequirements;\n  }\n\n  public List<SecurityRequirement> getNewSecurityRequirements() {\n    return this.newSecurityRequirements;\n  }\n\n  public List<SecurityRequirement> getMissing() {\n    return this.missing;\n  }\n\n  public List<SecurityRequirement> getIncreased() {\n    return this.increased;\n  }\n\n  public List<ChangedSecurityRequirement> getChanged() {\n    return this.changed;\n  }\n\n  public ChangedSecurityRequirements setOldSecurityRequirements(\n      final List<SecurityRequirement> oldSecurityRequirements) {\n    this.oldSecurityRequirements = oldSecurityRequirements;\n    return this;\n  }\n\n  public ChangedSecurityRequirements setNewSecurityRequirements(\n      final List<SecurityRequirement> newSecurityRequirements) {\n    this.newSecurityRequirements = newSecurityRequirements;\n    return this;\n  }\n\n  public ChangedSecurityRequirements setMissing(final List<SecurityRequirement> missing) {\n    this.missing = missing;\n    return this;\n  }\n\n  public ChangedSecurityRequirements setIncreased(final List<SecurityRequirement> increased) {\n    this.increased = increased;\n    return this;\n  }\n\n  public ChangedSecurityRequirements setChanged(final List<ChangedSecurityRequirement> changed) {\n    this.changed = changed;\n    return this;\n  }\n\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    ChangedSecurityRequirements that = (ChangedSecurityRequirements) o;\n    return Objects.equals(oldSecurityRequirements, that.oldSecurityRequirements)\n        && Objects.equals(newSecurityRequirements, that.newSecurityRequirements)\n        && Objects.equals(missing, that.missing)\n        && Objects.equals(increased, that.increased)\n        && Objects.equals(changed, that.changed);\n  }\n\n  @Override\n  public int hashCode() {\n    return Objects.hash(\n        oldSecurityRequirements, newSecurityRequirements, missing, increased, changed);\n  }\n\n  @java.lang.Override\n  public java.lang.String toString() {\n    return \"ChangedSecurityRequirements(oldSecurityRequirements=\"\n        + this.getOldSecurityRequirements()\n        + \", newSecurityRequirements=\"\n        + this.getNewSecurityRequirements()\n        + \", missing=\"\n        + this.getMissing()\n        + \", increased=\"\n        + this.getIncreased()\n        + \", changed=\"\n        + this.getChanged()\n        + \")\";\n  }\n}", "super_interfaces": ["ComposedChanged"], "fields": [{"attribute_expression": "private List<SecurityRequirement> oldSecurityRequirements;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "List<SecurityRequirement>", "name": "oldSecurityRequirements", "syntax_pass": true}, {"attribute_expression": "private List<SecurityRequirement> newSecurityRequirements;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "List<SecurityRequirement>", "name": "newSecurityRequirements", "syntax_pass": true}, {"attribute_expression": "private final DiffContext context;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "DiffContext", "name": "context", "syntax_pass": true}, {"attribute_expression": "private List<SecurityRequirement> missing;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "List<SecurityRequirement>", "name": "missing", "syntax_pass": true}, {"attribute_expression": "private List<SecurityRequirement> increased;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "List<SecurityRequirement>", "name": "increased", "syntax_pass": true}, {"attribute_expression": "private List<ChangedSecurityRequirement> changed;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "List<ChangedSecurityRequirement>", "name": "changed", "syntax_pass": true}]}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPaths.java.ChangedPaths", "name": "ChangedPaths", "file_path": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPaths.java", "superclasses": "", "methods": ["[]ChangedPaths(Map<String, PathItem>,Map<String, PathItem>,OpenApiDiffOptions)", "[List<Changed>]getChangedElements()", "[DiffResult]isCoreChanged()", "[Map<String, PathItem>]getOldPathMap()", "[Map<String, PathItem>]getNewPathMap()", "[Map<String, PathItem>]getIncreased()", "[Map<String, PathItem>]getMissing()", "[Map<String, ChangedPath>]getChanged()", "[void]setIncreased(Map<String, PathItem>)", "[void]setMissing(Map<String, PathItem>)", "[void]setChanged(Map<String, ChangedPath>)", "[boolean]equals(Object)", "[int]hashCode()", "[java.lang.String]toString()"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/model/ChangedPaths.java.ChangedPaths.[]ChangedPaths(Map<String, PathItem>,Map<String, PathItem>,OpenApiDiffOptions)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedPaths.java.ChangedPaths.[List<Changed>]getChangedElements()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedPaths.java.ChangedPaths.[DiffResult]isCoreChanged()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedPaths.java.ChangedPaths.[Map<String, PathItem>]getOldPathMap()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedPaths.java.ChangedPaths.[Map<String, PathItem>]getNewPathMap()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedPaths.java.ChangedPaths.[Map<String, PathItem>]getIncreased()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedPaths.java.ChangedPaths.[Map<String, PathItem>]getMissing()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedPaths.java.ChangedPaths.[Map<String, ChangedPath>]getChanged()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedPaths.java.ChangedPaths.[void]setIncreased(Map<String, PathItem>)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedPaths.java.ChangedPaths.[void]setMissing(Map<String, PathItem>)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedPaths.java.ChangedPaths.[void]setChanged(Map<String, ChangedPath>)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedPaths.java.ChangedPaths.[boolean]equals(Object)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedPaths.java.ChangedPaths.[int]hashCode()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedPaths.java.ChangedPaths.[java.lang.String]toString()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class ChangedPaths implements ComposedChanged {\n  private final OpenApiDiffOptions options;\n  private final Map<String, PathItem> oldPathMap;\n  private final Map<String, PathItem> newPathMap;\n  private Map<String, PathItem> increased;\n  private Map<String, PathItem> missing;\n  private Map<String, ChangedPath> changed;\n\n  public ChangedPaths(\n      Map<String, PathItem> oldPathMap,\n      Map<String, PathItem> newPathMap,\n      OpenApiDiffOptions options) {\n    this.options = options;\n    this.oldPathMap = oldPathMap;\n    this.newPathMap = newPathMap;\n    this.increased = new LinkedHashMap<>();\n    this.missing = new LinkedHashMap<>();\n    this.changed = new LinkedHashMap<>();\n  }\n\n  @Override\n  public List<Changed> getChangedElements() {\n    return new ArrayList<>(changed.values());\n  }\n\n  @Override\n  public DiffResult isCoreChanged() {\n    if (increased.isEmpty() && missing.isEmpty()) {\n      return DiffResult.NO_CHANGES;\n    }\n    if (!missing.isEmpty()) {\n      if (OPENAPI_ENDPOINTS_DECREASED.enabled(options.getConfig())) {\n        return DiffResult.INCOMPATIBLE;\n      }\n    }\n    return DiffResult.COMPATIBLE;\n  }\n\n  public Map<String, PathItem> getOldPathMap() {\n    return this.oldPathMap;\n  }\n\n  public Map<String, PathItem> getNewPathMap() {\n    return this.newPathMap;\n  }\n\n  public Map<String, PathItem> getIncreased() {\n    return this.increased;\n  }\n\n  public Map<String, PathItem> getMissing() {\n    return this.missing;\n  }\n\n  public Map<String, ChangedPath> getChanged() {\n    return this.changed;\n  }\n\n  public void setIncreased(final Map<String, PathItem> increased) {\n    this.increased = increased;\n  }\n\n  public void setMissing(final Map<String, PathItem> missing) {\n    this.missing = missing;\n  }\n\n  public void setChanged(final Map<String, ChangedPath> changed) {\n    this.changed = changed;\n  }\n\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    ChangedPaths that = (ChangedPaths) o;\n    return Objects.equals(oldPathMap, that.oldPathMap)\n        && Objects.equals(newPathMap, that.newPathMap)\n        && Objects.equals(increased, that.increased)\n        && Objects.equals(missing, that.missing)\n        && Objects.equals(changed, that.changed);\n  }\n\n  @Override\n  public int hashCode() {\n    return Objects.hash(oldPathMap, newPathMap, increased, missing, changed);\n  }\n\n  @java.lang.Override\n  public java.lang.String toString() {\n    return \"ChangedPaths(oldPathMap=\"\n        + this.getOldPathMap()\n        + \", newPathMap=\"\n        + this.getNewPathMap()\n        + \", increased=\"\n        + this.getIncreased()\n        + \", missing=\"\n        + this.getMissing()\n        + \", changed=\"\n        + this.getChanged()\n        + \")\";\n  }\n}", "super_interfaces": ["ComposedChanged"], "fields": [{"attribute_expression": "private final OpenApiDiffOptions options;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "OpenApiDiffOptions", "name": "options", "syntax_pass": true}, {"attribute_expression": "private final Map<String, PathItem> oldPathMap;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Map<String, PathItem>", "name": "oldPathMap", "syntax_pass": true}, {"attribute_expression": "private final Map<String, PathItem> newPathMap;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Map<String, PathItem>", "name": "newPathMap", "syntax_pass": true}, {"attribute_expression": "private Map<String, PathItem> increased;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Map<String, PathItem>", "name": "increased", "syntax_pass": true}, {"attribute_expression": "private Map<String, PathItem> missing;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Map<String, PathItem>", "name": "missing", "syntax_pass": true}, {"attribute_expression": "private Map<String, ChangedPath> changed;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Map<String, ChangedPath>", "name": "changed", "syntax_pass": true}]}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedResponse.java.ChangedResponse", "name": "ChangedResponse", "file_path": "src/main/java/org/openapitools/openapidiff/core/model/ChangedResponse.java", "superclasses": "", "methods": ["[]ChangedResponse(ApiResponse,ApiResponse,DiffContext)", "[List<Changed>]getChangedElements()", "[DiffResult]isCoreChanged()", "[ApiResponse]getOldApiResponse()", "[ApiResponse]getNewApiResponse()", "[DiffContext]getContext()", "[ChangedMetadata]getDescription()", "[ChangedHeaders]getHeaders()", "[ChangedContent]getContent()", "[ChangedExtensions]getExtensions()", "[ChangedResponse]setDescription(ChangedMetadata)", "[ChangedResponse]setHeaders(ChangedHeaders)", "[ChangedResponse]setContent(ChangedContent)", "[ChangedResponse]setExtensions(ChangedExtensions)", "[boolean]equals(Object)", "[int]hashCode()", "[java.lang.String]toString()"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/model/ChangedResponse.java.ChangedResponse.[]ChangedResponse(ApiResponse,ApiResponse,DiffContext)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedResponse.java.ChangedResponse.[List<Changed>]getChangedElements()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedResponse.java.ChangedResponse.[DiffResult]isCoreChanged()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedResponse.java.ChangedResponse.[ApiResponse]getOldApiResponse()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedResponse.java.ChangedResponse.[ApiResponse]getNewApiResponse()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedResponse.java.ChangedResponse.[DiffContext]getContext()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedResponse.java.ChangedResponse.[ChangedMetadata]getDescription()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedResponse.java.ChangedResponse.[ChangedHeaders]getHeaders()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedResponse.java.ChangedResponse.[ChangedContent]getContent()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedResponse.java.ChangedResponse.[ChangedExtensions]getExtensions()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedResponse.java.ChangedResponse.[ChangedResponse]setDescription(ChangedMetadata)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedResponse.java.ChangedResponse.[ChangedResponse]setHeaders(ChangedHeaders)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedResponse.java.ChangedResponse.[ChangedResponse]setContent(ChangedContent)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedResponse.java.ChangedResponse.[ChangedResponse]setExtensions(ChangedExtensions)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedResponse.java.ChangedResponse.[boolean]equals(Object)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedResponse.java.ChangedResponse.[int]hashCode()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedResponse.java.ChangedResponse.[java.lang.String]toString()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class ChangedResponse implements ComposedChanged {\n  private final ApiResponse oldApiResponse;\n  private final ApiResponse newApiResponse;\n  private final DiffContext context;\n  private ChangedMetadata description;\n  private ChangedHeaders headers;\n  private ChangedContent content;\n  private ChangedExtensions extensions;\n\n  public ChangedResponse(\n      ApiResponse oldApiResponse, ApiResponse newApiResponse, DiffContext context) {\n    this.oldApiResponse = oldApiResponse;\n    this.newApiResponse = newApiResponse;\n    this.context = context;\n  }\n\n  @Override\n  public List<Changed> getChangedElements() {\n    return Arrays.asList(description, headers, content, extensions);\n  }\n\n  @Override\n  public DiffResult isCoreChanged() {\n    return DiffResult.NO_CHANGES;\n  }\n\n  public ApiResponse getOldApiResponse() {\n    return this.oldApiResponse;\n  }\n\n  public ApiResponse getNewApiResponse() {\n    return this.newApiResponse;\n  }\n\n  public DiffContext getContext() {\n    return this.context;\n  }\n\n  public ChangedMetadata getDescription() {\n    return this.description;\n  }\n\n  public ChangedHeaders getHeaders() {\n    return this.headers;\n  }\n\n  public ChangedContent getContent() {\n    return this.content;\n  }\n\n  public ChangedExtensions getExtensions() {\n    return this.extensions;\n  }\n\n  public ChangedResponse setDescription(final ChangedMetadata description) {\n    this.description = description;\n    return this;\n  }\n\n  public ChangedResponse setHeaders(final ChangedHeaders headers) {\n    this.headers = headers;\n    return this;\n  }\n\n  public ChangedResponse setContent(final ChangedContent content) {\n    this.content = content;\n    return this;\n  }\n\n  public ChangedResponse setExtensions(final ChangedExtensions extensions) {\n    this.extensions = extensions;\n    return this;\n  }\n\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    ChangedResponse that = (ChangedResponse) o;\n    return Objects.equals(oldApiResponse, that.oldApiResponse)\n        && Objects.equals(newApiResponse, that.newApiResponse)\n        && Objects.equals(context, that.context)\n        && Objects.equals(description, that.description)\n        && Objects.equals(headers, that.headers)\n        && Objects.equals(content, that.content)\n        && Objects.equals(extensions, that.extensions);\n  }\n\n  @Override\n  public int hashCode() {\n    return Objects.hash(\n        oldApiResponse, newApiResponse, context, description, headers, content, extensions);\n  }\n\n  @java.lang.Override\n  public java.lang.String toString() {\n    return \"ChangedResponse(oldApiResponse=\"\n        + this.getOldApiResponse()\n        + \", newApiResponse=\"\n        + this.getNewApiResponse()\n        + \", context=\"\n        + this.getContext()\n        + \", description=\"\n        + this.getDescription()\n        + \", headers=\"\n        + this.getHeaders()\n        + \", content=\"\n        + this.getContent()\n        + \", extensions=\"\n        + this.getExtensions()\n        + \")\";\n  }\n}", "super_interfaces": ["ComposedChanged"], "fields": [{"attribute_expression": "private final ApiResponse oldApiResponse;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "ApiResponse", "name": "oldApiResponse", "syntax_pass": true}, {"attribute_expression": "private final ApiResponse newApiResponse;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "ApiResponse", "name": "newApiResponse", "syntax_pass": true}, {"attribute_expression": "private final DiffContext context;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "DiffContext", "name": "context", "syntax_pass": true}, {"attribute_expression": "private ChangedMetadata description;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "ChangedMetadata", "name": "description", "syntax_pass": true}, {"attribute_expression": "private ChangedHeaders headers;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "ChangedHeaders", "name": "headers", "syntax_pass": true}, {"attribute_expression": "private ChangedContent content;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "ChangedContent", "name": "content", "syntax_pass": true}, {"attribute_expression": "private ChangedExtensions extensions;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "ChangedExtensions", "name": "extensions", "syntax_pass": true}]}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/Endpoint.java.Endpoint", "name": "Endpoint", "file_path": "src/main/java/org/openapitools/openapidiff/core/model/Endpoint.java", "superclasses": "", "methods": ["[String]toString()", "[String]getPathUrl()", "[PathItem.HttpMethod]getMethod()", "[String]getSummary()", "[PathItem]getPath()", "[Operation]getOperation()", "[void]setPathUrl(String)", "[void]setMethod(PathItem.HttpMethod)", "[void]setSummary(String)", "[void]setPath(PathItem)", "[void]setOperation(Operation)", "[boolean]equals(Object)", "[int]hashCode()"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/model/Endpoint.java.Endpoint.[String]toString()", "src/main/java/org/openapitools/openapidiff/core/model/Endpoint.java.Endpoint.[String]getPathUrl()", "src/main/java/org/openapitools/openapidiff/core/model/Endpoint.java.Endpoint.[PathItem.HttpMethod]getMethod()", "src/main/java/org/openapitools/openapidiff/core/model/Endpoint.java.Endpoint.[String]getSummary()", "src/main/java/org/openapitools/openapidiff/core/model/Endpoint.java.Endpoint.[PathItem]getPath()", "src/main/java/org/openapitools/openapidiff/core/model/Endpoint.java.Endpoint.[Operation]getOperation()", "src/main/java/org/openapitools/openapidiff/core/model/Endpoint.java.Endpoint.[void]setPathUrl(String)", "src/main/java/org/openapitools/openapidiff/core/model/Endpoint.java.Endpoint.[void]setMethod(PathItem.HttpMethod)", "src/main/java/org/openapitools/openapidiff/core/model/Endpoint.java.Endpoint.[void]setSummary(String)", "src/main/java/org/openapitools/openapidiff/core/model/Endpoint.java.Endpoint.[void]setPath(PathItem)", "src/main/java/org/openapitools/openapidiff/core/model/Endpoint.java.Endpoint.[void]setOperation(Operation)", "src/main/java/org/openapitools/openapidiff/core/model/Endpoint.java.Endpoint.[boolean]equals(Object)", "src/main/java/org/openapitools/openapidiff/core/model/Endpoint.java.Endpoint.[int]hashCode()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Endpoint {\n  private String pathUrl;\n  private PathItem.HttpMethod method;\n  private String summary;\n  private PathItem path;\n  private Operation operation;\n\n  @Override\n  public String toString() {\n    return method + \" \" + pathUrl;\n  }\n\n  public String getPathUrl() {\n    return this.pathUrl;\n  }\n\n  public PathItem.HttpMethod getMethod() {\n    return this.method;\n  }\n\n  public String getSummary() {\n    return this.summary;\n  }\n\n  public PathItem getPath() {\n    return this.path;\n  }\n\n  public Operation getOperation() {\n    return this.operation;\n  }\n\n  public void setPathUrl(final String pathUrl) {\n    this.pathUrl = pathUrl;\n  }\n\n  public void setMethod(final PathItem.HttpMethod method) {\n    this.method = method;\n  }\n\n  public void setSummary(final String summary) {\n    this.summary = summary;\n  }\n\n  public void setPath(final PathItem path) {\n    this.path = path;\n  }\n\n  public void setOperation(final Operation operation) {\n    this.operation = operation;\n  }\n\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    Endpoint endpoint = (Endpoint) o;\n    return Objects.equals(pathUrl, endpoint.pathUrl)\n        && method == endpoint.method\n        && Objects.equals(summary, endpoint.summary)\n        && Objects.equals(path, endpoint.path)\n        && Objects.equals(operation, endpoint.operation);\n  }\n\n  @Override\n  public int hashCode() {\n    return Objects.hash(pathUrl, method, summary, path, operation);\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private String pathUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "pathUrl", "syntax_pass": true}, {"attribute_expression": "private PathItem.HttpMethod method;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "PathItem.HttpMethod", "name": "method", "syntax_pass": true}, {"attribute_expression": "private String summary;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "summary", "syntax_pass": true}, {"attribute_expression": "private PathItem path;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "PathItem", "name": "path", "syntax_pass": true}, {"attribute_expression": "private Operation operation;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Operation", "name": "operation", "syntax_pass": true}]}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedExtensions.java.ChangedExtensions", "name": "ChangedExtensions", "file_path": "src/main/java/org/openapitools/openapidiff/core/model/ChangedExtensions.java", "superclasses": "", "methods": ["[]ChangedExtensions(Map<String, Object>,Map<String, Object>,DiffContext)", "[List<Changed>]getChangedElements()", "[DiffResult]isCoreChanged()", "[Map<String, Object>]getOldExtensions()", "[Map<String, Object>]getNewExtensions()", "[DiffContext]getContext()", "[Map<String, Changed>]getIncreased()", "[Map<String, Changed>]getMissing()", "[Map<String, Changed>]getChanged()", "[void]setIncreased(Map<String, Changed>)", "[void]setMissing(Map<String, Changed>)", "[void]setChanged(Map<String, Changed>)", "[boolean]equals(Object)", "[int]hashCode()", "[java.lang.String]toString()"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/model/ChangedExtensions.java.ChangedExtensions.[]ChangedExtensions(Map<String, Object>,Map<String, Object>,DiffContext)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedExtensions.java.ChangedExtensions.[List<Changed>]getChangedElements()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedExtensions.java.ChangedExtensions.[DiffResult]isCoreChanged()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedExtensions.java.ChangedExtensions.[Map<String, Object>]getOldExtensions()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedExtensions.java.ChangedExtensions.[Map<String, Object>]getNewExtensions()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedExtensions.java.ChangedExtensions.[DiffContext]getContext()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedExtensions.java.ChangedExtensions.[Map<String, Changed>]getIncreased()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedExtensions.java.ChangedExtensions.[Map<String, Changed>]getMissing()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedExtensions.java.ChangedExtensions.[Map<String, Changed>]getChanged()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedExtensions.java.ChangedExtensions.[void]setIncreased(Map<String, Changed>)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedExtensions.java.ChangedExtensions.[void]setMissing(Map<String, Changed>)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedExtensions.java.ChangedExtensions.[void]setChanged(Map<String, Changed>)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedExtensions.java.ChangedExtensions.[boolean]equals(Object)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedExtensions.java.ChangedExtensions.[int]hashCode()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedExtensions.java.ChangedExtensions.[java.lang.String]toString()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class ChangedExtensions implements ComposedChanged {\n  private final Map<String, Object> oldExtensions;\n  private final Map<String, Object> newExtensions;\n  private final DiffContext context;\n  private Map<String, Changed> increased;\n  private Map<String, Changed> missing;\n  private Map<String, Changed> changed;\n\n  public ChangedExtensions(\n      Map<String, Object> oldExtensions, Map<String, Object> newExtensions, DiffContext context) {\n    this.oldExtensions = oldExtensions;\n    this.newExtensions = newExtensions;\n    this.context = context;\n    this.increased = new LinkedHashMap<>();\n    this.missing = new LinkedHashMap<>();\n    this.changed = new LinkedHashMap<>();\n  }\n\n  @Override\n  public List<Changed> getChangedElements() {\n    return Stream.of(increased, missing, changed)\n        .map(Map::values)\n        .flatMap(Collection::stream)\n        .collect(Collectors.toList());\n  }\n\n  @Override\n  public DiffResult isCoreChanged() {\n    if (increased.isEmpty() && missing.isEmpty()) {\n      return DiffResult.NO_CHANGES;\n    }\n    if (!missing.isEmpty()) {\n      if (EXTENSION_CONTENT_TYPES_DECREASED.enabled(context)) {\n        return DiffResult.INCOMPATIBLE;\n      }\n      for (String key : missing.keySet()) {\n        if (EXTENSION_CONTENT_TYPE_DELETED.enabled(context, key)) {\n          return DiffResult.INCOMPATIBLE;\n        }\n      }\n    }\n    return DiffResult.COMPATIBLE;\n  }\n\n  public Map<String, Object> getOldExtensions() {\n    return this.oldExtensions;\n  }\n\n  public Map<String, Object> getNewExtensions() {\n    return this.newExtensions;\n  }\n\n  public DiffContext getContext() {\n    return this.context;\n  }\n\n  public Map<String, Changed> getIncreased() {\n    return this.increased;\n  }\n\n  public Map<String, Changed> getMissing() {\n    return this.missing;\n  }\n\n  public Map<String, Changed> getChanged() {\n    return this.changed;\n  }\n\n  public void setIncreased(final Map<String, Changed> increased) {\n    this.increased = increased;\n  }\n\n  public void setMissing(final Map<String, Changed> missing) {\n    this.missing = missing;\n  }\n\n  public void setChanged(final Map<String, Changed> changed) {\n    this.changed = changed;\n  }\n\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    ChangedExtensions that = (ChangedExtensions) o;\n    return Objects.equals(oldExtensions, that.oldExtensions)\n        && Objects.equals(newExtensions, that.newExtensions)\n        && Objects.equals(context, that.context)\n        && Objects.equals(increased, that.increased)\n        && Objects.equals(missing, that.missing)\n        && Objects.equals(changed, that.changed);\n  }\n\n  @Override\n  public int hashCode() {\n    return Objects.hash(oldExtensions, newExtensions, context, increased, missing, changed);\n  }\n\n  @java.lang.Override\n  public java.lang.String toString() {\n    return \"ChangedExtensions(oldExtensions=\"\n        + this.getOldExtensions()\n        + \", newExtensions=\"\n        + this.getNewExtensions()\n        + \", context=\"\n        + this.getContext()\n        + \", increased=\"\n        + this.getIncreased()\n        + \", missing=\"\n        + this.getMissing()\n        + \", changed=\"\n        + this.getChanged()\n        + \")\";\n  }\n}", "super_interfaces": ["ComposedChanged"], "fields": [{"attribute_expression": "private final Map<String, Object> oldExtensions;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Map<String, Object>", "name": "oldExtensions", "syntax_pass": true}, {"attribute_expression": "private final Map<String, Object> newExtensions;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Map<String, Object>", "name": "newExtensions", "syntax_pass": true}, {"attribute_expression": "private final DiffContext context;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "DiffContext", "name": "context", "syntax_pass": true}, {"attribute_expression": "private Map<String, Changed> increased;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Map<String, Changed>", "name": "increased", "syntax_pass": true}, {"attribute_expression": "private Map<String, Changed> missing;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Map<String, Changed>", "name": "missing", "syntax_pass": true}, {"attribute_expression": "private Map<String, Changed> changed;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Map<String, Changed>", "name": "changed", "syntax_pass": true}]}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java.DiffContext", "name": "DiffContext", "file_path": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java", "superclasses": "", "methods": ["[]DiffContext(OpenApiDiffOptions)", "[DiffContext]copyWithMethod(PathItem.HttpMethod)", "[DiffContext]copyWithRequired(boolean)", "[DiffContext]copyAsRequest()", "[DiffContext]copyAsResponse()", "[DiffContext]copyWithLeftRightUrls(String,String)", "[OpenApiDiffOptions]getOptions()", "[Configuration]getConfig()", "[DiffContext]setRequest()", "[DiffContext]setResponse()", "[boolean]isResponse()", "[boolean]isRequest()", "[String]getUrl()", "[DiffContext]setUrl(String)", "[PathItem.HttpMethod]getMethod()", "[DiffContext]setMethod(PathItem.HttpMethod)", "[DiffContext]copy()", "[Map<String, String>]getParameters()", "[DiffContext]setParameters(Map<String, String>)", "[Boolean]isRequired()", "[DiffContext]setRequired(boolean)", "[DiffContext]setLeftAndRightUrls(String,String)", "[String]getLeftUrl()", "[String]getRightUrl()", "[boolean]equals(Object)", "[int]hashCode()"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java.DiffContext.[]DiffContext(OpenApiDiffOptions)", "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java.DiffContext.[DiffContext]copyWithMethod(PathItem.HttpMethod)", "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java.DiffContext.[DiffContext]copyWithRequired(boolean)", "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java.DiffContext.[DiffContext]copyAsRequest()", "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java.DiffContext.[DiffContext]copyAsResponse()", "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java.DiffContext.[DiffContext]copyWithLeftRightUrls(String,String)", "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java.DiffContext.[OpenApiDiffOptions]getOptions()", "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java.DiffContext.[Configuration]getConfig()", "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java.DiffContext.[DiffContext]setRequest()", "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java.DiffContext.[DiffContext]setResponse()", "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java.DiffContext.[boolean]isResponse()", "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java.DiffContext.[boolean]isRequest()", "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java.DiffContext.[String]getUrl()", "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java.DiffContext.[DiffContext]setUrl(String)", "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java.DiffContext.[PathItem.HttpMethod]getMethod()", "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java.DiffContext.[DiffContext]setMethod(PathItem.HttpMethod)", "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java.DiffContext.[DiffContext]copy()", "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java.DiffContext.[Map<String, String>]getParameters()", "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java.DiffContext.[DiffContext]setParameters(Map<String, String>)", "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java.DiffContext.[Boolean]isRequired()", "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java.DiffContext.[DiffContext]setRequired(boolean)", "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java.DiffContext.[DiffContext]setLeftAndRightUrls(String,String)", "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java.DiffContext.[String]getLeftUrl()", "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java.DiffContext.[String]getRightUrl()", "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java.DiffContext.[boolean]equals(Object)", "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java.DiffContext.[int]hashCode()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class DiffContext {\n\n  @JsonIgnore private final OpenApiDiffOptions options;\n  private String url;\n  private Map<String, String> parameters;\n  private PathItem.HttpMethod method;\n  private boolean response;\n  private boolean request;\n  private Boolean required;\n  private String leftUrl;\n  private String rightUrl;\n\n  public DiffContext(OpenApiDiffOptions options) {\n    this.options = options;\n    parameters = new HashMap<>();\n    response = false;\n    request = true;\n  }\n\n  public DiffContext copyWithMethod(PathItem.HttpMethod method) {\n    return copy().setMethod(method);\n  }\n\n  public DiffContext copyWithRequired(boolean required) {\n    return copy().setRequired(required);\n  }\n\n  public DiffContext copyAsRequest() {\n    return copy().setRequest();\n  }\n\n  public DiffContext copyAsResponse() {\n    return copy().setResponse();\n  }\n\n  public DiffContext copyWithLeftRightUrls(String leftUrl, String rightUrl) {\n    return copy().setLeftAndRightUrls(leftUrl, rightUrl);\n  }\n\n  @JsonIgnore\n  public OpenApiDiffOptions getOptions() {\n    return options;\n  }\n\n  @JsonIgnore\n  public Configuration getConfig() {\n    return options.getConfig();\n  }\n\n  private DiffContext setRequest() {\n    this.request = true;\n    this.response = false;\n    return this;\n  }\n\n  private DiffContext setResponse() {\n    this.response = true;\n    this.request = false;\n    return this;\n  }\n\n  public boolean isResponse() {\n    return this.response;\n  }\n\n  public boolean isRequest() {\n    return this.request;\n  }\n\n  public String getUrl() {\n    return url;\n  }\n\n  public DiffContext setUrl(String url) {\n    this.url = url;\n    return this;\n  }\n\n  public PathItem.HttpMethod getMethod() {\n    return method;\n  }\n\n  private DiffContext setMethod(PathItem.HttpMethod method) {\n    this.method = method;\n    return this;\n  }\n\n  private DiffContext copy() {\n    DiffContext context = new DiffContext(options);\n    context.url = this.url;\n    context.parameters = this.parameters;\n    context.method = this.method;\n    context.response = this.response;\n    context.request = this.request;\n    context.required = this.required;\n    return context;\n  }\n\n  public Map<String, String> getParameters() {\n    return parameters;\n  }\n\n  public DiffContext setParameters(Map<String, String> parameters) {\n    this.parameters = parameters;\n    return this;\n  }\n\n  public Boolean isRequired() {\n    return required;\n  }\n\n  private DiffContext setRequired(boolean required) {\n    this.required = required;\n    return this;\n  }\n\n  public DiffContext setLeftAndRightUrls(String leftUrl, String rightUrl) {\n    this.leftUrl = leftUrl;\n    this.rightUrl = rightUrl;\n    return this;\n  }\n\n  public String getLeftUrl() {\n    return this.leftUrl;\n  }\n\n  public String getRightUrl() {\n    return this.rightUrl;\n  }\n\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n\n    if (o == null || getClass() != o.getClass()) return false;\n\n    DiffContext that = (DiffContext) o;\n\n    return new EqualsBuilder()\n        .append(response, that.response)\n        .append(request, that.request)\n        .append(url, that.url)\n        .append(parameters, that.parameters)\n        .append(method, that.method)\n        .append(required, that.required)\n        .isEquals();\n  }\n\n  @Override\n  public int hashCode() {\n    return new HashCodeBuilder(17, 37)\n        .append(url)\n        .append(parameters)\n        .append(method)\n        .append(response)\n        .append(request)\n        .append(required)\n        .append(leftUrl)\n        .append(rightUrl)\n        .toHashCode();\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "@JsonIgnore private final OpenApiDiffOptions options;", "docstring": "", "modifiers": "@JsonIgnore private final", "marker_annotations": ["@JsonIgnore"], "non_marker_annotations": ["private", "final"], "comments": [], "type": "OpenApiDiffOptions", "name": "options", "syntax_pass": true}, {"attribute_expression": "private String url;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "url", "syntax_pass": true}, {"attribute_expression": "private Map<String, String> parameters;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Map<String, String>", "name": "parameters", "syntax_pass": true}, {"attribute_expression": "private PathItem.HttpMethod method;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "PathItem.HttpMethod", "name": "method", "syntax_pass": true}, {"attribute_expression": "private boolean response;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "boolean", "name": "response", "syntax_pass": true}, {"attribute_expression": "private boolean request;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "boolean", "name": "request", "syntax_pass": true}, {"attribute_expression": "private Boolean required;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Boolean", "name": "required", "syntax_pass": true}, {"attribute_expression": "private String leftUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "leftUrl", "syntax_pass": true}, {"attribute_expression": "private String rightUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "rightUrl", "syntax_pass": true}]}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow.java.ChangedOAuthFlow", "name": "ChangedOAuthFlow", "file_path": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow.java", "superclasses": "", "methods": ["[]ChangedOAuthFlow(OAuthFlow,OAuthFlow,DiffContext)", "[List<Changed>]getChangedElements()", "[DiffResult]isCoreChanged()", "[OAuthFlow]getOldOAuthFlow()", "[OAuthFlow]getNewOAuthFlow()", "[boolean]isAuthorizationUrl()", "[boolean]isTokenUrl()", "[boolean]isRefreshUrl()", "[ChangedExtensions]getExtensions()", "[ChangedOAuthFlow]setOldOAuthFlow(OAuthFlow)", "[ChangedOAuthFlow]setNewOAuthFlow(OAuthFlow)", "[ChangedOAuthFlow]setAuthorizationUrl(boolean)", "[ChangedOAuthFlow]setTokenUrl(boolean)", "[ChangedOAuthFlow]setRefreshUrl(boolean)", "[ChangedOAuthFlow]setExtensions(ChangedExtensions)", "[boolean]equals(Object)", "[int]hashCode()", "[java.lang.String]toString()"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow.java.ChangedOAuthFlow.[]ChangedOAuthFlow(OAuthFlow,OAuthFlow,DiffContext)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow.java.ChangedOAuthFlow.[List<Changed>]getChangedElements()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow.java.ChangedOAuthFlow.[DiffResult]isCoreChanged()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow.java.ChangedOAuthFlow.[OAuthFlow]getOldOAuthFlow()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow.java.ChangedOAuthFlow.[OAuthFlow]getNewOAuthFlow()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow.java.ChangedOAuthFlow.[boolean]isAuthorizationUrl()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow.java.ChangedOAuthFlow.[boolean]isTokenUrl()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow.java.ChangedOAuthFlow.[boolean]isRefreshUrl()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow.java.ChangedOAuthFlow.[ChangedExtensions]getExtensions()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow.java.ChangedOAuthFlow.[ChangedOAuthFlow]setOldOAuthFlow(OAuthFlow)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow.java.ChangedOAuthFlow.[ChangedOAuthFlow]setNewOAuthFlow(OAuthFlow)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow.java.ChangedOAuthFlow.[ChangedOAuthFlow]setAuthorizationUrl(boolean)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow.java.ChangedOAuthFlow.[ChangedOAuthFlow]setTokenUrl(boolean)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow.java.ChangedOAuthFlow.[ChangedOAuthFlow]setRefreshUrl(boolean)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow.java.ChangedOAuthFlow.[ChangedOAuthFlow]setExtensions(ChangedExtensions)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow.java.ChangedOAuthFlow.[boolean]equals(Object)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow.java.ChangedOAuthFlow.[int]hashCode()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow.java.ChangedOAuthFlow.[java.lang.String]toString()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class ChangedOAuthFlow implements ComposedChanged {\n  private OAuthFlow oldOAuthFlow;\n  private OAuthFlow newOAuthFlow;\n  private final DiffContext context;\n  private boolean authorizationUrl;\n  private boolean tokenUrl;\n  private boolean refreshUrl;\n  private ChangedExtensions extensions;\n\n  public ChangedOAuthFlow(OAuthFlow oldOAuthFlow, OAuthFlow newOAuthFlow, DiffContext context) {\n    this.oldOAuthFlow = oldOAuthFlow;\n    this.newOAuthFlow = newOAuthFlow;\n    this.context = context;\n  }\n\n  @Override\n  public List<Changed> getChangedElements() {\n    return Collections.singletonList(extensions);\n  }\n\n  @Override\n  public DiffResult isCoreChanged() {\n    if (!authorizationUrl && !tokenUrl && !refreshUrl) {\n      return DiffResult.NO_CHANGES;\n    }\n    if (authorizationUrl) {\n      if (SECURITY_SCHEME_OAUTH2_AUTH_URL_CHANGED.enabled(context)) {\n        return DiffResult.INCOMPATIBLE;\n      }\n    }\n    if (refreshUrl) {\n      if (SECURITY_SCHEME_OAUTH2_REFRESH_URL_CHANGED.enabled(context)) {\n        return DiffResult.INCOMPATIBLE;\n      }\n    }\n    if (tokenUrl) {\n      if (SECURITY_SCHEME_OAUTH2_TOKEN_URL_CHANGED.enabled(context)) {\n        return DiffResult.INCOMPATIBLE;\n      }\n    }\n    return DiffResult.COMPATIBLE;\n  }\n\n  public OAuthFlow getOldOAuthFlow() {\n    return this.oldOAuthFlow;\n  }\n\n  public OAuthFlow getNewOAuthFlow() {\n    return this.newOAuthFlow;\n  }\n\n  public boolean isAuthorizationUrl() {\n    return this.authorizationUrl;\n  }\n\n  public boolean isTokenUrl() {\n    return this.tokenUrl;\n  }\n\n  public boolean isRefreshUrl() {\n    return this.refreshUrl;\n  }\n\n  public ChangedExtensions getExtensions() {\n    return this.extensions;\n  }\n\n  public ChangedOAuthFlow setOldOAuthFlow(final OAuthFlow oldOAuthFlow) {\n    this.oldOAuthFlow = oldOAuthFlow;\n    return this;\n  }\n\n  public ChangedOAuthFlow setNewOAuthFlow(final OAuthFlow newOAuthFlow) {\n    this.newOAuthFlow = newOAuthFlow;\n    return this;\n  }\n\n  public ChangedOAuthFlow setAuthorizationUrl(final boolean authorizationUrl) {\n    this.authorizationUrl = authorizationUrl;\n    return this;\n  }\n\n  public ChangedOAuthFlow setTokenUrl(final boolean tokenUrl) {\n    this.tokenUrl = tokenUrl;\n    return this;\n  }\n\n  public ChangedOAuthFlow setRefreshUrl(final boolean refreshUrl) {\n    this.refreshUrl = refreshUrl;\n    return this;\n  }\n\n  public ChangedOAuthFlow setExtensions(final ChangedExtensions extensions) {\n    this.extensions = extensions;\n    return this;\n  }\n\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    ChangedOAuthFlow that = (ChangedOAuthFlow) o;\n    return authorizationUrl == that.authorizationUrl\n        && tokenUrl == that.tokenUrl\n        && refreshUrl == that.refreshUrl\n        && Objects.equals(oldOAuthFlow, that.oldOAuthFlow)\n        && Objects.equals(newOAuthFlow, that.newOAuthFlow)\n        && Objects.equals(extensions, that.extensions);\n  }\n\n  @Override\n  public int hashCode() {\n    return Objects.hash(\n        oldOAuthFlow, newOAuthFlow, authorizationUrl, tokenUrl, refreshUrl, extensions);\n  }\n\n  @java.lang.Override\n  public java.lang.String toString() {\n    return \"ChangedOAuthFlow(oldOAuthFlow=\"\n        + this.getOldOAuthFlow()\n        + \", newOAuthFlow=\"\n        + this.getNewOAuthFlow()\n        + \", authorizationUrl=\"\n        + this.isAuthorizationUrl()\n        + \", tokenUrl=\"\n        + this.isTokenUrl()\n        + \", refreshUrl=\"\n        + this.isRefreshUrl()\n        + \", extensions=\"\n        + this.getExtensions()\n        + \")\";\n  }\n}", "super_interfaces": ["ComposedChanged"], "fields": [{"attribute_expression": "private OAuthFlow oldOAuthFlow;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "OAuthFlow", "name": "oldOAuthFlow", "syntax_pass": true}, {"attribute_expression": "private OAuthFlow newOAuthFlow;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "OAuthFlow", "name": "newOAuthFlow", "syntax_pass": true}, {"attribute_expression": "private final DiffContext context;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "DiffContext", "name": "context", "syntax_pass": true}, {"attribute_expression": "private boolean authorizationUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "boolean", "name": "authorizationUrl", "syntax_pass": true}, {"attribute_expression": "private boolean tokenUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "boolean", "name": "tokenUrl", "syntax_pass": true}, {"attribute_expression": "private boolean refreshUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "boolean", "name": "refreshUrl", "syntax_pass": true}, {"attribute_expression": "private ChangedExtensions extensions;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "ChangedExtensions", "name": "extensions", "syntax_pass": true}]}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java.ChangedOpenApi", "name": "ChangedOpenApi", "file_path": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java", "superclasses": "", "methods": ["[]ChangedOpenApi(OpenApiDiffOptions)", "[List<Endpoint>]getDeprecatedEndpoints()", "[List<Changed>]getChangedElements()", "[DiffResult]isCoreChanged()", "[OpenAPI]getOldSpecOpenApi()", "[OpenAPI]getNewSpecOpenApi()", "[List<Endpoint>]getNewEndpoints()", "[List<Endpoint>]getMissingEndpoints()", "[List<ChangedOperation>]getChangedOperations()", "[ChangedExtensions]getChangedExtensions()", "[List<ChangedSchema>]getChangedSchemas()", "[ChangedOpenApi]setOldSpecOpenApi(OpenAPI)", "[ChangedOpenApi]setNewSpecOpenApi(OpenAPI)", "[ChangedOpenApi]setNewEndpoints(List<Endpoint>)", "[ChangedOpenApi]setMissingEndpoints(List<Endpoint>)", "[ChangedOpenApi]setChangedOperations(List<ChangedOperation>)", "[ChangedOpenApi]setChangedExtensions(ChangedExtensions)", "[ChangedOpenApi]setChangedSchemas(List<ChangedSchema>)", "[boolean]equals(Object)", "[int]hashCode()", "[java.lang.String]toString()"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java.ChangedOpenApi.[]ChangedOpenApi(OpenApiDiffOptions)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java.ChangedOpenApi.[List<Endpoint>]getDeprecatedEndpoints()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java.ChangedOpenApi.[List<Changed>]getChangedElements()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java.ChangedOpenApi.[DiffResult]isCoreChanged()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java.ChangedOpenApi.[OpenAPI]getOldSpecOpenApi()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java.ChangedOpenApi.[OpenAPI]getNewSpecOpenApi()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java.ChangedOpenApi.[List<Endpoint>]getNewEndpoints()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java.ChangedOpenApi.[List<Endpoint>]getMissingEndpoints()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java.ChangedOpenApi.[List<ChangedOperation>]getChangedOperations()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java.ChangedOpenApi.[ChangedExtensions]getChangedExtensions()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java.ChangedOpenApi.[List<ChangedSchema>]getChangedSchemas()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java.ChangedOpenApi.[ChangedOpenApi]setOldSpecOpenApi(OpenAPI)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java.ChangedOpenApi.[ChangedOpenApi]setNewSpecOpenApi(OpenAPI)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java.ChangedOpenApi.[ChangedOpenApi]setNewEndpoints(List<Endpoint>)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java.ChangedOpenApi.[ChangedOpenApi]setMissingEndpoints(List<Endpoint>)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java.ChangedOpenApi.[ChangedOpenApi]setChangedOperations(List<ChangedOperation>)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java.ChangedOpenApi.[ChangedOpenApi]setChangedExtensions(ChangedExtensions)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java.ChangedOpenApi.[ChangedOpenApi]setChangedSchemas(List<ChangedSchema>)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java.ChangedOpenApi.[boolean]equals(Object)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java.ChangedOpenApi.[int]hashCode()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java.ChangedOpenApi.[java.lang.String]toString()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class ChangedOpenApi implements ComposedChanged {\n  private final OpenApiDiffOptions options;\n  @JsonIgnore private OpenAPI oldSpecOpenApi;\n  @JsonIgnore private OpenAPI newSpecOpenApi;\n  private List<Endpoint> newEndpoints;\n  private List<Endpoint> missingEndpoints;\n  private List<ChangedOperation> changedOperations;\n  private List<ChangedSchema> changedSchemas;\n  private ChangedExtensions changedExtensions;\n\n  public ChangedOpenApi(OpenApiDiffOptions options) {\n    this.options = options;\n  }\n\n  public List<Endpoint> getDeprecatedEndpoints() {\n    return changedOperations.stream()\n        .filter(ChangedOperation::isDeprecated)\n        .map(\n            c ->\n                EndpointUtils.convert2Endpoint(\n                    c.getPathUrl(), c.getHttpMethod(), c.getNewOperation()))\n        .collect(Collectors.toList());\n  }\n\n  @Override\n  public List<Changed> getChangedElements() {\n    return Stream.concat(\n            Stream.concat(changedOperations.stream(), Stream.of(changedExtensions)),\n            changedSchemas.stream())\n        .collect(Collectors.toList());\n  }\n\n  @Override\n  public DiffResult isCoreChanged() {\n    if (newEndpoints.isEmpty() && missingEndpoints.isEmpty()) {\n      return DiffResult.NO_CHANGES;\n    }\n    if (!missingEndpoints.isEmpty()) {\n      if (OPENAPI_ENDPOINTS_DECREASED.enabled(options.getConfig())) {\n        return DiffResult.INCOMPATIBLE;\n      }\n    }\n    return DiffResult.COMPATIBLE;\n  }\n\n  public OpenAPI getOldSpecOpenApi() {\n    return this.oldSpecOpenApi;\n  }\n\n  public OpenAPI getNewSpecOpenApi() {\n    return this.newSpecOpenApi;\n  }\n\n  public List<Endpoint> getNewEndpoints() {\n    return this.newEndpoints;\n  }\n\n  public List<Endpoint> getMissingEndpoints() {\n    return this.missingEndpoints;\n  }\n\n  public List<ChangedOperation> getChangedOperations() {\n    return this.changedOperations;\n  }\n\n  public ChangedExtensions getChangedExtensions() {\n    return this.changedExtensions;\n  }\n\n  public List<ChangedSchema> getChangedSchemas() {\n    return changedSchemas;\n  }\n\n  public ChangedOpenApi setOldSpecOpenApi(final OpenAPI oldSpecOpenApi) {\n    this.oldSpecOpenApi = oldSpecOpenApi;\n    return this;\n  }\n\n  public ChangedOpenApi setNewSpecOpenApi(final OpenAPI newSpecOpenApi) {\n    this.newSpecOpenApi = newSpecOpenApi;\n    return this;\n  }\n\n  public ChangedOpenApi setNewEndpoints(final List<Endpoint> newEndpoints) {\n    this.newEndpoints = newEndpoints;\n    return this;\n  }\n\n  public ChangedOpenApi setMissingEndpoints(final List<Endpoint> missingEndpoints) {\n    this.missingEndpoints = missingEndpoints;\n    return this;\n  }\n\n  public ChangedOpenApi setChangedOperations(final List<ChangedOperation> changedOperations) {\n    this.changedOperations = changedOperations;\n    return this;\n  }\n\n  public ChangedOpenApi setChangedExtensions(final ChangedExtensions changedExtensions) {\n    this.changedExtensions = changedExtensions;\n    return this;\n  }\n\n  public ChangedOpenApi setChangedSchemas(final List<ChangedSchema> changedSchemas) {\n    this.changedSchemas = changedSchemas;\n    return this;\n  }\n\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    ChangedOpenApi that = (ChangedOpenApi) o;\n    return Objects.equals(oldSpecOpenApi, that.oldSpecOpenApi)\n        && Objects.equals(newSpecOpenApi, that.newSpecOpenApi)\n        && Objects.equals(newEndpoints, that.newEndpoints)\n        && Objects.equals(missingEndpoints, that.missingEndpoints)\n        && Objects.equals(changedOperations, that.changedOperations)\n        && Objects.equals(changedExtensions, that.changedExtensions);\n  }\n\n  @Override\n  public int hashCode() {\n    return Objects.hash(\n        oldSpecOpenApi,\n        newSpecOpenApi,\n        newEndpoints,\n        missingEndpoints,\n        changedOperations,\n        changedExtensions);\n  }\n\n  @java.lang.Override\n  public java.lang.String toString() {\n    return \"ChangedOpenApi(oldSpecOpenApi=\"\n        + this.getOldSpecOpenApi()\n        + \", newSpecOpenApi=\"\n        + this.getNewSpecOpenApi()\n        + \", newEndpoints=\"\n        + this.getNewEndpoints()\n        + \", missingEndpoints=\"\n        + this.getMissingEndpoints()\n        + \", changedOperations=\"\n        + this.getChangedOperations()\n        + \", changedExtensions=\"\n        + this.getChangedExtensions()\n        + \")\";\n  }\n}", "super_interfaces": ["ComposedChanged"], "fields": [{"attribute_expression": "private final OpenApiDiffOptions options;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "OpenApiDiffOptions", "name": "options", "syntax_pass": true}, {"attribute_expression": "@JsonIgnore private OpenAPI oldSpecOpenApi;", "docstring": "", "modifiers": "@JsonIgnore private", "marker_annotations": ["@JsonIgnore"], "non_marker_annotations": ["private"], "comments": [], "type": "OpenAPI", "name": "oldSpecOpenApi", "syntax_pass": true}, {"attribute_expression": "@JsonIgnore private OpenAPI newSpecOpenApi;", "docstring": "", "modifiers": "@JsonIgnore private", "marker_annotations": ["@JsonIgnore"], "non_marker_annotations": ["private"], "comments": [], "type": "OpenAPI", "name": "newSpecOpenApi", "syntax_pass": true}, {"attribute_expression": "private List<Endpoint> newEndpoints;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "List<Endpoint>", "name": "newEndpoints", "syntax_pass": true}, {"attribute_expression": "private List<Endpoint> missingEndpoints;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "List<Endpoint>", "name": "missingEndpoints", "syntax_pass": true}, {"attribute_expression": "private List<ChangedOperation> changedOperations;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "List<ChangedOperation>", "name": "changedOperations", "syntax_pass": true}, {"attribute_expression": "private List<ChangedSchema> changedSchemas;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "List<ChangedSchema>", "name": "changedSchemas", "syntax_pass": true}, {"attribute_expression": "private ChangedExtensions changedExtensions;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "ChangedExtensions", "name": "changedExtensions", "syntax_pass": true}]}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedRequestBody.java.ChangedRequestBody", "name": "ChangedRequestBody", "file_path": "src/main/java/org/openapitools/openapidiff/core/model/ChangedRequestBody.java", "superclasses": "", "methods": ["[]ChangedRequestBody(RequestBody,RequestBody,DiffContext)", "[List<Changed>]getChangedElements()", "[DiffResult]isCoreChanged()", "[RequestBody]getOldRequestBody()", "[RequestBody]getNewRequestBody()", "[DiffContext]getContext()", "[boolean]isChangeRequired()", "[ChangedMetadata]getDescription()", "[ChangedContent]getContent()", "[ChangedExtensions]getExtensions()", "[ChangedRequestBody]setChangeRequired(boolean)", "[ChangedRequestBody]setDescription(ChangedMetadata)", "[ChangedRequestBody]setContent(ChangedContent)", "[ChangedRequestBody]setExtensions(ChangedExtensions)", "[boolean]equals(Object)", "[int]hashCode()", "[java.lang.String]toString()"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/model/ChangedRequestBody.java.ChangedRequestBody.[]ChangedRequestBody(RequestBody,RequestBody,DiffContext)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedRequestBody.java.ChangedRequestBody.[List<Changed>]getChangedElements()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedRequestBody.java.ChangedRequestBody.[DiffResult]isCoreChanged()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedRequestBody.java.ChangedRequestBody.[RequestBody]getOldRequestBody()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedRequestBody.java.ChangedRequestBody.[RequestBody]getNewRequestBody()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedRequestBody.java.ChangedRequestBody.[DiffContext]getContext()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedRequestBody.java.ChangedRequestBody.[boolean]isChangeRequired()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedRequestBody.java.ChangedRequestBody.[ChangedMetadata]getDescription()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedRequestBody.java.ChangedRequestBody.[ChangedContent]getContent()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedRequestBody.java.ChangedRequestBody.[ChangedExtensions]getExtensions()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedRequestBody.java.ChangedRequestBody.[ChangedRequestBody]setChangeRequired(boolean)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedRequestBody.java.ChangedRequestBody.[ChangedRequestBody]setDescription(ChangedMetadata)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedRequestBody.java.ChangedRequestBody.[ChangedRequestBody]setContent(ChangedContent)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedRequestBody.java.ChangedRequestBody.[ChangedRequestBody]setExtensions(ChangedExtensions)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedRequestBody.java.ChangedRequestBody.[boolean]equals(Object)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedRequestBody.java.ChangedRequestBody.[int]hashCode()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedRequestBody.java.ChangedRequestBody.[java.lang.String]toString()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class ChangedRequestBody implements ComposedChanged {\n  private final RequestBody oldRequestBody;\n  private final RequestBody newRequestBody;\n  private final DiffContext context;\n  private boolean changeRequired;\n  private ChangedMetadata description;\n  private ChangedContent content;\n  private ChangedExtensions extensions;\n\n  public ChangedRequestBody(\n      RequestBody oldRequestBody, RequestBody newRequestBody, DiffContext context) {\n    this.oldRequestBody = oldRequestBody;\n    this.newRequestBody = newRequestBody;\n    this.context = context;\n  }\n\n  @Override\n  public List<Changed> getChangedElements() {\n    return Arrays.asList(description, content, extensions);\n  }\n\n  @Override\n  public DiffResult isCoreChanged() {\n    if (!changeRequired) {\n      return DiffResult.NO_CHANGES;\n    }\n    if (OPENAPI_ENDPOINTS_DECREASED.enabled(context)) {\n      return DiffResult.INCOMPATIBLE;\n    }\n    return DiffResult.COMPATIBLE;\n  }\n\n  public RequestBody getOldRequestBody() {\n    return this.oldRequestBody;\n  }\n\n  public RequestBody getNewRequestBody() {\n    return this.newRequestBody;\n  }\n\n  public DiffContext getContext() {\n    return this.context;\n  }\n\n  public boolean isChangeRequired() {\n    return this.changeRequired;\n  }\n\n  public ChangedMetadata getDescription() {\n    return this.description;\n  }\n\n  public ChangedContent getContent() {\n    return this.content;\n  }\n\n  public ChangedExtensions getExtensions() {\n    return this.extensions;\n  }\n\n  public ChangedRequestBody setChangeRequired(final boolean changeRequired) {\n    this.changeRequired = changeRequired;\n    return this;\n  }\n\n  public ChangedRequestBody setDescription(final ChangedMetadata description) {\n    this.description = description;\n    return this;\n  }\n\n  public ChangedRequestBody setContent(final ChangedContent content) {\n    this.content = content;\n    return this;\n  }\n\n  public ChangedRequestBody setExtensions(final ChangedExtensions extensions) {\n    this.extensions = extensions;\n    return this;\n  }\n\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    ChangedRequestBody that = (ChangedRequestBody) o;\n    return changeRequired == that.changeRequired\n        && Objects.equals(oldRequestBody, that.oldRequestBody)\n        && Objects.equals(newRequestBody, that.newRequestBody)\n        && Objects.equals(context, that.context)\n        && Objects.equals(description, that.description)\n        && Objects.equals(content, that.content)\n        && Objects.equals(extensions, that.extensions);\n  }\n\n  @Override\n  public int hashCode() {\n    return Objects.hash(\n        oldRequestBody, newRequestBody, context, changeRequired, description, content, extensions);\n  }\n\n  @java.lang.Override\n  public java.lang.String toString() {\n    return \"ChangedRequestBody(oldRequestBody=\"\n        + this.getOldRequestBody()\n        + \", newRequestBody=\"\n        + this.getNewRequestBody()\n        + \", context=\"\n        + this.getContext()\n        + \", changeRequired=\"\n        + this.isChangeRequired()\n        + \", description=\"\n        + this.getDescription()\n        + \", content=\"\n        + this.getContent()\n        + \", extensions=\"\n        + this.getExtensions()\n        + \")\";\n  }\n}", "super_interfaces": ["ComposedChanged"], "fields": [{"attribute_expression": "private final RequestBody oldRequestBody;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "RequestBody", "name": "oldRequestBody", "syntax_pass": true}, {"attribute_expression": "private final RequestBody newRequestBody;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "RequestBody", "name": "newRequestBody", "syntax_pass": true}, {"attribute_expression": "private final DiffContext context;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "DiffContext", "name": "context", "syntax_pass": true}, {"attribute_expression": "private boolean changeRequired;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "boolean", "name": "changeRequired", "syntax_pass": true}, {"attribute_expression": "private ChangedMetadata description;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "ChangedMetadata", "name": "description", "syntax_pass": true}, {"attribute_expression": "private ChangedContent content;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "ChangedContent", "name": "content", "syntax_pass": true}, {"attribute_expression": "private ChangedExtensions extensions;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "ChangedExtensions", "name": "extensions", "syntax_pass": true}]}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter", "name": "ChangedParameter", "file_path": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java", "superclasses": "", "methods": ["[]ChangedParameter(String,String,DiffContext)", "[List<Changed>]getChangedElements()", "[DiffResult]isCoreChanged()", "[DiffContext]getContext()", "[Parameter]getOldParameter()", "[Parameter]getNewParameter()", "[String]getName()", "[String]getIn()", "[boolean]isChangeRequired()", "[boolean]isDeprecated()", "[boolean]isChangeStyle()", "[boolean]isChangeExplode()", "[boolean]isChangeAllowEmptyValue()", "[ChangedMetadata]getDescription()", "[ChangedSchema]getSchema()", "[ChangedContent]getContent()", "[ChangedExtensions]getExtensions()", "[ChangedParameter]setOldParameter(Parameter)", "[ChangedParameter]setNewParameter(Parameter)", "[ChangedParameter]setName(String)", "[ChangedParameter]setIn(String)", "[ChangedParameter]setChangeRequired(boolean)", "[ChangedParameter]setDeprecated(boolean)", "[ChangedParameter]setChangeStyle(boolean)", "[ChangedParameter]setChangeExplode(boolean)", "[ChangedParameter]setChangeAllowEmptyValue(boolean)", "[ChangedParameter]setDescription(ChangedMetadata)", "[ChangedParameter]setSchema(ChangedSchema)", "[ChangedParameter]setContent(ChangedContent)", "[ChangedParameter]setExtensions(ChangedExtensions)", "[boolean]equals(Object)", "[int]hashCode()", "[java.lang.String]toString()"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter.[]ChangedParameter(String,String,DiffContext)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter.[List<Changed>]getChangedElements()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter.[DiffResult]isCoreChanged()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter.[DiffContext]getContext()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter.[Parameter]getOldParameter()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter.[Parameter]getNewParameter()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter.[String]getName()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter.[String]getIn()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter.[boolean]isChangeRequired()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter.[boolean]isDeprecated()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter.[boolean]isChangeStyle()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter.[boolean]isChangeExplode()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter.[boolean]isChangeAllowEmptyValue()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter.[ChangedMetadata]getDescription()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter.[ChangedSchema]getSchema()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter.[ChangedContent]getContent()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter.[ChangedExtensions]getExtensions()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter.[ChangedParameter]setOldParameter(Parameter)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter.[ChangedParameter]setNewParameter(Parameter)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter.[ChangedParameter]setName(String)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter.[ChangedParameter]setIn(String)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter.[ChangedParameter]setChangeRequired(boolean)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter.[ChangedParameter]setDeprecated(boolean)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter.[ChangedParameter]setChangeStyle(boolean)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter.[ChangedParameter]setChangeExplode(boolean)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter.[ChangedParameter]setChangeAllowEmptyValue(boolean)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter.[ChangedParameter]setDescription(ChangedMetadata)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter.[ChangedParameter]setSchema(ChangedSchema)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter.[ChangedParameter]setContent(ChangedContent)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter.[ChangedParameter]setExtensions(ChangedExtensions)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter.[boolean]equals(Object)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter.[int]hashCode()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter.[java.lang.String]toString()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class ChangedParameter implements ComposedChanged {\n  private final DiffContext context;\n  private Parameter oldParameter;\n  private Parameter newParameter;\n  private String name;\n  private String in;\n  private boolean changeRequired;\n  private boolean deprecated;\n  private boolean changeStyle;\n  private boolean changeExplode;\n  private boolean changeAllowEmptyValue;\n  private ChangedMetadata description;\n  private ChangedSchema schema;\n  private ChangedContent content;\n  private ChangedExtensions extensions;\n\n  public ChangedParameter(String name, String in, DiffContext context) {\n    this.name = name;\n    this.in = in;\n    this.context = context;\n  }\n\n  @Override\n  public List<Changed> getChangedElements() {\n    return Arrays.asList(description, schema, content, extensions);\n  }\n\n  @Override\n  public DiffResult isCoreChanged() {\n    if (!changeRequired\n        && !deprecated\n        && !changeAllowEmptyValue\n        && !changeStyle\n        && !changeExplode) {\n      return DiffResult.NO_CHANGES;\n    }\n    if (changeAllowEmptyValue && !Boolean.TRUE.equals(newParameter.getAllowEmptyValue())) {\n      if (REQUEST_PARAM_ALLOWEMPTY_DECREASED.enabled(context)) {\n        return DiffResult.INCOMPATIBLE;\n      }\n    }\n    if (changeExplode) {\n      if (REQUEST_PARAM_EXPLODE_CHANGED.enabled(context)) {\n        return DiffResult.INCOMPATIBLE;\n      }\n    }\n    if (changeRequired && !Boolean.TRUE.equals(oldParameter.getRequired())) {\n      if (REQUEST_PARAMS_REQUIRED_INCREASED.enabled(context)) {\n        return DiffResult.INCOMPATIBLE;\n      }\n    }\n    if (changeStyle) {\n      if (REQUEST_PARAM_STYLE_CHANGED.enabled(context)) {\n        return DiffResult.INCOMPATIBLE;\n      }\n    }\n    return DiffResult.COMPATIBLE;\n  }\n\n  public DiffContext getContext() {\n    return this.context;\n  }\n\n  public Parameter getOldParameter() {\n    return this.oldParameter;\n  }\n\n  public Parameter getNewParameter() {\n    return this.newParameter;\n  }\n\n  public String getName() {\n    return this.name;\n  }\n\n  public String getIn() {\n    return this.in;\n  }\n\n  public boolean isChangeRequired() {\n    return this.changeRequired;\n  }\n\n  public boolean isDeprecated() {\n    return this.deprecated;\n  }\n\n  public boolean isChangeStyle() {\n    return this.changeStyle;\n  }\n\n  public boolean isChangeExplode() {\n    return this.changeExplode;\n  }\n\n  public boolean isChangeAllowEmptyValue() {\n    return this.changeAllowEmptyValue;\n  }\n\n  public ChangedMetadata getDescription() {\n    return this.description;\n  }\n\n  public ChangedSchema getSchema() {\n    return this.schema;\n  }\n\n  public ChangedContent getContent() {\n    return this.content;\n  }\n\n  public ChangedExtensions getExtensions() {\n    return this.extensions;\n  }\n\n  public ChangedParameter setOldParameter(final Parameter oldParameter) {\n    this.oldParameter = oldParameter;\n    return this;\n  }\n\n  public ChangedParameter setNewParameter(final Parameter newParameter) {\n    this.newParameter = newParameter;\n    return this;\n  }\n\n  public ChangedParameter setName(final String name) {\n    this.name = name;\n    return this;\n  }\n\n  public ChangedParameter setIn(final String in) {\n    this.in = in;\n    return this;\n  }\n\n  public ChangedParameter setChangeRequired(final boolean changeRequired) {\n    this.changeRequired = changeRequired;\n    return this;\n  }\n\n  public ChangedParameter setDeprecated(final boolean deprecated) {\n    this.deprecated = deprecated;\n    return this;\n  }\n\n  public ChangedParameter setChangeStyle(final boolean changeStyle) {\n    this.changeStyle = changeStyle;\n    return this;\n  }\n\n  public ChangedParameter setChangeExplode(final boolean changeExplode) {\n    this.changeExplode = changeExplode;\n    return this;\n  }\n\n  public ChangedParameter setChangeAllowEmptyValue(final boolean changeAllowEmptyValue) {\n    this.changeAllowEmptyValue = changeAllowEmptyValue;\n    return this;\n  }\n\n  public ChangedParameter setDescription(final ChangedMetadata description) {\n    this.description = description;\n    return this;\n  }\n\n  public ChangedParameter setSchema(final ChangedSchema schema) {\n    this.schema = schema;\n    return this;\n  }\n\n  public ChangedParameter setContent(final ChangedContent content) {\n    this.content = content;\n    return this;\n  }\n\n  public ChangedParameter setExtensions(final ChangedExtensions extensions) {\n    this.extensions = extensions;\n    return this;\n  }\n\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    ChangedParameter that = (ChangedParameter) o;\n    return changeRequired == that.changeRequired\n        && deprecated == that.deprecated\n        && changeStyle == that.changeStyle\n        && changeExplode == that.changeExplode\n        && changeAllowEmptyValue == that.changeAllowEmptyValue\n        && Objects.equals(context, that.context)\n        && Objects.equals(oldParameter, that.oldParameter)\n        && Objects.equals(newParameter, that.newParameter)\n        && Objects.equals(name, that.name)\n        && Objects.equals(in, that.in)\n        && Objects.equals(description, that.description)\n        && Objects.equals(schema, that.schema)\n        && Objects.equals(content, that.content)\n        && Objects.equals(extensions, that.extensions);\n  }\n\n  @Override\n  public int hashCode() {\n    return Objects.hash(\n        context,\n        oldParameter,\n        newParameter,\n        name,\n        in,\n        changeRequired,\n        deprecated,\n        changeStyle,\n        changeExplode,\n        changeAllowEmptyValue,\n        description,\n        schema,\n        content,\n        extensions);\n  }\n\n  @java.lang.Override\n  public java.lang.String toString() {\n    return \"ChangedParameter(context=\"\n        + this.getContext()\n        + \", oldParameter=\"\n        + this.getOldParameter()\n        + \", newParameter=\"\n        + this.getNewParameter()\n        + \", name=\"\n        + this.getName()\n        + \", in=\"\n        + this.getIn()\n        + \", changeRequired=\"\n        + this.isChangeRequired()\n        + \", deprecated=\"\n        + this.isDeprecated()\n        + \", changeStyle=\"\n        + this.isChangeStyle()\n        + \", changeExplode=\"\n        + this.isChangeExplode()\n        + \", changeAllowEmptyValue=\"\n        + this.isChangeAllowEmptyValue()\n        + \", description=\"\n        + this.getDescription()\n        + \", schema=\"\n        + this.getSchema()\n        + \", content=\"\n        + this.getContent()\n        + \", extensions=\"\n        + this.getExtensions()\n        + \")\";\n  }\n}", "super_interfaces": ["ComposedChanged"], "fields": [{"attribute_expression": "private final DiffContext context;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "DiffContext", "name": "context", "syntax_pass": true}, {"attribute_expression": "private Parameter oldParameter;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Parameter", "name": "oldParameter", "syntax_pass": true}, {"attribute_expression": "private Parameter newParameter;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Parameter", "name": "newParameter", "syntax_pass": true}, {"attribute_expression": "private String name;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "name", "syntax_pass": true}, {"attribute_expression": "private String in;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "in", "syntax_pass": true}, {"attribute_expression": "private boolean changeRequired;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "boolean", "name": "changeRequired", "syntax_pass": true}, {"attribute_expression": "private boolean deprecated;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "boolean", "name": "deprecated", "syntax_pass": true}, {"attribute_expression": "private boolean changeStyle;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "boolean", "name": "changeStyle", "syntax_pass": true}, {"attribute_expression": "private boolean changeExplode;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "boolean", "name": "changeExplode", "syntax_pass": true}, {"attribute_expression": "private boolean changeAllowEmptyValue;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "boolean", "name": "changeAllowEmptyValue", "syntax_pass": true}, {"attribute_expression": "private ChangedMetadata description;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "ChangedMetadata", "name": "description", "syntax_pass": true}, {"attribute_expression": "private ChangedSchema schema;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "ChangedSchema", "name": "schema", "syntax_pass": true}, {"attribute_expression": "private ChangedContent content;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "ChangedContent", "name": "content", "syntax_pass": true}, {"attribute_expression": "private ChangedExtensions extensions;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "ChangedExtensions", "name": "extensions", "syntax_pass": true}]}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/Change.java.Change", "name": "Change", "file_path": "src/main/java/org/openapitools/openapidiff/core/model/Change.java", "superclasses": "", "methods": ["[Change<T>]changed(T,T)", "[Change<T>]added(T)", "[Change<T>]removed(T)", "[]Change(T,T,Type)", "[T]getOldValue()", "[T]getNewValue()", "[Type]getType()", "[boolean]equals(Object)", "[int]hashCode()", "[java.lang.String]toString()"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/model/Change.java.Change.[Change<T>]changed(T,T)", "src/main/java/org/openapitools/openapidiff/core/model/Change.java.Change.[Change<T>]added(T)", "src/main/java/org/openapitools/openapidiff/core/model/Change.java.Change.[Change<T>]removed(T)", "src/main/java/org/openapitools/openapidiff/core/model/Change.java.Change.[]Change(T,T,Type)", "src/main/java/org/openapitools/openapidiff/core/model/Change.java.Change.[T]getOldValue()", "src/main/java/org/openapitools/openapidiff/core/model/Change.java.Change.[T]getNewValue()", "src/main/java/org/openapitools/openapidiff/core/model/Change.java.Change.[Type]getType()", "src/main/java/org/openapitools/openapidiff/core/model/Change.java.Change.[boolean]equals(Object)", "src/main/java/org/openapitools/openapidiff/core/model/Change.java.Change.[int]hashCode()", "src/main/java/org/openapitools/openapidiff/core/model/Change.java.Change.[java.lang.String]toString()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class Change<T> {\n  private final T oldValue;\n  private final T newValue;\n  private final Type type;\n\n  public static <T> Change<T> changed(T oldValue, T newValue) {\n    return new Change<>(oldValue, newValue, Type.CHANGED);\n  }\n\n  public static <T> Change<T> added(T newValue) {\n    return new Change<>(null, newValue, Type.ADDED);\n  }\n\n  public static <T> Change<T> removed(T oldValue) {\n    return new Change<>(oldValue, null, Type.REMOVED);\n  }\n\n  public enum Type {\n    ADDED,\n    CHANGED,\n    REMOVED\n  }\n\n  public Change(final T oldValue, final T newValue, final Type type) {\n    this.oldValue = oldValue;\n    this.newValue = newValue;\n    this.type = type;\n  }\n\n  public T getOldValue() {\n    return this.oldValue;\n  }\n\n  public T getNewValue() {\n    return this.newValue;\n  }\n\n  public Type getType() {\n    return this.type;\n  }\n\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    Change<?> change = (Change<?>) o;\n    return Objects.equals(oldValue, change.oldValue)\n        && Objects.equals(newValue, change.newValue)\n        && type == change.type;\n  }\n\n  @Override\n  public int hashCode() {\n    return Objects.hash(oldValue, newValue, type);\n  }\n\n  @java.lang.Override\n  public java.lang.String toString() {\n    return \"Change(oldValue=\"\n        + this.getOldValue()\n        + \", newValue=\"\n        + this.getNewValue()\n        + \", type=\"\n        + this.getType()\n        + \")\";\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final T oldValue;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "T", "name": "oldValue", "syntax_pass": true}, {"attribute_expression": "private final T newValue;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "T", "name": "newValue", "syntax_pass": true}, {"attribute_expression": "private final Type type;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Type", "name": "type", "syntax_pass": true}]}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement.java.ChangedSecurityRequirement", "name": "ChangedSecurityRequirement", "file_path": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement.java", "superclasses": "", "methods": ["[]ChangedSecurityRequirement(SecurityRequirement,SecurityRequirement,DiffContext)", "[List<Changed>]getChangedElements()", "[DiffResult]isCoreChanged()", "[void]addMissing(String,List<String>)", "[void]addIncreased(String,List<String>)", "[void]addChanged(ChangedSecurityScheme)", "[SecurityRequirement]getOldSecurityRequirement()", "[SecurityRequirement]getNewSecurityRequirement()", "[SecurityRequirement]getMissing()", "[SecurityRequirement]getIncreased()", "[List<ChangedSecurityScheme>]getChanged()", "[ChangedSecurityRequirement]setOldSecurityRequirement(SecurityRequirement)", "[ChangedSecurityRequirement]setNewSecurityRequirement(SecurityRequirement)", "[ChangedSecurityRequirement]setMissing(SecurityRequirement)", "[ChangedSecurityRequirement]setIncreased(SecurityRequirement)", "[ChangedSecurityRequirement]setChanged(List<ChangedSecurityScheme>)", "[boolean]equals(Object)", "[int]hashCode()", "[java.lang.String]toString()"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement.java.ChangedSecurityRequirement.[]ChangedSecurityRequirement(SecurityRequirement,SecurityRequirement,DiffContext)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement.java.ChangedSecurityRequirement.[List<Changed>]getChangedElements()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement.java.ChangedSecurityRequirement.[DiffResult]isCoreChanged()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement.java.ChangedSecurityRequirement.[void]addMissing(String,List<String>)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement.java.ChangedSecurityRequirement.[void]addIncreased(String,List<String>)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement.java.ChangedSecurityRequirement.[void]addChanged(ChangedSecurityScheme)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement.java.ChangedSecurityRequirement.[SecurityRequirement]getOldSecurityRequirement()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement.java.ChangedSecurityRequirement.[SecurityRequirement]getNewSecurityRequirement()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement.java.ChangedSecurityRequirement.[SecurityRequirement]getMissing()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement.java.ChangedSecurityRequirement.[SecurityRequirement]getIncreased()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement.java.ChangedSecurityRequirement.[List<ChangedSecurityScheme>]getChanged()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement.java.ChangedSecurityRequirement.[ChangedSecurityRequirement]setOldSecurityRequirement(SecurityRequirement)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement.java.ChangedSecurityRequirement.[ChangedSecurityRequirement]setNewSecurityRequirement(SecurityRequirement)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement.java.ChangedSecurityRequirement.[ChangedSecurityRequirement]setMissing(SecurityRequirement)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement.java.ChangedSecurityRequirement.[ChangedSecurityRequirement]setIncreased(SecurityRequirement)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement.java.ChangedSecurityRequirement.[ChangedSecurityRequirement]setChanged(List<ChangedSecurityScheme>)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement.java.ChangedSecurityRequirement.[boolean]equals(Object)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement.java.ChangedSecurityRequirement.[int]hashCode()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement.java.ChangedSecurityRequirement.[java.lang.String]toString()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class ChangedSecurityRequirement implements ComposedChanged {\n  private SecurityRequirement oldSecurityRequirement;\n  private SecurityRequirement newSecurityRequirement;\n  private final DiffContext context;\n  private SecurityRequirement missing;\n  private SecurityRequirement increased;\n  private List<ChangedSecurityScheme> changed;\n\n  public ChangedSecurityRequirement(\n      SecurityRequirement oldSecurityRequirement,\n      SecurityRequirement newSecurityRequirement,\n      DiffContext context) {\n    this.oldSecurityRequirement = oldSecurityRequirement;\n    this.newSecurityRequirement = newSecurityRequirement;\n    this.context = context;\n    this.changed = new ArrayList<>();\n  }\n\n  @Override\n  public List<Changed> getChangedElements() {\n    return new ArrayList<>(changed);\n  }\n\n  @Override\n  public DiffResult isCoreChanged() {\n    if (increased == null && missing == null) {\n      return DiffResult.NO_CHANGES;\n    }\n    if (increased != null) {\n      if (SECURITY_REQUIREMENT_SCHEMES_INCREASED.enabled(context)) {\n        return DiffResult.INCOMPATIBLE;\n      }\n    }\n    return DiffResult.COMPATIBLE;\n  }\n\n  public void addMissing(String key, List<String> scopes) {\n    if (missing == null) {\n      missing = new SecurityRequirement();\n    }\n    missing.put(key, scopes);\n  }\n\n  public void addIncreased(String key, List<String> scopes) {\n    if (increased == null) {\n      increased = new SecurityRequirement();\n    }\n    increased.put(key, scopes);\n  }\n\n  public void addChanged(ChangedSecurityScheme changedSecurityScheme) {\n    changed.add(changedSecurityScheme);\n  }\n\n  public SecurityRequirement getOldSecurityRequirement() {\n    return this.oldSecurityRequirement;\n  }\n\n  public SecurityRequirement getNewSecurityRequirement() {\n    return this.newSecurityRequirement;\n  }\n\n  public SecurityRequirement getMissing() {\n    return this.missing;\n  }\n\n  public SecurityRequirement getIncreased() {\n    return this.increased;\n  }\n\n  public List<ChangedSecurityScheme> getChanged() {\n    return this.changed;\n  }\n\n  public ChangedSecurityRequirement setOldSecurityRequirement(\n      final SecurityRequirement oldSecurityRequirement) {\n    this.oldSecurityRequirement = oldSecurityRequirement;\n    return this;\n  }\n\n  public ChangedSecurityRequirement setNewSecurityRequirement(\n      final SecurityRequirement newSecurityRequirement) {\n    this.newSecurityRequirement = newSecurityRequirement;\n    return this;\n  }\n\n  public ChangedSecurityRequirement setMissing(final SecurityRequirement missing) {\n    this.missing = missing;\n    return this;\n  }\n\n  public ChangedSecurityRequirement setIncreased(final SecurityRequirement increased) {\n    this.increased = increased;\n    return this;\n  }\n\n  public ChangedSecurityRequirement setChanged(final List<ChangedSecurityScheme> changed) {\n    this.changed = changed;\n    return this;\n  }\n\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    ChangedSecurityRequirement that = (ChangedSecurityRequirement) o;\n    return Objects.equals(oldSecurityRequirement, that.oldSecurityRequirement)\n        && Objects.equals(newSecurityRequirement, that.newSecurityRequirement)\n        && Objects.equals(missing, that.missing)\n        && Objects.equals(increased, that.increased)\n        && Objects.equals(changed, that.changed);\n  }\n\n  @Override\n  public int hashCode() {\n    return Objects.hash(\n        oldSecurityRequirement, newSecurityRequirement, missing, increased, changed);\n  }\n\n  @java.lang.Override\n  public java.lang.String toString() {\n    return \"ChangedSecurityRequirement(oldSecurityRequirement=\"\n        + this.getOldSecurityRequirement()\n        + \", newSecurityRequirement=\"\n        + this.getNewSecurityRequirement()\n        + \", missing=\"\n        + this.getMissing()\n        + \", increased=\"\n        + this.getIncreased()\n        + \", changed=\"\n        + this.getChanged()\n        + \")\";\n  }\n}", "super_interfaces": ["ComposedChanged"], "fields": [{"attribute_expression": "private SecurityRequirement oldSecurityRequirement;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "SecurityRequirement", "name": "oldSecurityRequirement", "syntax_pass": true}, {"attribute_expression": "private SecurityRequirement newSecurityRequirement;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "SecurityRequirement", "name": "newSecurityRequirement", "syntax_pass": true}, {"attribute_expression": "private final DiffContext context;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "DiffContext", "name": "context", "syntax_pass": true}, {"attribute_expression": "private SecurityRequirement missing;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "SecurityRequirement", "name": "missing", "syntax_pass": true}, {"attribute_expression": "private SecurityRequirement increased;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "SecurityRequirement", "name": "increased", "syntax_pass": true}, {"attribute_expression": "private List<ChangedSecurityScheme> changed;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "List<ChangedSecurityScheme>", "name": "changed", "syntax_pass": true}]}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java.ChangedHeader", "name": "ChangedHeader", "file_path": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java", "superclasses": "", "methods": ["[]ChangedHeader(Header,Header,DiffContext)", "[List<Changed>]getChangedElements()", "[DiffResult]isCoreChanged()", "[Header]getOldHeader()", "[Header]getNewHeader()", "[DiffContext]getContext()", "[boolean]isRequired()", "[boolean]isDeprecated()", "[boolean]isStyle()", "[boolean]isExplode()", "[ChangedMetadata]getDescription()", "[ChangedSchema]getSchema()", "[ChangedContent]getContent()", "[ChangedExtensions]getExtensions()", "[ChangedHeader]setRequired(boolean)", "[ChangedHeader]setDeprecated(boolean)", "[ChangedHeader]setStyle(boolean)", "[ChangedHeader]setExplode(boolean)", "[ChangedHeader]setDescription(ChangedMetadata)", "[ChangedHeader]setSchema(ChangedSchema)", "[ChangedHeader]setContent(ChangedContent)", "[ChangedHeader]setExtensions(ChangedExtensions)", "[boolean]equals(Object)", "[int]hashCode()", "[java.lang.String]toString()"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java.ChangedHeader.[]ChangedHeader(Header,Header,DiffContext)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java.ChangedHeader.[List<Changed>]getChangedElements()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java.ChangedHeader.[DiffResult]isCoreChanged()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java.ChangedHeader.[Header]getOldHeader()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java.ChangedHeader.[Header]getNewHeader()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java.ChangedHeader.[DiffContext]getContext()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java.ChangedHeader.[boolean]isRequired()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java.ChangedHeader.[boolean]isDeprecated()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java.ChangedHeader.[boolean]isStyle()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java.ChangedHeader.[boolean]isExplode()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java.ChangedHeader.[ChangedMetadata]getDescription()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java.ChangedHeader.[ChangedSchema]getSchema()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java.ChangedHeader.[ChangedContent]getContent()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java.ChangedHeader.[ChangedExtensions]getExtensions()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java.ChangedHeader.[ChangedHeader]setRequired(boolean)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java.ChangedHeader.[ChangedHeader]setDeprecated(boolean)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java.ChangedHeader.[ChangedHeader]setStyle(boolean)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java.ChangedHeader.[ChangedHeader]setExplode(boolean)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java.ChangedHeader.[ChangedHeader]setDescription(ChangedMetadata)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java.ChangedHeader.[ChangedHeader]setSchema(ChangedSchema)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java.ChangedHeader.[ChangedHeader]setContent(ChangedContent)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java.ChangedHeader.[ChangedHeader]setExtensions(ChangedExtensions)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java.ChangedHeader.[boolean]equals(Object)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java.ChangedHeader.[int]hashCode()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java.ChangedHeader.[java.lang.String]toString()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class ChangedHeader implements ComposedChanged {\n  private final Header oldHeader;\n  private final Header newHeader;\n  private final DiffContext context;\n  private boolean required;\n  private boolean deprecated;\n  private boolean style;\n  private boolean explode;\n  private ChangedMetadata description;\n  private ChangedSchema schema;\n  private ChangedContent content;\n  private ChangedExtensions extensions;\n\n  public ChangedHeader(Header oldHeader, Header newHeader, DiffContext context) {\n    this.oldHeader = oldHeader;\n    this.newHeader = newHeader;\n    this.context = context;\n  }\n\n  @Override\n  public List<Changed> getChangedElements() {\n    return Arrays.asList(description, schema, content, extensions);\n  }\n\n  @Override\n  public DiffResult isCoreChanged() {\n    if (!required && !deprecated && !style && !explode) {\n      return DiffResult.NO_CHANGES;\n    }\n    if (explode) {\n      if (RESPONSE_HEADER_EXPLODE_CHANGED.enabled(context)) {\n        return DiffResult.INCOMPATIBLE;\n      }\n    }\n    if (required) {\n      boolean requiredOld = oldHeader.getRequired() != null ? oldHeader.getRequired() : false;\n      boolean requiredNew = newHeader.getRequired() != null ? newHeader.getRequired() : false;\n      if (requiredOld && !requiredNew) {\n        if (RESPONSE_HEADER_REQUIRED_DECREASED.enabled(context)) {\n          return DiffResult.INCOMPATIBLE;\n        }\n      }\n      if (!requiredOld && requiredNew) {\n        // TODO: Document why desired or remove support. Client will just ignore new header?\n        if (RESPONSE_HEADER_REQUIRED_INCREASED.enabled(context)) {\n          return DiffResult.INCOMPATIBLE;\n        }\n      }\n    }\n    if (style) {\n      return DiffResult.INCOMPATIBLE;\n    }\n    return DiffResult.COMPATIBLE;\n  }\n\n  public Header getOldHeader() {\n    return this.oldHeader;\n  }\n\n  public Header getNewHeader() {\n    return this.newHeader;\n  }\n\n  public DiffContext getContext() {\n    return this.context;\n  }\n\n  public boolean isRequired() {\n    return this.required;\n  }\n\n  public boolean isDeprecated() {\n    return this.deprecated;\n  }\n\n  public boolean isStyle() {\n    return this.style;\n  }\n\n  public boolean isExplode() {\n    return this.explode;\n  }\n\n  public ChangedMetadata getDescription() {\n    return this.description;\n  }\n\n  public ChangedSchema getSchema() {\n    return this.schema;\n  }\n\n  public ChangedContent getContent() {\n    return this.content;\n  }\n\n  public ChangedExtensions getExtensions() {\n    return this.extensions;\n  }\n\n  public ChangedHeader setRequired(final boolean required) {\n    this.required = required;\n    return this;\n  }\n\n  public ChangedHeader setDeprecated(final boolean deprecated) {\n    this.deprecated = deprecated;\n    return this;\n  }\n\n  public ChangedHeader setStyle(final boolean style) {\n    this.style = style;\n    return this;\n  }\n\n  public ChangedHeader setExplode(final boolean explode) {\n    this.explode = explode;\n    return this;\n  }\n\n  public ChangedHeader setDescription(final ChangedMetadata description) {\n    this.description = description;\n    return this;\n  }\n\n  public ChangedHeader setSchema(final ChangedSchema schema) {\n    this.schema = schema;\n    return this;\n  }\n\n  public ChangedHeader setContent(final ChangedContent content) {\n    this.content = content;\n    return this;\n  }\n\n  public ChangedHeader setExtensions(final ChangedExtensions extensions) {\n    this.extensions = extensions;\n    return this;\n  }\n\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    ChangedHeader that = (ChangedHeader) o;\n    return required == that.required\n        && deprecated == that.deprecated\n        && style == that.style\n        && explode == that.explode\n        && Objects.equals(oldHeader, that.oldHeader)\n        && Objects.equals(newHeader, that.newHeader)\n        && Objects.equals(context, that.context)\n        && Objects.equals(description, that.description)\n        && Objects.equals(schema, that.schema)\n        && Objects.equals(content, that.content)\n        && Objects.equals(extensions, that.extensions);\n  }\n\n  @Override\n  public int hashCode() {\n    return Objects.hash(\n        oldHeader,\n        newHeader,\n        context,\n        required,\n        deprecated,\n        style,\n        explode,\n        description,\n        schema,\n        content,\n        extensions);\n  }\n\n  @java.lang.Override\n  public java.lang.String toString() {\n    return \"ChangedHeader(oldHeader=\"\n        + this.getOldHeader()\n        + \", newHeader=\"\n        + this.getNewHeader()\n        + \", context=\"\n        + this.getContext()\n        + \", required=\"\n        + this.isRequired()\n        + \", deprecated=\"\n        + this.isDeprecated()\n        + \", style=\"\n        + this.isStyle()\n        + \", explode=\"\n        + this.isExplode()\n        + \", description=\"\n        + this.getDescription()\n        + \", schema=\"\n        + this.getSchema()\n        + \", content=\"\n        + this.getContent()\n        + \", extensions=\"\n        + this.getExtensions()\n        + \")\";\n  }\n}", "super_interfaces": ["ComposedChanged"], "fields": [{"attribute_expression": "private final Header oldHeader;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Header", "name": "oldHeader", "syntax_pass": true}, {"attribute_expression": "private final Header newHeader;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Header", "name": "newHeader", "syntax_pass": true}, {"attribute_expression": "private final DiffContext context;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "DiffContext", "name": "context", "syntax_pass": true}, {"attribute_expression": "private boolean required;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "boolean", "name": "required", "syntax_pass": true}, {"attribute_expression": "private boolean deprecated;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "boolean", "name": "deprecated", "syntax_pass": true}, {"attribute_expression": "private boolean style;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "boolean", "name": "style", "syntax_pass": true}, {"attribute_expression": "private boolean explode;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "boolean", "name": "explode", "syntax_pass": true}, {"attribute_expression": "private ChangedMetadata description;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "ChangedMetadata", "name": "description", "syntax_pass": true}, {"attribute_expression": "private ChangedSchema schema;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "ChangedSchema", "name": "schema", "syntax_pass": true}, {"attribute_expression": "private ChangedContent content;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "ChangedContent", "name": "content", "syntax_pass": true}, {"attribute_expression": "private ChangedExtensions extensions;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "ChangedExtensions", "name": "extensions", "syntax_pass": true}]}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameters.java.ChangedParameters", "name": "ChangedParameters", "file_path": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameters.java", "superclasses": "", "methods": ["[]ChangedParameters(List<Parameter>,List<Parameter>,DiffContext)", "[List<Changed>]getChangedElements()", "[DiffResult]isCoreChanged()", "[List<Parameter>]getOldParameterList()", "[List<Parameter>]getNewParameterList()", "[DiffContext]getContext()", "[List<Parameter>]getIncreased()", "[List<Parameter>]getMissing()", "[List<ChangedParameter>]getChanged()", "[ChangedParameters]setIncreased(List<Parameter>)", "[ChangedParameters]setMissing(List<Parameter>)", "[ChangedParameters]setChanged(List<ChangedParameter>)", "[boolean]equals(Object)", "[int]hashCode()", "[java.lang.String]toString()"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/model/ChangedParameters.java.ChangedParameters.[]ChangedParameters(List<Parameter>,List<Parameter>,DiffContext)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameters.java.ChangedParameters.[List<Changed>]getChangedElements()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameters.java.ChangedParameters.[DiffResult]isCoreChanged()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameters.java.ChangedParameters.[List<Parameter>]getOldParameterList()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameters.java.ChangedParameters.[List<Parameter>]getNewParameterList()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameters.java.ChangedParameters.[DiffContext]getContext()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameters.java.ChangedParameters.[List<Parameter>]getIncreased()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameters.java.ChangedParameters.[List<Parameter>]getMissing()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameters.java.ChangedParameters.[List<ChangedParameter>]getChanged()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameters.java.ChangedParameters.[ChangedParameters]setIncreased(List<Parameter>)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameters.java.ChangedParameters.[ChangedParameters]setMissing(List<Parameter>)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameters.java.ChangedParameters.[ChangedParameters]setChanged(List<ChangedParameter>)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameters.java.ChangedParameters.[boolean]equals(Object)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameters.java.ChangedParameters.[int]hashCode()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameters.java.ChangedParameters.[java.lang.String]toString()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class ChangedParameters implements ComposedChanged {\n  private final List<Parameter> oldParameterList;\n  private final List<Parameter> newParameterList;\n  private final DiffContext context;\n  private List<Parameter> increased;\n  private List<Parameter> missing;\n  private List<ChangedParameter> changed;\n\n  public ChangedParameters(\n      List<Parameter> oldParameterList, List<Parameter> newParameterList, DiffContext context) {\n    this.oldParameterList = oldParameterList;\n    this.newParameterList = newParameterList;\n    this.context = context;\n    this.increased = new ArrayList<>();\n    this.missing = new ArrayList<>();\n    this.changed = new ArrayList<>();\n  }\n\n  @Override\n  public List<Changed> getChangedElements() {\n    return new ArrayList<>(changed);\n  }\n\n  @Override\n  public DiffResult isCoreChanged() {\n    if (increased.isEmpty() && missing.isEmpty()) {\n      return DiffResult.NO_CHANGES;\n    }\n    if (!missing.isEmpty()) {\n      if (REQUEST_PARAMS_DECREASED.enabled(context)) {\n        return DiffResult.INCOMPATIBLE;\n      }\n    }\n    if (increased.stream().anyMatch(p -> p.getRequired() != null && p.getRequired())) {\n      if (REQUEST_PARAMS_REQUIRED_INCREASED.enabled(context)) {\n        return DiffResult.INCOMPATIBLE;\n      }\n    }\n    return DiffResult.COMPATIBLE;\n  }\n\n  public List<Parameter> getOldParameterList() {\n    return this.oldParameterList;\n  }\n\n  public List<Parameter> getNewParameterList() {\n    return this.newParameterList;\n  }\n\n  public DiffContext getContext() {\n    return this.context;\n  }\n\n  public List<Parameter> getIncreased() {\n    return this.increased;\n  }\n\n  public List<Parameter> getMissing() {\n    return this.missing;\n  }\n\n  public List<ChangedParameter> getChanged() {\n    return this.changed;\n  }\n\n  public ChangedParameters setIncreased(final List<Parameter> increased) {\n    this.increased = increased;\n    return this;\n  }\n\n  public ChangedParameters setMissing(final List<Parameter> missing) {\n    this.missing = missing;\n    return this;\n  }\n\n  public ChangedParameters setChanged(final List<ChangedParameter> changed) {\n    this.changed = changed;\n    return this;\n  }\n\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    ChangedParameters that = (ChangedParameters) o;\n    return Objects.equals(oldParameterList, that.oldParameterList)\n        && Objects.equals(newParameterList, that.newParameterList)\n        && Objects.equals(context, that.context)\n        && Objects.equals(increased, that.increased)\n        && Objects.equals(missing, that.missing)\n        && Objects.equals(changed, that.changed);\n  }\n\n  @Override\n  public int hashCode() {\n    return Objects.hash(oldParameterList, newParameterList, context, increased, missing, changed);\n  }\n\n  @java.lang.Override\n  public java.lang.String toString() {\n    return \"ChangedParameters(oldParameterList=\"\n        + this.getOldParameterList()\n        + \", newParameterList=\"\n        + this.getNewParameterList()\n        + \", context=\"\n        + this.getContext()\n        + \", increased=\"\n        + this.getIncreased()\n        + \", missing=\"\n        + this.getMissing()\n        + \", changed=\"\n        + this.getChanged()\n        + \")\";\n  }\n}", "super_interfaces": ["ComposedChanged"], "fields": [{"attribute_expression": "private final List<Parameter> oldParameterList;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "List<Parameter>", "name": "oldParameterList", "syntax_pass": true}, {"attribute_expression": "private final List<Parameter> newParameterList;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "List<Parameter>", "name": "newParameterList", "syntax_pass": true}, {"attribute_expression": "private final DiffContext context;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "DiffContext", "name": "context", "syntax_pass": true}, {"attribute_expression": "private List<Parameter> increased;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "List<Parameter>", "name": "increased", "syntax_pass": true}, {"attribute_expression": "private List<Parameter> missing;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "List<Parameter>", "name": "missing", "syntax_pass": true}, {"attribute_expression": "private List<ChangedParameter> changed;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "List<ChangedParameter>", "name": "changed", "syntax_pass": true}]}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedApiResponse.java.ChangedApiResponse", "name": "ChangedApiResponse", "file_path": "src/main/java/org/openapitools/openapidiff/core/model/ChangedApiResponse.java", "superclasses": "", "methods": ["[]ChangedApiResponse(ApiResponses,ApiResponses,DiffContext)", "[List<Changed>]getChangedElements()", "[DiffResult]isCoreChanged()", "[ApiResponses]getOldApiResponses()", "[ApiResponses]getNewApiResponses()", "[DiffContext]getContext()", "[Map<String, ApiResponse>]getIncreased()", "[Map<String, ApiResponse>]getMissing()", "[Map<String, ChangedResponse>]getChanged()", "[ChangedExtensions]getExtensions()", "[ChangedApiResponse]setIncreased(Map<String, ApiResponse>)", "[ChangedApiResponse]setMissing(Map<String, ApiResponse>)", "[ChangedApiResponse]setChanged(Map<String, ChangedResponse>)", "[ChangedApiResponse]setExtensions(ChangedExtensions)", "[boolean]equals(Object)", "[int]hashCode()", "[java.lang.String]toString()"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/model/ChangedApiResponse.java.ChangedApiResponse.[]ChangedApiResponse(ApiResponses,ApiResponses,DiffContext)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedApiResponse.java.ChangedApiResponse.[List<Changed>]getChangedElements()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedApiResponse.java.ChangedApiResponse.[DiffResult]isCoreChanged()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedApiResponse.java.ChangedApiResponse.[ApiResponses]getOldApiResponses()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedApiResponse.java.ChangedApiResponse.[ApiResponses]getNewApiResponses()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedApiResponse.java.ChangedApiResponse.[DiffContext]getContext()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedApiResponse.java.ChangedApiResponse.[Map<String, ApiResponse>]getIncreased()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedApiResponse.java.ChangedApiResponse.[Map<String, ApiResponse>]getMissing()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedApiResponse.java.ChangedApiResponse.[Map<String, ChangedResponse>]getChanged()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedApiResponse.java.ChangedApiResponse.[ChangedExtensions]getExtensions()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedApiResponse.java.ChangedApiResponse.[ChangedApiResponse]setIncreased(Map<String, ApiResponse>)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedApiResponse.java.ChangedApiResponse.[ChangedApiResponse]setMissing(Map<String, ApiResponse>)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedApiResponse.java.ChangedApiResponse.[ChangedApiResponse]setChanged(Map<String, ChangedResponse>)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedApiResponse.java.ChangedApiResponse.[ChangedApiResponse]setExtensions(ChangedExtensions)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedApiResponse.java.ChangedApiResponse.[boolean]equals(Object)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedApiResponse.java.ChangedApiResponse.[int]hashCode()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedApiResponse.java.ChangedApiResponse.[java.lang.String]toString()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class ChangedApiResponse implements ComposedChanged {\n  private final ApiResponses oldApiResponses;\n  private final ApiResponses newApiResponses;\n  private final DiffContext context;\n  private Map<String, ApiResponse> increased;\n  private Map<String, ApiResponse> missing;\n  private Map<String, ChangedResponse> changed;\n  private ChangedExtensions extensions;\n\n  public ChangedApiResponse(\n      ApiResponses oldApiResponses, ApiResponses newApiResponses, DiffContext context) {\n    this.oldApiResponses = oldApiResponses;\n    this.newApiResponses = newApiResponses;\n    this.context = context;\n    this.missing = new LinkedHashMap<>();\n    this.increased = new LinkedHashMap<>();\n    this.changed = new LinkedHashMap<>();\n  }\n\n  @Override\n  public List<Changed> getChangedElements() {\n    return Stream.concat(changed.values().stream(), Stream.of(extensions))\n        .collect(Collectors.toList());\n  }\n\n  @Override\n  public DiffResult isCoreChanged() {\n    if (increased.isEmpty() && missing.isEmpty()) {\n      return DiffResult.NO_CHANGES;\n    }\n    if (!missing.isEmpty()) {\n      if (RESPONSE_RESPONSES_DECREASED.enabled(context)) {\n        return DiffResult.INCOMPATIBLE;\n      }\n    }\n    return DiffResult.COMPATIBLE;\n  }\n\n  public ApiResponses getOldApiResponses() {\n    return this.oldApiResponses;\n  }\n\n  public ApiResponses getNewApiResponses() {\n    return this.newApiResponses;\n  }\n\n  public DiffContext getContext() {\n    return this.context;\n  }\n\n  public Map<String, ApiResponse> getIncreased() {\n    return this.increased;\n  }\n\n  public Map<String, ApiResponse> getMissing() {\n    return this.missing;\n  }\n\n  public Map<String, ChangedResponse> getChanged() {\n    return this.changed;\n  }\n\n  public ChangedExtensions getExtensions() {\n    return this.extensions;\n  }\n\n  public ChangedApiResponse setIncreased(final Map<String, ApiResponse> increased) {\n    this.increased = increased;\n    return this;\n  }\n\n  public ChangedApiResponse setMissing(final Map<String, ApiResponse> missing) {\n    this.missing = missing;\n    return this;\n  }\n\n  public ChangedApiResponse setChanged(final Map<String, ChangedResponse> changed) {\n    this.changed = changed;\n    return this;\n  }\n\n  public ChangedApiResponse setExtensions(final ChangedExtensions extensions) {\n    this.extensions = extensions;\n    return this;\n  }\n\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    ChangedApiResponse that = (ChangedApiResponse) o;\n    return Objects.equals(oldApiResponses, that.oldApiResponses)\n        && Objects.equals(newApiResponses, that.newApiResponses)\n        && Objects.equals(context, that.context)\n        && Objects.equals(increased, that.increased)\n        && Objects.equals(missing, that.missing)\n        && Objects.equals(changed, that.changed)\n        && Objects.equals(extensions, that.extensions);\n  }\n\n  @Override\n  public int hashCode() {\n    return Objects.hash(\n        oldApiResponses, newApiResponses, context, increased, missing, changed, extensions);\n  }\n\n  @java.lang.Override\n  public java.lang.String toString() {\n    return \"ChangedApiResponse(oldApiResponses=\"\n        + this.getOldApiResponses()\n        + \", newApiResponses=\"\n        + this.getNewApiResponses()\n        + \", context=\"\n        + this.getContext()\n        + \", increased=\"\n        + this.getIncreased()\n        + \", missing=\"\n        + this.getMissing()\n        + \", changed=\"\n        + this.getChanged()\n        + \", extensions=\"\n        + this.getExtensions()\n        + \")\";\n  }\n}", "super_interfaces": ["ComposedChanged"], "fields": [{"attribute_expression": "private final ApiResponses oldApiResponses;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "ApiResponses", "name": "oldApiResponses", "syntax_pass": true}, {"attribute_expression": "private final ApiResponses newApiResponses;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "ApiResponses", "name": "newApiResponses", "syntax_pass": true}, {"attribute_expression": "private final DiffContext context;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "DiffContext", "name": "context", "syntax_pass": true}, {"attribute_expression": "private Map<String, ApiResponse> increased;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Map<String, ApiResponse>", "name": "increased", "syntax_pass": true}, {"attribute_expression": "private Map<String, ApiResponse> missing;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Map<String, ApiResponse>", "name": "missing", "syntax_pass": true}, {"attribute_expression": "private Map<String, ChangedResponse> changed;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Map<String, ChangedResponse>", "name": "changed", "syntax_pass": true}, {"attribute_expression": "private ChangedExtensions extensions;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "ChangedExtensions", "name": "extensions", "syntax_pass": true}]}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeaders.java.ChangedHeaders", "name": "ChangedHeaders", "file_path": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeaders.java", "superclasses": "", "methods": ["[]ChangedHeaders(Map<String, Header>,Map<String, Header>,DiffContext)", "[List<Changed>]getChangedElements()", "[DiffResult]isCoreChanged()", "[Map<String, Header>]getOldHeaders()", "[Map<String, Header>]getNewHeaders()", "[DiffContext]getContext()", "[Map<String, Header>]getIncreased()", "[Map<String, Header>]getMissing()", "[Map<String, ChangedHeader>]getChanged()", "[ChangedHeaders]setIncreased(Map<String, Header>)", "[ChangedHeaders]setMissing(Map<String, Header>)", "[ChangedHeaders]setChanged(Map<String, ChangedHeader>)", "[boolean]equals(Object)", "[int]hashCode()", "[java.lang.String]toString()"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/model/ChangedHeaders.java.ChangedHeaders.[]ChangedHeaders(Map<String, Header>,Map<String, Header>,DiffContext)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeaders.java.ChangedHeaders.[List<Changed>]getChangedElements()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeaders.java.ChangedHeaders.[DiffResult]isCoreChanged()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeaders.java.ChangedHeaders.[Map<String, Header>]getOldHeaders()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeaders.java.ChangedHeaders.[Map<String, Header>]getNewHeaders()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeaders.java.ChangedHeaders.[DiffContext]getContext()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeaders.java.ChangedHeaders.[Map<String, Header>]getIncreased()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeaders.java.ChangedHeaders.[Map<String, Header>]getMissing()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeaders.java.ChangedHeaders.[Map<String, ChangedHeader>]getChanged()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeaders.java.ChangedHeaders.[ChangedHeaders]setIncreased(Map<String, Header>)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeaders.java.ChangedHeaders.[ChangedHeaders]setMissing(Map<String, Header>)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeaders.java.ChangedHeaders.[ChangedHeaders]setChanged(Map<String, ChangedHeader>)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeaders.java.ChangedHeaders.[boolean]equals(Object)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeaders.java.ChangedHeaders.[int]hashCode()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeaders.java.ChangedHeaders.[java.lang.String]toString()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class ChangedHeaders implements ComposedChanged {\n  private final Map<String, Header> oldHeaders;\n  private final Map<String, Header> newHeaders;\n  private final DiffContext context;\n  private Map<String, Header> increased;\n  private Map<String, Header> missing;\n  private Map<String, ChangedHeader> changed;\n\n  public ChangedHeaders(\n      Map<String, Header> oldHeaders, Map<String, Header> newHeaders, DiffContext context) {\n    this.oldHeaders = oldHeaders;\n    this.newHeaders = newHeaders;\n    this.context = context;\n  }\n\n  @Override\n  public List<Changed> getChangedElements() {\n    return new ArrayList<>(changed.values());\n  }\n\n  @Override\n  public DiffResult isCoreChanged() {\n    if (increased.isEmpty() && missing.isEmpty()) {\n      return DiffResult.NO_CHANGES;\n    }\n    if (!missing.isEmpty()) {\n      if (RESPONSE_HEADERS_DECREASED.enabled(context)) {\n        return DiffResult.INCOMPATIBLE;\n      }\n    }\n    return DiffResult.COMPATIBLE;\n  }\n\n  public Map<String, Header> getOldHeaders() {\n    return this.oldHeaders;\n  }\n\n  public Map<String, Header> getNewHeaders() {\n    return this.newHeaders;\n  }\n\n  public DiffContext getContext() {\n    return this.context;\n  }\n\n  public Map<String, Header> getIncreased() {\n    return this.increased;\n  }\n\n  public Map<String, Header> getMissing() {\n    return this.missing;\n  }\n\n  public Map<String, ChangedHeader> getChanged() {\n    return this.changed;\n  }\n\n  public ChangedHeaders setIncreased(final Map<String, Header> increased) {\n    this.increased = increased;\n    return this;\n  }\n\n  public ChangedHeaders setMissing(final Map<String, Header> missing) {\n    this.missing = missing;\n    return this;\n  }\n\n  public ChangedHeaders setChanged(final Map<String, ChangedHeader> changed) {\n    this.changed = changed;\n    return this;\n  }\n\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    ChangedHeaders that = (ChangedHeaders) o;\n    return Objects.equals(oldHeaders, that.oldHeaders)\n        && Objects.equals(newHeaders, that.newHeaders)\n        && Objects.equals(context, that.context)\n        && Objects.equals(increased, that.increased)\n        && Objects.equals(missing, that.missing)\n        && Objects.equals(changed, that.changed);\n  }\n\n  @Override\n  public int hashCode() {\n    return Objects.hash(oldHeaders, newHeaders, context, increased, missing, changed);\n  }\n\n  @java.lang.Override\n  public java.lang.String toString() {\n    return \"ChangedHeaders(oldHeaders=\"\n        + this.getOldHeaders()\n        + \", newHeaders=\"\n        + this.getNewHeaders()\n        + \", context=\"\n        + this.getContext()\n        + \", increased=\"\n        + this.getIncreased()\n        + \", missing=\"\n        + this.getMissing()\n        + \", changed=\"\n        + this.getChanged()\n        + \")\";\n  }\n}", "super_interfaces": ["ComposedChanged"], "fields": [{"attribute_expression": "private final Map<String, Header> oldHeaders;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Map<String, Header>", "name": "oldHeaders", "syntax_pass": true}, {"attribute_expression": "private final Map<String, Header> newHeaders;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Map<String, Header>", "name": "newHeaders", "syntax_pass": true}, {"attribute_expression": "private final DiffContext context;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "DiffContext", "name": "context", "syntax_pass": true}, {"attribute_expression": "private Map<String, Header> increased;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Map<String, Header>", "name": "increased", "syntax_pass": true}, {"attribute_expression": "private Map<String, Header> missing;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Map<String, Header>", "name": "missing", "syntax_pass": true}, {"attribute_expression": "private Map<String, ChangedHeader> changed;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Map<String, ChangedHeader>", "name": "changed", "syntax_pass": true}]}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows.java.ChangedOAuthFlows", "name": "ChangedOAuthFlows", "file_path": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows.java", "superclasses": "", "methods": ["[]ChangedOAuthFlows(OAuthFlows,OAuthFlows)", "[List<Changed>]getChangedElements()", "[DiffResult]isCoreChanged()", "[OAuthFlows]getOldOAuthFlows()", "[OAuthFlows]getNewOAuthFlows()", "[ChangedOAuthFlow]getImplicitOAuthFlow()", "[ChangedOAuthFlow]getPasswordOAuthFlow()", "[ChangedOAuthFlow]getClientCredentialOAuthFlow()", "[ChangedOAuthFlow]getAuthorizationCodeOAuthFlow()", "[ChangedExtensions]getExtensions()", "[ChangedOAuthFlows]setImplicitOAuthFlow(ChangedOAuthFlow)", "[ChangedOAuthFlows]setPasswordOAuthFlow(ChangedOAuthFlow)", "[ChangedOAuthFlows]setClientCredentialOAuthFlow(ChangedOAuthFlow)", "[ChangedOAuthFlows]setAuthorizationCodeOAuthFlow(ChangedOAuthFlow)", "[ChangedOAuthFlows]setExtensions(ChangedExtensions)", "[boolean]equals(Object)", "[int]hashCode()", "[java.lang.String]toString()"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows.java.ChangedOAuthFlows.[]ChangedOAuthFlows(OAuthFlows,OAuthFlows)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows.java.ChangedOAuthFlows.[List<Changed>]getChangedElements()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows.java.ChangedOAuthFlows.[DiffResult]isCoreChanged()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows.java.ChangedOAuthFlows.[OAuthFlows]getOldOAuthFlows()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows.java.ChangedOAuthFlows.[OAuthFlows]getNewOAuthFlows()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows.java.ChangedOAuthFlows.[ChangedOAuthFlow]getImplicitOAuthFlow()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows.java.ChangedOAuthFlows.[ChangedOAuthFlow]getPasswordOAuthFlow()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows.java.ChangedOAuthFlows.[ChangedOAuthFlow]getClientCredentialOAuthFlow()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows.java.ChangedOAuthFlows.[ChangedOAuthFlow]getAuthorizationCodeOAuthFlow()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows.java.ChangedOAuthFlows.[ChangedExtensions]getExtensions()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows.java.ChangedOAuthFlows.[ChangedOAuthFlows]setImplicitOAuthFlow(ChangedOAuthFlow)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows.java.ChangedOAuthFlows.[ChangedOAuthFlows]setPasswordOAuthFlow(ChangedOAuthFlow)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows.java.ChangedOAuthFlows.[ChangedOAuthFlows]setClientCredentialOAuthFlow(ChangedOAuthFlow)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows.java.ChangedOAuthFlows.[ChangedOAuthFlows]setAuthorizationCodeOAuthFlow(ChangedOAuthFlow)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows.java.ChangedOAuthFlows.[ChangedOAuthFlows]setExtensions(ChangedExtensions)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows.java.ChangedOAuthFlows.[boolean]equals(Object)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows.java.ChangedOAuthFlows.[int]hashCode()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows.java.ChangedOAuthFlows.[java.lang.String]toString()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class ChangedOAuthFlows implements ComposedChanged {\n  private final OAuthFlows oldOAuthFlows;\n  private final OAuthFlows newOAuthFlows;\n  private ChangedOAuthFlow implicitOAuthFlow;\n  private ChangedOAuthFlow passwordOAuthFlow;\n  private ChangedOAuthFlow clientCredentialOAuthFlow;\n  private ChangedOAuthFlow authorizationCodeOAuthFlow;\n  private ChangedExtensions extensions;\n\n  public ChangedOAuthFlows(OAuthFlows oldOAuthFlows, OAuthFlows newOAuthFlows) {\n    this.oldOAuthFlows = oldOAuthFlows;\n    this.newOAuthFlows = newOAuthFlows;\n  }\n\n  @Override\n  public List<Changed> getChangedElements() {\n    return Arrays.asList(\n        implicitOAuthFlow,\n        passwordOAuthFlow,\n        clientCredentialOAuthFlow,\n        authorizationCodeOAuthFlow,\n        extensions);\n  }\n\n  @Override\n  public DiffResult isCoreChanged() {\n    return DiffResult.NO_CHANGES;\n  }\n\n  public OAuthFlows getOldOAuthFlows() {\n    return this.oldOAuthFlows;\n  }\n\n  public OAuthFlows getNewOAuthFlows() {\n    return this.newOAuthFlows;\n  }\n\n  public ChangedOAuthFlow getImplicitOAuthFlow() {\n    return this.implicitOAuthFlow;\n  }\n\n  public ChangedOAuthFlow getPasswordOAuthFlow() {\n    return this.passwordOAuthFlow;\n  }\n\n  public ChangedOAuthFlow getClientCredentialOAuthFlow() {\n    return this.clientCredentialOAuthFlow;\n  }\n\n  public ChangedOAuthFlow getAuthorizationCodeOAuthFlow() {\n    return this.authorizationCodeOAuthFlow;\n  }\n\n  public ChangedExtensions getExtensions() {\n    return this.extensions;\n  }\n\n  public ChangedOAuthFlows setImplicitOAuthFlow(final ChangedOAuthFlow implicitOAuthFlow) {\n    this.implicitOAuthFlow = implicitOAuthFlow;\n    return this;\n  }\n\n  public ChangedOAuthFlows setPasswordOAuthFlow(final ChangedOAuthFlow passwordOAuthFlow) {\n    this.passwordOAuthFlow = passwordOAuthFlow;\n    return this;\n  }\n\n  public ChangedOAuthFlows setClientCredentialOAuthFlow(\n      final ChangedOAuthFlow clientCredentialOAuthFlow) {\n    this.clientCredentialOAuthFlow = clientCredentialOAuthFlow;\n    return this;\n  }\n\n  public ChangedOAuthFlows setAuthorizationCodeOAuthFlow(\n      final ChangedOAuthFlow authorizationCodeOAuthFlow) {\n    this.authorizationCodeOAuthFlow = authorizationCodeOAuthFlow;\n    return this;\n  }\n\n  public ChangedOAuthFlows setExtensions(final ChangedExtensions extensions) {\n    this.extensions = extensions;\n    return this;\n  }\n\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    ChangedOAuthFlows that = (ChangedOAuthFlows) o;\n    return Objects.equals(oldOAuthFlows, that.oldOAuthFlows)\n        && Objects.equals(newOAuthFlows, that.newOAuthFlows)\n        && Objects.equals(implicitOAuthFlow, that.implicitOAuthFlow)\n        && Objects.equals(passwordOAuthFlow, that.passwordOAuthFlow)\n        && Objects.equals(clientCredentialOAuthFlow, that.clientCredentialOAuthFlow)\n        && Objects.equals(authorizationCodeOAuthFlow, that.authorizationCodeOAuthFlow)\n        && Objects.equals(extensions, that.extensions);\n  }\n\n  @Override\n  public int hashCode() {\n    return Objects.hash(\n        oldOAuthFlows,\n        newOAuthFlows,\n        implicitOAuthFlow,\n        passwordOAuthFlow,\n        clientCredentialOAuthFlow,\n        authorizationCodeOAuthFlow,\n        extensions);\n  }\n\n  @java.lang.Override\n  public java.lang.String toString() {\n    return \"ChangedOAuthFlows(oldOAuthFlows=\"\n        + this.getOldOAuthFlows()\n        + \", newOAuthFlows=\"\n        + this.getNewOAuthFlows()\n        + \", implicitOAuthFlow=\"\n        + this.getImplicitOAuthFlow()\n        + \", passwordOAuthFlow=\"\n        + this.getPasswordOAuthFlow()\n        + \", clientCredentialOAuthFlow=\"\n        + this.getClientCredentialOAuthFlow()\n        + \", authorizationCodeOAuthFlow=\"\n        + this.getAuthorizationCodeOAuthFlow()\n        + \", extensions=\"\n        + this.getExtensions()\n        + \")\";\n  }\n}", "super_interfaces": ["ComposedChanged"], "fields": [{"attribute_expression": "private final OAuthFlows oldOAuthFlows;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "OAuthFlows", "name": "oldOAuthFlows", "syntax_pass": true}, {"attribute_expression": "private final OAuthFlows newOAuthFlows;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "OAuthFlows", "name": "newOAuthFlows", "syntax_pass": true}, {"attribute_expression": "private ChangedOAuthFlow implicitOAuthFlow;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "ChangedOAuthFlow", "name": "implicitOAuthFlow", "syntax_pass": true}, {"attribute_expression": "private ChangedOAuthFlow passwordOAuthFlow;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "ChangedOAuthFlow", "name": "passwordOAuthFlow", "syntax_pass": true}, {"attribute_expression": "private ChangedOAuthFlow clientCredentialOAuthFlow;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "ChangedOAuthFlow", "name": "clientCredentialOAuthFlow", "syntax_pass": true}, {"attribute_expression": "private ChangedOAuthFlow authorizationCodeOAuthFlow;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "ChangedOAuthFlow", "name": "authorizationCodeOAuthFlow", "syntax_pass": true}, {"attribute_expression": "private ChangedExtensions extensions;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "ChangedExtensions", "name": "extensions", "syntax_pass": true}]}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecuritySchemeScopes.java.ChangedSecuritySchemeScopes", "name": "ChangedSecuritySchemeScopes", "file_path": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecuritySchemeScopes.java", "superclasses": "", "methods": ["[]ChangedSecuritySchemeScopes(List<String>,List<String>)", "[DiffResult]isItemsChanged()"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/model/ChangedSecuritySchemeScopes.java.ChangedSecuritySchemeScopes.[]ChangedSecuritySchemeScopes(List<String>,List<String>)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecuritySchemeScopes.java.ChangedSecuritySchemeScopes.[DiffResult]isItemsChanged()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class ChangedSecuritySchemeScopes extends ChangedList<String> {\n\n  public ChangedSecuritySchemeScopes(List<String> oldValue, List<String> newValue) {\n    super(oldValue, newValue, null);\n  }\n\n  @Override\n  public DiffResult isItemsChanged() {\n    return DiffResult.INCOMPATIBLE;\n  }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation", "name": "ChangedOperation", "file_path": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java", "superclasses": "", "methods": ["[]ChangedOperation(String,PathItem.HttpMethod,Operation,Operation)", "[List<Changed>]getChangedElements()", "[DiffResult]isCoreChanged()", "[DiffResult]resultApiResponses()", "[DiffResult]resultRequestBody()", "[DiffResult]resultSecurityRequirements()", "[Operation]getOldOperation()", "[Operation]getNewOperation()", "[String]getPathUrl()", "[PathItem.HttpMethod]getHttpMethod()", "[ChangedMetadata]getSummary()", "[ChangedMetadata]getDescription()", "[ChangedMetadata]getOperationId()", "[boolean]isDeprecated()", "[ChangedParameters]getParameters()", "[ChangedRequestBody]getRequestBody()", "[ChangedApiResponse]getApiResponses()", "[ChangedSecurityRequirements]getSecurityRequirements()", "[ChangedExtensions]getExtensions()", "[ChangedOperation]setOldOperation(Operation)", "[ChangedOperation]setNewOperation(Operation)", "[ChangedOperation]setPathUrl(String)", "[ChangedOperation]setHttpMethod(PathItem.HttpMethod)", "[ChangedOperation]setSummary(ChangedMetadata)", "[ChangedOperation]setDescription(ChangedMetadata)", "[ChangedOperation]setOperationId(ChangedMetadata)", "[ChangedOperation]setDeprecated(boolean)", "[ChangedOperation]setParameters(ChangedParameters)", "[ChangedOperation]setRequestBody(ChangedRequestBody)", "[ChangedOperation]setApiResponses(ChangedApiResponse)", "[ChangedOperation]setSecurityRequirements(ChangedSecurityRequirements)", "[ChangedOperation]setExtensions(ChangedExtensions)", "[boolean]equals(Object)", "[int]hashCode()", "[java.lang.String]toString()"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation.[]ChangedOperation(String,PathItem.HttpMethod,Operation,Operation)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation.[List<Changed>]getChangedElements()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation.[DiffResult]isCoreChanged()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation.[DiffResult]resultApiResponses()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation.[DiffResult]resultRequestBody()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation.[DiffResult]resultSecurityRequirements()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation.[Operation]getOldOperation()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation.[Operation]getNewOperation()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation.[String]getPathUrl()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation.[PathItem.HttpMethod]getHttpMethod()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation.[ChangedMetadata]getSummary()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation.[ChangedMetadata]getDescription()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation.[ChangedMetadata]getOperationId()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation.[boolean]isDeprecated()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation.[ChangedParameters]getParameters()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation.[ChangedRequestBody]getRequestBody()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation.[ChangedApiResponse]getApiResponses()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation.[ChangedSecurityRequirements]getSecurityRequirements()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation.[ChangedExtensions]getExtensions()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation.[ChangedOperation]setOldOperation(Operation)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation.[ChangedOperation]setNewOperation(Operation)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation.[ChangedOperation]setPathUrl(String)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation.[ChangedOperation]setHttpMethod(PathItem.HttpMethod)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation.[ChangedOperation]setSummary(ChangedMetadata)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation.[ChangedOperation]setDescription(ChangedMetadata)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation.[ChangedOperation]setOperationId(ChangedMetadata)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation.[ChangedOperation]setDeprecated(boolean)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation.[ChangedOperation]setParameters(ChangedParameters)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation.[ChangedOperation]setRequestBody(ChangedRequestBody)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation.[ChangedOperation]setApiResponses(ChangedApiResponse)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation.[ChangedOperation]setSecurityRequirements(ChangedSecurityRequirements)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation.[ChangedOperation]setExtensions(ChangedExtensions)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation.[boolean]equals(Object)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation.[int]hashCode()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation.[java.lang.String]toString()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class ChangedOperation implements ComposedChanged {\n  private Operation oldOperation;\n  private Operation newOperation;\n  private String pathUrl;\n  private PathItem.HttpMethod httpMethod;\n  private ChangedMetadata summary;\n  private ChangedMetadata description;\n  private ChangedMetadata operationId;\n  private boolean deprecated;\n  private ChangedParameters parameters;\n  private ChangedRequestBody requestBody;\n  private ChangedApiResponse apiResponses;\n  private ChangedSecurityRequirements securityRequirements;\n  private ChangedExtensions extensions;\n\n  public ChangedOperation(\n      String pathUrl,\n      PathItem.HttpMethod httpMethod,\n      Operation oldOperation,\n      Operation newOperation) {\n    this.httpMethod = httpMethod;\n    this.pathUrl = pathUrl;\n    this.oldOperation = oldOperation;\n    this.newOperation = newOperation;\n  }\n\n  @Override\n  public List<Changed> getChangedElements() {\n    return Arrays.asList(\n        summary,\n        description,\n        operationId,\n        parameters,\n        requestBody,\n        apiResponses,\n        securityRequirements,\n        extensions);\n  }\n\n  @Override\n  public DiffResult isCoreChanged() {\n    // TODO BETTER HANDLING FOR DEPRECIATION\n    if (deprecated) {\n      return DiffResult.COMPATIBLE;\n    }\n    return DiffResult.NO_CHANGES;\n  }\n\n  public DiffResult resultApiResponses() {\n    return result(apiResponses);\n  }\n\n  public DiffResult resultRequestBody() {\n    return requestBody == null ? DiffResult.NO_CHANGES : requestBody.isChanged();\n  }\n\n  public DiffResult resultSecurityRequirements() {\n    return securityRequirements == null ? DiffResult.NO_CHANGES : securityRequirements.isChanged();\n  }\n\n  public Operation getOldOperation() {\n    return this.oldOperation;\n  }\n\n  public Operation getNewOperation() {\n    return this.newOperation;\n  }\n\n  public String getPathUrl() {\n    return this.pathUrl;\n  }\n\n  public PathItem.HttpMethod getHttpMethod() {\n    return this.httpMethod;\n  }\n\n  public ChangedMetadata getSummary() {\n    return this.summary;\n  }\n\n  public ChangedMetadata getDescription() {\n    return this.description;\n  }\n\n  public ChangedMetadata getOperationId() {\n    return this.operationId;\n  }\n\n  public boolean isDeprecated() {\n    return this.deprecated;\n  }\n\n  public ChangedParameters getParameters() {\n    return this.parameters;\n  }\n\n  public ChangedRequestBody getRequestBody() {\n    return this.requestBody;\n  }\n\n  public ChangedApiResponse getApiResponses() {\n    return this.apiResponses;\n  }\n\n  public ChangedSecurityRequirements getSecurityRequirements() {\n    return this.securityRequirements;\n  }\n\n  public ChangedExtensions getExtensions() {\n    return this.extensions;\n  }\n\n  public ChangedOperation setOldOperation(final Operation oldOperation) {\n    this.oldOperation = oldOperation;\n    return this;\n  }\n\n  public ChangedOperation setNewOperation(final Operation newOperation) {\n    this.newOperation = newOperation;\n    return this;\n  }\n\n  public ChangedOperation setPathUrl(final String pathUrl) {\n    this.pathUrl = pathUrl;\n    return this;\n  }\n\n  public ChangedOperation setHttpMethod(final PathItem.HttpMethod httpMethod) {\n    this.httpMethod = httpMethod;\n    return this;\n  }\n\n  public ChangedOperation setSummary(final ChangedMetadata summary) {\n    this.summary = summary;\n    return this;\n  }\n\n  public ChangedOperation setDescription(final ChangedMetadata description) {\n    this.description = description;\n    return this;\n  }\n\n  public ChangedOperation setOperationId(final ChangedMetadata operationId) {\n    this.operationId = operationId;\n    return this;\n  }\n\n  public ChangedOperation setDeprecated(final boolean deprecated) {\n    this.deprecated = deprecated;\n    return this;\n  }\n\n  public ChangedOperation setParameters(final ChangedParameters parameters) {\n    this.parameters = parameters;\n    return this;\n  }\n\n  public ChangedOperation setRequestBody(final ChangedRequestBody requestBody) {\n    this.requestBody = requestBody;\n    return this;\n  }\n\n  public ChangedOperation setApiResponses(final ChangedApiResponse apiResponses) {\n    this.apiResponses = apiResponses;\n    return this;\n  }\n\n  public ChangedOperation setSecurityRequirements(\n      final ChangedSecurityRequirements securityRequirements) {\n    this.securityRequirements = securityRequirements;\n    return this;\n  }\n\n  public ChangedOperation setExtensions(final ChangedExtensions extensions) {\n    this.extensions = extensions;\n    return this;\n  }\n\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    ChangedOperation that = (ChangedOperation) o;\n    return deprecated == that.deprecated\n        && Objects.equals(oldOperation, that.oldOperation)\n        && Objects.equals(newOperation, that.newOperation)\n        && Objects.equals(pathUrl, that.pathUrl)\n        && httpMethod == that.httpMethod\n        && Objects.equals(summary, that.summary)\n        && Objects.equals(description, that.description)\n        && Objects.equals(operationId, that.operationId)\n        && Objects.equals(parameters, that.parameters)\n        && Objects.equals(requestBody, that.requestBody)\n        && Objects.equals(apiResponses, that.apiResponses)\n        && Objects.equals(securityRequirements, that.securityRequirements)\n        && Objects.equals(extensions, that.extensions);\n  }\n\n  @Override\n  public int hashCode() {\n    return Objects.hash(\n        oldOperation,\n        newOperation,\n        pathUrl,\n        httpMethod,\n        summary,\n        description,\n        operationId,\n        deprecated,\n        parameters,\n        requestBody,\n        apiResponses,\n        securityRequirements,\n        extensions);\n  }\n\n  @java.lang.Override\n  public java.lang.String toString() {\n    return \"ChangedOperation(oldOperation=\"\n        + this.getOldOperation()\n        + \", newOperation=\"\n        + this.getNewOperation()\n        + \", pathUrl=\"\n        + this.getPathUrl()\n        + \", httpMethod=\"\n        + this.getHttpMethod()\n        + \", summary=\"\n        + this.getSummary()\n        + \", description=\"\n        + this.getDescription()\n        + \", operationId=\"\n        + this.getOperationId()\n        + \", deprecated=\"\n        + this.isDeprecated()\n        + \", parameters=\"\n        + this.getParameters()\n        + \", requestBody=\"\n        + this.getRequestBody()\n        + \", apiResponses=\"\n        + this.getApiResponses()\n        + \", securityRequirements=\"\n        + this.getSecurityRequirements()\n        + \", extensions=\"\n        + this.getExtensions()\n        + \")\";\n  }\n}", "super_interfaces": ["ComposedChanged"], "fields": [{"attribute_expression": "private Operation oldOperation;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Operation", "name": "oldOperation", "syntax_pass": true}, {"attribute_expression": "private Operation newOperation;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Operation", "name": "newOperation", "syntax_pass": true}, {"attribute_expression": "private String pathUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "pathUrl", "syntax_pass": true}, {"attribute_expression": "private PathItem.HttpMethod httpMethod;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "PathItem.HttpMethod", "name": "httpMethod", "syntax_pass": true}, {"attribute_expression": "private ChangedMetadata summary;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "ChangedMetadata", "name": "summary", "syntax_pass": true}, {"attribute_expression": "private ChangedMetadata description;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "ChangedMetadata", "name": "description", "syntax_pass": true}, {"attribute_expression": "private ChangedMetadata operationId;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "ChangedMetadata", "name": "operationId", "syntax_pass": true}, {"attribute_expression": "private boolean deprecated;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "boolean", "name": "deprecated", "syntax_pass": true}, {"attribute_expression": "private ChangedParameters parameters;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "ChangedParameters", "name": "parameters", "syntax_pass": true}, {"attribute_expression": "private ChangedRequestBody requestBody;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "ChangedRequestBody", "name": "requestBody", "syntax_pass": true}, {"attribute_expression": "private ChangedApiResponse apiResponses;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "ChangedApiResponse", "name": "apiResponses", "syntax_pass": true}, {"attribute_expression": "private ChangedSecurityRequirements securityRequirements;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "ChangedSecurityRequirements", "name": "securityRequirements", "syntax_pass": true}, {"attribute_expression": "private ChangedExtensions extensions;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "ChangedExtensions", "name": "extensions", "syntax_pass": true}]}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedMetadata.java.ChangedMetadata", "name": "ChangedMetadata", "file_path": "src/main/java/org/openapitools/openapidiff/core/model/ChangedMetadata.java", "superclasses": "", "methods": ["[DiffResult]isChanged()", "[String]getLeft()", "[String]getRight()", "[ChangedMetadata]setLeft(String)", "[ChangedMetadata]setRight(String)", "[boolean]equals(Object)", "[int]hashCode()", "[java.lang.String]toString()"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/model/ChangedMetadata.java.ChangedMetadata.[DiffResult]isChanged()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedMetadata.java.ChangedMetadata.[String]getLeft()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedMetadata.java.ChangedMetadata.[String]getRight()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedMetadata.java.ChangedMetadata.[ChangedMetadata]setLeft(String)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedMetadata.java.ChangedMetadata.[ChangedMetadata]setRight(String)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedMetadata.java.ChangedMetadata.[boolean]equals(Object)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedMetadata.java.ChangedMetadata.[int]hashCode()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedMetadata.java.ChangedMetadata.[java.lang.String]toString()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class ChangedMetadata implements Changed {\n  private String left;\n  private String right;\n\n  @Override\n  public DiffResult isChanged() {\n    if (Objects.equals(left, right)) {\n      return DiffResult.NO_CHANGES;\n    }\n    return DiffResult.METADATA;\n  }\n\n  public String getLeft() {\n    return this.left;\n  }\n\n  public String getRight() {\n    return this.right;\n  }\n\n  public ChangedMetadata setLeft(final String left) {\n    this.left = left;\n    return this;\n  }\n\n  public ChangedMetadata setRight(final String right) {\n    this.right = right;\n    return this;\n  }\n\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    ChangedMetadata that = (ChangedMetadata) o;\n    return Objects.equals(left, that.left) && Objects.equals(right, that.right);\n  }\n\n  @Override\n  public int hashCode() {\n    return Objects.hash(left, right);\n  }\n\n  @java.lang.Override\n  public java.lang.String toString() {\n    return \"ChangedMetadata(left=\" + this.getLeft() + \", right=\" + this.getRight() + \")\";\n  }\n}", "super_interfaces": ["Changed"], "fields": [{"attribute_expression": "private String left;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "left", "syntax_pass": true}, {"attribute_expression": "private String right;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "right", "syntax_pass": true}]}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme", "name": "ChangedSecurityScheme", "file_path": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java", "superclasses": "", "methods": ["[]ChangedSecurityScheme(SecurityScheme,SecurityScheme,DiffContext)", "[List<Changed>]getChangedElements()", "[DiffResult]isCoreChanged()", "[SecurityScheme]getOldSecurityScheme()", "[SecurityScheme]getNewSecurityScheme()", "[boolean]isChangedType()", "[boolean]isChangedIn()", "[boolean]isChangedScheme()", "[boolean]isChangedBearerFormat()", "[boolean]isChangedOpenIdConnectUrl()", "[ChangedSecuritySchemeScopes]getChangedScopes()", "[ChangedMetadata]getDescription()", "[ChangedOAuthFlows]getOAuthFlows()", "[ChangedExtensions]getExtensions()", "[ChangedSecurityScheme]setOldSecurityScheme(SecurityScheme)", "[ChangedSecurityScheme]setNewSecurityScheme(SecurityScheme)", "[ChangedSecurityScheme]setChangedType(boolean)", "[ChangedSecurityScheme]setChangedIn(boolean)", "[ChangedSecurityScheme]setChangedScheme(boolean)", "[ChangedSecurityScheme]setChangedBearerFormat(boolean)", "[ChangedSecurityScheme]setChangedOpenIdConnectUrl(boolean)", "[ChangedSecurityScheme]setChangedScopes(ChangedSecuritySchemeScopes)", "[ChangedSecurityScheme]setDescription(ChangedMetadata)", "[ChangedSecurityScheme]setOAuthFlows(ChangedOAuthFlows)", "[ChangedSecurityScheme]setExtensions(ChangedExtensions)", "[boolean]equals(Object)", "[int]hashCode()", "[java.lang.String]toString()"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme.[]ChangedSecurityScheme(SecurityScheme,SecurityScheme,DiffContext)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme.[List<Changed>]getChangedElements()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme.[DiffResult]isCoreChanged()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme.[SecurityScheme]getOldSecurityScheme()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme.[SecurityScheme]getNewSecurityScheme()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme.[boolean]isChangedType()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme.[boolean]isChangedIn()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme.[boolean]isChangedScheme()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme.[boolean]isChangedBearerFormat()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme.[boolean]isChangedOpenIdConnectUrl()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme.[ChangedSecuritySchemeScopes]getChangedScopes()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme.[ChangedMetadata]getDescription()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme.[ChangedOAuthFlows]getOAuthFlows()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme.[ChangedExtensions]getExtensions()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme.[ChangedSecurityScheme]setOldSecurityScheme(SecurityScheme)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme.[ChangedSecurityScheme]setNewSecurityScheme(SecurityScheme)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme.[ChangedSecurityScheme]setChangedType(boolean)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme.[ChangedSecurityScheme]setChangedIn(boolean)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme.[ChangedSecurityScheme]setChangedScheme(boolean)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme.[ChangedSecurityScheme]setChangedBearerFormat(boolean)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme.[ChangedSecurityScheme]setChangedOpenIdConnectUrl(boolean)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme.[ChangedSecurityScheme]setChangedScopes(ChangedSecuritySchemeScopes)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme.[ChangedSecurityScheme]setDescription(ChangedMetadata)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme.[ChangedSecurityScheme]setOAuthFlows(ChangedOAuthFlows)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme.[ChangedSecurityScheme]setExtensions(ChangedExtensions)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme.[boolean]equals(Object)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme.[int]hashCode()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme.[java.lang.String]toString()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class ChangedSecurityScheme implements ComposedChanged {\n  private SecurityScheme oldSecurityScheme;\n  private SecurityScheme newSecurityScheme;\n  private final DiffContext context;\n  private boolean changedType;\n  private boolean changedIn;\n  private boolean changedScheme;\n  private boolean changedBearerFormat;\n  private boolean changedOpenIdConnectUrl;\n  private ChangedSecuritySchemeScopes changedScopes;\n  private ChangedMetadata description;\n  private ChangedOAuthFlows oAuthFlows;\n  private ChangedExtensions extensions;\n\n  public ChangedSecurityScheme(\n      SecurityScheme oldSecurityScheme, SecurityScheme newSecurityScheme, DiffContext context) {\n    this.oldSecurityScheme = oldSecurityScheme;\n    this.newSecurityScheme = newSecurityScheme;\n    this.context = context;\n  }\n\n  @Override\n  public List<Changed> getChangedElements() {\n    return Arrays.asList(description, oAuthFlows, extensions);\n  }\n\n  @Override\n  public DiffResult isCoreChanged() {\n    if (!changedType\n        && !changedIn\n        && !changedScheme\n        && !changedBearerFormat\n        && !changedOpenIdConnectUrl\n        && (changedScopes == null || changedScopes.isUnchanged())) {\n      return DiffResult.NO_CHANGES;\n    }\n\n    if (changedBearerFormat) {\n      if (SECURITY_SCHEME_BEARER_FORMAT_CHANGED.enabled(context)) {\n        return DiffResult.INCOMPATIBLE;\n      }\n    }\n    if (changedOpenIdConnectUrl) {\n      if (SECURITY_SCHEME_OPENIDCONNECT_URL_CHANGED.enabled(context)) {\n        return DiffResult.INCOMPATIBLE;\n      }\n    }\n    if (changedScheme) {\n      if (SECURITY_SCHEME_SCHEME_CHANGED.enabled(context)) {\n        return DiffResult.INCOMPATIBLE;\n      }\n    }\n    if (changedScopes != null && !changedScopes.getIncreased().isEmpty()) {\n      if (SECURITY_SCHEME_SCOPES_INCREASED.enabled(context)) {\n        return DiffResult.INCOMPATIBLE;\n      }\n    }\n    if (changedIn || changedType) {\n      // TODO: Dead code removal opportunity for changedType and changedIn. It appears that\n      // SecuritySchemaDiff will never be given the chance to detect differences TYPE and\n      // IN differences because that case has already been detected and filtered out by\n      // SecurityRequirementsDiff and recorded as a dropped requirement in\n      // ChangedSecurityRequirements.\n      return DiffResult.INCOMPATIBLE;\n    }\n    return DiffResult.COMPATIBLE;\n  }\n\n  public SecurityScheme getOldSecurityScheme() {\n    return this.oldSecurityScheme;\n  }\n\n  public SecurityScheme getNewSecurityScheme() {\n    return this.newSecurityScheme;\n  }\n\n  public boolean isChangedType() {\n    return this.changedType;\n  }\n\n  public boolean isChangedIn() {\n    return this.changedIn;\n  }\n\n  public boolean isChangedScheme() {\n    return this.changedScheme;\n  }\n\n  public boolean isChangedBearerFormat() {\n    return this.changedBearerFormat;\n  }\n\n  public boolean isChangedOpenIdConnectUrl() {\n    return this.changedOpenIdConnectUrl;\n  }\n\n  public ChangedSecuritySchemeScopes getChangedScopes() {\n    return this.changedScopes;\n  }\n\n  public ChangedMetadata getDescription() {\n    return this.description;\n  }\n\n  public ChangedOAuthFlows getOAuthFlows() {\n    return this.oAuthFlows;\n  }\n\n  public ChangedExtensions getExtensions() {\n    return this.extensions;\n  }\n\n  public ChangedSecurityScheme setOldSecurityScheme(final SecurityScheme oldSecurityScheme) {\n    this.oldSecurityScheme = oldSecurityScheme;\n    return this;\n  }\n\n  public ChangedSecurityScheme setNewSecurityScheme(final SecurityScheme newSecurityScheme) {\n    this.newSecurityScheme = newSecurityScheme;\n    return this;\n  }\n\n  public ChangedSecurityScheme setChangedType(final boolean changedType) {\n    this.changedType = changedType;\n    return this;\n  }\n\n  public ChangedSecurityScheme setChangedIn(final boolean changedIn) {\n    this.changedIn = changedIn;\n    return this;\n  }\n\n  public ChangedSecurityScheme setChangedScheme(final boolean changedScheme) {\n    this.changedScheme = changedScheme;\n    return this;\n  }\n\n  public ChangedSecurityScheme setChangedBearerFormat(final boolean changedBearerFormat) {\n    this.changedBearerFormat = changedBearerFormat;\n    return this;\n  }\n\n  public ChangedSecurityScheme setChangedOpenIdConnectUrl(final boolean changedOpenIdConnectUrl) {\n    this.changedOpenIdConnectUrl = changedOpenIdConnectUrl;\n    return this;\n  }\n\n  public ChangedSecurityScheme setChangedScopes(final ChangedSecuritySchemeScopes changedScopes) {\n    this.changedScopes = changedScopes;\n    return this;\n  }\n\n  public ChangedSecurityScheme setDescription(final ChangedMetadata description) {\n    this.description = description;\n    return this;\n  }\n\n  public ChangedSecurityScheme setOAuthFlows(final ChangedOAuthFlows oAuthFlows) {\n    this.oAuthFlows = oAuthFlows;\n    return this;\n  }\n\n  public ChangedSecurityScheme setExtensions(final ChangedExtensions extensions) {\n    this.extensions = extensions;\n    return this;\n  }\n\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    ChangedSecurityScheme that = (ChangedSecurityScheme) o;\n    return changedType == that.changedType\n        && changedIn == that.changedIn\n        && changedScheme == that.changedScheme\n        && changedBearerFormat == that.changedBearerFormat\n        && changedOpenIdConnectUrl == that.changedOpenIdConnectUrl\n        && Objects.equals(oldSecurityScheme, that.oldSecurityScheme)\n        && Objects.equals(newSecurityScheme, that.newSecurityScheme)\n        && Objects.equals(changedScopes, that.changedScopes)\n        && Objects.equals(description, that.description)\n        && Objects.equals(oAuthFlows, that.oAuthFlows)\n        && Objects.equals(extensions, that.extensions);\n  }\n\n  @Override\n  public int hashCode() {\n    return Objects.hash(\n        oldSecurityScheme,\n        newSecurityScheme,\n        changedType,\n        changedIn,\n        changedScheme,\n        changedBearerFormat,\n        changedOpenIdConnectUrl,\n        changedScopes,\n        description,\n        oAuthFlows,\n        extensions);\n  }\n\n  @java.lang.Override\n  public java.lang.String toString() {\n    return \"ChangedSecurityScheme(oldSecurityScheme=\"\n        + this.getOldSecurityScheme()\n        + \", newSecurityScheme=\"\n        + this.getNewSecurityScheme()\n        + \", changedType=\"\n        + this.isChangedType()\n        + \", changedIn=\"\n        + this.isChangedIn()\n        + \", changedScheme=\"\n        + this.isChangedScheme()\n        + \", changedBearerFormat=\"\n        + this.isChangedBearerFormat()\n        + \", changedOpenIdConnectUrl=\"\n        + this.isChangedOpenIdConnectUrl()\n        + \", changedScopes=\"\n        + this.getChangedScopes()\n        + \", description=\"\n        + this.getDescription()\n        + \", oAuthFlows=\"\n        + this.getOAuthFlows()\n        + \", extensions=\"\n        + this.getExtensions()\n        + \")\";\n  }\n}", "super_interfaces": ["ComposedChanged"], "fields": [{"attribute_expression": "private SecurityScheme oldSecurityScheme;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "SecurityScheme", "name": "oldSecurityScheme", "syntax_pass": true}, {"attribute_expression": "private SecurityScheme newSecurityScheme;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "SecurityScheme", "name": "newSecurityScheme", "syntax_pass": true}, {"attribute_expression": "private final DiffContext context;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "DiffContext", "name": "context", "syntax_pass": true}, {"attribute_expression": "private boolean changedType;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "boolean", "name": "changedType", "syntax_pass": true}, {"attribute_expression": "private boolean changedIn;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "boolean", "name": "changedIn", "syntax_pass": true}, {"attribute_expression": "private boolean changedScheme;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "boolean", "name": "changedScheme", "syntax_pass": true}, {"attribute_expression": "private boolean changedBearerFormat;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "boolean", "name": "changedBearerFormat", "syntax_pass": true}, {"attribute_expression": "private boolean changedOpenIdConnectUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "boolean", "name": "changedOpenIdConnectUrl", "syntax_pass": true}, {"attribute_expression": "private ChangedSecuritySchemeScopes changedScopes;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "ChangedSecuritySchemeScopes", "name": "changedScopes", "syntax_pass": true}, {"attribute_expression": "private ChangedMetadata description;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "ChangedMetadata", "name": "description", "syntax_pass": true}, {"attribute_expression": "private ChangedOAuthFlows oAuthFlows;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "ChangedOAuthFlows", "name": "oAuthFlows", "syntax_pass": true}, {"attribute_expression": "private ChangedExtensions extensions;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "ChangedExtensions", "name": "extensions", "syntax_pass": true}]}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPath.java.ChangedPath", "name": "ChangedPath", "file_path": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPath.java", "superclasses": "", "methods": ["[]ChangedPath(String,PathItem,PathItem,DiffContext)", "[List<Changed>]getChangedElements()", "[DiffResult]isCoreChanged()", "[String]getPathUrl()", "[PathItem]getOldPath()", "[PathItem]getNewPath()", "[DiffContext]getContext()", "[Map<PathItem.HttpMethod, Operation>]getIncreased()", "[Map<PathItem.HttpMethod, Operation>]getMissing()", "[List<ChangedOperation>]getChanged()", "[ChangedExtensions]getExtensions()", "[ChangedPath]setIncreased(Map<PathItem.HttpMethod, Operation>)", "[ChangedPath]setMissing(Map<PathItem.HttpMethod, Operation>)", "[ChangedPath]setChanged(List<ChangedOperation>)", "[ChangedPath]setExtensions(ChangedExtensions)", "[boolean]equals(Object)", "[int]hashCode()", "[java.lang.String]toString()"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/model/ChangedPath.java.ChangedPath.[]ChangedPath(String,PathItem,PathItem,DiffContext)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedPath.java.ChangedPath.[List<Changed>]getChangedElements()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedPath.java.ChangedPath.[DiffResult]isCoreChanged()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedPath.java.ChangedPath.[String]getPathUrl()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedPath.java.ChangedPath.[PathItem]getOldPath()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedPath.java.ChangedPath.[PathItem]getNewPath()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedPath.java.ChangedPath.[DiffContext]getContext()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedPath.java.ChangedPath.[Map<PathItem.HttpMethod, Operation>]getIncreased()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedPath.java.ChangedPath.[Map<PathItem.HttpMethod, Operation>]getMissing()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedPath.java.ChangedPath.[List<ChangedOperation>]getChanged()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedPath.java.ChangedPath.[ChangedExtensions]getExtensions()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedPath.java.ChangedPath.[ChangedPath]setIncreased(Map<PathItem.HttpMethod, Operation>)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedPath.java.ChangedPath.[ChangedPath]setMissing(Map<PathItem.HttpMethod, Operation>)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedPath.java.ChangedPath.[ChangedPath]setChanged(List<ChangedOperation>)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedPath.java.ChangedPath.[ChangedPath]setExtensions(ChangedExtensions)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedPath.java.ChangedPath.[boolean]equals(Object)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedPath.java.ChangedPath.[int]hashCode()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedPath.java.ChangedPath.[java.lang.String]toString()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class ChangedPath implements ComposedChanged {\n  private final String pathUrl;\n  private final PathItem oldPath;\n  private final PathItem newPath;\n  private final DiffContext context;\n  Map<PathItem.HttpMethod, Operation> increased;\n  Map<PathItem.HttpMethod, Operation> missing;\n  List<ChangedOperation> changed;\n  private ChangedExtensions extensions;\n\n  public ChangedPath(String pathUrl, PathItem oldPath, PathItem newPath, DiffContext context) {\n    this.pathUrl = pathUrl;\n    this.oldPath = oldPath;\n    this.newPath = newPath;\n    this.context = context;\n    this.increased = new LinkedHashMap<>();\n    this.missing = new LinkedHashMap<>();\n    this.changed = new ArrayList<>();\n  }\n\n  @Override\n  public List<Changed> getChangedElements() {\n    return Stream.concat(changed.stream(), Stream.of(extensions)).collect(Collectors.toList());\n  }\n\n  @Override\n  public DiffResult isCoreChanged() {\n    if (increased.isEmpty() && missing.isEmpty()) {\n      return DiffResult.NO_CHANGES;\n    }\n    if (!missing.isEmpty()) {\n      if (OPENAPI_ENDPOINTS_DECREASED.enabled(context)) {\n        return DiffResult.INCOMPATIBLE;\n      }\n    }\n    return DiffResult.COMPATIBLE;\n  }\n\n  public String getPathUrl() {\n    return this.pathUrl;\n  }\n\n  public PathItem getOldPath() {\n    return this.oldPath;\n  }\n\n  public PathItem getNewPath() {\n    return this.newPath;\n  }\n\n  public DiffContext getContext() {\n    return this.context;\n  }\n\n  public Map<PathItem.HttpMethod, Operation> getIncreased() {\n    return this.increased;\n  }\n\n  public Map<PathItem.HttpMethod, Operation> getMissing() {\n    return this.missing;\n  }\n\n  public List<ChangedOperation> getChanged() {\n    return this.changed;\n  }\n\n  public ChangedExtensions getExtensions() {\n    return this.extensions;\n  }\n\n  public ChangedPath setIncreased(final Map<PathItem.HttpMethod, Operation> increased) {\n    this.increased = increased;\n    return this;\n  }\n\n  public ChangedPath setMissing(final Map<PathItem.HttpMethod, Operation> missing) {\n    this.missing = missing;\n    return this;\n  }\n\n  public ChangedPath setChanged(final List<ChangedOperation> changed) {\n    this.changed = changed;\n    return this;\n  }\n\n  public ChangedPath setExtensions(final ChangedExtensions extensions) {\n    this.extensions = extensions;\n    return this;\n  }\n\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    ChangedPath that = (ChangedPath) o;\n    return Objects.equals(pathUrl, that.pathUrl)\n        && Objects.equals(oldPath, that.oldPath)\n        && Objects.equals(newPath, that.newPath)\n        && Objects.equals(context, that.context)\n        && Objects.equals(increased, that.increased)\n        && Objects.equals(missing, that.missing)\n        && Objects.equals(changed, that.changed)\n        && Objects.equals(extensions, that.extensions);\n  }\n\n  @Override\n  public int hashCode() {\n    return Objects.hash(\n        pathUrl, oldPath, newPath, context, increased, missing, changed, extensions);\n  }\n\n  @java.lang.Override\n  public java.lang.String toString() {\n    return \"ChangedPath(pathUrl=\"\n        + this.getPathUrl()\n        + \", oldPath=\"\n        + this.getOldPath()\n        + \", newPath=\"\n        + this.getNewPath()\n        + \", context=\"\n        + this.getContext()\n        + \", increased=\"\n        + this.getIncreased()\n        + \", missing=\"\n        + this.getMissing()\n        + \", changed=\"\n        + this.getChanged()\n        + \", extensions=\"\n        + this.getExtensions()\n        + \")\";\n  }\n}", "super_interfaces": ["ComposedChanged"], "fields": [{"attribute_expression": "private final String pathUrl;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "pathUrl", "syntax_pass": true}, {"attribute_expression": "private final PathItem oldPath;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "PathItem", "name": "oldPath", "syntax_pass": true}, {"attribute_expression": "private final PathItem newPath;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "PathItem", "name": "newPath", "syntax_pass": true}, {"attribute_expression": "private final DiffContext context;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "DiffContext", "name": "context", "syntax_pass": true}, {"attribute_expression": "Map<PathItem.HttpMethod, Operation> increased;", "docstring": "", "modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "type": "Map<PathItem.HttpMethod, Operation>", "name": "increased", "syntax_pass": true}, {"attribute_expression": "Map<PathItem.HttpMethod, Operation> missing;", "docstring": "", "modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "type": "Map<PathItem.HttpMethod, Operation>", "name": "missing", "syntax_pass": true}, {"attribute_expression": "List<ChangedOperation> changed;", "docstring": "", "modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "type": "List<ChangedOperation>", "name": "changed", "syntax_pass": true}, {"attribute_expression": "private ChangedExtensions extensions;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "ChangedExtensions", "name": "extensions", "syntax_pass": true}]}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema", "name": "ChangedSchema", "file_path": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java", "superclasses": "", "methods": ["[]ChangedSchema()", "[void]clearChangedCache()", "[DiffResult]isChanged()", "[List<Changed>]getChangedElements()", "[DiffResult]isCoreChanged()", "[DiffResult]calculateCoreChanged()", "[boolean]compatibleForRequest()", "[boolean]compatibleForResponse()", "[DiffContext]getContext()", "[Schema<?>]getOldSchema()", "[Schema<?>]getNewSchema()", "[String]getType()", "[Map<String, ChangedSchema>]getChangedProperties()", "[Map<String, Schema<?>>]getIncreasedProperties()", "[Map<String, Schema<?>>]getMissingProperties()", "[boolean]isChangeDeprecated()", "[ChangedMetadata]getDescription()", "[boolean]isChangeTitle()", "[ChangedRequired]getRequired()", "[boolean]isChangeDefault()", "[ChangedEnum<?>]getEnumeration()", "[boolean]isChangeFormat()", "[ChangedReadOnly]getReadOnly()", "[ChangedWriteOnly]getWriteOnly()", "[boolean]isChangedType()", "[ChangedMaxLength]getMaxLength()", "[boolean]isDiscriminatorPropertyChanged()", "[ChangedSchema]getItems()", "[ChangedOneOfSchema]getOneOfSchema()", "[ChangedSchema]getAddProp()", "[ChangedExtensions]getExtensions()", "[ChangedSchema]setContext(DiffContext)", "[ChangedSchema]setOldSchema(Schema<?>)", "[ChangedSchema]setNewSchema(Schema<?>)", "[ChangedSchema]setType(String)", "[ChangedSchema]setChangedProperties(Map<String, ChangedSchema>)", "[ChangedSchema]setIncreasedProperties(Map<String, Schema<?>>)", "[ChangedSchema]setMissingProperties(Map<String, Schema<?>>)", "[ChangedSchema]setChangeDeprecated(boolean)", "[ChangedSchema]setDescription(ChangedMetadata)", "[ChangedSchema]setChangeTitle(boolean)", "[ChangedSchema]setRequired(ChangedRequired)", "[ChangedSchema]setChangeDefault(boolean)", "[ChangedSchema]setEnumeration(ChangedEnum<?>)", "[ChangedSchema]setChangeFormat(boolean)", "[ChangedSchema]setReadOnly(ChangedReadOnly)", "[ChangedSchema]setWriteOnly(ChangedWriteOnly)", "[ChangedSchema]setChangedType(boolean)", "[ChangedSchema]setMaxLength(ChangedMaxLength)", "[ChangedSchema]setNumericRange(ChangedNumericRange)", "[ChangedSchema]setDiscriminatorPropertyChanged(boolean)", "[ChangedSchema]setItems(ChangedSchema)", "[ChangedSchema]setOneOfSchema(ChangedOneOfSchema)", "[ChangedSchema]setAddProp(ChangedSchema)", "[ChangedSchema]setExtensions(ChangedExtensions)", "[boolean]equals(Object)", "[int]hashCode()", "[java.lang.String]toString()"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[]ChangedSchema()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[void]clearChangedCache()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[DiffResult]isChanged()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[List<Changed>]getChangedElements()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[DiffResult]isCoreChanged()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[DiffResult]calculateCoreChanged()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[boolean]compatibleForRequest()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[boolean]compatibleForResponse()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[DiffContext]getContext()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[Schema<?>]getOldSchema()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[Schema<?>]getNewSchema()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[String]getType()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[Map<String, ChangedSchema>]getChangedProperties()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[Map<String, Schema<?>>]getIncreasedProperties()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[Map<String, Schema<?>>]getMissingProperties()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[boolean]isChangeDeprecated()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[ChangedMetadata]getDescription()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[boolean]isChangeTitle()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[ChangedRequired]getRequired()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[boolean]isChangeDefault()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[ChangedEnum<?>]getEnumeration()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[boolean]isChangeFormat()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[ChangedReadOnly]getReadOnly()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[ChangedWriteOnly]getWriteOnly()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[boolean]isChangedType()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[ChangedMaxLength]getMaxLength()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[boolean]isDiscriminatorPropertyChanged()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[ChangedSchema]getItems()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[ChangedOneOfSchema]getOneOfSchema()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[ChangedSchema]getAddProp()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[ChangedExtensions]getExtensions()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[ChangedSchema]setContext(DiffContext)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[ChangedSchema]setOldSchema(Schema<?>)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[ChangedSchema]setNewSchema(Schema<?>)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[ChangedSchema]setType(String)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[ChangedSchema]setChangedProperties(Map<String, ChangedSchema>)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[ChangedSchema]setIncreasedProperties(Map<String, Schema<?>>)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[ChangedSchema]setMissingProperties(Map<String, Schema<?>>)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[ChangedSchema]setChangeDeprecated(boolean)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[ChangedSchema]setDescription(ChangedMetadata)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[ChangedSchema]setChangeTitle(boolean)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[ChangedSchema]setRequired(ChangedRequired)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[ChangedSchema]setChangeDefault(boolean)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[ChangedSchema]setEnumeration(ChangedEnum<?>)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[ChangedSchema]setChangeFormat(boolean)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[ChangedSchema]setReadOnly(ChangedReadOnly)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[ChangedSchema]setWriteOnly(ChangedWriteOnly)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[ChangedSchema]setChangedType(boolean)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[ChangedSchema]setMaxLength(ChangedMaxLength)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[ChangedSchema]setNumericRange(ChangedNumericRange)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[ChangedSchema]setDiscriminatorPropertyChanged(boolean)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[ChangedSchema]setItems(ChangedSchema)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[ChangedSchema]setOneOfSchema(ChangedOneOfSchema)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[ChangedSchema]setAddProp(ChangedSchema)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[ChangedSchema]setExtensions(ChangedExtensions)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[boolean]equals(Object)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[int]hashCode()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[java.lang.String]toString()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class ChangedSchema implements ComposedChanged {\n  protected DiffContext context;\n  protected Schema<?> oldSchema;\n  protected Schema<?> newSchema;\n  protected String type;\n  protected Map<String, ChangedSchema> changedProperties;\n  protected Map<String, Schema<?>> increasedProperties;\n  protected Map<String, Schema<?>> missingProperties;\n  protected boolean changeDeprecated;\n  protected ChangedMetadata description;\n  protected boolean changeTitle;\n  protected ChangedRequired required;\n  protected boolean changeDefault;\n  protected ChangedEnum<?> enumeration;\n  protected boolean changeFormat;\n  protected ChangedReadOnly readOnly;\n  protected ChangedWriteOnly writeOnly;\n  protected boolean changedType;\n  protected ChangedMaxLength maxLength;\n  protected ChangedNumericRange numericRange;\n  protected boolean discriminatorPropertyChanged;\n  protected ChangedSchema items;\n  protected ChangedOneOfSchema oneOfSchema;\n  protected ChangedSchema addProp;\n  private ChangedExtensions extensions;\n\n  // Flags to avoid recursive calls to isChanged() and getChangedElements()\n  private boolean gettingChangedElements = false;\n  private boolean gettingIsChanged = false;\n\n  // cached results for isChanged()\n  private DiffResult changed;\n  private DiffResult coreChanged;\n\n  // cached results for getChangedElements()\n  private List<Changed> changedElements;\n\n  public ChangedSchema() {\n    increasedProperties = new LinkedHashMap<>();\n    missingProperties = new LinkedHashMap<>();\n    changedProperties = new LinkedHashMap<>();\n  }\n\n  private void clearChangedCache() {\n    this.changed = null;\n    this.coreChanged = null;\n    this.changedElements = null;\n  }\n\n  @Override\n  public DiffResult isChanged() {\n    if (gettingIsChanged) {\n      return DiffResult.NO_CHANGES;\n    }\n\n    gettingIsChanged = true;\n    if (this.changed == null) {\n      DiffResult elementsResult =\n          DiffResult.fromWeight(\n              getChangedElements().stream()\n                  .filter(Objects::nonNull)\n                  .map(Changed::isChanged)\n                  .mapToInt(DiffResult::getWeight)\n                  .max()\n                  .orElse(0));\n      DiffResult result;\n      if (isCoreChanged().getWeight() > elementsResult.getWeight()) {\n        result = isCoreChanged();\n      } else {\n        result = elementsResult;\n      }\n      this.changed = result;\n    }\n    gettingIsChanged = false;\n\n    return this.changed;\n  }\n\n  @Override\n  public List<Changed> getChangedElements() {\n    if (gettingChangedElements) {\n      return Collections.emptyList();\n    }\n\n    gettingChangedElements = true;\n    if (changedElements == null) {\n      this.changedElements =\n          Stream.concat(\n                  changedProperties.values().stream(),\n                  Stream.of(\n                      description,\n                      readOnly,\n                      writeOnly,\n                      items,\n                      oneOfSchema,\n                      addProp,\n                      enumeration,\n                      required,\n                      maxLength,\n                      numericRange,\n                      extensions))\n              .collect(Collectors.toList());\n    }\n    gettingChangedElements = false;\n\n    return this.changedElements;\n  }\n\n  @Override\n  public DiffResult isCoreChanged() {\n    if (this.coreChanged == null) {\n      this.coreChanged = calculateCoreChanged();\n    }\n\n    return this.coreChanged;\n  }\n\n  private DiffResult calculateCoreChanged() {\n    if (!changedType\n        && (oldSchema == null && newSchema == null || oldSchema != null && newSchema != null)\n        && !changeFormat\n        && increasedProperties.isEmpty()\n        && missingProperties.isEmpty()\n        && changedProperties.values().isEmpty()\n        && !changeDeprecated\n        && !discriminatorPropertyChanged) {\n      return DiffResult.NO_CHANGES;\n    }\n    if (changedType) {\n      if (SCHEMA_TYPE_CHANGED.enabled(context)) {\n        return DiffResult.INCOMPATIBLE;\n      }\n    }\n    if (discriminatorPropertyChanged) {\n      if (SCHEMA_DISCRIMINATOR_CHANGED.enabled(context)) {\n        return DiffResult.INCOMPATIBLE;\n      }\n    }\n\n    if (!compatibleForRequest() || !compatibleForResponse()) {\n      return DiffResult.INCOMPATIBLE;\n    }\n    return DiffResult.COMPATIBLE;\n  }\n\n  private boolean compatibleForRequest() {\n    if (context.isRequest()) {\n      if (oldSchema == null && newSchema != null) {\n        // TODO: dead code? If not, create test.\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private boolean compatibleForResponse() {\n    if (context.isResponse()) {\n      if (oldSchema != null) {\n        if (newSchema == null) {\n          // TODO: dead code? If not, create test.\n          return false;\n        }\n        if (oldSchema.getRequired() != null\n            && missingProperties.keySet().stream()\n                .anyMatch(prop -> oldSchema.getRequired().contains(prop))) {\n          if (RESPONSE_REQUIRED_DECREASED.enabled(context)) {\n            return false;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  public DiffContext getContext() {\n    return this.context;\n  }\n\n  public Schema<?> getOldSchema() {\n    return this.oldSchema;\n  }\n\n  public Schema<?> getNewSchema() {\n    return this.newSchema;\n  }\n\n  public String getType() {\n    return this.type;\n  }\n\n  public Map<String, ChangedSchema> getChangedProperties() {\n    return this.changedProperties;\n  }\n\n  public Map<String, Schema<?>> getIncreasedProperties() {\n    return this.increasedProperties;\n  }\n\n  public Map<String, Schema<?>> getMissingProperties() {\n    return this.missingProperties;\n  }\n\n  public boolean isChangeDeprecated() {\n    return this.changeDeprecated;\n  }\n\n  public ChangedMetadata getDescription() {\n    return this.description;\n  }\n\n  public boolean isChangeTitle() {\n    return this.changeTitle;\n  }\n\n  public ChangedRequired getRequired() {\n    return this.required;\n  }\n\n  public boolean isChangeDefault() {\n    return this.changeDefault;\n  }\n\n  public ChangedEnum<?> getEnumeration() {\n    return this.enumeration;\n  }\n\n  public boolean isChangeFormat() {\n    return this.changeFormat;\n  }\n\n  public ChangedReadOnly getReadOnly() {\n    return this.readOnly;\n  }\n\n  public ChangedWriteOnly getWriteOnly() {\n    return this.writeOnly;\n  }\n\n  public boolean isChangedType() {\n    return this.changedType;\n  }\n\n  public ChangedMaxLength getMaxLength() {\n    return this.maxLength;\n  }\n\n  public boolean isDiscriminatorPropertyChanged() {\n    return this.discriminatorPropertyChanged;\n  }\n\n  public ChangedSchema getItems() {\n    return this.items;\n  }\n\n  public ChangedOneOfSchema getOneOfSchema() {\n    return this.oneOfSchema;\n  }\n\n  public ChangedSchema getAddProp() {\n    return this.addProp;\n  }\n\n  public ChangedExtensions getExtensions() {\n    return this.extensions;\n  }\n\n  public ChangedSchema setContext(final DiffContext context) {\n    this.context = context;\n    return this;\n  }\n\n  public ChangedSchema setOldSchema(final Schema<?> oldSchema) {\n    this.oldSchema = oldSchema;\n    return this;\n  }\n\n  public ChangedSchema setNewSchema(final Schema<?> newSchema) {\n    this.newSchema = newSchema;\n    return this;\n  }\n\n  public ChangedSchema setType(final String type) {\n    this.type = type;\n    return this;\n  }\n\n  public ChangedSchema setChangedProperties(final Map<String, ChangedSchema> changedProperties) {\n    clearChangedCache();\n    this.changedProperties = changedProperties;\n    return this;\n  }\n\n  public ChangedSchema setIncreasedProperties(final Map<String, Schema<?>> increasedProperties) {\n    clearChangedCache();\n    this.increasedProperties = increasedProperties;\n    return this;\n  }\n\n  public ChangedSchema setMissingProperties(final Map<String, Schema<?>> missingProperties) {\n    clearChangedCache();\n    this.missingProperties = missingProperties;\n    return this;\n  }\n\n  public ChangedSchema setChangeDeprecated(final boolean changeDeprecated) {\n    clearChangedCache();\n    this.changeDeprecated = changeDeprecated;\n    return this;\n  }\n\n  public ChangedSchema setDescription(final ChangedMetadata description) {\n    clearChangedCache();\n    this.description = description;\n    return this;\n  }\n\n  public ChangedSchema setChangeTitle(final boolean changeTitle) {\n    clearChangedCache();\n    this.changeTitle = changeTitle;\n    return this;\n  }\n\n  public ChangedSchema setRequired(final ChangedRequired required) {\n    clearChangedCache();\n    this.required = required;\n    return this;\n  }\n\n  public ChangedSchema setChangeDefault(final boolean changeDefault) {\n    clearChangedCache();\n    this.changeDefault = changeDefault;\n    return this;\n  }\n\n  public ChangedSchema setEnumeration(final ChangedEnum<?> enumeration) {\n    clearChangedCache();\n    this.enumeration = enumeration;\n    return this;\n  }\n\n  public ChangedSchema setChangeFormat(final boolean changeFormat) {\n    clearChangedCache();\n    this.changeFormat = changeFormat;\n    return this;\n  }\n\n  public ChangedSchema setReadOnly(final ChangedReadOnly readOnly) {\n    clearChangedCache();\n    this.readOnly = readOnly;\n    return this;\n  }\n\n  public ChangedSchema setWriteOnly(final ChangedWriteOnly writeOnly) {\n    clearChangedCache();\n    this.writeOnly = writeOnly;\n    return this;\n  }\n\n  public ChangedSchema setChangedType(final boolean changedType) {\n    clearChangedCache();\n    this.changedType = changedType;\n    return this;\n  }\n\n  public ChangedSchema setMaxLength(final ChangedMaxLength maxLength) {\n    clearChangedCache();\n    this.maxLength = maxLength;\n    return this;\n  }\n\n  public ChangedSchema setNumericRange(final ChangedNumericRange numericRange) {\n    clearChangedCache();\n    this.numericRange = numericRange;\n    return this;\n  }\n\n  public ChangedSchema setDiscriminatorPropertyChanged(final boolean discriminatorPropertyChanged) {\n    clearChangedCache();\n    this.discriminatorPropertyChanged = discriminatorPropertyChanged;\n    return this;\n  }\n\n  public ChangedSchema setItems(final ChangedSchema items) {\n    clearChangedCache();\n    this.items = items;\n    return this;\n  }\n\n  public ChangedSchema setOneOfSchema(final ChangedOneOfSchema oneOfSchema) {\n    clearChangedCache();\n    this.oneOfSchema = oneOfSchema;\n    return this;\n  }\n\n  public ChangedSchema setAddProp(final ChangedSchema addProp) {\n    clearChangedCache();\n    this.addProp = addProp;\n    return this;\n  }\n\n  public ChangedSchema setExtensions(final ChangedExtensions extensions) {\n    clearChangedCache();\n    this.extensions = extensions;\n    return this;\n  }\n\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    ChangedSchema that = (ChangedSchema) o;\n    return changeDeprecated == that.changeDeprecated\n        && changeTitle == that.changeTitle\n        && changeDefault == that.changeDefault\n        && changeFormat == that.changeFormat\n        && changedType == that.changedType\n        && discriminatorPropertyChanged == that.discriminatorPropertyChanged\n        && Objects.equals(context, that.context)\n        && Objects.equals(oldSchema, that.oldSchema)\n        && Objects.equals(newSchema, that.newSchema)\n        && Objects.equals(type, that.type)\n        && Objects.equals(changedProperties, that.changedProperties)\n        && Objects.equals(increasedProperties, that.increasedProperties)\n        && Objects.equals(missingProperties, that.missingProperties)\n        && Objects.equals(description, that.description)\n        && Objects.equals(required, that.required)\n        && Objects.equals(enumeration, that.enumeration)\n        && Objects.equals(readOnly, that.readOnly)\n        && Objects.equals(writeOnly, that.writeOnly)\n        && Objects.equals(maxLength, that.maxLength)\n        && Objects.equals(numericRange, that.numericRange)\n        && Objects.equals(items, that.items)\n        && Objects.equals(oneOfSchema, that.oneOfSchema)\n        && Objects.equals(addProp, that.addProp)\n        && Objects.equals(extensions, that.extensions);\n  }\n\n  @Override\n  public int hashCode() {\n    return Objects.hash(\n        context,\n        oldSchema,\n        newSchema,\n        type,\n        changedProperties,\n        increasedProperties,\n        missingProperties,\n        changeDeprecated,\n        description,\n        changeTitle,\n        required,\n        changeDefault,\n        enumeration,\n        changeFormat,\n        readOnly,\n        writeOnly,\n        changedType,\n        maxLength,\n        numericRange,\n        discriminatorPropertyChanged,\n        items,\n        oneOfSchema,\n        addProp,\n        extensions);\n  }\n\n  @java.lang.Override\n  public java.lang.String toString() {\n    return \"ChangedSchema(context=\"\n        + this.getContext()\n        + \", oldSchema=\"\n        + this.getOldSchema()\n        + \", newSchema=\"\n        + this.getNewSchema()\n        + \", type=\"\n        + this.getType()\n        + \", changedProperties=\"\n        + this.getChangedProperties()\n        + \", increasedProperties=\"\n        + this.getIncreasedProperties()\n        + \", missingProperties=\"\n        + this.getMissingProperties()\n        + \", changeDeprecated=\"\n        + this.isChangeDeprecated()\n        + \", description=\"\n        + this.getDescription()\n        + \", changeTitle=\"\n        + this.isChangeTitle()\n        + \", required=\"\n        + this.getRequired()\n        + \", changeDefault=\"\n        + this.isChangeDefault()\n        + \", enumeration=\"\n        + this.getEnumeration()\n        + \", changeFormat=\"\n        + this.isChangeFormat()\n        + \", readOnly=\"\n        + this.getReadOnly()\n        + \", writeOnly=\"\n        + this.getWriteOnly()\n        + \", changedType=\"\n        + this.isChangedType()\n        + \", maxLength=\"\n        + this.getMaxLength()\n        + \", discriminatorPropertyChanged=\"\n        + this.isDiscriminatorPropertyChanged()\n        + \", items=\"\n        + this.getItems()\n        + \", oneOfSchema=\"\n        + this.getOneOfSchema()\n        + \", addProp=\"\n        + this.getAddProp()\n        + \", extensions=\"\n        + this.getExtensions()\n        + \")\";\n  }\n}", "super_interfaces": ["ComposedChanged"], "fields": [{"attribute_expression": "protected DiffContext context;", "docstring": "", "modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "type": "DiffContext", "name": "context", "syntax_pass": true}, {"attribute_expression": "protected Schema<?> oldSchema;", "docstring": "", "modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "type": "Schema<?>", "name": "oldSchema", "syntax_pass": true}, {"attribute_expression": "protected Schema<?> newSchema;", "docstring": "", "modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "type": "Schema<?>", "name": "newSchema", "syntax_pass": true}, {"attribute_expression": "protected String type;", "docstring": "", "modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "type": "String", "name": "type", "syntax_pass": true}, {"attribute_expression": "protected Map<String, ChangedSchema> changedProperties;", "docstring": "", "modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "type": "Map<String, ChangedSchema>", "name": "changedProperties", "syntax_pass": true}, {"attribute_expression": "protected Map<String, Schema<?>> increasedProperties;", "docstring": "", "modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "type": "Map<String, Schema<?>>", "name": "increasedProperties", "syntax_pass": true}, {"attribute_expression": "protected Map<String, Schema<?>> missingProperties;", "docstring": "", "modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "type": "Map<String, Schema<?>>", "name": "missingProperties", "syntax_pass": true}, {"attribute_expression": "protected boolean changeDeprecated;", "docstring": "", "modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "type": "boolean", "name": "changeDeprecated", "syntax_pass": true}, {"attribute_expression": "protected ChangedMetadata description;", "docstring": "", "modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "type": "ChangedMetadata", "name": "description", "syntax_pass": true}, {"attribute_expression": "protected boolean changeTitle;", "docstring": "", "modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "type": "boolean", "name": "changeTitle", "syntax_pass": true}, {"attribute_expression": "protected ChangedRequired required;", "docstring": "", "modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "type": "ChangedRequired", "name": "required", "syntax_pass": true}, {"attribute_expression": "protected boolean changeDefault;", "docstring": "", "modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "type": "boolean", "name": "changeDefault", "syntax_pass": true}, {"attribute_expression": "protected ChangedEnum<?> enumeration;", "docstring": "", "modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "type": "ChangedEnum<?>", "name": "enumeration", "syntax_pass": true}, {"attribute_expression": "protected boolean changeFormat;", "docstring": "", "modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "type": "boolean", "name": "changeFormat", "syntax_pass": true}, {"attribute_expression": "protected ChangedReadOnly readOnly;", "docstring": "", "modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "type": "ChangedReadOnly", "name": "readOnly", "syntax_pass": true}, {"attribute_expression": "protected ChangedWriteOnly writeOnly;", "docstring": "", "modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "type": "ChangedWriteOnly", "name": "writeOnly", "syntax_pass": true}, {"attribute_expression": "protected boolean changedType;", "docstring": "", "modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "type": "boolean", "name": "changedType", "syntax_pass": true}, {"attribute_expression": "protected ChangedMaxLength maxLength;", "docstring": "", "modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "type": "ChangedMaxLength", "name": "maxLength", "syntax_pass": true}, {"attribute_expression": "protected ChangedNumericRange numericRange;", "docstring": "", "modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "type": "ChangedNumericRange", "name": "numericRange", "syntax_pass": true}, {"attribute_expression": "protected boolean discriminatorPropertyChanged;", "docstring": "", "modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "type": "boolean", "name": "discriminatorPropertyChanged", "syntax_pass": true}, {"attribute_expression": "protected ChangedSchema items;", "docstring": "", "modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "type": "ChangedSchema", "name": "items", "syntax_pass": true}, {"attribute_expression": "protected ChangedOneOfSchema oneOfSchema;", "docstring": "", "modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "type": "ChangedOneOfSchema", "name": "oneOfSchema", "syntax_pass": true}, {"attribute_expression": "protected ChangedSchema addProp;", "docstring": "", "modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "type": "ChangedSchema", "name": "addProp", "syntax_pass": true}, {"attribute_expression": "private ChangedExtensions extensions;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "ChangedExtensions", "name": "extensions", "syntax_pass": true}, {"attribute_expression": "private boolean gettingChangedElements = false;", "docstring": " Flags to avoid recursive calls to isChanged() and getChangedElements()", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "boolean", "name": "gettingChangedElements = false", "syntax_pass": true}, {"attribute_expression": "private boolean gettingIsChanged = false;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "boolean", "name": "gettingIsChanged = false", "syntax_pass": true}, {"attribute_expression": "private DiffResult changed;", "docstring": " cached results for isChanged()", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "DiffResult", "name": "changed", "syntax_pass": true}, {"attribute_expression": "private DiffResult coreChanged;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "DiffResult", "name": "coreChanged", "syntax_pass": true}, {"attribute_expression": "private List<Changed> changedElements;", "docstring": " cached results for getChangedElements()", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "List<Changed>", "name": "changedElements", "syntax_pass": true}]}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOneOfSchema.java.ChangedOneOfSchema", "name": "ChangedOneOfSchema", "file_path": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOneOfSchema.java", "superclasses": "", "methods": ["[]ChangedOneOfSchema(Map<String, String>,Map<String, String>,DiffContext)", "[List<Changed>]getChangedElements()", "[DiffResult]isCoreChanged()", "[Map<String, String>]getOldMapping()", "[Map<String, String>]getNewMapping()", "[DiffContext]getContext()", "[Map<String, Schema>]getIncreased()", "[Map<String, Schema>]getMissing()", "[Map<String, ChangedSchema>]getChanged()", "[ChangedOneOfSchema]setIncreased(Map<String, Schema>)", "[ChangedOneOfSchema]setMissing(Map<String, Schema>)", "[ChangedOneOfSchema]setChanged(Map<String, ChangedSchema>)", "[boolean]equals(Object)", "[int]hashCode()", "[java.lang.String]toString()"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/model/ChangedOneOfSchema.java.ChangedOneOfSchema.[]ChangedOneOfSchema(Map<String, String>,Map<String, String>,DiffContext)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOneOfSchema.java.ChangedOneOfSchema.[List<Changed>]getChangedElements()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOneOfSchema.java.ChangedOneOfSchema.[DiffResult]isCoreChanged()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOneOfSchema.java.ChangedOneOfSchema.[Map<String, String>]getOldMapping()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOneOfSchema.java.ChangedOneOfSchema.[Map<String, String>]getNewMapping()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOneOfSchema.java.ChangedOneOfSchema.[DiffContext]getContext()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOneOfSchema.java.ChangedOneOfSchema.[Map<String, Schema>]getIncreased()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOneOfSchema.java.ChangedOneOfSchema.[Map<String, Schema>]getMissing()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOneOfSchema.java.ChangedOneOfSchema.[Map<String, ChangedSchema>]getChanged()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOneOfSchema.java.ChangedOneOfSchema.[ChangedOneOfSchema]setIncreased(Map<String, Schema>)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOneOfSchema.java.ChangedOneOfSchema.[ChangedOneOfSchema]setMissing(Map<String, Schema>)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOneOfSchema.java.ChangedOneOfSchema.[ChangedOneOfSchema]setChanged(Map<String, ChangedSchema>)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOneOfSchema.java.ChangedOneOfSchema.[boolean]equals(Object)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOneOfSchema.java.ChangedOneOfSchema.[int]hashCode()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedOneOfSchema.java.ChangedOneOfSchema.[java.lang.String]toString()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class ChangedOneOfSchema implements ComposedChanged {\n  private final Map<String, String> oldMapping;\n  private final Map<String, String> newMapping;\n  private final DiffContext context;\n  private Map<String, Schema> increased;\n  private Map<String, Schema> missing;\n  private Map<String, ChangedSchema> changed;\n\n  public ChangedOneOfSchema(\n      Map<String, String> oldMapping, Map<String, String> newMapping, DiffContext context) {\n    this.oldMapping = oldMapping;\n    this.newMapping = newMapping;\n    this.context = context;\n  }\n\n  @Override\n  public List<Changed> getChangedElements() {\n    return new ArrayList<>(changed.values());\n  }\n\n  @Override\n  public DiffResult isCoreChanged() {\n    if (increased.isEmpty() && missing.isEmpty()) {\n      return DiffResult.NO_CHANGES;\n    }\n    if (context.isRequest() && !missing.isEmpty()) {\n      if (REQUEST_ONEOF_DECREASED.enabled(context)) {\n        return DiffResult.INCOMPATIBLE;\n      }\n    }\n    if (context.isResponse() && !increased.isEmpty()) {\n      if (RESPONSE_ONEOF_INCREASED.enabled(context)) {\n        return DiffResult.INCOMPATIBLE;\n      }\n    }\n    return DiffResult.COMPATIBLE;\n  }\n\n  public Map<String, String> getOldMapping() {\n    return this.oldMapping;\n  }\n\n  public Map<String, String> getNewMapping() {\n    return this.newMapping;\n  }\n\n  public DiffContext getContext() {\n    return this.context;\n  }\n\n  public Map<String, Schema> getIncreased() {\n    return this.increased;\n  }\n\n  public Map<String, Schema> getMissing() {\n    return this.missing;\n  }\n\n  public Map<String, ChangedSchema> getChanged() {\n    return this.changed;\n  }\n\n  public ChangedOneOfSchema setIncreased(final Map<String, Schema> increased) {\n    this.increased = increased;\n    return this;\n  }\n\n  public ChangedOneOfSchema setMissing(final Map<String, Schema> missing) {\n    this.missing = missing;\n    return this;\n  }\n\n  public ChangedOneOfSchema setChanged(final Map<String, ChangedSchema> changed) {\n    this.changed = changed;\n    return this;\n  }\n\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    ChangedOneOfSchema that = (ChangedOneOfSchema) o;\n    return Objects.equals(oldMapping, that.oldMapping)\n        && Objects.equals(newMapping, that.newMapping)\n        && Objects.equals(context, that.context)\n        && Objects.equals(increased, that.increased)\n        && Objects.equals(missing, that.missing)\n        && Objects.equals(changed, that.changed);\n  }\n\n  @Override\n  public int hashCode() {\n    return Objects.hash(oldMapping, newMapping, context, increased, missing, changed);\n  }\n\n  @java.lang.Override\n  public java.lang.String toString() {\n    return \"ChangedOneOfSchema(oldMapping=\"\n        + this.getOldMapping()\n        + \", newMapping=\"\n        + this.getNewMapping()\n        + \", context=\"\n        + this.getContext()\n        + \", increased=\"\n        + this.getIncreased()\n        + \", missing=\"\n        + this.getMissing()\n        + \", changed=\"\n        + this.getChanged()\n        + \")\";\n  }\n}", "super_interfaces": ["ComposedChanged"], "fields": [{"attribute_expression": "private final Map<String, String> oldMapping;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Map<String, String>", "name": "oldMapping", "syntax_pass": true}, {"attribute_expression": "private final Map<String, String> newMapping;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Map<String, String>", "name": "newMapping", "syntax_pass": true}, {"attribute_expression": "private final DiffContext context;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "DiffContext", "name": "context", "syntax_pass": true}, {"attribute_expression": "private Map<String, Schema> increased;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Map<String, Schema>", "name": "increased", "syntax_pass": true}, {"attribute_expression": "private Map<String, Schema> missing;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Map<String, Schema>", "name": "missing", "syntax_pass": true}, {"attribute_expression": "private Map<String, ChangedSchema> changed;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Map<String, ChangedSchema>", "name": "changed", "syntax_pass": true}]}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedContent.java.ChangedContent", "name": "ChangedContent", "file_path": "src/main/java/org/openapitools/openapidiff/core/model/ChangedContent.java", "superclasses": "", "methods": ["[]ChangedContent(Content,Content,DiffContext)", "[List<Changed>]getChangedElements()", "[DiffResult]isCoreChanged()", "[Content]getOldContent()", "[Content]getNewContent()", "[DiffContext]getContext()", "[Map<String, MediaType>]getIncreased()", "[Map<String, MediaType>]getMissing()", "[Map<String, ChangedMediaType>]getChanged()", "[ChangedContent]setIncreased(Map<String, MediaType>)", "[ChangedContent]setMissing(Map<String, MediaType>)", "[ChangedContent]setChanged(Map<String, ChangedMediaType>)", "[boolean]equals(Object)", "[int]hashCode()", "[java.lang.String]toString()"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/model/ChangedContent.java.ChangedContent.[]ChangedContent(Content,Content,DiffContext)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedContent.java.ChangedContent.[List<Changed>]getChangedElements()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedContent.java.ChangedContent.[DiffResult]isCoreChanged()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedContent.java.ChangedContent.[Content]getOldContent()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedContent.java.ChangedContent.[Content]getNewContent()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedContent.java.ChangedContent.[DiffContext]getContext()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedContent.java.ChangedContent.[Map<String, MediaType>]getIncreased()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedContent.java.ChangedContent.[Map<String, MediaType>]getMissing()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedContent.java.ChangedContent.[Map<String, ChangedMediaType>]getChanged()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedContent.java.ChangedContent.[ChangedContent]setIncreased(Map<String, MediaType>)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedContent.java.ChangedContent.[ChangedContent]setMissing(Map<String, MediaType>)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedContent.java.ChangedContent.[ChangedContent]setChanged(Map<String, ChangedMediaType>)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedContent.java.ChangedContent.[boolean]equals(Object)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedContent.java.ChangedContent.[int]hashCode()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedContent.java.ChangedContent.[java.lang.String]toString()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class ChangedContent implements ComposedChanged {\n  private final Content oldContent;\n  private final Content newContent;\n  private final DiffContext context;\n  private Map<String, MediaType> increased;\n  private Map<String, MediaType> missing;\n  private Map<String, ChangedMediaType> changed;\n\n  public ChangedContent(Content oldContent, Content newContent, DiffContext context) {\n    this.oldContent = oldContent;\n    this.newContent = newContent;\n    this.context = context;\n    this.increased = new LinkedHashMap<>();\n    this.missing = new LinkedHashMap<>();\n    this.changed = new LinkedHashMap<>();\n  }\n\n  @Override\n  public List<Changed> getChangedElements() {\n    return new ArrayList<>(changed.values());\n  }\n\n  @Override\n  public DiffResult isCoreChanged() {\n    if (increased.isEmpty() && missing.isEmpty()) {\n      return DiffResult.NO_CHANGES;\n    }\n    if (!missing.isEmpty()) {\n      if (context.isRequest() && REQUEST_CONTENT_DECREASED.enabled(context)) {\n        return DiffResult.INCOMPATIBLE;\n      }\n      if (context.isResponse() && RESPONSE_CONTENT_DECREASED.enabled(context)) {\n        return DiffResult.INCOMPATIBLE;\n      }\n    }\n    return DiffResult.COMPATIBLE;\n  }\n\n  public Content getOldContent() {\n    return this.oldContent;\n  }\n\n  public Content getNewContent() {\n    return this.newContent;\n  }\n\n  public DiffContext getContext() {\n    return this.context;\n  }\n\n  public Map<String, MediaType> getIncreased() {\n    return this.increased;\n  }\n\n  public Map<String, MediaType> getMissing() {\n    return this.missing;\n  }\n\n  public Map<String, ChangedMediaType> getChanged() {\n    return this.changed;\n  }\n\n  public ChangedContent setIncreased(final Map<String, MediaType> increased) {\n    this.increased = increased;\n    return this;\n  }\n\n  public ChangedContent setMissing(final Map<String, MediaType> missing) {\n    this.missing = missing;\n    return this;\n  }\n\n  public ChangedContent setChanged(final Map<String, ChangedMediaType> changed) {\n    this.changed = changed;\n    return this;\n  }\n\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    ChangedContent that = (ChangedContent) o;\n    return Objects.equals(oldContent, that.oldContent)\n        && Objects.equals(newContent, that.newContent)\n        && Objects.equals(context, that.context)\n        && Objects.equals(increased, that.increased)\n        && Objects.equals(missing, that.missing)\n        && Objects.equals(changed, that.changed);\n  }\n\n  @Override\n  public int hashCode() {\n    return Objects.hash(oldContent, newContent, context, increased, missing, changed);\n  }\n\n  @java.lang.Override\n  public java.lang.String toString() {\n    return \"ChangedContent(oldContent=\"\n        + this.getOldContent()\n        + \", newContent=\"\n        + this.getNewContent()\n        + \", context=\"\n        + this.getContext()\n        + \", increased=\"\n        + this.getIncreased()\n        + \", missing=\"\n        + this.getMissing()\n        + \", changed=\"\n        + this.getChanged()\n        + \")\";\n  }\n}", "super_interfaces": ["ComposedChanged"], "fields": [{"attribute_expression": "private final Content oldContent;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Content", "name": "oldContent", "syntax_pass": true}, {"attribute_expression": "private final Content newContent;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Content", "name": "newContent", "syntax_pass": true}, {"attribute_expression": "private final DiffContext context;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "DiffContext", "name": "context", "syntax_pass": true}, {"attribute_expression": "private Map<String, MediaType> increased;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Map<String, MediaType>", "name": "increased", "syntax_pass": true}, {"attribute_expression": "private Map<String, MediaType> missing;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Map<String, MediaType>", "name": "missing", "syntax_pass": true}, {"attribute_expression": "private Map<String, ChangedMediaType> changed;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Map<String, ChangedMediaType>", "name": "changed", "syntax_pass": true}]}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/deferred/PendingChanged.java.PendingChanged", "name": "PendingChanged", "file_path": "src/main/java/org/openapitools/openapidiff/core/model/deferred/PendingChanged.java", "superclasses": "", "methods": ["[void]ifPresent(Consumer<T>)", "[void]setValue(Optional<T>)", "[boolean]isPresent()", "[T]get()", "[boolean]isValueSet()", "[void]whenSet(Consumer<Optional<T>>)", "[DeferredChanged<Q>]map(Function<Optional<T>, Q>)", "[DeferredChanged<Q>]mapOptional(Function<Optional<T>, Optional<Q>>)", "[DeferredChanged<Q>]flatMap(Function<Optional<T>, DeferredChanged<Q>>)", "[String]toString()", "[void]logResolved()"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/model/deferred/PendingChanged.java.PendingChanged.[void]ifPresent(Consumer<T>)", "src/main/java/org/openapitools/openapidiff/core/model/deferred/PendingChanged.java.PendingChanged.[void]setValue(Optional<T>)", "src/main/java/org/openapitools/openapidiff/core/model/deferred/PendingChanged.java.PendingChanged.[boolean]isPresent()", "src/main/java/org/openapitools/openapidiff/core/model/deferred/PendingChanged.java.PendingChanged.[T]get()", "src/main/java/org/openapitools/openapidiff/core/model/deferred/PendingChanged.java.PendingChanged.[boolean]isValueSet()", "src/main/java/org/openapitools/openapidiff/core/model/deferred/PendingChanged.java.PendingChanged.[void]whenSet(Consumer<Optional<T>>)", "src/main/java/org/openapitools/openapidiff/core/model/deferred/PendingChanged.java.PendingChanged.[DeferredChanged<Q>]map(Function<Optional<T>, Q>)", "src/main/java/org/openapitools/openapidiff/core/model/deferred/PendingChanged.java.PendingChanged.[DeferredChanged<Q>]mapOptional(Function<Optional<T>, Optional<Q>>)", "src/main/java/org/openapitools/openapidiff/core/model/deferred/PendingChanged.java.PendingChanged.[DeferredChanged<Q>]flatMap(Function<Optional<T>, DeferredChanged<Q>>)", "src/main/java/org/openapitools/openapidiff/core/model/deferred/PendingChanged.java.PendingChanged.[String]toString()", "src/main/java/org/openapitools/openapidiff/core/model/deferred/PendingChanged.java.PendingChanged.[void]logResolved()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class PendingChanged<T> implements DeferredChanged<T> {\n  private static final Logger log = LoggerFactory.getLogger(PendingChanged.class);\n\n  private final List<Consumer<T>> ifPresentConsumers = new ArrayList<>();\n  private final List<Consumer<Optional<T>>> whenSetConsumers = new ArrayList<>();\n\n  @Nullable private T value;\n  private Optional<T> valueOptional = Optional.empty();\n  private boolean valueIsPresent;\n  private boolean valueSet;\n\n  private static final AtomicInteger deferredCounter = new AtomicInteger();\n  private static final AtomicInteger resolvedCounter = new AtomicInteger();\n\n  @Override\n  public void ifPresent(Consumer<T> consumer) {\n    if (valueSet) {\n      if (valueIsPresent) {\n        consumer.accept(value);\n      }\n    } else {\n      ifPresentConsumers.add(consumer);\n    }\n  }\n\n  public void setValue(Optional<T> value) {\n    if (!valueSet) {\n      this.valueSet = true;\n      this.valueIsPresent = value.isPresent();\n      this.value = value.orElse(null);\n      this.valueOptional = value;\n\n      log.debug(\"set {}\", DeferredLogger.logValue(this.value));\n\n      if (this.valueIsPresent) {\n        ifPresentConsumers.forEach(c -> c.accept(this.value));\n      }\n\n      whenSetConsumers.forEach(c -> c.accept(this.valueOptional));\n\n    } else {\n      throw new IllegalStateException(\n          \"PendingChanged may not be set more than once. Value was already set.\");\n    }\n  }\n\n  public boolean isPresent() {\n    return valueSet && valueIsPresent;\n  }\n\n  public T get() {\n    return valueOptional.get();\n  }\n\n  public boolean isValueSet() {\n    return valueSet;\n  }\n\n  public void whenSet(Consumer<Optional<T>> consumer) {\n    if (valueSet) {\n      consumer.accept(valueOptional);\n    } else {\n      whenSetConsumers.add(consumer);\n    }\n  }\n\n  public <Q> DeferredChanged<Q> map(Function<Optional<T>, Q> function) {\n    return mapOptional(v -> Optional.ofNullable(function.apply(v)));\n  }\n\n  public <Q> DeferredChanged<Q> mapOptional(Function<Optional<T>, Optional<Q>> function) {\n    if (valueSet) {\n      Optional<Q> result = function.apply(this.valueOptional);\n      log.debug(\n          \"map resolved {} {} -> {}\",\n          function,\n          DeferredLogger.logValue(this.value),\n          DeferredLogger.logValue(result));\n      return new RealizedChanged<>(result);\n    } else {\n      final PendingChanged<Q> mappedChanged = new PendingChanged<>();\n      log.debug(\"map deferred {} ? -> ?\", function);\n      deferredCounter.incrementAndGet();\n      whenSet(\n          value -> {\n            Optional<Q> result = function.apply(this.valueOptional);\n            log.debug(\n                \"map resolved {} {} -> {}\",\n                function,\n                DeferredLogger.logValue(this.value),\n                DeferredLogger.logValue(result));\n            resolvedCounter.incrementAndGet();\n            mappedChanged.setValue(result);\n          });\n      return mappedChanged;\n    }\n  }\n\n  public <Q> DeferredChanged<Q> flatMap(Function<Optional<T>, DeferredChanged<Q>> function) {\n    if (valueSet) {\n      DeferredChanged<Q> nextDeferred = function.apply(this.valueOptional);\n      log.debug(\"flat map deferred {} {} -> ?\", function, DeferredLogger.logValue(this.value));\n      deferredCounter.incrementAndGet();\n      nextDeferred.whenSet(\n          nextValue -> {\n            log.debug(\n                \"flat map resolved {} {} -> {}\",\n                function,\n                DeferredLogger.logValue(this.value),\n                DeferredLogger.logValue(nextValue));\n            resolvedCounter.incrementAndGet();\n          });\n      return nextDeferred;\n    } else {\n      final PendingChanged<Q> mappedChanged = new PendingChanged<>();\n      log.debug(\"flat map deferred {} ? -> ?\", function);\n      deferredCounter.incrementAndGet();\n      whenSet(\n          value -> {\n            DeferredChanged<Q> nextDeferred = function.apply(value);\n            nextDeferred.whenSet(\n                nextValue -> {\n                  log.debug(\n                      \"flat map deferred {} {} -> {}\",\n                      function,\n                      DeferredLogger.logValue(this.value),\n                      DeferredLogger.logValue(nextValue));\n                  resolvedCounter.incrementAndGet();\n                  mappedChanged.setValue(nextValue);\n                });\n            log.debug(\"flat map resolved {} {} -> ?\", function, DeferredLogger.logValue(value));\n          });\n      return mappedChanged;\n    }\n  }\n\n  @Override\n  public String toString() {\n    return \"PendingChanged{\"\n        + \"value=\"\n        + DeferredLogger.logValue(value)\n        + \", valueSet=\"\n        + valueSet\n        + \", ifPresentConsumers.size=\"\n        + ifPresentConsumers.size()\n        + \", whenSetConsumers.size=\"\n        + whenSetConsumers.size()\n        + '}';\n  }\n\n  public static void logResolved() {\n    int deferred = deferredCounter.get();\n    int resolved = resolvedCounter.get();\n    log.debug(\n        \"Outstanding: {}  Deferred: {}  Resolved {}\", deferred - resolved, deferred, resolved);\n  }\n}", "super_interfaces": ["DeferredChanged<T>"], "fields": [{"attribute_expression": "private static final Logger log = LoggerFactory.getLogger(PendingChanged.class);", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "Logger", "name": "log = LoggerFactory.getLogger(PendingChanged.class)", "syntax_pass": true}, {"attribute_expression": "private final List<Consumer<T>> ifPresentConsumers = new ArrayList<>();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "List<Consumer<T>>", "name": "ifPresentConsumers = new ArrayList<>()", "syntax_pass": true}, {"attribute_expression": "private final List<Consumer<Optional<T>>> whenSetConsumers = new ArrayList<>();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "List<Consumer<Optional<T>>>", "name": "whenSetConsumers = new ArrayList<>()", "syntax_pass": true}, {"attribute_expression": "@Nullable private T value;", "docstring": "", "modifiers": "@Nullable private", "marker_annotations": ["@Nullable"], "non_marker_annotations": ["private"], "comments": [], "type": "T", "name": "value", "syntax_pass": true}, {"attribute_expression": "private Optional<T> valueOptional = Optional.empty();", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Optional<T>", "name": "valueOptional = Optional.empty()", "syntax_pass": true}, {"attribute_expression": "private boolean valueIsPresent;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "boolean", "name": "valueIsPresent", "syntax_pass": true}, {"attribute_expression": "private boolean valueSet;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "boolean", "name": "valueSet", "syntax_pass": true}, {"attribute_expression": "private static final AtomicInteger deferredCounter = new AtomicInteger();", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "AtomicInteger", "name": "deferredCounter = new AtomicInteger()", "syntax_pass": true}, {"attribute_expression": "private static final AtomicInteger resolvedCounter = new AtomicInteger();", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "AtomicInteger", "name": "resolvedCounter = new AtomicInteger()", "syntax_pass": true}]}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/deferred/SchemaDiffOperation.java.SchemaDiffOperation", "name": "SchemaDiffOperation", "file_path": "src/main/java/org/openapitools/openapidiff/core/model/deferred/SchemaDiffOperation.java", "superclasses": "", "methods": ["[]SchemaDiffOperation(OpenApiDiff,RecursiveSchemaSet,CacheKey,Schema,Schema)"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/model/deferred/SchemaDiffOperation.java.SchemaDiffOperation.[]SchemaDiffOperation(OpenApiDiff,RecursiveSchemaSet,CacheKey,Schema,Schema)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class SchemaDiffOperation {\n  final OpenApiDiff openApiDiff;\n  final RecursiveSchemaSet refSet;\n  final CacheKey key;\n  final Schema left;\n  final Schema right;\n  boolean processed;\n\n  PendingChanged<ChangedSchema> diffResult = new PendingChanged<>();\n\n  SchemaDiffOperation(\n      OpenApiDiff openApiDiff, RecursiveSchemaSet refSet, CacheKey key, Schema left, Schema right) {\n    this.openApiDiff = openApiDiff;\n    this.refSet = refSet;\n    this.key = key;\n    this.left = left;\n    this.right = right;\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "final OpenApiDiff openApiDiff;", "docstring": "", "modifiers": "final", "marker_annotations": [], "non_marker_annotations": ["final"], "comments": [], "type": "OpenApiDiff", "name": "openApiDiff", "syntax_pass": true}, {"attribute_expression": "final RecursiveSchemaSet refSet;", "docstring": "", "modifiers": "final", "marker_annotations": [], "non_marker_annotations": ["final"], "comments": [], "type": "RecursiveSchemaSet", "name": "refSet", "syntax_pass": true}, {"attribute_expression": "final CacheKey key;", "docstring": "", "modifiers": "final", "marker_annotations": [], "non_marker_annotations": ["final"], "comments": [], "type": "CacheKey", "name": "key", "syntax_pass": true}, {"attribute_expression": "final Schema left;", "docstring": "", "modifiers": "final", "marker_annotations": [], "non_marker_annotations": ["final"], "comments": [], "type": "Schema", "name": "left", "syntax_pass": true}, {"attribute_expression": "final Schema right;", "docstring": "", "modifiers": "final", "marker_annotations": [], "non_marker_annotations": ["final"], "comments": [], "type": "Schema", "name": "right", "syntax_pass": true}, {"attribute_expression": "boolean processed;", "docstring": "", "modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "type": "boolean", "name": "processed", "syntax_pass": true}, {"attribute_expression": "PendingChanged<ChangedSchema> diffResult = new PendingChanged<>();", "docstring": "", "modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "type": "PendingChanged<ChangedSchema>", "name": "diffResult = new PendingChanged<>()", "syntax_pass": true}]}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/deferred/RealizedChanged.java.RealizedChanged", "name": "RealizedChanged", "file_path": "src/main/java/org/openapitools/openapidiff/core/model/deferred/RealizedChanged.java", "superclasses": "", "methods": ["[]RealizedChanged(T)", "[]RealizedChanged(Optional<T>)", "[void]ifPresent(Consumer<T>)", "[void]whenSet(Consumer<Optional<T>>)", "[RealizedChanged<T>]empty()", "[boolean]isPresent()", "[boolean]isValueSet()", "[T]get()", "[DeferredChanged<Q>]map(Function<Optional<T>, Q>)", "[DeferredChanged<Q>]mapOptional(Function<Optional<T>, Optional<Q>>)", "[DeferredChanged<Q>]flatMap(Function<Optional<T>, DeferredChanged<Q>>)", "[String]toString()"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/model/deferred/RealizedChanged.java.RealizedChanged.[]RealizedChanged(T)", "src/main/java/org/openapitools/openapidiff/core/model/deferred/RealizedChanged.java.RealizedChanged.[]RealizedChanged(Optional<T>)", "src/main/java/org/openapitools/openapidiff/core/model/deferred/RealizedChanged.java.RealizedChanged.[void]ifPresent(Consumer<T>)", "src/main/java/org/openapitools/openapidiff/core/model/deferred/RealizedChanged.java.RealizedChanged.[void]whenSet(Consumer<Optional<T>>)", "src/main/java/org/openapitools/openapidiff/core/model/deferred/RealizedChanged.java.RealizedChanged.[RealizedChanged<T>]empty()", "src/main/java/org/openapitools/openapidiff/core/model/deferred/RealizedChanged.java.RealizedChanged.[boolean]isPresent()", "src/main/java/org/openapitools/openapidiff/core/model/deferred/RealizedChanged.java.RealizedChanged.[boolean]isValueSet()", "src/main/java/org/openapitools/openapidiff/core/model/deferred/RealizedChanged.java.RealizedChanged.[T]get()", "src/main/java/org/openapitools/openapidiff/core/model/deferred/RealizedChanged.java.RealizedChanged.[DeferredChanged<Q>]map(Function<Optional<T>, Q>)", "src/main/java/org/openapitools/openapidiff/core/model/deferred/RealizedChanged.java.RealizedChanged.[DeferredChanged<Q>]mapOptional(Function<Optional<T>, Optional<Q>>)", "src/main/java/org/openapitools/openapidiff/core/model/deferred/RealizedChanged.java.RealizedChanged.[DeferredChanged<Q>]flatMap(Function<Optional<T>, DeferredChanged<Q>>)", "src/main/java/org/openapitools/openapidiff/core/model/deferred/RealizedChanged.java.RealizedChanged.[String]toString()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class RealizedChanged<T> implements DeferredChanged<T> {\n  private final Optional<T> value;\n\n  public RealizedChanged(T value) {\n    this.value = Optional.ofNullable(value);\n  }\n\n  public RealizedChanged(Optional<T> value) {\n    this.value = value;\n  }\n\n  @Override\n  public void ifPresent(Consumer<T> consumer) {\n    value.ifPresent(consumer);\n  }\n\n  @Override\n  public void whenSet(Consumer<Optional<T>> consumer) {\n    consumer.accept(value);\n  }\n\n  public static <T> RealizedChanged<T> empty() {\n    return new RealizedChanged<>(Optional.empty());\n  }\n\n  @Override\n  public boolean isPresent() {\n    return value.isPresent();\n  }\n\n  @Override\n  public boolean isValueSet() {\n    return true;\n  }\n\n  @Override\n  public T get() {\n    return value.get();\n  }\n\n  public <Q> DeferredChanged<Q> map(Function<Optional<T>, Q> function) {\n    return new RealizedChanged<>(function.apply(this.value));\n  }\n\n  @Override\n  public <Q> DeferredChanged<Q> mapOptional(Function<Optional<T>, Optional<Q>> consumer) {\n    return new RealizedChanged<>(consumer.apply(this.value));\n  }\n\n  public <Q> DeferredChanged<Q> flatMap(Function<Optional<T>, DeferredChanged<Q>> function) {\n    return function.apply(this.value);\n  }\n\n  @Override\n  public String toString() {\n    return \"RealizedChanged{\" + \"value=\" + value + '}';\n  }\n}", "super_interfaces": ["DeferredChanged<T>"], "fields": [{"attribute_expression": "private final Optional<T> value;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Optional<T>", "name": "value", "syntax_pass": true}]}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredLogger.java.DeferredLogger", "name": "DeferredLogger", "file_path": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredLogger.java", "superclasses": "", "methods": ["[]DeferredLogger()", "[Object]logValue(Object)", "[String]optionalToString(Optional<?>)", "[String]changedToString(Changed)", "[String]streamToString(Stream<?>)", "[String]deferredChangeToString(DeferredChanged<?>)", "[String]valueToString(Object)"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredLogger.java.DeferredLogger.[]DeferredLogger()", "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredLogger.java.DeferredLogger.[Object]logValue(Object)", "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredLogger.java.DeferredLogger.[String]optionalToString(Optional<?>)", "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredLogger.java.DeferredLogger.[String]changedToString(Changed)", "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredLogger.java.DeferredLogger.[String]streamToString(Stream<?>)", "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredLogger.java.DeferredLogger.[String]deferredChangeToString(DeferredChanged<?>)", "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredLogger.java.DeferredLogger.[String]valueToString(Object)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class DeferredLogger {\n  private DeferredLogger() {}\n\n  public static Object logValue(Object value) {\n    return new Object() {\n      public String toString() {\n        return valueToString(value);\n      }\n    };\n  }\n\n  public static String optionalToString(Optional<?> value) {\n    return value.map(v -> \"Optional[\" + valueToString(v) + \"]\").orElse(\"Optional[empty]\");\n  }\n\n  public static String changedToString(Changed value) {\n    if (value instanceof ComposedChanged) {\n      return \"Changed: \" + value.getClass() + \" (composed) \";\n    } else {\n      return \"Changed: \" + value.getClass() + \" \" + value.isChanged();\n    }\n  }\n\n  public static String streamToString(Stream<?> values) {\n    return \"[\" + values.map(DeferredLogger::valueToString).collect(Collectors.joining(\", \")) + \"]\";\n  }\n\n  public static String deferredChangeToString(DeferredChanged<?> deferredChanged) {\n    if (deferredChanged.isValueSet()) {\n      if (deferredChanged.isPresent()) {\n        Object value = deferredChanged.get();\n        return valueToString(value);\n      } else {\n        return deferredChanged.toString();\n      }\n    } else {\n      return deferredChanged.toString();\n    }\n  }\n\n  public static String valueToString(Object value) {\n    if (value == null) {\n      return \"null\";\n    } else if (value instanceof Changed) {\n      return changedToString((Changed) value);\n    } else if (value instanceof Optional) {\n      return optionalToString((Optional<?>) value);\n    } else if (value instanceof DeferredChanged) {\n      return deferredChangeToString((DeferredChanged<?>) value);\n    } else if (value.getClass().isArray()) {\n      return streamToString(Arrays.stream((Object[]) value));\n    } else if (value instanceof Collection) {\n      return streamToString(((Collection<?>) value).stream());\n    } else {\n      return value.toString();\n    }\n  }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilder.java.DeferredBuilder", "name": "DeferredBuilder", "file_path": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilder.java", "superclasses": "", "methods": ["[Optional<V>]with(Optional<V>)", "[DeferredChanged<V>]with(DeferredChanged<V>)", "[DeferredBuilder<T>]add(DeferredChanged<V>)", "[DeferredBuilder<T>]addAll(List<DeferredChanged<V>>)", "[DeferredBuilder<T>]addAll(Stream<DeferredChanged<V>>)", "[DeferredBuilder<T>]whenSet(Consumer<Optional<List<Optional<? super T>>>>)", "[void]accept(DeferredChanged<T>)", "[DeferredChanged<List<Optional<? super T>>>]build()", "[DeferredChanged<V>]buildIsChanged(V)", "[boolean]isFull(Object[])"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilder.java.DeferredBuilder.[Optional<V>]with(Optional<V>)", "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilder.java.DeferredBuilder.[DeferredChanged<V>]with(DeferredChanged<V>)", "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilder.java.DeferredBuilder.[DeferredBuilder<T>]add(DeferredChanged<V>)", "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilder.java.DeferredBuilder.[DeferredBuilder<T>]addAll(List<DeferredChanged<V>>)", "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilder.java.DeferredBuilder.[DeferredBuilder<T>]addAll(Stream<DeferredChanged<V>>)", "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilder.java.DeferredBuilder.[DeferredBuilder<T>]whenSet(Consumer<Optional<List<Optional<? super T>>>>)", "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilder.java.DeferredBuilder.[void]accept(DeferredChanged<T>)", "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilder.java.DeferredBuilder.[DeferredChanged<List<Optional<? super T>>>]build()", "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilder.java.DeferredBuilder.[DeferredChanged<V>]buildIsChanged(V)", "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilder.java.DeferredBuilder.[boolean]isFull(Object[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class DeferredBuilder<T> implements Consumer<DeferredChanged<T>> {\n  private static final Logger log = LoggerFactory.getLogger(DeferredBuilder.class);\n\n  private final List<DeferredChanged<? extends T>> deferredValues = new ArrayList<>();\n  private final List<Consumer<Optional<List<Optional<? super T>>>>> whenSet = new ArrayList<>();\n\n  public <V extends T> Optional<V> with(Optional<V> value) {\n    return value;\n  }\n\n  public <V extends T> DeferredChanged<V> with(DeferredChanged<V> value) {\n    deferredValues.add(value);\n    return value;\n  }\n\n  public <V extends T> DeferredBuilder<T> add(DeferredChanged<V> value) {\n    deferredValues.add(value);\n    return this;\n  }\n\n  public <V extends T> DeferredBuilder<T> addAll(List<DeferredChanged<V>> values) {\n    deferredValues.addAll(values);\n    return this;\n  }\n\n  public <V extends T> DeferredBuilder<T> addAll(Stream<DeferredChanged<V>> values) {\n    deferredValues.addAll(values.collect(Collectors.toList()));\n    return this;\n  }\n\n  public DeferredBuilder<T> whenSet(Consumer<Optional<List<Optional<? super T>>>> consumer) {\n    whenSet.add(consumer);\n    return this;\n  }\n\n  @Override\n  public void accept(DeferredChanged<T> value) {\n    deferredValues.add(value);\n  }\n\n  public DeferredChanged<List<Optional<? super T>>> build() {\n    if (deferredValues.isEmpty()) {\n      return DeferredChanged.empty();\n    }\n\n    log.debug(\"Building collected deferred {}\", DeferredLogger.logValue(deferredValues));\n\n    final PendingChanged<List<Optional<? super T>>> changed = new PendingChanged<>();\n    whenSet.forEach(changed::whenSet);\n\n    Optional[] values = new Optional[deferredValues.size()];\n\n    IntStream.range(0, deferredValues.size())\n        .forEach(\n            i -> {\n              DeferredChanged<? extends T> deferredItem = deferredValues.get(i);\n              deferredItem.whenSet(\n                  value -> {\n                    values[i] = value;\n                    log.debug(\n                        \"Collected deferred item set this={}, item={}, values = {}\",\n                        this,\n                        DeferredLogger.logValue(value),\n                        DeferredLogger.logValue(values));\n                    if (isFull(values)) {\n                      log.debug(\n                          \"Collected deferred triggering complete this={}, values = {}\",\n                          this,\n                          DeferredLogger.logValue(values));\n                      changed.setValue(Optional.of(Arrays.asList(values)));\n                    }\n                  });\n            });\n\n    return changed;\n  }\n\n  public <V extends Changed> DeferredChanged<V> buildIsChanged(V changed) {\n    return build().flatMap(values -> (DeferredChanged<V>) DeferredChanged.of(isChanged(changed)));\n  }\n\n  private static boolean isFull(Object[] values) {\n    for (Object value : values) {\n      if (value == null) {\n        return false;\n      }\n    }\n    return true;\n  }\n}", "super_interfaces": ["Consumer<DeferredChanged<T>>"], "fields": [{"attribute_expression": "private static final Logger log = LoggerFactory.getLogger(DeferredBuilder.class);", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "Logger", "name": "log = LoggerFactory.getLogger(DeferredBuilder.class)", "syntax_pass": true}, {"attribute_expression": "private final List<DeferredChanged<? extends T>> deferredValues = new ArrayList<>();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "List<DeferredChanged<? extends T>>", "name": "deferredValues = new ArrayList<>()", "syntax_pass": true}, {"attribute_expression": "private final List<Consumer<Optional<List<Optional<? super T>>>>> whenSet = new ArrayList<>();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "List<Consumer<Optional<List<Optional<? super T>>>>>", "name": "whenSet = new ArrayList<>()", "syntax_pass": true}]}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/deferred/RecursiveSchemaSet.java.RecursiveSchemaSet", "name": "RecursiveSchemaSet", "file_path": "src/main/java/org/openapitools/openapidiff/core/model/deferred/RecursiveSchemaSet.java", "superclasses": "", "methods": ["[boolean]contains(CacheKey)", "[void]put(CacheKey)"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/model/deferred/RecursiveSchemaSet.java.RecursiveSchemaSet.[boolean]contains(CacheKey)", "src/main/java/org/openapitools/openapidiff/core/model/deferred/RecursiveSchemaSet.java.RecursiveSchemaSet.[void]put(CacheKey)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class RecursiveSchemaSet {\n  HashSet<String> leftKeys = new HashSet<>();\n  HashSet<String> rightKeys = new HashSet<>();\n\n  public boolean contains(CacheKey key) {\n    return leftKeys.contains(key.getLeft()) || rightKeys.contains(key.getRight());\n  }\n\n  public void put(CacheKey key) {\n    leftKeys.add(key.getLeft());\n    leftKeys.add(key.getRight());\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "HashSet<String> leftKeys = new HashSet<>();", "docstring": "", "modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "type": "HashSet<String>", "name": "leftKeys = new HashSet<>()", "syntax_pass": true}, {"attribute_expression": "HashSet<String> rightKeys = new HashSet<>();", "docstring": "", "modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "type": "HashSet<String>", "name": "rightKeys = new HashSet<>()", "syntax_pass": true}]}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredSchemaCache.java.DeferredSchemaCache", "name": "DeferredSchemaCache", "file_path": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredSchemaCache.java", "superclasses": "", "methods": ["[]DeferredSchemaCache(OpenApiDiff)", "[SchemaDiffOperation]addSchema(RecursiveSchemaSet,CacheKey,Schema,Schema)", "[DeferredChanged<ChangedSchema>]getOrAddSchema(RecursiveSchemaSet,CacheKey,Schema,Schema)", "[void]process()", "[void]processSchemaQueue()", "[Collection<SchemaDiffOperation>]getOperations()", "[List<ChangedSchema>]getChangedSchemas()"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredSchemaCache.java.DeferredSchemaCache.[]DeferredSchemaCache(OpenApiDiff)", "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredSchemaCache.java.DeferredSchemaCache.[SchemaDiffOperation]addSchema(RecursiveSchemaSet,CacheKey,Schema,Schema)", "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredSchemaCache.java.DeferredSchemaCache.[DeferredChanged<ChangedSchema>]getOrAddSchema(RecursiveSchemaSet,CacheKey,Schema,Schema)", "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredSchemaCache.java.DeferredSchemaCache.[void]process()", "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredSchemaCache.java.DeferredSchemaCache.[void]processSchemaQueue()", "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredSchemaCache.java.DeferredSchemaCache.[Collection<SchemaDiffOperation>]getOperations()", "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredSchemaCache.java.DeferredSchemaCache.[List<ChangedSchema>]getChangedSchemas()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class DeferredSchemaCache {\n  private static final Logger log = LoggerFactory.getLogger(DeferredSchemaCache.class);\n\n  private final Map<CacheKey, SchemaDiffOperation> cache = new LinkedHashMap<>();\n  private final Queue<CacheKey> processingQueue = new ArrayDeque<>();\n\n  private final OpenApiDiff openApiDiff;\n\n  public DeferredSchemaCache(OpenApiDiff openApiDiff) {\n    this.openApiDiff = openApiDiff;\n  }\n\n  public SchemaDiffOperation addSchema(\n      RecursiveSchemaSet refSet, CacheKey key, Schema left, Schema right) {\n    if (!cache.containsKey(key)) {\n      log.debug(\"Added schema cache {}\", key);\n      SchemaDiffOperation operation =\n          new SchemaDiffOperation(openApiDiff, refSet, key, left, right);\n      cache.put(key, operation);\n      processingQueue.add(key);\n      return operation;\n    } else {\n      return cache.get(key);\n    }\n  }\n\n  public DeferredChanged<ChangedSchema> getOrAddSchema(\n      RecursiveSchemaSet refSet, CacheKey key, Schema left, Schema right) {\n    // don't allow recursive references to schemas\n    if (refSet.contains(key)) {\n      log.debug(\"getOrAddSchema recursive call aborted {} \", key);\n      return DeferredChanged.empty();\n    }\n\n    refSet.put(key);\n    SchemaDiffOperation operation;\n    if (cache.containsKey(key)) {\n      operation = cache.get(key);\n      log.debug(\"getOrAddSchema cached {} {}\", key, operation.diffResult);\n    } else {\n      operation = addSchema(refSet, key, left, right);\n      log.debug(\"getOrAddSchema added {} {}\", key, operation.diffResult);\n    }\n    return operation.diffResult;\n  }\n\n  public void process() {\n    processSchemaQueue();\n    //        while(! deferredOperations.isEmpty()) {\n    //            processSchemaQueue();\n    //            DeferredOperation op = deferredOperations.poll();\n    //            if(op != null) {\n    //                log.debug(\"Processing deferred {}\", op);\n    //                op.process();\n    //            }\n    //        }\n  }\n\n  public void processSchemaQueue() {\n    PendingChanged.logResolved();\n    while (!processingQueue.isEmpty()) {\n      CacheKey key = processingQueue.poll();\n      if (key != null) {\n        log.debug(\"Processing schema {}\", key);\n        SchemaDiffOperation operation = cache.get(key);\n        DeferredChanged<ChangedSchema> realValue =\n            operation\n                .openApiDiff\n                .getSchemaDiff()\n                .computeDiffForReal(\n                    operation.refSet, operation.left, operation.right, key.getContext());\n        operation.processed = true;\n        realValue.whenSet(\n            value -> {\n              log.debug(\"Schema processed {} {}\", key, DeferredLogger.logValue(value));\n              operation.diffResult.setValue(value);\n            });\n        log.debug(\"Processing schema started {}\", key);\n      }\n      PendingChanged.logResolved();\n    }\n  }\n\n  public Collection<SchemaDiffOperation> getOperations() {\n    return cache.values();\n  }\n\n  public List<ChangedSchema> getChangedSchemas() {\n    return cache.values().stream()\n        .filter(op -> op.processed && op.diffResult.isPresent())\n        .map(op -> op.diffResult.get())\n        .collect(Collectors.toList());\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final Logger log = LoggerFactory.getLogger(DeferredSchemaCache.class);", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "Logger", "name": "log = LoggerFactory.getLogger(DeferredSchemaCache.class)", "syntax_pass": true}, {"attribute_expression": "private final Map<CacheKey, SchemaDiffOperation> cache = new LinkedHashMap<>();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Map<CacheKey, SchemaDiffOperation>", "name": "cache = new LinkedHashMap<>()", "syntax_pass": true}, {"attribute_expression": "private final Queue<CacheKey> processingQueue = new ArrayDeque<>();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Queue<CacheKey>", "name": "processingQueue = new ArrayDeque<>()", "syntax_pass": true}, {"attribute_expression": "private final OpenApiDiff openApiDiff;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "OpenApiDiff", "name": "openApiDiff", "syntax_pass": true}]}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedReadOnly.java.ChangedReadOnly", "name": "ChangedReadOnly", "file_path": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedReadOnly.java", "superclasses": "", "methods": ["[]ChangedReadOnly(Boolean,Boolean,DiffContext)", "[DiffResult]isChanged()"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedReadOnly.java.ChangedReadOnly.[]ChangedReadOnly(Boolean,Boolean,DiffContext)", "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedReadOnly.java.ChangedReadOnly.[DiffResult]isChanged()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class ChangedReadOnly implements Changed {\n  private final DiffContext context;\n  private final boolean oldValue;\n  private final boolean newValue;\n  //    private final boolean required;\n\n  public ChangedReadOnly(Boolean oldValue, Boolean newValue, DiffContext context) {\n    this.context = context;\n    this.oldValue = Optional.ofNullable(oldValue).orElse(false);\n    this.newValue = Optional.ofNullable(newValue).orElse(false);\n    //        this.required = required;\n  }\n\n  @Override\n  public DiffResult isChanged() {\n    if (Objects.equals(oldValue, newValue)) {\n      return DiffResult.NO_CHANGES;\n    }\n    if (context.isResponse()) {\n      return DiffResult.COMPATIBLE;\n    }\n    if (context.isRequest()) {\n      if (Boolean.TRUE.equals(newValue)) {\n        if (REQUEST_READONLY_INCREASED.enabled(context)) {\n          return DiffResult.INCOMPATIBLE;\n        }\n      } else if (context.isRequired()) {\n        // Incompatible because a prev RO prop (invalid) is now not RO and required\n        if (REQUEST_READONLY_REQUIRED_DECREASED.enabled(context)) {\n          return DiffResult.INCOMPATIBLE;\n        }\n      }\n      return DiffResult.COMPATIBLE;\n    }\n    return DiffResult.UNKNOWN;\n  }\n}", "super_interfaces": ["Changed"], "fields": [{"attribute_expression": "private final DiffContext context;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "DiffContext", "name": "context", "syntax_pass": true}, {"attribute_expression": "private final boolean oldValue;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "boolean", "name": "oldValue", "syntax_pass": true}, {"attribute_expression": "private final boolean newValue;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "boolean", "name": "newValue", "syntax_pass": true}]}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedWriteOnly.java.ChangedWriteOnly", "name": "ChangedWriteOnly", "file_path": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedWriteOnly.java", "superclasses": "", "methods": ["[]ChangedWriteOnly(Boolean,Boolean,DiffContext)", "[DiffResult]isChanged()"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedWriteOnly.java.ChangedWriteOnly.[]ChangedWriteOnly(Boolean,Boolean,DiffContext)", "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedWriteOnly.java.ChangedWriteOnly.[DiffResult]isChanged()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class ChangedWriteOnly implements Changed {\n  private final DiffContext context;\n  private final boolean oldValue;\n  private final boolean newValue;\n  //    private final boolean required;\n\n  public ChangedWriteOnly(Boolean oldValue, Boolean newValue, DiffContext context) {\n    this.context = context;\n    this.oldValue = Optional.ofNullable(oldValue).orElse(false);\n    this.newValue = Optional.ofNullable(newValue).orElse(false);\n    //        this.required = required;\n  }\n\n  @Override\n  public DiffResult isChanged() {\n    if (Objects.equals(oldValue, newValue)) {\n      return DiffResult.NO_CHANGES;\n    }\n    if (context.isRequest()) {\n      return DiffResult.COMPATIBLE;\n    }\n    if (context.isResponse()) {\n      if (Boolean.TRUE.equals(newValue)) {\n        if (RESPONSE_WRITEONLY_INCREASED.enabled(context)) {\n          return DiffResult.INCOMPATIBLE;\n        }\n      } else if (context.isRequired()) {\n        if (RESPONSE_WRITEONLY_REQUIRED_DECREASED.enabled(context)) {\n          return DiffResult.INCOMPATIBLE;\n        }\n      }\n      return DiffResult.COMPATIBLE;\n    }\n    return DiffResult.UNKNOWN;\n  }\n}", "super_interfaces": ["Changed"], "fields": [{"attribute_expression": "private final DiffContext context;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "DiffContext", "name": "context", "syntax_pass": true}, {"attribute_expression": "private final boolean oldValue;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "boolean", "name": "oldValue", "syntax_pass": true}, {"attribute_expression": "private final boolean newValue;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "boolean", "name": "newValue", "syntax_pass": true}]}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedNumericRange.java.ChangedNumericRange", "name": "ChangedNumericRange", "file_path": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedNumericRange.java", "superclasses": "", "methods": ["[DiffResult]isChanged()", "[int]compare(BigDecimal,BigDecimal,boolean)", "[]ChangedNumericRange(BigDecimal,BigDecimal,BigDecimal,BigDecimal,Boolean,Boolean,Boolean,Boolean,DiffContext)", "[BigDecimal]getOldMinimumValue()", "[BigDecimal]getNewMinimumValue()", "[BigDecimal]getOldMaximumValue()", "[BigDecimal]getNewMaximumValue()", "[Boolean]getOldMinimumExclusiveValue()", "[Boolean]getNewMinimumExclusiveValue()", "[Boolean]getOldMaximumExclusiveValue()", "[Boolean]getNewMaximumExclusiveValue()", "[DiffContext]getContext()", "[boolean]equals(Object)", "[int]hashCode()", "[String]toString()"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedNumericRange.java.ChangedNumericRange.[DiffResult]isChanged()", "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedNumericRange.java.ChangedNumericRange.[int]compare(BigDecimal,BigDecimal,boolean)", "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedNumericRange.java.ChangedNumericRange.[]ChangedNumericRange(BigDecimal,BigDecimal,BigDecimal,BigDecimal,Boolean,Boolean,Boolean,Boolean,DiffContext)", "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedNumericRange.java.ChangedNumericRange.[BigDecimal]getOldMinimumValue()", "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedNumericRange.java.ChangedNumericRange.[BigDecimal]getNewMinimumValue()", "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedNumericRange.java.ChangedNumericRange.[BigDecimal]getOldMaximumValue()", "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedNumericRange.java.ChangedNumericRange.[BigDecimal]getNewMaximumValue()", "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedNumericRange.java.ChangedNumericRange.[Boolean]getOldMinimumExclusiveValue()", "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedNumericRange.java.ChangedNumericRange.[Boolean]getNewMinimumExclusiveValue()", "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedNumericRange.java.ChangedNumericRange.[Boolean]getOldMaximumExclusiveValue()", "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedNumericRange.java.ChangedNumericRange.[Boolean]getNewMaximumExclusiveValue()", "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedNumericRange.java.ChangedNumericRange.[DiffContext]getContext()", "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedNumericRange.java.ChangedNumericRange.[boolean]equals(Object)", "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedNumericRange.java.ChangedNumericRange.[int]hashCode()", "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedNumericRange.java.ChangedNumericRange.[String]toString()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class ChangedNumericRange implements Changed {\n  private final BigDecimal oldMinimumValue;\n  private final BigDecimal newMinimumValue;\n  private final BigDecimal oldMaximumValue;\n  private final BigDecimal newMaximumValue;\n  private final Boolean oldMinimumExclusiveValue;\n  private final Boolean newMinimumExclusiveValue;\n  private final Boolean oldMaximumExclusiveValue;\n  private final Boolean newMaximumExclusiveValue;\n  private final DiffContext context;\n\n  @Override\n  public DiffResult isChanged() {\n    if (Objects.equals(oldMinimumValue, newMinimumValue)\n        && Objects.equals(oldMaximumValue, newMaximumValue)\n        && Objects.equals(oldMinimumExclusiveValue, newMinimumExclusiveValue)\n        && Objects.equals(oldMaximumExclusiveValue, newMaximumExclusiveValue)) {\n      return DiffResult.NO_CHANGES;\n    }\n\n    if ((context.isRequest() && !REQUEST_NUMERIC_RANGE_DECREASED.enabled(context))\n        || (context.isResponse() && !RESPONSE_NUMERIC_RANGE_INCREASED.enabled(context))) {\n      return DiffResult.COMPATIBLE;\n    }\n\n    boolean exclusiveMaxOld = oldMaximumExclusiveValue != null && oldMaximumExclusiveValue;\n    boolean exclusiveMinOld = oldMinimumExclusiveValue != null && oldMinimumExclusiveValue;\n    boolean exclusiveMaxNew = newMaximumExclusiveValue != null && newMaximumExclusiveValue;\n    boolean exclusiveMinNew = newMinimumExclusiveValue != null && newMinimumExclusiveValue;\n    int diffMax = compare(oldMaximumValue, newMaximumValue, false);\n    int diffMin = compare(oldMinimumValue, newMinimumValue, true);\n\n    if (context.isRequest()) {\n      if (diffMax > 0 || (diffMax == 0 && !exclusiveMaxOld && exclusiveMaxNew)) {\n        return DiffResult.INCOMPATIBLE;\n      }\n      if (diffMin < 0 || (diffMin == 0 && !exclusiveMinOld && exclusiveMinNew)) {\n        return DiffResult.INCOMPATIBLE;\n      }\n    } else if (context.isResponse()) {\n      if (diffMax < 0 || (diffMax == 0 && exclusiveMaxOld && !exclusiveMaxNew)) {\n        return DiffResult.INCOMPATIBLE;\n      }\n      if (diffMin > 0 || (diffMin == 0 && exclusiveMinOld && !exclusiveMinNew)) {\n        return DiffResult.INCOMPATIBLE;\n      }\n    }\n    return DiffResult.COMPATIBLE;\n  }\n\n  private int compare(BigDecimal left, BigDecimal right, boolean nullMeansLessThan) {\n    if (left == null && right == null) {\n      return 0;\n    }\n    if (left == null) {\n      return nullMeansLessThan ? -1 : 1;\n    }\n    if (right == null) {\n      return nullMeansLessThan ? 1 : -1;\n    }\n    return left.unscaledValue().compareTo(right.unscaledValue());\n  }\n\n  public ChangedNumericRange(\n      final BigDecimal oldMinimumValue,\n      final BigDecimal newMinimumValue,\n      final BigDecimal oldMaximumValue,\n      final BigDecimal newMaximumValue,\n      final Boolean oldMinimumExclusiveValue,\n      final Boolean newMinimumExclusiveValue,\n      final Boolean oldMaximumExclusiveValue,\n      final Boolean newMaximumExclusiveValue,\n      final DiffContext context) {\n    this.oldMinimumValue = oldMinimumValue;\n    this.newMinimumValue = newMinimumValue;\n    this.oldMaximumValue = oldMaximumValue;\n    this.newMaximumValue = newMaximumValue;\n    this.oldMinimumExclusiveValue = oldMinimumExclusiveValue;\n    this.newMinimumExclusiveValue = newMinimumExclusiveValue;\n    this.oldMaximumExclusiveValue = oldMaximumExclusiveValue;\n    this.newMaximumExclusiveValue = newMaximumExclusiveValue;\n    this.context = context;\n  }\n\n  public BigDecimal getOldMinimumValue() {\n    return oldMinimumValue;\n  }\n\n  public BigDecimal getNewMinimumValue() {\n    return newMinimumValue;\n  }\n\n  public BigDecimal getOldMaximumValue() {\n    return oldMaximumValue;\n  }\n\n  public BigDecimal getNewMaximumValue() {\n    return newMaximumValue;\n  }\n\n  public Boolean getOldMinimumExclusiveValue() {\n    return oldMinimumExclusiveValue;\n  }\n\n  public Boolean getNewMinimumExclusiveValue() {\n    return newMinimumExclusiveValue;\n  }\n\n  public Boolean getOldMaximumExclusiveValue() {\n    return oldMaximumExclusiveValue;\n  }\n\n  public Boolean getNewMaximumExclusiveValue() {\n    return newMaximumExclusiveValue;\n  }\n\n  public DiffContext getContext() {\n    return this.context;\n  }\n\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    ChangedNumericRange that = (ChangedNumericRange) o;\n    return Objects.equals(oldMinimumValue, newMinimumValue)\n        && Objects.equals(oldMaximumValue, newMaximumValue)\n        && Objects.equals(oldMinimumExclusiveValue, newMinimumExclusiveValue)\n        && Objects.equals(oldMaximumExclusiveValue, newMaximumExclusiveValue)\n        && Objects.equals(context, that.context);\n  }\n\n  @Override\n  public int hashCode() {\n    return Objects.hash(\n        oldMinimumValue,\n        newMinimumValue,\n        oldMaximumValue,\n        newMaximumValue,\n        oldMinimumExclusiveValue,\n        newMinimumExclusiveValue,\n        oldMaximumExclusiveValue,\n        newMaximumExclusiveValue,\n        context);\n  }\n\n  @Override\n  public String toString() {\n    return \"ChangedNumericRange(\"\n        + \"oldMinimumValue=\"\n        + oldMinimumValue\n        + \", newMinimumValue=\"\n        + newMinimumValue\n        + \", oldMaximumValue=\"\n        + oldMaximumValue\n        + \", newMaximumValue=\"\n        + newMaximumValue\n        + \", oldMinimumExclusiveValue=\"\n        + oldMinimumExclusiveValue\n        + \", newMinimumExclusiveValue=\"\n        + newMinimumExclusiveValue\n        + \", oldMaximumExclusiveValue=\"\n        + oldMaximumExclusiveValue\n        + \", newMaximumExclusiveValue=\"\n        + newMaximumExclusiveValue\n        + \", context=\"\n        + context\n        + ')';\n  }\n}", "super_interfaces": ["Changed"], "fields": [{"attribute_expression": "private final BigDecimal oldMinimumValue;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "BigDecimal", "name": "oldMinimumValue", "syntax_pass": true}, {"attribute_expression": "private final BigDecimal newMinimumValue;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "BigDecimal", "name": "newMinimumValue", "syntax_pass": true}, {"attribute_expression": "private final BigDecimal oldMaximumValue;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "BigDecimal", "name": "oldMaximumValue", "syntax_pass": true}, {"attribute_expression": "private final BigDecimal newMaximumValue;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "BigDecimal", "name": "newMaximumValue", "syntax_pass": true}, {"attribute_expression": "private final Boolean oldMinimumExclusiveValue;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Boolean", "name": "oldMinimumExclusiveValue", "syntax_pass": true}, {"attribute_expression": "private final Boolean newMinimumExclusiveValue;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Boolean", "name": "newMinimumExclusiveValue", "syntax_pass": true}, {"attribute_expression": "private final Boolean oldMaximumExclusiveValue;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Boolean", "name": "oldMaximumExclusiveValue", "syntax_pass": true}, {"attribute_expression": "private final Boolean newMaximumExclusiveValue;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Boolean", "name": "newMaximumExclusiveValue", "syntax_pass": true}, {"attribute_expression": "private final DiffContext context;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "DiffContext", "name": "context", "syntax_pass": true}]}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedEnum.java.ChangedEnum", "name": "ChangedEnum", "file_path": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedEnum.java", "superclasses": "", "methods": ["[]ChangedEnum(List<T>,List<T>,DiffContext)", "[DiffResult]isItemsChanged()"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedEnum.java.ChangedEnum.[]ChangedEnum(List<T>,List<T>,DiffContext)", "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedEnum.java.ChangedEnum.[DiffResult]isItemsChanged()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class ChangedEnum<T> extends ChangedList<T> {\n\n  public ChangedEnum(List<T> oldValue, List<T> newValue, DiffContext context) {\n    super(oldValue, newValue, context);\n  }\n\n  @Override\n  public DiffResult isItemsChanged() {\n    if (context.isRequest() && !getMissing().isEmpty()) {\n      if (REQUEST_ENUM_DECREASED.enabled(context)) {\n        return DiffResult.INCOMPATIBLE;\n      }\n    }\n    if (context.isResponse() && !getIncreased().isEmpty()) {\n      if (RESPONSE_ENUM_INCREASED.enabled(context)) {\n        return DiffResult.INCOMPATIBLE;\n      }\n    }\n    return DiffResult.COMPATIBLE;\n  }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedRequired.java.ChangedRequired", "name": "ChangedRequired", "file_path": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedRequired.java", "superclasses": "", "methods": ["[]ChangedRequired(List<String>,List<String>,DiffContext)", "[DiffResult]isItemsChanged()"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedRequired.java.ChangedRequired.[]ChangedRequired(List<String>,List<String>,DiffContext)", "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedRequired.java.ChangedRequired.[DiffResult]isItemsChanged()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class ChangedRequired extends ChangedList<String> {\n\n  public ChangedRequired(List<String> oldValue, List<String> newValue, DiffContext context) {\n    super(oldValue, newValue, context);\n  }\n\n  @Override\n  public DiffResult isItemsChanged() {\n    if (context.isRequest() && !getIncreased().isEmpty()) {\n      if (REQUEST_REQUIRED_INCREASED.enabled(context)) {\n        return DiffResult.INCOMPATIBLE;\n      }\n    }\n    if (context.isResponse() && !getMissing().isEmpty()) {\n      if (RESPONSE_REQUIRED_DECREASED.enabled(context)) {\n        return DiffResult.INCOMPATIBLE;\n      }\n    }\n    return DiffResult.COMPATIBLE;\n  }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedMaxLength.java.ChangedMaxLength", "name": "ChangedMaxLength", "file_path": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedMaxLength.java", "superclasses": "", "methods": ["[DiffResult]isChanged()", "[]ChangedMaxLength(Integer,Integer,DiffContext)", "[Integer]getOldValue()", "[Integer]getNewValue()", "[DiffContext]getContext()", "[boolean]equals(Object)", "[int]hashCode()", "[java.lang.String]toString()"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedMaxLength.java.ChangedMaxLength.[DiffResult]isChanged()", "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedMaxLength.java.ChangedMaxLength.[]ChangedMaxLength(Integer,Integer,DiffContext)", "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedMaxLength.java.ChangedMaxLength.[Integer]getOldValue()", "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedMaxLength.java.ChangedMaxLength.[Integer]getNewValue()", "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedMaxLength.java.ChangedMaxLength.[DiffContext]getContext()", "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedMaxLength.java.ChangedMaxLength.[boolean]equals(Object)", "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedMaxLength.java.ChangedMaxLength.[int]hashCode()", "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedMaxLength.java.ChangedMaxLength.[java.lang.String]toString()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class ChangedMaxLength implements Changed {\n  private final Integer oldValue;\n  private final Integer newValue;\n  private final DiffContext context;\n\n  @Override\n  public DiffResult isChanged() {\n    if (Objects.equals(oldValue, newValue)) {\n      return DiffResult.NO_CHANGES;\n    }\n    if (context.isRequest() && (oldValue == null || newValue != null && newValue < oldValue)) {\n      if (REQUEST_MAX_LENGTH_DECREASED.enabled(context)) {\n        return DiffResult.INCOMPATIBLE;\n      }\n    }\n    if (context.isResponse() && (newValue == null || oldValue != null && newValue > oldValue)) {\n      if (RESPONSE_MAX_LENGTH_INCREASED.enabled(context)) {\n        return DiffResult.INCOMPATIBLE;\n      }\n    }\n    return DiffResult.COMPATIBLE;\n  }\n\n  public ChangedMaxLength(\n      final Integer oldValue, final Integer newValue, final DiffContext context) {\n    this.oldValue = oldValue;\n    this.newValue = newValue;\n    this.context = context;\n  }\n\n  public Integer getOldValue() {\n    return this.oldValue;\n  }\n\n  public Integer getNewValue() {\n    return this.newValue;\n  }\n\n  public DiffContext getContext() {\n    return this.context;\n  }\n\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    ChangedMaxLength that = (ChangedMaxLength) o;\n    return Objects.equals(oldValue, that.oldValue)\n        && Objects.equals(newValue, that.newValue)\n        && Objects.equals(context, that.context);\n  }\n\n  @Override\n  public int hashCode() {\n    return Objects.hash(oldValue, newValue, context);\n  }\n\n  @java.lang.Override\n  public java.lang.String toString() {\n    return \"ChangedMaxLength(oldValue=\"\n        + this.getOldValue()\n        + \", newValue=\"\n        + this.getNewValue()\n        + \", context=\"\n        + this.getContext()\n        + \")\";\n  }\n}", "super_interfaces": ["Changed"], "fields": [{"attribute_expression": "private final Integer oldValue;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Integer", "name": "oldValue", "syntax_pass": true}, {"attribute_expression": "private final Integer newValue;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Integer", "name": "newValue", "syntax_pass": true}, {"attribute_expression": "private final DiffContext context;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "DiffContext", "name": "context", "syntax_pass": true}]}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo.java.SecurityDiffInfo", "name": "SecurityDiffInfo", "file_path": "src/main/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo.java", "superclasses": "", "methods": ["[]SecurityDiffInfo(String,SecurityScheme,List<String>)", "[SecurityRequirement]getSecurityRequirement(List<SecurityDiffInfo>)", "[Optional<List<SecurityDiffInfo>>]containsList(List<List<SecurityDiffInfo>>,List<SecurityDiffInfo>)", "[boolean]sameList(List<SecurityDiffInfo>,List<SecurityDiffInfo>)", "[boolean]equals(Object)", "[int]hashCode()", "[String]getRef()", "[SecurityScheme]getSecurityScheme()", "[List<String>]getScopes()", "[void]setRef(String)", "[void]setSecurityScheme(SecurityScheme)", "[void]setScopes(List<String>)", "[java.lang.String]toString()"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo.java.SecurityDiffInfo.[]SecurityDiffInfo(String,SecurityScheme,List<String>)", "src/main/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo.java.SecurityDiffInfo.[SecurityRequirement]getSecurityRequirement(List<SecurityDiffInfo>)", "src/main/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo.java.SecurityDiffInfo.[Optional<List<SecurityDiffInfo>>]containsList(List<List<SecurityDiffInfo>>,List<SecurityDiffInfo>)", "src/main/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo.java.SecurityDiffInfo.[boolean]sameList(List<SecurityDiffInfo>,List<SecurityDiffInfo>)", "src/main/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo.java.SecurityDiffInfo.[boolean]equals(Object)", "src/main/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo.java.SecurityDiffInfo.[int]hashCode()", "src/main/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo.java.SecurityDiffInfo.[String]getRef()", "src/main/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo.java.SecurityDiffInfo.[SecurityScheme]getSecurityScheme()", "src/main/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo.java.SecurityDiffInfo.[List<String>]getScopes()", "src/main/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo.java.SecurityDiffInfo.[void]setRef(String)", "src/main/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo.java.SecurityDiffInfo.[void]setSecurityScheme(SecurityScheme)", "src/main/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo.java.SecurityDiffInfo.[void]setScopes(List<String>)", "src/main/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo.java.SecurityDiffInfo.[java.lang.String]toString()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class SecurityDiffInfo {\n  private String ref;\n  private SecurityScheme securityScheme;\n  private List<String> scopes;\n\n  public SecurityDiffInfo(\n      final String ref, final SecurityScheme securityScheme, final List<String> scopes) {\n    this.ref = ref;\n    this.securityScheme = securityScheme;\n    this.scopes = scopes;\n  }\n\n  public static SecurityRequirement getSecurityRequirement(\n      List<SecurityDiffInfo> securityDiffInfoList) {\n    SecurityRequirement securityRequirement = new SecurityRequirement();\n    for (SecurityDiffInfo securityDiffInfo : securityDiffInfoList) {\n      securityRequirement.put(securityDiffInfo.getRef(), securityDiffInfo.getScopes());\n    }\n    return securityRequirement;\n  }\n\n  public static Optional<List<SecurityDiffInfo>> containsList(\n      List<List<SecurityDiffInfo>> securityRequirements, List<SecurityDiffInfo> leftSecurities) {\n    return securityRequirements.stream()\n        .filter(rightSecurities -> sameList(leftSecurities, rightSecurities))\n        .findFirst();\n  }\n\n  public static boolean sameList(\n      List<SecurityDiffInfo> leftSecurities, List<SecurityDiffInfo> rightSecurities) {\n    return ListDiff.diff(new ChangedList.SimpleChangedList<>(leftSecurities, rightSecurities))\n        .isUnchanged();\n  }\n\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    SecurityDiffInfo that = (SecurityDiffInfo) o;\n    if (securityScheme != null\n        ? !securityScheme.equals(that.securityScheme)\n        : that.securityScheme != null) {\n      return false;\n    }\n    return scopes != null ? scopes.equals(that.scopes) : that.scopes == null;\n  }\n\n  @Override\n  public int hashCode() {\n    int result = securityScheme != null ? securityScheme.hashCode() : 0;\n    result = 31 * result + (scopes != null ? scopes.hashCode() : 0);\n    return result;\n  }\n\n  public String getRef() {\n    return this.ref;\n  }\n\n  public SecurityScheme getSecurityScheme() {\n    return this.securityScheme;\n  }\n\n  public List<String> getScopes() {\n    return this.scopes;\n  }\n\n  public void setRef(final String ref) {\n    this.ref = ref;\n  }\n\n  public void setSecurityScheme(final SecurityScheme securityScheme) {\n    this.securityScheme = securityScheme;\n  }\n\n  public void setScopes(final List<String> scopes) {\n    this.scopes = scopes;\n  }\n\n  @java.lang.Override\n  public java.lang.String toString() {\n    return \"SecurityDiffInfo(ref=\"\n        + this.getRef()\n        + \", securityScheme=\"\n        + this.getSecurityScheme()\n        + \", scopes=\"\n        + this.getScopes()\n        + \")\";\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private String ref;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "ref", "syntax_pass": true}, {"attribute_expression": "private SecurityScheme securityScheme;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "SecurityScheme", "name": "securityScheme", "syntax_pass": true}, {"attribute_expression": "private List<String> scopes;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "List<String>", "name": "scopes", "syntax_pass": true}]}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/OAuthFlowsDiff.java.OAuthFlowsDiff", "name": "OAuthFlowsDiff", "file_path": "src/main/java/org/openapitools/openapidiff/core/compare/OAuthFlowsDiff.java", "superclasses": "", "methods": ["[]OAuthFlowsDiff(OpenApiDiff)", "[Map<String, Object>]getExtensions(OAuthFlows)", "[Optional<ChangedOAuthFlows>]diff(OAuthFlows,OAuthFlows,DiffContext)"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/compare/OAuthFlowsDiff.java.OAuthFlowsDiff.[]OAuthFlowsDiff(OpenApiDiff)", "src/main/java/org/openapitools/openapidiff/core/compare/OAuthFlowsDiff.java.OAuthFlowsDiff.[Map<String, Object>]getExtensions(OAuthFlows)", "src/main/java/org/openapitools/openapidiff/core/compare/OAuthFlowsDiff.java.OAuthFlowsDiff.[Optional<ChangedOAuthFlows>]diff(OAuthFlows,OAuthFlows,DiffContext)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class OAuthFlowsDiff {\n  private final OpenApiDiff openApiDiff;\n\n  public OAuthFlowsDiff(OpenApiDiff openApiDiff) {\n    this.openApiDiff = openApiDiff;\n  }\n\n  private static Map<String, Object> getExtensions(OAuthFlows oAuthFlow) {\n    return ofNullable(oAuthFlow).map(OAuthFlows::getExtensions).orElse(null);\n  }\n\n  public Optional<ChangedOAuthFlows> diff(OAuthFlows left, OAuthFlows right, DiffContext context) {\n    ChangedOAuthFlows changedOAuthFlows = new ChangedOAuthFlows(left, right);\n    if (left != null && right != null) {\n      openApiDiff\n          .getOAuthFlowDiff()\n          .diff(left.getImplicit(), right.getImplicit(), context)\n          .ifPresent(changedOAuthFlows::setImplicitOAuthFlow);\n      openApiDiff\n          .getOAuthFlowDiff()\n          .diff(left.getPassword(), right.getPassword(), context)\n          .ifPresent(changedOAuthFlows::setPasswordOAuthFlow);\n      openApiDiff\n          .getOAuthFlowDiff()\n          .diff(left.getClientCredentials(), right.getClientCredentials(), context)\n          .ifPresent(changedOAuthFlows::setClientCredentialOAuthFlow);\n      openApiDiff\n          .getOAuthFlowDiff()\n          .diff(left.getAuthorizationCode(), right.getAuthorizationCode(), context)\n          .ifPresent(changedOAuthFlows::setAuthorizationCodeOAuthFlow);\n    }\n    openApiDiff\n        .getExtensionsDiff()\n        .diff(getExtensions(left), getExtensions(right))\n        .ifPresent(changedOAuthFlows::setExtensions);\n    return isChanged(changedOAuthFlows);\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final OpenApiDiff openApiDiff;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "OpenApiDiff", "name": "openApiDiff", "syntax_pass": true}]}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/MapKeyDiff.java.MapKeyDiff", "name": "MapKeyDiff", "file_path": "src/main/java/org/openapitools/openapidiff/core/compare/MapKeyDiff.java", "superclasses": "", "methods": ["[]MapKeyDiff()", "[MapKeyDiff<K, V>]diff(Map<K, V>,Map<K, V>)", "[Map<K, V>]getIncreased()", "[Map<K, V>]getMissing()", "[List<K>]getSharedKey()"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/compare/MapKeyDiff.java.MapKeyDiff.[]MapKeyDiff()", "src/main/java/org/openapitools/openapidiff/core/compare/MapKeyDiff.java.MapKeyDiff.[MapKeyDiff<K, V>]diff(Map<K, V>,Map<K, V>)", "src/main/java/org/openapitools/openapidiff/core/compare/MapKeyDiff.java.MapKeyDiff.[Map<K, V>]getIncreased()", "src/main/java/org/openapitools/openapidiff/core/compare/MapKeyDiff.java.MapKeyDiff.[Map<K, V>]getMissing()", "src/main/java/org/openapitools/openapidiff/core/compare/MapKeyDiff.java.MapKeyDiff.[List<K>]getSharedKey()"], "overrides": null, "attributes": [], "class_docstring": " compare two Maps by key", "original_string": "public class MapKeyDiff<K, V> {\n\n  private Map<K, V> increased;\n  private Map<K, V> missing;\n  private final List<K> sharedKey;\n\n  private MapKeyDiff() {\n    this.sharedKey = new ArrayList<>();\n    this.increased = new LinkedHashMap<>();\n    this.missing = new LinkedHashMap<>();\n  }\n\n  public static <K, V> MapKeyDiff<K, V> diff(Map<K, V> mapLeft, Map<K, V> mapRight) {\n    MapKeyDiff<K, V> instance = new MapKeyDiff<>();\n    if (null == mapLeft && null == mapRight) return instance;\n    if (null == mapLeft) {\n      instance.increased = mapRight;\n      return instance;\n    }\n    if (null == mapRight) {\n      instance.missing = mapLeft;\n      return instance;\n    }\n    instance.increased = new LinkedHashMap<>(mapRight);\n    instance.missing = new LinkedHashMap<>();\n    for (Entry<K, V> entry : mapLeft.entrySet()) {\n      K leftKey = entry.getKey();\n      V leftValue = entry.getValue();\n      if (mapRight.containsKey(leftKey)) {\n        instance.increased.remove(leftKey);\n        instance.sharedKey.add(leftKey);\n\n      } else {\n        instance.missing.put(leftKey, leftValue);\n      }\n    }\n    return instance;\n  }\n\n  public Map<K, V> getIncreased() {\n    return increased;\n  }\n\n  public Map<K, V> getMissing() {\n    return missing;\n  }\n\n  public List<K> getSharedKey() {\n    return sharedKey;\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private Map<K, V> increased;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Map<K, V>", "name": "increased", "syntax_pass": true}, {"attribute_expression": "private Map<K, V> missing;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Map<K, V>", "name": "missing", "syntax_pass": true}, {"attribute_expression": "private final List<K> sharedKey;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "List<K>", "name": "sharedKey", "syntax_pass": true}]}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/SchemaDiff.java.SchemaDiff", "name": "SchemaDiff", "file_path": "src/main/java/org/openapitools/openapidiff/core/compare/SchemaDiff.java", "superclasses": "", "methods": ["[]SchemaDiff(OpenApiDiff)", "[SchemaDiffResult]getSchemaDiffResult(OpenApiDiff)", "[SchemaDiffResult]getSchemaDiffResult(Class<? extends Schema>,OpenApiDiff)", "[Schema<?>]resolveComposedSchema(Components,Schema<?>,Set<String>)", "[Schema<?>]addSchema(Schema<?>,Schema<?>)", "[String]getSchemaRef(Schema<?>)", "[DeferredChanged<ChangedSchema>]diff(Schema,Schema,DiffContext)", "[DeferredChanged<ChangedSchema>]diff(RecursiveSchemaSet,Schema,Schema,DiffContext)", "[DeferredChanged<ChangedSchema>]getTypeChangedSchema(Schema,Schema,DiffContext)", "[DeferredChanged<ChangedSchema>]computeDeferredDiff(RecursiveSchemaSet,Schema<?>,Schema<?>,DiffContext)", "[DeferredChanged<ChangedSchema>]computeDiffForReal(RecursiveSchemaSet,Schema,Schema,DiffContext)"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/compare/SchemaDiff.java.SchemaDiff.[]SchemaDiff(OpenApiDiff)", "src/main/java/org/openapitools/openapidiff/core/compare/SchemaDiff.java.SchemaDiff.[SchemaDiffResult]getSchemaDiffResult(OpenApiDiff)", "src/main/java/org/openapitools/openapidiff/core/compare/SchemaDiff.java.SchemaDiff.[SchemaDiffResult]getSchemaDiffResult(Class<? extends Schema>,OpenApiDiff)", "src/main/java/org/openapitools/openapidiff/core/compare/SchemaDiff.java.SchemaDiff.[Schema<?>]resolveComposedSchema(Components,Schema<?>,Set<String>)", "src/main/java/org/openapitools/openapidiff/core/compare/SchemaDiff.java.SchemaDiff.[Schema<?>]addSchema(Schema<?>,Schema<?>)", "src/main/java/org/openapitools/openapidiff/core/compare/SchemaDiff.java.SchemaDiff.[String]getSchemaRef(Schema<?>)", "src/main/java/org/openapitools/openapidiff/core/compare/SchemaDiff.java.SchemaDiff.[DeferredChanged<ChangedSchema>]diff(Schema,Schema,DiffContext)", "src/main/java/org/openapitools/openapidiff/core/compare/SchemaDiff.java.SchemaDiff.[DeferredChanged<ChangedSchema>]diff(RecursiveSchemaSet,Schema,Schema,DiffContext)", "src/main/java/org/openapitools/openapidiff/core/compare/SchemaDiff.java.SchemaDiff.[DeferredChanged<ChangedSchema>]getTypeChangedSchema(Schema,Schema,DiffContext)", "src/main/java/org/openapitools/openapidiff/core/compare/SchemaDiff.java.SchemaDiff.[DeferredChanged<ChangedSchema>]computeDeferredDiff(RecursiveSchemaSet,Schema<?>,Schema<?>,DiffContext)", "src/main/java/org/openapitools/openapidiff/core/compare/SchemaDiff.java.SchemaDiff.[DeferredChanged<ChangedSchema>]computeDiffForReal(RecursiveSchemaSet,Schema,Schema,DiffContext)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class SchemaDiff {\n\n  private static final RefPointer<Schema<?>> refPointer = new RefPointer<>(RefType.SCHEMAS);\n  private static final Map<Class<? extends Schema>, Class<? extends SchemaDiffResult>>\n      schemaDiffResultClassMap = new LinkedHashMap<>();\n\n  static {\n    schemaDiffResultClassMap.put(Schema.class, SchemaDiffResult.class);\n    schemaDiffResultClassMap.put(ArraySchema.class, ArraySchemaDiffResult.class);\n    schemaDiffResultClassMap.put(ComposedSchema.class, ComposedSchemaDiffResult.class);\n  }\n\n  private final Components leftComponents;\n  private final Components rightComponents;\n  private final OpenApiDiff openApiDiff;\n\n  public SchemaDiff(OpenApiDiff openApiDiff) {\n    this.openApiDiff = openApiDiff;\n    this.leftComponents =\n        openApiDiff.getOldSpecOpenApi() != null\n            ? openApiDiff.getOldSpecOpenApi().getComponents()\n            : null;\n    this.rightComponents =\n        openApiDiff.getNewSpecOpenApi() != null\n            ? openApiDiff.getNewSpecOpenApi().getComponents()\n            : null;\n  }\n\n  public static SchemaDiffResult getSchemaDiffResult(OpenApiDiff openApiDiff) {\n    return getSchemaDiffResult(null, openApiDiff);\n  }\n\n  public static SchemaDiffResult getSchemaDiffResult(\n      Class<? extends Schema> classType, OpenApiDiff openApiDiff) {\n    if (classType == null) {\n      classType = Schema.class;\n    }\n\n    Class<? extends SchemaDiffResult> aClass = schemaDiffResultClassMap.get(classType);\n    try {\n      if (aClass == null) {\n        aClass = schemaDiffResultClassMap.get(Schema.class);\n      }\n      if (aClass != null) {\n        return aClass.getConstructor(OpenApiDiff.class).newInstance(openApiDiff);\n      } else {\n        throw new IllegalArgumentException(\"invalid classType\");\n      }\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"type \" + classType + \" is illegal\");\n    }\n  }\n\n  protected static Schema<?> resolveComposedSchema(\n      Components components, Schema<?> schema, Set<String> visitedRefs) {\n    if (schema instanceof ComposedSchema) {\n      ComposedSchema composedSchema = (ComposedSchema) schema;\n      List<Schema> composedSchemas = new ArrayList<>();\n      Optional.ofNullable(composedSchema.getAllOf()).ifPresent(composedSchemas::addAll);\n      Optional.ofNullable(composedSchema.getAnyOf()).ifPresent(composedSchemas::addAll);\n\n      if (!composedSchemas.isEmpty()) {\n        for (Schema<?> composed : composedSchemas) {\n          if (composed.get$ref() == null || !visitedRefs.contains(composed.get$ref())) {\n            Set<String> updatedVisitedRefs = new HashSet<>(visitedRefs);\n            updatedVisitedRefs.add(composed.get$ref());\n            composed = refPointer.resolveRef(components, composed, composed.get$ref());\n            composed = resolveComposedSchema(components, composed, updatedVisitedRefs);\n            schema = addSchema(schema, composed);\n          }\n        }\n        composedSchema.setAllOf(null);\n        composedSchema.setAnyOf(null);\n      }\n    }\n    return schema;\n  }\n\n  protected static Schema<?> addSchema(Schema<?> schema, Schema<?> fromSchema) {\n    if (fromSchema.getProperties() != null) {\n      if (schema.getProperties() == null) {\n        schema.setProperties(new LinkedHashMap<>());\n      }\n      schema.getProperties().putAll(fromSchema.getProperties());\n    }\n\n    if (fromSchema.getRequired() != null) {\n      if (schema.getRequired() == null) {\n        schema.setRequired(fromSchema.getRequired());\n      } else {\n        schema.getRequired().addAll(fromSchema.getRequired());\n      }\n    }\n\n    if (fromSchema.getReadOnly() != null) {\n      schema.setReadOnly(fromSchema.getReadOnly());\n    }\n    if (fromSchema.getWriteOnly() != null) {\n      schema.setWriteOnly(fromSchema.getWriteOnly());\n    }\n    if (fromSchema.getDeprecated() != null) {\n      schema.setDeprecated(fromSchema.getDeprecated());\n    }\n    if (fromSchema.getExclusiveMaximum() != null) {\n      schema.setExclusiveMaximum(fromSchema.getExclusiveMaximum());\n    }\n    if (fromSchema.getExclusiveMinimum() != null) {\n      schema.setExclusiveMinimum(fromSchema.getExclusiveMinimum());\n    }\n    if (fromSchema.getNullable() != null) {\n      schema.setNullable(fromSchema.getNullable());\n    }\n    if (fromSchema.getUniqueItems() != null) {\n      schema.setUniqueItems(fromSchema.getUniqueItems());\n    }\n    if (fromSchema.getDescription() != null) {\n      schema.setDescription(fromSchema.getDescription());\n    }\n    if (fromSchema.getFormat() != null) {\n      schema.setFormat(fromSchema.getFormat());\n    }\n    if (fromSchema.getType() != null) {\n      schema.setType(fromSchema.getType());\n    }\n    if (fromSchema.getEnum() != null) {\n      if (schema.getEnum() == null) {\n        schema.setEnum(new ArrayList<>());\n      }\n      //noinspection unchecked\n      schema.getEnum().addAll((List) fromSchema.getEnum());\n    }\n    if (fromSchema.getExtensions() != null) {\n      if (schema.getExtensions() == null) {\n        schema.setExtensions(new LinkedHashMap<>());\n      }\n      schema.getExtensions().putAll(fromSchema.getExtensions());\n    }\n    if (fromSchema instanceof ComposedSchema && schema instanceof ComposedSchema) {\n      ComposedSchema composedFromSchema = (ComposedSchema) fromSchema;\n      ComposedSchema composedSchema = (ComposedSchema) schema;\n      if (composedFromSchema.getOneOf() != null) {\n        if (composedSchema.getOneOf() == null) {\n          composedSchema.setOneOf(new ArrayList<>());\n        }\n        composedSchema.getOneOf().addAll(composedFromSchema.getOneOf());\n      }\n    }\n    if (fromSchema.getDiscriminator() != null) {\n      if (schema.getDiscriminator() == null) {\n        schema.setDiscriminator(new Discriminator());\n      }\n      final Discriminator discriminator = schema.getDiscriminator();\n      final Discriminator fromDiscriminator = fromSchema.getDiscriminator();\n      if (fromDiscriminator.getPropertyName() != null) {\n        discriminator.setPropertyName(fromDiscriminator.getPropertyName());\n      }\n      if (fromDiscriminator.getMapping() != null) {\n        if (discriminator.getMapping() == null) {\n          discriminator.setMapping(new LinkedHashMap<>());\n        }\n        discriminator.getMapping().putAll(fromDiscriminator.getMapping());\n      }\n    }\n    if (fromSchema.getTitle() != null) {\n      schema.setTitle(fromSchema.getTitle());\n    }\n    if (fromSchema.getName() != null) {\n      schema.setName(fromSchema.getName());\n    }\n    if (fromSchema.getAdditionalProperties() != null) {\n      schema.setAdditionalProperties(fromSchema.getAdditionalProperties());\n    }\n    if (fromSchema.getDefault() != null) {\n      schema.setDefault(fromSchema.getDefault());\n    }\n    if (fromSchema.getExample() != null) {\n      schema.setExample(fromSchema.getExample());\n    }\n    if (fromSchema.getExternalDocs() != null) {\n      if (schema.getExternalDocs() == null) {\n        schema.setExternalDocs(new ExternalDocumentation());\n      }\n      final ExternalDocumentation externalDocs = schema.getExternalDocs();\n      final ExternalDocumentation fromExternalDocs = fromSchema.getExternalDocs();\n      if (fromExternalDocs.getDescription() != null) {\n        externalDocs.setDescription(fromExternalDocs.getDescription());\n      }\n      if (fromExternalDocs.getExtensions() != null) {\n        if (externalDocs.getExtensions() == null) {\n          externalDocs.setExtensions(new LinkedHashMap<>());\n        }\n        externalDocs.getExtensions().putAll(fromExternalDocs.getExtensions());\n      }\n      if (fromExternalDocs.getUrl() != null) {\n        externalDocs.setUrl(fromExternalDocs.getUrl());\n      }\n    }\n    if (fromSchema.getMaximum() != null) {\n      schema.setMaximum(fromSchema.getMaximum());\n    }\n    if (fromSchema.getMinimum() != null) {\n      schema.setMinimum(fromSchema.getMinimum());\n    }\n    if (fromSchema.getMaxItems() != null) {\n      schema.setMaxItems(fromSchema.getMaxItems());\n    }\n    if (fromSchema.getMinItems() != null) {\n      schema.setMinItems(fromSchema.getMinItems());\n    }\n    if (fromSchema.getMaxProperties() != null) {\n      schema.setMaxProperties(fromSchema.getMaxProperties());\n    }\n    if (fromSchema.getMinProperties() != null) {\n      schema.setMinProperties(fromSchema.getMinProperties());\n    }\n    if (fromSchema.getMaxLength() != null) {\n      schema.setMaxLength(fromSchema.getMaxLength());\n    }\n    if (fromSchema.getMinLength() != null) {\n      schema.setMinLength(fromSchema.getMinLength());\n    }\n    if (fromSchema.getMultipleOf() != null) {\n      schema.setMultipleOf(fromSchema.getMultipleOf());\n    }\n    if (fromSchema.getNot() != null) {\n      if (schema.getNot() == null) {\n        schema.setNot(addSchema(new Schema<>(), fromSchema.getNot()));\n      } else {\n        addSchema(schema.getNot(), fromSchema.getNot());\n      }\n    }\n    if (fromSchema.getPattern() != null) {\n      schema.setPattern(fromSchema.getPattern());\n    }\n    if (fromSchema.getXml() != null) {\n      if (schema.getXml() == null) {\n        schema.setXml(new XML());\n      }\n      final XML xml = schema.getXml();\n      final XML fromXml = fromSchema.getXml();\n      if (fromXml.getAttribute() != null) {\n        xml.setAttribute(fromXml.getAttribute());\n      }\n      if (fromXml.getName() != null) {\n        xml.setName(fromXml.getName());\n      }\n      if (fromXml.getNamespace() != null) {\n        xml.setNamespace(fromXml.getNamespace());\n      }\n      if (fromXml.getExtensions() != null) {\n        if (xml.getExtensions() == null) {\n          xml.setExtensions(new LinkedHashMap<>());\n        }\n        xml.getExtensions().putAll(fromXml.getExtensions());\n      }\n      if (fromXml.getPrefix() != null) {\n        xml.setPrefix(fromXml.getPrefix());\n      }\n      if (fromXml.getWrapped() != null) {\n        xml.setWrapped(fromXml.getWrapped());\n      }\n    }\n    return schema;\n  }\n\n  private static String getSchemaRef(Schema<?> schema) {\n    return ofNullable(schema).map(Schema::get$ref).orElse(null);\n  }\n\n  public DeferredChanged<ChangedSchema> diff(Schema left, Schema right, DiffContext context) {\n    return this.diff(new RecursiveSchemaSet(), left, right, context);\n  }\n\n  public DeferredChanged<ChangedSchema> diff(\n      RecursiveSchemaSet refSet, Schema left, Schema right, DiffContext context) {\n    if (left == null && right == null) {\n      return new RealizedChanged<>(Optional.empty());\n    }\n    return computeDeferredDiff(refSet, left, right, context);\n  }\n\n  public DeferredChanged<ChangedSchema> getTypeChangedSchema(\n      Schema left, Schema right, DiffContext context) {\n    return new RealizedChanged(\n        SchemaDiff.getSchemaDiffResult(openApiDiff)\n            .getChangedSchema()\n            .setOldSchema(left)\n            .setNewSchema(right)\n            .setChangedType(true)\n            .setContext(context));\n  }\n\n  protected DeferredChanged<ChangedSchema> computeDeferredDiff(\n      RecursiveSchemaSet refSet, Schema<?> left, Schema<?> right, DiffContext context) {\n\n    CacheKey key = new CacheKey(getSchemaRef(left), getSchemaRef(right), context);\n    if (key.getLeft() != null && key.getRight() != null) {\n      return openApiDiff.getDeferredSchemaCache().getOrAddSchema(refSet, key, left, right);\n    } else {\n      return computeDiffForReal(refSet, left, right, context);\n    }\n  }\n\n  public DeferredChanged<ChangedSchema> computeDiffForReal(\n      RecursiveSchemaSet refSet, Schema left, Schema right, DiffContext context) {\n\n    left = refPointer.resolveRef(this.leftComponents, left, getSchemaRef(left));\n    right = refPointer.resolveRef(this.rightComponents, right, getSchemaRef(right));\n\n    left = resolveComposedSchema(leftComponents, left, new HashSet<>());\n    right = resolveComposedSchema(rightComponents, right, new HashSet<>());\n\n    // If type of schemas are different, just set old & new schema, set changedType to true in\n    // SchemaDiffResult and\n    // return the object\n    if ((left == null || right == null)\n        || !Objects.equals(left.getType(), right.getType())\n        || !Objects.equals(left.getFormat(), right.getFormat())) {\n      return getTypeChangedSchema(left, right, context);\n    }\n\n    // If schema type is same then get specific SchemaDiffResult and compare the properties\n    SchemaDiffResult result = SchemaDiff.getSchemaDiffResult(right.getClass(), openApiDiff);\n    return result.diff(refSet, leftComponents, rightComponents, left, right, context);\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final RefPointer<Schema<?>> refPointer = new RefPointer<>(RefType.SCHEMAS);", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "RefPointer<Schema<?>>", "name": "refPointer = new RefPointer<>(RefType.SCHEMAS)", "syntax_pass": true}, {"attribute_expression": "private static final Map<Class<? extends Schema>, Class<? extends SchemaDiffResult>>\n      schemaDiffResultClassMap = new LinkedHashMap<>();", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "Map<Class<? extends Schema>, Class<? extends SchemaDiffResult>>", "name": "schemaDiffResultClassMap = new LinkedHashMap<>()", "syntax_pass": true}, {"attribute_expression": "private final Components leftComponents;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Components", "name": "leftComponents", "syntax_pass": true}, {"attribute_expression": "private final Components rightComponents;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Components", "name": "rightComponents", "syntax_pass": true}, {"attribute_expression": "private final OpenApiDiff openApiDiff;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "OpenApiDiff", "name": "openApiDiff", "syntax_pass": true}]}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/ListDiff.java.ListDiff", "name": "ListDiff", "file_path": "src/main/java/org/openapitools/openapidiff/core/compare/ListDiff.java", "superclasses": "", "methods": ["[]ListDiff()", "[K]diff(K)"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/compare/ListDiff.java.ListDiff.[]ListDiff()", "src/main/java/org/openapitools/openapidiff/core/compare/ListDiff.java.ListDiff.[K]diff(K)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class ListDiff {\n\n  private ListDiff() {}\n\n  public static <K extends ChangedList<X>, X> K diff(K instance) {\n    if (instance.getOldValue() == null && instance.getNewValue() == null) {\n      return instance;\n    }\n    if (instance.getOldValue() == null) {\n      instance.setIncreased(instance.getNewValue());\n      return instance;\n    }\n    if (instance.getNewValue() == null) {\n      instance.setMissing(instance.getOldValue());\n      return instance;\n    }\n    instance.getIncreased().addAll(instance.getNewValue());\n    for (X leftItem : instance.getOldValue()) {\n      if (instance.getNewValue().contains(leftItem)) {\n        instance.getIncreased().remove(leftItem);\n        instance.getShared().add(leftItem);\n      } else {\n        instance.getMissing().add(leftItem);\n      }\n    }\n    return instance;\n  }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/HeadersDiff.java.HeadersDiff", "name": "HeadersDiff", "file_path": "src/main/java/org/openapitools/openapidiff/core/compare/HeadersDiff.java", "superclasses": "", "methods": ["[]HeadersDiff(OpenApiDiff)", "[DeferredChanged<ChangedHeaders>]diff(Map<String, Header>,Map<String, Header>,DiffContext)"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/compare/HeadersDiff.java.HeadersDiff.[]HeadersDiff(OpenApiDiff)", "src/main/java/org/openapitools/openapidiff/core/compare/HeadersDiff.java.HeadersDiff.[DeferredChanged<ChangedHeaders>]diff(Map<String, Header>,Map<String, Header>,DiffContext)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class HeadersDiff {\n  private final OpenApiDiff openApiDiff;\n\n  public HeadersDiff(OpenApiDiff openApiDiff) {\n    this.openApiDiff = openApiDiff;\n  }\n\n  public DeferredChanged<ChangedHeaders> diff(\n      Map<String, Header> left, Map<String, Header> right, DiffContext context) {\n    MapKeyDiff<String, Header> headerMapDiff = MapKeyDiff.diff(left, right);\n    List<String> sharedHeaderKeys = headerMapDiff.getSharedKey();\n\n    Map<String, ChangedHeader> changed = new LinkedHashMap<>();\n    DeferredBuilder<ChangedHeader> builder = new DeferredBuilder<>();\n    for (String headerKey : sharedHeaderKeys) {\n      Header oldHeader = left.get(headerKey);\n      Header newHeader = right.get(headerKey);\n      builder\n          .with(openApiDiff.getHeaderDiff().diff(oldHeader, newHeader, context))\n          .ifPresent(changedHeader -> changed.put(headerKey, changedHeader));\n    }\n    return builder\n        .build()\n        .mapOptional(\n            value ->\n                isChanged(\n                    new ChangedHeaders(left, right, context)\n                        .setIncreased(headerMapDiff.getIncreased())\n                        .setMissing(headerMapDiff.getMissing())\n                        .setChanged(changed)));\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final OpenApiDiff openApiDiff;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "OpenApiDiff", "name": "openApiDiff", "syntax_pass": true}]}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/OperationDiff.java.OperationDiff", "name": "OperationDiff", "file_path": "src/main/java/org/openapitools/openapidiff/core/compare/OperationDiff.java", "superclasses": "", "methods": ["[]OperationDiff(OpenApiDiff)", "[DeferredChanged<ChangedOperation>]diff(Operation,Operation,DiffContext)", "[void]removePathParameters(Map<String, String>,ChangedParameters)", "[void]removePathParameter(String,List<Parameter>)"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/compare/OperationDiff.java.OperationDiff.[]OperationDiff(OpenApiDiff)", "src/main/java/org/openapitools/openapidiff/core/compare/OperationDiff.java.OperationDiff.[DeferredChanged<ChangedOperation>]diff(Operation,Operation,DiffContext)", "src/main/java/org/openapitools/openapidiff/core/compare/OperationDiff.java.OperationDiff.[void]removePathParameters(Map<String, String>,ChangedParameters)", "src/main/java/org/openapitools/openapidiff/core/compare/OperationDiff.java.OperationDiff.[void]removePathParameter(String,List<Parameter>)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class OperationDiff {\n  private static final Logger log = LoggerFactory.getLogger(OperationDiff.class);\n\n  private final OpenApiDiff openApiDiff;\n\n  public OperationDiff(OpenApiDiff openApiDiff) {\n    this.openApiDiff = openApiDiff;\n  }\n\n  public DeferredChanged<ChangedOperation> diff(\n      Operation oldOperation, Operation newOperation, DiffContext context) {\n\n    DeferredBuilder<Changed> builder = new DeferredBuilder<>();\n    ChangedOperation changedOperation =\n        new ChangedOperation(context.getUrl(), context.getMethod(), oldOperation, newOperation);\n\n    log.debug(\n        \"Diff operation {} {}\", changedOperation.getPathUrl(), changedOperation.getHttpMethod());\n\n    builder\n        .with(\n            openApiDiff\n                .getMetadataDiff()\n                .diff(oldOperation.getSummary(), newOperation.getSummary(), context))\n        .ifPresent(changedOperation::setSummary);\n    builder\n        .with(\n            openApiDiff\n                .getMetadataDiff()\n                .diff(oldOperation.getDescription(), newOperation.getDescription(), context))\n        .ifPresent(changedOperation::setDescription);\n    builder\n        .with(\n            openApiDiff\n                .getMetadataDiff()\n                .diff(oldOperation.getOperationId(), newOperation.getOperationId(), context))\n        .ifPresent(changedOperation::setOperationId);\n    changedOperation.setDeprecated(\n        !Boolean.TRUE.equals(oldOperation.getDeprecated())\n            && Boolean.TRUE.equals(newOperation.getDeprecated()));\n\n    if (oldOperation.getRequestBody() != null || newOperation.getRequestBody() != null) {\n      builder\n          .with(\n              openApiDiff\n                  .getRequestBodyDiff()\n                  .diff(\n                      oldOperation.getRequestBody(),\n                      newOperation.getRequestBody(),\n                      context.copyAsRequest()))\n          .ifPresent(changedOperation::setRequestBody);\n    }\n\n    ParametersDiffResult parametersDiffResult =\n        openApiDiff\n            .getParametersDiff()\n            .diff(oldOperation.getParameters(), newOperation.getParameters(), context);\n    builder\n        .with(parametersDiffResult.deferredChanged)\n        .ifPresent(\n            params -> {\n              if (!parametersDiffResult.sameOperationsDiffSchema) {\n                removePathParameters(context.getParameters(), params);\n              }\n              changedOperation.setParameters(params);\n            });\n\n    if (oldOperation.getResponses() != null || newOperation.getResponses() != null) {\n      builder\n          .with(\n              openApiDiff\n                  .getApiResponseDiff()\n                  .diff(\n                      oldOperation.getResponses(),\n                      newOperation.getResponses(),\n                      context.copyAsResponse()))\n          .ifPresent(\n              responses -> {\n                log.debug(\n                    \"operation \"\n                        + changedOperation.getPathUrl()\n                        + \" \"\n                        + changedOperation.getHttpMethod()\n                        + \" setting api responses \"\n                        + responses.getChangedElements().stream()\n                            .filter(Objects::nonNull)\n                            .map(Changed::isChanged)\n                            .filter(Objects::nonNull)\n                            .map(Enum::toString)\n                            .collect(Collectors.joining(\",\")));\n                changedOperation.setApiResponses(responses);\n              });\n    }\n\n    if (oldOperation.getSecurity() != null || newOperation.getSecurity() != null) {\n      builder\n          .with(\n              openApiDiff\n                  .getSecurityRequirementsDiff()\n                  .diff(oldOperation.getSecurity(), newOperation.getSecurity(), context))\n          .ifPresent(changedOperation::setSecurityRequirements);\n    }\n\n    builder\n        .with(\n            openApiDiff\n                .getExtensionsDiff()\n                .diff(oldOperation.getExtensions(), newOperation.getExtensions(), context))\n        .ifPresent(changedOperation::setExtensions);\n\n    return builder\n        .build()\n        .mapOptional(\n            value -> {\n              Optional<ChangedOperation> changed = isChanged(changedOperation);\n              log.debug(\n                  \"Is changed operation \"\n                      + changedOperation.getPathUrl()\n                      + \" \"\n                      + changedOperation.getHttpMethod()\n                      + \" changed: \"\n                      + changed.map(ComposedChanged::isChanged).orElse(null));\n              return changed;\n            });\n  }\n\n  public void removePathParameters(Map<String, String> pathParameters, ChangedParameters params) {\n    pathParameters.forEach(\n        (oldParam, newParam) -> {\n          removePathParameter(oldParam, params.getMissing());\n          removePathParameter(newParam, params.getIncreased());\n        });\n  }\n\n  public void removePathParameter(String name, List<Parameter> parameters) {\n    parameters.stream()\n        .filter(p -> \"path\".equals(p.getIn()) && name.equals(p.getName()))\n        .findFirst()\n        .ifPresent(parameters::remove);\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final Logger log = LoggerFactory.getLogger(OperationDiff.class);", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "Logger", "name": "log = LoggerFactory.getLogger(OperationDiff.class)", "syntax_pass": true}, {"attribute_expression": "private final OpenApiDiff openApiDiff;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "OpenApiDiff", "name": "openApiDiff", "syntax_pass": true}]}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/RequestBodyDiff.java.RequestBodyDiff", "name": "RequestBodyDiff", "file_path": "src/main/java/org/openapitools/openapidiff/core/compare/RequestBodyDiff.java", "superclasses": "", "methods": ["[]RequestBodyDiff(OpenApiDiff)", "[Map<String, Object>]getExtensions(RequestBody)", "[DeferredChanged<ChangedRequestBody>]diff(RequestBody,RequestBody,DiffContext)", "[DeferredChanged<ChangedRequestBody>]computeDiff(HashSet<String>,RequestBody,RequestBody,DiffContext)"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/compare/RequestBodyDiff.java.RequestBodyDiff.[]RequestBodyDiff(OpenApiDiff)", "src/main/java/org/openapitools/openapidiff/core/compare/RequestBodyDiff.java.RequestBodyDiff.[Map<String, Object>]getExtensions(RequestBody)", "src/main/java/org/openapitools/openapidiff/core/compare/RequestBodyDiff.java.RequestBodyDiff.[DeferredChanged<ChangedRequestBody>]diff(RequestBody,RequestBody,DiffContext)", "src/main/java/org/openapitools/openapidiff/core/compare/RequestBodyDiff.java.RequestBodyDiff.[DeferredChanged<ChangedRequestBody>]computeDiff(HashSet<String>,RequestBody,RequestBody,DiffContext)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class RequestBodyDiff extends ReferenceDiffCache<RequestBody, ChangedRequestBody> {\n  private static final RefPointer<RequestBody> refPointer =\n      new RefPointer<>(RefType.REQUEST_BODIES);\n  private final OpenApiDiff openApiDiff;\n\n  public RequestBodyDiff(OpenApiDiff openApiDiff) {\n    this.openApiDiff = openApiDiff;\n  }\n\n  private static Map<String, Object> getExtensions(RequestBody body) {\n    return ofNullable(body).map(RequestBody::getExtensions).orElse(null);\n  }\n\n  public DeferredChanged<ChangedRequestBody> diff(\n      RequestBody left, RequestBody right, DiffContext context) {\n    String leftRef = left != null ? left.get$ref() : null;\n    String rightRef = right != null ? right.get$ref() : null;\n    return cachedDiff(new HashSet<>(), left, right, leftRef, rightRef, context);\n  }\n\n  @Override\n  protected DeferredChanged<ChangedRequestBody> computeDiff(\n      HashSet<String> refSet, RequestBody left, RequestBody right, DiffContext context) {\n    DeferredBuilder<Changed> builder = new DeferredBuilder<>();\n\n    Content oldRequestContent = new Content();\n    Content newRequestContent = new Content();\n    RequestBody oldRequestBody = null;\n    RequestBody newRequestBody = null;\n    if (left != null) {\n      oldRequestBody =\n          refPointer.resolveRef(\n              openApiDiff.getOldSpecOpenApi().getComponents(), left, left.get$ref());\n      if (oldRequestBody.getContent() != null) {\n        oldRequestContent = oldRequestBody.getContent();\n      }\n    }\n    if (right != null) {\n      newRequestBody =\n          refPointer.resolveRef(\n              openApiDiff.getNewSpecOpenApi().getComponents(), right, right.get$ref());\n      if (newRequestBody.getContent() != null) {\n        newRequestContent = newRequestBody.getContent();\n      }\n    }\n    boolean leftRequired =\n        oldRequestBody != null && Boolean.TRUE.equals(oldRequestBody.getRequired());\n    boolean rightRequired =\n        newRequestBody != null && Boolean.TRUE.equals(newRequestBody.getRequired());\n\n    ChangedRequestBody changedRequestBody =\n        new ChangedRequestBody(oldRequestBody, newRequestBody, context)\n            .setChangeRequired(leftRequired != rightRequired);\n    builder\n        .with(\n            openApiDiff\n                .getMetadataDiff()\n                .diff(\n                    oldRequestBody != null ? oldRequestBody.getDescription() : null,\n                    newRequestBody != null ? newRequestBody.getDescription() : null,\n                    context))\n        .ifPresent(changedRequestBody::setDescription);\n    builder\n        .with(openApiDiff.getContentDiff().diff(oldRequestContent, newRequestContent, context))\n        .ifPresent(changedRequestBody::setContent);\n    builder\n        .with(\n            openApiDiff\n                .getExtensionsDiff()\n                .diff(getExtensions(left), getExtensions(right), context))\n        .ifPresent(changedRequestBody::setExtensions);\n\n    return builder.buildIsChanged(changedRequestBody);\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final RefPointer<RequestBody> refPointer =\n      new RefPointer<>(RefType.REQUEST_BODIES);", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "RefPointer<RequestBody>", "name": "refPointer =\n      new RefPointer<>(RefType.REQUEST_BODIES)", "syntax_pass": true}, {"attribute_expression": "private final OpenApiDiff openApiDiff;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "OpenApiDiff", "name": "openApiDiff", "syntax_pass": true}]}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/SecurityRequirementsDiff.java.SecurityRequirementsDiff", "name": "SecurityRequirementsDiff", "file_path": "src/main/java/org/openapitools/openapidiff/core/compare/SecurityRequirementsDiff.java", "superclasses": "", "methods": ["[]SecurityRequirementsDiff(OpenApiDiff)", "[Optional<SecurityRequirement>]contains(List<SecurityRequirement>,SecurityRequirement)", "[boolean]same(SecurityRequirement,SecurityRequirement)", "[List<Pair<SecurityScheme.Type, SecurityScheme.In>>]getListOfSecuritySchemes(Components,SecurityRequirement)", "[Pair<SecurityScheme.Type, SecurityScheme.In>]getPair(SecurityScheme)", "[DeferredChanged<ChangedSecurityRequirements>]diff(List<SecurityRequirement>,List<SecurityRequirement>,DiffContext)", "[List<SecurityRequirement>]getCopy(List<SecurityRequirement>)"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/compare/SecurityRequirementsDiff.java.SecurityRequirementsDiff.[]SecurityRequirementsDiff(OpenApiDiff)", "src/main/java/org/openapitools/openapidiff/core/compare/SecurityRequirementsDiff.java.SecurityRequirementsDiff.[Optional<SecurityRequirement>]contains(List<SecurityRequirement>,SecurityRequirement)", "src/main/java/org/openapitools/openapidiff/core/compare/SecurityRequirementsDiff.java.SecurityRequirementsDiff.[boolean]same(SecurityRequirement,SecurityRequirement)", "src/main/java/org/openapitools/openapidiff/core/compare/SecurityRequirementsDiff.java.SecurityRequirementsDiff.[List<Pair<SecurityScheme.Type, SecurityScheme.In>>]getListOfSecuritySchemes(Components,SecurityRequirement)", "src/main/java/org/openapitools/openapidiff/core/compare/SecurityRequirementsDiff.java.SecurityRequirementsDiff.[Pair<SecurityScheme.Type, SecurityScheme.In>]getPair(SecurityScheme)", "src/main/java/org/openapitools/openapidiff/core/compare/SecurityRequirementsDiff.java.SecurityRequirementsDiff.[DeferredChanged<ChangedSecurityRequirements>]diff(List<SecurityRequirement>,List<SecurityRequirement>,DiffContext)", "src/main/java/org/openapitools/openapidiff/core/compare/SecurityRequirementsDiff.java.SecurityRequirementsDiff.[List<SecurityRequirement>]getCopy(List<SecurityRequirement>)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class SecurityRequirementsDiff {\n  private final OpenApiDiff openApiDiff;\n  private final Components leftComponents;\n  private final Components rightComponents;\n\n  public SecurityRequirementsDiff(OpenApiDiff openApiDiff) {\n    this.openApiDiff = openApiDiff;\n    this.leftComponents =\n        openApiDiff.getOldSpecOpenApi() != null\n            ? openApiDiff.getOldSpecOpenApi().getComponents()\n            : null;\n    this.rightComponents =\n        openApiDiff.getNewSpecOpenApi() != null\n            ? openApiDiff.getNewSpecOpenApi().getComponents()\n            : null;\n  }\n\n  public Optional<SecurityRequirement> contains(\n      List<SecurityRequirement> securityRequirements, SecurityRequirement left) {\n    return securityRequirements.stream()\n        .filter(rightSecurities -> same(left, rightSecurities))\n        .findFirst();\n  }\n\n  public boolean same(SecurityRequirement left, SecurityRequirement right) {\n    List<Pair<SecurityScheme.Type, SecurityScheme.In>> leftTypes =\n        getListOfSecuritySchemes(leftComponents, left);\n    List<Pair<SecurityScheme.Type, SecurityScheme.In>> rightTypes =\n        getListOfSecuritySchemes(rightComponents, right);\n\n    return CollectionUtils.isEqualCollection(leftTypes, rightTypes);\n  }\n\n  private List<Pair<SecurityScheme.Type, SecurityScheme.In>> getListOfSecuritySchemes(\n      Components components, SecurityRequirement securityRequirement) {\n    return securityRequirement.keySet().stream()\n        .map(\n            x -> {\n              if (components == null) {\n                throw new IllegalArgumentException(\"Missing securitySchemes component definition.\");\n              }\n              Map<String, SecurityScheme> securitySchemes = components.getSecuritySchemes();\n              if (securitySchemes == null) {\n                throw new IllegalArgumentException(\"Missing securitySchemes component definition.\");\n              }\n\n              SecurityScheme result = securitySchemes.get(x);\n              if (result == null) {\n                throw new IllegalArgumentException(\"Impossible to find security scheme: \" + x);\n              }\n\n              return result;\n            })\n        .map(this::getPair)\n        .distinct()\n        .collect(Collectors.toList());\n  }\n\n  private Pair<SecurityScheme.Type, SecurityScheme.In> getPair(SecurityScheme securityScheme) {\n    return new ImmutablePair<>(securityScheme.getType(), securityScheme.getIn());\n  }\n\n  protected DeferredChanged<ChangedSecurityRequirements> diff(\n      List<SecurityRequirement> left, List<SecurityRequirement> right, DiffContext context) {\n\n    DeferredBuilder<Changed> builder = new DeferredBuilder<>();\n\n    left = left == null ? new ArrayList<>() : left;\n    right = right == null ? new ArrayList<>() : getCopy(right);\n\n    ChangedSecurityRequirements changedSecurityRequirements =\n        new ChangedSecurityRequirements(left, right, context);\n\n    for (SecurityRequirement leftSecurity : left) {\n      Optional<SecurityRequirement> rightSecOpt = contains(right, leftSecurity);\n      if (!rightSecOpt.isPresent()) {\n        changedSecurityRequirements.addMissing(leftSecurity);\n      } else {\n        SecurityRequirement rightSec = rightSecOpt.get();\n        right.remove(rightSec);\n        builder\n            .with(openApiDiff.getSecurityRequirementDiff().diff(leftSecurity, rightSec, context))\n            .ifPresent(changedSecurityRequirements::addChanged);\n      }\n    }\n    right.forEach(changedSecurityRequirements::addIncreased);\n\n    return builder.buildIsChanged(changedSecurityRequirements);\n  }\n\n  private List<SecurityRequirement> getCopy(List<SecurityRequirement> right) {\n    return right.stream().map(SecurityRequirementDiff::getCopy).collect(Collectors.toList());\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final OpenApiDiff openApiDiff;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "OpenApiDiff", "name": "openApiDiff", "syntax_pass": true}, {"attribute_expression": "private final Components leftComponents;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Components", "name": "leftComponents", "syntax_pass": true}, {"attribute_expression": "private final Components rightComponents;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Components", "name": "rightComponents", "syntax_pass": true}]}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/ApiResponseDiff.java.ApiResponseDiff", "name": "ApiResponseDiff", "file_path": "src/main/java/org/openapitools/openapidiff/core/compare/ApiResponseDiff.java", "superclasses": "", "methods": ["[]ApiResponseDiff(OpenApiDiff)", "[DeferredChanged<ChangedApiResponse>]diff(ApiResponses,ApiResponses,DiffContext)"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/compare/ApiResponseDiff.java.ApiResponseDiff.[]ApiResponseDiff(OpenApiDiff)", "src/main/java/org/openapitools/openapidiff/core/compare/ApiResponseDiff.java.ApiResponseDiff.[DeferredChanged<ChangedApiResponse>]diff(ApiResponses,ApiResponses,DiffContext)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class ApiResponseDiff {\n  private final OpenApiDiff openApiDiff;\n\n  public ApiResponseDiff(OpenApiDiff openApiDiff) {\n    this.openApiDiff = openApiDiff;\n  }\n\n  public DeferredChanged<ChangedApiResponse> diff(\n      @Nullable ApiResponses left, @Nullable ApiResponses right, DiffContext context) {\n    MapKeyDiff<String, ApiResponse> responseMapKeyDiff = MapKeyDiff.diff(left, right);\n    List<String> sharedResponseCodes = responseMapKeyDiff.getSharedKey();\n    Map<String, ChangedResponse> resps = new LinkedHashMap<>();\n    DeferredBuilder<Changed> builder = new DeferredBuilder<>();\n\n    for (String responseCode : sharedResponseCodes) {\n      builder\n          .with(\n              openApiDiff\n                  .getResponseDiff()\n                  .diff(\n                      left != null ? left.get(responseCode) : null,\n                      right != null ? right.get(responseCode) : null,\n                      context))\n          .ifPresent(changedResponse -> resps.put(responseCode, changedResponse));\n    }\n    ChangedApiResponse changedApiResponse =\n        new ChangedApiResponse(left, right, context)\n            .setIncreased(responseMapKeyDiff.getIncreased())\n            .setMissing(responseMapKeyDiff.getMissing())\n            .setChanged(resps);\n    builder\n        .with(\n            openApiDiff\n                .getExtensionsDiff()\n                .diff(\n                    left != null ? left.getExtensions() : null,\n                    right != null ? right.getExtensions() : null,\n                    context))\n        .ifPresent(changedApiResponse::setExtensions);\n    return builder.buildIsChanged(changedApiResponse);\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final OpenApiDiff openApiDiff;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "OpenApiDiff", "name": "openApiDiff", "syntax_pass": true}]}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/ParametersDiff.java.ParametersDiffResult", "name": "ParametersDiffResult", "file_path": "src/main/java/org/openapitools/openapidiff/core/compare/ParametersDiff.java", "superclasses": "", "methods": ["[]ParametersDiffResult(DeferredChanged<ChangedParameters>,boolean)"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/compare/ParametersDiff.java.ParametersDiffResult.[]ParametersDiffResult(DeferredChanged<ChangedParameters>,boolean)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class ParametersDiffResult {\n  protected DeferredChanged<ChangedParameters> deferredChanged;\n  protected boolean sameOperationsDiffSchema;\n\n  public ParametersDiffResult(\n      DeferredChanged<ChangedParameters> deferredChanged, boolean sameOperationsDiffSchema) {\n    this.deferredChanged = deferredChanged;\n    this.sameOperationsDiffSchema = sameOperationsDiffSchema;\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "protected DeferredChanged<ChangedParameters> deferredChanged;", "docstring": "", "modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "type": "DeferredChanged<ChangedParameters>", "name": "deferredChanged", "syntax_pass": true}, {"attribute_expression": "protected boolean sameOperationsDiffSchema;", "docstring": "", "modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "type": "boolean", "name": "sameOperationsDiffSchema", "syntax_pass": true}]}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/ParametersDiff.java.ParametersDiff", "name": "ParametersDiff", "file_path": "src/main/java/org/openapitools/openapidiff/core/compare/ParametersDiff.java", "superclasses": "", "methods": ["[]ParametersDiff(OpenApiDiff)", "[Optional<Parameter>]contains(Components,List<Parameter>,Parameter)", "[boolean]same(Parameter,Parameter)", "[ParametersDiffResult]diff(List<Parameter>,List<Parameter>,DiffContext)", "[boolean]pathUnchangedParametersChanged(ChangedParameters,DiffContext)", "[boolean]pathUnchanged(ChangedParameters,DiffContext)", "[ArrayList<String>]matchedItems(String,String)"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/compare/ParametersDiff.java.ParametersDiff.[]ParametersDiff(OpenApiDiff)", "src/main/java/org/openapitools/openapidiff/core/compare/ParametersDiff.java.ParametersDiff.[Optional<Parameter>]contains(Components,List<Parameter>,Parameter)", "src/main/java/org/openapitools/openapidiff/core/compare/ParametersDiff.java.ParametersDiff.[boolean]same(Parameter,Parameter)", "src/main/java/org/openapitools/openapidiff/core/compare/ParametersDiff.java.ParametersDiff.[ParametersDiffResult]diff(List<Parameter>,List<Parameter>,DiffContext)", "src/main/java/org/openapitools/openapidiff/core/compare/ParametersDiff.java.ParametersDiff.[boolean]pathUnchangedParametersChanged(ChangedParameters,DiffContext)", "src/main/java/org/openapitools/openapidiff/core/compare/ParametersDiff.java.ParametersDiff.[boolean]pathUnchanged(ChangedParameters,DiffContext)", "src/main/java/org/openapitools/openapidiff/core/compare/ParametersDiff.java.ParametersDiff.[ArrayList<String>]matchedItems(String,String)"], "overrides": null, "attributes": [], "class_docstring": " compare two parameter", "original_string": "public class ParametersDiff {\n\n  private static final RefPointer<Parameter> refPointer = new RefPointer<>(RefType.PARAMETERS);\n\n  private final Components leftComponents;\n  private final Components rightComponents;\n  private final OpenApiDiff openApiDiff;\n\n  public ParametersDiff(OpenApiDiff openApiDiff) {\n    this.openApiDiff = openApiDiff;\n    this.leftComponents =\n        openApiDiff.getOldSpecOpenApi() != null\n            ? openApiDiff.getOldSpecOpenApi().getComponents()\n            : null;\n    this.rightComponents =\n        openApiDiff.getNewSpecOpenApi() != null\n            ? openApiDiff.getNewSpecOpenApi().getComponents()\n            : null;\n  }\n\n  public static Optional<Parameter> contains(\n      Components components, List<Parameter> parameters, Parameter parameter) {\n    return parameters.stream()\n        .filter(param -> same(refPointer.resolveRef(components, param, param.get$ref()), parameter))\n        .findFirst();\n  }\n\n  public static boolean same(Parameter left, Parameter right) {\n    return Objects.equals(left.getName(), right.getName())\n        && Objects.equals(left.getIn(), right.getIn());\n  }\n\n  public ParametersDiffResult diff(\n      final List<Parameter> left, final List<Parameter> right, final DiffContext context) {\n    final DeferredBuilder<Changed> builder = new DeferredBuilder<>();\n    final List<Parameter> wLeft = Optional.ofNullable(left).orElseGet(Collections::emptyList);\n    final List<Parameter> wRight =\n        Optional.ofNullable(right).map(ArrayList::new).orElseGet(ArrayList::new);\n\n    final ChangedParameters changedParameters = new ChangedParameters(wLeft, wRight, context);\n\n    for (Parameter leftParam : wLeft) {\n      leftParam = refPointer.resolveRef(leftComponents, leftParam, leftParam.get$ref());\n      Optional<Parameter> rightParamOpt = contains(rightComponents, wRight, leftParam);\n      if (!rightParamOpt.isPresent()) {\n        changedParameters.getMissing().add(leftParam);\n      } else {\n        Parameter rightParam = rightParamOpt.get();\n        wRight.remove(rightParam);\n        builder\n            .with(openApiDiff.getParameterDiff().diff(leftParam, rightParam, context))\n            .ifPresent(changedParameters.getChanged()::add);\n      }\n    }\n    changedParameters.getIncreased().addAll(wRight);\n    return new ParametersDiffResult(\n        builder.buildIsChanged(changedParameters),\n        pathUnchangedParametersChanged(changedParameters, context));\n  }\n\n  public boolean pathUnchangedParametersChanged(\n      ChangedParameters changedParameters, DiffContext context) {\n    if (!pathUnchanged(changedParameters, context)) return false;\n    // If missing and increased parameter count is different, it's a new endpoint\n    if (changedParameters.getMissing().size() != changedParameters.getIncreased().size())\n      return false;\n    // Go through each missing Parameter and compare it to newly added Parameters\n    for (Parameter parameter : changedParameters.getMissing()) {\n      // Speedy Check. Use the map already created in changedParameters to check if missing param is\n      // linked to newParam\n      String newParameterName = context.getParameters().get(parameter.getName());\n      if (StringUtils.isBlank(newParameterName)) return false;\n\n      Optional<Parameter> newParameter =\n          changedParameters.getIncreased().stream()\n              .filter(p -> p.getName().equals(newParameterName))\n              .findFirst();\n      if (!newParameter.isPresent()) return false;\n\n      // Check if  the old and new Parameters match . IF so, return TRUE\n      Parameter newParameterRealized = newParameter.get();\n      newParameterRealized.setName(parameter.getName()); // Make names similar\n      boolean samePathDifferentParameter = !newParameterRealized.equals(parameter);\n      newParameterRealized.setName(\n          newParameterName); // Important:: MUST Reset the name as this is not a copy\n      return samePathDifferentParameter;\n    }\n    return false;\n  }\n\n  public boolean pathUnchanged(ChangedParameters changedParameters, DiffContext context) {\n    final String REGEX_PATH = \"\\\\{([^/]+)}\";\n    String oldUrl = context.getLeftUrl();\n    String newUrl = context.getRightUrl();\n    ArrayList<String> oldUrlPathParams = matchedItems(oldUrl, REGEX_PATH);\n    ArrayList<String> newUrlPathParams = matchedItems(newUrl, REGEX_PATH);\n    // Path Param count doesn't match or param-less path doesn't match or param is changed --> It's\n    // a new endpoint\n    return oldUrlPathParams.size() == newUrlPathParams.size()\n        && changedParameters.getChanged().isEmpty()\n        && oldUrl.replaceAll(REGEX_PATH, \"\").equals(newUrl.replaceAll(REGEX_PATH, \"\"));\n  }\n\n  public ArrayList<String> matchedItems(String string, String regex) {\n    Matcher matcher = Pattern.compile(regex).matcher(string);\n    ArrayList<String> matchedItems = new ArrayList<>();\n    while (matcher.find()) {\n      String item = matcher.group();\n      matchedItems.add(item.substring(0, matcher.group().length() - 1).replaceFirst(\"\\\\{\", \"\"));\n    }\n    return matchedItems;\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final RefPointer<Parameter> refPointer = new RefPointer<>(RefType.PARAMETERS);", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "RefPointer<Parameter>", "name": "refPointer = new RefPointer<>(RefType.PARAMETERS)", "syntax_pass": true}, {"attribute_expression": "private final Components leftComponents;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Components", "name": "leftComponents", "syntax_pass": true}, {"attribute_expression": "private final Components rightComponents;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Components", "name": "rightComponents", "syntax_pass": true}, {"attribute_expression": "private final OpenApiDiff openApiDiff;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "OpenApiDiff", "name": "openApiDiff", "syntax_pass": true}]}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/PathsDiff.java.PathsDiff", "name": "PathsDiff", "file_path": "src/main/java/org/openapitools/openapidiff/core/compare/PathsDiff.java", "superclasses": "", "methods": ["[]PathsDiff(OpenApiDiff)", "[String]normalizePath(String)", "[List<String>]extractParameters(String)", "[DeferredChanged<ChangedPaths>]diff(Map<String, PathItem>,Map<String, PathItem>)", "[Paths]valOrEmpty(Paths)", "[boolean]methodsAndParametersIntersect(PathItem,PathItem)", "[boolean]parametersIntersect(List<Parameter>,List<Parameter>)"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/compare/PathsDiff.java.PathsDiff.[]PathsDiff(OpenApiDiff)", "src/main/java/org/openapitools/openapidiff/core/compare/PathsDiff.java.PathsDiff.[String]normalizePath(String)", "src/main/java/org/openapitools/openapidiff/core/compare/PathsDiff.java.PathsDiff.[List<String>]extractParameters(String)", "src/main/java/org/openapitools/openapidiff/core/compare/PathsDiff.java.PathsDiff.[DeferredChanged<ChangedPaths>]diff(Map<String, PathItem>,Map<String, PathItem>)", "src/main/java/org/openapitools/openapidiff/core/compare/PathsDiff.java.PathsDiff.[Paths]valOrEmpty(Paths)", "src/main/java/org/openapitools/openapidiff/core/compare/PathsDiff.java.PathsDiff.[boolean]methodsAndParametersIntersect(PathItem,PathItem)", "src/main/java/org/openapitools/openapidiff/core/compare/PathsDiff.java.PathsDiff.[boolean]parametersIntersect(List<Parameter>,List<Parameter>)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class PathsDiff {\n  private static final String REGEX_PATH = \"\\\\{([^/{}]+)}\";\n  private final OpenApiDiff openApiDiff;\n\n  public PathsDiff(OpenApiDiff openApiDiff) {\n    this.openApiDiff = openApiDiff;\n  }\n\n  private static String normalizePath(String path) {\n    return path.replaceAll(REGEX_PATH, \"{}\");\n  }\n\n  private static List<String> extractParameters(String path) {\n    ArrayList<String> params = new ArrayList<>();\n    Pattern pattern = Pattern.compile(REGEX_PATH);\n    Matcher matcher = pattern.matcher(path);\n    while (matcher.find()) {\n      params.add(matcher.group(1));\n    }\n    return params;\n  }\n\n  public DeferredChanged<ChangedPaths> diff(\n      final Map<String, PathItem> left, final Map<String, PathItem> right) {\n    DeferredBuilder<Changed> builder = new DeferredBuilder<>();\n\n    ChangedPaths changedPaths = new ChangedPaths(left, right, openApiDiff.getOptions());\n    changedPaths.getIncreased().putAll(right);\n\n    left.keySet()\n        .forEach(\n            (String url) -> {\n              PathItem leftPath = left.get(url);\n              String template = normalizePath(url);\n              Optional<Map.Entry<String, PathItem>> result =\n                  changedPaths.getIncreased().entrySet().stream()\n                      .filter(item -> normalizePath(item.getKey()).equals(template))\n                      .min(\n                          (a, b) -> {\n                            if (methodsAndParametersIntersect(a.getValue(), b.getValue())) {\n                              throw new IllegalArgumentException(\n                                  \"Two path items have the same signature: \" + template);\n                            }\n                            if (a.getKey().equals(url)) {\n                              return -1;\n                            } else if (b.getKey().equals((url))) {\n                              return 1;\n                            } else {\n                              HashSet<PathItem.HttpMethod> methodsA =\n                                  new HashSet<>(a.getValue().readOperationsMap().keySet());\n                              methodsA.retainAll(leftPath.readOperationsMap().keySet());\n                              HashSet<PathItem.HttpMethod> methodsB =\n                                  new HashSet<>(b.getValue().readOperationsMap().keySet());\n                              methodsB.retainAll(leftPath.readOperationsMap().keySet());\n                              return Integer.compare(methodsB.size(), methodsA.size());\n                            }\n                          });\n              if (result.isPresent()) {\n                String rightUrl = result.get().getKey();\n                PathItem rightPath = changedPaths.getIncreased().remove(rightUrl);\n                Map<String, String> params = new LinkedHashMap<>();\n                if (!url.equals(rightUrl)) {\n                  List<String> oldParams = extractParameters(url);\n                  List<String> newParams = extractParameters(rightUrl);\n                  for (int i = 0; i < oldParams.size(); i++) {\n                    params.put(oldParams.get(i), newParams.get(i));\n                  }\n                }\n                DiffContext context = new DiffContext(openApiDiff.getOptions());\n                context.setUrl(url);\n                context.setParameters(params);\n                context.setLeftAndRightUrls(url, rightUrl);\n                builder\n                    .with(openApiDiff.getPathDiff().diff(leftPath, rightPath, context))\n                    .ifPresent(path -> changedPaths.getChanged().put(rightUrl, path));\n              } else {\n                changedPaths.getMissing().put(url, leftPath);\n              }\n            });\n    return builder.buildIsChanged(changedPaths);\n  }\n\n  public static Paths valOrEmpty(Paths path) {\n    if (path == null) {\n      path = new Paths();\n    }\n    return path;\n  }\n\n  /**\n   * @param a a path form the open api spec\n   * @param b another path from the same open api spec\n   * @return <code>true</code> in case both paths are of the same method AND their templated\n   *     parameters are of the same type; <code>false</code> otherwise\n   */\n  private static boolean methodsAndParametersIntersect(PathItem a, PathItem b) {\n    Set<PathItem.HttpMethod> methodsA = a.readOperationsMap().keySet();\n    for (PathItem.HttpMethod method : b.readOperationsMap().keySet()) {\n      if (methodsA.contains(method)) {\n        Operation left = a.readOperationsMap().get(method);\n        Operation right = b.readOperationsMap().get(method);\n        if (left.getParameters().size() == right.getParameters().size()) {\n          return parametersIntersect(left.getParameters(), right.getParameters());\n        }\n        return false;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @param left parameters from the first compared method\n   * @param right parameters from the second compared method\n   * @return <code>true</code> in case each parameter pair is of the same type; <code>false</code>\n   *     otherwise\n   */\n  private static boolean parametersIntersect(List<Parameter> left, List<Parameter> right) {\n    int parametersSize = left.size();\n    long intersectedParameters =\n        IntStream.range(0, left.size())\n            .filter(\n                i -> left.get(i).getSchema().getType().equals(right.get(i).getSchema().getType()))\n            .count();\n    return parametersSize == intersectedParameters;\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final String REGEX_PATH = \"\\\\{([^/{}]+)}\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "REGEX_PATH = \"\\\\{([^/{}]+)}\"", "syntax_pass": true}, {"attribute_expression": "private final OpenApiDiff openApiDiff;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "OpenApiDiff", "name": "openApiDiff", "syntax_pass": true}]}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/ResponseDiff.java.ResponseDiff", "name": "ResponseDiff", "file_path": "src/main/java/org/openapitools/openapidiff/core/compare/ResponseDiff.java", "superclasses": "", "methods": ["[]ResponseDiff(OpenApiDiff)", "[DeferredChanged<ChangedResponse>]diff(ApiResponse,ApiResponse,DiffContext)", "[DeferredChanged<ChangedResponse>]computeDiff(HashSet<String>,ApiResponse,ApiResponse,DiffContext)"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/compare/ResponseDiff.java.ResponseDiff.[]ResponseDiff(OpenApiDiff)", "src/main/java/org/openapitools/openapidiff/core/compare/ResponseDiff.java.ResponseDiff.[DeferredChanged<ChangedResponse>]diff(ApiResponse,ApiResponse,DiffContext)", "src/main/java/org/openapitools/openapidiff/core/compare/ResponseDiff.java.ResponseDiff.[DeferredChanged<ChangedResponse>]computeDiff(HashSet<String>,ApiResponse,ApiResponse,DiffContext)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class ResponseDiff extends ReferenceDiffCache<ApiResponse, ChangedResponse> {\n  private static final RefPointer<ApiResponse> refPointer = new RefPointer<>(RefType.RESPONSES);\n  private final OpenApiDiff openApiDiff;\n  private final Components leftComponents;\n  private final Components rightComponents;\n\n  public ResponseDiff(OpenApiDiff openApiDiff) {\n    this.openApiDiff = openApiDiff;\n    this.leftComponents =\n        openApiDiff.getOldSpecOpenApi() != null\n            ? openApiDiff.getOldSpecOpenApi().getComponents()\n            : null;\n    this.rightComponents =\n        openApiDiff.getNewSpecOpenApi() != null\n            ? openApiDiff.getNewSpecOpenApi().getComponents()\n            : null;\n  }\n\n  public DeferredChanged<ChangedResponse> diff(\n      ApiResponse left, ApiResponse right, DiffContext context) {\n    if (left == null && right == null) {\n      return new RealizedChanged<>(Optional.empty());\n    }\n    if ((left == null && right != null) || (left != null && right == null)) {\n      return new RealizedChanged<>(Optional.of(new ChangedResponse(left, right, context)));\n    }\n    return cachedDiff(new HashSet<>(), left, right, left.get$ref(), right.get$ref(), context);\n  }\n\n  @Override\n  protected DeferredChanged<ChangedResponse> computeDiff(\n      HashSet<String> refSet, ApiResponse left, ApiResponse right, DiffContext context) {\n    left = refPointer.resolveRef(leftComponents, left, left.get$ref());\n    right = refPointer.resolveRef(rightComponents, right, right.get$ref());\n\n    DeferredBuilder<Changed> builder = new DeferredBuilder<>();\n    ChangedResponse changedResponse = new ChangedResponse(left, right, context);\n    builder\n        .with(\n            openApiDiff\n                .getMetadataDiff()\n                .diff(left.getDescription(), right.getDescription(), context))\n        .ifPresent(changedResponse::setDescription);\n    builder\n        .with(openApiDiff.getContentDiff().diff(left.getContent(), right.getContent(), context))\n        .ifPresent(changedResponse::setContent);\n    builder\n        .with(openApiDiff.getHeadersDiff().diff(left.getHeaders(), right.getHeaders(), context))\n        .ifPresent(changedResponse::setHeaders);\n    builder\n        .with(\n            openApiDiff\n                .getExtensionsDiff()\n                .diff(left.getExtensions(), right.getExtensions(), context))\n        .ifPresent(changedResponse::setExtensions);\n\n    return builder.buildIsChanged(changedResponse);\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final RefPointer<ApiResponse> refPointer = new RefPointer<>(RefType.RESPONSES);", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "RefPointer<ApiResponse>", "name": "refPointer = new RefPointer<>(RefType.RESPONSES)", "syntax_pass": true}, {"attribute_expression": "private final OpenApiDiff openApiDiff;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "OpenApiDiff", "name": "openApiDiff", "syntax_pass": true}, {"attribute_expression": "private final Components leftComponents;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Components", "name": "leftComponents", "syntax_pass": true}, {"attribute_expression": "private final Components rightComponents;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Components", "name": "rightComponents", "syntax_pass": true}]}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/HeaderDiff.java.HeaderDiff", "name": "HeaderDiff", "file_path": "src/main/java/org/openapitools/openapidiff/core/compare/HeaderDiff.java", "superclasses": "", "methods": ["[]HeaderDiff(OpenApiDiff)", "[DeferredChanged<ChangedHeader>]diff(Header,Header,DiffContext)", "[DeferredChanged<ChangedHeader>]computeDiff(HashSet<String>,Header,Header,DiffContext)", "[boolean]getBooleanDiff(Boolean,Boolean)"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/compare/HeaderDiff.java.HeaderDiff.[]HeaderDiff(OpenApiDiff)", "src/main/java/org/openapitools/openapidiff/core/compare/HeaderDiff.java.HeaderDiff.[DeferredChanged<ChangedHeader>]diff(Header,Header,DiffContext)", "src/main/java/org/openapitools/openapidiff/core/compare/HeaderDiff.java.HeaderDiff.[DeferredChanged<ChangedHeader>]computeDiff(HashSet<String>,Header,Header,DiffContext)", "src/main/java/org/openapitools/openapidiff/core/compare/HeaderDiff.java.HeaderDiff.[boolean]getBooleanDiff(Boolean,Boolean)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class HeaderDiff extends ReferenceDiffCache<Header, ChangedHeader> {\n  private static final RefPointer<Header> refPointer = new RefPointer<>(RefType.HEADERS);\n  private final OpenApiDiff openApiDiff;\n  private final Components leftComponents;\n  private final Components rightComponents;\n\n  public HeaderDiff(OpenApiDiff openApiDiff) {\n    this.openApiDiff = openApiDiff;\n    this.leftComponents =\n        openApiDiff.getOldSpecOpenApi() != null\n            ? openApiDiff.getOldSpecOpenApi().getComponents()\n            : null;\n    this.rightComponents =\n        openApiDiff.getNewSpecOpenApi() != null\n            ? openApiDiff.getNewSpecOpenApi().getComponents()\n            : null;\n  }\n\n  public DeferredChanged<ChangedHeader> diff(Header left, Header right, DiffContext context) {\n    return cachedDiff(new HashSet<>(), left, right, left.get$ref(), right.get$ref(), context);\n  }\n\n  @Override\n  protected DeferredChanged<ChangedHeader> computeDiff(\n      HashSet<String> refSet, Header left, Header right, DiffContext context) {\n    left = refPointer.resolveRef(leftComponents, left, left.get$ref());\n    right = refPointer.resolveRef(rightComponents, right, right.get$ref());\n\n    DeferredBuilder<Changed> builder = new DeferredBuilder<>();\n    ChangedHeader changedHeader =\n        new ChangedHeader(left, right, context)\n            .setRequired(getBooleanDiff(left.getRequired(), right.getRequired()))\n            .setDeprecated(\n                !Boolean.TRUE.equals(left.getDeprecated())\n                    && Boolean.TRUE.equals(right.getDeprecated()))\n            .setStyle(!Objects.equals(left.getStyle(), right.getStyle()))\n            .setExplode(getBooleanDiff(left.getExplode(), right.getExplode()));\n    builder\n        .with(\n            openApiDiff\n                .getMetadataDiff()\n                .diff(left.getDescription(), right.getDescription(), context))\n        .ifPresent(changedHeader::setDescription);\n    builder\n        .with(\n            openApiDiff\n                .getSchemaDiff()\n                .diff(left.getSchema(), right.getSchema(), context.copyWithRequired(true)))\n        .ifPresent(changedHeader::setSchema);\n    builder\n        .with(openApiDiff.getContentDiff().diff(left.getContent(), right.getContent(), context))\n        .ifPresent(changedHeader::setContent);\n    builder\n        .with(\n            openApiDiff\n                .getExtensionsDiff()\n                .diff(left.getExtensions(), right.getExtensions(), context))\n        .ifPresent(changedHeader::setExtensions);\n    return builder.buildIsChanged(changedHeader);\n  }\n\n  private boolean getBooleanDiff(Boolean left, Boolean right) {\n    boolean leftRequired = Optional.ofNullable(left).orElse(Boolean.FALSE);\n    boolean rightRequired = Optional.ofNullable(right).orElse(Boolean.FALSE);\n    return leftRequired != rightRequired;\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final RefPointer<Header> refPointer = new RefPointer<>(RefType.HEADERS);", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "RefPointer<Header>", "name": "refPointer = new RefPointer<>(RefType.HEADERS)", "syntax_pass": true}, {"attribute_expression": "private final OpenApiDiff openApiDiff;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "OpenApiDiff", "name": "openApiDiff", "syntax_pass": true}, {"attribute_expression": "private final Components leftComponents;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Components", "name": "leftComponents", "syntax_pass": true}, {"attribute_expression": "private final Components rightComponents;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Components", "name": "rightComponents", "syntax_pass": true}]}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/ContentDiff.java.ContentDiff", "name": "ContentDiff", "file_path": "src/main/java/org/openapitools/openapidiff/core/compare/ContentDiff.java", "superclasses": "", "methods": ["[]ContentDiff(OpenApiDiff)", "[DeferredChanged<ChangedContent>]diff(Content,Content,DiffContext)"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/compare/ContentDiff.java.ContentDiff.[]ContentDiff(OpenApiDiff)", "src/main/java/org/openapitools/openapidiff/core/compare/ContentDiff.java.ContentDiff.[DeferredChanged<ChangedContent>]diff(Content,Content,DiffContext)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class ContentDiff {\n\n  private final OpenApiDiff openApiDiff;\n\n  public ContentDiff(OpenApiDiff openApiDiff) {\n    this.openApiDiff = openApiDiff;\n  }\n\n  public DeferredChanged<ChangedContent> diff(Content left, Content right, DiffContext context) {\n    DeferredBuilder<Changed> builder = new DeferredBuilder<>();\n\n    MapKeyDiff<String, MediaType> mediaTypeDiff = MapKeyDiff.diff(left, right);\n    List<String> sharedMediaTypes = mediaTypeDiff.getSharedKey();\n    Map<String, ChangedMediaType> changedMediaTypes = new LinkedHashMap<>();\n\n    sharedMediaTypes.stream()\n        .forEach(\n            mediaTypeKey -> {\n              MediaType oldMediaType = left.get(mediaTypeKey);\n              MediaType newMediaType = right.get(mediaTypeKey);\n\n              ChangedMediaType changedMediaType =\n                  new ChangedMediaType(oldMediaType.getSchema(), newMediaType.getSchema(), context);\n\n              builder\n                  .with(\n                      openApiDiff\n                          .getSchemaDiff()\n                          .diff(\n                              oldMediaType.getSchema(),\n                              newMediaType.getSchema(),\n                              context.copyWithRequired(true)))\n                  .ifPresent(\n                      value -> {\n                        changedMediaType.setSchema(value);\n                        if (!isUnchanged(changedMediaType)) {\n                          changedMediaTypes.put(mediaTypeKey, changedMediaType);\n                        }\n                      });\n            });\n\n    return builder\n        .build()\n        .mapOptional(\n            value ->\n                isChanged(\n                    new ChangedContent(left, right, context)\n                        .setIncreased(mediaTypeDiff.getIncreased())\n                        .setMissing(mediaTypeDiff.getMissing())\n                        .setChanged(changedMediaTypes)));\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final OpenApiDiff openApiDiff;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "OpenApiDiff", "name": "openApiDiff", "syntax_pass": true}]}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/ParameterDiff.java.ParameterDiff", "name": "ParameterDiff", "file_path": "src/main/java/org/openapitools/openapidiff/core/compare/ParameterDiff.java", "superclasses": "", "methods": ["[]ParameterDiff(OpenApiDiff)", "[DeferredChanged<ChangedParameter>]diff(Parameter,Parameter,DiffContext)", "[DeferredChanged<ChangedParameter>]computeDiff(HashSet<String>,Parameter,Parameter,DiffContext)", "[boolean]getBooleanDiff(Boolean,Boolean)"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/compare/ParameterDiff.java.ParameterDiff.[]ParameterDiff(OpenApiDiff)", "src/main/java/org/openapitools/openapidiff/core/compare/ParameterDiff.java.ParameterDiff.[DeferredChanged<ChangedParameter>]diff(Parameter,Parameter,DiffContext)", "src/main/java/org/openapitools/openapidiff/core/compare/ParameterDiff.java.ParameterDiff.[DeferredChanged<ChangedParameter>]computeDiff(HashSet<String>,Parameter,Parameter,DiffContext)", "src/main/java/org/openapitools/openapidiff/core/compare/ParameterDiff.java.ParameterDiff.[boolean]getBooleanDiff(Boolean,Boolean)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class ParameterDiff extends ReferenceDiffCache<Parameter, ChangedParameter> {\n\n  private static final RefPointer<Parameter> refPointer = new RefPointer<>(RefType.PARAMETERS);\n  private final Components leftComponents;\n  private final Components rightComponents;\n  private final OpenApiDiff openApiDiff;\n\n  public ParameterDiff(OpenApiDiff openApiDiff) {\n    this.openApiDiff = openApiDiff;\n    this.leftComponents =\n        openApiDiff.getOldSpecOpenApi() != null\n            ? openApiDiff.getOldSpecOpenApi().getComponents()\n            : null;\n    this.rightComponents =\n        openApiDiff.getNewSpecOpenApi() != null\n            ? openApiDiff.getNewSpecOpenApi().getComponents()\n            : null;\n  }\n\n  public DeferredChanged<ChangedParameter> diff(\n      Parameter left, Parameter right, DiffContext context) {\n    return cachedDiff(new HashSet<>(), left, right, left.get$ref(), right.get$ref(), context);\n  }\n\n  @Override\n  protected DeferredChanged<ChangedParameter> computeDiff(\n      HashSet<String> refSet, Parameter left, Parameter right, DiffContext context) {\n    left = refPointer.resolveRef(this.leftComponents, left, left.get$ref());\n    right = refPointer.resolveRef(this.rightComponents, right, right.get$ref());\n\n    DeferredBuilder<Changed> builder = new DeferredBuilder<>();\n\n    ChangedParameter changedParameter =\n        new ChangedParameter(right.getName(), right.getIn(), context)\n            .setOldParameter(left)\n            .setNewParameter(right)\n            .setChangeRequired(getBooleanDiff(left.getRequired(), right.getRequired()))\n            .setDeprecated(\n                !Boolean.TRUE.equals(left.getDeprecated())\n                    && Boolean.TRUE.equals(right.getDeprecated()))\n            .setChangeAllowEmptyValue(\n                getBooleanDiff(left.getAllowEmptyValue(), right.getAllowEmptyValue()))\n            .setChangeStyle(!Objects.equals(left.getStyle(), right.getStyle()))\n            .setChangeExplode(getBooleanDiff(left.getExplode(), right.getExplode()));\n    builder\n        .with(\n            openApiDiff\n                .getSchemaDiff()\n                .diff(left.getSchema(), right.getSchema(), context.copyWithRequired(true)))\n        .ifPresent(changedParameter::setSchema);\n    builder\n        .with(\n            openApiDiff\n                .getMetadataDiff()\n                .diff(left.getDescription(), right.getDescription(), context))\n        .ifPresent(changedParameter::setDescription);\n    builder\n        .with(openApiDiff.getContentDiff().diff(left.getContent(), right.getContent(), context))\n        .ifPresent(changedParameter::setContent);\n    builder\n        .with(\n            openApiDiff\n                .getExtensionsDiff()\n                .diff(left.getExtensions(), right.getExtensions(), context))\n        .ifPresent(changedParameter::setExtensions);\n    return builder.buildIsChanged(changedParameter);\n  }\n\n  private boolean getBooleanDiff(Boolean left, Boolean right) {\n    boolean leftRequired = Optional.ofNullable(left).orElse(Boolean.FALSE);\n    boolean rightRequired = Optional.ofNullable(right).orElse(Boolean.FALSE);\n    return leftRequired != rightRequired;\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final RefPointer<Parameter> refPointer = new RefPointer<>(RefType.PARAMETERS);", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "RefPointer<Parameter>", "name": "refPointer = new RefPointer<>(RefType.PARAMETERS)", "syntax_pass": true}, {"attribute_expression": "private final Components leftComponents;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Components", "name": "leftComponents", "syntax_pass": true}, {"attribute_expression": "private final Components rightComponents;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Components", "name": "rightComponents", "syntax_pass": true}, {"attribute_expression": "private final OpenApiDiff openApiDiff;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "OpenApiDiff", "name": "openApiDiff", "syntax_pass": true}]}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/OAuthFlowDiff.java.OAuthFlowDiff", "name": "OAuthFlowDiff", "file_path": "src/main/java/org/openapitools/openapidiff/core/compare/OAuthFlowDiff.java", "superclasses": "", "methods": ["[]OAuthFlowDiff(OpenApiDiff)", "[Map<String, Object>]getExtensions(OAuthFlow)", "[Optional<ChangedOAuthFlow>]diff(OAuthFlow,OAuthFlow,DiffContext)"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/compare/OAuthFlowDiff.java.OAuthFlowDiff.[]OAuthFlowDiff(OpenApiDiff)", "src/main/java/org/openapitools/openapidiff/core/compare/OAuthFlowDiff.java.OAuthFlowDiff.[Map<String, Object>]getExtensions(OAuthFlow)", "src/main/java/org/openapitools/openapidiff/core/compare/OAuthFlowDiff.java.OAuthFlowDiff.[Optional<ChangedOAuthFlow>]diff(OAuthFlow,OAuthFlow,DiffContext)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class OAuthFlowDiff {\n  private final OpenApiDiff openApiDiff;\n\n  public OAuthFlowDiff(OpenApiDiff openApiDiff) {\n    this.openApiDiff = openApiDiff;\n  }\n\n  private static Map<String, Object> getExtensions(OAuthFlow oAuthFlow) {\n    return ofNullable(oAuthFlow).map(OAuthFlow::getExtensions).orElse(null);\n  }\n\n  public Optional<ChangedOAuthFlow> diff(OAuthFlow left, OAuthFlow right, DiffContext context) {\n    ChangedOAuthFlow changedOAuthFlow = new ChangedOAuthFlow(left, right, context);\n    if (left != null && right != null) {\n      changedOAuthFlow\n          .setAuthorizationUrl(\n              !Objects.equals(left.getAuthorizationUrl(), right.getAuthorizationUrl()))\n          .setTokenUrl(!Objects.equals(left.getTokenUrl(), right.getTokenUrl()))\n          .setRefreshUrl(!Objects.equals(left.getRefreshUrl(), right.getRefreshUrl()));\n    }\n    openApiDiff\n        .getExtensionsDiff()\n        .diff(getExtensions(left), getExtensions(right))\n        .ifPresent(changedOAuthFlow::setExtensions);\n    return isChanged(changedOAuthFlow);\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final OpenApiDiff openApiDiff;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "OpenApiDiff", "name": "openApiDiff", "syntax_pass": true}]}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/MetadataDiff.java.MetadataDiff", "name": "MetadataDiff", "file_path": "src/main/java/org/openapitools/openapidiff/core/compare/MetadataDiff.java", "superclasses": "", "methods": ["[]MetadataDiff(OpenApiDiff)", "[Optional<ChangedMetadata>]diff(String,String,DiffContext)"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/compare/MetadataDiff.java.MetadataDiff.[]MetadataDiff(OpenApiDiff)", "src/main/java/org/openapitools/openapidiff/core/compare/MetadataDiff.java.MetadataDiff.[Optional<ChangedMetadata>]diff(String,String,DiffContext)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class MetadataDiff {\n  public MetadataDiff(OpenApiDiff openApiDiff) {}\n\n  public Optional<ChangedMetadata> diff(String left, String right, DiffContext context) {\n    return isChanged(new ChangedMetadata().setLeft(left).setRight(right));\n  }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/SecurityRequirementDiff.java.SecurityRequirementDiff", "name": "SecurityRequirementDiff", "file_path": "src/main/java/org/openapitools/openapidiff/core/compare/SecurityRequirementDiff.java", "superclasses": "", "methods": ["[]SecurityRequirementDiff(OpenApiDiff)", "[SecurityRequirement]getCopy(LinkedHashMap<String, List<String>>)", "[LinkedHashMap<String, List<String>>]contains(SecurityRequirement,String)", "[DeferredChanged<ChangedSecurityRequirement>]diff(SecurityRequirement,SecurityRequirement,DiffContext)"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/compare/SecurityRequirementDiff.java.SecurityRequirementDiff.[]SecurityRequirementDiff(OpenApiDiff)", "src/main/java/org/openapitools/openapidiff/core/compare/SecurityRequirementDiff.java.SecurityRequirementDiff.[SecurityRequirement]getCopy(LinkedHashMap<String, List<String>>)", "src/main/java/org/openapitools/openapidiff/core/compare/SecurityRequirementDiff.java.SecurityRequirementDiff.[LinkedHashMap<String, List<String>>]contains(SecurityRequirement,String)", "src/main/java/org/openapitools/openapidiff/core/compare/SecurityRequirementDiff.java.SecurityRequirementDiff.[DeferredChanged<ChangedSecurityRequirement>]diff(SecurityRequirement,SecurityRequirement,DiffContext)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class SecurityRequirementDiff {\n  private final OpenApiDiff openApiDiff;\n  private final Components leftComponents;\n  private final Components rightComponents;\n\n  public SecurityRequirementDiff(OpenApiDiff openApiDiff) {\n    this.openApiDiff = openApiDiff;\n    this.leftComponents =\n        openApiDiff.getOldSpecOpenApi() != null\n            ? openApiDiff.getOldSpecOpenApi().getComponents()\n            : null;\n    this.rightComponents =\n        openApiDiff.getNewSpecOpenApi() != null\n            ? openApiDiff.getNewSpecOpenApi().getComponents()\n            : null;\n  }\n\n  public static SecurityRequirement getCopy(LinkedHashMap<String, List<String>> right) {\n    SecurityRequirement newSecurityRequirement = new SecurityRequirement();\n    right.forEach((key, value) -> newSecurityRequirement.put(key, new ArrayList<>(value)));\n    return newSecurityRequirement;\n  }\n\n  private LinkedHashMap<String, List<String>> contains(\n      SecurityRequirement right, String schemeRef) {\n    SecurityScheme leftSecurityScheme = leftComponents.getSecuritySchemes().get(schemeRef);\n    LinkedHashMap<String, List<String>> found = new LinkedHashMap<>();\n\n    for (Map.Entry<String, List<String>> entry : right.entrySet()) {\n      SecurityScheme rightSecurityScheme = rightComponents.getSecuritySchemes().get(entry.getKey());\n      if (leftSecurityScheme.getType() == rightSecurityScheme.getType()) {\n        switch (leftSecurityScheme.getType()) {\n          case APIKEY:\n            if (leftSecurityScheme.getName().equals(rightSecurityScheme.getName())) {\n              found.put(entry.getKey(), entry.getValue());\n              return found;\n            }\n            break;\n\n          case OAUTH2:\n          case HTTP:\n          case OPENIDCONNECT:\n            found.put(entry.getKey(), entry.getValue());\n            return found;\n        }\n      }\n    }\n\n    return found;\n  }\n\n  public DeferredChanged<ChangedSecurityRequirement> diff(\n      SecurityRequirement left, SecurityRequirement right, DiffContext context) {\n    DeferredBuilder<Changed> builder = new DeferredBuilder<>();\n\n    ChangedSecurityRequirement changedSecurityRequirement =\n        new ChangedSecurityRequirement(left, right != null ? getCopy(right) : null, context);\n\n    SecurityRequirement leftRequirement = left == null ? new SecurityRequirement() : left;\n    SecurityRequirement rightRequirement = right == null ? new SecurityRequirement() : right;\n\n    for (Map.Entry<String, List<String>> leftEntry : leftRequirement.entrySet()) {\n      LinkedHashMap<String, List<String>> rightSec = contains(rightRequirement, leftEntry.getKey());\n      if (rightSec.isEmpty()) {\n        changedSecurityRequirement.addMissing(leftEntry.getKey(), leftEntry.getValue());\n      } else {\n        Optional<String> rightSchemeRef = rightSec.keySet().stream().findFirst();\n        rightSchemeRef.ifPresent(rightRequirement::remove);\n        rightSchemeRef.ifPresent(\n            rightScheme ->\n                builder\n                    .with(\n                        openApiDiff\n                            .getSecuritySchemeDiff()\n                            .diff(\n                                leftEntry.getKey(),\n                                leftEntry.getValue(),\n                                rightScheme,\n                                rightSec.get(rightScheme),\n                                context))\n                    .ifPresent(changedSecurityRequirement::addChanged));\n      }\n    }\n    rightRequirement.forEach(changedSecurityRequirement::addIncreased);\n\n    return builder.buildIsChanged(changedSecurityRequirement);\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final OpenApiDiff openApiDiff;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "OpenApiDiff", "name": "openApiDiff", "syntax_pass": true}, {"attribute_expression": "private final Components leftComponents;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Components", "name": "leftComponents", "syntax_pass": true}, {"attribute_expression": "private final Components rightComponents;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Components", "name": "rightComponents", "syntax_pass": true}]}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/PathDiff.java.PathDiff", "name": "PathDiff", "file_path": "src/main/java/org/openapitools/openapidiff/core/compare/PathDiff.java", "superclasses": "", "methods": ["[]PathDiff(OpenApiDiff)", "[DeferredChanged<ChangedPath>]diff(PathItem,PathItem,DiffContext)"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/compare/PathDiff.java.PathDiff.[]PathDiff(OpenApiDiff)", "src/main/java/org/openapitools/openapidiff/core/compare/PathDiff.java.PathDiff.[DeferredChanged<ChangedPath>]diff(PathItem,PathItem,DiffContext)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class PathDiff {\n  private final OpenApiDiff openApiDiff;\n\n  public PathDiff(OpenApiDiff openApiDiff) {\n    this.openApiDiff = openApiDiff;\n  }\n\n  public DeferredChanged<ChangedPath> diff(PathItem left, PathItem right, DiffContext context) {\n    Map<PathItem.HttpMethod, Operation> oldOperationMap = left.readOperationsMap();\n    Map<PathItem.HttpMethod, Operation> newOperationMap = right.readOperationsMap();\n    MapKeyDiff<PathItem.HttpMethod, Operation> operationsDiff =\n        MapKeyDiff.diff(oldOperationMap, newOperationMap);\n    List<PathItem.HttpMethod> sharedMethods = operationsDiff.getSharedKey();\n    DeferredBuilder<Changed> builder = new DeferredBuilder<>();\n\n    ChangedPath changedPath =\n        new ChangedPath(context.getUrl(), left, right, context)\n            .setIncreased(operationsDiff.getIncreased())\n            .setMissing(operationsDiff.getMissing());\n    for (PathItem.HttpMethod method : sharedMethods) {\n      Operation oldOperation = oldOperationMap.get(method);\n      Operation newOperation = newOperationMap.get(method);\n      builder\n          .with(\n              openApiDiff\n                  .getOperationDiff()\n                  .diff(\n                      oldOperation,\n                      newOperation,\n                      context\n                          .copyWithMethod(method)\n                          .copyWithLeftRightUrls(context.getLeftUrl(), context.getRightUrl())))\n          .ifPresent(changedPath.getChanged()::add);\n    }\n    builder\n        .with(\n            openApiDiff\n                .getExtensionsDiff()\n                .diff(left.getExtensions(), right.getExtensions(), context))\n        .ifPresent(changedPath::setExtensions);\n\n    return builder.buildIsChanged(changedPath);\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final OpenApiDiff openApiDiff;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "OpenApiDiff", "name": "openApiDiff", "syntax_pass": true}]}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/SecuritySchemeDiff.java.SecuritySchemeDiff", "name": "SecuritySchemeDiff", "file_path": "src/main/java/org/openapitools/openapidiff/core/compare/SecuritySchemeDiff.java", "superclasses": "", "methods": ["[]SecuritySchemeDiff(OpenApiDiff)", "[DeferredChanged<ChangedSecurityScheme>]diff(String,List<String>,String,List<String>,DiffContext)", "[DeferredChanged<ChangedSecurityScheme>]computeDiff(HashSet<String>,SecurityScheme,SecurityScheme,DiffContext)", "[ChangedSecurityScheme]getCopyWithoutScopes(ChangedSecurityScheme,DiffContext)"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/compare/SecuritySchemeDiff.java.SecuritySchemeDiff.[]SecuritySchemeDiff(OpenApiDiff)", "src/main/java/org/openapitools/openapidiff/core/compare/SecuritySchemeDiff.java.SecuritySchemeDiff.[DeferredChanged<ChangedSecurityScheme>]diff(String,List<String>,String,List<String>,DiffContext)", "src/main/java/org/openapitools/openapidiff/core/compare/SecuritySchemeDiff.java.SecuritySchemeDiff.[DeferredChanged<ChangedSecurityScheme>]computeDiff(HashSet<String>,SecurityScheme,SecurityScheme,DiffContext)", "src/main/java/org/openapitools/openapidiff/core/compare/SecuritySchemeDiff.java.SecuritySchemeDiff.[ChangedSecurityScheme]getCopyWithoutScopes(ChangedSecurityScheme,DiffContext)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class SecuritySchemeDiff extends ReferenceDiffCache<SecurityScheme, ChangedSecurityScheme> {\n  private final OpenApiDiff openApiDiff;\n  private final Components leftComponents;\n  private final Components rightComponents;\n\n  public SecuritySchemeDiff(OpenApiDiff openApiDiff) {\n    this.openApiDiff = openApiDiff;\n    this.leftComponents =\n        openApiDiff.getOldSpecOpenApi() != null\n            ? openApiDiff.getOldSpecOpenApi().getComponents()\n            : null;\n    this.rightComponents =\n        openApiDiff.getNewSpecOpenApi() != null\n            ? openApiDiff.getNewSpecOpenApi().getComponents()\n            : null;\n  }\n\n  public DeferredChanged<ChangedSecurityScheme> diff(\n      String leftSchemeRef,\n      List<String> leftScopes,\n      String rightSchemeRef,\n      List<String> rightScopes,\n      DiffContext context) {\n    SecurityScheme leftSecurityScheme = leftComponents.getSecuritySchemes().get(leftSchemeRef);\n    SecurityScheme rightSecurityScheme = rightComponents.getSecuritySchemes().get(rightSchemeRef);\n    DeferredChanged<ChangedSecurityScheme> changedSecuritySchemeOpt =\n        cachedDiff(\n            new HashSet<>(),\n            leftSecurityScheme,\n            rightSecurityScheme,\n            leftSchemeRef,\n            rightSchemeRef,\n            context);\n\n    return changedSecuritySchemeOpt.map(\n        changedSecuritySchemeOptional -> {\n          ChangedSecurityScheme changedSecurityScheme =\n              changedSecuritySchemeOptional.orElse(\n                  new ChangedSecurityScheme(leftSecurityScheme, rightSecurityScheme, context));\n          changedSecurityScheme = getCopyWithoutScopes(changedSecurityScheme, context);\n\n          if (changedSecurityScheme != null\n              && leftSecurityScheme.getType() == SecurityScheme.Type.OAUTH2) {\n            isChanged(ListDiff.diff(new ChangedSecuritySchemeScopes(leftScopes, rightScopes)))\n                .ifPresent(changedSecurityScheme::setChangedScopes);\n          }\n\n          return changedSecurityScheme;\n        });\n  }\n\n  @Override\n  protected DeferredChanged<ChangedSecurityScheme> computeDiff(\n      HashSet<String> refSet,\n      SecurityScheme leftSecurityScheme,\n      SecurityScheme rightSecurityScheme,\n      DiffContext context) {\n    ChangedSecurityScheme changedSecurityScheme =\n        new ChangedSecurityScheme(leftSecurityScheme, rightSecurityScheme, context);\n\n    openApiDiff\n        .getMetadataDiff()\n        .diff(leftSecurityScheme.getDescription(), rightSecurityScheme.getDescription(), context)\n        .ifPresent(changedSecurityScheme::setDescription);\n\n    switch (leftSecurityScheme.getType()) {\n      case APIKEY:\n        changedSecurityScheme.setChangedIn(\n            !Objects.equals(leftSecurityScheme.getIn(), rightSecurityScheme.getIn()));\n        break;\n\n      case OAUTH2:\n        openApiDiff\n            .getOAuthFlowsDiff()\n            .diff(leftSecurityScheme.getFlows(), rightSecurityScheme.getFlows(), context)\n            .ifPresent(changedSecurityScheme::setOAuthFlows);\n        break;\n\n      case HTTP:\n        changedSecurityScheme.setChangedScheme(\n            !Objects.equals(leftSecurityScheme.getScheme(), rightSecurityScheme.getScheme()));\n        changedSecurityScheme.setChangedBearerFormat(\n            !Objects.equals(\n                leftSecurityScheme.getBearerFormat(), rightSecurityScheme.getBearerFormat()));\n        break;\n\n      case OPENIDCONNECT:\n        changedSecurityScheme.setChangedOpenIdConnectUrl(\n            !Objects.equals(\n                leftSecurityScheme.getOpenIdConnectUrl(),\n                rightSecurityScheme.getOpenIdConnectUrl()));\n        break;\n    }\n    openApiDiff\n        .getExtensionsDiff()\n        .diff(leftSecurityScheme.getExtensions(), rightSecurityScheme.getExtensions(), context)\n        .ifPresent(changedSecurityScheme::setExtensions);\n\n    return new RealizedChanged<>(changedSecurityScheme);\n  }\n\n  private ChangedSecurityScheme getCopyWithoutScopes(\n      ChangedSecurityScheme original, DiffContext context) {\n    return new ChangedSecurityScheme(\n            original.getOldSecurityScheme(), original.getNewSecurityScheme(), context)\n        .setChangedType(original.isChangedType())\n        .setChangedIn(original.isChangedIn())\n        .setChangedScheme(original.isChangedScheme())\n        .setChangedBearerFormat(original.isChangedBearerFormat())\n        .setDescription(original.getDescription())\n        .setOAuthFlows(original.getOAuthFlows())\n        .setChangedOpenIdConnectUrl(original.isChangedOpenIdConnectUrl());\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final OpenApiDiff openApiDiff;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "OpenApiDiff", "name": "openApiDiff", "syntax_pass": true}, {"attribute_expression": "private final Components leftComponents;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Components", "name": "leftComponents", "syntax_pass": true}, {"attribute_expression": "private final Components rightComponents;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Components", "name": "rightComponents", "syntax_pass": true}]}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff", "name": "OpenApiDiff", "file_path": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java", "superclasses": "", "methods": ["[]OpenApiDiff(OpenAPI,OpenAPI,OpenApiDiffOptions)", "[ChangedOpenApi]compare(OpenAPI,OpenAPI,OpenApiDiffOptions)", "[void]initializeFields()", "[OpenApiDiffOptions]getOptions()", "[ChangedOpenApi]compare()", "[void]setChangedExtension(ChangedExtensions)", "[void]preProcess(OpenAPI)", "[ChangedOpenApi]getChangedOpenApi()", "[DeferredSchemaCache]getDeferredSchemaCache()", "[PathsDiff]getPathsDiff()", "[PathDiff]getPathDiff()", "[SchemaDiff]getSchemaDiff()", "[ContentDiff]getContentDiff()", "[ParametersDiff]getParametersDiff()", "[ParameterDiff]getParameterDiff()", "[RequestBodyDiff]getRequestBodyDiff()", "[ResponseDiff]getResponseDiff()", "[HeadersDiff]getHeadersDiff()", "[HeaderDiff]getHeaderDiff()", "[ApiResponseDiff]getApiResponseDiff()", "[OperationDiff]getOperationDiff()", "[SecurityRequirementsDiff]getSecurityRequirementsDiff()", "[SecurityRequirementDiff]getSecurityRequirementDiff()", "[SecuritySchemeDiff]getSecuritySchemeDiff()", "[OAuthFlowsDiff]getOAuthFlowsDiff()", "[OAuthFlowDiff]getOAuthFlowDiff()", "[ExtensionsDiff]getExtensionsDiff()", "[MetadataDiff]getMetadataDiff()", "[OpenAPI]getOldSpecOpenApi()", "[OpenAPI]getNewSpecOpenApi()", "[List<Endpoint>]getNewEndpoints()", "[List<Endpoint>]getMissingEndpoints()", "[List<ChangedOperation>]getChangedOperations()", "[ChangedExtensions]getChangedExtensions()"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff.[]OpenApiDiff(OpenAPI,OpenAPI,OpenApiDiffOptions)", "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff.[ChangedOpenApi]compare(OpenAPI,OpenAPI,OpenApiDiffOptions)", "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff.[void]initializeFields()", "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff.[OpenApiDiffOptions]getOptions()", "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff.[ChangedOpenApi]compare()", "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff.[void]setChangedExtension(ChangedExtensions)", "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff.[void]preProcess(OpenAPI)", "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff.[ChangedOpenApi]getChangedOpenApi()", "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff.[DeferredSchemaCache]getDeferredSchemaCache()", "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff.[PathsDiff]getPathsDiff()", "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff.[PathDiff]getPathDiff()", "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff.[SchemaDiff]getSchemaDiff()", "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff.[ContentDiff]getContentDiff()", "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff.[ParametersDiff]getParametersDiff()", "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff.[ParameterDiff]getParameterDiff()", "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff.[RequestBodyDiff]getRequestBodyDiff()", "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff.[ResponseDiff]getResponseDiff()", "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff.[HeadersDiff]getHeadersDiff()", "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff.[HeaderDiff]getHeaderDiff()", "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff.[ApiResponseDiff]getApiResponseDiff()", "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff.[OperationDiff]getOperationDiff()", "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff.[SecurityRequirementsDiff]getSecurityRequirementsDiff()", "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff.[SecurityRequirementDiff]getSecurityRequirementDiff()", "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff.[SecuritySchemeDiff]getSecuritySchemeDiff()", "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff.[OAuthFlowsDiff]getOAuthFlowsDiff()", "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff.[OAuthFlowDiff]getOAuthFlowDiff()", "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff.[ExtensionsDiff]getExtensionsDiff()", "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff.[MetadataDiff]getMetadataDiff()", "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff.[OpenAPI]getOldSpecOpenApi()", "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff.[OpenAPI]getNewSpecOpenApi()", "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff.[List<Endpoint>]getNewEndpoints()", "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff.[List<Endpoint>]getMissingEndpoints()", "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff.[List<ChangedOperation>]getChangedOperations()", "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff.[ChangedExtensions]getChangedExtensions()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class OpenApiDiff {\n  private PathsDiff pathsDiff;\n  private PathDiff pathDiff;\n  private SchemaDiff schemaDiff;\n  private ContentDiff contentDiff;\n  private ParametersDiff parametersDiff;\n  private ParameterDiff parameterDiff;\n  private RequestBodyDiff requestBodyDiff;\n  private ResponseDiff responseDiff;\n  private HeadersDiff headersDiff;\n  private HeaderDiff headerDiff;\n  private ApiResponseDiff apiResponseDiff;\n  private OperationDiff operationDiff;\n  private SecurityRequirementsDiff securityRequirementsDiff;\n  private SecurityRequirementDiff securityRequirementDiff;\n  private SecuritySchemeDiff securitySchemeDiff;\n  private OAuthFlowsDiff oAuthFlowsDiff;\n  private OAuthFlowDiff oAuthFlowDiff;\n  private ExtensionsDiff extensionsDiff;\n  private MetadataDiff metadataDiff;\n  private final OpenAPI oldSpecOpenApi;\n  private final OpenAPI newSpecOpenApi;\n  private final OpenApiDiffOptions options;\n  private List<Endpoint> newEndpoints;\n  private List<Endpoint> missingEndpoints;\n  private List<ChangedOperation> changedOperations;\n  private ChangedExtensions changedExtensions;\n  private DeferredSchemaCache deferredSchemaCache;\n\n  /*\n   * @param oldSpecOpenApi\n   * @param newSpecOpenApi\n   * @param diffOptions\n   */\n  private OpenApiDiff(OpenAPI oldSpecOpenApi, OpenAPI newSpecOpenApi, OpenApiDiffOptions options) {\n    this.oldSpecOpenApi = oldSpecOpenApi;\n    this.newSpecOpenApi = newSpecOpenApi;\n    this.options = options;\n    if (null == oldSpecOpenApi || null == newSpecOpenApi) {\n      throw new RuntimeException(\"one of the old or new object is null\");\n    }\n    if (null == options) {\n      throw new IllegalArgumentException(\"options parameter is null but is required\");\n    }\n    initializeFields();\n  }\n\n  public static ChangedOpenApi compare(\n      OpenAPI oldSpec, OpenAPI newSpec, OpenApiDiffOptions diffOptions) {\n    return new OpenApiDiff(oldSpec, newSpec, diffOptions).compare();\n  }\n\n  private void initializeFields() {\n    this.pathsDiff = new PathsDiff(this);\n    this.pathDiff = new PathDiff(this);\n    this.schemaDiff = new SchemaDiff(this);\n    this.contentDiff = new ContentDiff(this);\n    this.parametersDiff = new ParametersDiff(this);\n    this.parameterDiff = new ParameterDiff(this);\n    this.requestBodyDiff = new RequestBodyDiff(this);\n    this.responseDiff = new ResponseDiff(this);\n    this.headersDiff = new HeadersDiff(this);\n    this.headerDiff = new HeaderDiff(this);\n    this.apiResponseDiff = new ApiResponseDiff(this);\n    this.operationDiff = new OperationDiff(this);\n    this.securityRequirementsDiff = new SecurityRequirementsDiff(this);\n    this.securityRequirementDiff = new SecurityRequirementDiff(this);\n    this.securitySchemeDiff = new SecuritySchemeDiff(this);\n    this.oAuthFlowsDiff = new OAuthFlowsDiff(this);\n    this.oAuthFlowDiff = new OAuthFlowDiff(this);\n    this.extensionsDiff = new ExtensionsDiff(this);\n    this.metadataDiff = new MetadataDiff(this);\n    this.deferredSchemaCache = new DeferredSchemaCache(this);\n  }\n\n  public OpenApiDiffOptions getOptions() {\n    return options;\n  }\n\n  private ChangedOpenApi compare() {\n    preProcess(oldSpecOpenApi);\n    preProcess(newSpecOpenApi);\n\n    // 1st pass scans paths to collect all schemas\n    DeferredChanged<ChangedPaths> paths =\n        this.pathsDiff.diff(\n            valOrEmpty(oldSpecOpenApi.getPaths()), valOrEmpty(newSpecOpenApi.getPaths()));\n\n    // 2nd pass processes deferred schemas\n    deferredSchemaCache.process();\n\n    this.newEndpoints = new ArrayList<>();\n    this.missingEndpoints = new ArrayList<>();\n    this.changedOperations = new ArrayList<>();\n\n    paths.ifPresent(\n        changedPaths -> {\n          this.newEndpoints = EndpointUtils.convert2EndpointList(changedPaths.getIncreased());\n          this.missingEndpoints = EndpointUtils.convert2EndpointList(changedPaths.getMissing());\n          changedPaths\n              .getChanged()\n              .keySet()\n              .forEach(\n                  path -> {\n                    ChangedPath changedPath = changedPaths.getChanged().get(path);\n                    this.newEndpoints.addAll(\n                        EndpointUtils.convert2Endpoints(path, changedPath.getIncreased()));\n                    this.missingEndpoints.addAll(\n                        EndpointUtils.convert2Endpoints(path, changedPath.getMissing()));\n                    changedOperations.addAll(changedPath.getChanged());\n                  });\n        });\n    getExtensionsDiff()\n        .diff(oldSpecOpenApi.getExtensions(), newSpecOpenApi.getExtensions())\n        .ifPresent(this::setChangedExtension);\n\n    return getChangedOpenApi();\n  }\n\n  private void setChangedExtension(ChangedExtensions changedExtension) {\n    this.changedExtensions = changedExtension;\n  }\n\n  private void preProcess(OpenAPI openApi) {\n    List<SecurityRequirement> securityRequirements = openApi.getSecurity();\n    if (securityRequirements != null) {\n      List<SecurityRequirement> distinctSecurityRequirements =\n          securityRequirements.stream().distinct().collect(Collectors.toList());\n      Map<String, PathItem> paths = openApi.getPaths();\n      if (paths != null) {\n        paths\n            .values()\n            .forEach(\n                pathItem ->\n                    pathItem.readOperationsMap().values().stream()\n                        .filter(operation -> operation.getSecurity() != null)\n                        .forEach(\n                            operation ->\n                                operation.setSecurity(\n                                    operation.getSecurity().stream()\n                                        .distinct()\n                                        .collect(Collectors.toList()))));\n        paths\n            .values()\n            .forEach(\n                pathItem ->\n                    pathItem.readOperationsMap().values().stream()\n                        .filter(operation -> operation.getSecurity() == null)\n                        .forEach(operation -> operation.setSecurity(distinctSecurityRequirements)));\n      }\n      openApi.setSecurity(null);\n    }\n  }\n\n  private ChangedOpenApi getChangedOpenApi() {\n    return new ChangedOpenApi(options)\n        .setMissingEndpoints(missingEndpoints)\n        .setNewEndpoints(newEndpoints)\n        .setNewSpecOpenApi(newSpecOpenApi)\n        .setOldSpecOpenApi(oldSpecOpenApi)\n        .setChangedOperations(changedOperations)\n        .setChangedExtensions(changedExtensions)\n        .setChangedSchemas(deferredSchemaCache.getChangedSchemas());\n  }\n\n  public DeferredSchemaCache getDeferredSchemaCache() {\n    return deferredSchemaCache;\n  }\n\n  public PathsDiff getPathsDiff() {\n    return this.pathsDiff;\n  }\n\n  public PathDiff getPathDiff() {\n    return this.pathDiff;\n  }\n\n  public SchemaDiff getSchemaDiff() {\n    return this.schemaDiff;\n  }\n\n  public ContentDiff getContentDiff() {\n    return this.contentDiff;\n  }\n\n  public ParametersDiff getParametersDiff() {\n    return this.parametersDiff;\n  }\n\n  public ParameterDiff getParameterDiff() {\n    return this.parameterDiff;\n  }\n\n  public RequestBodyDiff getRequestBodyDiff() {\n    return this.requestBodyDiff;\n  }\n\n  public ResponseDiff getResponseDiff() {\n    return this.responseDiff;\n  }\n\n  public HeadersDiff getHeadersDiff() {\n    return this.headersDiff;\n  }\n\n  public HeaderDiff getHeaderDiff() {\n    return this.headerDiff;\n  }\n\n  public ApiResponseDiff getApiResponseDiff() {\n    return this.apiResponseDiff;\n  }\n\n  public OperationDiff getOperationDiff() {\n    return this.operationDiff;\n  }\n\n  public SecurityRequirementsDiff getSecurityRequirementsDiff() {\n    return this.securityRequirementsDiff;\n  }\n\n  public SecurityRequirementDiff getSecurityRequirementDiff() {\n    return this.securityRequirementDiff;\n  }\n\n  public SecuritySchemeDiff getSecuritySchemeDiff() {\n    return this.securitySchemeDiff;\n  }\n\n  public OAuthFlowsDiff getOAuthFlowsDiff() {\n    return this.oAuthFlowsDiff;\n  }\n\n  public OAuthFlowDiff getOAuthFlowDiff() {\n    return this.oAuthFlowDiff;\n  }\n\n  public ExtensionsDiff getExtensionsDiff() {\n    return this.extensionsDiff;\n  }\n\n  public MetadataDiff getMetadataDiff() {\n    return this.metadataDiff;\n  }\n\n  public OpenAPI getOldSpecOpenApi() {\n    return this.oldSpecOpenApi;\n  }\n\n  public OpenAPI getNewSpecOpenApi() {\n    return this.newSpecOpenApi;\n  }\n\n  public List<Endpoint> getNewEndpoints() {\n    return this.newEndpoints;\n  }\n\n  public List<Endpoint> getMissingEndpoints() {\n    return this.missingEndpoints;\n  }\n\n  public List<ChangedOperation> getChangedOperations() {\n    return this.changedOperations;\n  }\n\n  public ChangedExtensions getChangedExtensions() {\n    return this.changedExtensions;\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private PathsDiff pathsDiff;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "PathsDiff", "name": "pathsDiff", "syntax_pass": true}, {"attribute_expression": "private PathDiff pathDiff;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "PathDiff", "name": "pathDiff", "syntax_pass": true}, {"attribute_expression": "private SchemaDiff schemaDiff;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "SchemaDiff", "name": "schemaDiff", "syntax_pass": true}, {"attribute_expression": "private ContentDiff contentDiff;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "ContentDiff", "name": "contentDiff", "syntax_pass": true}, {"attribute_expression": "private ParametersDiff parametersDiff;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "ParametersDiff", "name": "parametersDiff", "syntax_pass": true}, {"attribute_expression": "private ParameterDiff parameterDiff;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "ParameterDiff", "name": "parameterDiff", "syntax_pass": true}, {"attribute_expression": "private RequestBodyDiff requestBodyDiff;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "RequestBodyDiff", "name": "requestBodyDiff", "syntax_pass": true}, {"attribute_expression": "private ResponseDiff responseDiff;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "ResponseDiff", "name": "responseDiff", "syntax_pass": true}, {"attribute_expression": "private HeadersDiff headersDiff;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "HeadersDiff", "name": "headersDiff", "syntax_pass": true}, {"attribute_expression": "private HeaderDiff headerDiff;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "HeaderDiff", "name": "headerDiff", "syntax_pass": true}, {"attribute_expression": "private ApiResponseDiff apiResponseDiff;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "ApiResponseDiff", "name": "apiResponseDiff", "syntax_pass": true}, {"attribute_expression": "private OperationDiff operationDiff;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "OperationDiff", "name": "operationDiff", "syntax_pass": true}, {"attribute_expression": "private SecurityRequirementsDiff securityRequirementsDiff;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "SecurityRequirementsDiff", "name": "securityRequirementsDiff", "syntax_pass": true}, {"attribute_expression": "private SecurityRequirementDiff securityRequirementDiff;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "SecurityRequirementDiff", "name": "securityRequirementDiff", "syntax_pass": true}, {"attribute_expression": "private SecuritySchemeDiff securitySchemeDiff;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "SecuritySchemeDiff", "name": "securitySchemeDiff", "syntax_pass": true}, {"attribute_expression": "private OAuthFlowsDiff oAuthFlowsDiff;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "OAuthFlowsDiff", "name": "oAuthFlowsDiff", "syntax_pass": true}, {"attribute_expression": "private OAuthFlowDiff oAuthFlowDiff;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "OAuthFlowDiff", "name": "oAuthFlowDiff", "syntax_pass": true}, {"attribute_expression": "private ExtensionsDiff extensionsDiff;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "ExtensionsDiff", "name": "extensionsDiff", "syntax_pass": true}, {"attribute_expression": "private MetadataDiff metadataDiff;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MetadataDiff", "name": "metadataDiff", "syntax_pass": true}, {"attribute_expression": "private final OpenAPI oldSpecOpenApi;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "OpenAPI", "name": "oldSpecOpenApi", "syntax_pass": true}, {"attribute_expression": "private final OpenAPI newSpecOpenApi;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "OpenAPI", "name": "newSpecOpenApi", "syntax_pass": true}, {"attribute_expression": "private final OpenApiDiffOptions options;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "OpenApiDiffOptions", "name": "options", "syntax_pass": true}, {"attribute_expression": "private List<Endpoint> newEndpoints;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "List<Endpoint>", "name": "newEndpoints", "syntax_pass": true}, {"attribute_expression": "private List<Endpoint> missingEndpoints;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "List<Endpoint>", "name": "missingEndpoints", "syntax_pass": true}, {"attribute_expression": "private List<ChangedOperation> changedOperations;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "List<ChangedOperation>", "name": "changedOperations", "syntax_pass": true}, {"attribute_expression": "private ChangedExtensions changedExtensions;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "ChangedExtensions", "name": "changedExtensions", "syntax_pass": true}, {"attribute_expression": "private DeferredSchemaCache deferredSchemaCache;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "DeferredSchemaCache", "name": "deferredSchemaCache", "syntax_pass": true}]}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiffOptions.java.OpenApiDiffOptions", "name": "OpenApiDiffOptions", "file_path": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiffOptions.java", "superclasses": "", "methods": ["[]OpenApiDiffOptions(CompositeConfiguration)", "[CompositeConfiguration]getConfig()", "[Builder]builder()"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiffOptions.java.OpenApiDiffOptions.[]OpenApiDiffOptions(CompositeConfiguration)", "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiffOptions.java.OpenApiDiffOptions.[CompositeConfiguration]getConfig()", "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiffOptions.java.OpenApiDiffOptions.[Builder]builder()"], "overrides": null, "attributes": [{"original_string": "  public static class Builder {\n    private OpenApiDiffOptions built = new OpenApiDiffOptions(new CompositeConfiguration());\n\n    public Builder configYaml(File file) {\n      YAMLConfiguration yamlConfig = new YAMLConfiguration();\n      try {\n        yamlConfig.read(new FileReader(file));\n      } catch (ConfigurationException | FileNotFoundException e) {\n        throw new IllegalArgumentException(\"Problem loading config. file=\" + file, e);\n      }\n      // Ideally immutable, but since it isn't, we just modify the config directly\n      built.getConfig().addConfigurationFirst(yamlConfig);\n      return this;\n    }\n\n    public Builder configProperty(String propKey, String propVal) {\n      built.getConfig().setProperty(propKey, propVal);\n      return this;\n    }\n\n    public OpenApiDiffOptions build() {\n      return built;\n    }\n  }", "definition": "  public static class Builder", "class_docstring": "", "name": "Builder", "super_interfaces": [], "superclasses": "", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "fields": [{"attribute_expression": "private OpenApiDiffOptions built = new OpenApiDiffOptions(new CompositeConfiguration());", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "OpenApiDiffOptions", "name": "built = new OpenApiDiffOptions(new CompositeConfiguration())", "syntax_pass": true}], "classes": []}, "syntax_pass": true, "methods": [{"syntax_pass": true, "original_string": "    public Builder configYaml(File file) {\n      YAMLConfiguration yamlConfig = new YAMLConfiguration();\n      try {\n        yamlConfig.read(new FileReader(file));\n      } catch (ConfigurationException | FileNotFoundException e) {\n        throw new IllegalArgumentException(\"Problem loading config. file=\" + file, e);\n      }\n      // Ideally immutable, but since it isn't, we just modify the config directly\n      built.getConfig().addConfigurationFirst(yamlConfig);\n      return this;\n    }", "docstring": "", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Builder", "classes": []}, "name": "configYaml", "params": [{"name": "file", "type": "File"}], "body": "                                         {\n      YAMLConfiguration yamlConfig = new YAMLConfiguration();\n      try {\n        yamlConfig.read(new FileReader(file));\n      } catch (ConfigurationException | FileNotFoundException e) {\n        throw new IllegalArgumentException(\"Problem loading config. file=\" + file, e);\n      }\n      // Ideally immutable, but since it isn't, we just modify the config directly\n      built.getConfig().addConfigurationFirst(yamlConfig);\n      return this;\n    }", "signature": "public Builder configYaml(File file)"}, {"syntax_pass": true, "original_string": "    public Builder configProperty(String propKey, String propVal) {\n      built.getConfig().setProperty(propKey, propVal);\n      return this;\n    }", "docstring": "", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Builder", "classes": []}, "name": "configProperty", "params": [{"name": "propKey", "type": "String"}, {"name": "propVal", "type": "String"}], "body": "                                                                  {\n      built.getConfig().setProperty(propKey, propVal);\n      return this;\n    }", "signature": "public Builder configProperty(String propKey, String propVal)"}, {"syntax_pass": true, "original_string": "    public OpenApiDiffOptions build() {\n      return built;\n    }", "docstring": "", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "OpenApiDiffOptions", "classes": []}, "name": "build", "params": [], "body": "                                      {\n      return built;\n    }", "signature": "public OpenApiDiffOptions build()"}]}], "class_docstring": "", "original_string": "public class OpenApiDiffOptions {\n  private final CompositeConfiguration config;\n\n  private OpenApiDiffOptions(CompositeConfiguration config) {\n    this.config = config;\n  }\n\n  public CompositeConfiguration getConfig() {\n    return config;\n  }\n\n  public static Builder builder() {\n    return new Builder();\n  }\n\n  public static class Builder {\n    private OpenApiDiffOptions built = new OpenApiDiffOptions(new CompositeConfiguration());\n\n    public Builder configYaml(File file) {\n      YAMLConfiguration yamlConfig = new YAMLConfiguration();\n      try {\n        yamlConfig.read(new FileReader(file));\n      } catch (ConfigurationException | FileNotFoundException e) {\n        throw new IllegalArgumentException(\"Problem loading config. file=\" + file, e);\n      }\n      // Ideally immutable, but since it isn't, we just modify the config directly\n      built.getConfig().addConfigurationFirst(yamlConfig);\n      return this;\n    }\n\n    public Builder configProperty(String propKey, String propVal) {\n      built.getConfig().setProperty(propKey, propVal);\n      return this;\n    }\n\n    public OpenApiDiffOptions build() {\n      return built;\n    }\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final CompositeConfiguration config;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "CompositeConfiguration", "name": "config", "syntax_pass": true}]}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/CacheKey.java.CacheKey", "name": "CacheKey", "file_path": "src/main/java/org/openapitools/openapidiff/core/compare/CacheKey.java", "superclasses": "", "methods": ["[]CacheKey(String,String,DiffContext)", "[String]getLeft()", "[String]getRight()", "[DiffContext]getContext()", "[boolean]equals(Object)", "[int]hashCode()", "[java.lang.String]toString()"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/compare/CacheKey.java.CacheKey.[]CacheKey(String,String,DiffContext)", "src/main/java/org/openapitools/openapidiff/core/compare/CacheKey.java.CacheKey.[String]getLeft()", "src/main/java/org/openapitools/openapidiff/core/compare/CacheKey.java.CacheKey.[String]getRight()", "src/main/java/org/openapitools/openapidiff/core/compare/CacheKey.java.CacheKey.[DiffContext]getContext()", "src/main/java/org/openapitools/openapidiff/core/compare/CacheKey.java.CacheKey.[boolean]equals(Object)", "src/main/java/org/openapitools/openapidiff/core/compare/CacheKey.java.CacheKey.[int]hashCode()", "src/main/java/org/openapitools/openapidiff/core/compare/CacheKey.java.CacheKey.[java.lang.String]toString()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class CacheKey {\n  private final String left;\n  private final String right;\n  private final DiffContext context;\n\n  public CacheKey(final String left, final String right, final DiffContext context) {\n    this.left = left;\n    this.right = right;\n    this.context = context;\n  }\n\n  public String getLeft() {\n    return this.left;\n  }\n\n  public String getRight() {\n    return this.right;\n  }\n\n  public DiffContext getContext() {\n    return this.context;\n  }\n\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    CacheKey cacheKey = (CacheKey) o;\n    return Objects.equals(left, cacheKey.left)\n        && Objects.equals(right, cacheKey.right)\n        && Objects.equals(context, cacheKey.context);\n  }\n\n  @Override\n  public int hashCode() {\n    return Objects.hash(left, right, context);\n  }\n\n  @java.lang.Override\n  public java.lang.String toString() {\n    return \"CacheKey(left=\"\n        + this.getLeft()\n        + \", right=\"\n        + this.getRight()\n        + \", context=\"\n        + this.getContext()\n        + \")\";\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final String left;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "left", "syntax_pass": true}, {"attribute_expression": "private final String right;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "right", "syntax_pass": true}, {"attribute_expression": "private final DiffContext context;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "DiffContext", "name": "context", "syntax_pass": true}]}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/ExtensionsDiff.java.ExtensionsDiff", "name": "ExtensionsDiff", "file_path": "src/main/java/org/openapitools/openapidiff/core/compare/ExtensionsDiff.java", "superclasses": "", "methods": ["[]ExtensionsDiff(OpenApiDiff)", "[boolean]isParentApplicable(Change.Type,Object,Map<String, Object>,DiffContext)", "[Optional<ExtensionDiff>]getExtensionDiff(String)", "[Optional<T>]executeExtension(String,Function<ExtensionDiff, T>)", "[Optional<ChangedExtensions>]diff(Map<String, Object>,Map<String, Object>)", "[Optional<ChangedExtensions>]diff(Map<String, Object>,Map<String, Object>,DiffContext)", "[Optional<Changed>]executeExtensionDiff(String,Change<?>,DiffContext)"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/compare/ExtensionsDiff.java.ExtensionsDiff.[]ExtensionsDiff(OpenApiDiff)", "src/main/java/org/openapitools/openapidiff/core/compare/ExtensionsDiff.java.ExtensionsDiff.[boolean]isParentApplicable(Change.Type,Object,Map<String, Object>,DiffContext)", "src/main/java/org/openapitools/openapidiff/core/compare/ExtensionsDiff.java.ExtensionsDiff.[Optional<ExtensionDiff>]getExtensionDiff(String)", "src/main/java/org/openapitools/openapidiff/core/compare/ExtensionsDiff.java.ExtensionsDiff.[Optional<T>]executeExtension(String,Function<ExtensionDiff, T>)", "src/main/java/org/openapitools/openapidiff/core/compare/ExtensionsDiff.java.ExtensionsDiff.[Optional<ChangedExtensions>]diff(Map<String, Object>,Map<String, Object>)", "src/main/java/org/openapitools/openapidiff/core/compare/ExtensionsDiff.java.ExtensionsDiff.[Optional<ChangedExtensions>]diff(Map<String, Object>,Map<String, Object>,DiffContext)", "src/main/java/org/openapitools/openapidiff/core/compare/ExtensionsDiff.java.ExtensionsDiff.[Optional<Changed>]executeExtensionDiff(String,Change<?>,DiffContext)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class ExtensionsDiff {\n  private final OpenApiDiff openApiDiff;\n\n  private final List<ExtensionDiff> extensionDiffs = new ArrayList<>();\n\n  public ExtensionsDiff(OpenApiDiff openApiDiff) {\n    this.openApiDiff = openApiDiff;\n    ServiceLoader<ExtensionDiff> extensionsLoader = ServiceLoader.load(ExtensionDiff.class);\n    extensionsLoader.reload();\n    for (ExtensionDiff anExtensionsLoader : extensionsLoader) {\n      extensionDiffs.add(anExtensionsLoader);\n    }\n  }\n\n  public boolean isParentApplicable(\n      Change.Type type, Object parent, Map<String, Object> extensions, DiffContext context) {\n    if (extensions.isEmpty()) {\n      return true;\n    }\n    return extensions.entrySet().stream()\n        .map(\n            entry ->\n                executeExtension(\n                    entry.getKey(),\n                    extensionDiff ->\n                        extensionDiff.isParentApplicable(type, parent, entry.getValue(), context)))\n        .allMatch(aBoolean -> aBoolean.orElse(true));\n  }\n\n  public Optional<ExtensionDiff> getExtensionDiff(String name) {\n    return extensionDiffs.stream().filter(diff -> (\"x-\" + diff.getName()).equals(name)).findFirst();\n  }\n\n  public <T> Optional<T> executeExtension(String name, Function<ExtensionDiff, T> predicate) {\n    return getExtensionDiff(name)\n        .map(extensionDiff -> extensionDiff.setOpenApiDiff(openApiDiff))\n        .map(predicate);\n  }\n\n  public Optional<ChangedExtensions> diff(Map<String, Object> left, Map<String, Object> right) {\n    return this.diff(left, right, null);\n  }\n\n  public Optional<ChangedExtensions> diff(\n      Map<String, Object> left, Map<String, Object> right, DiffContext context) {\n    left = copyMap(left);\n    right = copyMap(right);\n    ChangedExtensions changedExtensions = new ChangedExtensions(left, copyMap(right), context);\n    for (Map.Entry<String, Object> entry : left.entrySet()) {\n      if (right.containsKey(entry.getKey())) {\n        Object rightValue = right.remove(entry.getKey());\n        executeExtensionDiff(entry.getKey(), Change.changed(entry.getValue(), rightValue), context)\n            .filter(Changed::isDifferent)\n            .ifPresent(changed -> changedExtensions.getChanged().put(entry.getKey(), changed));\n      } else {\n        executeExtensionDiff(entry.getKey(), Change.removed(entry.getValue()), context)\n            .filter(Changed::isDifferent)\n            .ifPresent(changed -> changedExtensions.getMissing().put(entry.getKey(), changed));\n      }\n    }\n    right.forEach(\n        (key, value) ->\n            executeExtensionDiff(key, Change.added(value), context)\n                .filter(Changed::isDifferent)\n                .ifPresent(changed -> changedExtensions.getIncreased().put(key, changed)));\n    return isChanged(changedExtensions);\n  }\n\n  private Optional<Changed> executeExtensionDiff(\n      String name, Change<?> change, DiffContext context) {\n    return executeExtension(name, diff -> diff.setOpenApiDiff(openApiDiff).diff(change, context));\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final OpenApiDiff openApiDiff;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "OpenApiDiff", "name": "openApiDiff", "syntax_pass": true}, {"attribute_expression": "private final List<ExtensionDiff> extensionDiffs = new ArrayList<>();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "List<ExtensionDiff>", "name": "extensionDiffs = new ArrayList<>()", "syntax_pass": true}]}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/schemadiffresult/ArraySchemaDiffResult.java.ArraySchemaDiffResult", "name": "ArraySchemaDiffResult", "file_path": "src/main/java/org/openapitools/openapidiff/core/compare/schemadiffresult/ArraySchemaDiffResult.java", "superclasses": "SchemaDiffResult", "methods": ["[]ArraySchemaDiffResult(OpenApiDiff)", "[DeferredChanged<ChangedSchema>]diff(RecursiveSchemaSet,Components,Components,T,T,DiffContext)"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/compare/schemadiffresult/ArraySchemaDiffResult.java.ArraySchemaDiffResult.[]ArraySchemaDiffResult(OpenApiDiff)", "src/main/java/org/openapitools/openapidiff/core/compare/schemadiffresult/ArraySchemaDiffResult.java.ArraySchemaDiffResult.[DeferredChanged<ChangedSchema>]diff(RecursiveSchemaSet,Components,Components,T,T,DiffContext)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class ArraySchemaDiffResult extends SchemaDiffResult {\n  public ArraySchemaDiffResult(OpenApiDiff openApiDiff) {\n    super(\"array\", openApiDiff);\n  }\n\n  @Override\n  public <T extends Schema<X>, X> DeferredChanged<ChangedSchema> diff(\n      RecursiveSchemaSet refSet,\n      Components leftComponents,\n      Components rightComponents,\n      T left,\n      T right,\n      DiffContext context) {\n    ArraySchema leftArraySchema = (ArraySchema) left;\n    ArraySchema rightArraySchema = (ArraySchema) right;\n\n    DeferredChanged<ChangedSchema> superSchemaDiff =\n        super.diff(refSet, leftComponents, rightComponents, left, right, context)\n            .flatMap(\n                changeSchemaOptional -> {\n                  DeferredChanged<ChangedSchema> itemsDiff =\n                      openApiDiff\n                          .getSchemaDiff()\n                          .diff(\n                              refSet,\n                              leftArraySchema.getItems(),\n                              rightArraySchema.getItems(),\n                              context.copyWithRequired(true));\n                  itemsDiff.ifPresent(changedSchema::setItems);\n                  return itemsDiff;\n                });\n\n    return superSchemaDiff.mapOptional(schemaOptional -> isApplicable(context));\n  }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/schemadiffresult/ComposedSchemaDiffResult.java.ComposedSchemaDiffResult", "name": "ComposedSchemaDiffResult", "file_path": "src/main/java/org/openapitools/openapidiff/core/compare/schemadiffresult/ComposedSchemaDiffResult.java", "superclasses": "SchemaDiffResult", "methods": ["[]ComposedSchemaDiffResult(OpenApiDiff)", "[DeferredChanged<ChangedSchema>]diff(RecursiveSchemaSet,Components,Components,T,T,DiffContext)", "[Map<String, Schema>]getSchema(Components,Map<String, String>,ComposedSchema)", "[Map<String, String>]getMapping(ComposedSchema)", "[Map<String, Schema>]getUnnamedSchemas(List<Schema>,String)"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/compare/schemadiffresult/ComposedSchemaDiffResult.java.ComposedSchemaDiffResult.[]ComposedSchemaDiffResult(OpenApiDiff)", "src/main/java/org/openapitools/openapidiff/core/compare/schemadiffresult/ComposedSchemaDiffResult.java.ComposedSchemaDiffResult.[DeferredChanged<ChangedSchema>]diff(RecursiveSchemaSet,Components,Components,T,T,DiffContext)", "src/main/java/org/openapitools/openapidiff/core/compare/schemadiffresult/ComposedSchemaDiffResult.java.ComposedSchemaDiffResult.[Map<String, Schema>]getSchema(Components,Map<String, String>,ComposedSchema)", "src/main/java/org/openapitools/openapidiff/core/compare/schemadiffresult/ComposedSchemaDiffResult.java.ComposedSchemaDiffResult.[Map<String, String>]getMapping(ComposedSchema)", "src/main/java/org/openapitools/openapidiff/core/compare/schemadiffresult/ComposedSchemaDiffResult.java.ComposedSchemaDiffResult.[Map<String, Schema>]getUnnamedSchemas(List<Schema>,String)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class ComposedSchemaDiffResult extends SchemaDiffResult {\n  private static final RefPointer<Schema<?>> refPointer = new RefPointer<>(RefType.SCHEMAS);\n\n  public ComposedSchemaDiffResult(OpenApiDiff openApiDiff) {\n    super(openApiDiff);\n  }\n\n  @Override\n  public <T extends Schema<X>, X> DeferredChanged<ChangedSchema> diff(\n      RecursiveSchemaSet refSet,\n      Components leftComponents,\n      Components rightComponents,\n      T left,\n      T right,\n      DiffContext context) {\n\n    if (left instanceof ComposedSchema) {\n      ComposedSchema leftComposedSchema = (ComposedSchema) left;\n      ComposedSchema rightComposedSchema = (ComposedSchema) right;\n      DeferredBuilder<ChangedSchema> discriminatorChangedBuilder = new DeferredBuilder<>();\n\n      if (CollectionUtils.isNotEmpty(leftComposedSchema.getOneOf())\n          || CollectionUtils.isNotEmpty(rightComposedSchema.getOneOf())) {\n\n        Discriminator leftDis = leftComposedSchema.getDiscriminator();\n        Discriminator rightDis = rightComposedSchema.getDiscriminator();\n        if ((leftDis == null && rightDis != null)\n            || (leftDis != null && rightDis == null)\n            || (leftDis != null\n                && rightDis != null\n                && ((leftDis.getPropertyName() == null && rightDis.getPropertyName() != null)\n                    || (leftDis.getPropertyName() != null && rightDis.getPropertyName() == null)\n                    || (leftDis.getPropertyName() != null\n                        && rightDis.getPropertyName() != null\n                        && !leftDis.getPropertyName().equals(rightDis.getPropertyName()))))) {\n          changedSchema.setOldSchema(left);\n          changedSchema.setNewSchema(right);\n          changedSchema.setDiscriminatorPropertyChanged(true);\n          changedSchema.setContext(context);\n          return new RealizedChanged<>(Optional.of(changedSchema));\n        }\n\n        Map<String, String> leftMapping = getMapping(leftComposedSchema);\n        Map<String, String> rightMapping = getMapping(rightComposedSchema);\n\n        MapKeyDiff<String, Schema> mappingDiff =\n            MapKeyDiff.diff(\n                getSchema(leftComponents, leftMapping, leftComposedSchema),\n                getSchema(rightComponents, rightMapping, rightComposedSchema));\n        Map<String, ChangedSchema> changedMapping = new LinkedHashMap<>();\n        for (String key : mappingDiff.getSharedKey()) {\n          Schema<?> leftSchema = new Schema<>();\n          leftSchema.set$ref(leftMapping.get(key));\n          Schema<?> rightSchema = new Schema<>();\n          rightSchema.set$ref(rightMapping.get(key));\n          discriminatorChangedBuilder\n              .with(\n                  openApiDiff\n                      .getSchemaDiff()\n                      .diff(refSet, leftSchema, rightSchema, context.copyWithRequired(true)))\n              .ifPresent(schema -> changedMapping.put(key, schema));\n        }\n\n        discriminatorChangedBuilder.whenSet(\n            composedSchemas ->\n                changedSchema.setOneOfSchema(\n                    new ChangedOneOfSchema(leftMapping, rightMapping, context)\n                        .setIncreased(mappingDiff.getIncreased())\n                        .setMissing(mappingDiff.getMissing())\n                        .setChanged(changedMapping)));\n      }\n\n      return discriminatorChangedBuilder\n          .build()\n          .flatMap(\n              values -> super.diff(refSet, leftComponents, rightComponents, left, right, context));\n    } else {\n      return openApiDiff.getSchemaDiff().getTypeChangedSchema(left, right, context);\n    }\n  }\n\n  private Map<String, Schema> getSchema(\n      Components components, Map<String, String> mapping, ComposedSchema composedSchema) {\n    Map<String, Schema> result = new LinkedHashMap<>();\n    mapping.forEach(\n        (key, value) -> result.put(key, refPointer.resolveRef(components, new Schema<>(), value)));\n\n    result.putAll(getUnnamedSchemas(composedSchema.getAllOf(), \"all-of\"));\n    result.putAll(getUnnamedSchemas(composedSchema.getOneOf(), \"one-of\"));\n    result.putAll(getUnnamedSchemas(composedSchema.getAnyOf(), \"any-of\"));\n    return result;\n  }\n\n  private Map<String, String> getMapping(ComposedSchema composedSchema) {\n    Map<String, String> reverseMapping = new LinkedHashMap<>();\n    for (Schema<?> schema : composedSchema.getOneOf()) {\n      String ref = schema.get$ref();\n      if (ref == null) {\n        continue;\n      }\n      String schemaName = refPointer.getRefName(ref);\n      if (schemaName == null) {\n        throw new IllegalArgumentException(\"invalid schema: \" + ref);\n      }\n      reverseMapping.put(ref, schemaName);\n    }\n\n    if (composedSchema.getDiscriminator() != null\n        && composedSchema.getDiscriminator().getMapping() != null) {\n      for (String ref : composedSchema.getDiscriminator().getMapping().keySet()) {\n        reverseMapping.put(composedSchema.getDiscriminator().getMapping().get(ref), ref);\n      }\n    }\n\n    return reverseMapping.entrySet().stream()\n        .collect(Collectors.toMap(Map.Entry::getValue, Map.Entry::getKey));\n  }\n\n  private Map<String, Schema> getUnnamedSchemas(List<Schema> schemas, String name) {\n    Map<String, Schema> result = new LinkedHashMap<>();\n\n    if (schemas == null) {\n      return result;\n    }\n\n    for (int i = 0; i < schemas.size(); i++) {\n      Schema<?> schema = schemas.get(i);\n\n      // If the ref is named, then we ignore it since getMapping will handle it.\n      if (schema.get$ref() != null) {\n        continue;\n      }\n\n      result.put(String.format(\"%s-%s\", name, i), schema);\n    }\n\n    return result;\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final RefPointer<Schema<?>> refPointer = new RefPointer<>(RefType.SCHEMAS);", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "RefPointer<Schema<?>>", "name": "refPointer = new RefPointer<>(RefType.SCHEMAS)", "syntax_pass": true}]}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/schemadiffresult/SchemaDiffResult.java.SchemaDiffResult", "name": "SchemaDiffResult", "file_path": "src/main/java/org/openapitools/openapidiff/core/compare/schemadiffresult/SchemaDiffResult.java", "superclasses": "", "methods": ["[]SchemaDiffResult(OpenApiDiff)", "[]SchemaDiffResult(String,OpenApiDiff)", "[DeferredChanged<ChangedSchema>]diff(RecursiveSchemaSet,Components,Components,V,V,DiffContext)", "[Optional<ChangedSchema>]isApplicable(DiffContext)", "[Map<String, Schema<?>>]filterProperties(Change.Type,Map<String, Schema>,DiffContext)", "[boolean]isPropertyApplicable(Schema<?>,DiffContext)", "[DiffContext]required(DiffContext,String,List<String>)", "[void]compareAdditionalProperties(RecursiveSchemaSet,Schema<?>,Schema<?>,DiffContext,DeferredBuilder<Changed>)", "[ChangedSchema]getChangedSchema()", "[OpenApiDiff]getOpenApiDiff()"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/compare/schemadiffresult/SchemaDiffResult.java.SchemaDiffResult.[]SchemaDiffResult(OpenApiDiff)", "src/main/java/org/openapitools/openapidiff/core/compare/schemadiffresult/SchemaDiffResult.java.SchemaDiffResult.[]SchemaDiffResult(String,OpenApiDiff)", "src/main/java/org/openapitools/openapidiff/core/compare/schemadiffresult/SchemaDiffResult.java.SchemaDiffResult.[DeferredChanged<ChangedSchema>]diff(RecursiveSchemaSet,Components,Components,V,V,DiffContext)", "src/main/java/org/openapitools/openapidiff/core/compare/schemadiffresult/SchemaDiffResult.java.SchemaDiffResult.[Optional<ChangedSchema>]isApplicable(DiffContext)", "src/main/java/org/openapitools/openapidiff/core/compare/schemadiffresult/SchemaDiffResult.java.SchemaDiffResult.[Map<String, Schema<?>>]filterProperties(Change.Type,Map<String, Schema>,DiffContext)", "src/main/java/org/openapitools/openapidiff/core/compare/schemadiffresult/SchemaDiffResult.java.SchemaDiffResult.[boolean]isPropertyApplicable(Schema<?>,DiffContext)", "src/main/java/org/openapitools/openapidiff/core/compare/schemadiffresult/SchemaDiffResult.java.SchemaDiffResult.[DiffContext]required(DiffContext,String,List<String>)", "src/main/java/org/openapitools/openapidiff/core/compare/schemadiffresult/SchemaDiffResult.java.SchemaDiffResult.[void]compareAdditionalProperties(RecursiveSchemaSet,Schema<?>,Schema<?>,DiffContext,DeferredBuilder<Changed>)", "src/main/java/org/openapitools/openapidiff/core/compare/schemadiffresult/SchemaDiffResult.java.SchemaDiffResult.[ChangedSchema]getChangedSchema()", "src/main/java/org/openapitools/openapidiff/core/compare/schemadiffresult/SchemaDiffResult.java.SchemaDiffResult.[OpenApiDiff]getOpenApiDiff()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class SchemaDiffResult {\n  protected ChangedSchema changedSchema;\n  protected OpenApiDiff openApiDiff;\n\n  public SchemaDiffResult(OpenApiDiff openApiDiff) {\n    this.openApiDiff = openApiDiff;\n    this.changedSchema = new ChangedSchema();\n  }\n\n  public SchemaDiffResult(String type, OpenApiDiff openApiDiff) {\n    this(openApiDiff);\n    this.changedSchema.setType(type);\n  }\n\n  public <V extends Schema<X>, X> DeferredChanged<ChangedSchema> diff(\n      RecursiveSchemaSet refSet,\n      Components leftComponents,\n      Components rightComponents,\n      V left,\n      V right,\n      DiffContext context) {\n\n    DeferredBuilder<Changed> builder = new DeferredBuilder<>();\n\n    ChangedEnum<X> changedEnum =\n        ListDiff.diff(new ChangedEnum<>(left.getEnum(), right.getEnum(), context));\n    changedSchema\n        .setContext(context)\n        .setOldSchema(left)\n        .setNewSchema(right)\n        .setChangeDeprecated(\n            !Boolean.TRUE.equals(left.getDeprecated())\n                && Boolean.TRUE.equals(right.getDeprecated()))\n        .setChangeTitle(!Objects.equals(left.getTitle(), right.getTitle()))\n        .setRequired(\n            ListDiff.diff(new ChangedRequired(left.getRequired(), right.getRequired(), context)))\n        .setChangeDefault(!Objects.equals(left.getDefault(), right.getDefault()))\n        .setEnumeration(changedEnum)\n        .setChangeFormat(!Objects.equals(left.getFormat(), right.getFormat()))\n        .setReadOnly(new ChangedReadOnly(left.getReadOnly(), right.getReadOnly(), context))\n        .setWriteOnly(new ChangedWriteOnly(left.getWriteOnly(), right.getWriteOnly(), context))\n        .setMaxLength(new ChangedMaxLength(left.getMaxLength(), right.getMaxLength(), context))\n        .setNumericRange(\n            new ChangedNumericRange(\n                left.getMinimum(),\n                right.getMinimum(),\n                left.getMaximum(),\n                right.getMaximum(),\n                left.getExclusiveMinimum(),\n                right.getExclusiveMinimum(),\n                left.getExclusiveMaximum(),\n                right.getExclusiveMaximum(),\n                context));\n    builder\n        .with(\n            openApiDiff\n                .getExtensionsDiff()\n                .diff(left.getExtensions(), right.getExtensions(), context))\n        .ifPresent(changedSchema::setExtensions);\n    builder\n        .with(\n            openApiDiff\n                .getMetadataDiff()\n                .diff(left.getDescription(), right.getDescription(), context))\n        .ifPresent(changedSchema::setDescription);\n    Map<String, Schema> leftProperties = left.getProperties();\n    Map<String, Schema> rightProperties = right.getProperties();\n    MapKeyDiff<String, Schema> propertyDiff = MapKeyDiff.diff(leftProperties, rightProperties);\n    for (String key : propertyDiff.getSharedKey()) {\n      builder\n          .with(\n              openApiDiff\n                  .getSchemaDiff()\n                  .diff(\n                      refSet,\n                      leftProperties.get(key),\n                      rightProperties.get(key),\n                      required(context, key, right.getRequired())))\n          .ifPresent(\n              changedSchema1 -> changedSchema.getChangedProperties().put(key, changedSchema1));\n    }\n    compareAdditionalProperties(refSet, left, right, context, builder);\n    changedSchema\n        .getIncreasedProperties()\n        .putAll(filterProperties(Change.Type.ADDED, propertyDiff.getIncreased(), context));\n    changedSchema\n        .getMissingProperties()\n        .putAll(filterProperties(Change.Type.REMOVED, propertyDiff.getMissing(), context));\n    return builder.build().mapOptional(values -> isApplicable(context));\n  }\n\n  protected Optional<ChangedSchema> isApplicable(DiffContext context) {\n    if (changedSchema.getReadOnly().isUnchanged()\n        && changedSchema.getWriteOnly().isUnchanged()\n        && !isPropertyApplicable(changedSchema.getNewSchema(), context)) {\n      return Optional.empty();\n    }\n    return isChanged(changedSchema);\n  }\n\n  private Map<String, Schema<?>> filterProperties(\n      Change.Type type, Map<String, Schema> properties, DiffContext context) {\n    Map<String, Schema<?>> result = new LinkedHashMap<>();\n    for (Map.Entry<String, Schema> entry : properties.entrySet()) {\n      if (isPropertyApplicable(entry.getValue(), context)\n          && openApiDiff\n              .getExtensionsDiff()\n              .isParentApplicable(\n                  type,\n                  entry.getValue(),\n                  ofNullable(entry.getValue().getExtensions()).orElse(new LinkedHashMap<>()),\n                  context)) {\n        result.put(entry.getKey(), entry.getValue());\n      } else {\n        // Child property is not applicable, so required cannot be applied\n        changedSchema.getRequired().getIncreased().remove(entry.getKey());\n      }\n    }\n    return result;\n  }\n\n  private boolean isPropertyApplicable(Schema<?> schema, DiffContext context) {\n    return !(context.isResponse() && Boolean.TRUE.equals(schema.getWriteOnly()))\n        && !(context.isRequest() && Boolean.TRUE.equals(schema.getReadOnly()));\n  }\n\n  private DiffContext required(DiffContext context, String key, List<String> required) {\n    return context.copyWithRequired(required != null && required.contains(key));\n  }\n\n  private void compareAdditionalProperties(\n      RecursiveSchemaSet refSet,\n      Schema<?> leftSchema,\n      Schema<?> rightSchema,\n      DiffContext context,\n      DeferredBuilder<Changed> builder) {\n    Object left = leftSchema.getAdditionalProperties();\n    Object right = rightSchema.getAdditionalProperties();\n    if (left instanceof Schema || right instanceof Schema) {\n      Schema<?> leftAdditionalSchema = left instanceof Schema ? (Schema<?>) left : null;\n      Schema<?> rightAdditionalSchema = right instanceof Schema ? (Schema<?>) right : null;\n      ChangedSchema apChangedSchema =\n          new ChangedSchema()\n              .setContext(context)\n              .setOldSchema(leftAdditionalSchema)\n              .setNewSchema(rightAdditionalSchema);\n      if (left != null && right != null) {\n        DeferredChanged<ChangedSchema> addPropChangedSchemaOP =\n            openApiDiff\n                .getSchemaDiff()\n                .diff(\n                    refSet,\n                    leftAdditionalSchema,\n                    rightAdditionalSchema,\n                    context.copyWithRequired(false));\n        builder\n            .with(addPropChangedSchemaOP)\n            .whenSet(\n                optional -> {\n                  ChangedSchema apc = optional.orElse(apChangedSchema);\n                  isChanged(apc).ifPresent(changedSchema::setAddProp);\n                });\n      } else {\n        isChanged(apChangedSchema).ifPresent(changedSchema::setAddProp);\n      }\n    }\n  }\n\n  public ChangedSchema getChangedSchema() {\n    return this.changedSchema;\n  }\n\n  public OpenApiDiff getOpenApiDiff() {\n    return this.openApiDiff;\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "protected ChangedSchema changedSchema;", "docstring": "", "modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "type": "ChangedSchema", "name": "changedSchema", "syntax_pass": true}, {"attribute_expression": "protected OpenApiDiff openApiDiff;", "docstring": "", "modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "type": "OpenApiDiff", "name": "openApiDiff", "syntax_pass": true}]}, {"uris": "src/main/java/org/openapitools/openapidiff/core/exception/RendererException.java.RendererException", "name": "RendererException", "file_path": "src/main/java/org/openapitools/openapidiff/core/exception/RendererException.java", "superclasses": "RuntimeException", "methods": ["[]RendererException(Throwable)", "[]RendererException(String,Throwable)"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/exception/RendererException.java.RendererException.[]RendererException(Throwable)", "src/main/java/org/openapitools/openapidiff/core/exception/RendererException.java.RendererException.[]RendererException(String,Throwable)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class RendererException extends RuntimeException {\n\n  public RendererException(Throwable cause) {\n    super(cause);\n  }\n\n  public RendererException(String message, Throwable cause) {\n    super(message, cause);\n  }\n}", "super_interfaces": [], "fields": []}]