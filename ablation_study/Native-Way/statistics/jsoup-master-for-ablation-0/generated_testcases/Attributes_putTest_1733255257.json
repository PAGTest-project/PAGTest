[{"strategy": "generate", "code": "\npackage org.jsoup.nodes;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class Attributes_putTest {\n    private Attributes attributes;\n\n    @BeforeEach\n    public void setUp() {\n        attributes = new Attributes();\n    }\n\n    @Test\n    public void testPutNewKey() {\n        attributes.put(\"key1\", \"value1\");\n        assertEquals(\"value1\", attributes.get(\"key1\"));\n        assertEquals(1, attributes.size());\n    }\n\n    @Test\n    public void testPutExistingKey() {\n        attributes.put(\"key1\", \"value1\");\n        attributes.put(\"key1\", \"newValue1\");\n        assertEquals(\"newValue1\", attributes.get(\"key1\"));\n        assertEquals(1, attributes.size());\n    }\n\n    @Test\n    public void testPutNullValue() {\n        attributes.put(\"key1\", null);\n        assertNull(attributes.get(\"key1\"));\n        assertEquals(1, attributes.size());\n    }\n\n    @Test\n    public void testPutNullKey() {\n        assertThrows(IllegalArgumentException.class, () -> {\n            attributes.put(null, \"value1\");\n        });\n    }\n\n    @Test\n    public void testPutEmptyKey() {\n        attributes.put(\"\", \"value1\");\n        assertEquals(\"value1\", attributes.get(\"\"));\n        assertEquals(1, attributes.size());\n    }\n\n    @Test\n    public void testPutMultipleKeys() {\n        attributes.put(\"key1\", \"value1\");\n        attributes.put(\"key2\", \"value2\");\n        assertEquals(\"value1\", attributes.get(\"key1\"));\n        assertEquals(\"value2\", attributes.get(\"key2\"));\n        assertEquals(2, attributes.size());\n    }\n\n    @Test\n    public void testPutAndRemove() {\n        attributes.put(\"key1\", \"value1\");\n        attributes.remove(\"key1\");\n        assertFalse(attributes.hasKey(\"key1\"));\n        assertEquals(0, attributes.size());\n    }\n\n    @Test\n    public void testPutAndRemoveIgnoreCase() {\n        attributes.put(\"Key1\", \"value1\");\n        attributes.removeIgnoreCase(\"key1\");\n        assertFalse(attributes.hasKeyIgnoreCase(\"Key1\"));\n        assertEquals(0, attributes.size());\n    }\n\n    @Test\n    public void testPutAndSourceRange() {\n        attributes.put(\"key1\", \"value1\");\n        Range.AttributeRange range = attributes.sourceRange(\"key1\");\n        assertNotNull(range);\n    }\n\n    @Test\n    public void testPutAndHtml() {\n        attributes.put(\"key1\", \"value1\");\n        String html = attributes.html();\n        assertTrue(html.contains(\"key1=\\\"value1\\\"\"));\n    }\n}\n"}]