[{"strategy": "generate", "code": "\npackage org.jsoup.safety;\n\nimport org.jsoup.nodes.Attribute;\nimport org.jsoup.nodes.Element;\nimport org.jsoup.parser.Tag;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class Safelist_addProtocolsTest {\n    private Safelist safelist;\n\n    @BeforeEach\n    public void setUp() {\n        safelist = new Safelist();\n    }\n\n    @Test\n    public void testAddProtocols_ValidProtocols() {\n        safelist.addProtocols(\"a\", \"href\", \"http\", \"https\");\n        Element el = new Element(Tag.valueOf(\"a\"), \"\");\n        Attribute attr = new Attribute(\"href\", \"http://example.com\");\n        assertTrue(safelist.isSafeAttribute(\"a\", el, attr));\n    }\n\n    @Test\n    public void testAddProtocols_InvalidProtocols() {\n        safelist.addProtocols(\"a\", \"href\", \"http\", \"https\");\n        Element el = new Element(Tag.valueOf(\"a\"), \"\");\n        Attribute attr = new Attribute(\"href\", \"ftp://example.com\");\n        assertFalse(safelist.isSafeAttribute(\"a\", el, attr));\n    }\n\n    @Test\n    public void testAddProtocols_EmptyProtocol() {\n        assertThrows(IllegalArgumentException.class, () -> {\n            safelist.addProtocols(\"a\", \"href\", \"\");\n        });\n    }\n\n    @Test\n    public void testAddProtocols_NullProtocol() {\n        assertThrows(IllegalArgumentException.class, () -> {\n            safelist.addProtocols(\"a\", \"href\", (String) null);\n        });\n    }\n\n    @Test\n    public void testAddProtocols_EmptyTag() {\n        assertThrows(IllegalArgumentException.class, () -> {\n            safelist.addProtocols(\"\", \"href\", \"http\");\n        });\n    }\n\n    @Test\n    public void testAddProtocols_EmptyAttribute() {\n        assertThrows(IllegalArgumentException.class, () -> {\n            safelist.addProtocols(\"a\", \"\", \"http\");\n        });\n    }\n\n    @Test\n    public void testAddProtocols_NullProtocols() {\n        assertThrows(IllegalArgumentException.class, () -> {\n            safelist.addProtocols(\"a\", \"href\", (String[]) null);\n        });\n    }\n}\n"}]