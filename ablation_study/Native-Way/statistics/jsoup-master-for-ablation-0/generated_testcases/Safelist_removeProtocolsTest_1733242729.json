[{"strategy": "generate", "code": "\npackage org.jsoup.safety;\n\nimport org.jsoup.helper.ValidationException;\nimport org.jsoup.nodes.Attribute;\nimport org.jsoup.nodes.Attributes;\nimport org.jsoup.nodes.Element;\nimport org.jsoup.parser.Tag;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class Safelist_removeProtocolsTest {\n    private Safelist safelist;\n\n    @BeforeEach\n    public void setUp() {\n        safelist = new Safelist();\n        safelist.addProtocols(\"a\", \"href\", \"http\", \"https\");\n        safelist.addAttributes(\"a\", \"href\");\n    }\n\n    @Test\n    public void testRemoveProtocols_ValidProtocols() {\n        safelist.removeProtocols(\"a\", \"href\", \"http\");\n        assertFalse(safelist.isSafeAttribute(\"a\", new Element(Tag.valueOf(\"a\"), \"\"), new Attribute(\"href\", \"http://example.com\")));\n        assertTrue(safelist.isSafeAttribute(\"a\", new Element(Tag.valueOf(\"a\"), \"\"), new Attribute(\"href\", \"https://example.com\")));\n    }\n\n    @Test\n    public void testRemoveProtocols_AllProtocols() {\n        safelist.removeProtocols(\"a\", \"href\", \"http\", \"https\");\n        assertFalse(safelist.isSafeAttribute(\"a\", new Element(Tag.valueOf(\"a\"), \"\"), new Attribute(\"href\", \"http://example.com\")));\n        assertFalse(safelist.isSafeAttribute(\"a\", new Element(Tag.valueOf(\"a\"), \"\"), new Attribute(\"href\", \"https://example.com\")));\n    }\n\n    @Test\n    public void testRemoveProtocols_InvalidTag() {\n        assertThrows(ValidationException.class, () -> safelist.removeProtocols(\"invalidTag\", \"href\", \"http\"));\n    }\n\n    @Test\n    public void testRemoveProtocols_InvalidAttribute() {\n        assertThrows(ValidationException.class, () -> safelist.removeProtocols(\"a\", \"invalidAttribute\", \"http\"));\n    }\n\n    @Test\n    public void testRemoveProtocols_EmptyProtocol() {\n        assertThrows(ValidationException.class, () -> safelist.removeProtocols(\"a\", \"href\", \"\"));\n    }\n\n    @Test\n    public void testRemoveProtocols_NullProtocol() {\n        assertThrows(ValidationException.class, () -> safelist.removeProtocols(\"a\", \"href\", (String) null));\n    }\n\n    @Test\n    public void testRemoveProtocols_NullProtocols() {\n        assertThrows(ValidationException.class, () -> safelist.removeProtocols(\"a\", \"href\", (String[]) null));\n    }\n\n    @Test\n    public void testRemoveProtocols_EmptyTag() {\n        assertThrows(ValidationException.class, () -> safelist.removeProtocols(\"\", \"href\", \"http\"));\n    }\n\n    @Test\n    public void testRemoveProtocols_EmptyAttribute() {\n        assertThrows(ValidationException.class, () -> safelist.removeProtocols(\"a\", \"\", \"http\"));\n    }\n}\n"}]