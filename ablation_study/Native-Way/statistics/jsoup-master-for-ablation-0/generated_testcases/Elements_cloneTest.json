[{"strategy": "retry", "code": "\npackage org.jsoup.select;\n\nimport org.jsoup.Jsoup;\nimport org.jsoup.nodes.Document;\nimport org.jsoup.nodes.Element;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class Elements_cloneTest {\n    private Elements elements;\n\n    @BeforeEach\n    public void setUp() {\n        Document doc = Jsoup.parse(\"<div><p>One</p><p>Two</p></div>\");\n        elements = doc.select(\"p\");\n    }\n\n    @Test\n    public void testCloneWithEmptyElements() {\n        Elements emptyElements = new Elements();\n        Elements clonedEmptyElements = emptyElements.clone();\n        assertEquals(0, clonedEmptyElements.size());\n    }\n\n    @Test\n    public void testCloneWithNonEmptyElements() {\n        Elements clonedElements = elements.clone();\n        assertEquals(elements.size(), clonedElements.size());\n        for (int i = 0; i < elements.size(); i++) {\n            assertEquals(elements.get(i).outerHtml(), clonedElements.get(i).outerHtml());\n        }\n    }\n\n    @Test\n    public void testCloneWithModifiedElements() {\n        elements.get(0).addClass(\"testClass\");\n        Elements clonedElements = elements.clone();\n        assertEquals(elements.size(), clonedElements.size());\n        for (int i = 0; i < elements.size(); i++) {\n            assertEquals(elements.get(i).outerHtml(), clonedElements.get(i).outerHtml());\n        }\n    }\n\n    @Test\n    public void testCloneWithNestedElements() {\n        Document doc = Jsoup.parse(\"<div><p><span>One</span></p><p>Two</p></div>\");\n        elements = doc.select(\"p\");\n        Elements clonedElements = elements.clone();\n        assertEquals(elements.size(), clonedElements.size());\n        for (int i = 0; i < elements.size(); i++) {\n            assertEquals(elements.get(i).outerHtml(), clonedElements.get(i).outerHtml());\n        }\n    }\n}\n"}]