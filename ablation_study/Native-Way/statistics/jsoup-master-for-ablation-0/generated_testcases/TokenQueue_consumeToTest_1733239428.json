[{"strategy": "generate", "code": "\npackage org.jsoup.parser;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TokenQueue_consumeToTest {\n    private TokenQueue tokenQueue;\n\n    @BeforeEach\n    public void setUp() {\n        tokenQueue = new TokenQueue(\"one < two </TEXTarea>\");\n    }\n\n    @Test\n    public void testConsumeTo_FoundSequence() {\n        String result = tokenQueue.consumeTo(\"</TEXTarea\");\n        assertEquals(\"one < two \", result);\n    }\n\n    @Test\n    public void testConsumeTo_NotFoundSequence() {\n        String result = tokenQueue.consumeTo(\"</oops>\");\n        assertEquals(\"one < two </TEXTarea>\", result);\n    }\n\n    @Test\n    public void testConsumeTo_EmptyQueue() {\n        tokenQueue = new TokenQueue(\"\");\n        String result = tokenQueue.consumeTo(\"</TEXTarea\");\n        assertEquals(\"\", result);\n    }\n\n    @Test\n    public void testConsumeTo_SequenceAtStart() {\n        tokenQueue = new TokenQueue(\"</TEXTarea> one < two </TEXTarea>\");\n        String result = tokenQueue.consumeTo(\"</TEXTarea\");\n        assertEquals(\"\", result);\n    }\n\n    @Test\n    public void testConsumeTo_SequenceAtEnd() {\n        tokenQueue = new TokenQueue(\"one < two </TEXTarea>\");\n        String result = tokenQueue.consumeTo(\"</TEXTarea>\");\n        assertEquals(\"one < two \", result);\n    }\n\n    @Test\n    public void testConsumeTo_MultipleSequences() {\n        tokenQueue = new TokenQueue(\"one < two </TEXTarea> three < four </TEXTarea>\");\n        String result = tokenQueue.consumeTo(\"</TEXTarea\");\n        assertEquals(\"one < two \", result);\n    }\n\n    @Test\n    public void testConsumeTo_SequenceWithWhitespace() {\n        tokenQueue = new TokenQueue(\"one < two </TEXTarea> three < four </TEXTarea>\");\n        String result = tokenQueue.consumeTo(\" </TEXTarea>\");\n        assertEquals(\"one < two\", result);\n    }\n\n    @Test\n    public void testConsumeTo_SequenceWithSpecialCharacters() {\n        tokenQueue = new TokenQueue(\"one < two </TEXTarea> three < four </TEXTarea>\");\n        String result = tokenQueue.consumeTo(\"<\");\n        assertEquals(\"one \", result);\n    }\n}\n"}]