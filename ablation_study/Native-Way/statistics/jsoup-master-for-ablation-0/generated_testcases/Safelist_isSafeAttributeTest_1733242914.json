[{"strategy": "generate", "code": "\npackage org.jsoup.safety;\n\nimport org.jsoup.nodes.Attribute;\nimport org.jsoup.nodes.Element;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class Safelist_isSafeAttributeTest {\n    private Safelist safelist;\n    private Element element;\n\n    @BeforeEach\n    public void setUp() {\n        safelist = new Safelist();\n        element = new Element(\"a\");\n    }\n\n    @Test\n    public void testIsSafeAttribute_ValidAttribute() {\n        safelist.addAttributes(\"a\", \"href\");\n        Attribute attr = new Attribute(\"href\", \"http://example.com\");\n        assertTrue(safelist.isSafeAttribute(\"a\", element, attr));\n    }\n\n    @Test\n    public void testIsSafeAttribute_InvalidAttribute() {\n        safelist.addAttributes(\"a\", \"href\");\n        Attribute attr = new Attribute(\"onclick\", \"alert('xss')\");\n        assertFalse(safelist.isSafeAttribute(\"a\", element, attr));\n    }\n\n    @Test\n    public void testIsSafeAttribute_EnforcedAttribute() {\n        safelist.addEnforcedAttribute(\"a\", \"rel\", \"nofollow\");\n        Attribute attr = new Attribute(\"rel\", \"nofollow\");\n        assertTrue(safelist.isSafeAttribute(\"a\", element, attr));\n    }\n\n    @Test\n    public void testIsSafeAttribute_EnforcedAttributeMismatch() {\n        safelist.addEnforcedAttribute(\"a\", \"rel\", \"nofollow\");\n        Attribute attr = new Attribute(\"rel\", \"follow\");\n        assertFalse(safelist.isSafeAttribute(\"a\", element, attr));\n    }\n\n    @Test\n    public void testIsSafeAttribute_NoAttributesDefined() {\n        Attribute attr = new Attribute(\"href\", \"http://example.com\");\n        assertFalse(safelist.isSafeAttribute(\"a\", element, attr));\n    }\n\n    @Test\n    public void testIsSafeAttribute_AllTag() {\n        safelist.addAttributes(\":all\", \"class\");\n        Attribute attr = new Attribute(\"class\", \"example\");\n        assertTrue(safelist.isSafeAttribute(\"a\", element, attr));\n    }\n\n    @Test\n    public void testIsSafeAttribute_ProtocolValidation() {\n        safelist.addAttributes(\"a\", \"href\");\n        safelist.addProtocols(\"a\", \"href\", \"http\", \"https\");\n        Attribute attr = new Attribute(\"href\", \"http://example.com\");\n        assertTrue(safelist.isSafeAttribute(\"a\", element, attr));\n    }\n\n    @Test\n    public void testIsSafeAttribute_InvalidProtocol() {\n        safelist.addAttributes(\"a\", \"href\");\n        safelist.addProtocols(\"a\", \"href\", \"http\", \"https\");\n        Attribute attr = new Attribute(\"href\", \"ftp://example.com\");\n        assertFalse(safelist.isSafeAttribute(\"a\", element, attr));\n    }\n\n    @Test\n    public void testIsSafeAttribute_AnchorLink() {\n        safelist.addAttributes(\"a\", \"href\");\n        safelist.addProtocols(\"a\", \"href\", \"#\");\n        Attribute attr = new Attribute(\"href\", \"#anchor\");\n        assertTrue(safelist.isSafeAttribute(\"a\", element, attr));\n    }\n\n    @Test\n    public void testIsSafeAttribute_InvalidAnchorLink() {\n        safelist.addAttributes(\"a\", \"href\");\n        safelist.addProtocols(\"a\", \"href\", \"#\");\n        Attribute attr = new Attribute(\"href\", \"# anchor\");\n        assertFalse(safelist.isSafeAttribute(\"a\", element, attr));\n    }\n}\n"}]