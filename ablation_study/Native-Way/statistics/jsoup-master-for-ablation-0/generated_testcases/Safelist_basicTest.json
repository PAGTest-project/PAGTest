[{"strategy": "retry", "code": "\npackage org.jsoup.safety;\n\nimport org.jsoup.nodes.Attribute;\nimport org.jsoup.nodes.Attributes;\nimport org.jsoup.nodes.Element;\nimport org.jsoup.parser.Tag;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class Safelist_basicTest {\n\n    private Safelist safelist;\n\n    @BeforeEach\n    public void setUp() {\n        safelist = Safelist.basic();\n    }\n\n    @Test\n    public void testBasicSafelistTags() {\n        String[] expectedTags = {\n            \"a\", \"b\", \"blockquote\", \"br\", \"cite\", \"code\", \"dd\", \"dl\", \"dt\", \"em\",\n            \"i\", \"li\", \"ol\", \"p\", \"pre\", \"q\", \"small\", \"span\", \"strike\", \"strong\", \"sub\",\n            \"sup\", \"u\", \"ul\"\n        };\n\n        for (String tag : expectedTags) {\n            assertTrue(safelist.isSafeTag(tag));\n        }\n    }\n\n    @Test\n    public void testBasicSafelistAttributes() {\n        Element aElement = new Element(Tag.valueOf(\"a\"), \"\");\n        aElement.attr(\"href\", \"http://example.com\");\n        assertTrue(safelist.isSafeAttribute(\"a\", aElement, aElement.attributes().get(0)));\n\n        Element blockquoteElement = new Element(Tag.valueOf(\"blockquote\"), \"\");\n        blockquoteElement.attr(\"cite\", \"http://example.com\");\n        assertTrue(safelist.isSafeAttribute(\"blockquote\", blockquoteElement, blockquoteElement.attributes().get(0)));\n\n        Element qElement = new Element(Tag.valueOf(\"q\"), \"\");\n        qElement.attr(\"cite\", \"http://example.com\");\n        assertTrue(safelist.isSafeAttribute(\"q\", qElement, qElement.attributes().get(0)));\n    }\n\n    @Test\n    public void testBasicSafelistProtocols() {\n        Element aElement = new Element(Tag.valueOf(\"a\"), \"\");\n        aElement.attr(\"href\", \"http://example.com\");\n        assertTrue(safelist.isSafeAttribute(\"a\", aElement, aElement.attributes().get(0)));\n\n        aElement.attr(\"href\", \"https://example.com\");\n        assertTrue(safelist.isSafeAttribute(\"a\", aElement, aElement.attributes().get(0)));\n\n        aElement.attr(\"href\", \"ftp://example.com\");\n        assertTrue(safelist.isSafeAttribute(\"a\", aElement, aElement.attributes().get(0)));\n\n        aElement.attr(\"href\", \"mailto:user@example.com\");\n        assertTrue(safelist.isSafeAttribute(\"a\", aElement, aElement.attributes().get(0)));\n\n        Element blockquoteElement = new Element(Tag.valueOf(\"blockquote\"), \"\");\n        blockquoteElement.attr(\"cite\", \"http://example.com\");\n        assertTrue(safelist.isSafeAttribute(\"blockquote\", blockquoteElement, blockquoteElement.attributes().get(0)));\n\n        blockquoteElement.attr(\"cite\", \"https://example.com\");\n        assertTrue(safelist.isSafeAttribute(\"blockquote\", blockquoteElement, blockquoteElement.attributes().get(0)));\n\n        Element qElement = new Element(Tag.valueOf(\"q\"), \"\");\n        qElement.attr(\"cite\", \"http://example.com\");\n        assertTrue(safelist.isSafeAttribute(\"q\", qElement, qElement.attributes().get(0)));\n\n        qElement.attr(\"cite\", \"https://example.com\");\n        assertTrue(safelist.isSafeAttribute(\"q\", qElement, qElement.attributes().get(0)));\n    }\n\n    @Test\n    public void testBasicSafelistEnforcedAttributes() {\n        Attributes enforcedAttributes = safelist.getEnforcedAttributes(\"a\");\n        assertEquals(1, enforcedAttributes.size());\n        assertEquals(\"nofollow\", enforcedAttributes.get(\"rel\"));\n    }\n}\n"}]