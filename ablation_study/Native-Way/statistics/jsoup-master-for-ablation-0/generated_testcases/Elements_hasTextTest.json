[{"strategy": "retry", "code": "\npackage org.jsoup.select;\n\nimport org.jsoup.Jsoup;\nimport org.jsoup.nodes.Document;\nimport org.jsoup.nodes.Element;\nimport org.jsoup.nodes.TextNode;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.Arrays;\n\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\npublic class Elements_hasTextTest {\n    private Elements elements;\n\n    @BeforeEach\n    public void setUp() {\n        elements = new Elements();\n    }\n\n    @Test\n    public void testHasTextWithNoText() {\n        Element element1 = new Element(\"div\");\n        Element element2 = new Element(\"span\");\n        elements.addAll(Arrays.asList(element1, element2));\n        assertFalse(elements.hasText());\n    }\n\n    @Test\n    public void testHasTextWithText() {\n        Element element1 = new Element(\"div\");\n        Element element2 = new Element(\"span\");\n        element2.appendChild(new TextNode(\"Sample Text\"));\n        elements.addAll(Arrays.asList(element1, element2));\n        assertTrue(elements.hasText());\n    }\n\n    @Test\n    public void testHasTextWithMixedContent() {\n        Element element1 = new Element(\"div\");\n        Element element2 = new Element(\"span\");\n        element2.appendChild(new TextNode(\"\"));\n        Element element3 = new Element(\"p\");\n        element3.appendChild(new TextNode(\"Another Text\"));\n        elements.addAll(Arrays.asList(element1, element2, element3));\n        assertTrue(elements.hasText());\n    }\n\n    @Test\n    public void testHasTextWithEmptyElements() {\n        Element element1 = new Element(\"div\");\n        Element element2 = new Element(\"span\");\n        element2.appendChild(new TextNode(\"\"));\n        elements.addAll(Arrays.asList(element1, element2));\n        assertFalse(elements.hasText());\n    }\n}\n"}]