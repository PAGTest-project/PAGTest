[{"strategy": "retry", "code": "\npackage org.jsoup.safety;\n\nimport org.jsoup.helper.Validate;\nimport org.jsoup.internal.Functions;\nimport org.jsoup.internal.Normalizer;\nimport org.jsoup.nodes.Attribute;\nimport org.jsoup.nodes.Attributes;\nimport org.jsoup.nodes.Element;\nimport org.jsoup.nodes.Tag;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class Safelist_addAttributesTest {\n    private Safelist safelist;\n\n    @BeforeEach\n    public void setUp() {\n        safelist = new Safelist();\n    }\n\n    @Test\n    public void testAddAttributes_ValidAttributes() {\n        safelist.addAttributes(\"a\", \"href\", \"class\");\n        assertTrue(safelist.isSafeAttribute(\"a\", new Element(Tag.valueOf(\"a\"), \"\"), new Attribute(\"href\", \"http://example.com\")));\n        assertTrue(safelist.isSafeAttribute(\"a\", new Element(Tag.valueOf(\"a\"), \"\"), new Attribute(\"class\", \"example\")));\n    }\n\n    @Test\n    public void testAddAttributes_EmptyTag() {\n        assertThrows(IllegalArgumentException.class, () -> safelist.addAttributes(\"\", \"href\", \"class\"));\n    }\n\n    @Test\n    public void testAddAttributes_NullAttributes() {\n        assertThrows(IllegalArgumentException.class, () -> safelist.addAttributes(\"a\", (String[]) null));\n    }\n\n    @Test\n    public void testAddAttributes_NoAttributesSupplied() {\n        assertThrows(IllegalArgumentException.class, () -> safelist.addAttributes(\"a\"));\n    }\n\n    @Test\n    public void testAddAttributes_EmptyAttribute() {\n        assertThrows(IllegalArgumentException.class, () -> safelist.addAttributes(\"a\", \"href\", \"\"));\n    }\n\n    @Test\n    public void testAddAttributes_AllTag() {\n        safelist.addAttributes(\":all\", \"class\");\n        assertTrue(safelist.isSafeAttribute(\"a\", new Element(Tag.valueOf(\"a\"), \"\"), new Attribute(\"class\", \"example\")));\n        assertTrue(safelist.isSafeAttribute(\"div\", new Element(Tag.valueOf(\"div\"), \"\"), new Attribute(\"class\", \"example\")));\n    }\n\n    @Test\n    public void testAddAttributes_TagNotAllowed() {\n        safelist.addAttributes(\"a\", \"href\", \"class\");\n        assertFalse(safelist.isSafeAttribute(\"div\", new Element(Tag.valueOf(\"div\"), \"\"), new Attribute(\"href\", \"http://example.com\")));\n    }\n\n    @Test\n    public void testAddAttributes_AttributeNotAllowed() {\n        safelist.addAttributes(\"a\", \"href\");\n        assertFalse(safelist.isSafeAttribute(\"a\", new Element(Tag.valueOf(\"a\"), \"\"), new Attribute(\"class\", \"example\")));\n    }\n}\n"}]