[{"strategy": "retry", "code": "\npackage org.jsoup.nodes;\n\nimport org.jsoup.Jsoup;\nimport org.jsoup.parser.Tag;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class Element_prependElementTest {\n    private Element element;\n\n    @BeforeEach\n    public void setUp() {\n        element = new Element(\"div\");\n    }\n\n    @Test\n    public void testPrependElement() {\n        Element child = element.prependElement(\"span\", \"http://www.w3.org/1999/xhtml\");\n        assertEquals(\"span\", child.tagName());\n        assertEquals(\"http://www.w3.org/1999/xhtml\", child.tag().namespace());\n        assertEquals(child, element.child(0));\n    }\n\n    @Test\n    public void testPrependElementWithDefaultNamespace() {\n        Element child = element.prependElement(\"span\");\n        assertEquals(\"span\", child.tagName());\n        assertEquals(\"http://www.w3.org/1999/xhtml\", child.tag().namespace());\n        assertEquals(child, element.child(0));\n    }\n\n    @Test\n    public void testPrependElementWithExistingChildren() {\n        element.appendChild(new Element(\"p\"));\n        Element child = element.prependElement(\"span\", \"http://www.w3.org/1999/xhtml\");\n        assertEquals(\"span\", child.tagName());\n        assertEquals(\"http://www.w3.org/1999/xhtml\", child.tag().namespace());\n        assertEquals(child, element.child(0));\n        assertEquals(2, element.childrenSize());\n    }\n\n    @Test\n    public void testPrependElementWithInvalidTagName() {\n        assertThrows(IllegalArgumentException.class, () -> {\n            element.prependElement(\"\", \"http://www.w3.org/1999/xhtml\");\n        });\n    }\n\n    @Test\n    public void testPrependElementWithNullTagName() {\n        assertThrows(IllegalArgumentException.class, () -> {\n            element.prependElement(null, \"http://www.w3.org/1999/xhtml\");\n        });\n    }\n\n    @Test\n    public void testPrependElementWithNullNamespace() {\n        Element child = element.prependElement(\"span\", null);\n        assertEquals(\"span\", child.tagName());\n        assertEquals(\"\", child.tag().namespace());\n        assertEquals(child, element.child(0));\n    }\n}\n"}]