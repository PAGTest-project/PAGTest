[{"strategy": "retry", "code": "\npackage org.jsoup.nodes;\n\nimport org.jsoup.Jsoup;\nimport org.jsoup.helper.ValidationException;\nimport org.jsoup.internal.StringUtil;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.List;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class Element_insertChildrenTest {\n    private Element element;\n\n    @BeforeEach\n    public void setUp() {\n        element = new Element(\"div\");\n    }\n\n    @Test\n    public void testInsertChildrenValidIndex() {\n        Collection<Node> children = Arrays.asList(new TextNode(\"Child1\"), new TextNode(\"Child2\"));\n        Element result = element.insertChildren(0, children);\n        assertEquals(element, result);\n        assertEquals(2, element.childNodeSize());\n        assertEquals(\"Child1\", element.child(0).outerHtml());\n        assertEquals(\"Child2\", element.child(1).outerHtml());\n    }\n\n    @Test\n    public void testInsertChildrenNegativeIndex() {\n        Collection<Node> children = Arrays.asList(new TextNode(\"Child1\"), new TextNode(\"Child2\"));\n        Element result = element.insertChildren(-1, children);\n        assertEquals(element, result);\n        assertEquals(2, element.childNodeSize());\n        assertEquals(\"Child1\", element.child(0).outerHtml());\n        assertEquals(\"Child2\", element.child(1).outerHtml());\n    }\n\n    @Test\n    public void testInsertChildrenOutOfBoundsIndex() {\n        Collection<Node> children = Arrays.asList(new TextNode(\"Child1\"), new TextNode(\"Child2\"));\n        assertThrows(IllegalArgumentException.class, () -> element.insertChildren(3, children));\n    }\n\n    @Test\n    public void testInsertChildrenNullCollection() {\n        assertThrows(IllegalArgumentException.class, () -> element.insertChildren(0, null));\n    }\n\n    @Test\n    public void testInsertChildrenEmptyCollection() {\n        Collection<Node> children = Collections.emptyList();\n        Element result = element.insertChildren(0, children);\n        assertEquals(element, result);\n        assertEquals(0, element.childNodeSize());\n    }\n\n    @Test\n    public void testInsertChildrenExistingContent() {\n        element.appendChild(new TextNode(\"ExistingChild\"));\n        Collection<Node> children = Arrays.asList(new TextNode(\"Child1\"), new TextNode(\"Child2\"));\n        Element result = element.insertChildren(1, children);\n        assertEquals(element, result);\n        assertEquals(3, element.childNodeSize());\n        assertEquals(\"ExistingChild\", element.child(0).outerHtml());\n        assertEquals(\"Child1\", element.child(1).outerHtml());\n        assertEquals(\"Child2\", element.child(2).outerHtml());\n    }\n}\n"}]