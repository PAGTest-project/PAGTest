[{"strategy": "generate", "code": "\npackage org.jsoup.internal;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StringUtil_paddingTest {\n\n    @BeforeEach\n    public void setUp() {\n        // Any setup code if needed\n    }\n\n    @Test\n    public void testPaddingWithValidWidth() {\n        assertEquals(\"   \", StringUtil.padding(3));\n        assertEquals(\"                    \", StringUtil.padding(20));\n    }\n\n    @Test\n    public void testPaddingWithMaxPaddingWidth() {\n        assertEquals(\"   \", StringUtil.padding(3, 5));\n        assertEquals(\"                    \", StringUtil.padding(20, 20));\n        assertEquals(\"                    \", StringUtil.padding(30, 20));\n    }\n\n    @Test\n    public void testPaddingWithUnlimitedMaxPaddingWidth() {\n        assertEquals(\"   \", StringUtil.padding(3, -1));\n        assertEquals(\"                    \", StringUtil.padding(20, -1));\n        assertEquals(\"                         \", StringUtil.padding(21, -1));\n    }\n\n    @Test\n    public void testPaddingWithZeroWidth() {\n        assertEquals(\"\", StringUtil.padding(0));\n        assertEquals(\"\", StringUtil.padding(0, 10));\n    }\n\n    @Test\n    public void testPaddingWithNegativeWidth() {\n        assertThrows(IllegalArgumentException.class, () -> StringUtil.padding(-1));\n        assertThrows(IllegalArgumentException.class, () -> StringUtil.padding(-1, 10));\n    }\n\n    @Test\n    public void testPaddingWithNegativeMaxPaddingWidth() {\n        assertThrows(IllegalArgumentException.class, () -> StringUtil.padding(5, -2));\n    }\n}\n"}]