[{"strategy": "generate", "code": "\npackage org.jsoup.helper;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.DocumentType;\nimport org.w3c.dom.DOMImplementation;\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.parsers.ParserConfigurationException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\n\npublic class W3CDom_asStringTest {\n\n    private DocumentBuilder builder;\n\n    @BeforeEach\n    public void setUp() throws ParserConfigurationException {\n        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n        builder = factory.newDocumentBuilder();\n    }\n\n    @Test\n    public void testAsStringWithNullProperties() {\n        Document doc = builder.newDocument();\n        String result = W3CDom.asString(doc, null);\n        assertEquals(\"\", result);\n    }\n\n    @Test\n    public void testAsStringWithProperties() {\n        Document doc = builder.newDocument();\n        Map<String, String> properties = new HashMap<>();\n        properties.put(\"indent\", \"yes\");\n        String result = W3CDom.asString(doc, properties);\n        assertEquals(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\", result);\n    }\n\n    @Test\n    public void testAsStringWithDoctypePublicId() {\n        Document doc = builder.newDocument();\n        DOMImplementation domImpl = doc.getImplementation();\n        DocumentType doctype = domImpl.createDocumentType(\"html\", \"-//W3C//DTD HTML 4.01//EN\", \"http://www.w3.org/TR/html4/strict.dtd\");\n        doc.appendChild(doctype);\n        String result = W3CDom.asString(doc, null);\n        assertEquals(\"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD HTML 4.01//EN\\\" \\\"http://www.w3.org/TR/html4/strict.dtd\\\">\\n\", result);\n    }\n\n    @Test\n    public void testAsStringWithDoctypeSystemId() {\n        Document doc = builder.newDocument();\n        DOMImplementation domImpl = doc.getImplementation();\n        DocumentType doctype = domImpl.createDocumentType(\"html\", null, \"about:legacy-compat\");\n        doc.appendChild(doctype);\n        String result = W3CDom.asString(doc, null);\n        assertEquals(\"<!DOCTYPE html SYSTEM \\\"about:legacy-compat\\\">\\n\", result);\n    }\n\n    @Test\n    public void testAsStringWithTransformerException() {\n        Document doc = builder.newDocument();\n        Map<String, String> properties = new HashMap<>();\n        properties.put(\"invalidProperty\", \"invalidValue\");\n        assertThrows(IllegalStateException.class, () -> W3CDom.asString(doc, properties));\n    }\n}\n"}]