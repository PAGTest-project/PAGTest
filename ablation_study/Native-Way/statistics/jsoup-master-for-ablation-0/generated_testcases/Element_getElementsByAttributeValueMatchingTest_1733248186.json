[{"strategy": "generate", "code": "\npackage org.jsoup.nodes;\n\nimport org.jsoup.Jsoup;\nimport org.jsoup.nodes.Document;\nimport org.jsoup.nodes.Element;\nimport org.jsoup.select.Elements;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.regex.PatternSyntaxException;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class Element_getElementsByAttributeValueMatchingTest {\n    private Document doc;\n\n    @BeforeEach\n    public void setUp() {\n        String html = \"<body><div class='test'>One</div><div class='test'>Two</div><div class='other'>Three</div></body>\";\n        doc = Jsoup.parse(html);\n    }\n\n    @Test\n    public void testGetElementsByAttributeValueMatching_ValidRegex() {\n        Elements elements = doc.getElementsByAttributeValueMatching(\"class\", \"test\");\n        assertEquals(2, elements.size());\n        assertEquals(\"One\", elements.get(0).text());\n        assertEquals(\"Two\", elements.get(1).text());\n    }\n\n    @Test\n    public void testGetElementsByAttributeValueMatching_InvalidRegex() {\n        assertThrows(IllegalArgumentException.class, () -> {\n            doc.getElementsByAttributeValueMatching(\"class\", \"[invalidRegex\");\n        });\n    }\n\n    @Test\n    public void testGetElementsByAttributeValueMatching_NoMatch() {\n        Elements elements = doc.getElementsByAttributeValueMatching(\"class\", \"nonexistent\");\n        assertEquals(0, elements.size());\n    }\n\n    @Test\n    public void testGetElementsByAttributeValueMatching_EmptyRegex() {\n        Elements elements = doc.getElementsByAttributeValueMatching(\"class\", \"\");\n        assertEquals(3, elements.size()); // Matches all elements with any class attribute\n    }\n\n    @Test\n    public void testGetElementsByAttributeValueMatching_NullKey() {\n        assertThrows(IllegalArgumentException.class, () -> {\n            doc.getElementsByAttributeValueMatching(null, \"test\");\n        });\n    }\n\n    @Test\n    public void testGetElementsByAttributeValueMatching_NullRegex() {\n        assertThrows(IllegalArgumentException.class, () -> {\n            doc.getElementsByAttributeValueMatching(\"class\", null);\n        });\n    }\n}\n"}]