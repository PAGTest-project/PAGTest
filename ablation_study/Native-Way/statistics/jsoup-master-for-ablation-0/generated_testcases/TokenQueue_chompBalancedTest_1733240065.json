[{"strategy": "generate", "code": "\npackage org.jsoup.parser;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TokenQueue_chompBalancedTest {\n    private TokenQueue tokenQueue;\n\n    @BeforeEach\n    public void setUp() {\n        tokenQueue = new TokenQueue(\"(one (two) three) four\");\n    }\n\n    @Test\n    public void testChompBalancedSimple() {\n        tokenQueue = new TokenQueue(\"(one (two) three) four\");\n        assertEquals(\"one (two) three\", tokenQueue.chompBalanced('(', ')'));\n    }\n\n    @Test\n    public void testChompBalancedEmpty() {\n        tokenQueue = new TokenQueue(\"\");\n        assertEquals(\"\", tokenQueue.chompBalanced('(', ')'));\n    }\n\n    @Test\n    public void testChompBalancedUnmatchedOpen() {\n        tokenQueue = new TokenQueue(\"(one (two) three\");\n        assertThrows(IllegalArgumentException.class, () -> tokenQueue.chompBalanced('(', ')'));\n    }\n\n    @Test\n    public void testChompBalancedUnmatchedClose() {\n        tokenQueue = new TokenQueue(\"one) two (three)\");\n        assertEquals(\"\", tokenQueue.chompBalanced('(', ')'));\n    }\n\n    @Test\n    public void testChompBalancedNestedQuotes() {\n        tokenQueue = new TokenQueue(\"(one '(\\\"two\\\")' three) four\");\n        assertEquals(\"one '(\\\"two\\\")' three\", tokenQueue.chompBalanced('(', ')'));\n    }\n\n    @Test\n    public void testChompBalancedRegexQE() {\n        tokenQueue = new TokenQueue(\"(one \\\\Q(two)\\\\E three) four\");\n        assertEquals(\"one \\\\Q(two)\\\\E three\", tokenQueue.chompBalanced('(', ')'));\n    }\n\n    @Test\n    public void testChompBalancedMixedQuotesAndRegexQE() {\n        tokenQueue = new TokenQueue(\"(one '(\\\\Qtwo\\\\E)' three) four\");\n        assertEquals(\"one '(\\\\Qtwo\\\\E)' three\", tokenQueue.chompBalanced('(', ')'));\n    }\n\n    @Test\n    public void testChompBalancedWithEscapes() {\n        tokenQueue = new TokenQueue(\"(one \\\\(two\\\\) three) four\");\n        assertEquals(\"one \\\\(two\\\\) three\", tokenQueue.chompBalanced('(', ')'));\n    }\n\n    @Test\n    public void testChompBalancedWithEmptyBalanced() {\n        tokenQueue = new TokenQueue(\"() four\");\n        assertEquals(\"\", tokenQueue.chompBalanced('(', ')'));\n    }\n\n    @Test\n    public void testChompBalancedWithMultipleBalanced() {\n        tokenQueue = new TokenQueue(\"(one) (two) (three) four\");\n        assertEquals(\"one\", tokenQueue.chompBalanced('(', ')'));\n    }\n}\n"}]