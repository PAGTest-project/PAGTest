[{"strategy": "retry", "code": "\npackage org.jsoup.internal;\n\nimport org.junit.jupiter.api.Test;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StringUtil_resolveTest {\n\n    @Test\n    void testResolveWithRelativeUrl() throws MalformedURLException {\n        URL base = new URL(\"https://example.com/path/\");\n        String relUrl = \"subpath/file.html\";\n        URL resolvedUrl = StringUtil.resolve(base, relUrl);\n        assertEquals(\"https://example.com/path/subpath/file.html\", resolvedUrl.toString());\n    }\n\n    @Test\n    void testResolveWithQueryParameter() throws MalformedURLException {\n        URL base = new URL(\"https://example.com/path/file.html\");\n        String relUrl = \"?query=value\";\n        URL resolvedUrl = StringUtil.resolve(base, relUrl);\n        assertEquals(\"https://example.com/path/file.html?query=value\", resolvedUrl.toString());\n    }\n\n    @Test\n    void testResolveWithFragment() throws MalformedURLException {\n        URL base = new URL(\"https://example.com/path/file.html\");\n        String relUrl = \"#fragment\";\n        URL resolvedUrl = StringUtil.resolve(base, relUrl);\n        assertEquals(\"https://example.com/path/file.html#fragment\", resolvedUrl.toString());\n    }\n\n    @Test\n    void testResolveWithControlChars() throws MalformedURLException {\n        URL base = new URL(\"https://example.com/path/\");\n        String relUrl = \"\\u0000subpath/file.html\";\n        URL resolvedUrl = StringUtil.resolve(base, relUrl);\n        assertEquals(\"https://example.com/path/subpath/file.html\", resolvedUrl.toString());\n    }\n\n    @Test\n    void testResolveWithDotSegments() throws MalformedURLException {\n        URL base = new URL(\"https://example.com/path/\");\n        String relUrl = \"./subpath/file.html\";\n        URL resolvedUrl = StringUtil.resolve(base, relUrl);\n        assertEquals(\"https://example.com/path/subpath/file.html\", resolvedUrl.toString());\n    }\n\n    @Test\n    void testResolveWithEmptyRelativeUrl() throws MalformedURLException {\n        URL base = new URL(\"https://example.com/path/\");\n        String relUrl = \"\";\n        URL resolvedUrl = StringUtil.resolve(base, relUrl);\n        assertEquals(\"https://example.com/path/\", resolvedUrl.toString());\n    }\n\n    @Test\n    void testResolveWithAbsoluteUrl() throws MalformedURLException {\n        URL base = new URL(\"https://example.com/path/\");\n        String relUrl = \"https://another.com/file.html\";\n        URL resolvedUrl = StringUtil.resolve(base, relUrl);\n        assertEquals(\"https://another.com/file.html\", resolvedUrl.toString());\n    }\n\n    @Test\n    void testResolveWithInvalidBaseUrl() {\n        URL base = null;\n        String relUrl = \"subpath/file.html\";\n        assertThrows(MalformedURLException.class, () -> StringUtil.resolve(base, relUrl));\n    }\n\n    @Test\n    void testResolveWithInvalidRelativeUrl() {\n        URL base = new URL(\"https://example.com/path/\");\n        String relUrl = null;\n        assertThrows(MalformedURLException.class, () -> StringUtil.resolve(base, relUrl));\n    }\n}\n"}]