[{"strategy": "retry", "code": "\npackage org.jsoup.nodes;\n\nimport org.jsoup.Jsoup;\nimport org.jsoup.nodes.Document;\nimport org.jsoup.nodes.Element;\nimport org.jsoup.select.Elements;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.regex.PatternSyntaxException;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class Element_getElementsMatchingTextTest {\n    private Document doc;\n\n    @BeforeEach\n    public void setUp() {\n        doc = Jsoup.parse(\"<div>One</div><div>Two</div><div>Three</div>\");\n    }\n\n    @Test\n    public void testGetElementsMatchingTextValidRegex() {\n        Elements elements = doc.getElementsMatchingText(\"One\");\n        assertEquals(1, elements.size());\n        assertEquals(\"One\", elements.get(0).text());\n    }\n\n    @Test\n    public void testGetElementsMatchingTextInvalidRegex() {\n        assertThrows(IllegalArgumentException.class, () -> {\n            doc.getElementsMatchingText(\"[invalid regex\");\n        });\n    }\n\n    @Test\n    public void testGetElementsMatchingTextNoMatch() {\n        Elements elements = doc.getElementsMatchingText(\"Four\");\n        assertEquals(0, elements.size());\n    }\n\n    @Test\n    public void testGetElementsMatchingTextCaseInsensitive() {\n        Elements elements = doc.getElementsMatchingText(\"(?i)one\");\n        assertEquals(1, elements.size());\n        assertEquals(\"One\", elements.get(0).text());\n    }\n\n    @Test\n    public void testGetElementsMatchingTextMultipleMatches() {\n        Document doc = Jsoup.parse(\"<div>One</div><div>One</div><div>Two</div>\");\n        Elements elements = doc.getElementsMatchingText(\"One\");\n        assertEquals(2, elements.size());\n        assertEquals(\"One\", elements.get(0).text());\n        assertEquals(\"One\", elements.get(1).text());\n    }\n}\n"}]