{"target_method": "matchesAny", "signature": "boolean matchesAny(String...)", "direct_enhancements": [{"method_name": "matches(String)", "relation_type": "Behavioral Similarity", "confidence": 0.95, "reason": "Both methods test if the next characters on the queue match a sequence, with matchesAny testing against multiple sequences.", "is_external": false}, {"method_name": "matchChomp(String)", "relation_type": "Behavioral Similarity", "confidence": 0.9, "reason": "Both methods involve matching sequences and modifying the queue position based on matches.", "is_external": false}, {"method_name": "consumeToAny(String...)", "relation_type": "Behavioral Similarity", "confidence": 0.85, "reason": "Both methods involve consuming characters from the queue until a match is found among multiple sequences.", "is_external": false}, {"method_name": "matchesAny(char...)", "relation_type": "Structural Similarity", "confidence": 0.9, "reason": "Both methods iterate over a list of sequences to check for matches, with one handling strings and the other handling characters.", "is_external": false}, {"method_name": "consumeTo(String)", "relation_type": "Behavioral Similarity", "confidence": 0.8, "reason": "Both methods involve consuming characters from the queue until a specific sequence is matched.", "is_external": false}, {"method_name": "consumeToIgnoreCase(String)", "relation_type": "Behavioral Similarity", "confidence": 0.8, "reason": "Both methods involve consuming characters from the queue until a specific sequence is matched, with consumeToIgnoreCase being case-insensitive.", "is_external": false}, {"method_name": "chompTo(String)", "relation_type": "Behavioral Similarity", "confidence": 0.8, "reason": "Both methods involve consuming characters from the queue until a specific sequence is matched and then removing that sequence from the queue.", "is_external": false}, {"method_name": "chompToIgnoreCase(String)", "relation_type": "Behavioral Similarity", "confidence": 0.8, "reason": "Both methods involve consuming characters from the queue until a specific sequence is matched and then removing that sequence from the queue, with chompToIgnoreCase being case-insensitive.", "is_external": false}, {"method_name": "chompBalanced(char, char)", "relation_type": "Behavioral Similarity", "confidence": 0.75, "reason": "Both methods involve consuming characters from the queue based on matching patterns, with chompBalanced handling balanced pairs.", "is_external": false}, {"method_name": "consumeWhitespace()", "relation_type": "Behavioral Similarity", "confidence": 0.7, "reason": "Both methods involve consuming characters from the queue based on specific criteria, with consumeWhitespace consuming whitespace characters.", "is_external": false}, {"method_name": "consumeWord()", "relation_type": "Behavioral Similarity", "confidence": 0.7, "reason": "Both methods involve consuming characters from the queue based on specific criteria, with consumeWord consuming word characters.", "is_external": false}, {"method_name": "consumeCssIdentifier()", "relation_type": "Behavioral Similarity", "confidence": 0.7, "reason": "Both methods involve consuming characters from the queue based on specific criteria, with consumeCssIdentifier consuming CSS identifiers.", "is_external": false}, {"method_name": "consumeElementSelector()", "relation_type": "Behavioral Similarity", "confidence": 0.7, "reason": "Both methods involve consuming characters from the queue based on specific criteria, with consumeElementSelector consuming element selectors.", "is_external": false}]}