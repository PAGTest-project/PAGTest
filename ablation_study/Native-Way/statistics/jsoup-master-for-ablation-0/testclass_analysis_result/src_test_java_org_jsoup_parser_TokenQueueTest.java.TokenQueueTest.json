{"file_path": "src/test/java/org/jsoup/parser/TokenQueueTest.java", "testclass_name": "TokenQueueTest", "dependencies": ["package org.jsoup.parser;", "import org.jsoup.Jsoup;", "import org.jsoup.nodes.Document;", "import org.junit.jupiter.api.Test;", "import java.util.regex.Pattern;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "TokenQueueTest", "description": "Unit tests for TokenQueue class, focusing on various methods like chompBalanced, unescape, escapeCssIdentifier, and consume methods.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "chompBalanced", "primary_tested": ["TokenQueue.consumeTo(String)", "TokenQueue.chompBalanced(char,char)", "TokenQueue.remainder()"], "external_dependencies": {"modules": ["TokenQueue"], "class_members": []}, "category": "unit", "description": "Tests the chompBalanced method to ensure it correctly balances and consumes text within parentheses."}, {"name": "chompEscapedBalanced", "primary_tested": ["TokenQueue.consumeTo(String)", "TokenQueue.chompBalanced(char,char)", "TokenQueue.remainder()", "TokenQueue.unescape(String)"], "external_dependencies": {"modules": ["TokenQueue"], "class_members": []}, "category": "unit", "description": "Tests the chompBalanced method with escaped characters to ensure it correctly balances and consumes text within parentheses."}, {"name": "chompBalancedMatchesAsMuchAsPossible", "primary_tested": ["TokenQueue.consumeTo(String)", "TokenQueue.chompBalanced(char,char)"], "external_dependencies": {"modules": ["TokenQueue"], "class_members": []}, "category": "unit", "description": "Tests the chompBalanced method to ensure it matches as much text as possible within parentheses."}, {"name": "unescape", "primary_tested": ["TokenQueue.unescape(String)"], "external_dependencies": {"modules": ["TokenQueue"], "class_members": []}, "category": "unit", "description": "Tests the unescape method to ensure it correctly unescapes escaped characters."}, {"name": "unescape_2", "primary_tested": ["TokenQueue.unescape(String)"], "external_dependencies": {"modules": ["TokenQueue"], "class_members": []}, "category": "unit", "description": "Tests the unescape method with a different set of escaped characters."}, {"name": "escapeCssIdentifier", "primary_tested": ["TokenQueue.escapeCssIdentifier(String)"], "external_dependencies": {"modules": ["TokenQueue"], "class_members": []}, "category": "unit", "description": "Tests the escapeCssIdentifier method to ensure it correctly escapes CSS identifiers."}, {"name": "chompToIgnoreCase", "primary_tested": ["TokenQueue.chompToIgnoreCase(String)"], "external_dependencies": {"modules": ["TokenQueue"], "class_members": []}, "category": "unit", "description": "Tests the chompToIgnoreCase method to ensure it correctly consumes text up to a case-insensitive string."}, {"name": "addFirst", "primary_tested": ["TokenQueue.consumeWord()", "TokenQueue.addFirst(String)", "TokenQueue.remainder()"], "external_dependencies": {"modules": ["TokenQueue"], "class_members": []}, "category": "unit", "description": "Tests the addFirst method to ensure it correctly adds text to the beginning of the queue."}, {"name": "consumeToIgnoreSecondCallTest", "primary_tested": ["TokenQueue.chompToIgnoreCase(String)"], "external_dependencies": {"modules": ["TokenQueue"], "class_members": []}, "category": "unit", "description": "Tests the chompToIgnoreCase method to ensure it correctly handles multiple calls."}, {"name": "testNestedQuotes", "primary_tested": ["Jsoup.parse(String)", "Document.select(String)", "Element.cssSelector()"], "associated_methods": ["TokenQueueTest.validateNestedQuotes(String,String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Element"], "class_members": []}, "category": "unit", "description": "Tests the handling of nested quotes in HTML attributes."}, {"name": "chompBalancedThrowIllegalArgumentException", "primary_tested": ["TokenQueue.consumeTo(String)", "TokenQueue.chompBalanced(char,char)"], "external_dependencies": {"modules": ["TokenQueue"], "class_members": []}, "category": "unit", "description": "Tests the chompBalanced method to ensure it throws an IllegalArgumentException when the markers are not balanced."}, {"name": "testQuotedPattern", "primary_tested": ["Jsoup.parse(String)", "Document.select(String)", "Element.childNode(int)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Element"], "class_members": []}, "category": "unit", "description": "Tests the handling of quoted patterns in HTML elements."}, {"name": "consumeEscapedTag", "primary_tested": ["TokenQueue.consumeElementSelector()", "TokenQueue.consumeWhitespace()", "TokenQueue.isEmpty()"], "external_dependencies": {"modules": ["TokenQueue"], "class_members": []}, "category": "unit", "description": "Tests the consumeElementSelector method to ensure it correctly consumes escaped tags."}, {"name": "consumeEscapedId", "primary_tested": ["TokenQueue.consumeCssIdentifier()", "TokenQueue.consumeWhitespace()", "TokenQueue.isEmpty()"], "external_dependencies": {"modules": ["TokenQueue"], "class_members": []}, "category": "unit", "description": "Tests the consumeCssIdentifier method to ensure it correctly consumes escaped CSS identifiers."}]}