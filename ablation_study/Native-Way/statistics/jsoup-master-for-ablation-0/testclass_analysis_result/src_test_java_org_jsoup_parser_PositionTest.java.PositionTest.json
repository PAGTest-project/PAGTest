{"file_path": "src/test/java/org/jsoup/parser/PositionTest.java", "testclass_name": "PositionTest", "dependencies": ["package org.jsoup.parser;", "import org.jsoup.Jsoup;", "import org.jsoup.integration.servlets.FileServlet;", "import org.jsoup.nodes.Attribute;", "import org.jsoup.nodes.CDataNode;", "import org.jsoup.nodes.Comment;", "import org.jsoup.nodes.DataNode;", "import org.jsoup.nodes.Document;", "import org.jsoup.nodes.DocumentType;", "import org.jsoup.nodes.Element;", "import org.jsoup.nodes.LeafNode;", "import org.jsoup.nodes.Node;", "import org.jsoup.nodes.Range;", "import org.jsoup.nodes.TextNode;", "import org.jsoup.nodes.XmlDeclaration;", "import org.jsoup.select.Elements;", "import org.junit.jupiter.api.Test;", "import java.io.IOException;", "import java.util.List;", "import java.util.stream.Collectors;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "PositionTest", "description": "Tests for tracking positions in HTML and XML parsing using Jsoup.", "class_members": {"variables": [{"name": "TrackingHtmlParser", "type": "Parser"}, {"name": "TrackingXmlParser", "type": "Parser"}], "methods": [{"name": "accumulatePositions", "signature": "static void accumulatePositions(Node node, StringBuilder sb)"}, {"name": "printRange", "signature": "private void printRange(Node node)"}, {"name": "accumulateAttributePositions", "signature": "static void accumulateAttributePositions(Node node, StringBuilder sb)"}, {"name": "accumulatePositions", "signature": "static void accumulatePositions(Attribute attr, StringBuilder sb)"}]}, "fixtures": [], "test_cases": [{"name": "parserTrackDefaults", "primary_tested": ["Parser.isTrackPosition()", "Parser.setTrackPosition(boolean)"], "external_dependencies": {"modules": ["Parser"]}, "category": "unit", "description": "Tests the default tracking position settings for HTML and XML parsers."}, {"name": "tracksPosition", "primary_tested": ["Document.expectFirst(String)", "Element.sourceRange()", "Element.endSourceRange()", "Range.Position.isTracked()", "Range.Position.pos()", "Range.Position.columnNumber()", "Range.Position.lineNumber()", "TextNode.getWholeText()"], "associated_methods": ["TextNode.sourceRange()", "Comment.sourceRange()"], "external_dependencies": {"modules": ["Document", "Element", "TextNode", "Comment", "Range"]}, "category": "unit", "description": "Tests tracking positions of elements and text nodes in parsed HTML content."}, {"name": "tracksExpectedPoppedElements", "primary_tested": ["Document.expectFirst(String)", "Element.sourceRange()", "Element.endSourceRange()", "Range.Position.isTracked()", "Range.Position.isImplicit()"], "associated_methods": ["TextNode.sourceRange()"], "external_dependencies": {"modules": ["Document", "Element", "TextNode", "Range"]}, "category": "unit", "description": "Tests tracking positions of elements and text nodes in parsed HTML content with expected popped elements."}, {"name": "tracksImplicitPoppedElements", "primary_tested": ["Document.expectFirst(String)", "Element.sourceRange()", "Element.endSourceRange()", "Range.Position.isTracked()", "Range.Position.isImplicit()"], "external_dependencies": {"modules": ["Document", "Element", "Range"]}, "category": "unit", "description": "Tests tracking positions of elements in parsed HTML content with implicit popped elements."}, {"name": "tracksMarkup", "primary_tested": ["Document.documentType()", "DocumentType.sourceRange()", "Element.sourceRange()", "TextNode.sourceRange()", "CDataNode.sourceRange()"], "external_dependencies": {"modules": ["Document", "DocumentType", "Element", "TextNode", "CDataNode"]}, "category": "unit", "description": "Tests tracking positions of document type, elements, and text nodes in parsed HTML content with markup."}, {"name": "tracksDataNodes", "primary_tested": ["Element.sourceRange()", "DataNode.sourceRange()"], "external_dependencies": {"modules": ["Element", "DataNode"]}, "category": "unit", "description": "Tests tracking positions of data nodes in parsed HTML content."}, {"name": "tracksXml", "primary_tested": ["XmlDeclaration.sourceRange()", "DocumentType.sourceRange()", "Element.sourceRange()", "TextNode.sourceRange()", "Comment.sourceRange()"], "external_dependencies": {"modules": ["XmlDeclaration", "DocumentType", "Element", "TextNode", "Comment"]}, "category": "unit", "description": "Tests tracking positions of XML declarations, document type, elements, and text nodes in parsed XML content."}, {"name": "tracksFromFetch", "primary_tested": ["Jsoup.connect(String)", "Document.expectFirst(String)", "Element.sourceRange()", "TextNode.sourceRange()"], "external_dependencies": {"modules": ["Jsoup", "Document", "Element", "TextNode"]}, "category": "integration", "description": "Tests tracking positions of elements and text nodes in parsed HTML content fetched from a URL."}, {"name": "tracksFromXmlFetch", "primary_tested": ["Jsoup.connect(String)", "Document.expectFirst(String)", "Element.sourceRange()"], "external_dependencies": {"modules": ["Jsoup", "Document", "Element"]}, "category": "integration", "description": "Tests tracking positions of elements in parsed XML content fetched from a URL."}, {"name": "tracksTableMovedText", "primary_tested": ["Document.nodeStream(Class)", "TextNode.sourceRange()"], "external_dependencies": {"modules": ["Document", "TextNode"]}, "category": "unit", "description": "Tests tracking positions of text nodes in parsed HTML content with table elements."}, {"name": "tracksClosingHtmlTagsInXml", "primary_tested": ["Element.sourceRange()", "Element.endSourceRange()"], "external_dependencies": {"modules": ["Element"]}, "category": "unit", "description": "Tests tracking positions of elements in parsed XML content with closing HTML tags."}, {"name": "tracksClosingHeadingTags", "primary_tested": ["Element.sourceRange()", "Element.endSourceRange()"], "external_dependencies": {"modules": ["Element"]}, "category": "unit", "description": "Tests tracking positions of heading elements in parsed HTML content."}, {"name": "tracksAttributes", "primary_tested": ["Element.attributes()", "Attribute.sourceRange()", "Range.AttributeRange.isTracked()", "Range.AttributeRange.isImplicit()"], "external_dependencies": {"modules": ["Element", "Attribute", "Range"]}, "category": "unit", "description": "Tests tracking positions of attributes in parsed HTML content."}, {"name": "tracksAttributesAcrossLines", "primary_tested": ["Element.attributes()", "Attribute.sourceRange()", "Range.AttributeRange.isTracked()", "Range.AttributeRange.isImplicit()"], "external_dependencies": {"modules": ["Element", "Attribute", "Range"]}, "category": "unit", "description": "Tests tracking positions of attributes across multiple lines in parsed HTML content."}, {"name": "trackAttributePositionInFirstElement", "primary_tested": ["Element.nodeStream()", "Attribute.sourceRange()"], "external_dependencies": {"modules": ["Element", "Attribute"]}, "category": "unit", "description": "Tests tracking positions of attributes in the first element of parsed HTML content."}, {"name": "trackAttributePositionWithCase", "primary_tested": ["Element.nodeStream()", "Attribute.sourceRange()"], "external_dependencies": {"modules": ["Element", "Attribute"]}, "category": "unit", "description": "Tests tracking positions of attributes with case sensitivity in parsed XML content."}, {"name": "trackAttributesPositionsDedupes", "primary_tested": ["Element.attributes()", "Attribute.sourceRange()"], "external_dependencies": {"modules": ["Element", "Attribute"]}, "category": "unit", "description": "Tests tracking positions of attributes with deduplication in parsed HTML content."}, {"name": "trackAttributesPositionsDirectionalDedupes", "primary_tested": ["Element.attributes()", "Attribute.sourceRange()"], "external_dependencies": {"modules": ["Element", "Attribute"]}, "category": "unit", "description": "Tests tracking positions of attributes with directional deduplication in parsed HTML content."}, {"name": "tracksFrag", "primary_tested": ["Parser.parseFragmentInput(String, Element, String)", "Element.nodeStream()", "Attribute.sourceRange()"], "external_dependencies": {"modules": ["Parser", "Element", "Attribute"]}, "category": "unit", "description": "Tests tracking positions of elements and attributes in parsed HTML fragments."}, {"name": "tracksAfterPSelfClose", "primary_tested": ["Document.body()", "Element.sourceRange()"], "external_dependencies": {"modules": ["Document", "Element"]}, "category": "unit", "description": "Tests tracking positions of elements after a self-closing P tag in parsed HTML content."}, {"name": "tracksFirstTextnode", "primary_tested": ["Document.body()", "Element.sourceRange()"], "external_dependencies": {"modules": ["Document", "Element"]}, "category": "unit", "description": "Tests tracking positions of the first text node in parsed HTML content."}, {"name": "updateKeyMaintainsRangeLc", "primary_tested": ["Attribute.sourceRange()", "Attribute.setKey(String)"], "external_dependencies": {"modules": ["Attribute"]}, "category": "unit", "description": "Tests updating attribute key while maintaining the source range in parsed HTML content."}, {"name": "tracksDocument", "primary_tested": ["Document.forEachNode(Consumer)", "Element.sourceRange()"], "external_dependencies": {"modules": ["Document", "Element"]}, "category": "unit", "description": "Tests tracking positions of elements in the entire document."}, {"name": "tracksDocumentXml", "primary_tested": ["Document.forEachNode(Consumer)", "Element.sourceRange()"], "external_dependencies": {"modules": ["Document", "Element"]}, "category": "unit", "description": "Tests tracking positions of elements in the entire XML document."}, {"name": "updateKeyMaintainsRangeUc", "primary_tested": ["Attribute.sourceRange()", "Attribute.setKey(String)"], "external_dependencies": {"modules": ["Attribute"]}, "category": "unit", "description": "Tests updating attribute key while maintaining the source range in parsed XML content."}]}