{"file_path": "src/test/java/org/jsoup/helper/DataUtilTest.java", "testclass_name": "DataUtilTest", "dependencies": ["package org.jsoup.helper;", "import org.jsoup.Jsoup;", "import org.jsoup.integration.ParseTest;", "import org.jsoup.internal.ControllableInputStream;", "import org.jsoup.nodes.Document;", "import org.jsoup.parser.Parser;", "import org.junit.jupiter.api.Test;", "import java.io.*;", "import java.nio.ByteBuffer;", "import java.nio.charset.Charset;", "import java.nio.charset.StandardCharsets;", "import java.nio.file.Files;", "import java.nio.file.Path;", "import static org.jsoup.integration.ParseTest.getFile;", "import static org.jsoup.integration.ParseTest.getPath;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "DataUtilTest", "description": "Unit tests for DataUtil class, focusing on charset handling, BOM detection, and file parsing.", "class_members": {"variables": [], "methods": [{"name": "stream", "signature": "private ControllableInputStream stream(String data)"}, {"name": "stream", "signature": "private ControllableInputStream stream(String data, String charset)"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testCharset", "primary_tested": ["DataUtil.getCharsetFromContentType(String)"], "external_dependencies": {"modules": ["DataUtil"]}, "category": "unit", "description": "Tests the extraction of charset from content type strings."}, {"name": "testQuotedCharset", "primary_tested": ["DataUtil.getCharsetFromContentType(String)"], "external_dependencies": {"modules": ["DataUtil"]}, "category": "unit", "description": "Tests the extraction of charset from content type strings with quoted charset values."}, {"name": "discardsSpuriousByteOrderMark", "primary_tested": ["DataUtil.parseInputStream(ControllableInputStream,String,String,Parser)"], "external_dependencies": {"modules": ["DataUtil", "ControllableInputStream", "Parser", "Document"], "class_members": [{"name": "stream", "type": "method"}]}, "category": "unit", "description": "Tests the handling of BOM in HTML content."}, {"name": "discardsSpuriousByteOrderMarkWhenNoCharsetSet", "primary_tested": ["DataUtil.parseInputStream(ControllableInputStream,String,String,Parser)"], "external_dependencies": {"modules": ["DataUtil", "ControllableInputStream", "Parser", "Document"], "class_members": [{"name": "stream", "type": "method"}]}, "category": "unit", "description": "Tests the handling of BOM in HTML content when no charset is set."}, {"name": "shouldNotThrowExceptionOnEmptyCharset", "primary_tested": ["DataUtil.getCharsetFromContentType(String)"], "external_dependencies": {"modules": ["DataUtil"]}, "category": "unit", "description": "Tests the behavior when the charset is empty in the content type string."}, {"name": "shouldSelectFirstCharsetOnWeirdMultileCharsetsInMetaTags", "primary_tested": ["DataUtil.getCharsetFromContentType(String)"], "external_dependencies": {"modules": ["DataUtil"]}, "category": "unit", "description": "Tests the selection of the first charset when multiple charsets are specified in meta tags."}, {"name": "shouldCorrectCharsetForDuplicateCharsetString", "primary_tested": ["DataUtil.getCharsetFromContentType(String)"], "external_dependencies": {"modules": ["DataUtil"]}, "category": "unit", "description": "Tests the correction of charset when the charset string is duplicated."}, {"name": "shouldReturnNullForIllegalCharsetNames", "primary_tested": ["DataUtil.getCharsetFromContentType(String)"], "external_dependencies": {"modules": ["DataUtil"]}, "category": "unit", "description": "Tests the handling of illegal charset names in the content type string."}, {"name": "generatesMimeBoundaries", "primary_tested": ["DataUtil.mimeBoundary()"], "external_dependencies": {"modules": ["DataUtil"]}, "category": "unit", "description": "Tests the generation of MIME boundaries."}, {"name": "wrongMetaCharsetFallback", "primary_tested": ["DataUtil.parseInputStream(ControllableInputStream,String,String,Parser)"], "external_dependencies": {"modules": ["DataUtil", "ControllableInputStream", "Parser", "Document"], "class_members": [{"name": "stream", "type": "method"}]}, "category": "unit", "description": "Tests the fallback behavior when the meta charset is incorrect."}, {"name": "secondMetaElementWithContentTypeContainsCharsetParameter", "primary_tested": ["DataUtil.parseInputStream(ControllableInputStream,String,String,Parser)"], "external_dependencies": {"modules": ["DataUtil", "ControllableInputStream", "Parser", "Document"], "class_members": [{"name": "stream", "type": "method"}]}, "category": "unit", "description": "Tests the handling of the second meta element with a charset parameter."}, {"name": "firstMetaElementWithCharsetShouldBeUsedForDecoding", "primary_tested": ["DataUtil.parseInputStream(ControllableInputStream,String,String,Parser)"], "external_dependencies": {"modules": ["DataUtil", "ControllableInputStream", "Parser", "Document"], "class_members": [{"name": "stream", "type": "method"}]}, "category": "unit", "description": "Tests that the first meta element with a charset should be used for decoding."}, {"name": "parseSequenceInputStream", "primary_tested": ["DataUtil.parseInputStream(ControllableInputStream,String,String,Parser)"], "external_dependencies": {"modules": ["DataUtil", "ControllableInputStream", "Parser", "Document", "SequenceInputStream", "Files", "Path"], "class_members": [{"name": "stream", "type": "method"}], "project_specific_resources": ["ParseTest.getFile(String)"]}, "category": "unit", "description": "Tests parsing a sequence input stream."}, {"name": "supportsBOMinFiles", "primary_tested": ["Jsoup.parse(File,String,String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "File"], "project_specific_resources": ["ParseTest.getFile(String)"]}, "category": "unit", "description": "Tests support for BOM in various encoding files."}, {"name": "streamerSupportsBOMinFiles", "primary_tested": ["DataUtil.streamParser(Path,String,String,Parser)"], "external_dependencies": {"modules": ["DataUtil", "Parser", "Document", "Path"], "project_specific_resources": ["ParseTest.getFile(String)"]}, "category": "unit", "description": "Tests support for BOM in various encoding files using stream parser."}, {"name": "supportsUTF8BOM", "primary_tested": ["Jsoup.parse(File,String,String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "File"], "project_specific_resources": ["ParseTest.getFile(String)"]}, "category": "unit", "description": "Tests support for UTF-8 BOM."}, {"name": "noExtraNULLBytes", "primary_tested": ["Jsoup.parse(ByteArrayInputStream,String,String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "ByteArrayInputStream", "StandardCharsets"]}, "category": "unit", "description": "Tests that no extra NULL bytes are present in the parsed document."}, {"name": "supportsZippedUTF8BOM", "primary_tested": ["Jsoup.parse(File,String,String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "File"], "project_specific_resources": ["ParseTest.getFile(String)"]}, "category": "unit", "description": "Tests support for UTF-8 BOM in zipped files."}, {"name": "streamerSupportsZippedUTF8BOM", "primary_tested": ["DataUtil.streamParser(Path,String,String,Parser)"], "external_dependencies": {"modules": ["DataUtil", "Parser", "Document", "Path"], "project_specific_resources": ["ParseTest.getFile(String)"]}, "category": "unit", "description": "Tests support for UTF-8 BOM in zipped files using stream parser."}, {"name": "supportsXmlCharsetDeclaration", "primary_tested": ["Jsoup.parse(InputStream,String,String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "ByteArrayInputStream", "Charset"]}, "category": "unit", "description": "Tests support for XML charset declaration."}, {"name": "loadsGzipFile", "primary_tested": ["Jsoup.parse(File,String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "File"], "project_specific_resources": ["ParseTest.getFile(String)"]}, "category": "unit", "description": "Tests loading and parsing a gzipped HTML file."}, {"name": "loadsGzipPath", "primary_tested": ["Jsoup.parse(Path,String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Path"], "project_specific_resources": ["ParseTest.getPath(String)"]}, "category": "unit", "description": "Tests loading and parsing a gzipped HTML file using Path."}, {"name": "loadsZGzipFile", "primary_tested": ["Jsoup.parse(File,String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "File"], "project_specific_resources": ["ParseTest.getFile(String)"]}, "category": "unit", "description": "Tests loading and parsing a zipped HTML file with .z extension."}, {"name": "loadsZGzipPath", "primary_tested": ["Jsoup.parse(Path,String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Path"], "project_specific_resources": ["ParseTest.getPath(String)"]}, "category": "unit", "description": "Tests loading and parsing a zipped HTML file with .z extension using Path."}, {"name": "handlesFakeGzipFile", "primary_tested": ["Jsoup.parse(File,String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "File"], "project_specific_resources": ["ParseTest.getFile(String)"]}, "category": "unit", "description": "Tests handling of a file with a .gz extension but not actually gzipped."}, {"name": "handlesFakeGzipPath", "primary_tested": ["Jsoup.parse(Path,String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Path"], "project_specific_resources": ["ParseTest.getPath(String)"]}, "category": "unit", "description": "Tests handling of a file with a .gz extension but not actually gzipped using Path."}, {"name": "handlesChunkedInputStream", "primary_tested": ["Jsoup.parse(InputStream,String,String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "VaryingReadInputStream", "ParseTest", "File"], "project_specific_resources": ["ParseTest.getFile(String)", "ParseTest.getFileAsString(File)", "ParseTest.inputStreamFrom(String)"]}, "category": "unit", "description": "Tests handling of a chunked input stream."}, {"name": "handlesUnlimitedRead", "primary_tested": ["DataUtil.readToByteBuffer(InputStream,int)"], "external_dependencies": {"modules": ["DataUtil", "ByteBuffer", "VaryingReadInputStream", "ParseTest", "File", "StandardCharsets"], "project_specific_resources": ["ParseTest.getFile(String)", "ParseTest.getFileAsString(File)", "ParseTest.inputStreamFrom(String)"]}, "category": "unit", "description": "Tests reading an unlimited amount of data from an input stream."}]}