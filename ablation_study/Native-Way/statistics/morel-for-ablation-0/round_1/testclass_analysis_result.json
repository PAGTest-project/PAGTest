[{"file_path": "src/test/java/net/hydromatic/morel/util/Static_intersectTest.java", "testclass_name": "Static_intersectTest", "dependencies": ["package net.hydromatic.morel.util;", "import com.google.common.collect.ImmutableList;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "Static_intersectTest", "description": "Unit tests for the intersect method in the Static class.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testIntersect", "primary_tested": ["Static.intersect(List<Integer>,Iterable<Integer>)"], "external_dependencies": {"modules": ["Arrays", "ImmutableList", "Static"]}, "category": "unit", "description": "Tests the intersect functionality of the Static class, ensuring it correctly intersects two lists."}]}, {"file_path": "src/test/java/net/hydromatic/morel/util/Pair_leftTest.java", "testclass_name": "Pair_leftTest", "dependencies": ["package net.hydromatic.morel.util;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.List;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "Pair_leftTest", "description": "Unit tests for the Pair.left method.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testLeft", "primary_tested": ["Pair.left(List<Map.Entry<String,Integer>>)"], "external_dependencies": {"modules": ["Pair", "Arrays", "List", "Map"]}, "category": "unit", "description": "Tests the Pair.left method to ensure it correctly extracts the left elements from a list of pairs."}]}, {"file_path": "src/test/java/net/hydromatic/morel/ast/Pos_plusTest.java", "testclass_name": "Pos_plusTest", "dependencies": ["package net.hydromatic.morel.ast;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Pos_plusTest", "description": "Unit tests for the Pos.plus method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testPlus", "primary_tested": ["Pos.plus(Pos)"], "external_dependencies": {"modules": ["Pos"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the plus functionality of the Pos class."}]}, {"file_path": "src/test/java/net/hydromatic/morel/util/Static_toImmutableListTest.java", "testclass_name": "Static_toImmutableListTest", "dependencies": ["package net.hydromatic.morel.util;", "import com.google.common.collect.ImmutableList;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.stream.Stream;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "Static_toImmutableListTest", "description": "Unit test for converting a Stream to an ImmutableList using Static.toImmutableList().", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testToImmutableList", "primary_tested": ["Static.toImmutableList()"], "external_dependencies": {"modules": ["com.google.common.collect.ImmutableList", "java.util.stream.Stream", "net.hydromatic.morel.util.Static"]}, "category": "unit", "description": "Tests the conversion of a Stream to an ImmutableList using Static.toImmutableList()."}]}, {"file_path": "src/test/java/net/hydromatic/morel/util/Pair_rightTest.java", "testclass_name": "Pair_rightTest", "dependencies": ["package net.hydromatic.morel.util;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.List;", "import java.util.Map;", "import java.util.AbstractMap;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "Pair_rightTest", "description": "Unit test for the Pair.right method which extracts the right values from a list of pairs.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testRight", "primary_tested": ["Pair.right(List<Map.Entry<String,Integer>>)"], "external_dependencies": {"modules": ["java.util.Arrays", "java.util.List", "java.util.Map", "java.util.AbstractMap", "Pair"]}, "category": "unit", "description": "Tests the extraction of right values from a list of pairs."}]}, {"file_path": "src/test/java/net/hydromatic/morel/util/Ord_forEachIndexedTest.java", "testclass_name": "Ord_forEachIndexedTest", "dependencies": ["package net.hydromatic.morel.util;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.List;", "import java.util.function.ObjIntConsumer;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "Ord_forEachIndexedTest", "description": "Unit test for the forEachIndexed method in the Ord class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testForEachIndexed", "primary_tested": ["Ord.forEachIndexed(List<String>,ObjIntConsumer<String>)"], "external_dependencies": {"modules": ["Arrays", "List", "StringBuilder", "ObjIntConsumer", "Ord"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the forEachIndexed method of the Ord class by verifying that it correctly appends the index and element to a StringBuilder."}]}, {"file_path": "src/test/java/net/hydromatic/morel/util/Pair_toMapTest.java", "testclass_name": "Pair_toMapTest", "dependencies": ["package net.hydromatic.morel.util;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.HashMap;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "Pair_toMapTest", "description": "Unit tests for the toMap method of the Pair class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testToMap", "primary_tested": ["Pair.toMap(Iterable<Pair<String,Integer>>)"], "external_dependencies": {"modules": ["Pair", "Arrays", "HashMap", "Map"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the toMap method of the Pair class, converting an Iterable of Pairs into a Map."}]}, {"file_path": "src/test/java/net/hydromatic/morel/util/Pair_zipMutableTest.java", "testclass_name": "Pair_zipMutableTest", "dependencies": ["package net.hydromatic.morel.util;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "Pair_zipMutableTest", "description": "Unit tests for the Pair.zipMutable method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testZipMutable", "primary_tested": ["Pair.zipMutable(List<Integer>,List<String>)"], "external_dependencies": {"modules": ["Pair", "Arrays", "List", "Pair"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the zipMutable functionality of the Pair class, ensuring that it correctly pairs elements from two lists."}]}, {"file_path": "src/test/java/net/hydromatic/morel/util/Static_plusTest.java", "testclass_name": "Static_plusTest", "dependencies": ["package net.hydromatic.morel.util;", "import com.google.common.collect.ImmutableMap;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "Static_plusTest", "description": "Unit tests for the Static.plus method which adds a key-value pair to a map.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testPlus", "primary_tested": ["Static.plus(Map<String,Integer>,String,Integer)"], "external_dependencies": {"modules": ["Static", "HashMap", "Map"], "class_members": []}, "category": "unit", "description": "Tests the functionality of the Static.plus method which adds a key-value pair to a map and verifies the resulting map's size and content."}]}, {"file_path": "src/test/java/net/hydromatic/morel/ast/Pos_splitTest.java", "testclass_name": "Pos_splitTest", "dependencies": ["package net.hydromatic.morel.ast;", "import net.hydromatic.morel.util.Pair;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Pos_splitTest", "description": "Unit tests for the Pos.split method, which splits a string based on a delimiter and validates the input.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testSplit_ValidInput", "primary_tested": ["Pos.split(String,char,String)"], "external_dependencies": {"modules": ["Pos", "Pair"]}, "category": "unit", "description": "Tests the Pos.split method with valid input, ensuring it correctly splits the string and returns the expected result."}, {"name": "testSplit_InvalidInput", "primary_tested": ["Pos.split(String,char,String)"], "external_dependencies": {"modules": ["Pos", "Pair"]}, "category": "unit", "description": "Tests the Pos.split method with invalid input, ensuring it throws an IllegalArgumentException with the expected message."}]}, {"file_path": "src/test/java/net/hydromatic/morel/util/Pair_forEachTest.java", "testclass_name": "Pair_forEachTest", "dependencies": ["package net.hydromatic.morel.util;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.List;", "import java.util.function.BiConsumer;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "Pair_forEachTest", "description": "Unit test for the forEach method in the Pair class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testForEach", "primary_tested": ["Pair.forEach(List<Integer>,List<String>,BiConsumer<Integer,String>)"], "external_dependencies": {"modules": ["java.util.Arrays", "java.util.List", "java.util.function.BiConsumer", "Pair"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the forEach method of the Pair class by appending key-value pairs to a StringBuilder and verifying the result."}]}, {"file_path": "src/test/java/net/hydromatic/morel/ast/Pos_sumTest.java", "testclass_name": "Pos_sumTest", "dependencies": ["package net.hydromatic.morel.ast;", "import com.google.common.collect.Lists;", "import org.junit.jupiter.api.Test;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "Pos_sumTest", "description": "Tests for the sum functionality of the Pos class.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testSumWithList", "primary_tested": ["Pos.sum(List<Pos>)"], "external_dependencies": {"modules": ["Pos", "Lists"]}, "category": "unit", "description": "Tests the sum functionality of the Pos class with a List of Pos objects."}, {"name": "testSumWithIterable", "primary_tested": ["Pos.sum(Iterable<Pos>)"], "external_dependencies": {"modules": ["Pos", "Lists"]}, "category": "unit", "description": "Tests the sum functionality of the Pos class with an Iterable of Pos objects."}]}, {"file_path": "src/test/java/net/hydromatic/morel/util/Static_transformEagerTest.java", "testclass_name": "Static_transformEagerTest", "dependencies": ["package net.hydromatic.morel.util;", "import com.google.common.collect.ImmutableList;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.function.Function;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "Static_transformEagerTest", "description": "Unit tests for the Static.transformEager method.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testTransformEager_EmptyIterable", "primary_tested": ["Static.transformEager(Iterable<String>,Function<String,Integer>)"], "external_dependencies": {"modules": ["Collections", "ImmutableList", "Static"]}, "category": "unit", "description": "Tests the transformEager method with an empty iterable."}, {"name": "testTransformEager_NonEmptyIterable", "primary_tested": ["Static.transformEager(Iterable<String>,Function<String,Integer>)"], "external_dependencies": {"modules": ["Arrays", "ImmutableList", "Static"]}, "category": "unit", "description": "Tests the transformEager method with a non-empty iterable."}]}, {"file_path": "src/test/java/net/hydromatic/morel/util/Pair_firstAndTest.java", "testclass_name": "Pair_firstAndTest", "dependencies": ["package net.hydromatic.morel.util;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.Iterator;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Pair_firstAndTest", "description": "Unit tests for the Pair.firstAnd method.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testFirstAndWithEmptyIterable", "primary_tested": ["Pair.firstAnd(Iterable<Integer>)"], "external_dependencies": {"modules": ["Collections", "Pair", "Iterator"]}, "category": "unit", "description": "Tests the Pair.firstAnd method with an empty iterable, expecting no pairs."}, {"name": "testFirstAndWithNonEmptyIterable", "primary_tested": ["Pair.firstAnd(Iterable<Integer>)"], "associated_methods": ["Pair.left", "Pair.right"], "external_dependencies": {"modules": ["Arrays", "Pair", "Iterator"]}, "category": "unit", "description": "Tests the Pair.firstAnd method with a non-empty iterable, expecting pairs with correct values."}]}, {"file_path": "src/test/java/net/hydromatic/morel/util/Ord_forEachTest.java", "testclass_name": "Ord_forEachTest", "dependencies": ["package net.hydromatic.morel.util;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.List;", "import java.util.function.ObjIntConsumer;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "Ord_forEachTest", "description": "Unit test for the Ord.forEach method.", "class_members": {"variables": [{"name": "list", "type": "List<String>"}, {"name": "result", "type": "StringBuilder"}, {"name": "consumer", "type": "ObjIntConsumer<String>"}]}, "test_cases": [{"name": "testForEach", "primary_tested": ["Ord.forEach(List<String>,ObjIntConsumer<String>)"], "external_dependencies": {"modules": ["Arrays", "List", "ObjIntConsumer", "StringBuilder", "Ord"], "class_members": [{"name": "list", "type": "variable"}, {"name": "result", "type": "variable"}, {"name": "consumer", "type": "variable"}]}, "category": "unit", "description": "Tests the Ord.forEach method by iterating over a list and appending indices and elements to a StringBuilder."}]}, {"file_path": "src/test/java/net/hydromatic/morel/util/Pair_adjacentsTest.java", "testclass_name": "Pair_adjacentsTest", "dependencies": ["package net.hydromatic.morel.util;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.Iterator;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Pair_adjacentsTest", "description": "Unit tests for the Pair.adjacents method, which generates pairs of adjacent elements from an iterable.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testAdjacentsWithEmptyIterable", "primary_tested": ["Pair.adjacents(Iterable<Integer>)"], "external_dependencies": {"modules": ["Collections", "Pair", "Iterator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the Pair.adjacents method with an empty iterable, ensuring no pairs are generated."}, {"name": "testAdjacentsWithNonEmptyIterable", "primary_tested": ["Pair.adjacents(Iterable<Integer>)"], "associated_methods": ["Pair.of(Integer,Integer)"], "external_dependencies": {"modules": ["Arrays", "Pair", "Iterator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the Pair.adjacents method with a non-empty iterable, ensuring pairs of adjacent elements are correctly generated."}]}, {"file_path": "src/test/java/net/hydromatic/morel/util/Static_minusTest.java", "testclass_name": "Static_minusTest", "dependencies": ["package net.hydromatic.morel.util;", "import com.google.common.collect.ImmutableList;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "Static_minusTest", "description": "Unit tests for the Static.minus method, which removes an element from a list.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testMinus_ElementPresent", "primary_tested": ["Static.minus(List<Integer>,int)"], "external_dependencies": {"modules": ["Static", "Arrays", "List"]}, "category": "unit", "description": "Tests the Static.minus method when the element to be removed is present in the list."}, {"name": "testMinus_ElementNotPresent", "primary_tested": ["Static.minus(List<Integer>,int)"], "external_dependencies": {"modules": ["Static", "Arrays", "List"]}, "category": "unit", "description": "Tests the Static.minus method when the element to be removed is not present in the list."}, {"name": "testMinus_EmptyList", "primary_tested": ["Static.minus(List<Integer>,int)"], "external_dependencies": {"modules": ["Static", "ImmutableList", "List"]}, "category": "unit", "description": "Tests the Static.minus method when the input list is empty."}]}, {"file_path": "src/test/java/net/hydromatic/morel/util/Pair_zipTest.java", "testclass_name": "Pair_zipTest", "dependencies": ["package net.hydromatic.morel.util;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Pair_zipTest", "description": "Unit tests for the Pair.zip method, which zips two lists into a list of pairs.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testZipStrictEqualSizes", "primary_tested": ["Pair.zip(List<Integer>,List<String>,boolean)"], "external_dependencies": {"modules": ["Pair", "Arrays", "List", "Pair<Integer,String>"]}, "category": "unit", "description": "Tests the zip functionality with two lists of equal sizes and strict mode enabled."}, {"name": "testZipStrictDifferentSizes", "primary_tested": ["Pair.zip(List<Integer>,List<String>,boolean)"], "external_dependencies": {"modules": ["Pair", "Arrays", "List", "Pair<Integer,String>"]}, "category": "unit", "description": "Tests the zip functionality with two lists of different sizes and strict mode enabled, expecting an AssertionError."}, {"name": "testZipNonStrict", "primary_tested": ["Pair.zip(List<Integer>,List<String>,boolean)"], "external_dependencies": {"modules": ["Pair", "Arrays", "List", "Pair<Integer,String>"]}, "category": "unit", "description": "Tests the zip functionality with two lists of different sizes and strict mode disabled."}]}, {"file_path": "src/test/java/net/hydromatic/morel/compile/Extents_unionTest.java", "testclass_name": "Extents_unionTest", "dependencies": ["package net.hydromatic.morel.compile;", "import com.google.common.collect.ImmutableMap;", "import com.google.common.collect.ImmutableRangeSet;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.List;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "Extents_unionTest", "description": "Unit tests for the union functionality of Extents class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testUnionWithEmptyList", "primary_tested": ["Extents.union(List<Map<String, ImmutableRangeSet<Integer>>>)"], "external_dependencies": {"modules": ["Extents", "ImmutableMap", "ImmutableRangeSet"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the union functionality of Extents with an empty list of maps."}, {"name": "testUnionWithSingleMap", "primary_tested": ["Extents.union(List<Map<String, ImmutableRangeSet<Integer>>>)"], "external_dependencies": {"modules": ["Extents", "ImmutableMap", "ImmutableRangeSet"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the union functionality of Extents with a single map."}, {"name": "testUnionWithMultipleMaps", "primary_tested": ["Extents.union(List<Map<String, ImmutableRangeSet<Integer>>>)"], "external_dependencies": {"modules": ["Extents", "ImmutableMap", "ImmutableRangeSet"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the union functionality of Extents with multiple maps."}]}, {"file_path": "src/test/java/net/hydromatic/morel/util/Static_findTest.java", "testclass_name": "Static_findTest", "dependencies": ["package net.hydromatic.morel.util;", "import com.google.common.collect.ImmutableList;", "import org.junit.jupiter.api.Test;", "import java.util.Collection;", "import java.util.Iterator;", "import java.util.List;", "import java.util.ListIterator;", "import java.util.function.Predicate;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "Static_findTest", "description": "Unit tests for the Static.find method with different types of lists.", "class_members": {"nested_classes": [{"name": "NonRandomAccessList", "description": "Internal class implementing List interface with non-random access."}]}, "test_cases": [{"name": "testFindRandomAccessList", "primary_tested": ["Static.find(List<Integer>,Predicate<Integer>)"], "external_dependencies": {"modules": ["ImmutableList", "Predicate", "Static"]}, "category": "unit", "description": "Tests the Static.find method with a random access list."}, {"name": "testFindNonRandomAccessList", "primary_tested": ["Static.find(List<Integer>,Predicate<Integer>)"], "external_dependencies": {"modules": ["ImmutableList", "Predicate", "Static"], "class_members": [{"name": "NonRandomAccessList", "type": "nested_class"}]}, "category": "unit", "description": "Tests the Static.find method with a non-random access list."}, {"name": "testFindNoMatch", "primary_tested": ["Static.find(List<Integer>,Predicate<Integer>)"], "external_dependencies": {"modules": ["ImmutableList", "Predicate", "Static"]}, "category": "unit", "description": "Tests the Static.find method when no match is found in the list."}]}, {"file_path": "src/test/java/net/hydromatic/morel/compile/Extents_intersectTest.java", "testclass_name": "Extents_intersectTest", "dependencies": ["package net.hydromatic.morel.compile;", "import com.google.common.collect.ImmutableMap;", "import com.google.common.collect.ImmutableRangeSet;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.List;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "Extents_intersectTest", "description": "Unit tests for the Extents.intersect method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testIntersect_EmptyList", "primary_tested": ["Extents.intersect(List<Map<String, ImmutableRangeSet<Integer>>>)"], "external_dependencies": {"modules": ["Extents", "ImmutableMap", "ImmutableRangeSet", "Arrays"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the intersection functionality of Extents with an empty list of range set maps."}, {"name": "testIntersect_SingleMap", "primary_tested": ["Extents.intersect(List<Map<String, ImmutableRangeSet<Integer>>>)"], "external_dependencies": {"modules": ["Extents", "ImmutableMap", "ImmutableRangeSet", "Arrays"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the intersection functionality of Extents with a single map of range sets."}, {"name": "testIntersect_MultipleMaps", "primary_tested": ["Extents.intersect(List<Map<String, ImmutableRangeSet<Integer>>>)"], "external_dependencies": {"modules": ["Extents", "ImmutableMap", "ImmutableRangeSet", "Arrays"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the intersection functionality of Extents with multiple maps of range sets."}]}, {"file_path": "src/test/java/net/hydromatic/morel/util/Pair_forEachIndexedTest.java", "testclass_name": "Pair_forEachIndexedTest", "dependencies": ["package net.hydromatic.morel.util;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "Pair_forEachIndexedTest", "description": "Unit tests for the forEachIndexed method in the Pair class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testForEachIndexed", "primary_tested": ["Pair.forEachIndexed(List<String>,List<Integer>,BiConsumer<Integer,String,Integer>)"], "external_dependencies": {"modules": ["Pair", "List", "Arrays", "StringBuilder", "BiConsumer"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the forEachIndexed method with equal length lists."}, {"name": "testForEachIndexedWithDifferentLengths", "primary_tested": ["Pair.forEachIndexed(List<String>,List<Integer>,BiConsumer<Integer,String,Integer>)"], "external_dependencies": {"modules": ["Pair", "List", "Arrays", "StringBuilder", "BiConsumer"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the forEachIndexed method with lists of different lengths."}, {"name": "testForEachIndexedWithEmptyLists", "primary_tested": ["Pair.forEachIndexed(List<String>,List<Integer>,BiConsumer<Integer,String,Integer>)"], "external_dependencies": {"modules": ["Pair", "List", "Collections", "StringBuilder", "BiConsumer"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the forEachIndexed method with empty lists."}]}, {"file_path": "src/test/java/net/hydromatic/morel/util/Static_strTest.java", "testclass_name": "Static_strTest", "dependencies": ["package net.hydromatic.morel.util;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "Static_strTest", "description": "Unit tests for the Static.str method with StringBuilder.", "class_members": {"variables": [{"name": "builder", "type": "StringBuilder"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testStrWithNonEmptyStringBuilder", "primary_tested": ["Static.str(StringBuilder)"], "external_dependencies": {"modules": ["StringBuilder", "Static"], "class_members": [{"name": "builder", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the Static.str method with a non-empty StringBuilder."}, {"name": "testStrWithEmptyStringBuilder", "primary_tested": ["Static.str(StringBuilder)"], "external_dependencies": {"modules": ["StringBuilder", "Static"], "class_members": [{"name": "builder", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the Static.str method with an empty StringBuilder."}, {"name": "testStrWithMultipleCalls", "primary_tested": ["Static.str(StringBuilder)"], "external_dependencies": {"modules": ["StringBuilder", "Static"], "class_members": [{"name": "builder", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the Static.str method with multiple calls on the same StringBuilder."}]}, {"file_path": "src/test/java/net/hydromatic/morel/util/Static_shorterThanTest.java", "testclass_name": "Static_shorterThanTest", "dependencies": ["package net.hydromatic.morel.util;", "import com.google.common.collect.ImmutableList;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.Iterator;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "Static_shorterThanTest", "description": "Unit tests for the Static.shorterThan method, which checks if an Iterable or Collection is shorter than a given number.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testShorterThan_Collection", "primary_tested": ["Static.shorterThan(Collection<Integer>,int)"], "external_dependencies": {"modules": ["Static", "Arrays"]}, "category": "unit", "description": "Tests the shorterThan method with a Collection, checking if it correctly identifies when the collection is shorter than a given number."}, {"name": "testShorterThan_Iterable", "primary_tested": ["Static.shorterThan(Iterable<Integer>,int)"], "external_dependencies": {"modules": ["Static", "Arrays"]}, "category": "unit", "description": "Tests the shorterThan method with an Iterable, checking if it correctly identifies when the iterable is shorter than a given number."}, {"name": "testShorterThan_NonCollectionIterable", "primary_tested": ["Static.shorterThan(Iterable<Integer>,int)"], "external_dependencies": {"modules": ["Static", "Arrays"]}, "category": "unit", "description": "Tests the shorterThan method with a non-Collection Iterable, checking if it correctly identifies when the iterable is shorter than a given number."}, {"name": "testShorterThan_NonPositiveN", "primary_tested": ["Static.shorterThan(Iterable<Integer>,int)"], "external_dependencies": {"modules": ["Static", "Arrays"]}, "category": "unit", "description": "Tests the shorterThan method with non-positive values for n, checking if it correctly returns false."}]}, {"file_path": "src/test/java/net/hydromatic/morel/foreign/Calcite_codeTest.java", "testclass_name": "Calcite_codeTest", "dependencies": ["package net.hydromatic.morel.foreign;", "import net.hydromatic.morel.compile.Environment;", "import net.hydromatic.morel.eval.Code;", "import net.hydromatic.morel.type.Binding;", "import net.hydromatic.morel.type.Core;", "import net.hydromatic.morel.type.Op;", "import net.hydromatic.morel.type.Type;", "import net.hydromatic.morel.type.TypeSystem;", "import net.hydromatic.morel.type.TypeVisitor;", "import org.apache.calcite.rel.RelNode;", "import org.apache.calcite.tools.Programs;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertNotNull;"], "name": "Calcite_codeTest", "description": "Unit tests for the Calcite class, focusing on the code method with different scenarios.", "class_members": {"variables": [{"name": "calcite", "type": "Calcite"}], "nested_classes": [{"name": "MockEnvironment", "description": "Mock implementation of the Environment interface for testing purposes."}, {"name": "MockType", "description": "Mock implementation of the Type interface for testing purposes."}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testCodeWithValidRelNode", "primary_tested": ["Calcite.code(Environment,RelNode,Type)"], "external_dependencies": {"modules": ["Calcite", "RelNode", "Type", "MockEnvironment", "MockType"], "class_members": [{"name": "calcite", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the code method with a valid RelNode and Type, ensuring the result is not null."}, {"name": "testCodeWithNullRelNode", "primary_tested": ["Calcite.code(Environment,RelNode,Type)"], "external_dependencies": {"modules": ["Calcite", "Type", "MockEnvironment", "MockType"], "class_members": [{"name": "calcite", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the code method with a null RelNode and a valid Type, ensuring the result is not null."}]}, {"file_path": "src/test/java/net/hydromatic/morel/util/Sat_variableTest.java", "testclass_name": "Sat_variableTest", "dependencies": ["package net.hydromatic.morel.util;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Sat_variableTest", "description": "Unit tests for the Sat.Variable class, focusing on variable creation, retrieval, and ID increment.", "class_members": {"variables": [{"name": "sat", "type": "Sat"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testVariableCreation", "primary_tested": ["Sat.variable(String)"], "external_dependencies": {"modules": ["Sat", "Sat.Variable"], "class_members": [{"name": "sat", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the creation of a Sat.Variable and verifies its properties."}, {"name": "testVariableRetrieval", "primary_tested": ["Sat.variable(String)"], "external_dependencies": {"modules": ["Sat", "Sat.Variable"], "class_members": [{"name": "sat", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retrieval of a Sat.Variable and verifies that the same instance is returned for the same name."}, {"name": "testVariableIdIncrement", "primary_tested": ["Sat.variable(String)"], "external_dependencies": {"modules": ["Sat", "Sat.Variable"], "class_members": [{"name": "sat", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the increment of the ID property for each new Sat.Variable created."}]}, {"file_path": "src/test/java/net/hydromatic/morel/util/Pair_anyMatchTest.java", "testclass_name": "Pair_anyMatchTest", "dependencies": ["package net.hydromatic.morel.util;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.List;", "import java.util.function.BiPredicate;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "Pair_anyMatchTest", "description": "Unit tests for the Pair.anyMatch method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testAnyMatch_True", "primary_tested": ["Pair.anyMatch(List<Integer>,List<Integer>,BiPredicate<Integer,Integer>)"], "external_dependencies": {"modules": ["Pair", "List", "BiPredicate", "Arrays"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the Pair.anyMatch method with matching elements, expecting a true result."}, {"name": "testAnyMatch_False", "primary_tested": ["Pair.anyMatch(List<Integer>,List<Integer>,BiPredicate<Integer,Integer>)"], "external_dependencies": {"modules": ["Pair", "List", "BiPredicate", "Arrays"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the Pair.anyMatch method with non-matching elements, expecting a false result."}, {"name": "testAnyMatch_DifferentLengths", "primary_tested": ["Pair.anyMatch(List<Integer>,List<Integer>,BiPredicate<Integer,Integer>)"], "external_dependencies": {"modules": ["Pair", "List", "BiPredicate", "Arrays"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the Pair.anyMatch method with lists of different lengths, expecting a true result."}, {"name": "testAnyMatch_EmptyIterables", "primary_tested": ["Pair.anyMatch(List<Integer>,List<Integer>,BiPredicate<Integer,Integer>)"], "external_dependencies": {"modules": ["Pair", "List", "BiPredicate", "Collections"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the Pair.anyMatch method with empty lists, expecting a false result."}]}, {"file_path": "src/test/java/net/hydromatic/morel/util/Pair_allMatchTest.java", "testclass_name": "Pair_allMatchTest", "dependencies": ["package net.hydromatic.morel.util;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.function.BiPredicate;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "Pair_allMatchTest", "description": "Unit tests for the Pair.allMatch method, which checks if all elements in two iterables match based on a given predicate.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testAllMatch_True", "primary_tested": ["Pair.allMatch(Iterable<Integer>,Iterable<Integer>,BiPredicate<Integer,Integer>)"], "external_dependencies": {"modules": ["Pair", "Arrays", "BiPredicate"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the Pair.allMatch method with two iterables where all elements match based on the predicate."}, {"name": "testAllMatch_False", "primary_tested": ["Pair.allMatch(Iterable<Integer>,Iterable<Integer>,BiPredicate<Integer,Integer>)"], "external_dependencies": {"modules": ["Pair", "Arrays", "BiPredicate"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the Pair.allMatch method with two iterables where not all elements match based on the predicate."}, {"name": "testAllMatch_DifferentLengths", "primary_tested": ["Pair.allMatch(Iterable<Integer>,Iterable<Integer>,BiPredicate<Integer,Integer>)"], "external_dependencies": {"modules": ["Pair", "Arrays", "BiPredicate"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the Pair.allMatch method with two iterables of different lengths."}, {"name": "testAllMatch_EmptyIterables", "primary_tested": ["Pair.allMatch(Iterable<Integer>,Iterable<Integer>,BiPredicate<Integer,Integer>)"], "external_dependencies": {"modules": ["Pair", "Collections", "BiPredicate"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the Pair.allMatch method with two empty iterables."}]}, {"file_path": "src/test/java/net/hydromatic/morel/util/Pair_equalsTest.java", "testclass_name": "Pair_equalsTest", "dependencies": ["package net.hydromatic.morel.util;", "import org.junit.jupiter.api.Test;", "import java.util.AbstractMap;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Pair_equalsTest", "description": "Unit tests for the equals method of the Pair class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testEquals_SameInstance", "primary_tested": ["Pair.equals(Object)"], "external_dependencies": {"modules": ["Pair"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the equals method with the same instance."}, {"name": "testEquals_DifferentInstanceSameValues", "primary_tested": ["Pair.equals(Object)"], "external_dependencies": {"modules": ["Pair"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the equals method with different instances but same values."}, {"name": "testEquals_DifferentInstanceDifferentValues", "primary_tested": ["Pair.equals(Object)"], "external_dependencies": {"modules": ["Pair"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the equals method with different instances and different values."}, {"name": "testEquals_NotInstanceOfMapEntry", "primary_tested": ["Pair.equals(Object)"], "external_dependencies": {"modules": ["Pair"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the equals method with an object that is not an instance of Map.Entry."}, {"name": "testEquals_Null", "primary_tested": ["Pair.equals(Object)"], "external_dependencies": {"modules": ["Pair"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the equals method with a null object."}, {"name": "testEquals_MapEntryWithSameValues", "primary_tested": ["Pair.equals(Object)"], "external_dependencies": {"modules": ["Pair", "AbstractMap.SimpleEntry"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the equals method with a Map.Entry having the same values."}, {"name": "testEquals_MapEntryWithDifferentValues", "primary_tested": ["Pair.equals(Object)"], "external_dependencies": {"modules": ["Pair", "AbstractMap.SimpleEntry"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the equals method with a Map.Entry having different values."}]}, {"file_path": "src/test/java/net/hydromatic/morel/ast/Pos_equalsTest.java", "testclass_name": "Pos_equalsTest", "dependencies": ["package net.hydromatic.morel.ast;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Pos_equalsTest", "description": "Unit tests for the equals method in the Pos class.", "class_members": {"variables": [{"name": "pos1", "type": "Pos"}, {"name": "pos2", "type": "Pos"}, {"name": "pos3", "type": "Pos"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEqualsSameObject", "primary_tested": ["Pos.equals(Object)"], "external_dependencies": {"modules": ["Pos"], "class_members": [{"name": "pos1", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with the same object."}, {"name": "testEqualsDifferentType", "primary_tested": ["Pos.equals(Object)"], "external_dependencies": {"modules": ["Pos"], "class_members": [{"name": "pos1", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with a different type."}, {"name": "testEqualsSameValues", "primary_tested": ["Pos.equals(Object)"], "external_dependencies": {"modules": ["Pos"], "class_members": [{"name": "pos1", "type": "variable"}, {"name": "pos2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with objects having the same values."}, {"name": "testEqualsDifferentValues", "primary_tested": ["Pos.equals(Object)"], "external_dependencies": {"modules": ["Pos"], "class_members": [{"name": "pos1", "type": "variable"}, {"name": "pos3", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with objects having different values."}, {"name": "testEqualsNull", "primary_tested": ["Pos.equals(Object)"], "external_dependencies": {"modules": ["Pos"], "class_members": [{"name": "pos1", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with a null object."}]}, {"file_path": "src/test/java/net/hydromatic/morel/util/Pair_compareToTest.java", "testclass_name": "Pair_compareToTest", "dependencies": ["package net.hydromatic.morel.util;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Pair_compareToTest", "description": "Unit tests for the compareTo method of the Pair class.", "class_members": {"variables": [{"name": "pair1", "type": "Pair<Integer, Integer>"}, {"name": "pair2", "type": "Pair<Integer, Integer>"}, {"name": "pair3", "type": "Pair<Integer, Integer>"}, {"name": "pair4", "type": "Pair<Integer, Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testCompareToEqual", "primary_tested": ["Pair.compareTo(Pair<Integer, Integer>)"], "external_dependencies": {"modules": ["Pair"], "class_members": [{"name": "pair1", "type": "variable"}, {"name": "pair4", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the compareTo method for equality between two Pairs."}, {"name": "testCompareToLeftLess", "primary_tested": ["Pair.compareTo(Pair<Integer, Integer>)"], "external_dependencies": {"modules": ["Pair"], "class_members": [{"name": "pair1", "type": "variable"}, {"name": "pair3", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the compareTo method when the left element of the first Pair is less than the left element of the second Pair."}, {"name": "testCompareToLeftGreater", "primary_tested": ["Pair.compareTo(Pair<Integer, Integer>)"], "external_dependencies": {"modules": ["Pair"], "class_members": [{"name": "pair3", "type": "variable"}, {"name": "pair1", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the compareTo method when the left element of the first Pair is greater than the left element of the second Pair."}, {"name": "testCompareToRightLess", "primary_tested": ["Pair.compareTo(Pair<Integer, Integer>)"], "external_dependencies": {"modules": ["Pair"], "class_members": [{"name": "pair1", "type": "variable"}, {"name": "pair2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the compareTo method when the right element of the first Pair is less than the right element of the second Pair."}, {"name": "testCompareToRightGreater", "primary_tested": ["Pair.compareTo(Pair<Integer, Integer>)"], "external_dependencies": {"modules": ["Pair"], "class_members": [{"name": "pair2", "type": "variable"}, {"name": "pair1", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the compareTo method when the right element of the first Pair is greater than the right element of the second Pair."}]}]