[{"strategy": "retry", "code": "\npackage net.hydromatic.morel.ast;\n\nimport com.google.common.collect.ImmutableList;\nimport net.hydromatic.morel.type.Binding;\nimport net.hydromatic.morel.type.Type;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass FromBuilder_yield_Test {\n\n    @Test\n    void testYield_TUPLE_IDENTITY_Singleton() {\n        FromBuilder builder = new FromBuilder(null, null);\n        Core.Exp exp = new Core.Tuple(Core.Op.TUPLE, ImmutableList.of(new Core.Id(Core.Op.ID, new Core.IdPat(null, \"x\", 0))));\n        builder.yield_(false, ImmutableList.of(new Binding(new Core.IdPat(null, \"x\", 0), null, null, false)), exp);\n        assertEquals(1, builder.steps.size());\n        assertEquals(Integer.MIN_VALUE, builder.removeIfNotLastIndex);\n        assertEquals(Integer.MIN_VALUE, builder.removeIfLastIndex);\n    }\n\n    @Test\n    void testYield_TUPLE_IDENTITY_NonSingleton() {\n        FromBuilder builder = new FromBuilder(null, null);\n        Core.Exp exp = new Core.Tuple(Core.Op.TUPLE, ImmutableList.of(new Core.Id(Core.Op.ID, new Core.IdPat(null, \"x\", 0)), new Core.Id(Core.Op.ID, new Core.IdPat(null, \"y\", 1))));\n        builder.yield_(false, ImmutableList.of(new Binding(new Core.IdPat(null, \"x\", 0), null, null, false), new Binding(new Core.IdPat(null, \"y\", 1), null, null, false)), exp);\n        assertEquals(0, builder.steps.size());\n        assertEquals(Integer.MIN_VALUE, builder.removeIfNotLastIndex);\n        assertEquals(Integer.MIN_VALUE, builder.removeIfLastIndex);\n    }\n\n    @Test\n    void testYield_TUPLE_RENAME_Singleton() {\n        FromBuilder builder = new FromBuilder(null, null);\n        Core.Exp exp = new Core.Tuple(Core.Op.TUPLE, ImmutableList.of(new Core.Id(Core.Op.ID, new Core.IdPat(null, \"y\", 0))));\n        builder.yield_(false, ImmutableList.of(new Binding(new Core.IdPat(null, \"x\", 0), null, null, false)), exp);\n        assertEquals(1, builder.steps.size());\n        assertEquals(Integer.MIN_VALUE, builder.removeIfNotLastIndex);\n        assertEquals(Integer.MIN_VALUE, builder.removeIfLastIndex);\n    }\n\n    @Test\n    void testYield_TUPLE_RENAME_NonSingleton() {\n        FromBuilder builder = new FromBuilder(null, null);\n        Core.Exp exp = new Core.Tuple(Core.Op.TUPLE, ImmutableList.of(new Core.Id(Core.Op.ID, new Core.IdPat(null, \"y\", 0)), new Core.Id(Core.Op.ID, new Core.IdPat(null, \"z\", 1))));\n        builder.yield_(false, ImmutableList.of(new Binding(new Core.IdPat(null, \"x\", 0), null, null, false), new Binding(new Core.IdPat(null, \"y\", 1), null, null, false)), exp);\n        assertEquals(1, builder.steps.size());\n        assertEquals(Integer.MIN_VALUE, builder.removeIfNotLastIndex);\n        assertEquals(Integer.MIN_VALUE, builder.removeIfLastIndex);\n    }\n\n    @Test\n    void testYield_ID_Singleton() {\n        FromBuilder builder = new FromBuilder(null, null);\n        Core.Exp exp = new Core.Id(Core.Op.ID, new Core.IdPat(null, \"x\", 0));\n        builder.yield_(false, ImmutableList.of(new Binding(new Core.IdPat(null, \"x\", 0), null, null, false)), exp);\n        assertEquals(0, builder.steps.size());\n        assertEquals(Integer.MIN_VALUE, builder.removeIfNotLastIndex);\n        assertEquals(Integer.MIN_VALUE, builder.removeIfLastIndex);\n    }\n}\n"}]