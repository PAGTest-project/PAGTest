[{"strategy": "retry", "code": "\npackage net.hydromatic.morel;\n\nimport org.junit.jupiter.api.Test;\nimport java.io.BufferedReader;\nimport java.io.PrintWriter;\nimport java.io.StringReader;\nimport java.io.StringWriter;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.function.Consumer;\n\nimport static org.mockito.Mockito.*;\nimport net.hydromatic.morel.eval.Environment;\nimport net.hydromatic.morel.eval.Session;\nimport net.hydromatic.morel.util.BufferingReader;\n\npublic class Main_runTest {\n\n    @Test\n    public void testRun() {\n        // Given\n        StringReader in = new StringReader(\"input\");\n        StringWriter out = new StringWriter();\n        Map<String, ForeignValue> valueMap = new HashMap<>();\n        Main main = new Main(null, in, out, valueMap, new HashMap<>(), false);\n\n        // Mock dependencies\n        Session session = mock(Session.class);\n        Shell shell = mock(Shell.class);\n        Environment env = mock(Environment.class);\n        Consumer<String> echoLines = mock(Consumer.class);\n        Consumer<String> outLines = mock(Consumer.class);\n\n        when(Environments.env(main.typeSystem, main.session, main.valueMap)).thenReturn(env);\n        when(session.withShell(any(), any(), any())).thenAnswer(invocation -> {\n            Consumer<Session> consumer = invocation.getArgument(2);\n            consumer.accept(session);\n            return null;\n        });\n\n        // When\n        main.run();\n\n        // Then\n        verify(session).withShell(any(Shell.class), any(Consumer.class), any(Consumer.class));\n        verify(shell).run(eq(session), any(BufferingReader.class), eq(echoLines), eq(outLines));\n        verify(main.out).flush();\n    }\n}\n"}]