[{"strategy": "generate", "code": "\npackage net.hydromatic.morel.util;\n\nimport org.junit.jupiter.api.Test;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.function.BiPredicate;\n\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nclass Pair_anyMatchTest {\n\n    @Test\n    void testAnyMatch_True() {\n        List<Integer> ks = Arrays.asList(1, 2, 3);\n        List<Integer> vs = Arrays.asList(1, 2, 3);\n        BiPredicate<Integer, Integer> predicate = (k, v) -> k.equals(v);\n\n        assertTrue(Pair.anyMatch(ks, vs, predicate));\n    }\n\n    @Test\n    void testAnyMatch_False() {\n        List<Integer> ks = Arrays.asList(1, 2, 3);\n        List<Integer> vs = Arrays.asList(4, 5, 6);\n        BiPredicate<Integer, Integer> predicate = (k, v) -> k.equals(v);\n\n        assertFalse(Pair.anyMatch(ks, vs, predicate));\n    }\n\n    @Test\n    void testAnyMatch_DifferentLengths() {\n        List<Integer> ks = Arrays.asList(1, 2, 3);\n        List<Integer> vs = Arrays.asList(1, 2);\n        BiPredicate<Integer, Integer> predicate = (k, v) -> k.equals(v);\n\n        assertTrue(Pair.anyMatch(ks, vs, predicate));\n    }\n\n    @Test\n    void testAnyMatch_EmptyIterables() {\n        List<Integer> ks = Collections.emptyList();\n        List<Integer> vs = Collections.emptyList();\n        BiPredicate<Integer, Integer> predicate = (k, v) -> k.equals(v);\n\n        assertFalse(Pair.anyMatch(ks, vs, predicate));\n    }\n}\n"}]