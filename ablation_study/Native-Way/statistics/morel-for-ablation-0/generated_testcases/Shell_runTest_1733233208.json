[{"strategy": "generate", "code": "\npackage net.hydromatic.morel;\n\nimport org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\nimport java.io.IOException;\nimport java.util.Map;\n\nimport static org.mockito.Mockito.*;\n\npublic class Shell_runTest {\n\n    private Shell shell;\n    private ConfigImpl config;\n    private Terminal terminal;\n\n    @BeforeEach\n    public void setUp() throws IOException {\n        config = mock(ConfigImpl.class);\n        terminal = TerminalBuilder.builder().build();\n        shell = new Shell(config, terminal);\n    }\n\n    @Test\n    public void testRunWithHelp() {\n        when(config.help).thenReturn(true);\n        shell.run();\n        verify(config, times(1)).help();\n        verify(terminal, times(1)).writer();\n    }\n\n    @Test\n    public void testRunWithoutHelp() throws IOException {\n        when(config.help).thenReturn(false);\n        when(config.banner).thenReturn(true);\n        when(config.directory).thenReturn(new java.io.File(\".\"));\n        when(config.valueMap).thenReturn(Map.of());\n        when(config.maxUseDepth).thenReturn(1);\n        when(config.echo).thenReturn(false);\n        shell.run();\n        verify(config, times(1)).help();\n        verify(terminal, times(1)).writer();\n    }\n}\n"}]