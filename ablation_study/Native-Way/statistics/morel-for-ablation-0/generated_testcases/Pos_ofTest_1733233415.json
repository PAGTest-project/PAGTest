[{"strategy": "retry", "code": "\npackage net.hydromatic.morel.ast;\n\nimport org.apache.calcite.util.Pair;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class Pos_ofTest {\n\n    @Test\n    public void testOf_SingleLine() {\n        String ml = \"abc\\ndef\\nghi\";\n        String file = \"testFile\";\n        int startOffset = 4; // 'd' in \"def\"\n        int endOffset = 7;   // 'f' in \"def\"\n\n        Pos pos = Pos.of(ml, file, startOffset, endOffset);\n\n        assertEquals(\"testFile\", pos.file);\n        assertEquals(2, pos.startLine);\n        assertEquals(2, pos.startColumn);\n        assertEquals(2, pos.endLine);\n        assertEquals(4, pos.endColumn);\n    }\n\n    @Test\n    public void testOf_MultiLine() {\n        String ml = \"abc\\ndef\\nghi\";\n        String file = \"testFile\";\n        int startOffset = 4; // 'd' in \"def\"\n        int endOffset = 11;  // 'i' in \"ghi\"\n\n        Pos pos = Pos.of(ml, file, startOffset, endOffset);\n\n        assertEquals(\"testFile\", pos.file);\n        assertEquals(2, pos.startLine);\n        assertEquals(2, pos.startColumn);\n        assertEquals(3, pos.endLine);\n        assertEquals(2, pos.endColumn);\n    }\n\n    @Test\n    public void testOf_SameLine() {\n        String ml = \"abc\\ndef\\nghi\";\n        String file = \"testFile\";\n        int startOffset = 0; // 'a' in \"abc\"\n        int endOffset = 2;   // 'c' in \"abc\"\n\n        Pos pos = Pos.of(ml, file, startOffset, endOffset);\n\n        assertEquals(\"testFile\", pos.file);\n        assertEquals(1, pos.startLine);\n        assertEquals(1, pos.startColumn);\n        assertEquals(1, pos.endLine);\n        assertEquals(3, pos.endColumn);\n    }\n\n    @Test\n    public void testOf_InvalidOffset() {\n        String ml = \"abc\\ndef\\nghi\";\n        String file = \"testFile\";\n        int startOffset = 15; // Out of bounds\n        int endOffset = 20;   // Out of bounds\n\n        assertThrows(IllegalArgumentException.class, () -> {\n            Pos.of(ml, file, startOffset, endOffset);\n        });\n    }\n\n    @Test\n    public void testOf_EmptyString() {\n        String ml = \"\";\n        String file = \"testFile\";\n        int startOffset = 0;\n        int endOffset = 0;\n\n        Pos pos = Pos.of(ml, file, startOffset, endOffset);\n\n        assertEquals(\"testFile\", pos.file);\n        assertEquals(1, pos.startLine);\n        assertEquals(1, pos.startColumn);\n        assertEquals(1, pos.endLine);\n        assertEquals(1, pos.endColumn);\n    }\n}\n"}]