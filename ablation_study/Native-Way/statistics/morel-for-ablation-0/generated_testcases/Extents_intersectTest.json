[{"strategy": "generate", "code": "\npackage net.hydromatic.morel.compile;\n\nimport com.google.common.collect.ImmutableMap;\nimport com.google.common.collect.ImmutableRangeSet;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Map;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nclass Extents_intersectTest {\n\n    @Test\n    void testIntersect_EmptyList() {\n        List<Map<String, ImmutableRangeSet<Integer>>> rangeSetMaps = Arrays.asList();\n        Map<String, ImmutableRangeSet<Integer>> result = Extents.intersect(rangeSetMaps);\n        assertEquals(ImmutableMap.of(), result);\n    }\n\n    @Test\n    void testIntersect_SingleMap() {\n        ImmutableRangeSet<Integer> rangeSet = ImmutableRangeSet.of();\n        Map<String, ImmutableRangeSet<Integer>> singleMap = ImmutableMap.of(\"key\", rangeSet);\n        List<Map<String, ImmutableRangeSet<Integer>>> rangeSetMaps = Arrays.asList(singleMap);\n        Map<String, ImmutableRangeSet<Integer>> result = Extents.intersect(rangeSetMaps);\n        assertEquals(singleMap, result);\n    }\n\n    @Test\n    void testIntersect_MultipleMaps() {\n        ImmutableRangeSet<Integer> rangeSet1 = ImmutableRangeSet.of();\n        ImmutableRangeSet<Integer> rangeSet2 = ImmutableRangeSet.of();\n        Map<String, ImmutableRangeSet<Integer>> map1 = ImmutableMap.of(\"key1\", rangeSet1);\n        Map<String, ImmutableRangeSet<Integer>> map2 = ImmutableMap.of(\"key2\", rangeSet2);\n        List<Map<String, ImmutableRangeSet<Integer>>> rangeSetMaps = Arrays.asList(map1, map2);\n        Map<String, ImmutableRangeSet<Integer>> result = Extents.intersect(rangeSetMaps);\n        assertEquals(2, result.size());\n    }\n}\n"}]