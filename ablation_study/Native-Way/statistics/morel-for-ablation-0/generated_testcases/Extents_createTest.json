[{"strategy": "retry", "code": "\npackage net.hydromatic.morel.compile;\n\nimport net.hydromatic.morel.ast.Core;\nimport net.hydromatic.morel.ast.Op;\nimport net.hydromatic.morel.type.TypeSystem;\nimport net.hydromatic.morel.util.ImmutablePairList;\nimport net.hydromatic.morel.util.Pair;\nimport net.hydromatic.morel.util.PairList;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.SortedMap;\nimport java.util.TreeMap;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nclass Extents_createTest {\n\n    @Test\n    void testCreateWithEmptyFollowingSteps() {\n        TypeSystem typeSystem = new TypeSystem();\n        Core.Pat pat = new Core.Pat(Op.ID_PAT, typeSystem.getType(\"PatType\")) {};\n        SortedMap<Core.NamedPat, Core.Exp> boundPats = new TreeMap<>();\n        Iterable<? extends Core.FromStep> followingSteps = ImmutablePairList.of();\n        PairList<Core.IdPat, Core.Exp> idPats = ImmutablePairList.of();\n\n        Extents.Analysis result = Extents.create(typeSystem, pat, boundPats, followingSteps, idPats);\n\n        assertTrue(result.extentExp.isConstant());\n        assertTrue(result.satisfiedFilters.isEmpty());\n        assertTrue(result.remainingFilters.isEmpty());\n    }\n\n    @Test\n    void testCreateWithNonEmptyFollowingSteps() {\n        TypeSystem typeSystem = new TypeSystem();\n        Core.Pat pat = new Core.Pat(Op.ID_PAT, typeSystem.getType(\"PatType\")) {};\n        SortedMap<Core.NamedPat, Core.Exp> boundPats = new TreeMap<>();\n        Core.FromStep step = new Core.Where(ImmutablePairList.of(), new Core.Exp(null, Op.ID_PAT, typeSystem.getType(\"ExpType\")) {});\n        Iterable<? extends Core.FromStep> followingSteps = ImmutablePairList.of(step);\n        PairList<Core.IdPat, Core.Exp> idPats = ImmutablePairList.of();\n\n        Extents.Analysis result = Extents.create(typeSystem, pat, boundPats, followingSteps, idPats);\n\n        assertTrue(result.extentExp.isConstant());\n        assertTrue(result.satisfiedFilters.isEmpty());\n        assertTrue(result.remainingFilters.isEmpty());\n    }\n\n    @Test\n    void testCreateWithNonEmptyBoundPats() {\n        TypeSystem typeSystem = new TypeSystem();\n        Core.Pat pat = new Core.Pat(Op.ID_PAT, typeSystem.getType(\"PatType\")) {};\n        Core.NamedPat namedPat = new Core.NamedPat(Op.ID_PAT, typeSystem.getType(\"NamedPatType\"), \"name\", 0) {};\n        Core.Exp exp = new Core.Exp(null, Op.ID_PAT, typeSystem.getType(\"ExpType\")) {};\n        SortedMap<Core.NamedPat, Core.Exp> boundPats = new TreeMap<>();\n        boundPats.put(namedPat, exp);\n        Iterable<? extends Core.FromStep> followingSteps = ImmutablePairList.of();\n        PairList<Core.IdPat, Core.Exp> idPats = ImmutablePairList.of();\n\n        Extents.Analysis result = Extents.create(typeSystem, pat, boundPats, followingSteps, idPats);\n\n        assertEquals(exp, result.boundPats.get(namedPat));\n        assertTrue(result.extentExp.isConstant());\n        assertTrue(result.satisfiedFilters.isEmpty());\n        assertTrue(result.remainingFilters.isEmpty());\n    }\n}\n"}]