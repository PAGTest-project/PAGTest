{"file_path": "src/test/java/net/hydromatic/morel/AlgebraTest.java", "testclass_name": "AlgebraTest", "dependencies": ["package net.hydromatic.morel;", "import net.hydromatic.morel.eval.Prop;", "import org.junit.jupiter.api.Test;", "import java.util.function.UnaryOperator;", "import java.util.stream.Stream;", "import static net.hydromatic.morel.Matchers.equalsOrdered;", "import static net.hydromatic.morel.Matchers.equalsUnordered;", "import static net.hydromatic.morel.Matchers.isCode;", "import static net.hydromatic.morel.Matchers.isFullyCalcite;", "import static net.hydromatic.morel.Matchers.list;", "import static net.hydromatic.morel.Ml.ml;", "import static org.hamcrest.core.Is.is;"], "name": "AlgebraTest", "description": "Tests various algebraic operations and queries using the 'scott' JDBC database.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testScott", "primary_tested": ["Ml.ml(String)"], "external_dependencies": {"modules": ["BuiltInDataSet", "Matchers"], "project_specific_resources": ["Matchers.equalsOrdered(int...)"]}, "category": "integration", "description": "Tests a program that uses an external collection from the 'scott' JDBC database."}, {"name": "testScott2", "primary_tested": ["Ml.ml(String)"], "external_dependencies": {"modules": ["BuiltInDataSet", "Matchers"], "project_specific_resources": ["Matchers.equalsOrdered(int...)"]}, "category": "integration", "description": "As previous, but with more concise syntax."}, {"name": "testScottOrder", "primary_tested": ["Ml.ml(String)"], "external_dependencies": {"modules": ["BuiltInDataSet", "Matchers"], "project_specific_resources": ["Matchers.equalsOrdered(List...)"]}, "category": "integration", "description": "Tests ordering and limiting operations on the 'scott' JDBC database."}, {"name": "testScottJoin", "primary_tested": ["Ml.ml(String)"], "external_dependencies": {"modules": ["BuiltInDataSet", "Matchers"], "project_specific_resources": ["Matchers.equalsOrdered(List...)"]}, "category": "integration", "description": "Tests join operations between 'emp' and 'dept' tables in the 'scott' JDBC database."}, {"name": "testScottJoin2", "primary_tested": ["Ml.ml(String)"], "external_dependencies": {"modules": ["BuiltInDataSet", "Matchers"], "project_specific_resources": ["Matchers.equalsOrdered(List...)"]}, "category": "integration", "description": "As testScottJoin() but without intermediate variables."}, {"name": "testScottJoin2Dot", "primary_tested": ["Ml.ml(String)"], "external_dependencies": {"modules": ["BuiltInDataSet", "Matchers"], "project_specific_resources": ["Matchers.equalsOrdered(List...)"]}, "category": "integration", "description": "As testScottJoin2() but using dot notation ('e.field' rather than '#field e')."}, {"name": "testQueryList", "primary_tested": ["Ml.ml(String)"], "external_dependencies": {"modules": ["BuiltInDataSet"]}, "category": "integration", "description": "Tests that Morel gives the same answer with and without Calcite."}, {"name": "testNative", "primary_tested": ["Ml.ml(String)"], "external_dependencies": {"modules": ["BuiltInDataSet"]}, "category": "integration", "description": "Translates a hybrid expression. The leaf cannot be translated to Calcite and therefore becomes a Morel table function; the root can."}, {"name": "testHybridCalciteToMorel", "primary_tested": ["Ml.ml(String)"], "external_dependencies": {"modules": ["BuiltInDataSet", "Matchers"], "project_specific_resources": ["Matchers.equalsOrdered(List...)"]}, "category": "integration", "description": "Tests a query that can mostly be executed in Calcite, but is followed by List.filter, which must be implemented in Morel."}, {"name": "testFullCalcite", "primary_tested": ["Ml.ml(String)"], "external_dependencies": {"modules": ["BuiltInDataSet", "Matchers"], "project_specific_resources": ["Matchers.equalsOrdered(List...)"]}, "category": "integration", "description": "Tests a query that can be fully executed in Calcite."}, {"name": "testFullCalcite2", "primary_tested": ["Ml.ml(String)"], "external_dependencies": {"modules": ["BuiltInDataSet", "Matchers"], "project_specific_resources": ["Matchers.equalsOrdered(List...)"]}, "category": "integration", "description": "As testFullCalcite() but table is via a 'let'."}, {"name": "testFullCalcite3", "primary_tested": ["Ml.ml(String)"], "external_dependencies": {"modules": ["BuiltInDataSet", "Matchers"], "project_specific_resources": ["Matchers.equalsOrdered(List...)"]}, "category": "integration", "description": "As testFullCalcite() but query is a function, and table is passed via an argument."}, {"name": "testCalciteFrom", "primary_tested": ["Ml.ml(String)"], "external_dependencies": {"modules": ["Prop", "Matchers"], "project_specific_resources": ["Matchers.equalsOrdered(List...)"]}, "category": "integration", "description": "Tests a query that is 'from' over no variables. The result has one row and zero columns."}, {"name": "testCalciteWithVariable", "primary_tested": ["Ml.ml(String)"], "external_dependencies": {"modules": ["BuiltInDataSet", "Matchers"], "project_specific_resources": ["Matchers.equalsOrdered(List...)"]}, "category": "integration", "description": "Tests a query that is executed in Calcite except for a variable, 'five', whose value happens to always be '2 + 3'."}, {"name": "testCalciteWithVariableNoInlining", "primary_tested": ["Ml.ml(String)"], "external_dependencies": {"modules": ["BuiltInDataSet", "Matchers"], "project_specific_resources": ["Matchers.equalsOrdered(List...)"]}, "category": "integration", "description": "Tests a query that is executed in Calcite except for a variable, 'five', whose value happens to always be '2 + 3'. No inlining is performed."}, {"name": "testCalciteWithFunction", "primary_tested": ["Ml.ml(String)"], "external_dependencies": {"modules": ["BuiltInDataSet", "Matchers"], "project_specific_resources": ["Matchers.equalsOrdered(int...)"]}, "category": "integration", "description": "Tests a query that is executed in Calcite except for a function, 'twice'."}, {"name": "testCalciteWithHybridFunction", "primary_tested": ["Ml.ml(String)"], "external_dependencies": {"modules": ["BuiltInDataSet", "Matchers"], "project_specific_resources": ["Matchers.equalsOrdered(int...)"]}, "category": "integration", "description": "Tests a query that is executed in Calcite except for a function, 'plus'; one of its arguments comes from a relational record, and another from the Morel environment."}, {"name": "testUnion", "primary_tested": ["Ml.ml(String)"], "external_dependencies": {"modules": ["BuiltInDataSet", "Matchers"], "project_specific_resources": ["Matchers.equalsUnordered(int...)"]}, "category": "integration", "description": "Tests that we can send 'union' to Calcite."}, {"name": "testExcept", "primary_tested": ["Ml.ml(String)"], "external_dependencies": {"modules": ["BuiltInDataSet", "Matchers"], "project_specific_resources": ["Matchers.equalsUnordered(int...)"]}, "category": "integration", "description": "Tests that we can send 'except' to Calcite."}, {"name": "testIntersect", "primary_tested": ["Ml.ml(String)"], "external_dependencies": {"modules": ["BuiltInDataSet", "Matchers"], "project_specific_resources": ["Matchers.equalsUnordered(int...)"]}, "category": "integration", "description": "Tests that we can send 'intersect' to Calcite."}, {"name": "testElem", "primary_tested": ["Ml.ml(String)"], "external_dependencies": {"modules": ["BuiltInDataSet", "Matchers"], "project_specific_resources": ["Matchers.equalsUnordered(String...)"]}, "category": "integration", "description": "Tests that we can send (what in SQL would be) an uncorrelated 'IN' sub-query to Calcite."}, {"name": "testNotElem", "primary_tested": ["Ml.ml(String)"], "external_dependencies": {"modules": ["BuiltInDataSet", "Matchers"], "project_specific_resources": ["Matchers.equalsUnordered(String...)"]}, "category": "integration", "description": "Tests that we can send (what in SQL would be) an uncorrelated 'IN' sub-query to Calcite."}, {"name": "testExists", "primary_tested": ["Ml.ml(String)"], "external_dependencies": {"modules": ["BuiltInDataSet", "Matchers"], "project_specific_resources": ["Matchers.equalsOrdered(int...)"]}, "category": "integration", "description": "Tests that 'exists' is pushed down to Calcite. (There are no correlating variables.)"}, {"name": "testNotExists", "primary_tested": ["Ml.ml(String)"], "external_dependencies": {"modules": ["BuiltInDataSet", "Matchers"], "project_specific_resources": ["Matchers.equalsOrdered(int...)"]}, "category": "integration", "description": "Tests that 'not exists' (uncorrelated), also 'notExists' and 'List.null', is pushed down to Calcite."}, {"name": "testExistsCorrelated", "primary_tested": ["Ml.ml(String)"], "external_dependencies": {"modules": ["BuiltInDataSet", "Matchers"], "project_specific_resources": ["Matchers.equalsOrdered(List...)"]}, "category": "integration", "description": "Tests that correlated 'exists' is pushed down to Calcite."}, {"name": "testCorrelatedListSubQuery", "primary_tested": ["Ml.ml(String)"], "external_dependencies": {"modules": ["BuiltInDataSet", "Matchers"], "project_specific_resources": ["Matchers.equalsOrdered(List...)"]}, "category": "integration", "description": "Tests a query that is executed in Calcite except for a list sub-query."}, {"name": "testCorrelatedScalar", "primary_tested": ["Ml.ml(String)"], "external_dependencies": {"modules": ["BuiltInDataSet", "Matchers"], "project_specific_resources": ["Matchers.equalsOrdered(List...)"]}, "category": "integration", "description": "Tests a query that is executed in Calcite except for a scalar sub-query."}, {"name": "testRecursive", "primary_tested": ["Ml.ml(String)"], "external_dependencies": {"modules": ["BuiltInDataSet", "Matchers"], "project_specific_resources": ["Matchers.equalsOrdered(List...)"]}, "category": "integration", "description": "Tests a recursive query that computes a transitive closure by successive union operations."}, {"name": "testRecursive2", "primary_tested": ["Ml.ml(String)"], "external_dependencies": {"modules": ["BuiltInDataSet", "Matchers"], "project_specific_resources": ["Matchers.equalsOrdered(List...)"]}, "category": "integration", "description": "Similar to testRecursive() but uses the Relatonal.iterate function."}]}