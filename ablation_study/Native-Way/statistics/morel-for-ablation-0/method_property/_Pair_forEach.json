{"target_method": "forEach", "signature": "void forEach(Iterable<K>, Iterable<V>, BiConsumer<K, V>)", "direct_enhancements": [{"method_name": "forEachIndexed(Iterable<? extends K>, Iterable<? extends V>, PairWithOrdinalConsumer<K, V>)", "relation_type": "Behavioral Similarity", "confidence": 0.9, "reason": "Both methods iterate over pairs of items from two iterables, but forEachIndexed includes an ordinal index.", "is_external": false}, {"method_name": "allMatch(Iterable<K>, Iterable<V>, BiPredicate<K, V>)", "relation_type": "Behavioral Similarity", "confidence": 0.85, "reason": "Both methods process pairs of items from two iterables, but allMatch checks if all pairs match a predicate.", "is_external": false}, {"method_name": "anyMatch(Iterable<K>, Iterable<V>, BiPredicate<K, V>)", "relation_type": "Behavioral Similarity", "confidence": 0.85, "reason": "Both methods process pairs of items from two iterables, but anyMatch checks if any pair matches a predicate.", "is_external": false}, {"method_name": "noneMatch(Iterable<K>, Iterable<V>, BiPredicate<K, V>)", "relation_type": "Behavioral Similarity", "confidence": 0.85, "reason": "Both methods process pairs of items from two iterables, but noneMatch checks if no pair matches a predicate.", "is_external": false}, {"method_name": "zip(Iterable<? extends K>, Iterable<? extends V>)", "relation_type": "Structural Similarity", "confidence": 0.8, "reason": "Both methods involve iterating over two collections and processing pairs of elements, but zip creates an iterable of pairs.", "is_external": false}, {"method_name": "toMap(Iterable<Pair<K, V>>)", "relation_type": "Resource Access Similarity", "confidence": 0.75, "reason": "Both methods involve processing collections of pairs, but toMap converts the pairs into a map.", "is_external": false}, {"method_name": "left(Iterable<? extends Map.Entry<L, R>>)", "relation_type": "Resource Access Similarity", "confidence": 0.7, "reason": "Both methods involve processing collections of pairs, but left extracts the left elements from the pairs.", "is_external": false}, {"method_name": "right(Iterable<? extends Map.Entry<L, R>>)", "relation_type": "Resource Access Similarity", "confidence": 0.7, "reason": "Both methods involve processing collections of pairs, but right extracts the right elements from the pairs.", "is_external": false}]}