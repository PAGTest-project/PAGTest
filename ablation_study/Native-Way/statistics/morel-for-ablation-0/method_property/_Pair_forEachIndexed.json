{"target_method": "forEachIndexed", "signature": "void forEachIndexed(Iterable<? extends K>, Iterable<? extends V>, PairWithOrdinalConsumer<K, V>)", "direct_enhancements": [{"method_name": "forEach(Iterable<K>, Iterable<V>, BiConsumer<K, V>)", "relation_type": "Behavioral Similarity", "confidence": 0.95, "reason": "Both methods iterate over pairs of items from two iterables, but forEachIndexed includes an ordinal index.", "is_external": false}, {"method_name": "zip(Iterable<? extends K>, Iterable<? extends V>)", "relation_type": "Structural Similarity", "confidence": 0.85, "reason": "Both methods involve processing pairs of items from two iterables, but zip returns an iterable of pairs instead of consuming them.", "is_external": false}, {"method_name": "allMatch(Iterable<K>, Iterable<V>, BiPredicate<K, V>)", "relation_type": "Behavioral Similarity", "confidence": 0.8, "reason": "Both methods process pairs of items from two iterables, but allMatch checks if all pairs match a predicate.", "is_external": false}, {"method_name": "anyMatch(Iterable<K>, Iterable<V>, BiPredicate<K, V>)", "relation_type": "Behavioral Similarity", "confidence": 0.8, "reason": "Both methods process pairs of items from two iterables, but anyMatch checks if any pair matches a predicate.", "is_external": false}, {"method_name": "noneMatch(Iterable<K>, Iterable<V>, BiPredicate<K, V>)", "relation_type": "Behavioral Similarity", "confidence": 0.8, "reason": "Both methods process pairs of items from two iterables, but noneMatch checks if no pair matches a predicate.", "is_external": false}, {"method_name": "toMap(Iterable<Pair<K, V>>)", "relation_type": "Resource Access Similarity", "confidence": 0.75, "reason": "Both methods involve processing collections of pairs, but toMap converts pairs into a map.", "is_external": false}, {"method_name": "zip(List<K>, List<V>)", "relation_type": "Structural Similarity", "confidence": 0.85, "reason": "Both methods involve processing pairs of items from two lists, but zip returns a list of pairs instead of consuming them.", "is_external": false}, {"method_name": "zipMutable(List<K>, List<V>)", "relation_type": "Structural Similarity", "confidence": 0.8, "reason": "Both methods involve processing pairs of items from two lists, but zipMutable returns a mutable list of pairs.", "is_external": false}]}