[{"strategy": "retry", "code": "\npackage org.ice4j.pseudotcp;\n\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\nclass PseudoTCPBase_connectTest {\n\n    @Test\n    void testConnect_InvalidState() {\n        PseudoTCPBase pseudoTCPBase = new PseudoTCPBase(null, 0);\n        pseudoTCPBase.m_state = PseudoTcpState.TCP_ESTABLISHED;\n\n        IOException exception = assertThrows(IOException.class, pseudoTCPBase::connect);\n        assertEquals(\"Invalid socket state: TCP_ESTABLISHED\", exception.getMessage());\n    }\n\n    @Test\n    void testConnect_ValidState() throws IOException {\n        PseudoTCPBase pseudoTCPBase = new PseudoTCPBase(null, 0);\n        pseudoTCPBase.m_state = PseudoTcpState.TCP_LISTEN;\n\n        Logger logger = mock(Logger.class);\n        pseudoTCPBase.logger = logger;\n\n        pseudoTCPBase.connect();\n\n        assertEquals(PseudoTcpState.TCP_SYN_SENT, pseudoTCPBase.m_state);\n        verify(logger).log(eq(Level.FINE), eq(\"State: TCP_SYN_SENT\"), anyString());\n        verify(pseudoTCPBase, times(1)).queueConnectMessage();\n        verify(pseudoTCPBase, times(1)).attemptSend(SendFlags.sfNone);\n    }\n}\n"}]