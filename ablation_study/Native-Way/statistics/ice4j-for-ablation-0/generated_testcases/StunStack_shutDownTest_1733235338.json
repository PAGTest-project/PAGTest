[{"strategy": "retry", "code": "\npackage org.ice4j.stack;\n\nimport org.ice4j.*;\nimport org.ice4j.message.*;\nimport org.ice4j.socket.*;\nimport org.junit.jupiter.api.*;\nimport java.net.*;\nimport java.util.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StunStack_shutDownTest {\n    private StunStack stunStack;\n    private TransportAddress clientAddress;\n    private TransportAddress serverAddress;\n    private IceSocketWrapper clientSock;\n    private IceSocketWrapper serverSock;\n    private Request bindingRequest;\n    private Response bindingResponse;\n    private RequestCollector requestCollector;\n    private ResponseCollector responseCollector;\n\n    @BeforeEach\n    public void setUp() throws Exception {\n        clientSock = new IceUdpSocketWrapper(\n            new SafeCloseDatagramSocket(new InetSocketAddress(\"127.0.0.1\", 0)));\n        serverSock = new IceUdpSocketWrapper(\n            new SafeCloseDatagramSocket(new InetSocketAddress(\"127.0.0.1\", 0)));\n\n        clientAddress = new TransportAddress(\"127.0.0.1\", clientSock.getLocalPort(), Transport.UDP);\n        serverAddress = new TransportAddress(\"127.0.0.1\", serverSock.getLocalPort(), Transport.UDP);\n\n        stunStack = new StunStack();\n        stunStack.addSocket(clientSock);\n        stunStack.addSocket(serverSock);\n\n        bindingRequest = MessageFactory.createBindingRequest();\n        bindingResponse = MessageFactory.create3489BindingResponse(\n            clientAddress, clientAddress, serverAddress);\n\n        requestCollector = new RequestCollector();\n        responseCollector = new ResponseCollector();\n\n        System.setProperty(\n                StackProperties.PROPAGATE_RECEIVED_RETRANSMISSIONS,\n                \"false\");\n        System.setProperty(\n                StackProperties.KEEP_CRANS_AFTER_A_RESPONSE,\n                \"false\");\n        System.setProperty(\n                StackProperties.MAX_CTRAN_RETRANSMISSIONS,\n                \"\");\n        System.setProperty(\n                StackProperties.MAX_CTRAN_RETRANS_TIMER,\n                \"\");\n        System.setProperty(\n                StackProperties.FIRST_CTRAN_RETRANS_AFTER,\n                \"\");\n    }\n\n    @Test\n    public void testShutDown() throws Exception {\n        // Prepare to listen\n        stunStack.addRequestListener(serverAddress, requestCollector);\n        // Send a request to populate clientTransactions and serverTransactions\n        stunStack.sendRequest(bindingRequest, serverAddress, clientAddress, responseCollector);\n        // Wait for the message to arrive\n        requestCollector.waitForRequest();\n\n        // Call shutDown method\n        stunStack.shutDown();\n\n        // Verify that clientTransactions and serverTransactions are cleared\n        assertTrue(stunStack.getClientTransactions().isEmpty());\n        assertTrue(stunStack.getServerTransactions().isEmpty());\n\n        // Verify that netAccessManager is stopped\n        assertFalse(stunStack.isNetAccessManagerRunning());\n    }\n}\n"}]