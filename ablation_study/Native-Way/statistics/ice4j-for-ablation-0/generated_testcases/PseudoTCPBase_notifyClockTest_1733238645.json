[{"strategy": "retry", "code": "\npackage org.ice4j.pseudotcp;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\nclass PseudoTCPBase_notifyClockTest {\n\n    @Test\n    void testNotifyClock_TCP_CLOSED() {\n        PseudoTCPBase pseudoTCPBase = new PseudoTCPBase(null, 0);\n        pseudoTCPBase.m_state = PseudoTcpState.TCP_CLOSED;\n\n        pseudoTCPBase.notifyClock(1000);\n\n        // No action should be taken when state is TCP_CLOSED\n        assertEquals(PseudoTcpState.TCP_CLOSED, pseudoTCPBase.m_state);\n    }\n\n    @Test\n    void testNotifyClock_RetransmitSegment() {\n        PseudoTCPBase pseudoTCPBase = new PseudoTCPBase(null, 0);\n        pseudoTCPBase.m_state = PseudoTcpState.TCP_ESTABLISHED;\n        pseudoTCPBase.m_rto_base = 1000;\n        pseudoTCPBase.m_rx_rto = 2000;\n        pseudoTCPBase.m_slist.add(new SSegment(1000, 100, false));\n\n        pseudoTCPBase.notifyClock(4000);\n\n        // Verify retransmission logic\n        assertEquals(4000, pseudoTCPBase.m_rto_base);\n    }\n\n    @Test\n    void testNotifyClock_ProbeClosedWindows() {\n        PseudoTCPBase pseudoTCPBase = new PseudoTCPBase(null, 0);\n        pseudoTCPBase.m_state = PseudoTcpState.TCP_ESTABLISHED;\n        pseudoTCPBase.m_lastsend = 1000;\n        pseudoTCPBase.m_rx_rto = 2000;\n        pseudoTCPBase.m_lastrecv = 0;\n        pseudoTCPBase.setM_snd_wnd(0);\n\n        pseudoTCPBase.notifyClock(4000);\n\n        // Verify window probing logic\n        assertEquals(4000, pseudoTCPBase.m_lastsend);\n    }\n\n    @Test\n    void testNotifyClock_SendDelayedAcks() {\n        PseudoTCPBase pseudoTCPBase = new PseudoTCPBase(null, 0);\n        pseudoTCPBase.m_state = PseudoTcpState.TCP_ESTABLISHED;\n        pseudoTCPBase.m_t_ack = 1000;\n        pseudoTCPBase.m_ack_delay = 2000;\n\n        pseudoTCPBase.notifyClock(4000);\n\n        // Verify delayed ACK logic\n        assertEquals(0, pseudoTCPBase.m_t_ack);\n    }\n\n    @Test\n    void testNotifyClock_IdleTimeout() {\n        PseudoTCPBase pseudoTCPBase = new PseudoTCPBase(null, 0);\n        pseudoTCPBase.m_state = PseudoTcpState.TCP_ESTABLISHED;\n        pseudoTCPBase.m_lastrecv = 1000;\n        pseudoTCPBase.m_bOutgoing = true;\n\n        pseudoTCPBase.notifyClock(91000);\n\n        // Verify idle timeout logic\n        assertEquals(PseudoTcpState.TCP_CLOSED, pseudoTCPBase.m_state);\n    }\n}\n"}]