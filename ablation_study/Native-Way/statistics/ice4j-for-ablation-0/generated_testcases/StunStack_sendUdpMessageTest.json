[{"strategy": "retry", "code": "\npackage org.ice4j.stack;\n\nimport org.ice4j.*;\nimport org.ice4j.message.*;\nimport org.ice4j.socket.*;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.io.IOException;\nimport java.net.*;\n\npublic class StunStack_sendUdpMessageTest {\n    private StunStack stunStack;\n    private TransportAddress clientAddress;\n    private TransportAddress serverAddress;\n    private RawMessage udpMessage;\n\n    @BeforeEach\n    public void setUp() throws Exception {\n        stunStack = new StunStack();\n\n        DatagramSocket clientSocket = new DatagramSocket(new InetSocketAddress(\"127.0.0.1\", 0));\n        DatagramSocket serverSocket = new DatagramSocket(new InetSocketAddress(\"127.0.0.1\", 0));\n\n        clientAddress = new TransportAddress(\"127.0.0.1\", clientSocket.getLocalPort(), Transport.UDP);\n        serverAddress = new TransportAddress(\"127.0.0.1\", serverSocket.getLocalPort(), Transport.UDP);\n\n        byte[] messageBytes = new byte[]{0x00, 0x01, 0x00, 0x08, 0x21, 0x12, (byte) 0xa4, 0x42, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08};\n        udpMessage = new RawMessage(messageBytes, messageBytes.length, serverAddress, clientAddress);\n    }\n\n    @Test\n    public void testSendUdpMessageSuccess() throws StunException {\n        assertDoesNotThrow(() -> stunStack.sendUdpMessage(udpMessage, serverAddress, clientAddress));\n    }\n\n    @Test\n    public void testSendUdpMessageIllegalArgumentException() {\n        udpMessage = new RawMessage(new byte[0], 0, serverAddress, clientAddress);\n        StunException exception = assertThrows(StunException.class, () -> stunStack.sendUdpMessage(udpMessage, serverAddress, clientAddress));\n        assertEquals(StunException.ILLEGAL_ARGUMENT, exception.getID());\n    }\n\n    @Test\n    public void testSendUdpMessageIOException() {\n        udpMessage = new RawMessage(new byte[]{0x00, 0x01, 0x00, 0x08, 0x21, 0x12, (byte) 0xa4, 0x42, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08}, 16, serverAddress, null);\n        StunException exception = assertThrows(StunException.class, () -> stunStack.sendUdpMessage(udpMessage, serverAddress, clientAddress));\n        assertEquals(StunException.NETWORK_ERROR, exception.getID());\n    }\n}\n"}]