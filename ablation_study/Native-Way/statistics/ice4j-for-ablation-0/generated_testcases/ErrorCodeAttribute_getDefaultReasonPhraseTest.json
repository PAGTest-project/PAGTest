[{"strategy": "generate", "code": "\npackage org.ice4j.attribute;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.*;\n\npublic class ErrorCodeAttribute_getDefaultReasonPhraseTest {\n\n    @Test\n    public void testGetDefaultReasonPhrase_TryAlternate() {\n        char errorCode = ErrorCodeAttribute.TRY_ALTERNATE;\n        String expected = \"(Try Alternate): The server would like the client to\"\n                + \" use the server specified in the ALTERNATE-SERVER\"\n                + \" attribute instead.\";\n        assertEquals(expected, ErrorCodeAttribute.getDefaultReasonPhrase(errorCode));\n    }\n\n    @Test\n    public void testGetDefaultReasonPhrase_BadRequest() {\n        char errorCode = ErrorCodeAttribute.BAD_REQUEST;\n        String expected = \"(Bad Request): The request was malformed.  The client\"\n                + \" should not retry the request without modification from\"\n                + \" the previous attempt.\";\n        assertEquals(expected, ErrorCodeAttribute.getDefaultReasonPhrase(errorCode));\n    }\n\n    @Test\n    public void testGetDefaultReasonPhrase_Unauthorized() {\n        char errorCode = ErrorCodeAttribute.UNAUTHORIZED;\n        String expected = \"(Unauthorized): The Binding Request did not contain\"\n                + \" a MESSAGE-INTEGRITY attribute.\";\n        assertEquals(expected, ErrorCodeAttribute.getDefaultReasonPhrase(errorCode));\n    }\n\n    @Test\n    public void testGetDefaultReasonPhrase_Forbidden() {\n        char errorCode = ErrorCodeAttribute.FORBIDDEN;\n        String expected = \"(Forbidden): The request was valid but cannot be\"\n                + \" performed due to administrative or similar\"\n                + \" restrictions.\";\n        assertEquals(expected, ErrorCodeAttribute.getDefaultReasonPhrase(errorCode));\n    }\n\n    @Test\n    public void testGetDefaultReasonPhrase_UnknownAttribute() {\n        char errorCode = ErrorCodeAttribute.UNKNOWN_ATTRIBUTE;\n        String expected = \"(Unknown Attribute): The server did not understand\"\n                + \" a mandatory attribute in the request.\";\n        assertEquals(expected, ErrorCodeAttribute.getDefaultReasonPhrase(errorCode));\n    }\n\n    @Test\n    public void testGetDefaultReasonPhrase_StaleCredentials() {\n        char errorCode = ErrorCodeAttribute.STALE_CREDENTIALS;\n        String expected = \"(Stale Credentials): The Binding Request did contain\"\n                + \" a MESSAGE-INTEGRITY attribute, but it used a shared\"\n                + \" secret that has expired.\";\n        assertEquals(expected, ErrorCodeAttribute.getDefaultReasonPhrase(errorCode));\n    }\n\n    @Test\n    public void testGetDefaultReasonPhrase_IntegrityCheckFailure() {\n        char errorCode = ErrorCodeAttribute.INTEGRITY_CHECK_FAILURE;\n        String expected = \"(Integrity Check Failure): The Binding Request\"\n                + \" contained a MESSAGE-INTEGRITY attribute, but the HMAC\"\n                + \" failed verification.\";\n        assertEquals(expected, ErrorCodeAttribute.getDefaultReasonPhrase(errorCode));\n    }\n\n    @Test\n    public void testGetDefaultReasonPhrase_MissingUsername() {\n        char errorCode = ErrorCodeAttribute.MISSING_USERNAME;\n        String expected = \"(Missing Username): The Binding Request contained\"\n                + \" a MESSAGE-INTEGRITY attribute, but not a USERNAME\"\n                + \" attribute.\";\n        assertEquals(expected, ErrorCodeAttribute.getDefaultReasonPhrase(errorCode));\n    }\n\n    @Test\n    public void testGetDefaultReasonPhrase_UseTLS() {\n        char errorCode = ErrorCodeAttribute.USE_TLS;\n        String expected = \"(Use TLS): The Shared Secret request has to be sent\"\n                + \" over TLS, but was not received over TLS.\";\n        assertEquals(expected, ErrorCodeAttribute.getDefaultReasonPhrase(errorCode));\n    }\n\n    @Test\n    public void testGetDefaultReasonPhrase_AllocationMismatch() {\n        char errorCode = ErrorCodeAttribute.ALLOCATION_MISMATCH;\n        String expected = \"(Allocation Mismatch): A request was received by the\"\n                + \" server that requires an allocation to be in place,\"\n                + \" but no allocation exists, or a request was received\"\n                + \" that requires no allocation, but an allocation exists.\";\n        assertEquals(expected, ErrorCodeAttribute.getDefaultReasonPhrase(errorCode));\n    }\n\n    @Test\n    public void testGetDefaultReasonPhrase_StaleNonce() {\n        char errorCode = ErrorCodeAttribute.STALE_NONCE;\n        String expected = \"(Stale Nonce): See the procedures for the long-term\"\n                + \" credential mechanism.\";\n        assertEquals(expected, ErrorCodeAttribute.getDefaultReasonPhrase(errorCode));\n    }\n\n    @Test\n    public void testGetDefaultReasonPhrase_AddressFamilyNotSupported() {\n        char errorCode = ErrorCodeAttribute.ADDRESS_FAMILY_NOT_SUPPORTED;\n        String expected = \"(Address Family not Supported):  The server does not\"\n                + \" support the address family requested by the client.\";\n        assertEquals(expected, ErrorCodeAttribute.getDefaultReasonPhrase(errorCode));\n    }\n\n    @Test\n    public void testGetDefaultReasonPhrase_WrongCredentials() {\n        char errorCode = ErrorCodeAttribute.WRONG_CREDENTIALS;\n        String expected = \"(Wrong Credentials): The credentials in the\"\n                + \" (non-Allocate) request do not match those used\"\n                + \" to create the allocation.\";\n        assertEquals(expected, ErrorCodeAttribute.getDefaultReasonPhrase(errorCode));\n    }\n\n    @Test\n    public void testGetDefaultReasonPhrase_UnsupportedTransportProtocol() {\n        char errorCode = ErrorCodeAttribute.UNSUPPORTED_TRANSPORT_PROTOCOL;\n        String expected = \"(Unsupported Transport Protocol): The Allocate request\"\n                + \" asked the server to use a transport protocol between\"\n                + \" the server and the peer that the server does not\"\n                + \" support.\";\n        assertEquals(expected, ErrorCodeAttribute.getDefaultReasonPhrase(errorCode));\n    }\n\n    @Test\n    public void testGetDefaultReasonPhrase_PeerAddressFamilyMismatch() {\n        char errorCode = ErrorCodeAttribute.PEER_ADDRESS_FAMILY_MISMATCH;\n        String expected = \"Peer Address Family Mismatch):  A peer address was of\"\n                + \" a different address family than that of the relayed\"\n                + \" transport address of the allocation.\";\n        assertEquals(expected, ErrorCodeAttribute.getDefaultReasonPhrase(errorCode));\n    }\n\n    @Test\n    public void testGetDefaultReasonPhrase_ConnectionAlreadyExists() {\n        char errorCode = ErrorCodeAttribute.CONNECTION_ALREADY_EXISTS;\n        String expected = \"Connection Already Exists\";\n        assertEquals(expected, ErrorCodeAttribute.getDefaultReasonPhrase(errorCode));\n    }\n\n    @Test\n    public void testGetDefaultReasonPhrase_ConnectionTimeoutOrFailure() {\n        char errorCode = ErrorCodeAttribute.CONNECTION_TIMEOUT_OR_FAILURE;\n        String expected = \"Connection Timeout or Failure\";\n        assertEquals(expected, ErrorCodeAttribute.getDefaultReasonPhrase(errorCode));\n    }\n\n    @Test\n    public void testGetDefaultReasonPhrase_AllocationQuotaReached() {\n        char errorCode = ErrorCodeAttribute.ALLOCATION_QUOTA_REACHED;\n        String expected = \"(Allocation Quota Reached): No more allocations using\"\n                + \" this username can be created at the present time.\";\n        assertEquals(expected, ErrorCodeAttribute.getDefaultReasonPhrase(errorCode));\n    }\n\n    @Test\n    public void testGetDefaultReasonPhrase_ServerError() {\n        char errorCode = ErrorCodeAttribute.SERVER_ERROR;\n        String expected = \"(Server Error): The server has suffered a temporary\"\n                + \" error. The client should try again.\";\n        assertEquals(expected, ErrorCodeAttribute.getDefaultReasonPhrase(errorCode));\n    }\n\n    @Test\n    public void testGetDefaultReasonPhrase_InsufficientCapacity() {\n        char errorCode = ErrorCodeAttribute.INSUFFICIENT_CAPACITY;\n        String expected = \"(Insufficient Capacity): The server is unable to carry\"\n                + \" out the request due to some capacity limit being\"\n                + \" reached.\";\n        assertEquals(expected, ErrorCodeAttribute.getDefaultReasonPhrase(errorCode));\n    }\n\n    @Test\n    public void testGetDefaultReasonPhrase_GlobalFailure() {\n        char errorCode = ErrorCodeAttribute.GLOBAL_FAILURE;\n        String expected = \"(Global Failure:) The server is refusing to fulfill\"\n                + \" the request. The client should not retry.\";\n        assertEquals(expected, ErrorCodeAttribute.getDefaultReasonPhrase(errorCode));\n    }\n\n    @Test\n    public void testGetDefaultReasonPhrase_UnknownError() {\n        char errorCode = 999; // An unknown error code\n        String expected = \"Unknown Error\";\n        assertEquals(expected, ErrorCodeAttribute.getDefaultReasonPhrase(errorCode));\n    }\n}\n"}]