[{"strategy": "retry", "code": "\npackage org.ice4j.stack;\n\nimport org.ice4j.*;\nimport org.ice4j.message.*;\nimport org.ice4j.socket.*;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.net.InetSocketAddress;\n\npublic class StunStack_cancelTransactionTest {\n    private StunStack stunStack;\n    private TransportAddress clientAddress;\n    private TransportAddress serverAddress;\n    private Request bindingRequest;\n    private Response bindingResponse;\n    private ResponseCollector requestCollector;\n    private ResponseCollector responseCollector;\n\n    @BeforeEach\n    public void setUp() throws Exception {\n        stunStack = new StunStack();\n\n        IceUdpSocketWrapper clientSock = new IceUdpSocketWrapper(\n            new SafeCloseDatagramSocket(new InetSocketAddress(\"127.0.0.1\", 0)));\n        IceUdpSocketWrapper serverSock = new IceUdpSocketWrapper(\n            new SafeCloseDatagramSocket(new InetSocketAddress(\"127.0.0.1\", 0)));\n\n        clientAddress = new TransportAddress(\"127.0.0.1\", clientSock.getLocalPort(), Transport.UDP);\n        serverAddress = new TransportAddress(\"127.0.0.1\", serverSock.getLocalPort(), Transport.UDP);\n\n        stunStack.addSocket(clientSock);\n        stunStack.addSocket(serverSock);\n\n        bindingRequest = MessageFactory.createBindingRequest();\n        bindingResponse = MessageFactory.create3489BindingResponse(\n            clientAddress, clientAddress, serverAddress);\n\n        requestCollector = new ResponseCollector() {\n            @Override\n            public void processResponse(ResponseEvent responseEvent) {\n                // Do nothing\n            }\n\n            @Override\n            public void processTimeout(StunTimeoutEvent timeoutEvent) {\n                // Do nothing\n            }\n        };\n        responseCollector = new ResponseCollector() {\n            @Override\n            public void processResponse(ResponseEvent responseEvent) {\n                // Do nothing\n            }\n\n            @Override\n            public void processTimeout(StunTimeoutEvent timeoutEvent) {\n                // Do nothing\n            }\n        };\n    }\n\n    @Test\n    public void testCancelTransaction() throws Exception {\n        // Send a request to create a transaction\n        TransactionID transactionID = stunStack.sendRequest(\n            bindingRequest, serverAddress, clientAddress, responseCollector);\n\n        // Ensure the transaction is created\n        StunClientTransaction clientTransaction = stunStack.getClientTransaction(transactionID.getBytes());\n        assertNotNull(clientTransaction, \"Transaction should be created\");\n\n        // Cancel the transaction\n        stunStack.cancelTransaction(transactionID);\n\n        // Ensure the transaction is canceled\n        clientTransaction = stunStack.getClientTransaction(transactionID.getBytes());\n        assertNull(clientTransaction, \"Transaction should be canceled\");\n    }\n\n    @Test\n    public void testCancelNonExistentTransaction() {\n        // Create a non-existent transaction ID\n        TransactionID nonExistentTransactionID = TransactionID.createNewTransactionID();\n\n        // Cancel the non-existent transaction\n        stunStack.cancelTransaction(nonExistentTransactionID);\n\n        // Ensure no exception is thrown and no transaction is canceled\n        StunClientTransaction clientTransaction = stunStack.getClientTransaction(nonExistentTransactionID.getBytes());\n        assertNull(clientTransaction, \"No transaction should be canceled\");\n    }\n}\n"}]