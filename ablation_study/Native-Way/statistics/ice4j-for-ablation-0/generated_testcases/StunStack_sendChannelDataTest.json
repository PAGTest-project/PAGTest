[{"strategy": "retry", "code": "\npackage org.ice4j.stack;\n\nimport org.ice4j.*;\nimport org.ice4j.attribute.*;\nimport org.ice4j.message.*;\nimport org.ice4j.security.*;\nimport org.ice4j.socket.*;\nimport org.jitsi.utils.concurrent.*;\nimport javax.crypto.*;\nimport java.io.*;\nimport java.net.*;\nimport java.security.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.logging.*;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StunStack_sendChannelDataTest {\n    private StunStack stunStack;\n    private TransportAddress clientAddress;\n    private TransportAddress serverAddress;\n    private ChannelData channelData;\n\n    @BeforeEach\n    public void setUp() throws Exception {\n        stunStack = new StunStack();\n\n        clientAddress = new TransportAddress(\"127.0.0.1\", 0, Transport.UDP);\n        serverAddress = new TransportAddress(\"127.0.0.1\", 0, Transport.UDP);\n\n        channelData = new ChannelData(new byte[]{0x01, 0x02, 0x03, 0x04});\n    }\n\n    @Test\n    public void testSendChannelDataSuccess() throws Exception {\n        assertDoesNotThrow(() -> {\n            stunStack.sendChannelData(channelData, serverAddress, clientAddress);\n        });\n    }\n\n    @Test\n    public void testSendChannelDataIllegalArgumentException() {\n        assertThrows(StunException.class, () -> {\n            stunStack.sendChannelData(null, serverAddress, clientAddress);\n        });\n    }\n\n    @Test\n    public void testSendChannelDataIOException() {\n        assertThrows(StunException.class, () -> {\n            stunStack.sendChannelData(channelData, null, clientAddress);\n        });\n    }\n}\n"}]