{"file_path": "src/test/java/org/apache/commons/collections4/multiset/PredicatedMultiSetTest.java", "testclass_name": "PredicatedMultiSetTest", "dependencies": ["package org.apache.commons.collections4.multiset;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Set;", "import org.apache.commons.collections4.MultiSet;", "import org.apache.commons.collections4.Predicate;", "import org.apache.commons.collections4.functors.TruePredicate;", "import org.junit.jupiter.api.Test;"], "name": "PredicatedMultiSetTest", "description": "Tests for the PredicatedMultiSet class, focusing on predicate validation and element management.", "class_members": {"variables": [{"name": "truePredicate", "type": "Predicate<T>"}], "methods": [{"name": "decorateMultiSet", "signature": "protected MultiSet<T> decorateMultiSet(HashMultiSet<T> multiset, Predicate<T> predicate)"}, {"name": "makeTestMultiSet", "signature": "protected MultiSet<T> makeTestMultiSet()"}, {"name": "stringPredicate", "signature": "protected Predicate<T> stringPredicate()"}]}, "fixtures": [], "test_cases": [{"name": "testIllegalAdd", "primary_tested": ["MultiSet.add(T)"], "associated_methods": ["MultiSet.contains(Object)"], "external_dependencies": {"modules": ["MultiSet", "Integer"], "class_members": [{"name": "makeTestMultiSet", "type": "method"}]}, "category": "unit", "description": "Tests that adding an illegal element (non-string) to the MultiSet throws an IllegalArgumentException."}, {"name": "testIllegalDecorate", "primary_tested": ["PredicatedMultiSet.predicatedMultiSet(HashMultiSet<T>, Predicate<T>)"], "associated_methods": [], "external_dependencies": {"modules": ["HashMultiSet", "Integer"], "class_members": [{"name": "decorateMultiSet", "type": "method"}, {"name": "stringPredicate", "type": "method"}]}, "category": "unit", "description": "Tests that decorating a MultiSet with an illegal element throws an IllegalArgumentException and that decorating with a null predicate throws a NullPointerException."}, {"name": "testLegalAddRemove", "primary_tested": ["MultiSet.add(T)", "MultiSet.remove(Object)"], "associated_methods": ["MultiSet.size()", "MultiSet.contains(Object)", "PredicatedMultiSet.uniqueSet()"], "external_dependencies": {"modules": ["MultiSet", "PredicatedMultiSet", "Set"], "class_members": [{"name": "makeTestMultiSet", "type": "method"}]}, "category": "unit", "description": "Tests the legal addition and removal of elements from the MultiSet, ensuring the unique set is updated correctly."}]}