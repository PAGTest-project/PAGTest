{"file_path": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java", "testclass_name": "ListUtilsTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertInstanceOf;", "import static org.junit.jupiter.api.Assertions.assertNotEquals;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.Collections;", "import java.util.HashSet;", "import java.util.List;", "import org.apache.commons.collections4.functors.EqualPredicate;", "import org.apache.commons.collections4.list.PredicatedList;", "import org.apache.commons.lang3.StringUtils;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ListUtilsTest", "description": "Unit tests for various utility methods in the ListUtils class.", "class_members": {"variables": [{"name": "a", "type": "static final String"}, {"name": "b", "type": "static final String"}, {"name": "c", "type": "static final String"}, {"name": "d", "type": "static final String"}, {"name": "e", "type": "static final String"}, {"name": "x", "type": "static final String"}, {"name": "EQUALS_TWO", "type": "static final Predicate<Number>"}, {"name": "fullArray", "type": "String[]"}, {"name": "fullList", "type": "List<String>"}], "methods": [], "nested_classes": []}, "fixtures": ["setUp"], "test_cases": [{"name": "testDefaultIfNull", "primary_tested": ["ListUtils.defaultIfNull(List,List)"], "external_dependencies": {"modules": ["ListUtils", "Collections"], "class_members": [{"name": "fullList", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the defaultIfNull method of ListUtils."}, {"name": "testEmptyIfNull", "primary_tested": ["ListUtils.emptyIfNull(List)"], "external_dependencies": {"modules": ["ListUtils", "Collections"], "class_members": [{"name": "fullList", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the emptyIfNull method of ListUtils."}, {"name": "testEquals", "primary_tested": ["ListUtils.isEqualList(List,List)"], "external_dependencies": {"modules": ["ListUtils", "Collections", "Arrays"], "class_members": [{"name": "fullList", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the isEqualList method of ListUtils."}, {"name": "testGetFirst", "primary_tested": ["ListUtils.getFirst(List)"], "external_dependencies": {"modules": ["ListUtils", "Collections"], "class_members": [{"name": "fullList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getFirst method of ListUtils."}, {"name": "testGetLast", "primary_tested": ["ListUtils.getLast(List)"], "external_dependencies": {"modules": ["ListUtils", "Collections"], "class_members": [{"name": "fullList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getLast method of ListUtils."}, {"name": "testHashCode", "primary_tested": ["ListUtils.hashCodeForList(List)"], "external_dependencies": {"modules": ["ListUtils", "Collections", "Arrays"], "class_members": [{"name": "fullList", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the hashCodeForList method of ListUtils."}, {"name": "testIndexOf", "primary_tested": ["ListUtils.indexOf(List,Predicate)"], "external_dependencies": {"modules": ["ListUtils", "EqualPredicate"], "class_members": [{"name": "fullList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the indexOf method of ListUtils."}, {"name": "testIntersectEmptyWithEmptyList", "primary_tested": ["ListUtils.intersection(List,List)"], "external_dependencies": {"modules": ["ListUtils", "Collections"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests intersecting an empty list with another empty list."}, {"name": "testIntersectionOrderInsensitivity", "primary_tested": ["ListUtils.intersection(List,List)"], "external_dependencies": {"modules": ["ListUtils", "Collections"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests intersecting two lists in different orders."}, {"name": "testIntersectListWithNoOverlapAndDifferentTypes", "primary_tested": ["ListUtils.intersection(List,List)"], "external_dependencies": {"modules": ["ListUtils", "Collections", "Arrays"], "class_members": [{"name": "fullList", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests intersecting a list with no overlap and different types."}, {"name": "testIntersectListWithSelf", "primary_tested": ["ListUtils.intersection(List,List)"], "external_dependencies": {"modules": ["ListUtils", "Collections"], "class_members": [{"name": "fullList", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests intersecting a list with itself."}, {"name": "testIntersectNonEmptySubset", "primary_tested": ["ListUtils.intersection(List,List)"], "external_dependencies": {"modules": ["ListUtils", "Collections"], "class_members": [{"name": "fullList", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests intersecting a list with a non-empty subset."}, {"name": "testIntersectNonEmptyWithEmptyList", "primary_tested": ["ListUtils.intersection(List,List)"], "external_dependencies": {"modules": ["ListUtils", "Collections"], "class_members": [{"name": "fullList", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests intersecting a non-empty list with an empty list."}, {"name": "testLazyFactoryList", "primary_tested": ["ListUtils.lazyList(List,Factory)"], "external_dependencies": {"modules": ["ListUtils", "Collections"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the lazyList method of ListUtils with a factory."}, {"name": "testLazyTransformerList", "primary_tested": ["ListUtils.lazyList(List,Transformer)"], "external_dependencies": {"modules": ["ListUtils", "Collections", "Arrays"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the lazyList method of ListUtils with a transformer."}, {"name": "testLongestCommonSubsequence", "primary_tested": ["ListUtils.longestCommonSubsequence(List,List)"], "external_dependencies": {"modules": ["ListUtils", "Collections", "Arrays"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the longestCommonSubsequence method of ListUtils."}, {"name": "testLongestCommonSubsequenceWithString", "primary_tested": ["ListUtils.longestCommonSubsequence(String,String)"], "external_dependencies": {"modules": ["ListUtils", "StringUtils"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the longestCommonSubsequence method of ListUtils with strings."}, {"name": "testPartition", "primary_tested": ["ListUtils.partition(List,int)"], "external_dependencies": {"modules": ["ListUtils", "Collections"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the partition method of ListUtils."}, {"name": "testPredicatedList", "primary_tested": ["ListUtils.predicatedList(List,Predicate)"], "external_dependencies": {"modules": ["ListUtils", "Collections"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the predicatedList method of ListUtils."}, {"name": "testRemoveAll", "primary_tested": ["ListUtils.removeAll(List,List)"], "external_dependencies": {"modules": ["ListUtils", "Collections"], "class_members": [{"name": "fullList", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the removeAll method of ListUtils."}, {"name": "testRetainAll", "primary_tested": ["ListUtils.retainAll(List,List)"], "external_dependencies": {"modules": ["ListUtils", "Collections"], "class_members": [{"name": "fullList", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the retainAll method of ListUtils."}, {"name": "testSelect", "primary_tested": ["ListUtils.select(List,Predicate)"], "external_dependencies": {"modules": ["ListUtils", "CollectionUtils"], "class_members": [{"name": "EQUALS_TWO", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the select method of ListUtils."}, {"name": "testSelectRejected", "primary_tested": ["ListUtils.selectRejected(List,Predicate)"], "external_dependencies": {"modules": ["ListUtils", "CollectionUtils"], "class_members": [{"name": "EQUALS_TWO", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the selectRejected method of ListUtils."}, {"name": "testSubtract", "primary_tested": ["ListUtils.subtract(List,List)"], "external_dependencies": {"modules": ["ListUtils", "Collections"], "class_members": [{"name": "fullList", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the subtract method of ListUtils."}, {"name": "testSubtractNullElement", "primary_tested": ["ListUtils.subtract(List,List)"], "external_dependencies": {"modules": ["ListUtils", "Collections"], "class_members": [{"name": "fullList", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the subtract method of ListUtils with null elements."}, {"name": "testSum", "primary_tested": ["ListUtils.sum(List,List)"], "external_dependencies": {"modules": ["ListUtils", "Collections"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the sum method of ListUtils."}, {"name": "testUnion", "primary_tested": ["ListUtils.union(List,List)"], "external_dependencies": {"modules": ["ListUtils", "Collections"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the union method of ListUtils."}]}