{"file_path": "src/test/java/org/apache/commons/collections4/iterators/BoundedIteratorTest.java", "testclass_name": "BoundedIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.hamcrest.MatcherAssert.assertThat;", "import static org.hamcrest.core.Is.is;", "import static org.hamcrest.core.IsEqual.equalTo;", "import static org.hamcrest.core.IsNull.nullValue;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "BoundedIteratorTest", "description": "Unit tests for the BoundedIterator class, which decorates an iterator with bounds on the start index and maximum number of elements.", "class_members": {"variables": [{"name": "testArray", "type": "String[]"}, {"name": "testList", "type": "List<E>"}], "methods": [], "nested_classes": []}, "fixtures": ["setUp"], "test_cases": [{"name": "testBounded", "primary_tested": ["BoundedIterator.next()"], "associated_methods": ["BoundedIterator.hasNext()"], "external_dependencies": {"modules": ["BoundedIterator", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the bounded iterator functionality where the first element returned is at an index greater than the first element of the decorated iterator, and the last element returned is at an index less than the last element of the decorated iterator."}, {"name": "testEmptyBounded", "primary_tested": ["BoundedIterator.hasNext()", "BoundedIterator.next()"], "external_dependencies": {"modules": ["BoundedIterator", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior of a bounded iterator with a max of 0, which should behave as an empty iterator."}, {"name": "testMaxGreaterThanSize", "primary_tested": ["BoundedIterator.next()"], "associated_methods": ["BoundedIterator.hasNext()"], "external_dependencies": {"modules": ["BoundedIterator", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the case where the max parameter is greater than the size of the decorated iterator, ensuring the last element returned is the same as the last element of the decorated iterator."}, {"name": "testNegativeMax", "primary_tested": ["BoundedIterator.BoundedIterator(Iterator<E>, int, int)"], "external_dependencies": {"modules": ["BoundedIterator", "IllegalArgumentException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the case where a negative max parameter is passed to the BoundedIterator constructor, expecting an IllegalArgumentException."}, {"name": "testNegativeOffset", "primary_tested": ["BoundedIterator.BoundedIterator(Iterator<E>, int, int)"], "external_dependencies": {"modules": ["BoundedIterator", "IllegalArgumentException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the case where a negative offset parameter is passed to the BoundedIterator constructor, expecting an IllegalArgumentException."}, {"name": "testOffsetGreaterThanSize", "primary_tested": ["BoundedIterator.hasNext()", "BoundedIterator.next()"], "external_dependencies": {"modules": ["BoundedIterator", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the case where the offset parameter is greater than the size of the decorated iterator, ensuring the BoundedIterator behaves as an empty iterator."}, {"name": "testRemoveCalledTwice", "primary_tested": ["BoundedIterator.remove()"], "associated_methods": ["BoundedIterator.next()"], "external_dependencies": {"modules": ["BoundedIterator", "IllegalStateException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior of calling the remove() method twice without calling next() in between, expecting an IllegalStateException."}, {"name": "testRemoveFirst", "primary_tested": ["BoundedIterator.remove()"], "associated_methods": ["BoundedIterator.next()"], "external_dependencies": {"modules": ["BoundedIterator", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests removing the first element from the iterator and verifies that the element is removed from the underlying collection."}, {"name": "testRemoveLast", "primary_tested": ["BoundedIterator.remove()"], "associated_methods": ["BoundedIterator.next()"], "external_dependencies": {"modules": ["BoundedIterator", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests removing the last element from the iterator and verifies that the element is removed from the underlying collection."}, {"name": "testRemoveMiddle", "primary_tested": ["BoundedIterator.remove()"], "associated_methods": ["BoundedIterator.next()"], "external_dependencies": {"modules": ["BoundedIterator", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests removing an element in the middle of the iterator and verifies that the element is removed from the underlying collection."}, {"name": "testRemoveUnsupported", "primary_tested": ["BoundedIterator.remove()"], "associated_methods": ["BoundedIterator.next()"], "external_dependencies": {"modules": ["BoundedIterator", "UnsupportedOperationException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the case where the decorated iterator does not support the remove() method and throws an UnsupportedOperationException."}, {"name": "testRemoveWithoutCallingNext", "primary_tested": ["BoundedIterator.remove()"], "external_dependencies": {"modules": ["BoundedIterator", "IllegalStateException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests calling the remove() method without first calling next(), expecting an IllegalStateException."}, {"name": "testSameAsDecorated", "primary_tested": ["BoundedIterator.next()"], "associated_methods": ["BoundedIterator.hasNext()"], "external_dependencies": {"modules": ["BoundedIterator", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the case where the offset is zero and the max is the size of the decorated iterator, ensuring the BoundedIterator returns all the same elements as the decorated iterator."}]}