[{"file_path": "src/test/java/org/apache/commons/collections4/TrieUtilsTest.java", "testclass_name": "TrieUtilsTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertInstanceOf;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import org.apache.commons.collections4.trie.PatriciaTrie;", "import org.apache.commons.collections4.trie.UnmodifiableTrie;", "import org.junit.jupiter.api.Test;"], "name": "TrieUtilsTest", "description": "Unit tests for the TrieUtils class, specifically focusing on the unmodifiableTrie method.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testUnmodifiableTrie", "primary_tested": ["TrieUtils.unmodifiableTrie(Trie)"], "external_dependencies": {"modules": ["PatriciaTrie", "UnmodifiableTrie", "TrieUtils"]}, "category": "unit", "description": "Tests the functionality of the unmodifiableTrie method in TrieUtils."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/SynchronizedQueueTest.java", "testclass_name": "SynchronizedQueueTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import java.util.LinkedList;", "import java.util.Queue;", "import org.apache.commons.collections4.BulkTest;", "import org.junit.jupiter.api.Disabled;", "import org.junit.jupiter.api.Test;"], "name": "SynchronizedQueueTest", "description": "Tests for the SynchronizedQueue class, focusing on serialization and external form writing.", "class_members": {"methods": [{"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "makeObject", "signature": "Queue<T> makeObject()"}]}, "fixtures": [], "test_cases": [{"name": "testCreate", "primary_tested": ["SynchronizedQueue.synchronizedQueue(Queue<T>)"], "associated_methods": ["AbstractQueueTest.makeFullCollection()"], "external_dependencies": {"modules": ["SynchronizedQueue", "LinkedList", "BulkTest", "java.io.Serializable"], "class_members": [{"name": "makeObject", "type": "method"}], "project_specific_resources": ["BulkTest.TEST_DATA_PATH"]}, "category": "unit", "fixtures_used": [], "description": "Tests the creation and serialization of an empty and a full SynchronizedQueue."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/UnmodifiableBoundedCollectionTest.java", "testclass_name": "UnmodifiableBoundedCollectionTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import org.apache.commons.collections4.BoundedCollection;", "import org.apache.commons.collections4.Unmodifiable;", "import org.apache.commons.collections4.list.FixedSizeList;", "import org.junit.jupiter.api.Test;"], "name": "UnmodifiableBoundedCollectionTest", "description": "Tests for the UnmodifiableBoundedCollection class, focusing on its unmodifiable and bounded properties.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testDecorateFactory", "primary_tested": ["UnmodifiableBoundedCollection.unmodifiableBoundedCollection(BoundedCollection)"], "associated_methods": [], "external_dependencies": {"modules": ["BoundedCollection", "UnmodifiableBoundedCollection"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the factory method for decorating a BoundedCollection with UnmodifiableBoundedCollection, ensuring it returns the same instance and handles null input correctly."}, {"name": "testUnmodifiable", "primary_tested": ["UnmodifiableBoundedCollection.makeObject()", "UnmodifiableBoundedCollection.makeFullCollection()"], "associated_methods": [], "external_dependencies": {"modules": ["Unmodifiable", "UnmodifiableBoundedCollection"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the objects created by makeObject and makeFullCollection are instances of Unmodifiable."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/HashedMapTest.java", "testclass_name": "HashedMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import org.junit.jupiter.api.Test;"], "name": "HashedMapTest", "description": "Unit tests for the HashedMap class in the Apache Commons Collections library.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testClone", "primary_tested": ["HashedMap.clone()"], "external_dependencies": {"modules": ["HashedMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the cloning functionality of the HashedMap."}, {"name": "testInitialCapacityZero", "primary_tested": ["HashedMap.HashedMap(int)"], "external_dependencies": {"modules": ["HashedMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of HashedMap when initialized with an initial capacity of zero."}, {"name": "testInternalState", "primary_tested": ["HashedMap.HashedMap(int,float)", "HashedMap.putAll(Map)"], "associated_methods": ["HashedMap.put(K,V)"], "external_dependencies": {"modules": ["HashedMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the internal state and capacity management of the HashedMap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/StaticBucketMapTest.java", "testclass_name": "StaticBucketMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.junit.jupiter.api.Test;"], "name": "StaticBucketMapTest", "description": "Unit tests for StaticBucketMap class, focusing on key and value checks, including null handling.", "class_members": {"methods": [{"name": "ignoredTests", "signature": "String[] ignoredTests()"}, {"name": "isFailFastExpected", "signature": "boolean isFailFastExpected()"}, {"name": "makeObject", "signature": "StaticBucketMap<K, V> makeObject()"}]}, "test_cases": [{"name": "test_containsKey_nullMatchesIncorrectly", "primary_tested": ["StaticBucketMap.containsKey(Object)"], "external_dependencies": {"modules": ["StaticBucketMap"]}, "category": "unit", "description": "Tests the containsKey method with null key, ensuring it matches correctly and does not incorrectly match other keys in the same bucket."}, {"name": "test_containsValue_nullMatchesIncorrectly", "primary_tested": ["StaticBucketMap.containsValue(Object)"], "external_dependencies": {"modules": ["StaticBucketMap"]}, "category": "unit", "description": "Tests the containsValue method with null value, ensuring it matches correctly and does not incorrectly match other values in the same bucket."}, {"name": "test_get_nullMatchesIncorrectly", "primary_tested": ["StaticBucketMap.get(Object)"], "external_dependencies": {"modules": ["StaticBucketMap"]}, "category": "unit", "description": "Tests the get method with null key, ensuring it retrieves the correct value and does not incorrectly retrieve values for other keys in the same bucket."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/ArrayStackTest.java", "testclass_name": "ArrayStackTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.EmptyStackException;", "import org.junit.jupiter.api.Test;"], "name": "ArrayStackTest", "description": "Unit tests for the ArrayStack class, focusing on its stack operations and deprecated methods.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testNewStack", "primary_tested": ["ArrayStack.empty()", "ArrayStack.size()", "ArrayStack.peek()", "ArrayStack.pop()"], "external_dependencies": {"modules": ["ArrayStack", "EmptyStackException"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "description": "Tests the initialization and basic properties of a new ArrayStack."}, {"name": "testPushPeekPop", "primary_tested": ["ArrayStack.push(E)", "ArrayStack.peek()", "ArrayStack.pop()"], "external_dependencies": {"modules": ["ArrayStack"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "description": "Tests the push, peek, and pop operations of the ArrayStack."}, {"name": "testSearch", "primary_tested": ["ArrayStack.push(E)", "ArrayStack.search(Object)"], "external_dependencies": {"modules": ["ArrayStack"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "description": "Tests the search functionality of the ArrayStack."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/TreeBagTest.java", "testclass_name": "TreeBagTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import org.apache.commons.collections4.Bag;", "import org.apache.commons.collections4.SortedBag;", "import org.junit.jupiter.api.Test;"], "name": "TreeBagTest", "description": "Unit tests for TreeBag class in Apache Commons Collections.", "class_members": {"methods": [{"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "makeObject", "signature": "SortedBag<T> makeObject()"}, {"name": "setupBag", "signature": "SortedBag<T> setupBag()"}]}, "test_cases": [{"name": "testCollections265", "primary_tested": ["TreeBag.add(Object)"], "external_dependencies": {"modules": ["TreeBag", "IllegalArgumentException"]}, "category": "unit", "description": "Tests that adding an invalid object to a TreeBag throws an IllegalArgumentException."}, {"name": "testCollections555", "primary_tested": ["TreeBag.add(Object)"], "external_dependencies": {"modules": ["TreeBag", "NullPointerException", "String"]}, "category": "unit", "description": "Tests that adding null to a TreeBag throws a NullPointerException, and ensures that adding null to a non-empty TreeBag with a comparator also throws a NullPointerException."}, {"name": "testOrdering", "primary_tested": ["TreeBag.toArray()", "SortedBag.first()", "SortedBag.last()"], "associated_methods": ["TreeBag.setupBag()"], "external_dependencies": {"modules": ["TreeBag", "SortedBag"], "class_members": [{"name": "setupBag", "type": "method"}]}, "category": "unit", "description": "Tests the ordering of elements in a TreeBag, ensuring that elements are returned in the correct order and that the first and last elements are correctly identified."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/TransformedBagTest.java", "testclass_name": "TransformedBagTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.apache.commons.collections4.Bag;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.collection.TransformedCollectionTest;", "import org.junit.jupiter.api.Test;"], "name": "TransformedBagTest", "description": "Tests for TransformedBag functionality.", "class_members": {"variables": [], "methods": [{"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "getIterationBehaviour", "signature": "int getIterationBehaviour()"}, {"name": "makeObject", "signature": "Bag<T> makeObject()"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testTransformedBag", "primary_tested": ["TransformedBag.transformingBag(Bag<T>,Transformer<T,T>)"], "associated_methods": ["Bag.isEmpty()", "Bag.add(T)", "Bag.size()", "Bag.contains(Object)", "Bag.remove(Object)"], "external_dependencies": {"modules": ["TransformedBag", "HashBag", "Transformer", "TransformedCollectionTest", "Integer"], "class_members": []}, "category": "unit", "description": "Tests the transforming functionality of TransformedBag, ensuring elements are transformed and added correctly."}, {"name": "testTransformedBag_decorateTransform", "primary_tested": ["TransformedBag.transformedBag(Bag<T>,Transformer<T,T>)"], "associated_methods": ["Bag.add(T)", "Bag.size()", "Bag.contains(Object)", "Bag.remove(Object)"], "external_dependencies": {"modules": ["TransformedBag", "HashBag", "Transformer", "TransformedCollectionTest", "Integer"], "class_members": []}, "category": "unit", "description": "Tests the decorating and transforming functionality of TransformedBag, ensuring elements are transformed and added correctly."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/CollectionBagTest.java", "testclass_name": "CollectionBagTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.io.IOException;", "import java.io.Serializable;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import org.apache.commons.collections4.Bag;", "import org.apache.commons.collections4.collection.AbstractCollectionTest;", "import org.junit.jupiter.api.Test;"], "name": "CollectionBagTest", "description": "Tests for the CollectionBag class, focusing on serialization compatibility.", "class_members": {"methods": [{"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "getIterationBehaviour", "signature": "int getIterationBehaviour()"}, {"name": "makeConfirmedCollection", "signature": "Collection<T> makeConfirmedCollection()"}, {"name": "makeConfirmedFullCollection", "signature": "Collection<T> makeConfirmedFullCollection()"}, {"name": "makeObject", "signature": "Bag<T> makeObject()"}]}, "test_cases": [{"name": "testEmptyBagCompatibility", "primary_tested": ["CollectionBag.makeObject()"], "associated_methods": ["CollectionBag.isEmpty()", "CollectionBag.equals(Object)"], "external_dependencies": {"modules": ["Bag", "Serializable", "IOException", "ClassNotFoundException"], "class_members": [{"name": "makeObject", "type": "method"}], "project_specific_resources": ["CollectionBag.readExternalFormFromDisk(String)"]}, "category": "unit", "description": "Tests the serialization compatibility of an empty CollectionBag."}, {"name": "testFullBagCompatibility", "primary_tested": ["CollectionBag.makeFullCollection()"], "associated_methods": ["CollectionBag.size()", "CollectionBag.equals(Object)"], "external_dependencies": {"modules": ["Bag", "Serializable", "IOException", "ClassNotFoundException"], "class_members": [{"name": "makeFullCollection", "type": "method"}], "project_specific_resources": ["CollectionBag.readExternalFormFromDisk(String)"]}, "category": "unit", "description": "Tests the serialization compatibility of a full CollectionBag."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/ArrayUtilsTest.java", "testclass_name": "ArrayUtilsTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.junit.jupiter.api.Test;"], "name": "ArrayUtilsTest", "description": "Unit tests for the ArrayUtils class, focusing on methods like contains and indexOf.", "class_members": {"variables": [{"name": "array", "type": "Object[]"}], "nested_classes": [{"name": "LANG1261ParentObject", "description": "Internal class used in testContains_LANG_1261"}, {"name": "LANG1261ChildObject", "description": "Internal class used in testContains_LANG_1261"}]}, "test_cases": [{"name": "testContains", "primary_tested": ["ArrayUtils.contains(Object[],Object)"], "external_dependencies": {"modules": ["ArrayUtils"], "class_members": [{"name": "array", "type": "variable"}]}, "category": "unit", "description": "Tests the contains functionality of the ArrayUtils class."}, {"name": "testContains_LANG_1261", "primary_tested": ["ArrayUtils.contains(Object[],Object)"], "associated_methods": ["LANG1261ParentObject.equals(Object)"], "external_dependencies": {"modules": ["ArrayUtils"], "class_members": [{"name": "array", "type": "variable"}]}, "category": "unit", "description": "Tests the contains functionality of the ArrayUtils class with custom objects overriding equals."}, {"name": "testIndexOf", "primary_tested": ["ArrayUtils.indexOf(Object[],Object)"], "external_dependencies": {"modules": ["ArrayUtils"], "class_members": [{"name": "array", "type": "variable"}]}, "category": "unit", "description": "Tests the indexOf functionality of the ArrayUtils class."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/TransformedSortedBagTest.java", "testclass_name": "TransformedSortedBagTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.apache.commons.collections4.SortedBag;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.collection.TransformedCollectionTest;", "import org.junit.jupiter.api.Test;"], "name": "TransformedSortedBagTest", "description": "Tests for TransformedSortedBag functionality.", "class_members": {"methods": [{"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "makeObject", "signature": "SortedBag<T> makeObject()"}]}, "fixtures": [], "test_cases": [{"name": "testTransformedBag", "primary_tested": ["TransformedSortedBag.transformingSortedBag(SortedBag<T>,Transformer<T,T>)"], "associated_methods": ["SortedBag.add(T)", "SortedBag.size()", "SortedBag.contains(Object)", "SortedBag.remove(Object)"], "external_dependencies": {"modules": ["SortedBag", "Transformer", "TransformedCollectionTest", "TreeBag", "Integer"], "class_members": [], "project_specific_resources": ["TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER"]}, "category": "unit", "fixtures_used": [], "description": "Tests the transforming functionality of TransformedSortedBag by adding elements and checking their transformed state."}, {"name": "testTransformedBag_decorateTransform", "primary_tested": ["TransformedSortedBag.transformedSortedBag(SortedBag<T>,Transformer<T,T>)"], "associated_methods": ["TreeBag.add(T)", "SortedBag.size()", "SortedBag.contains(Object)", "SortedBag.remove(Object)"], "external_dependencies": {"modules": ["SortedBag", "Transformer", "TransformedCollectionTest", "TreeBag", "Integer"], "class_members": [], "project_specific_resources": ["TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER"]}, "category": "unit", "fixtures_used": [], "description": "Tests the decorating and transforming functionality of TransformedSortedBag by adding elements to an original bag and checking their transformed state."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/PredicatedSortedBagTest.java", "testclass_name": "PredicatedSortedBagTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.Comparator;", "import org.apache.commons.collections4.Predicate;", "import org.apache.commons.collections4.SortedBag;", "import org.apache.commons.collections4.functors.TruePredicate;", "import org.junit.jupiter.api.Test;"], "name": "PredicatedSortedBagTest", "description": "Unit tests for PredicatedSortedBag functionality.", "class_members": {"variables": [{"name": "nullBag", "type": "SortedBag<T>"}, {"name": "truePredicate", "type": "Predicate<T>"}], "methods": [{"name": "decorateBag", "signature": "SortedBag<T> decorateBag(SortedBag<T> bag, Predicate<T> predicate)"}, {"name": "makeTestBag", "signature": "SortedBag<T> makeTestBag()"}, {"name": "stringPredicate", "signature": "Predicate<T> stringPredicate()"}]}, "fixtures": [], "test_cases": [{"name": "testDecorate", "primary_tested": ["PredicatedSortedBag.predicatedSortedBag(SortedBag<T>,Predicate<T>)"], "associated_methods": ["PredicatedSortedBag.decorated()"], "external_dependencies": {"modules": ["TreeBag", "PredicatedSortedBag", "NullPointerException"], "class_members": [{"name": "nullBag", "type": "variable"}, {"name": "stringPredicate", "type": "method"}]}, "category": "unit", "description": "Tests the decoration functionality of PredicatedSortedBag and checks for expected exceptions when decorating with null parameters."}, {"name": "testSortOrder", "primary_tested": ["SortedBag.add(T)", "SortedBag.first()", "SortedBag.last()", "SortedBag.comparator()"], "associated_methods": [], "external_dependencies": {"modules": ["TreeBag", "PredicatedSortedBag", "Comparator"], "class_members": [{"name": "stringPredicate", "type": "method"}]}, "category": "unit", "description": "Tests the sort order and comparator functionality of a decorated SortedBag."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/TransformedQueueTest.java", "testclass_name": "TransformedQueueTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.LinkedList;", "import java.util.Queue;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.collection.AbstractCollectionTest;", "import org.apache.commons.collections4.collection.TransformedCollectionTest;", "import org.junit.jupiter.api.Test;"], "name": "TransformedQueueTest", "description": "Tests for TransformedQueue functionality, including transformation of elements and queue operations.", "class_members": {"variables": [], "methods": [{"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "makeConfirmedCollection", "signature": "Queue<E> makeConfirmedCollection()"}, {"name": "makeConfirmedFullCollection", "signature": "Queue<E> makeConfirmedFullCollection()"}, {"name": "makeFullCollection", "signature": "Queue<E> makeFullCollection()"}, {"name": "makeObject", "signature": "Queue<E> makeObject()"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testTransformedQueue", "primary_tested": ["TransformedQueue.transformingQueue(Queue<E>,Transformer<E,E>)"], "associated_methods": ["Queue.add(E)", "Queue.size()", "Queue.contains(Object)", "Queue.remove(Object)"], "external_dependencies": {"modules": ["TransformedQueue", "TransformedCollectionTest", "Transformer", "LinkedList", "Arrays", "Integer"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformation of elements in a queue and verifies the queue operations."}, {"name": "testTransformedQueue_decorateTransform", "primary_tested": ["TransformedQueue.transformedQueue(Queue<E>,Transformer<E,E>)"], "associated_methods": ["Queue.add(E)", "Queue.size()", "Queue.contains(Object)", "Queue.remove(Object)"], "external_dependencies": {"modules": ["TransformedQueue", "TransformedCollectionTest", "Transformer", "LinkedList", "Collections", "Integer"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformation of elements in a queue using the decorateTransform method and verifies the queue operations."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/UnmodifiableBagTest.java", "testclass_name": "UnmodifiableBagTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Arrays;", "import org.apache.commons.collections4.Bag;", "import org.apache.commons.collections4.Unmodifiable;", "import org.apache.commons.collections4.collection.AbstractCollectionTest;", "import org.junit.jupiter.api.Test;"], "name": "UnmodifiableBagTest", "description": "Tests for the UnmodifiableBag class, focusing on its unmodifiable behavior and factory decoration.", "class_members": {"methods": [{"name": "getCollection", "signature": "Bag<E> getCollection()"}, {"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "getIterationBehaviour", "signature": "int getIterationBehaviour()"}, {"name": "isAddSupported", "signature": "boolean isAddSupported()"}, {"name": "isNullSupported", "signature": "boolean isNullSupported()"}, {"name": "isRemoveSupported", "signature": "boolean isRemoveSupported()"}, {"name": "makeFullCollection", "signature": "Bag<E> makeFullCollection()"}, {"name": "makeObject", "signature": "Bag<E> makeObject()"}]}, "test_cases": [{"name": "testDecorateFactory", "primary_tested": ["UnmodifiableBag.unmodifiableBag(Bag)"], "external_dependencies": {"modules": ["UnmodifiableBag", "Bag", "HashBag", "Arrays"], "class_members": [{"name": "makeFullCollection", "type": "method"}]}, "category": "unit", "description": "Tests the factory decoration of UnmodifiableBag, ensuring it returns the same instance and handles null input correctly."}, {"name": "testUnmodifiable", "primary_tested": ["UnmodifiableBag.makeObject()", "UnmodifiableBag.makeFullCollection()"], "external_dependencies": {"modules": ["UnmodifiableBag", "Bag", "HashBag", "Unmodifiable"], "class_members": [{"name": "makeObject", "type": "method"}, {"name": "makeFullCollection", "type": "method"}]}, "category": "unit", "description": "Tests the unmodifiable behavior of the UnmodifiableBag, ensuring it implements the Unmodifiable interface."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/UnmodifiableSortedBagTest.java", "testclass_name": "UnmodifiableSortedBagTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Arrays;", "import org.apache.commons.collections4.SortedBag;", "import org.apache.commons.collections4.Unmodifiable;", "import org.apache.commons.collections4.collection.AbstractCollectionTest;", "import org.junit.jupiter.api.Test;"], "name": "UnmodifiableSortedBagTest", "description": "Tests for the UnmodifiableSortedBag class, focusing on its unmodifiable behavior and factory decoration.", "class_members": {"methods": [{"name": "getCollection", "signature": "SortedBag<E> getCollection()"}, {"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "isAddSupported", "signature": "boolean isAddSupported()"}, {"name": "isNullSupported", "signature": "boolean isNullSupported()"}, {"name": "isRemoveSupported", "signature": "boolean isRemoveSupported()"}, {"name": "makeFullCollection", "signature": "SortedBag<E> makeFullCollection()"}, {"name": "makeObject", "signature": "SortedBag<E> makeObject()"}]}, "test_cases": [{"name": "testDecorateFactory", "primary_tested": ["UnmodifiableSortedBag.unmodifiableSortedBag(SortedBag)"], "associated_methods": ["UnmodifiableSortedBagTest.makeFullCollection()"], "external_dependencies": {"modules": ["UnmodifiableSortedBag", "SortedBag", "NullPointerException"], "class_members": [{"name": "makeFullCollection", "type": "method"}]}, "category": "unit", "description": "Tests the factory decoration of UnmodifiableSortedBag and ensures it throws NullPointerException for null input."}, {"name": "testUnmodifiable", "primary_tested": ["UnmodifiableSortedBag.unmodifiableSortedBag(SortedBag)"], "associated_methods": ["UnmodifiableSortedBagTest.makeObject()", "UnmodifiableSortedBagTest.makeFullCollection()"], "external_dependencies": {"modules": ["UnmodifiableSortedBag", "SortedBag", "Unmodifiable"], "class_members": [{"name": "makeObject", "type": "method"}, {"name": "makeFullCollection", "type": "method"}]}, "category": "unit", "description": "Tests that the created objects are instances of Unmodifiable."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/TransformedCollectionTest.java", "testclass_name": "TransformedCollectionTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.Collections;", "import java.util.List;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.TransformerUtils;", "import org.junit.jupiter.api.Test;"], "name": "TransformedCollectionTest", "description": "Unit tests for TransformedCollection functionality, focusing on transformations like String to Integer and case conversion.", "class_members": {"variables": [{"name": "NOOP_TRANSFORMER", "type": "static final Transformer<Object, Object>"}, {"name": "STRING_TO_INTEGER_TRANSFORMER", "type": "static final Transformer<Object, Object>"}, {"name": "TO_LOWER_CASE_TRANSFORMER", "type": "static final Transformer<Object, Object>"}], "methods": [], "nested_classes": [{"name": "StringToInteger", "description": "Transformer class converting String to Integer"}, {"name": "ToLowerCase", "description": "Transformer class converting String to lower case"}]}, "fixtures": [], "test_cases": [{"name": "testTransformedCollection", "primary_tested": ["TransformedCollection.transformingCollection(Collection,Transformer)"], "associated_methods": ["TransformedCollection.add(Object)", "TransformedCollection.contains(Object)", "TransformedCollection.remove(Object)"], "external_dependencies": {"modules": ["TransformedCollection", "Transformer", "ArrayList", "Arrays", "Integer"], "class_members": [{"name": "STRING_TO_INTEGER_TRANSFORMER", "type": "variable"}]}, "category": "unit", "description": "Tests the transformation of a collection from String to Integer."}, {"name": "testTransformedCollection_decorateTransform", "primary_tested": ["TransformedCollection.transformedCollection(Collection,Transformer)"], "associated_methods": ["TransformedCollection.contains(Object)", "TransformedCollection.remove(Object)"], "external_dependencies": {"modules": ["TransformedCollection", "Transformer", "ArrayList", "Collections", "Integer"], "class_members": [{"name": "STRING_TO_INTEGER_TRANSFORMER", "type": "variable"}]}, "category": "unit", "description": "Tests the transformation of an existing collection from String to Integer using decoration."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/UnmodifiableQueueTest.java", "testclass_name": "UnmodifiableQueueTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.LinkedList;", "import java.util.Queue;", "import org.apache.commons.collections4.Unmodifiable;", "import org.apache.commons.collections4.collection.AbstractCollectionTest;", "import org.junit.jupiter.api.Test;"], "name": "UnmodifiableQueueTest", "description": "Tests for the UnmodifiableQueue class, ensuring it behaves as an unmodifiable queue.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testDecorateFactory", "primary_tested": ["UnmodifiableQueue.unmodifiableQueue(Queue)"], "external_dependencies": {"modules": ["UnmodifiableQueue", "Queue"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the factory method for creating an unmodifiable queue and ensures it throws a NullPointerException when given null."}, {"name": "testOffer", "primary_tested": ["Queue.offer(E)"], "external_dependencies": {"modules": ["Queue"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the offer method throws an UnsupportedOperationException for an unmodifiable queue."}, {"name": "testPoll", "primary_tested": ["Queue.poll()"], "external_dependencies": {"modules": ["Queue"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the poll method throws an UnsupportedOperationException for an unmodifiable queue."}, {"name": "testQueueRemove", "primary_tested": ["Queue.remove()"], "external_dependencies": {"modules": ["Queue"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the remove method throws an UnsupportedOperationException for an unmodifiable queue."}, {"name": "testUnmodifiable", "primary_tested": ["UnmodifiableQueue.makeObject()", "UnmodifiableQueue.makeFullCollection()"], "external_dependencies": {"modules": ["UnmodifiableQueue", "Unmodifiable"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the objects created by makeObject and makeFullCollection are instances of Unmodifiable."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/CollectionSortedBagTest.java", "testclass_name": "CollectionSortedBagTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import java.io.IOException;", "import java.io.Serializable;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import org.apache.commons.collections4.Bag;", "import org.apache.commons.collections4.SortedBag;", "import org.apache.commons.collections4.collection.AbstractCollectionTest;", "import org.junit.jupiter.api.Test;"], "name": "CollectionSortedBagTest", "description": "Unit tests for CollectionSortedBag, focusing on serialization compatibility.", "class_members": {"methods": [{"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "getFullNonNullElements", "signature": "T[] getFullNonNullElements()"}, {"name": "getOtherNonNullElements", "signature": "T[] getOtherNonNullElements()"}, {"name": "isNullSupported", "signature": "boolean isNullSupported()"}, {"name": "makeConfirmedCollection", "signature": "Collection<T> makeConfirmedCollection()"}, {"name": "makeConfirmedFullCollection", "signature": "Collection<T> makeConfirmedFullCollection()"}, {"name": "makeObject", "signature": "Bag<T> makeObject()"}]}, "test_cases": [{"name": "testEmptyBagCompatibility", "primary_tested": ["CollectionSortedBag.makeObject()"], "associated_methods": ["CollectionSortedBag.readExternalFormFromDisk(String)"], "external_dependencies": {"modules": ["Bag", "Serializable", "IOException", "ClassNotFoundException"], "class_members": [{"name": "makeObject", "type": "method"}], "project_specific_resources": ["CollectionSortedBag.getCanonicalEmptyCollectionName(Bag)"]}, "category": "unit", "description": "Tests the serialization compatibility of an empty CollectionSortedBag."}, {"name": "testFullBagCompatibility", "primary_tested": ["CollectionSortedBag.makeFullCollection()"], "associated_methods": ["CollectionSortedBag.readExternalFormFromDisk(String)"], "external_dependencies": {"modules": ["SortedBag", "Serializable", "IOException", "ClassNotFoundException"], "class_members": [{"name": "makeFullCollection", "type": "method"}], "project_specific_resources": ["CollectionSortedBag.getCanonicalFullCollectionName(SortedBag)"]}, "category": "unit", "description": "Tests the serialization compatibility of a full CollectionSortedBag."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/UnmodifiableCollectionTest.java", "testclass_name": "UnmodifiableCollectionTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.List;", "import org.apache.commons.collections4.Unmodifiable;", "import org.junit.jupiter.api.Test;"], "name": "UnmodifiableCollectionTest", "description": "Tests for the UnmodifiableCollection class, focusing on its unmodifiable nature and factory decoration.", "class_members": {"methods": [{"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "isAddSupported", "signature": "boolean isAddSupported()"}, {"name": "isRemoveSupported", "signature": "boolean isRemoveSupported()"}, {"name": "makeConfirmedCollection", "signature": "Collection<E> makeConfirmedCollection()"}, {"name": "makeConfirmedFullCollection", "signature": "Collection<E> makeConfirmedFullCollection()"}, {"name": "makeFullCollection", "signature": "Collection<E> makeFullCollection()"}, {"name": "makeObject", "signature": "Collection<E> makeObject()"}]}, "test_cases": [{"name": "testDecorateFactory", "primary_tested": ["UnmodifiableCollection.unmodifiableCollection(Collection<E>)"], "associated_methods": ["UnmodifiableCollection.makeFullCollection()"], "external_dependencies": {"modules": ["UnmodifiableCollection", "Collection"], "class_members": [{"name": "makeFullCollection", "type": "method"}]}, "category": "unit", "description": "Tests the factory decoration of UnmodifiableCollection, ensuring it returns the same instance and handles null input correctly."}, {"name": "testUnmodifiable", "primary_tested": ["UnmodifiableCollection.makeObject()", "UnmodifiableCollection.makeFullCollection()"], "associated_methods": ["UnmodifiableCollection.makeObject()", "UnmodifiableCollection.makeFullCollection()"], "external_dependencies": {"modules": ["UnmodifiableCollection", "Unmodifiable"], "class_members": [{"name": "makeObject", "type": "method"}, {"name": "makeFullCollection", "type": "method"}]}, "category": "unit", "description": "Tests the unmodifiable nature of the collections created by makeObject and makeFullCollection methods."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/PredicatedBagTest.java", "testclass_name": "PredicatedBagTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Set;", "import org.apache.commons.collections4.Bag;", "import org.apache.commons.collections4.Predicate;", "import org.apache.commons.collections4.functors.TruePredicate;", "import org.junit.jupiter.api.Test;"], "name": "PredicatedBagTest", "description": "Unit tests for PredicatedBag functionality, focusing on illegal and legal additions, and decorations.", "class_members": {"variables": [{"name": "truePredicate", "type": "Predicate<T>"}], "methods": [{"name": "decorateBag", "signature": "protected Bag<T> decorateBag(final HashBag<T> bag, final Predicate<T> predicate)"}, {"name": "makeTestBag", "signature": "protected Bag<T> makeTestBag()"}, {"name": "stringPredicate", "signature": "protected Predicate<T> stringPredicate()"}]}, "fixtures": [], "test_cases": [{"name": "testIllegalAdd", "primary_tested": ["Bag.add(T)"], "external_dependencies": {"modules": ["Bag", "Integer"], "class_members": [{"name": "makeTestBag", "type": "method"}]}, "category": "unit", "description": "Tests that adding an illegal element to the bag throws an IllegalArgumentException."}, {"name": "testIllegalDecorate", "primary_tested": ["PredicatedBag.predicatedBag(HashBag<T>,Predicate<T>)"], "external_dependencies": {"modules": ["HashBag", "Predicate"], "class_members": [{"name": "decorateBag", "type": "method"}, {"name": "stringPredicate", "type": "method"}]}, "category": "unit", "description": "Tests that decorating a bag with illegal elements throws an IllegalArgumentException, and decorating with a null predicate throws a NullPointerException."}, {"name": "testLegalAddRemove", "primary_tested": ["Bag.add(T)", "Bag.remove(T)", "Bag.uniqueSet()"], "associated_methods": ["Bag.size()"], "external_dependencies": {"modules": ["Bag", "Set"], "class_members": [{"name": "makeTestBag", "type": "method"}]}, "category": "unit", "description": "Tests the legal addition and removal of elements from the bag, and verifies the state of the unique set after these operations."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/PredicatedCollectionTest.java", "testclass_name": "PredicatedCollectionTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.List;", "import org.apache.commons.collections4.Predicate;", "import org.apache.commons.collections4.functors.TruePredicate;", "import org.junit.jupiter.api.Test;"], "name": "PredicatedCollectionTest", "description": "Tests for PredicatedCollection, which validates elements based on a predicate.", "class_members": {"variables": [{"name": "truePredicate", "type": "Predicate<E>"}, {"name": "testPredicate", "type": "Predicate<E>"}], "methods": [{"name": "decorateCollection", "signature": "protected Collection<E> decorateCollection(Collection<E> collection, Predicate<E> predicate)"}, {"name": "getCompatibilityVersion", "signature": "public String getCompatibilityVersion()"}, {"name": "getFullElements", "signature": "public E[] getFullElements()"}, {"name": "makeConfirmedCollection", "signature": "public Collection<E> makeConfirmedCollection()"}, {"name": "makeConfirmedFullCollection", "signature": "public Collection<E> makeConfirmedFullCollection()"}, {"name": "makeFullCollection", "signature": "public Collection<E> makeFullCollection()"}, {"name": "makeObject", "signature": "public Collection<E> makeObject()"}, {"name": "makeTestCollection", "signature": "public Collection<E> makeTestCollection()"}]}, "test_cases": [{"name": "testIllegalAdd", "primary_tested": ["Collection.add(E)"], "associated_methods": ["Collection.contains(Object)"], "external_dependencies": {"modules": ["Collection", "IllegalArgumentException"], "class_members": [{"name": "makeTestCollection", "type": "method"}]}, "category": "unit", "description": "Tests that adding an illegal element (non-string) to the collection throws an IllegalArgumentException."}, {"name": "testIllegalAddAll", "primary_tested": ["Collection.addAll(Collection<? extends E>)"], "associated_methods": ["Collection.contains(Object)"], "external_dependencies": {"modules": ["Collection", "IllegalArgumentException"], "class_members": [{"name": "makeTestCollection", "type": "method"}]}, "category": "unit", "description": "Tests that adding a collection with an illegal element (non-string) throws an IllegalArgumentException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/ComparatorUtilsTest.java", "testclass_name": "ComparatorUtilsTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Comparator;", "import org.junit.jupiter.api.Test;"], "name": "ComparatorUtilsTest", "description": "Unit tests for the ComparatorUtils class, which provides utility methods for comparators.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testBooleanComparator", "primary_tested": ["ComparatorUtils.booleanComparator(boolean)"], "external_dependencies": {"modules": ["Comparator", "ComparatorUtils"]}, "category": "unit", "description": "Tests the booleanComparator method of ComparatorUtils, ensuring it correctly compares Boolean values based on the provided boolean parameter."}, {"name": "testChainedComparator", "primary_tested": ["ComparatorUtils.chainedComparator(Comparator,Comparator)"], "external_dependencies": {"modules": ["Comparator", "ComparatorUtils"]}, "category": "unit", "description": "Tests the chainedComparator method of ComparatorUtils, ensuring it correctly chains two natural comparators for Integer values."}, {"name": "testMax", "primary_tested": ["ComparatorUtils.max(Integer,Integer,Comparator)"], "associated_methods": ["ComparatorUtils.reversedComparator(Comparator)"], "external_dependencies": {"modules": ["Comparator", "ComparatorUtils"]}, "category": "unit", "description": "Tests the max method of ComparatorUtils, ensuring it correctly returns the maximum value based on the provided comparator."}, {"name": "testMin", "primary_tested": ["ComparatorUtils.min(Integer,Integer,Comparator)"], "associated_methods": ["ComparatorUtils.reversedComparator(Comparator)"], "external_dependencies": {"modules": ["Comparator", "ComparatorUtils"]}, "category": "unit", "description": "Tests the min method of ComparatorUtils, ensuring it correctly returns the minimum value based on the provided comparator."}, {"name": "testNullHighComparator", "primary_tested": ["ComparatorUtils.nullHighComparator(Comparator)"], "external_dependencies": {"modules": ["Comparator", "ComparatorUtils"]}, "category": "unit", "description": "Tests the nullHighComparator method of ComparatorUtils, ensuring it correctly handles null values as higher than non-null values."}, {"name": "testNullLowComparator", "primary_tested": ["ComparatorUtils.nullLowComparator(Comparator)"], "external_dependencies": {"modules": ["Comparator", "ComparatorUtils"]}, "category": "unit", "description": "Tests the nullLowComparator method of ComparatorUtils, ensuring it correctly handles null values as lower than non-null values."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/QueueUtilsTest.java", "testclass_name": "QueueUtilsTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertInstanceOf;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.LinkedList;", "import java.util.Queue;", "import org.apache.commons.collections4.functors.TruePredicate;", "import org.apache.commons.collections4.queue.PredicatedQueue;", "import org.apache.commons.collections4.queue.SynchronizedQueue;", "import org.apache.commons.collections4.queue.TransformedQueue;", "import org.apache.commons.collections4.queue.UnmodifiableQueue;", "import org.junit.jupiter.api.Test;"], "name": "QueueUtilsTest", "description": "Unit tests for various utility methods in QueueUtils.", "class_members": {"variables": [{"name": "truePredicate", "type": "Predicate<Object>"}, {"name": "nopTransformer", "type": "Transformer<Object, Object>"}]}, "fixtures": [], "test_cases": [{"name": "testEmptyQueue", "primary_tested": ["QueueUtils.emptyQueue()"], "external_dependencies": {"modules": ["QueueUtils", "UnmodifiableQueue"], "class_members": [{"name": "truePredicate", "type": "variable"}]}, "category": "unit", "description": "Tests the creation of an empty unmodifiable queue and verifies its properties."}, {"name": "testPredicatedQueue", "primary_tested": ["QueueUtils.predicatedQueue(Queue,Predicate)"], "external_dependencies": {"modules": ["QueueUtils", "PredicatedQueue", "TruePredicate"], "class_members": [{"name": "truePredicate", "type": "variable"}]}, "category": "unit", "description": "Tests the creation of a predicated queue and verifies its properties and exceptions."}, {"name": "testSynchronizedQueue", "primary_tested": ["QueueUtils.synchronizedQueue(Queue)"], "external_dependencies": {"modules": ["QueueUtils", "SynchronizedQueue"], "class_members": [{"name": "truePredicate", "type": "variable"}]}, "category": "unit", "description": "Tests the creation of a synchronized queue and verifies its properties and exceptions."}, {"name": "testTransformedQueue", "primary_tested": ["QueueUtils.transformingQueue(Queue,Transformer)"], "external_dependencies": {"modules": ["QueueUtils", "TransformedQueue", "TransformerUtils"], "class_members": [{"name": "nopTransformer", "type": "variable"}]}, "category": "unit", "description": "Tests the creation of a transformed queue and verifies its properties and exceptions."}, {"name": "testUnmodifiableQueue", "primary_tested": ["QueueUtils.unmodifiableQueue(Queue)"], "external_dependencies": {"modules": ["QueueUtils", "UnmodifiableQueue"], "class_members": [{"name": "truePredicate", "type": "variable"}]}, "category": "unit", "description": "Tests the creation of an unmodifiable queue and verifies its properties and exceptions."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/PredicatedQueueTest.java", "testclass_name": "PredicatedQueueTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.LinkedList;", "import java.util.Queue;", "import org.apache.commons.collections4.Predicate;", "import org.apache.commons.collections4.collection.PredicatedCollectionTest;", "import org.apache.commons.collections4.functors.TruePredicate;", "import org.junit.jupiter.api.Test;"], "name": "PredicatedQueueTest", "description": "Unit tests for PredicatedQueue functionality.", "class_members": {"variables": [{"name": "truePredicate", "type": "Predicate<E>"}, {"name": "testPredicate", "type": "Predicate<E>"}], "methods": [{"name": "decorateCollection", "signature": "Queue<E> decorateCollection(Queue<E> queue, Predicate<E> predicate)"}, {"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "makeConfirmedCollection", "signature": "Collection<E> makeConfirmedCollection()"}, {"name": "makeConfirmedFullCollection", "signature": "Collection<E> makeConfirmedFullCollection()"}, {"name": "makeFullCollection", "signature": "Queue<E> makeFullCollection()"}, {"name": "makeObject", "signature": "Queue<E> makeObject()"}, {"name": "makeTestQueue", "signature": "Queue<E> makeTestQueue()"}]}, "test_cases": [{"name": "testGet", "primary_tested": ["Queue.peek()"], "associated_methods": ["Queue.add(E)", "Queue.peek()"], "external_dependencies": {"modules": ["Queue", "Predicate", "TruePredicate", "LinkedList", "Arrays"], "class_members": [{"name": "truePredicate", "type": "variable"}, {"name": "testPredicate", "type": "variable"}, {"name": "decorateCollection", "type": "method"}, {"name": "makeTestQueue", "type": "method"}]}, "category": "unit", "description": "Tests the peek functionality of the PredicatedQueue."}, {"name": "testRemove", "primary_tested": ["Queue.poll()"], "associated_methods": ["Queue.add(E)", "Queue.poll()"], "external_dependencies": {"modules": ["Queue", "Predicate", "TruePredicate", "LinkedList", "Arrays"], "class_members": [{"name": "truePredicate", "type": "variable"}, {"name": "testPredicate", "type": "variable"}, {"name": "decorateCollection", "type": "method"}, {"name": "makeTestQueue", "type": "method"}]}, "category": "unit", "description": "Tests the poll functionality of the PredicatedQueue."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/MultiSetUtilsTest.java", "testclass_name": "MultiSetUtilsTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.Arrays;", "import org.apache.commons.collections4.multiset.HashMultiSet;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "MultiSetUtilsTest", "description": "Unit tests for MultiSetUtils class, focusing on various utility methods for MultiSet operations.", "class_members": {"variables": [{"name": "fullArray", "type": "String[]"}, {"name": "multiSet", "type": "MultiSet<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEmptyMultiSet", "primary_tested": ["MultiSetUtils.emptyMultiSet()"], "external_dependencies": {"modules": ["MultiSetUtils", "MultiSet", "UnsupportedOperationException"]}, "category": "unit", "description": "Tests the creation and behavior of an empty MultiSet, ensuring it is read-only."}, {"name": "testPredicatedMultiSet", "primary_tested": ["MultiSetUtils.predicatedMultiSet(MultiSet<String>,Predicate<String>)"], "associated_methods": ["MultiSet.size()", "MultiSet.getCount(String)"], "external_dependencies": {"modules": ["MultiSetUtils", "MultiSet", "Predicate", "NullPointerException", "IllegalArgumentException"], "class_members": [{"name": "multiSet", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the predicated MultiSet creation and behavior, ensuring it adheres to the provided predicate."}, {"name": "testSynchronizedMultiSet", "primary_tested": ["MultiSetUtils.synchronizedMultiSet(MultiSet<String>)"], "associated_methods": ["MultiSet.add(String)"], "external_dependencies": {"modules": ["MultiSetUtils", "MultiSet"], "class_members": [{"name": "multiSet", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the synchronized MultiSet creation and behavior, ensuring it can be modified safely in a multi-threaded environment."}, {"name": "testUnmodifiableMultiSet", "primary_tested": ["MultiSetUtils.unmodifiableMultiSet(MultiSet<String>)"], "external_dependencies": {"modules": ["MultiSetUtils", "MultiSet", "UnsupportedOperationException", "NullPointerException"], "class_members": [{"name": "multiSet", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the unmodifiable MultiSet creation and behavior, ensuring it is read-only."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/TransformedMapTest.java", "testclass_name": "TransformedMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Map;", "import java.util.Set;", "import org.apache.commons.collections4.IterableMap;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.TransformerUtils;", "import org.apache.commons.collections4.collection.TransformedCollectionTest;", "import org.junit.jupiter.api.Test;"], "name": "TransformedMapTest", "description": "Unit tests for TransformedMap functionality.", "class_members": {"variables": [], "methods": [{"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "makeObject", "signature": "IterableMap<K, V> makeObject()"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testFactory_Decorate", "primary_tested": ["TransformedMap.transformingMap(Map,Transformer,Transformer)"], "associated_methods": ["Map.put(K,V)", "Map.get(Object)", "Map.size()"], "external_dependencies": {"modules": ["HashMap", "TransformedMap", "TransformedCollectionTest"], "class_members": []}, "category": "unit", "description": "Tests the factory method for decorating a map with transformers."}, {"name": "testFactory_decorateTransform", "primary_tested": ["TransformedMap.transformedMap(Map,Transformer,Transformer)"], "associated_methods": ["Map.put(K,V)", "Map.get(Object)", "Map.size()"], "external_dependencies": {"modules": ["HashMap", "TransformedMap", "TransformedCollectionTest"], "class_members": []}, "category": "unit", "description": "Tests the factory method for transforming a map with transformers."}, {"name": "testTransformedMap", "primary_tested": ["TransformedMap.transformingMap(Map,Transformer,Transformer)"], "associated_methods": ["Map.put(K,V)", "Map.get(Object)", "Map.size()", "Map.containsKey(Object)", "Map.containsValue(Object)", "Map.remove(Object)", "Map.entrySet()", "Map.Entry.setValue(V)"], "external_dependencies": {"modules": ["HashMap", "TransformedMap", "TransformedCollectionTest"], "class_members": []}, "category": "unit", "description": "Tests the functionality of TransformedMap with various transformers."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/EnumerationUtilsTest.java", "testclass_name": "EnumerationUtilsTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Enumeration;", "import java.util.Hashtable;", "import java.util.Iterator;", "import java.util.List;", "import java.util.StringTokenizer;", "import java.util.Vector;", "import org.junit.jupiter.api.Test;"], "name": "EnumerationUtilsTest", "description": "Unit tests for the EnumerationUtils class, which provides utility methods for working with Enumerations.", "class_members": {"variables": [{"name": "TO_LIST_FIXTURE", "type": "static final String"}]}, "fixtures": [], "test_cases": [{"name": "testAsIterableFor", "primary_tested": ["EnumerationUtils.asIterable(Enumeration<String>)"], "associated_methods": ["Iterator.hasNext()", "Iterator.next()"], "external_dependencies": {"modules": ["Vector", "Enumeration", "Iterator"], "class_members": []}, "category": "unit", "description": "Tests the asIterable method of EnumerationUtils to ensure it correctly converts an Enumeration to an Iterable."}, {"name": "testAsIterableForNull", "primary_tested": ["EnumerationUtils.asIterable(Enumeration<String>)"], "external_dependencies": {"modules": ["Enumeration"], "class_members": []}, "category": "unit", "description": "Tests the asIterable method of EnumerationUtils to ensure it throws a NullPointerException when given a null Enumeration."}, {"name": "testGetFromEnumeration", "primary_tested": ["EnumerationUtils.get(Enumeration<String>, int)"], "associated_methods": ["Enumeration.hasMoreElements()"], "external_dependencies": {"modules": ["Vector", "Enumeration"], "class_members": []}, "category": "unit", "description": "Tests the get method of EnumerationUtils to ensure it correctly retrieves elements from an Enumeration and handles IndexOutOfBoundsException."}, {"name": "testToListWithHashtable", "primary_tested": ["EnumerationUtils.toList(Enumeration<Integer>)", "EnumerationUtils.toList(Enumeration<String>)"], "associated_methods": ["List.contains(Object)", "List.containsAll(Collection<?>)", "List.size()"], "external_dependencies": {"modules": ["Hashtable", "Enumeration", "List", "ArrayList"], "class_members": []}, "category": "unit", "description": "Tests the toList method of EnumerationUtils to ensure it correctly converts elements and keys of a Hashtable to Lists."}, {"name": "testToListWithStringTokenizer", "primary_tested": ["EnumerationUtils.toList(Enumeration<String>)"], "associated_methods": ["StringTokenizer.hasMoreTokens()", "StringTokenizer.nextToken()", "List.add(Object)", "List.equals(Object)"], "external_dependencies": {"modules": ["StringTokenizer", "List", "ArrayList"], "class_members": [{"name": "TO_LIST_FIXTURE", "type": "variable"}]}, "category": "unit", "description": "Tests the toList method of EnumerationUtils to ensure it correctly converts a StringTokenizer to a List."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/UnmodifiableOrderedMapTest.java", "testclass_name": "UnmodifiableOrderedMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import org.apache.commons.collections4.OrderedMap;", "import org.apache.commons.collections4.Unmodifiable;", "import org.junit.jupiter.api.Test;"], "name": "UnmodifiableOrderedMapTest", "description": "Tests for the UnmodifiableOrderedMap class, focusing on its unmodifiable and factory decoration functionalities.", "class_members": {"methods": [{"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "isPutAddSupported", "signature": "boolean isPutAddSupported()"}, {"name": "isPutChangeSupported", "signature": "boolean isPutChangeSupported()"}, {"name": "isRemoveSupported", "signature": "boolean isRemoveSupported()"}, {"name": "makeFullMap", "signature": "OrderedMap<K, V> makeFullMap()"}, {"name": "makeObject", "signature": "OrderedMap<K, V> makeObject()"}]}, "test_cases": [{"name": "testDecorateFactory", "primary_tested": ["UnmodifiableOrderedMap.unmodifiableOrderedMap(OrderedMap<K, V>)"], "associated_methods": ["UnmodifiableOrderedMapTest.makeFullMap()"], "external_dependencies": {"modules": ["OrderedMap", "UnmodifiableOrderedMap", "NullPointerException"], "class_members": [{"name": "makeFullMap", "type": "method"}]}, "category": "unit", "description": "Tests the factory decoration functionality of UnmodifiableOrderedMap, ensuring it returns the same map and handles null input correctly."}, {"name": "testUnmodifiable", "primary_tested": ["UnmodifiableOrderedMap.unmodifiableOrderedMap(OrderedMap<K, V>)"], "associated_methods": ["UnmodifiableOrderedMapTest.makeObject()", "UnmodifiableOrderedMapTest.makeFullMap()"], "external_dependencies": {"modules": ["OrderedMap", "UnmodifiableOrderedMap", "Unmodifiable"], "class_members": [{"name": "makeObject", "type": "method"}, {"name": "makeFullMap", "type": "method"}]}, "category": "unit", "description": "Tests that the UnmodifiableOrderedMap instances created are indeed unmodifiable."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/LazySortedMapTest.java", "testclass_name": "LazySortedMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.apache.commons.collections4.map.LazySortedMap.lazySortedMap;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertInstanceOf;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.Comparator;", "import java.util.Map;", "import java.util.SortedMap;", "import java.util.TreeMap;", "import java.util.concurrent.ConcurrentSkipListMap;", "import org.apache.commons.collections4.Factory;", "import org.apache.commons.collections4.FactoryUtils;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.TransformerUtils;", "import org.junit.jupiter.api.Test;"], "name": "LazySortedMapTest", "description": "Unit tests for the LazySortedMap class, focusing on its functionality and behavior with different comparators and factories.", "class_members": {"variables": [{"name": "oneFactory", "type": "static final Factory<Integer>"}, {"name": "reverseStringComparator", "type": "Comparator<String>"}], "methods": [], "nested_classes": [{"name": "ReverseStringComparator", "description": "A comparator that reverses the natural order of strings."}]}, "fixtures": [], "test_cases": [{"name": "testMapGet", "primary_tested": ["LazySortedMap.get(Integer)"], "external_dependencies": {"modules": ["TreeMap", "FactoryUtils"], "class_members": [{"name": "oneFactory", "type": "variable"}]}, "category": "unit", "description": "Tests the get method of LazySortedMap to ensure it correctly creates and retrieves entries using the provided factory."}, {"name": "testReverseSortOrder", "primary_tested": ["LazySortedMap.lastKey()", "LazySortedMap.firstKey()", "LazySortedMap.tailMap(String).firstKey()", "LazySortedMap.headMap(String).lastKey()", "LazySortedMap.subMap(String,String).lastKey()", "LazySortedMap.comparator()"], "associated_methods": ["LazySortedMap.put(String,Number)", "LazySortedMap.get(String)"], "external_dependencies": {"modules": ["ConcurrentSkipListMap", "FactoryUtils"], "class_members": [{"name": "oneFactory", "type": "variable"}, {"name": "reverseStringComparator", "type": "variable"}]}, "category": "unit", "description": "Tests the sorting order of LazySortedMap when using a reverse string comparator, ensuring keys are ordered correctly."}, {"name": "testSortOrder", "primary_tested": ["LazySortedMap.firstKey()", "LazySortedMap.lastKey()", "LazySortedMap.tailMap(String).firstKey()", "LazySortedMap.headMap(String).lastKey()", "LazySortedMap.subMap(String,String).lastKey()", "LazySortedMap.comparator()"], "associated_methods": ["LazySortedMap.put(String,Number)", "LazySortedMap.get(String)"], "external_dependencies": {"modules": ["TreeMap", "FactoryUtils"], "class_members": [{"name": "oneFactory", "type": "variable"}]}, "category": "unit", "description": "Tests the natural sorting order of LazySortedMap, ensuring keys are ordered correctly."}, {"name": "testTransformerDecorate", "primary_tested": ["LazySortedMap.lazySortedMap(TreeMap,Transformer)"], "external_dependencies": {"modules": ["TreeMap", "TransformerUtils", "FactoryUtils"], "class_members": [{"name": "oneFactory", "type": "variable"}], "project_specific_resources": ["TransformerUtils.asTransformer(Factory)"]}, "category": "unit", "description": "Tests the decoration of LazySortedMap with a transformer, ensuring correct behavior and handling of null inputs."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/PredicatedCollectionBuilderTest.java", "testclass_name": "PredicatedCollectionBuilderTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.List;", "import java.util.Queue;", "import java.util.Set;", "import org.apache.commons.collections4.Bag;", "import org.apache.commons.collections4.Predicate;", "import org.junit.jupiter.api.Test;"], "name": "PredicatedCollectionBuilderTest", "description": "Tests for the PredicatedCollectionBuilder class, focusing on the behavior of collections with predicates.", "class_members": {"variables": [], "methods": [{"name": "checkPredicatedCollection1", "signature": "void checkPredicatedCollection1(Collection<String>)"}, {"name": "checkPredicatedCollection2", "signature": "void checkPredicatedCollection2(Collection<Integer>)"}], "nested_classes": [{"name": "OddPredicate", "description": "Internal predicate class for evaluating odd integers"}]}, "fixtures": [], "test_cases": [{"name": "testAddAllPass", "primary_tested": ["PredicatedCollection.Builder.addAll(Collection<String>)"], "external_dependencies": {"modules": ["PredicatedCollection", "Arrays"], "class_members": []}, "category": "unit", "description": "Verify that only items that pass the Predicate end up in the buffer."}, {"name": "testAddFail", "primary_tested": ["PredicatedCollection.Builder.add(String)"], "external_dependencies": {"modules": ["PredicatedCollection"], "class_members": []}, "category": "unit", "description": "Verify that failing the Predicate means NOT ending up in the buffer."}, {"name": "testAddPass", "primary_tested": ["PredicatedCollection.Builder.add(String)"], "external_dependencies": {"modules": ["PredicatedCollection"], "class_members": []}, "category": "unit", "description": "Verify that passing the Predicate means ending up in the buffer."}, {"name": "testCreatePredicatedCollectionWithNotNullPredicate", "primary_tested": ["PredicatedCollection.Builder.createPredicatedList()", "PredicatedCollection.Builder.createPredicatedSet()", "PredicatedCollection.Builder.createPredicatedBag()", "PredicatedCollection.Builder.createPredicatedQueue()"], "associated_methods": ["PredicatedCollectionBuilderTest.checkPredicatedCollection1(Collection<String>)"], "external_dependencies": {"modules": ["PredicatedCollection", "List", "Set", "Bag", "Queue"], "class_members": [{"name": "checkPredicatedCollection1", "type": "method"}]}, "category": "unit", "description": "Test creating predicated collections with a not-null predicate."}, {"name": "testCreatePredicatedCollectionWithPredicate", "primary_tested": ["PredicatedCollection.Builder.createPredicatedList()", "PredicatedCollection.Builder.createPredicatedSet()", "PredicatedCollection.Builder.createPredicatedBag()", "PredicatedCollection.Builder.createPredicatedQueue()"], "associated_methods": ["PredicatedCollectionBuilderTest.checkPredicatedCollection2(Collection<Integer>)"], "external_dependencies": {"modules": ["PredicatedCollection", "List", "Set", "Bag", "Queue"], "class_members": [{"name": "checkPredicatedCollection2", "type": "method"}]}, "category": "unit", "description": "Test creating predicated collections with a custom predicate."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/UnmodifiableSortedMapTest.java", "testclass_name": "UnmodifiableSortedMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.SortedMap;", "import java.util.TreeMap;", "import org.apache.commons.collections4.Unmodifiable;", "import org.junit.jupiter.api.Test;"], "name": "UnmodifiableSortedMapTest", "description": "Tests for the UnmodifiableSortedMap class, focusing on its unmodifiable properties and map operations.", "class_members": {"methods": [{"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "isPutAddSupported", "signature": "boolean isPutAddSupported()"}, {"name": "isPutChangeSupported", "signature": "boolean isPutChangeSupported()"}, {"name": "isRemoveSupported", "signature": "boolean isRemoveSupported()"}, {"name": "makeFullMap", "signature": "SortedMap<K, V> makeFullMap()"}, {"name": "makeObject", "signature": "SortedMap<K, V> makeObject()"}]}, "test_cases": [{"name": "testDecorateFactory", "primary_tested": ["UnmodifiableSortedMap.unmodifiableSortedMap(SortedMap)"], "associated_methods": ["UnmodifiableSortedMap.unmodifiableSortedMap(SortedMap)"], "external_dependencies": {"modules": ["UnmodifiableSortedMap", "SortedMap", "NullPointerException"], "class_members": [{"name": "makeFullMap", "type": "method"}]}, "category": "unit", "description": "Tests the factory method for decorating a SortedMap as unmodifiable and checks for null input handling."}, {"name": "testHeadMap", "primary_tested": ["SortedMap.headMap(K)"], "associated_methods": ["SortedMap.isEmpty()"], "external_dependencies": {"modules": ["SortedMap", "TreeMap"], "class_members": [{"name": "makeFullMap", "type": "method"}]}, "category": "unit", "description": "Tests the headMap method of the SortedMap to ensure it returns the correct sub-map."}, {"name": "testSubMap", "primary_tested": ["SortedMap.subMap(K,K)"], "associated_methods": ["SortedMap.headMap(K)"], "external_dependencies": {"modules": ["SortedMap"], "class_members": [{"name": "makeFullMap", "type": "method"}]}, "category": "unit", "description": "Tests the subMap method of the SortedMap to ensure it returns the correct sub-map."}, {"name": "testTailMap", "primary_tested": ["SortedMap.tailMap(K)"], "external_dependencies": {"modules": ["SortedMap"], "class_members": [{"name": "makeFullMap", "type": "method"}]}, "category": "unit", "description": "Tests the tailMap method of the SortedMap to ensure it returns the correct sub-map."}, {"name": "testUnmodifiable", "primary_tested": ["UnmodifiableSortedMap.makeObject()"], "associated_methods": ["UnmodifiableSortedMap.makeFullMap()"], "external_dependencies": {"modules": ["Unmodifiable", "UnmodifiableSortedMap"], "class_members": [{"name": "makeObject", "type": "method"}, {"name": "makeFullMap", "type": "method"}]}, "category": "unit", "description": "Tests that the created maps are instances of Unmodifiable."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/PredicatedMapTest.java", "testclass_name": "PredicatedMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.HashMap;", "import java.util.Iterator;", "import java.util.Map;", "import org.apache.commons.collections4.IterableMap;", "import org.apache.commons.collections4.Predicate;", "import org.apache.commons.collections4.functors.TruePredicate;", "import org.junit.jupiter.api.Test;"], "name": "PredicatedMapTest", "description": "Unit tests for the PredicatedMap class, focusing on entry set and put operations.", "class_members": {"variables": [{"name": "truePredicate", "type": "static final Predicate<Object>"}, {"name": "testPredicate", "type": "static final Predicate<Object>"}], "methods": [{"name": "decorateMap", "signature": "IterableMap<K, V> decorateMap(Map<K, V> map, Predicate<? super K> keyPredicate, Predicate<? super V> valuePredicate)"}, {"name": "makeTestMap", "signature": "IterableMap<K, V> makeTestMap()"}]}, "fixtures": [], "test_cases": [{"name": "testEntrySet", "primary_tested": ["Map.entrySet()"], "associated_methods": ["Map.put(K,V)"], "external_dependencies": {"modules": ["Map", "HashMap", "PredicatedMap"], "class_members": [{"name": "decorateMap", "type": "method"}]}, "category": "unit", "description": "Tests the entry set functionality of the PredicatedMap."}, {"name": "testPut", "primary_tested": ["Map.put(K,V)", "Map.putAll(Map<? extends K, ? extends V>)", "Map.Entry.setValue(V)"], "associated_methods": ["Map.containsKey(Object)", "Map.containsValue(Object)", "Map.entrySet()"], "external_dependencies": {"modules": ["Map", "HashMap", "PredicatedMap", "IllegalArgumentException"], "class_members": [{"name": "decorateMap", "type": "method"}]}, "category": "unit", "description": "Tests the put operation and its validation in the PredicatedMap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/functors/NullPredicateTest.java", "testclass_name": "NullPredicateTest", "dependencies": ["package org.apache.commons.collections4.functors;", "import static org.apache.commons.collections4.functors.NullPredicate.nullPredicate;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import org.apache.commons.collections4.Predicate;", "import org.junit.jupiter.api.Test;"], "name": "NullPredicateTest", "description": "Tests for the NullPredicate class in Apache Commons Collections.", "class_members": {"methods": [{"name": "generatePredicate", "signature": "Predicate<?> generatePredicate()"}]}, "fixtures": [], "test_cases": [{"name": "testEnsurePredicateCanBeTypedWithoutWarning", "primary_tested": ["NullPredicate.nullPredicate()"], "associated_methods": ["AbstractPredicateTest.assertPredicateFalse(Predicate<String>,String)"], "external_dependencies": {"modules": ["NullPredicate", "Predicate"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the NullPredicate can be typed without warnings."}, {"name": "testNullPredicate", "primary_tested": ["NullPredicate.nullPredicate()"], "associated_methods": ["AbstractPredicateTest.assertPredicateTrue(Predicate<?>,Object)"], "external_dependencies": {"modules": ["NullPredicate", "Predicate"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the functionality of the NullPredicate."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/LazyMapTest.java", "testclass_name": "LazyMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.apache.commons.collections4.map.LazyMap.lazyMap;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import java.util.HashMap;", "import java.util.Map;", "import org.apache.commons.collections4.Factory;", "import org.apache.commons.collections4.FactoryUtils;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.Test;"], "name": "LazyMapTest", "description": "Unit tests for LazyMap functionality, including map get operations with factories and transformers.", "class_members": {"variables": [{"name": "oneFactory", "type": "static final Factory<Integer>"}], "methods": [{"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "makeObject", "signature": "LazyMap<K, V> makeObject()"}]}, "fixtures": [], "test_cases": [{"name": "testMapGetWithFactory", "primary_tested": ["LazyMap.get(Object)"], "associated_methods": ["FactoryUtils.constantFactory(Integer)", "FactoryUtils.nullFactory()"], "external_dependencies": {"modules": ["HashMap", "FactoryUtils", "LazyMap"], "class_members": [{"name": "oneFactory", "type": "variable"}]}, "category": "unit", "description": "Tests the get functionality of LazyMap with a factory, ensuring the correct value is returned and the map size is updated accordingly."}, {"name": "testMapGetWithTransformer", "primary_tested": ["LazyMap.get(Object)"], "associated_methods": ["Number.intValue()"], "external_dependencies": {"modules": ["HashMap", "LazyMap"]}, "category": "unit", "description": "Tests the get functionality of LazyMap with a transformer, ensuring the correct value is returned and the map size is updated accordingly."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/IndexedCollectionTest.java", "testclass_name": "IndexedCollectionTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static java.util.Arrays.asList;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.io.Serializable;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.Test;"], "name": "IndexedCollectionTest", "description": "Unit tests for the IndexedCollection class, focusing on its indexing and retrieval functionalities.", "class_members": {"variables": [], "methods": [{"name": "decorateCollection", "signature": "Collection<String> decorateCollection(Collection<String>)"}, {"name": "decorateUniqueCollection", "signature": "IndexedCollection<Integer, String> decorateUniqueCollection(Collection<String>)"}, {"name": "getFullElements", "signature": "String[] getFullElements()"}, {"name": "getOtherElements", "signature": "String[] getOtherElements()"}, {"name": "makeConfirmedCollection", "signature": "Collection<String> makeConfirmedCollection()"}, {"name": "makeConfirmedFullCollection", "signature": "Collection<String> makeConfirmedFullCollection()"}, {"name": "makeFullCollection", "signature": "Collection<String> makeFullCollection()"}, {"name": "makeObject", "signature": "Collection<String> makeObject()"}, {"name": "makeTestCollection", "signature": "Collection<String> makeTestCollection()"}, {"name": "makeUniqueTestCollection", "signature": "Collection<String> makeUniqueTestCollection()"}, {"name": "skipSerializedCanonicalTests", "signature": "boolean skipSerializedCanonicalTests()"}], "nested_classes": [{"name": "IntegerTransformer", "description": "Internal transformer class to convert String to Integer"}]}, "fixtures": [], "test_cases": [{"name": "testAddedObjectsCanBeRetrievedByKey", "primary_tested": ["IndexedCollection.get(Integer)"], "associated_methods": ["IndexedCollection.add(String)", "IndexedCollection.addAll(Collection)"], "external_dependencies": {"modules": ["IndexedCollection", "Collection", "IntegerTransformer"], "class_members": [{"name": "makeTestCollection", "type": "method"}]}, "category": "unit", "description": "Tests that objects added to the IndexedCollection can be retrieved using their keys."}, {"name": "testDecoratedCollectionIsIndexedOnCreation", "primary_tested": ["IndexedCollection.get(Integer)"], "associated_methods": ["IndexedCollection.decorateUniqueCollection(Collection)"], "external_dependencies": {"modules": ["IndexedCollection", "Collection", "IntegerTransformer"], "class_members": [{"name": "makeFullCollection", "type": "method"}, {"name": "decorateUniqueCollection", "type": "method"}]}, "category": "unit", "description": "Tests that the decorated collection is indexed upon creation."}, {"name": "testEnsureDuplicateObjectsCauseException", "primary_tested": ["IndexedCollection.add(String)"], "associated_methods": [], "external_dependencies": {"modules": ["IndexedCollection", "Collection", "IntegerTransformer"], "class_members": [{"name": "makeUniqueTestCollection", "type": "method"}]}, "category": "unit", "description": "Tests that adding duplicate objects to a unique indexed collection causes an exception."}, {"name": "testReindexUpdatesIndexWhenDecoratedCollectionIsModifiedSeparately", "primary_tested": ["IndexedCollection.reindex()"], "associated_methods": ["IndexedCollection.get(Integer)", "IndexedCollection.add(String)"], "external_dependencies": {"modules": ["IndexedCollection", "Collection", "IntegerTransformer"], "class_members": [{"name": "decorateUniqueCollection", "type": "method"}]}, "category": "unit", "description": "Tests that reindexing updates the index when the decorated collection is modified separately."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/TransformingComparatorTest.java", "testclass_name": "TransformingComparatorTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Comparator;", "import java.util.LinkedList;", "import java.util.List;", "import org.apache.commons.collections4.ComparatorUtils;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.TransformerUtils;", "import org.junit.jupiter.api.Test;"], "name": "TransformingComparatorTest", "description": "Unit tests for the TransformingComparator class.", "class_members": {"variables": [], "methods": [{"name": "getComparableObjectsOrdered", "signature": "List<Integer> getComparableObjectsOrdered()"}, {"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "makeObject", "signature": "Comparator<Integer> makeObject()"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testEquals", "primary_tested": ["TransformingComparator.equals(Object)", "TransformingComparator.hashCode()"], "associated_methods": [], "external_dependencies": {"modules": ["TransformerUtils", "TransformingComparator"], "class_members": [], "project_specific_resources": ["TransformerUtils.nopTransformer()"]}, "category": "unit", "fixtures_used": [], "description": "Tests the equals and hashCode methods of TransformingComparator to ensure they adhere to the equals-hashCode contract."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/SplitMapUtilsTest.java", "testclass_name": "SplitMapUtilsTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertInstanceOf;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Map;", "import org.apache.commons.collections4.functors.NOPTransformer;", "import org.apache.commons.collections4.map.HashedMap;", "import org.apache.commons.collections4.splitmap.TransformedSplitMap;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SplitMapUtilsTest", "description": "Unit tests for the SplitMapUtils class, focusing on the functionality of readable and writable maps.", "class_members": {"variables": [{"name": "backingMap", "type": "Map<String, Integer>"}, {"name": "transformedMap", "type": "TransformedSplitMap<String, String, String, Integer>"}, {"name": "stringToInt", "type": "Transformer<String, Integer>"}], "methods": [{"name": "attemptGetOperation", "signature": "void attemptGetOperation(Runnable)"}, {"name": "attemptPutOperation", "signature": "void attemptPutOperation(Runnable)"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAlreadyReadableMap", "primary_tested": ["SplitMapUtils.readableMap(Map)"], "external_dependencies": {"modules": ["HashedMap", "SplitMapUtils"], "class_members": [{"name": "backingMap", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests that a map is already readable when passed to SplitMapUtils.readableMap."}, {"name": "testAlreadyWritableMap", "primary_tested": ["SplitMapUtils.writableMap(Map)"], "external_dependencies": {"modules": ["HashedMap", "SplitMapUtils"], "class_members": [{"name": "backingMap", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests that a map is already writable when passed to SplitMapUtils.writableMap."}, {"name": "testReadableMap", "primary_tested": ["SplitMapUtils.readableMap(TransformedSplitMap)"], "associated_methods": ["IterableMap.containsValue(Object)", "IterableMap.get(Object)", "MapIterator.hasNext()", "MapIterator.next()", "MapIterator.getKey()", "MapIterator.getValue()", "Unmodifiable.class", "IterableMap.size()", "IterableMap.remove(Object)", "IterableMap.isEmpty()"], "external_dependencies": {"modules": ["SplitMapUtils", "IterableMap", "MapIterator", "Unmodifiable"], "class_members": [{"name": "transformedMap", "type": "variable"}, {"name": "attemptPutOperation", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the functionality of a readable map created by SplitMapUtils.readableMap, including basic operations, mapIterator, unmodifiable checks, and individual operations."}, {"name": "testWritableMap", "primary_tested": ["SplitMapUtils.writableMap(TransformedSplitMap)"], "associated_methods": ["Map.get(Object)", "Map.entrySet()", "Map.keySet()", "Map.values()", "Map.size()", "Map.isEmpty()", "Map.containsKey(Object)", "Map.containsValue(Object)", "Map.remove(Object)", "Map.put(Object, Object)", "Map.putAll(Map)", "Map.clear()"], "external_dependencies": {"modules": ["SplitMapUtils", "Map"], "class_members": [{"name": "transformedMap", "type": "variable"}, {"name": "attemptGetOperation", "type": "method"}, {"name": "backingMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the functionality of a writable map created by SplitMapUtils.writableMap, including get operations, put operations, and clear operations."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/LinkedMapTest.java", "testclass_name": "LinkedMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import java.util.ArrayList;", "import java.util.Iterator;", "import java.util.List;", "import java.util.Map;", "import org.apache.commons.collections4.BulkTest;", "import org.apache.commons.collections4.MapIterator;", "import org.apache.commons.collections4.OrderedMap;", "import org.apache.commons.collections4.ResettableIterator;", "import org.apache.commons.collections4.list.AbstractListTest;", "import org.junit.jupiter.api.Test;"], "name": "LinkedMapTest", "description": "Unit tests for LinkedMap operations and functionalities.", "class_members": {"variables": [], "methods": [{"name": "bulkTestListView", "signature": "public BulkTest bulkTestListView()"}, {"name": "getCompatibilityVersion", "signature": "public String getCompatibilityVersion()"}, {"name": "getMap", "signature": "public LinkedMap<K, V> getMap()"}, {"name": "makeFullMap", "signature": "public LinkedMap<K, V> makeFullMap()"}, {"name": "makeObject", "signature": "public LinkedMap<K, V> makeObject()"}], "nested_classes": [{"name": "TestListView", "description": "Internal test class for list view operations"}]}, "fixtures": [], "test_cases": [{"name": "testClone", "primary_tested": ["LinkedMap.clone()"], "external_dependencies": {"modules": ["LinkedMap", "Map"], "class_members": []}, "category": "unit", "description": "Tests the cloning functionality of the LinkedMap."}, {"name": "testGetByIndex", "primary_tested": ["LinkedMap.get(int)"], "associated_methods": ["LinkedMap.mapIterator()"], "external_dependencies": {"modules": ["LinkedMap", "MapIterator", "IndexOutOfBoundsException"], "class_members": []}, "category": "unit", "description": "Tests the get by index functionality of the LinkedMap."}, {"name": "testGetValueByIndex", "primary_tested": ["LinkedMap.getValue(int)"], "associated_methods": ["LinkedMap.mapIterator()"], "external_dependencies": {"modules": ["LinkedMap", "MapIterator", "IndexOutOfBoundsException"], "class_members": []}, "category": "unit", "description": "Tests the getValue by index functionality of the LinkedMap."}, {"name": "testIndexOf", "primary_tested": ["LinkedMap.indexOf(Object)"], "associated_methods": ["LinkedMap.mapIterator()"], "external_dependencies": {"modules": ["LinkedMap", "MapIterator", "ArrayList"], "class_members": []}, "category": "unit", "description": "Tests the indexOf functionality of the LinkedMap."}, {"name": "testInitialCapacityZero", "primary_tested": ["LinkedMap.LinkedMap(int)"], "external_dependencies": {"modules": ["LinkedMap"], "class_members": []}, "category": "unit", "description": "Tests the initial capacity zero functionality of the LinkedMap."}, {"name": "testInsertionOrder", "primary_tested": ["LinkedMap.put(K,V)", "LinkedMap.keySet()", "LinkedMap.values()"], "associated_methods": ["LinkedMap.mapIterator()"], "external_dependencies": {"modules": ["LinkedMap", "MapIterator", "Iterator"], "class_members": []}, "category": "unit", "description": "Tests the insertion order functionality of the LinkedMap."}, {"name": "testRemoveByIndex", "primary_tested": ["LinkedMap.remove(int)"], "associated_methods": ["LinkedMap.mapIterator()"], "external_dependencies": {"modules": ["LinkedMap", "MapIterator", "IndexOutOfBoundsException", "ArrayList"], "class_members": []}, "category": "unit", "description": "Tests the remove by index functionality of the LinkedMap."}, {"name": "testReset", "primary_tested": ["ResettableIterator.reset()"], "associated_methods": ["LinkedMap.mapIterator()"], "external_dependencies": {"modules": ["LinkedMap", "ResettableIterator", "ArrayList"], "class_members": []}, "category": "unit", "description": "Tests the reset functionality of the ResettableIterator in LinkedMap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/MultiMapUtilsTest.java", "testclass_name": "MultiMapUtilsTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.List;", "import java.util.Set;", "import org.apache.commons.collections4.multimap.ArrayListValuedHashMap;", "import org.junit.jupiter.api.Test;"], "name": "MultiMapUtilsTest", "description": "Unit tests for the MultiMapUtils class, which provides utility methods for MultiValuedMap operations.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testEmptyIfNull", "primary_tested": ["MultiMapUtils.emptyIfNull(MultiValuedMap)"], "external_dependencies": {"modules": ["MultiMapUtils", "ArrayListValuedHashMap"]}, "category": "unit", "description": "Tests the emptyIfNull method to ensure it returns an empty map if the input is null, and the original map otherwise."}, {"name": "testEmptyUnmodifiableMultiValuedMap", "primary_tested": ["MultiMapUtils.EMPTY_MULTI_VALUED_MAP"], "external_dependencies": {"modules": ["MultiMapUtils"]}, "category": "unit", "description": "Tests the EMPTY_MULTI_VALUED_MAP to ensure it is empty and unmodifiable."}, {"name": "testGetCollection", "primary_tested": ["MultiMapUtils.getCollection(MultiValuedMap,String)"], "external_dependencies": {"modules": ["MultiMapUtils", "ArrayListValuedHashMap"]}, "category": "unit", "description": "Tests the getCollection method to ensure it retrieves the correct collection of values for a given key."}, {"name": "testGetValuesAsBag", "primary_tested": ["MultiMapUtils.getValuesAsBag(MultiValuedMap,String)"], "external_dependencies": {"modules": ["MultiMapUtils", "ArrayListValuedHashMap"]}, "category": "unit", "description": "Tests the getValuesAsBag method to ensure it retrieves the correct bag of values for a given key."}, {"name": "testGetValuesAsList", "primary_tested": ["MultiMapUtils.getValuesAsList(MultiValuedMap,String)"], "external_dependencies": {"modules": ["MultiMapUtils", "ArrayListValuedHashMap"]}, "category": "unit", "description": "Tests the getValuesAsList method to ensure it retrieves the correct list of values for a given key."}, {"name": "testGetValuesAsSet", "primary_tested": ["MultiMapUtils.getValuesAsSet(MultiValuedMap,String)"], "external_dependencies": {"modules": ["MultiMapUtils", "ArrayListValuedHashMap"]}, "category": "unit", "description": "Tests the getValuesAsSet method to ensure it retrieves the correct set of values for a given key."}, {"name": "testIsEmptyWithEmptyMap", "primary_tested": ["MultiMapUtils.isEmpty(MultiValuedMap)"], "external_dependencies": {"modules": ["MultiMapUtils", "ArrayListValuedHashMap"]}, "category": "unit", "description": "Tests the isEmpty method to ensure it returns true for an empty map."}, {"name": "testIsEmptyWithNonEmptyMap", "primary_tested": ["MultiMapUtils.isEmpty(MultiValuedMap)"], "external_dependencies": {"modules": ["MultiMapUtils", "ArrayListValuedHashMap"]}, "category": "unit", "description": "Tests the isEmpty method to ensure it returns false for a non-empty map."}, {"name": "testIsEmptyWithNull", "primary_tested": ["MultiMapUtils.isEmpty(MultiValuedMap)"], "external_dependencies": {"modules": ["MultiMapUtils"]}, "category": "unit", "description": "Tests the isEmpty method to ensure it returns true for a null map."}, {"name": "testTypeSafeEmptyMultiValuedMap", "primary_tested": ["MultiMapUtils.emptyMultiValuedMap()"], "external_dependencies": {"modules": ["MultiMapUtils"]}, "category": "unit", "description": "Tests the emptyMultiValuedMap method to ensure it returns an empty and unmodifiable map."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/ReverseComparatorTest.java", "testclass_name": "ReverseComparatorTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import java.io.ByteArrayInputStream;", "import java.io.ByteArrayOutputStream;", "import java.io.ObjectInputStream;", "import java.io.ObjectOutputStream;", "import java.util.Collections;", "import java.util.Comparator;", "import java.util.LinkedList;", "import java.util.List;", "import org.junit.jupiter.api.Test;"], "name": "ReverseComparatorTest", "description": "Tests for the ReverseComparator class, which reverses the order of a given comparator.", "class_members": {"variables": [], "methods": [{"name": "getComparableObjectsOrdered", "signature": "List<Integer> getComparableObjectsOrdered()"}, {"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "makeObject", "signature": "Comparator<Integer> makeObject()"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testSerializeDeserializeThenCompare", "primary_tested": ["ReverseComparator.ReverseComparator(Comparator)"], "associated_methods": ["ReverseComparator.equals(Object)"], "external_dependencies": {"modules": ["ReverseComparator", "ComparableComparator", "ByteArrayOutputStream", "ObjectOutputStream", "ByteArrayInputStream", "ObjectInputStream"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the serialization and deserialization of a ReverseComparator, ensuring that the deserialized object is equal to the original."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/TransformedSortedMapTest.java", "testclass_name": "TransformedSortedMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Map;", "import java.util.Set;", "import java.util.SortedMap;", "import java.util.TreeMap;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.TransformerUtils;", "import org.apache.commons.collections4.collection.TransformedCollectionTest;", "import org.junit.jupiter.api.Test;"], "name": "TransformedSortedMapTest", "description": "Unit tests for TransformedSortedMap functionality.", "class_members": {"variables": [], "methods": [{"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "ignoredTests", "signature": "String[] ignoredTests()"}, {"name": "isSubMapViewsSerializable", "signature": "boolean isSubMapViewsSerializable()"}, {"name": "makeObject", "signature": "SortedMap<K, V> makeObject()"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testFactory_Decorate", "primary_tested": ["TransformedSortedMap.transformingSortedMap(SortedMap,Transformer,Transformer)"], "associated_methods": ["SortedMap.put(K,V)", "SortedMap.get(Object)", "SortedMap.size()"], "external_dependencies": {"modules": ["TreeMap", "TransformedSortedMap", "TransformedCollectionTest", "TransformerUtils"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the factory method for decorating a SortedMap with transformers."}, {"name": "testFactory_decorateTransform", "primary_tested": ["TransformedSortedMap.transformedSortedMap(SortedMap,Transformer,Transformer)"], "associated_methods": ["SortedMap.put(K,V)", "SortedMap.get(Object)", "SortedMap.size()"], "external_dependencies": {"modules": ["TreeMap", "TransformedSortedMap", "TransformedCollectionTest", "TransformerUtils"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the factory method for transforming a SortedMap with transformers."}, {"name": "testTransformedMap", "primary_tested": ["TransformedSortedMap.transformingSortedMap(SortedMap,Transformer,Transformer)"], "associated_methods": ["SortedMap.put(K,V)", "SortedMap.get(Object)", "SortedMap.size()", "SortedMap.containsKey(Object)", "SortedMap.containsValue(Object)", "SortedMap.remove(Object)", "SortedMap.entrySet()"], "external_dependencies": {"modules": ["TreeMap", "TransformedSortedMap", "TransformedCollectionTest", "TransformerUtils"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the functionality of TransformedSortedMap with various transformations."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/UnmodifiableMapTest.java", "testclass_name": "UnmodifiableMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Map;", "import org.apache.commons.collections4.IterableMap;", "import org.apache.commons.collections4.Unmodifiable;", "import org.junit.jupiter.api.Test;"], "name": "UnmodifiableMapTest", "description": "Tests for the UnmodifiableMap class, focusing on its unmodifiable behavior and factory decoration.", "class_members": {"methods": [{"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "isPutAddSupported", "signature": "boolean isPutAddSupported()"}, {"name": "isPutChangeSupported", "signature": "boolean isPutChangeSupported()"}, {"name": "isRemoveSupported", "signature": "boolean isRemoveSupported()"}, {"name": "makeFullMap", "signature": "IterableMap<K, V> makeFullMap()"}, {"name": "makeObject", "signature": "IterableMap<K, V> makeObject()"}]}, "fixtures": [], "test_cases": [{"name": "testDecorateFactory", "primary_tested": ["UnmodifiableMap.unmodifiableMap(Map<K, V>)"], "external_dependencies": {"modules": ["UnmodifiableMap", "Map"], "class_members": [{"name": "makeFullMap", "type": "method"}]}, "category": "unit", "description": "Tests the factory decoration of UnmodifiableMap, ensuring it returns the same instance and handles null input correctly."}, {"name": "testUnmodifiable", "primary_tested": ["UnmodifiableMap.unmodifiableMap(Map<K, V>)"], "associated_methods": ["UnmodifiableMap.makeObject()", "UnmodifiableMap.makeFullMap()"], "external_dependencies": {"modules": ["UnmodifiableMap", "Unmodifiable"], "class_members": [{"name": "makeObject", "type": "method"}, {"name": "makeFullMap", "type": "method"}]}, "category": "unit", "description": "Tests that the UnmodifiableMap instances created are indeed unmodifiable."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/CaseInsensitiveMapTest.java", "testclass_name": "CaseInsensitiveMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Locale;", "import java.util.Map;", "import java.util.Set;", "import org.apache.commons.lang3.StringUtils;", "import org.junit.jupiter.api.Test;"], "name": "CaseInsensitiveMapTest", "description": "Unit tests for the CaseInsensitiveMap class, focusing on case insensitivity, cloning, initial capacity, locale independence, null handling, and putAll functionality.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testCaseInsensitive", "primary_tested": ["CaseInsensitiveMap.put(K,V)", "CaseInsensitiveMap.get(Object)"], "external_dependencies": {"modules": ["CaseInsensitiveMap", "Map"], "class_members": []}, "category": "unit", "description": "Tests the case insensitivity of the CaseInsensitiveMap by adding keys with different cases and verifying retrieval."}, {"name": "testClone", "primary_tested": ["CaseInsensitiveMap.clone()"], "external_dependencies": {"modules": ["CaseInsensitiveMap"], "class_members": []}, "category": "unit", "description": "Tests the cloning functionality of the CaseInsensitiveMap by verifying the size and content of the cloned map."}, {"name": "testInitialCapacityZero", "primary_tested": ["CaseInsensitiveMap.CaseInsensitiveMap(int)"], "external_dependencies": {"modules": ["CaseInsensitiveMap"], "class_members": []}, "category": "unit", "description": "Tests the initial capacity of the CaseInsensitiveMap when set to zero."}, {"name": "testLocaleIndependence", "primary_tested": ["CaseInsensitiveMap.put(K,V)", "CaseInsensitiveMap.get(Object)"], "external_dependencies": {"modules": ["CaseInsensitiveMap", "Locale", "StringUtils"], "class_members": []}, "category": "unit", "description": "Tests the locale independence of the CaseInsensitiveMap by verifying case insensitivity across different locales."}, {"name": "testNullHandling", "primary_tested": ["CaseInsensitiveMap.put(K,V)", "CaseInsensitiveMap.get(Object)", "CaseInsensitiveMap.keySet()"], "external_dependencies": {"modules": ["CaseInsensitiveMap", "Map", "Set"], "class_members": []}, "category": "unit", "description": "Tests the handling of null keys in the CaseInsensitiveMap."}, {"name": "testPutAll", "primary_tested": ["CaseInsensitiveMap.CaseInsensitiveMap(Map)", "CaseInsensitiveMap.keySet()", "CaseInsensitiveMap.containsValue(Object)", "CaseInsensitiveMap.get(Object)"], "external_dependencies": {"modules": ["CaseInsensitiveMap", "HashMap", "Map", "Set"], "class_members": []}, "category": "unit", "description": "Tests the putAll functionality of the CaseInsensitiveMap by verifying the size and content after adding entries from another map."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/IteratorEnumerationTest.java", "testclass_name": "IteratorEnumerationTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Arrays;", "import java.util.Iterator;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.Test;"], "name": "IteratorEnumerationTest", "description": "Unit tests for the IteratorEnumeration class.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testEnumeration", "primary_tested": ["IteratorEnumeration.getIterator()", "IteratorEnumeration.hasMoreElements()", "IteratorEnumeration.nextElement()"], "associated_methods": [], "external_dependencies": {"modules": ["Arrays", "Iterator", "NoSuchElementException"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the functionality of the IteratorEnumeration class, including getting the iterator, checking for more elements, and retrieving the next element. Also tests the behavior when there are no more elements."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap2Test.java", "testclass_name": "ListOrderedMap2Test", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import java.util.ArrayList;", "import java.util.List;", "import org.apache.commons.collections4.BulkTest;", "import org.apache.commons.collections4.MapIterator;", "import org.apache.commons.collections4.list.AbstractListTest;", "import org.junit.jupiter.api.Test;"], "name": "ListOrderedMap2Test", "description": "Unit tests for ListOrderedMap2 class, focusing on index-based operations and value retrieval.", "class_members": {"variables": [], "methods": [{"name": "bulkTestListView", "signature": "BulkTest bulkTestListView()"}, {"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "getMap", "signature": "ListOrderedMap<K, V> getMap()"}, {"name": "makeFullMap", "signature": "ListOrderedMap<K, V> makeFullMap()"}, {"name": "makeObject", "signature": "ListOrderedMap<K, V> makeObject()"}], "nested_classes": [{"name": "TestListView", "description": "Internal test view class extending AbstractListTest"}]}, "fixtures": [], "test_cases": [{"name": "testGetByIndex", "primary_tested": ["ListOrderedMap.get(int)"], "external_dependencies": {"modules": ["ListOrderedMap", "MapIterator", "IndexOutOfBoundsException"], "class_members": [{"name": "getMap", "type": "method"}]}, "category": "unit", "description": "Tests the get method by index, ensuring it handles out-of-bounds indices correctly and retrieves elements correctly."}, {"name": "testGetValueByIndex", "primary_tested": ["ListOrderedMap.getValue(int)"], "external_dependencies": {"modules": ["ListOrderedMap", "MapIterator", "IndexOutOfBoundsException"], "class_members": [{"name": "getMap", "type": "method"}]}, "category": "unit", "description": "Tests the getValue method by index, ensuring it handles out-of-bounds indices correctly and retrieves values correctly."}, {"name": "testIndexOf", "primary_tested": ["ListOrderedMap.indexOf(Object)"], "external_dependencies": {"modules": ["ListOrderedMap", "MapIterator", "ArrayList"], "class_members": [{"name": "getMap", "type": "method"}]}, "category": "unit", "description": "Tests the indexOf method, ensuring it returns the correct index for elements and handles non-existent elements correctly."}, {"name": "testRemoveByIndex", "primary_tested": ["ListOrderedMap.remove(int)"], "external_dependencies": {"modules": ["ListOrderedMap", "MapIterator", "IndexOutOfBoundsException", "ArrayList"], "class_members": [{"name": "getMap", "type": "method"}]}, "category": "unit", "description": "Tests the remove method by index, ensuring it handles out-of-bounds indices correctly and removes elements correctly."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/functors/EqualPredicateTest.java", "testclass_name": "EqualPredicateTest", "dependencies": ["package org.apache.commons.collections4.functors;", "import static org.apache.commons.collections4.functors.EqualPredicate.equalPredicate;", "import static org.apache.commons.collections4.functors.NullPredicate.nullPredicate;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import org.apache.commons.collections4.Predicate;", "import org.junit.jupiter.api.Test;"], "name": "EqualPredicateTest", "description": "Tests for the EqualPredicate class in Apache Commons Collections, focusing on equality checks and predicate behavior.", "class_members": {"variables": [{"name": "FALSE_OBJECT", "type": "static final EqualsTestObject"}, {"name": "TRUE_OBJECT", "type": "static final EqualsTestObject"}], "nested_classes": [{"name": "EqualsTestObject", "description": "Internal test object class used for equality testing"}]}, "fixtures": [], "test_cases": [{"name": "testNullArgumentEqualsNullPredicate", "primary_tested": ["EqualPredicate.equalPredicate(Object)"], "associated_methods": ["NullPredicate.nullPredicate()"], "external_dependencies": {"modules": ["EqualPredicate", "NullPredicate"]}, "category": "unit", "description": "Tests if passing null to equalPredicate returns the same instance as nullPredicate."}, {"name": "testObjectFactoryUsesEqualsForTest", "primary_tested": ["EqualPredicate.equalPredicate(EqualsTestObject)"], "associated_methods": ["AbstractPredicateTest.assertPredicateFalse(Predicate,EqualsTestObject)", "AbstractPredicateTest.assertPredicateTrue(Predicate,EqualsTestObject)"], "external_dependencies": {"modules": ["EqualPredicate", "AbstractPredicateTest"], "class_members": [{"name": "FALSE_OBJECT", "type": "variable"}, {"name": "TRUE_OBJECT", "type": "variable"}]}, "category": "unit", "description": "Tests if the EqualPredicate uses the equals method for comparison with test objects."}, {"name": "testPredicateTypeCanBeSuperClassOfObject", "primary_tested": ["EqualPredicate.equalPredicate(Number)"], "associated_methods": ["AbstractPredicateTest.assertPredicateTrue(Predicate,Number)"], "external_dependencies": {"modules": ["EqualPredicate", "AbstractPredicateTest"]}, "category": "unit", "description": "Tests if the predicate type can be a superclass of the object type."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/BagUtilsTest.java", "testclass_name": "BagUtilsTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertInstanceOf;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import org.apache.commons.collections4.bag.HashBag;", "import org.apache.commons.collections4.bag.PredicatedBag;", "import org.apache.commons.collections4.bag.PredicatedSortedBag;", "import org.apache.commons.collections4.bag.SynchronizedBag;", "import org.apache.commons.collections4.bag.SynchronizedSortedBag;", "import org.apache.commons.collections4.bag.TransformedBag;", "import org.apache.commons.collections4.bag.TransformedSortedBag;", "import org.apache.commons.collections4.bag.TreeBag;", "import org.apache.commons.collections4.bag.UnmodifiableBag;", "import org.apache.commons.collections4.bag.UnmodifiableSortedBag;", "import org.apache.commons.collections4.functors.TruePredicate;", "import org.junit.jupiter.api.Test;"], "name": "BagUtilsTest", "description": "Unit tests for various utility methods in BagUtils class.", "class_members": {"variables": [{"name": "truePredicate", "type": "Predicate<Object>"}, {"name": "nopTransformer", "type": "Transformer<Object, Object>"}]}, "fixtures": [], "test_cases": [{"name": "testPredicatedBag", "primary_tested": ["BagUtils.predicatedBag(Bag,Predicate)"], "associated_methods": ["PredicatedBag.predicatedBag(Bag,Predicate)"], "external_dependencies": {"modules": ["HashBag", "PredicatedBag", "TruePredicate"], "class_members": [{"name": "truePredicate", "type": "variable"}]}, "category": "unit", "description": "Tests the predicatedBag method in BagUtils to ensure it returns a PredicatedBag and handles null inputs correctly."}, {"name": "testPredicatedSortedBag", "primary_tested": ["BagUtils.predicatedSortedBag(SortedBag,Predicate)"], "associated_methods": ["PredicatedSortedBag.predicatedSortedBag(SortedBag,Predicate)"], "external_dependencies": {"modules": ["TreeBag", "PredicatedSortedBag", "TruePredicate"], "class_members": [{"name": "truePredicate", "type": "variable"}]}, "category": "unit", "description": "Tests the predicatedSortedBag method in BagUtils to ensure it returns a PredicatedSortedBag and handles null inputs correctly."}, {"name": "testSynchronizedBag", "primary_tested": ["BagUtils.synchronizedBag(Bag)"], "associated_methods": ["SynchronizedBag.synchronizedBag(Bag)"], "external_dependencies": {"modules": ["HashBag", "SynchronizedBag"]}, "category": "unit", "description": "Tests the synchronizedBag method in BagUtils to ensure it returns a SynchronizedBag and handles null inputs correctly."}, {"name": "testSynchronizedSortedBag", "primary_tested": ["BagUtils.synchronizedSortedBag(SortedBag)"], "associated_methods": ["SynchronizedSortedBag.synchronizedSortedBag(SortedBag)"], "external_dependencies": {"modules": ["TreeBag", "SynchronizedSortedBag"]}, "category": "unit", "description": "Tests the synchronizedSortedBag method in BagUtils to ensure it returns a SynchronizedSortedBag and handles null inputs correctly."}, {"name": "testTransformedBag", "primary_tested": ["BagUtils.transformingBag(Bag,Transformer)"], "associated_methods": ["TransformedBag.transformingBag(Bag,Transformer)"], "external_dependencies": {"modules": ["HashBag", "TransformedBag", "TransformerUtils"], "class_members": [{"name": "nopTransformer", "type": "variable"}]}, "category": "unit", "description": "Tests the transformingBag method in BagUtils to ensure it returns a TransformedBag and handles null inputs correctly."}, {"name": "testTransformedSortedBag", "primary_tested": ["BagUtils.transformingSortedBag(SortedBag,Transformer)"], "associated_methods": ["TransformedSortedBag.transformingSortedBag(SortedBag,Transformer)"], "external_dependencies": {"modules": ["TreeBag", "TransformedSortedBag", "TransformerUtils"], "class_members": [{"name": "nopTransformer", "type": "variable"}]}, "category": "unit", "description": "Tests the transformingSortedBag method in BagUtils to ensure it returns a TransformedSortedBag and handles null inputs correctly."}, {"name": "testUnmodifiableBag", "primary_tested": ["BagUtils.unmodifiableBag(Bag)"], "associated_methods": ["UnmodifiableBag.unmodifiableBag(Bag)"], "external_dependencies": {"modules": ["HashBag", "UnmodifiableBag"]}, "category": "unit", "description": "Tests the unmodifiableBag method in BagUtils to ensure it returns an UnmodifiableBag and handles null inputs correctly."}, {"name": "testUnmodifiableSortedBag", "primary_tested": ["BagUtils.unmodifiableSortedBag(SortedBag)"], "associated_methods": ["UnmodifiableSortedBag.unmodifiableSortedBag(SortedBag)"], "external_dependencies": {"modules": ["TreeBag", "UnmodifiableSortedBag"]}, "category": "unit", "description": "Tests the unmodifiableSortedBag method in BagUtils to ensure it returns an UnmodifiableSortedBag and handles null inputs correctly."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/BooleanComparatorTest.java", "testclass_name": "BooleanComparatorTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNotEquals;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Comparator;", "import java.util.List;", "import org.junit.jupiter.api.Test;"], "name": "BooleanComparatorTest", "description": "Unit tests for BooleanComparator class, which compares Boolean objects.", "class_members": {"methods": [{"name": "allTests", "signature": "void allTests(boolean, BooleanComparator)"}, {"name": "falseFirstTests", "signature": "void falseFirstTests(BooleanComparator)"}, {"name": "nullArgumentTests", "signature": "void nullArgumentTests(BooleanComparator)"}, {"name": "orderIndependentTests", "signature": "void orderIndependentTests(BooleanComparator)"}, {"name": "trueFirstTests", "signature": "void trueFirstTests(BooleanComparator)"}]}, "test_cases": [{"name": "testConstructors", "primary_tested": ["BooleanComparator.BooleanComparator()"], "associated_methods": ["BooleanComparatorTest.allTests(boolean,BooleanComparator)"], "external_dependencies": {"modules": ["BooleanComparator"]}, "category": "unit", "description": "Tests the constructors of BooleanComparator and their behavior."}, {"name": "testEqualsCompatibleInstance", "primary_tested": ["BooleanComparator.equals(Object)"], "associated_methods": ["BooleanComparator.getFalseFirstComparator()", "BooleanComparator.booleanComparator(boolean)", "BooleanComparator.getTrueFirstComparator()"], "external_dependencies": {"modules": ["BooleanComparator"]}, "category": "unit", "description": "Tests the equality of different instances of BooleanComparator."}, {"name": "testStaticFactoryMethods", "primary_tested": ["BooleanComparator.getFalseFirstComparator()", "BooleanComparator.booleanComparator(boolean)", "BooleanComparator.getTrueFirstComparator()"], "associated_methods": ["BooleanComparatorTest.allTests(boolean,BooleanComparator)"], "external_dependencies": {"modules": ["BooleanComparator"]}, "category": "unit", "description": "Tests the static factory methods of BooleanComparator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/SingletonMapTest.java", "testclass_name": "SingletonMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertInstanceOf;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import org.apache.commons.collections4.BoundedMap;", "import org.apache.commons.collections4.KeyValue;", "import org.apache.commons.collections4.OrderedMap;", "import org.junit.jupiter.api.Test;"], "name": "SingletonMapTest", "description": "Unit tests for the SingletonMap class, focusing on its bounded map properties, cloning, and key-value handling.", "class_members": {"variables": [{"name": "ONE", "type": "static final Integer"}, {"name": "TWO", "type": "static final Integer"}, {"name": "TEN", "type": "static final String"}], "methods": [{"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "getNewSampleValues", "signature": "V[] getNewSampleValues()"}, {"name": "getSampleKeys", "signature": "K[] getSampleKeys()"}, {"name": "getSampleValues", "signature": "V[] getSampleValues()"}, {"name": "ignoredTests", "signature": "String[] ignoredTests()"}, {"name": "isPutAddSupported", "signature": "boolean isPutAddSupported()"}, {"name": "isRemoveSupported", "signature": "boolean isRemoveSupported()"}, {"name": "makeFullMap", "signature": "SingletonMap<K, V> makeFullMap()"}, {"name": "makeObject", "signature": "OrderedMap<K, V> makeObject()"}]}, "fixtures": [], "test_cases": [{"name": "testBoundedMap", "primary_tested": ["SingletonMap.size()", "SingletonMap.isFull()", "SingletonMap.maxSize()"], "associated_methods": ["SingletonMap.makeFullMap()"], "external_dependencies": {"modules": ["SingletonMap", "BoundedMap"], "class_members": [{"name": "makeFullMap", "type": "method"}]}, "category": "unit", "description": "Tests the bounded map properties of SingletonMap, including size, fullness, and max size."}, {"name": "testClone", "primary_tested": ["SingletonMap.clone()"], "associated_methods": ["SingletonMap.makeFullMap()"], "external_dependencies": {"modules": ["SingletonMap"], "class_members": [{"name": "makeFullMap", "type": "method"}]}, "category": "unit", "description": "Tests the cloning functionality of SingletonMap, ensuring the cloned map contains the same key-value pairs."}, {"name": "testKeyValue", "primary_tested": ["SingletonMap.getKey()", "SingletonMap.getValue()"], "associated_methods": ["SingletonMap.makeFullMap()"], "external_dependencies": {"modules": ["SingletonMap", "KeyValue"], "class_members": [{"name": "makeFullMap", "type": "method"}]}, "category": "unit", "description": "Tests the key-value handling of SingletonMap, ensuring the correct key and value are retrieved."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/functors/ComparatorPredicateTest.java", "testclass_name": "ComparatorPredicateTest", "dependencies": ["package org.apache.commons.collections4.functors;", "import static org.apache.commons.collections4.functors.ComparatorPredicate.comparatorPredicate;", "import java.util.Comparator;", "import org.apache.commons.collections4.Predicate;", "import org.apache.commons.collections4.functors.ComparatorPredicate.Criterion;", "import org.junit.jupiter.api.Test;"], "name": "ComparatorPredicateTest", "description": "Unit tests for the ComparatorPredicate class, which tests various comparison criteria using a custom comparator.", "class_members": {"nested_classes": [{"name": "TestComparator", "description": "Internal custom comparator class for testing purposes."}]}, "fixtures": [], "test_cases": [{"name": "testCompareEquals", "primary_tested": ["ComparatorPredicate.comparatorPredicate(Integer,TestComparator)"], "external_dependencies": {"modules": ["Integer", "Predicate", "ComparatorPredicate"], "class_members": [{"name": "TestComparator", "type": "nested_class"}]}, "category": "unit", "description": "Tests the equality comparison functionality of the ComparatorPredicate."}, {"name": "testCompareGreater", "primary_tested": ["ComparatorPredicate.comparatorPredicate(Integer,TestComparator,Criterion)"], "external_dependencies": {"modules": ["Integer", "Predicate", "ComparatorPredicate", "Criterion"], "class_members": [{"name": "TestComparator", "type": "nested_class"}]}, "category": "unit", "description": "Tests the greater than comparison functionality of the ComparatorPredicate."}, {"name": "testCompareGreaterOrEqual", "primary_tested": ["ComparatorPredicate.comparatorPredicate(Integer,TestComparator,Criterion)"], "external_dependencies": {"modules": ["Integer", "Predicate", "ComparatorPredicate", "Criterion"], "class_members": [{"name": "TestComparator", "type": "nested_class"}]}, "category": "unit", "description": "Tests the greater than or equal to comparison functionality of the ComparatorPredicate."}, {"name": "testCompareLess", "primary_tested": ["ComparatorPredicate.comparatorPredicate(Integer,TestComparator,Criterion)"], "external_dependencies": {"modules": ["Integer", "Predicate", "ComparatorPredicate", "Criterion"], "class_members": [{"name": "TestComparator", "type": "nested_class"}]}, "category": "unit", "description": "Tests the less than comparison functionality of the ComparatorPredicate."}, {"name": "testCompareLessOrEqual", "primary_tested": ["ComparatorPredicate.comparatorPredicate(Integer,TestComparator,Criterion)"], "external_dependencies": {"modules": ["Integer", "Predicate", "ComparatorPredicate", "Criterion"], "class_members": [{"name": "TestComparator", "type": "nested_class"}]}, "category": "unit", "description": "Tests the less than or equal to comparison functionality of the ComparatorPredicate."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/trie/UnmodifiableTrieTest.java", "testclass_name": "UnmodifiableTrieTest", "dependencies": ["package org.apache.commons.collections4.trie;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.apache.commons.collections4.Trie;", "import org.apache.commons.collections4.Unmodifiable;", "import org.apache.commons.collections4.map.AbstractSortedMapTest;", "import org.junit.jupiter.api.Test;"], "name": "UnmodifiableTrieTest", "description": "Tests for the UnmodifiableTrie class, ensuring that the Trie is unmodifiable.", "class_members": {"methods": [{"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "ignoredTests", "signature": "String[] ignoredTests()"}, {"name": "isPutAddSupported", "signature": "boolean isPutAddSupported()"}, {"name": "isPutChangeSupported", "signature": "boolean isPutChangeSupported()"}, {"name": "isRemoveSupported", "signature": "boolean isRemoveSupported()"}, {"name": "makeFullMap", "signature": "Trie<String, V> makeFullMap()"}, {"name": "makeObject", "signature": "Trie<String, V> makeObject()"}]}, "test_cases": [{"name": "testDecorateFactory", "primary_tested": ["UnmodifiableTrie.unmodifiableTrie(Trie<String, V>)"], "associated_methods": ["UnmodifiableTrieTest.makeFullMap()"], "external_dependencies": {"modules": ["UnmodifiableTrie", "Trie", "PatriciaTrie"], "class_members": [{"name": "makeFullMap", "type": "method"}]}, "category": "unit", "description": "Tests the factory method for creating an unmodifiable Trie and ensures it throws a NullPointerException if null is passed."}, {"name": "testUnmodifiable", "primary_tested": ["UnmodifiableTrie.unmodifiableTrie(Trie<String, V>)"], "associated_methods": ["UnmodifiableTrieTest.makeObject()", "UnmodifiableTrieTest.makeFullMap()"], "external_dependencies": {"modules": ["UnmodifiableTrie", "Trie", "PatriciaTrie", "Unmodifiable"], "class_members": [{"name": "makeObject", "type": "method"}, {"name": "makeFullMap", "type": "method"}]}, "category": "unit", "description": "Tests that the Trie created by the factory method is indeed unmodifiable."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/ComparatorChainTest.java", "testclass_name": "ComparatorChainTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.io.Serializable;", "import java.util.Arrays;", "import java.util.Comparator;", "import java.util.LinkedList;", "import java.util.List;", "import org.junit.jupiter.api.Test;"], "name": "ComparatorChainTest", "description": "Unit tests for the ComparatorChain class, which chains multiple comparators together.", "class_members": {"variables": [], "methods": [], "nested_classes": [{"name": "ColumnComparator", "description": "A comparator for PseudoRow objects based on a specific column index."}, {"name": "PseudoRow", "description": "A mock row object used for testing, containing an array of integers representing columns."}]}, "fixtures": [], "test_cases": [{"name": "testBadListComparatorChain", "primary_tested": ["ComparatorChain.compare(Integer,Integer)"], "external_dependencies": {"modules": ["ComparatorChain", "Integer"], "class_members": [], "project_specific_resources": []}, "category": "unit", "description": "Tests that an UnsupportedOperationException is thrown when a ComparatorChain is created with an empty list of comparators."}, {"name": "testBadNoopComparatorChain", "primary_tested": ["ComparatorChain.compare(Integer,Integer)"], "external_dependencies": {"modules": ["ComparatorChain", "Integer"], "class_members": [], "project_specific_resources": []}, "category": "unit", "description": "Tests that an UnsupportedOperationException is thrown when a ComparatorChain is created with no comparators."}, {"name": "testComparatorChainOnMinValuedComparator", "primary_tested": ["ComparatorChain.compare(Integer,Integer)"], "associated_methods": ["ComparatorChain.addComparator(Comparator,boolean)"], "external_dependencies": {"modules": ["ComparatorChain", "Integer"], "class_members": [], "project_specific_resources": []}, "category": "unit", "description": "Tests the ComparatorChain with a custom comparator that returns Integer.MIN_VALUE for negative comparisons."}, {"name": "testListComparatorChain", "primary_tested": ["ComparatorChain.compare(Integer,Integer)"], "associated_methods": ["ComparatorChain.addComparator(Comparator,boolean)"], "external_dependencies": {"modules": ["ComparatorChain", "Integer", "ComparableComparator"], "class_members": [], "project_specific_resources": []}, "category": "unit", "description": "Tests the ComparatorChain with a list of comparators containing a single ComparableComparator."}, {"name": "testNoopComparatorChain", "primary_tested": ["ComparatorChain.compare(Integer,Integer)"], "associated_methods": ["ComparatorChain.addComparator(Comparator,boolean)"], "external_dependencies": {"modules": ["ComparatorChain", "Integer", "ComparableComparator"], "class_members": [], "project_specific_resources": []}, "category": "unit", "description": "Tests the ComparatorChain with no initial comparators but adding a ComparableComparator later."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/DefaultedMapTest.java", "testclass_name": "DefaultedMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Map;", "import org.apache.commons.collections4.Factory;", "import org.apache.commons.collections4.FactoryUtils;", "import org.apache.commons.collections4.IterableMap;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.TransformerUtils;", "import org.apache.commons.collections4.functors.ConstantFactory;", "import org.junit.jupiter.api.Test;"], "name": "DefaultedMapTest", "description": "Unit tests for the DefaultedMap class, focusing on its factory methods and map get operations.", "class_members": {"variables": [{"name": "nullFactory", "type": "Factory<V>"}, {"name": "nullTransformer", "type": "Transformer<K, V>"}], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testFactoryMethods", "primary_tested": ["DefaultedMap.defaultedMap(Map<K, V>, V)", "DefaultedMap.defaultedMap(Map<K, V>, Factory<V>)", "DefaultedMap.defaultedMap(Map<K, V>, Transformer<K, V>)"], "external_dependencies": {"modules": ["DefaultedMap", "HashMap", "FactoryUtils", "TransformerUtils"], "class_members": [{"name": "nullFactory", "type": "variable"}, {"name": "nullTransformer", "type": "variable"}]}, "category": "unit", "description": "Tests the factory methods of DefaultedMap to ensure they throw NullPointerException when expected."}, {"name": "testMapGet", "primary_tested": ["DefaultedMap.get(Object)"], "associated_methods": ["DefaultedMap.size()", "DefaultedMap.containsKey(Object)", "DefaultedMap.put(K, V)"], "external_dependencies": {"modules": ["DefaultedMap", "HashMap"]}, "category": "unit", "description": "Tests the get operation of DefaultedMap to ensure it returns the default value for non-existent keys and the correct value for existing keys."}, {"name": "testMapGet2", "primary_tested": ["DefaultedMap.get(Object)"], "associated_methods": ["DefaultedMap.size()", "DefaultedMap.containsKey(Object)", "DefaultedMap.put(K, V)"], "external_dependencies": {"modules": ["DefaultedMap", "HashMap"]}, "category": "unit", "description": "Tests the get operation of DefaultedMap with a HashMap base to ensure it returns the default value for non-existent keys and the correct value for existing keys."}, {"name": "testMapGet3", "primary_tested": ["DefaultedMap.get(Object)"], "associated_methods": ["DefaultedMap.size()", "DefaultedMap.containsKey(Object)", "DefaultedMap.put(K, V)"], "external_dependencies": {"modules": ["DefaultedMap", "HashMap", "ConstantFactory"]}, "category": "unit", "description": "Tests the get operation of DefaultedMap with a ConstantFactory to ensure it returns the default value for non-existent keys and the correct value for existing keys."}, {"name": "testMapGet4", "primary_tested": ["DefaultedMap.get(Object)"], "associated_methods": ["DefaultedMap.size()", "DefaultedMap.containsKey(Object)", "DefaultedMap.put(K, V)"], "external_dependencies": {"modules": ["DefaultedMap", "HashMap"]}, "category": "unit", "description": "Tests the get operation of DefaultedMap with a custom Transformer to ensure it returns the default value for non-existent keys and the correct value for existing keys."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/SetUtilsTest.java", "testclass_name": "SetUtilsTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertInstanceOf;", "import static org.junit.jupiter.api.Assertions.assertNotEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.Set;", "import org.apache.commons.collections4.SetUtils.SetView;", "import org.apache.commons.collections4.set.PredicatedSet;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SetUtilsTest", "description": "Unit tests for various SetUtils operations including difference, disjunction, intersection, union, and more.", "class_members": {"variables": [{"name": "setA", "type": "Set<Integer>"}, {"name": "setB", "type": "Set<Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testDifference", "primary_tested": ["SetUtils.difference(Set,Set)"], "associated_methods": ["SetUtils.emptySet()"], "external_dependencies": {"modules": ["SetUtils", "SetView", "NullPointerException"], "class_members": [{"name": "setA", "type": "variable"}, {"name": "setB", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the difference operation between two sets."}, {"name": "testDisjunction", "primary_tested": ["SetUtils.disjunction(Set,Set)"], "associated_methods": ["SetUtils.emptySet()"], "external_dependencies": {"modules": ["SetUtils", "SetView", "NullPointerException"], "class_members": [{"name": "setA", "type": "variable"}, {"name": "setB", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the disjunction operation between two sets."}, {"name": "testEmptyIfNull", "primary_tested": ["SetUtils.emptyIfNull(Set)"], "external_dependencies": {"modules": ["SetUtils"]}, "category": "unit", "description": "Tests the emptyIfNull operation which returns an empty set if the input set is null."}, {"name": "testEquals", "primary_tested": ["SetUtils.isEqualSet(Set,Set)"], "external_dependencies": {"modules": ["SetUtils", "Arrays", "HashSet"]}, "category": "unit", "description": "Tests the isEqualSet operation which checks if two sets are equal."}, {"name": "testHashCode", "primary_tested": ["SetUtils.hashCodeForSet(Set)"], "external_dependencies": {"modules": ["SetUtils", "Arrays", "HashSet"]}, "category": "unit", "description": "Tests the hashCodeForSet operation which computes the hash code for a set."}, {"name": "testHashSet", "primary_tested": ["SetUtils.unmodifiableSet()", "SetUtils.hashSet(Object[])"], "external_dependencies": {"modules": ["SetUtils"]}, "category": "unit", "description": "Tests the creation of unmodifiable and hash sets using SetUtils."}, {"name": "testIntersection", "primary_tested": ["SetUtils.intersection(Set,Set)"], "associated_methods": ["SetUtils.emptySet()"], "external_dependencies": {"modules": ["SetUtils", "SetView", "NullPointerException"], "class_members": [{"name": "setA", "type": "variable"}, {"name": "setB", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the intersection operation between two sets."}, {"name": "testNewIdentityHashSet", "primary_tested": ["SetUtils.newIdentityHashSet()"], "external_dependencies": {"modules": ["SetUtils"]}, "category": "unit", "description": "Tests the creation of a new identity hash set using SetUtils."}, {"name": "testpredicatedSet", "primary_tested": ["SetUtils.predicatedSet(Set,Predicate)"], "external_dependencies": {"modules": ["SetUtils", "PredicatedSet", "Predicate", "NullPointerException"]}, "category": "unit", "description": "Tests the creation of a predicated set using SetUtils."}, {"name": "testUnion", "primary_tested": ["SetUtils.union(Set,Set)"], "associated_methods": ["SetUtils.emptySet()"], "external_dependencies": {"modules": ["SetUtils", "SetView", "NullPointerException"], "class_members": [{"name": "setA", "type": "variable"}, {"name": "setB", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the union operation between two sets."}, {"name": "testUnmodifiableSet", "primary_tested": ["SetUtils.unmodifiableSet()", "SetUtils.unmodifiableSet(Object[])"], "external_dependencies": {"modules": ["SetUtils"]}, "category": "unit", "description": "Tests the creation of unmodifiable sets using SetUtils."}, {"name": "testUnmodifiableSetWrap", "primary_tested": ["SetUtils.unmodifiableSet(Set)"], "external_dependencies": {"modules": ["SetUtils"]}, "category": "unit", "description": "Tests the wrapping of an existing set into an unmodifiable set using SetUtils."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/ObjectArrayListIteratorTest.java", "testclass_name": "ObjectArrayListIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertArrayEquals;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.ListIterator;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.Test;"], "name": "ObjectArrayListIteratorTest", "description": "Tests for the ObjectArrayListIterator class, focusing on ListIterator functionality.", "class_members": {"methods": [{"name": "makeArrayListIterator", "signature": "ObjectArrayListIterator<E> makeArrayListIterator(E[] array)"}, {"name": "makeEmptyIterator", "signature": "ObjectArrayListIterator<E> makeEmptyIterator()"}, {"name": "makeObject", "signature": "ObjectArrayListIterator<E> makeObject()"}]}, "test_cases": [{"name": "testListIterator", "primary_tested": ["ListIterator.previous()"], "associated_methods": ["ListIterator.hasNext()", "ListIterator.next()"], "external_dependencies": {"modules": ["ListIterator", "NoSuchElementException"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "description": "Tests the basic ListIterator functionality by iterating backwards using previous()."}, {"name": "testListIteratorSet", "primary_tested": ["ListIterator.set(E)"], "associated_methods": ["ListIterator.hasNext()", "ListIterator.next()"], "external_dependencies": {"modules": ["ListIterator", "IllegalStateException"], "class_members": [{"name": "makeArrayListIterator", "type": "method"}]}, "category": "unit", "description": "Tests the ListIterator set operation and ensures it throws IllegalStateException if set is called before next or previous."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/ReferenceMapTest.java", "testclass_name": "ReferenceMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.fail;", "import java.io.ByteArrayInputStream;", "import java.io.ByteArrayOutputStream;", "import java.io.IOException;", "import java.io.ObjectInputStream;", "import java.io.ObjectOutputStream;", "import java.io.Serializable;", "import java.lang.ref.WeakReference;", "import java.util.ArrayList;", "import java.util.Iterator;", "import java.util.List;", "import java.util.Map;", "import java.util.function.Consumer;", "import org.apache.commons.collections4.map.AbstractHashedMap.HashEntry;", "import org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceEntry;", "import org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceStrength;", "import org.junit.jupiter.api.Test;"], "name": "ReferenceMapTest", "description": "Unit tests for the ReferenceMap class, focusing on various functionalities such as purging, serialization, and iterator behavior.", "class_members": {"variables": [{"name": "keyReference", "type": "WeakReference<K>"}, {"name": "valueReference", "type": "WeakReference<V>"}], "methods": [{"name": "buildRefMap", "signature": "Map<K, V> buildRefMap()"}, {"name": "gc", "signature": "void gc()"}], "nested_classes": [{"name": "AccessibleEntry", "description": "Internal helper class extending ReferenceEntry to provide custom purge behavior."}]}, "fixtures": [], "test_cases": [{"name": "testCustomPurge", "primary_tested": ["ReferenceMap.createEntry(HashEntry<Integer, Integer>,int,Integer,Integer)"], "associated_methods": ["AccessibleEntry.onPurge()"], "external_dependencies": {"modules": ["ReferenceMap", "AccessibleEntry", "ArrayList", "Consumer", "Serializable"], "class_members": [{"name": "AccessibleEntry", "type": "nested_class"}]}, "category": "unit", "description": "Tests custom purge behavior by checking if expired values are added to a list."}, {"name": "testDataSizeAfterSerialization", "primary_tested": ["ReferenceMap.size()"], "associated_methods": ["ReferenceMap.put(String,String)", "ReferenceMap.data.length"], "external_dependencies": {"modules": ["ReferenceMap", "ByteArrayOutputStream", "ObjectOutputStream", "ByteArrayInputStream", "ObjectInputStream"]}, "category": "unit", "description": "Tests whether the 'data' HashEntry array size remains the same after serialization."}, {"name": "testIteratorLastEntryCanBeRemovedAfterHasNext", "primary_tested": ["ReferenceMap.entrySet().iterator()"], "associated_methods": ["ReferenceMap.put(Integer,Integer)", "ReferenceMap.isEmpty()"], "external_dependencies": {"modules": ["ReferenceMap", "Iterator", "Map.Entry"]}, "category": "unit", "description": "Tests whether the last entry can be removed after calling hasNext on the iterator."}, {"name": "testNullHandling", "primary_tested": ["ReferenceMap.get(null)", "ReferenceMap.containsKey(null)", "ReferenceMap.containsValue(null)", "ReferenceMap.remove(null)", "ReferenceMap.entrySet().contains(null)", "ReferenceMap.put(null,null)", "ReferenceMap.put(Object,null)", "ReferenceMap.put(null,Object)"], "external_dependencies": {"modules": ["ReferenceMap", "NullPointerException"]}, "category": "unit", "description": "Tests the handling of null values and keys in the ReferenceMap."}, {"name": "testPurgeValues", "primary_tested": ["ReferenceMap.isEmpty()"], "associated_methods": ["ReferenceMap.buildRefMap()"], "external_dependencies": {"modules": ["ReferenceMap", "WeakReference"], "class_members": [{"name": "buildRefMap", "type": "method"}]}, "category": "unit", "description": "Tests whether the purge values setting works by checking if references are released after garbage collection."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/functors/AllPredicateTest.java", "testclass_name": "AllPredicateTest", "dependencies": ["package org.apache.commons.collections4.functors;", "import static org.apache.commons.collections4.functors.AllPredicate.allPredicate;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Collection;", "import java.util.Collections;", "import org.apache.commons.collections4.Predicate;", "import org.junit.jupiter.api.Test;"], "name": "AllPredicateTest", "description": "Tests for the AllPredicate class in Apache Commons Collections, which evaluates to true if all predicates in a collection evaluate to true.", "class_members": {"variables": [], "methods": [{"name": "getPredicateInstance", "signature": "Predicate<Integer> getPredicateInstance(Collection<Predicate<Integer>> predicates)"}, {"name": "getPredicateInstance", "signature": "Predicate<Integer> getPredicateInstance(Predicate<? super Integer>... predicates)"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testAllTrue", "primary_tested": ["AllPredicate.allPredicate(Collection<Predicate<Integer>>)"], "external_dependencies": {"modules": ["AllPredicate", "Predicate"], "class_members": [{"name": "getPredicateInstance", "type": "method"}]}, "category": "unit", "description": "Tests whether multiple true predicates evaluate to true."}, {"name": "testEmptyArrayToGetInstance", "primary_tested": ["AllPredicate.allPredicate(Collection<Predicate<Integer>>)"], "external_dependencies": {"modules": ["AllPredicate", "Predicate"], "class_members": [{"name": "getPredicateInstance", "type": "method"}]}, "category": "unit", "description": "Verifies that providing an empty predicate array evaluates to true."}, {"name": "testEmptyCollectionToGetInstance", "primary_tested": ["AllPredicate.allPredicate(Collection<Predicate<Integer>>)"], "external_dependencies": {"modules": ["AllPredicate", "Predicate", "Collections"], "class_members": [{"name": "getPredicateInstance", "type": "method"}]}, "category": "unit", "description": "Verifies that providing an empty predicate collection evaluates to true."}, {"name": "testOneFalsePredicate", "primary_tested": ["AllPredicate.allPredicate(Collection<Predicate<Integer>>)"], "external_dependencies": {"modules": ["AllPredicate", "Predicate"], "class_members": [{"name": "createMockPredicate", "type": "method"}]}, "category": "unit", "description": "Tests whether a single false predicate evaluates to true."}, {"name": "testOneTruePredicate", "primary_tested": ["AllPredicate.allPredicate(Collection<Predicate<Integer>>)"], "external_dependencies": {"modules": ["AllPredicate", "Predicate"], "class_members": [{"name": "createMockPredicate", "type": "method"}]}, "category": "unit", "description": "Tests whether a single true predicate evaluates to true."}, {"name": "testTrueAndFalseCombined", "primary_tested": ["AllPredicate.allPredicate(Collection<Predicate<Integer>>)"], "external_dependencies": {"modules": ["AllPredicate", "Predicate"], "class_members": [{"name": "getPredicateInstance", "type": "method"}]}, "category": "unit", "description": "Tests whether combining some true and one false evaluates to false. Also verifies that only the first false predicate is actually evaluated."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/PredicatedSortedMapTest.java", "testclass_name": "PredicatedSortedMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.Comparator;", "import java.util.HashMap;", "import java.util.Iterator;", "import java.util.Map;", "import java.util.SortedMap;", "import java.util.TreeMap;", "import java.util.concurrent.ConcurrentSkipListMap;", "import org.apache.commons.collections4.Predicate;", "import org.apache.commons.collections4.functors.TruePredicate;", "import org.junit.jupiter.api.Test;"], "name": "PredicatedSortedMapTest", "description": "Unit tests for PredicatedSortedMap functionality, including entry set, put operations, and sorting order.", "class_members": {"variables": [{"name": "truePredicate", "type": "static final Predicate<Object>"}, {"name": "testPredicate", "type": "static final Predicate<Object>"}, {"name": "reverseStringComparator", "type": "final Comparator<K>"}], "methods": [{"name": "decorateMap", "signature": "SortedMap<K, V> decorateMap(SortedMap<K, V> map, Predicate<? super K> keyPredicate, Predicate<? super V> valuePredicate)"}, {"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "isAllowNullKey", "signature": "boolean isAllowNullKey()"}, {"name": "isSubMapViewsSerializable", "signature": "boolean isSubMapViewsSerializable()"}, {"name": "makeObject", "signature": "SortedMap<K, V> makeObject()"}, {"name": "makeTestMap", "signature": "SortedMap<K, V> makeTestMap()"}, {"name": "makeTestMapWithComparator", "signature": "SortedMap<K, V> makeTestMapWithComparator()"}], "nested_classes": [{"name": "ReverseStringComparator", "description": "Internal comparator class for reversing string comparison"}]}, "fixtures": [], "test_cases": [{"name": "testEntrySet", "primary_tested": ["SortedMap.entrySet()"], "external_dependencies": {"modules": ["TreeMap", "PredicatedSortedMap"], "class_members": [{"name": "truePredicate", "type": "variable"}]}, "category": "unit", "description": "Tests the entry set functionality of the SortedMap."}, {"name": "testPut", "primary_tested": ["Map.put(K,V)", "Map.putAll(Map<? extends K, ? extends V>)"], "associated_methods": ["Map.containsKey(Object)", "Map.containsValue(Object)"], "external_dependencies": {"modules": ["HashMap", "PredicatedSortedMap"], "class_members": [{"name": "testPredicate", "type": "variable"}]}, "category": "unit", "description": "Tests the put operation and putAll functionality of the SortedMap, ensuring illegal arguments are handled."}, {"name": "testReverseSortOrder", "primary_tested": ["SortedMap.put(K,V)", "SortedMap.lastKey()", "SortedMap.firstKey()", "SortedMap.tailMap(K).firstKey()", "SortedMap.headMap(K).lastKey()", "SortedMap.subMap(K,K).lastKey()", "SortedMap.comparator()"], "external_dependencies": {"modules": ["ConcurrentSkipListMap", "PredicatedSortedMap"], "class_members": [{"name": "testPredicate", "type": "variable"}, {"name": "reverseStringComparator", "type": "variable"}]}, "category": "unit", "description": "Tests the reverse sorting order of the SortedMap with a custom comparator."}, {"name": "testSortOrder", "primary_tested": ["SortedMap.put(K,V)", "SortedMap.firstKey()", "SortedMap.lastKey()", "SortedMap.tailMap(K).firstKey()", "SortedMap.headMap(K).lastKey()", "SortedMap.subMap(K,K).lastKey()", "SortedMap.comparator()"], "external_dependencies": {"modules": ["TreeMap", "PredicatedSortedMap"], "class_members": [{"name": "testPredicate", "type": "variable"}]}, "category": "unit", "description": "Tests the natural sorting order of the SortedMap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/FactoryUtilsTest.java", "testclass_name": "FactoryUtilsTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertNotSame;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.io.IOException;", "import java.io.Serializable;", "import java.util.Date;", "import java.util.TimeZone;", "import org.apache.commons.collections4.functors.ConstantFactory;", "import org.apache.commons.collections4.functors.ExceptionFactory;", "import org.junit.jupiter.api.Test;"], "name": "FactoryUtilsTest", "description": "Unit tests for FactoryUtils class, which provides utility methods for creating factories.", "class_members": {"nested_classes": [{"name": "Mock1", "description": "Internal mock class with constructors and equals/hashCode methods."}, {"name": "Mock2", "description": "Internal mock class implementing Serializable with constructors and equals/hashCode methods."}, {"name": "Mock3", "description": "Internal mock class with a static counter and a default constructor."}]}, "fixtures": [], "test_cases": [{"name": "testConstantFactoryConstant", "primary_tested": ["FactoryUtils.constantFactory(Integer)"], "external_dependencies": {"modules": ["Factory", "FactoryUtils", "Integer"]}, "category": "unit", "description": "Tests the constant factory functionality with a non-null constant."}, {"name": "testConstantFactoryNull", "primary_tested": ["FactoryUtils.constantFactory(Object)"], "external_dependencies": {"modules": ["Factory", "FactoryUtils"]}, "category": "unit", "description": "Tests the constant factory functionality with a null constant."}, {"name": "testExceptionFactory", "primary_tested": ["FactoryUtils.exceptionFactory()"], "external_dependencies": {"modules": ["FactoryUtils", "FunctorException"]}, "category": "unit", "description": "Tests the exception factory functionality."}, {"name": "testInstantiateFactoryComplex", "primary_tested": ["FactoryUtils.instantiateFactory(Class,Class[],Object[])"], "external_dependencies": {"modules": ["Factory", "FactoryUtils", "Date", "TimeZone"]}, "category": "unit", "description": "Tests the instantiate factory functionality with complex parameters."}, {"name": "testInstantiateFactoryMismatch", "primary_tested": ["FactoryUtils.instantiateFactory(Class,Class[],Object[])"], "external_dependencies": {"modules": ["FactoryUtils", "Date"]}, "category": "unit", "description": "Tests the instantiate factory functionality with mismatched parameters."}, {"name": "testInstantiateFactoryNoConstructor", "primary_tested": ["FactoryUtils.instantiateFactory(Class,Class[],Object[])"], "external_dependencies": {"modules": ["FactoryUtils", "Date"]}, "category": "unit", "description": "Tests the instantiate factory functionality with no matching constructor."}, {"name": "testInstantiateFactoryNull", "primary_tested": ["FactoryUtils.instantiateFactory(Class)"], "external_dependencies": {"modules": ["FactoryUtils"]}, "category": "unit", "description": "Tests the instantiate factory functionality with a null class."}, {"name": "testInstantiateFactorySimple", "primary_tested": ["FactoryUtils.instantiateFactory(Class)"], "external_dependencies": {"modules": ["Factory", "FactoryUtils", "Mock3"]}, "category": "unit", "description": "Tests the instantiate factory functionality with a simple class."}, {"name": "testNullFactory", "primary_tested": ["FactoryUtils.nullFactory()"], "external_dependencies": {"modules": ["Factory", "FactoryUtils"]}, "category": "unit", "description": "Tests the null factory functionality."}, {"name": "testPrototypeFactoryNull", "primary_tested": ["FactoryUtils.prototypeFactory(Object)"], "external_dependencies": {"modules": ["ConstantFactory", "FactoryUtils"]}, "category": "unit", "description": "Tests the prototype factory functionality with a null prototype."}, {"name": "testPrototypeFactoryPublicBad", "primary_tested": ["FactoryUtils.prototypeFactory(Object)"], "external_dependencies": {"modules": ["FactoryUtils"]}, "category": "unit", "description": "Tests the prototype factory functionality with a bad prototype."}, {"name": "testPrototypeFactoryPublicCloneMethod", "primary_tested": ["FactoryUtils.prototypeFactory(Date)"], "external_dependencies": {"modules": ["Factory", "FactoryUtils", "Date"]}, "category": "unit", "description": "Tests the prototype factory functionality with a prototype having a public clone method."}, {"name": "testPrototypeFactoryPublicCopyConstructor", "primary_tested": ["FactoryUtils.prototypeFactory(Mock1)"], "external_dependencies": {"modules": ["Factory", "FactoryUtils", "Mock1"]}, "category": "unit", "description": "Tests the prototype factory functionality with a prototype having a public copy constructor."}, {"name": "testPrototypeFactoryPublicSerialization", "primary_tested": ["FactoryUtils.prototypeFactory(Integer)"], "external_dependencies": {"modules": ["Factory", "FactoryUtils", "Integer"]}, "category": "unit", "description": "Tests the prototype factory functionality with a prototype that is serializable."}, {"name": "testPrototypeFactoryPublicSerializationError", "primary_tested": ["FactoryUtils.prototypeFactory(Mock2)"], "external_dependencies": {"modules": ["Factory", "FactoryUtils", "Mock2", "FunctorException", "IOException"]}, "category": "unit", "description": "Tests the prototype factory functionality with a prototype that causes a serialization error."}, {"name": "testSingletonPatternInSerialization", "primary_tested": [], "external_dependencies": {"modules": ["ExceptionFactory", "TestUtils"]}, "category": "unit", "description": "Tests that all Factory singletons hold the singleton pattern in the serialization/deserialization process."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/ArrayIteratorTest.java", "testclass_name": "ArrayIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.Iterator;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.Test;"], "name": "ArrayIteratorTest", "description": "Unit tests for the ArrayIterator class in the Apache Commons Collections library.", "class_members": {"variables": [{"name": "testArray", "type": "String[]"}], "methods": [{"name": "makeEmptyIterator", "signature": "ArrayIterator<E> makeEmptyIterator()"}, {"name": "makeObject", "signature": "ArrayIterator<E> makeObject()"}, {"name": "supportsRemove", "signature": "boolean supportsRemove()"}]}, "test_cases": [{"name": "testIterator", "primary_tested": ["Iterator.next()"], "associated_methods": ["Iterator.hasNext()"], "external_dependencies": {"modules": ["ArrayIterator", "Iterator", "NoSuchElementException"], "class_members": [{"name": "testArray", "type": "variable"}, {"name": "makeObject", "type": "method"}]}, "category": "unit", "description": "Tests the iteration functionality of the ArrayIterator, ensuring correct values and behavior when the iterator is exhausted."}, {"name": "testNullArray", "primary_tested": ["ArrayIterator.ArrayIterator(Object[])"], "external_dependencies": {"modules": ["ArrayIterator", "NullPointerException"]}, "category": "unit", "description": "Tests the behavior of the ArrayIterator constructor when a null array is provided, expecting a NullPointerException."}, {"name": "testReset", "primary_tested": ["ArrayIterator.reset()"], "associated_methods": ["ArrayIterator.next()"], "external_dependencies": {"modules": ["ArrayIterator"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "description": "Tests the reset functionality of the ArrayIterator, ensuring it correctly resets the iterator to the beginning of the array."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/sequence/SequencesComparatorTest.java", "testclass_name": "SequencesComparatorTest", "dependencies": ["package org.apache.commons.collections4.sequence;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.List;", "import java.util.Random;", "import org.apache.commons.lang3.StringUtils;", "import org.junit.jupiter.api.AfterEach;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SequencesComparatorTest", "description": "Unit tests for the SequencesComparator class, which compares sequences and generates scripts for modifications.", "class_members": {"variables": [{"name": "before", "type": "List<String>"}, {"name": "after", "type": "List<String>"}, {"name": "length", "type": "int[]"}], "methods": [{"name": "sequence", "signature": "List<Character> sequence(String)"}], "nested_classes": [{"name": "ExecutionVisitor", "description": "Internal helper class implementing CommandVisitor to process sequences."}]}, "fixtures": ["setUp", "tearDown"], "test_cases": [{"name": "testExecution", "primary_tested": ["SequencesComparator.getScript().visit(CommandVisitor)"], "associated_methods": ["ExecutionVisitor.setList(List<Character>)", "ExecutionVisitor.getString()"], "external_dependencies": {"modules": ["SequencesComparator", "ExecutionVisitor", "List", "Character"], "class_members": [{"name": "before", "type": "variable"}, {"name": "after", "type": "variable"}, {"name": "sequence", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the execution of the script generated by SequencesComparator to transform 'before' sequences into 'after' sequences."}, {"name": "testLength", "primary_tested": ["SequencesComparator.getScript().getModifications()"], "external_dependencies": {"modules": ["SequencesComparator", "List", "Character"], "class_members": [{"name": "before", "type": "variable"}, {"name": "after", "type": "variable"}, {"name": "length", "type": "variable"}, {"name": "sequence", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the number of modifications returned by the script generated by SequencesComparator."}, {"name": "testMinimal", "primary_tested": ["SequencesComparator.getScript().getModifications()"], "external_dependencies": {"modules": ["SequencesComparator", "List", "String", "Random"], "class_members": [{"name": "sequence", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the minimal number of modifications required to transform a sequence based on random insertions and deletions."}, {"name": "testShadok", "primary_tested": ["SequencesComparator.getScript().visit(CommandVisitor)"], "associated_methods": ["ExecutionVisitor.setList(List<String>)", "ExecutionVisitor.getString()"], "external_dependencies": {"modules": ["SequencesComparator", "ExecutionVisitor", "List", "String", "StringBuilder"], "class_members": [{"name": "sequence", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the transformation of Shadok sentences using the script generated by SequencesComparator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableOrderedMapIteratorTest.java", "testclass_name": "UnmodifiableOrderedMapIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertNotSame;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Map;", "import java.util.TreeMap;", "import org.apache.commons.collections4.OrderedMap;", "import org.apache.commons.collections4.OrderedMapIterator;", "import org.apache.commons.collections4.Unmodifiable;", "import org.apache.commons.collections4.map.ListOrderedMap;", "import org.junit.jupiter.api.Test;"], "name": "UnmodifiableOrderedMapIteratorTest", "description": "Tests for the UnmodifiableOrderedMapIterator class, which ensures that the OrderedMapIterator is unmodifiable.", "class_members": {"methods": [{"name": "getConfirmedMap", "signature": "Map<K, V> getConfirmedMap()"}, {"name": "getMap", "signature": "OrderedMap<K, V> getMap()"}, {"name": "makeEmptyIterator", "signature": "OrderedMapIterator<K, V> makeEmptyIterator()"}, {"name": "makeObject", "signature": "OrderedMapIterator<K, V> makeObject()"}, {"name": "supportsRemove", "signature": "boolean supportsRemove()"}, {"name": "supportsSetValue", "signature": "boolean supportsSetValue()"}]}, "fixtures": [], "test_cases": [{"name": "testDecorateFactory", "primary_tested": ["UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator(OrderedMapIterator<K, V>)"], "associated_methods": ["ListOrderedMap.mapIterator()"], "external_dependencies": {"modules": ["UnmodifiableOrderedMapIterator", "ListOrderedMap", "OrderedMapIterator"], "class_members": [{"name": "makeObject", "type": "method"}, {"name": "getMap", "type": "method"}]}, "category": "unit", "description": "Tests the factory method for creating an unmodifiable OrderedMapIterator and ensures it handles null input correctly."}, {"name": "testOrderedMapIterator", "primary_tested": ["UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator(OrderedMapIterator<K, V>)"], "external_dependencies": {"modules": ["UnmodifiableOrderedMapIterator", "Unmodifiable", "OrderedMapIterator"], "class_members": [{"name": "makeEmptyIterator", "type": "method"}]}, "category": "unit", "description": "Tests that the OrderedMapIterator created by the factory method is indeed unmodifiable."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/ClosureUtilsTest.java", "testclass_name": "ClosureUtilsTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.ArrayList;", "import java.util.Collection;", "import java.util.Collections;", "import java.util.HashMap;", "import java.util.Map;", "import org.apache.commons.collections4.functors.EqualPredicate;", "import org.apache.commons.collections4.functors.ExceptionClosure;", "import org.apache.commons.collections4.functors.FalsePredicate;", "import org.apache.commons.collections4.functors.NOPClosure;", "import org.apache.commons.collections4.functors.TruePredicate;", "import org.junit.jupiter.api.Test;"], "name": "ClosureUtilsTest", "description": "Unit tests for ClosureUtils class, which provides utility methods for creating and manipulating Closure objects.", "class_members": {"variables": [{"name": "cString", "type": "static final Object"}], "methods": [], "nested_classes": [{"name": "MockClosure", "description": "Internal helper class implementing Closure interface for testing purposes."}, {"name": "MockTransformer", "description": "Internal helper class implementing Transformer interface for testing purposes."}]}, "fixtures": [], "test_cases": [{"name": "testChainedClosure", "primary_tested": ["ClosureUtils.chainedClosure(Closure,Closure)"], "associated_methods": ["MockClosure.reset()"], "external_dependencies": {"modules": ["ClosureUtils", "MockClosure", "NOPClosure", "Collections"], "class_members": [{"name": "cString", "type": "variable"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the chainedClosure functionality of ClosureUtils, ensuring that multiple closures are executed in sequence."}, {"name": "testDoWhileClosure", "primary_tested": ["ClosureUtils.doWhileClosure(Closure,Predicate)"], "associated_methods": [], "external_dependencies": {"modules": ["ClosureUtils", "MockClosure", "FalsePredicate", "PredicateUtils"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the doWhileClosure functionality of ClosureUtils, ensuring that the closure is executed at least once and then repeatedly based on the predicate."}, {"name": "testExceptionClosure", "primary_tested": ["ClosureUtils.exceptionClosure()"], "associated_methods": [], "external_dependencies": {"modules": ["ClosureUtils", "ExceptionClosure", "FunctorException"], "class_members": [{"name": "cString", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the exceptionClosure functionality of ClosureUtils, ensuring that an exception is thrown when the closure is executed."}, {"name": "testForClosure", "primary_tested": ["ClosureUtils.forClosure(int,Closure)"], "associated_methods": [], "external_dependencies": {"modules": ["ClosureUtils", "MockClosure", "NOPClosure"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the forClosure functionality of ClosureUtils, ensuring that the closure is executed a specified number of times."}, {"name": "testIfClosure", "primary_tested": ["ClosureUtils.ifClosure(Predicate,Closure)"], "associated_methods": [], "external_dependencies": {"modules": ["ClosureUtils", "MockClosure", "TruePredicate", "FalsePredicate"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the ifClosure functionality of ClosureUtils, ensuring that the closure is executed based on the predicate."}, {"name": "testInvokeClosure", "primary_tested": ["ClosureUtils.invokerClosure(String)"], "associated_methods": [], "external_dependencies": {"modules": ["ClosureUtils"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the invokerClosure functionality of ClosureUtils, ensuring that a method is invoked on the input object."}, {"name": "testNopClosure", "primary_tested": ["ClosureUtils.nopClosure()"], "associated_methods": [], "external_dependencies": {"modules": ["ClosureUtils", "NOPClosure"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the nopClosure functionality of ClosureUtils, ensuring that the closure does nothing."}, {"name": "testSingletonPatternInSerialization", "primary_tested": [], "associated_methods": [], "external_dependencies": {"modules": ["ExceptionClosure", "NOPClosure", "TestUtils"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that all Closure singletons hold the singleton pattern in the serialization/deserialization process."}, {"name": "testSwitchClosure", "primary_tested": ["ClosureUtils.switchClosure(Predicate[],Closure[])"], "associated_methods": [], "external_dependencies": {"modules": ["ClosureUtils", "MockClosure", "EqualPredicate", "NOPClosure", "Collections"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the switchClosure functionality of ClosureUtils, ensuring that the appropriate closure is executed based on the predicate."}, {"name": "testSwitchMapClosure", "primary_tested": ["ClosureUtils.switchMapClosure(Map)"], "associated_methods": [], "external_dependencies": {"modules": ["ClosureUtils", "MockClosure", "NOPClosure", "Collections"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the switchMapClosure functionality of ClosureUtils, ensuring that the appropriate closure is executed based on the map key."}, {"name": "testTransformerClosure", "primary_tested": ["ClosureUtils.asClosure(Transformer)"], "associated_methods": [], "external_dependencies": {"modules": ["ClosureUtils", "MockTransformer", "NOPClosure"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the asClosure functionality of ClosureUtils, ensuring that a Transformer is wrapped as a Closure."}, {"name": "testWhileClosure", "primary_tested": ["ClosureUtils.whileClosure(Predicate,Closure)"], "associated_methods": [], "external_dependencies": {"modules": ["ClosureUtils", "MockClosure", "FalsePredicate", "PredicateUtils", "NOPClosure"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the whileClosure functionality of ClosureUtils, ensuring that the closure is executed repeatedly based on the predicate."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/SingletonIteratorTest.java", "testclass_name": "SingletonIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Iterator;", "import java.util.NoSuchElementException;", "import org.apache.commons.collections4.ResettableIterator;", "import org.junit.jupiter.api.Test;"], "name": "SingletonIteratorTest", "description": "Unit tests for the SingletonIterator class, which is a ResettableIterator that iterates over a single element.", "class_members": {"variables": [{"name": "testValue", "type": "static final Object"}], "methods": [{"name": "makeEmptyIterator", "signature": "SingletonIterator<E> makeEmptyIterator()"}, {"name": "makeObject", "signature": "SingletonIterator<E> makeObject()"}, {"name": "supportsEmptyIterator", "signature": "boolean supportsEmptyIterator()"}, {"name": "supportsRemove", "signature": "boolean supportsRemove()"}]}, "fixtures": [], "test_cases": [{"name": "testIterator", "primary_tested": ["SingletonIterator.hasNext()", "SingletonIterator.next()"], "associated_methods": ["SingletonIterator.remove()"], "external_dependencies": {"modules": ["Iterator", "NoSuchElementException"], "class_members": [{"name": "testValue", "type": "variable"}, {"name": "makeObject", "type": "method"}]}, "category": "unit", "description": "Tests the basic iterator functionality of SingletonIterator, including hasNext, next, and handling NoSuchElementException."}, {"name": "testReset", "primary_tested": ["SingletonIterator.reset()"], "associated_methods": ["SingletonIterator.hasNext()", "SingletonIterator.next()"], "external_dependencies": {"modules": ["ResettableIterator"], "class_members": [{"name": "testValue", "type": "variable"}, {"name": "makeObject", "type": "method"}]}, "category": "unit", "description": "Tests the reset functionality of SingletonIterator, ensuring that the iterator can be reset and used multiple times."}, {"name": "testSingletonIteratorRemove", "primary_tested": ["SingletonIterator.remove()"], "associated_methods": ["SingletonIterator.hasNext()", "SingletonIterator.next()", "SingletonIterator.reset()"], "external_dependencies": {"modules": ["ResettableIterator"], "class_members": []}, "category": "unit", "description": "Tests the remove functionality of SingletonIterator, ensuring that the element can be removed and the iterator behaves correctly afterwards."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/ReferenceIdentityMapTest.java", "testclass_name": "ReferenceIdentityMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.fail;", "import java.lang.ref.WeakReference;", "import java.util.Iterator;", "import java.util.Map;", "import org.apache.commons.collections4.IterableMap;", "import org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceStrength;", "import org.junit.jupiter.api.Test;"], "name": "ReferenceIdentityMapTest", "description": "Unit tests for the ReferenceIdentityMap class, focusing on reference handling and identity-based operations.", "class_members": {"variables": [{"name": "I1A", "type": "static final Integer"}, {"name": "I1B", "type": "static final Integer"}, {"name": "I2A", "type": "static final Integer"}, {"name": "I2B", "type": "static final Integer"}, {"name": "keyReference", "type": "WeakReference<K>"}, {"name": "valueReference", "type": "WeakReference<V>"}], "methods": [{"name": "gc", "signature": "static void gc()"}, {"name": "buildRefMap", "signature": "private Map<K, V> buildRefMap()"}, {"name": "getCompatibilityVersion", "signature": "public String getCompatibilityVersion()"}, {"name": "isAllowNullKey", "signature": "public boolean isAllowNullKey()"}, {"name": "isAllowNullValue", "signature": "public boolean isAllowNullValue()"}, {"name": "makeConfirmedMap", "signature": "public Map<K, V> makeConfirmedMap()"}, {"name": "makeObject", "signature": "public ReferenceIdentityMap<K, V> makeObject()"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testBasics", "primary_tested": ["ReferenceIdentityMap.put(K,V)", "ReferenceIdentityMap.get(Object)", "ReferenceIdentityMap.containsKey(Object)", "ReferenceIdentityMap.containsValue(Object)"], "external_dependencies": {"modules": ["ReferenceIdentityMap", "IterableMap", "Integer"], "class_members": [{"name": "I1A", "type": "variable"}, {"name": "I1B", "type": "variable"}, {"name": "I2A", "type": "variable"}, {"name": "I2B", "type": "variable"}]}, "category": "unit", "description": "Tests basic operations of ReferenceIdentityMap, including put, get, containsKey, and containsValue."}, {"name": "testHashEntry", "primary_tested": ["ReferenceIdentityMap.put(K,V)", "ReferenceIdentityMap.entrySet()"], "external_dependencies": {"modules": ["ReferenceIdentityMap", "IterableMap", "Integer"], "class_members": [{"name": "I1A", "type": "variable"}, {"name": "I1B", "type": "variable"}, {"name": "I2A", "type": "variable"}]}, "category": "unit", "description": "Tests the behavior of entrySet and equality of entries in ReferenceIdentityMap."}, {"name": "testNullHandling", "primary_tested": ["ReferenceIdentityMap.get(Object)", "ReferenceIdentityMap.containsKey(Object)", "ReferenceIdentityMap.containsValue(Object)", "ReferenceIdentityMap.remove(Object)", "ReferenceIdentityMap.entrySet().contains(Object)", "ReferenceIdentityMap.put(K,V)"], "external_dependencies": {"modules": ["ReferenceIdentityMap", "NullPointerException"], "class_members": []}, "category": "unit", "description": "Tests the handling of null values and keys in ReferenceIdentityMap, ensuring proper exceptions are thrown."}, {"name": "testPurgeValues", "primary_tested": ["ReferenceIdentityMap.isEmpty()"], "associated_methods": ["ReferenceIdentityMap.buildRefMap()"], "external_dependencies": {"modules": ["ReferenceIdentityMap", "WeakReference"], "class_members": [{"name": "keyReference", "type": "variable"}, {"name": "valueReference", "type": "variable"}, {"name": "buildRefMap", "type": "method"}]}, "category": "unit", "description": "Tests the purging of values in ReferenceIdentityMap, ensuring weak references are properly released."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIteratorTest.java", "testclass_name": "SingletonListIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ListIterator;", "import java.util.NoSuchElementException;", "import org.apache.commons.collections4.ResettableListIterator;", "import org.junit.jupiter.api.Test;"], "name": "SingletonListIteratorTest", "description": "Unit tests for the SingletonListIterator class, which is a ListIterator implementation that only contains a single element.", "class_members": {"variables": [{"name": "testValue", "type": "static final Object"}], "methods": [{"name": "makeEmptyIterator", "signature": "SingletonListIterator<E> makeEmptyIterator()"}, {"name": "makeObject", "signature": "SingletonListIterator<E> makeObject()"}, {"name": "supportsAdd", "signature": "boolean supportsAdd()"}, {"name": "supportsEmptyIterator", "signature": "boolean supportsEmptyIterator()"}, {"name": "supportsRemove", "signature": "boolean supportsRemove()"}]}, "test_cases": [{"name": "testIterator", "primary_tested": ["SingletonListIterator.hasNext()", "SingletonListIterator.hasPrevious()", "SingletonListIterator.nextIndex()", "SingletonListIterator.previousIndex()", "SingletonListIterator.next()", "SingletonListIterator.previous()"], "associated_methods": ["SingletonListIterator.makeObject()"], "external_dependencies": {"modules": ["ListIterator", "NoSuchElementException"], "class_members": [{"name": "testValue", "type": "variable"}]}, "category": "unit", "description": "Tests the basic functionality of the SingletonListIterator, including hasNext, hasPrevious, nextIndex, previousIndex, next, and previous methods."}, {"name": "testReset", "primary_tested": ["SingletonListIterator.reset()"], "associated_methods": ["SingletonListIterator.makeObject()"], "external_dependencies": {"modules": ["ResettableListIterator"], "class_members": [{"name": "testValue", "type": "variable"}]}, "category": "unit", "description": "Tests the reset functionality of the SingletonListIterator, ensuring that the iterator can be reset to its initial state."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/ObjectArrayIteratorTest.java", "testclass_name": "ObjectArrayIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.Iterator;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.Test;"], "name": "ObjectArrayIteratorTest", "description": "Unit tests for the ObjectArrayIterator class, which is part of the Apache Commons Collections4 library.", "class_members": {"variables": [{"name": "testArray", "type": "String[]"}], "methods": [{"name": "makeArrayIterator", "signature": "ObjectArrayIterator<E> makeArrayIterator()"}, {"name": "makeArrayIterator", "signature": "ObjectArrayIterator<E> makeArrayIterator(E[] array)"}, {"name": "makeArrayIterator", "signature": "ObjectArrayIterator<E> makeArrayIterator(E[] array, int index)"}, {"name": "makeArrayIterator", "signature": "ObjectArrayIterator<E> makeArrayIterator(E[] array, int start, int end)"}, {"name": "makeEmptyIterator", "signature": "ObjectArrayIterator<E> makeEmptyIterator()"}, {"name": "makeObject", "signature": "ObjectArrayIterator<E> makeObject()"}, {"name": "supportsRemove", "signature": "boolean supportsRemove()"}]}, "test_cases": [{"name": "testIterator", "primary_tested": ["Iterator.next()"], "associated_methods": ["Iterator.hasNext()"], "external_dependencies": {"modules": ["Iterator", "NoSuchElementException"], "class_members": [{"name": "testArray", "type": "variable"}, {"name": "makeObject", "type": "method"}]}, "category": "unit", "description": "Tests the iteration functionality of the ObjectArrayIterator, ensuring it correctly iterates over the array and throws NoSuchElementException when exhausted."}, {"name": "testNullArray", "primary_tested": ["ObjectArrayIterator.ObjectArrayIterator(E[] array)"], "external_dependencies": {"modules": ["NullPointerException"], "class_members": [{"name": "makeArrayIterator", "type": "method"}]}, "category": "unit", "description": "Tests that creating an ObjectArrayIterator with a null array throws a NullPointerException."}, {"name": "testReset", "primary_tested": ["ObjectArrayIterator.reset()"], "associated_methods": ["ObjectArrayIterator.next()"], "external_dependencies": {"modules": ["ObjectArrayIterator"], "class_members": [{"name": "testArray", "type": "variable"}, {"name": "makeArrayIterator", "type": "method"}]}, "category": "unit", "description": "Tests the reset functionality of the ObjectArrayIterator, ensuring it correctly resets the iterator to the beginning of the array."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/NodeListIteratorTest.java", "testclass_name": "NodeListIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.easymock.EasyMock.createMock;", "import static org.easymock.EasyMock.expect;", "import static org.easymock.EasyMock.replay;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.Iterator;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import org.w3c.dom.Element;", "import org.w3c.dom.Node;", "import org.w3c.dom.NodeList;", "import org.w3c.dom.Text;"], "name": "NodeListIteratorTest", "description": "Unit tests for NodeListIterator class, focusing on different constructors and edge cases.", "class_members": {"variables": [{"name": "nodes", "type": "Node[]"}, {"name": "createIteratorWithStandardConstr", "type": "boolean"}], "methods": [{"name": "makeEmptyIterator", "signature": "Iterator<Node> makeEmptyIterator()"}, {"name": "makeObject", "signature": "Iterator<Node> makeObject()"}, {"name": "setUp", "signature": "void setUp() throws Exception"}, {"name": "supportsRemove", "signature": "boolean supportsRemove()"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEmptyIteratorWithNodeConstructor", "primary_tested": ["NodeListIterator.NodeListIterator(Node)"], "associated_methods": ["NodeListIteratorTest.testEmptyIterator()"], "external_dependencies": {"modules": ["NodeListIterator", "Node"], "class_members": [{"name": "createIteratorWithStandardConstr", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the constructor of NodeListIterator with a Node parameter for an empty iterator."}, {"name": "testFullIteratorWithNodeConstructor", "primary_tested": ["NodeListIterator.NodeListIterator(Node)"], "associated_methods": ["NodeListIteratorTest.testFullIterator()"], "external_dependencies": {"modules": ["NodeListIterator", "Node"], "class_members": [{"name": "createIteratorWithStandardConstr", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the constructor of NodeListIterator with a Node parameter for a full iterator."}, {"name": "testNullConstructor", "primary_tested": ["NodeListIterator.NodeListIterator(Node)"], "external_dependencies": {"modules": ["NodeListIterator", "Node"]}, "category": "unit", "fixtures_used": [], "description": "Tests the constructor of NodeListIterator with a null Node parameter, expecting a NullPointerException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/SingletonIterator2Test.java", "testclass_name": "SingletonIterator2Test", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Iterator;", "import java.util.NoSuchElementException;", "import org.apache.commons.collections4.ResettableIterator;", "import org.junit.jupiter.api.Test;"], "name": "SingletonIterator2Test", "description": "Tests for the SingletonIterator2 class, focusing on its iterator and reset functionalities.", "class_members": {"variables": [{"name": "testValue", "type": "static final Object"}], "methods": [{"name": "makeEmptyIterator", "signature": "SingletonIterator<E> makeEmptyIterator()"}, {"name": "makeObject", "signature": "SingletonIterator<E> makeObject()"}, {"name": "supportsEmptyIterator", "signature": "boolean supportsEmptyIterator()"}, {"name": "supportsRemove", "signature": "boolean supportsRemove()"}]}, "test_cases": [{"name": "testIterator", "primary_tested": ["SingletonIterator.hasNext()", "SingletonIterator.next()"], "associated_methods": ["SingletonIterator.remove()"], "external_dependencies": {"modules": ["Iterator", "NoSuchElementException"], "class_members": [{"name": "testValue", "type": "variable"}, {"name": "makeObject", "type": "method"}]}, "category": "unit", "description": "Tests the basic iterator functionality of SingletonIterator, including hasNext, next, and exception handling."}, {"name": "testReset", "primary_tested": ["ResettableIterator.reset()"], "associated_methods": ["ResettableIterator.hasNext()", "ResettableIterator.next()"], "external_dependencies": {"modules": ["ResettableIterator"], "class_members": [{"name": "testValue", "type": "variable"}, {"name": "makeObject", "type": "method"}]}, "category": "unit", "description": "Tests the reset functionality of ResettableIterator, ensuring that the iterator can be reset and used multiple times."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/splitmap/TransformedSplitMapTest.java", "testclass_name": "TransformedSplitMapTest", "dependencies": ["package org.apache.commons.collections4.splitmap;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.io.FileInputStream;", "import java.io.IOException;", "import java.io.ObjectInputStream;", "import java.math.BigInteger;", "import java.util.HashMap;", "import org.apache.commons.collections4.BulkTest;", "import org.apache.commons.collections4.MapIterator;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.functors.NOPTransformer;", "import org.apache.commons.lang3.StringUtils;", "import org.junit.jupiter.api.Test;"], "name": "TransformedSplitMapTest", "description": "Unit tests for TransformedSplitMap functionality.", "class_members": {"variables": [{"name": "intToString", "type": "Transformer<Integer, String>"}, {"name": "objectToClass", "type": "Transformer<Object, Class<?>>"}, {"name": "stringToInt", "type": "Transformer<String, Integer>"}]}, "fixtures": [], "test_cases": [{"name": "testEmptyMap", "primary_tested": ["TransformedSplitMap.isEmpty()"], "associated_methods": ["TransformedSplitMap.entrySet()"], "external_dependencies": {"modules": ["TransformedSplitMap", "HashMap", "NOPTransformer", "ObjectInputStream", "FileInputStream"], "class_members": [{"name": "TEST_DATA_PATH", "type": "static final String"}]}, "category": "unit", "description": "Tests if an empty TransformedSplitMap is correctly deserialized and remains empty."}, {"name": "testFullMap", "primary_tested": ["TransformedSplitMap.isEmpty()"], "associated_methods": ["TransformedSplitMap.entrySet()"], "external_dependencies": {"modules": ["TransformedSplitMap", "HashMap", "NOPTransformer", "ObjectInputStream", "FileInputStream"], "class_members": [{"name": "TEST_DATA_PATH", "type": "static final String"}]}, "category": "unit", "description": "Tests if a full TransformedSplitMap is correctly deserialized and remains full."}, {"name": "testMapIterator", "primary_tested": ["TransformedSplitMap.mapIterator()"], "associated_methods": ["TransformedSplitMap.size()", "TransformedSplitMap.put(String,String)", "TransformedSplitMap.get(String)"], "external_dependencies": {"modules": ["TransformedSplitMap", "HashMap", "NOPTransformer", "MapIterator"], "class_members": [{"name": "stringToInt", "type": "variable"}]}, "category": "unit", "description": "Tests the functionality of the MapIterator in TransformedSplitMap."}, {"name": "testTransformedMap", "primary_tested": ["TransformedSplitMap.transformingMap(HashMap,Transformer,Transformer)"], "associated_methods": ["TransformedSplitMap.size()", "TransformedSplitMap.put(Integer,Object)", "TransformedSplitMap.containsKey(String)", "TransformedSplitMap.containsValue(Class<?>)", "TransformedSplitMap.get(String)", "TransformedSplitMap.remove(String)"], "external_dependencies": {"modules": ["TransformedSplitMap", "HashMap", "NOPTransformer", "StringUtils", "BigInteger"], "class_members": [{"name": "intToString", "type": "variable"}, {"name": "objectToClass", "type": "variable"}, {"name": "stringToInt", "type": "variable"}]}, "category": "unit", "description": "Tests the transformation functionality of TransformedSplitMap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/IteratorChainTest.java", "testclass_name": "IteratorChainTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.apache.commons.collections4.IteratorUtils;", "import org.apache.commons.collections4.Predicate;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "IteratorChainTest", "description": "Unit tests for the IteratorChain class in Apache Commons Collections.", "class_members": {"variables": [{"name": "testArray", "type": "String[]"}, {"name": "list1", "type": "List<String>"}, {"name": "list2", "type": "List<String>"}, {"name": "list3", "type": "List<String>"}], "methods": [{"name": "makeEmptyIterator", "signature": "IteratorChain<String> makeEmptyIterator()"}, {"name": "makeObject", "signature": "IteratorChain<String> makeObject()"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEmptyChain", "primary_tested": [], "associated_methods": [], "external_dependencies": {"modules": ["IteratorChain", "NoSuchElementException", "IllegalStateException"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of an empty IteratorChain."}, {"name": "testFirstIteratorIsEmptyBug", "primary_tested": [], "associated_methods": [], "external_dependencies": {"modules": ["IteratorChain", "ArrayList"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior when the first iterator in the chain is empty."}, {"name": "testIterator", "primary_tested": [], "associated_methods": [], "external_dependencies": {"modules": ["IteratorChain", "NoSuchElementException"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the basic iteration functionality of the IteratorChain."}, {"name": "testRemove", "primary_tested": [], "associated_methods": [], "external_dependencies": {"modules": ["IteratorChain", "IllegalStateException"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the remove functionality of the IteratorChain."}, {"name": "testRemoveFromFilteredIterator", "primary_tested": [], "associated_methods": [], "external_dependencies": {"modules": ["IteratorUtils", "Predicate", "ArrayList"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the remove functionality from a filtered iterator within the IteratorChain."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/ArrayIterator2Test.java", "testclass_name": "ArrayIterator2Test", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.fail;", "import java.util.Iterator;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.Test;"], "name": "ArrayIterator2Test", "description": "Unit tests for ArrayIterator2 functionality.", "class_members": {"variables": [{"name": "testArray", "type": "int[]"}], "methods": [{"name": "makeArrayIterator", "signature": "ArrayIterator<E> makeArrayIterator(Object array)"}, {"name": "makeArrayIterator", "signature": "ArrayIterator<E> makeArrayIterator(Object array, int index)"}, {"name": "makeArrayIterator", "signature": "ArrayIterator<E> makeArrayIterator(Object array, int start, int end)"}, {"name": "makeEmptyIterator", "signature": "ArrayIterator<E> makeEmptyIterator()"}, {"name": "makeObject", "signature": "ArrayIterator<E> makeObject()"}, {"name": "supportsRemove", "signature": "boolean supportsRemove()"}]}, "fixtures": [], "test_cases": [{"name": "testIndexedArray", "primary_tested": ["ArrayIterator.hasNext()", "ArrayIterator.next()"], "associated_methods": ["ArrayIterator.makeArrayIterator(Object,int)", "ArrayIterator.makeArrayIterator(Object,int,int)"], "external_dependencies": {"modules": ["ArrayIterator", "ArrayIndexOutOfBoundsException", "IllegalArgumentException"], "class_members": [{"name": "testArray", "type": "variable"}, {"name": "makeArrayIterator", "type": "method"}]}, "category": "unit", "description": "Tests the indexed array functionality of ArrayIterator, including boundary conditions and exceptions."}, {"name": "testIterator", "primary_tested": ["ArrayIterator.hasNext()", "ArrayIterator.next()"], "associated_methods": ["ArrayIterator.makeObject()"], "external_dependencies": {"modules": ["ArrayIterator", "NoSuchElementException"], "class_members": [{"name": "testArray", "type": "variable"}, {"name": "makeObject", "type": "method"}]}, "category": "unit", "description": "Tests the basic iterator functionality of ArrayIterator, including iteration and exception handling."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableMapIteratorTest.java", "testclass_name": "UnmodifiableMapIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertNotSame;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Map;", "import org.apache.commons.collections4.IterableMap;", "import org.apache.commons.collections4.MapIterator;", "import org.apache.commons.collections4.Unmodifiable;", "import org.apache.commons.collections4.bidimap.DualHashBidiMap;", "import org.junit.jupiter.api.Test;"], "name": "UnmodifiableMapIteratorTest", "description": "Tests for the UnmodifiableMapIterator class, focusing on its factory methods and unmodifiable behavior.", "class_members": {"variables": [], "methods": [{"name": "getConfirmedMap", "signature": "Map<K, V> getConfirmedMap()"}, {"name": "getMap", "signature": "IterableMap<K, V> getMap()"}, {"name": "makeEmptyIterator", "signature": "MapIterator<K, V> makeEmptyIterator()"}, {"name": "makeObject", "signature": "MapIterator<K, V> makeObject()"}, {"name": "supportsRemove", "signature": "boolean supportsRemove()"}, {"name": "supportsSetValue", "signature": "boolean supportsSetValue()"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testDecorateFactory", "primary_tested": ["UnmodifiableMapIterator.unmodifiableMapIterator(MapIterator<K, V>)"], "associated_methods": ["DualHashBidiMap.mapIterator()"], "external_dependencies": {"modules": ["UnmodifiableMapIterator", "DualHashBidiMap", "MapIterator"], "class_members": [{"name": "makeObject", "type": "method"}, {"name": "getMap", "type": "method"}]}, "category": "unit", "description": "Tests the factory method of UnmodifiableMapIterator to ensure it correctly decorates and handles null input."}, {"name": "testMapIterator", "primary_tested": ["UnmodifiableMapIterator.unmodifiableMapIterator(MapIterator<K, V>)"], "associated_methods": [], "external_dependencies": {"modules": ["UnmodifiableMapIterator", "Unmodifiable", "MapIterator"], "class_members": [{"name": "makeEmptyIterator", "type": "method"}]}, "category": "unit", "description": "Tests that the MapIterator created by UnmodifiableMapIterator is indeed unmodifiable."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/properties/OrderedPropertiesFactoryTest.java", "testclass_name": "OrderedPropertiesFactoryTest", "dependencies": ["package org.apache.commons.collections4.properties;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import org.junit.jupiter.api.Test;"], "name": "OrderedPropertiesFactoryTest", "description": "Tests for the OrderedPropertiesFactory class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testInstance", "primary_tested": ["OrderedPropertiesFactory.INSTANCE"], "external_dependencies": {"modules": ["OrderedPropertiesFactory"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the instance of OrderedPropertiesFactory is not null."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableIteratorTest.java", "testclass_name": "UnmodifiableIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertNotSame;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.Iterator;", "import java.util.List;", "import org.apache.commons.collections4.Unmodifiable;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "UnmodifiableIteratorTest", "description": "Tests for the UnmodifiableIterator class, which decorates an iterator to ensure it cannot be modified.", "class_members": {"variables": [{"name": "testArray", "type": "String[]"}, {"name": "testList", "type": "List<E>"}], "methods": [{"name": "makeEmptyIterator", "signature": "Iterator<E> makeEmptyIterator()"}, {"name": "makeObject", "signature": "Iterator<E> makeObject()"}, {"name": "supportsRemove", "signature": "boolean supportsRemove()"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testDecorateFactory", "primary_tested": ["UnmodifiableIterator.unmodifiableIterator(Iterator<E>)"], "associated_methods": ["UnmodifiableIteratorTest.makeObject()"], "external_dependencies": {"modules": ["UnmodifiableIterator", "Iterator", "NullPointerException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the factory method of UnmodifiableIterator to ensure it correctly decorates an iterator and handles null input."}, {"name": "testIterator", "primary_tested": ["UnmodifiableIterator.makeEmptyIterator()"], "external_dependencies": {"modules": ["UnmodifiableIterator", "Unmodifiable"], "class_members": [{"name": "makeEmptyIterator", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests that the iterator created by makeEmptyIterator is an instance of Unmodifiable."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/UniqueFilterIteratorTest.java", "testclass_name": "UniqueFilterIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import java.util.ArrayList;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "UniqueFilterIteratorTest", "description": "Unit tests for the UniqueFilterIterator class, which filters out duplicate elements from an iterator.", "class_members": {"variables": [{"name": "testArray", "type": "String[]"}, {"name": "list1", "type": "List<E>"}], "methods": [{"name": "makeEmptyIterator", "signature": "UniqueFilterIterator<E> makeEmptyIterator()"}, {"name": "makeObject", "signature": "UniqueFilterIterator<E> makeObject()"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testIterator", "primary_tested": ["UniqueFilterIterator.next()"], "associated_methods": ["UniqueFilterIterator.hasNext()"], "external_dependencies": {"modules": ["UniqueFilterIterator", "ArrayList", "Iterator", "NoSuchElementException"], "class_members": [{"name": "list1", "type": "variable"}, {"name": "testArray", "type": "variable"}, {"name": "makeObject", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the iteration functionality of the UniqueFilterIterator, ensuring it correctly filters out duplicate elements and handles the end of the iterator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/properties/PropertiesFactoryTest.java", "testclass_name": "PropertiesFactoryTest", "dependencies": ["package org.apache.commons.collections4.properties;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import java.util.Properties;", "import org.junit.jupiter.api.Test;"], "name": "PropertiesFactoryTest", "description": "Test class for PropertiesFactory, extending AbstractPropertiesFactoryTest.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testInstance", "primary_tested": ["PropertiesFactory.INSTANCE"], "external_dependencies": {"modules": ["PropertiesFactory"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the PropertiesFactory instance is not null."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/ListOrderedMapTest.java", "testclass_name": "ListOrderedMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.ArrayList;", "import java.util.HashMap;", "import java.util.List;", "import java.util.Map;", "import java.util.TreeMap;", "import org.apache.commons.collections4.BulkTest;", "import org.apache.commons.collections4.MapIterator;", "import org.apache.commons.collections4.list.AbstractListTest;", "import org.apache.commons.lang3.StringUtils;", "import org.junit.jupiter.api.Test;"], "name": "ListOrderedMapTest", "description": "Unit tests for ListOrderedMap operations and functionalities.", "class_members": {"variables": [], "methods": [], "nested_classes": [{"name": "TestKeyListView", "description": "Internal helper class for testing key list view"}, {"name": "TestValueListView", "description": "Internal helper class for testing value list view"}]}, "fixtures": [], "test_cases": [{"name": "testCOLLECTIONS_474_nonNullValues", "primary_tested": ["ListOrderedMap.putAll(int,Map)"], "external_dependencies": {"modules": ["HashMap", "ListOrderedMap"], "class_members": []}, "category": "unit", "description": "Tests the putAll method with non-null values."}, {"name": "testCOLLECTIONS_474_nullValues", "primary_tested": ["ListOrderedMap.putAll(int,Map)"], "external_dependencies": {"modules": ["HashMap", "ListOrderedMap"], "class_members": []}, "category": "unit", "description": "Tests the putAll method with null values."}, {"name": "testGetByIndex", "primary_tested": ["ListOrderedMap.get(int)"], "external_dependencies": {"modules": ["ListOrderedMap", "MapIterator"], "class_members": []}, "category": "unit", "description": "Tests the get method by index."}, {"name": "testGetValueByIndex", "primary_tested": ["ListOrderedMap.getValue(int)"], "external_dependencies": {"modules": ["ListOrderedMap", "MapIterator"], "class_members": []}, "category": "unit", "description": "Tests the getValue method by index."}, {"name": "testIndexOf", "primary_tested": ["ListOrderedMap.indexOf(Object)"], "external_dependencies": {"modules": ["ListOrderedMap", "MapIterator", "ArrayList"], "class_members": []}, "category": "unit", "description": "Tests the indexOf method."}, {"name": "testPut_intObjectObject", "primary_tested": ["ListOrderedMap.put(int,Object,Object)"], "external_dependencies": {"modules": ["ListOrderedMap", "Integer", "IndexOutOfBoundsException"], "class_members": []}, "category": "unit", "description": "Tests the put method with index, key, and value."}, {"name": "testPutAllWithIndex", "primary_tested": ["ListOrderedMap.putAll(int,Map)"], "external_dependencies": {"modules": ["ListOrderedMap", "Map"], "class_members": []}, "category": "unit", "description": "Tests the putAll method with index."}, {"name": "testPutAllWithIndexBug441", "primary_tested": ["ListOrderedMap.putAll(int,Map)"], "external_dependencies": {"modules": ["ListOrderedMap", "TreeMap", "Integer"], "class_members": []}, "category": "unit", "description": "Tests the putAll method with index for bug COLLECTIONS-441."}, {"name": "testRemoveByIndex", "primary_tested": ["ListOrderedMap.remove(int)"], "external_dependencies": {"modules": ["ListOrderedMap", "MapIterator", "ArrayList"], "class_members": []}, "category": "unit", "description": "Tests the remove method by index."}, {"name": "testSetValueByIndex", "primary_tested": ["ListOrderedMap.setValue(int,Object)"], "external_dependencies": {"modules": ["ListOrderedMap", "StringUtils", "Integer"], "class_members": []}, "category": "unit", "description": "Tests the setValue method by index."}, {"name": "testValueList_getByIndex", "primary_tested": ["ListOrderedMap.valueList().get(int)"], "external_dependencies": {"modules": ["ListOrderedMap"], "class_members": []}, "category": "unit", "description": "Tests the valueList get method by index."}, {"name": "testValueList_removeByIndex", "primary_tested": ["ListOrderedMap.valueList().remove(int)"], "external_dependencies": {"modules": ["ListOrderedMap"], "class_members": []}, "category": "unit", "description": "Tests the valueList remove method by index."}, {"name": "testValueList_setByIndex", "primary_tested": ["ListOrderedMap.valueList().set(int,Object)"], "external_dependencies": {"modules": ["ListOrderedMap", "Integer"], "class_members": []}, "category": "unit", "description": "Tests the valueList set method by index."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/properties/SortedPropertiesFactoryTest.java", "testclass_name": "SortedPropertiesFactoryTest", "dependencies": ["package org.apache.commons.collections4.properties;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import org.junit.jupiter.api.Test;"], "name": "SortedPropertiesFactoryTest", "description": "Test class for SortedPropertiesFactory, extending AbstractPropertiesFactoryTest.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testInstance", "primary_tested": ["SortedPropertiesFactory.INSTANCE"], "external_dependencies": {"modules": ["SortedPropertiesFactory"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the SortedPropertiesFactory instance is not null."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/FilterIteratorTest.java", "testclass_name": "FilterIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.apache.commons.collections4.functors.TruePredicate.truePredicate;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.apache.commons.collections4.Predicate;", "import org.apache.commons.collections4.functors.NotNullPredicate;", "import org.apache.commons.lang3.ArrayUtils;", "import org.junit.jupiter.api.AfterEach;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "FilterIteratorTest", "description": "Unit tests for FilterIterator functionality, including hasNext, next, and predicate handling.", "class_members": {"variables": [{"name": "array", "type": "String[]"}, {"name": "list", "type": "List<E>"}, {"name": "iterator", "type": "FilterIterator<E>"}], "methods": [{"name": "initIterator", "signature": "void initIterator()"}, {"name": "makeBlockAllFilter", "signature": "FilterIterator<E> makeBlockAllFilter(Iterator<E>)"}, {"name": "makePassThroughFilter", "signature": "FilterIterator<E> makePassThroughFilter(Iterator<E>)"}, {"name": "verifyElementsInPredicate", "signature": "void verifyElementsInPredicate(String[])"}, {"name": "verifyNoMoreElements", "signature": "void verifyNoMoreElements()"}]}, "fixtures": ["setUp", "tearDown"], "test_cases": [{"name": "testRepeatedHasNext", "primary_tested": ["FilterIterator.hasNext()"], "external_dependencies": {"modules": ["FilterIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests repeated calls to hasNext method to ensure it returns the correct response."}, {"name": "testRepeatedNext", "primary_tested": ["FilterIterator.next()"], "associated_methods": ["FilterIterator.verifyNoMoreElements()"], "external_dependencies": {"modules": ["FilterIterator"], "class_members": [{"name": "iterator", "type": "variable"}, {"name": "verifyNoMoreElements", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests repeated calls to next method to ensure it returns the correct elements and handles end of iteration."}, {"name": "testReturnValues", "primary_tested": ["FilterIterator.next()"], "associated_methods": ["FilterIterator.verifyElementsInPredicate(String[])"], "external_dependencies": {"modules": ["FilterIterator", "ArrayUtils"], "class_members": [{"name": "iterator", "type": "variable"}, {"name": "verifyElementsInPredicate", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the return values of the next method with different predicates."}, {"name": "testSetIterator", "primary_tested": ["FilterIterator.setIterator(Iterator<E>)"], "external_dependencies": {"modules": ["FilterIterator", "Collections"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "description": "Tests setting a new iterator and checking hasNext with the new iterator."}, {"name": "testSetPredicate", "primary_tested": ["FilterIterator.setPredicate(Predicate<E>)"], "external_dependencies": {"modules": ["FilterIterator", "Collections", "NotNullPredicate"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "description": "Tests setting a new predicate and checking hasNext with the new predicate."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/PushbackIteratorTest.java", "testclass_name": "PushbackIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.Iterator;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "PushbackIteratorTest", "description": "Unit tests for the PushbackIterator class, which allows elements to be pushed back onto the iterator.", "class_members": {"variables": [{"name": "testArray", "type": "final String[]"}, {"name": "testList", "type": "List<E>"}], "methods": [{"name": "makeEmptyIterator", "signature": "Iterator<E> makeEmptyIterator()"}, {"name": "makeObject", "signature": "PushbackIterator<E> makeObject()"}, {"name": "supportsRemove", "signature": "boolean supportsRemove()"}, {"name": "validate", "signature": "void validate(Iterator<E> iter, Object... items)"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testDelayedPushback", "primary_tested": ["PushbackIterator.next()"], "associated_methods": ["PushbackIterator.pushback(E)"], "external_dependencies": {"modules": ["PushbackIterator", "Iterator"], "class_members": [{"name": "testList", "type": "variable"}, {"name": "makeObject", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the delayed pushback functionality of the PushbackIterator."}, {"name": "testImmediatePushback", "primary_tested": ["PushbackIterator.next()"], "associated_methods": ["PushbackIterator.pushback(E)"], "external_dependencies": {"modules": ["PushbackIterator", "Iterator"], "class_members": [{"name": "testList", "type": "variable"}, {"name": "makeObject", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the immediate pushback functionality of the PushbackIterator."}, {"name": "testMultiplePushback", "primary_tested": ["PushbackIterator.next()"], "associated_methods": ["PushbackIterator.pushback(E)"], "external_dependencies": {"modules": ["PushbackIterator", "Iterator"], "class_members": [{"name": "testList", "type": "variable"}, {"name": "makeObject", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the multiple pushback functionality of the PushbackIterator."}, {"name": "testNormalIteration", "primary_tested": ["PushbackIterator.next()"], "external_dependencies": {"modules": ["PushbackIterator", "Iterator"], "class_members": [{"name": "testList", "type": "variable"}, {"name": "makeObject", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the normal iteration functionality of the PushbackIterator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/ArrayListIteratorTest.java", "testclass_name": "ArrayListIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertArrayEquals;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.ListIterator;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.Test;"], "name": "ArrayListIteratorTest", "description": "Tests for the ArrayListIterator class, focusing on ListIterator functionality and set operation.", "class_members": {"methods": [{"name": "makeArrayListIterator", "signature": "ArrayListIterator<E> makeArrayListIterator(Object array)"}, {"name": "makeEmptyIterator", "signature": "ArrayListIterator<E> makeEmptyIterator()"}, {"name": "makeObject", "signature": "ArrayListIterator<E> makeObject()"}, {"name": "supportsRemove", "signature": "boolean supportsRemove()"}]}, "test_cases": [{"name": "testListIterator", "primary_tested": ["ListIterator.previous()"], "associated_methods": ["ListIterator.hasNext()", "ListIterator.next()"], "external_dependencies": {"modules": ["ListIterator", "NoSuchElementException"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "description": "Tests the basic ListIterator functionality by going backwards using previous()."}, {"name": "testListIteratorSet", "primary_tested": ["ListIterator.set(E)"], "associated_methods": ["ListIterator.hasNext()", "ListIterator.next()"], "external_dependencies": {"modules": ["ListIterator", "IllegalStateException"], "class_members": [{"name": "makeArrayListIterator", "type": "method"}]}, "category": "unit", "description": "Tests the ListIterator set operation and ensures it throws an IllegalStateException if next() or previous() have not been called."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/IteratorIterableTest.java", "testclass_name": "IteratorIterableTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.fail;", "import java.util.ArrayList;", "import java.util.Iterator;", "import java.util.List;", "import org.apache.commons.collections4.BulkTest;", "import org.junit.jupiter.api.Test;"], "name": "IteratorIterableTest", "description": "Tests for the IteratorIterable class, focusing on its behavior with iterators and iterables.", "class_members": {"methods": [{"name": "createIterator", "signature": "Iterator<Integer> createIterator()"}, {"name": "verifyIteration", "signature": "void verifyIteration(Iterable<Number> iterable)"}]}, "fixtures": [], "test_cases": [{"name": "testIterator", "primary_tested": ["IteratorIterable.<init>(Iterator<Integer>)"], "associated_methods": ["IteratorIterableTest.verifyIteration(Iterable<Number>)"], "external_dependencies": {"modules": ["Iterator", "Iterable", "IteratorIterable", "ArrayList", "List"], "class_members": [{"name": "createIterator", "type": "method"}, {"name": "verifyIteration", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of IteratorIterable when used with an iterator that should not be able to iterate twice."}, {"name": "testMultipleUserIterator", "primary_tested": ["IteratorIterable.<init>(Iterator<Integer>,boolean)"], "associated_methods": ["IteratorIterableTest.verifyIteration(Iterable<Number>)"], "external_dependencies": {"modules": ["Iterator", "Iterable", "IteratorIterable", "ArrayList", "List"], "class_members": [{"name": "createIterator", "type": "method"}, {"name": "verifyIteration", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of IteratorIterable when used with an iterator that should be able to iterate multiple times."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/properties/SortedPropertiesTest.java", "testclass_name": "SortedPropertiesTest", "dependencies": ["package org.apache.commons.collections4.properties;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import java.util.Enumeration;", "import java.util.Iterator;", "import java.util.Map;", "import org.junit.jupiter.api.Test;"], "name": "SortedPropertiesTest", "description": "Unit tests for the SortedProperties class, focusing on the entrySet and keys methods.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testEntrySet", "primary_tested": ["SortedProperties.entrySet()"], "associated_methods": ["SortedProperties.put(String,String)", "SortedProperties.iterator()"], "external_dependencies": {"modules": ["SortedProperties", "Map", "Iterator"]}, "category": "unit", "description": "Tests the entrySet method of SortedProperties to ensure entries are sorted correctly."}, {"name": "testKeys", "primary_tested": ["SortedProperties.keys()"], "associated_methods": ["SortedProperties.put(String,String)", "SortedProperties.nextElement()"], "external_dependencies": {"modules": ["SortedProperties", "Enumeration"]}, "category": "unit", "description": "Tests the keys method of SortedProperties to ensure keys are sorted correctly."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/CompositeMapTest.java", "testclass_name": "CompositeMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Collection;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeMapTest", "description": "Unit tests for the CompositeMap class, which is part of the Apache Commons Collections library.", "class_members": {"variables": [{"name": "pass", "type": "boolean"}], "methods": [{"name": "buildOne", "signature": "Map<K, V> buildOne()"}, {"name": "buildTwo", "signature": "Map<K, V> buildTwo()"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAddComposited", "primary_tested": ["CompositeMap.addComposited(Map<K, V>)"], "associated_methods": ["CompositeMap.containsKey(Object)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap"], "class_members": [{"name": "buildOne", "type": "method"}, {"name": "buildTwo", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addition of composited maps to a CompositeMap and checks for key presence."}, {"name": "testGet", "primary_tested": ["CompositeMap.get(Object)"], "external_dependencies": {"modules": ["CompositeMap"], "class_members": [{"name": "buildOne", "type": "method"}, {"name": "buildTwo", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retrieval of values from a CompositeMap."}, {"name": "testPut", "primary_tested": ["CompositeMap.put(K, V)"], "associated_methods": ["CompositeMap.MapMutator.put(CompositeMap<K, V>, Map<K, V>[], K, V)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap"], "class_members": [{"name": "buildOne", "type": "method"}, {"name": "buildTwo", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the insertion of a key-value pair into a CompositeMap using a custom MapMutator."}, {"name": "testPutAll", "primary_tested": ["CompositeMap.putAll(Map<? extends K, ? extends V>)"], "associated_methods": ["CompositeMap.MapMutator.putAll(CompositeMap<K, V>, Map<K, V>[], Map<? extends K, ? extends V>)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap"], "class_members": [{"name": "buildOne", "type": "method"}, {"name": "buildTwo", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the insertion of all key-value pairs from a map into a CompositeMap using a custom MapMutator."}, {"name": "testRemoveComposited", "primary_tested": ["CompositeMap.removeComposited(Map<K, V>)"], "associated_methods": ["CompositeMap.containsKey(Object)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap"], "class_members": [{"name": "buildOne", "type": "method"}, {"name": "buildTwo", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of composited maps from a CompositeMap and checks for key presence."}, {"name": "testRemoveFromComposited", "primary_tested": ["CompositeMap.remove(Object)"], "associated_methods": ["HashMap.containsKey(Object)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap"], "class_members": [{"name": "buildOne", "type": "method"}, {"name": "buildTwo", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of a key-value pair from a composited map within a CompositeMap."}, {"name": "testRemoveFromUnderlying", "primary_tested": ["HashMap.remove(Object)"], "associated_methods": ["CompositeMap.containsKey(Object)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap"], "class_members": [{"name": "buildOne", "type": "method"}, {"name": "buildTwo", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of a key-value pair from an underlying map within a CompositeMap."}, {"name": "testResolveCollision", "primary_tested": ["CompositeMap.MapMutator.resolveCollision(CompositeMap<K, V>, Map<K, V>, Map<K, V>, Collection<K>)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap"], "class_members": [{"name": "buildOne", "type": "method"}, {"name": "buildTwo", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the resolution of key collisions in a CompositeMap using a custom MapMutator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableListIteratorTest.java", "testclass_name": "UnmodifiableListIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertNotSame;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.List;", "import java.util.ListIterator;", "import org.apache.commons.collections4.Unmodifiable;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "UnmodifiableListIteratorTest", "description": "Tests for the UnmodifiableListIterator class, which decorates a ListIterator to ensure it is unmodifiable.", "class_members": {"variables": [{"name": "testArray", "type": "String[]"}, {"name": "testList", "type": "List<E>"}], "methods": [{"name": "makeEmptyIterator", "signature": "ListIterator<E> makeEmptyIterator()"}, {"name": "makeObject", "signature": "ListIterator<E> makeObject()"}, {"name": "setUp", "signature": "void setUp() throws Exception"}, {"name": "supportsAdd", "signature": "boolean supportsAdd()"}, {"name": "supportsRemove", "signature": "boolean supportsRemove()"}, {"name": "supportsSet", "signature": "boolean supportsSet()"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testDecorateFactory", "primary_tested": ["UnmodifiableListIterator.unmodifiableListIterator(ListIterator<E>)"], "associated_methods": ["UnmodifiableListIterator.unmodifiableListIterator(ListIterator<E>)"], "external_dependencies": {"modules": ["UnmodifiableListIterator", "ListIterator", "NullPointerException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the factory method for creating an unmodifiable list iterator and ensures it handles null input correctly."}, {"name": "testListIterator", "primary_tested": ["UnmodifiableListIterator.makeEmptyIterator()"], "external_dependencies": {"modules": ["UnmodifiableListIterator", "Unmodifiable"]}, "category": "unit", "description": "Tests that the empty iterator created is an instance of Unmodifiable."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/trie/PatriciaTrieTest.java", "testclass_name": "PatriciaTrieTest", "dependencies": ["package org.apache.commons.collections4.trie;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.ConcurrentModificationException;", "import java.util.HashSet;", "import java.util.Iterator;", "import java.util.Map;", "import java.util.NoSuchElementException;", "import java.util.Set;", "import java.util.SortedMap;", "import org.apache.commons.collections4.Trie;", "import org.apache.commons.collections4.map.AbstractSortedMapTest;", "import org.apache.commons.lang3.StringUtils;", "import org.junit.jupiter.api.Test;"], "name": "PatriciaTrieTest", "description": "Unit tests for PatriciaTrie operations, including prefix mapping and removal.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testPrefixMap", "primary_tested": ["PatriciaTrie.prefixMap(String)"], "associated_methods": ["PatriciaTrie.put(String,String)", "PatriciaTrie.get(String)", "PatriciaTrie.remove(String)"], "external_dependencies": {"modules": ["PatriciaTrie", "StringUtils", "SortedMap", "Iterator", "Map.Entry", "ConcurrentModificationException", "NoSuchElementException"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the prefix mapping functionality of the PatriciaTrie, including adding, retrieving, and removing entries based on prefixes."}, {"name": "testPrefixMapClear", "primary_tested": ["PatriciaTrie.prefixMap(String)"], "associated_methods": ["PatriciaTrie.put(String,Integer)", "SortedMap.clear()", "SortedMap.isEmpty()"], "external_dependencies": {"modules": ["PatriciaTrie", "SortedMap", "HashSet", "Arrays", "ArrayList"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests clearing a prefix map and verifying the state of the PatriciaTrie and the prefix map."}, {"name": "testPrefixMapClearNothing", "primary_tested": ["PatriciaTrie.prefixMap(String)"], "associated_methods": ["SortedMap.clear()", "SortedMap.isEmpty()"], "external_dependencies": {"modules": ["PatriciaTrie", "SortedMap", "HashSet", "ArrayList"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests clearing an empty prefix map and verifying the state of the PatriciaTrie and the prefix map."}, {"name": "testPrefixMapClearUsingRemove", "primary_tested": ["PatriciaTrie.prefixMap(String)"], "associated_methods": ["PatriciaTrie.put(String,Integer)", "SortedMap.remove(String)", "SortedMap.isEmpty()"], "external_dependencies": {"modules": ["PatriciaTrie", "SortedMap", "HashSet", "Arrays", "ArrayList"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests removing entries from a prefix map and verifying the state of the PatriciaTrie and the prefix map."}, {"name": "testPrefixMapRemoval", "primary_tested": ["PatriciaTrie.prefixMap(String)"], "associated_methods": ["PatriciaTrie.put(String,String)", "SortedMap.keySet().iterator().remove()"], "external_dependencies": {"modules": ["PatriciaTrie", "SortedMap", "Iterator"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests removing entries from a prefix map using the iterator's remove method and verifying the state of the PatriciaTrie and the prefix map."}, {"name": "testPrefixMapSizes", "primary_tested": ["PatriciaTrie.prefixMap(String)"], "associated_methods": ["PatriciaTrie.put(String,String)", "PatriciaTrie.prefixMap(String).size()", "PatriciaTrie.prefixMap(String).isEmpty()"], "external_dependencies": {"modules": ["PatriciaTrie", "SortedMap"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the size of the prefix map and verifies the state of the PatriciaTrie and the prefix map."}, {"name": "testPrefixMapSizes2", "primary_tested": ["PatriciaTrie.prefixMap(String)"], "associated_methods": ["PatriciaTrie.put(String,String)", "PatriciaTrie.prefixMap(String).size()", "PatriciaTrie.prefixMap(String).containsKey(String)"], "external_dependencies": {"modules": ["PatriciaTrie", "SortedMap", "StringUtils"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the size of the prefix map with specific character lengths and verifies the state of the PatriciaTrie and the prefix map."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMapTest.java", "testclass_name": "PassiveExpiringMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.fail;", "import java.util.HashMap;", "import java.util.Map;", "import java.util.concurrent.TimeUnit;", "import org.apache.commons.collections4.collection.AbstractCollectionTest;", "import org.apache.commons.collections4.map.PassiveExpiringMap.ExpirationPolicy;", "import org.junit.jupiter.api.Test;"], "name": "PassiveExpiringMapTest", "description": "Unit tests for the PassiveExpiringMap class, focusing on expiration policies and map operations.", "class_members": {"variables": [], "methods": [{"name": "makeDecoratedTestMap", "signature": "Map<Integer, String> makeDecoratedTestMap()"}, {"name": "makeTestMap", "signature": "Map<Integer, String> makeTestMap()"}, {"name": "validateExpiration", "signature": "void validateExpiration(Map<String, String> map, long timeout)"}], "nested_classes": [{"name": "TestExpirationPolicy", "description": "Internal class implementing ExpirationPolicy for testing purposes."}]}, "fixtures": [], "test_cases": [{"name": "testConstructors", "primary_tested": [], "associated_methods": [], "external_dependencies": {"modules": ["PassiveExpiringMap", "ExpirationPolicy", "TimeUnit"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the constructors of PassiveExpiringMap for exception handling."}, {"name": "testContainsKey", "primary_tested": ["PassiveExpiringMap.containsKey(Integer)"], "associated_methods": [], "external_dependencies": {"modules": ["PassiveExpiringMap"], "class_members": [{"name": "makeTestMap", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the containsKey method of PassiveExpiringMap."}, {"name": "testContainsValue", "primary_tested": ["PassiveExpiringMap.containsValue(String)"], "associated_methods": [], "external_dependencies": {"modules": ["PassiveExpiringMap"], "class_members": [{"name": "makeTestMap", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the containsValue method of PassiveExpiringMap."}, {"name": "testDecoratedMap", "primary_tested": ["PassiveExpiringMap.get(Integer)", "PassiveExpiringMap.remove(Integer)", "PassiveExpiringMap.put(Integer, String)"], "associated_methods": [], "external_dependencies": {"modules": ["PassiveExpiringMap"], "class_members": [{"name": "makeDecoratedTestMap", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of a decorated map with PassiveExpiringMap."}, {"name": "testEntrySet", "primary_tested": ["PassiveExpiringMap.entrySet()"], "associated_methods": [], "external_dependencies": {"modules": ["PassiveExpiringMap"], "class_members": [{"name": "makeTestMap", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the entrySet method of PassiveExpiringMap."}, {"name": "testExpiration", "primary_tested": [], "associated_methods": ["PassiveExpiringMap.validateExpiration(Map<String, String>, long)"], "external_dependencies": {"modules": ["PassiveExpiringMap", "PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy"], "class_members": [{"name": "validateExpiration", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the expiration behavior of PassiveExpiringMap with different timeouts."}, {"name": "testGet", "primary_tested": ["PassiveExpiringMap.get(Integer)"], "associated_methods": [], "external_dependencies": {"modules": ["PassiveExpiringMap"], "class_members": [{"name": "makeTestMap", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the get method of PassiveExpiringMap."}, {"name": "testIsEmpty", "primary_tested": ["PassiveExpiringMap.isEmpty()"], "associated_methods": [], "external_dependencies": {"modules": ["PassiveExpiringMap"], "class_members": [{"name": "makeTestMap", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the isEmpty method of PassiveExpiringMap."}, {"name": "testKeySet", "primary_tested": ["PassiveExpiringMap.keySet()"], "associated_methods": [], "external_dependencies": {"modules": ["PassiveExpiringMap"], "class_members": [{"name": "makeTestMap", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the keySet method of PassiveExpiringMap."}, {"name": "testPut", "primary_tested": ["PassiveExpiringMap.put(Integer, String)"], "associated_methods": [], "external_dependencies": {"modules": ["PassiveExpiringMap"], "class_members": [{"name": "makeTestMap", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the put method of PassiveExpiringMap."}, {"name": "testSize", "primary_tested": ["PassiveExpiringMap.size()"], "associated_methods": [], "external_dependencies": {"modules": ["PassiveExpiringMap"], "class_members": [{"name": "makeTestMap", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the size method of PassiveExpiringMap."}, {"name": "testValues", "primary_tested": ["PassiveExpiringMap.values()"], "associated_methods": [], "external_dependencies": {"modules": ["PassiveExpiringMap"], "class_members": [{"name": "makeTestMap", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the values method of PassiveExpiringMap."}, {"name": "testZeroTimeToLive", "primary_tested": ["PassiveExpiringMap.put(String, String)", "PassiveExpiringMap.get(String)"], "associated_methods": [], "external_dependencies": {"modules": ["PassiveExpiringMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of PassiveExpiringMap with zero time-to-live."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bidimap/UnmodifiableOrderedBidiMapTest.java", "testclass_name": "UnmodifiableOrderedBidiMapTest", "dependencies": ["package org.apache.commons.collections4.bidimap;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Map;", "import java.util.TreeMap;", "import org.apache.commons.collections4.OrderedBidiMap;", "import org.apache.commons.collections4.Unmodifiable;", "import org.junit.jupiter.api.Test;"], "name": "UnmodifiableOrderedBidiMapTest", "description": "Tests for the UnmodifiableOrderedBidiMap class, ensuring that the map is unmodifiable and behaves as expected.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testDecorateFactory", "primary_tested": ["UnmodifiableOrderedBidiMap.unmodifiableOrderedBidiMap(OrderedBidiMap)"], "associated_methods": [], "external_dependencies": {"modules": ["OrderedBidiMap", "UnmodifiableOrderedBidiMap"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the factory method for decorating an OrderedBidiMap as unmodifiable."}, {"name": "testUnmodifiable", "primary_tested": ["UnmodifiableOrderedBidiMap.makeObject()", "UnmodifiableOrderedBidiMap.makeFullMap()"], "associated_methods": [], "external_dependencies": {"modules": ["Unmodifiable", "UnmodifiableOrderedBidiMap"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the created objects are instances of Unmodifiable."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueueTest.java", "testclass_name": "CircularFifoQueueTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.io.ByteArrayInputStream;", "import java.io.ByteArrayOutputStream;", "import java.io.ObjectInputStream;", "import java.io.ObjectOutputStream;", "import java.util.ArrayList;", "import java.util.Collection;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import java.util.Queue;", "import org.junit.jupiter.api.Test;"], "name": "CircularFifoQueueTest", "description": "Unit tests for the CircularFifoQueue class, focusing on its behavior and edge cases.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testAddNull", "primary_tested": ["CircularFifoQueue.add(E)"], "external_dependencies": {"modules": ["CircularFifoQueue"]}, "category": "unit", "description": "Tests that adding a null element to the CircularFifoQueue throws a NullPointerException."}, {"name": "testCircularFifoQueueCircular", "primary_tested": ["CircularFifoQueue.add(E)", "CircularFifoQueue.contains(Object)", "CircularFifoQueue.peek()", "CircularFifoQueue.remove()"], "external_dependencies": {"modules": ["CircularFifoQueue", "ArrayList"]}, "category": "unit", "description": "Tests the circular behavior of the CircularFifoQueue by adding elements and checking their presence and order."}, {"name": "testCircularFifoQueueRemove", "primary_tested": ["CircularFifoQueue.remove()"], "associated_methods": ["CircularFifoQueue.resetFull()"], "external_dependencies": {"modules": ["CircularFifoQueue", "List"]}, "category": "unit", "description": "Tests the removal operation of the CircularFifoQueue to ensure it removes the first element correctly."}, {"name": "testConstructorException1", "primary_tested": ["CircularFifoQueue.<init>(int)"], "external_dependencies": {"modules": ["CircularFifoQueue"]}, "category": "unit", "description": "Tests that the constructor throws an IllegalArgumentException when given a size of 0."}, {"name": "testConstructorException2", "primary_tested": ["CircularFifoQueue.<init>(int)"], "external_dependencies": {"modules": ["CircularFifoQueue"]}, "category": "unit", "description": "Tests that the constructor throws an IllegalArgumentException when given a negative size."}, {"name": "testConstructorException3", "primary_tested": ["CircularFifoQueue.<init>(Collection)"], "external_dependencies": {"modules": ["CircularFifoQueue"]}, "category": "unit", "description": "Tests that the constructor throws a NullPointerException when given a null collection."}, {"name": "testDefaultSizeAndGetError1", "primary_tested": ["CircularFifoQueue.maxSize()", "CircularFifoQueue.add(E)", "CircularFifoQueue.size()", "CircularFifoQueue.get(int)"], "external_dependencies": {"modules": ["CircularFifoQueue"]}, "category": "unit", "description": "Tests the default size of the CircularFifoQueue and ensures that accessing an out-of-bounds index throws a NoSuchElementException."}, {"name": "testDefaultSizeAndGetError2", "primary_tested": ["CircularFifoQueue.maxSize()", "CircularFifoQueue.add(E)", "CircularFifoQueue.size()", "CircularFifoQueue.get(int)"], "external_dependencies": {"modules": ["CircularFifoQueue"]}, "category": "unit", "description": "Tests the default size of the CircularFifoQueue and ensures that accessing a negative index throws a NoSuchElementException."}, {"name": "testGetIndex", "primary_tested": ["CircularFifoQueue.get(int)", "CircularFifoQueue.remove()"], "associated_methods": ["CircularFifoQueue.resetFull()"], "external_dependencies": {"modules": ["CircularFifoQueue", "List"]}, "category": "unit", "description": "Tests the get operation of the CircularFifoQueue to ensure it retrieves elements correctly."}, {"name": "testRemoveError1", "primary_tested": ["CircularFifoQueue.add(E)", "CircularFifoQueue.remove(Object)", "CircularFifoQueue.toString()"], "external_dependencies": {"modules": ["CircularFifoQueue"]}, "category": "unit", "description": "Tests the removal of elements from the CircularFifoQueue and verifies the queue's state after each removal."}, {"name": "testRemoveError2", "primary_tested": ["CircularFifoQueue.add(E)", "CircularFifoQueue.remove(Object)", "CircularFifoQueue.toString()"], "external_dependencies": {"modules": ["CircularFifoQueue"]}, "category": "unit", "description": "Tests the removal of elements from the CircularFifoQueue and verifies the queue's state after each removal, including overflow behavior."}, {"name": "testRemoveError3", "primary_tested": ["CircularFifoQueue.add(E)", "CircularFifoQueue.remove(Object)", "CircularFifoQueue.toString()"], "external_dependencies": {"modules": ["CircularFifoQueue"]}, "category": "unit", "description": "Tests the removal of elements from the CircularFifoQueue and verifies the queue's state after each removal, including adding new elements after removals."}, {"name": "testRemoveError4", "primary_tested": ["CircularFifoQueue.add(E)", "CircularFifoQueue.remove(Object)", "CircularFifoQueue.toString()"], "external_dependencies": {"modules": ["CircularFifoQueue"]}, "category": "unit", "description": "Tests the removal of elements from the CircularFifoQueue and verifies the queue's state after each removal, focusing on elements in the middle of the array."}, {"name": "testRemoveError5", "primary_tested": ["CircularFifoQueue.add(E)", "CircularFifoQueue.remove(Object)", "CircularFifoQueue.toString()"], "external_dependencies": {"modules": ["CircularFifoQueue"]}, "category": "unit", "description": "Tests the removal of elements from the CircularFifoQueue and verifies the queue's state after each removal, focusing on the last element in the array."}, {"name": "testRemoveError6", "primary_tested": ["CircularFifoQueue.add(E)", "CircularFifoQueue.remove(Object)", "CircularFifoQueue.toString()"], "external_dependencies": {"modules": ["CircularFifoQueue"]}, "category": "unit", "description": "Tests the removal of elements from the CircularFifoQueue and verifies the queue's state after each removal, focusing on the first element in the array."}, {"name": "testRemoveError7", "primary_tested": ["CircularFifoQueue.add(E)", "CircularFifoQueue.remove(Object)", "CircularFifoQueue.toString()"], "external_dependencies": {"modules": ["CircularFifoQueue"]}, "category": "unit", "description": "Tests the removal of elements from the CircularFifoQueue and verifies the queue's state after each removal, focusing on the second element in the array."}, {"name": "testRemoveError8", "primary_tested": ["CircularFifoQueue.add(E)", "CircularFifoQueue.remove(Object)", "CircularFifoQueue.toString()"], "external_dependencies": {"modules": ["CircularFifoQueue"]}, "category": "unit", "description": "Tests the removal of elements from the CircularFifoQueue and verifies the queue's state after each removal, focusing on the second element in the array with additional elements added."}, {"name": "testRemoveError9", "primary_tested": ["CircularFifoQueue.add(E)", "CircularFifoQueue.remove(Object)", "CircularFifoQueue.toString()"], "external_dependencies": {"modules": ["CircularFifoQueue"]}, "category": "unit", "description": "Tests the removal of elements from the CircularFifoQueue and verifies the queue's state after each removal, focusing on the third element in the array."}, {"name": "testRepeatedSerialization", "primary_tested": ["CircularFifoQueue.add(E)", "CircularFifoQueue.contains(Object)", "CircularFifoQueue.size()"], "external_dependencies": {"modules": ["CircularFifoQueue", "ByteArrayInputStream", "ByteArrayOutputStream", "ObjectInputStream", "ObjectOutputStream"]}, "category": "unit", "description": "Tests the serialization and deserialization of the CircularFifoQueue to ensure its state is preserved."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/LoopingIteratorTest.java", "testclass_name": "LoopingIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.Test;"], "name": "LoopingIteratorTest", "description": "Unit tests for the LoopingIterator class, which tests various functionalities such as constructor exceptions, looping behavior, removal, reset, and size.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testConstructorEx", "primary_tested": ["LoopingIterator.<init>(List)"], "external_dependencies": {"modules": ["LoopingIterator", "NullPointerException"]}, "category": "unit", "description": "Tests the constructor exception when a null list is passed."}, {"name": "testLooping0", "primary_tested": ["LoopingIterator.hasNext()", "LoopingIterator.next()"], "external_dependencies": {"modules": ["LoopingIterator", "ArrayList", "NoSuchElementException"]}, "category": "unit", "description": "Tests the behavior of an empty looping iterator."}, {"name": "testLooping1", "primary_tested": ["LoopingIterator.hasNext()", "LoopingIterator.next()"], "external_dependencies": {"modules": ["LoopingIterator", "Arrays"]}, "category": "unit", "description": "Tests the behavior of a looping iterator with a single element."}, {"name": "testLooping2", "primary_tested": ["LoopingIterator.hasNext()", "LoopingIterator.next()"], "external_dependencies": {"modules": ["LoopingIterator", "Arrays"]}, "category": "unit", "description": "Tests the behavior of a looping iterator with two elements."}, {"name": "testLooping3", "primary_tested": ["LoopingIterator.hasNext()", "LoopingIterator.next()"], "external_dependencies": {"modules": ["LoopingIterator", "Arrays"]}, "category": "unit", "description": "Tests the behavior of a looping iterator with three elements."}, {"name": "testRemoving1", "primary_tested": ["LoopingIterator.hasNext()", "LoopingIterator.next()", "LoopingIterator.remove()"], "external_dependencies": {"modules": ["LoopingIterator", "ArrayList", "Arrays", "NoSuchElementException"]}, "category": "unit", "description": "Tests the remove() method on a LoopingIterator wrapped ArrayList."}, {"name": "testReset", "primary_tested": ["LoopingIterator.next()", "LoopingIterator.reset()"], "external_dependencies": {"modules": ["LoopingIterator", "Arrays"]}, "category": "unit", "description": "Tests the reset() method on a LoopingIterator wrapped ArrayList."}, {"name": "testSize", "primary_tested": ["LoopingIterator.size()", "LoopingIterator.next()", "LoopingIterator.reset()", "LoopingIterator.remove()"], "external_dependencies": {"modules": ["LoopingIterator", "ArrayList", "Arrays"]}, "category": "unit", "description": "Tests the size() method on a LoopingIterator wrapped ArrayList."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/ListIteratorWrapper2Test.java", "testclass_name": "ListIteratorWrapper2Test", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.ArrayList;", "import java.util.List;", "import java.util.ListIterator;", "import java.util.NoSuchElementException;", "import org.apache.commons.collections4.ResettableListIterator;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ListIteratorWrapper2Test", "description": "Unit tests for the ListIteratorWrapper class, focusing on its iteration and reset functionalities.", "class_members": {"variables": [{"name": "testArray", "type": "String[]"}, {"name": "list1", "type": "List<E>"}], "methods": [{"name": "makeEmptyIterator", "signature": "ResettableListIterator<E> makeEmptyIterator()"}, {"name": "makeObject", "signature": "ResettableListIterator<E> makeObject()"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testIterator", "primary_tested": ["ListIterator.next()", "ListIterator.previous()"], "associated_methods": ["ListIterator.hasNext()"], "external_dependencies": {"modules": ["ListIterator", "NoSuchElementException"], "class_members": [{"name": "list1", "type": "variable"}, {"name": "testArray", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the iteration functionality of the ListIteratorWrapper, including forward and backward iteration, and handling of NoSuchElementException."}, {"name": "testRemove", "primary_tested": ["ListIterator.remove()"], "associated_methods": ["ListIterator.previousIndex()", "ListIterator.nextIndex()", "ListIterator.next()", "ListIterator.previous()"], "external_dependencies": {"modules": ["ListIterator", "IllegalStateException"], "class_members": [{"name": "list1", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the remove functionality of the ListIteratorWrapper, including handling of IllegalStateException and verifying the state after removal."}, {"name": "testReset", "primary_tested": ["ResettableListIterator.reset()"], "associated_methods": ["ResettableListIterator.next()", "ResettableListIterator.hasPrevious()"], "external_dependencies": {"modules": ["ResettableListIterator"], "class_members": [{"name": "list1", "type": "variable"}, {"name": "testArray", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the reset functionality of the ResettableListIterator, ensuring that the iterator state is correctly reset and iteration continues as expected."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIterator_previousIndexTest.java", "testclass_name": "LoopingListIterator_previousIndexTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.Arrays;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "LoopingListIterator_previousIndexTest", "description": "Unit tests for the previousIndex method of the LoopingListIterator class.", "class_members": {"variables": [{"name": "loopingListIterator", "type": "LoopingListIterator<String>"}, {"name": "list", "type": "List<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPreviousIndexWithEmptyList", "primary_tested": ["LoopingListIterator.previousIndex()"], "external_dependencies": {"modules": ["LoopingListIterator", "NoSuchElementException"], "class_members": [{"name": "loopingListIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the previousIndex method when the list is empty, expecting a NoSuchElementException."}, {"name": "testPreviousIndexAtBeginning", "primary_tested": ["LoopingListIterator.previousIndex()"], "external_dependencies": {"modules": ["LoopingListIterator"], "class_members": [{"name": "loopingListIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the previousIndex method at the beginning of the list."}, {"name": "testPreviousIndexAfterPrevious", "primary_tested": ["LoopingListIterator.previousIndex()"], "associated_methods": ["LoopingListIterator.previous()"], "external_dependencies": {"modules": ["LoopingListIterator"], "class_members": [{"name": "loopingListIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the previousIndex method after calling the previous method."}, {"name": "testPreviousIndexAfterReset", "primary_tested": ["LoopingListIterator.previousIndex()"], "associated_methods": ["LoopingListIterator.reset()"], "external_dependencies": {"modules": ["LoopingListIterator"], "class_members": [{"name": "loopingListIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the previousIndex method after resetting the iterator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/LazyIteratorChainTest.java", "testclass_name": "LazyIteratorChainTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.apache.commons.collections4.IteratorUtils;", "import org.apache.commons.collections4.Predicate;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "LazyIteratorChainTest", "description": "Unit tests for the LazyIteratorChain class, which chains multiple iterators together.", "class_members": {"variables": [{"name": "testArray", "type": "String[]"}, {"name": "list1", "type": "List<String>"}, {"name": "list2", "type": "List<String>"}, {"name": "list3", "type": "List<String>"}], "methods": [{"name": "makeEmptyIterator", "signature": "LazyIteratorChain<String> makeEmptyIterator()"}, {"name": "makeObject", "signature": "LazyIteratorChain<String> makeObject()"}, {"name": "setUp", "signature": "void setUp()"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEmptyChain", "primary_tested": ["LazyIteratorChain.hasNext()"], "associated_methods": ["LazyIteratorChain.next()", "LazyIteratorChain.remove()"], "external_dependencies": {"modules": ["LazyIteratorChain", "NoSuchElementException", "IllegalStateException"], "class_members": [{"name": "makeEmptyIterator", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior of an empty LazyIteratorChain."}, {"name": "testFirstIteratorIsEmptyBug", "primary_tested": ["LazyIteratorChain.hasNext()", "LazyIteratorChain.next()"], "associated_methods": [], "external_dependencies": {"modules": ["LazyIteratorChain", "ArrayList"], "class_members": []}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior when the first iterator in the chain is empty."}, {"name": "testIterator", "primary_tested": ["LazyIteratorChain.next()"], "associated_methods": ["LazyIteratorChain.hasNext()"], "external_dependencies": {"modules": ["LazyIteratorChain", "NoSuchElementException"], "class_members": [{"name": "makeObject", "type": "method"}, {"name": "testArray", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the iteration functionality of the LazyIteratorChain."}, {"name": "testRemove", "primary_tested": ["LazyIteratorChain.remove()"], "associated_methods": ["LazyIteratorChain.next()"], "external_dependencies": {"modules": ["LazyIteratorChain", "IllegalStateException"], "class_members": [{"name": "makeObject", "type": "method"}, {"name": "testArray", "type": "variable"}, {"name": "list1", "type": "variable"}, {"name": "list2", "type": "variable"}, {"name": "list3", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the remove functionality of the LazyIteratorChain."}, {"name": "testRemoveFromFilteredIterator", "primary_tested": ["IteratorUtils.filteredIterator(Iterator, Predicate)", "IteratorUtils.chainedIterator(Iterator, Iterator)"], "associated_methods": ["Iterator.hasNext()", "Iterator.next()", "Iterator.remove()"], "external_dependencies": {"modules": ["IteratorUtils", "Predicate", "ArrayList"], "class_members": []}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal functionality from a filtered iterator chained with another iterator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/ReverseListIteratorTest.java", "testclass_name": "ReverseListIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.List;", "import java.util.ListIterator;", "import java.util.NoSuchElementException;", "import org.apache.commons.collections4.ResettableListIterator;", "import org.junit.jupiter.api.Test;"], "name": "ReverseListIteratorTest", "description": "Unit tests for the ReverseListIterator class, which reverses the order of elements in a list iterator.", "class_members": {"variables": [{"name": "testArray", "type": "String[]"}], "methods": [{"name": "makeEmptyIterator", "signature": "ListIterator<E> makeEmptyIterator()"}, {"name": "makeObject", "signature": "ReverseListIterator<E> makeObject()"}]}, "fixtures": [], "test_cases": [{"name": "testEmptyListIteratorIsIndeedEmpty", "primary_tested": ["ListIterator.hasNext()", "ListIterator.nextIndex()", "ListIterator.hasPrevious()", "ListIterator.previousIndex()", "ListIterator.next()", "ListIterator.previous()"], "external_dependencies": {"modules": ["ListIterator", "NoSuchElementException"], "class_members": [{"name": "makeEmptyIterator", "type": "method"}]}, "category": "unit", "description": "Tests that an empty list iterator behaves correctly, including throwing NoSuchElementException when next() or previous() is called."}, {"name": "testReset", "primary_tested": ["ResettableListIterator.next()", "ResettableListIterator.reset()"], "external_dependencies": {"modules": ["ResettableListIterator"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "description": "Tests the reset functionality of the ResettableListIterator, ensuring that the iterator returns to the start after reset."}, {"name": "testReverse", "primary_tested": ["ListIterator.hasNext()", "ListIterator.nextIndex()", "ListIterator.hasPrevious()", "ListIterator.previousIndex()", "ListIterator.next()", "ListIterator.previous()"], "external_dependencies": {"modules": ["ListIterator"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "description": "Tests the reverse iteration functionality, ensuring that the iterator correctly navigates through the list in reverse order."}, {"name": "testWalkForwardAndBack", "primary_tested": ["ListIterator.hasNext()", "ListIterator.next()", "ListIterator.hasPrevious()", "ListIterator.previous()"], "external_dependencies": {"modules": ["ListIterator", "NoSuchElementException"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "description": "Tests walking forward and backward through the list iterator, ensuring correct state and behavior at both ends of the list."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/MultiKeyMapTest.java", "testclass_name": "MultiKeyMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.fail;", "import java.util.Map;", "import org.apache.commons.collections4.MapIterator;", "import org.apache.commons.collections4.keyvalue.MultiKey;", "import org.junit.jupiter.api.Test;"], "name": "MultiKeyMapTest", "description": "Unit tests for the MultiKeyMap class, focusing on various operations like cloning, LRU behavior, key checks, value retrieval, and removal.", "class_members": {"variables": [{"name": "I1", "type": "static final Integer"}, {"name": "I2", "type": "static final Integer"}, {"name": "I3", "type": "static final Integer"}, {"name": "I4", "type": "static final Integer"}, {"name": "I5", "type": "static final Integer"}, {"name": "I6", "type": "static final Integer"}, {"name": "I7", "type": "static final Integer"}, {"name": "I8", "type": "static final Integer"}], "methods": [{"name": "getMultiKeyKeys", "signature": "@SuppressWarnings(\"unchecked\") private MultiKey<K>[] getMultiKeyKeys()"}, {"name": "getNewSampleValues", "signature": "@Override @SuppressWarnings(\"unchecked\") public V[] getNewSampleValues()"}, {"name": "getOtherKeys", "signature": "@Override @SuppressWarnings(\"unchecked\") public MultiKey<K>[] getOtherKeys()"}, {"name": "getSampleKeys", "signature": "@Override public MultiKey<K>[] getSampleKeys()"}, {"name": "getSampleValues", "signature": "@Override @SuppressWarnings(\"unchecked\") public V[] getSampleValues()"}, {"name": "isAllowNullKey", "signature": "@Override public boolean isAllowNullKey()"}, {"name": "makeObject", "signature": "@Override public MultiKeyMap<K, V> makeObject()"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testClone", "primary_tested": ["MultiKeyMap.clone()"], "external_dependencies": {"modules": ["MultiKeyMap", "MultiKey"], "class_members": [{"name": "I1", "type": "variable"}, {"name": "I2", "type": "variable"}]}, "category": "unit", "description": "Tests the cloning functionality of the MultiKeyMap."}, {"name": "testLRUMultiKeyMap", "primary_tested": ["MultiKeyMap.multiKeyMap(LRUMap)", "MultiKeyMap.put(K,K,V)", "MultiKeyMap.containsKey(K,K)"], "external_dependencies": {"modules": ["MultiKeyMap", "LRUMap", "MultiKey"], "class_members": [{"name": "I1", "type": "variable"}, {"name": "I2", "type": "variable"}, {"name": "I3", "type": "variable"}, {"name": "I4", "type": "variable"}, {"name": "I5", "type": "variable"}]}, "category": "unit", "description": "Tests the LRU behavior of the MultiKeyMap."}, {"name": "testMultiKeyContainsKey", "primary_tested": ["MultiKeyMap.containsKey(K,K)", "MultiKeyMap.containsKey(K,K,K)", "MultiKeyMap.containsKey(K,K,K,K)", "MultiKeyMap.containsKey(K,K,K,K,K)"], "external_dependencies": {"modules": ["MultiKeyMap", "MultiKey"], "class_members": [{"name": "getMultiKeyKeys", "type": "method"}]}, "category": "unit", "description": "Tests the key containment checks in the MultiKeyMap."}, {"name": "testMultiKeyGet", "primary_tested": ["MultiKeyMap.get(K,K)", "MultiKeyMap.get(K,K,K)", "MultiKeyMap.get(K,K,K,K)", "MultiKeyMap.get(K,K,K,K,K)"], "external_dependencies": {"modules": ["MultiKeyMap", "MultiKey"], "class_members": [{"name": "getMultiKeyKeys", "type": "method"}, {"name": "getSampleValues", "type": "method"}]}, "category": "unit", "description": "Tests the value retrieval functionality of the MultiKeyMap."}, {"name": "testMultiKeyPut", "primary_tested": ["MultiKeyMap.put(K,K,V)", "MultiKeyMap.put(K,K,K,V)", "MultiKeyMap.put(K,K,K,K,V)", "MultiKeyMap.put(K,K,K,K,K,V)"], "external_dependencies": {"modules": ["MultiKeyMap", "MultiKey"], "class_members": [{"name": "getMultiKeyKeys", "type": "method"}, {"name": "getSampleValues", "type": "method"}]}, "category": "unit", "description": "Tests the put functionality of the MultiKeyMap."}, {"name": "testMultiKeyPutWithNullKey", "primary_tested": ["MultiKeyMap.put(K,K,V)"], "external_dependencies": {"modules": ["MultiKeyMap"]}, "category": "unit", "description": "Tests the put functionality of the MultiKeyMap with null keys."}, {"name": "testMultiKeyRemove", "primary_tested": ["MultiKeyMap.removeMultiKey(K,K)", "MultiKeyMap.removeMultiKey(K,K,K)", "MultiKeyMap.removeMultiKey(K,K,K,K)", "MultiKeyMap.removeMultiKey(K,K,K,K,K)"], "external_dependencies": {"modules": ["MultiKeyMap", "MultiKey"], "class_members": [{"name": "getMultiKeyKeys", "type": "method"}, {"name": "getSampleValues", "type": "method"}]}, "category": "unit", "description": "Tests the remove functionality of the MultiKeyMap."}, {"name": "testMultiKeyRemoveAll1", "primary_tested": ["MultiKeyMap.removeAll(K)"], "external_dependencies": {"modules": ["MultiKeyMap", "MapIterator"], "class_members": [{"name": "I1", "type": "variable"}]}, "category": "unit", "description": "Tests the removeAll functionality of the MultiKeyMap with a single key."}, {"name": "testMultiKeyRemoveAll2", "primary_tested": ["MultiKeyMap.removeAll(K,K)"], "external_dependencies": {"modules": ["MultiKeyMap", "MapIterator"], "class_members": [{"name": "I2", "type": "variable"}, {"name": "I3", "type": "variable"}]}, "category": "unit", "description": "Tests the removeAll functionality of the MultiKeyMap with two keys."}, {"name": "testMultiKeyRemoveAll3", "primary_tested": ["MultiKeyMap.removeAll(K,K,K)"], "external_dependencies": {"modules": ["MultiKeyMap", "MapIterator"], "class_members": [{"name": "I1", "type": "variable"}, {"name": "I2", "type": "variable"}]}, "category": "unit", "description": "Tests the removeAll functionality of the MultiKeyMap with three keys."}, {"name": "testMultiKeyRemoveAll4", "primary_tested": ["MultiKeyMap.removeAll(K,K,K,K)"], "external_dependencies": {"modules": ["MultiKeyMap", "MapIterator"], "class_members": [{"name": "I1", "type": "variable"}, {"name": "I2", "type": "variable"}, {"name": "I3", "type": "variable"}]}, "category": "unit", "description": "Tests the removeAll functionality of the MultiKeyMap with four keys."}, {"name": "testNullHandling", "primary_tested": ["MultiKeyMap.get(K)", "MultiKeyMap.containsKey(K)", "MultiKeyMap.containsValue(V)", "MultiKeyMap.remove(K)", "MultiKeyMap.entrySet().contains(K)", "MultiKeyMap.put(K,V)"], "external_dependencies": {"modules": ["MultiKeyMap", "MultiKey"]}, "category": "unit", "description": "Tests the handling of null values and keys in the MultiKeyMap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/ListIteratorWrapperTest.java", "testclass_name": "ListIteratorWrapperTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.ArrayList;", "import java.util.List;", "import java.util.ListIterator;", "import java.util.NoSuchElementException;", "import org.apache.commons.collections4.ResettableListIterator;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ListIteratorWrapperTest", "description": "Unit tests for the ListIteratorWrapper class, which wraps a ListIterator and provides additional functionality.", "class_members": {"variables": [{"name": "testArray", "type": "String[]"}, {"name": "list1", "type": "List<E>"}], "methods": [{"name": "makeEmptyIterator", "signature": "ResettableListIterator<E> makeEmptyIterator()"}, {"name": "makeObject", "signature": "ResettableListIterator<E> makeObject()"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testIterator", "primary_tested": ["ListIterator.next()", "ListIterator.hasNext()", "ListIterator.previous()"], "external_dependencies": {"modules": ["ListIterator", "NoSuchElementException"], "class_members": [{"name": "list1", "type": "variable"}, {"name": "testArray", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the basic iteration functionality of the ListIteratorWrapper, including forward and backward iteration, and handling of NoSuchElementException."}, {"name": "testRemove", "primary_tested": ["ListIterator.remove()"], "associated_methods": ["ListIterator.previousIndex()", "ListIterator.nextIndex()", "ListIterator.next()", "ListIterator.previous()"], "external_dependencies": {"modules": ["ListIterator", "IllegalStateException"], "class_members": [{"name": "list1", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the remove functionality of the ListIteratorWrapper, including handling of IllegalStateException and correct state management after removal."}, {"name": "testReset", "primary_tested": ["ResettableListIterator.reset()"], "associated_methods": ["ResettableListIterator.next()", "ResettableListIterator.hasPrevious()"], "external_dependencies": {"modules": ["ResettableListIterator"], "class_members": [{"name": "list1", "type": "variable"}, {"name": "testArray", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the reset functionality of the ResettableListIterator, ensuring that the iterator state is correctly reset and subsequent iterations work as expected."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/MapBackedSet2Test.java", "testclass_name": "MapBackedSet2Test", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Iterator;", "import java.util.Set;", "import org.apache.commons.collections4.map.LinkedMap;", "import org.junit.jupiter.api.Test;"], "name": "MapBackedSet2Test", "description": "Tests for the MapBackedSet2 class, focusing on ordering and element management.", "class_members": {"methods": [{"name": "makeObject", "signature": "Set<E> makeObject()"}, {"name": "setupSet", "signature": "Set<E> setupSet()"}]}, "test_cases": [{"name": "testCanonicalEmptyCollectionExists", "primary_tested": [], "external_dependencies": {"modules": []}, "category": "unit", "description": "Tests the existence of a canonical empty collection."}, {"name": "testCanonicalFullCollectionExists", "primary_tested": [], "external_dependencies": {"modules": []}, "category": "unit", "description": "Tests the existence of a canonical full collection."}, {"name": "testOrdering", "primary_tested": ["Set.iterator()", "Set.remove(Object)", "Set.add(E)", "Set.size()"], "associated_methods": ["MapBackedSet2Test.setupSet()"], "external_dependencies": {"modules": ["LinkedMap", "Iterator", "Set"], "class_members": [{"name": "makeObject", "type": "method"}, {"name": "setupSet", "type": "method"}]}, "category": "unit", "description": "Tests the ordering and element management of the Set."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bidimap/UnmodifiableBidiMapTest.java", "testclass_name": "UnmodifiableBidiMapTest", "dependencies": ["package org.apache.commons.collections4.bidimap;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Map;", "import org.apache.commons.collections4.BidiMap;", "import org.apache.commons.collections4.Unmodifiable;", "import org.apache.commons.collections4.collection.AbstractCollectionTest;", "import org.junit.jupiter.api.Test;"], "name": "UnmodifiableBidiMapTest", "description": "Tests for the UnmodifiableBidiMap class, focusing on its unmodifiable behavior and factory decoration.", "class_members": {"methods": [{"name": "getIterationBehaviour", "signature": "int getIterationBehaviour()"}, {"name": "ignoredTests", "signature": "String[] ignoredTests()"}, {"name": "isPutAddSupported", "signature": "boolean isPutAddSupported()"}, {"name": "isPutChangeSupported", "signature": "boolean isPutChangeSupported()"}, {"name": "isRemoveSupported", "signature": "boolean isRemoveSupported()"}, {"name": "makeConfirmedMap", "signature": "Map<K, V> makeConfirmedMap()"}, {"name": "makeFullMap", "signature": "BidiMap<K, V> makeFullMap()"}, {"name": "makeObject", "signature": "BidiMap<K, V> makeObject()"}]}, "test_cases": [{"name": "testDecorateFactory", "primary_tested": ["UnmodifiableBidiMap.unmodifiableBidiMap(BidiMap)"], "external_dependencies": {"modules": ["BidiMap", "UnmodifiableBidiMap", "NullPointerException"], "class_members": [{"name": "makeFullMap", "type": "method"}]}, "category": "unit", "description": "Tests the factory decoration of UnmodifiableBidiMap, ensuring it returns the same instance and handles null input correctly."}, {"name": "testUnmodifiable", "primary_tested": ["UnmodifiableBidiMap.makeObject()", "UnmodifiableBidiMap.makeFullMap()"], "external_dependencies": {"modules": ["Unmodifiable", "UnmodifiableBidiMap"], "class_members": [{"name": "makeObject", "type": "method"}, {"name": "makeFullMap", "type": "method"}]}, "category": "unit", "description": "Tests that the objects created by makeObject and makeFullMap are instances of Unmodifiable."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/UnmodifiableSetTest.java", "testclass_name": "UnmodifiableSetTest", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Arrays;", "import java.util.HashSet;", "import java.util.Set;", "import org.apache.commons.collections4.Unmodifiable;", "import org.junit.jupiter.api.Test;"], "name": "UnmodifiableSetTest", "description": "Tests for the UnmodifiableSet class, focusing on its factory methods and unmodifiable behavior.", "class_members": {"variables": [], "methods": [{"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "getIterationBehaviour", "signature": "int getIterationBehaviour()"}, {"name": "isAddSupported", "signature": "boolean isAddSupported()"}, {"name": "isRemoveSupported", "signature": "boolean isRemoveSupported()"}, {"name": "makeFullCollection", "signature": "Set<E> makeFullCollection()"}, {"name": "makeObject", "signature": "Set<E> makeObject()"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testDecorateFactory", "primary_tested": ["UnmodifiableSet.unmodifiableSet(Set<E>)"], "external_dependencies": {"modules": ["UnmodifiableSet", "Set", "HashSet", "Arrays"], "class_members": [{"name": "makeFullCollection", "type": "method"}]}, "category": "unit", "description": "Tests the factory method of UnmodifiableSet to ensure it returns the same instance and handles null input correctly."}, {"name": "testUnmodifiable", "primary_tested": ["UnmodifiableSet.unmodifiableSet(Set<E>)"], "associated_methods": ["UnmodifiableSet.makeObject()", "UnmodifiableSet.makeFullCollection()"], "external_dependencies": {"modules": ["UnmodifiableSet", "Set", "Unmodifiable"], "class_members": [{"name": "makeObject", "type": "method"}, {"name": "makeFullCollection", "type": "method"}]}, "category": "unit", "description": "Tests that the sets created by UnmodifiableSet are indeed unmodifiable."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/TransformedSortedSetTest.java", "testclass_name": "TransformedSortedSetTest", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.Set;", "import java.util.SortedSet;", "import java.util.TreeSet;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.collection.TransformedCollectionTest;", "import org.junit.jupiter.api.Test;"], "name": "TransformedSortedSetTest", "description": "Tests for TransformedSortedSet functionality.", "class_members": {"variables": [], "methods": [{"name": "makeFullCollection", "signature": "SortedSet<E> makeFullCollection()"}, {"name": "makeObject", "signature": "SortedSet<E> makeObject()"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testTransformedSet", "primary_tested": ["TransformedSortedSet.transformingSortedSet(SortedSet<E>,Transformer<E,E>)"], "associated_methods": ["SortedSet.add(E)", "SortedSet.contains(Object)", "SortedSet.remove(Object)"], "external_dependencies": {"modules": ["TransformedSortedSet", "Transformer", "TransformedCollectionTest", "TreeSet", "Arrays", "Integer"], "class_members": [], "project_specific_resources": ["TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER"]}, "category": "unit", "fixtures_used": [], "description": "Tests the transforming functionality of TransformedSortedSet by adding elements and checking their transformed state."}, {"name": "testTransformedSet_decorateTransform", "primary_tested": ["TransformedSet.transformedSet(Set<Object>,Transformer<Object,Object>)"], "associated_methods": ["Set.contains(Object)", "Set.remove(Object)"], "external_dependencies": {"modules": ["TransformedSet", "Transformer", "TransformedCollectionTest", "TreeSet", "Collections", "Integer"], "class_members": [], "project_specific_resources": ["TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER"]}, "category": "unit", "fixtures_used": [], "description": "Tests the decorating and transforming functionality of TransformedSet by adding elements and checking their transformed state."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/TransformedNavigableSetTest.java", "testclass_name": "TransformedNavigableSetTest", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.NavigableSet;", "import java.util.Set;", "import java.util.TreeSet;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.collection.TransformedCollectionTest;", "import org.junit.jupiter.api.Test;"], "name": "TransformedNavigableSetTest", "description": "Tests for TransformedNavigableSet functionality.", "class_members": {"methods": [{"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "makeFullCollection", "signature": "NavigableSet<E> makeFullCollection()"}, {"name": "makeObject", "signature": "NavigableSet<E> makeObject()"}]}, "test_cases": [{"name": "testTransformedSet", "primary_tested": ["TransformedNavigableSet.transformingNavigableSet(NavigableSet<E>,Transformer<E,E>)"], "associated_methods": ["NavigableSet.add(E)", "NavigableSet.size()", "NavigableSet.contains(Object)", "NavigableSet.remove(Object)"], "external_dependencies": {"modules": ["TransformedNavigableSet", "TreeSet", "Transformer", "TransformedCollectionTest", "Arrays", "Integer"], "class_members": [{"name": "makeFullCollection", "type": "method"}, {"name": "makeObject", "type": "method"}], "project_specific_resources": ["TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER"]}, "category": "unit", "description": "Tests the transforming functionality of TransformedNavigableSet by adding elements and checking their transformed state."}, {"name": "testTransformedSet_decorateTransform", "primary_tested": ["TransformedSet.transformedSet(Set<Object>,Transformer<Object,Object>)"], "associated_methods": ["Set.size()", "Set.contains(Object)", "Set.remove(Object)"], "external_dependencies": {"modules": ["TransformedSet", "TreeSet", "Transformer", "TransformedCollectionTest", "Collections", "Integer"], "project_specific_resources": ["TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER"]}, "category": "unit", "description": "Tests the transforming functionality of TransformedSet by adding elements and checking their transformed state."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/PredicatedSetTest.java", "testclass_name": "PredicatedSetTest", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.HashSet;", "import java.util.Set;", "import org.apache.commons.collections4.Predicate;", "import org.apache.commons.collections4.functors.TruePredicate;", "import org.junit.jupiter.api.Test;"], "name": "PredicatedSetTest", "description": "Unit tests for PredicatedSet functionality, focusing on predicate-based validation and illegal element addition.", "class_members": {"variables": [{"name": "truePredicate", "type": "Predicate<E>"}, {"name": "testPredicate", "type": "Predicate<E>"}], "methods": [{"name": "decorateSet", "signature": "protected PredicatedSet<E> decorateSet(Set<E> set, Predicate<? super E> predicate)"}, {"name": "makeTestSet", "signature": "protected PredicatedSet<E> makeTestSet()"}]}, "fixtures": [], "test_cases": [{"name": "testGetSet", "primary_tested": ["PredicatedSet.decorated()"], "external_dependencies": {"modules": ["PredicatedSet"], "class_members": [{"name": "makeTestSet", "type": "method"}]}, "category": "unit", "description": "Tests that the decorated set returned by PredicatedSet is not null."}, {"name": "testIllegalAdd", "primary_tested": ["Set.add(E)"], "associated_methods": ["Set.contains(Object)"], "external_dependencies": {"modules": ["Set", "Integer"], "class_members": [{"name": "makeTestSet", "type": "method"}]}, "category": "unit", "description": "Tests that adding an illegal element (Integer) to the set throws an IllegalArgumentException and the element is not contained in the set."}, {"name": "testIllegalAddAll", "primary_tested": ["Set.addAll(Collection<? extends E>)"], "associated_methods": ["Set.contains(Object)"], "external_dependencies": {"modules": ["Set", "HashSet", "Integer"], "class_members": [{"name": "makeTestSet", "type": "method"}]}, "category": "unit", "description": "Tests that adding a collection containing an illegal element (Integer) to the set throws an IllegalArgumentException and none of the elements are contained in the set."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/UnmodifiableSortedSetTest.java", "testclass_name": "UnmodifiableSortedSetTest", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Comparator;", "import java.util.Set;", "import java.util.SortedSet;", "import java.util.TreeSet;", "import org.junit.jupiter.api.Test;"], "name": "UnmodifiableSortedSetTest", "description": "Tests for the UnmodifiableSortedSet class, focusing on its unmodifiable nature and comparator functionality.", "class_members": {"variables": [{"name": "set", "type": "UnmodifiableSortedSet<E>"}, {"name": "array", "type": "ArrayList<E>"}], "methods": [{"name": "setupSet", "signature": "void setupSet()"}, {"name": "verifyUnmodifiable", "signature": "void verifyUnmodifiable(Set<E> set)"}]}, "test_cases": [{"name": "testComparator", "primary_tested": ["UnmodifiableSortedSet.comparator()"], "associated_methods": [], "external_dependencies": {"modules": ["Comparator"], "class_members": [{"name": "set", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the comparator method of UnmodifiableSortedSet, expecting it to be null for natural order."}, {"name": "testDecorateFactory", "primary_tested": ["UnmodifiableSortedSet.unmodifiableSortedSet(SortedSet<E>)"], "associated_methods": [], "external_dependencies": {"modules": ["UnmodifiableSortedSet", "SortedSet", "NullPointerException"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the factory method for creating unmodifiable sorted sets, ensuring it returns the same instance and handles null input correctly."}, {"name": "testUnmodifiable", "primary_tested": [], "associated_methods": ["UnmodifiableSortedSet.headSet(E)", "UnmodifiableSortedSet.tailSet(E)", "UnmodifiableSortedSet.subSet(E,E)"], "external_dependencies": {"modules": ["Set", "UnsupportedOperationException"], "class_members": [{"name": "set", "type": "variable"}, {"name": "verifyUnmodifiable", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests that the base set and its subsets are unmodifiable, verifying that all modification operations throw UnsupportedOperationException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bidimap/UnmodifiableSortedBidiMapTest.java", "testclass_name": "UnmodifiableSortedBidiMapTest", "dependencies": ["package org.apache.commons.collections4.bidimap;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.SortedMap;", "import java.util.TreeMap;", "import org.apache.commons.collections4.SortedBidiMap;", "import org.apache.commons.collections4.Unmodifiable;", "import org.junit.jupiter.api.Test;"], "name": "UnmodifiableSortedBidiMapTest", "description": "Tests for the UnmodifiableSortedBidiMap class, focusing on its unmodifiable behavior and factory methods.", "class_members": {"methods": [{"name": "ignoredTests", "signature": "String[] ignoredTests()"}, {"name": "isAllowNullKey", "signature": "boolean isAllowNullKey()"}, {"name": "isAllowNullValue", "signature": "boolean isAllowNullValue()"}, {"name": "isPutAddSupported", "signature": "boolean isPutAddSupported()"}, {"name": "isPutChangeSupported", "signature": "boolean isPutChangeSupported()"}, {"name": "isRemoveSupported", "signature": "boolean isRemoveSupported()"}, {"name": "isSubMapViewsSerializable", "signature": "boolean isSubMapViewsSerializable()"}, {"name": "makeConfirmedMap", "signature": "SortedMap<K, V> makeConfirmedMap()"}, {"name": "makeFullMap", "signature": "SortedBidiMap<K, V> makeFullMap()"}, {"name": "makeObject", "signature": "SortedBidiMap<K, V> makeObject()"}]}, "fixtures": [], "test_cases": [{"name": "testDecorateFactory", "primary_tested": ["UnmodifiableSortedBidiMap.unmodifiableSortedBidiMap(SortedBidiMap)"], "associated_methods": ["UnmodifiableSortedBidiMapTest.makeFullMap()"], "external_dependencies": {"modules": ["SortedBidiMap", "UnmodifiableSortedBidiMap"], "class_members": [{"name": "makeFullMap", "type": "method"}]}, "category": "unit", "description": "Tests the factory method for creating an unmodifiable sorted bidi map and ensures it throws a NullPointerException when given null."}, {"name": "testUnmodifiable", "primary_tested": ["UnmodifiableSortedBidiMap.unmodifiableSortedBidiMap(SortedBidiMap)"], "associated_methods": ["UnmodifiableSortedBidiMapTest.makeObject()", "UnmodifiableSortedBidiMapTest.makeFullMap()"], "external_dependencies": {"modules": ["Unmodifiable", "UnmodifiableSortedBidiMap"], "class_members": [{"name": "makeObject", "type": "method"}, {"name": "makeFullMap", "type": "method"}]}, "category": "unit", "description": "Tests that the created maps are instances of Unmodifiable."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/SkippingIteratorTest.java", "testclass_name": "SkippingIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SkippingIteratorTest", "description": "Unit tests for the SkippingIterator class, which skips a specified number of elements in an iterator.", "class_members": {"variables": [{"name": "testArray", "type": "final String[]"}, {"name": "testList", "type": "List<E>"}], "methods": [{"name": "makeEmptyIterator", "signature": "Iterator<E> makeEmptyIterator()"}, {"name": "makeObject", "signature": "Iterator<E> makeObject()"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNegativeOffset", "primary_tested": ["SkippingIterator.<init>(Iterator<E>,int)"], "external_dependencies": {"modules": ["SkippingIterator", "IllegalArgumentException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the case if a negative offset is passed to the constructor. Expected IllegalArgumentException."}, {"name": "testOffsetGreaterThanSize", "primary_tested": ["SkippingIterator.<init>(Iterator<E>,int)"], "external_dependencies": {"modules": ["SkippingIterator", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the case if the offset passed to the constructor is greater than the decorated iterator's size. The SkippingIterator should behave as if there are no more elements to return."}, {"name": "testRemoveCalledTwice", "primary_tested": ["SkippingIterator.remove()"], "external_dependencies": {"modules": ["SkippingIterator", "IllegalStateException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the remove() method being called twice without calling next() in between. Expected IllegalStateException."}, {"name": "testRemoveFirst", "primary_tested": ["SkippingIterator.remove()"], "external_dependencies": {"modules": ["SkippingIterator", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests removing the first element. Verifies that the element is removed from the underlying collection."}, {"name": "testRemoveLast", "primary_tested": ["SkippingIterator.remove()"], "external_dependencies": {"modules": ["SkippingIterator", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests removing the last element. Verifies that the element is removed from the underlying collection."}, {"name": "testRemoveMiddle", "primary_tested": ["SkippingIterator.remove()"], "external_dependencies": {"modules": ["SkippingIterator", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests removing an element in the middle of the iterator. Verifies that the element is removed from the underlying collection."}, {"name": "testRemoveUnsupported", "primary_tested": ["SkippingIterator.remove()"], "external_dependencies": {"modules": ["SkippingIterator", "UnsupportedOperationException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the case if the decorated iterator does not support the remove() method and throws an UnsupportedOperationException."}, {"name": "testRemoveWithoutCallingNext", "primary_tested": ["SkippingIterator.remove()"], "external_dependencies": {"modules": ["SkippingIterator", "IllegalStateException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the remove() method being called without next() being called first. Expected IllegalStateException."}, {"name": "testSameAsDecorated", "primary_tested": ["SkippingIterator.<init>(Iterator<E>,int)"], "external_dependencies": {"modules": ["SkippingIterator", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests a decorated iterator bounded such that the offset is zero, in that the SkippingIterator should return all the same elements as its decorated iterator."}, {"name": "testSkipping", "primary_tested": ["SkippingIterator.<init>(Iterator<E>,int)"], "external_dependencies": {"modules": ["SkippingIterator", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests a decorated iterator bounded such that the first element returned is at an index greater than its first element, and the last element returned is at an index less than its last element."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bidimap/DualTreeBidiMap2Test.java", "testclass_name": "DualTreeBidiMap2Test", "dependencies": ["package org.apache.commons.collections4.bidimap;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.io.ByteArrayInputStream;", "import java.io.ByteArrayOutputStream;", "import java.io.ObjectInputStream;", "import java.io.ObjectOutputStream;", "import java.io.Serializable;", "import java.util.Collections;", "import java.util.Comparator;", "import java.util.Iterator;", "import java.util.List;", "import java.util.TreeMap;", "import org.apache.commons.collections4.SortedBidiMap;", "import org.apache.commons.collections4.comparators.ComparableComparator;", "import org.apache.commons.collections4.comparators.ReverseComparator;", "import org.junit.jupiter.api.Test;"], "name": "DualTreeBidiMap2Test", "description": "Unit tests for DualTreeBidiMap2, focusing on serialization, comparator checks, and sort order.", "class_members": {"variables": [], "methods": [], "nested_classes": [{"name": "IntegerComparator", "description": "Internal comparator class for Integer objects"}]}, "fixtures": [], "test_cases": [{"name": "testCollections364", "primary_tested": ["DualTreeBidiMap.comparator()"], "associated_methods": ["DualTreeBidiMap.valueComparator()"], "external_dependencies": {"modules": ["DualTreeBidiMap", "ByteArrayOutputStream", "ObjectOutputStream", "ObjectInputStream", "ByteArrayInputStream", "IntegerComparator"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the serialization and deserialization of DualTreeBidiMap with custom comparators."}, {"name": "testComparator", "primary_tested": ["SortedBidiMap.comparator()"], "external_dependencies": {"modules": ["SortedBidiMap", "ReverseComparator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the comparator of the SortedBidiMap, ensuring it is an instance of ReverseComparator."}, {"name": "testComparator2", "primary_tested": ["DualTreeBidiMap.firstKey()", "DualTreeBidiMap.lastKey()"], "external_dependencies": {"modules": ["DualTreeBidiMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the key order in DualTreeBidiMap with a case-insensitive comparator."}, {"name": "testSerializeDeserializeCheckComparator", "primary_tested": ["SortedBidiMap.comparator()"], "external_dependencies": {"modules": ["SortedBidiMap", "ByteArrayOutputStream", "ObjectOutputStream", "ObjectInputStream", "ByteArrayInputStream", "ReverseComparator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the serialization and deserialization of SortedBidiMap, ensuring the comparator is preserved."}, {"name": "testSortOrder", "primary_tested": ["SortedBidiMap.keySet()"], "associated_methods": ["Collections.sort(List,Comparator)"], "external_dependencies": {"modules": ["SortedBidiMap", "ReverseComparator", "ComparableComparator", "Collections"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the sort order of keys in SortedBidiMap, ensuring they match the expected reverse order."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/PermutationIteratorTest.java", "testclass_name": "PermutationIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.HashSet;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import java.util.Set;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "PermutationIteratorTest", "description": "Unit tests for the PermutationIterator class, which generates permutations of a given list.", "class_members": {"variables": [{"name": "testArray", "type": "Character[]"}, {"name": "testList", "type": "List<Character>"}], "methods": [{"name": "makeEmptyIterator", "signature": "PermutationIterator<Character> makeEmptyIterator()"}, {"name": "makeObject", "signature": "PermutationIterator<Character> makeObject()"}, {"name": "setUp", "signature": "void setUp()"}, {"name": "supportsEmptyIterator", "signature": "boolean supportsEmptyIterator()"}, {"name": "supportsRemove", "signature": "boolean supportsRemove()"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEmptyCollection", "primary_tested": ["PermutationIterator.hasNext()"], "associated_methods": ["PermutationIterator.next()"], "external_dependencies": {"modules": ["PermutationIterator", "List"], "class_members": [{"name": "makeEmptyIterator", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of the PermutationIterator with an empty collection."}, {"name": "testPermutationException", "primary_tested": ["PermutationIterator.next()"], "associated_methods": ["PermutationIterator.hasNext()"], "external_dependencies": {"modules": ["PermutationIterator", "List", "NoSuchElementException"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests that an exception is thrown when trying to get a permutation after all have been returned."}, {"name": "testPermutationExhaustivity", "primary_tested": ["PermutationIterator.next()"], "associated_methods": ["PermutationIterator.hasNext()"], "external_dependencies": {"modules": ["PermutationIterator", "List"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests that all permutations of a given list are generated."}, {"name": "testPermutationResultSize", "primary_tested": ["PermutationIterator.hasNext()"], "associated_methods": ["PermutationIterator.next()"], "external_dependencies": {"modules": ["PermutationIterator", "List"]}, "category": "unit", "fixtures_used": [], "description": "Tests the size of the permutation results for different list sizes."}, {"name": "testPermutationUnicity", "primary_tested": ["PermutationIterator.next()"], "associated_methods": ["PermutationIterator.hasNext()"], "external_dependencies": {"modules": ["PermutationIterator", "List", "Set"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests that all permutations are unique."}, {"name": "testPermutatorHasMore", "primary_tested": ["PermutationIterator.hasNext()"], "associated_methods": ["PermutationIterator.next()"], "external_dependencies": {"modules": ["PermutationIterator"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the hasNext method of the PermutationIterator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/PeekingIteratorTest.java", "testclass_name": "PeekingIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "PeekingIteratorTest", "description": "Unit tests for the PeekingIterator class, which provides a peeking functionality for iterators.", "class_members": {"variables": [{"name": "testArray", "type": "final String[]"}, {"name": "testList", "type": "List<E>"}], "methods": [{"name": "makeEmptyIterator", "signature": "Iterator<E> makeEmptyIterator()"}, {"name": "makeObject", "signature": "PeekingIterator<E> makeObject()"}, {"name": "supportsRemove", "signature": "boolean supportsRemove()"}, {"name": "validate", "signature": "void validate(Iterator<E> iter, E... items)"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEmpty", "primary_tested": ["PeekingIterator.hasNext()"], "external_dependencies": {"modules": ["PeekingIterator", "Collections", "Iterator"], "class_members": [{"name": "makeEmptyIterator", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of an empty iterator."}, {"name": "testIllegalRemove", "primary_tested": ["PeekingIterator.remove()"], "associated_methods": ["PeekingIterator.next()", "PeekingIterator.peek()"], "external_dependencies": {"modules": ["PeekingIterator", "IllegalStateException"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior of the remove method when it is called illegally."}, {"name": "testIteratorExhausted", "primary_tested": ["PeekingIterator.hasNext()", "PeekingIterator.peek()", "PeekingIterator.element()"], "external_dependencies": {"modules": ["PeekingIterator", "NoSuchElementException"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior of the iterator when it is exhausted."}, {"name": "testMultiplePeek", "primary_tested": ["PeekingIterator.peek()", "PeekingIterator.next()", "PeekingIterator.hasNext()"], "external_dependencies": {"modules": ["PeekingIterator"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the peeking functionality of the iterator multiple times."}, {"name": "testSinglePeek", "primary_tested": ["PeekingIterator.peek()", "PeekingIterator.element()"], "associated_methods": ["PeekingIteratorTest.validate(Iterator<E>, E...)"], "external_dependencies": {"modules": ["PeekingIterator"], "class_members": [{"name": "makeObject", "type": "method"}, {"name": "validate", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the peeking functionality of the iterator a single time."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/Collections701Test.java", "testclass_name": "Collections701Test", "dependencies": ["package org.apache.commons.collections4.list;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import java.util.ArrayList;", "import java.util.HashSet;", "import java.util.List;", "import java.util.Set;", "import org.junit.jupiter.api.Test;"], "name": "Collections701Test", "description": "Unit tests for verifying the behavior of ArrayList, HashSet, and SetUniqueList in the context of adding self-references.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testArrayList", "primary_tested": ["ArrayList.add(Object)", "ArrayList.size()", "ArrayList.get(int)"], "external_dependencies": {"modules": ["ArrayList"]}, "category": "unit", "description": "Tests the behavior of adding a self-reference to an ArrayList and verifies the size and content."}, {"name": "testHashSet", "primary_tested": ["HashSet.add(Object)", "HashSet.size()", "HashSet.iterator()"], "external_dependencies": {"modules": ["HashSet"]}, "category": "unit", "description": "Tests the behavior of adding a self-reference to a HashSet and verifies the size and content."}, {"name": "testSetUniqueList", "primary_tested": ["SetUniqueList.setUniqueList(List)", "SetUniqueList.add(Object)", "SetUniqueList.size()", "SetUniqueList.get(int)"], "external_dependencies": {"modules": ["ArrayList", "SetUniqueList"]}, "category": "unit", "description": "Tests the behavior of adding a self-reference to a SetUniqueList and verifies the size and content."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/LRUMapTest.java", "testclass_name": "LRUMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.fail;", "import java.util.ArrayList;", "import java.util.HashMap;", "import java.util.Iterator;", "import java.util.List;", "import java.util.Map;", "import org.apache.commons.collections4.MapIterator;", "import org.apache.commons.collections4.OrderedMap;", "import org.apache.commons.collections4.ResettableIterator;", "import org.junit.jupiter.api.Test;"], "name": "LRUMapTest", "description": "Unit tests for the LRUMap class, focusing on its LRU (Least Recently Used) eviction policy and internal state management.", "class_members": {"variables": [], "methods": [], "nested_classes": [{"name": "MockLRUMapSubclass", "description": "A subclass of LRUMap used for testing the LRU removal behavior."}, {"name": "MockLRUMapSubclassBlocksRemove", "description": "A subclass of LRUMap that blocks the removal of LRU entries."}, {"name": "MockLRUMapSubclassFirstBlocksRemove", "description": "A subclass of LRUMap that blocks the removal of the first LRU entry."}, {"name": "SingleHashCode", "description": "A helper class used to ensure consistent hash codes for testing purposes."}]}, "fixtures": [], "test_cases": [{"name": "testAccessOrder", "primary_tested": ["LRUMap.put(K,V)", "LRUMap.get(K)"], "associated_methods": ["LRUMap.keySet().iterator()", "LRUMap.values().iterator()"], "external_dependencies": {"modules": ["LRUMap", "Iterator"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the access order of the LRUMap, ensuring that the most recently accessed elements are moved to the end of the order."}, {"name": "testAccessOrder2", "primary_tested": ["LRUMap.put(K,V)", "LRUMap.get(K,boolean)"], "associated_methods": ["LRUMap.keySet().iterator()", "LRUMap.values().iterator()"], "external_dependencies": {"modules": ["LRUMap", "Iterator"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the access order of the LRUMap with a boolean parameter, ensuring that the most recently accessed elements are moved to the end of the order."}, {"name": "testClone", "primary_tested": ["LRUMap.clone()"], "associated_methods": [], "external_dependencies": {"modules": ["LRUMap", "Map"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the cloning functionality of the LRUMap, ensuring that the cloned map is a deep copy with the same elements."}, {"name": "testCtors", "primary_tested": ["LRUMap.LRUMap(int)", "LRUMap.LRUMap(int,int,float,boolean)"], "associated_methods": [], "external_dependencies": {"modules": ["LRUMap", "IllegalArgumentException"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the constructors of the LRUMap, ensuring that they throw exceptions for invalid parameters."}, {"name": "testInternalState_Buckets", "primary_tested": ["LRUMap.put(K,V)", "LRUMap.get(K)"], "associated_methods": ["LRUMap.hashIndex(int,int)", "LRUMap.hash(Object)"], "external_dependencies": {"modules": ["LRUMap", "SingleHashCode"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the internal state of the LRUMap, ensuring that the buckets and linked list are correctly managed."}, {"name": "testInternalState_getEntry_int", "primary_tested": ["LRUMap.getEntry(int)"], "associated_methods": [], "external_dependencies": {"modules": ["LRUMap", "SingleHashCode", "IndexOutOfBoundsException"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the getEntry method of the LRUMap, ensuring that it returns the correct entry and handles out-of-bounds indices."}, {"name": "testLRU", "primary_tested": ["LRUMap.put(K,V)", "LRUMap.isFull()", "LRUMap.maxSize()"], "associated_methods": ["LRUMap.keySet().iterator()", "LRUMap.values().iterator()"], "external_dependencies": {"modules": ["LRUMap", "Iterator"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the LRU eviction policy of the LRUMap, ensuring that the least recently used elements are removed when the map is full."}, {"name": "testRemoveLRU", "primary_tested": ["MockLRUMapSubclass.removeLRU(LinkEntry<K,V>)"], "associated_methods": ["MockLRUMapSubclass.put(K,V)", "MockLRUMapSubclass.containsKey(Object)"], "external_dependencies": {"modules": ["MockLRUMapSubclass", "LinkEntry"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the custom LRU removal behavior in the MockLRUMapSubclass, ensuring that the least recently used entry is correctly removed."}, {"name": "testRemoveLRUBlocksRemove", "primary_tested": ["MockLRUMapSubclassBlocksRemove.removeLRU(LinkEntry<K,V>)"], "associated_methods": ["MockLRUMapSubclassBlocksRemove.put(K,V)", "MockLRUMapSubclassBlocksRemove.containsKey(Object)"], "external_dependencies": {"modules": ["MockLRUMapSubclassBlocksRemove", "LinkEntry"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the blocking of LRU removal in the MockLRUMapSubclassBlocksRemove, ensuring that no entries are removed."}, {"name": "testRemoveLRUBlocksRemoveScan", "primary_tested": ["MockLRUMapSubclassBlocksRemove.removeLRU(LinkEntry<K,V>)"], "associated_methods": ["MockLRUMapSubclassBlocksRemove.put(K,V)", "MockLRUMapSubclassBlocksRemove.containsKey(Object)"], "external_dependencies": {"modules": ["MockLRUMapSubclassBlocksRemove", "LinkEntry"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the blocking of LRU removal with scanning in the MockLRUMapSubclassBlocksRemove, ensuring that no entries are removed."}, {"name": "testRemoveLRUFirstBlocksRemove", "primary_tested": ["MockLRUMapSubclassFirstBlocksRemove.removeLRU(LinkEntry<K,V>)"], "associated_methods": ["MockLRUMapSubclassFirstBlocksRemove.put(K,V)", "MockLRUMapSubclassFirstBlocksRemove.containsKey(Object)"], "external_dependencies": {"modules": ["MockLRUMapSubclassFirstBlocksRemove", "LinkEntry"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the blocking of the first LRU removal in the MockLRUMapSubclassFirstBlocksRemove, ensuring that the first entry is not removed."}, {"name": "testReset", "primary_tested": ["ResettableIterator.reset()"], "associated_methods": ["OrderedMap.mapIterator()"], "external_dependencies": {"modules": ["ResettableIterator", "OrderedMap", "ArrayList"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the reset functionality of the ResettableIterator, ensuring that the iterator can be reset to its initial state."}, {"name": "testSynchronizedRemoveFromEntrySet", "primary_tested": ["LRUMap.entrySet().removeIf(Predicate<Map.Entry<K,V>>)"], "associated_methods": ["LRUMap.put(K,V)"], "external_dependencies": {"modules": ["LRUMap", "Map", "Thread", "ThreadGroup", "HashMap"], "class_members": [], "project_specific_resources": []}, "category": "integration", "fixtures_used": [], "description": "Tests the synchronized removal of entries from the entry set in a multi-threaded environment, ensuring thread safety."}, {"name": "testSynchronizedRemoveFromKeySet", "primary_tested": ["LRUMap.keySet().iterator().remove()"], "associated_methods": ["LRUMap.put(K,V)"], "external_dependencies": {"modules": ["LRUMap", "Map", "Thread", "ThreadGroup", "HashMap"], "class_members": [], "project_specific_resources": []}, "category": "integration", "fixtures_used": [], "description": "Tests the synchronized removal of entries from the key set in a multi-threaded environment, ensuring thread safety."}, {"name": "testSynchronizedRemoveFromMapIterator", "primary_tested": ["MapIterator.remove()"], "associated_methods": ["LRUMap.put(K,V)"], "external_dependencies": {"modules": ["LRUMap", "MapIterator", "Thread", "ThreadGroup", "HashMap"], "class_members": [], "project_specific_resources": []}, "category": "integration", "fixtures_used": [], "description": "Tests the synchronized removal of entries using a map iterator in a multi-threaded environment, ensuring thread safety."}, {"name": "testSynchronizedRemoveFromValues", "primary_tested": ["LRUMap.values().removeIf(Predicate<V>)"], "associated_methods": ["LRUMap.put(K,V)"], "external_dependencies": {"modules": ["LRUMap", "Map", "Thread", "ThreadGroup", "HashMap"], "class_members": [], "project_specific_resources": []}, "category": "integration", "fixtures_used": [], "description": "Tests the synchronized removal of entries from the values collection in a multi-threaded environment, ensuring thread safety."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/PredicatedNavigableSetTest.java", "testclass_name": "PredicatedNavigableSetTest", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.Arrays;", "import java.util.Comparator;", "import java.util.NavigableSet;", "import java.util.Set;", "import java.util.TreeSet;", "import org.apache.commons.collections4.Predicate;", "import org.apache.commons.collections4.functors.TruePredicate;", "import org.junit.jupiter.api.Test;"], "name": "PredicatedNavigableSetTest", "description": "Tests for the PredicatedNavigableSet class, focusing on predicate validation and set operations.", "class_members": {"variables": [{"name": "truePredicate", "type": "Predicate<E>"}, {"name": "testPredicate", "type": "Predicate<E>"}], "methods": [{"name": "makeFullCollection", "signature": "NavigableSet<E> makeFullCollection()"}, {"name": "makeObject", "signature": "NavigableSet<E> makeObject()"}, {"name": "makeTestSet", "signature": "PredicatedNavigableSet<E> makeTestSet()"}]}, "fixtures": [], "test_cases": [{"name": "testComparator", "primary_tested": ["NavigableSet.comparator()"], "external_dependencies": {"modules": ["NavigableSet", "Comparator"], "class_members": [{"name": "makeTestSet", "type": "method"}]}, "category": "unit", "description": "Tests the comparator method of the NavigableSet, expecting it to be null for natural order."}, {"name": "testGetSet", "primary_tested": ["PredicatedNavigableSet.decorated()"], "external_dependencies": {"modules": ["PredicatedNavigableSet"], "class_members": [{"name": "makeTestSet", "type": "method"}]}, "category": "unit", "description": "Tests the decorated method of PredicatedNavigableSet, ensuring it returns a non-null set."}, {"name": "testIllegalAdd", "primary_tested": ["NavigableSet.add(E)"], "external_dependencies": {"modules": ["NavigableSet", "IllegalArgumentException"], "class_members": [{"name": "makeTestSet", "type": "method"}]}, "category": "unit", "description": "Tests the add method of NavigableSet, expecting an IllegalArgumentException for an invalid element."}, {"name": "testIllegalAddAll", "primary_tested": ["NavigableSet.addAll(Collection<? extends E>)"], "external_dependencies": {"modules": ["NavigableSet", "IllegalArgumentException", "TreeSet"], "class_members": [{"name": "makeTestSet", "type": "method"}]}, "category": "unit", "description": "Tests the addAll method of NavigableSet, expecting an IllegalArgumentException for invalid elements."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/UnmodifiableNavigableSetTest.java", "testclass_name": "UnmodifiableNavigableSetTest", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Comparator;", "import java.util.NavigableSet;", "import java.util.Set;", "import java.util.TreeSet;", "import org.junit.jupiter.api.Test;"], "name": "UnmodifiableNavigableSetTest", "description": "Tests for the UnmodifiableNavigableSet class, focusing on its unmodifiable nature and comparator functionality.", "class_members": {"variables": [{"name": "set", "type": "UnmodifiableNavigableSet<E>"}, {"name": "array", "type": "ArrayList<E>"}], "methods": [{"name": "setupSet", "signature": "void setupSet()"}, {"name": "verifyUnmodifiable", "signature": "void verifyUnmodifiable(Set<E>)"}]}, "fixtures": [], "test_cases": [{"name": "testComparator", "primary_tested": ["UnmodifiableNavigableSet.comparator()"], "associated_methods": [], "external_dependencies": {"modules": ["Comparator"], "class_members": [{"name": "set", "type": "variable"}, {"name": "setupSet", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests that the comparator of the UnmodifiableNavigableSet is null, indicating natural order."}, {"name": "testDecorateFactory", "primary_tested": ["UnmodifiableNavigableSet.unmodifiableNavigableSet(NavigableSet<E>)"], "associated_methods": [], "external_dependencies": {"modules": ["NavigableSet", "UnmodifiableNavigableSet"], "class_members": [{"name": "makeFullCollection", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the factory method for creating an unmodifiable navigable set and ensures it throws a NullPointerException when given null."}, {"name": "testUnmodifiable", "primary_tested": [], "associated_methods": ["UnmodifiableNavigableSet.descendingSet()", "UnmodifiableNavigableSet.headSet(E)", "UnmodifiableNavigableSet.headSet(E,boolean)", "UnmodifiableNavigableSet.tailSet(E)", "UnmodifiableNavigableSet.tailSet(E,boolean)", "UnmodifiableNavigableSet.subSet(E,E)", "UnmodifiableNavigableSet.subSet(E,boolean,E,boolean)"], "external_dependencies": {"modules": ["NavigableSet", "Set"], "class_members": [{"name": "set", "type": "variable"}, {"name": "setupSet", "type": "method"}, {"name": "verifyUnmodifiable", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests that the base set and its subsets are unmodifiable."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/NodeCachingLinkedListTest.java", "testclass_name": "NodeCachingLinkedListTest", "dependencies": ["package org.apache.commons.collections4.list;", "import java.util.Arrays;", "import java.util.LinkedList;", "import org.junit.jupiter.api.Test;"], "name": "NodeCachingLinkedListTest", "description": "Test class for NodeCachingLinkedList, focusing on performance comparison and cache management.", "class_members": {"variables": [{"name": "ncll", "type": "NodeCachingLinkedList<Object>"}, {"name": "ll", "type": "LinkedList<Object>"}, {"name": "o1", "type": "Object"}, {"name": "o2", "type": "Object"}, {"name": "loopCount", "type": "int"}], "methods": [{"name": "compareSpeed", "signature": "void compareSpeed()"}, {"name": "getCollection", "signature": "NodeCachingLinkedList<E> getCollection()"}, {"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "makeObject", "signature": "NodeCachingLinkedList<E> makeObject()"}]}, "fixtures": [], "test_cases": [{"name": "testShrinkCache", "primary_tested": ["NodeCachingLinkedList.removeAllNodes()", "NodeCachingLinkedList.setMaximumCacheSize(int)", "NodeCachingLinkedList.addAll(Collection<? extends E>)", "NodeCachingLinkedList.removeNode(Node<E>)", "NodeCachingLinkedList.getNode(int,boolean)"], "associated_methods": ["NodeCachingLinkedList.checkNodes()"], "external_dependencies": {"modules": ["NodeCachingLinkedList", "Arrays", "String"], "class_members": [{"name": "list", "type": "variable"}], "project_specific_resources": []}, "category": "performance", "fixtures_used": [], "description": "Tests the cache shrinking functionality of NodeCachingLinkedList by adding and removing elements, then verifying the cache size."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/TransformedSetTest.java", "testclass_name": "TransformedSetTest", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.HashSet;", "import java.util.Set;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.collection.TransformedCollectionTest;", "import org.junit.jupiter.api.Test;"], "name": "TransformedSetTest", "description": "Tests for the TransformedSet class, which transforms elements in a set using a Transformer.", "class_members": {"variables": [], "methods": [{"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "getIterationBehaviour", "signature": "int getIterationBehaviour()"}, {"name": "makeConfirmedCollection", "signature": "Set<E> makeConfirmedCollection()"}, {"name": "makeConfirmedFullCollection", "signature": "Set<E> makeConfirmedFullCollection()"}, {"name": "makeFullCollection", "signature": "Set<E> makeFullCollection()"}, {"name": "makeObject", "signature": "Set<E> makeObject()"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testTransformedSet", "primary_tested": ["TransformedSet.transformingSet(Set<E>,Transformer<E,E>)"], "associated_methods": ["TransformedSet.add(E)", "TransformedSet.contains(Object)", "TransformedSet.remove(Object)"], "external_dependencies": {"modules": ["TransformedSet", "TransformedCollectionTest", "Transformer", "HashSet", "Arrays", "Integer"], "class_members": [], "project_specific_resources": ["TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER"]}, "category": "unit", "fixtures_used": [], "description": "Tests the transforming functionality of TransformedSet by adding elements and checking their transformed state."}, {"name": "testTransformedSet_decorateTransform", "primary_tested": ["TransformedSet.transformedSet(Set<Object>,Transformer<Object,Object>)"], "associated_methods": ["TransformedSet.contains(Object)", "TransformedSet.remove(Object)"], "external_dependencies": {"modules": ["TransformedSet", "TransformedCollectionTest", "Transformer", "HashSet", "Collections", "Integer"], "class_members": [], "project_specific_resources": ["TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER"]}, "category": "unit", "fixtures_used": [], "description": "Tests the transformedSet method by adding elements and checking their transformed state."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/PredicatedSortedSetTest.java", "testclass_name": "PredicatedSortedSetTest", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.Arrays;", "import java.util.Comparator;", "import java.util.Set;", "import java.util.SortedSet;", "import java.util.TreeSet;", "import org.apache.commons.collections4.Predicate;", "import org.apache.commons.collections4.functors.TruePredicate;", "import org.junit.jupiter.api.Test;"], "name": "PredicatedSortedSetTest", "description": "Unit tests for PredicatedSortedSet functionality.", "class_members": {"variables": [{"name": "truePredicate", "type": "Predicate<E>"}, {"name": "testPredicate", "type": "Predicate<E>"}], "methods": [{"name": "makeFullCollection", "signature": "SortedSet<E> makeFullCollection()"}, {"name": "makeObject", "signature": "SortedSet<E> makeObject()"}, {"name": "makeTestSet", "signature": "PredicatedSortedSet<E> makeTestSet()"}]}, "fixtures": [], "test_cases": [{"name": "testComparator", "primary_tested": ["SortedSet.comparator()"], "external_dependencies": {"modules": ["SortedSet", "Comparator"], "class_members": [{"name": "makeTestSet", "type": "method"}]}, "category": "unit", "description": "Tests the comparator method of the SortedSet."}, {"name": "testGetSet", "primary_tested": ["PredicatedSortedSet.decorated()"], "external_dependencies": {"modules": ["PredicatedSortedSet"], "class_members": [{"name": "makeTestSet", "type": "method"}]}, "category": "unit", "description": "Tests the decorated method of the PredicatedSortedSet."}, {"name": "testIllegalAdd", "primary_tested": ["SortedSet.add(E)"], "external_dependencies": {"modules": ["SortedSet", "IllegalArgumentException"], "class_members": [{"name": "makeTestSet", "type": "method"}]}, "category": "unit", "description": "Tests the add method of the SortedSet with an illegal element."}, {"name": "testIllegalAddAll", "primary_tested": ["SortedSet.addAll(Collection<? extends E>)"], "external_dependencies": {"modules": ["SortedSet", "IllegalArgumentException"], "class_members": [{"name": "makeTestSet", "type": "method"}]}, "category": "unit", "description": "Tests the addAll method of the SortedSet with a collection containing illegal elements."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/ZippingIteratorTest.java", "testclass_name": "ZippingIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import org.apache.commons.collections4.IteratorUtils;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ZippingIteratorTest", "description": "Unit tests for the ZippingIterator class, which combines multiple iterators into a single iterator.", "class_members": {"variables": [{"name": "evens", "type": "ArrayList<Integer>"}, {"name": "odds", "type": "ArrayList<Integer>"}, {"name": "fib", "type": "ArrayList<Integer>"}], "methods": [{"name": "makeEmptyIterator", "signature": "ZippingIterator<Integer> makeEmptyIterator()"}, {"name": "makeObject", "signature": "ZippingIterator<Integer> makeObject()"}, {"name": "setUp", "signature": "void setUp() throws Exception"}], "nested_classes": []}, "fixtures": ["setUp"], "test_cases": [{"name": "testIterateEven", "primary_tested": ["ZippingIterator.hasNext()", "ZippingIterator.next()"], "external_dependencies": {"modules": ["ZippingIterator", "ArrayList"], "class_members": [{"name": "evens", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the iteration over a single list of even numbers using ZippingIterator."}, {"name": "testIterateEvenEven", "primary_tested": ["ZippingIterator.hasNext()", "ZippingIterator.next()"], "external_dependencies": {"modules": ["ZippingIterator", "ArrayList"], "class_members": [{"name": "evens", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the iteration over two lists of even numbers using ZippingIterator."}, {"name": "testIterateEvenOdd", "primary_tested": ["ZippingIterator.hasNext()", "ZippingIterator.next()"], "external_dependencies": {"modules": ["ZippingIterator", "ArrayList"], "class_members": [{"name": "evens", "type": "variable"}, {"name": "odds", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the iteration over a list of even numbers and a list of odd numbers using ZippingIterator."}, {"name": "testIterateFibEvenOdd", "primary_tested": ["ZippingIterator.hasNext()", "ZippingIterator.next()"], "external_dependencies": {"modules": ["ZippingIterator", "ArrayList"], "class_members": [{"name": "fib", "type": "variable"}, {"name": "evens", "type": "variable"}, {"name": "odds", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the iteration over a list of Fibonacci numbers, a list of even numbers, and a list of odd numbers using ZippingIterator."}, {"name": "testIterateOddEven", "primary_tested": ["ZippingIterator.hasNext()", "ZippingIterator.next()"], "external_dependencies": {"modules": ["ZippingIterator", "ArrayList"], "class_members": [{"name": "odds", "type": "variable"}, {"name": "evens", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the iteration over a list of odd numbers and a list of even numbers using ZippingIterator."}, {"name": "testRemoveFromDouble", "primary_tested": ["ZippingIterator.hasNext()", "ZippingIterator.next()", "ZippingIterator.remove()"], "external_dependencies": {"modules": ["ZippingIterator", "ArrayList"], "class_members": [{"name": "evens", "type": "variable"}, {"name": "odds", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of elements from a ZippingIterator that combines two lists."}, {"name": "testRemoveFromSingle", "primary_tested": ["ZippingIterator.hasNext()", "ZippingIterator.next()", "ZippingIterator.remove()"], "external_dependencies": {"modules": ["ZippingIterator", "ArrayList"], "class_members": [{"name": "evens", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of elements from a ZippingIterator that combines a single list."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/TransformerUtilsTest.java", "testclass_name": "TransformerUtilsTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.ArrayList;", "import java.util.Collection;", "import java.util.Collections;", "import java.util.Date;", "import java.util.HashMap;", "import java.util.List;", "import java.util.Map;", "import org.apache.commons.collections4.functors.ConstantTransformer;", "import org.apache.commons.collections4.functors.EqualPredicate;", "import org.apache.commons.collections4.functors.ExceptionTransformer;", "import org.apache.commons.collections4.functors.FalsePredicate;", "import org.apache.commons.collections4.functors.NOPTransformer;", "import org.apache.commons.collections4.functors.StringValueTransformer;", "import org.apache.commons.collections4.functors.TruePredicate;", "import org.apache.commons.lang3.StringUtils;", "import org.junit.jupiter.api.Test;"], "name": "TransformerUtilsTest", "description": "Unit tests for various utility methods in TransformerUtils.", "class_members": {"variables": [{"name": "cObject", "type": "static final Object"}, {"name": "cString", "type": "static final Object"}, {"name": "cInteger", "type": "static final Object"}]}, "fixtures": [], "test_cases": [{"name": "testChainedTransformer", "primary_tested": ["TransformerUtils.chainedTransformer(Transformer[],Transformer[])"], "associated_methods": ["TransformerUtils.constantTransformer(Object)", "TransformerUtils.chainedTransformer(Collection<Transformer<Object, Object>>)", "TransformerUtils.chainedTransformer(Transformer[])"], "external_dependencies": {"modules": ["TransformerUtils", "NOPTransformer", "ArrayList", "Collections", "NullPointerException"], "class_members": [{"name": "cString", "type": "variable"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the chained transformer functionality."}, {"name": "testCloneTransformer", "primary_tested": ["TransformerUtils.cloneTransformer()"], "associated_methods": [], "external_dependencies": {"modules": ["TransformerUtils", "IllegalArgumentException"], "class_members": [{"name": "cString", "type": "variable"}, {"name": "cInteger", "type": "variable"}, {"name": "cObject", "type": "variable"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the clone transformer functionality."}, {"name": "testConstantTransformer", "primary_tested": ["TransformerUtils.constantTransformer(Object)"], "associated_methods": [], "external_dependencies": {"modules": ["TransformerUtils", "ConstantTransformer"], "class_members": [{"name": "cObject", "type": "variable"}, {"name": "cString", "type": "variable"}, {"name": "cInteger", "type": "variable"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the constant transformer functionality."}, {"name": "testExceptionTransformer", "primary_tested": ["TransformerUtils.exceptionTransformer()"], "associated_methods": [], "external_dependencies": {"modules": ["TransformerUtils", "FunctorException"], "class_members": [{"name": "cString", "type": "variable"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the exception transformer functionality."}, {"name": "testExecutorTransformer", "primary_tested": ["TransformerUtils.asTransformer(Closure<Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["TransformerUtils", "ClosureUtils", "NullPointerException"], "class_members": [{"name": "cObject", "type": "variable"}, {"name": "cString", "type": "variable"}, {"name": "cInteger", "type": "variable"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the executor transformer functionality."}, {"name": "testFactoryTransformer", "primary_tested": ["TransformerUtils.asTransformer(Factory<Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["TransformerUtils", "FactoryUtils", "NullPointerException"], "class_members": [{"name": "cObject", "type": "variable"}, {"name": "cString", "type": "variable"}, {"name": "cInteger", "type": "variable"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the factory transformer functionality."}, {"name": "testIfTransformer", "primary_tested": ["TransformerUtils.ifTransformer(Predicate<Integer>,Transformer<Object, String>,Transformer<Object, String>)"], "associated_methods": [], "external_dependencies": {"modules": ["TransformerUtils", "TruePredicate", "FalsePredicate", "EqualPredicate", "NullPointerException"], "class_members": [{"name": "cString", "type": "variable"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the if transformer functionality."}, {"name": "testInstantiateTransformerNull", "primary_tested": ["TransformerUtils.instantiateTransformer(Class[],Object[])"], "associated_methods": [], "external_dependencies": {"modules": ["TransformerUtils", "IllegalArgumentException", "FunctorException", "StringUtils"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the instantiate transformer functionality with null values."}, {"name": "testInvokerTransformer", "primary_tested": ["TransformerUtils.invokerTransformer(String)"], "associated_methods": [], "external_dependencies": {"modules": ["TransformerUtils", "ArrayList", "NullPointerException", "FunctorException"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the invoker transformer functionality."}, {"name": "testInvokerTransformer2", "primary_tested": ["TransformerUtils.invokerTransformer(String,Class[],Object[])"], "associated_methods": [], "external_dependencies": {"modules": ["TransformerUtils", "ArrayList", "NullPointerException", "FunctorException", "IllegalArgumentException"], "class_members": [{"name": "cString", "type": "variable"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the invoker transformer functionality with method parameters."}, {"name": "testMapTransformer", "primary_tested": ["TransformerUtils.mapTransformer(Map<Object, Integer>)"], "associated_methods": [], "external_dependencies": {"modules": ["TransformerUtils", "HashMap", "ConstantTransformer"], "class_members": [{"name": "cObject", "type": "variable"}, {"name": "cString", "type": "variable"}, {"name": "cInteger", "type": "variable"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the map transformer functionality."}, {"name": "testNopTransformer", "primary_tested": ["TransformerUtils.nopTransformer()"], "associated_methods": [], "external_dependencies": {"modules": ["TransformerUtils"], "class_members": [{"name": "cObject", "type": "variable"}, {"name": "cString", "type": "variable"}, {"name": "cInteger", "type": "variable"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the nop transformer functionality."}, {"name": "testNullTransformer", "primary_tested": ["TransformerUtils.nullTransformer()"], "associated_methods": [], "external_dependencies": {"modules": ["TransformerUtils"], "class_members": [{"name": "cObject", "type": "variable"}, {"name": "cString", "type": "variable"}, {"name": "cInteger", "type": "variable"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the null transformer functionality."}, {"name": "testPredicateTransformer", "primary_tested": ["TransformerUtils.asTransformer(Predicate<Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["TransformerUtils", "TruePredicate", "IllegalArgumentException"], "class_members": [{"name": "cObject", "type": "variable"}, {"name": "cString", "type": "variable"}, {"name": "cInteger", "type": "variable"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the predicate transformer functionality."}, {"name": "testSingletonPatternInSerialization", "primary_tested": [], "associated_methods": [], "external_dependencies": {"modules": ["ExceptionTransformer", "NOPTransformer", "StringValueTransformer", "TestUtils"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the singleton pattern in serialization."}, {"name": "testStringValueTransformer", "primary_tested": ["TransformerUtils.stringValueTransformer()"], "associated_methods": [], "external_dependencies": {"modules": ["TransformerUtils"], "class_members": [{"name": "cInteger", "type": "variable"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the string value transformer functionality."}, {"name": "testSwitchMapTransformer", "primary_tested": ["TransformerUtils.switchMapTransformer(Map<String, Transformer<String, String>>)"], "associated_methods": [], "external_dependencies": {"modules": ["TransformerUtils", "HashMap", "ConstantTransformer", "NullPointerException"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the switch map transformer functionality."}, {"name": "testSwitchTransformer", "primary_tested": ["TransformerUtils.switchTransformer(Predicate[],Transformer[])"], "associated_methods": [], "external_dependencies": {"modules": ["TransformerUtils", "TruePredicate", "FalsePredicate", "EqualPredicate", "HashMap", "ConstantTransformer", "NullPointerException", "IllegalArgumentException"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the switch transformer functionality."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/ArrayTrackerTest.java", "testclass_name": "ArrayTrackerTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.function.IntPredicate;", "import org.junit.jupiter.api.Test;"], "name": "ArrayTrackerTest", "description": "Unit tests for the ArrayTracker class in the Bloom filter implementation.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testSeen", "primary_tested": ["IndexFilter.ArrayTracker.test(int)"], "associated_methods": [], "external_dependencies": {"modules": ["Shape", "IndexFilter", "IntPredicate", "IndexOutOfBoundsException"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the functionality of the ArrayTracker's seen method, including handling of valid and invalid indices."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/BitMapTrackerTest.java", "testclass_name": "BitMapTrackerTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.function.IntPredicate;", "import org.junit.jupiter.api.Test;"], "name": "BitMapTrackerTest", "description": "Unit tests for the BitMapTracker class in the Bloom filter implementation.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testSeen", "primary_tested": ["IndexFilter.BitMapTracker.test(int)"], "external_dependencies": {"modules": ["Shape", "IndexFilter", "IntPredicate"], "class_members": []}, "category": "unit", "description": "Tests the functionality of the BitMapTracker's seen method, ensuring it correctly tracks and reports seen indices."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/IndexExtractorFromBitmapExtractorTest.java", "testclass_name": "IndexExtractorFromBitmapExtractorTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import java.util.ArrayList;", "import java.util.List;", "import java.util.function.LongPredicate;", "import org.junit.jupiter.api.Test;"], "name": "IndexExtractorFromBitmapExtractorTest", "description": "Tests for the IndexExtractor created from a BitMapExtractor.", "class_members": {"variables": [], "methods": [], "nested_classes": [{"name": "TestingBitMapExtractor", "description": "Internal class implementing BitMapExtractor for testing purposes."}]}, "fixtures": [], "test_cases": [{"name": "testFromBitMapExtractor", "primary_tested": ["IndexExtractor.fromBitMapExtractor(BitMapExtractor)"], "associated_methods": ["IndexExtractor.processIndices(IntConsumer)", "TestingBitMapExtractor.processBitMaps(LongPredicate)"], "external_dependencies": {"modules": ["IndexExtractor", "BitMapExtractor", "LongPredicate", "ArrayList", "List", "Integer"], "class_members": [{"name": "TestingBitMapExtractor", "type": "nested_class"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the functionality of creating an IndexExtractor from a BitMapExtractor and processing indices."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/BitMapExtractorFromIndexExtractorTest.java", "testclass_name": "BitMapExtractorFromIndexExtractorTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.List;", "import org.junit.jupiter.api.Test;"], "name": "BitMapExtractorFromIndexExtractorTest", "description": "Tests for BitMapExtractor created from an IndexExtractor.", "class_members": {"methods": [{"name": "createEmptyExtractor", "signature": "BitMapExtractor createEmptyExtractor()"}, {"name": "createExtractor", "signature": "BitMapExtractor createExtractor()"}]}, "fixtures": [], "test_cases": [{"name": "testFromIndexExtractor", "primary_tested": ["BitMapExtractor.processBitMaps(Consumer)"], "associated_methods": ["BitMaps.contains(long[],int)"], "external_dependencies": {"modules": ["BitMapExtractor", "IndexExtractor", "BitMaps", "List", "ArrayList", "Long"], "class_members": [{"name": "createExtractor", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the processBitMaps method of BitMapExtractor to ensure it correctly processes and contains the expected bitmaps."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/ListOrderedSet2Test.java", "testclass_name": "ListOrderedSet2Test", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Iterator;", "import java.util.List;", "import org.junit.jupiter.api.Test;"], "name": "ListOrderedSet2Test", "description": "Unit tests for ListOrderedSet operations like adding, removing, and maintaining order.", "class_members": {"variables": [{"name": "ZERO", "type": "static final Integer"}, {"name": "ONE", "type": "static final Integer"}, {"name": "TWO", "type": "static final Integer"}, {"name": "THREE", "type": "static final Integer"}], "methods": [{"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "makeObject", "signature": "ListOrderedSet<E> makeObject()"}, {"name": "setupSet", "signature": "ListOrderedSet<E> setupSet()"}]}, "test_cases": [{"name": "testListAddIndexed", "primary_tested": ["ListOrderedSet.add(int,E)", "ListOrderedSet.addAll(int,Collection<? extends E>)"], "associated_methods": ["ListOrderedSet.size()", "ListOrderedSet.get(int)"], "external_dependencies": {"modules": ["ListOrderedSet", "ArrayList", "Integer"], "class_members": [{"name": "ZERO", "type": "variable"}, {"name": "ONE", "type": "variable"}, {"name": "TWO", "type": "variable"}, {"name": "THREE", "type": "variable"}]}, "category": "unit", "description": "Tests the indexed add and addAll functionalities of ListOrderedSet."}, {"name": "testListAddRemove", "primary_tested": ["ListOrderedSet.add(E)", "ListOrderedSet.remove(int)"], "associated_methods": ["ListOrderedSet.size()", "ListOrderedSet.get(int)", "ListOrderedSet.asList()", "ListOrderedSet.indexOf(Object)"], "external_dependencies": {"modules": ["ListOrderedSet", "Integer"], "class_members": [{"name": "ZERO", "type": "variable"}, {"name": "ONE", "type": "variable"}, {"name": "TWO", "type": "variable"}]}, "category": "unit", "description": "Tests the add and remove functionalities of ListOrderedSet."}, {"name": "testOrdering", "primary_tested": ["ListOrderedSet.iterator()", "ListOrderedSet.remove(Object)", "ListOrderedSet.add(E)"], "associated_methods": ["ListOrderedSet.size()"], "external_dependencies": {"modules": ["ListOrderedSet", "Iterator", "Integer"], "class_members": [{"name": "setupSet", "type": "method"}]}, "category": "unit", "description": "Tests the ordering and removal functionalities of ListOrderedSet."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/TransformedListTest.java", "testclass_name": "TransformedListTest", "dependencies": ["package org.apache.commons.collections4.list;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.List;", "import java.util.ListIterator;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.collection.TransformedCollectionTest;", "import org.junit.jupiter.api.Test;"], "name": "TransformedListTest", "description": "Tests for the TransformedList class, focusing on its transformation and sublist functionalities.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testSubList", "primary_tested": ["List.subList(int,int)"], "associated_methods": ["List.add(E)", "List.addAll(int,Collection<? extends E>)", "List.size()"], "external_dependencies": {"modules": ["ArrayList", "Arrays", "Collections"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the subList functionality of the TransformedList, including adding elements and verifying sublist sizes."}, {"name": "testTransformedList", "primary_tested": ["TransformedList.transformingList(List<E>,Transformer<E,E>)"], "associated_methods": ["List.size()", "List.add(E)", "List.contains(Object)", "List.remove(Object)", "List.clear()", "List.add(int,E)", "List.get(int)", "List.set(int,E)", "ListIterator.next()", "ListIterator.set(E)", "ListIterator.add(E)", "List.addAll(Collection<? extends E>)", "List.addAll(int,Collection<? extends E>)"], "external_dependencies": {"modules": ["ArrayList", "TransformedList", "Transformer", "TransformedCollectionTest", "ListIterator"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformation functionality of the TransformedList, including adding, removing, and iterating over elements."}, {"name": "testTransformedList_decorateTransform", "primary_tested": ["TransformedList.transformedList(List<E>,Transformer<? super E,? extends E>)"], "associated_methods": ["List.size()", "List.contains(Object)", "List.remove(Object)"], "external_dependencies": {"modules": ["ArrayList", "TransformedList", "Transformer", "TransformedCollectionTest", "Collections"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformedList method with a transformer, verifying the transformation and removal of elements."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/CompositeCollectionTest.java", "testclass_name": "CompositeCollectionTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.Iterator;", "import java.util.List;", "import java.util.function.Predicate;", "import org.junit.jupiter.api.Test;"], "name": "CompositeCollectionTest", "description": "Unit tests for CompositeCollection operations.", "class_members": {"variables": [{"name": "c", "type": "CompositeCollection<E>"}, {"name": "one", "type": "Collection<E>"}, {"name": "two", "type": "Collection<E>"}], "methods": [{"name": "setUpMutatorTest", "signature": "void setUpMutatorTest()"}, {"name": "setUpTest", "signature": "void setUpTest()"}]}, "fixtures": ["setUpTest"], "test_cases": [{"name": "testAddAllMutator", "primary_tested": ["CompositeCollection.addAll(Collection<? extends E>)"], "associated_methods": ["CompositeCollection.contains(Object)", "HashSet.contains(Object)"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the addAll functionality with a mutator in CompositeCollection."}, {"name": "testAddAllToCollection", "primary_tested": ["CompositeCollection.addComposited(Collection<? extends E>, Collection<? extends E>)"], "associated_methods": ["CompositeCollection.containsAll(Collection<?>)", "CompositeCollection.size()"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests adding all elements from a CompositeCollection to another collection."}, {"name": "testAddMutator", "primary_tested": ["CompositeCollection.add(E)"], "associated_methods": ["CompositeCollection.contains(Object)", "HashSet.contains(Object)"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the add functionality with a mutator in CompositeCollection."}, {"name": "testAddNullList", "primary_tested": ["CompositeCollection.addComposited(Collection<? extends E>)"], "external_dependencies": {"modules": ["CompositeCollection"]}, "category": "unit", "description": "Tests adding a null list to CompositeCollection."}, {"name": "testAddNullLists2Args", "primary_tested": ["CompositeCollection.addComposited(Collection<? extends E>, Collection<? extends E>)"], "external_dependencies": {"modules": ["CompositeCollection"]}, "category": "unit", "description": "Tests adding two null lists to CompositeCollection."}, {"name": "testAddNullListsVarArgs", "primary_tested": ["CompositeCollection.addComposited(Collection<? extends E>...)"], "external_dependencies": {"modules": ["CompositeCollection"]}, "category": "unit", "description": "Tests adding multiple null lists to CompositeCollection."}, {"name": "testClear", "primary_tested": ["CompositeCollection.clear()"], "associated_methods": ["HashSet.isEmpty()"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests clearing the CompositeCollection."}, {"name": "testContainsAll", "primary_tested": ["CompositeCollection.containsAll(Collection<?>)", "CompositeCollection.containsAll(null)"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the containsAll functionality in CompositeCollection."}, {"name": "testIsEmpty", "primary_tested": ["CompositeCollection.isEmpty()"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the isEmpty functionality in CompositeCollection."}, {"name": "testIterator", "primary_tested": ["CompositeCollection.iterator()"], "associated_methods": ["CompositeCollection.contains(Object)", "HashSet.contains(Object)"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the iterator functionality in CompositeCollection."}, {"name": "testMultipleCollectionsSize", "primary_tested": ["CompositeCollection.size()"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the size functionality with multiple collections in CompositeCollection."}, {"name": "testRemove", "primary_tested": ["CompositeCollection.remove(Object)"], "associated_methods": ["CompositeCollection.contains(Object)", "HashSet.contains(Object)"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpMutatorTest"], "description": "Tests the remove functionality in CompositeCollection."}, {"name": "testRemoveAll", "primary_tested": ["CompositeCollection.removeAll(Collection<?>)", "CompositeCollection.removeAll(null)"], "associated_methods": ["CompositeCollection.contains(Object)", "HashSet.contains(Object)"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet", "ArrayList"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpMutatorTest"], "description": "Tests the removeAll functionality in CompositeCollection."}, {"name": "testRemoveComposited", "primary_tested": ["CompositeCollection.removeComposited(Collection<? extends E>)"], "associated_methods": ["CompositeCollection.contains(Object)", "CompositeCollection.size()"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpMutatorTest"], "description": "Tests the removeComposited functionality in CompositeCollection."}, {"name": "testRemoveIf", "primary_tested": ["CompositeCollection.removeIf(Predicate<? super E>)", "CompositeCollection.removeIf(null)"], "associated_methods": ["CompositeCollection.contains(Object)", "HashSet.contains(Object)"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpMutatorTest"], "description": "Tests the removeIf functionality in CompositeCollection."}, {"name": "testRetainAll", "primary_tested": ["CompositeCollection.retainAll(Collection<?>)", "CompositeCollection.retainAll(null)"], "associated_methods": ["CompositeCollection.contains(Object)", "HashSet.contains(Object)"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the retainAll functionality in CompositeCollection."}, {"name": "testSize", "primary_tested": ["CompositeCollection.size()"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the size functionality in CompositeCollection."}, {"name": "testToCollection", "primary_tested": ["CompositeCollection.toCollection()"], "associated_methods": ["CompositeCollection.containsAll(Collection<?>)", "CompositeCollection.size()"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests converting the CompositeCollection to another collection."}, {"name": "testUnsupportedRemove", "primary_tested": ["CompositeCollection.remove(Object)"], "external_dependencies": {"modules": ["CompositeCollection"]}, "category": "unit", "description": "Tests the unsupported remove operation in CompositeCollection."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/SimpleBloomFilterTest.java", "testclass_name": "SimpleBloomFilterTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.junit.jupiter.api.Test;"], "name": "SimpleBloomFilterTest", "description": "Unit tests for the SimpleBloomFilter class, focusing on the merge functionality with a short BitMapExtractor.", "class_members": {"methods": [{"name": "createEmptyFilter", "signature": "SimpleBloomFilter createEmptyFilter(Shape shape)"}]}, "fixtures": [], "test_cases": [{"name": "testMergeShortBitMapExtractor", "primary_tested": ["SimpleBloomFilter.merge(BitMapExtractor)"], "associated_methods": ["SimpleBloomFilter.cardinality()"], "external_dependencies": {"modules": ["SimpleBloomFilter", "BitMapExtractor", "Shape"], "class_members": [{"name": "createEmptyFilter", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the merge functionality of the SimpleBloomFilter with a BitMapExtractor that returns too few values."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/EnhancedDoubleHasherTest.java", "testclass_name": "EnhancedDoubleHasherTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import org.junit.jupiter.api.Test;"], "name": "EnhancedDoubleHasherTest", "description": "Tests for the EnhancedDoubleHasher class, focusing on its constructor and methods.", "class_members": {"variables": [{"name": "expected", "type": "int[]"}], "methods": [{"name": "createEmptyHasher", "signature": "Hasher createEmptyHasher()"}, {"name": "createHasher", "signature": "Hasher createHasher()"}, {"name": "getAsIndexArrayBehaviour", "signature": "int getAsIndexArrayBehaviour()"}, {"name": "getExpectedIndices", "signature": "int[] getExpectedIndices()"}, {"name": "getHasherSize", "signature": "int getHasherSize(Hasher)"}]}, "fixtures": [], "test_cases": [{"name": "testByteConstructor", "primary_tested": ["EnhancedDoubleHasher.EnhancedDoubleHasher(byte[])", "EnhancedDoubleHasher.getInitial()", "EnhancedDoubleHasher.getIncrement()"], "associated_methods": [], "external_dependencies": {"modules": ["EnhancedDoubleHasher", "IllegalArgumentException"], "class_members": [{"name": "expected", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the byte array constructor of EnhancedDoubleHasher, ensuring correct parsing of initial and increment values, and handling of edge cases like empty buffers."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/WrappedBloomFilterTest.java", "testclass_name": "WrappedBloomFilterTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.ValueSource;"], "name": "WrappedBloomFilterTest", "description": "Tests for the WrappedBloomFilter class, focusing on its characteristics.", "class_members": {"methods": [{"name": "createEmptyFilter", "signature": "WrappedBloomFilter createEmptyFilter(Shape shape)"}]}, "fixtures": [], "test_cases": [{"name": "testCharacteristics", "primary_tested": ["WrappedBloomFilter.characteristics()"], "associated_methods": ["DefaultBloomFilterTest.SparseDefaultBloomFilter.characteristics()"], "external_dependencies": {"modules": ["WrappedBloomFilter", "DefaultBloomFilterTest.SparseDefaultBloomFilter", "Shape", "BloomFilter"], "class_members": [{"name": "createEmptyFilter", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the characteristics method of the WrappedBloomFilter class by comparing it with the characteristics of an inner BloomFilter."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIteratorTest.java", "testclass_name": "LoopingListIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.Test;"], "name": "LoopingListIteratorTest", "description": "Unit tests for the LoopingListIterator class, which tests various functionalities such as adding, removing, resetting, and iterating over elements in a looping manner.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testAdd", "primary_tested": ["LoopingListIterator.add(String)"], "associated_methods": ["LoopingListIterator.next()", "LoopingListIterator.previous()", "LoopingListIterator.reset()"], "external_dependencies": {"modules": ["ArrayList", "Arrays", "LoopingListIterator"], "class_members": []}, "category": "unit", "description": "Tests the add method of LoopingListIterator by adding elements and verifying the order of elements after adding."}, {"name": "testConstructorEx", "primary_tested": ["LoopingListIterator.<init>(List)"], "external_dependencies": {"modules": ["LoopingListIterator"], "class_members": []}, "category": "unit", "description": "Tests the constructor of LoopingListIterator to ensure it throws a NullPointerException when given a null list."}, {"name": "testJoggingNotOverBoundary", "primary_tested": ["LoopingListIterator.next()", "LoopingListIterator.previous()", "LoopingListIterator.reset()"], "external_dependencies": {"modules": ["Arrays", "LoopingListIterator"], "class_members": []}, "category": "unit", "description": "Tests jogging back and forth between two elements without crossing the boundary of the list."}, {"name": "testJoggingOverBoundary", "primary_tested": ["LoopingListIterator.next()", "LoopingListIterator.previous()"], "external_dependencies": {"modules": ["Arrays", "LoopingListIterator"], "class_members": []}, "category": "unit", "description": "Tests jogging back and forth between two elements while crossing the boundary of the list."}, {"name": "testLooping0", "primary_tested": ["LoopingListIterator.hasNext()", "LoopingListIterator.hasPrevious()", "LoopingListIterator.next()", "LoopingListIterator.previous()"], "external_dependencies": {"modules": ["ArrayList", "LoopingListIterator", "NoSuchElementException"], "class_members": []}, "category": "unit", "description": "Tests the behavior of LoopingListIterator with an empty list, ensuring it correctly handles no elements."}, {"name": "testLooping1", "primary_tested": ["LoopingListIterator.hasNext()", "LoopingListIterator.next()", "LoopingListIterator.hasPrevious()", "LoopingListIterator.previous()"], "external_dependencies": {"modules": ["Arrays", "LoopingListIterator"], "class_members": []}, "category": "unit", "description": "Tests the behavior of LoopingListIterator with a list containing a single element."}, {"name": "testLooping2", "primary_tested": ["LoopingListIterator.hasNext()", "LoopingListIterator.next()", "LoopingListIterator.reset()", "LoopingListIterator.hasPrevious()", "LoopingListIterator.previous()"], "external_dependencies": {"modules": ["Arrays", "LoopingListIterator"], "class_members": []}, "category": "unit", "description": "Tests the behavior of LoopingListIterator with a list containing two elements."}, {"name": "testNextAndPreviousIndex", "primary_tested": ["LoopingListIterator.nextIndex()", "LoopingListIterator.previousIndex()", "LoopingListIterator.next()", "LoopingListIterator.previous()"], "external_dependencies": {"modules": ["Arrays", "LoopingListIterator"], "class_members": []}, "category": "unit", "description": "Tests the nextIndex and previousIndex methods of LoopingListIterator."}, {"name": "testRemovingElementsAndIteratingBackwards", "primary_tested": ["LoopingListIterator.hasPrevious()", "LoopingListIterator.previous()", "LoopingListIterator.remove()"], "external_dependencies": {"modules": ["ArrayList", "Arrays", "LoopingListIterator", "NoSuchElementException"], "class_members": []}, "category": "unit", "description": "Tests removing elements from a list while iterating backwards using LoopingListIterator."}, {"name": "testRemovingElementsAndIteratingForward", "primary_tested": ["LoopingListIterator.hasNext()", "LoopingListIterator.next()", "LoopingListIterator.remove()"], "external_dependencies": {"modules": ["ArrayList", "Arrays", "LoopingListIterator", "NoSuchElementException"], "class_members": []}, "category": "unit", "description": "Tests removing elements from a list while iterating forward using LoopingListIterator."}, {"name": "testReset", "primary_tested": ["LoopingListIterator.next()", "LoopingListIterator.previous()", "LoopingListIterator.reset()"], "external_dependencies": {"modules": ["Arrays", "LoopingListIterator"], "class_members": []}, "category": "unit", "description": "Tests the reset method of LoopingListIterator to ensure it correctly resets the iterator position."}, {"name": "testSet", "primary_tested": ["LoopingListIterator.previous()", "LoopingListIterator.set(String)", "LoopingListIterator.reset()", "LoopingListIterator.next()"], "external_dependencies": {"modules": ["Arrays", "LoopingListIterator"], "class_members": []}, "category": "unit", "description": "Tests using the set method of LoopingListIterator to change elements in the list."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/FixedSizeListTest.java", "testclass_name": "FixedSizeListTest", "dependencies": ["package org.apache.commons.collections4.list;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.List;", "import org.junit.jupiter.api.Test;"], "name": "FixedSizeListTest", "description": "Test suite for FixedSizeList functionality.", "class_members": {"variables": [], "methods": [{"name": "initFixedSizeList", "signature": "FixedSizeList<String> initFixedSizeList()"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testAdd", "primary_tested": ["FixedSizeList.add(int,String)"], "external_dependencies": {"modules": ["FixedSizeList", "UnsupportedOperationException"], "class_members": [{"name": "initFixedSizeList", "type": "method"}]}, "category": "unit", "description": "Tests that adding an element to a FixedSizeList throws an UnsupportedOperationException."}, {"name": "testAddAll", "primary_tested": ["FixedSizeList.addAll(int,List<String>)"], "external_dependencies": {"modules": ["FixedSizeList", "UnsupportedOperationException"], "class_members": [{"name": "initFixedSizeList", "type": "method"}]}, "category": "unit", "description": "Tests that adding a collection of elements to a FixedSizeList throws an UnsupportedOperationException."}, {"name": "testIsFull", "primary_tested": ["FixedSizeList.isFull()"], "external_dependencies": {"modules": ["FixedSizeList"], "class_members": [{"name": "initFixedSizeList", "type": "method"}]}, "category": "unit", "description": "Tests that the FixedSizeList is full."}, {"name": "testListAllowsMutationOfUnderlyingCollection", "primary_tested": ["ArrayList.add(String)"], "associated_methods": ["FixedSizeList.size()"], "external_dependencies": {"modules": ["FixedSizeList", "ArrayList"]}, "category": "unit", "description": "Tests that the underlying list of a FixedSizeList can be mutated."}, {"name": "testMaxSize", "primary_tested": ["FixedSizeList.maxSize()"], "external_dependencies": {"modules": ["FixedSizeList"], "class_members": [{"name": "initFixedSizeList", "type": "method"}]}, "category": "unit", "description": "Tests the max size of the FixedSizeList."}, {"name": "testRemove", "primary_tested": ["FixedSizeList.remove(int)"], "external_dependencies": {"modules": ["FixedSizeList", "UnsupportedOperationException"], "class_members": [{"name": "initFixedSizeList", "type": "method"}]}, "category": "unit", "description": "Tests that removing an element from a FixedSizeList throws an UnsupportedOperationException."}, {"name": "testSubList", "primary_tested": ["FixedSizeList.subList(int,int)"], "external_dependencies": {"modules": ["FixedSizeList"], "class_members": [{"name": "initFixedSizeList", "type": "method"}]}, "category": "unit", "description": "Tests the subList functionality of the FixedSizeList."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/UnmodifiableListTest.java", "testclass_name": "UnmodifiableListTest", "dependencies": ["package org.apache.commons.collections4.list;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Iterator;", "import java.util.List;", "import org.junit.jupiter.api.Test;"], "name": "UnmodifiableListTest", "description": "Tests for the UnmodifiableList class, focusing on its unmodifiable behavior.", "class_members": {"variables": [{"name": "list", "type": "UnmodifiableList<E>"}, {"name": "array", "type": "ArrayList<E>"}], "methods": [{"name": "setupList", "signature": "void setupList()"}, {"name": "verifyUnmodifiable", "signature": "void verifyUnmodifiable(List<E> list)"}]}, "fixtures": [], "test_cases": [{"name": "testDecorateFactory", "primary_tested": ["UnmodifiableList.unmodifiableList(List<E>)"], "external_dependencies": {"modules": ["UnmodifiableList", "NullPointerException"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "description": "Tests the factory method for creating an unmodifiable list and ensures it throws a NullPointerException for null input."}, {"name": "testUnmodifiable", "primary_tested": ["UnmodifiableList.subList(int,int)"], "associated_methods": ["UnmodifiableList.verifyUnmodifiable(List<E>)"], "external_dependencies": {"modules": ["UnmodifiableList"], "class_members": [{"name": "setupList", "type": "method"}, {"name": "verifyUnmodifiable", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Verifies that both the base list and its sublists are not modifiable."}, {"name": "testUnmodifiableIterator", "primary_tested": ["UnmodifiableList.iterator()"], "external_dependencies": {"modules": ["UnmodifiableList", "UnsupportedOperationException"], "class_members": [{"name": "setupList", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Verifies that the iterator of the unmodifiable list is not modifiable."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparatorTest.java", "testclass_name": "FixedOrderComparatorTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Arrays;", "import java.util.Comparator;", "import java.util.LinkedList;", "import java.util.List;", "import java.util.Random;", "import org.apache.commons.lang3.ArrayUtils;", "import org.junit.jupiter.api.Nested;", "import org.junit.jupiter.api.Test;"], "name": "FixedOrderComparatorTest", "description": "Unit tests for the FixedOrderComparator class, focusing on its comparison and behavior with different configurations.", "class_members": {"variables": [{"name": "topCities", "type": "static final String[]"}], "methods": [{"name": "assertComparatorYieldsOrder", "signature": "void assertComparatorYieldsOrder(String[], Comparator<String>)"}, {"name": "getComparableObjectsOrdered", "signature": "List<String> getComparableObjectsOrdered()"}, {"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "makeObject", "signature": "Comparator<String> makeObject()"}], "nested_classes": [{"name": "Equals", "description": "Nested class containing tests for the equals method of FixedOrderComparator."}]}, "fixtures": [], "test_cases": [{"name": "expectFalseWhenBothComparatorsWithDifferentItems", "primary_tested": ["FixedOrderComparator.equals(Object)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator1", "type": "variable"}, {"name": "comparator2", "type": "variable"}]}, "category": "unit", "description": "Tests that two FixedOrderComparators with different items are not equal."}, {"name": "expectFalseWhenBothComparatorsWithDifferentUnknownObjectBehavior", "primary_tested": ["FixedOrderComparator.equals(Object)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator1", "type": "variable"}, {"name": "comparator2", "type": "variable"}]}, "category": "unit", "description": "Tests that two FixedOrderComparators with different unknown object behaviors are not equal."}, {"name": "expectFalseWhenFixedOrderComparatorIsComparedWithNull", "primary_tested": ["FixedOrderComparator.equals(Object)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "description": "Tests that a FixedOrderComparator is not equal to null."}, {"name": "expectFalseWhenFixedOrderComparatorIsComparedWithOtherObject", "primary_tested": ["FixedOrderComparator.equals(Object)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "description": "Tests that a FixedOrderComparator is not equal to an instance of a different class."}, {"name": "expectFalseWhenOneComparatorIsLocked", "primary_tested": ["FixedOrderComparator.equals(Object)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator1", "type": "variable"}, {"name": "comparator2", "type": "variable"}]}, "category": "unit", "description": "Tests that two FixedOrderComparators are not equal if one is locked and the other is not."}, {"name": "expectFalseWhenOneComparatorsWithDuplicateItems", "primary_tested": ["FixedOrderComparator.equals(Object)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator1", "type": "variable"}, {"name": "comparator2", "type": "variable"}]}, "category": "unit", "description": "Tests that two FixedOrderComparators with different item counts (due to duplicates) are not equal."}, {"name": "expectTrueWhenBothComparatorsAreLocked", "primary_tested": ["FixedOrderComparator.equals(Object)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator1", "type": "variable"}, {"name": "comparator2", "type": "variable"}]}, "category": "unit", "description": "Tests that two locked FixedOrderComparators with the same items are equal."}, {"name": "expectTrueWhenBothComparatorsWithoutAnyItems", "primary_tested": ["FixedOrderComparator.equals(Object)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator1", "type": "variable"}, {"name": "comparator2", "type": "variable"}]}, "category": "unit", "description": "Tests that two FixedOrderComparators without any items are equal."}, {"name": "expectTrueWhenBothObjectsAreSame", "primary_tested": ["FixedOrderComparator.equals(Object)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "description": "Tests that a FixedOrderComparator is equal to itself."}, {"name": "testAddAsEqual", "primary_tested": ["FixedOrderComparator.addAsEqual(String,String)", "FixedOrderComparator.compare(String,String)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "description": "Tests the addAsEqual method and ensures that added items are treated as equal."}, {"name": "testArrayConstructor", "primary_tested": ["FixedOrderComparator.FixedOrderComparator(String[])"], "associated_methods": ["FixedOrderComparator.assertComparatorYieldsOrder(String[],Comparator<String>)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}, {"name": "assertComparatorYieldsOrder", "type": "method"}]}, "category": "unit", "description": "Tests the array constructor and ensures that the comparator sorts items in the specified order."}, {"name": "testConstructorPlusAdd", "primary_tested": ["FixedOrderComparator.FixedOrderComparator()", "FixedOrderComparator.add(String)"], "associated_methods": ["FixedOrderComparator.assertComparatorYieldsOrder(String[],Comparator<String>)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}, {"name": "assertComparatorYieldsOrder", "type": "method"}]}, "category": "unit", "description": "Tests the constructor and add method combination and ensures that the comparator sorts items in the specified order."}, {"name": "testListConstructor", "primary_tested": ["FixedOrderComparator.FixedOrderComparator(List<String>)"], "associated_methods": ["FixedOrderComparator.assertComparatorYieldsOrder(String[],Comparator<String>)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}, {"name": "assertComparatorYieldsOrder", "type": "method"}]}, "category": "unit", "description": "Tests the list constructor and ensures that the comparator sorts items in the specified order."}, {"name": "testLock", "primary_tested": ["FixedOrderComparator.isLocked()", "FixedOrderComparator.compare(String,String)", "FixedOrderComparator.add(String)", "FixedOrderComparator.addAsEqual(String,String)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "description": "Tests the locking behavior of the FixedOrderComparator and ensures that updates are disabled after a comparison is made."}, {"name": "testUnknownObjectBehavior", "primary_tested": ["FixedOrderComparator.compare(String,String)", "FixedOrderComparator.setUnknownObjectBehavior(UnknownObjectBehavior)", "FixedOrderComparator.getUnknownObjectBehavior()"], "associated_methods": ["FixedOrderComparator.assertComparatorYieldsOrder(String[],Comparator<String>)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}, {"name": "assertComparatorYieldsOrder", "type": "method"}]}, "category": "unit", "description": "Tests the behavior of the FixedOrderComparator when handling unknown objects with different configurations."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/SparseBloomFilterTest.java", "testclass_name": "SparseBloomFilterTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.junit.jupiter.api.Test;"], "name": "SparseBloomFilterTest", "description": "Unit tests for the SparseBloomFilter class, focusing on edge cases for bit map extraction and Bloom filter-based merge operations.", "class_members": {"methods": [{"name": "createEmptyFilter", "signature": "SparseBloomFilter createEmptyFilter(Shape shape)"}]}, "fixtures": [], "test_cases": [{"name": "testBitMapExtractorEdgeCases", "primary_tested": ["BloomFilter.processBitMaps(BitMapProcessor)", "BloomFilter.merge(Hasher)"], "associated_methods": [], "external_dependencies": {"modules": ["BloomFilter", "IndexExtractor", "SparseBloomFilter", "SimpleBloomFilter", "TestingHashers"], "class_members": [{"name": "createEmptyFilter", "type": "method"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests edge cases for bit map extraction in the BloomFilter, including early exit conditions and processing of bit maps."}, {"name": "testBloomFilterBasedMergeEdgeCases", "primary_tested": ["BloomFilter.merge(BloomFilter)", "BloomFilter.processBitMapPairs(BloomFilter, BitMapPairProcessor)"], "associated_methods": [], "external_dependencies": {"modules": ["BloomFilter", "SparseBloomFilter", "SimpleBloomFilter", "TestingHashers"], "class_members": [{"name": "createEmptyFilter", "type": "method"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests edge cases for merging Bloom filters, specifically verifying the merge operation and processing of bit map pairs."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/IndexExtractorTest.java", "testclass_name": "IndexExtractorTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import java.util.ArrayList;", "import java.util.List;", "import java.util.function.LongPredicate;", "import org.junit.jupiter.api.Assertions;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.ValueSource;"], "name": "IndexExtractorTest", "description": "Tests for the IndexExtractor class, focusing on its functionality with BitMapExtractor.", "class_members": {"variables": [], "methods": [], "nested_classes": [{"name": "TestingBitMapExtractor", "description": "Internal class implementing BitMapExtractor for testing purposes."}]}, "fixtures": [], "test_cases": [{"name": "testAsIndexArray", "primary_tested": ["IndexExtractor.asIndexArray()"], "external_dependencies": {"modules": ["IndexExtractor"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the asIndexArray method of IndexExtractor with different input sizes."}, {"name": "testFromBitMapExtractor", "primary_tested": ["IndexExtractor.fromBitMapExtractor(BitMapExtractor)", "IndexExtractor.processIndices(IntConsumer)"], "associated_methods": ["TestingBitMapExtractor.processBitMaps(LongPredicate)"], "external_dependencies": {"modules": ["IndexExtractor", "TestingBitMapExtractor", "ArrayList", "List", "Integer"], "class_members": [{"name": "TestingBitMapExtractor", "type": "nested_class"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the fromBitMapExtractor and processIndices methods of IndexExtractor using a custom BitMapExtractor implementation."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/PredicatedListTest.java", "testclass_name": "PredicatedListTest", "dependencies": ["package org.apache.commons.collections4.list;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.List;", "import org.apache.commons.collections4.Predicate;", "import org.apache.commons.collections4.functors.TruePredicate;", "import org.junit.jupiter.api.Test;"], "name": "PredicatedListTest", "description": "Unit tests for PredicatedList functionality, focusing on predicate validation and list operations.", "class_members": {"variables": [{"name": "truePredicate", "type": "Predicate<E>"}, {"name": "testPredicate", "type": "Predicate<E>"}], "methods": [{"name": "decorateList", "signature": "List<E> decorateList(List<E> list, Predicate<E> predicate)"}, {"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "getFullElements", "signature": "E[] getFullElements()"}, {"name": "makeObject", "signature": "List<E> makeObject()"}, {"name": "makeTestList", "signature": "List<E> makeTestList()"}]}, "fixtures": [], "test_cases": [{"name": "testIllegalAdd", "primary_tested": ["List.add(E)"], "external_dependencies": {"modules": ["List", "Integer", "IllegalArgumentException"], "class_members": [{"name": "makeTestList", "type": "method"}]}, "category": "unit", "description": "Tests that adding an illegal element (non-string) to the list throws an IllegalArgumentException."}, {"name": "testIllegalAddAll", "primary_tested": ["List.addAll(int,Collection<? extends E>)"], "external_dependencies": {"modules": ["List", "ArrayList", "IllegalArgumentException"], "class_members": [{"name": "makeTestList", "type": "method"}]}, "category": "unit", "description": "Tests that adding a collection with an illegal element (non-string) to the list throws an IllegalArgumentException."}, {"name": "testIllegalSet", "primary_tested": ["List.set(int,E)"], "external_dependencies": {"modules": ["List", "IllegalArgumentException"], "class_members": [{"name": "makeTestList", "type": "method"}]}, "category": "unit", "description": "Tests that setting an illegal element (non-string) in the list throws an IllegalArgumentException."}, {"name": "testLegalAddAll", "primary_tested": ["List.addAll(int,Collection<? extends E>)"], "external_dependencies": {"modules": ["List", "ArrayList"], "class_members": [{"name": "makeTestList", "type": "method"}]}, "category": "unit", "description": "Tests that adding a collection with only legal elements (strings) to the list succeeds."}, {"name": "testSubList", "primary_tested": ["List.subList(int,int)"], "external_dependencies": {"modules": ["List", "ArrayList"], "class_members": [{"name": "makeTestList", "type": "method"}]}, "category": "unit", "description": "Tests the subList functionality of the list, ensuring correct sublist creation and size."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java", "testclass_name": "ListUtilsTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertInstanceOf;", "import static org.junit.jupiter.api.Assertions.assertNotEquals;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.Collections;", "import java.util.HashSet;", "import java.util.List;", "import org.apache.commons.collections4.functors.EqualPredicate;", "import org.apache.commons.collections4.list.PredicatedList;", "import org.apache.commons.lang3.StringUtils;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ListUtilsTest", "description": "Unit tests for various utility methods in the ListUtils class.", "class_members": {"variables": [{"name": "a", "type": "static final String"}, {"name": "b", "type": "static final String"}, {"name": "c", "type": "static final String"}, {"name": "d", "type": "static final String"}, {"name": "e", "type": "static final String"}, {"name": "x", "type": "static final String"}, {"name": "EQUALS_TWO", "type": "static final Predicate<Number>"}, {"name": "fullArray", "type": "String[]"}, {"name": "fullList", "type": "List<String>"}], "methods": [], "nested_classes": []}, "fixtures": ["setUp"], "test_cases": [{"name": "testDefaultIfNull", "primary_tested": ["ListUtils.defaultIfNull(List,List)"], "external_dependencies": {"modules": ["ListUtils", "Collections"], "class_members": [{"name": "fullList", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the defaultIfNull method of ListUtils."}, {"name": "testEmptyIfNull", "primary_tested": ["ListUtils.emptyIfNull(List)"], "external_dependencies": {"modules": ["ListUtils", "Collections"], "class_members": [{"name": "fullList", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the emptyIfNull method of ListUtils."}, {"name": "testEquals", "primary_tested": ["ListUtils.isEqualList(List,List)"], "external_dependencies": {"modules": ["ListUtils", "Collections", "Arrays"], "class_members": [{"name": "fullList", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the isEqualList method of ListUtils."}, {"name": "testGetFirst", "primary_tested": ["ListUtils.getFirst(List)"], "external_dependencies": {"modules": ["ListUtils", "Collections"], "class_members": [{"name": "fullList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getFirst method of ListUtils."}, {"name": "testGetLast", "primary_tested": ["ListUtils.getLast(List)"], "external_dependencies": {"modules": ["ListUtils", "Collections"], "class_members": [{"name": "fullList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getLast method of ListUtils."}, {"name": "testHashCode", "primary_tested": ["ListUtils.hashCodeForList(List)"], "external_dependencies": {"modules": ["ListUtils", "Collections", "Arrays"], "class_members": [{"name": "fullList", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the hashCodeForList method of ListUtils."}, {"name": "testIndexOf", "primary_tested": ["ListUtils.indexOf(List,Predicate)"], "external_dependencies": {"modules": ["ListUtils", "EqualPredicate"], "class_members": [{"name": "fullList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the indexOf method of ListUtils."}, {"name": "testIntersectEmptyWithEmptyList", "primary_tested": ["ListUtils.intersection(List,List)"], "external_dependencies": {"modules": ["ListUtils", "Collections"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests intersecting an empty list with another empty list."}, {"name": "testIntersectionOrderInsensitivity", "primary_tested": ["ListUtils.intersection(List,List)"], "external_dependencies": {"modules": ["ListUtils", "Collections"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests intersecting two lists in different orders."}, {"name": "testIntersectListWithNoOverlapAndDifferentTypes", "primary_tested": ["ListUtils.intersection(List,List)"], "external_dependencies": {"modules": ["ListUtils", "Collections", "Arrays"], "class_members": [{"name": "fullList", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests intersecting a list with no overlap and different types."}, {"name": "testIntersectListWithSelf", "primary_tested": ["ListUtils.intersection(List,List)"], "external_dependencies": {"modules": ["ListUtils", "Collections"], "class_members": [{"name": "fullList", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests intersecting a list with itself."}, {"name": "testIntersectNonEmptySubset", "primary_tested": ["ListUtils.intersection(List,List)"], "external_dependencies": {"modules": ["ListUtils", "Collections"], "class_members": [{"name": "fullList", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests intersecting a list with a non-empty subset."}, {"name": "testIntersectNonEmptyWithEmptyList", "primary_tested": ["ListUtils.intersection(List,List)"], "external_dependencies": {"modules": ["ListUtils", "Collections"], "class_members": [{"name": "fullList", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests intersecting a non-empty list with an empty list."}, {"name": "testLazyFactoryList", "primary_tested": ["ListUtils.lazyList(List,Factory)"], "external_dependencies": {"modules": ["ListUtils", "Collections"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the lazyList method of ListUtils with a factory."}, {"name": "testLazyTransformerList", "primary_tested": ["ListUtils.lazyList(List,Transformer)"], "external_dependencies": {"modules": ["ListUtils", "Collections", "Arrays"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the lazyList method of ListUtils with a transformer."}, {"name": "testLongestCommonSubsequence", "primary_tested": ["ListUtils.longestCommonSubsequence(List,List)"], "external_dependencies": {"modules": ["ListUtils", "Collections", "Arrays"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the longestCommonSubsequence method of ListUtils."}, {"name": "testLongestCommonSubsequenceWithString", "primary_tested": ["ListUtils.longestCommonSubsequence(String,String)"], "external_dependencies": {"modules": ["ListUtils", "StringUtils"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the longestCommonSubsequence method of ListUtils with strings."}, {"name": "testPartition", "primary_tested": ["ListUtils.partition(List,int)"], "external_dependencies": {"modules": ["ListUtils", "Collections"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the partition method of ListUtils."}, {"name": "testPredicatedList", "primary_tested": ["ListUtils.predicatedList(List,Predicate)"], "external_dependencies": {"modules": ["ListUtils", "Collections"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the predicatedList method of ListUtils."}, {"name": "testRemoveAll", "primary_tested": ["ListUtils.removeAll(List,List)"], "external_dependencies": {"modules": ["ListUtils", "Collections"], "class_members": [{"name": "fullList", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the removeAll method of ListUtils."}, {"name": "testRetainAll", "primary_tested": ["ListUtils.retainAll(List,List)"], "external_dependencies": {"modules": ["ListUtils", "Collections"], "class_members": [{"name": "fullList", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the retainAll method of ListUtils."}, {"name": "testSelect", "primary_tested": ["ListUtils.select(List,Predicate)"], "external_dependencies": {"modules": ["ListUtils", "CollectionUtils"], "class_members": [{"name": "EQUALS_TWO", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the select method of ListUtils."}, {"name": "testSelectRejected", "primary_tested": ["ListUtils.selectRejected(List,Predicate)"], "external_dependencies": {"modules": ["ListUtils", "CollectionUtils"], "class_members": [{"name": "EQUALS_TWO", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the selectRejected method of ListUtils."}, {"name": "testSubtract", "primary_tested": ["ListUtils.subtract(List,List)"], "external_dependencies": {"modules": ["ListUtils", "Collections"], "class_members": [{"name": "fullList", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the subtract method of ListUtils."}, {"name": "testSubtractNullElement", "primary_tested": ["ListUtils.subtract(List,List)"], "external_dependencies": {"modules": ["ListUtils", "Collections"], "class_members": [{"name": "fullList", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the subtract method of ListUtils with null elements."}, {"name": "testSum", "primary_tested": ["ListUtils.sum(List,List)"], "external_dependencies": {"modules": ["ListUtils", "Collections"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the sum method of ListUtils."}, {"name": "testUnion", "primary_tested": ["ListUtils.union(List,List)"], "external_dependencies": {"modules": ["ListUtils", "Collections"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the union method of ListUtils."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/IndexFilterTest.java", "testclass_name": "IndexFilterTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.assertArrayEquals;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.BitSet;", "import java.util.List;", "import java.util.SplittableRandom;", "import java.util.concurrent.ThreadLocalRandom;", "import java.util.function.IntPredicate;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.CsvSource;"], "name": "IndexFilterTest", "description": "Unit tests for the IndexFilter class, focusing on its filtering functionality.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testFilter", "primary_tested": ["IndexFilter.create(Shape,IntConsumer)"], "associated_methods": ["BitSet.clear()", "BitSet.get(int)", "BitSet.set(int)", "BitSet.stream()", "List.size()", "List.add(Integer)", "IntPredicate.test(int)", "SplittableRandom.nextInt(int)", "ThreadLocalRandom.current().nextLong()"], "external_dependencies": {"modules": ["Shape", "BitSet", "List", "IntPredicate", "SplittableRandom", "ThreadLocalRandom"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the creation and functionality of the IndexFilter, ensuring it correctly filters and handles duplicate indices."}, {"name": "testFiltering", "primary_tested": ["IndexFilter.create(Shape,IntConsumer)"], "associated_methods": ["List.size()", "List.add(Integer)", "IntPredicate.test(int)"], "external_dependencies": {"modules": ["Shape", "List", "IntPredicate"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the filtering functionality of the IndexFilter, ensuring it correctly processes indices and maintains the list size."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/DefaultIndexExtractorTest.java", "testclass_name": "DefaultIndexExtractorTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.assertArrayEquals;", "import java.util.Arrays;", "import java.util.BitSet;", "import java.util.Objects;", "import java.util.concurrent.ThreadLocalRandom;", "import java.util.stream.IntStream;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.ValueSource;"], "name": "DefaultIndexExtractorTest", "description": "Tests for the DefaultIndexExtractor class, focusing on various functionalities such as generating arrays, creating unique sets, and testing index extraction methods.", "class_members": {"variables": [{"name": "values", "type": "int[]"}], "methods": [{"name": "generateIntArray", "signature": "int[] generateIntArray(int, int)"}, {"name": "unique", "signature": "int[] unique(int[])"}, {"name": "uniqueSet", "signature": "BitSet uniqueSet(int[])"}]}, "fixtures": [], "test_cases": [{"name": "testEntries", "primary_tested": ["IndexExtractor.asIndexArray()"], "associated_methods": ["IndexExtractor.test(Predicate<Integer>)"], "external_dependencies": {"modules": ["IntStream", "IndexExtractor", "Predicate"], "class_members": [{"name": "values", "type": "variable"}]}, "category": "unit", "description": "Tests the functionality of converting an index extractor to an index array."}, {"name": "testFromBitMapExtractor", "primary_tested": ["IndexExtractor.fromBitMapExtractor(BitMapExtractor)"], "associated_methods": ["BitMaps.numberOfBitMaps(int)", "BitMaps.set(long[], int)", "BitMapExtractor.fromBitMapArray(long[])"], "external_dependencies": {"modules": ["BitMaps", "BitMapExtractor", "IndexExtractor"], "class_members": [{"name": "generateIntArray", "type": "method"}, {"name": "unique", "type": "method"}]}, "category": "unit", "description": "Tests the functionality of creating an index extractor from a bitmap extractor."}, {"name": "testFromIndexArray", "primary_tested": ["IndexExtractor.fromIndexArray(int[])"], "external_dependencies": {"modules": ["IndexExtractor"], "class_members": [{"name": "generateIntArray", "type": "method"}]}, "category": "unit", "description": "Tests the functionality of creating an index extractor from an index array."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/CartesianProductIteratorTest.java", "testclass_name": "CartesianProductIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertArrayEquals;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CartesianProductIteratorTest", "description": "Unit tests for the CartesianProductIterator class, which generates the Cartesian product of multiple lists.", "class_members": {"variables": [{"name": "letters", "type": "List<Character>"}, {"name": "numbers", "type": "List<Character>"}, {"name": "symbols", "type": "List<Character>"}, {"name": "emptyList", "type": "List<Character>"}], "methods": [{"name": "makeEmptyIterator", "signature": "CartesianProductIterator<Character> makeEmptyIterator()"}, {"name": "makeObject", "signature": "CartesianProductIterator<Character> makeObject()"}, {"name": "setUp", "signature": "void setUp()"}, {"name": "supportsRemove", "signature": "boolean supportsRemove()"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveThrows", "primary_tested": ["CartesianProductIterator.remove()"], "external_dependencies": {"modules": ["CartesianProductIterator"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests that the remove operation throws an UnsupportedOperationException."}, {"name": "testEmptyCollection", "primary_tested": ["CartesianProductIterator.hasNext()"], "associated_methods": ["CartesianProductIterator.next()"], "external_dependencies": {"modules": ["CartesianProductIterator"], "class_members": [{"name": "letters", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests that the iterator returns false for hasNext and throws NoSuchElementException for next when one of the lists is empty."}, {"name": "testExhaustivity", "primary_tested": ["CartesianProductIterator.hasNext()", "CartesianProductIterator.next()"], "associated_methods": ["CartesianProductIterator.next()"], "external_dependencies": {"modules": ["CartesianProductIterator"], "class_members": [{"name": "makeObject", "type": "method"}, {"name": "letters", "type": "variable"}, {"name": "numbers", "type": "variable"}, {"name": "symbols", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests that all tuples are returned and the iterator is exhausted correctly."}, {"name": "testExhaustivityWithEmptyList", "primary_tested": ["CartesianProductIterator.hasNext()", "CartesianProductIterator.next()"], "associated_methods": ["CartesianProductIterator.next()"], "external_dependencies": {"modules": ["CartesianProductIterator"], "class_members": [{"name": "letters", "type": "variable"}, {"name": "emptyList", "type": "variable"}, {"name": "symbols", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests that no tuples are returned when one of the lists is empty."}, {"name": "testExhaustivityWithEmptyFirstList", "primary_tested": ["CartesianProductIterator.hasNext()", "CartesianProductIterator.next()"], "associated_methods": ["CartesianProductIterator.next()"], "external_dependencies": {"modules": ["CartesianProductIterator"], "class_members": [{"name": "emptyList", "type": "variable"}, {"name": "numbers", "type": "variable"}, {"name": "symbols", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests that no tuples are returned when the first list is empty."}, {"name": "testExhaustivityWithEmptyLastList", "primary_tested": ["CartesianProductIterator.hasNext()", "CartesianProductIterator.next()"], "associated_methods": ["CartesianProductIterator.next()"], "external_dependencies": {"modules": ["CartesianProductIterator"], "class_members": [{"name": "letters", "type": "variable"}, {"name": "numbers", "type": "variable"}, {"name": "emptyList", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests that no tuples are returned when the last list is empty."}, {"name": "testExhaustivityWithAllEmptyLists", "primary_tested": ["CartesianProductIterator.hasNext()", "CartesianProductIterator.next()"], "associated_methods": ["CartesianProductIterator.next()"], "external_dependencies": {"modules": ["CartesianProductIterator"], "class_members": [{"name": "emptyList", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests that no tuples are returned when all lists are empty."}, {"name": "testExhaustivityWithSameList", "primary_tested": ["CartesianProductIterator.hasNext()", "CartesianProductIterator.next()"], "associated_methods": ["CartesianProductIterator.next()"], "external_dependencies": {"modules": ["CartesianProductIterator"], "class_members": [{"name": "letters", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests that all tuples are returned when the same list is passed multiple times."}, {"name": "testForEachRemaining", "primary_tested": ["CartesianProductIterator.forEachRemaining(Consumer<? super List<Character>>)"], "associated_methods": ["CartesianProductIterator.next()"], "external_dependencies": {"modules": ["CartesianProductIterator"], "class_members": [{"name": "makeObject", "type": "method"}, {"name": "letters", "type": "variable"}, {"name": "numbers", "type": "variable"}, {"name": "symbols", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests that all tuples are provided to the consumer."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/ListOrderedSetTest.java", "testclass_name": "ListOrderedSetTest", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.Iterator;", "import java.util.List;", "import java.util.Set;", "import org.apache.commons.collections4.IteratorUtils;", "import org.junit.jupiter.api.Test;"], "name": "ListOrderedSetTest", "description": "Unit tests for ListOrderedSet operations including decorator, duplicates, list add indexed, list add remove, list add replacing, ordering, and retain all.", "class_members": {"variables": [{"name": "ZERO", "type": "static final Integer"}, {"name": "ONE", "type": "static final Integer"}, {"name": "TWO", "type": "static final Integer"}, {"name": "THREE", "type": "static final Integer"}], "methods": [{"name": "makeObject", "signature": "ListOrderedSet<E> makeObject()"}, {"name": "setupSet", "signature": "ListOrderedSet<E> setupSet()"}], "nested_classes": [{"name": "A", "description": "Internal class with overridden equals and hashCode methods"}, {"name": "B", "description": "Internal class with overridden equals and hashCode methods"}]}, "fixtures": [], "test_cases": [{"name": "testDecorator", "primary_tested": ["ListOrderedSet.listOrderedSet(List<E>)", "ListOrderedSet.listOrderedSet(Set<E>)", "ListOrderedSet.listOrderedSet(Set<E>, List<E>)"], "external_dependencies": {"modules": ["ListOrderedSet", "HashSet", "ArrayList", "NullPointerException"]}, "category": "unit", "description": "Tests the decorator functionality of ListOrderedSet by checking for expected exceptions when passing null parameters."}, {"name": "testDuplicates", "primary_tested": ["ListOrderedSet.listOrderedSet(List<E>)", "ListOrderedSet.size()", "ListOrderedSet.get(int)"], "associated_methods": ["IteratorUtils.toArray(Iterator<E>)"], "external_dependencies": {"modules": ["ListOrderedSet", "ArrayList", "IteratorUtils"]}, "category": "unit", "description": "Tests the handling of duplicates in ListOrderedSet and checks if the insertion order is preserved."}, {"name": "testListAddIndexed", "primary_tested": ["ListOrderedSet.add(E)", "ListOrderedSet.add(int, E)", "ListOrderedSet.addAll(int, Collection<? extends E>)", "ListOrderedSet.get(int)"], "external_dependencies": {"modules": ["ListOrderedSet", "ArrayList"]}, "category": "unit", "description": "Tests the indexed add functionality of ListOrderedSet and checks if the insertion order is preserved."}, {"name": "testListAddRemove", "primary_tested": ["ListOrderedSet.add(E)", "ListOrderedSet.remove(int)", "ListOrderedSet.indexOf(Object)", "ListOrderedSet.asList()"], "external_dependencies": {"modules": ["ListOrderedSet", "ArrayList"]}, "category": "unit", "description": "Tests the add and remove functionality of ListOrderedSet and checks if the insertion order is preserved."}, {"name": "testListAddReplacing", "primary_tested": ["ListOrderedSet.add(E)", "ListOrderedSet.decorated()", "ListOrderedSet.iterator()", "ListOrderedSet.get(int)", "ListOrderedSet.asList()"], "external_dependencies": {"modules": ["ListOrderedSet"]}, "category": "unit", "description": "Tests the add functionality of ListOrderedSet when adding objects that are equal but not the same instance."}, {"name": "testOrdering", "primary_tested": ["ListOrderedSet.iterator()", "ListOrderedSet.remove(Object)", "ListOrderedSet.add(E)", "ListOrderedSet.size()"], "external_dependencies": {"modules": ["ListOrderedSet"]}, "category": "unit", "description": "Tests the ordering and removal functionality of ListOrderedSet and checks if the insertion order is preserved."}, {"name": "testRetainAll", "primary_tested": ["ListOrderedSet.listOrderedSet(Set<E>, List<E>)", "ListOrderedSet.add(E)", "ListOrderedSet.retainAll(Collection<?>)", "ListOrderedSet.get(int)"], "external_dependencies": {"modules": ["ListOrderedSet", "ArrayList", "HashSet"]}, "category": "unit", "description": "Tests the retainAll functionality of ListOrderedSet and checks if the insertion order is preserved."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/DefaultBitMapExtractorTest.java", "testclass_name": "DefaultBitMapExtractorTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.assertArrayEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.concurrent.ThreadLocalRandom;", "import java.util.function.LongPredicate;", "import org.junit.jupiter.api.Test;"], "name": "DefaultBitMapExtractorTest", "description": "Unit tests for the DefaultBitMapExtractor class, which processes bitmaps using a LongPredicate.", "class_members": {"variables": [{"name": "values", "type": "long[]"}], "methods": [{"name": "generateLongArray", "signature": "static long[] generateLongArray(int)"}], "nested_classes": [{"name": "DefaultBitMapExtractor", "description": "Internal class implementing BitMapExtractor interface"}]}, "fixtures": [], "test_cases": [{"name": "testAsBitMapArrayLargeArray", "primary_tested": ["BitMapExtractor.asBitMapArray()"], "external_dependencies": {"modules": ["BitMapExtractor", "ThreadLocalRandom"], "class_members": [{"name": "generateLongArray", "type": "method"}]}, "category": "unit", "description": "Tests the asBitMapArray method with a large array of long values."}, {"name": "testFromBitMapArray", "primary_tested": ["BitMapExtractor.fromBitMapArray(long[])"], "external_dependencies": {"modules": ["BitMapExtractor", "BitMaps", "ThreadLocalRandom"], "class_members": [{"name": "generateLongArray", "type": "method"}]}, "category": "unit", "description": "Tests the fromBitMapArray method by generating an array of long values and comparing the result."}, {"name": "testFromIndexExtractor", "primary_tested": ["BitMapExtractor.fromIndexExtractor(IndexExtractor, int)"], "associated_methods": ["BitMaps.contains(long[], int)"], "external_dependencies": {"modules": ["BitMapExtractor", "IndexExtractor", "BitMaps", "DefaultIndexExtractorTest"], "class_members": [{"name": "generateLongArray", "type": "method"}], "project_specific_resources": ["DefaultIndexExtractorTest.generateIntArray(int, int)"]}, "category": "unit", "description": "Tests the fromIndexExtractor method by generating an array of indices and checking if the bitmaps contain these indices."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/CompositeSetTest.java", "testclass_name": "CompositeSetTest", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.List;", "import java.util.Set;", "import org.apache.commons.collections4.set.CompositeSet.SetMutator;", "import org.junit.jupiter.api.Test;"], "name": "CompositeSetTest", "description": "Unit tests for CompositeSet operations like addComposited, contains, remove, and collision resolution.", "class_members": {"variables": [], "methods": [{"name": "buildOne", "signature": "Set<E> buildOne()"}, {"name": "buildTwo", "signature": "Set<E> buildTwo()"}, {"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "getIterationBehaviour", "signature": "int getIterationBehaviour()"}, {"name": "makeObject", "signature": "CompositeSet<E> makeObject()"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testAddComposited", "primary_tested": ["CompositeSet.addComposited(Set<E>,Set<E>)"], "associated_methods": ["CompositeSet.addComposited(Set<E>)", "CompositeSet.addComposited(Set<E>[])", "CompositeSet.addComposited(Set<E>,Set<E>,Set<E>)"], "external_dependencies": {"modules": ["CompositeSet", "HashSet"], "class_members": [{"name": "buildOne", "type": "method"}, {"name": "buildTwo", "type": "method"}]}, "category": "unit", "description": "Tests the addComposited functionality of the CompositeSet."}, {"name": "testAddCompositedCollision", "primary_tested": ["CompositeSet.addComposited(Set<E>,Set<E>)"], "associated_methods": ["CompositeSet.addComposited(Set<E>,Set<E>,Set<E>)"], "external_dependencies": {"modules": ["CompositeSet", "HashSet"], "class_members": [{"name": "buildOne", "type": "method"}, {"name": "buildTwo", "type": "method"}]}, "category": "unit", "description": "Tests the collision handling in addComposited functionality of the CompositeSet."}, {"name": "testContains", "primary_tested": ["CompositeSet.contains(Object)"], "external_dependencies": {"modules": ["CompositeSet"], "class_members": [{"name": "buildOne", "type": "method"}, {"name": "buildTwo", "type": "method"}]}, "category": "unit", "description": "Tests the contains functionality of the CompositeSet."}, {"name": "testContainsAll", "primary_tested": ["CompositeSet.containsAll(Collection<?>)", "CompositeSet.containsAll(Collection<?>)"], "external_dependencies": {"modules": ["CompositeSet"], "class_members": [{"name": "buildOne", "type": "method"}, {"name": "buildTwo", "type": "method"}]}, "category": "unit", "description": "Tests the containsAll functionality of the CompositeSet."}, {"name": "testFailedCollisionResolution", "primary_tested": ["CompositeSet.addComposited(Set<E>)"], "external_dependencies": {"modules": ["CompositeSet", "HashSet"], "class_members": [{"name": "buildOne", "type": "method"}, {"name": "buildTwo", "type": "method"}]}, "category": "unit", "description": "Tests the collision resolution failure in CompositeSet."}, {"name": "testRemoveAll", "primary_tested": ["CompositeSet.removeAll(Collection<?>)"], "external_dependencies": {"modules": ["CompositeSet"], "class_members": [{"name": "buildOne", "type": "method"}, {"name": "buildTwo", "type": "method"}]}, "category": "unit", "description": "Tests the removeAll functionality of the CompositeSet."}, {"name": "testRemoveComposited", "primary_tested": ["CompositeSet.remove(Object)"], "external_dependencies": {"modules": ["CompositeSet", "HashSet"], "class_members": [{"name": "buildOne", "type": "method"}, {"name": "buildTwo", "type": "method"}]}, "category": "unit", "description": "Tests the remove functionality of the CompositeSet."}, {"name": "testRemoveUnderlying", "primary_tested": ["CompositeSet.contains(Object)"], "external_dependencies": {"modules": ["CompositeSet", "HashSet"], "class_members": [{"name": "buildOne", "type": "method"}, {"name": "buildTwo", "type": "method"}]}, "category": "unit", "description": "Tests the removal of elements from underlying sets in CompositeSet."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/BitMapExtractorFromLongArrayTest.java", "testclass_name": "BitMapExtractorFromLongArrayTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import java.util.ArrayList;", "import java.util.List;", "import org.junit.jupiter.api.Test;"], "name": "BitMapExtractorFromLongArrayTest", "description": "Tests for BitMapExtractorFromLongArray functionality.", "class_members": {"methods": [{"name": "createEmptyExtractor", "signature": "BitMapExtractor createEmptyExtractor()"}, {"name": "createExtractor", "signature": "BitMapExtractor createExtractor()"}, {"name": "emptyIsZeroLength", "signature": "boolean emptyIsZeroLength()"}]}, "test_cases": [{"name": "constructorTest", "primary_tested": ["BitMapExtractor.processBitMaps(Consumer)"], "associated_methods": ["BitMapExtractor.createExtractor()"], "external_dependencies": {"modules": ["BitMapExtractor", "List", "ArrayList", "Long"], "class_members": [{"name": "createExtractor", "type": "method"}]}, "category": "unit", "description": "Tests the constructor and processBitMaps method of BitMapExtractor."}, {"name": "testFromIndexExtractor", "primary_tested": ["BitMapExtractor.fromIndexExtractor(IndexExtractor,int)", "BitMapExtractor.processBitMaps(Consumer)"], "associated_methods": ["BitMapExtractor.fromIndexExtractor(IndexExtractor,int)"], "external_dependencies": {"modules": ["BitMapExtractor", "IndexExtractor", "List", "ArrayList", "Long"]}, "category": "unit", "description": "Tests the fromIndexExtractor and processBitMaps methods of BitMapExtractor."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java", "testclass_name": "FluentIterableTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertArrayEquals;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.Collections;", "import java.util.Enumeration;", "import java.util.Iterator;", "import java.util.LinkedList;", "import java.util.List;", "import java.util.concurrent.atomic.AtomicInteger;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/GrowthListTest.java", "testclass_name": "GrowthListTest", "dependencies": ["package org.apache.commons.collections4.list;", "import static org.hamcrest.MatcherAssert.assertThat;", "import static org.hamcrest.core.Is.is;", "import static org.hamcrest.core.IsEqual.equalTo;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.List;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.api.function.Executable;"], "name": "GrowthListTest", "description": "Unit tests for the GrowthList class, focusing on its growth and modification functionalities.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testGrowthAdd", "primary_tested": ["GrowthList.add(int,Integer)"], "external_dependencies": {"modules": ["GrowthList", "Integer"], "class_members": []}, "category": "unit", "description": "Tests the addition of an element at a specific index, causing the list to grow."}, {"name": "testGrowthAddAll", "primary_tested": ["GrowthList.addAll(int,Collection)"], "external_dependencies": {"modules": ["GrowthList", "Integer", "Collection", "ArrayList"], "class_members": []}, "category": "unit", "description": "Tests the addition of a collection of elements at a specific index, causing the list to grow."}, {"name": "testGrowthList", "primary_tested": ["GrowthList.add(int,Integer)"], "external_dependencies": {"modules": ["GrowthList", "Integer"], "class_members": []}, "category": "unit", "description": "Tests the growth of the list by adding elements at increasing indices."}, {"name": "testGrowthSet1", "primary_tested": ["GrowthList.set(int,Integer)"], "external_dependencies": {"modules": ["GrowthList", "Integer"], "class_members": []}, "category": "unit", "description": "Tests setting an element at a specific index, causing the list to grow if necessary."}, {"name": "testGrowthSet2", "primary_tested": ["GrowthList.set(int,Integer)"], "external_dependencies": {"modules": ["GrowthList", "Integer"], "class_members": []}, "category": "unit", "description": "Tests setting an element at the first index, causing the list to grow if necessary."}, {"name": "testListAddByIndexBoundsChecking", "primary_tested": ["List.add(int,E)"], "external_dependencies": {"modules": ["List", "Executable", "IndexOutOfBoundsException"], "class_members": []}, "category": "unit", "description": "Tests the bounds checking for adding an element at an invalid index."}, {"name": "testListAddByIndexBoundsChecking2", "primary_tested": ["List.add(int,E)"], "external_dependencies": {"modules": ["List", "IndexOutOfBoundsException"], "class_members": []}, "category": "unit", "description": "Tests the bounds checking for adding an element at an invalid index in a full collection."}, {"name": "testListSetByIndexBoundsChecking", "primary_tested": ["List.set(int,E)"], "external_dependencies": {"modules": ["List", "IndexOutOfBoundsException"], "class_members": []}, "category": "unit", "description": "Tests the bounds checking for setting an element at an invalid index."}, {"name": "testListSetByIndexBoundsChecking2", "primary_tested": ["List.set(int,E)"], "external_dependencies": {"modules": ["List", "IndexOutOfBoundsException"], "class_members": []}, "category": "unit", "description": "Tests the bounds checking for setting an element at an invalid index in a full collection."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/CollatingIteratorTest.java", "testclass_name": "CollatingIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Comparator;", "import java.util.List;", "import org.apache.commons.collections4.comparators.ComparableComparator;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CollatingIteratorTest", "description": "Unit tests for the CollatingIterator class, which merges multiple sorted inputs into a single sorted output.", "class_members": {"variables": [{"name": "comparator", "type": "Comparator<Integer>"}, {"name": "evens", "type": "ArrayList<Integer>"}, {"name": "odds", "type": "ArrayList<Integer>"}, {"name": "fib", "type": "ArrayList<Integer>"}], "methods": [{"name": "makeEmptyIterator", "signature": "CollatingIterator<Integer> makeEmptyIterator()"}, {"name": "makeObject", "signature": "CollatingIterator<Integer> makeObject()"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetSetComparator", "primary_tested": ["CollatingIterator.getComparator()", "CollatingIterator.setComparator(Comparator)"], "external_dependencies": {"modules": ["CollatingIterator", "Comparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the getter and setter methods for the comparator in CollatingIterator."}, {"name": "testIterateEven", "primary_tested": ["CollatingIterator.hasNext()", "CollatingIterator.next()", "CollatingIterator.getIteratorIndex()"], "external_dependencies": {"modules": ["CollatingIterator", "ArrayList"], "class_members": [{"name": "comparator", "type": "variable"}, {"name": "evens", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests iterating through even numbers using CollatingIterator."}, {"name": "testIterateEvenEven", "primary_tested": ["CollatingIterator.hasNext()", "CollatingIterator.next()", "CollatingIterator.getIteratorIndex()"], "external_dependencies": {"modules": ["CollatingIterator", "ArrayList"], "class_members": [{"name": "comparator", "type": "variable"}, {"name": "evens", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests iterating through even numbers twice using CollatingIterator."}, {"name": "testIterateEvenOdd", "primary_tested": ["CollatingIterator.hasNext()", "CollatingIterator.next()", "CollatingIterator.getIteratorIndex()"], "external_dependencies": {"modules": ["CollatingIterator", "ArrayList"], "class_members": [{"name": "comparator", "type": "variable"}, {"name": "evens", "type": "variable"}, {"name": "odds", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests iterating through even and odd numbers using CollatingIterator."}, {"name": "testIterateFibEvenOdd", "primary_tested": ["CollatingIterator.hasNext()", "CollatingIterator.next()", "CollatingIterator.getIteratorIndex()"], "external_dependencies": {"modules": ["CollatingIterator", "ArrayList"], "class_members": [{"name": "comparator", "type": "variable"}, {"name": "fib", "type": "variable"}, {"name": "evens", "type": "variable"}, {"name": "odds", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests iterating through Fibonacci, even, and odd numbers using CollatingIterator."}, {"name": "testIterateOddEven", "primary_tested": ["CollatingIterator.hasNext()", "CollatingIterator.next()", "CollatingIterator.getIteratorIndex()"], "external_dependencies": {"modules": ["CollatingIterator", "ArrayList"], "class_members": [{"name": "comparator", "type": "variable"}, {"name": "odds", "type": "variable"}, {"name": "evens", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests iterating through odd and even numbers using CollatingIterator."}, {"name": "testNullComparator", "primary_tested": ["CollatingIterator.next()"], "external_dependencies": {"modules": ["CollatingIterator", "ArrayList", "ComparableComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of CollatingIterator when a null comparator is used."}, {"name": "testRemoveFromDouble", "primary_tested": ["CollatingIterator.hasNext()", "CollatingIterator.next()", "CollatingIterator.remove()"], "external_dependencies": {"modules": ["CollatingIterator", "ArrayList"], "class_members": [{"name": "comparator", "type": "variable"}, {"name": "evens", "type": "variable"}, {"name": "odds", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests removing elements from a CollatingIterator that iterates over both evens and odds."}, {"name": "testRemoveFromSingle", "primary_tested": ["CollatingIterator.hasNext()", "CollatingIterator.next()", "CollatingIterator.remove()"], "external_dependencies": {"modules": ["CollatingIterator", "ArrayList"], "class_members": [{"name": "comparator", "type": "variable"}, {"name": "evens", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests removing elements from a CollatingIterator that iterates over evens."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/BitMapsTest.java", "testclass_name": "BitMapsTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.junit.jupiter.api.Test;"], "name": "BitMapsTest", "description": "Unit tests for the BitMaps class, focusing on various bit manipulation methods.", "class_members": {"methods": [{"name": "assertMod", "signature": "void assertMod(long, int)"}]}, "fixtures": [], "test_cases": [{"name": "testContains", "primary_tested": ["BitMaps.contains(long[],int)"], "associated_methods": ["BitMaps.set(long[],int)"], "external_dependencies": {"modules": ["BitMaps"]}, "category": "unit", "description": "Tests the contains method of BitMaps, ensuring it correctly identifies set bits and handles boundary conditions."}, {"name": "testGetLongBit", "primary_tested": ["BitMaps.getLongBit(int)"], "external_dependencies": {"modules": ["BitMaps"]}, "category": "unit", "description": "Tests the getLongBit method of BitMaps, ensuring it correctly returns the bit value for given indices."}, {"name": "testGetLongIndex", "primary_tested": ["BitMaps.getLongIndex(int)"], "external_dependencies": {"modules": ["BitMaps"]}, "category": "unit", "description": "Tests the getLongIndex method of BitMaps, ensuring it correctly returns the long index for given bit indices."}, {"name": "testMod", "primary_tested": ["BitMaps.mod(long,int)"], "associated_methods": ["BitMaps.assertMod(long,int)"], "external_dependencies": {"modules": ["BitMaps"], "class_members": [{"name": "assertMod", "type": "method"}]}, "category": "unit", "description": "Tests the mod method of BitMaps, ensuring it functions as an unsigned modulus."}, {"name": "testModEdgeCases", "primary_tested": ["BitMaps.mod(long,int)"], "external_dependencies": {"modules": ["BitMaps"]}, "category": "unit", "description": "Tests edge cases for the mod method of BitMaps, including division by zero and negative divisors."}, {"name": "testNumberOfBitMaps", "primary_tested": ["BitMaps.numberOfBitMaps(int)"], "external_dependencies": {"modules": ["BitMaps"]}, "category": "unit", "description": "Tests the numberOfBitMaps method of BitMaps, ensuring it correctly calculates the number of long arrays needed for a given number of bits."}, {"name": "testSet", "primary_tested": ["BitMaps.set(long[],int)"], "associated_methods": ["BitMaps.contains(long[],int)"], "external_dependencies": {"modules": ["BitMaps"]}, "category": "unit", "description": "Tests the set method of BitMaps, ensuring it correctly sets bits and verifies their state."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/keyvalue/TiedMapEntryTest.java", "testclass_name": "TiedMapEntryTest", "dependencies": ["package org.apache.commons.collections4.keyvalue;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.Test;"], "name": "TiedMapEntryTest", "description": "Tests for the TiedMapEntry class, focusing on the setValue method.", "class_members": {"methods": [{"name": "makeMapEntry", "signature": "Map.Entry<K, V> makeMapEntry(K key, V value)"}]}, "fixtures": [], "test_cases": [{"name": "testConstructors", "primary_tested": [], "external_dependencies": {"modules": []}, "category": "unit", "fixtures_used": [], "description": "Tests the constructors."}, {"name": "testSetValue", "primary_tested": ["TiedMapEntry.setValue(V)"], "associated_methods": ["TiedMapEntry.getKey()", "TiedMapEntry.getValue()"], "external_dependencies": {"modules": ["HashMap", "Map", "TiedMapEntry"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the setValue method of TiedMapEntry, ensuring it correctly updates the value in the underlying map and returns the old value."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/TreeListTest.java", "testclass_name": "TreeListTest", "dependencies": ["package org.apache.commons.collections4.list;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import java.util.ArrayList;", "import java.util.List;", "import java.util.ListIterator;", "import org.junit.jupiter.api.Test;"], "name": "TreeListTest", "description": "Unit tests for TreeList operations including add, remove, indexOf, and iteration order.", "class_members": {"variables": [], "methods": [{"name": "benchmark", "signature": "void benchmark(List<? super Integer>)"}, {"name": "makeObject", "signature": "TreeList<E> makeObject()"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testAddMultiple", "primary_tested": ["TreeList.add(E)", "TreeList.get(int)"], "external_dependencies": {"modules": ["TreeList"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "description": "Tests the addition of multiple elements to a TreeList and verifies their positions."}, {"name": "testBug35258", "primary_tested": ["TreeList.remove(Object)", "TreeList.listIterator()"], "associated_methods": ["TreeList.listIterator().next()", "TreeList.listIterator().previous()"], "external_dependencies": {"modules": ["TreeList", "ListIterator"]}, "category": "unit", "description": "Tests the removal of an element from a TreeList and verifies the consistency of the ListIterator."}, {"name": "testBugCollections447", "primary_tested": ["TreeList.listIterator()", "TreeList.remove(Object)"], "associated_methods": ["TreeList.listIterator().next()", "TreeList.listIterator().previous()"], "external_dependencies": {"modules": ["TreeList", "ListIterator"]}, "category": "unit", "description": "Tests the removal of an element from a TreeList and verifies the behavior of the ListIterator after removal."}, {"name": "testIndexOf", "primary_tested": ["TreeList.indexOf(Object)", "TreeList.set(int,E)"], "external_dependencies": {"modules": ["TreeList"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "description": "Tests the indexOf method and the setting of elements in a TreeList."}, {"name": "testInsertBefore", "primary_tested": ["TreeList.add(int,E)", "TreeList.get(int)"], "external_dependencies": {"modules": ["TreeList"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "description": "Tests the insertion of an element at a specific index in a TreeList."}, {"name": "testIterationOrder", "primary_tested": ["TreeList.listIterator()", "TreeList.listIterator().next()", "TreeList.listIterator().previous()"], "external_dependencies": {"modules": ["TreeList", "ListIterator", "ArrayList"]}, "category": "unit", "description": "Tests the iteration order of elements in a TreeList initialized with another collection."}, {"name": "testIterationOrderAfterAddAll", "primary_tested": ["TreeList.addAll(Collection)", "TreeList.listIterator()", "TreeList.listIterator().next()", "TreeList.listIterator().previous()"], "external_dependencies": {"modules": ["TreeList", "ListIterator", "ArrayList"]}, "category": "unit", "description": "Tests the iteration order of elements in a TreeList after calling addAll."}, {"name": "testRemove", "primary_tested": ["TreeList.remove(int)", "TreeList.get(int)"], "external_dependencies": {"modules": ["TreeList"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "description": "Tests the removal of elements from a TreeList and verifies the remaining elements' positions."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java", "testclass_name": "PredicateUtilsTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.apache.commons.collections4.functors.NullPredicate.nullPredicate;", "import static org.apache.commons.collections4.functors.TruePredicate.truePredicate;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.Collections;", "import java.util.HashMap;", "import java.util.List;", "import java.util.Map;", "import org.apache.commons.collections4.functors.AbstractPredicateTest;", "import org.apache.commons.collections4.functors.AllPredicate;", "import org.apache.commons.collections4.functors.EqualPredicate;", "import org.apache.commons.collections4.functors.ExceptionPredicate;", "import org.apache.commons.collections4.functors.FalsePredicate;", "import org.apache.commons.collections4.functors.NotNullPredicate;", "import org.apache.commons.collections4.functors.NullPredicate;", "import org.apache.commons.collections4.functors.TruePredicate;", "import org.junit.jupiter.api.Test;"]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/CountingPredicateTest.java", "testclass_name": "CountingPredicateTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.List;", "import java.util.function.BiPredicate;", "import org.apache.commons.lang3.tuple.Pair;", "import org.junit.jupiter.api.Test;"], "name": "CountingPredicateTest", "description": "Tests for the CountingPredicate class, focusing on different scenarios where the predicate array is longer, shorter, or the same length as the other array.", "class_members": {"variables": [{"name": "ary", "type": "Integer[]"}], "methods": [{"name": "makeFunc", "signature": "BiPredicate<Integer, Integer> makeFunc(BiPredicate<Integer, Integer> inner, List<Pair<Integer, Integer>> result)"}]}, "fixtures": [], "test_cases": [{"name": "testPredicateLonger", "primary_tested": ["CountingPredicate.test(Integer)", "CountingPredicate.processRemaining()"], "associated_methods": [], "external_dependencies": {"modules": ["CountingPredicate", "Pair", "ArrayList", "List"], "class_members": [{"name": "ary", "type": "variable"}, {"name": "makeFunc", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the scenario where the predicate array is longer than the other array, ensuring that all values result in a true statement and verifying the behavior of processRemaining()."}, {"name": "testPredicateSameLength", "primary_tested": ["CountingPredicate.test(Integer)", "CountingPredicate.processRemaining()"], "associated_methods": [], "external_dependencies": {"modules": ["CountingPredicate", "Pair", "ArrayList", "List"], "class_members": [{"name": "ary", "type": "variable"}, {"name": "makeFunc", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the scenario where the predicate array is the same length as the other array, ensuring that all values result in a true statement and verifying the behavior of processRemaining()."}, {"name": "testPredicateShorter", "primary_tested": ["CountingPredicate.test(Integer)", "CountingPredicate.processRemaining()"], "associated_methods": [], "external_dependencies": {"modules": ["CountingPredicate", "Pair", "ArrayList", "List"], "class_members": [{"name": "ary", "type": "variable"}, {"name": "makeFunc", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the scenario where the predicate array is shorter than the other array, ensuring that all values result in a true statement and verifying the behavior of processRemaining()."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java", "testclass_name": "IterableUtilsTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.apache.commons.collections4.functors.EqualPredicate.equalPredicate;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertArrayEquals;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.fail;", "import java.util.ArrayDeque;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.Collections;", "import java.util.Deque;", "import java.util.HashSet;", "import java.util.LinkedHashSet;", "import java.util.LinkedList;", "import java.util.List;", "import java.util.Set;", "import org.apache.commons.collections4.bag.HashBag;", "import org.apache.commons.lang3.StringUtils;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"]}, {"file_path": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java", "testclass_name": "IteratorUtilsTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.apache.commons.collections4.functors.EqualPredicate.equalPredicate;", "import static org.apache.commons.collections4.functors.TruePredicate.INSTANCE;", "import static org.easymock.EasyMock.createMock;", "import static org.easymock.EasyMock.expect;", "import static org.easymock.EasyMock.replay;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.Collections;", "import java.util.Comparator;", "import java.util.Dictionary;", "import java.util.Enumeration;", "import java.util.HashMap;", "import java.util.Iterator;", "import java.util.LinkedHashSet;", "import java.util.List;", "import java.util.ListIterator;", "import java.util.Map;", "import java.util.NoSuchElementException;", "import java.util.Set;", "import java.util.Vector;", "import org.apache.commons.collections4.iterators.ArrayIterator;", "import org.apache.commons.collections4.iterators.EmptyIterator;", "import org.apache.commons.collections4.iterators.EmptyListIterator;", "import org.apache.commons.collections4.iterators.EmptyMapIterator;", "import org.apache.commons.collections4.iterators.EmptyOrderedIterator;", "import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;", "import org.apache.commons.collections4.iterators.EnumerationIterator;", "import org.apache.commons.collections4.iterators.NodeListIterator;", "import org.apache.commons.collections4.iterators.ObjectArrayIterator;", "import org.apache.commons.collections4.iterators.ZippingIterator;", "import org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import org.w3c.dom.Node;", "import org.w3c.dom.NodeList;"]}, {"file_path": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java", "testclass_name": "MapUtilsTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertInstanceOf;", "import static org.junit.jupiter.api.Assertions.assertNotSame;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.fail;", "import java.io.ByteArrayOutputStream;", "import java.io.PrintStream;", "import java.text.DecimalFormat;", "import java.text.NumberFormat;", "import java.util.AbstractMap;", "import java.util.ArrayList;", "import java.util.HashMap;", "import java.util.HashSet;", "import java.util.List;", "import java.util.ListResourceBundle;", "import java.util.Map;", "import java.util.Properties;", "import java.util.ResourceBundle;", "import java.util.Set;", "import java.util.SortedMap;", "import java.util.TreeMap;", "import org.apache.commons.collections4.collection.TransformedCollectionTest;", "import org.apache.commons.collections4.keyvalue.DefaultKeyValue;", "import org.apache.commons.collections4.keyvalue.DefaultMapEntry;", "import org.apache.commons.collections4.map.HashedMap;", "import org.apache.commons.collections4.map.LazyMap;", "import org.apache.commons.collections4.map.MultiValueMap;", "import org.apache.commons.collections4.map.PredicatedMap;", "import org.apache.commons.lang3.StringUtils;", "import org.junit.jupiter.api.Test;"]}, {"file_path": "src/test/java/org/apache/commons/collections4/keyvalue/DefaultMapEntryTest.java", "testclass_name": "DefaultMapEntryTest", "dependencies": ["package org.apache.commons.collections4.keyvalue;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import java.util.Map;", "import org.apache.commons.collections4.KeyValue;", "import org.junit.jupiter.api.Test;"], "name": "DefaultMapEntryTest", "description": "Tests for the DefaultMapEntry class, focusing on constructors and self-reference handling.", "class_members": {"methods": [{"name": "makeMapEntry", "signature": "Map.Entry<K, V> makeMapEntry()"}, {"name": "makeMapEntry", "signature": "Map.Entry<K, V> makeMapEntry(K key, V value)"}]}, "test_cases": [{"name": "testConstructors", "primary_tested": ["DefaultMapEntry.<init>(K,V)", "DefaultKeyValue.<init>(K,V)", "DefaultMapEntry.<init>(Map.Entry<K,V>)"], "associated_methods": ["DefaultMapEntry.getKey()", "DefaultMapEntry.getValue()", "DefaultKeyValue.getKey()", "DefaultKeyValue.getValue()", "DefaultMapEntry.setValue(V)"], "external_dependencies": {"modules": ["DefaultMapEntry", "DefaultKeyValue", "Map.Entry", "KeyValue"]}, "category": "unit", "description": "Tests the constructors of DefaultMapEntry and DefaultKeyValue, ensuring correct key and value assignment and independence of objects."}, {"name": "testSelfReferenceHandling", "primary_tested": ["DefaultMapEntry.setValue(V)"], "associated_methods": ["DefaultMapEntry.getValue()"], "external_dependencies": {"modules": ["DefaultMapEntry", "Map.Entry"], "class_members": [{"name": "makeMapEntry", "type": "method"}]}, "category": "unit", "description": "Tests the handling of self-reference in DefaultMapEntry, ensuring the entry can reference itself as its value."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "testclass_name": "CollectionUtilsTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.apache.commons.collections4.functors.EqualPredicate.equalPredicate;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertArrayEquals;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertInstanceOf;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.Collections;", "import java.util.Comparator;", "import java.util.Enumeration;", "import java.util.HashMap;", "import java.util.HashSet;", "import java.util.Hashtable;", "import java.util.Iterator;", "import java.util.LinkedHashMap;", "import java.util.LinkedList;", "import java.util.List;", "import java.util.Map;", "import java.util.Objects;", "import java.util.Queue;", "import java.util.Set;", "import java.util.SortedMap;", "import java.util.TreeMap;", "import java.util.Vector;", "import org.apache.commons.collections4.bag.HashBag;", "import org.apache.commons.collections4.collection.PredicatedCollection;", "import org.apache.commons.collections4.collection.SynchronizedCollection;", "import org.apache.commons.collections4.collection.TransformedCollection;", "import org.apache.commons.collections4.collection.UnmodifiableCollection;", "import org.apache.commons.collections4.functors.DefaultEquator;", "import org.apache.commons.collections4.queue.CircularFifoQueue;", "import org.apache.commons.lang3.ArrayUtils;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/LazyListTest.java", "testclass_name": "LazyListTest", "dependencies": ["package org.apache.commons.collections4.list;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.time.LocalDateTime;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.List;", "import org.apache.commons.collections4.AbstractObjectTest;", "import org.apache.commons.collections4.Factory;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.Test;"], "name": "LazyListTest", "description": "Unit tests for the LazyList class, focusing on its behavior with Factory and Transformer.", "class_members": {"variables": [], "methods": [{"name": "testSubList", "signature": "void testSubList(List<LocalDateTime>)"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testCreateNullGapsWithFactory", "primary_tested": ["LazyList.get(int)"], "associated_methods": ["LazyList.isEmpty()", "LazyList.get(int)"], "external_dependencies": {"modules": ["LocalDateTime", "LazyList", "ArrayList"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the creation of null gaps in LazyList using a Factory."}, {"name": "testCreateNullGapsWithTransformer", "primary_tested": ["LazyList.get(int)"], "associated_methods": ["LazyList.isEmpty()", "LazyList.get(int)"], "external_dependencies": {"modules": ["LocalDateTime", "LazyList", "ArrayList", "Arrays"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the creation of null gaps in LazyList using a Transformer."}, {"name": "testElementCreationWithFactory", "primary_tested": ["LazyList.get(int)"], "associated_methods": ["LazyList.isEmpty()", "LazyList.get(int)"], "external_dependencies": {"modules": ["LocalDateTime", "LazyList", "ArrayList"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the creation of elements in LazyList using a Factory."}, {"name": "testElementCreationWithTransformer", "primary_tested": ["LazyList.get(int)"], "associated_methods": ["LazyList.isEmpty()", "LazyList.get(int)"], "external_dependencies": {"modules": ["LocalDateTime", "LazyList", "ArrayList"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the creation of elements in LazyList using a Transformer."}, {"name": "testGetWithNull", "primary_tested": ["LazyList.get(int)"], "associated_methods": ["LazyList.isEmpty()", "LazyList.get(int)", "LazyList.remove(int)", "LazyList.add(int,LocalDateTime)"], "external_dependencies": {"modules": ["LocalDateTime", "LazyList", "ArrayList", "Arrays"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of LazyList when getting an element that was set to null."}, {"name": "testSubListWitheFactory", "primary_tested": ["LazyList.get(int)"], "associated_methods": ["LazyList.isEmpty()", "LazyList.get(int)", "LazyList.subList(int,int)"], "external_dependencies": {"modules": ["LocalDateTime", "LazyList", "ArrayList"], "class_members": [{"name": "testSubList", "type": "method"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the subList functionality of LazyList using a Factory."}, {"name": "testSubListWithTransformer", "primary_tested": ["LazyList.get(int)"], "associated_methods": ["LazyList.isEmpty()", "LazyList.get(int)", "LazyList.subList(int,int)"], "external_dependencies": {"modules": ["LocalDateTime", "LazyList", "ArrayList", "Arrays"], "class_members": [{"name": "testSubList", "type": "method"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the subList functionality of LazyList using a Transformer."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/ObjectGraphIteratorTest.java", "testclass_name": "ObjectGraphIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.apache.commons.collections4.IteratorUtils;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ObjectGraphIteratorTest", "description": "Unit tests for the ObjectGraphIterator class, which is used to iterate over a graph of objects.", "class_members": {"variables": [{"name": "testArray", "type": "String[]"}, {"name": "list1", "type": "List<String>"}, {"name": "list2", "type": "List<String>"}, {"name": "list3", "type": "List<String>"}, {"name": "iteratorList", "type": "List<Iterator<String>>"}], "methods": [{"name": "makeEmptyIterator", "signature": "ObjectGraphIterator<Object> makeEmptyIterator()"}, {"name": "makeObject", "signature": "ObjectGraphIterator<Object> makeObject()"}], "nested_classes": [{"name": "Branch", "description": "Internal class representing a branch in a tree structure."}, {"name": "Forest", "description": "Internal class representing a forest containing multiple trees."}, {"name": "Leaf", "description": "Internal class representing a leaf in a tree structure."}, {"name": "LeafFinder", "description": "Internal class implementing Transformer to find leaves in a forest."}, {"name": "Tree", "description": "Internal class representing a tree containing multiple branches."}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testIteration_IteratorOfIterators", "primary_tested": ["ObjectGraphIterator.hasNext()", "ObjectGraphIterator.next()"], "external_dependencies": {"modules": ["ObjectGraphIterator", "IteratorUtils"], "class_members": [{"name": "list1", "type": "variable"}, {"name": "list2", "type": "variable"}, {"name": "list3", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the iteration over a list of iterators using ObjectGraphIterator."}, {"name": "testIteration_IteratorOfIteratorsWithEmptyIterators", "primary_tested": ["ObjectGraphIterator.hasNext()", "ObjectGraphIterator.next()"], "external_dependencies": {"modules": ["ObjectGraphIterator", "IteratorUtils"], "class_members": [{"name": "list1", "type": "variable"}, {"name": "list2", "type": "variable"}, {"name": "list3", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the iteration over a list of iterators, including empty iterators, using ObjectGraphIterator."}, {"name": "testIteration_RootNoTransformer", "primary_tested": ["ObjectGraphIterator.hasNext()", "ObjectGraphIterator.next()"], "external_dependencies": {"modules": ["ObjectGraphIterator"], "class_members": [{"name": "Forest", "type": "nested_class"}]}, "category": "unit", "description": "Tests the iteration over a root object without a transformer using ObjectGraphIterator."}, {"name": "testIteration_RootNull", "primary_tested": ["ObjectGraphIterator.hasNext()", "ObjectGraphIterator.next()"], "external_dependencies": {"modules": ["ObjectGraphIterator"]}, "category": "unit", "description": "Tests the iteration over a null root object using ObjectGraphIterator."}, {"name": "testIteration_Transformed1", "primary_tested": ["ObjectGraphIterator.hasNext()", "ObjectGraphIterator.next()"], "external_dependencies": {"modules": ["ObjectGraphIterator", "LeafFinder"], "class_members": [{"name": "Forest", "type": "nested_class"}, {"name": "Leaf", "type": "nested_class"}]}, "category": "unit", "description": "Tests the iteration over a transformed forest object using ObjectGraphIterator."}, {"name": "testIteration_Transformed2", "primary_tested": ["ObjectGraphIterator.hasNext()", "ObjectGraphIterator.next()"], "external_dependencies": {"modules": ["ObjectGraphIterator", "LeafFinder"], "class_members": [{"name": "Forest", "type": "nested_class"}, {"name": "Tree", "type": "nested_class"}, {"name": "Branch", "type": "nested_class"}, {"name": "Leaf", "type": "nested_class"}]}, "category": "unit", "description": "Tests the iteration over a transformed forest object with multiple trees and branches using ObjectGraphIterator."}, {"name": "testIteration_Transformed3", "primary_tested": ["ObjectGraphIterator.hasNext()", "ObjectGraphIterator.next()"], "external_dependencies": {"modules": ["ObjectGraphIterator", "LeafFinder"], "class_members": [{"name": "Forest", "type": "nested_class"}, {"name": "Tree", "type": "nested_class"}, {"name": "Branch", "type": "nested_class"}, {"name": "Leaf", "type": "nested_class"}]}, "category": "unit", "description": "Tests the iteration over a transformed forest object with multiple trees and branches using ObjectGraphIterator."}, {"name": "testIteratorConstructor_null_next", "primary_tested": ["ObjectGraphIterator.next()"], "external_dependencies": {"modules": ["ObjectGraphIterator"]}, "category": "unit", "description": "Tests the behavior of ObjectGraphIterator when constructed with a null iterator and calling next()."}, {"name": "testIteratorConstructor_null_remove", "primary_tested": ["ObjectGraphIterator.remove()"], "external_dependencies": {"modules": ["ObjectGraphIterator"]}, "category": "unit", "description": "Tests the behavior of ObjectGraphIterator when constructed with a null iterator and calling remove()."}, {"name": "testIteratorConstructor_null1", "primary_tested": ["ObjectGraphIterator.hasNext()", "ObjectGraphIterator.next()", "ObjectGraphIterator.remove()"], "external_dependencies": {"modules": ["ObjectGraphIterator"]}, "category": "unit", "description": "Tests the behavior of ObjectGraphIterator when constructed with a null iterator."}, {"name": "testIteratorConstructorIteration_Empty", "primary_tested": ["ObjectGraphIterator.hasNext()", "ObjectGraphIterator.next()", "ObjectGraphIterator.remove()"], "external_dependencies": {"modules": ["ObjectGraphIterator"]}, "category": "unit", "description": "Tests the iteration over an empty list of iterators using ObjectGraphIterator."}, {"name": "testIteratorConstructorIteration_Simple", "primary_tested": ["ObjectGraphIterator.hasNext()", "ObjectGraphIterator.next()"], "external_dependencies": {"modules": ["ObjectGraphIterator"], "class_members": [{"name": "list1", "type": "variable"}, {"name": "list2", "type": "variable"}, {"name": "list3", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the iteration over a simple list of iterators using ObjectGraphIterator."}, {"name": "testIteratorConstructorIteration_SimpleNoHasNext", "primary_tested": ["ObjectGraphIterator.next()"], "external_dependencies": {"modules": ["ObjectGraphIterator"], "class_members": [{"name": "list1", "type": "variable"}, {"name": "list2", "type": "variable"}, {"name": "list3", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the iteration over a simple list of iterators without using hasNext() using ObjectGraphIterator."}, {"name": "testIteratorConstructorIteration_WithEmptyIterators", "primary_tested": ["ObjectGraphIterator.hasNext()", "ObjectGraphIterator.next()"], "external_dependencies": {"modules": ["ObjectGraphIterator", "IteratorUtils"], "class_members": [{"name": "list1", "type": "variable"}, {"name": "list2", "type": "variable"}, {"name": "list3", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the iteration over a list of iterators, including empty iterators, using ObjectGraphIterator."}, {"name": "testIteratorConstructorRemove", "primary_tested": ["ObjectGraphIterator.next()", "ObjectGraphIterator.remove()"], "external_dependencies": {"modules": ["ObjectGraphIterator"], "class_members": [{"name": "list1", "type": "variable"}, {"name": "list2", "type": "variable"}, {"name": "list3", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the remove operation during iteration over a list of iterators using ObjectGraphIterator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/multiset/PredicatedMultiSetTest.java", "testclass_name": "PredicatedMultiSetTest", "dependencies": ["package org.apache.commons.collections4.multiset;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Set;", "import org.apache.commons.collections4.MultiSet;", "import org.apache.commons.collections4.Predicate;", "import org.apache.commons.collections4.functors.TruePredicate;", "import org.junit.jupiter.api.Test;"], "name": "PredicatedMultiSetTest", "description": "Tests for the PredicatedMultiSet class, focusing on predicate validation and element management.", "class_members": {"variables": [{"name": "truePredicate", "type": "Predicate<T>"}], "methods": [{"name": "decorateMultiSet", "signature": "protected MultiSet<T> decorateMultiSet(HashMultiSet<T> multiset, Predicate<T> predicate)"}, {"name": "makeTestMultiSet", "signature": "protected MultiSet<T> makeTestMultiSet()"}, {"name": "stringPredicate", "signature": "protected Predicate<T> stringPredicate()"}]}, "fixtures": [], "test_cases": [{"name": "testIllegalAdd", "primary_tested": ["MultiSet.add(T)"], "associated_methods": ["MultiSet.contains(Object)"], "external_dependencies": {"modules": ["MultiSet", "Integer"], "class_members": [{"name": "makeTestMultiSet", "type": "method"}]}, "category": "unit", "description": "Tests that adding an illegal element (non-string) to the MultiSet throws an IllegalArgumentException."}, {"name": "testIllegalDecorate", "primary_tested": ["PredicatedMultiSet.predicatedMultiSet(HashMultiSet<T>, Predicate<T>)"], "associated_methods": [], "external_dependencies": {"modules": ["HashMultiSet", "Integer"], "class_members": [{"name": "decorateMultiSet", "type": "method"}, {"name": "stringPredicate", "type": "method"}]}, "category": "unit", "description": "Tests that decorating a MultiSet with an illegal element throws an IllegalArgumentException and that decorating with a null predicate throws a NullPointerException."}, {"name": "testLegalAddRemove", "primary_tested": ["MultiSet.add(T)", "MultiSet.remove(Object)"], "associated_methods": ["MultiSet.size()", "MultiSet.contains(Object)", "PredicatedMultiSet.uniqueSet()"], "external_dependencies": {"modules": ["MultiSet", "PredicatedMultiSet", "Set"], "class_members": [{"name": "makeTestMultiSet", "type": "method"}]}, "category": "unit", "description": "Tests the legal addition and removal of elements from the MultiSet, ensuring the unique set is updated correctly."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/BoundedIteratorTest.java", "testclass_name": "BoundedIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.hamcrest.MatcherAssert.assertThat;", "import static org.hamcrest.core.Is.is;", "import static org.hamcrest.core.IsEqual.equalTo;", "import static org.hamcrest.core.IsNull.nullValue;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "BoundedIteratorTest", "description": "Unit tests for the BoundedIterator class, which decorates an iterator with bounds on the start index and maximum number of elements.", "class_members": {"variables": [{"name": "testArray", "type": "String[]"}, {"name": "testList", "type": "List<E>"}], "methods": [], "nested_classes": []}, "fixtures": ["setUp"], "test_cases": [{"name": "testBounded", "primary_tested": ["BoundedIterator.next()"], "associated_methods": ["BoundedIterator.hasNext()"], "external_dependencies": {"modules": ["BoundedIterator", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the bounded iterator functionality where the first element returned is at an index greater than the first element of the decorated iterator, and the last element returned is at an index less than the last element of the decorated iterator."}, {"name": "testEmptyBounded", "primary_tested": ["BoundedIterator.hasNext()", "BoundedIterator.next()"], "external_dependencies": {"modules": ["BoundedIterator", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior of a bounded iterator with a max of 0, which should behave as an empty iterator."}, {"name": "testMaxGreaterThanSize", "primary_tested": ["BoundedIterator.next()"], "associated_methods": ["BoundedIterator.hasNext()"], "external_dependencies": {"modules": ["BoundedIterator", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the case where the max parameter is greater than the size of the decorated iterator, ensuring the last element returned is the same as the last element of the decorated iterator."}, {"name": "testNegativeMax", "primary_tested": ["BoundedIterator.BoundedIterator(Iterator<E>, int, int)"], "external_dependencies": {"modules": ["BoundedIterator", "IllegalArgumentException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the case where a negative max parameter is passed to the BoundedIterator constructor, expecting an IllegalArgumentException."}, {"name": "testNegativeOffset", "primary_tested": ["BoundedIterator.BoundedIterator(Iterator<E>, int, int)"], "external_dependencies": {"modules": ["BoundedIterator", "IllegalArgumentException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the case where a negative offset parameter is passed to the BoundedIterator constructor, expecting an IllegalArgumentException."}, {"name": "testOffsetGreaterThanSize", "primary_tested": ["BoundedIterator.hasNext()", "BoundedIterator.next()"], "external_dependencies": {"modules": ["BoundedIterator", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the case where the offset parameter is greater than the size of the decorated iterator, ensuring the BoundedIterator behaves as an empty iterator."}, {"name": "testRemoveCalledTwice", "primary_tested": ["BoundedIterator.remove()"], "associated_methods": ["BoundedIterator.next()"], "external_dependencies": {"modules": ["BoundedIterator", "IllegalStateException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior of calling the remove() method twice without calling next() in between, expecting an IllegalStateException."}, {"name": "testRemoveFirst", "primary_tested": ["BoundedIterator.remove()"], "associated_methods": ["BoundedIterator.next()"], "external_dependencies": {"modules": ["BoundedIterator", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests removing the first element from the iterator and verifies that the element is removed from the underlying collection."}, {"name": "testRemoveLast", "primary_tested": ["BoundedIterator.remove()"], "associated_methods": ["BoundedIterator.next()"], "external_dependencies": {"modules": ["BoundedIterator", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests removing the last element from the iterator and verifies that the element is removed from the underlying collection."}, {"name": "testRemoveMiddle", "primary_tested": ["BoundedIterator.remove()"], "associated_methods": ["BoundedIterator.next()"], "external_dependencies": {"modules": ["BoundedIterator", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests removing an element in the middle of the iterator and verifies that the element is removed from the underlying collection."}, {"name": "testRemoveUnsupported", "primary_tested": ["BoundedIterator.remove()"], "associated_methods": ["BoundedIterator.next()"], "external_dependencies": {"modules": ["BoundedIterator", "UnsupportedOperationException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the case where the decorated iterator does not support the remove() method and throws an UnsupportedOperationException."}, {"name": "testRemoveWithoutCallingNext", "primary_tested": ["BoundedIterator.remove()"], "external_dependencies": {"modules": ["BoundedIterator", "IllegalStateException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests calling the remove() method without first calling next(), expecting an IllegalStateException."}, {"name": "testSameAsDecorated", "primary_tested": ["BoundedIterator.next()"], "associated_methods": ["BoundedIterator.hasNext()"], "external_dependencies": {"modules": ["BoundedIterator", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the case where the offset is zero and the max is the size of the decorated iterator, ensuring the BoundedIterator returns all the same elements as the decorated iterator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/properties/OrderedPropertiesTest.java", "testclass_name": "OrderedPropertiesTest", "dependencies": ["package org.apache.commons.collections4.properties;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import java.io.FileNotFoundException;", "import java.io.FileReader;", "import java.io.IOException;", "import java.util.Collections;", "import java.util.Enumeration;", "import java.util.Iterator;", "import java.util.Map;", "import java.util.Map.Entry;", "import java.util.concurrent.atomic.AtomicInteger;", "import org.junit.jupiter.api.Test;"], "name": "OrderedPropertiesTest", "description": "Unit tests for the OrderedProperties class, focusing on various operations like compute, merge, put, and remove.", "class_members": {"variables": [], "methods": [{"name": "assertAscendingOrder", "signature": "void assertAscendingOrder(OrderedProperties)"}, {"name": "assertDescendingOrder", "signature": "OrderedProperties assertDescendingOrder(OrderedProperties)"}, {"name": "loadOrderedKeysReverse", "signature": "OrderedProperties loadOrderedKeysReverse() throws FileNotFoundException, IOException"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testCompute", "primary_tested": ["OrderedProperties.compute(String,BiFunction)"], "associated_methods": ["OrderedProperties.clear()"], "external_dependencies": {"modules": ["OrderedProperties", "AtomicInteger"], "class_members": [{"name": "assertAscendingOrder", "type": "method"}, {"name": "assertDescendingOrder", "type": "method"}]}, "category": "unit", "description": "Tests the compute functionality of OrderedProperties, ensuring keys and values are computed and ordered correctly."}, {"name": "testComputeIfAbsent", "primary_tested": ["OrderedProperties.computeIfAbsent(String,Function)"], "associated_methods": ["OrderedProperties.clear()"], "external_dependencies": {"modules": ["OrderedProperties", "AtomicInteger"], "class_members": [{"name": "assertAscendingOrder", "type": "method"}, {"name": "assertDescendingOrder", "type": "method"}]}, "category": "unit", "description": "Tests the computeIfAbsent functionality of OrderedProperties, ensuring keys and values are computed if absent and ordered correctly."}, {"name": "testEntrySet", "primary_tested": ["OrderedProperties.entrySet()"], "external_dependencies": {"modules": ["OrderedProperties", "Map.Entry"]}, "category": "unit", "description": "Tests the entrySet functionality of OrderedProperties, ensuring entries are iterated and ordered correctly."}, {"name": "testForEach", "primary_tested": ["OrderedProperties.forEach(BiConsumer)"], "external_dependencies": {"modules": ["OrderedProperties", "AtomicInteger"]}, "category": "unit", "description": "Tests the forEach functionality of OrderedProperties, ensuring keys and values are iterated and ordered correctly."}, {"name": "testKeys", "primary_tested": ["OrderedProperties.keys()"], "external_dependencies": {"modules": ["OrderedProperties"]}, "category": "unit", "description": "Tests the keys functionality of OrderedProperties, ensuring keys are iterated and ordered correctly."}, {"name": "testLoadOrderedKeys", "primary_tested": ["OrderedProperties.load(Reader)"], "associated_methods": ["OrderedProperties.clear()"], "external_dependencies": {"modules": ["OrderedProperties", "FileReader"], "class_members": [{"name": "assertAscendingOrder", "type": "method"}]}, "category": "unit", "description": "Tests the load functionality of OrderedProperties, ensuring properties are loaded from a file and ordered correctly."}, {"name": "testLoadOrderedKeysReverse", "primary_tested": ["OrderedProperties.load(Reader)"], "associated_methods": ["OrderedProperties.clear()"], "external_dependencies": {"modules": ["OrderedProperties", "FileReader"], "class_members": [{"name": "loadOrderedKeysReverse", "type": "method"}]}, "category": "unit", "description": "Tests the load functionality of OrderedProperties, ensuring properties are loaded from a file in reverse order and ordered correctly."}, {"name": "testMerge", "primary_tested": ["OrderedProperties.merge(String,Object,BiFunction)"], "associated_methods": ["OrderedProperties.clear()"], "external_dependencies": {"modules": ["OrderedProperties"], "class_members": [{"name": "assertAscendingOrder", "type": "method"}, {"name": "assertDescendingOrder", "type": "method"}]}, "category": "unit", "description": "Tests the merge functionality of OrderedProperties, ensuring keys and values are merged and ordered correctly."}, {"name": "testPut", "primary_tested": ["OrderedProperties.put(String,String)"], "associated_methods": ["OrderedProperties.clear()"], "external_dependencies": {"modules": ["OrderedProperties"], "class_members": [{"name": "assertAscendingOrder", "type": "method"}, {"name": "assertDescendingOrder", "type": "method"}]}, "category": "unit", "description": "Tests the put functionality of OrderedProperties, ensuring keys and values are added and ordered correctly."}, {"name": "testPutAll", "primary_tested": ["OrderedProperties.putAll(Map)"], "associated_methods": ["OrderedProperties.clear()"], "external_dependencies": {"modules": ["OrderedProperties"], "class_members": [{"name": "assertAscendingOrder", "type": "method"}, {"name": "assertDescendingOrder", "type": "method"}]}, "category": "unit", "description": "Tests the putAll functionality of OrderedProperties, ensuring all keys and values from another map are added and ordered correctly."}, {"name": "testPutIfAbsent", "primary_tested": ["OrderedProperties.putIfAbsent(String,String)"], "associated_methods": ["OrderedProperties.clear()"], "external_dependencies": {"modules": ["OrderedProperties"], "class_members": [{"name": "assertAscendingOrder", "type": "method"}, {"name": "assertDescendingOrder", "type": "method"}]}, "category": "unit", "description": "Tests the putIfAbsent functionality of OrderedProperties, ensuring keys and values are added only if absent and ordered correctly."}, {"name": "testRemoveKey", "primary_tested": ["OrderedProperties.remove(Object)"], "associated_methods": ["OrderedProperties.contains(Object)", "OrderedProperties.containsKey(Object)"], "external_dependencies": {"modules": ["OrderedProperties", "Collections"], "class_members": [{"name": "loadOrderedKeysReverse", "type": "method"}]}, "category": "unit", "description": "Tests the remove functionality of OrderedProperties, ensuring a key is removed and does not exist in the properties."}, {"name": "testRemoveKeyValue", "primary_tested": ["OrderedProperties.remove(Object,Object)"], "associated_methods": ["OrderedProperties.contains(Object)", "OrderedProperties.containsKey(Object)"], "external_dependencies": {"modules": ["OrderedProperties", "Collections"], "class_members": [{"name": "loadOrderedKeysReverse", "type": "method"}]}, "category": "unit", "description": "Tests the remove functionality of OrderedProperties, ensuring a key-value pair is removed and does not exist in the properties."}, {"name": "testToString", "primary_tested": ["OrderedProperties.toString()"], "external_dependencies": {"modules": ["OrderedProperties"]}, "category": "unit", "description": "Tests the toString functionality of OrderedProperties, ensuring the string representation is correct and ordered."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/multimap/HashSetValuedHashMapTest.java", "testclass_name": "HashSetValuedHashMapTest", "dependencies": ["package org.apache.commons.collections4.multimap;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotSame;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Iterator;", "import java.util.Map;", "import java.util.Set;", "import org.apache.commons.collections4.MultiValuedMap;", "import org.apache.commons.collections4.SetValuedMap;", "import org.apache.commons.collections4.collection.AbstractCollectionTest;", "import org.junit.jupiter.api.Test;"], "name": "HashSetValuedHashMapTest", "description": "Unit tests for HashSetValuedHashMap operations.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testHashSetValuedHashMap_2", "primary_tested": ["HashSetValuedHashMap.get(K)"], "external_dependencies": {"modules": ["HashMap", "HashSetValuedHashMap"], "class_members": []}, "category": "unit", "description": "Tests the creation and size of a HashSetValuedHashMap from a HashMap."}, {"name": "testHashSetValueHashMap", "primary_tested": ["HashSetValuedHashMap.get(K)"], "external_dependencies": {"modules": ["HashSetValuedHashMap"], "class_members": []}, "category": "unit", "description": "Tests the addition of elements to a HashSetValuedHashMap and checks the size."}, {"name": "testHashSetValueHashMap_1", "primary_tested": ["HashSetValuedHashMap.get(K)"], "associated_methods": ["HashSetValuedHashMap.put(K,V)", "HashSetValuedHashMap.hashCode()"], "external_dependencies": {"modules": ["ArrayListValuedHashMap", "HashSetValuedHashMap"], "class_members": []}, "category": "unit", "description": "Tests the creation and comparison of HashSetValuedHashMap instances."}, {"name": "testSetValuedMapAdd", "primary_tested": ["HashSetValuedHashMap.get(K)", "HashSetValuedHashMap.put(K,V)"], "external_dependencies": {"modules": ["HashSetValuedHashMap"], "class_members": []}, "category": "unit", "description": "Tests the addition of elements to a SetValuedMap and checks the size and presence of keys."}, {"name": "testSetValuedMapEqualsHashCodeContract", "primary_tested": ["HashSetValuedHashMap.put(K,V)", "HashSetValuedHashMap.hashCode()"], "external_dependencies": {"modules": ["HashSetValuedHashMap"], "class_members": []}, "category": "unit", "description": "Tests the equality and hashCode contract of SetValuedMap instances."}, {"name": "testSetValuedMapRemove", "primary_tested": ["HashSetValuedHashMap.get(K)", "HashSetValuedHashMap.remove(K,V)"], "external_dependencies": {"modules": ["HashSetValuedHashMap"], "class_members": []}, "category": "unit", "description": "Tests the removal of elements from a SetValuedMap and checks the size and presence of keys."}, {"name": "testSetValuedMapRemoveViaIterator", "primary_tested": ["HashSetValuedHashMap.get(K)", "HashSetValuedHashMap.remove(K,V)"], "external_dependencies": {"modules": ["HashSetValuedHashMap"], "class_members": []}, "category": "unit", "description": "Tests the removal of elements from a SetValuedMap via an iterator and checks the size and presence of keys."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/multiset/UnmodifiableMultiSetTest.java", "testclass_name": "UnmodifiableMultiSetTest", "dependencies": ["package org.apache.commons.collections4.multiset;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Arrays;", "import org.apache.commons.collections4.MultiSet;", "import org.apache.commons.collections4.Unmodifiable;", "import org.junit.jupiter.api.Test;"], "name": "UnmodifiableMultiSetTest", "description": "Tests for the UnmodifiableMultiSet class, focusing on its unmodifiable behavior and factory methods.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testAdd", "primary_tested": ["UnmodifiableMultiSet.add(E,int)"], "external_dependencies": {"modules": ["UnmodifiableMultiSet", "HashMultiSet", "Arrays"], "class_members": []}, "category": "unit", "description": "Tests that adding an element to an unmodifiable multiset throws an UnsupportedOperationException."}, {"name": "testDecorateFactory", "primary_tested": ["UnmodifiableMultiSet.unmodifiableMultiSet(MultiSet)"], "external_dependencies": {"modules": ["UnmodifiableMultiSet", "HashMultiSet", "Arrays"], "class_members": []}, "category": "unit", "description": "Tests the factory method for creating an unmodifiable multiset and ensures it throws a NullPointerException when given null."}, {"name": "testEntrySet", "primary_tested": ["UnmodifiableMultiSet.entrySet()"], "external_dependencies": {"modules": ["UnmodifiableMultiSet", "HashMultiSet", "Arrays"], "class_members": []}, "category": "unit", "description": "Tests that the entry set of an unmodifiable multiset has the same size as the original multiset."}, {"name": "testRemove", "primary_tested": ["UnmodifiableMultiSet.remove(Object,int)"], "external_dependencies": {"modules": ["UnmodifiableMultiSet", "HashMultiSet", "Arrays"], "class_members": []}, "category": "unit", "description": "Tests that removing an element from an unmodifiable multiset throws an UnsupportedOperationException."}, {"name": "testSetCount", "primary_tested": ["UnmodifiableMultiSet.setCount(E,int)"], "external_dependencies": {"modules": ["UnmodifiableMultiSet", "HashMultiSet", "Arrays"], "class_members": []}, "category": "unit", "description": "Tests that setting the count of an element in an unmodifiable multiset throws an UnsupportedOperationException."}, {"name": "testUnmodifiable", "primary_tested": ["UnmodifiableMultiSet.makeObject()", "UnmodifiableMultiSet.makeFullCollection()"], "external_dependencies": {"modules": ["UnmodifiableMultiSet", "HashMultiSet", "Arrays", "Unmodifiable"], "class_members": []}, "category": "unit", "description": "Tests that the objects created by the factory methods are instances of Unmodifiable."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/keyvalue/UnmodifiableMapEntryTest.java", "testclass_name": "UnmodifiableMapEntryTest", "dependencies": ["package org.apache.commons.collections4.keyvalue;", "import static org.junit.jupiter.api.Assertions.assertInstanceOf;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.Map;", "import org.apache.commons.collections4.KeyValue;", "import org.apache.commons.collections4.Unmodifiable;", "import org.junit.jupiter.api.Test;"], "name": "UnmodifiableMapEntryTest", "description": "Tests for the UnmodifiableMapEntry class, focusing on its unmodifiable behavior and constructor functionalities.", "class_members": {"methods": [{"name": "makeMapEntry", "signature": "Map.Entry<K, V> makeMapEntry()"}, {"name": "makeMapEntry", "signature": "Map.Entry<K, V> makeMapEntry(K key, V value)"}]}, "test_cases": [{"name": "testAccessorsAndMutators", "primary_tested": ["Map.Entry.getKey()", "Map.Entry.getValue()"], "associated_methods": ["UnmodifiableMapEntryTest.makeMapEntry(K,V)"], "external_dependencies": {"modules": ["Map", "UnmodifiableMapEntry"], "class_members": [{"name": "makeMapEntry", "type": "method"}]}, "category": "unit", "description": "Tests the accessor methods (getKey and getValue) of the Map.Entry interface."}, {"name": "testConstructors", "primary_tested": ["UnmodifiableMapEntry.UnmodifiableMapEntry(K,V)", "UnmodifiableMapEntry.UnmodifiableMapEntry(KeyValue<K,V>)", "UnmodifiableMapEntry.UnmodifiableMapEntry(Map.Entry<K,V>)"], "associated_methods": ["Map.Entry.getKey()", "Map.Entry.getValue()"], "external_dependencies": {"modules": ["Map", "UnmodifiableMapEntry", "KeyValue", "DefaultKeyValue"], "class_members": [{"name": "makeMapEntry", "type": "method"}]}, "category": "unit", "description": "Tests the constructors of the UnmodifiableMapEntry class."}, {"name": "testSelfReferenceHandling", "primary_tested": [], "external_dependencies": {}, "category": "unit", "description": "Tests the handling of self-references in the UnmodifiableMapEntry class."}, {"name": "testUnmodifiable", "primary_tested": ["Map.Entry.setValue(V)"], "external_dependencies": {"modules": ["Map", "UnmodifiableMapEntry"], "class_members": [{"name": "makeMapEntry", "type": "method"}]}, "category": "unit", "description": "Tests the unmodifiable behavior of the UnmodifiableMapEntry class by attempting to set a value and expecting an UnsupportedOperationException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/multimap/TransformedMultiValuedMapTest.java", "testclass_name": "TransformedMultiValuedMapTest", "dependencies": ["package org.apache.commons.collections4.multimap;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Collection;", "import org.apache.commons.collections4.MultiValuedMap;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.TransformerUtils;", "import org.apache.commons.collections4.collection.AbstractCollectionTest;", "import org.apache.commons.collections4.collection.TransformedCollectionTest;", "import org.junit.jupiter.api.Test;"], "name": "TransformedMultiValuedMapTest", "description": "Unit tests for TransformedMultiValuedMap functionality.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testFactory_Decorate", "primary_tested": ["TransformedMultiValuedMap.transformingMap(MultiValuedMap,Transformer,Transformer)"], "associated_methods": ["MultiValuedMap.put(K,V)", "MultiValuedMap.get(K)", "MultiValuedMap.size()"], "external_dependencies": {"modules": ["MultiValuedMap", "ArrayListValuedHashMap", "TransformerUtils", "TransformedCollectionTest"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the factory method for decorating a MultiValuedMap with transformers."}, {"name": "testFactory_decorateTransform", "primary_tested": ["TransformedMultiValuedMap.transformedMap(MultiValuedMap,Transformer,Transformer)"], "associated_methods": ["MultiValuedMap.put(K,V)", "MultiValuedMap.get(K)", "MultiValuedMap.size()"], "external_dependencies": {"modules": ["MultiValuedMap", "ArrayListValuedHashMap", "TransformerUtils", "TransformedCollectionTest"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the factory method for transforming a MultiValuedMap with transformers."}, {"name": "testKeyTransformedMap", "primary_tested": ["TransformedMultiValuedMap.transformingMap(MultiValuedMap,Transformer,Transformer)"], "associated_methods": ["MultiValuedMap.put(K,V)", "MultiValuedMap.size()", "MultiValuedMap.containsKey(Object)", "MultiValuedMap.containsValue(Object)", "MultiValuedMap.get(K)", "MultiValuedMap.remove(Object)"], "external_dependencies": {"modules": ["MultiValuedMap", "ArrayListValuedHashMap", "TransformerUtils", "TransformedCollectionTest"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformation of keys in a MultiValuedMap."}, {"name": "testValueTransformedMap", "primary_tested": ["TransformedMultiValuedMap.transformingMap(MultiValuedMap,Transformer,Transformer)"], "associated_methods": ["MultiValuedMap.put(K,V)", "MultiValuedMap.size()", "MultiValuedMap.containsValue(Object)", "MultiValuedMap.containsKey(Object)", "MultiValuedMap.get(K)", "MultiValuedMap.remove(Object)"], "external_dependencies": {"modules": ["MultiValuedMap", "ArrayListValuedHashMap", "TransformerUtils", "TransformedCollectionTest"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformation of values in a MultiValuedMap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java", "testclass_name": "MultiValueMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.io.ByteArrayInputStream;", "import java.io.ByteArrayOutputStream;", "import java.io.IOException;", "import java.io.ObjectInputStream;", "import java.io.ObjectOutputStream;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.HashMap;", "import java.util.HashSet;", "import java.util.Iterator;", "import java.util.LinkedList;", "import java.util.Map;", "import org.apache.commons.collections4.AbstractObjectTest;", "import org.apache.commons.collections4.IteratorUtils;", "import org.apache.commons.collections4.MultiMap;", "import org.junit.jupiter.api.Test;"], "name": "MultiValueMapTest", "description": "Unit tests for the MultiValueMap class, focusing on various operations and functionalities.", "class_members": {"variables": [{"name": "DEFAULT_VALUE", "type": "static final int"}], "methods": [{"name": "createTestMap", "signature": "<C extends Collection<V>> MultiValueMap<K, V> createTestMap(Class<C> collectionClass)"}, {"name": "deserialize", "signature": "Object deserialize(byte[] data) throws IOException, ClassNotFoundException"}, {"name": "makeEmptyMap", "signature": "Map makeEmptyMap()"}, {"name": "serialize", "signature": "byte[] serialize(Object object) throws IOException"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testContainsValue", "primary_tested": ["MultiValueMap.containsValue(Object)"], "external_dependencies": {"modules": ["MultiValueMap", "HashSet"], "class_members": [{"name": "createTestMap", "type": "method"}]}, "category": "unit", "description": "Tests the containsValue method of MultiValueMap to check if it correctly identifies the presence of values."}, {"name": "testContainsValue_Key", "primary_tested": ["MultiValueMap.containsValue(Object, Object)"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": []}, "category": "unit", "description": "Tests the containsValue method of MultiValueMap with key-value pairs to check if it correctly identifies the presence of specific values for a given key."}, {"name": "testEmptyMapCompatibility", "primary_tested": ["MultiValueMap.makeEmptyMap()"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "makeEmptyMap", "type": "method"}]}, "category": "unit", "description": "Tests the creation of an empty MultiValueMap and checks its compatibility."}, {"name": "testFullMapCompatibility", "primary_tested": ["MultiValueMap.makeObject()"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "description": "Tests the creation of a full MultiValueMap and checks its compatibility."}, {"name": "testGetCollection", "primary_tested": ["MultiValueMap.get(Object)"], "associated_methods": ["MultiValueMap.getCollection(Object)"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": []}, "category": "unit", "description": "Tests the get method of MultiValueMap to ensure it returns the correct collection for a given key."}, {"name": "testIterator", "primary_tested": ["MultiValueMap.iterator()"], "external_dependencies": {"modules": ["MultiValueMap", "ArrayList"], "class_members": [{"name": "createTestMap", "type": "method"}]}, "category": "unit", "description": "Tests the iterator method of MultiValueMap to ensure it correctly iterates over the map entries."}, {"name": "testIterator_Key", "primary_tested": ["MultiValueMap.iterator(Object)"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": []}, "category": "unit", "description": "Tests the iterator method of MultiValueMap with a specific key to ensure it correctly iterates over the values for that key."}, {"name": "testKeyContainsValue", "primary_tested": ["MultiValueMap.containsValue(Object, Object)"], "external_dependencies": {"modules": ["MultiValueMap", "HashSet"], "class_members": [{"name": "createTestMap", "type": "method"}]}, "category": "unit", "description": "Tests the containsValue method of MultiValueMap with key-value pairs to check if it correctly identifies the presence of specific values for a given key."}, {"name": "testKeyedIterator", "primary_tested": ["MultiValueMap.iterator(Object)"], "external_dependencies": {"modules": ["MultiValueMap", "ArrayList", "Arrays", "IteratorUtils"], "class_members": [{"name": "createTestMap", "type": "method"}]}, "category": "unit", "description": "Tests the iterator method of MultiValueMap with a specific key to ensure it correctly iterates over the values for that key and returns the expected results."}, {"name": "testMapEquals", "primary_tested": ["MultiValueMap.equals(Object)"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": []}, "category": "unit", "description": "Tests the equals method of MultiValueMap to ensure it correctly compares two MultiValueMap instances."}, {"name": "testMultipleValues", "primary_tested": ["MultiValueMap.get(Object)"], "external_dependencies": {"modules": ["MultiValueMap", "HashSet"], "class_members": [{"name": "createTestMap", "type": "method"}]}, "category": "unit", "description": "Tests the get method of MultiValueMap to ensure it returns the correct collection of multiple values for a given key."}, {"name": "testNoMappingReturnsNull", "primary_tested": ["MultiValueMap.get(Object)"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "createTestMap", "type": "method"}]}, "category": "unit", "description": "Tests the get method of MultiValueMap to ensure it returns null when no mapping exists for a given key."}, {"name": "testPutAll_KeyCollection", "primary_tested": ["MultiValueMap.putAll(Object, Collection)"], "external_dependencies": {"modules": ["MultiValueMap", "Arrays"], "class_members": []}, "category": "unit", "description": "Tests the putAll method of MultiValueMap to ensure it correctly adds multiple values for a given key."}, {"name": "testPutAll_Map1", "primary_tested": ["MultiValueMap.putAll(Map)"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": []}, "category": "unit", "description": "Tests the putAll method of MultiValueMap to ensure it correctly merges another MultiValueMap into the current one."}, {"name": "testPutAll_Map2", "primary_tested": ["MultiValueMap.putAll(Map)"], "external_dependencies": {"modules": ["MultiValueMap", "HashMap"], "class_members": []}, "category": "unit", "description": "Tests the putAll method of MultiValueMap to ensure it correctly merges a standard Map into the current MultiValueMap."}, {"name": "testPutWithList", "primary_tested": ["MultiValueMap.put(Object, Object)"], "external_dependencies": {"modules": ["MultiValueMap", "HashMap", "ArrayList"], "class_members": []}, "category": "unit", "description": "Tests the put method of MultiValueMap with a list collection to ensure it correctly adds values for a given key."}, {"name": "testPutWithSet", "primary_tested": ["MultiValueMap.put(Object, Object)"], "external_dependencies": {"modules": ["MultiValueMap", "HashMap", "HashSet"], "class_members": []}, "category": "unit", "description": "Tests the put method of MultiValueMap with a set collection to ensure it correctly adds values for a given key."}, {"name": "testRemove_KeyItem", "primary_tested": ["MultiValueMap.removeMapping(Object, Object)"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": []}, "category": "unit", "description": "Tests the removeMapping method of MultiValueMap to ensure it correctly removes a specific value for a given key."}, {"name": "testRemoveAllViaEntryIterator", "primary_tested": ["MultiValueMap.iterator()"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "createTestMap", "type": "method"}]}, "category": "unit", "description": "Tests the iterator method of MultiValueMap to ensure it correctly removes all entries when the remove method is called on each iterator."}, {"name": "testRemoveAllViaIterator", "primary_tested": ["MultiValueMap.values()"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "createTestMap", "type": "method"}]}, "category": "unit", "description": "Tests the values method of MultiValueMap to ensure it correctly removes all values when the remove method is called on each iterator."}, {"name": "testRemoveAllViaKeyedIterator", "primary_tested": ["MultiValueMap.iterator(Object)"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "createTestMap", "type": "method"}]}, "category": "unit", "description": "Tests the iterator method of MultiValueMap with a specific key to ensure it correctly removes all values for that key when the remove method is called on each iterator."}, {"name": "testSize", "primary_tested": ["MultiValueMap.size()"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": []}, "category": "unit", "description": "Tests the size method of MultiValueMap to ensure it correctly returns the number of keys in the map."}, {"name": "testSize_Key", "primary_tested": ["MultiValueMap.size(Object)"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": []}, "category": "unit", "description": "Tests the size method of MultiValueMap with a specific key to ensure it correctly returns the number of values for that key."}, {"name": "testTotalSize", "primary_tested": ["MultiValueMap.totalSize()"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": []}, "category": "unit", "description": "Tests the totalSize method of MultiValueMap to ensure it correctly returns the total number of values in the map."}, {"name": "testTotalSizeA", "primary_tested": ["MultiValueMap.totalSize()"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "createTestMap", "type": "method"}]}, "category": "unit", "description": "Tests the totalSize method of MultiValueMap to ensure it correctly returns the total number of values in a specific test map."}, {"name": "testUnsafeDeSerialization", "primary_tested": ["MultiValueMap.serialize(Object)", "MultiValueMap.deserialize(byte[])"], "external_dependencies": {"modules": ["MultiValueMap", "HashMap", "ArrayList"], "class_members": [{"name": "serialize", "type": "method"}, {"name": "deserialize", "type": "method"}]}, "category": "unit", "description": "Tests the serialization and deserialization methods of MultiValueMap to ensure they correctly handle unsafe deserialization."}, {"name": "testValueCollectionType", "primary_tested": ["MultiValueMap.get(Object)"], "external_dependencies": {"modules": ["MultiValueMap", "LinkedList"], "class_members": [{"name": "createTestMap", "type": "method"}]}, "category": "unit", "description": "Tests the get method of MultiValueMap to ensure it returns the correct collection type for a given key."}, {"name": "testValues", "primary_tested": ["MultiValueMap.values()"], "external_dependencies": {"modules": ["MultiValueMap", "HashSet"], "class_members": [{"name": "createTestMap", "type": "method"}]}, "category": "unit", "description": "Tests the values method of MultiValueMap to ensure it correctly returns all values in the map."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/DefaultBloomFilterTest.java", "testclass_name": "DefaultBloomFilterTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.TreeSet;", "import java.util.function.IntPredicate;", "import java.util.function.LongPredicate;", "import org.junit.jupiter.api.Test;"], "name": "DefaultBloomFilterTest", "description": "Unit tests for the DefaultBloomFilter class, focusing on its merge, cardinality, and intersection functionalities.", "class_members": {"variables": [], "methods": [], "nested_classes": [{"name": "AbstractDefaultBloomFilter", "description": "Abstract class implementing BloomFilter interface with common functionalities."}, {"name": "BrokenCardinality", "description": "Subclass of NonSparseDefaultBloomFilter with a broken cardinality method."}, {"name": "NonSparseDefaultBloomFilter", "description": "Default implementation of a non-sparse Bloom filter."}, {"name": "SparseDefaultBloomFilter", "description": "Default implementation of a sparse Bloom filter."}]}, "fixtures": [], "test_cases": [{"name": "testDefaultBloomFilterSimpleSpecificMerge", "primary_tested": ["AbstractDefaultBloomFilter.merge(Hasher)", "AbstractDefaultBloomFilter.cardinality()"], "external_dependencies": {"modules": ["SparseDefaultBloomFilter", "Shape", "Hasher", "IncrementingHasher"], "class_members": []}, "category": "unit", "description": "Tests the merge functionality of a SparseDefaultBloomFilter with a specific hasher and verifies the cardinality."}, {"name": "testDefaultBloomFilterSparseSpecificMerge", "primary_tested": ["AbstractDefaultBloomFilter.merge(IndexExtractor)", "AbstractDefaultBloomFilter.cardinality()"], "associated_methods": ["AbstractDefaultBloomFilter.copy()"], "external_dependencies": {"modules": ["SparseDefaultBloomFilter", "Shape", "IncrementingHasher"], "class_members": []}, "category": "unit", "description": "Tests the merge functionality of a SparseDefaultBloomFilter with another filter and verifies the cardinality."}, {"name": "testEstimateLargeN", "primary_tested": ["SimpleBloomFilter.merge(BitMapExtractor)", "SimpleBloomFilter.estimateN()"], "external_dependencies": {"modules": ["Shape", "SimpleBloomFilter", "BitMapExtractor", "BitMaps"], "class_members": []}, "category": "unit", "description": "Tests the estimation of N for a very large Bloom filter with Integer.MAX_VALUE-1 bits set."}, {"name": "testEstimateNWithBrokenCardinality", "primary_tested": ["BrokenCardinality.estimateN()"], "external_dependencies": {"modules": ["TestingHashers", "BrokenCardinality", "Shape"], "class_members": []}, "category": "unit", "description": "Tests the estimation of N with a Bloom filter having a broken cardinality method, expecting an IllegalArgumentException."}, {"name": "testHasherBasedMergeWithDifferingSparseness", "primary_tested": ["NonSparseDefaultBloomFilter.merge(Hasher)", "SparseDefaultBloomFilter.merge(Hasher)", "BitMapExtractor.processBitMapPairs(BloomFilter, LongBinaryOperator)"], "external_dependencies": {"modules": ["NonSparseDefaultBloomFilter", "SparseDefaultBloomFilter", "Hasher", "IncrementingHasher", "BitMapExtractor", "Shape"], "class_members": []}, "category": "unit", "description": "Tests the merge functionality with hashers for both non-sparse and sparse Bloom filters and verifies bit map pairs."}, {"name": "testIntersectionLimit", "primary_tested": ["SimpleBloomFilter.merge(BitMapExtractor)", "SimpleBloomFilter.estimateIntersection(BloomFilter)"], "external_dependencies": {"modules": ["Shape", "SimpleBloomFilter", "BitMapExtractor", "BitMaps"], "class_members": []}, "category": "unit", "description": "Tests the intersection estimation for a very large Bloom filter with Integer.MAX_VALUE-1 bits set."}, {"name": "testSparseNonSparseMerging", "primary_tested": ["SparseDefaultBloomFilter.merge(Hasher)", "NonSparseDefaultBloomFilter.merge(Hasher)", "AbstractDefaultBloomFilter.copy()", "AbstractDefaultBloomFilter.cardinality()"], "external_dependencies": {"modules": ["SparseDefaultBloomFilter", "NonSparseDefaultBloomFilter", "TestingHashers", "Shape"], "class_members": []}, "category": "unit", "description": "Tests the merge functionality between sparse and non-sparse Bloom filters and verifies the cardinality."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/DefaultAbstractLinkedListForJava21Test.java", "testclass_name": "DefaultAbstractLinkedListForJava21Test", "dependencies": ["package org.apache.commons.collections4.list;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.io.IOException;", "import java.io.ObjectInputStream;", "import java.io.ObjectOutputStream;", "import java.util.Arrays;", "import java.util.List;", "import org.junit.jupiter.api.Test;"], "name": "DefaultAbstractLinkedListForJava21Test", "description": "Unit tests for the DefaultAbstractLinkedListForJava21 class, focusing on various operations like adding, removing, and sublist manipulations.", "class_members": {"variables": [], "methods": [{"name": "checkNodes", "signature": "void checkNodes()"}], "nested_classes": [{"name": "DefaultAbstractLinkedListForJava21", "description": "Internal class extending AbstractLinkedListForJava21 with serialization methods."}]}, "fixtures": [], "test_cases": [{"name": "testAddNodeAfter", "primary_tested": ["AbstractLinkedListForJava21.addNodeAfter(Node,E)"], "associated_methods": ["AbstractLinkedListForJava21.addFirst(E)", "AbstractLinkedListForJava21.getFirst()", "AbstractLinkedListForJava21.getLast()", "AbstractLinkedListForJava21.removeFirst()", "AbstractLinkedListForJava21.getNode(int,boolean)"], "external_dependencies": {"modules": ["AbstractLinkedListForJava21", "UnsupportedOperationException"], "class_members": [{"name": "checkNodes", "type": "method"}]}, "category": "unit", "description": "Tests the functionality of adding a node after a specified node in the list."}, {"name": "testGetNode", "primary_tested": ["AbstractLinkedListForJava21.getNode(int,boolean)"], "associated_methods": ["AbstractLinkedListForJava21.addAll(Collection)", "AbstractLinkedListForJava21.addFirst(E)", "AbstractLinkedListForJava21.removeNode(Node)"], "external_dependencies": {"modules": ["AbstractLinkedListForJava21", "IndexOutOfBoundsException", "Arrays"], "class_members": [{"name": "checkNodes", "type": "method"}]}, "category": "unit", "description": "Tests the functionality of retrieving nodes from the list and handling index out of bounds exceptions."}, {"name": "testRemoveFirst", "primary_tested": ["AbstractLinkedListForJava21.removeFirst()"], "associated_methods": ["AbstractLinkedListForJava21.addAll(Collection)", "AbstractLinkedListForJava21.addLast(E)"], "external_dependencies": {"modules": ["AbstractLinkedListForJava21", "UnsupportedOperationException", "Arrays"], "class_members": [{"name": "checkNodes", "type": "method"}]}, "category": "unit", "description": "Tests the functionality of removing the first element from the list."}, {"name": "testRemoveLast", "primary_tested": ["AbstractLinkedListForJava21.removeLast()"], "associated_methods": ["AbstractLinkedListForJava21.addAll(Collection)", "AbstractLinkedListForJava21.addFirst(E)"], "external_dependencies": {"modules": ["AbstractLinkedListForJava21", "UnsupportedOperationException", "Arrays"], "class_members": [{"name": "checkNodes", "type": "method"}]}, "category": "unit", "description": "Tests the functionality of removing the last element from the list."}, {"name": "testRemoveNode", "primary_tested": ["AbstractLinkedListForJava21.removeNode(Node)"], "associated_methods": ["AbstractLinkedListForJava21.addAll(Collection)", "AbstractLinkedListForJava21.addFirst(E)", "AbstractLinkedListForJava21.getFirst()", "AbstractLinkedListForJava21.getLast()", "AbstractLinkedListForJava21.getNode(int,boolean)"], "external_dependencies": {"modules": ["AbstractLinkedListForJava21", "Arrays"], "class_members": [{"name": "checkNodes", "type": "method"}]}, "category": "unit", "description": "Tests the functionality of removing a specific node from the list."}, {"name": "testSubList", "primary_tested": ["List.subList(int,int)"], "associated_methods": [], "external_dependencies": {"modules": ["List"], "class_members": []}, "category": "unit", "description": "Tests the functionality of creating and using sublists from the main list."}, {"name": "testSubListAddBegin", "primary_tested": ["List.subList(int,int).add(E)"], "associated_methods": [], "external_dependencies": {"modules": ["List"], "class_members": []}, "category": "unit", "description": "Tests the functionality of adding elements to the beginning of a sublist."}, {"name": "testSubListAddEnd", "primary_tested": ["List.subList(int,int).add(E)"], "associated_methods": [], "external_dependencies": {"modules": ["List"], "class_members": []}, "category": "unit", "description": "Tests the functionality of adding elements to the end of a sublist."}, {"name": "testSubListAddMiddle", "primary_tested": ["List.subList(int,int).add(E)"], "associated_methods": [], "external_dependencies": {"modules": ["List"], "class_members": []}, "category": "unit", "description": "Tests the functionality of adding elements to the middle of a sublist."}, {"name": "testSubListRemove", "primary_tested": ["List.subList(int,int).remove(Object)", "List.subList(int,int).remove(int)", "List.subList(int,int).clear()"], "associated_methods": [], "external_dependencies": {"modules": ["List"], "class_members": []}, "category": "unit", "description": "Tests the functionality of removing elements from a sublist."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java", "testclass_name": "Flat3MapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertNotSame;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.io.ByteArrayInputStream;", "import java.io.ByteArrayOutputStream;", "import java.io.ObjectInputStream;", "import java.io.ObjectOutputStream;", "import java.util.HashMap;", "import java.util.Iterator;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.apache.commons.collections4.BulkTest;", "import org.apache.commons.collections4.IterableMap;", "import org.apache.commons.collections4.MapIterator;", "import org.apache.commons.collections4.iterators.AbstractMapIteratorTest;", "import org.junit.jupiter.api.Test;"]}, {"file_path": "src/test/java/org/apache/commons/collections4/keyvalue/DefaultKeyValueTest.java", "testclass_name": "DefaultKeyValueTest", "dependencies": ["package org.apache.commons.collections4.keyvalue;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.Test;"], "name": "DefaultKeyValueTest", "description": "Unit tests for the DefaultKeyValue class, focusing on its constructors, accessors, mutators, and other functionalities.", "class_members": {"variables": [{"name": "key", "type": "String"}, {"name": "value", "type": "String"}], "methods": [{"name": "makeDefaultKeyValue", "signature": "DefaultKeyValue<K, V> makeDefaultKeyValue()"}, {"name": "makeDefaultKeyValue", "signature": "DefaultKeyValue<K, V> makeDefaultKeyValue(K key, V value)"}]}, "test_cases": [{"name": "testAccessorsAndMutators", "primary_tested": ["DefaultKeyValue.setKey(K)", "DefaultKeyValue.getKey()", "DefaultKeyValue.setValue(V)", "DefaultKeyValue.getValue()"], "external_dependencies": {"modules": ["DefaultKeyValue"], "class_members": [{"name": "key", "type": "variable"}, {"name": "value", "type": "variable"}, {"name": "makeDefaultKeyValue", "type": "method"}]}, "category": "unit", "description": "Tests the accessors and mutators of the DefaultKeyValue class."}, {"name": "testConstructors", "primary_tested": ["DefaultKeyValue.DefaultKeyValue()", "DefaultKeyValue.DefaultKeyValue(K, V)", "DefaultKeyValue.DefaultKeyValue(DefaultKeyValue<K, V>)", "DefaultKeyValue.DefaultKeyValue(Map.Entry<K, V>)"], "external_dependencies": {"modules": ["DefaultKeyValue", "Map", "HashMap"], "class_members": [{"name": "key", "type": "variable"}, {"name": "value", "type": "variable"}]}, "category": "unit", "description": "Tests the constructors of the DefaultKeyValue class."}, {"name": "testEqualsAndHashCode", "primary_tested": ["DefaultKeyValue.equals(Object)", "DefaultKeyValue.hashCode()"], "external_dependencies": {"modules": ["DefaultKeyValue"], "class_members": [{"name": "key", "type": "variable"}, {"name": "value", "type": "variable"}, {"name": "makeDefaultKeyValue", "type": "method"}]}, "category": "unit", "description": "Tests the equals and hashCode methods of the DefaultKeyValue class."}, {"name": "testSelfReferenceHandling", "primary_tested": ["DefaultKeyValue.setKey(K)"], "external_dependencies": {"modules": ["DefaultKeyValue"], "class_members": [{"name": "makeDefaultKeyValue", "type": "method"}]}, "category": "unit", "description": "Tests the handling of self-reference in the setKey method of the DefaultKeyValue class."}, {"name": "testToMapEntry", "primary_tested": ["DefaultKeyValue.toMapEntry()"], "external_dependencies": {"modules": ["DefaultKeyValue", "Map", "HashMap"], "class_members": [{"name": "key", "type": "variable"}, {"name": "value", "type": "variable"}, {"name": "makeDefaultKeyValue", "type": "method"}]}, "category": "unit", "description": "Tests the toMapEntry method of the DefaultKeyValue class."}, {"name": "testToString", "primary_tested": ["DefaultKeyValue.toString()"], "external_dependencies": {"modules": ["DefaultKeyValue"], "class_members": [{"name": "key", "type": "variable"}, {"name": "value", "type": "variable"}, {"name": "makeDefaultKeyValue", "type": "method"}]}, "category": "unit", "description": "Tests the toString method of the DefaultKeyValue class."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/FilterListIteratorTest.java", "testclass_name": "FilterListIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Collection;", "import java.util.List;", "import java.util.ListIterator;", "import java.util.Random;", "import org.apache.commons.collections4.Predicate;", "import org.apache.commons.collections4.PredicateUtils;", "import org.apache.commons.collections4.list.GrowthList;", "import org.junit.jupiter.api.AfterEach;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "FilterListIteratorTest", "description": "Unit tests for the FilterListIterator class, which filters elements of a list based on a predicate.", "class_members": {"variables": [{"name": "list", "type": "ArrayList<Integer>"}, {"name": "odds", "type": "ArrayList<Integer>"}, {"name": "evens", "type": "ArrayList<Integer>"}, {"name": "threes", "type": "ArrayList<Integer>"}, {"name": "fours", "type": "ArrayList<Integer>"}, {"name": "sixes", "type": "ArrayList<Integer>"}, {"name": "truePred", "type": "Predicate<Integer>"}, {"name": "falsePred", "type": "Predicate<Integer>"}, {"name": "evenPred", "type": "Predicate<Integer>"}, {"name": "oddPred", "type": "Predicate<Integer>"}, {"name": "threePred", "type": "Predicate<Integer>"}, {"name": "fourPred", "type": "Predicate<Integer>"}, {"name": "random", "type": "Random"}], "methods": [{"name": "nextNextPrevious", "signature": "void nextNextPrevious(ListIterator<?>, ListIterator<?>)"}, {"name": "previousPreviousNext", "signature": "void previousPreviousNext(ListIterator<?>, ListIterator<?>)"}, {"name": "walkBackward", "signature": "void walkBackward(ListIterator<?>, ListIterator<?>)"}, {"name": "walkForward", "signature": "void walkForward(ListIterator<?>, ListIterator<?>)"}, {"name": "walkLists", "signature": "void walkLists(List<E>, ListIterator<E>)"}], "nested_classes": []}, "fixtures": ["setUp", "tearDown"], "test_cases": [{"name": "testCollections360", "primary_tested": ["FilterListIterator.hasNext()", "FilterListIterator.hasPrevious()"], "external_dependencies": {"modules": ["GrowthList", "PredicateUtils", "FilterListIterator"], "class_members": [{"name": "truePred", "type": "variable"}], "project_specific_resources": ["PredicateUtils.anyPredicate(Collection<Predicate<Object>>)"]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext and hasPrevious methods of FilterListIterator for an empty list."}, {"name": "testEvens", "primary_tested": ["FilterListIterator.next()", "FilterListIterator.previous()"], "external_dependencies": {"modules": ["FilterListIterator"], "class_members": [{"name": "list", "type": "variable"}, {"name": "evens", "type": "variable"}, {"name": "evenPred", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the FilterListIterator with an even predicate."}, {"name": "testFailingHasNextBug", "primary_tested": ["FilterListIterator.hasNext()", "FilterListIterator.hasPrevious()", "FilterListIterator.next()", "FilterListIterator.previous()"], "external_dependencies": {"modules": ["FilterListIterator"], "class_members": [{"name": "list", "type": "variable"}, {"name": "fours", "type": "variable"}, {"name": "fourPred", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext and hasPrevious methods of FilterListIterator for a list filtered by a four predicate."}, {"name": "testFalsePredicate", "primary_tested": ["FilterListIterator.next()", "FilterListIterator.previous()"], "external_dependencies": {"modules": ["FilterListIterator"], "class_members": [{"name": "list", "type": "variable"}, {"name": "falsePred", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the FilterListIterator with a false predicate."}, {"name": "testFours", "primary_tested": ["FilterListIterator.next()", "FilterListIterator.previous()"], "external_dependencies": {"modules": ["FilterListIterator"], "class_members": [{"name": "list", "type": "variable"}, {"name": "fours", "type": "variable"}, {"name": "fourPred", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the FilterListIterator with a four predicate."}, {"name": "testManual", "primary_tested": ["FilterListIterator.next()", "FilterListIterator.previous()"], "external_dependencies": {"modules": ["FilterListIterator"], "class_members": [{"name": "list", "type": "variable"}, {"name": "threePred", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the FilterListIterator manually with a three predicate."}, {"name": "testNestedSixes", "primary_tested": ["FilterListIterator.next()", "FilterListIterator.previous()"], "external_dependencies": {"modules": ["FilterListIterator"], "class_members": [{"name": "list", "type": "variable"}, {"name": "sixes", "type": "variable"}, {"name": "threePred", "type": "variable"}, {"name": "evenPred", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests nested FilterListIterators with a three and even predicate."}, {"name": "testNestedSixes2", "primary_tested": ["FilterListIterator.next()", "FilterListIterator.previous()"], "external_dependencies": {"modules": ["FilterListIterator"], "class_members": [{"name": "list", "type": "variable"}, {"name": "sixes", "type": "variable"}, {"name": "evenPred", "type": "variable"}, {"name": "threePred", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests nested FilterListIterators with an even and three predicate."}, {"name": "testNestedSixes3", "primary_tested": ["FilterListIterator.next()", "FilterListIterator.previous()"], "external_dependencies": {"modules": ["FilterListIterator"], "class_members": [{"name": "list", "type": "variable"}, {"name": "sixes", "type": "variable"}, {"name": "threePred", "type": "variable"}, {"name": "evenPred", "type": "variable"}, {"name": "truePred", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests nested FilterListIterators with a three, even, and true predicate."}, {"name": "testNextChangesPrevious", "primary_tested": ["FilterListIterator.next()", "FilterListIterator.previous()"], "associated_methods": ["FilterListIteratorTest.nextNextPrevious(ListIterator<?>, ListIterator<?>)"], "external_dependencies": {"modules": ["FilterListIterator"], "class_members": [{"name": "list", "type": "variable"}, {"name": "threes", "type": "variable"}, {"name": "threePred", "type": "variable"}, {"name": "truePred", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if calls to next() change the value returned by previous() in FilterListIterator."}, {"name": "testOdds", "primary_tested": ["FilterListIterator.next()", "FilterListIterator.previous()"], "external_dependencies": {"modules": ["FilterListIterator"], "class_members": [{"name": "list", "type": "variable"}, {"name": "odds", "type": "variable"}, {"name": "oddPred", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the FilterListIterator with an odd predicate."}, {"name": "testPreviousChangesNext", "primary_tested": ["FilterListIterator.next()", "FilterListIterator.previous()"], "associated_methods": ["FilterListIteratorTest.previousPreviousNext(ListIterator<?>, ListIterator<?>)"], "external_dependencies": {"modules": ["FilterListIterator"], "class_members": [{"name": "list", "type": "variable"}, {"name": "threes", "type": "variable"}, {"name": "threePred", "type": "variable"}, {"name": "truePred", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if calls to previous() change the value returned by next() in FilterListIterator."}, {"name": "testThrees", "primary_tested": ["FilterListIterator.next()", "FilterListIterator.previous()"], "external_dependencies": {"modules": ["FilterListIterator"], "class_members": [{"name": "list", "type": "variable"}, {"name": "threes", "type": "variable"}, {"name": "threePred", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the FilterListIterator with a three predicate."}, {"name": "testTruePredicate", "primary_tested": ["FilterListIterator.next()", "FilterListIterator.previous()"], "external_dependencies": {"modules": ["FilterListIterator"], "class_members": [{"name": "list", "type": "variable"}, {"name": "truePred", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the FilterListIterator with a true predicate."}, {"name": "testWalkLists", "primary_tested": ["FilterListIterator.next()", "FilterListIterator.previous()"], "external_dependencies": {"modules": ["FilterListIterator"], "class_members": [{"name": "list", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the walkLists method to ensure it works correctly."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/multimap/ArrayListValuedHashMapTest.java", "testclass_name": "ArrayListValuedHashMapTest", "dependencies": ["package org.apache.commons.collections4.multimap;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotSame;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.HashMap;", "import java.util.List;", "import java.util.ListIterator;", "import java.util.Map;", "import org.apache.commons.collections4.ListValuedMap;", "import org.apache.commons.collections4.MultiValuedMap;", "import org.apache.commons.collections4.collection.AbstractCollectionTest;", "import org.junit.jupiter.api.Test;"], "name": "ArrayListValuedHashMapTest", "description": "Unit tests for the ArrayListValuedHashMap class, focusing on its functionality and behavior.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testArrayListValuedHashMap", "primary_tested": ["ArrayListValuedHashMap.get(K)"], "associated_methods": [], "external_dependencies": {"modules": ["ListValuedMap", "HashMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the creation and basic functionality of ArrayListValuedHashMap."}, {"name": "testEqualsHashCodeContract", "primary_tested": ["MultiValuedMap.equals(Object)", "MultiValuedMap.hashCode()"], "associated_methods": [], "external_dependencies": {"modules": ["MultiValuedMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the equals and hashCode contract for MultiValuedMap."}, {"name": "testListValuedMapAdd", "primary_tested": ["ListValuedMap.get(K)", "List.add(V)"], "associated_methods": [], "external_dependencies": {"modules": ["ListValuedMap", "List"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the addition of elements to a ListValuedMap."}, {"name": "testListValuedMapAddViaListIterator", "primary_tested": ["ListValuedMap.get(K)", "ListIterator.add(V)"], "associated_methods": [], "external_dependencies": {"modules": ["ListValuedMap", "ListIterator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the addition of elements to a ListValuedMap via ListIterator."}, {"name": "testListValuedMapEqualsHashCodeContract", "primary_tested": ["ListValuedMap.equals(Object)", "ListValuedMap.hashCode()"], "associated_methods": [], "external_dependencies": {"modules": ["ListValuedMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the equals and hashCode contract for ListValuedMap."}, {"name": "testListValuedMapRemove", "primary_tested": ["ListValuedMap.get(K)", "List.remove(int)"], "associated_methods": [], "external_dependencies": {"modules": ["ListValuedMap", "List"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the removal of elements from a ListValuedMap."}, {"name": "testListValuedMapRemoveViaListIterator", "primary_tested": ["ListValuedMap.get(K)", "ListIterator.remove()"], "associated_methods": [], "external_dependencies": {"modules": ["ListValuedMap", "ListIterator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the removal of elements from a ListValuedMap via ListIterator."}, {"name": "testTrimToSize", "primary_tested": ["ArrayListValuedHashMap.trimToSize()"], "associated_methods": [], "external_dependencies": {"modules": ["ArrayListValuedHashMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the trimToSize method of ArrayListValuedHashMap."}, {"name": "testValuesListIteratorMethods", "primary_tested": ["ListValuedMap.get(K)", "ListIterator.hasNext()", "ListIterator.next()", "ListIterator.hasPrevious()", "ListIterator.previous()", "ListIterator.nextIndex()", "ListIterator.previousIndex()", "ListIterator.set(V)"], "associated_methods": [], "external_dependencies": {"modules": ["ListValuedMap", "ListIterator", "Arrays"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the methods of ListIterator on values in a ListValuedMap."}, {"name": "testWrappedListAdd", "primary_tested": ["ListValuedMap.get(K)", "List.add(int,V)", "List.set(int,V)"], "associated_methods": [], "external_dependencies": {"modules": ["ListValuedMap", "List"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the addition of elements to a wrapped list in a ListValuedMap."}, {"name": "testWrappedListAddAll", "primary_tested": ["ListValuedMap.get(K)", "List.addAll(int,Collection)", "List.get(int)", "List.indexOf(Object)", "List.lastIndexOf(Object)", "List.subList(int,int)"], "associated_methods": [], "external_dependencies": {"modules": ["ListValuedMap", "List", "Arrays"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the addition of multiple elements to a wrapped list in a ListValuedMap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/ShapeTest.java", "testclass_name": "ShapeTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNotEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.Arrays;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.CsvSource;"], "name": "ShapeTest", "description": "Unit tests for the Shape class, which is part of the Bloom filter implementation in Apache Commons Collections.", "class_members": {"variables": [{"name": "shape", "type": "Shape"}]}, "fixtures": [], "test_cases": [{"name": "testBadNumberOfBits", "primary_tested": ["Shape.fromKM(int,int)", "Shape.fromNM(int,int)", "Shape.fromNMK(int,int,int)", "Shape.fromPMK(double,int,int)"], "external_dependencies": {"modules": ["IllegalArgumentException"], "class_members": []}, "category": "unit", "description": "Tests that if the number of bits is less than 1 an exception is thrown."}, {"name": "testBadNumberOfHashFunctions", "primary_tested": ["Shape.fromKM(int,int)", "Shape.fromNMK(int,int,int)", "Shape.fromPMK(double,int,int)", "Shape.fromNM(int,int)"], "external_dependencies": {"modules": ["IllegalArgumentException"], "class_members": []}, "category": "unit", "description": "Tests that if the number of hash functions is less than 1 an exception is thrown."}, {"name": "testBadNumberOfItems", "primary_tested": ["Shape.fromNM(int,int)", "Shape.fromNMK(int,int,int)", "Shape.fromNP(int,double)"], "external_dependencies": {"modules": ["IllegalArgumentException"], "class_members": []}, "category": "unit", "description": "Tests that if the number of items less than 1 an IllegalArgumentException is thrown."}, {"name": "testBadProbability", "primary_tested": ["Shape.fromNMK(int,int,int)", "Shape.fromNP(int,double)"], "external_dependencies": {"modules": ["IllegalArgumentException", "Double"], "class_members": []}, "category": "unit", "description": "Tests that if the calculated probability is greater than or equal to 1 an IllegalArgumentException is thrown."}, {"name": "testEqualsAndHashCode", "primary_tested": ["Shape.fromKM(int,int)"], "associated_methods": ["Shape.hashCode()", "Shape.equals(Object)"], "external_dependencies": {"modules": ["Arrays", "Integer"], "class_members": []}, "category": "unit", "description": "Test equality of shape."}, {"name": "testEstimateN", "primary_tested": ["Shape.estimateN(int)"], "external_dependencies": {"modules": ["Math"], "class_members": [{"name": "shape", "type": "variable"}]}, "category": "unit", "description": "Tests the estimateN method of the Shape class."}, {"name": "testFromKM", "primary_tested": ["Shape.fromKM(int,int)"], "external_dependencies": {"modules": ["IllegalArgumentException"], "class_members": []}, "category": "unit", "description": "Tests that if the number of bits less than 1 an IllegalArgumentException is thrown."}, {"name": "testFromNM", "primary_tested": ["Shape.fromNM(int,int)"], "associated_methods": ["Shape.getNumberOfBits()", "Shape.getNumberOfHashFunctions()", "Shape.getProbability(int)"], "external_dependencies": {"modules": ["IllegalArgumentException"], "class_members": []}, "category": "unit", "description": "Tests that the number of items and number of bits is passed the other values are calculated correctly."}, {"name": "testFromNMK", "primary_tested": ["Shape.fromNMK(int,int,int)"], "associated_methods": ["Shape.getNumberOfBits()", "Shape.getNumberOfHashFunctions()", "Shape.getProbability(int)"], "external_dependencies": {"modules": ["IllegalArgumentException", "Integer"], "class_members": []}, "category": "unit", "description": "Tests that when the number of items, number of bits and number of hash functions is passed the values are calculated correctly."}, {"name": "testFromNP", "primary_tested": ["Shape.fromNP(int,double)"], "associated_methods": ["Shape.getNumberOfBits()", "Shape.getNumberOfHashFunctions()"], "external_dependencies": {"modules": ["IllegalArgumentException", "Math"], "class_members": []}, "category": "unit", "description": "Tests the calculated values of calling the constructor with the probability, number of bits and number of hash functions."}, {"name": "testFromPMK", "primary_tested": ["Shape.fromPMK(double,int,int)"], "associated_methods": ["Shape.getNumberOfBits()", "Shape.getNumberOfHashFunctions()", "Shape.getProbability(int)"], "external_dependencies": {"modules": ["IllegalArgumentException", "Math"], "class_members": []}, "category": "unit", "description": "Tests the calculated values of calling the constructor with the probability, number of bits and number of hash functions."}, {"name": "testGetProbability", "primary_tested": ["Shape.getProbability(int)"], "external_dependencies": {"modules": ["Math", "IllegalArgumentException"], "class_members": [{"name": "shape", "type": "variable"}]}, "category": "unit", "description": "Tests the getProbability method of the Shape class."}, {"name": "testIsSparse", "primary_tested": ["Shape.fromKM(int,int)", "Shape.isSparse(int)"], "external_dependencies": {"modules": ["Long", "Integer"], "class_members": []}, "category": "unit", "description": "Tests the isSparse method of the Shape class."}, {"name": "testProbability", "primary_tested": ["Shape.fromNMK(int,int,int)", "Shape.getNumberOfBits()", "Shape.getNumberOfHashFunctions()", "Shape.getProbability(int)"], "external_dependencies": {"modules": [], "class_members": []}, "category": "unit", "description": "Tests that the probability is calculated correctly."}, {"name": "testToString", "primary_tested": ["Shape.fromKM(int,int)", "Shape.toString()"], "external_dependencies": {"modules": [], "class_members": []}, "category": "unit", "description": "Tests the toString method of the Shape class."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/LayeredBloomFilterTest.java", "testclass_name": "LayeredBloomFilterTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.assertArrayEquals;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.time.Duration;", "import java.time.Instant;", "import java.util.ArrayList;", "import java.util.Deque;", "import java.util.Iterator;", "import java.util.List;", "import java.util.function.Consumer;", "import java.util.function.Predicate;", "import java.util.function.Supplier;", "import org.apache.commons.collections4.bloomfilter.LayerManager.Cleanup;", "import org.apache.commons.collections4.bloomfilter.LayerManager.ExtendCheck;", "import org.junit.jupiter.api.Test;"], "name": "LayeredBloomFilterTest", "description": "Tests for the LayeredBloomFilter class, focusing on layered processing, cleanup, expiration, and various find operations.", "class_members": {"variables": [{"name": "dbgInstrument", "type": "static final List<String>"}], "methods": [{"name": "createEmptyFilter", "signature": "protected LayeredBloomFilter<BloomFilter> createEmptyFilter(Shape shape)"}, {"name": "makeFilter", "signature": "protected BloomFilter makeFilter(Hasher h)"}, {"name": "makeFilter", "signature": "protected BloomFilter makeFilter(IndexExtractor p)"}, {"name": "makeFilter", "signature": "protected BloomFilter makeFilter(int... values)"}, {"name": "setupFindTest", "signature": "private LayeredBloomFilter<BloomFilter> setupFindTest()"}], "nested_classes": [{"name": "AdvanceOnTimeQuanta", "description": "A Predicate that advances after a quantum of time."}, {"name": "CleanByTime", "description": "A Consumer that cleans the list based on how long each filter has been in the list."}, {"name": "NumberedBloomFilter", "description": "A Bloom filter implementation that includes a value and sequence number."}, {"name": "TimestampedBloomFilter", "description": "A Bloom filter implementation that tracks the creation time."}]}, "fixtures": [], "test_cases": [{"name": "testCardinalityAndIsEmpty", "primary_tested": ["LayeredBloomFilter.testCardinalityAndIsEmpty(LayeredBloomFilter)"], "external_dependencies": {"modules": ["LayerManager", "SimpleBloomFilter", "LayeredBloomFilter"], "class_members": [{"name": "createEmptyFilter", "type": "method"}]}, "category": "unit", "description": "Tests the cardinality and emptiness of the LayeredBloomFilter."}, {"name": "testCleanup", "primary_tested": ["LayeredBloomFilter.cleanup()"], "associated_methods": ["NumberedBloomFilter.value--", "LayeredBloomFilter.getDepth()", "LayeredBloomFilter.merge(Hasher)", "LayeredBloomFilter.next()", "LayeredBloomFilter.get(int)"], "external_dependencies": {"modules": ["LayerManager", "NumberedBloomFilter", "LayeredBloomFilter", "TestingHashers"], "class_members": [{"name": "createEmptyFilter", "type": "method"}]}, "category": "unit", "description": "Tests the cleanup functionality of the LayeredBloomFilter."}, {"name": "testEstimateUnionCrossTypes", "primary_tested": ["BloomFilter.estimateUnion(BloomFilter)"], "external_dependencies": {"modules": ["BloomFilter", "DefaultBloomFilterTest.SparseDefaultBloomFilter", "TestingHashers"]}, "category": "unit", "description": "Tests the estimated union calculations between different types of BloomFilters."}, {"name": "testExpiration", "primary_tested": ["LayeredBloomFilter.processBloomFilters(Predicate<BloomFilter>)"], "associated_methods": ["TimestampedBloomFilter.getTimestamp()"], "external_dependencies": {"modules": ["LayeredBloomFilter", "TimestampedBloomFilter", "TestingHashers"], "class_members": [{"name": "dbgInstrument", "type": "variable"}]}, "category": "unit", "description": "Tests the expiration functionality of the LayeredBloomFilter."}, {"name": "testFindBitMapExtractor", "primary_tested": ["LayeredBloomFilter.find(BitMapExtractor)"], "associated_methods": ["BitMapExtractor.fromIndexExtractor(IndexExtractor, int)"], "external_dependencies": {"modules": ["LayeredBloomFilter", "BitMapExtractor", "TestingHashers"], "class_members": [{"name": "setupFindTest", "type": "method"}]}, "category": "unit", "description": "Tests the find functionality of the LayeredBloomFilter using BitMapExtractor."}, {"name": "testFindBloomFilter", "primary_tested": ["LayeredBloomFilter.find(Hasher)"], "external_dependencies": {"modules": ["LayeredBloomFilter", "TestingHashers"], "class_members": [{"name": "setupFindTest", "type": "method"}]}, "category": "unit", "description": "Tests the find functionality of the LayeredBloomFilter using BloomFilter."}, {"name": "testFindIndexExtractor", "primary_tested": ["LayeredBloomFilter.find(IndexExtractor)"], "external_dependencies": {"modules": ["LayeredBloomFilter", "TestingHashers"], "class_members": [{"name": "setupFindTest", "type": "method"}]}, "category": "unit", "description": "Tests the find functionality of the LayeredBloomFilter using IndexExtractor."}, {"name": "testGetLayer", "primary_tested": ["LayeredBloomFilter.get(int)"], "associated_methods": ["BloomFilter.asBitMapArray()"], "external_dependencies": {"modules": ["LayeredBloomFilter", "SimpleBloomFilter", "TestingHashers"], "class_members": [{"name": "setupFindTest", "type": "method"}]}, "category": "unit", "description": "Tests the retrieval of a specific layer from the LayeredBloomFilter."}, {"name": "testMultipleFilters", "primary_tested": ["LayeredBloomFilter.contains(BloomFilter)", "LayeredBloomFilter.copy().contains(BloomFilter)", "LayeredBloomFilter.flatten().contains(BloomFilter)"], "associated_methods": ["LayeredBloomFilter.getDepth()"], "external_dependencies": {"modules": ["LayeredBloomFilter", "TestingHashers"], "class_members": [{"name": "makeFilter", "type": "method"}]}, "category": "unit", "description": "Tests the functionality of the LayeredBloomFilter with multiple filters."}, {"name": "testNext", "primary_tested": ["LayeredBloomFilter.next()"], "associated_methods": ["LayeredBloomFilter.getDepth()", "LayeredBloomFilter.get(int)"], "external_dependencies": {"modules": ["LayeredBloomFilter", "LayerManager", "SimpleBloomFilter", "TestingHashers"]}, "category": "unit", "description": "Tests the next functionality of the LayeredBloomFilter."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/multimap/UnmodifiableMultiValuedMapTest.java", "testclass_name": "UnmodifiableMultiValuedMapTest", "dependencies": ["package org.apache.commons.collections4.multimap;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.HashMap;", "import java.util.Iterator;", "import java.util.List;", "import java.util.Map;", "import java.util.Map.Entry;", "import java.util.Set;", "import org.apache.commons.collections4.MapIterator;", "import org.apache.commons.collections4.MultiSet;", "import org.apache.commons.collections4.MultiValuedMap;", "import org.apache.commons.collections4.Unmodifiable;", "import org.apache.commons.collections4.collection.AbstractCollectionTest;", "import org.junit.jupiter.api.Test;"], "name": "UnmodifiableMultiValuedMapTest", "description": "Tests for the UnmodifiableMultiValuedMap class, focusing on its unmodifiable behavior and exceptions thrown for modification attempts.", "class_members": {"variables": [], "methods": [{"name": "assertMapContainsAllValues", "signature": "void assertMapContainsAllValues(MultiValuedMap<K, V> map)"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testAddException", "primary_tested": ["MultiValuedMap.put(K,V)"], "external_dependencies": {"modules": ["MultiValuedMap", "UnsupportedOperationException"], "class_members": []}, "category": "unit", "description": "Tests that an UnsupportedOperationException is thrown when attempting to add an element to an unmodifiable map."}, {"name": "testClearException", "primary_tested": ["MultiValuedMap.clear()"], "associated_methods": ["UnmodifiableMultiValuedMapTest.assertMapContainsAllValues(MultiValuedMap<K, V>)"], "external_dependencies": {"modules": ["MultiValuedMap", "UnsupportedOperationException"], "class_members": []}, "category": "unit", "description": "Tests that an UnsupportedOperationException is thrown when attempting to clear an unmodifiable map."}, {"name": "testDecorateFactory", "primary_tested": ["UnmodifiableMultiValuedMap.unmodifiableMultiValuedMap(MultiValuedMap<K, V>)"], "external_dependencies": {"modules": ["UnmodifiableMultiValuedMap", "MultiValuedMap"], "class_members": []}, "category": "unit", "description": "Tests that the decorate factory method returns the same map instance."}, {"name": "testDecoratorFactoryNullMap", "primary_tested": ["UnmodifiableMultiValuedMap.unmodifiableMultiValuedMap(MultiValuedMap<K, V>)"], "external_dependencies": {"modules": ["UnmodifiableMultiValuedMap", "NullPointerException"], "class_members": []}, "category": "unit", "description": "Tests that a NullPointerException is thrown when attempting to decorate a null map."}, {"name": "testPutAllException", "primary_tested": ["MultiValuedMap.putAll(MultiValuedMap<K, V>)", "MultiValuedMap.putAll(Map<K, V>)", "MultiValuedMap.putAll(K, Collection<V>)"], "external_dependencies": {"modules": ["MultiValuedMap", "UnsupportedOperationException", "ArrayListValuedHashMap", "HashMap", "Arrays"], "class_members": []}, "category": "unit", "description": "Tests that an UnsupportedOperationException is thrown when attempting to use putAll methods on an unmodifiable map."}, {"name": "testRemoveException", "primary_tested": ["MultiValuedMap.remove(Object)"], "associated_methods": ["UnmodifiableMultiValuedMapTest.assertMapContainsAllValues(MultiValuedMap<K, V>)"], "external_dependencies": {"modules": ["MultiValuedMap", "UnsupportedOperationException"], "class_members": []}, "category": "unit", "description": "Tests that an UnsupportedOperationException is thrown when attempting to remove an element from an unmodifiable map."}, {"name": "testRemoveMappingException", "primary_tested": ["MultiValuedMap.removeMapping(Object, Object)"], "associated_methods": ["UnmodifiableMultiValuedMapTest.assertMapContainsAllValues(MultiValuedMap<K, V>)"], "external_dependencies": {"modules": ["MultiValuedMap", "UnsupportedOperationException"], "class_members": []}, "category": "unit", "description": "Tests that an UnsupportedOperationException is thrown when attempting to remove a mapping from an unmodifiable map."}, {"name": "testUnmodifiable", "primary_tested": ["UnmodifiableMultiValuedMap.makeObject()", "UnmodifiableMultiValuedMap.makeFullMap()"], "external_dependencies": {"modules": ["UnmodifiableMultiValuedMap", "Unmodifiable"], "class_members": []}, "category": "unit", "description": "Tests that the created map instances are indeed unmodifiable."}, {"name": "testUnmodifiableAsMap", "primary_tested": ["MultiValuedMap.asMap()"], "external_dependencies": {"modules": ["MultiValuedMap", "UnsupportedOperationException", "Arrays"], "class_members": []}, "category": "unit", "description": "Tests that the asMap view of the unmodifiable map throws UnsupportedOperationException for modification attempts."}, {"name": "testUnmodifiableEntries", "primary_tested": ["MultiValuedMap.entries()"], "external_dependencies": {"modules": ["MultiValuedMap", "UnsupportedOperationException"], "class_members": []}, "category": "unit", "description": "Tests that the entries collection of the unmodifiable map throws UnsupportedOperationException for modification attempts."}, {"name": "testUnmodifiableKeys", "primary_tested": ["MultiValuedMap.keys()"], "external_dependencies": {"modules": ["MultiValuedMap", "UnsupportedOperationException"], "class_members": []}, "category": "unit", "description": "Tests that the keys collection of the unmodifiable map throws UnsupportedOperationException for modification attempts."}, {"name": "testUnmodifiableKeySet", "primary_tested": ["MultiValuedMap.keySet()"], "external_dependencies": {"modules": ["MultiValuedMap", "UnsupportedOperationException"], "class_members": []}, "category": "unit", "description": "Tests that the keySet of the unmodifiable map throws UnsupportedOperationException for modification attempts."}, {"name": "testUnmodifiableMapIterator", "primary_tested": ["MultiValuedMap.mapIterator()"], "external_dependencies": {"modules": ["MultiValuedMap", "UnsupportedOperationException"], "class_members": []}, "category": "unit", "description": "Tests that the mapIterator of the unmodifiable map throws UnsupportedOperationException for modification attempts."}, {"name": "testUnmodifiableValues", "primary_tested": ["MultiValuedMap.values()"], "external_dependencies": {"modules": ["MultiValuedMap", "UnsupportedOperationException"], "class_members": []}, "category": "unit", "description": "Tests that the values collection of the unmodifiable map throws UnsupportedOperationException for modification attempts."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/SetOperationsTest.java", "testclass_name": "SetOperationsTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import java.util.function.ToDoubleBiFunction;", "import java.util.function.ToIntBiFunction;", "import org.junit.jupiter.api.Test;"], "name": "SetOperationsTest", "description": "Unit tests for various set operations on BloomFilter objects.", "class_members": {"variables": [{"name": "shape", "type": "Shape"}], "methods": [{"name": "assertSymmetricOperation", "signature": "static void assertSymmetricOperation(double, ToDoubleBiFunction<BloomFilter, BloomFilter>, BloomFilter, BloomFilter)"}, {"name": "assertSymmetricOperation", "signature": "static void assertSymmetricOperation(int, ToIntBiFunction<BloomFilter, BloomFilter>, BloomFilter, BloomFilter)"}, {"name": "createFilter", "signature": "BloomFilter createFilter(Shape, Hasher)"}, {"name": "createFilter", "signature": "BloomFilter createFilter(Shape, IndexExtractor)"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testAndCardinality", "primary_tested": ["SetOperations.andCardinality(BloomFilter,BloomFilter)"], "associated_methods": ["SetOperationsTest.assertSymmetricOperation(int,ToIntBiFunction<BloomFilter,BloomFilter>,BloomFilter,BloomFilter)"], "external_dependencies": {"modules": ["Shape", "BloomFilter", "IndexExtractor", "SetOperations"], "class_members": [{"name": "shape", "type": "variable"}, {"name": "createFilter", "type": "method"}]}, "category": "unit", "description": "Tests the AND cardinality operation on BloomFilter objects."}, {"name": "testAndCardinalityWithDifferentLengthFilters", "primary_tested": ["SetOperations.andCardinality(BloomFilter,BloomFilter)"], "associated_methods": ["SetOperationsTest.assertSymmetricOperation(int,ToIntBiFunction<BloomFilter,BloomFilter>,BloomFilter,BloomFilter)"], "external_dependencies": {"modules": ["Shape", "BloomFilter", "IndexExtractor", "SetOperations"], "class_members": [{"name": "shape", "type": "variable"}, {"name": "createFilter", "type": "method"}]}, "category": "unit", "description": "Tests the AND cardinality operation on BloomFilter objects with different lengths."}, {"name": "testCommutativityOnMismatchedSizes", "primary_tested": ["SetOperations.orCardinality(BitMapExtractor,BitMapExtractor)", "SetOperations.xorCardinality(BitMapExtractor,BitMapExtractor)", "SetOperations.andCardinality(BitMapExtractor,BitMapExtractor)", "SetOperations.hammingDistance(BitMapExtractor,BitMapExtractor)", "SetOperations.cosineDistance(BitMapExtractor,BitMapExtractor)", "SetOperations.cosineSimilarity(BitMapExtractor,BitMapExtractor)", "SetOperations.jaccardDistance(BitMapExtractor,BitMapExtractor)", "SetOperations.jaccardSimilarity(BitMapExtractor,BitMapExtractor)"], "external_dependencies": {"modules": ["BitMapExtractor", "SetOperations"], "class_members": []}, "category": "unit", "description": "Tests the commutativity of various set operations on BitMapExtractor objects with mismatched sizes."}, {"name": "testCosineDistance", "primary_tested": ["SetOperations.cosineDistance(BloomFilter,BloomFilter)"], "associated_methods": ["SetOperationsTest.assertSymmetricOperation(double,ToDoubleBiFunction<BloomFilter,BloomFilter>,BloomFilter,BloomFilter)"], "external_dependencies": {"modules": ["Shape", "BloomFilter", "TestingHashers", "SetOperations"], "class_members": [{"name": "shape", "type": "variable"}, {"name": "createFilter", "type": "method"}]}, "category": "unit", "description": "Tests the calculation of Cosine distance on BloomFilter objects."}, {"name": "testCosineSimilarity", "primary_tested": ["SetOperations.cosineSimilarity(BloomFilter,BloomFilter)"], "associated_methods": ["SetOperationsTest.assertSymmetricOperation(double,ToDoubleBiFunction<BloomFilter,BloomFilter>,BloomFilter,BloomFilter)"], "external_dependencies": {"modules": ["Shape", "BloomFilter", "TestingHashers", "SetOperations"], "class_members": [{"name": "shape", "type": "variable"}, {"name": "createFilter", "type": "method"}]}, "category": "unit", "description": "Tests the calculation of Cosine similarity on BloomFilter objects."}, {"name": "testHammingDistance", "primary_tested": ["SetOperations.hammingDistance(BloomFilter,BloomFilter)"], "associated_methods": ["SetOperationsTest.assertSymmetricOperation(int,ToIntBiFunction<BloomFilter,BloomFilter>,BloomFilter,BloomFilter)"], "external_dependencies": {"modules": ["Shape", "BloomFilter", "TestingHashers", "SetOperations"], "class_members": [{"name": "shape", "type": "variable"}, {"name": "createFilter", "type": "method"}]}, "category": "unit", "description": "Tests the calculation of Hamming distance on BloomFilter objects."}, {"name": "testJaccardDistance", "primary_tested": ["SetOperations.jaccardDistance(BloomFilter,BloomFilter)"], "associated_methods": ["SetOperationsTest.assertSymmetricOperation(double,ToDoubleBiFunction<BloomFilter,BloomFilter>,BloomFilter,BloomFilter)"], "external_dependencies": {"modules": ["Shape", "BloomFilter", "TestingHashers", "SetOperations"], "class_members": [{"name": "shape", "type": "variable"}, {"name": "createFilter", "type": "method"}]}, "category": "unit", "description": "Tests the calculation of Jaccard distance on BloomFilter objects."}, {"name": "testJaccardSimilarity", "primary_tested": ["SetOperations.jaccardSimilarity(BloomFilter,BloomFilter)"], "associated_methods": ["SetOperationsTest.assertSymmetricOperation(double,ToDoubleBiFunction<BloomFilter,BloomFilter>,BloomFilter,BloomFilter)"], "external_dependencies": {"modules": ["Shape", "BloomFilter", "TestingHashers", "SetOperations"], "class_members": [{"name": "shape", "type": "variable"}, {"name": "createFilter", "type": "method"}]}, "category": "unit", "description": "Tests the calculation of Jaccard similarity on BloomFilter objects."}, {"name": "testOrCardinality", "primary_tested": ["SetOperations.orCardinality(BloomFilter,BloomFilter)"], "associated_methods": ["SetOperationsTest.assertSymmetricOperation(int,ToIntBiFunction<BloomFilter,BloomFilter>,BloomFilter,BloomFilter)"], "external_dependencies": {"modules": ["Shape", "BloomFilter", "IndexExtractor", "SetOperations"], "class_members": [{"name": "shape", "type": "variable"}, {"name": "createFilter", "type": "method"}]}, "category": "unit", "description": "Tests the OR cardinality operation on BloomFilter objects."}, {"name": "testOrCardinalityWithDifferentLengthFilters", "primary_tested": ["SetOperations.orCardinality(BloomFilter,BloomFilter)"], "associated_methods": ["SetOperationsTest.assertSymmetricOperation(int,ToIntBiFunction<BloomFilter,BloomFilter>,BloomFilter,BloomFilter)"], "external_dependencies": {"modules": ["Shape", "BloomFilter", "IndexExtractor", "SetOperations"], "class_members": [{"name": "shape", "type": "variable"}, {"name": "createFilter", "type": "method"}]}, "category": "unit", "description": "Tests the OR cardinality operation on BloomFilter objects with different lengths."}, {"name": "testXorCardinality", "primary_tested": ["SetOperations.xorCardinality(BloomFilter,BloomFilter)"], "associated_methods": ["SetOperationsTest.assertSymmetricOperation(int,ToIntBiFunction<BloomFilter,BloomFilter>,BloomFilter,BloomFilter)"], "external_dependencies": {"modules": ["Shape", "BloomFilter", "IndexExtractor", "SetOperations"], "class_members": [{"name": "shape", "type": "variable"}, {"name": "createFilter", "type": "method"}]}, "category": "unit", "description": "Tests the XOR cardinality operation on BloomFilter objects."}, {"name": "testXorCardinalityWithDifferentLengthFilters", "primary_tested": ["SetOperations.xorCardinality(BloomFilter,BloomFilter)"], "associated_methods": ["SetOperationsTest.assertSymmetricOperation(int,ToIntBiFunction<BloomFilter,BloomFilter>,BloomFilter,BloomFilter)"], "external_dependencies": {"modules": ["Shape", "BloomFilter", "IndexExtractor", "SetOperations"], "class_members": [{"name": "shape", "type": "variable"}, {"name": "createFilter", "type": "method"}]}, "category": "unit", "description": "Tests the XOR cardinality operation on BloomFilter objects with different lengths."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/keyvalue/MultiKeyTest.java", "testclass_name": "MultiKeyTest", "dependencies": ["package org.apache.commons.collections4.keyvalue;", "import static org.junit.jupiter.api.Assertions.assertArrayEquals;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNotEquals;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertNotSame;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.DynamicTest.dynamicTest;", "import java.io.ByteArrayInputStream;", "import java.io.ByteArrayOutputStream;", "import java.io.IOException;", "import java.io.ObjectInputStream;", "import java.io.ObjectOutputStream;", "import java.io.Serializable;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.HashMap;", "import java.util.Map;", "import org.apache.commons.lang3.StringUtils;", "import org.junit.jupiter.api.DynamicTest;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.api.TestFactory;"], "name": "MultiKeyTest", "description": "Unit tests for the MultiKey class, focusing on constructors, equality, serialization, and hash code.", "class_members": {"variables": [{"name": "ONE", "type": "Integer"}, {"name": "TWO", "type": "Integer"}, {"name": "THREE", "type": "Integer"}, {"name": "FOUR", "type": "Integer"}, {"name": "FIVE", "type": "Integer"}], "nested_classes": [{"name": "DerivedMultiKey", "description": "A derived class extending MultiKey with additional methods to get the first and second keys."}, {"name": "SystemHashCodeSimulatingKey", "description": "A class simulating a system hash code change after deserialization."}]}, "test_cases": [{"name": "testConstructors", "primary_tested": ["MultiKey.MultiKey(Integer,Integer)", "MultiKey.MultiKey(Integer,Integer,Integer)", "MultiKey.MultiKey(Integer,Integer,Integer,Integer)", "MultiKey.MultiKey(Integer,Integer,Integer,Integer,Integer)", "MultiKey.MultiKey(Integer[],boolean)"], "external_dependencies": {"modules": ["MultiKey", "Integer"], "class_members": [{"name": "ONE", "type": "variable"}, {"name": "TWO", "type": "variable"}, {"name": "THREE", "type": "variable"}, {"name": "FOUR", "type": "variable"}, {"name": "FIVE", "type": "variable"}]}, "category": "unit", "description": "Tests the constructors of MultiKey with different numbers of arguments and an array constructor."}, {"name": "testConstructorsByArray", "primary_tested": ["MultiKey.MultiKey(Integer[],boolean)"], "external_dependencies": {"modules": ["MultiKey", "Integer"], "class_members": [{"name": "ONE", "type": "variable"}, {"name": "TWO", "type": "variable"}, {"name": "THREE", "type": "variable"}, {"name": "FOUR", "type": "variable"}, {"name": "FIVE", "type": "variable"}]}, "category": "unit", "description": "Tests the array constructor of MultiKey with different configurations."}, {"name": "testConstructorsByArrayNull", "primary_tested": ["MultiKey.MultiKey(Integer[],boolean)"], "external_dependencies": {"modules": ["MultiKey", "Integer"]}, "category": "unit", "description": "Tests the array constructor of MultiKey with null input, expecting a NullPointerException."}, {"name": "testEquals", "primary_tested": ["MultiKey.equals(Object)"], "external_dependencies": {"modules": ["MultiKey", "Integer", "StringUtils"], "class_members": [{"name": "ONE", "type": "variable"}, {"name": "TWO", "type": "variable"}]}, "category": "unit", "description": "Tests the equality method of MultiKey with different instances."}, {"name": "testEqualsAfterSerialization", "primary_tested": ["MultiKey.equals(Object)"], "external_dependencies": {"modules": ["MultiKey", "Integer", "SystemHashCodeSimulatingKey", "HashMap", "ByteArrayOutputStream", "ObjectOutputStream", "ByteArrayInputStream", "ObjectInputStream"], "class_members": [{"name": "ONE", "type": "variable"}, {"name": "TWO", "type": "variable"}]}, "category": "unit", "description": "Tests the equality of MultiKey after serialization and deserialization, simulating a system hash code change."}, {"name": "testEqualsAfterSerializationOfDerivedClass", "primary_tested": ["DerivedMultiKey.equals(Object)"], "external_dependencies": {"modules": ["DerivedMultiKey", "ByteArrayOutputStream", "ObjectOutputStream", "ByteArrayInputStream", "ObjectInputStream"]}, "category": "unit", "description": "Tests the equality of DerivedMultiKey after serialization and deserialization."}, {"name": "testGetIndexed", "primary_tested": ["MultiKey.getKey(int)"], "external_dependencies": {"modules": ["MultiKey", "Integer"], "class_members": [{"name": "ONE", "type": "variable"}, {"name": "TWO", "type": "variable"}]}, "category": "unit", "description": "Tests the getKey method of MultiKey with different indices."}, {"name": "testGetKeysArrayConstructorCloned", "primary_tested": ["MultiKey.getKeys()"], "external_dependencies": {"modules": ["MultiKey", "Integer"], "class_members": [{"name": "ONE", "type": "variable"}, {"name": "TWO", "type": "variable"}]}, "category": "unit", "description": "Tests the getKeys method of MultiKey with a cloned array constructor."}, {"name": "testGetKeysArrayConstructorNonCloned", "primary_tested": ["MultiKey.getKeys()"], "external_dependencies": {"modules": ["MultiKey", "Integer"], "class_members": [{"name": "ONE", "type": "variable"}, {"name": "TWO", "type": "variable"}]}, "category": "unit", "description": "Tests the getKeys method of MultiKey with a non-cloned array constructor."}, {"name": "testGetKeysSimpleConstructor", "primary_tested": ["MultiKey.getKeys()"], "external_dependencies": {"modules": ["MultiKey", "Integer"], "class_members": [{"name": "ONE", "type": "variable"}, {"name": "TWO", "type": "variable"}]}, "category": "unit", "description": "Tests the getKeys method of MultiKey with a simple constructor."}, {"name": "testHashCode", "primary_tested": ["MultiKey.hashCode()"], "external_dependencies": {"modules": ["MultiKey", "Integer"], "class_members": [{"name": "ONE", "type": "variable"}, {"name": "TWO", "type": "variable"}]}, "category": "unit", "description": "Tests the hash code method of MultiKey with different instances."}, {"name": "testSize", "primary_tested": ["MultiKey.size()"], "external_dependencies": {"modules": ["MultiKey", "Integer"], "class_members": [{"name": "ONE", "type": "variable"}, {"name": "TWO", "type": "variable"}, {"name": "THREE", "type": "variable"}, {"name": "FOUR", "type": "variable"}, {"name": "FIVE", "type": "variable"}]}, "category": "unit", "description": "Tests the size method of MultiKey with different numbers of keys."}, {"name": "testTwoArgCtor", "primary_tested": ["MultiKey.MultiKey(MultiKeyTest,MultiKeyTest)"], "external_dependencies": {"modules": ["MultiKey", "MultiKeyTest"]}, "category": "unit", "description": "Tests the two-argument constructor of MultiKey with instances of MultiKeyTest."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java", "testclass_name": "EmptyPropertiesTest", "dependencies": ["package org.apache.commons.collections4.properties;", "import static org.junit.jupiter.api.Assertions.assertArrayEquals;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.fail;", "import java.io.ByteArrayInputStream;", "import java.io.ByteArrayOutputStream;", "import java.io.IOException;", "import java.io.PrintStream;", "import java.io.PrintWriter;", "import java.io.UnsupportedEncodingException;", "import java.nio.charset.StandardCharsets;", "import java.util.HashMap;", "import java.util.Properties;", "import org.apache.commons.io.input.NullReader;", "import org.apache.commons.lang3.ArrayUtils;", "import org.apache.commons.lang3.StringUtils;", "import org.junit.jupiter.api.Test;"]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/LayerManagerTest.java", "testclass_name": "LayerManagerTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.assertArrayEquals;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotEquals;", "import static org.junit.jupiter.api.Assertions.assertNotSame;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Deque;", "import java.util.LinkedList;", "import java.util.List;", "import java.util.NoSuchElementException;", "import java.util.function.Consumer;", "import java.util.function.Predicate;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.ValueSource;"], "name": "LayerManagerTest", "description": "Unit tests for the LayerManager class, focusing on various functionalities such as advancing layers, building, clearing, copying, and managing BloomFilters.", "class_members": {"variables": [{"name": "shape", "type": "Shape"}], "methods": [{"name": "testingBuilder", "signature": "LayerManager.Builder<BloomFilter> testingBuilder()"}]}, "fixtures": [], "test_cases": [{"name": "testAdvanceOnCount", "primary_tested": ["LayerManager.ExtendCheck.advanceOnCount(int)"], "associated_methods": ["LayerManager.getTarget()", "BloomFilter.merge(Hasher)", "LayerManager.ExtendCheck.advanceOnCount(int)"], "external_dependencies": {"modules": ["LayerManager", "BloomFilter", "TestingHashers", "Predicate"], "class_members": [{"name": "shape", "type": "variable"}]}, "category": "unit", "description": "Tests the advanceOnCount functionality of the LayerManager, ensuring it advances correctly based on the count."}, {"name": "testAdvanceOnCountInvalidArguments", "primary_tested": ["LayerManager.ExtendCheck.advanceOnCount(int)"], "external_dependencies": {"modules": ["LayerManager", "IllegalArgumentException"]}, "category": "unit", "description": "Tests the validation of arguments for the advanceOnCount method, ensuring it throws IllegalArgumentException for invalid values."}, {"name": "testAdvanceOnPopulated", "primary_tested": ["LayerManager.ExtendCheck.advanceOnPopulated()"], "associated_methods": ["LayerManager.getTarget()", "BloomFilter.merge(Hasher)", "LayerManager.ExtendCheck.advanceOnPopulated()"], "external_dependencies": {"modules": ["LayerManager", "BloomFilter", "TestingHashers", "Predicate"], "class_members": [{"name": "shape", "type": "variable"}]}, "category": "unit", "description": "Tests the advanceOnPopulated functionality of the LayerManager, ensuring it advances correctly based on population."}, {"name": "testAdvanceOnSaturation", "primary_tested": ["LayerManager.ExtendCheck.advanceOnSaturation(double)"], "associated_methods": ["LayerManager.getTarget()", "BloomFilter.merge(Hasher)", "LayerManager.ExtendCheck.advanceOnSaturation(double)"], "external_dependencies": {"modules": ["LayerManager", "BloomFilter", "IncrementingHasher", "Shape", "Predicate"], "class_members": [{"name": "shape", "type": "variable"}]}, "category": "unit", "description": "Tests the advanceOnSaturation functionality of the LayerManager, ensuring it advances correctly based on saturation."}, {"name": "testBuilder", "primary_tested": ["LayerManager.builder()"], "associated_methods": ["LayerManager.Builder.get()", "LayerManager.Builder.setSupplier(Supplier)", "LayerManager.Builder.setCleanup(Consumer)", "LayerManager.Builder.setExtendCheck(Predicate)"], "external_dependencies": {"modules": ["LayerManager", "NullPointerException"]}, "category": "unit", "description": "Tests the builder functionality of the LayerManager, ensuring it throws NullPointerException for invalid configurations."}, {"name": "testClear", "primary_tested": ["LayerManager.clear()"], "associated_methods": ["LayerManager.getTarget()", "BloomFilter.merge(Hasher)", "LayerManager.next()", "LayerManager.getDepth()", "BloomFilter.cardinality()"], "external_dependencies": {"modules": ["LayerManager", "BloomFilter", "TestingHashers", "SimpleBloomFilter"], "class_members": [{"name": "shape", "type": "variable"}]}, "category": "unit", "description": "Tests the clear functionality of the LayerManager, ensuring it resets the depth and clears the target BloomFilter."}, {"name": "testCopy", "primary_tested": ["LayerManager.copy()"], "associated_methods": ["LayerManager.getTarget()", "BloomFilter.merge(Hasher)", "LayerManager.next()", "LayerManager.getDepth()", "LayerManager.processBloomFilterPair(LayerManager, BiPredicate)"], "external_dependencies": {"modules": ["LayerManager", "BloomFilter", "TestingHashers", "SimpleBloomFilter", "Arrays"], "class_members": [{"name": "shape", "type": "variable"}]}, "category": "unit", "description": "Tests the copy functionality of the LayerManager, ensuring it creates a deep copy with the same properties."}, {"name": "testForEachBloomFilter", "primary_tested": ["LayerManager.processBloomFilters(Consumer)"], "associated_methods": ["LayerManager.getTarget()", "BloomFilter.merge(BloomFilter)", "LayerManager.processBloomFilters(Consumer)"], "external_dependencies": {"modules": ["LayerManager", "BloomFilter", "SimpleBloomFilter", "TestingHashers", "ArrayList", "Arrays"], "class_members": [{"name": "shape", "type": "variable"}]}, "category": "unit", "description": "Tests the forEachBloomFilter functionality of the LayerManager, ensuring it processes each BloomFilter correctly."}, {"name": "testGet", "primary_tested": ["LayerManager.get(int)"], "associated_methods": ["LayerManager.getDepth()", "LayerManager.get(int)"], "external_dependencies": {"modules": ["LayerManager", "SimpleBloomFilter", "NoSuchElementException"], "class_members": [{"name": "shape", "type": "variable"}]}, "category": "unit", "description": "Tests the get functionality of the LayerManager, ensuring it retrieves the correct BloomFilter and handles invalid indices."}, {"name": "testNeverAdvance", "primary_tested": ["LayerManager.ExtendCheck.neverAdvance()"], "associated_methods": ["LayerManager.getTarget()", "BloomFilter.merge(Hasher)", "LayerManager.ExtendCheck.neverAdvance()"], "external_dependencies": {"modules": ["LayerManager", "BloomFilter", "TestingHashers", "Predicate"], "class_members": [{"name": "shape", "type": "variable"}]}, "category": "unit", "description": "Tests the neverAdvance functionality of the LayerManager, ensuring it never advances regardless of the state."}, {"name": "testNextAndGetDepth", "primary_tested": ["LayerManager.next()", "LayerManager.getDepth()"], "associated_methods": ["LayerManager.getTarget()", "BloomFilter.merge(Hasher)", "LayerManager.next()", "LayerManager.getDepth()"], "external_dependencies": {"modules": ["LayerManager", "BloomFilter", "TestingHashers", "SimpleBloomFilter"], "class_members": [{"name": "shape", "type": "variable"}]}, "category": "unit", "description": "Tests the next and getDepth functionalities of the LayerManager, ensuring it correctly advances and retrieves the depth."}, {"name": "testNoCleanup", "primary_tested": ["LayerManager.Cleanup.noCleanup()"], "associated_methods": ["LayerManager.Cleanup.noCleanup()"], "external_dependencies": {"modules": ["LayerManager", "BloomFilter", "LinkedList", "Consumer"], "class_members": [{"name": "shape", "type": "variable"}]}, "category": "unit", "description": "Tests the noCleanup functionality of the LayerManager, ensuring it does not perform any cleanup."}, {"name": "testOnMaxSize", "primary_tested": ["LayerManager.Cleanup.onMaxSize(int)"], "associated_methods": ["LayerManager.Cleanup.onMaxSize(int)"], "external_dependencies": {"modules": ["LayerManager", "BloomFilter", "LinkedList", "Consumer"], "class_members": [{"name": "shape", "type": "variable"}]}, "category": "unit", "description": "Tests the onMaxSize functionality of the LayerManager, ensuring it cleans up based on the maximum size."}, {"name": "testOnMaxSizeIllegalValues", "primary_tested": ["LayerManager.Cleanup.onMaxSize(int)"], "external_dependencies": {"modules": ["LayerManager", "IllegalArgumentException"]}, "category": "unit", "description": "Tests the validation of arguments for the onMaxSize method, ensuring it throws IllegalArgumentException for invalid values."}, {"name": "testRemoveEmptyTarget", "primary_tested": ["LayerManager.Cleanup.removeEmptyTarget()"], "associated_methods": ["LayerManager.Cleanup.removeEmptyTarget()"], "external_dependencies": {"modules": ["LayerManager", "BloomFilter", "SimpleBloomFilter", "IndexExtractor", "LinkedList", "Consumer"], "class_members": [{"name": "shape", "type": "variable"}]}, "category": "unit", "description": "Tests the removeEmptyTarget functionality of the LayerManager, ensuring it removes empty BloomFilters correctly."}, {"name": "testTarget", "primary_tested": ["LayerManager.getTarget()"], "associated_methods": ["LayerManager.getTarget()", "LayerManager.Builder.setSupplier(Supplier)", "LayerManager.Builder.setExtendCheck(Predicate)", "LayerManager.Builder.setCleanup(Consumer)"], "external_dependencies": {"modules": ["LayerManager", "BloomFilter", "SimpleBloomFilter", "Predicate", "Consumer"], "class_members": [{"name": "shape", "type": "variable"}]}, "category": "unit", "description": "Tests the target functionality of the LayerManager, ensuring it correctly initializes and uses the target BloomFilter."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java", "testclass_name": "CursorableLinkedListTest", "dependencies": ["package org.apache.commons.collections4.list;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotSame;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.ConcurrentModificationException;", "import java.util.HashSet;", "import java.util.Iterator;", "import java.util.LinkedList;", "import java.util.List;", "import java.util.ListIterator;", "import java.util.NoSuchElementException;", "import org.apache.commons.lang3.ArrayUtils;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java", "testclass_name": "SetUniqueListTest", "dependencies": ["package org.apache.commons.collections4.list;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.LinkedList;", "import java.util.List;", "import java.util.ListIterator;", "import java.util.Set;", "import java.util.TreeSet;", "import org.apache.commons.collections4.set.UnmodifiableSet;", "import org.apache.commons.lang3.StringUtils;", "import org.junit.jupiter.api.Test;"], "name": "SetUniqueListTest", "description": "Unit tests for the SetUniqueList class, which ensures that the list contains only unique elements.", "class_members": {"variables": [{"name": "extraVerify", "type": "boolean"}], "methods": [{"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "getFullNonNullElements", "signature": "E[] getFullNonNullElements()"}, {"name": "makeObject", "signature": "List<E> makeObject()"}], "nested_classes": [{"name": "SetUniqueList307", "description": "Internal subclass of SetUniqueList for specific test cases."}]}, "fixtures": [], "test_cases": [{"name": "testAdd", "primary_tested": ["SetUniqueList.add(E)"], "external_dependencies": {"modules": ["SetUniqueList", "ArrayList", "HashSet"], "class_members": [{"name": "extraVerify", "type": "variable"}]}, "category": "unit", "description": "Tests the addition of elements to SetUniqueList, ensuring duplicates are not added."}, {"name": "testAddAll", "primary_tested": ["SetUniqueList.addAll(Collection<? extends E>)"], "external_dependencies": {"modules": ["SetUniqueList", "ArrayList", "HashSet", "Arrays"], "class_members": [{"name": "extraVerify", "type": "variable"}]}, "category": "unit", "description": "Tests the addition of a collection of elements to SetUniqueList, ensuring duplicates are not added."}, {"name": "testCollectionAddAll", "primary_tested": ["SetUniqueList.addAll(Collection<? extends E>)"], "associated_methods": ["AbstractListTest.resetEmpty()", "AbstractListTest.resetFull()", "AbstractListTest.verify()"], "external_dependencies": {"modules": ["SetUniqueList", "ArrayList", "HashSet", "Arrays"], "class_members": [{"name": "extraVerify", "type": "variable"}]}, "category": "unit", "description": "Tests the addition of a collection of elements to SetUniqueList, ensuring duplicates are not added."}, {"name": "testCollectionIteratorRemove", "primary_tested": ["AbstractListTest.testCollectionIteratorRemove()"], "associated_methods": ["AbstractListTest.testCollectionIteratorRemove()"], "external_dependencies": {"modules": ["SetUniqueList", "ArrayList", "HashSet"], "class_members": [{"name": "extraVerify", "type": "variable"}]}, "category": "unit", "description": "Tests the removal of elements using an iterator, ensuring the list remains unique."}, {"name": "testCollections304", "primary_tested": ["SetUniqueList.add(E)", "SetUniqueList.set(int, E)"], "external_dependencies": {"modules": ["SetUniqueList", "LinkedList"], "class_members": [{"name": "extraVerify", "type": "variable"}]}, "category": "unit", "description": "Tests the addition and setting of elements in SetUniqueList, ensuring duplicates are not added."}, {"name": "testCollections307", "primary_tested": ["SetUniqueList.add(E)", "SetUniqueList.subList(int, int)"], "external_dependencies": {"modules": ["SetUniqueList", "ArrayList", "TreeSet"], "class_members": [{"name": "extraVerify", "type": "variable"}]}, "category": "unit", "description": "Tests the addition of elements and sublist functionality in SetUniqueList, ensuring duplicates are not added."}, {"name": "testCollections701", "primary_tested": ["SetUniqueList.add(E)", "SetUniqueList.set(int, E)"], "external_dependencies": {"modules": ["SetUniqueList", "ArrayList", "HashSet", "LinkedList"], "class_members": [{"name": "extraVerify", "type": "variable"}]}, "category": "unit", "description": "Tests the addition and setting of elements in SetUniqueList, ensuring duplicates are not added."}, {"name": "testCreateSetBasedOnList", "primary_tested": ["SetUniqueList.createSetBasedOnList(Set<E>, List<E>)"], "external_dependencies": {"modules": ["SetUniqueList", "ArrayList", "HashSet", "TreeSet", "UnmodifiableSet"], "class_members": [{"name": "extraVerify", "type": "variable"}]}, "category": "unit", "description": "Tests the creation of a set based on a list, ensuring duplicates are not added."}, {"name": "testFactory", "primary_tested": ["SetUniqueList.setUniqueList(List<E>)"], "external_dependencies": {"modules": ["SetUniqueList", "ArrayList", "Arrays"], "class_members": [{"name": "extraVerify", "type": "variable"}]}, "category": "unit", "description": "Tests the factory method for creating a SetUniqueList, ensuring duplicates are not added."}, {"name": "testIntCollectionAddAll", "primary_tested": ["SetUniqueList.addAll(int, Collection<? extends E>)"], "external_dependencies": {"modules": ["SetUniqueList", "ArrayList", "HashSet", "Arrays"], "class_members": [{"name": "extraVerify", "type": "variable"}]}, "category": "unit", "description": "Tests the addition of a collection of elements at a specific index in SetUniqueList, ensuring duplicates are not added."}, {"name": "testListIterator", "primary_tested": ["SetUniqueList.listIterator()"], "external_dependencies": {"modules": ["SetUniqueList", "ArrayList", "HashSet"], "class_members": [{"name": "extraVerify", "type": "variable"}]}, "category": "unit", "description": "Tests the list iterator functionality in SetUniqueList, ensuring duplicates are not added."}, {"name": "testListIteratorAdd", "primary_tested": ["SetUniqueList.listIterator()"], "associated_methods": ["AbstractListTest.resetEmpty()", "AbstractListTest.resetFull()", "AbstractListTest.verify()"], "external_dependencies": {"modules": ["SetUniqueList", "ArrayList", "HashSet"], "class_members": [{"name": "extraVerify", "type": "variable"}]}, "category": "unit", "description": "Tests the addition of elements using a list iterator in SetUniqueList, ensuring duplicates are not added."}, {"name": "testListIteratorSet", "primary_tested": ["SetUniqueList.listIterator()"], "external_dependencies": {"modules": ["SetUniqueList", "ArrayList", "HashSet"], "class_members": [{"name": "extraVerify", "type": "variable"}]}, "category": "unit", "description": "Tests the setting of elements using a list iterator in SetUniqueList, ensuring duplicates are not added."}, {"name": "testListSetByIndex", "primary_tested": ["SetUniqueList.set(int, E)"], "external_dependencies": {"modules": ["SetUniqueList", "ArrayList", "HashSet"], "class_members": [{"name": "extraVerify", "type": "variable"}]}, "category": "unit", "description": "Tests the setting of elements at a specific index in SetUniqueList, ensuring duplicates are not added."}, {"name": "testRetainAll", "primary_tested": ["SetUniqueList.retainAll(Collection<?>)", "SetUniqueList.contains(Object)"], "external_dependencies": {"modules": ["SetUniqueList", "ArrayList", "HashSet"], "class_members": [{"name": "extraVerify", "type": "variable"}]}, "category": "unit", "description": "Tests the retention of elements in SetUniqueList, ensuring only specified elements are retained."}, {"name": "testRetainAllWithInitialList", "primary_tested": ["SetUniqueList.retainAll(Collection<?>)", "SetUniqueList.contains(Object)"], "external_dependencies": {"modules": ["SetUniqueList", "ArrayList", "HashSet"], "class_members": [{"name": "extraVerify", "type": "variable"}]}, "category": "unit", "description": "Tests the retention of elements in SetUniqueList with an initial list, ensuring only specified elements are retained."}, {"name": "testSet", "primary_tested": ["SetUniqueList.set(int, E)"], "external_dependencies": {"modules": ["SetUniqueList", "ArrayList", "HashSet"], "class_members": [{"name": "extraVerify", "type": "variable"}]}, "category": "unit", "description": "Tests the setting of elements at a specific index in SetUniqueList, ensuring duplicates are not added."}, {"name": "testSetCollections444", "primary_tested": ["SetUniqueList.set(int, E)"], "external_dependencies": {"modules": ["SetUniqueList", "ArrayList", "HashSet"], "class_members": [{"name": "extraVerify", "type": "variable"}]}, "category": "unit", "description": "Tests the setting of elements at a specific index in SetUniqueList, ensuring duplicates are not added."}, {"name": "testSetDownwardsInList", "primary_tested": ["SetUniqueList.set(int, E)"], "external_dependencies": {"modules": ["SetUniqueList", "ArrayList", "HashSet"], "class_members": [{"name": "extraVerify", "type": "variable"}]}, "category": "unit", "description": "Tests the setting of elements at a specific index in SetUniqueList, ensuring duplicates are not added."}, {"name": "testSetInBiggerList", "primary_tested": ["SetUniqueList.set(int, E)"], "external_dependencies": {"modules": ["SetUniqueList", "ArrayList", "HashSet"], "class_members": [{"name": "extraVerify", "type": "variable"}]}, "category": "unit", "description": "Tests the setting of elements at a specific index in SetUniqueList, ensuring duplicates are not added."}, {"name": "testSetUpwardsInList", "primary_tested": ["SetUniqueList.set(int, E)"], "external_dependencies": {"modules": ["SetUniqueList", "ArrayList", "HashSet"], "class_members": [{"name": "extraVerify", "type": "variable"}]}, "category": "unit", "description": "Tests the setting of elements at a specific index in SetUniqueList, ensuring duplicates are not added."}, {"name": "testSubListIsUnmodifiable", "primary_tested": ["SetUniqueList.subList(int, int)"], "external_dependencies": {"modules": ["SetUniqueList", "ArrayList", "HashSet"], "class_members": [{"name": "extraVerify", "type": "variable"}]}, "category": "unit", "description": "Tests the sublist functionality in SetUniqueList, ensuring it is unmodifiable."}, {"name": "testUniqueListDoubleInsert", "primary_tested": ["SetUniqueList.set(int, E)", "SetUniqueList.add(int, E)"], "external_dependencies": {"modules": ["SetUniqueList", "LinkedList"], "class_members": [{"name": "extraVerify", "type": "variable"}]}, "category": "unit", "description": "Tests the setting and addition of elements in SetUniqueList, ensuring duplicates are not added."}, {"name": "testUniqueListReInsert", "primary_tested": ["SetUniqueList.set(int, E)", "SetUniqueList.add(int, E)"], "external_dependencies": {"modules": ["SetUniqueList", "LinkedList"], "class_members": [{"name": "extraVerify", "type": "variable"}]}, "category": "unit", "description": "Tests the setting and addition of elements in SetUniqueList, ensuring duplicates are not added."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/EnumerationUtils_toListTest.java", "testclass_name": "EnumerationUtils_toListTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.List;", "import java.util.StringTokenizer;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "EnumerationUtils_toListTest", "description": "Unit tests for the EnumerationUtils.toList method with a StringTokenizer.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testToListWithStringTokenizer", "primary_tested": ["EnumerationUtils.toList(StringTokenizer)"], "external_dependencies": {"modules": ["EnumerationUtils", "StringTokenizer", "List"]}, "category": "unit", "description": "Tests the EnumerationUtils.toList method with a StringTokenizer, verifying the conversion of tokens to a list and their correctness."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/ListUtils_unionTest.java", "testclass_name": "ListUtils_unionTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "ListUtils_unionTest", "description": "Unit tests for the union functionality of ListUtils.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testUnion", "primary_tested": ["ListUtils.union(List<Integer>,List<Integer>)"], "external_dependencies": {"modules": ["ListUtils", "Arrays", "List"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the union functionality of ListUtils, ensuring that it correctly combines two lists."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/IteratorUtils_zippingIteratorTest.java", "testclass_name": "IteratorUtils_zippingIteratorTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Iterator;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import org.apache.commons.collections4.iterators.ZippingIterator;"], "name": "IteratorUtils_zippingIteratorTest", "description": "Test for the ZippingIterator functionality in IteratorUtils.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testZippingIterator", "primary_tested": ["IteratorUtils.zippingIterator(Iterator,Iterator,Iterator)"], "external_dependencies": {"modules": ["Arrays", "Iterator", "ZippingIterator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the creation of a ZippingIterator using IteratorUtils."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/ListUtils_subtractTest.java", "testclass_name": "ListUtils_subtractTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "ListUtils_subtractTest", "description": "Unit test for the subtract method in ListUtils.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testSubtract", "primary_tested": ["ListUtils.subtract(List<Integer>,List<Integer>)"], "external_dependencies": {"modules": ["ListUtils", "Arrays"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the subtract functionality of ListUtils, ensuring it correctly subtracts elements of one list from another."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/ListUtils_intersectionTest.java", "testclass_name": "ListUtils_intersectionTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "ListUtils_intersectionTest", "description": "Unit test for the intersection functionality of ListUtils.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testIntersection", "primary_tested": ["ListUtils.intersection(List<Integer>,List<Integer>)"], "external_dependencies": {"modules": ["ListUtils", "Arrays", "List", "Integer"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the intersection functionality of ListUtils to ensure it correctly identifies common elements between two lists."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/IteratorUtils_chainedIteratorTest.java", "testclass_name": "IteratorUtils_chainedIteratorTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Iterator;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "IteratorUtils_chainedIteratorTest", "description": "Unit tests for the chainedIterator functionality in IteratorUtils.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testChainedIterator", "primary_tested": ["IteratorUtils.chainedIterator(Iterator,Iterator)"], "external_dependencies": {"modules": ["java.util.Arrays", "java.util.Iterator", "java.util.List", "org.apache.commons.collections4.IteratorUtils"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the chainedIterator functionality of IteratorUtils by chaining two iterators and verifying the sequence of elements."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/ListUtils_retainAllTest.java", "testclass_name": "ListUtils_retainAllTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "ListUtils_retainAllTest", "description": "Unit test for the retainAll method in ListUtils.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testRetainAll", "primary_tested": ["ListUtils.retainAll(Collection<Integer>,Collection<Integer>)"], "external_dependencies": {"modules": ["java.util.Arrays", "java.util.Collection", "java.util.List", "org.apache.commons.collections4.ListUtils"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the retainAll functionality of the ListUtils, ensuring that only the elements present in both collections are retained."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/ListUtils_longestCommonSubsequenceTest.java", "testclass_name": "ListUtils_longestCommonSubsequenceTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "ListUtils_longestCommonSubsequenceTest", "description": "Unit tests for the longestCommonSubsequence method in ListUtils.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testLongestCommonSubsequence_NonNullInput", "primary_tested": ["ListUtils.longestCommonSubsequence(String,String)"], "external_dependencies": {"modules": ["ListUtils"]}, "category": "unit", "description": "Tests the longestCommonSubsequence method with non-null input strings."}, {"name": "testLongestCommonSubsequence_NullInput", "primary_tested": ["ListUtils.longestCommonSubsequence(String,String)"], "external_dependencies": {"modules": ["ListUtils"]}, "category": "unit", "description": "Tests the longestCommonSubsequence method with null input strings, expecting a NullPointerException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/ComparatorUtils_maxTest.java", "testclass_name": "ComparatorUtils_maxTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.Comparator;"], "name": "ComparatorUtils_maxTest", "description": "Unit tests for the max functionality of ComparatorUtils.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testMaxWithDefaultComparator", "primary_tested": ["ComparatorUtils.max(int,int,Comparator)"], "external_dependencies": {"modules": ["ComparatorUtils", "Comparator"]}, "category": "unit", "description": "Tests the max functionality of ComparatorUtils with the default comparator."}, {"name": "testMaxWithCustomComparator", "primary_tested": ["ComparatorUtils.max(int,int,Comparator)"], "associated_methods": ["Comparator.reverseOrder()"], "external_dependencies": {"modules": ["ComparatorUtils", "Comparator"]}, "category": "unit", "description": "Tests the max functionality of ComparatorUtils with a custom reverse order comparator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/ComparatorUtils_transformedComparatorTest.java", "testclass_name": "ComparatorUtils_transformedComparatorTest", "dependencies": ["package org.apache.commons.collections4;", "import org.apache.commons.collections4.comparators.TransformingComparator;", "import org.junit.jupiter.api.Test;", "import java.util.Comparator;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNotNull;"], "name": "ComparatorUtils_transformedComparatorTest", "description": "Unit tests for the transformedComparator method in ComparatorUtils.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testTransformedComparatorWithNullComparator", "primary_tested": ["ComparatorUtils.transformedComparator(Comparator,Transformer)"], "external_dependencies": {"modules": ["ComparatorUtils", "TransformingComparator", "Transformer"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the creation of a TransformingComparator with a null comparator."}, {"name": "testTransformedComparatorWithNonNullComparator", "primary_tested": ["ComparatorUtils.transformedComparator(Comparator,Transformer)"], "external_dependencies": {"modules": ["ComparatorUtils", "TransformingComparator", "Transformer"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the creation of a TransformingComparator with a non-null comparator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/MultiMapUtils_getCollectionTest.java", "testclass_name": "MultiMapUtils_getCollectionTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import java.util.Collection;", "import org.apache.commons.collections4.multimap.ArrayListValuedHashMap;", "import org.junit.jupiter.api.Test;"], "name": "MultiMapUtils_getCollectionTest", "description": "Unit tests for the MultiMapUtils.getCollection method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testGetCollection_WithNonNullMap", "primary_tested": ["MultiMapUtils.getCollection(MultiValuedMap,Object)"], "external_dependencies": {"modules": ["ArrayListValuedHashMap", "MultiValuedMap", "Collection"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the getCollection method with a non-null map, ensuring it returns the correct collection for a given key."}, {"name": "testGetCollection_WithNullMap", "primary_tested": ["MultiMapUtils.getCollection(MultiValuedMap,Object)"], "external_dependencies": {"modules": ["Collection"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the getCollection method with a null map, ensuring it returns null."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/IteratorUtils_toListTest.java", "testclass_name": "IteratorUtils_toListTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Iterator;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "IteratorUtils_toListTest", "description": "Unit tests for the IteratorUtils.toList method.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testToList_SuccessfulConversion", "primary_tested": ["IteratorUtils.toList(Iterator<String>,int)"], "external_dependencies": {"modules": ["Arrays", "Iterator", "List", "IteratorUtils"]}, "category": "unit", "description": "Tests the successful conversion of an iterator to a list."}, {"name": "testToList_NullIterator", "primary_tested": ["IteratorUtils.toList(Iterator<String>,int)"], "external_dependencies": {"modules": ["IteratorUtils"]}, "category": "unit", "description": "Tests the behavior of the toList method when a null iterator is provided, expecting a NullPointerException."}, {"name": "testToList_InvalidEstimatedSize", "primary_tested": ["IteratorUtils.toList(Iterator<String>,int)"], "external_dependencies": {"modules": ["Arrays", "Iterator", "IteratorUtils"]}, "category": "unit", "description": "Tests the behavior of the toList method when an invalid estimated size is provided, expecting an IllegalArgumentException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/IteratorUtils_sizeTest.java", "testclass_name": "IteratorUtils_sizeTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.Iterator;", "import java.util.NoSuchElementException;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.mockito.Mockito.*;"], "name": "IteratorUtils_sizeTest", "description": "Unit tests for the size method in IteratorUtils, which calculates the size of an iterator.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testSizeWithNonNullIterator", "primary_tested": ["IteratorUtils.size(Iterator)"], "associated_methods": ["Iterator.hasNext()", "Iterator.next()"], "external_dependencies": {"modules": ["Iterator", "IteratorUtils"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the size method of IteratorUtils with a non-null iterator, verifying that it correctly counts the elements."}, {"name": "testSizeWithNullIterator", "primary_tested": ["IteratorUtils.size(Iterator)"], "external_dependencies": {"modules": ["IteratorUtils"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the size method of IteratorUtils with a null iterator, verifying that it returns 0."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/SynchronizedQueue_peekTest.java", "testclass_name": "SynchronizedQueue_peekTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.mockito.Mockito.*;", "import java.util.Queue;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import org.mockito.Mock;", "import org.mockito.MockitoAnnotations;"], "name": "SynchronizedQueue_peekTest", "description": "Unit tests for the peek method of the SynchronizedQueue class.", "class_members": {"variables": [{"name": "mockQueue", "type": "Queue<String>"}, {"name": "synchronizedQueue", "type": "SynchronizedQueue<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPeek", "primary_tested": ["SynchronizedQueue.peek()"], "associated_methods": ["Queue.peek()"], "external_dependencies": {"modules": ["Queue", "SynchronizedQueue"], "class_members": [{"name": "mockQueue", "type": "variable"}, {"name": "synchronizedQueue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the peek functionality of the SynchronizedQueue, ensuring it returns the correct element and verifies the mock queue's peek method is called."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/SetUtils_unionTest.java", "testclass_name": "SetUtils_unionTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.HashSet;", "import java.util.Set;", "import org.apache.commons.collections4.SetUtils.SetView;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SetUtils_unionTest", "description": "Unit tests for the union functionality of SetUtils.", "class_members": {"variables": [{"name": "setA", "type": "Set<Integer>"}, {"name": "setB", "type": "Set<Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testUnion", "primary_tested": ["SetUtils.union(Set<Integer>,Set<Integer>)"], "associated_methods": ["SetView.size()", "SetView.contains(Integer)", "SetView.containsAll(Collection<Integer>)"], "external_dependencies": {"modules": ["SetUtils", "SetView", "HashSet", "Set", "NullPointerException"], "class_members": [{"name": "setA", "type": "variable"}, {"name": "setB", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the union functionality of SetUtils, including handling of empty sets and null parameters."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/IteratorUtils_filteredListIteratorTest.java", "testclass_name": "IteratorUtils_filteredListIteratorTest", "dependencies": ["package org.apache.commons.collections4;", "import org.apache.commons.collections4.functors.TruePredicate;", "import org.apache.commons.collections4.iterators.FilterListIterator;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.List;", "import java.util.ListIterator;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertThrows;"], "name": "IteratorUtils_filteredListIteratorTest", "description": "Unit tests for the filteredListIterator method in IteratorUtils.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testFilteredListIterator_Success", "primary_tested": ["IteratorUtils.filteredListIterator(ListIterator,Predicate)"], "external_dependencies": {"modules": ["Arrays", "List", "ListIterator", "FilterListIterator", "IteratorUtils", "TruePredicate"]}, "category": "unit", "description": "Tests the successful creation of a filtered list iterator."}, {"name": "testFilteredListIterator_NullListIterator", "primary_tested": ["IteratorUtils.filteredListIterator(ListIterator,Predicate)"], "external_dependencies": {"modules": ["IteratorUtils", "TruePredicate"]}, "category": "unit", "description": "Tests the behavior when a null list iterator is provided."}, {"name": "testFilteredListIterator_NullPredicate", "primary_tested": ["IteratorUtils.filteredListIterator(ListIterator,Predicate)"], "external_dependencies": {"modules": ["Arrays", "List", "ListIterator", "IteratorUtils"]}, "category": "unit", "description": "Tests the behavior when a null predicate is provided."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/SynchronizedQueue_elementTest.java", "testclass_name": "SynchronizedQueue_elementTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import org.junit.jupiter.api.Test;", "import org.mockito.Mockito;", "import java.util.Queue;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.mockito.Mockito.when;"], "name": "SynchronizedQueue_elementTest", "description": "Unit test for the element method of SynchronizedQueue.", "class_members": {"variables": [{"name": "mockQueue", "type": "Queue<String>"}, {"name": "lock", "type": "Object"}, {"name": "synchronizedQueue", "type": "SynchronizedQueue<String>"}, {"name": "expectedElement", "type": "String"}]}, "test_cases": [{"name": "testElement", "primary_tested": ["SynchronizedQueue.element()"], "associated_methods": ["Queue.element()"], "external_dependencies": {"modules": ["Queue", "SynchronizedQueue", "Mockito"], "class_members": [{"name": "mockQueue", "type": "variable"}, {"name": "lock", "type": "variable"}, {"name": "synchronizedQueue", "type": "variable"}, {"name": "expectedElement", "type": "variable"}]}, "category": "unit", "description": "Tests the element method of SynchronizedQueue to ensure it returns the expected element from the underlying queue."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/ArrayStack_peekTest.java", "testclass_name": "ArrayStack_peekTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.EmptyStackException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ArrayStack_peekTest", "description": "Unit tests for the peek functionality of the ArrayStack class.", "class_members": {"variables": [{"name": "stack", "type": "ArrayStack<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPeekWithNonEmptyStack", "primary_tested": ["ArrayStack.peek()"], "associated_methods": ["ArrayStack.push(String)"], "external_dependencies": {"modules": ["ArrayStack"], "class_members": [{"name": "stack", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the peek functionality of the ArrayStack when the stack is non-empty."}, {"name": "testPeekWithEmptyStack", "primary_tested": ["ArrayStack.peek()"], "external_dependencies": {"modules": ["ArrayStack", "EmptyStackException"], "class_members": [{"name": "stack", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the peek functionality of the ArrayStack when the stack is empty, expecting an EmptyStackException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/ListUtils_partitionTest.java", "testclass_name": "ListUtils_partitionTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "ListUtils_partitionTest", "description": "Unit tests for the partition functionality of ListUtils.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testPartition_NormalCase", "primary_tested": ["ListUtils.partition(List<Integer>,int)"], "external_dependencies": {"modules": ["ListUtils", "Arrays", "List"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the partition functionality of ListUtils with a normal case."}, {"name": "testPartition_NullList", "primary_tested": ["ListUtils.partition(List<Integer>,int)"], "external_dependencies": {"modules": ["ListUtils"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the partition functionality of ListUtils with a null list."}, {"name": "testPartition_InvalidSize", "primary_tested": ["ListUtils.partition(List<Integer>,int)"], "external_dependencies": {"modules": ["ListUtils", "Arrays", "List"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the partition functionality of ListUtils with invalid partition sizes."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/EnumerationUtils_getTest.java", "testclass_name": "EnumerationUtils_getTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.Enumeration;", "import java.util.Vector;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "EnumerationUtils_getTest", "description": "Unit tests for the EnumerationUtils.get method.", "class_members": {"variables": [{"name": "vector", "type": "Vector<String>"}, {"name": "enumeration", "type": "Enumeration<String>"}]}, "fixtures": [], "test_cases": [{"name": "testGetValidIndex", "primary_tested": ["EnumerationUtils.get(Enumeration<String>,int)"], "external_dependencies": {"modules": ["Vector", "Enumeration", "EnumerationUtils"], "class_members": [{"name": "vector", "type": "variable"}, {"name": "enumeration", "type": "variable"}]}, "category": "unit", "description": "Tests the EnumerationUtils.get method with a valid index."}, {"name": "testGetInvalidIndex", "primary_tested": ["EnumerationUtils.get(Enumeration<String>,int)"], "external_dependencies": {"modules": ["Vector", "Enumeration", "EnumerationUtils"], "class_members": [{"name": "vector", "type": "variable"}, {"name": "enumeration", "type": "variable"}]}, "category": "unit", "description": "Tests the EnumerationUtils.get method with an invalid index, expecting an IndexOutOfBoundsException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/SetUtils_hashSetTest.java", "testclass_name": "SetUtils_hashSetTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Arrays;", "import java.util.HashSet;", "import java.util.Set;", "import org.junit.jupiter.api.Test;"], "name": "SetUtils_hashSetTest", "description": "Unit tests for the SetUtils.hashSet method, which creates a HashSet with the given items.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testHashSetWithItems", "primary_tested": ["SetUtils.hashSet(String...)"], "external_dependencies": {"modules": ["SetUtils", "Set", "Arrays", "HashSet"]}, "category": "unit", "description": "Tests the creation of a HashSet with three items ('a', 'b', 'c') and verifies the size and content of the set."}, {"name": "testHashSetWithNoItems", "primary_tested": ["SetUtils.hashSet(String...)"], "external_dependencies": {"modules": ["SetUtils", "Set", "Arrays", "HashSet"]}, "category": "unit", "description": "Tests the creation of a HashSet with no items and verifies that the set is empty."}, {"name": "testHashSetWithNull", "primary_tested": ["SetUtils.hashSet(String...)"], "external_dependencies": {"modules": ["SetUtils", "Set", "Arrays", "HashSet"]}, "category": "unit", "description": "Tests the creation of a HashSet with a null array and verifies that the result is null."}, {"name": "testHashSetWithDuplicates", "primary_tested": ["SetUtils.hashSet(String...)"], "external_dependencies": {"modules": ["SetUtils", "Set", "Arrays", "HashSet"]}, "category": "unit", "description": "Tests the creation of a HashSet with duplicate items and verifies that the set contains only unique items."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/SynchronizedQueue_pollTest.java", "testclass_name": "SynchronizedQueue_pollTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.mockito.Mockito.mock;", "import static org.mockito.Mockito.when;", "import java.util.Queue;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SynchronizedQueue_pollTest", "description": "Unit tests for the poll method of the SynchronizedQueue class.", "class_members": {"variables": [{"name": "synchronizedQueue", "type": "SynchronizedQueue<String>"}, {"name": "mockQueue", "type": "Queue<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPoll_WhenQueueIsNotEmpty", "primary_tested": ["SynchronizedQueue.poll()"], "external_dependencies": {"modules": ["Queue", "SynchronizedQueue"], "class_members": [{"name": "synchronizedQueue", "type": "variable"}, {"name": "mockQueue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the poll method when the queue is not empty."}, {"name": "testPoll_WhenQueueIsEmpty", "primary_tested": ["SynchronizedQueue.poll()"], "external_dependencies": {"modules": ["Queue", "SynchronizedQueue"], "class_members": [{"name": "synchronizedQueue", "type": "variable"}, {"name": "mockQueue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the poll method when the queue is empty."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/SynchronizedQueue_removeTest.java", "testclass_name": "SynchronizedQueue_removeTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.mockito.Mockito.*;", "import java.util.NoSuchElementException;", "import java.util.Queue;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import org.mockito.Mock;", "import org.mockito.MockitoAnnotations;"], "name": "SynchronizedQueue_removeTest", "description": "Unit tests for the remove method of the SynchronizedQueue class.", "class_members": {"variables": [{"name": "mockQueue", "type": "Queue<String>"}, {"name": "synchronizedQueue", "type": "SynchronizedQueue<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemove_Success", "primary_tested": ["SynchronizedQueue.remove()"], "external_dependencies": {"modules": ["Queue", "SynchronizedQueue"], "class_members": [{"name": "mockQueue", "type": "variable"}, {"name": "synchronizedQueue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful removal of an element from the SynchronizedQueue."}, {"name": "testRemove_ThrowsNoSuchElementException", "primary_tested": ["SynchronizedQueue.remove()"], "external_dependencies": {"modules": ["Queue", "SynchronizedQueue", "NoSuchElementException"], "class_members": [{"name": "mockQueue", "type": "variable"}, {"name": "synchronizedQueue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the remove method of SynchronizedQueue throws a NoSuchElementException when the underlying queue is empty."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/ListUtils_hashCodeForListTest.java", "testclass_name": "ListUtils_hashCodeForListTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "ListUtils_hashCodeForListTest", "description": "Unit tests for the hashCodeForList method in ListUtils.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testHashCodeForList_NullList", "primary_tested": ["ListUtils.hashCodeForList(List)"], "external_dependencies": {"modules": ["ListUtils"]}, "category": "unit", "description": "Tests the hashCodeForList method with a null list."}, {"name": "testHashCodeForList_EmptyList", "primary_tested": ["ListUtils.hashCodeForList(List)"], "external_dependencies": {"modules": ["ListUtils", "Collections"]}, "category": "unit", "description": "Tests the hashCodeForList method with an empty list."}, {"name": "testHashCodeForList_NonEmptyList", "primary_tested": ["ListUtils.hashCodeForList(List)"], "associated_methods": ["String.hashCode()"], "external_dependencies": {"modules": ["ListUtils", "Arrays", "List"]}, "category": "unit", "description": "Tests the hashCodeForList method with a non-empty list."}, {"name": "testHashCodeForList_ListWithNullElements", "primary_tested": ["ListUtils.hashCodeForList(List)"], "associated_methods": ["String.hashCode()"], "external_dependencies": {"modules": ["ListUtils", "Arrays", "List"]}, "category": "unit", "description": "Tests the hashCodeForList method with a list containing null elements."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/TransformedBag_uniqueSetTest.java", "testclass_name": "TransformedBag_uniqueSetTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import org.apache.commons.collections4.Bag;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.set.TransformedSet;", "import org.junit.jupiter.api.Test;", "import org.mockito.Mockito;", "import java.util.HashSet;", "import java.util.Set;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.mockito.Mockito.when;"], "name": "TransformedBag_uniqueSetTest", "description": "Unit tests for the uniqueSet method in TransformedBag.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testUniqueSet", "primary_tested": ["TransformedBag.uniqueSet()"], "associated_methods": [], "external_dependencies": {"modules": ["Bag", "Transformer", "TransformedSet", "HashSet", "Set", "Mockito"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the uniqueSet method of TransformedBag to ensure it returns a TransformedSet."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/ComparatorUtils_chainedComparatorTest.java", "testclass_name": "ComparatorUtils_chainedComparatorTest", "dependencies": ["package org.apache.commons.collections4;", "import org.apache.commons.collections4.comparators.ComparatorChain;", "import org.junit.jupiter.api.Test;", "import java.util.Comparator;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "ComparatorUtils_chainedComparatorTest", "description": "Unit tests for the chainedComparator method in ComparatorUtils.", "class_members": {"variables": [{"name": "comparator1", "type": "Comparator<Integer>"}, {"name": "comparator2", "type": "Comparator<Integer>"}, {"name": "nullComparator", "type": "Comparator<Integer>"}, {"name": "chainedComparator", "type": "Comparator<Integer>"}]}, "fixtures": [], "test_cases": [{"name": "testChainedComparator_WithValidComparators", "primary_tested": ["ComparatorUtils.chainedComparator(Comparator,Comparator)"], "external_dependencies": {"modules": ["Comparator", "ComparatorUtils", "ComparatorChain"], "class_members": [{"name": "comparator1", "type": "variable"}, {"name": "comparator2", "type": "variable"}, {"name": "chainedComparator", "type": "variable"}]}, "category": "unit", "description": "Tests the creation of a chained comparator with valid comparators."}, {"name": "testChainedComparator_WithNullComparator", "primary_tested": ["ComparatorUtils.chainedComparator(Comparator,Comparator)"], "external_dependencies": {"modules": ["Comparator", "ComparatorUtils"], "class_members": [{"name": "comparator1", "type": "variable"}, {"name": "nullComparator", "type": "variable"}]}, "category": "unit", "description": "Tests the behavior of the chained comparator method when a null comparator is provided, expecting a NullPointerException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/MultiMapUtils_getValuesAsSetTest.java", "testclass_name": "MultiMapUtils_getValuesAsSetTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.Set;", "import org.apache.commons.collections4.multimap.ArrayListValuedHashMap;", "import org.apache.commons.collections4.multimap.HashSetValuedHashMap;", "import org.junit.jupiter.api.Test;"], "name": "MultiMapUtils_getValuesAsSetTest", "description": "Unit tests for the MultiMapUtils.getValuesAsSet method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testGetValuesAsSet_NullMap", "primary_tested": ["MultiMapUtils.getValuesAsSet(MultiValuedMap<String,String>,String)"], "external_dependencies": {"modules": ["MultiValuedMap", "MultiMapUtils", "Set"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of MultiMapUtils.getValuesAsSet when the map is null."}, {"name": "testGetValuesAsSet_NonSetCollection", "primary_tested": ["MultiMapUtils.getValuesAsSet(MultiValuedMap<String,String>,String)"], "associated_methods": ["ArrayListValuedHashMap.put(String,String)", "ArrayListValuedHashMap.get(String)"], "external_dependencies": {"modules": ["MultiValuedMap", "MultiMapUtils", "ArrayListValuedHashMap", "Set", "HashSet"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of MultiMapUtils.getValuesAsSet when the map contains a non-set collection."}, {"name": "testGetValuesAsSet_SetCollection", "primary_tested": ["MultiMapUtils.getValuesAsSet(MultiValuedMap<String,String>,String)"], "associated_methods": ["HashSetValuedHashMap.put(String,String)", "HashSetValuedHashMap.get(String)"], "external_dependencies": {"modules": ["MultiValuedMap", "MultiMapUtils", "HashSetValuedHashMap", "Set"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of MultiMapUtils.getValuesAsSet when the map contains a set collection."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/IteratorUtils_findTest.java", "testclass_name": "IteratorUtils_findTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Iterator;", "import java.util.function.Predicate;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "IteratorUtils_findTest", "description": "Unit tests for the find method in IteratorUtils class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testFind_ElementFound", "primary_tested": ["IteratorUtils.find(Iterator<Integer>,Predicate<Integer>)"], "external_dependencies": {"modules": ["Arrays", "Iterator", "Predicate", "IteratorUtils"], "class_members": []}, "category": "unit", "description": "Tests the find method when the element is found in the iterator."}, {"name": "testFind_ElementNotFound", "primary_tested": ["IteratorUtils.find(Iterator<Integer>,Predicate<Integer>)"], "external_dependencies": {"modules": ["Arrays", "Iterator", "Predicate", "IteratorUtils"], "class_members": []}, "category": "unit", "description": "Tests the find method when the element is not found in the iterator."}, {"name": "testFind_NullIterator", "primary_tested": ["IteratorUtils.find(Iterator<Integer>,Predicate<Integer>)"], "external_dependencies": {"modules": ["Predicate", "IteratorUtils"], "class_members": []}, "category": "unit", "description": "Tests the find method when the iterator is null."}, {"name": "testFind_NullPredicate", "primary_tested": ["IteratorUtils.find(Iterator<Integer>,Predicate<Integer>)"], "external_dependencies": {"modules": ["Arrays", "Iterator", "IteratorUtils"], "class_members": []}, "category": "unit", "description": "Tests the find method when the predicate is null, expecting a NullPointerException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/SynchronizedQueue_offerTest.java", "testclass_name": "SynchronizedQueue_offerTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.mockito.Mockito.mock;", "import static org.mockito.Mockito.when;", "import java.util.Queue;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SynchronizedQueue_offerTest", "description": "Unit tests for the offer method of SynchronizedQueue.", "class_members": {"variables": [{"name": "synchronizedQueue", "type": "SynchronizedQueue<String>"}, {"name": "mockQueue", "type": "Queue<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testOffer", "primary_tested": ["SynchronizedQueue.offer(String)"], "associated_methods": ["Queue.offer(String)"], "external_dependencies": {"modules": ["SynchronizedQueue", "Queue", "Mockito"], "class_members": [{"name": "synchronizedQueue", "type": "variable"}, {"name": "mockQueue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the offer method of SynchronizedQueue, ensuring it correctly delegates to the underlying Queue and returns the expected result."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/IteratorUtils_matchesAllTest.java", "testclass_name": "IteratorUtils_matchesAllTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Iterator;", "import java.util.function.Predicate;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "IteratorUtils_matchesAllTest", "description": "Unit tests for the IteratorUtils.matchesAll method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testMatchesAll_AllElementsMatch", "primary_tested": ["IteratorUtils.matchesAll(Iterator<Integer>,Predicate<Integer>)"], "external_dependencies": {"modules": ["IteratorUtils", "Arrays", "Predicate"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that IteratorUtils.matchesAll returns true when all elements in the iterator match the predicate."}, {"name": "testMatchesAll_NotAllElementsMatch", "primary_tested": ["IteratorUtils.matchesAll(Iterator<Integer>,Predicate<Integer>)"], "external_dependencies": {"modules": ["IteratorUtils", "Arrays", "Predicate"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that IteratorUtils.matchesAll returns false when not all elements in the iterator match the predicate."}, {"name": "testMatchesAll_NullIterator", "primary_tested": ["IteratorUtils.matchesAll(Iterator<Integer>,Predicate<Integer>)"], "external_dependencies": {"modules": ["IteratorUtils", "Predicate"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that IteratorUtils.matchesAll returns true when the iterator is null."}, {"name": "testMatchesAll_NullPredicate", "primary_tested": ["IteratorUtils.matchesAll(Iterator<Integer>,Predicate<Integer>)"], "external_dependencies": {"modules": ["IteratorUtils", "Arrays"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that IteratorUtils.matchesAll throws a NullPointerException when the predicate is null."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/IteratorUtils_forEachTest.java", "testclass_name": "IteratorUtils_forEachTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.Iterator;", "import java.util.NoSuchElementException;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;"], "name": "IteratorUtils_forEachTest", "description": "Unit tests for the IteratorUtils.forEach method.", "class_members": {"variables": [{"name": "iterator", "type": "Iterator<String>"}, {"name": "closure", "type": "Closure<String>"}]}, "test_cases": [{"name": "testForEachWithNonNullClosureAndNonNullIterator", "primary_tested": ["IteratorUtils.forEach(Iterator<String>,Closure<String>)"], "associated_methods": ["Iterator.hasNext()", "Iterator.next()", "Closure.accept(String)"], "external_dependencies": {"modules": ["Iterator", "Closure", "IteratorUtils"], "class_members": [{"name": "iterator", "type": "variable"}, {"name": "closure", "type": "variable"}]}, "category": "unit", "description": "Tests the forEach method with a non-null closure and a non-null iterator."}, {"name": "testForEachWithNonNullClosureAndNullIterator", "primary_tested": ["IteratorUtils.forEach(Iterator<String>,Closure<String>)"], "external_dependencies": {"modules": ["Closure", "IteratorUtils"], "class_members": [{"name": "closure", "type": "variable"}]}, "category": "unit", "description": "Tests the forEach method with a non-null closure and a null iterator."}, {"name": "testForEachWithNullClosure", "primary_tested": ["IteratorUtils.forEach(Iterator<String>,Closure<String>)"], "external_dependencies": {"modules": ["Iterator", "IteratorUtils"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "description": "Tests the forEach method with a null closure."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/ListUtils_indexOfTest.java", "testclass_name": "ListUtils_indexOfTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.List;", "import java.util.function.Predicate;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "ListUtils_indexOfTest", "description": "Unit tests for the ListUtils.indexOf method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testIndexOf_Found", "primary_tested": ["ListUtils.indexOf(List<String>,Predicate<String>)"], "external_dependencies": {"modules": ["ListUtils", "Arrays", "Predicate", "CollectionUtils"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the ListUtils.indexOf method to find the index of an element that matches a predicate."}, {"name": "testIndexOf_NotFound", "primary_tested": ["ListUtils.indexOf(List<String>,Predicate<String>)"], "external_dependencies": {"modules": ["ListUtils", "Arrays", "Predicate", "CollectionUtils"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the ListUtils.indexOf method when no element matches the predicate."}, {"name": "testIndexOf_NullList", "primary_tested": ["ListUtils.indexOf(List<String>,Predicate<String>)"], "external_dependencies": {"modules": ["ListUtils", "Predicate", "CollectionUtils"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the ListUtils.indexOf method when the list is null."}, {"name": "testIndexOf_NullPredicate", "primary_tested": ["ListUtils.indexOf(List<String>,Predicate<String>)"], "external_dependencies": {"modules": ["ListUtils", "Arrays", "CollectionUtils"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the ListUtils.indexOf method when the predicate is null."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/SetUtils_isEqualSetTest.java", "testclass_name": "SetUtils_isEqualSetTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.Collections;", "import java.util.HashSet;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "SetUtils_isEqualSetTest", "description": "Unit tests for the SetUtils.isEqualSet method, which checks if two sets are equal.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testIsEqualSet_SameReference", "primary_tested": ["SetUtils.isEqualSet(Collection,Collection)"], "external_dependencies": {"modules": ["SetUtils", "HashSet", "Arrays"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the isEqualSet method with the same reference for both sets."}, {"name": "testIsEqualSet_NullAndDifferentSizes", "primary_tested": ["SetUtils.isEqualSet(Collection,Collection)"], "external_dependencies": {"modules": ["SetUtils", "HashSet", "Arrays"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the isEqualSet method with one set being null and with sets of different sizes."}, {"name": "testIsEqualSet_EqualContents", "primary_tested": ["SetUtils.isEqualSet(Collection,Collection)"], "external_dependencies": {"modules": ["SetUtils", "HashSet", "Arrays"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the isEqualSet method with sets having the same contents but in different orders."}, {"name": "testIsEqualSet_DifferentContents", "primary_tested": ["SetUtils.isEqualSet(Collection,Collection)"], "external_dependencies": {"modules": ["SetUtils", "HashSet", "Arrays"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the isEqualSet method with sets having different contents."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/CollectionBag_removeAllTest.java", "testclass_name": "CollectionBag_removeAllTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import org.apache.commons.collections4.Bag;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;", "import java.util.Arrays;", "import java.util.Collection;"], "name": "CollectionBag_removeAllTest", "description": "Unit tests for the removeAll method in CollectionBag.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testRemoveAll_NonEmptyCollection", "primary_tested": ["CollectionBag.removeAll(Collection)"], "associated_methods": ["Bag.remove(Object,int)", "Bag.getCount(Object)"], "external_dependencies": {"modules": ["Bag", "CollectionBag", "Arrays"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the removeAll method with a non-empty collection."}, {"name": "testRemoveAll_NullCollection", "primary_tested": ["CollectionBag.removeAll(Collection)"], "associated_methods": ["Bag.removeAll(Collection)"], "external_dependencies": {"modules": ["Bag", "CollectionBag"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the removeAll method with a null collection."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/ArrayStack_popTest.java", "testclass_name": "ArrayStack_popTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.EmptyStackException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ArrayStack_popTest", "description": "Unit tests for the pop functionality of the ArrayStack class.", "class_members": {"variables": [{"name": "stack", "type": "ArrayStack<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPopWithNonEmptyStack", "primary_tested": ["ArrayStack.pop()"], "associated_methods": ["ArrayStack.push(String)"], "external_dependencies": {"modules": ["ArrayStack"], "class_members": [{"name": "stack", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the pop functionality of the ArrayStack with a non-empty stack."}, {"name": "testPopWithEmptyStack", "primary_tested": ["ArrayStack.pop()"], "external_dependencies": {"modules": ["ArrayStack", "EmptyStackException"], "class_members": [{"name": "stack", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the pop functionality of the ArrayStack with an empty stack, expecting an EmptyStackException."}, {"name": "testPopWithSingleItemStack", "primary_tested": ["ArrayStack.pop()"], "associated_methods": ["ArrayStack.push(String)"], "external_dependencies": {"modules": ["ArrayStack", "EmptyStackException"], "class_members": [{"name": "stack", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the pop functionality of the ArrayStack with a stack containing a single item."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/ListUtils_removeAllTest.java", "testclass_name": "ListUtils_removeAllTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;"], "name": "ListUtils_removeAllTest", "description": "Unit tests for the removeAll method in ListUtils.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testRemoveAll_NormalCase", "primary_tested": ["ListUtils.removeAll(List<Integer>,List<Integer>)"], "external_dependencies": {"modules": ["ListUtils", "Arrays", "Collections"]}, "category": "unit", "description": "Tests the removeAll method with a normal case where elements are removed from the list."}, {"name": "testRemoveAll_NoElementsToRemove", "primary_tested": ["ListUtils.removeAll(List<Integer>,List<Integer>)"], "external_dependencies": {"modules": ["ListUtils", "Arrays", "Collections"]}, "category": "unit", "description": "Tests the removeAll method when there are no elements to remove from the list."}, {"name": "testRemoveAll_AllElementsToRemove", "primary_tested": ["ListUtils.removeAll(List<Integer>,List<Integer>)"], "external_dependencies": {"modules": ["ListUtils", "Arrays", "Collections"]}, "category": "unit", "description": "Tests the removeAll method when all elements are to be removed from the list."}, {"name": "testRemoveAll_NullCollection", "primary_tested": ["ListUtils.removeAll(List<Integer>,List<Integer>)"], "external_dependencies": {"modules": ["ListUtils", "Arrays"]}, "category": "unit", "description": "Tests the removeAll method when the collection is null, expecting a NullPointerException."}, {"name": "testRemoveAll_NullRemove", "primary_tested": ["ListUtils.removeAll(List<Integer>,List<Integer>)"], "external_dependencies": {"modules": ["ListUtils", "Arrays"]}, "category": "unit", "description": "Tests the removeAll method when the remove list is null, expecting a NullPointerException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/IteratorUtils_indexOfTest.java", "testclass_name": "IteratorUtils_indexOfTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Iterator;", "import java.util.function.Predicate;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;"], "name": "IteratorUtils_indexOfTest", "description": "Unit tests for the IteratorUtils.indexOf method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testIndexOf_ElementFound", "primary_tested": ["IteratorUtils.indexOf(Iterator<Integer>,Predicate<Integer>)"], "external_dependencies": {"modules": ["Arrays", "Iterator", "Predicate", "IteratorUtils", "CollectionUtils"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the IteratorUtils.indexOf method when the element is found in the iterator."}, {"name": "testIndexOf_ElementNotFound", "primary_tested": ["IteratorUtils.indexOf(Iterator<Integer>,Predicate<Integer>)"], "external_dependencies": {"modules": ["Arrays", "Iterator", "Predicate", "IteratorUtils", "CollectionUtils"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the IteratorUtils.indexOf method when the element is not found in the iterator."}, {"name": "testIndexOf_NullPredicate", "primary_tested": ["IteratorUtils.indexOf(Iterator<Integer>,Predicate<Integer>)"], "external_dependencies": {"modules": ["Arrays", "Iterator", "Predicate", "IteratorUtils"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the IteratorUtils.indexOf method when the predicate is null, expecting a NullPointerException."}, {"name": "testIndexOf_NullIterator", "primary_tested": ["IteratorUtils.indexOf(Iterator<Integer>,Predicate<Integer>)"], "external_dependencies": {"modules": ["Predicate", "IteratorUtils", "CollectionUtils"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the IteratorUtils.indexOf method when the iterator is null."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/CollectionSortedBag_removeAllTest.java", "testclass_name": "CollectionSortedBag_removeAllTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import org.apache.commons.collections4.SortedBag;", "import org.junit.jupiter.api.Test;", "import org.mockito.Mockito;", "import java.util.Arrays;", "import java.util.Collection;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.mockito.Mockito.when;"], "name": "CollectionSortedBag_removeAllTest", "description": "Unit tests for the removeAll method in CollectionSortedBag.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testRemoveAll_NonEmptyCollection", "primary_tested": ["CollectionSortedBag.removeAll(Collection)"], "associated_methods": ["SortedBag.remove(Object,int)", "SortedBag.getCount(Object)"], "external_dependencies": {"modules": ["SortedBag", "CollectionSortedBag", "Arrays", "Mockito"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the removeAll method with a non-empty collection."}, {"name": "testRemoveAll_NullCollection", "primary_tested": ["CollectionSortedBag.removeAll(Collection)"], "associated_methods": ["SortedBag.removeAll(Collection)"], "external_dependencies": {"modules": ["SortedBag", "CollectionSortedBag", "Mockito"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the removeAll method with a null collection."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/MultiMapUtils_getValuesAsBagTest.java", "testclass_name": "MultiMapUtils_getValuesAsBagTest", "dependencies": ["package org.apache.commons.collections4;", "import org.apache.commons.collections4.bag.HashBag;", "import org.apache.commons.collections4.multimap.ArrayListValuedHashMap;", "import org.junit.jupiter.api.Test;", "import java.util.Collection;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;"], "name": "MultiMapUtils_getValuesAsBagTest", "description": "Unit tests for the MultiMapUtils.getValuesAsBag method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testGetValuesAsBag_NullMap", "primary_tested": ["MultiMapUtils.getValuesAsBag(MultiValuedMap<String,String>,String)"], "external_dependencies": {"modules": ["MultiValuedMap", "MultiMapUtils", "Bag"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of MultiMapUtils.getValuesAsBag when the input map is null."}, {"name": "testGetValuesAsBag_NonBagCollection", "primary_tested": ["MultiMapUtils.getValuesAsBag(MultiValuedMap<String,String>,String)"], "associated_methods": ["ArrayListValuedHashMap.put(String,String)", "Bag.size()", "Bag.getCount(String)"], "external_dependencies": {"modules": ["MultiValuedMap", "MultiMapUtils", "Bag", "ArrayListValuedHashMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of MultiMapUtils.getValuesAsBag when the input map contains non-bag collections."}, {"name": "testGetValuesAsBag_BagCollection", "primary_tested": ["MultiMapUtils.getValuesAsBag(MultiValuedMap<String,String>,String)"], "associated_methods": ["ArrayListValuedHashMap.putAll(String,Bag<String>)", "Bag.size()", "Bag.getCount(String)"], "external_dependencies": {"modules": ["MultiValuedMap", "MultiMapUtils", "Bag", "ArrayListValuedHashMap", "HashBag"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of MultiMapUtils.getValuesAsBag when the input map contains bag collections."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/CollectionBag_addAllTest.java", "testclass_name": "CollectionBag_addAllTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import org.apache.commons.collections4.Bag;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;", "import java.util.Arrays;", "import java.util.Collection;"], "name": "CollectionBag_addAllTest", "description": "Unit tests for the addAll method of the CollectionBag class.", "class_members": {"variables": [{"name": "mockBag", "type": "Bag<String>"}, {"name": "collectionBag", "type": "CollectionBag<String>"}]}, "fixtures": [], "test_cases": [{"name": "testAddAll", "primary_tested": ["CollectionBag.addAll(Collection<String>)"], "associated_methods": ["Bag.add(String,int)"], "external_dependencies": {"modules": ["Bag", "CollectionBag", "Arrays", "Collection"], "class_members": [{"name": "mockBag", "type": "variable"}, {"name": "collectionBag", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the addAll functionality of the CollectionBag, verifying that elements are added correctly and the result is as expected."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/CollectionSortedBag_addAllTest.java", "testclass_name": "CollectionSortedBag_addAllTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Collections;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "CollectionSortedBag_addAllTest", "description": "Tests for the addAll method of CollectionSortedBag.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testAddAll_EmptyCollection", "primary_tested": ["CollectionSortedBag.addAll(Collection)"], "external_dependencies": {"modules": ["CollectionSortedBag", "TreeBag", "Collections"]}, "category": "unit", "description": "Tests the addAll method with an empty collection."}, {"name": "testAddAll_NonEmptyCollection", "primary_tested": ["CollectionSortedBag.addAll(Collection)"], "external_dependencies": {"modules": ["CollectionSortedBag", "TreeBag", "Arrays"]}, "category": "unit", "description": "Tests the addAll method with a non-empty collection."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/CollectionSortedBag_addTest.java", "testclass_name": "CollectionSortedBag_addTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import org.apache.commons.collections4.SortedBag;", "import org.junit.jupiter.api.Test;", "import static org.mockito.Mockito.*;"], "name": "CollectionSortedBag_addTest", "description": "Unit test for the add method in CollectionSortedBag.", "class_members": {"variables": [{"name": "mockBag", "type": "SortedBag<String>"}, {"name": "bag", "type": "CollectionSortedBag<String>"}]}, "fixtures": [], "test_cases": [{"name": "testAdd", "primary_tested": ["CollectionSortedBag.add(String,int)"], "associated_methods": ["SortedBag.add(String,int)"], "external_dependencies": {"modules": ["SortedBag", "CollectionSortedBag"], "class_members": [{"name": "mockBag", "type": "variable"}, {"name": "bag", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the add functionality of the CollectionSortedBag, verifying that the add method delegates to the underlying SortedBag."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/TransformedBag_transformedBagTest.java", "testclass_name": "TransformedBag_transformedBagTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import org.apache.commons.collections4.Bag;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;"], "name": "TransformedBag_transformedBagTest", "description": "Unit tests for the TransformedBag.transformedBag method.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testTransformedBagWithNonEmptyBag", "primary_tested": ["TransformedBag.transformedBag(Bag<String>,Transformer<String,String>)"], "associated_methods": ["Bag.isEmpty()", "Bag.toArray()", "Transformer.apply(String)"], "external_dependencies": {"modules": ["Bag", "Transformer", "TransformedBag"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the TransformedBag.transformedBag method with a non-empty Bag, verifying that the transformer is applied to each element and the resulting Bag is not null."}, {"name": "testTransformedBagWithEmptyBag", "primary_tested": ["TransformedBag.transformedBag(Bag<String>,Transformer<String,String>)"], "associated_methods": ["Bag.isEmpty()"], "external_dependencies": {"modules": ["Bag", "Transformer", "TransformedBag"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the TransformedBag.transformedBag method with an empty Bag, verifying that no transformation occurs and the resulting Bag is not null."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/ComparatorUtils_minTest.java", "testclass_name": "ComparatorUtils_minTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.Comparator;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "ComparatorUtils_minTest", "description": "Unit tests for the ComparatorUtils.min method with different comparators.", "class_members": {"variables": [{"name": "o1", "type": "Integer"}, {"name": "o2", "type": "Integer"}, {"name": "comparator", "type": "Comparator<Integer>"}]}, "test_cases": [{"name": "testMinWithDefaultComparator", "primary_tested": ["ComparatorUtils.min(Integer,Integer,Comparator<Integer>)"], "external_dependencies": {"modules": ["ComparatorUtils", "Comparator"], "class_members": [{"name": "o1", "type": "variable"}, {"name": "o2", "type": "variable"}, {"name": "comparator", "type": "variable"}]}, "category": "unit", "description": "Tests the min method of ComparatorUtils with a null comparator, expecting the first object to be returned."}, {"name": "testMinWithCustomComparator", "primary_tested": ["ComparatorUtils.min(Integer,Integer,Comparator<Integer>)"], "external_dependencies": {"modules": ["ComparatorUtils", "Comparator"], "class_members": [{"name": "o1", "type": "variable"}, {"name": "o2", "type": "variable"}, {"name": "comparator", "type": "variable"}]}, "category": "unit", "description": "Tests the min method of ComparatorUtils with a natural order comparator, expecting the first object to be returned."}, {"name": "testMinWithReversedComparator", "primary_tested": ["ComparatorUtils.min(Integer,Integer,Comparator<Integer>)"], "external_dependencies": {"modules": ["ComparatorUtils", "Comparator"], "class_members": [{"name": "o1", "type": "variable"}, {"name": "o2", "type": "variable"}, {"name": "comparator", "type": "variable"}]}, "category": "unit", "description": "Tests the min method of ComparatorUtils with a reversed order comparator, expecting the second object to be returned."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/SetUtils_unmodifiableSetTest.java", "testclass_name": "SetUtils_unmodifiableSetTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.Set;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "SetUtils_unmodifiableSetTest", "description": "Unit tests for the unmodifiableSet method in SetUtils.", "fixtures": ["setUp"], "test_cases": [{"name": "testUnmodifiableSetWithNull", "primary_tested": ["SetUtils.unmodifiableSet(Object[])"], "external_dependencies": {"modules": ["SetUtils"]}, "category": "unit", "fixtures_used": [], "description": "Tests the unmodifiableSet method with a null array, expecting a null result."}, {"name": "testUnmodifiableSetWithEmptyArray", "primary_tested": ["SetUtils.unmodifiableSet()"], "external_dependencies": {"modules": ["SetUtils"]}, "category": "unit", "fixtures_used": [], "description": "Tests the unmodifiableSet method with an empty array, expecting an empty set."}, {"name": "testUnmodifiableSetWithNonEmptyArray", "primary_tested": ["SetUtils.unmodifiableSet(String[])"], "associated_methods": ["Set.size()", "Set.contains(Object)"], "external_dependencies": {"modules": ["SetUtils", "Set"]}, "category": "unit", "fixtures_used": [], "description": "Tests the unmodifiableSet method with a non-empty array, expecting a set with the correct elements."}, {"name": "testUnmodifiableSetWithDuplicates", "primary_tested": ["SetUtils.unmodifiableSet(String[])"], "associated_methods": ["Set.size()", "Set.contains(Object)"], "external_dependencies": {"modules": ["SetUtils", "Set"]}, "category": "unit", "fixtures_used": [], "description": "Tests the unmodifiableSet method with an array containing duplicates, expecting a set with unique elements."}, {"name": "testUnmodifiableSetWithMixedTypes", "primary_tested": ["SetUtils.unmodifiableSet(Object[])"], "associated_methods": ["Set.size()", "Set.contains(Object)"], "external_dependencies": {"modules": ["SetUtils", "Set"]}, "category": "unit", "fixtures_used": [], "description": "Tests the unmodifiableSet method with an array containing mixed types, expecting a set with the correct elements."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/CollectionBag_addTest.java", "testclass_name": "CollectionBag_addTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import org.apache.commons.collections4.Bag;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;"], "name": "CollectionBag_addTest", "description": "Unit tests for the add method of CollectionBag.", "class_members": {"variables": [{"name": "mockBag", "type": "Bag<String>"}, {"name": "collectionBag", "type": "CollectionBag<String>"}, {"name": "object", "type": "String"}, {"name": "count", "type": "int"}]}, "test_cases": [{"name": "testAdd", "primary_tested": ["CollectionBag.add(String,int)"], "associated_methods": ["Bag.add(String,int)"], "external_dependencies": {"modules": ["Bag", "CollectionBag", "Mockito"], "class_members": [{"name": "mockBag", "type": "variable"}, {"name": "collectionBag", "type": "variable"}, {"name": "object", "type": "variable"}, {"name": "count", "type": "variable"}]}, "category": "unit", "description": "Tests the add functionality of the CollectionBag, verifying that the object is added with the specified count and that the underlying Bag's add method is called."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/IteratorUtils_getTest.java", "testclass_name": "IteratorUtils_getTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.ArrayList;", "import java.util.Iterator;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "IteratorUtils_getTest", "description": "Unit tests for the IteratorUtils.get method, which retrieves elements from an iterator at specified indices.", "class_members": {"variables": [{"name": "list", "type": "List<String>"}, {"name": "iterator", "type": "Iterator<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetElementAtIndex", "primary_tested": ["IteratorUtils.get(Iterator<String>,int)"], "external_dependencies": {"modules": ["IteratorUtils", "List", "Iterator"], "class_members": [{"name": "iterator", "type": "variable"}, {"name": "list", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests retrieving elements from an iterator at valid indices."}, {"name": "testGetElementWithNegativeIndex", "primary_tested": ["IteratorUtils.get(Iterator<String>,int)"], "external_dependencies": {"modules": ["IteratorUtils", "Iterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests retrieving an element from an iterator with a negative index, expecting an IndexOutOfBoundsException."}, {"name": "testGetElementWithIndexOutOfBounds", "primary_tested": ["IteratorUtils.get(Iterator<String>,int)"], "external_dependencies": {"modules": ["IteratorUtils", "Iterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests retrieving an element from an iterator with an index out of bounds, expecting an IndexOutOfBoundsException."}, {"name": "testGetElementFromEmptyIterator", "primary_tested": ["IteratorUtils.get(Iterator<String>,int)"], "external_dependencies": {"modules": ["IteratorUtils", "List", "Iterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "description": "Tests retrieving an element from an empty iterator, expecting an IndexOutOfBoundsException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/ListUtils_isEqualListTest.java", "testclass_name": "ListUtils_isEqualListTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "ListUtils_isEqualListTest", "description": "Unit tests for the isEqualList method in ListUtils class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testIsEqualList_SameReference", "primary_tested": ["ListUtils.isEqualList(List,List)"], "external_dependencies": {"modules": ["ListUtils", "Arrays"]}, "category": "unit", "description": "Tests isEqualList method with the same list reference."}, {"name": "testIsEqualList_BothNull", "primary_tested": ["ListUtils.isEqualList(List,List)"], "external_dependencies": {"modules": ["ListUtils"]}, "category": "unit", "description": "Tests isEqualList method with both lists being null."}, {"name": "testIsEqualList_OneNull", "primary_tested": ["ListUtils.isEqualList(List,List)"], "external_dependencies": {"modules": ["ListUtils", "Arrays"]}, "category": "unit", "description": "Tests isEqualList method with one list being null."}, {"name": "testIsEqualList_DifferentSize", "primary_tested": ["ListUtils.isEqualList(List,List)"], "external_dependencies": {"modules": ["ListUtils", "Arrays"]}, "category": "unit", "description": "Tests isEqualList method with lists of different sizes."}, {"name": "testIsEqualList_SameElements", "primary_tested": ["ListUtils.isEqualList(List,List)"], "external_dependencies": {"modules": ["ListUtils", "Arrays"]}, "category": "unit", "description": "Tests isEqualList method with lists containing the same elements."}, {"name": "testIsEqualList_DifferentElements", "primary_tested": ["ListUtils.isEqualList(List,List)"], "external_dependencies": {"modules": ["ListUtils", "Arrays"]}, "category": "unit", "description": "Tests isEqualList method with lists containing different elements."}, {"name": "testIsEqualList_EmptyLists", "primary_tested": ["ListUtils.isEqualList(List,List)"], "external_dependencies": {"modules": ["ListUtils", "Collections"]}, "category": "unit", "description": "Tests isEqualList method with both lists being empty."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/TreeBag_addTest.java", "testclass_name": "TreeBag_addTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import org.junit.jupiter.api.Test;", "import java.util.Comparator;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "TreeBag_addTest", "description": "Unit tests for the add method of the TreeBag class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testAddWithComparableObject", "primary_tested": ["TreeBag.add(String)"], "external_dependencies": {"modules": ["TreeBag", "String"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the add method of TreeBag with a comparable object (String)."}, {"name": "testAddWithNonComparableObjectAndNoComparator", "primary_tested": ["TreeBag.add(Object)"], "external_dependencies": {"modules": ["TreeBag", "Object"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the add method of TreeBag with a non-comparable object and no custom comparator, expecting an IllegalArgumentException."}, {"name": "testAddWithNonComparableObjectAndCustomComparator", "primary_tested": ["TreeBag.add(Object)"], "external_dependencies": {"modules": ["TreeBag", "Object", "Comparator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the add method of TreeBag with a non-comparable object and a custom comparator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/UnmodifiableCollection_unmodifiableCollectionTest.java", "testclass_name": "UnmodifiableCollection_unmodifiableCollectionTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import org.apache.commons.collections4.Unmodifiable;", "import org.junit.jupiter.api.Test;", "import java.util.ArrayList;", "import java.util.Collection;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "UnmodifiableCollection_unmodifiableCollectionTest", "description": "Tests for the UnmodifiableCollection class, specifically the unmodifiableCollection method.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testUnmodifiableCollectionWithUnmodifiableCollection", "primary_tested": ["UnmodifiableCollection.unmodifiableCollection(Collection)"], "external_dependencies": {"modules": ["ArrayList", "Collection", "UnmodifiableCollection"]}, "category": "unit", "description": "Tests that wrapping an unmodifiable collection with unmodifiableCollection returns the same instance."}, {"name": "testUnmodifiableCollectionWithModifiableCollection", "primary_tested": ["UnmodifiableCollection.unmodifiableCollection(Collection)"], "external_dependencies": {"modules": ["ArrayList", "Collection", "UnmodifiableCollection", "Unmodifiable"]}, "category": "unit", "description": "Tests that wrapping a modifiable collection with unmodifiableCollection returns an instance of Unmodifiable."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/CollectionBag_retainAllTest.java", "testclass_name": "CollectionBag_retainAllTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import org.apache.commons.collections4.Bag;", "import org.junit.jupiter.api.Test;", "import org.mockito.Mockito;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.Iterator;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.mockito.Mockito.*;"], "name": "CollectionBag_retainAllTest", "description": "Unit tests for the retainAll method in CollectionBag.", "class_members": {"variables": [{"name": "mockBag", "type": "Bag<String>"}, {"name": "collectionBag", "type": "CollectionBag<String>"}, {"name": "coll", "type": "Collection<String>"}, {"name": "mockIterator", "type": "Iterator<String>"}]}, "fixtures": [], "test_cases": [{"name": "testRetainAll_NonEmptyCollection", "primary_tested": ["CollectionBag.retainAll(Collection)"], "associated_methods": ["Bag.iterator()", "Iterator.hasNext()", "Iterator.next()", "Iterator.remove()"], "external_dependencies": {"modules": ["Bag", "CollectionBag", "Collection", "Iterator", "Mockito", "Arrays"], "class_members": [{"name": "mockBag", "type": "variable"}, {"name": "collectionBag", "type": "variable"}, {"name": "coll", "type": "variable"}, {"name": "mockIterator", "type": "variable"}]}, "category": "unit", "description": "Tests the retainAll method with a non-empty collection."}, {"name": "testRetainAll_NullCollection", "primary_tested": ["CollectionBag.retainAll(Collection)"], "associated_methods": ["Bag.retainAll(Collection)"], "external_dependencies": {"modules": ["Bag", "CollectionBag", "Mockito"], "class_members": [{"name": "mockBag", "type": "variable"}, {"name": "collectionBag", "type": "variable"}]}, "category": "unit", "description": "Tests the retainAll method with a null collection."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_elementTest.java", "testclass_name": "CircularFifoQueue_elementTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CircularFifoQueue_elementTest", "description": "Unit tests for the element method of CircularFifoQueue.", "class_members": {"variables": [{"name": "queue", "type": "CircularFifoQueue<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testElementWhenQueueIsEmpty", "primary_tested": ["CircularFifoQueue.element()"], "external_dependencies": {"modules": ["CircularFifoQueue", "NoSuchElementException"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior of the element method when the queue is empty, expecting a NoSuchElementException."}, {"name": "testElementWhenQueueHasElements", "primary_tested": ["CircularFifoQueue.element()"], "associated_methods": ["CircularFifoQueue.add(String)"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the element method when the queue has elements, expecting the first element added."}, {"name": "testElementAfterAddingAndRemovingElements", "primary_tested": ["CircularFifoQueue.element()"], "associated_methods": ["CircularFifoQueue.add(String)", "CircularFifoQueue.remove()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the element method after adding and removing elements, expecting the next element in the queue."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_getTest.java", "testclass_name": "CircularFifoQueue_getTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CircularFifoQueue_getTest", "description": "Unit tests for the get method of CircularFifoQueue.", "class_members": {"variables": [{"name": "queue", "type": "CircularFifoQueue<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetValidIndex", "primary_tested": ["CircularFifoQueue.get(int)"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method with valid indices."}, {"name": "testGetInvalidIndex", "primary_tested": ["CircularFifoQueue.get(int)"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method with invalid indices, expecting NoSuchElementException."}, {"name": "testGetAfterRemove", "primary_tested": ["CircularFifoQueue.get(int)"], "associated_methods": ["CircularFifoQueue.remove()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method after elements have been removed."}, {"name": "testGetWithWrapAround", "primary_tested": ["CircularFifoQueue.get(int)"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method when elements wrap around the queue."}, {"name": "testGetEmptyQueue", "primary_tested": ["CircularFifoQueue.get(int)"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method on an empty queue, expecting NoSuchElementException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_iteratorTest.java", "testclass_name": "CircularFifoQueue_iteratorTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.NoSuchElementException;", "import java.util.Iterator;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CircularFifoQueue_iteratorTest", "description": "Unit tests for the iterator functionality of the CircularFifoQueue class.", "class_members": {"variables": [{"name": "queue", "type": "CircularFifoQueue<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testIteratorHasNext", "primary_tested": ["Iterator.hasNext()"], "external_dependencies": {"modules": ["CircularFifoQueue", "Iterator"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method of the iterator for the CircularFifoQueue."}, {"name": "testIteratorNext", "primary_tested": ["Iterator.next()"], "external_dependencies": {"modules": ["CircularFifoQueue", "Iterator", "NoSuchElementException"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method of the iterator for the CircularFifoQueue, including handling of NoSuchElementException."}, {"name": "testIteratorRemove", "primary_tested": ["Iterator.remove()"], "associated_methods": ["CircularFifoQueue.size()", "CircularFifoQueue.peek()"], "external_dependencies": {"modules": ["CircularFifoQueue", "Iterator"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the remove method of the iterator for the CircularFifoQueue, including checking the size and peek of the queue after removal."}, {"name": "testIteratorRemoveWithoutNext", "primary_tested": ["Iterator.remove()"], "external_dependencies": {"modules": ["CircularFifoQueue", "Iterator", "IllegalStateException"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the remove method of the iterator for the CircularFifoQueue without calling next, expecting an IllegalStateException."}, {"name": "testIteratorRemoveTwice", "primary_tested": ["Iterator.remove()"], "external_dependencies": {"modules": ["CircularFifoQueue", "Iterator", "IllegalStateException"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the remove method of the iterator for the CircularFifoQueue when called twice in a row, expecting an IllegalStateException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/PredicatedCollection_addAllTest.java", "testclass_name": "PredicatedCollection_addAllTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import org.apache.commons.collections4.Predicate;", "import org.apache.commons.collections4.functors.NotNullPredicate;", "import org.junit.jupiter.api.Test;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.assertThrows;"], "name": "PredicatedCollection_addAllTest", "description": "Unit tests for the addAll method of PredicatedCollection, ensuring it handles both valid and invalid elements correctly.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testAddAll_ValidElements", "primary_tested": ["PredicatedCollection.addAll(Collection)"], "external_dependencies": {"modules": ["Predicate", "NotNullPredicate", "PredicatedCollection", "ArrayList", "Arrays", "Collection"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the addAll method of PredicatedCollection with valid elements, ensuring it returns true."}, {"name": "testAddAll_InvalidElement", "primary_tested": ["PredicatedCollection.addAll(Collection)"], "external_dependencies": {"modules": ["Predicate", "NotNullPredicate", "PredicatedCollection", "ArrayList", "Arrays", "Collection"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the addAll method of PredicatedCollection with an invalid element, ensuring it throws an IllegalArgumentException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/CollectionSortedBag_retainAllTest.java", "testclass_name": "CollectionSortedBag_retainAllTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import org.apache.commons.collections4.SortedBag;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import org.mockito.Mockito;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.Iterator;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.mockito.Mockito.*;"], "name": "CollectionSortedBag_retainAllTest", "description": "Unit tests for the retainAll method in CollectionSortedBag.", "class_members": {"variables": [{"name": "bag", "type": "CollectionSortedBag<String>"}, {"name": "mockBag", "type": "SortedBag<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRetainAll_NonEmptyCollection", "primary_tested": ["CollectionSortedBag.retainAll(Collection)"], "associated_methods": ["SortedBag.iterator()", "Iterator.hasNext()", "Iterator.next()", "SortedBag.contains(Object)"], "external_dependencies": {"modules": ["CollectionSortedBag", "SortedBag", "Iterator", "Arrays"], "class_members": [{"name": "bag", "type": "variable"}, {"name": "mockBag", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retainAll method with a non-empty collection, ensuring that elements not in the collection are removed."}, {"name": "testRetainAll_NullCollection", "primary_tested": ["CollectionSortedBag.retainAll(Collection)"], "associated_methods": ["SortedBag.retainAll(Collection)"], "external_dependencies": {"modules": ["CollectionSortedBag", "SortedBag"], "class_members": [{"name": "bag", "type": "variable"}, {"name": "mockBag", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retainAll method with a null collection, ensuring that the method returns false and delegates to the underlying SortedBag."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_peekTest.java", "testclass_name": "CircularFifoQueue_peekTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CircularFifoQueue_peekTest", "description": "Unit tests for the peek functionality of the CircularFifoQueue class.", "class_members": {"variables": [{"name": "queue", "type": "CircularFifoQueue<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPeekOnEmptyQueue", "primary_tested": ["CircularFifoQueue.peek()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the peek functionality on an empty queue, expecting a null result."}, {"name": "testPeekOnNonEmptyQueue", "primary_tested": ["CircularFifoQueue.peek()"], "associated_methods": ["CircularFifoQueue.add(String)"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the peek functionality on a non-empty queue, expecting the first added element."}, {"name": "testPeekAfterAddingElements", "primary_tested": ["CircularFifoQueue.peek()"], "associated_methods": ["CircularFifoQueue.add(String)"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the peek functionality after adding elements to the queue, expecting the first added element and then the next after the queue wraps around."}, {"name": "testPeekAfterRemovingElements", "primary_tested": ["CircularFifoQueue.peek()"], "associated_methods": ["CircularFifoQueue.add(String)", "CircularFifoQueue.remove()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the peek functionality after removing elements from the queue, expecting the next element in the queue."}, {"name": "testPeekAfterClearingQueue", "primary_tested": ["CircularFifoQueue.peek()"], "associated_methods": ["CircularFifoQueue.add(String)", "CircularFifoQueue.clear()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the peek functionality after clearing the queue, expecting a null result."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/PredicatedCollection_addTest.java", "testclass_name": "PredicatedCollection_addTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import org.apache.commons.collections4.Predicate;", "import org.apache.commons.collections4.functors.TruePredicate;", "import org.junit.jupiter.api.Test;", "import java.util.ArrayList;", "import java.util.Collection;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "PredicatedCollection_addTest", "description": "Unit tests for the add method of PredicatedCollection, ensuring elements are added based on a predicate.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testAddValidElement", "primary_tested": ["PredicatedCollection.add(String)"], "external_dependencies": {"modules": ["TruePredicate", "ArrayList", "PredicatedCollection", "Collection"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the addition of a valid element to the PredicatedCollection when the predicate allows it."}, {"name": "testAddInvalidElement", "primary_tested": ["PredicatedCollection.add(String)"], "external_dependencies": {"modules": ["ArrayList", "PredicatedCollection", "Collection"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the addition of an invalid element to the PredicatedCollection when the predicate rejects it, expecting an IllegalArgumentException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_clearTest.java", "testclass_name": "CompositeCollection_clearTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.mockito.Mockito.*;", "import java.util.ArrayList;", "import java.util.Collection;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import org.mockito.Mockito;"], "name": "CompositeCollection_clearTest", "description": "Unit tests for the clear functionality of the CompositeCollection class.", "class_members": {"variables": [{"name": "compositeCollection", "type": "CompositeCollection<String>"}, {"name": "mockCollection1", "type": "Collection<String>"}, {"name": "mockCollection2", "type": "Collection<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testClear", "primary_tested": ["CompositeCollection.clear()"], "associated_methods": ["Collection.clear()"], "external_dependencies": {"modules": ["CompositeCollection", "Collection", "Mockito"], "class_members": [{"name": "compositeCollection", "type": "variable"}, {"name": "mockCollection1", "type": "variable"}, {"name": "mockCollection2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clear functionality of the CompositeCollection, ensuring that the clear method is called on all composed collections."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_clearTest.java", "testclass_name": "IndexedCollection_clearTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Collection;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "IndexedCollection_clearTest", "description": "Tests for the clear functionality of the IndexedCollection class.", "class_members": {"variables": [{"name": "indexedCollection", "type": "IndexedCollection<Integer, String>"}, {"name": "originalCollection", "type": "Collection<String>"}], "methods": [{"name": "decorateUniqueCollection", "signature": "IndexedCollection<Integer, String> decorateUniqueCollection(Collection<String> original)"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testClearRemovesAllElementsFromIndex", "primary_tested": ["IndexedCollection.clear()"], "associated_methods": ["IndexedCollection.reindex()", "IndexedCollection.get(Integer)"], "external_dependencies": {"modules": ["IndexedCollection", "Collection", "ArrayList"], "class_members": [{"name": "indexedCollection", "type": "variable"}, {"name": "originalCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the clear method removes all elements from the index of the IndexedCollection."}, {"name": "testClearRemovesAllElementsFromDecoratedCollection", "primary_tested": ["IndexedCollection.clear()"], "associated_methods": ["IndexedCollection.reindex()", "Collection.isEmpty()"], "external_dependencies": {"modules": ["IndexedCollection", "Collection", "ArrayList"], "class_members": [{"name": "indexedCollection", "type": "variable"}, {"name": "originalCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the clear method removes all elements from the decorated collection of the IndexedCollection."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_removeTest.java", "testclass_name": "CircularFifoQueue_removeTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CircularFifoQueue_removeTest", "description": "Unit tests for the remove functionality of the CircularFifoQueue class.", "class_members": {"variables": [{"name": "queue", "type": "CircularFifoQueue<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveWhenQueueIsEmpty", "primary_tested": ["CircularFifoQueue.remove()"], "external_dependencies": {"modules": ["CircularFifoQueue", "NoSuchElementException"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior of the remove method when the queue is empty, expecting a NoSuchElementException."}, {"name": "testRemoveWhenQueueHasOneElement", "primary_tested": ["CircularFifoQueue.remove()"], "associated_methods": ["CircularFifoQueue.add(String)", "CircularFifoQueue.isEmpty()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior of the remove method when the queue has one element, verifying the element is removed and the queue is empty."}, {"name": "testRemoveWhenQueueIsFull", "primary_tested": ["CircularFifoQueue.remove()"], "associated_methods": ["CircularFifoQueue.add(String)", "CircularFifoQueue.isFull()", "CircularFifoQueue.size()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior of the remove method when the queue is full, verifying the element is removed and the queue is no longer full."}, {"name": "testRemoveWhenQueueWrapsAround", "primary_tested": ["CircularFifoQueue.remove()"], "associated_methods": ["CircularFifoQueue.add(String)", "CircularFifoQueue.size()", "CircularFifoQueue.toString()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior of the remove method when the queue wraps around, verifying the correct element is removed and the queue size is updated."}, {"name": "testRemoveMultipleElements", "primary_tested": ["CircularFifoQueue.remove()"], "associated_methods": ["CircularFifoQueue.add(String)", "CircularFifoQueue.size()", "CircularFifoQueue.toString()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior of the remove method when multiple elements are removed, verifying the correct elements are removed and the queue size is updated."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/LazySortedMap_subMapTest.java", "testclass_name": "LazySortedMap_subMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.Factory;", "import org.junit.jupiter.api.Test;", "import java.util.SortedMap;", "import java.util.TreeMap;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNotNull;"], "name": "LazySortedMap_subMapTest", "description": "Unit tests for the subMap functionality of LazySortedMap.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testSubMap", "primary_tested": ["LazySortedMap.subMap(int,int)"], "associated_methods": ["SortedMap.size()", "SortedMap.get(int)"], "external_dependencies": {"modules": ["SortedMap", "TreeMap", "Factory", "LazySortedMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the subMap functionality of the LazySortedMap, ensuring that the subMap is correctly created and contains the expected entries."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/TransformedCollection_transformedCollectionTest.java", "testclass_name": "TransformedCollection_transformedCollectionTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.Collections;", "import java.util.LinkedList;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "TransformedCollection_transformedCollectionTest", "description": "Unit tests for the TransformedCollection class, specifically testing the transformedCollection method with both non-empty and empty collections.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testTransformedCollectionWithNonEmptyCollection", "primary_tested": ["TransformedCollection.transformedCollection(Collection<String>,Transformer<String,String>)"], "associated_methods": ["TransformedCollection.size()", "TransformedCollection.contains(String)"], "external_dependencies": {"modules": ["org.apache.commons.collections4.Transformer", "java.util.Arrays", "java.util.Collection", "java.util.LinkedList", "org.apache.commons.collections4.collection.TransformedCollection"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformedCollection method with a non-empty collection, ensuring the transformed collection contains the expected elements."}, {"name": "testTransformedCollectionWithEmptyCollection", "primary_tested": ["TransformedCollection.transformedCollection(Collection<String>,Transformer<String,String>)"], "associated_methods": ["TransformedCollection.isEmpty()"], "external_dependencies": {"modules": ["org.apache.commons.collections4.Transformer", "java.util.Collections", "java.util.Collection", "org.apache.commons.collections4.collection.TransformedCollection"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformedCollection method with an empty collection, ensuring the transformed collection is also empty."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/UnmodifiableMap_keySetTest.java", "testclass_name": "UnmodifiableMap_keySetTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.set.UnmodifiableSet;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;", "import java.util.Set;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "UnmodifiableMap_keySetTest", "description": "Tests the keySet functionality of the UnmodifiableMap class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testKeySet", "primary_tested": ["UnmodifiableMap.keySet()"], "associated_methods": ["UnmodifiableSet.contains(String)"], "external_dependencies": {"modules": ["UnmodifiableMap", "UnmodifiableSet", "HashMap", "Map", "Set"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests if the keySet of an UnmodifiableMap is an instance of UnmodifiableSet and contains the expected keys."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/UnmodifiableBoundedCollection_unmodifiableBoundedCollectionTest.java", "testclass_name": "UnmodifiableBoundedCollection_unmodifiableBoundedCollectionTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import org.apache.commons.collections4.BoundedCollection;", "import org.apache.commons.collections4.Unmodifiable;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.ArrayList;", "import java.util.Collection;", "import java.util.Iterator;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "UnmodifiableBoundedCollection_unmodifiableBoundedCollectionTest", "description": "Tests for the UnmodifiableBoundedCollection class, focusing on its unmodifiableBoundedCollection method.", "class_members": {"variables": [{"name": "boundedCollection", "type": "BoundedCollection<String>"}], "methods": [], "nested_classes": [{"name": "BoundedCollectionImpl", "description": "Internal implementation of BoundedCollection"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testUnmodifiableBoundedCollectionWithUnmodifiableCollection", "primary_tested": ["UnmodifiableBoundedCollection.unmodifiableBoundedCollection(BoundedCollection)"], "external_dependencies": {"modules": ["UnmodifiableBoundedCollection", "BoundedCollection", "Unmodifiable"], "class_members": [{"name": "boundedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the unmodifiableBoundedCollection method returns an instance of Unmodifiable."}, {"name": "testUnmodifiableBoundedCollectionWithModifiableCollection", "primary_tested": ["UnmodifiableBoundedCollection.unmodifiableBoundedCollection(BoundedCollection)"], "external_dependencies": {"modules": ["UnmodifiableBoundedCollection", "BoundedCollection", "Unmodifiable"], "class_members": [{"name": "boundedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the unmodifiableBoundedCollection method returns a different instance and if it is an instance of Unmodifiable."}, {"name": "testUnmodifiableBoundedCollectionWithNullCollection", "primary_tested": ["UnmodifiableBoundedCollection.unmodifiableBoundedCollection(BoundedCollection)"], "external_dependencies": {"modules": ["UnmodifiableBoundedCollection"]}, "category": "unit", "fixtures_used": [], "description": "Tests if the unmodifiableBoundedCollection method throws a NullPointerException when passed a null collection."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_clearTest.java", "testclass_name": "CircularFifoQueue_clearTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.NoSuchElementException;", "import java.util.Iterator;"], "name": "CircularFifoQueue_clearTest", "description": "Unit tests for the clear functionality of the CircularFifoQueue class.", "class_members": {"variables": [{"name": "queue", "type": "CircularFifoQueue<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testClearEmptyQueue", "primary_tested": ["CircularFifoQueue.clear()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests clearing an empty CircularFifoQueue."}, {"name": "testClearNonEmptyQueue", "primary_tested": ["CircularFifoQueue.clear()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests clearing a non-empty CircularFifoQueue."}, {"name": "testClearAndAdd", "primary_tested": ["CircularFifoQueue.clear()"], "associated_methods": ["CircularFifoQueue.add(String)", "CircularFifoQueue.peek()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests clearing a CircularFifoQueue and then adding an element."}, {"name": "testClearAndIterator", "primary_tested": ["CircularFifoQueue.clear()"], "associated_methods": ["CircularFifoQueue.iterator()", "Iterator.hasNext()", "Iterator.next()"], "external_dependencies": {"modules": ["CircularFifoQueue", "Iterator", "NoSuchElementException"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests clearing a CircularFifoQueue and then using an iterator."}, {"name": "testClearAndRemove", "primary_tested": ["CircularFifoQueue.clear()"], "associated_methods": ["CircularFifoQueue.remove()"], "external_dependencies": {"modules": ["CircularFifoQueue", "NoSuchElementException"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests clearing a CircularFifoQueue and then attempting to remove an element."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/ArrayStack_searchTest.java", "testclass_name": "ArrayStack_searchTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.EmptyStackException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ArrayStack_searchTest", "description": "Unit tests for the search functionality of the ArrayStack class.", "class_members": {"variables": [{"name": "stack", "type": "ArrayStack<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testSearchTopItem", "primary_tested": ["ArrayStack.search(String)"], "associated_methods": ["ArrayStack.push(String)"], "external_dependencies": {"modules": ["ArrayStack"], "class_members": [{"name": "stack", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the search functionality for the top item in the stack."}, {"name": "testSearchMiddleItem", "primary_tested": ["ArrayStack.search(String)"], "associated_methods": ["ArrayStack.push(String)"], "external_dependencies": {"modules": ["ArrayStack"], "class_members": [{"name": "stack", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the search functionality for a middle item in the stack."}, {"name": "testSearchBottomItem", "primary_tested": ["ArrayStack.search(String)"], "associated_methods": ["ArrayStack.push(String)"], "external_dependencies": {"modules": ["ArrayStack"], "class_members": [{"name": "stack", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the search functionality for the bottom item in the stack."}, {"name": "testSearchMissingItem", "primary_tested": ["ArrayStack.search(String)"], "associated_methods": ["ArrayStack.push(String)"], "external_dependencies": {"modules": ["ArrayStack"], "class_members": [{"name": "stack", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the search functionality for a missing item in the stack."}, {"name": "testSearchEmptyStack", "primary_tested": ["ArrayStack.search(String)"], "external_dependencies": {"modules": ["ArrayStack"], "class_members": [{"name": "stack", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the search functionality for an item in an empty stack."}, {"name": "testSearchNullItem", "primary_tested": ["ArrayStack.search(String)"], "associated_methods": ["ArrayStack.push(String)"], "external_dependencies": {"modules": ["ArrayStack"], "class_members": [{"name": "stack", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the search functionality for a null item in the stack."}, {"name": "testSearchNullInEmptyStack", "primary_tested": ["ArrayStack.search(String)"], "external_dependencies": {"modules": ["ArrayStack"], "class_members": [{"name": "stack", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the search functionality for a null item in an empty stack."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_addTest.java", "testclass_name": "CompositeCollection_addTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeCollection_addTest", "description": "Unit tests for the add functionality of the CompositeCollection class.", "class_members": {"variables": [{"name": "c", "type": "CompositeCollection<String>"}, {"name": "one", "type": "Collection<String>"}, {"name": "two", "type": "Collection<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAddWithMutator", "primary_tested": ["CompositeCollection.add(String)"], "associated_methods": ["CompositeCollection.setMutator(CompositeCollection.CollectionMutator<String>)", "CompositeCollection.addComposited(Collection<String>)", "Collection.contains(String)"], "external_dependencies": {"modules": ["CompositeCollection", "Collection", "List"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the add functionality of the CompositeCollection when a mutator is set."}, {"name": "testAddWithoutMutator", "primary_tested": ["CompositeCollection.add(String)"], "external_dependencies": {"modules": ["CompositeCollection"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the add functionality of the CompositeCollection when no mutator is set, expecting an UnsupportedOperationException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/TransformerUtils_ifTransformerTest.java", "testclass_name": "TransformerUtils_ifTransformerTest", "dependencies": ["package org.apache.commons.collections4;", "import org.apache.commons.collections4.functors.ConstantTransformer;", "import org.apache.commons.collections4.functors.EqualPredicate;", "import org.apache.commons.collections4.functors.ExceptionTransformer;", "import org.apache.commons.collections4.functors.FalsePredicate;", "import org.apache.commons.collections4.functors.NOPTransformer;", "import org.apache.commons.collections4.functors.TruePredicate;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "TransformerUtils_ifTransformerTest", "description": "Unit tests for the ifTransformer method in TransformerUtils.", "class_members": {"variables": [{"name": "cObject", "type": "static final Object"}, {"name": "cString", "type": "static final Object"}, {"name": "cInteger", "type": "static final Object"}]}, "fixtures": [], "test_cases": [{"name": "testIfTransformer", "primary_tested": ["TransformerUtils.ifTransformer(Predicate,Transformer,Transformer)"], "associated_methods": ["ConstantTransformer.constantTransformer(Object)", "TruePredicate.truePredicate()", "FalsePredicate.falsePredicate()", "Transformer.transform(Object)"], "external_dependencies": {"modules": ["TruePredicate", "FalsePredicate", "ConstantTransformer", "TransformerUtils"], "class_members": [{"name": "cObject", "type": "variable"}, {"name": "cString", "type": "variable"}, {"name": "cInteger", "type": "variable"}]}, "category": "unit", "description": "Tests the ifTransformer method with TruePredicate and FalsePredicate, ensuring the correct transformer is applied based on the predicate."}, {"name": "testIfTransformerWithNullPredicate", "primary_tested": ["TransformerUtils.ifTransformer(Predicate,Transformer,Transformer)"], "associated_methods": ["ConstantTransformer.constantTransformer(Object)"], "external_dependencies": {"modules": ["ConstantTransformer", "TransformerUtils"], "class_members": [{"name": "cString", "type": "variable"}, {"name": "cInteger", "type": "variable"}]}, "category": "unit", "description": "Tests the ifTransformer method with a null predicate, expecting a NullPointerException."}, {"name": "testIfTransformerWithNullTrueTransformer", "primary_tested": ["TransformerUtils.ifTransformer(Predicate,Transformer,Transformer)"], "associated_methods": ["TruePredicate.truePredicate()", "ConstantTransformer.constantTransformer(Object)"], "external_dependencies": {"modules": ["TruePredicate", "ConstantTransformer", "TransformerUtils"], "class_members": [{"name": "cInteger", "type": "variable"}]}, "category": "unit", "description": "Tests the ifTransformer method with a null true transformer, expecting a NullPointerException."}, {"name": "testIfTransformerWithNullFalseTransformer", "primary_tested": ["TransformerUtils.ifTransformer(Predicate,Transformer,Transformer)"], "associated_methods": ["TruePredicate.truePredicate()", "ConstantTransformer.constantTransformer(Object)"], "external_dependencies": {"modules": ["TruePredicate", "ConstantTransformer", "TransformerUtils"], "class_members": [{"name": "cString", "type": "variable"}]}, "category": "unit", "description": "Tests the ifTransformer method with a null false transformer, expecting a NullPointerException."}, {"name": "testIfTransformerWithExceptionTransformer", "primary_tested": ["TransformerUtils.ifTransformer(Predicate,Transformer,Transformer)"], "associated_methods": ["TruePredicate.truePredicate()", "FalsePredicate.falsePredicate()", "ExceptionTransformer.exceptionTransformer()", "NOPTransformer.nopTransformer()", "Transformer.transform(Object)"], "external_dependencies": {"modules": ["TruePredicate", "FalsePredicate", "ExceptionTransformer", "NOPTransformer", "TransformerUtils"], "class_members": [{"name": "cObject", "type": "variable"}]}, "category": "unit", "description": "Tests the ifTransformer method with ExceptionTransformer and NOPTransformer, ensuring the correct transformer behavior including throwing a FunctorException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_pollTest.java", "testclass_name": "CircularFifoQueue_pollTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CircularFifoQueue_pollTest", "description": "Unit tests for the poll method of the CircularFifoQueue class.", "class_members": {"variables": [{"name": "queue", "type": "CircularFifoQueue<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPollEmptyQueue", "primary_tested": ["CircularFifoQueue.poll()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the poll method when the queue is empty."}, {"name": "testPollSingleElement", "primary_tested": ["CircularFifoQueue.poll()"], "associated_methods": ["CircularFifoQueue.add(String)", "CircularFifoQueue.isEmpty()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the poll method when the queue contains a single element."}, {"name": "testPollMultipleElements", "primary_tested": ["CircularFifoQueue.poll()"], "associated_methods": ["CircularFifoQueue.add(String)", "CircularFifoQueue.isEmpty()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the poll method when the queue contains multiple elements."}, {"name": "testPollAfterWrapAround", "primary_tested": ["CircularFifoQueue.poll()"], "associated_methods": ["CircularFifoQueue.add(String)", "CircularFifoQueue.isEmpty()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the poll method after the queue has wrapped around."}, {"name": "testPollAfterRemove", "primary_tested": ["CircularFifoQueue.poll()"], "associated_methods": ["CircularFifoQueue.add(String)", "CircularFifoQueue.remove()", "CircularFifoQueue.isEmpty()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the poll method after an element has been removed from the queue."}, {"name": "testPollAfterClear", "primary_tested": ["CircularFifoQueue.poll()"], "associated_methods": ["CircularFifoQueue.add(String)", "CircularFifoQueue.clear()", "CircularFifoQueue.isEmpty()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the poll method after the queue has been cleared."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/SetUtils_hashCodeForSetTest.java", "testclass_name": "SetUtils_hashCodeForSetTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNotEquals;", "import java.util.HashSet;", "import java.util.Set;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SetUtils_hashCodeForSetTest", "description": "Unit tests for the SetUtils.hashCodeForSet method, which calculates the hash code for a set.", "class_members": {"variables": [{"name": "setA", "type": "Set<Integer>"}, {"name": "setB", "type": "Set<Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testHashCodeForSetWithNonNullElements", "primary_tested": ["SetUtils.hashCodeForSet(Set<Integer>)"], "external_dependencies": {"modules": ["SetUtils", "HashSet", "Set"], "class_members": [{"name": "setA", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hash code calculation for a set with non-null elements."}, {"name": "testHashCodeForSetWithNullElements", "primary_tested": ["SetUtils.hashCodeForSet(Set<Integer>)"], "external_dependencies": {"modules": ["SetUtils", "HashSet", "Set"], "class_members": [{"name": "setA", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hash code calculation for a set with null elements."}, {"name": "testHashCodeForSetWithAllNullElements", "primary_tested": ["SetUtils.hashCodeForSet(Set<Integer>)"], "external_dependencies": {"modules": ["SetUtils", "HashSet", "Set"]}, "category": "unit", "description": "Tests the hash code calculation for a set with all null elements."}, {"name": "testHashCodeForSetWithEmptySet", "primary_tested": ["SetUtils.hashCodeForSet(Set<Integer>)"], "external_dependencies": {"modules": ["SetUtils", "HashSet", "Set"]}, "category": "unit", "description": "Tests the hash code calculation for an empty set."}, {"name": "testHashCodeForSetWithNullSet", "primary_tested": ["SetUtils.hashCodeForSet(Set<Integer>)"], "external_dependencies": {"modules": ["SetUtils"]}, "category": "unit", "description": "Tests the hash code calculation for a null set."}, {"name": "testHashCodeForSetWithDifferentSets", "primary_tested": ["SetUtils.hashCodeForSet(Set<Integer>)"], "external_dependencies": {"modules": ["SetUtils", "HashSet", "Set"], "class_members": [{"name": "setA", "type": "variable"}, {"name": "setB", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hash code calculation for different sets."}, {"name": "testHashCodeForSetWithSameSets", "primary_tested": ["SetUtils.hashCodeForSet(Set<Integer>)"], "external_dependencies": {"modules": ["SetUtils", "HashSet", "Set"], "class_members": [{"name": "setA", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hash code calculation for the same sets."}, {"name": "testHashCodeForSetWithLargeSet", "primary_tested": ["SetUtils.hashCodeForSet(Set<Integer>)"], "external_dependencies": {"modules": ["SetUtils", "HashSet", "Set"]}, "category": "unit", "description": "Tests the hash code calculation for a large set."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/TransformerUtils_switchMapTransformerTest.java", "testclass_name": "TransformerUtils_switchMapTransformerTest", "dependencies": ["package org.apache.commons.collections4;", "import org.apache.commons.collections4.functors.ConstantTransformer;", "import org.apache.commons.collections4.functors.EqualPredicate;", "import org.apache.commons.collections4.functors.ExceptionTransformer;", "import org.apache.commons.collections4.functors.NOPTransformer;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "TransformerUtils_switchMapTransformerTest", "description": "Unit tests for the switchMapTransformer functionality in TransformerUtils.", "class_members": {"variables": [{"name": "cObject", "type": "static final Object"}, {"name": "cString", "type": "static final Object"}, {"name": "cInteger", "type": "static final Object"}, {"name": "objectsAndTransformers", "type": "Map<Object, Transformer<Object, Object>>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testSwitchMapTransformerWithValidMap", "primary_tested": ["TransformerUtils.switchMapTransformer(Map<Object, Transformer<Object, Object>>)"], "associated_methods": ["Transformer.transform(Object)"], "external_dependencies": {"modules": ["TransformerUtils", "ConstantTransformer", "Transformer"], "class_members": [{"name": "objectsAndTransformers", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the switchMapTransformer functionality with a valid map of objects and transformers."}, {"name": "testSwitchMapTransformerWithNullInput", "primary_tested": ["TransformerUtils.switchMapTransformer(Map<Object, Transformer<Object, Object>>)"], "associated_methods": ["Transformer.transform(Object)"], "external_dependencies": {"modules": ["TransformerUtils", "NOPTransformer", "Transformer"], "class_members": [{"name": "objectsAndTransformers", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the switchMapTransformer functionality with a null input and a NOPTransformer."}, {"name": "testSwitchMapTransformerWithDefaultTransformer", "primary_tested": ["TransformerUtils.switchMapTransformer(Map<Object, Transformer<Object, Object>>)"], "associated_methods": ["Transformer.transform(Object)"], "external_dependencies": {"modules": ["TransformerUtils", "ConstantTransformer", "Transformer"], "class_members": [{"name": "objectsAndTransformers", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the switchMapTransformer functionality with a default transformer for unmatched inputs."}, {"name": "testSwitchMapTransformerWithExceptionTransformer", "primary_tested": ["TransformerUtils.switchMapTransformer(Map<Object, Transformer<Object, Object>>)"], "associated_methods": ["Transformer.transform(Object)"], "external_dependencies": {"modules": ["TransformerUtils", "ExceptionTransformer", "Transformer"], "class_members": [{"name": "objectsAndTransformers", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the switchMapTransformer functionality with an ExceptionTransformer."}, {"name": "testSwitchMapTransformerWithNullMap", "primary_tested": ["TransformerUtils.switchMapTransformer(Map<Object, Transformer<Object, Object>>)"], "external_dependencies": {"modules": ["TransformerUtils"]}, "category": "unit", "description": "Tests the switchMapTransformer functionality with a null map, expecting a NullPointerException."}, {"name": "testSwitchMapTransformerWithNullTransformer", "primary_tested": ["TransformerUtils.switchMapTransformer(Map<Object, Transformer<Object, Object>>)"], "external_dependencies": {"modules": ["TransformerUtils"], "class_members": [{"name": "objectsAndTransformers", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the switchMapTransformer functionality with a null transformer in the map, expecting a NullPointerException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_retainAllTest.java", "testclass_name": "IndexedCollection_retainAllTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static java.util.Arrays.asList;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Collection;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "IndexedCollection_retainAllTest", "description": "Unit tests for the retainAll functionality of the IndexedCollection class.", "class_members": {"variables": [{"name": "indexedCollection", "type": "IndexedCollection<Integer, String>"}, {"name": "originalCollection", "type": "Collection<String>"}], "methods": [{"name": "decorateUniqueCollection", "signature": "IndexedCollection<Integer, String> decorateUniqueCollection(Collection<String> original)"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRetainAllWithMatchingElements", "primary_tested": ["IndexedCollection.retainAll(Collection<String>)"], "external_dependencies": {"modules": ["IndexedCollection", "Collection"], "class_members": [{"name": "indexedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retainAll functionality with matching elements in the collection."}, {"name": "testRetainAllWithNoMatchingElements", "primary_tested": ["IndexedCollection.retainAll(Collection<String>)"], "external_dependencies": {"modules": ["IndexedCollection", "Collection"], "class_members": [{"name": "indexedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retainAll functionality with no matching elements in the collection."}, {"name": "testRetainAllWithAllMatchingElements", "primary_tested": ["IndexedCollection.retainAll(Collection<String>)"], "external_dependencies": {"modules": ["IndexedCollection", "Collection"], "class_members": [{"name": "indexedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retainAll functionality with all elements matching in the collection."}, {"name": "testRetainAllWithEmptyCollection", "primary_tested": ["IndexedCollection.retainAll(Collection<String>)"], "external_dependencies": {"modules": ["IndexedCollection", "Collection"], "class_members": [{"name": "indexedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retainAll functionality with an empty collection."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_removeTest.java", "testclass_name": "CompositeCollection_removeTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeCollection_removeTest", "description": "Tests for the remove functionality of the CompositeCollection class.", "class_members": {"variables": [{"name": "c", "type": "CompositeCollection<String>"}, {"name": "one", "type": "Collection<String>"}, {"name": "two", "type": "Collection<String>"}]}, "fixtures": ["setUpTest"], "test_cases": [{"name": "testRemoveWithMutator", "primary_tested": ["CompositeCollection.remove(Object)"], "associated_methods": ["CompositeCollection.setMutator(CompositeCollection.CollectionMutator<String>)", "CompositeCollection.addComposited(Collection<String>)", "Collection.add(String)", "Collection.contains(Object)", "Collection.remove(Object)"], "external_dependencies": {"modules": ["CompositeCollection", "Collection", "List"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the remove functionality of the CompositeCollection when a mutator is set."}, {"name": "testRemoveWithoutMutator", "primary_tested": ["CompositeCollection.remove(Object)"], "associated_methods": ["CompositeCollection.addComposited(Collection<String>)", "Collection.add(String)", "Collection.contains(Object)"], "external_dependencies": {"modules": ["CompositeCollection", "Collection"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the remove functionality of the CompositeCollection when no mutator is set, expecting an UnsupportedOperationException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_uniqueIndexedCollectionTest.java", "testclass_name": "IndexedCollection_uniqueIndexedCollectionTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.Arrays;", "import java.util.Collection;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "IndexedCollection_uniqueIndexedCollectionTest", "description": "Unit tests for the uniqueIndexedCollection method of the IndexedCollection class.", "class_members": {"variables": [{"name": "keyTransformer", "type": "Transformer<String, Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testUniqueIndexedCollectionWithUniqueKeys", "primary_tested": ["IndexedCollection.uniqueIndexedCollection(Collection<String>,Transformer<String,Integer>)"], "associated_methods": ["IndexedCollection.get(Integer)"], "external_dependencies": {"modules": ["IndexedCollection", "Transformer", "Arrays", "Collection"], "class_members": [{"name": "keyTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the uniqueIndexedCollection method with a collection of unique keys."}, {"name": "testUniqueIndexedCollectionWithDuplicateKeys", "primary_tested": ["IndexedCollection.uniqueIndexedCollection(Collection<String>,Transformer<String,Integer>)"], "external_dependencies": {"modules": ["IndexedCollection", "Transformer", "Arrays", "Collection"], "class_members": [{"name": "keyTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the uniqueIndexedCollection method with a collection containing duplicate keys, expecting an IllegalArgumentException."}, {"name": "testUniqueIndexedCollectionWithEmptyCollection", "primary_tested": ["IndexedCollection.uniqueIndexedCollection(Collection<String>,Transformer<String,Integer>)"], "associated_methods": ["IndexedCollection.get(Integer)"], "external_dependencies": {"modules": ["IndexedCollection", "Transformer", "Arrays", "Collection"], "class_members": [{"name": "keyTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the uniqueIndexedCollection method with an empty collection."}, {"name": "testUniqueIndexedCollectionWithNullKeyTransformer", "primary_tested": ["IndexedCollection.uniqueIndexedCollection(Collection<String>,Transformer<String,Integer>)"], "external_dependencies": {"modules": ["IndexedCollection", "Transformer", "Arrays", "Collection"]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the uniqueIndexedCollection method with a null key transformer, expecting a NullPointerException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_addAllTest.java", "testclass_name": "CompositeCollection_addAllTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeCollection_addAllTest", "description": "Tests for the addAll functionality of the CompositeCollection class.", "class_members": {"variables": [{"name": "c", "type": "CompositeCollection<String>"}, {"name": "one", "type": "Collection<String>"}, {"name": "two", "type": "Collection<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAddAllWithMutator", "primary_tested": ["CompositeCollection.addAll(Collection<? extends String>)"], "associated_methods": ["CompositeCollection.setMutator(CompositeCollection.CollectionMutator<String>)", "CompositeCollection.addComposited(Collection<String>)", "Collection.addAll(Collection<? extends String>)", "Collection.size()", "Collection.contains(Object)"], "external_dependencies": {"modules": ["CompositeCollection", "Collection", "HashSet", "ArrayList"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addAll functionality of the CompositeCollection with a mutator set."}, {"name": "testAddAllWithoutMutator", "primary_tested": ["CompositeCollection.addAll(Collection<? extends String>)"], "associated_methods": ["CompositeCollection.addComposited(Collection<String>)"], "external_dependencies": {"modules": ["CompositeCollection", "Collection", "HashSet", "ArrayList"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addAll functionality of the CompositeCollection without a mutator set, expecting an UnsupportedOperationException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_getTest.java", "testclass_name": "IndexedCollection_getTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static java.util.Arrays.asList;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.ArrayList;", "import java.util.Collection;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "IndexedCollection_getTest", "description": "Unit tests for the get method of the IndexedCollection class.", "class_members": {"variables": [{"name": "indexedCollection", "type": "IndexedCollection<Integer, String>"}, {"name": "originalCollection", "type": "Collection<String>"}], "methods": [{"name": "decorateUniqueCollection", "signature": "IndexedCollection<Integer, String> decorateUniqueCollection(Collection<String> original)"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetReturnsFirstElementForKey", "primary_tested": ["IndexedCollection.get(Integer)"], "external_dependencies": {"modules": ["IndexedCollection", "Collection"], "class_members": [{"name": "indexedCollection", "type": "variable"}, {"name": "originalCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the get method returns the first element for a given key."}, {"name": "testGetReturnsNullForNonExistentKey", "primary_tested": ["IndexedCollection.get(Integer)"], "external_dependencies": {"modules": ["IndexedCollection", "Collection"], "class_members": [{"name": "indexedCollection", "type": "variable"}, {"name": "originalCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the get method returns null for a non-existent key."}, {"name": "testGetReturnsNullForEmptyCollection", "primary_tested": ["IndexedCollection.get(Integer)"], "external_dependencies": {"modules": ["IndexedCollection"], "class_members": [{"name": "indexedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the get method returns null for an empty collection."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_nonUniqueIndexedCollectionTest.java", "testclass_name": "IndexedCollection_nonUniqueIndexedCollectionTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.Collections;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNotNull;"], "name": "IndexedCollection_nonUniqueIndexedCollectionTest", "description": "Tests for the non-unique indexed collection functionality in the IndexedCollection class.", "class_members": {"variables": [{"name": "keyTransformer", "type": "Transformer<String, Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNonUniqueIndexedCollectionWithEmptyCollection", "primary_tested": ["IndexedCollection.nonUniqueIndexedCollection(Collection<String>,Transformer<String,Integer>)"], "external_dependencies": {"modules": ["IndexedCollection", "Transformer", "Collections"], "class_members": [{"name": "keyTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the creation of a non-unique indexed collection with an empty collection."}, {"name": "testNonUniqueIndexedCollectionWithNonEmptyCollection", "primary_tested": ["IndexedCollection.nonUniqueIndexedCollection(Collection<String>,Transformer<String,Integer>)"], "associated_methods": ["IndexedCollection.size()", "IndexedCollection.get(Integer)"], "external_dependencies": {"modules": ["IndexedCollection", "Transformer", "Arrays"], "class_members": [{"name": "keyTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the creation of a non-unique indexed collection with a non-empty collection and verifies the size and retrieval of elements."}, {"name": "testNonUniqueIndexedCollectionWithDuplicateKeys", "primary_tested": ["IndexedCollection.nonUniqueIndexedCollection(Collection<String>,Transformer<String,Integer>)"], "associated_methods": ["IndexedCollection.size()", "IndexedCollection.get(Integer)"], "external_dependencies": {"modules": ["IndexedCollection", "Transformer", "Arrays"], "class_members": [{"name": "keyTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the creation of a non-unique indexed collection with duplicate keys and verifies the size and retrieval of elements."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/SingletonMap_setValueTest.java", "testclass_name": "SingletonMap_setValueTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import org.junit.jupiter.api.Test;"], "name": "SingletonMap_setValueTest", "description": "Unit test for the setValue method of SingletonMap.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testSetValue", "primary_tested": ["SingletonMap.setValue(String)"], "associated_methods": ["SingletonMap.getValue()"], "external_dependencies": {"modules": ["SingletonMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the setValue method of SingletonMap, ensuring it correctly sets a new value and returns the old value."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/UnmodifiableMap_unmodifiableMapTest.java", "testclass_name": "UnmodifiableMap_unmodifiableMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.Unmodifiable;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "UnmodifiableMap_unmodifiableMapTest", "description": "Unit tests for the UnmodifiableMap.unmodifiableMap method.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testUnmodifiableMapWithUnmodifiableMap", "primary_tested": ["UnmodifiableMap.unmodifiableMap(Map)"], "external_dependencies": {"modules": ["UnmodifiableMap", "HashMap", "Map"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that wrapping an unmodifiable map with UnmodifiableMap.unmodifiableMap returns the same instance."}, {"name": "testUnmodifiableMapWithModifiableMap", "primary_tested": ["UnmodifiableMap.unmodifiableMap(Map)"], "external_dependencies": {"modules": ["UnmodifiableMap", "HashMap", "Map"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that wrapping a modifiable map with UnmodifiableMap.unmodifiableMap returns an instance of UnmodifiableMap and is not the same instance as the original map."}, {"name": "testUnmodifiableMapWithNullMap", "primary_tested": ["UnmodifiableMap.unmodifiableMap(Map)"], "external_dependencies": {"modules": ["UnmodifiableMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that passing a null map to UnmodifiableMap.unmodifiableMap throws a NullPointerException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_containsTest.java", "testclass_name": "CompositeCollection_containsTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeCollection_containsTest", "description": "Unit tests for the contains method of the CompositeCollection class.", "class_members": {"variables": [{"name": "c", "type": "CompositeCollection<String>"}, {"name": "one", "type": "Collection<String>"}, {"name": "two", "type": "Collection<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testContainsWithSingleCollection", "primary_tested": ["CompositeCollection.contains(String)"], "external_dependencies": {"modules": ["CompositeCollection", "Collection"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the contains method with a single collection."}, {"name": "testContainsWithMultipleCollections", "primary_tested": ["CompositeCollection.contains(String)"], "external_dependencies": {"modules": ["CompositeCollection", "Collection"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the contains method with multiple collections."}, {"name": "testContainsWithEmptyComposite", "primary_tested": ["CompositeCollection.contains(String)"], "external_dependencies": {"modules": ["CompositeCollection"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the contains method with an empty composite collection."}, {"name": "testContainsWithNullElement", "primary_tested": ["CompositeCollection.contains(String)"], "external_dependencies": {"modules": ["CompositeCollection", "Collection"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the contains method with a null element in a single collection."}, {"name": "testContainsWithMultipleCollectionsAndNull", "primary_tested": ["CompositeCollection.contains(String)"], "external_dependencies": {"modules": ["CompositeCollection", "Collection"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the contains method with multiple collections, including a null element."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/LazySortedMap_headMapTest.java", "testclass_name": "LazySortedMap_headMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.apache.commons.collections4.map.LazySortedMap.lazySortedMap;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertInstanceOf;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.SortedMap;", "import java.util.TreeMap;", "import org.apache.commons.collections4.Factory;", "import org.apache.commons.collections4.FactoryUtils;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "LazySortedMap_headMapTest", "description": "Unit tests for the headMap functionality of LazySortedMap.", "class_members": {"variables": [{"name": "oneFactory", "type": "static final Factory<Integer>"}, {"name": "lazySortedMap", "type": "LazySortedMap<String, Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testHeadMap", "primary_tested": ["LazySortedMap.headMap(String)"], "external_dependencies": {"modules": ["LazySortedMap", "SortedMap", "TreeMap", "Factory", "FactoryUtils"], "class_members": [{"name": "lazySortedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the headMap functionality of LazySortedMap with an existing key."}, {"name": "testHeadMapWithNonExistentKey", "primary_tested": ["LazySortedMap.headMap(String)"], "external_dependencies": {"modules": ["LazySortedMap", "SortedMap", "TreeMap", "Factory", "FactoryUtils"], "class_members": [{"name": "lazySortedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the headMap functionality of LazySortedMap with a non-existent key."}, {"name": "testHeadMapWithNullKey", "primary_tested": ["LazySortedMap.headMap(String)"], "external_dependencies": {"modules": ["LazySortedMap", "SortedMap", "TreeMap", "Factory", "FactoryUtils"], "class_members": [{"name": "lazySortedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the headMap functionality of LazySortedMap with a null key, expecting a NullPointerException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_previousKeyTest.java", "testclass_name": "ListOrderedMap_previousKeyTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "ListOrderedMap_previousKeyTest", "description": "Unit tests for the previousKey method in ListOrderedMap.", "class_members": {"variables": [{"name": "listOrderedMap", "type": "ListOrderedMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPreviousKey_ValidKey", "primary_tested": ["ListOrderedMap.previousKey(String)"], "external_dependencies": {"modules": ["ListOrderedMap"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the previousKey method with valid keys."}, {"name": "testPreviousKey_FirstKey", "primary_tested": ["ListOrderedMap.previousKey(String)"], "external_dependencies": {"modules": ["ListOrderedMap"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the previousKey method with the first key in the map."}, {"name": "testPreviousKey_NonExistentKey", "primary_tested": ["ListOrderedMap.previousKey(String)"], "external_dependencies": {"modules": ["ListOrderedMap"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the previousKey method with a non-existent key."}, {"name": "testPreviousKey_EmptyMap", "primary_tested": ["ListOrderedMap.previousKey(String)"], "associated_methods": ["ListOrderedMap.clear()"], "external_dependencies": {"modules": ["ListOrderedMap"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the previousKey method with an empty map."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_addCompositedTest.java", "testclass_name": "CompositeCollection_addCompositedTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeCollection_addCompositedTest", "description": "Unit tests for the addComposited method of the CompositeCollection class.", "class_members": {"variables": [{"name": "c", "type": "CompositeCollection<String>"}, {"name": "one", "type": "Collection<String>"}, {"name": "two", "type": "Collection<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAddCompositedNonNullCollection", "primary_tested": ["CompositeCollection.addComposited(Collection<String>)"], "external_dependencies": {"modules": ["CompositeCollection", "Collection"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests adding a non-null collection to the CompositeCollection."}, {"name": "testAddCompositedNullCollection", "primary_tested": ["CompositeCollection.addComposited(Collection<String>)"], "external_dependencies": {"modules": ["CompositeCollection"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests adding a null collection to the CompositeCollection."}, {"name": "testAddCompositedMultipleCollections", "primary_tested": ["CompositeCollection.addComposited(Collection<String>,Collection<String>)"], "external_dependencies": {"modules": ["CompositeCollection", "Collection"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests adding multiple collections to the CompositeCollection."}, {"name": "testAddCompositedEmptyCollections", "primary_tested": ["CompositeCollection.addComposited(Collection<String>,Collection<String>)"], "external_dependencies": {"modules": ["CompositeCollection", "Collection"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests adding empty collections to the CompositeCollection."}, {"name": "testAddCompositedMixedCollections", "primary_tested": ["CompositeCollection.addComposited(Collection<String>,Collection<String>)"], "external_dependencies": {"modules": ["CompositeCollection", "Collection"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests adding a mix of non-null and null collections to the CompositeCollection."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/LazySortedMap_tailMapTest.java", "testclass_name": "LazySortedMap_tailMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.Factory;", "import org.junit.jupiter.api.Test;", "import java.util.SortedMap;", "import java.util.TreeMap;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNotNull;"], "name": "LazySortedMap_tailMapTest", "description": "Unit tests for the tailMap functionality of LazySortedMap.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testTailMap", "primary_tested": ["LazySortedMap.tailMap(Integer)"], "associated_methods": ["SortedMap.size()", "SortedMap.get(Integer)"], "external_dependencies": {"modules": ["SortedMap", "TreeMap", "Factory", "LazySortedMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the tailMap functionality of the LazySortedMap, ensuring it returns the correct subset of the map starting from the specified key."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_removeIfTest.java", "testclass_name": "IndexedCollection_removeIfTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Collection;", "import java.util.function.Predicate;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "IndexedCollection_removeIfTest", "description": "Unit tests for the removeIf method in the IndexedCollection class.", "class_members": {"variables": [{"name": "indexedCollection", "type": "IndexedCollection<Integer, String>"}, {"name": "originalCollection", "type": "Collection<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveIfWithNullFilter", "primary_tested": ["IndexedCollection.removeIf(Predicate)"], "external_dependencies": {"modules": ["IndexedCollection", "Predicate"], "class_members": [{"name": "indexedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeIf method with a null filter."}, {"name": "testRemoveIfWithNoMatchingElements", "primary_tested": ["IndexedCollection.removeIf(Predicate)"], "external_dependencies": {"modules": ["IndexedCollection", "Predicate"], "class_members": [{"name": "indexedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeIf method with a filter that does not match any elements."}, {"name": "testRemoveIfWithMatchingElements", "primary_tested": ["IndexedCollection.removeIf(Predicate)"], "associated_methods": ["IndexedCollection.reindex()", "IndexedCollection.get(Integer)"], "external_dependencies": {"modules": ["IndexedCollection", "Predicate"], "class_members": [{"name": "indexedCollection", "type": "variable"}, {"name": "originalCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeIf method with a filter that matches some elements."}, {"name": "testRemoveIfWithAllMatchingElements", "primary_tested": ["IndexedCollection.removeIf(Predicate)"], "associated_methods": ["IndexedCollection.reindex()", "IndexedCollection.get(Integer)"], "external_dependencies": {"modules": ["IndexedCollection", "Predicate"], "class_members": [{"name": "indexedCollection", "type": "variable"}, {"name": "originalCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeIf method with a filter that matches all elements."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_retainAllTest.java", "testclass_name": "CompositeCollection_retainAllTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeCollection_retainAllTest", "description": "Unit tests for the retainAll functionality of the CompositeCollection class.", "class_members": {"variables": [{"name": "c", "type": "CompositeCollection<String>"}, {"name": "one", "type": "Collection<String>"}, {"name": "two", "type": "Collection<String>"}]}, "fixtures": ["setUpTest"], "test_cases": [{"name": "testRetainAllWithNullCollection", "primary_tested": ["CompositeCollection.retainAll(Collection)"], "external_dependencies": {"modules": ["CompositeCollection", "Collection"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the retainAll method with a null collection, ensuring no elements are removed."}, {"name": "testRetainAllWithEmptyCollection", "primary_tested": ["CompositeCollection.retainAll(Collection)"], "external_dependencies": {"modules": ["CompositeCollection", "Collection", "ArrayList"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the retainAll method with an empty collection, ensuring all elements are removed."}, {"name": "testRetainAllWithNonEmptyCollection", "primary_tested": ["CompositeCollection.retainAll(Collection)"], "external_dependencies": {"modules": ["CompositeCollection", "Collection", "ArrayList", "Arrays"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the retainAll method with a non-empty collection, ensuring only specified elements are retained."}, {"name": "testRetainAllWithAllElementsToRetain", "primary_tested": ["CompositeCollection.retainAll(Collection)"], "external_dependencies": {"modules": ["CompositeCollection", "Collection", "ArrayList", "Arrays"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the retainAll method with a collection containing all elements, ensuring no elements are removed."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_removeAllTest.java", "testclass_name": "IndexedCollection_removeAllTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static java.util.Arrays.asList;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Collection;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "IndexedCollection_removeAllTest", "description": "Unit tests for the removeAll functionality of the IndexedCollection class.", "class_members": {"variables": [{"name": "indexedCollection", "type": "IndexedCollection<Integer, String>"}, {"name": "originalCollection", "type": "Collection<String>"}], "methods": [{"name": "decorateUniqueCollection", "signature": "IndexedCollection<Integer, String> decorateUniqueCollection(Collection<String> original)"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveAllRemovesAllElements", "primary_tested": ["IndexedCollection.removeAll(Collection<String>)"], "associated_methods": ["IndexedCollection.contains(String)"], "external_dependencies": {"modules": ["IndexedCollection", "Collection"], "class_members": [{"name": "indexedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that removeAll removes all specified elements from the IndexedCollection."}, {"name": "testRemoveAllNoElementsToRemove", "primary_tested": ["IndexedCollection.removeAll(Collection<String>)"], "associated_methods": ["IndexedCollection.contains(String)"], "external_dependencies": {"modules": ["IndexedCollection", "Collection"], "class_members": [{"name": "indexedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that removeAll does nothing when the collection to remove is not present in the IndexedCollection."}, {"name": "testRemoveAllEmptyCollection", "primary_tested": ["IndexedCollection.removeAll(Collection<String>)"], "associated_methods": ["IndexedCollection.contains(String)"], "external_dependencies": {"modules": ["IndexedCollection", "Collection"], "class_members": [{"name": "indexedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that removeAll does nothing when the collection to remove is empty."}, {"name": "testRemoveAllNullCollection", "primary_tested": ["IndexedCollection.removeAll(Collection<String>)"], "external_dependencies": {"modules": ["IndexedCollection"], "class_members": [{"name": "indexedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that removeAll throws a NullPointerException when the collection to remove is null."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_isEmptyTest.java", "testclass_name": "CompositeCollection_isEmptyTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeCollection_isEmptyTest", "description": "Unit tests for the isEmpty functionality of the CompositeCollection class.", "class_members": {"variables": [{"name": "c", "type": "CompositeCollection<String>"}, {"name": "one", "type": "Collection<String>"}, {"name": "two", "type": "Collection<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testIsEmpty_AllCollectionsEmpty", "primary_tested": ["CompositeCollection.isEmpty()"], "external_dependencies": {"modules": ["CompositeCollection", "Collection"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isEmpty method when all collections are empty."}, {"name": "testIsEmpty_OneCollectionNotEmpty", "primary_tested": ["CompositeCollection.isEmpty()"], "external_dependencies": {"modules": ["CompositeCollection", "Collection"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isEmpty method when one collection is not empty."}, {"name": "testIsEmpty_AllCollectionsNotEmpty", "primary_tested": ["CompositeCollection.isEmpty()"], "external_dependencies": {"modules": ["CompositeCollection", "Collection"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isEmpty method when all collections are not empty."}, {"name": "testIsEmpty_AfterClear", "primary_tested": ["CompositeCollection.isEmpty()"], "associated_methods": ["CompositeCollection.clear()"], "external_dependencies": {"modules": ["CompositeCollection", "Collection"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isEmpty method after clearing the composite collection."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_removeAllTest.java", "testclass_name": "CompositeCollection_removeAllTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeCollection_removeAllTest", "description": "Unit tests for the removeAll method of the CompositeCollection class.", "class_members": {"variables": [{"name": "c", "type": "CompositeCollection<String>"}, {"name": "one", "type": "Collection<String>"}, {"name": "two", "type": "Collection<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveAllWithNonEmptyCollection", "primary_tested": ["CompositeCollection.removeAll(Collection<String>)"], "external_dependencies": {"modules": ["CompositeCollection", "Collection", "ArrayList", "Arrays", "HashSet"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeAll method with a non-empty collection to remove."}, {"name": "testRemoveAllWithEmptyCollection", "primary_tested": ["CompositeCollection.removeAll(Collection<String>)"], "external_dependencies": {"modules": ["CompositeCollection", "Collection", "ArrayList"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeAll method with an empty collection to remove."}, {"name": "testRemoveAllWithNullCollection", "primary_tested": ["CompositeCollection.removeAll(Collection<String>)"], "external_dependencies": {"modules": ["CompositeCollection"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeAll method with a null collection to remove."}, {"name": "testRemoveAllWithAllElements", "primary_tested": ["CompositeCollection.removeAll(Collection<String>)"], "external_dependencies": {"modules": ["CompositeCollection", "Collection", "ArrayList", "Arrays", "HashSet"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeAll method with a collection containing all elements to remove."}, {"name": "testRemoveAllWithNonExistentElements", "primary_tested": ["CompositeCollection.removeAll(Collection<String>)"], "external_dependencies": {"modules": ["CompositeCollection", "Collection", "ArrayList", "Arrays"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeAll method with a collection containing non-existent elements to remove."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_sizeTest.java", "testclass_name": "CircularFifoQueue_sizeTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CircularFifoQueue_sizeTest", "description": "Unit tests for the size method of the CircularFifoQueue class.", "class_members": {"variables": [{"name": "queue", "type": "CircularFifoQueue<Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testSizeEmptyQueue", "primary_tested": ["CircularFifoQueue.size()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size of an empty CircularFifoQueue."}, {"name": "testSizeNonEmptyQueue", "primary_tested": ["CircularFifoQueue.size()"], "associated_methods": ["CircularFifoQueue.add(Integer)"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size of a non-empty CircularFifoQueue."}, {"name": "testSizeFullQueue", "primary_tested": ["CircularFifoQueue.size()"], "associated_methods": ["CircularFifoQueue.add(Integer)"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size of a full CircularFifoQueue."}, {"name": "testSizeAfterRemove", "primary_tested": ["CircularFifoQueue.size()"], "associated_methods": ["CircularFifoQueue.add(Integer)", "CircularFifoQueue.remove()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size of the CircularFifoQueue after removing an element."}, {"name": "testSizeAfterClear", "primary_tested": ["CircularFifoQueue.size()"], "associated_methods": ["CircularFifoQueue.add(Integer)", "CircularFifoQueue.clear()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size of the CircularFifoQueue after clearing it."}, {"name": "testSizeAfterWrapAround", "primary_tested": ["CircularFifoQueue.size()"], "associated_methods": ["CircularFifoQueue.add(Integer)", "CircularFifoQueue.remove()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size of the CircularFifoQueue after a wrap-around."}, {"name": "testSizeAfterPartialWrapAround", "primary_tested": ["CircularFifoQueue.size()"], "associated_methods": ["CircularFifoQueue.add(Integer)", "CircularFifoQueue.remove()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size of the CircularFifoQueue after a partial wrap-around."}, {"name": "testSizeAfterFullWrapAround", "primary_tested": ["CircularFifoQueue.size()"], "associated_methods": ["CircularFifoQueue.add(Integer)", "CircularFifoQueue.remove()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size of the CircularFifoQueue after a full wrap-around."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_iteratorTest.java", "testclass_name": "CompositeCollection_iteratorTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.Iterator;", "import java.util.List;", "import java.util.function.Predicate;", "import org.apache.commons.collections4.iterators.EmptyIterator;", "import org.apache.commons.collections4.iterators.IteratorChain;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeCollection_iteratorTest", "description": "Tests for the iterator functionality of the CompositeCollection class.", "class_members": {"variables": [{"name": "c", "type": "CompositeCollection<String>"}, {"name": "one", "type": "Collection<String>"}, {"name": "two", "type": "Collection<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testIteratorWithEmptyCompositeCollection", "primary_tested": ["CompositeCollection.iterator()"], "external_dependencies": {"modules": ["CompositeCollection", "EmptyIterator"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the iterator functionality when the CompositeCollection is empty."}, {"name": "testIteratorWithNonEmptyCompositeCollection", "primary_tested": ["CompositeCollection.iterator()"], "associated_methods": ["CompositeCollection.addComposited(Collection<String>,Collection<String>)", "Iterator.forEachRemaining(Consumer<? super String>)"], "external_dependencies": {"modules": ["CompositeCollection", "IteratorChain", "ArrayList", "HashSet"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the iterator functionality when the CompositeCollection contains elements from multiple collections."}, {"name": "testIteratorWithOneCollection", "primary_tested": ["CompositeCollection.iterator()"], "associated_methods": ["CompositeCollection.addComposited(Collection<String>)", "Iterator.forEachRemaining(Consumer<? super String>)"], "external_dependencies": {"modules": ["CompositeCollection", "IteratorChain", "ArrayList", "HashSet"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the iterator functionality when the CompositeCollection contains elements from a single collection."}, {"name": "testIteratorWithMultipleCollections", "primary_tested": ["CompositeCollection.iterator()"], "associated_methods": ["CompositeCollection.addComposited(Collection<String>,Collection<String>,Collection<String>)", "Iterator.forEachRemaining(Consumer<? super String>)"], "external_dependencies": {"modules": ["CompositeCollection", "IteratorChain", "ArrayList", "HashSet"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the iterator functionality when the CompositeCollection contains elements from multiple collections."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_addTest.java", "testclass_name": "CircularFifoQueue_addTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CircularFifoQueue_addTest", "description": "Unit tests for the add functionality of the CircularFifoQueue class.", "class_members": {"variables": [{"name": "queue", "type": "CircularFifoQueue<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAddElementSuccess", "primary_tested": ["CircularFifoQueue.add(String)"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful addition of elements to the CircularFifoQueue."}, {"name": "testAddElementWhenFull", "primary_tested": ["CircularFifoQueue.add(String)"], "associated_methods": ["CircularFifoQueue.get(int)"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addition of an element when the CircularFifoQueue is full."}, {"name": "testAddNullElement", "primary_tested": ["CircularFifoQueue.add(String)"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addition of a null element to the CircularFifoQueue, expecting a NullPointerException."}, {"name": "testAddElementWrapAround", "primary_tested": ["CircularFifoQueue.add(String)"], "associated_methods": ["CircularFifoQueue.remove()", "CircularFifoQueue.get(int)"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addition of an element to the CircularFifoQueue when it wraps around after removal."}, {"name": "testAddElementWhenQueueIsEmpty", "primary_tested": ["CircularFifoQueue.add(String)"], "associated_methods": ["CircularFifoQueue.get(int)"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addition of an element to an empty CircularFifoQueue."}, {"name": "testAddElementWhenQueueHasOneElement", "primary_tested": ["CircularFifoQueue.add(String)"], "associated_methods": ["CircularFifoQueue.get(int)"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addition of an element to a CircularFifoQueue with one element."}, {"name": "testAddElementWhenQueueHasTwoElements", "primary_tested": ["CircularFifoQueue.add(String)"], "associated_methods": ["CircularFifoQueue.get(int)"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addition of an element to a CircularFifoQueue with two elements."}, {"name": "testAddElementWhenQueueIsFullAndRemoveIsCalled", "primary_tested": ["CircularFifoQueue.add(String)"], "associated_methods": ["CircularFifoQueue.remove()", "CircularFifoQueue.get(int)"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addition of an element to a full CircularFifoQueue after a removal."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_removeIfTest.java", "testclass_name": "CompositeCollection_removeIfTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.List;", "import java.util.function.Predicate;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeCollection_removeIfTest", "description": "Unit tests for the removeIf functionality of the CompositeCollection class.", "class_members": {"variables": [{"name": "c", "type": "CompositeCollection<String>"}, {"name": "one", "type": "Collection<String>"}, {"name": "two", "type": "Collection<String>"}]}, "fixtures": ["setUpTest"], "test_cases": [{"name": "testRemoveIf_NullFilter", "primary_tested": ["CompositeCollection.removeIf(Predicate)"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the removeIf method with a null filter."}, {"name": "testRemoveIf_NoChange", "primary_tested": ["CompositeCollection.removeIf(Predicate)"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet", "Predicate"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the removeIf method with a filter that does not match any elements."}, {"name": "testRemoveIf_WithChange", "primary_tested": ["CompositeCollection.removeIf(Predicate)"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet", "Predicate"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the removeIf method with a filter that matches and removes elements."}, {"name": "testRemoveIf_MultipleCollections", "primary_tested": ["CompositeCollection.removeIf(Predicate)"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet", "Predicate"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the removeIf method with a filter that matches and removes elements from multiple collections."}, {"name": "testRemoveIf_AllCollections", "primary_tested": ["CompositeCollection.removeIf(Predicate)"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet", "Predicate"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the removeIf method with a filter that matches and removes elements from all collections."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_containsTest.java", "testclass_name": "IndexedCollection_containsTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Collection;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "IndexedCollection_containsTest", "description": "Unit tests for the contains method of the IndexedCollection class.", "class_members": {"variables": [{"name": "indexedCollection", "type": "IndexedCollection<Integer, String>"}, {"name": "originalCollection", "type": "Collection<String>"}], "methods": [{"name": "decorateUniqueCollection", "signature": "IndexedCollection<Integer, String> decorateUniqueCollection(Collection<String> original)"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testContainsReturnsTrueForExistingElement", "primary_tested": ["IndexedCollection.contains(String)"], "external_dependencies": {"modules": ["IndexedCollection", "Collection"], "class_members": [{"name": "indexedCollection", "type": "variable"}, {"name": "originalCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the contains method returns true for an existing element."}, {"name": "testContainsReturnsFalseForNonExistingElement", "primary_tested": ["IndexedCollection.contains(String)"], "external_dependencies": {"modules": ["IndexedCollection", "Collection"], "class_members": [{"name": "indexedCollection", "type": "variable"}, {"name": "originalCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the contains method returns false for a non-existing element."}, {"name": "testContainsReturnsFalseForNullElement", "primary_tested": ["IndexedCollection.contains(String)"], "external_dependencies": {"modules": ["IndexedCollection", "Collection"], "class_members": [{"name": "indexedCollection", "type": "variable"}, {"name": "originalCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the contains method returns false for a null element."}, {"name": "testContainsReturnsTrueAfterAddingElement", "primary_tested": ["IndexedCollection.contains(String)"], "external_dependencies": {"modules": ["IndexedCollection", "Collection"], "class_members": [{"name": "indexedCollection", "type": "variable"}, {"name": "originalCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the contains method returns true after adding a new element."}, {"name": "testContainsReturnsFalseAfterRemovingElement", "primary_tested": ["IndexedCollection.contains(String)"], "external_dependencies": {"modules": ["IndexedCollection", "Collection"], "class_members": [{"name": "indexedCollection", "type": "variable"}, {"name": "originalCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the contains method returns false after removing an element."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/SingletonMap_equalsTest.java", "testclass_name": "SingletonMap_equalsTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;"], "name": "SingletonMap_equalsTest", "description": "Unit tests for the equals method of the SingletonMap class.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testEquals_SameInstance", "primary_tested": ["SingletonMap.equals(Object)"], "external_dependencies": {"modules": ["SingletonMap"]}, "category": "unit", "description": "Tests the equals method with the same instance."}, {"name": "testEquals_DifferentType", "primary_tested": ["SingletonMap.equals(Object)"], "external_dependencies": {"modules": ["SingletonMap"]}, "category": "unit", "description": "Tests the equals method with a different type."}, {"name": "testEquals_DifferentSizeMap", "primary_tested": ["SingletonMap.equals(Object)"], "external_dependencies": {"modules": ["SingletonMap", "HashMap"]}, "category": "unit", "description": "Tests the equals method with a map of different size."}, {"name": "testEquals_SameKeyDifferentValue", "primary_tested": ["SingletonMap.equals(Object)"], "external_dependencies": {"modules": ["SingletonMap", "HashMap"]}, "category": "unit", "description": "Tests the equals method with the same key but different value."}, {"name": "testEquals_DifferentKeySameValue", "primary_tested": ["SingletonMap.equals(Object)"], "external_dependencies": {"modules": ["SingletonMap", "HashMap"]}, "category": "unit", "description": "Tests the equals method with a different key but same value."}, {"name": "testEquals_SameKeySameValue", "primary_tested": ["SingletonMap.equals(Object)"], "external_dependencies": {"modules": ["SingletonMap", "HashMap"]}, "category": "unit", "description": "Tests the equals method with the same key and same value."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/SingletonMap_putTest.java", "testclass_name": "SingletonMap_putTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.Test;"], "name": "SingletonMap_putTest", "description": "Unit tests for the put method of SingletonMap, focusing on behavior with matching and non-matching keys.", "class_members": {"variables": [{"name": "map", "type": "SingletonMap<String, String>"}]}, "fixtures": [], "test_cases": [{"name": "testPutWithMatchingKey", "primary_tested": ["SingletonMap.put(String,String)"], "associated_methods": ["SingletonMap.getValue()"], "external_dependencies": {"modules": ["SingletonMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "description": "Tests the put method of SingletonMap with a matching key, ensuring the old value is returned and the new value is set."}, {"name": "testPutWithNonMatchingKey", "primary_tested": ["SingletonMap.put(String,String)"], "external_dependencies": {"modules": ["SingletonMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "description": "Tests the put method of SingletonMap with a non-matching key, ensuring an IllegalArgumentException is thrown."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/SingletonMap_hashCodeTest.java", "testclass_name": "SingletonMap_hashCodeTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SingletonMap_hashCodeTest", "description": "Unit tests for the hashCode method of the SingletonMap class.", "class_members": {"variables": [{"name": "singletonMap", "type": "SingletonMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testHashCodeWithNonNullKeyAndValue", "primary_tested": ["SingletonMap.hashCode()"], "external_dependencies": {"modules": ["SingletonMap"], "class_members": [{"name": "singletonMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hashCode method of SingletonMap with non-null key and value."}, {"name": "testHashCodeWithNullKey", "primary_tested": ["SingletonMap.hashCode()"], "external_dependencies": {"modules": ["SingletonMap"], "class_members": [{"name": "singletonMap", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the hashCode method of SingletonMap with a null key."}, {"name": "testHashCodeWithNullValue", "primary_tested": ["SingletonMap.hashCode()"], "external_dependencies": {"modules": ["SingletonMap"], "class_members": [{"name": "singletonMap", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the hashCode method of SingletonMap with a null value."}, {"name": "testHashCodeWithNullKeyAndValue", "primary_tested": ["SingletonMap.hashCode()"], "external_dependencies": {"modules": ["SingletonMap"], "class_members": [{"name": "singletonMap", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the hashCode method of SingletonMap with both null key and value."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_removeTest.java", "testclass_name": "PassiveExpiringMap_removeTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.mockito.Mockito.mock;", "import static org.mockito.Mockito.when;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "PassiveExpiringMap_removeTest", "description": "Unit tests for the remove functionality of PassiveExpiringMap.", "class_members": {"variables": [{"name": "map", "type": "PassiveExpiringMap<String, String>"}, {"name": "internalMap", "type": "Map<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemove_KeyExists", "primary_tested": ["PassiveExpiringMap.remove(String)"], "associated_methods": ["Map.put(String,String)", "Map.get(String)"], "external_dependencies": {"modules": ["PassiveExpiringMap", "Map", "HashMap"], "class_members": [{"name": "map", "type": "variable"}, {"name": "internalMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the remove functionality of PassiveExpiringMap when the key exists."}, {"name": "testRemove_KeyDoesNotExist", "primary_tested": ["PassiveExpiringMap.remove(String)"], "associated_methods": ["Map.get(String)"], "external_dependencies": {"modules": ["PassiveExpiringMap", "Map"], "class_members": [{"name": "map", "type": "variable"}, {"name": "internalMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the remove functionality of PassiveExpiringMap when the key does not exist."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_clearTest.java", "testclass_name": "ListOrderedMap_clearTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "ListOrderedMap_clearTest", "description": "Unit test for the clear method of ListOrderedMap.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testClear", "primary_tested": ["ListOrderedMap.clear()"], "associated_methods": ["ListOrderedMap.put(String,String)", "ListOrderedMap.size()", "ListOrderedMap.isEmpty()"], "external_dependencies": {"modules": ["ListOrderedMap", "HashMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the clear functionality of the ListOrderedMap, ensuring that the map is empty after clearing."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/UnmodifiableOrderedMap_entrySetTest.java", "testclass_name": "UnmodifiableOrderedMap_entrySetTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.OrderedMap;", "import org.apache.commons.collections4.map.UnmodifiableOrderedMap;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;", "import java.util.Set;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "UnmodifiableOrderedMap_entrySetTest", "description": "Tests the entrySet functionality of the UnmodifiableOrderedMap class.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testEntrySet", "primary_tested": ["UnmodifiableOrderedMap.entrySet()"], "external_dependencies": {"modules": ["UnmodifiableOrderedMap", "LinkedMap", "HashMap", "Map", "Set"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests whether the entrySet of the UnmodifiableOrderedMap contains all entries from the original map."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_removeTest.java", "testclass_name": "StaticBucketMap_removeTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "StaticBucketMap_removeTest", "description": "Unit tests for the remove functionality of the StaticBucketMap class.", "class_members": {"variables": [{"name": "map", "type": "StaticBucketMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveExistingKey", "primary_tested": ["StaticBucketMap.remove(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of an existing key from the StaticBucketMap."}, {"name": "testRemoveNonExistingKey", "primary_tested": ["StaticBucketMap.remove(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of a non-existing key from the StaticBucketMap."}, {"name": "testRemoveFromEmptyMap", "primary_tested": ["StaticBucketMap.remove(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of a key from an empty StaticBucketMap."}, {"name": "testRemoveHeadOfBucket", "primary_tested": ["StaticBucketMap.remove(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of the head element of a bucket in the StaticBucketMap."}, {"name": "testRemoveMiddleOfBucket", "primary_tested": ["StaticBucketMap.remove(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of a middle element of a bucket in the StaticBucketMap."}, {"name": "testRemoveTailOfBucket", "primary_tested": ["StaticBucketMap.remove(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of the tail element of a bucket in the StaticBucketMap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/TransformedSortedMap_tailMapTest.java", "testclass_name": "TransformedSortedMap_tailMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.functors.NOPTransformer;", "import org.junit.jupiter.api.Test;", "import java.util.SortedMap;", "import java.util.TreeMap;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNotNull;"], "name": "TransformedSortedMap_tailMapTest", "description": "Unit tests for the tailMap functionality of TransformedSortedMap.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testTailMap", "primary_tested": ["TransformedSortedMap.tailMap(Integer)"], "external_dependencies": {"modules": ["SortedMap", "TreeMap", "Transformer", "NOPTransformer", "TransformedSortedMap"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the tailMap functionality of the TransformedSortedMap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/TransformedSortedMap_transformedSortedMapTest.java", "testclass_name": "TransformedSortedMap_transformedSortedMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.Test;", "import java.util.SortedMap;", "import java.util.TreeMap;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "TransformedSortedMap_transformedSortedMapTest", "description": "Unit tests for the TransformedSortedMap class, specifically focusing on the transformedSortedMap method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testTransformedSortedMap_EmptyMap", "primary_tested": ["TransformedSortedMap.transformedSortedMap(SortedMap,Transformer,Transformer)"], "external_dependencies": {"modules": ["SortedMap", "TreeMap", "Transformer", "TransformedSortedMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the creation of a TransformedSortedMap from an empty map and verifies that the resulting map is empty."}, {"name": "testTransformedSortedMap_NonEmptyMap", "primary_tested": ["TransformedSortedMap.transformedSortedMap(SortedMap,Transformer,Transformer)"], "associated_methods": ["TransformedSortedMap.size()", "TransformedSortedMap.get(String)"], "external_dependencies": {"modules": ["SortedMap", "TreeMap", "Transformer", "TransformedSortedMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the creation of a TransformedSortedMap from a non-empty map, applying transformations to keys and values, and verifies the transformed map's size and content."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_sizeTest.java", "testclass_name": "CompositeCollection_sizeTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeCollection_sizeTest", "description": "Unit tests for the size method of the CompositeCollection class.", "class_members": {"variables": [{"name": "c", "type": "CompositeCollection<String>"}, {"name": "one", "type": "Collection<String>"}, {"name": "two", "type": "Collection<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testSizeEmpty", "primary_tested": ["CompositeCollection.size()"], "external_dependencies": {"modules": ["CompositeCollection"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method when the CompositeCollection is empty."}, {"name": "testSizeWithOneCollection", "primary_tested": ["CompositeCollection.size()"], "associated_methods": ["CompositeCollection.addComposited(Collection)"], "external_dependencies": {"modules": ["CompositeCollection", "Collection"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method when the CompositeCollection contains one collection."}, {"name": "testSizeWithMultipleCollections", "primary_tested": ["CompositeCollection.size()"], "associated_methods": ["CompositeCollection.addComposited(Collection,Collection)"], "external_dependencies": {"modules": ["CompositeCollection", "Collection"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method when the CompositeCollection contains multiple collections."}, {"name": "testSizeAfterClear", "primary_tested": ["CompositeCollection.size()"], "associated_methods": ["CompositeCollection.addComposited(Collection,Collection)", "CompositeCollection.clear()"], "external_dependencies": {"modules": ["CompositeCollection", "Collection"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method after clearing the CompositeCollection."}, {"name": "testSizeAfterAddAndRemove", "primary_tested": ["CompositeCollection.size()"], "associated_methods": ["CompositeCollection.addComposited(Collection)", "Collection.remove(Object)"], "external_dependencies": {"modules": ["CompositeCollection", "Collection"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method after adding and removing elements from the CompositeCollection."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/CompositeMap_entrySetTest.java", "testclass_name": "CompositeMap_entrySetTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Map;", "import java.util.Set;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeMap_entrySetTest", "description": "Unit tests for the entrySet functionality of the CompositeMap class.", "class_members": {"variables": [{"name": "compositeMap", "type": "CompositeMap<String, String>"}, {"name": "map1", "type": "Map<String, String>"}, {"name": "map2", "type": "Map<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEntrySet", "primary_tested": ["CompositeMap.entrySet()"], "associated_methods": ["Map.entrySet()"], "external_dependencies": {"modules": ["CompositeMap", "Map", "Set"], "class_members": [{"name": "compositeMap", "type": "variable"}, {"name": "map1", "type": "variable"}, {"name": "map2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the entrySet functionality of the CompositeMap, ensuring it contains entries from both composed maps."}, {"name": "testEntrySetAfterAddComposited", "primary_tested": ["CompositeMap.addComposited(Map<String, String>)"], "associated_methods": ["CompositeMap.entrySet()"], "external_dependencies": {"modules": ["CompositeMap", "Map", "Set"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the entrySet functionality of the CompositeMap after adding a new composed map, ensuring the entrySet contains entries from the newly added map."}, {"name": "testEntrySetAfterRemoveComposited", "primary_tested": ["CompositeMap.removeComposited(Map<String, String>)"], "associated_methods": ["CompositeMap.entrySet()"], "external_dependencies": {"modules": ["CompositeMap", "Map", "Set"], "class_members": [{"name": "compositeMap", "type": "variable"}, {"name": "map2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the entrySet functionality of the CompositeMap after removing a composed map, ensuring the entrySet no longer contains entries from the removed map."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_clearTest.java", "testclass_name": "StaticBucketMap_clearTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "StaticBucketMap_clearTest", "description": "Unit tests for the clear method of StaticBucketMap.", "class_members": {"variables": [{"name": "map", "type": "StaticBucketMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testClear", "primary_tested": ["StaticBucketMap.clear()"], "associated_methods": ["StaticBucketMap.put(String,String)", "StaticBucketMap.size()"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clear functionality of the StaticBucketMap, ensuring that all entries are removed and the size is reset to zero."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_isEmptyTest.java", "testclass_name": "PassiveExpiringMap_isEmptyTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "PassiveExpiringMap_isEmptyTest", "description": "Unit tests for the isEmpty method of PassiveExpiringMap.", "class_members": {"variables": [{"name": "expiringMap", "type": "PassiveExpiringMap<Integer, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testIsEmpty_EmptyMap", "primary_tested": ["PassiveExpiringMap.isEmpty()"], "external_dependencies": {"modules": ["PassiveExpiringMap"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isEmpty method when the map is empty."}, {"name": "testIsEmpty_NonEmptyMap", "primary_tested": ["PassiveExpiringMap.isEmpty()"], "associated_methods": ["PassiveExpiringMap.put(Integer,String)"], "external_dependencies": {"modules": ["PassiveExpiringMap"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isEmpty method when the map is non-empty."}, {"name": "testIsEmpty_ExpiredEntries", "primary_tested": ["PassiveExpiringMap.isEmpty()"], "associated_methods": ["PassiveExpiringMap.put(Integer,String)"], "external_dependencies": {"modules": ["PassiveExpiringMap"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isEmpty method when the map contains expired entries."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_containsAllTest.java", "testclass_name": "CompositeCollection_containsAllTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeCollection_containsAllTest", "description": "Unit tests for the containsAll method of the CompositeCollection class.", "class_members": {"variables": [{"name": "c", "type": "CompositeCollection<String>"}, {"name": "one", "type": "Collection<String>"}, {"name": "two", "type": "Collection<String>"}]}, "fixtures": ["setUpTest"], "test_cases": [{"name": "testContainsAllWithNullCollection", "primary_tested": ["CompositeCollection.containsAll(Collection)"], "external_dependencies": {"modules": ["CompositeCollection"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the containsAll method with a null collection."}, {"name": "testContainsAllWithEmptyCollection", "primary_tested": ["CompositeCollection.containsAll(Collection)"], "external_dependencies": {"modules": ["CompositeCollection", "ArrayList"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the containsAll method with an empty collection."}, {"name": "testContainsAllWithSingleCollection", "primary_tested": ["CompositeCollection.containsAll(Collection)"], "associated_methods": ["CompositeCollection.addComposited(Collection)"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet", "Arrays"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the containsAll method with a single collection."}, {"name": "testContainsAllWithMultipleCollections", "primary_tested": ["CompositeCollection.containsAll(Collection)"], "associated_methods": ["CompositeCollection.addComposited(Collection,Collection)"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet", "Arrays"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the containsAll method with multiple collections."}, {"name": "testContainsAllWithPartialMatch", "primary_tested": ["CompositeCollection.containsAll(Collection)"], "associated_methods": ["CompositeCollection.addComposited(Collection,Collection)"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet", "Arrays"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the containsAll method with a partial match in multiple collections."}, {"name": "testContainsAllWithEmptyComposite", "primary_tested": ["CompositeCollection.containsAll(Collection)"], "external_dependencies": {"modules": ["CompositeCollection", "Arrays"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the containsAll method with an empty composite collection."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/SingletonMap_entrySetTest.java", "testclass_name": "SingletonMap_entrySetTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Map;", "import java.util.Set;", "import org.apache.commons.collections4.keyvalue.TiedMapEntry;", "import org.junit.jupiter.api.Test;"], "name": "SingletonMap_entrySetTest", "description": "Unit tests for the entrySet method of the SingletonMap class.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testEntrySet", "primary_tested": ["SingletonMap.entrySet()"], "associated_methods": ["Set.size()", "Set.iterator()", "Iterator.next()", "TiedMapEntry.equals(Object)"], "external_dependencies": {"modules": ["SingletonMap", "Map", "Set", "TiedMapEntry"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the entrySet method of the SingletonMap to ensure it returns a set with the correct size and type of entries."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/TransformedSortedMap_headMapTest.java", "testclass_name": "TransformedSortedMap_headMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.functors.NOPTransformer;", "import org.junit.jupiter.api.Test;", "import java.util.SortedMap;", "import java.util.TreeMap;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "TransformedSortedMap_headMapTest", "description": "Unit tests for the headMap functionality of TransformedSortedMap.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testHeadMap", "primary_tested": ["TransformedSortedMap.headMap(Integer)"], "external_dependencies": {"modules": ["SortedMap", "TreeMap", "Transformer", "NOPTransformer", "TransformedSortedMap"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the headMap functionality of the TransformedSortedMap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/CompositeMap_removeTest.java", "testclass_name": "CompositeMap_removeTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeMap_removeTest", "description": "Unit tests for the remove functionality of the CompositeMap class.", "class_members": {"variables": [{"name": "compositeMap", "type": "CompositeMap<String, String>"}, {"name": "map1", "type": "Map<String, String>"}, {"name": "map2", "type": "Map<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveExistingKey", "primary_tested": ["CompositeMap.remove(String)"], "external_dependencies": {"modules": ["CompositeMap", "Map", "HashMap"], "class_members": [{"name": "compositeMap", "type": "variable"}, {"name": "map1", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of an existing key from the CompositeMap."}, {"name": "testRemoveNonExistingKey", "primary_tested": ["CompositeMap.remove(String)"], "external_dependencies": {"modules": ["CompositeMap", "Map", "HashMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of a non-existing key from the CompositeMap."}, {"name": "testRemoveFromMultipleMaps", "primary_tested": ["CompositeMap.remove(String)"], "external_dependencies": {"modules": ["CompositeMap", "Map", "HashMap"], "class_members": [{"name": "compositeMap", "type": "variable"}, {"name": "map1", "type": "variable"}, {"name": "map2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of a key that exists in multiple maps within the CompositeMap."}, {"name": "testRemoveWithEmptyCompositeMap", "primary_tested": ["CompositeMap.remove(String)"], "external_dependencies": {"modules": ["CompositeMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of a key from an empty CompositeMap."}, {"name": "testRemoveWithNullKey", "primary_tested": ["CompositeMap.remove(String)"], "external_dependencies": {"modules": ["CompositeMap", "Map", "HashMap"], "class_members": [{"name": "compositeMap", "type": "variable"}, {"name": "map1", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of a null key from the CompositeMap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_nextKeyTest.java", "testclass_name": "ListOrderedMap_nextKeyTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;"], "name": "ListOrderedMap_nextKeyTest", "description": "Unit tests for the nextKey method in the ListOrderedMap class.", "class_members": {"variables": [{"name": "listOrderedMap", "type": "ListOrderedMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNextKey_ValidKey", "primary_tested": ["ListOrderedMap.nextKey(String)"], "external_dependencies": {"modules": ["ListOrderedMap", "HashMap"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the nextKey method with valid keys in the ListOrderedMap."}, {"name": "testNextKey_LastKey", "primary_tested": ["ListOrderedMap.nextKey(String)"], "external_dependencies": {"modules": ["ListOrderedMap", "HashMap"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the nextKey method with the last key in the ListOrderedMap."}, {"name": "testNextKey_NonExistentKey", "primary_tested": ["ListOrderedMap.nextKey(String)"], "external_dependencies": {"modules": ["ListOrderedMap", "HashMap"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the nextKey method with a non-existent key in the ListOrderedMap."}, {"name": "testNextKey_EmptyMap", "primary_tested": ["ListOrderedMap.nextKey(String)"], "external_dependencies": {"modules": ["ListOrderedMap", "HashMap"]}, "category": "unit", "description": "Tests the nextKey method with an empty ListOrderedMap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_clearTest.java", "testclass_name": "PassiveExpiringMap_clearTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "PassiveExpiringMap_clearTest", "description": "Unit tests for the clear functionality of the PassiveExpiringMap class.", "class_members": {"variables": [{"name": "expiringMap", "type": "PassiveExpiringMap<Integer, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testClear", "primary_tested": ["PassiveExpiringMap.clear()"], "external_dependencies": {"modules": ["PassiveExpiringMap", "HashMap"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clear functionality of the PassiveExpiringMap, ensuring all entries are removed."}, {"name": "testClearWithExpiredEntries", "primary_tested": ["PassiveExpiringMap.clear()"], "external_dependencies": {"modules": ["PassiveExpiringMap", "HashMap"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clear functionality of the PassiveExpiringMap when entries are expired, ensuring all entries are removed."}, {"name": "testClearWithMixedEntries", "primary_tested": ["PassiveExpiringMap.clear()"], "external_dependencies": {"modules": ["PassiveExpiringMap", "HashMap"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clear functionality of the PassiveExpiringMap when entries are mixed (some expired, some not), ensuring all entries are removed."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_removeMultiKeyTest.java", "testclass_name": "MultiKeyMap_removeMultiKeyTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.*;", "import org.apache.commons.collections4.keyvalue.MultiKey;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "MultiKeyMap_removeMultiKeyTest", "description": "Unit tests for the removeMultiKey functionality of the MultiKeyMap class.", "class_members": {"variables": [{"name": "multiKeyMap", "type": "MultiKeyMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveMultiKey_ExistingKey", "primary_tested": ["MultiKeyMap.removeMultiKey(String,String)"], "associated_methods": ["MultiKeyMap.put(String,String,String)", "MultiKeyMap.containsKey(String,String)"], "external_dependencies": {"modules": ["MultiKeyMap", "MultiKey"], "class_members": [{"name": "multiKeyMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of an existing key from the MultiKeyMap."}, {"name": "testRemoveMultiKey_NonExistingKey", "primary_tested": ["MultiKeyMap.removeMultiKey(String,String)"], "external_dependencies": {"modules": ["MultiKeyMap", "MultiKey"], "class_members": [{"name": "multiKeyMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of a non-existing key from the MultiKeyMap."}, {"name": "testRemoveMultiKey_NullKey", "primary_tested": ["MultiKeyMap.removeMultiKey(String,String)"], "associated_methods": ["MultiKeyMap.put(String,String,String)", "MultiKeyMap.containsKey(String,String)"], "external_dependencies": {"modules": ["MultiKeyMap", "MultiKey"], "class_members": [{"name": "multiKeyMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of a key with a null value from the MultiKeyMap."}, {"name": "testRemoveMultiKey_MultipleEntries", "primary_tested": ["MultiKeyMap.removeMultiKey(String,String)"], "associated_methods": ["MultiKeyMap.put(String,String,String)", "MultiKeyMap.containsKey(String,String)"], "external_dependencies": {"modules": ["MultiKeyMap", "MultiKey"], "class_members": [{"name": "multiKeyMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of multiple entries from the MultiKeyMap."}, {"name": "testRemoveMultiKey_SameHashCodeDifferentKeys", "primary_tested": ["MultiKeyMap.removeMultiKey(String,String)"], "associated_methods": ["MultiKeyMap.put(String,String,String)", "MultiKeyMap.containsKey(String,String)"], "external_dependencies": {"modules": ["MultiKeyMap", "MultiKey"], "class_members": [{"name": "multiKeyMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of keys with the same hash code but different values from the MultiKeyMap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_getTest.java", "testclass_name": "MultiKeyMap_getTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.apache.commons.collections4.keyvalue.MultiKey;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "MultiKeyMap_getTest", "description": "Unit tests for the get method of MultiKeyMap class.", "class_members": {"variables": [{"name": "multiKeyMap", "type": "MultiKeyMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetExistingKey", "primary_tested": ["MultiKeyMap.get(String,String)"], "external_dependencies": {"modules": ["MultiKeyMap"], "class_members": [{"name": "multiKeyMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method of MultiKeyMap for an existing key."}, {"name": "testGetNonExistingKey", "primary_tested": ["MultiKeyMap.get(String,String)"], "external_dependencies": {"modules": ["MultiKeyMap"], "class_members": [{"name": "multiKeyMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method of MultiKeyMap for a non-existing key."}, {"name": "testGetWithNullKey", "primary_tested": ["MultiKeyMap.get(String,String)"], "external_dependencies": {"modules": ["MultiKeyMap"], "class_members": [{"name": "multiKeyMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method of MultiKeyMap with a null key."}, {"name": "testGetWithBothNullKeys", "primary_tested": ["MultiKeyMap.get(String,String)"], "external_dependencies": {"modules": ["MultiKeyMap"], "class_members": [{"name": "multiKeyMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method of MultiKeyMap with both keys being null."}, {"name": "testGetAfterRemove", "primary_tested": ["MultiKeyMap.get(String,String)"], "associated_methods": ["MultiKeyMap.removeMultiKey(String,String)"], "external_dependencies": {"modules": ["MultiKeyMap"], "class_members": [{"name": "multiKeyMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method of MultiKeyMap after removing a key."}, {"name": "testGetWithMultipleEntries", "primary_tested": ["MultiKeyMap.get(String,String)"], "external_dependencies": {"modules": ["MultiKeyMap"], "class_members": [{"name": "multiKeyMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method of MultiKeyMap with multiple entries."}, {"name": "testGetWithSameHashCodeDifferentKeys", "primary_tested": ["MultiKeyMap.get(String,String)"], "external_dependencies": {"modules": ["MultiKeyMap", "String"], "class_members": [{"name": "multiKeyMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method of MultiKeyMap with keys having the same hash code but different values."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/TransformedMap_transformedMapTest.java", "testclass_name": "TransformedMap_transformedMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "TransformedMap_transformedMapTest", "description": "Unit tests for the TransformedMap class, specifically testing the transformedMap method with both non-empty and empty maps.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testTransformedMapWithNonEmptyMap", "primary_tested": ["TransformedMap.transformedMap(Map<String,String>,Transformer<String,String>,Transformer<String,String>)"], "associated_methods": ["TransformedMap.size()", "TransformedMap.containsKey(String)", "TransformedMap.containsValue(String)"], "external_dependencies": {"modules": ["TransformedMap", "Transformer", "HashMap", "Map"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformedMap method with a non-empty map, ensuring that the keys and values are correctly transformed."}, {"name": "testTransformedMapWithEmptyMap", "primary_tested": ["TransformedMap.transformedMap(Map<String,String>,Transformer<String,String>,Transformer<String,String>)"], "associated_methods": ["TransformedMap.isEmpty()"], "external_dependencies": {"modules": ["TransformedMap", "Transformer", "HashMap", "Map"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformedMap method with an empty map, ensuring that the resulting map is also empty."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_cloneTest.java", "testclass_name": "MultiKeyMap_cloneTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "MultiKeyMap_cloneTest", "description": "Unit tests for the clone functionality of the MultiKeyMap class.", "class_members": {"variables": [{"name": "multiKeyMap", "type": "MultiKeyMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testClone", "primary_tested": ["MultiKeyMap.clone()"], "associated_methods": ["MultiKeyMap.put(String,String,String)", "MultiKeyMap.size()", "MultiKeyMap.get(String,String)"], "external_dependencies": {"modules": ["MultiKeyMap"], "class_members": [{"name": "multiKeyMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clone functionality of the MultiKeyMap with a single entry."}, {"name": "testCloneEmptyMap", "primary_tested": ["MultiKeyMap.clone()"], "associated_methods": ["MultiKeyMap.size()"], "external_dependencies": {"modules": ["MultiKeyMap"], "class_members": [{"name": "multiKeyMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clone functionality of an empty MultiKeyMap."}, {"name": "testCloneWithMultipleKeys", "primary_tested": ["MultiKeyMap.clone()"], "associated_methods": ["MultiKeyMap.put(String,String,String,String,String,String)", "MultiKeyMap.size()", "MultiKeyMap.get(String,String,String,String,String)"], "external_dependencies": {"modules": ["MultiKeyMap"], "class_members": [{"name": "multiKeyMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clone functionality of the MultiKeyMap with multiple keys."}, {"name": "testCloneWithNullValue", "primary_tested": ["MultiKeyMap.clone()"], "associated_methods": ["MultiKeyMap.put(String,String,String)", "MultiKeyMap.size()", "MultiKeyMap.get(String,String)"], "external_dependencies": {"modules": ["MultiKeyMap"], "class_members": [{"name": "multiKeyMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clone functionality of the MultiKeyMap with a null value."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/SingletonMap_cloneTest.java", "testclass_name": "SingletonMap_cloneTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "SingletonMap_cloneTest", "description": "Unit tests for the clone functionality of the SingletonMap class.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testClone", "primary_tested": ["SingletonMap.clone()"], "associated_methods": ["SingletonMap.getKey()", "SingletonMap.getValue()"], "external_dependencies": {"modules": ["SingletonMap"]}, "category": "unit", "description": "Tests the clone functionality of the SingletonMap, ensuring that the cloned instance is not the same object but has the same key and value."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_putAllTest.java", "testclass_name": "ListOrderedMap_putAllTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ListOrderedMap_putAllTest", "description": "Unit tests for the putAll method of the ListOrderedMap class.", "class_members": {"variables": [{"name": "listOrderedMap", "type": "ListOrderedMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPutAll_IndexOutOfBoundsException", "primary_tested": ["ListOrderedMap.putAll(int,Map)"], "external_dependencies": {"modules": ["ListOrderedMap", "HashMap", "Map", "IndexOutOfBoundsException"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that an IndexOutOfBoundsException is thrown when an invalid index is provided to the putAll method."}, {"name": "testPutAll_ValidIndex", "primary_tested": ["ListOrderedMap.putAll(int,Map)"], "associated_methods": ["ListOrderedMap.size()", "ListOrderedMap.get(Object)"], "external_dependencies": {"modules": ["ListOrderedMap", "HashMap", "Map"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the putAll method with a valid index, ensuring the map is correctly populated."}, {"name": "testPutAll_ReplaceExistingKey", "primary_tested": ["ListOrderedMap.putAll(int,Map)"], "associated_methods": ["ListOrderedMap.size()", "ListOrderedMap.get(Object)"], "external_dependencies": {"modules": ["ListOrderedMap", "HashMap", "Map"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the putAll method when replacing an existing key, ensuring the new value is correctly set."}, {"name": "testPutAll_EmptyMap", "primary_tested": ["ListOrderedMap.putAll(int,Map)"], "associated_methods": ["ListOrderedMap.isEmpty()"], "external_dependencies": {"modules": ["ListOrderedMap", "HashMap", "Map"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the putAll method with an empty map, ensuring the listOrderedMap remains empty."}, {"name": "testPutAll_MultipleCalls", "primary_tested": ["ListOrderedMap.putAll(int,Map)"], "associated_methods": ["ListOrderedMap.size()", "ListOrderedMap.get(Object)"], "external_dependencies": {"modules": ["ListOrderedMap", "HashMap", "Map"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests multiple calls to the putAll method, ensuring the map is correctly populated after each call."}, {"name": "testPutAll_RemoveAfterPut", "primary_tested": ["ListOrderedMap.putAll(int,Map)"], "associated_methods": ["ListOrderedMap.remove(Object)", "ListOrderedMap.size()", "ListOrderedMap.containsKey(Object)", "ListOrderedMap.get(Object)"], "external_dependencies": {"modules": ["ListOrderedMap", "HashMap", "Map"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the putAll method followed by a remove operation, ensuring the map is correctly updated."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/TransformedMap_putTest.java", "testclass_name": "TransformedMap_putTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import java.util.HashMap;", "import java.util.Map;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "TransformedMap_putTest", "description": "Unit tests for the put method of TransformedMap, focusing on key and value transformations.", "class_members": {"variables": [{"name": "transformedMap", "type": "TransformedMap<String, String>"}, {"name": "keyTransformer", "type": "Transformer<String, String>"}, {"name": "valueTransformer", "type": "Transformer<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPutWithTransformedKeyAndValue", "primary_tested": ["TransformedMap.put(String,String)"], "associated_methods": ["TransformedMap.get(String)"], "external_dependencies": {"modules": ["TransformedMap", "Transformer", "HashMap"], "class_members": [{"name": "transformedMap", "type": "variable"}, {"name": "keyTransformer", "type": "variable"}, {"name": "valueTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the put method with transformed key and value."}, {"name": "testPutWithNullKeyTransformer", "primary_tested": ["TransformedMap.put(String,String)"], "associated_methods": ["TransformedMap.get(String)"], "external_dependencies": {"modules": ["TransformedMap", "Transformer", "HashMap"], "class_members": [{"name": "transformedMap", "type": "variable"}, {"name": "valueTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the put method with a null key transformer."}, {"name": "testPutWithNullValueTransformer", "primary_tested": ["TransformedMap.put(String,String)"], "associated_methods": ["TransformedMap.get(String)"], "external_dependencies": {"modules": ["TransformedMap", "Transformer", "HashMap"], "class_members": [{"name": "transformedMap", "type": "variable"}, {"name": "keyTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the put method with a null value transformer."}, {"name": "testPutWithNullTransformers", "primary_tested": ["TransformedMap.put(String,String)"], "associated_methods": ["TransformedMap.get(String)"], "external_dependencies": {"modules": ["TransformedMap", "Transformer", "HashMap"], "class_members": [{"name": "transformedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the put method with both null key and value transformers."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/SingletonMap_getTest.java", "testclass_name": "SingletonMap_getTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import org.junit.jupiter.api.Test;"], "name": "SingletonMap_getTest", "description": "Unit tests for the get method of the SingletonMap class.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testGet_KeyMatches", "primary_tested": ["SingletonMap.get(String)"], "external_dependencies": {"modules": ["SingletonMap"]}, "category": "unit", "description": "Tests the get method of SingletonMap when the key matches."}, {"name": "testGet_KeyDoesNotMatch", "primary_tested": ["SingletonMap.get(String)"], "external_dependencies": {"modules": ["SingletonMap"]}, "category": "unit", "description": "Tests the get method of SingletonMap when the key does not match."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_entrySetTest.java", "testclass_name": "PassiveExpiringMap_entrySetTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.HashMap;", "import java.util.Map;", "import java.util.Set;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "PassiveExpiringMap_entrySetTest", "description": "Unit tests for the entrySet method of PassiveExpiringMap, focusing on the behavior with expired and non-expired entries.", "class_members": {"variables": [{"name": "expiringMap", "type": "PassiveExpiringMap<Integer, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEntrySetWithExpiredEntries", "primary_tested": ["PassiveExpiringMap.entrySet()"], "external_dependencies": {"modules": ["PassiveExpiringMap", "Map", "Set"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the entrySet method when all entries have expired."}, {"name": "testEntrySetWithNonExpiredEntries", "primary_tested": ["PassiveExpiringMap.entrySet()"], "external_dependencies": {"modules": ["PassiveExpiringMap", "Map", "Set"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the entrySet method when all entries are non-expired."}, {"name": "testEntrySetAfterPartialExpiration", "primary_tested": ["PassiveExpiringMap.entrySet()"], "external_dependencies": {"modules": ["PassiveExpiringMap", "Map", "Set"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the entrySet method after some entries have expired and new entries are added."}, {"name": "testEntrySetAfterClear", "primary_tested": ["PassiveExpiringMap.entrySet()"], "associated_methods": ["PassiveExpiringMap.clear()"], "external_dependencies": {"modules": ["PassiveExpiringMap", "Map", "Set"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the entrySet method after clearing all entries."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/SingletonMap_putAllTest.java", "testclass_name": "SingletonMap_putAllTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;"], "name": "SingletonMap_putAllTest", "description": "Tests for the putAll method of the SingletonMap class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testPutAllWithEmptyMap", "primary_tested": ["SingletonMap.putAll(Map)"], "external_dependencies": {"modules": ["SingletonMap", "HashMap", "Map"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the putAll method with an empty map, ensuring the SingletonMap remains unchanged."}, {"name": "testPutAllWithSingleEntryMap", "primary_tested": ["SingletonMap.putAll(Map)"], "external_dependencies": {"modules": ["SingletonMap", "HashMap", "Map"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the putAll method with a map containing a single entry, ensuring the SingletonMap updates the value."}, {"name": "testPutAllWithMultipleEntriesMap", "primary_tested": ["SingletonMap.putAll(Map)"], "external_dependencies": {"modules": ["SingletonMap", "HashMap", "Map"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the putAll method with a map containing multiple entries, ensuring an IllegalArgumentException is thrown."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_hashCodeTest.java", "testclass_name": "StaticBucketMap_hashCodeTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "StaticBucketMap_hashCodeTest", "description": "Unit tests for the hashCode method of the StaticBucketMap class.", "class_members": {"variables": [{"name": "map", "type": "StaticBucketMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testHashCodeWithEmptyMap", "primary_tested": ["StaticBucketMap.hashCode()"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hashCode method of an empty StaticBucketMap."}, {"name": "testHashCodeWithSingleEntry", "primary_tested": ["StaticBucketMap.hashCode()"], "associated_methods": ["StaticBucketMap.put(String,String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hashCode method of a StaticBucketMap with a single entry."}, {"name": "testHashCodeWithMultipleEntries", "primary_tested": ["StaticBucketMap.hashCode()"], "associated_methods": ["StaticBucketMap.put(String,String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hashCode method of a StaticBucketMap with multiple entries."}, {"name": "testHashCodeWithNullKey", "primary_tested": ["StaticBucketMap.hashCode()"], "associated_methods": ["StaticBucketMap.put(String,String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hashCode method of a StaticBucketMap with a null key."}, {"name": "testHashCodeWithNullValue", "primary_tested": ["StaticBucketMap.hashCode()"], "associated_methods": ["StaticBucketMap.put(String,String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hashCode method of a StaticBucketMap with a null value."}, {"name": "testHashCodeWithMultipleBuckets", "primary_tested": ["StaticBucketMap.hashCode()"], "associated_methods": ["StaticBucketMap.put(String,String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hashCode method of a StaticBucketMap with multiple entries across different buckets."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/sequence/SequencesComparator_getScriptTest.java", "testclass_name": "SequencesComparator_getScriptTest", "dependencies": ["package org.apache.commons.collections4.sequence;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "SequencesComparator_getScriptTest", "description": "Unit test for the getScript method of the SequencesComparator class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testGetScript", "primary_tested": ["SequencesComparator.getScript()"], "external_dependencies": {"modules": ["SequencesComparator", "EditScript", "Arrays", "List"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the getScript method of the SequencesComparator class by comparing two sequences and verifying the modifications and LCS length."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/LinkedMap_indexOfTest.java", "testclass_name": "LinkedMap_indexOfTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.CollectionUtils;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "LinkedMap_indexOfTest", "description": "Unit tests for the indexOf method in the LinkedMap class.", "class_members": {"variables": [{"name": "linkedMap", "type": "LinkedMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testIndexOfExistingKey", "primary_tested": ["LinkedMap.indexOf(String)"], "external_dependencies": {"modules": ["LinkedMap"], "class_members": [{"name": "linkedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the indexOf method for existing keys in the LinkedMap."}, {"name": "testIndexOfNonExistingKey", "primary_tested": ["LinkedMap.indexOf(String)"], "external_dependencies": {"modules": ["LinkedMap", "CollectionUtils"], "class_members": [{"name": "linkedMap", "type": "variable"}], "project_specific_resources": ["CollectionUtils.INDEX_NOT_FOUND"]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the indexOf method for a non-existing key in the LinkedMap."}, {"name": "testIndexOfNullKey", "primary_tested": ["LinkedMap.indexOf(String)"], "external_dependencies": {"modules": ["LinkedMap", "CollectionUtils"], "class_members": [{"name": "linkedMap", "type": "variable"}], "project_specific_resources": ["CollectionUtils.INDEX_NOT_FOUND"]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the indexOf method for a null key in the LinkedMap."}, {"name": "testIndexOfAfterRemove", "primary_tested": ["LinkedMap.indexOf(String)"], "associated_methods": ["LinkedMap.remove(Object)"], "external_dependencies": {"modules": ["LinkedMap", "CollectionUtils"], "class_members": [{"name": "linkedMap", "type": "variable"}], "project_specific_resources": ["CollectionUtils.INDEX_NOT_FOUND"]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the indexOf method after removing a key from the LinkedMap."}, {"name": "testIndexOfAfterAdd", "primary_tested": ["LinkedMap.indexOf(String)"], "associated_methods": ["LinkedMap.put(Object,Object)"], "external_dependencies": {"modules": ["LinkedMap"], "class_members": [{"name": "linkedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the indexOf method after adding a new key to the LinkedMap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/CompositeMap_addCompositedTest.java", "testclass_name": "CompositeMap_addCompositedTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.Collection;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeMap_addCompositedTest", "description": "Unit tests for the addComposited method of the CompositeMap class.", "class_members": {"variables": [{"name": "compositeMap", "type": "CompositeMap<String, String>"}, {"name": "map1", "type": "Map<String, String>"}, {"name": "map2", "type": "Map<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAddCompositedNoCollision", "primary_tested": ["CompositeMap.addComposited(Map<String, String>)"], "associated_methods": ["CompositeMap.size()", "CompositeMap.containsKey(String)"], "external_dependencies": {"modules": ["CompositeMap", "Map", "HashMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests adding a map to the composite map without any key collisions."}, {"name": "testAddCompositedWithCollisionNoMutator", "primary_tested": ["CompositeMap.addComposited(Map<String, String>)"], "associated_methods": ["CompositeMap.setMutator(CompositeMap.MapMutator<String, String>)"], "external_dependencies": {"modules": ["CompositeMap", "Map", "HashMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests adding a map to the composite map with key collisions but without a mutator, expecting an IllegalArgumentException."}, {"name": "testAddCompositedWithCollisionWithMutator", "primary_tested": ["CompositeMap.addComposited(Map<String, String>)"], "associated_methods": ["CompositeMap.setMutator(CompositeMap.MapMutator<String, String>)", "CompositeMap.size()", "CompositeMap.containsKey(String)"], "external_dependencies": {"modules": ["CompositeMap", "Map", "HashMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests adding a map to the composite map with key collisions and with a mutator."}, {"name": "testAddCompositedNullMap", "primary_tested": ["CompositeMap.addComposited(Map<String, String>)"], "associated_methods": ["CompositeMap.size()"], "external_dependencies": {"modules": ["CompositeMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests adding a null map to the composite map."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/CompositeMap_containsValueTest.java", "testclass_name": "CompositeMap_containsValueTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeMap_containsValueTest", "description": "Unit tests for the containsValue method in CompositeMap.", "class_members": {"variables": [{"name": "compositeMap", "type": "CompositeMap<String, String>"}, {"name": "map1", "type": "Map<String, String>"}, {"name": "map2", "type": "Map<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testContainsValue_ValuePresentInFirstMap", "primary_tested": ["CompositeMap.containsValue(String)"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the containsValue method correctly identifies a value present in the first map."}, {"name": "testContainsValue_ValuePresentInSecondMap", "primary_tested": ["CompositeMap.containsValue(String)"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the containsValue method correctly identifies a value present in the second map."}, {"name": "testContainsValue_ValueNotPresent", "primary_tested": ["CompositeMap.containsValue(String)"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the containsValue method correctly identifies a value not present in any map."}, {"name": "testContainsValue_NullValuePresent", "primary_tested": ["CompositeMap.containsValue(String)"], "associated_methods": ["Map.put(String,String)"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}, {"name": "map1", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the containsValue method correctly identifies a null value present in the map."}, {"name": "testContainsValue_NullValueNotPresent", "primary_tested": ["CompositeMap.containsValue(String)"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the containsValue method correctly identifies a null value not present in any map."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/UnmodifiableOrderedMap_unmodifiableOrderedMapTest.java", "testclass_name": "UnmodifiableOrderedMap_unmodifiableOrderedMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.OrderedMap;", "import org.apache.commons.collections4.Unmodifiable;", "import org.apache.commons.collections4.map.ListOrderedMap;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "UnmodifiableOrderedMap_unmodifiableOrderedMapTest", "description": "Tests for the UnmodifiableOrderedMap class, focusing on the unmodifiableOrderedMap method.", "class_members": {"variables": [{"name": "modifiableMap", "type": "OrderedMap<String, String>"}, {"name": "unmodifiableMap", "type": "OrderedMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testUnmodifiableOrderedMapWithModifiableMap", "primary_tested": ["UnmodifiableOrderedMap.unmodifiableOrderedMap(OrderedMap<String, String>)"], "external_dependencies": {"modules": ["UnmodifiableOrderedMap", "OrderedMap"], "class_members": [{"name": "modifiableMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the creation of an unmodifiable map from a modifiable map and verifies its properties."}, {"name": "testUnmodifiableOrderedMapWithUnmodifiableMap", "primary_tested": ["UnmodifiableOrderedMap.unmodifiableOrderedMap(OrderedMap<String, String>)"], "external_dependencies": {"modules": ["UnmodifiableOrderedMap", "OrderedMap"], "class_members": [{"name": "unmodifiableMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the creation of an unmodifiable map from an already unmodifiable map and verifies it returns the same instance."}, {"name": "testUnmodifiableOrderedMapWithNullMap", "primary_tested": ["UnmodifiableOrderedMap.unmodifiableOrderedMap(OrderedMap<String, String>)"], "external_dependencies": {"modules": ["UnmodifiableOrderedMap"]}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of the unmodifiableOrderedMap method when a null map is provided, expecting a NullPointerException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_putAllTest.java", "testclass_name": "PassiveExpiringMap_putAllTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.Test;"], "name": "PassiveExpiringMap_putAllTest", "description": "Unit tests for the putAll method of PassiveExpiringMap.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testPutAll", "primary_tested": ["PassiveExpiringMap.putAll(Map)"], "associated_methods": ["PassiveExpiringMap.size()", "PassiveExpiringMap.containsKey(String)"], "external_dependencies": {"modules": ["PassiveExpiringMap", "HashMap", "Map"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the putAll functionality of the PassiveExpiringMap, ensuring that all entries from the provided map are correctly added and can be queried."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_containsKeyTest.java", "testclass_name": "StaticBucketMap_containsKeyTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "StaticBucketMap_containsKeyTest", "description": "Unit tests for the containsKey method of the StaticBucketMap class.", "class_members": {"variables": [{"name": "map", "type": "StaticBucketMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testContainsKey_KeyExists", "primary_tested": ["StaticBucketMap.containsKey(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsKey method when the key exists in the map."}, {"name": "testContainsKey_KeyDoesNotExist", "primary_tested": ["StaticBucketMap.containsKey(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsKey method when the key does not exist in the map."}, {"name": "testContainsKey_NullKeyExists", "primary_tested": ["StaticBucketMap.containsKey(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsKey method when the null key exists in the map."}, {"name": "testContainsKey_NullKeyDoesNotExist", "primary_tested": ["StaticBucketMap.containsKey(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsKey method when the null key does not exist in the map."}, {"name": "testContainsKey_AfterRemove", "primary_tested": ["StaticBucketMap.containsKey(String)"], "associated_methods": ["StaticBucketMap.remove(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsKey method after removing a key from the map."}, {"name": "testContainsKey_AfterClear", "primary_tested": ["StaticBucketMap.containsKey(String)"], "associated_methods": ["StaticBucketMap.clear()"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsKey method after clearing the map."}, {"name": "testContainsKey_AfterPutAll", "primary_tested": ["StaticBucketMap.containsKey(String)"], "associated_methods": ["StaticBucketMap.putAll(Map<? extends String, ? extends String>)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsKey method after adding all entries from another map."}, {"name": "testContainsKey_AfterPut", "primary_tested": ["StaticBucketMap.containsKey(String)"], "associated_methods": ["StaticBucketMap.put(String,String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsKey method after adding a key-value pair to the map."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_removeMappingTest.java", "testclass_name": "MultiValueMap_removeMappingTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Collection;", "import java.util.HashMap;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "MultiValueMap_removeMappingTest", "description": "Unit tests for the removeMapping method in the MultiValueMap class.", "class_members": {"variables": [{"name": "map", "type": "MultiValueMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveMapping_KeyExistsAndValueExists", "primary_tested": ["MultiValueMap.removeMapping(String,String)"], "associated_methods": ["MultiValueMap.put(String,String)", "MultiValueMap.containsValue(String,String)"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeMapping method when the key exists and the value exists in the map."}, {"name": "testRemoveMapping_KeyExistsAndValueDoesNotExist", "primary_tested": ["MultiValueMap.removeMapping(String,String)"], "associated_methods": ["MultiValueMap.put(String,String)", "MultiValueMap.containsValue(String,String)"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeMapping method when the key exists but the value does not exist in the map."}, {"name": "testRemoveMapping_KeyDoesNotExist", "primary_tested": ["MultiValueMap.removeMapping(String,String)"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeMapping method when the key does not exist in the map."}, {"name": "testRemoveMapping_KeyExistsAndCollectionBecomesEmpty", "primary_tested": ["MultiValueMap.removeMapping(String,String)"], "associated_methods": ["MultiValueMap.put(String,String)", "MultiValueMap.getCollection(String)"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeMapping method when the key exists and the collection becomes empty after removal."}, {"name": "testRemoveMapping_MultipleValuesAndCollectionRemainsNonEmpty", "primary_tested": ["MultiValueMap.removeMapping(String,String)"], "associated_methods": ["MultiValueMap.put(String,String)", "MultiValueMap.containsValue(String,String)", "MultiValueMap.getCollection(String)"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeMapping method when multiple values exist and the collection remains non-empty after removal."}, {"name": "testRemoveMapping_MultipleKeysAndValues", "primary_tested": ["MultiValueMap.removeMapping(String,String)"], "associated_methods": ["MultiValueMap.put(String,String)", "MultiValueMap.containsValue(String,String)"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeMapping method when multiple keys and values exist in the map."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/CompositeMap_putAllTest.java", "testclass_name": "CompositeMap_putAllTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import java.util.HashMap;", "import java.util.Map;", "import java.util.Collection;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeMap_putAllTest", "description": "Tests for the putAll method in CompositeMap with and without a mutator.", "class_members": {"variables": [{"name": "compositeMap", "type": "CompositeMap<String, String>"}, {"name": "mapOne", "type": "Map<String, String>"}, {"name": "mapTwo", "type": "Map<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPutAllWithMutator", "primary_tested": ["CompositeMap.putAll(Map<? extends String, ? extends String>)"], "associated_methods": ["Map.containsKey(Object)", "Map.get(Object)"], "external_dependencies": {"modules": ["CompositeMap", "Map", "HashMap"], "class_members": [{"name": "compositeMap", "type": "variable"}, {"name": "mapOne", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the putAll method of CompositeMap when a mutator is provided, ensuring that the new map entries are correctly added to mapOne."}, {"name": "testPutAllWithoutMutator", "primary_tested": ["CompositeMap.putAll(Map<? extends String, ? extends String>)"], "associated_methods": ["CompositeMap.setMutator(CompositeMap.MapMutator<String, String>)"], "external_dependencies": {"modules": ["CompositeMap", "Map", "HashMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the putAll method of CompositeMap when no mutator is provided, expecting an UnsupportedOperationException to be thrown."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/CompositeMap_equalsTest.java", "testclass_name": "CompositeMap_equalsTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeMap_equalsTest", "description": "Unit tests for the equals method of the CompositeMap class.", "class_members": {"variables": [{"name": "one", "type": "Map<String, String>"}, {"name": "two", "type": "Map<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEqualsWithEqualMaps", "primary_tested": ["CompositeMap.equals(Object)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap", "Map"], "class_members": [{"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with two equal maps."}, {"name": "testEqualsWithDifferentMaps", "primary_tested": ["CompositeMap.equals(Object)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap", "Map"], "class_members": [{"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with two different maps."}, {"name": "testEqualsWithNonMapObject", "primary_tested": ["CompositeMap.equals(Object)"], "external_dependencies": {"modules": ["CompositeMap"], "class_members": [{"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with a non-map object."}, {"name": "testEqualsWithEmptyMap", "primary_tested": ["CompositeMap.equals(Object)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap", "Map"], "class_members": [{"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with an empty map."}, {"name": "testEqualsWithNull", "primary_tested": ["CompositeMap.equals(Object)"], "external_dependencies": {"modules": ["CompositeMap"], "class_members": [{"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with a null object."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/TransformedMap_putAllTest.java", "testclass_name": "TransformedMap_putAllTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.HashMap;", "import java.util.Map;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "TransformedMap_putAllTest", "description": "Unit tests for the putAll method of the TransformedMap class.", "class_members": {"variables": [{"name": "transformedMap", "type": "TransformedMap<String, String>"}, {"name": "keyTransformer", "type": "Transformer<String, String>"}, {"name": "valueTransformer", "type": "Transformer<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPutAll", "primary_tested": ["TransformedMap.putAll(Map<String, String>)"], "associated_methods": ["TransformedMap.get(String)"], "external_dependencies": {"modules": ["TransformedMap", "HashMap", "Transformer"], "class_members": [{"name": "transformedMap", "type": "variable"}, {"name": "keyTransformer", "type": "variable"}, {"name": "valueTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the putAll method of TransformedMap with a non-empty map."}, {"name": "testPutAllWithEmptyMap", "primary_tested": ["TransformedMap.putAll(Map<String, String>)"], "associated_methods": ["TransformedMap.size()"], "external_dependencies": {"modules": ["TransformedMap", "HashMap", "Transformer"], "class_members": [{"name": "transformedMap", "type": "variable"}, {"name": "keyTransformer", "type": "variable"}, {"name": "valueTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the putAll method of TransformedMap with an empty map."}, {"name": "testPutAllWithNullKey", "primary_tested": ["TransformedMap.putAll(Map<String, String>)"], "external_dependencies": {"modules": ["TransformedMap", "HashMap", "Transformer"], "class_members": [{"name": "transformedMap", "type": "variable"}, {"name": "keyTransformer", "type": "variable"}, {"name": "valueTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the putAll method of TransformedMap with a null key, expecting a NullPointerException."}, {"name": "testPutAllWithNullValue", "primary_tested": ["TransformedMap.putAll(Map<String, String>)"], "external_dependencies": {"modules": ["TransformedMap", "HashMap", "Transformer"], "class_members": [{"name": "transformedMap", "type": "variable"}, {"name": "keyTransformer", "type": "variable"}, {"name": "valueTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the putAll method of TransformedMap with a null value, expecting a NullPointerException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/CompositeMap_containsKeyTest.java", "testclass_name": "CompositeMap_containsKeyTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeMap_containsKeyTest", "description": "Unit tests for the containsKey method in the CompositeMap class.", "class_members": {"variables": [{"name": "one", "type": "Map<String, String>"}, {"name": "two", "type": "Map<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testContainsKey_KeyPresentInFirstMap", "primary_tested": ["CompositeMap.containsKey(String)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap"], "class_members": [{"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the containsKey method returns true when the key is present in the first map."}, {"name": "testContainsKey_KeyPresentInSecondMap", "primary_tested": ["CompositeMap.containsKey(String)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap"], "class_members": [{"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the containsKey method returns true when the key is present in the second map."}, {"name": "testContainsKey_KeyNotPresent", "primary_tested": ["CompositeMap.containsKey(String)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap"], "class_members": [{"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the containsKey method returns false when the key is not present in any map."}, {"name": "testContainsKey_AfterAddingNewMap", "primary_tested": ["CompositeMap.containsKey(String)"], "associated_methods": ["CompositeMap.addComposited(Map)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap"], "class_members": [{"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the containsKey method returns true after adding a new map with the key."}, {"name": "testContainsKey_AfterRemovingMap", "primary_tested": ["CompositeMap.containsKey(String)"], "associated_methods": ["CompositeMap.addComposited(Map)", "CompositeMap.removeComposited(Map)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap"], "class_members": [{"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the containsKey method returns false after removing a map that contained the key."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/functors/AllPredicate_testTest.java", "testclass_name": "AllPredicate_testTest", "dependencies": ["package org.apache.commons.collections4.functors;", "import org.apache.commons.collections4.Predicate;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;"], "name": "AllPredicate_testTest", "description": "Unit tests for the AllPredicate class in Apache Commons Collections, focusing on the behavior of combining multiple predicates.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testAllPredicatesTrue", "primary_tested": ["AllPredicate.test(String)"], "associated_methods": ["Predicate.test(String)"], "external_dependencies": {"modules": ["Predicate", "AllPredicate"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the AllPredicate functionality when all combined predicates return true."}, {"name": "testOnePredicateFalse", "primary_tested": ["AllPredicate.test(String)"], "associated_methods": ["Predicate.test(String)"], "external_dependencies": {"modules": ["Predicate", "AllPredicate"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the AllPredicate functionality when one of the combined predicates returns false."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_putTest.java", "testclass_name": "PassiveExpiringMap_putTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import java.util.HashMap;", "import java.util.Map;", "import java.util.concurrent.TimeUnit;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "PassiveExpiringMap_putTest", "description": "Unit tests for the put method of PassiveExpiringMap.", "class_members": {"variables": [{"name": "expiringMap", "type": "PassiveExpiringMap<Integer, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPutNewEntry", "primary_tested": ["PassiveExpiringMap.put(Integer,String)"], "associated_methods": ["PassiveExpiringMap.get(Integer)"], "external_dependencies": {"modules": ["PassiveExpiringMap", "HashMap"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the put method when adding a new entry to the map."}, {"name": "testPutReplaceEntry", "primary_tested": ["PassiveExpiringMap.put(Integer,String)"], "associated_methods": ["PassiveExpiringMap.get(Integer)"], "external_dependencies": {"modules": ["PassiveExpiringMap", "HashMap"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the put method when replacing an existing entry in the map."}, {"name": "testPutExpiredEntry", "primary_tested": ["PassiveExpiringMap.put(Integer,String)"], "associated_methods": ["PassiveExpiringMap.get(Integer)", "PassiveExpiringMap.remove(Integer)"], "external_dependencies": {"modules": ["PassiveExpiringMap", "HashMap"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the put method when adding a new entry after an entry has expired and been removed."}, {"name": "testPutWithNegativeTimeToLive", "primary_tested": ["PassiveExpiringMap.put(Integer,String)"], "associated_methods": ["PassiveExpiringMap.get(Integer)"], "external_dependencies": {"modules": ["PassiveExpiringMap", "HashMap"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the put method with a negative time-to-live policy."}, {"name": "testPutWithZeroTimeToLive", "primary_tested": ["PassiveExpiringMap.put(Integer,String)"], "associated_methods": ["PassiveExpiringMap.get(Integer)"], "external_dependencies": {"modules": ["PassiveExpiringMap", "HashMap"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the put method with a zero time-to-live policy."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_firstKeyTest.java", "testclass_name": "ListOrderedMap_firstKeyTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.NoSuchElementException;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "ListOrderedMap_firstKeyTest", "description": "Unit tests for the firstKey method of the ListOrderedMap class.", "class_members": {"variables": [{"name": "listOrderedMap", "type": "ListOrderedMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testFirstKey_EmptyMap", "primary_tested": ["ListOrderedMap.firstKey()"], "external_dependencies": {"modules": ["ListOrderedMap", "NoSuchElementException"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the firstKey method when the map is empty, expecting a NoSuchElementException."}, {"name": "testFirstKey_NonEmptyMap", "primary_tested": ["ListOrderedMap.firstKey()"], "associated_methods": ["ListOrderedMap.put(String,String)"], "external_dependencies": {"modules": ["ListOrderedMap"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the firstKey method when the map is non-empty, expecting the first key added."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/CompositeMap_keySetTest.java", "testclass_name": "CompositeMap_keySetTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Map;", "import java.util.Set;", "import org.apache.commons.collections4.set.CompositeSet;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeMap_keySetTest", "description": "Unit tests for the keySet functionality of the CompositeMap class.", "class_members": {"variables": [{"name": "compositeMap", "type": "CompositeMap<String, String>"}, {"name": "map1", "type": "Map<String, String>"}, {"name": "map2", "type": "Map<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testKeySet", "primary_tested": ["CompositeMap.keySet()"], "associated_methods": ["CompositeSet.size()", "CompositeSet.contains(Object)"], "external_dependencies": {"modules": ["CompositeMap", "CompositeSet", "HashMap", "Set"], "class_members": [{"name": "compositeMap", "type": "variable"}, {"name": "map1", "type": "variable"}, {"name": "map2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the keySet functionality of the CompositeMap, ensuring it returns a CompositeSet and contains the correct keys."}, {"name": "testKeySetAfterAddComposited", "primary_tested": ["CompositeMap.addComposited(Map<String, String>)"], "associated_methods": ["CompositeMap.keySet()", "CompositeSet.size()", "CompositeSet.contains(Object)"], "external_dependencies": {"modules": ["CompositeMap", "CompositeSet", "HashMap", "Set"], "class_members": [{"name": "compositeMap", "type": "variable"}, {"name": "map1", "type": "variable"}, {"name": "map2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the keySet functionality of the CompositeMap after adding a new map to it, ensuring the keySet is updated correctly."}, {"name": "testKeySetAfterRemoveComposited", "primary_tested": ["CompositeMap.removeComposited(Map<String, String>)"], "associated_methods": ["CompositeMap.keySet()", "CompositeSet.size()", "CompositeSet.contains(Object)"], "external_dependencies": {"modules": ["CompositeMap", "CompositeSet", "HashMap", "Set"], "class_members": [{"name": "compositeMap", "type": "variable"}, {"name": "map1", "type": "variable"}, {"name": "map2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the keySet functionality of the CompositeMap after removing a map from it, ensuring the keySet is updated correctly."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_containsValueTest.java", "testclass_name": "StaticBucketMap_containsValueTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "StaticBucketMap_containsValueTest", "description": "Unit tests for the containsValue method of the StaticBucketMap class.", "class_members": {"variables": [{"name": "map", "type": "StaticBucketMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testContainsValue_ValuePresent", "primary_tested": ["StaticBucketMap.containsValue(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsValue method when the value is present in the map."}, {"name": "testContainsValue_ValueNotPresent", "primary_tested": ["StaticBucketMap.containsValue(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsValue method when the value is not present in the map."}, {"name": "testContainsValue_NullValuePresent", "primary_tested": ["StaticBucketMap.containsValue(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsValue method when the value is null and present in the map."}, {"name": "testContainsValue_NullValueNotPresent", "primary_tested": ["StaticBucketMap.containsValue(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsValue method when the value is null and not present in the map."}, {"name": "testContainsValue_EmptyMap", "primary_tested": ["StaticBucketMap.containsValue(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsValue method when the map is empty."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/functors/EqualPredicate_equalPredicateTest.java", "testclass_name": "EqualPredicate_equalPredicateTest", "dependencies": ["package org.apache.commons.collections4.functors;", "import org.apache.commons.collections4.Predicate;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "EqualPredicate_equalPredicateTest", "description": "Unit tests for the EqualPredicate class, specifically testing the equalPredicate method with non-null and null objects.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testEqualPredicateWithNonNullObject", "primary_tested": ["EqualPredicate.equalPredicate(String)"], "associated_methods": ["Predicate.test(String)"], "external_dependencies": {"modules": ["EqualPredicate", "Predicate"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the equalPredicate method of EqualPredicate with a non-null object."}, {"name": "testEqualPredicateWithNullObject", "primary_tested": ["EqualPredicate.equalPredicate(String)"], "associated_methods": ["Predicate.test(String)"], "external_dependencies": {"modules": ["EqualPredicate", "Predicate"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the equalPredicate method of EqualPredicate with a null object."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/BooleanComparator_hashCodeTest.java", "testclass_name": "BooleanComparator_hashCodeTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "BooleanComparator_hashCodeTest", "description": "Unit tests for the hashCode method of BooleanComparator.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testHashCodeTrueFirst", "primary_tested": ["BooleanComparator.hashCode()"], "external_dependencies": {"modules": ["BooleanComparator"]}, "category": "unit", "description": "Tests the hashCode method of BooleanComparator when true values are prioritized."}, {"name": "testHashCodeFalseFirst", "primary_tested": ["BooleanComparator.hashCode()"], "external_dependencies": {"modules": ["BooleanComparator"]}, "category": "unit", "description": "Tests the hashCode method of BooleanComparator when false values are prioritized."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/LazyMap_getTest.java", "testclass_name": "LazyMap_getTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.Factory;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.mockito.Mockito.*;"], "name": "LazyMap_getTest", "description": "Unit tests for the get method of LazyMap.", "class_members": {"variables": [{"name": "map", "type": "Map<String, String>"}, {"name": "factory", "type": "Factory<String>"}, {"name": "lazyMap", "type": "LazyMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGet_KeyNotInMap", "primary_tested": ["LazyMap.get(String)"], "associated_methods": ["Factory.create()"], "external_dependencies": {"modules": ["LazyMap", "Factory", "HashMap", "Map"], "class_members": [{"name": "map", "type": "variable"}, {"name": "factory", "type": "variable"}, {"name": "lazyMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method of LazyMap when the key is not present in the map."}, {"name": "testGet_KeyInMap", "primary_tested": ["LazyMap.get(String)"], "associated_methods": ["Factory.create()"], "external_dependencies": {"modules": ["LazyMap", "Factory", "HashMap", "Map"], "class_members": [{"name": "map", "type": "variable"}, {"name": "factory", "type": "variable"}, {"name": "lazyMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method of LazyMap when the key is already present in the map."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/ComparatorChain_hashCodeTest.java", "testclass_name": "ComparatorChain_hashCodeTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import org.junit.jupiter.api.Test;", "import java.util.ArrayList;", "import java.util.BitSet;", "import java.util.Comparator;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "ComparatorChain_hashCodeTest", "description": "Unit tests for the hashCode method of the ComparatorChain class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testHashCode", "primary_tested": ["ComparatorChain.hashCode()"], "external_dependencies": {"modules": ["ArrayList", "BitSet", "ComparatorChain", "Comparator", "List"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the hashCode method of the ComparatorChain class."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/ComparatorChain_setComparatorTest.java", "testclass_name": "ComparatorChain_setComparatorTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import org.junit.jupiter.api.Test;", "import java.util.Comparator;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "ComparatorChain_setComparatorTest", "description": "Unit tests for the setComparator method in the ComparatorChain class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testSetComparator", "primary_tested": ["ComparatorChain.setComparator(int,Comparator,boolean)"], "associated_methods": ["ComparatorChain.addComparator(Comparator)", "Comparator.naturalOrder()"], "external_dependencies": {"modules": ["ComparatorChain", "Comparator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests setting a comparator in the ComparatorChain with and without reversing the order."}, {"name": "testSetComparatorLocked", "primary_tested": ["ComparatorChain.setComparator(int,Comparator,boolean)"], "associated_methods": ["ComparatorChain.addComparator(Comparator)", "ComparatorChain.compare(String,String)", "Comparator.naturalOrder()"], "external_dependencies": {"modules": ["ComparatorChain", "Comparator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests attempting to set a comparator in a locked ComparatorChain, which should throw an UnsupportedOperationException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/splitmap/TransformedSplitMap_transformingMapTest.java", "testclass_name": "TransformedSplitMap_transformingMapTest", "dependencies": ["package org.apache.commons.collections4.splitmap;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.map.LinkedMap;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.assertNotNull;"], "name": "TransformedSplitMap_transformingMapTest", "description": "Unit tests for the transformingMap functionality of TransformedSplitMap.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testTransformingMap", "primary_tested": ["TransformedSplitMap.transformingMap(Map<String, Integer>, Transformer<String, String>, Transformer<Integer, Integer>)"], "external_dependencies": {"modules": ["LinkedMap", "Transformer", "TransformedSplitMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformingMap functionality of TransformedSplitMap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/functors/AllPredicate_allPredicateTest.java", "testclass_name": "AllPredicate_allPredicateTest", "dependencies": ["package org.apache.commons.collections4.functors;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.mockito.Mockito.mock;", "import static org.mockito.Mockito.when;", "import java.util.Arrays;", "import java.util.Collection;", "import org.apache.commons.collections4.Predicate;", "import org.junit.jupiter.api.Test;"], "name": "AllPredicate_allPredicateTest", "description": "Unit tests for the AllPredicate class, specifically testing the allPredicate method with various scenarios.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testAllPredicate_EmptyCollection", "primary_tested": ["AllPredicate.allPredicate(Collection<Predicate<Object>>)"], "external_dependencies": {"modules": ["AllPredicate", "Predicate", "Arrays"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the allPredicate method with an empty collection of predicates."}, {"name": "testAllPredicate_SinglePredicate", "primary_tested": ["AllPredicate.allPredicate(Collection<Predicate<Object>>)"], "associated_methods": ["Predicate.test(Object)"], "external_dependencies": {"modules": ["AllPredicate", "Predicate", "Arrays", "Mockito"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the allPredicate method with a single predicate."}, {"name": "testAllPredicate_MultiplePredicates", "primary_tested": ["AllPredicate.allPredicate(Collection<Predicate<Object>>)"], "associated_methods": ["Predicate.test(Object)"], "external_dependencies": {"modules": ["AllPredicate", "Predicate", "Arrays", "Mockito"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the allPredicate method with multiple predicates."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_clearTest.java", "testclass_name": "MultiValueMap_clearTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Collection;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "MultiValueMap_clearTest", "description": "Unit tests for the clear functionality of the MultiValueMap class.", "class_members": {"variables": [{"name": "multiValueMap", "type": "MultiValueMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testClear", "primary_tested": ["MultiValueMap.clear()"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "multiValueMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clear functionality of the MultiValueMap when it contains multiple values for a key."}, {"name": "testClearWithEmptyMap", "primary_tested": ["MultiValueMap.clear()"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "multiValueMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clear functionality of the MultiValueMap when it is initially empty."}, {"name": "testClearWithNonEmptyMap", "primary_tested": ["MultiValueMap.clear()"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "multiValueMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clear functionality of the MultiValueMap when it contains multiple values for different keys."}, {"name": "testClearWithMultipleKeys", "primary_tested": ["MultiValueMap.clear()"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "multiValueMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clear functionality of the MultiValueMap when it contains multiple values for multiple keys."}, {"name": "testClearWithDifferentCollectionTypes", "primary_tested": ["MultiValueMap.clear()"], "external_dependencies": {"modules": ["MultiValueMap", "HashMap", "ArrayList"], "class_members": [{"name": "multiValueMap", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the clear functionality of the MultiValueMap when it uses different collection types."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/functors/ComparatorPredicate_comparatorPredicateTest.java", "testclass_name": "ComparatorPredicate_comparatorPredicateTest", "dependencies": ["package org.apache.commons.collections4.functors;", "import org.apache.commons.collections4.Predicate;", "import org.junit.jupiter.api.Test;", "import java.util.Comparator;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "ComparatorPredicate_comparatorPredicateTest", "description": "Unit tests for the ComparatorPredicate class, focusing on the comparatorPredicate method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testComparatorPredicate_WithNonNullComparatorAndCriterion", "primary_tested": ["ComparatorPredicate.comparatorPredicate(Integer,Comparator<Integer>,ComparatorPredicate.Criterion)"], "external_dependencies": {"modules": ["Comparator", "Predicate", "ComparatorPredicate", "ComparatorPredicate.Criterion"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the comparatorPredicate method with a non-null comparator and criterion, ensuring the predicate correctly evaluates to true when the input matches the criterion."}, {"name": "testComparatorPredicate_WithNullComparator", "primary_tested": ["ComparatorPredicate.comparatorPredicate(Integer,Comparator<Integer>,ComparatorPredicate.Criterion)"], "external_dependencies": {"modules": ["ComparatorPredicate", "ComparatorPredicate.Criterion"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the comparatorPredicate method with a null comparator, expecting a NullPointerException to be thrown."}, {"name": "testComparatorPredicate_WithNullCriterion", "primary_tested": ["ComparatorPredicate.comparatorPredicate(Integer,Comparator<Integer>,ComparatorPredicate.Criterion)"], "external_dependencies": {"modules": ["Comparator", "ComparatorPredicate", "ComparatorPredicate.Criterion"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the comparatorPredicate method with a null criterion, expecting a NullPointerException to be thrown."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/CompositeMap_sizeTest.java", "testclass_name": "CompositeMap_sizeTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeMap_sizeTest", "description": "Unit tests for the size functionality of the CompositeMap class.", "class_members": {"variables": [{"name": "compositeMap", "type": "CompositeMap<String, String>"}, {"name": "map1", "type": "Map<String, String>"}, {"name": "map2", "type": "Map<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testSizeWithEmptyMaps", "primary_tested": ["CompositeMap.size()"], "external_dependencies": {"modules": ["CompositeMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "description": "Tests the size of an empty CompositeMap."}, {"name": "testSizeWithNonEmptyMaps", "primary_tested": ["CompositeMap.size()"], "external_dependencies": {"modules": ["CompositeMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size of a CompositeMap with non-empty maps."}, {"name": "testSizeAfterAddingMap", "primary_tested": ["CompositeMap.size()"], "associated_methods": ["CompositeMap.addComposited(Map<String, String>)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size of a CompositeMap after adding another map."}, {"name": "testSizeAfterRemovingMap", "primary_tested": ["CompositeMap.size()"], "associated_methods": ["CompositeMap.removeComposited(Map<String, String>)"], "external_dependencies": {"modules": ["CompositeMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size of a CompositeMap after removing a map."}, {"name": "testSizeAfterClearingMap", "primary_tested": ["CompositeMap.size()"], "associated_methods": ["Map.clear()"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}, {"name": "map1", "type": "variable"}, {"name": "map2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size of a CompositeMap after clearing the underlying maps."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_containsKeyTest.java", "testclass_name": "MultiKeyMap_containsKeyTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "MultiKeyMap_containsKeyTest", "description": "Unit tests for the containsKey method of the MultiKeyMap class.", "class_members": {"variables": [{"name": "map", "type": "MultiKeyMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testContainsKeyWithExistingKeys", "primary_tested": ["MultiKeyMap.containsKey(String,String)"], "external_dependencies": {"modules": ["MultiKeyMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsKey method with existing keys in the MultiKeyMap."}, {"name": "testContainsKeyWithNonExistingKeys", "primary_tested": ["MultiKeyMap.containsKey(String,String)"], "external_dependencies": {"modules": ["MultiKeyMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsKey method with non-existing keys in the MultiKeyMap."}, {"name": "testContainsKeyWithNullKeys", "primary_tested": ["MultiKeyMap.containsKey(String,String)"], "external_dependencies": {"modules": ["MultiKeyMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsKey method with null keys in the MultiKeyMap."}, {"name": "testContainsKeyWithEmptyMap", "primary_tested": ["MultiKeyMap.containsKey(String,String)"], "external_dependencies": {"modules": ["MultiKeyMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsKey method with an empty MultiKeyMap."}, {"name": "testContainsKeyWithMultipleEntries", "primary_tested": ["MultiKeyMap.containsKey(String,String)"], "external_dependencies": {"modules": ["MultiKeyMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsKey method with multiple entries in the MultiKeyMap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_keySetTest.java", "testclass_name": "PassiveExpiringMap_keySetTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Map;", "import java.util.Set;", "import java.util.concurrent.TimeUnit;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "PassiveExpiringMap_keySetTest", "description": "Unit tests for the keySet functionality of PassiveExpiringMap, including scenarios with expired and non-expired entries.", "class_members": {"variables": [{"name": "expiringMap", "type": "PassiveExpiringMap<Integer, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testKeySetWithExpiredEntries", "primary_tested": ["PassiveExpiringMap.keySet()"], "external_dependencies": {"modules": ["PassiveExpiringMap", "Set"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the keySet functionality when all entries have expired."}, {"name": "testKeySetWithoutExpiredEntries", "primary_tested": ["PassiveExpiringMap.keySet()"], "external_dependencies": {"modules": ["PassiveExpiringMap", "Set"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the keySet functionality when no entries have expired."}, {"name": "testKeySetAfterPartialExpiration", "primary_tested": ["PassiveExpiringMap.keySet()"], "external_dependencies": {"modules": ["PassiveExpiringMap", "Set"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the keySet functionality after some entries have expired and new entries are added."}, {"name": "testKeySetWithNeverExpiringEntries", "primary_tested": ["PassiveExpiringMap.keySet()"], "external_dependencies": {"modules": ["PassiveExpiringMap", "Set"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the keySet functionality with entries that never expire."}, {"name": "testKeySetWithZeroTimeToLive", "primary_tested": ["PassiveExpiringMap.keySet()"], "external_dependencies": {"modules": ["PassiveExpiringMap", "Set"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the keySet functionality with entries that have zero time to live."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_putTest.java", "testclass_name": "StaticBucketMap_putTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "StaticBucketMap_putTest", "description": "Unit tests for the put method of StaticBucketMap.", "class_members": {"variables": [{"name": "map", "type": "StaticBucketMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPutNewKey", "primary_tested": ["StaticBucketMap.put(String,String)"], "associated_methods": ["StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the put method with a new key."}, {"name": "testPutExistingKey", "primary_tested": ["StaticBucketMap.put(String,String)"], "associated_methods": ["StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the put method with an existing key."}, {"name": "testPutNullKey", "primary_tested": ["StaticBucketMap.put(String,String)"], "associated_methods": ["StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the put method with a null key."}, {"name": "testPutNullValue", "primary_tested": ["StaticBucketMap.put(String,String)"], "associated_methods": ["StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the put method with a null value."}, {"name": "testPutMultipleKeys", "primary_tested": ["StaticBucketMap.put(String,String)"], "associated_methods": ["StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the put method with multiple keys."}, {"name": "testPutSameHashKey", "primary_tested": ["StaticBucketMap.put(String,String)"], "associated_methods": ["StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the put method with keys that hash to the same bucket."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/ComparatorChain_addComparatorTest.java", "testclass_name": "ComparatorChain_addComparatorTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import org.junit.jupiter.api.Test;", "import java.util.Comparator;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "ComparatorChain_addComparatorTest", "description": "Unit tests for the addComparator method in the ComparatorChain class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testAddComparator_ForwardOrder", "primary_tested": ["ComparatorChain.addComparator(Comparator,boolean)"], "external_dependencies": {"modules": ["ComparatorChain", "Comparator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests adding a comparator in forward order to the ComparatorChain."}, {"name": "testAddComparator_ReverseOrder", "primary_tested": ["ComparatorChain.addComparator(Comparator,boolean)"], "external_dependencies": {"modules": ["ComparatorChain", "Comparator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests adding a comparator in reverse order to the ComparatorChain."}, {"name": "testAddComparator_LockedChain", "primary_tested": ["ComparatorChain.addComparator(Comparator,boolean)"], "associated_methods": ["ComparatorChain.compare(String,String)"], "external_dependencies": {"modules": ["ComparatorChain", "Comparator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests adding a comparator to a locked ComparatorChain, which should throw an UnsupportedOperationException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_putTest.java", "testclass_name": "MultiKeyMap_putTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.apache.commons.collections4.keyvalue.MultiKey;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "MultiKeyMap_putTest", "description": "Unit tests for the put functionality of MultiKeyMap with five keys.", "class_members": {"variables": [{"name": "multiKeyMap", "type": "MultiKeyMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPutWithFiveKeys", "primary_tested": ["MultiKeyMap.put(String,String,String,String,String,String)"], "associated_methods": ["MultiKeyMap.size()", "MultiKeyMap.get(String,String,String,String,String)", "MultiKeyMap.containsKey(String,String,String,String,String)", "MultiKeyMap.containsKey(MultiKey<String>)"], "external_dependencies": {"modules": ["MultiKeyMap", "MultiKey", "org.junit.jupiter.api.Assertions"], "class_members": [{"name": "multiKeyMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the put functionality of MultiKeyMap with five keys, including adding a new entry, updating an existing entry, and adding a null value."}, {"name": "testPutWithFiveKeys_DifferentKeys", "primary_tested": ["MultiKeyMap.put(String,String,String,String,String,String)"], "associated_methods": ["MultiKeyMap.size()", "MultiKeyMap.get(String,String,String,String,String)", "MultiKeyMap.containsKey(String,String,String,String,String)", "MultiKeyMap.containsKey(MultiKey<String>)"], "external_dependencies": {"modules": ["MultiKeyMap", "MultiKey", "org.junit.jupiter.api.Assertions"], "class_members": [{"name": "multiKeyMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the put functionality of MultiKeyMap with five keys, specifically adding two different entries."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/CompositeMap_clearTest.java", "testclass_name": "CompositeMap_clearTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Collection;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeMap_clearTest", "description": "Unit tests for the clear functionality of the CompositeMap class.", "class_members": {"variables": [{"name": "compositeMap", "type": "CompositeMap<String, String>"}, {"name": "mapOne", "type": "Map<String, String>"}, {"name": "mapTwo", "type": "Map<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testClear", "primary_tested": ["CompositeMap.clear()"], "associated_methods": ["Map.isEmpty()"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}, {"name": "mapOne", "type": "variable"}, {"name": "mapTwo", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clear functionality of the CompositeMap, ensuring all internal maps are cleared."}, {"name": "testClearWithEmptyCompositeMap", "primary_tested": ["CompositeMap.clear()"], "associated_methods": ["Map.isEmpty()"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "description": "Tests the clear functionality of an empty CompositeMap."}, {"name": "testClearWithSingleMap", "primary_tested": ["CompositeMap.clear()"], "associated_methods": ["Map.isEmpty()"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}, {"name": "mapOne", "type": "variable"}]}, "category": "unit", "description": "Tests the clear functionality of a CompositeMap with a single internal map."}, {"name": "testClearWithMultipleMaps", "primary_tested": ["CompositeMap.clear()"], "associated_methods": ["Map.isEmpty()"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}, {"name": "mapOne", "type": "variable"}, {"name": "mapTwo", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clear functionality of a CompositeMap with multiple internal maps."}, {"name": "testClearWithNullMap", "primary_tested": ["CompositeMap.clear()"], "associated_methods": ["Map.isEmpty()"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}, {"name": "mapOne", "type": "variable"}, {"name": "mapTwo", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clear functionality of a CompositeMap when a null map is added."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_containsValueTest.java", "testclass_name": "PassiveExpiringMap_containsValueTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;", "import java.util.concurrent.TimeUnit;"], "name": "PassiveExpiringMap_containsValueTest", "description": "Unit tests for the containsValue method of PassiveExpiringMap.", "class_members": {"variables": [{"name": "expiringMap", "type": "PassiveExpiringMap<Integer, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testContainsValue_ValuePresent", "primary_tested": ["PassiveExpiringMap.containsValue(String)"], "external_dependencies": {"modules": ["PassiveExpiringMap"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that containsValue returns true when the value is present in the map."}, {"name": "testContainsValue_ValueNotPresent", "primary_tested": ["PassiveExpiringMap.containsValue(String)"], "external_dependencies": {"modules": ["PassiveExpiringMap"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that containsValue returns false when the value is not present in the map."}, {"name": "testContainsValue_ValueExpired", "primary_tested": ["PassiveExpiringMap.containsValue(String)"], "external_dependencies": {"modules": ["PassiveExpiringMap"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that containsValue returns false when the value has expired in the map."}, {"name": "testContainsValue_EmptyMap", "primary_tested": ["PassiveExpiringMap.containsValue(String)"], "external_dependencies": {"modules": ["PassiveExpiringMap"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that containsValue returns false when the map is empty."}, {"name": "testContainsValue_NullValue", "primary_tested": ["PassiveExpiringMap.containsValue(String)"], "external_dependencies": {"modules": ["PassiveExpiringMap"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that containsValue returns true when the value is null."}, {"name": "testContainsValue_MultipleValues", "primary_tested": ["PassiveExpiringMap.containsValue(String)"], "external_dependencies": {"modules": ["PassiveExpiringMap"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that containsValue returns true when multiple values are present in the map."}, {"name": "testContainsValue_MultipleValuesWithExpired", "primary_tested": ["PassiveExpiringMap.containsValue(String)"], "external_dependencies": {"modules": ["PassiveExpiringMap"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that containsValue returns false when multiple values are present but some have expired."}, {"name": "testContainsValue_NeverExpire", "primary_tested": ["PassiveExpiringMap.containsValue(String)"], "external_dependencies": {"modules": ["PassiveExpiringMap"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests that containsValue returns true when the map is configured to never expire entries."}, {"name": "testContainsValue_AlwaysExpire", "primary_tested": ["PassiveExpiringMap.containsValue(String)"], "external_dependencies": {"modules": ["PassiveExpiringMap"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests that containsValue returns false when the map is configured to always expire entries."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/functors/EqualPredicate_testTest.java", "testclass_name": "EqualPredicate_testTest", "dependencies": ["package org.apache.commons.collections4.functors;", "import org.apache.commons.collections4.Equator;", "import org.apache.commons.collections4.Predicate;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "EqualPredicate_testTest", "description": "Unit tests for the EqualPredicate class in Apache Commons Collections, focusing on its behavior with and without an Equator.", "class_members": {"variables": [{"name": "equalPredicate", "type": "EqualPredicate<String>"}, {"name": "equalPredicateWithEquator", "type": "EqualPredicate<String>"}, {"name": "mockEquator", "type": "Equator<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testTestWithEquator", "primary_tested": ["EqualPredicate.test(String)"], "external_dependencies": {"modules": ["EqualPredicate", "Equator"], "class_members": [{"name": "equalPredicateWithEquator", "type": "variable"}, {"name": "mockEquator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the EqualPredicate's test method with an Equator, ensuring case-insensitive comparison."}, {"name": "testTestWithoutEquator", "primary_tested": ["EqualPredicate.test(String)"], "external_dependencies": {"modules": ["EqualPredicate"], "class_members": [{"name": "equalPredicate", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the EqualPredicate's test method without an Equator, ensuring case-sensitive comparison."}, {"name": "testNullArgumentEqualsNullPredicate", "primary_tested": ["EqualPredicate.equalPredicate(Object)"], "associated_methods": ["NullPredicate.nullPredicate()"], "external_dependencies": {"modules": ["EqualPredicate", "NullPredicate"]}, "category": "unit", "description": "Tests the creation of an EqualPredicate with a null argument, ensuring it returns a NullPredicate."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_putTest.java", "testclass_name": "ListOrderedMap_putTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;"], "name": "ListOrderedMap_putTest", "description": "Unit tests for the putAtIndex functionality of the ListOrderedMap class.", "class_members": {"variables": [{"name": "listOrderedMap", "type": "ListOrderedMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPutAtIndexValidIndex", "primary_tested": ["ListOrderedMap.put(int,String,String)"], "associated_methods": ["ListOrderedMap.put(String,String)", "ListOrderedMap.get(String)"], "external_dependencies": {"modules": ["ListOrderedMap"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the putAtIndex functionality with a valid index."}, {"name": "testPutAtIndexInvalidIndex", "primary_tested": ["ListOrderedMap.put(int,String,String)"], "associated_methods": ["ListOrderedMap.put(String,String)"], "external_dependencies": {"modules": ["ListOrderedMap"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the putAtIndex functionality with an invalid index, expecting an IndexOutOfBoundsException."}, {"name": "testPutAtIndexNewKey", "primary_tested": ["ListOrderedMap.put(int,String,String)"], "associated_methods": ["ListOrderedMap.put(String,String)", "ListOrderedMap.get(String)"], "external_dependencies": {"modules": ["ListOrderedMap"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the putAtIndex functionality with a new key."}, {"name": "testPutAtIndexExistingKey", "primary_tested": ["ListOrderedMap.put(int,String,String)"], "associated_methods": ["ListOrderedMap.put(String,String)", "ListOrderedMap.get(String)"], "external_dependencies": {"modules": ["ListOrderedMap"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the putAtIndex functionality with an existing key."}, {"name": "testPutAtIndexExistingKeyBeforeIndex", "primary_tested": ["ListOrderedMap.put(int,String,String)"], "associated_methods": ["ListOrderedMap.put(String,String)", "ListOrderedMap.get(String)"], "external_dependencies": {"modules": ["ListOrderedMap"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the putAtIndex functionality with an existing key before the specified index."}, {"name": "testPutAtIndexExistingKeyAtSameIndex", "primary_tested": ["ListOrderedMap.put(int,String,String)"], "associated_methods": ["ListOrderedMap.put(String,String)", "ListOrderedMap.get(String)"], "external_dependencies": {"modules": ["ListOrderedMap"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the putAtIndex functionality with an existing key at the same index."}, {"name": "testPutAtIndexExistingKeyAfterIndex", "primary_tested": ["ListOrderedMap.put(int,String,String)"], "associated_methods": ["ListOrderedMap.put(String,String)", "ListOrderedMap.get(String)"], "external_dependencies": {"modules": ["ListOrderedMap"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the putAtIndex functionality with an existing key after the specified index."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_sizeTest.java", "testclass_name": "StaticBucketMap_sizeTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "StaticBucketMap_sizeTest", "description": "Unit tests for the size method of the StaticBucketMap class.", "class_members": {"variables": [{"name": "map", "type": "StaticBucketMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testSizeEmptyMap", "primary_tested": ["StaticBucketMap.size()"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method when the map is empty."}, {"name": "testSizeAfterPut", "primary_tested": ["StaticBucketMap.size()"], "associated_methods": ["StaticBucketMap.put(String,String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method after adding a single entry to the map."}, {"name": "testSizeAfterMultiplePuts", "primary_tested": ["StaticBucketMap.size()"], "associated_methods": ["StaticBucketMap.put(String,String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method after adding multiple entries to the map."}, {"name": "testSizeAfterRemove", "primary_tested": ["StaticBucketMap.size()"], "associated_methods": ["StaticBucketMap.put(String,String)", "StaticBucketMap.remove(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method after adding and then removing an entry from the map."}, {"name": "testSizeAfterClear", "primary_tested": ["StaticBucketMap.size()"], "associated_methods": ["StaticBucketMap.put(String,String)", "StaticBucketMap.clear()"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method after adding entries and then clearing the map."}, {"name": "testSizeAfterPutAndRemoveDifferentBuckets", "primary_tested": ["StaticBucketMap.size()"], "associated_methods": ["StaticBucketMap.put(String,String)", "StaticBucketMap.remove(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method after adding entries and removing one from a different bucket."}, {"name": "testSizeAfterPutAndRemoveSameBucket", "primary_tested": ["StaticBucketMap.size()"], "associated_methods": ["StaticBucketMap.put(String,String)", "StaticBucketMap.remove(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method after adding entries and removing both from the same bucket."}, {"name": "testSizeAfterPutAndRemoveNonExistentKey", "primary_tested": ["StaticBucketMap.size()"], "associated_methods": ["StaticBucketMap.put(String,String)", "StaticBucketMap.remove(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method after adding an entry and attempting to remove a non-existent key."}, {"name": "testSizeAfterPutNullKey", "primary_tested": ["StaticBucketMap.size()"], "associated_methods": ["StaticBucketMap.put(String,String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method after adding an entry with a null key."}, {"name": "testSizeAfterRemoveNullKey", "primary_tested": ["StaticBucketMap.size()"], "associated_methods": ["StaticBucketMap.put(String,String)", "StaticBucketMap.remove(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method after adding an entry with a null key and then removing it."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_removeTest.java", "testclass_name": "ListOrderedMap_removeTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ListOrderedMap_removeTest", "description": "Unit tests for the remove functionality of the ListOrderedMap class.", "class_members": {"variables": [{"name": "listOrderedMap", "type": "ListOrderedMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveExistingKey", "primary_tested": ["ListOrderedMap.remove(String)"], "external_dependencies": {"modules": ["ListOrderedMap", "HashMap"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of an existing key from the ListOrderedMap."}, {"name": "testRemoveNonExistingKey", "primary_tested": ["ListOrderedMap.remove(String)"], "external_dependencies": {"modules": ["ListOrderedMap", "HashMap"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of a non-existing key from the ListOrderedMap."}, {"name": "testRemoveFromEmptyMap", "primary_tested": ["ListOrderedMap.remove(String)"], "external_dependencies": {"modules": ["ListOrderedMap", "HashMap"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of a key from an empty ListOrderedMap."}, {"name": "testRemoveNullKey", "primary_tested": ["ListOrderedMap.remove(String)"], "external_dependencies": {"modules": ["ListOrderedMap", "HashMap"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of a null key from the ListOrderedMap."}, {"name": "testRemoveAfterClear", "primary_tested": ["ListOrderedMap.remove(String)"], "associated_methods": ["ListOrderedMap.clear()"], "external_dependencies": {"modules": ["ListOrderedMap", "HashMap"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of a key from the ListOrderedMap after clearing it."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_removeAllTest.java", "testclass_name": "MultiKeyMap_removeAllTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.*;", "import org.apache.commons.collections4.keyvalue.MultiKey;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "MultiKeyMap_removeAllTest", "description": "Unit tests for the removeAll functionality of the MultiKeyMap class.", "class_members": {"variables": [{"name": "multiKeyMap", "type": "MultiKeyMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveAllWithExistingKey", "primary_tested": ["MultiKeyMap.removeAll(String)"], "associated_methods": ["MultiKeyMap.put(String,String,String)", "MultiKeyMap.size()", "MultiKeyMap.containsKey(String,String)"], "external_dependencies": {"modules": ["MultiKeyMap", "MultiKey"], "class_members": [{"name": "multiKeyMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeAll functionality with an existing key in the MultiKeyMap."}, {"name": "testRemoveAllWithNonExistingKey", "primary_tested": ["MultiKeyMap.removeAll(String)"], "associated_methods": ["MultiKeyMap.put(String,String,String)", "MultiKeyMap.size()", "MultiKeyMap.containsKey(String,String)"], "external_dependencies": {"modules": ["MultiKeyMap", "MultiKey"], "class_members": [{"name": "multiKeyMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeAll functionality with a non-existing key in the MultiKeyMap."}, {"name": "testRemoveAllWithNullKey", "primary_tested": ["MultiKeyMap.removeAll(String)"], "associated_methods": ["MultiKeyMap.put(String,String,String)", "MultiKeyMap.size()", "MultiKeyMap.containsKey(String,String)"], "external_dependencies": {"modules": ["MultiKeyMap", "MultiKey"], "class_members": [{"name": "multiKeyMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeAll functionality with a null key in the MultiKeyMap."}, {"name": "testRemoveAllWithEmptyMap", "primary_tested": ["MultiKeyMap.removeAll(String)"], "associated_methods": ["MultiKeyMap.size()"], "external_dependencies": {"modules": ["MultiKeyMap", "MultiKey"], "class_members": [{"name": "multiKeyMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeAll functionality with an empty MultiKeyMap."}, {"name": "testRemoveAllWithMultipleRemovals", "primary_tested": ["MultiKeyMap.removeAll(String)"], "associated_methods": ["MultiKeyMap.put(String,String,String)", "MultiKeyMap.size()", "MultiKeyMap.containsKey(String,String)"], "external_dependencies": {"modules": ["MultiKeyMap", "MultiKey"], "class_members": [{"name": "multiKeyMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeAll functionality with multiple removals in the MultiKeyMap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/TransformingComparator_compareTest.java", "testclass_name": "TransformingComparator_compareTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import java.util.Comparator;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.TransformerUtils;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "TransformingComparator_compareTest", "description": "Unit tests for the compare method of the TransformingComparator class.", "class_members": {"variables": [{"name": "transformer", "type": "Transformer<String, Integer>"}, {"name": "decoratedComparator", "type": "Comparator<Integer>"}, {"name": "transformingComparator", "type": "TransformingComparator<String, Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testCompareLessThan", "primary_tested": ["TransformingComparator.compare(String,String)"], "external_dependencies": {"modules": ["TransformingComparator", "Comparator"], "class_members": [{"name": "transformingComparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the compare method of TransformingComparator for less than comparison."}, {"name": "testCompareGreaterThan", "primary_tested": ["TransformingComparator.compare(String,String)"], "external_dependencies": {"modules": ["TransformingComparator", "Comparator"], "class_members": [{"name": "transformingComparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the compare method of TransformingComparator for greater than comparison."}, {"name": "testCompareEqual", "primary_tested": ["TransformingComparator.compare(String,String)"], "external_dependencies": {"modules": ["TransformingComparator", "Comparator"], "class_members": [{"name": "transformingComparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the compare method of TransformingComparator for equal comparison."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/ReverseComparator_equalsTest.java", "testclass_name": "ReverseComparator_equalsTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import org.junit.jupiter.api.Test;", "import java.util.Comparator;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "ReverseComparator_equalsTest", "description": "Unit tests for the equals method of the ReverseComparator class.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testEquals_SameInstance", "primary_tested": ["ReverseComparator.equals(Object)"], "external_dependencies": {"modules": ["ReverseComparator", "Comparator"]}, "category": "unit", "description": "Tests the equals method with the same instance."}, {"name": "testEquals_NullObject", "primary_tested": ["ReverseComparator.equals(Object)"], "external_dependencies": {"modules": ["ReverseComparator", "Comparator"]}, "category": "unit", "description": "Tests the equals method with a null object."}, {"name": "testEquals_DifferentClass", "primary_tested": ["ReverseComparator.equals(Object)"], "external_dependencies": {"modules": ["ReverseComparator", "Comparator"]}, "category": "unit", "description": "Tests the equals method with an object of a different class."}, {"name": "testEquals_SameComparator", "primary_tested": ["ReverseComparator.equals(Object)"], "external_dependencies": {"modules": ["ReverseComparator", "Comparator"]}, "category": "unit", "description": "Tests the equals method with two instances of the same comparator."}, {"name": "testEquals_DifferentComparator", "primary_tested": ["ReverseComparator.equals(Object)"], "external_dependencies": {"modules": ["ReverseComparator", "Comparator"]}, "category": "unit", "description": "Tests the equals method with two instances of different comparators."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/ComparatorChain_equalsTest.java", "testclass_name": "ComparatorChain_equalsTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import org.junit.jupiter.api.Test;", "import java.util.ArrayList;", "import java.util.BitSet;", "import java.util.Comparator;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "ComparatorChain_equalsTest", "description": "Unit tests for the equals method of the ComparatorChain class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testEquals_SameInstance", "primary_tested": ["ComparatorChain.equals(Object)"], "external_dependencies": {"modules": ["ComparatorChain"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the equals method with the same instance."}, {"name": "testEquals_NullObject", "primary_tested": ["ComparatorChain.equals(Object)"], "external_dependencies": {"modules": ["ComparatorChain"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the equals method with a null object."}, {"name": "testEquals_DifferentClass", "primary_tested": ["ComparatorChain.equals(Object)"], "external_dependencies": {"modules": ["ComparatorChain"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the equals method with an object of a different class."}, {"name": "testEquals_SameClassDifferentState", "primary_tested": ["ComparatorChain.equals(Object)"], "external_dependencies": {"modules": ["ComparatorChain", "Comparator", "ArrayList", "BitSet"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the equals method with instances of the same class but different states."}, {"name": "testEquals_SameClassSameState", "primary_tested": ["ComparatorChain.equals(Object)"], "external_dependencies": {"modules": ["ComparatorChain", "Comparator", "ArrayList", "BitSet"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the equals method with instances of the same class and same state."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/BoundedIterator_removeTest.java", "testclass_name": "BoundedIterator_removeTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.Arrays;", "import java.util.Iterator;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "BoundedIterator_removeTest", "description": "Unit tests for the remove functionality of the BoundedIterator class.", "class_members": {"variables": [{"name": "testList", "type": "List<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveBeforeNext", "primary_tested": ["Iterator.remove()"], "external_dependencies": {"modules": ["BoundedIterator", "Iterator", "IllegalStateException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that calling remove before next throws an IllegalStateException."}, {"name": "testRemoveAfterNext", "primary_tested": ["Iterator.remove()"], "external_dependencies": {"modules": ["BoundedIterator", "Iterator", "UnsupportedOperationException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that calling remove after next throws an UnsupportedOperationException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/BooleanComparator_equalsTest.java", "testclass_name": "BooleanComparator_equalsTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.Test;"], "name": "BooleanComparator_equalsTest", "description": "Unit tests for the equals method of BooleanComparator.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testEqualsWithSameInstance", "primary_tested": ["BooleanComparator.equals(Object)"], "external_dependencies": {"modules": ["BooleanComparator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the equals method with the same instance."}, {"name": "testEqualsWithDifferentInstanceSameTrueFirst", "primary_tested": ["BooleanComparator.equals(Object)"], "external_dependencies": {"modules": ["BooleanComparator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the equals method with different instances but same true-first order."}, {"name": "testEqualsWithDifferentInstanceDifferentTrueFirst", "primary_tested": ["BooleanComparator.equals(Object)"], "external_dependencies": {"modules": ["BooleanComparator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the equals method with different instances and different true-first order."}, {"name": "testEqualsWithNonBooleanComparatorInstance", "primary_tested": ["BooleanComparator.equals(Object)"], "external_dependencies": {"modules": ["BooleanComparator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the equals method with a non-BooleanComparator instance."}, {"name": "testEqualsWithNull", "primary_tested": ["BooleanComparator.equals(Object)"], "external_dependencies": {"modules": ["BooleanComparator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the equals method with a null instance."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/NodeListIterator_nextTest.java", "testclass_name": "NodeListIterator_nextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import org.junit.jupiter.api.Test;", "import org.w3c.dom.Node;", "import org.w3c.dom.NodeList;", "import java.util.NoSuchElementException;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;"], "name": "NodeListIterator_nextTest", "description": "Unit tests for the next() method of NodeListIterator.", "class_members": {"variables": [{"name": "mockNodeList", "type": "NodeList"}, {"name": "mockNode", "type": "Node"}]}, "fixtures": [], "test_cases": [{"name": "testNextWithElements", "primary_tested": ["NodeListIterator.next()"], "associated_methods": ["NodeList.getLength()", "NodeList.item(int)"], "external_dependencies": {"modules": ["NodeList", "Node", "NodeListIterator", "NoSuchElementException"], "class_members": [{"name": "mockNodeList", "type": "variable"}, {"name": "mockNode", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the next() method of NodeListIterator when there are elements in the NodeList."}, {"name": "testNextWithoutElements", "primary_tested": ["NodeListIterator.next()"], "associated_methods": ["NodeList.getLength()"], "external_dependencies": {"modules": ["NodeList", "NodeListIterator", "NoSuchElementException"], "class_members": [{"name": "mockNodeList", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the next() method of NodeListIterator when there are no elements in the NodeList."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/PushbackIterator_pushbackIteratorTest.java", "testclass_name": "PushbackIterator_pushbackIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Iterator;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "PushbackIterator_pushbackIteratorTest", "description": "Unit tests for the PushbackIterator class, specifically focusing on the pushbackIterator method.", "class_members": {"variables": [{"name": "testList", "type": "List<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPushbackIteratorWithPushbackIterator", "primary_tested": ["PushbackIterator.pushbackIterator(PushbackIterator)"], "external_dependencies": {"modules": ["PushbackIterator", "List", "Iterator"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the pushbackIterator method when provided with a PushbackIterator instance."}, {"name": "testPushbackIteratorWithRegularIterator", "primary_tested": ["PushbackIterator.pushbackIterator(Iterator)"], "external_dependencies": {"modules": ["PushbackIterator", "List", "Iterator"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the pushbackIterator method when provided with a regular Iterator instance."}, {"name": "testPushbackIteratorWithNullIterator", "primary_tested": ["PushbackIterator.pushbackIterator(Iterator)"], "external_dependencies": {"modules": ["PushbackIterator"]}, "category": "unit", "fixtures_used": [], "description": "Tests the pushbackIterator method when provided with a null Iterator, expecting a NullPointerException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/CompositeMap_isEmptyTest.java", "testclass_name": "CompositeMap_isEmptyTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeMap_isEmptyTest", "description": "Unit tests for the isEmpty method of the CompositeMap class.", "class_members": {"variables": [{"name": "compositeMap", "type": "CompositeMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testIsEmptyWhenEmpty", "primary_tested": ["CompositeMap.isEmpty()"], "external_dependencies": {"modules": ["CompositeMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isEmpty method when the CompositeMap is empty."}, {"name": "testIsEmptyWhenNotEmpty", "primary_tested": ["CompositeMap.isEmpty()"], "associated_methods": ["CompositeMap.addComposited(Map<String, String>)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isEmpty method when the CompositeMap is not empty."}, {"name": "testIsEmptyAfterClear", "primary_tested": ["CompositeMap.isEmpty()"], "associated_methods": ["CompositeMap.addComposited(Map<String, String>)", "CompositeMap.clear()"], "external_dependencies": {"modules": ["CompositeMap", "HashMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isEmpty method after clearing the CompositeMap."}, {"name": "testIsEmptyAfterAddingAndRemovingMap", "primary_tested": ["CompositeMap.isEmpty()"], "associated_methods": ["CompositeMap.addComposited(Map<String, String>)", "CompositeMap.removeComposited(Map<String, String>)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isEmpty method after adding and removing a map from the CompositeMap."}, {"name": "testIsEmptyWithMultipleMaps", "primary_tested": ["CompositeMap.isEmpty()"], "associated_methods": ["CompositeMap.addComposited(Map<String, String>)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isEmpty method with multiple maps added to the CompositeMap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_addTest.java", "testclass_name": "IndexedCollection_addTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Collection;", "import java.util.HashMap;", "import java.util.Arrays;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.map.MultiValueMap;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "IndexedCollection_addTest", "description": "Unit tests for the IndexedCollection class, focusing on the add, addAll, remove, removeAll, removeIf, retainAll, clear, and reindex methods.", "class_members": {"variables": [{"name": "indexedCollection", "type": "IndexedCollection<Integer, String>"}, {"name": "originalCollection", "type": "Collection<String>"}, {"name": "keyTransformer", "type": "Transformer<String, Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAddSuccess", "primary_tested": ["IndexedCollection.add(String)"], "associated_methods": ["IndexedCollection.get(Integer)"], "external_dependencies": {"modules": ["IndexedCollection", "Transformer"], "class_members": [{"name": "indexedCollection", "type": "variable"}, {"name": "keyTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful addition of an element to the IndexedCollection."}, {"name": "testAddFailureDueToUniqueConstraint", "primary_tested": ["IndexedCollection.add(String)"], "associated_methods": ["IndexedCollection.get(Integer)"], "external_dependencies": {"modules": ["IndexedCollection", "Transformer"], "class_members": [{"name": "indexedCollection", "type": "variable"}, {"name": "keyTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the failure of adding an element due to unique constraint violation."}, {"name": "testAddFailureDueToNonUniqueIndex", "primary_tested": ["IndexedCollection.add(String)"], "associated_methods": ["IndexedCollection.values(Integer)"], "external_dependencies": {"modules": ["IndexedCollection", "Transformer", "MultiValueMap"], "class_members": [{"name": "indexedCollection", "type": "variable"}, {"name": "keyTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the failure of adding an element due to non-unique index."}, {"name": "testAddAllSuccess", "primary_tested": ["IndexedCollection.addAll(Collection<String>)"], "associated_methods": ["IndexedCollection.get(Integer)"], "external_dependencies": {"modules": ["IndexedCollection", "Transformer"], "class_members": [{"name": "indexedCollection", "type": "variable"}, {"name": "keyTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful addition of multiple elements to the IndexedCollection."}, {"name": "testAddAllFailureDueToUniqueConstraint", "primary_tested": ["IndexedCollection.addAll(Collection<String>)"], "external_dependencies": {"modules": ["IndexedCollection", "Transformer"], "class_members": [{"name": "indexedCollection", "type": "variable"}, {"name": "keyTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the failure of adding multiple elements due to unique constraint violation."}, {"name": "testRemoveSuccess", "primary_tested": ["IndexedCollection.remove(String)"], "associated_methods": ["IndexedCollection.get(Integer)"], "external_dependencies": {"modules": ["IndexedCollection", "Transformer"], "class_members": [{"name": "indexedCollection", "type": "variable"}, {"name": "keyTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful removal of an element from the IndexedCollection."}, {"name": "testRemoveAllSuccess", "primary_tested": ["IndexedCollection.removeAll(Collection<String>)"], "associated_methods": ["IndexedCollection.get(Integer)"], "external_dependencies": {"modules": ["IndexedCollection", "Transformer"], "class_members": [{"name": "indexedCollection", "type": "variable"}, {"name": "keyTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful removal of multiple elements from the IndexedCollection."}, {"name": "testRemoveIfSuccess", "primary_tested": ["IndexedCollection.removeIf(Predicate<String>)"], "associated_methods": ["IndexedCollection.get(Integer)"], "external_dependencies": {"modules": ["IndexedCollection", "Transformer"], "class_members": [{"name": "indexedCollection", "type": "variable"}, {"name": "keyTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful conditional removal of elements from the IndexedCollection."}, {"name": "testRetainAllSuccess", "primary_tested": ["IndexedCollection.retainAll(Collection<String>)"], "associated_methods": ["IndexedCollection.get(Integer)"], "external_dependencies": {"modules": ["IndexedCollection", "Transformer"], "class_members": [{"name": "indexedCollection", "type": "variable"}, {"name": "keyTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful retention of specified elements in the IndexedCollection."}, {"name": "testClear", "primary_tested": ["IndexedCollection.clear()"], "associated_methods": ["IndexedCollection.get(Integer)"], "external_dependencies": {"modules": ["IndexedCollection", "Transformer"], "class_members": [{"name": "indexedCollection", "type": "variable"}, {"name": "keyTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clearing of all elements from the IndexedCollection."}, {"name": "testReindex", "primary_tested": ["IndexedCollection.reindex()"], "associated_methods": ["IndexedCollection.get(Integer)"], "external_dependencies": {"modules": ["IndexedCollection", "Transformer"], "class_members": [{"name": "indexedCollection", "type": "variable"}, {"name": "keyTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the reindexing of elements in the IndexedCollection."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/LRUMap_getTest.java", "testclass_name": "LRUMap_getTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "LRUMap_getTest", "description": "Unit tests for the get method of LRUMap, focusing on different scenarios including updating to MRU, not updating to MRU, handling non-existing keys, null keys, and full maps.", "class_members": {"variables": [{"name": "lruMap", "type": "LRUMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetExistingKeyWithUpdateToMRU", "primary_tested": ["LRUMap.get(String,boolean)"], "external_dependencies": {"modules": ["LRUMap"], "class_members": [{"name": "lruMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method with an existing key and updates to MRU."}, {"name": "testGetExistingKeyWithoutUpdateToMRU", "primary_tested": ["LRUMap.get(String,boolean)"], "external_dependencies": {"modules": ["LRUMap"], "class_members": [{"name": "lruMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method with an existing key without updating to MRU."}, {"name": "testGetNonExistingKey", "primary_tested": ["LRUMap.get(String,boolean)"], "external_dependencies": {"modules": ["LRUMap"], "class_members": [{"name": "lruMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method with a non-existing key."}, {"name": "testGetNullKey", "primary_tested": ["LRUMap.get(String,boolean)"], "external_dependencies": {"modules": ["LRUMap"], "class_members": [{"name": "lruMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method with a null key."}, {"name": "testGetWithFullMap", "primary_tested": ["LRUMap.get(String,boolean)"], "external_dependencies": {"modules": ["LRUMap"], "class_members": [{"name": "lruMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method with a full map and updates to MRU."}, {"name": "testGetWithFullMapWithoutUpdateToMRU", "primary_tested": ["LRUMap.get(String,boolean)"], "external_dependencies": {"modules": ["LRUMap"], "class_members": [{"name": "lruMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method with a full map without updating to MRU."}, {"name": "testGetWithEmptyMap", "primary_tested": ["LRUMap.get(String,boolean)"], "external_dependencies": {"modules": ["LRUMap"], "class_members": [{"name": "lruMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method with an empty map."}, {"name": "testGetWithMultipleGets", "primary_tested": ["LRUMap.get(String,boolean)"], "external_dependencies": {"modules": ["LRUMap"], "class_members": [{"name": "lruMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method with multiple gets and updates to MRU."}, {"name": "testGetWithMultipleGetsWithoutUpdateToMRU", "primary_tested": ["LRUMap.get(String,boolean)"], "external_dependencies": {"modules": ["LRUMap"], "class_members": [{"name": "lruMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method with multiple gets without updating to MRU."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_setTest.java", "testclass_name": "SingletonListIterator_setTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SingletonListIterator_setTest", "description": "Unit tests for the set method of SingletonListIterator.", "class_members": {"variables": [{"name": "testValue", "type": "static final Object"}, {"name": "iterator", "type": "SingletonListIterator<Object>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testSetSuccess", "primary_tested": ["SingletonListIterator.set(Object)"], "associated_methods": ["SingletonListIterator.next()", "SingletonListIterator.previous()"], "external_dependencies": {"modules": ["SingletonListIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful setting of a new value after calling next."}, {"name": "testSetWithoutNextCall", "primary_tested": ["SingletonListIterator.set(Object)"], "external_dependencies": {"modules": ["SingletonListIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that setting a value without calling next throws an IllegalStateException."}, {"name": "testSetAfterRemove", "primary_tested": ["SingletonListIterator.set(Object)"], "associated_methods": ["SingletonListIterator.next()", "SingletonListIterator.remove()"], "external_dependencies": {"modules": ["SingletonListIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that setting a value after calling remove throws an IllegalStateException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_previousTest.java", "testclass_name": "SingletonListIterator_previousTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SingletonListIterator_previousTest", "description": "Unit tests for the previous method of SingletonListIterator.", "class_members": {"variables": [{"name": "iterator", "type": "SingletonListIterator<String>"}, {"name": "testValue", "type": "static final String"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPreviousSuccess", "primary_tested": ["SingletonListIterator.previous()"], "associated_methods": ["SingletonListIterator.next()"], "external_dependencies": {"modules": ["SingletonListIterator", "NoSuchElementException"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful retrieval of the previous element after moving forward."}, {"name": "testPreviousBeforeFirst", "primary_tested": ["SingletonListIterator.previous()"], "external_dependencies": {"modules": ["SingletonListIterator", "NoSuchElementException"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that calling previous before moving forward throws a NoSuchElementException."}, {"name": "testPreviousAfterRemove", "primary_tested": ["SingletonListIterator.previous()"], "associated_methods": ["SingletonListIterator.next()", "SingletonListIterator.remove()"], "external_dependencies": {"modules": ["SingletonListIterator", "NoSuchElementException"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that calling previous after removing the element throws a NoSuchElementException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparator_addAsEqualTest.java", "testclass_name": "FixedOrderComparator_addAsEqualTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "FixedOrderComparator_addAsEqualTest", "description": "Unit tests for the addAsEqual method of FixedOrderComparator.", "class_members": {"variables": [{"name": "comparator", "type": "FixedOrderComparator<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAddAsEqual_Success", "primary_tested": ["FixedOrderComparator.addAsEqual(String,String)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful addition of an object as equal to an existing object in the FixedOrderComparator."}, {"name": "testAddAsEqual_ExistingObjNotKnown", "primary_tested": ["FixedOrderComparator.addAsEqual(String,String)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that an IllegalArgumentException is thrown when trying to add an object as equal to a non-existing object in the FixedOrderComparator."}, {"name": "testAddAsEqual_AlreadyKnown", "primary_tested": ["FixedOrderComparator.addAsEqual(String,String)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that adding an object as equal to an existing object in the FixedOrderComparator returns false if the object is already known."}, {"name": "testAddAsEqual_LockedComparator", "primary_tested": ["FixedOrderComparator.addAsEqual(String,String)"], "associated_methods": ["FixedOrderComparator.compare(String,String)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that an UnsupportedOperationException is thrown when trying to add an object as equal to an existing object in a locked FixedOrderComparator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/SkippingIterator_nextTest.java", "testclass_name": "SkippingIterator_nextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Arrays;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SkippingIterator_nextTest", "description": "Unit tests for the next method of the SkippingIterator class.", "class_members": {"variables": [{"name": "testList", "type": "List<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNextWithOffset", "primary_tested": ["SkippingIterator.next()"], "associated_methods": ["SkippingIterator.hasNext()"], "external_dependencies": {"modules": ["SkippingIterator", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method of SkippingIterator with an offset, ensuring correct elements are returned and NoSuchElementException is thrown when expected."}, {"name": "testNextWithoutOffset", "primary_tested": ["SkippingIterator.next()"], "associated_methods": ["SkippingIterator.hasNext()"], "external_dependencies": {"modules": ["SkippingIterator", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method of SkippingIterator without an offset, ensuring all elements are returned and NoSuchElementException is thrown when expected."}, {"name": "testNextWithOffsetGreaterThanSize", "primary_tested": ["SkippingIterator.next()"], "external_dependencies": {"modules": ["SkippingIterator", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method of SkippingIterator with an offset greater than the size of the list, ensuring NoSuchElementException is thrown."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableListIterator_unmodifiableListIteratorTest.java", "testclass_name": "UnmodifiableListIterator_unmodifiableListIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import org.apache.commons.collections4.Unmodifiable;", "import org.junit.jupiter.api.Test;", "import java.util.ListIterator;", "import java.util.NoSuchElementException;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;"], "name": "UnmodifiableListIterator_unmodifiableListIteratorTest", "description": "Tests for the UnmodifiableListIterator class, focusing on the unmodifiableListIterator method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testUnmodifiableListIteratorWithUnmodifiableIterator", "primary_tested": ["UnmodifiableListIterator.unmodifiableListIterator(ListIterator)"], "associated_methods": ["ListIterator.hasNext()", "ListIterator.next()"], "external_dependencies": {"modules": ["ListIterator", "UnmodifiableListIterator"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the unmodifiableListIterator method with an unmodifiable iterator, verifying that it correctly wraps and delegates calls to the underlying iterator."}, {"name": "testUnmodifiableListIteratorWithModifiableIterator", "primary_tested": ["UnmodifiableListIterator.unmodifiableListIterator(ListIterator)"], "associated_methods": ["ListIterator.hasNext()", "ListIterator.next()"], "external_dependencies": {"modules": ["ListIterator", "UnmodifiableListIterator"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the unmodifiableListIterator method with a modifiable iterator, verifying that it correctly wraps and delegates calls to the underlying iterator."}, {"name": "testUnmodifiableListIteratorWithNullIterator", "primary_tested": ["UnmodifiableListIterator.unmodifiableListIterator(ListIterator)"], "external_dependencies": {"modules": ["UnmodifiableListIterator"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the unmodifiableListIterator method with a null iterator, expecting a NullPointerException to be thrown."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/FilterIterator_removeTest.java", "testclass_name": "FilterIterator_removeTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.apache.commons.collections4.functors.TruePredicate.truePredicate;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.apache.commons.collections4.Predicate;", "import org.apache.commons.collections4.functors.NotNullPredicate;", "import org.apache.commons.lang3.ArrayUtils;", "import org.junit.jupiter.api.AfterEach;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "FilterIterator_removeTest", "description": "Unit tests for the remove functionality of the FilterIterator class.", "class_members": {"variables": [{"name": "iterator", "type": "FilterIterator<String>"}, {"name": "list", "type": "List<String>"}], "methods": [{"name": "initIterator", "signature": "void initIterator()"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveWithoutNext", "primary_tested": ["FilterIterator.remove()"], "external_dependencies": {"modules": ["FilterIterator", "IllegalStateException"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that calling remove() without calling next() throws an IllegalStateException."}, {"name": "testRemoveAfterNext", "primary_tested": ["FilterIterator.remove()"], "associated_methods": ["FilterIterator.next()"], "external_dependencies": {"modules": ["FilterIterator", "List"], "class_members": [{"name": "iterator", "type": "variable"}, {"name": "list", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that calling remove() after calling next() removes the element from the list."}, {"name": "testRemoveAfterHasNext", "primary_tested": ["FilterIterator.remove()"], "associated_methods": ["FilterIterator.hasNext()"], "external_dependencies": {"modules": ["FilterIterator", "IllegalStateException"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that calling remove() after calling hasNext() throws an IllegalStateException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/CollatingIterator_setIteratorTest.java", "testclass_name": "CollatingIterator_setIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import org.junit.jupiter.api.Test;", "import java.util.Iterator;", "import java.util.NoSuchElementException;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;"], "name": "CollatingIterator_setIteratorTest", "description": "Unit tests for the setIterator method of the CollatingIterator class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testSetIterator_Success", "primary_tested": ["CollatingIterator.setIterator(int,Iterator)"], "associated_methods": ["CollatingIterator.addIterator(Iterator)", "CollatingIterator.getIterators()"], "external_dependencies": {"modules": ["CollatingIterator", "Iterator"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the successful setting of an iterator in the CollatingIterator."}, {"name": "testSetIterator_NullIterator", "primary_tested": ["CollatingIterator.setIterator(int,Iterator)"], "associated_methods": ["CollatingIterator.addIterator(Iterator)"], "external_dependencies": {"modules": ["CollatingIterator", "Iterator"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior when attempting to set a null iterator in the CollatingIterator, expecting a NullPointerException."}, {"name": "testSetIterator_IterationStarted", "primary_tested": ["CollatingIterator.setIterator(int,Iterator)"], "associated_methods": ["CollatingIterator.addIterator(Iterator)", "CollatingIterator.hasNext()"], "external_dependencies": {"modules": ["CollatingIterator", "Iterator"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior when attempting to set an iterator after the iteration has started, expecting an IllegalStateException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableIterator_unmodifiableIteratorTest.java", "testclass_name": "UnmodifiableIterator_unmodifiableIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import org.junit.jupiter.api.Test;", "import java.util.Iterator;", "import java.util.NoSuchElementException;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;"], "name": "UnmodifiableIterator_unmodifiableIteratorTest", "description": "Tests for the UnmodifiableIterator class, focusing on the behavior of the unmodifiableIterator method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testUnmodifiableIteratorWithModifiableIterator", "primary_tested": ["UnmodifiableIterator.unmodifiableIterator(Iterator)"], "external_dependencies": {"modules": ["Iterator", "UnmodifiableIterator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the unmodifiableIterator method returns a new UnmodifiableIterator instance when given a modifiable iterator."}, {"name": "testUnmodifiableIteratorWithUnmodifiableIterator", "primary_tested": ["UnmodifiableIterator.unmodifiableIterator(Iterator)"], "external_dependencies": {"modules": ["Iterator", "UnmodifiableIterator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the unmodifiableIterator method returns the same UnmodifiableIterator instance when given an unmodifiable iterator."}, {"name": "testUnmodifiableIteratorWithNullIterator", "primary_tested": ["UnmodifiableIterator.unmodifiableIterator(Iterator)"], "external_dependencies": {"modules": ["UnmodifiableIterator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the unmodifiableIterator method throws a NullPointerException when given a null iterator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_getTest.java", "testclass_name": "StaticBucketMap_getTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "StaticBucketMap_getTest", "description": "Unit tests for the get method of StaticBucketMap.", "class_members": {"variables": [{"name": "map", "type": "StaticBucketMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetExistingKey", "primary_tested": ["StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method for an existing key in the map."}, {"name": "testGetNonExistingKey", "primary_tested": ["StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method for a non-existing key in the map."}, {"name": "testGetNullKey", "primary_tested": ["StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method for a null key in the map."}, {"name": "testGetAfterRemove", "primary_tested": ["StaticBucketMap.get(String)"], "associated_methods": ["StaticBucketMap.remove(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method after removing a key from the map."}, {"name": "testGetWithMultipleEntries", "primary_tested": ["StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method with multiple entries in the map."}, {"name": "testGetWithCollision", "primary_tested": ["StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method with keys that hash to the same bucket."}, {"name": "testGetWithEmptyMap", "primary_tested": ["StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method with an empty map."}, {"name": "testGetWithSameKeyDifferentValue", "primary_tested": ["StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method with the same key but different values in the map."}, {"name": "testGetWithNullValue", "primary_tested": ["StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method with a null value in the map."}, {"name": "testGetWithNullKeyAndNullValue", "primary_tested": ["StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method with a null key and null value in the map."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIterator_nextIndexTest.java", "testclass_name": "LoopingListIterator_nextIndexTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.Arrays;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "LoopingListIterator_nextIndexTest", "description": "Unit tests for the nextIndex method of the LoopingListIterator class.", "class_members": {"variables": [{"name": "loopingListIterator", "type": "LoopingListIterator<String>"}, {"name": "list", "type": "List<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNextIndexWithElements", "primary_tested": ["LoopingListIterator.nextIndex()"], "associated_methods": ["LoopingListIterator.next()"], "external_dependencies": {"modules": ["LoopingListIterator", "List"], "class_members": [{"name": "loopingListIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the nextIndex method with elements in the list."}, {"name": "testNextIndexWithEmptyList", "primary_tested": ["LoopingListIterator.nextIndex()"], "external_dependencies": {"modules": ["LoopingListIterator", "List", "NoSuchElementException"], "class_members": [{"name": "loopingListIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the nextIndex method with an empty list, expecting a NoSuchElementException."}, {"name": "testNextIndexAfterReset", "primary_tested": ["LoopingListIterator.nextIndex()"], "associated_methods": ["LoopingListIterator.next()", "LoopingListIterator.reset()"], "external_dependencies": {"modules": ["LoopingListIterator", "List"], "class_members": [{"name": "loopingListIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the nextIndex method after resetting the iterator."}, {"name": "testNextIndexAfterPrevious", "primary_tested": ["LoopingListIterator.nextIndex()"], "associated_methods": ["LoopingListIterator.previous()"], "external_dependencies": {"modules": ["LoopingListIterator", "List"], "class_members": [{"name": "loopingListIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the nextIndex method after calling the previous method."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/properties/OrderedProperties_clearTest.java", "testclass_name": "OrderedProperties_clearTest", "dependencies": ["package org.apache.commons.collections4.properties;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "OrderedProperties_clearTest", "description": "Unit tests for the clear functionality of OrderedProperties.", "class_members": {"variables": [{"name": "orderedProperties", "type": "OrderedProperties"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testClear", "primary_tested": ["OrderedProperties.clear()"], "associated_methods": ["OrderedProperties.put(String,String)", "OrderedProperties.isEmpty()"], "external_dependencies": {"modules": ["OrderedProperties"], "class_members": [{"name": "orderedProperties", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clear functionality of the OrderedProperties by adding elements and then clearing them, verifying the properties are empty afterwards."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/TransformingComparator_hashCodeTest.java", "testclass_name": "TransformingComparator_hashCodeTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.TransformerUtils;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "TransformingComparator_hashCodeTest", "description": "Unit tests for the hashCode method of the TransformingComparator class.", "class_members": {"variables": [{"name": "transformer", "type": "Transformer<String, String>"}, {"name": "comparator", "type": "TransformingComparator<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testHashCodeWithNonNullDecoratedAndTransformer", "primary_tested": ["TransformingComparator.hashCode()"], "associated_methods": ["TransformingComparator.TransformingComparator(Transformer,Comparator)", "TransformingComparator.hashCode()"], "external_dependencies": {"modules": ["Transformer", "TransformingComparator"], "class_members": [{"name": "transformer", "type": "variable"}, {"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hashCode method of TransformingComparator with non-null decorated comparator and transformer."}, {"name": "testHashCodeWithNullDecorated", "primary_tested": ["TransformingComparator.hashCode()"], "associated_methods": ["TransformingComparator.TransformingComparator(Transformer,Comparator)", "TransformingComparator.hashCode()"], "external_dependencies": {"modules": ["Transformer", "TransformingComparator"], "class_members": [{"name": "transformer", "type": "variable"}, {"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hashCode method of TransformingComparator with null decorated comparator."}, {"name": "testHashCodeWithNullTransformer", "primary_tested": ["TransformingComparator.hashCode()"], "associated_methods": ["TransformingComparator.TransformingComparator(Transformer,Comparator)", "TransformingComparator.hashCode()"], "external_dependencies": {"modules": ["Transformer", "TransformingComparator"], "class_members": [{"name": "transformer", "type": "variable"}, {"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hashCode method of TransformingComparator with null transformer."}, {"name": "testHashCodeWithNullDecoratedAndTransformer", "primary_tested": ["TransformingComparator.hashCode()"], "associated_methods": ["TransformingComparator.TransformingComparator(Transformer,Comparator)", "TransformingComparator.hashCode()"], "external_dependencies": {"modules": ["Transformer", "TransformingComparator"], "class_members": [{"name": "transformer", "type": "variable"}, {"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hashCode method of TransformingComparator with null decorated comparator and transformer."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableMapIterator_unmodifiableMapIteratorTest.java", "testclass_name": "UnmodifiableMapIterator_unmodifiableMapIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import org.apache.commons.collections4.MapIterator;", "import org.apache.commons.collections4.Unmodifiable;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;"], "name": "UnmodifiableMapIterator_unmodifiableMapIteratorTest", "description": "Tests for the UnmodifiableMapIterator class, focusing on the unmodifiableMapIterator method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testUnmodifiableMapIteratorWithUnmodifiableIterator", "primary_tested": ["UnmodifiableMapIterator.unmodifiableMapIterator(MapIterator)"], "associated_methods": ["MapIterator.hasNext()", "MapIterator.next()", "MapIterator.getKey()", "MapIterator.getValue()"], "external_dependencies": {"modules": ["MapIterator", "UnmodifiableMapIterator", "Unmodifiable"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the unmodifiableMapIterator method with an unmodifiable iterator, ensuring the result is an instance of Unmodifiable and that the key and value are correctly retrieved."}, {"name": "testUnmodifiableMapIteratorWithModifiableIterator", "primary_tested": ["UnmodifiableMapIterator.unmodifiableMapIterator(MapIterator)"], "associated_methods": ["MapIterator.hasNext()", "MapIterator.next()", "MapIterator.getKey()", "MapIterator.getValue()"], "external_dependencies": {"modules": ["MapIterator", "UnmodifiableMapIterator"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the unmodifiableMapIterator method with a modifiable iterator, ensuring the result is an instance of UnmodifiableMapIterator and that the key and value are correctly retrieved."}, {"name": "testUnmodifiableMapIteratorWithNullIterator", "primary_tested": ["UnmodifiableMapIterator.unmodifiableMapIterator(MapIterator)"], "external_dependencies": {"modules": ["MapIterator", "UnmodifiableMapIterator"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the unmodifiableMapIterator method with a null iterator, ensuring a NullPointerException is thrown."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_equalsTest.java", "testclass_name": "StaticBucketMap_equalsTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "StaticBucketMap_equalsTest", "description": "Unit tests for the equals method of the StaticBucketMap class.", "class_members": {"variables": [{"name": "map", "type": "StaticBucketMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEquals_SameInstance", "primary_tested": ["StaticBucketMap.equals(Object)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with the same instance."}, {"name": "testEquals_DifferentType", "primary_tested": ["StaticBucketMap.equals(Object)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with a different type."}, {"name": "testEquals_EmptyMaps", "primary_tested": ["StaticBucketMap.equals(Object)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with two empty maps."}, {"name": "testEquals_NonEmptyMapsEqual", "primary_tested": ["StaticBucketMap.equals(Object)"], "associated_methods": ["StaticBucketMap.put(String,String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with two non-empty maps that are equal."}, {"name": "testEquals_NonEmptyMapsNotEqual", "primary_tested": ["StaticBucketMap.equals(Object)"], "associated_methods": ["StaticBucketMap.put(String,String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with two non-empty maps that are not equal."}, {"name": "testEquals_NullKey", "primary_tested": ["StaticBucketMap.equals(Object)"], "associated_methods": ["StaticBucketMap.put(String,String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with null keys."}, {"name": "testEquals_NullValue", "primary_tested": ["StaticBucketMap.equals(Object)"], "associated_methods": ["StaticBucketMap.put(String,String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with null values."}, {"name": "testEquals_DifferentBucketSize", "primary_tested": ["StaticBucketMap.equals(Object)"], "associated_methods": ["StaticBucketMap.put(String,String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with maps having different bucket sizes."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/SkippingIterator_removeTest.java", "testclass_name": "SkippingIterator_removeTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;", "import java.util.Iterator;"], "name": "SkippingIterator_removeTest", "description": "Unit tests for the remove method of the SkippingIterator class.", "class_members": {"variables": [{"name": "mockIterator", "type": "Iterator<Object>"}, {"name": "skippingIterator", "type": "SkippingIterator<Object>"}]}, "fixtures": [], "test_cases": [{"name": "testRemoveBeforeNext", "primary_tested": ["SkippingIterator.remove()"], "external_dependencies": {"modules": ["Iterator", "SkippingIterator"], "class_members": [{"name": "mockIterator", "type": "variable"}, {"name": "skippingIterator", "type": "variable"}]}, "category": "unit", "description": "Tests that calling remove before next throws an IllegalStateException."}, {"name": "testRemoveAfterNext", "primary_tested": ["SkippingIterator.remove()"], "associated_methods": ["SkippingIterator.next()"], "external_dependencies": {"modules": ["Iterator", "SkippingIterator"], "class_members": [{"name": "mockIterator", "type": "variable"}, {"name": "skippingIterator", "type": "variable"}]}, "category": "unit", "description": "Tests that calling remove after next successfully removes the element and calls the underlying iterator's remove method."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/SingletonIterator_nextTest.java", "testclass_name": "SingletonIterator_nextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SingletonIterator_nextTest", "description": "Unit tests for the next() method of the SingletonIterator class.", "class_members": {"variables": [{"name": "iterator", "type": "SingletonIterator<String>"}, {"name": "testValue", "type": "static final String"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNextSuccess", "primary_tested": ["SingletonIterator.next()"], "associated_methods": ["SingletonIterator.hasNext()"], "external_dependencies": {"modules": ["SingletonIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful retrieval of the next element from the SingletonIterator."}, {"name": "testNextNoSuchElementException", "primary_tested": ["SingletonIterator.next()"], "associated_methods": ["SingletonIterator.hasNext()"], "external_dependencies": {"modules": ["SingletonIterator", "NoSuchElementException"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that a NoSuchElementException is thrown when calling next() after the element has been retrieved."}, {"name": "testNextAfterRemove", "primary_tested": ["SingletonIterator.next()"], "associated_methods": ["SingletonIterator.hasNext()", "SingletonIterator.remove()"], "external_dependencies": {"modules": ["SingletonIterator", "NoSuchElementException"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that a NoSuchElementException is thrown when calling next() after the element has been removed."}, {"name": "testNextAfterReset", "primary_tested": ["SingletonIterator.next()"], "associated_methods": ["SingletonIterator.hasNext()", "SingletonIterator.reset()"], "external_dependencies": {"modules": ["SingletonIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful retrieval of the next element after resetting the SingletonIterator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/ObjectArrayIterator_nextTest.java", "testclass_name": "ObjectArrayIterator_nextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ObjectArrayIterator_nextTest", "description": "Unit tests for the next() method of the ObjectArrayIterator class.", "class_members": {"variables": [{"name": "iterator", "type": "ObjectArrayIterator<String>"}, {"name": "testArray", "type": "String[]"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNextWithElements", "primary_tested": ["ObjectArrayIterator.next()"], "external_dependencies": {"modules": ["ObjectArrayIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next() method when there are elements in the iterator."}, {"name": "testNextWithoutElements", "primary_tested": ["ObjectArrayIterator.next()"], "external_dependencies": {"modules": ["ObjectArrayIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the next() method when there are no elements in the iterator."}, {"name": "testNextAfterReset", "primary_tested": ["ObjectArrayIterator.next()"], "associated_methods": ["ObjectArrayIterator.reset()"], "external_dependencies": {"modules": ["ObjectArrayIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next() method after resetting the iterator."}, {"name": "testNextWithCustomStartIndex", "primary_tested": ["ObjectArrayIterator.next()"], "external_dependencies": {"modules": ["ObjectArrayIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the next() method with a custom start index."}, {"name": "testNextWithCustomRange", "primary_tested": ["ObjectArrayIterator.next()"], "external_dependencies": {"modules": ["ObjectArrayIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the next() method with a custom range."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/ObjectGraphIterator_hasNextTest.java", "testclass_name": "ObjectGraphIterator_hasNextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ObjectGraphIterator_hasNextTest", "description": "Unit tests for the hasNext method of the ObjectGraphIterator class.", "class_members": {"variables": [{"name": "iterator", "type": "ObjectGraphIterator<Object>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testHasNext_RootNull", "primary_tested": ["ObjectGraphIterator.hasNext()"], "external_dependencies": {"modules": ["ObjectGraphIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method when the root is null."}, {"name": "testHasNext_RootNotNull", "primary_tested": ["ObjectGraphIterator.hasNext()"], "associated_methods": ["ObjectGraphIterator.next()"], "external_dependencies": {"modules": ["ObjectGraphIterator", "ArrayList", "List"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method when the root is not null."}, {"name": "testHasNext_WithTransformer", "primary_tested": ["ObjectGraphIterator.hasNext()"], "associated_methods": ["ObjectGraphIterator.next()"], "external_dependencies": {"modules": ["ObjectGraphIterator", "ArrayList", "List", "Transformer"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method with a transformer."}, {"name": "testHasNext_NestedIterators", "primary_tested": ["ObjectGraphIterator.hasNext()"], "associated_methods": ["ObjectGraphIterator.next()"], "external_dependencies": {"modules": ["ObjectGraphIterator", "ArrayList", "List", "Iterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method with nested iterators."}, {"name": "testHasNext_NoSuchElementException", "primary_tested": ["ObjectGraphIterator.hasNext()"], "associated_methods": ["ObjectGraphIterator.next()"], "external_dependencies": {"modules": ["ObjectGraphIterator", "NoSuchElementException"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method and expects a NoSuchElementException when calling next on an empty iterator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bidimap/UnmodifiableSortedBidiMap_entrySetTest.java", "testclass_name": "UnmodifiableSortedBidiMap_entrySetTest", "dependencies": ["package org.apache.commons.collections4.bidimap;", "import org.apache.commons.collections4.map.UnmodifiableEntrySet;", "import org.junit.jupiter.api.Test;", "import java.util.Map;", "import java.util.Set;", "import java.util.SortedMap;", "import java.util.TreeMap;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "UnmodifiableSortedBidiMap_entrySetTest", "description": "Tests the entrySet functionality of the UnmodifiableSortedBidiMap.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testEntrySet", "primary_tested": ["UnmodifiableSortedBidiMap.entrySet()"], "external_dependencies": {"modules": ["SortedMap", "TreeMap", "UnmodifiableEntrySet", "UnmodifiableSortedBidiMap", "DualTreeBidiMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests if the entrySet of the UnmodifiableSortedBidiMap is an instance of UnmodifiableEntrySet."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/LoopingIterator_nextTest.java", "testclass_name": "LoopingIterator_nextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "LoopingIterator_nextTest", "description": "Unit tests for the next method of the LoopingIterator class.", "class_members": {"variables": [{"name": "loop", "type": "LoopingIterator<String>"}, {"name": "list", "type": "List<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNextWithElements", "primary_tested": ["LoopingIterator.next()"], "external_dependencies": {"modules": ["LoopingIterator", "List"], "class_members": [{"name": "loop", "type": "variable"}, {"name": "list", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method of LoopingIterator with elements, ensuring it loops back to the start."}, {"name": "testNextWithEmptyCollection", "primary_tested": ["LoopingIterator.next()"], "external_dependencies": {"modules": ["LoopingIterator", "List", "NoSuchElementException"], "class_members": [{"name": "loop", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the next method of LoopingIterator with an empty collection, expecting a NoSuchElementException."}, {"name": "testNextWithReset", "primary_tested": ["LoopingIterator.next()"], "associated_methods": ["LoopingIterator.reset()"], "external_dependencies": {"modules": ["LoopingIterator", "List"], "class_members": [{"name": "loop", "type": "variable"}, {"name": "list", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method of LoopingIterator after resetting, ensuring it starts from the beginning."}, {"name": "testNextWithRemove", "primary_tested": ["LoopingIterator.next()"], "associated_methods": ["LoopingIterator.remove()", "LoopingIterator.size()"], "external_dependencies": {"modules": ["LoopingIterator", "List"], "class_members": [{"name": "loop", "type": "variable"}, {"name": "list", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method of LoopingIterator after removing an element, ensuring it loops correctly."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bidimap/UnmodifiableBidiMap_entrySetTest.java", "testclass_name": "UnmodifiableBidiMap_entrySetTest", "dependencies": ["package org.apache.commons.collections4.bidimap;", "import org.apache.commons.collections4.BidiMap;", "import org.apache.commons.collections4.map.UnmodifiableEntrySet;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;", "import java.util.Set;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "UnmodifiableBidiMap_entrySetTest", "description": "Tests the entrySet functionality of the UnmodifiableBidiMap.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testEntrySet", "primary_tested": ["UnmodifiableBidiMap.entrySet()"], "external_dependencies": {"modules": ["BidiMap", "DualHashBidiMap", "UnmodifiableBidiMap", "UnmodifiableEntrySet", "Map", "Set"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the entrySet of an UnmodifiableBidiMap is an instance of UnmodifiableEntrySet."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableOrderedMapIterator_unmodifiableOrderedMapIteratorTest.java", "testclass_name": "UnmodifiableOrderedMapIterator_unmodifiableOrderedMapIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import org.apache.commons.collections4.OrderedMapIterator;", "import org.apache.commons.collections4.Unmodifiable;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;"], "name": "UnmodifiableOrderedMapIterator_unmodifiableOrderedMapIteratorTest", "description": "Tests for the UnmodifiableOrderedMapIterator class, specifically focusing on the unmodifiableOrderedMapIterator method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testUnmodifiableOrderedMapIteratorWithUnmodifiableIterator", "primary_tested": ["UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator(OrderedMapIterator)"], "external_dependencies": {"modules": ["OrderedMapIterator", "UnmodifiableOrderedMapIterator", "Unmodifiable"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the unmodifiableOrderedMapIterator method returns an instance of Unmodifiable when provided with an unmodifiable iterator."}, {"name": "testUnmodifiableOrderedMapIteratorWithModifiableIterator", "primary_tested": ["UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator(OrderedMapIterator)"], "external_dependencies": {"modules": ["OrderedMapIterator", "UnmodifiableOrderedMapIterator", "Unmodifiable"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the unmodifiableOrderedMapIterator method returns a different instance and an instance of Unmodifiable when provided with a modifiable iterator."}, {"name": "testUnmodifiableOrderedMapIteratorWithNullIterator", "primary_tested": ["UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator(OrderedMapIterator)"], "external_dependencies": {"modules": ["OrderedMapIterator", "UnmodifiableOrderedMapIterator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the unmodifiableOrderedMapIterator method throws a NullPointerException when provided with a null iterator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bidimap/UnmodifiableBidiMap_valuesTest.java", "testclass_name": "UnmodifiableBidiMap_valuesTest", "dependencies": ["package org.apache.commons.collections4.bidimap;", "import org.apache.commons.collections4.BidiMap;", "import org.apache.commons.collections4.set.UnmodifiableSet;", "import org.junit.jupiter.api.Test;", "import java.util.Set;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "UnmodifiableBidiMap_valuesTest", "description": "Tests the values functionality of the UnmodifiableBidiMap.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testValues", "primary_tested": ["UnmodifiableBidiMap.values()"], "associated_methods": ["UnmodifiableSet.contains(Object)", "UnmodifiableSet.size()"], "external_dependencies": {"modules": ["BidiMap", "DualHashBidiMap", "UnmodifiableBidiMap", "UnmodifiableSet"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the values functionality of the UnmodifiableBidiMap, ensuring the returned set is unmodifiable and contains the correct values."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bidimap/UnmodifiableBidiMap_keySetTest.java", "testclass_name": "UnmodifiableBidiMap_keySetTest", "dependencies": ["package org.apache.commons.collections4.bidimap;", "import org.apache.commons.collections4.BidiMap;", "import org.apache.commons.collections4.set.UnmodifiableSet;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;", "import java.util.Set;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "UnmodifiableBidiMap_keySetTest", "description": "Test suite for the keySet method of the UnmodifiableBidiMap class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testKeySet", "primary_tested": ["UnmodifiableBidiMap.keySet()"], "external_dependencies": {"modules": ["BidiMap", "UnmodifiableSet", "HashMap", "Map", "Set"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the keySet method of the UnmodifiableBidiMap to ensure it returns an unmodifiable set containing the correct keys."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/ComparatorChain_compareTest.java", "testclass_name": "ComparatorChain_compareTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.Comparator;"], "name": "ComparatorChain_compareTest", "description": "Unit tests for the compare method in the ComparatorChain class.", "class_members": {"variables": [{"name": "comparatorChain", "type": "ComparatorChain<Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testCompareWithSingleComparatorForwardOrder", "primary_tested": ["ComparatorChain.compare(Integer,Integer)"], "external_dependencies": {"modules": ["ComparatorChain", "Comparator"], "class_members": [{"name": "comparatorChain", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the compare method with a single comparator in forward order."}, {"name": "testCompareWithSingleComparatorReverseOrder", "primary_tested": ["ComparatorChain.compare(Integer,Integer)"], "external_dependencies": {"modules": ["ComparatorChain", "Comparator"], "class_members": [{"name": "comparatorChain", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the compare method with a single comparator in reverse order."}, {"name": "testCompareWithMultipleComparators", "primary_tested": ["ComparatorChain.compare(Integer,Integer)"], "external_dependencies": {"modules": ["ComparatorChain", "Comparator"], "class_members": [{"name": "comparatorChain", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the compare method with multiple comparators."}, {"name": "testCompareWithEmptyChain", "primary_tested": ["ComparatorChain.compare(Integer,Integer)"], "external_dependencies": {"modules": ["ComparatorChain"], "class_members": [{"name": "comparatorChain", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the compare method with an empty comparator chain, expecting an UnsupportedOperationException."}, {"name": "testCompareAfterModification", "primary_tested": ["ComparatorChain.compare(Integer,Integer)"], "associated_methods": ["ComparatorChain.addComparator(Comparator<Integer>,boolean)"], "external_dependencies": {"modules": ["ComparatorChain", "Comparator"], "class_members": [{"name": "comparatorChain", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the compare method after modifying the comparator chain, expecting an UnsupportedOperationException."}, {"name": "testCompareWithMinValuedComparator", "primary_tested": ["ComparatorChain.compare(Integer,Integer)"], "external_dependencies": {"modules": ["ComparatorChain", "Comparator"], "class_members": [{"name": "comparatorChain", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the compare method with a custom comparator that returns Integer.MIN_VALUE or Integer.MAX_VALUE."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/TransformingComparator_equalsTest.java", "testclass_name": "TransformingComparator_equalsTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.Comparator;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.TransformerUtils;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "TransformingComparator_equalsTest", "description": "Unit tests for the equals method of the TransformingComparator class.", "class_members": {"variables": [{"name": "transformer", "type": "Transformer<String, String>"}, {"name": "comparator", "type": "Comparator<String>"}, {"name": "transformingComparator", "type": "TransformingComparator<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEqualsSameObject", "primary_tested": ["TransformingComparator.equals(Object)"], "external_dependencies": {"modules": ["TransformingComparator"], "class_members": [{"name": "transformingComparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing the same object."}, {"name": "testEqualsNullObject", "primary_tested": ["TransformingComparator.equals(Object)"], "external_dependencies": {"modules": ["TransformingComparator"], "class_members": [{"name": "transformingComparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing with a null object."}, {"name": "testEqualsDifferentClass", "primary_tested": ["TransformingComparator.equals(Object)"], "external_dependencies": {"modules": ["TransformingComparator"], "class_members": [{"name": "transformingComparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing with an object of a different class."}, {"name": "testEqualsSameAttributes", "primary_tested": ["TransformingComparator.equals(Object)"], "external_dependencies": {"modules": ["TransformingComparator"], "class_members": [{"name": "transformingComparator", "type": "variable"}, {"name": "transformer", "type": "variable"}, {"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing with another TransformingComparator having the same attributes."}, {"name": "testEqualsDifferentTransformer", "primary_tested": ["TransformingComparator.equals(Object)"], "external_dependencies": {"modules": ["TransformingComparator", "TransformerUtils"], "class_members": [{"name": "transformingComparator", "type": "variable"}, {"name": "transformer", "type": "variable"}, {"name": "comparator", "type": "variable"}], "project_specific_resources": ["TransformerUtils.constantTransformer(String)"]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing with another TransformingComparator having a different transformer."}, {"name": "testEqualsDifferentComparator", "primary_tested": ["TransformingComparator.equals(Object)"], "external_dependencies": {"modules": ["TransformingComparator", "Comparator"], "class_members": [{"name": "transformingComparator", "type": "variable"}, {"name": "transformer", "type": "variable"}, {"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing with another TransformingComparator having a different comparator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/ZippingIterator_nextTest.java", "testclass_name": "ZippingIterator_nextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ZippingIterator_nextTest", "description": "Unit tests for the next() method of the ZippingIterator class.", "class_members": {"variables": [{"name": "evens", "type": "List<Integer>"}, {"name": "odds", "type": "List<Integer>"}, {"name": "fib", "type": "List<Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNextWithValidIterator", "primary_tested": ["ZippingIterator.next()"], "associated_methods": ["ZippingIterator.hasNext()"], "external_dependencies": {"modules": ["ZippingIterator", "List", "Iterator"], "class_members": [{"name": "evens", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next() method of ZippingIterator with a valid iterator, ensuring it returns the correct elements and handles hasNext() correctly."}, {"name": "testNextWithNoSuchElementException", "primary_tested": ["ZippingIterator.next()"], "associated_methods": ["ZippingIterator.hasNext()"], "external_dependencies": {"modules": ["ZippingIterator", "List", "Iterator", "NoSuchElementException"], "class_members": [{"name": "evens", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next() method of ZippingIterator when no elements are left, ensuring it throws a NoSuchElementException."}, {"name": "testNextWithMultipleIterators", "primary_tested": ["ZippingIterator.next()"], "associated_methods": ["ZippingIterator.hasNext()"], "external_dependencies": {"modules": ["ZippingIterator", "List", "Iterator"], "class_members": [{"name": "evens", "type": "variable"}, {"name": "odds", "type": "variable"}, {"name": "fib", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next() method of ZippingIterator with multiple iterators, ensuring all elements from all iterators are consumed."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparator_compareTest.java", "testclass_name": "FixedOrderComparator_compareTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "FixedOrderComparator_compareTest", "description": "Unit tests for the compare method of FixedOrderComparator.", "class_members": {"variables": [{"name": "comparator", "type": "FixedOrderComparator<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testCompareKnownObjects", "primary_tested": ["FixedOrderComparator.compare(String,String)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the comparison of known objects in the FixedOrderComparator."}, {"name": "testCompareUnknownObjectBefore", "primary_tested": ["FixedOrderComparator.compare(String,String)"], "associated_methods": ["FixedOrderComparator.setUnknownObjectBehavior(UnknownObjectBehavior)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the comparison of unknown objects with behavior set to BEFORE in the FixedOrderComparator."}, {"name": "testCompareUnknownObjectAfter", "primary_tested": ["FixedOrderComparator.compare(String,String)"], "associated_methods": ["FixedOrderComparator.setUnknownObjectBehavior(UnknownObjectBehavior)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the comparison of unknown objects with behavior set to AFTER in the FixedOrderComparator."}, {"name": "testCompareUnknownObjectException", "primary_tested": ["FixedOrderComparator.compare(String,String)"], "associated_methods": ["FixedOrderComparator.setUnknownObjectBehavior(UnknownObjectBehavior)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the comparison of unknown objects with behavior set to EXCEPTION in the FixedOrderComparator, expecting an IllegalArgumentException."}, {"name": "testCompareUnknownObjectBehaviorNull", "primary_tested": ["FixedOrderComparator.setUnknownObjectBehavior(UnknownObjectBehavior)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior of setting null as the unknown object behavior in the FixedOrderComparator, expecting a NullPointerException."}, {"name": "testCompareAfterLock", "primary_tested": ["FixedOrderComparator.compare(String,String)"], "associated_methods": ["FixedOrderComparator.add(String)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior of adding an object after the comparator has been locked, expecting an UnsupportedOperationException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparator_equalsTest.java", "testclass_name": "FixedOrderComparator_equalsTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.List;"], "name": "FixedOrderComparator_equalsTest", "description": "Unit tests for the equals method of the FixedOrderComparator class.", "class_members": {"variables": [{"name": "comparator", "type": "FixedOrderComparator<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEqualsSameInstance", "primary_tested": ["FixedOrderComparator.equals(Object)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with the same instance."}, {"name": "testEqualsNull", "primary_tested": ["FixedOrderComparator.equals(Object)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with a null object."}, {"name": "testEqualsDifferentClass", "primary_tested": ["FixedOrderComparator.equals(Object)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with an object of a different class."}, {"name": "testEqualsDifferentMap", "primary_tested": ["FixedOrderComparator.equals(Object)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with a comparator having a different order map."}, {"name": "testEqualsDifferentCounter", "primary_tested": ["FixedOrderComparator.equals(Object)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with a comparator having a different counter."}, {"name": "testEqualsDifferentIsLocked", "primary_tested": ["FixedOrderComparator.equals(Object)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with a comparator having a different lock status."}, {"name": "testEqualsDifferentUnknownObjectBehavior", "primary_tested": ["FixedOrderComparator.equals(Object)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with a comparator having a different unknown object behavior."}, {"name": "testEqualsIdentical", "primary_tested": ["FixedOrderComparator.equals(Object)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with an identical comparator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/CollatingIterator_getIteratorIndexTest.java", "testclass_name": "CollatingIterator_getIteratorIndexTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Comparator;", "import java.util.List;", "import org.apache.commons.collections4.comparators.ComparableComparator;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CollatingIterator_getIteratorIndexTest", "description": "Tests for the getIteratorIndex method of the CollatingIterator class.", "class_members": {"variables": [{"name": "comparator", "type": "Comparator<Integer>"}, {"name": "evens", "type": "List<Integer>"}, {"name": "odds", "type": "List<Integer>"}, {"name": "fib", "type": "List<Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetIteratorIndexSuccess", "primary_tested": ["CollatingIterator.getIteratorIndex()"], "associated_methods": ["CollatingIterator.addIterator(Iterator<Integer>)", "CollatingIterator.next()"], "external_dependencies": {"modules": ["CollatingIterator", "Comparator", "List", "Iterator"], "class_members": [{"name": "comparator", "type": "variable"}, {"name": "evens", "type": "variable"}, {"name": "odds", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getIteratorIndex method of CollatingIterator when a value has been returned by the iterator."}, {"name": "testGetIteratorIndexNoValueReturnedYet", "primary_tested": ["CollatingIterator.getIteratorIndex()"], "associated_methods": ["CollatingIterator.addIterator(Iterator<Integer>)"], "external_dependencies": {"modules": ["CollatingIterator", "Comparator", "List", "Iterator"], "class_members": [{"name": "comparator", "type": "variable"}, {"name": "evens", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getIteratorIndex method of CollatingIterator when no value has been returned by the iterator, expecting an IllegalStateException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_elementTest.java", "testclass_name": "PeekingIterator_elementTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "PeekingIterator_elementTest", "description": "Unit tests for the PeekingIterator's element method.", "class_members": {"variables": [{"name": "peekingIterator", "type": "PeekingIterator<String>"}, {"name": "elements", "type": "List<String>"}], "methods": [{"name": "makeEmptyIterator", "signature": "Iterator<String> makeEmptyIterator()"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testElementWithElements", "primary_tested": ["PeekingIterator.element()"], "associated_methods": ["PeekingIterator.next()"], "external_dependencies": {"modules": ["PeekingIterator", "List", "Iterator"], "class_members": [{"name": "peekingIterator", "type": "variable"}, {"name": "elements", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the element method of PeekingIterator when there are elements in the iterator."}, {"name": "testElementWithEmptyIterator", "primary_tested": ["PeekingIterator.element()"], "external_dependencies": {"modules": ["PeekingIterator", "Iterator", "NoSuchElementException"], "class_members": [{"name": "makeEmptyIterator", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the element method of PeekingIterator when the iterator is empty."}, {"name": "testElementAfterExhaustion", "primary_tested": ["PeekingIterator.element()"], "associated_methods": ["PeekingIterator.hasNext()", "PeekingIterator.next()"], "external_dependencies": {"modules": ["PeekingIterator", "NoSuchElementException"], "class_members": [{"name": "peekingIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the element method of PeekingIterator after the iterator has been exhausted."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/SingletonIterator_removeTest.java", "testclass_name": "SingletonIterator_removeTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SingletonIterator_removeTest", "description": "Unit tests for the remove functionality of the SingletonIterator class.", "class_members": {"variables": [{"name": "iterator", "type": "SingletonIterator<Object>"}, {"name": "testValue", "type": "static final Object"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveSuccess", "primary_tested": ["SingletonIterator.remove()"], "associated_methods": ["SingletonIterator.next()", "SingletonIterator.hasNext()"], "external_dependencies": {"modules": ["SingletonIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful removal of the element from the SingletonIterator."}, {"name": "testRemoveNotAllowed", "primary_tested": ["SingletonIterator.remove()"], "associated_methods": ["SingletonIterator.next()"], "external_dependencies": {"modules": ["SingletonIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests that removing an element is not allowed when the SingletonIterator is created with removal disabled."}, {"name": "testRemoveBeforeNext", "primary_tested": ["SingletonIterator.remove()"], "external_dependencies": {"modules": ["SingletonIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that removing an element before calling next() throws an IllegalStateException."}, {"name": "testRemoveAfterAlreadyRemoved", "primary_tested": ["SingletonIterator.remove()"], "associated_methods": ["SingletonIterator.next()"], "external_dependencies": {"modules": ["SingletonIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that removing an element after it has already been removed throws an IllegalStateException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/properties/OrderedProperties_putIfAbsentTest.java", "testclass_name": "OrderedProperties_putIfAbsentTest", "dependencies": ["package org.apache.commons.collections4.properties;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "OrderedProperties_putIfAbsentTest", "description": "Unit tests for the putIfAbsent method in the OrderedProperties class.", "class_members": {"variables": [{"name": "orderedProperties", "type": "OrderedProperties"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPutIfAbsentNewKey", "primary_tested": ["OrderedProperties.putIfAbsent(Object,Object)"], "associated_methods": ["OrderedProperties.keySet()", "OrderedProperties.get(Object)"], "external_dependencies": {"modules": ["OrderedProperties"], "class_members": [{"name": "orderedProperties", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the putIfAbsent method when adding a new key to the OrderedProperties."}, {"name": "testPutIfAbsentExistingKey", "primary_tested": ["OrderedProperties.putIfAbsent(Object,Object)"], "associated_methods": ["OrderedProperties.put(Object,Object)", "OrderedProperties.keySet()", "OrderedProperties.get(Object)"], "external_dependencies": {"modules": ["OrderedProperties"], "class_members": [{"name": "orderedProperties", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the putIfAbsent method when the key already exists in the OrderedProperties."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/DefaultedMap_getTest.java", "testclass_name": "DefaultedMap_getTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Map;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.functors.ConstantTransformer;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "DefaultedMap_getTest", "description": "Unit tests for the get method of the DefaultedMap class, which tests various scenarios including existing keys, non-existing keys, null keys, and changes in default transformers.", "class_members": {"variables": [{"name": "defaultedMap", "type": "DefaultedMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetExistingKey", "primary_tested": ["DefaultedMap.get(String)"], "external_dependencies": {"modules": ["DefaultedMap", "HashMap", "Transformer", "ConstantTransformer"], "class_members": [{"name": "defaultedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method of DefaultedMap for an existing key."}, {"name": "testGetNonExistingKey", "primary_tested": ["DefaultedMap.get(String)"], "external_dependencies": {"modules": ["DefaultedMap", "HashMap", "Transformer", "ConstantTransformer"], "class_members": [{"name": "defaultedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method of DefaultedMap for a non-existing key, expecting the default value."}, {"name": "testGetNonExistingKeyWithDefault", "primary_tested": ["DefaultedMap.get(String)"], "external_dependencies": {"modules": ["DefaultedMap", "HashMap", "Transformer", "ConstantTransformer"], "class_members": [{"name": "defaultedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method of DefaultedMap for a non-existing key, expecting the default value."}, {"name": "testGetWithNullKey", "primary_tested": ["DefaultedMap.get(String)"], "external_dependencies": {"modules": ["DefaultedMap", "HashMap", "Transformer", "ConstantTransformer"], "class_members": [{"name": "defaultedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method of DefaultedMap for a null key, expecting the default value."}, {"name": "testGetWithNullKeyAndDefault", "primary_tested": ["DefaultedMap.get(String)"], "external_dependencies": {"modules": ["DefaultedMap", "HashMap", "Transformer", "ConstantTransformer"], "class_members": [{"name": "defaultedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method of DefaultedMap for a null key after putting a value for null, expecting the put value."}, {"name": "testGetWithDefaultTransformer", "primary_tested": ["DefaultedMap.get(String)"], "external_dependencies": {"modules": ["DefaultedMap", "HashMap", "Transformer", "ConstantTransformer"], "class_members": [{"name": "defaultedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method of DefaultedMap with a new default transformer for a non-existing key."}, {"name": "testGetWithExistingKeyAfterDefaultTransformerChange", "primary_tested": ["DefaultedMap.get(String)"], "external_dependencies": {"modules": ["DefaultedMap", "HashMap", "Transformer", "ConstantTransformer"], "class_members": [{"name": "defaultedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method of DefaultedMap for an existing key after changing the default transformer."}, {"name": "testGetWithNonExistingKeyAfterDefaultTransformerChange", "primary_tested": ["DefaultedMap.get(String)"], "external_dependencies": {"modules": ["DefaultedMap", "HashMap", "Transformer", "ConstantTransformer"], "class_members": [{"name": "defaultedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method of DefaultedMap for a non-existing key after changing the default transformer."}, {"name": "testGetWithDefaultTransformerAndNullKey", "primary_tested": ["DefaultedMap.get(String)"], "external_dependencies": {"modules": ["DefaultedMap", "HashMap", "Transformer", "ConstantTransformer"], "class_members": [{"name": "defaultedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method of DefaultedMap for a null key with a new default transformer."}, {"name": "testGetWithDefaultTransformerAndNullKeyAfterPut", "primary_tested": ["DefaultedMap.get(String)"], "external_dependencies": {"modules": ["DefaultedMap", "HashMap", "Transformer", "ConstantTransformer"], "class_members": [{"name": "defaultedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method of DefaultedMap for a null key after putting a value for null with a new default transformer."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/TransformedSortedSet_headSetTest.java", "testclass_name": "TransformedSortedSet_headSetTest", "dependencies": ["package org.apache.commons.collections4.set;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.Test;", "import java.util.SortedSet;", "import java.util.TreeSet;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.mockito.Mockito.*;"], "name": "TransformedSortedSet_headSetTest", "description": "Unit tests for the headSet method of TransformedSortedSet.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testHeadSet", "primary_tested": ["TransformedSortedSet.headSet(Integer)"], "associated_methods": ["SortedSet.size()", "SortedSet.first()", "SortedSet.last()"], "external_dependencies": {"modules": ["SortedSet", "TreeSet", "Transformer", "TransformedSortedSet"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the headSet method of TransformedSortedSet to ensure it returns the correct subset of elements."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/TransformedNavigableSet_headSetTest.java", "testclass_name": "TransformedNavigableSet_headSetTest", "dependencies": ["package org.apache.commons.collections4.set;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.Test;", "import java.util.NavigableSet;", "import java.util.TreeSet;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.mockito.Mockito.mock;", "import static org.mockito.Mockito.when;"], "name": "TransformedNavigableSet_headSetTest", "description": "Unit tests for the headSet method of TransformedNavigableSet.", "class_members": {"variables": [{"name": "originalSet", "type": "NavigableSet<Integer>"}, {"name": "transformer", "type": "Transformer<Integer, Integer>"}, {"name": "transformedSet", "type": "TransformedNavigableSet<Integer>"}]}, "test_cases": [{"name": "testHeadSet", "primary_tested": ["TransformedNavigableSet.headSet(Integer,boolean)"], "associated_methods": ["Transformer.transform(Integer)"], "external_dependencies": {"modules": ["NavigableSet", "TreeSet", "Transformer", "TransformedNavigableSet"], "class_members": [{"name": "originalSet", "type": "variable"}, {"name": "transformer", "type": "variable"}, {"name": "transformedSet", "type": "variable"}]}, "category": "unit", "description": "Tests the headSet method of TransformedNavigableSet to ensure it returns the correct subset and transforms elements correctly."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/BoundedIterator_hasNextTest.java", "testclass_name": "BoundedIterator_hasNextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.Arrays;", "import java.util.Iterator;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "BoundedIterator_hasNextTest", "description": "Unit tests for the hasNext method of the BoundedIterator class.", "class_members": {"variables": [{"name": "testList", "type": "List<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testHasNextWithinBounds", "primary_tested": ["BoundedIterator.hasNext()"], "external_dependencies": {"modules": ["BoundedIterator", "Iterator"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method when the iterator is within bounds."}, {"name": "testHasNextOutOfBounds", "primary_tested": ["BoundedIterator.hasNext()"], "external_dependencies": {"modules": ["BoundedIterator", "Iterator"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method when the iterator is out of bounds."}, {"name": "testHasNextWithZeroMax", "primary_tested": ["BoundedIterator.hasNext()"], "external_dependencies": {"modules": ["BoundedIterator", "Iterator"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method when the maximum number of elements to iterate over is zero."}, {"name": "testHasNextWithNegativeOffset", "primary_tested": ["BoundedIterator.<init>(Iterator,int,int)"], "external_dependencies": {"modules": ["BoundedIterator", "Iterator"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method when the offset is negative, expecting an IllegalArgumentException."}, {"name": "testHasNextWithNegativeMax", "primary_tested": ["BoundedIterator.<init>(Iterator,int,int)"], "external_dependencies": {"modules": ["BoundedIterator", "Iterator"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method when the maximum number of elements to iterate over is negative, expecting an IllegalArgumentException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/BoundedIterator_nextTest.java", "testclass_name": "BoundedIterator_nextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.Arrays;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "BoundedIterator_nextTest", "description": "Unit tests for the next method of the BoundedIterator class.", "class_members": {"variables": [{"name": "testList", "type": "List<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNextWithinBounds", "primary_tested": ["BoundedIterator.next()"], "external_dependencies": {"modules": ["BoundedIterator", "Iterator"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method of BoundedIterator within the bounds."}, {"name": "testNextOutOfBounds", "primary_tested": ["BoundedIterator.next()"], "external_dependencies": {"modules": ["BoundedIterator", "Iterator", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method of BoundedIterator when called out of bounds."}, {"name": "testNextWithZeroMax", "primary_tested": ["BoundedIterator.next()"], "external_dependencies": {"modules": ["BoundedIterator", "Iterator", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method of BoundedIterator with zero max."}, {"name": "testNextWithNegativeOffset", "primary_tested": ["BoundedIterator.BoundedIterator(Iterator,int,int)"], "external_dependencies": {"modules": ["BoundedIterator", "Iterator", "IllegalArgumentException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the BoundedIterator constructor with a negative offset."}, {"name": "testNextWithNegativeMax", "primary_tested": ["BoundedIterator.BoundedIterator(Iterator,int,int)"], "external_dependencies": {"modules": ["BoundedIterator", "Iterator", "IllegalArgumentException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the BoundedIterator constructor with a negative max."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_nextTest.java", "testclass_name": "PeekingIterator_nextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "PeekingIterator_nextTest", "description": "Unit tests for the next method of the PeekingIterator class.", "class_members": {"variables": [{"name": "peekingIterator", "type": "PeekingIterator<String>"}, {"name": "testList", "type": "List<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNextWithElements", "primary_tested": ["PeekingIterator.next()"], "external_dependencies": {"modules": ["PeekingIterator"], "class_members": [{"name": "peekingIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method of PeekingIterator when there are elements in the iterator."}, {"name": "testNextWithEmptyIterator", "primary_tested": ["PeekingIterator.next()"], "external_dependencies": {"modules": ["PeekingIterator", "NoSuchElementException"], "class_members": [{"name": "emptyPeekingIterator", "type": "variable"}]}, "category": "unit", "description": "Tests the next method of PeekingIterator when the iterator is empty, expecting a NoSuchElementException."}, {"name": "testNextAfterPeek", "primary_tested": ["PeekingIterator.next()"], "associated_methods": ["PeekingIterator.peek()"], "external_dependencies": {"modules": ["PeekingIterator"], "class_members": [{"name": "peekingIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method of PeekingIterator after peeking at the next element."}, {"name": "testNextAfterElement", "primary_tested": ["PeekingIterator.next()"], "associated_methods": ["PeekingIterator.element()"], "external_dependencies": {"modules": ["PeekingIterator"], "class_members": [{"name": "peekingIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method of PeekingIterator after accessing the current element."}, {"name": "testNextAfterHasNext", "primary_tested": ["PeekingIterator.next()"], "associated_methods": ["PeekingIterator.hasNext()"], "external_dependencies": {"modules": ["PeekingIterator", "NoSuchElementException"], "class_members": [{"name": "peekingIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method of PeekingIterator after checking if there are more elements, expecting a NoSuchElementException when no more elements are present."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_peekingIteratorTest.java", "testclass_name": "PeekingIterator_peekingIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "PeekingIterator_peekingIteratorTest", "description": "Unit tests for the PeekingIterator class, focusing on its functionality with different types of iterators.", "class_members": {"variables": [{"name": "iterator", "type": "Iterator<String>"}], "methods": [{"name": "makeEmptyIterator", "signature": "Iterator<String> makeEmptyIterator()"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPeekingIteratorWithRegularIterator", "primary_tested": ["PeekingIterator.peekingIterator(Iterator<String>)", "PeekingIterator.hasNext()", "PeekingIterator.peek()", "PeekingIterator.next()"], "external_dependencies": {"modules": ["PeekingIterator", "Iterator", "NoSuchElementException"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the functionality of PeekingIterator with a regular iterator, checking hasNext, peek, and next methods."}, {"name": "testPeekingIteratorWithPeekingIterator", "primary_tested": ["PeekingIterator.peekingIterator(Iterator<String>)"], "external_dependencies": {"modules": ["PeekingIterator", "Iterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the functionality of PeekingIterator when wrapping another PeekingIterator, ensuring the same instance is returned."}, {"name": "testPeekingIteratorWithNullIterator", "primary_tested": ["PeekingIterator.peekingIterator(Iterator<String>)"], "external_dependencies": {"modules": ["PeekingIterator", "NullPointerException"]}, "category": "unit", "description": "Tests the behavior of PeekingIterator when a null iterator is provided, expecting a NullPointerException."}, {"name": "testPeekingIteratorWithEmptyIterator", "primary_tested": ["PeekingIterator.peekingIterator(Iterator<String>)", "PeekingIterator.hasNext()", "PeekingIterator.peek()", "PeekingIterator.next()"], "associated_methods": ["PeekingIterator.makeEmptyIterator()"], "external_dependencies": {"modules": ["PeekingIterator", "Iterator", "NoSuchElementException"], "class_members": [{"name": "makeEmptyIterator", "type": "method"}]}, "category": "unit", "description": "Tests the functionality of PeekingIterator with an empty iterator, checking hasNext, peek, and next methods."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/TransformedNavigableSet_subSetTest.java", "testclass_name": "TransformedNavigableSet_subSetTest", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.mockito.Mockito.mock;", "import static org.mockito.Mockito.when;", "import java.util.NavigableSet;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.Test;"], "name": "TransformedNavigableSet_subSetTest", "description": "Unit tests for the subSet method of TransformedNavigableSet.", "class_members": {"variables": [{"name": "mockSet", "type": "NavigableSet<String>"}, {"name": "mockTransformer", "type": "Transformer<String, String>"}, {"name": "transformedSet", "type": "TransformedNavigableSet<String>"}, {"name": "mockSubSet", "type": "NavigableSet<String>"}]}, "fixtures": [], "test_cases": [{"name": "testSubSet", "primary_tested": ["TransformedNavigableSet.subSet(String,boolean,String,boolean)"], "associated_methods": ["NavigableSet.subSet(String,boolean,String,boolean)"], "external_dependencies": {"modules": ["NavigableSet", "Transformer", "TransformedNavigableSet"], "class_members": [{"name": "mockSet", "type": "variable"}, {"name": "mockTransformer", "type": "variable"}, {"name": "transformedSet", "type": "variable"}, {"name": "mockSubSet", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the subSet method of TransformedNavigableSet, ensuring it returns a TransformedNavigableSet instance."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/properties/OrderedProperties_computeIfAbsentTest.java", "testclass_name": "OrderedProperties_computeIfAbsentTest", "dependencies": ["package org.apache.commons.collections4.properties;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import java.util.function.Function;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "OrderedProperties_computeIfAbsentTest", "description": "Unit tests for the computeIfAbsent method in OrderedProperties.", "class_members": {"variables": [{"name": "orderedProperties", "type": "OrderedProperties"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testComputeIfAbsentWithExistingKey", "primary_tested": ["OrderedProperties.computeIfAbsent(Object,Function)"], "associated_methods": ["OrderedProperties.put(Object,Object)", "OrderedProperties.containsKey(Object)"], "external_dependencies": {"modules": ["OrderedProperties", "Function"], "class_members": [{"name": "orderedProperties", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the computeIfAbsent method with an existing key in OrderedProperties."}, {"name": "testComputeIfAbsentWithNewKey", "primary_tested": ["OrderedProperties.computeIfAbsent(Object,Function)"], "associated_methods": ["OrderedProperties.containsKey(Object)"], "external_dependencies": {"modules": ["OrderedProperties", "Function"], "class_members": [{"name": "orderedProperties", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the computeIfAbsent method with a new key in OrderedProperties."}, {"name": "testComputeIfAbsentWithNullMappingFunction", "primary_tested": ["OrderedProperties.computeIfAbsent(Object,Function)"], "associated_methods": ["OrderedProperties.containsKey(Object)"], "external_dependencies": {"modules": ["OrderedProperties", "Function"], "class_members": [{"name": "orderedProperties", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the computeIfAbsent method with a null mapping function in OrderedProperties."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/TransformedNavigableSet_tailSetTest.java", "testclass_name": "TransformedNavigableSet_tailSetTest", "dependencies": ["package org.apache.commons.collections4.set;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.Test;", "import java.util.NavigableSet;", "import java.util.TreeSet;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.mockito.Mockito.*;"], "name": "TransformedNavigableSet_tailSetTest", "description": "Unit tests for the tailSet method of TransformedNavigableSet.", "class_members": {"variables": [{"name": "originalSet", "type": "NavigableSet<Integer>"}, {"name": "transformer", "type": "Transformer<Integer, Integer>"}, {"name": "transformedSet", "type": "TransformedNavigableSet<Integer>"}]}, "test_cases": [{"name": "testTailSet", "primary_tested": ["TransformedNavigableSet.tailSet(Integer,boolean)"], "associated_methods": ["NavigableSet.add(Integer)", "NavigableSet.first()", "NavigableSet.last()", "NavigableSet.size()"], "external_dependencies": {"modules": ["NavigableSet", "TreeSet", "Transformer", "TransformedNavigableSet"], "class_members": [{"name": "originalSet", "type": "variable"}, {"name": "transformer", "type": "variable"}, {"name": "transformedSet", "type": "variable"}]}, "category": "unit", "description": "Tests the tailSet method of TransformedNavigableSet to ensure it returns the correct subset of elements."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_hasNextTest.java", "testclass_name": "PeekingIterator_hasNextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "PeekingIterator_hasNextTest", "description": "Unit tests for the hasNext method of the PeekingIterator class.", "class_members": {"variables": [{"name": "testList", "type": "List<String>"}, {"name": "testArray", "type": "static final String[]"}], "methods": [{"name": "makeObject", "signature": "PeekingIterator<String> makeObject()"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testHasNextWhenIteratorHasNext", "primary_tested": ["PeekingIterator.hasNext()"], "external_dependencies": {"modules": ["PeekingIterator"], "class_members": [{"name": "testList", "type": "variable"}, {"name": "makeObject", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method when the iterator has elements."}, {"name": "testHasNextWhenIteratorIsExhausted", "primary_tested": ["PeekingIterator.hasNext()"], "associated_methods": ["PeekingIterator.next()"], "external_dependencies": {"modules": ["PeekingIterator"], "class_members": [{"name": "testList", "type": "variable"}, {"name": "makeObject", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method when the iterator is exhausted."}, {"name": "testHasNextWhenSlotIsFilled", "primary_tested": ["PeekingIterator.hasNext()"], "associated_methods": ["PeekingIterator.peek()"], "external_dependencies": {"modules": ["PeekingIterator"], "class_members": [{"name": "testList", "type": "variable"}, {"name": "makeObject", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method when the slot is filled by peeking."}, {"name": "testHasNextWhenSlotIsFilledAndIteratorIsExhausted", "primary_tested": ["PeekingIterator.hasNext()"], "associated_methods": ["PeekingIterator.next()", "PeekingIterator.peek()"], "external_dependencies": {"modules": ["PeekingIterator"], "class_members": [{"name": "testList", "type": "variable"}, {"name": "makeObject", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method when the slot is filled by peeking and the iterator is exhausted."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/TransformedSet_transformedSetTest.java", "testclass_name": "TransformedSet_transformedSetTest", "dependencies": ["package org.apache.commons.collections4.set;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.Test;", "import java.util.HashSet;", "import java.util.Set;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "TransformedSet_transformedSetTest", "description": "Unit tests for the TransformedSet class, specifically testing the transformedSet method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testTransformedSetWithNonEmptySet", "primary_tested": ["TransformedSet.transformedSet(Set<String>,Transformer<String,String>)"], "associated_methods": ["Transformer.transform(String)"], "external_dependencies": {"modules": ["HashSet", "Set", "Transformer", "TransformedSet"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformedSet method with a non-empty set, ensuring the transformation is applied correctly."}, {"name": "testTransformedSetWithEmptySet", "primary_tested": ["TransformedSet.transformedSet(Set<String>,Transformer<String,String>)"], "associated_methods": ["Transformer.transform(String)"], "external_dependencies": {"modules": ["HashSet", "Set", "Transformer", "TransformedSet"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformedSet method with an empty set, ensuring the transformation does not affect an empty set."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/properties/OrderedProperties_putAllTest.java", "testclass_name": "OrderedProperties_putAllTest", "dependencies": ["package org.apache.commons.collections4.properties;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "OrderedProperties_putAllTest", "description": "Unit tests for the putAll method of the OrderedProperties class.", "class_members": {"variables": [{"name": "orderedProperties", "type": "OrderedProperties"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPutAll", "primary_tested": ["OrderedProperties.putAll(Map<Object,Object>)"], "external_dependencies": {"modules": ["OrderedProperties", "HashMap", "Map"], "class_members": [{"name": "orderedProperties", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the putAll method by adding multiple key-value pairs to the OrderedProperties instance and verifying the size and content."}, {"name": "testPutAllEmptyMap", "primary_tested": ["OrderedProperties.putAll(Map<Object,Object>)"], "external_dependencies": {"modules": ["OrderedProperties", "HashMap", "Map"], "class_members": [{"name": "orderedProperties", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the putAll method with an empty map, verifying that the size of the OrderedProperties instance remains zero."}, {"name": "testPutAllWithExistingKeys", "primary_tested": ["OrderedProperties.putAll(Map<Object,Object>)"], "associated_methods": ["OrderedProperties.put(Object,Object)", "OrderedProperties.get(Object)"], "external_dependencies": {"modules": ["OrderedProperties", "HashMap", "Map"], "class_members": [{"name": "orderedProperties", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the putAll method with a map containing keys that already exist in the OrderedProperties instance, verifying that the values are updated and new keys are added."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/CartesianProductIterator_nextTest.java", "testclass_name": "CartesianProductIterator_nextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CartesianProductIterator_nextTest", "description": "Unit tests for the next method of CartesianProductIterator.", "class_members": {"variables": [{"name": "iterables", "type": "List<Iterable<Character>>"}, {"name": "iterator", "type": "CartesianProductIterator<Character>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNextWithSingleIterable", "primary_tested": ["CartesianProductIterator.next()"], "external_dependencies": {"modules": ["CartesianProductIterator", "Arrays", "NoSuchElementException"], "class_members": [{"name": "iterables", "type": "variable"}, {"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method with a single iterable."}, {"name": "testNextWithMultipleIterables", "primary_tested": ["CartesianProductIterator.next()"], "external_dependencies": {"modules": ["CartesianProductIterator", "Arrays", "NoSuchElementException"], "class_members": [{"name": "iterables", "type": "variable"}, {"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method with multiple iterables."}, {"name": "testNextWithEmptyIterable", "primary_tested": ["CartesianProductIterator.next()"], "external_dependencies": {"modules": ["CartesianProductIterator", "Arrays", "NoSuchElementException"], "class_members": [{"name": "iterables", "type": "variable"}, {"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method with an empty iterable."}, {"name": "testNextWithAllEmptyLists", "primary_tested": ["CartesianProductIterator.next()"], "external_dependencies": {"modules": ["CartesianProductIterator", "NoSuchElementException"], "class_members": [{"name": "iterables", "type": "variable"}, {"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method with all empty lists."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/BooleanComparator_compareTest.java", "testclass_name": "BooleanComparator_compareTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "BooleanComparator_compareTest", "description": "Unit tests for the compare method of BooleanComparator.", "class_members": {"variables": [{"name": "trueFirstComparator", "type": "BooleanComparator"}, {"name": "falseFirstComparator", "type": "BooleanComparator"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testCompareTrueFirst_TrueAndTrue", "primary_tested": ["BooleanComparator.compare(Boolean,Boolean)"], "external_dependencies": {"modules": ["BooleanComparator", "Boolean"], "class_members": [{"name": "trueFirstComparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the compare method of BooleanComparator with true and true inputs when true is first."}, {"name": "testCompareTrueFirst_TrueAndFalse", "primary_tested": ["BooleanComparator.compare(Boolean,Boolean)"], "external_dependencies": {"modules": ["BooleanComparator", "Boolean"], "class_members": [{"name": "trueFirstComparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the compare method of BooleanComparator with true and false inputs when true is first."}, {"name": "testCompareTrueFirst_FalseAndTrue", "primary_tested": ["BooleanComparator.compare(Boolean,Boolean)"], "external_dependencies": {"modules": ["BooleanComparator", "Boolean"], "class_members": [{"name": "trueFirstComparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the compare method of BooleanComparator with false and true inputs when true is first."}, {"name": "testCompareTrueFirst_FalseAndFalse", "primary_tested": ["BooleanComparator.compare(Boolean,Boolean)"], "external_dependencies": {"modules": ["BooleanComparator", "Boolean"], "class_members": [{"name": "trueFirstComparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the compare method of BooleanComparator with false and false inputs when true is first."}, {"name": "testCompareFalseFirst_TrueAndTrue", "primary_tested": ["BooleanComparator.compare(Boolean,Boolean)"], "external_dependencies": {"modules": ["BooleanComparator", "Boolean"], "class_members": [{"name": "falseFirstComparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the compare method of BooleanComparator with true and true inputs when false is first."}, {"name": "testCompareFalseFirst_TrueAndFalse", "primary_tested": ["BooleanComparator.compare(Boolean,Boolean)"], "external_dependencies": {"modules": ["BooleanComparator", "Boolean"], "class_members": [{"name": "falseFirstComparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the compare method of BooleanComparator with true and false inputs when false is first."}, {"name": "testCompareFalseFirst_FalseAndTrue", "primary_tested": ["BooleanComparator.compare(Boolean,Boolean)"], "external_dependencies": {"modules": ["BooleanComparator", "Boolean"], "class_members": [{"name": "falseFirstComparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the compare method of BooleanComparator with false and true inputs when false is first."}, {"name": "testCompareFalseFirst_FalseAndFalse", "primary_tested": ["BooleanComparator.compare(Boolean,Boolean)"], "external_dependencies": {"modules": ["BooleanComparator", "Boolean"], "class_members": [{"name": "falseFirstComparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the compare method of BooleanComparator with false and false inputs when false is first."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/CompositeSet_removeTest.java", "testclass_name": "CompositeSet_removeTest", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.junit.jupiter.api.Test;", "import java.util.HashSet;", "import java.util.Set;"], "name": "CompositeSet_removeTest", "description": "Unit tests for the remove functionality of the CompositeSet class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testRemove_ElementPresentInFirstSet", "primary_tested": ["CompositeSet.remove(Integer)"], "associated_methods": ["HashSet.contains(Integer)"], "external_dependencies": {"modules": ["CompositeSet", "HashSet"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the removal of an element present in the first set of the CompositeSet."}, {"name": "testRemove_ElementNotPresent", "primary_tested": ["CompositeSet.remove(Integer)"], "external_dependencies": {"modules": ["CompositeSet", "HashSet"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the removal of an element not present in the CompositeSet."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/UnmodifiableSet_unmodifiableSetTest.java", "testclass_name": "UnmodifiableSet_unmodifiableSetTest", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashSet;", "import java.util.Set;", "import org.apache.commons.collections4.Unmodifiable;", "import org.junit.jupiter.api.Test;"], "name": "UnmodifiableSet_unmodifiableSetTest", "description": "Tests for the UnmodifiableSet class, specifically focusing on the unmodifiableSet method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testUnmodifiableSet_WithUnmodifiableSet", "primary_tested": ["UnmodifiableSet.unmodifiableSet(Set<String>)"], "external_dependencies": {"modules": ["HashSet", "Set", "UnmodifiableSet"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that wrapping an unmodifiable set with UnmodifiableSet.unmodifiableSet returns the same instance."}, {"name": "testUnmodifiableSet_WithModifiableSet", "primary_tested": ["UnmodifiableSet.unmodifiableSet(Set<String>)"], "external_dependencies": {"modules": ["HashSet", "Set", "UnmodifiableSet", "Unmodifiable"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that wrapping a modifiable set with UnmodifiableSet.unmodifiableSet returns an instance of Unmodifiable."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_nextTest.java", "testclass_name": "SingletonListIterator_nextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SingletonListIterator_nextTest", "description": "Unit tests for the next method of SingletonListIterator.", "class_members": {"variables": [{"name": "iterator", "type": "SingletonListIterator<String>"}, {"name": "testValue", "type": "static final String"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNextSuccess", "primary_tested": ["SingletonListIterator.hasNext()", "SingletonListIterator.next()"], "external_dependencies": {"modules": ["SingletonListIterator"], "class_members": [{"name": "iterator", "type": "variable"}, {"name": "testValue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful iteration and retrieval of the next element."}, {"name": "testNextNoSuchElementException", "primary_tested": ["SingletonListIterator.next()"], "external_dependencies": {"modules": ["SingletonListIterator", "NoSuchElementException"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that NoSuchElementException is thrown when calling next after the iterator has no more elements."}, {"name": "testNextAfterRemove", "primary_tested": ["SingletonListIterator.next()"], "associated_methods": ["SingletonListIterator.remove()"], "external_dependencies": {"modules": ["SingletonListIterator", "NoSuchElementException"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that NoSuchElementException is thrown when calling next after removing the element."}, {"name": "testNextAfterReset", "primary_tested": ["SingletonListIterator.next()"], "associated_methods": ["SingletonListIterator.reset()"], "external_dependencies": {"modules": ["SingletonListIterator"], "class_members": [{"name": "iterator", "type": "variable"}, {"name": "testValue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful iteration and retrieval of the next element after resetting the iterator."}, {"name": "testNextAfterSet", "primary_tested": ["SingletonListIterator.next()"], "associated_methods": ["SingletonListIterator.set(String)", "SingletonListIterator.reset()"], "external_dependencies": {"modules": ["SingletonListIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful iteration and retrieval of the next element after setting a new value and resetting the iterator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/CompositeSet_addAllTest.java", "testclass_name": "CompositeSet_addAllTest", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.List;", "import java.util.Set;", "import org.apache.commons.collections4.set.CompositeSet.SetMutator;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeSet_addAllTest", "description": "Unit tests for the addAll functionality of the CompositeSet class.", "class_members": {"variables": [{"name": "compositeSet", "type": "CompositeSet<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAddAllWithMutator", "primary_tested": ["CompositeSet.addAll(Collection<? extends String>)"], "associated_methods": ["CompositeSet.setMutator(SetMutator<String>)"], "external_dependencies": {"modules": ["CompositeSet", "SetMutator", "HashSet"], "class_members": [{"name": "compositeSet", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addAll functionality of the CompositeSet with a SetMutator."}, {"name": "testAddAllWithoutMutator", "primary_tested": ["CompositeSet.addAll(Collection<? extends String>)"], "external_dependencies": {"modules": ["CompositeSet", "HashSet"], "class_members": [{"name": "compositeSet", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addAll functionality of the CompositeSet without a SetMutator, expecting an UnsupportedOperationException."}, {"name": "testAddAllWithEmptyCollection", "primary_tested": ["CompositeSet.addAll(Collection<? extends String>)"], "associated_methods": ["CompositeSet.setMutator(SetMutator<String>)"], "external_dependencies": {"modules": ["CompositeSet", "SetMutator", "HashSet"], "class_members": [{"name": "compositeSet", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addAll functionality of the CompositeSet with an empty collection and a SetMutator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/UnmodifiableNavigableSet_unmodifiableNavigableSetTest.java", "testclass_name": "UnmodifiableNavigableSet_unmodifiableNavigableSetTest", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertNotSame;", "import java.util.NavigableSet;", "import java.util.TreeSet;", "import org.apache.commons.collections4.Unmodifiable;", "import org.junit.jupiter.api.Test;"], "name": "UnmodifiableNavigableSet_unmodifiableNavigableSetTest", "description": "Tests for the UnmodifiableNavigableSet class, specifically focusing on the unmodifiableNavigableSet method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testUnmodifiableNavigableSet_UnmodifiableInstance", "primary_tested": ["UnmodifiableNavigableSet.unmodifiableNavigableSet(NavigableSet)"], "external_dependencies": {"modules": ["NavigableSet", "TreeSet", "UnmodifiableNavigableSet"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the unmodifiableNavigableSet method returns the same instance when called with an already unmodifiable set."}, {"name": "testUnmodifiableNavigableSet_ModifiableInstance", "primary_tested": ["UnmodifiableNavigableSet.unmodifiableNavigableSet(NavigableSet)"], "external_dependencies": {"modules": ["NavigableSet", "TreeSet", "UnmodifiableNavigableSet"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the unmodifiableNavigableSet method returns a different instance when called with a modifiable set, and that the returned instance is of type UnmodifiableNavigableSet."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/CompositeSet_clearTest.java", "testclass_name": "CompositeSet_clearTest", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashSet;", "import java.util.Set;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeSet_clearTest", "description": "Unit tests for the clear functionality of the CompositeSet class.", "class_members": {"variables": [{"name": "compositeSet", "type": "CompositeSet<String>"}, {"name": "set1", "type": "Set<String>"}, {"name": "set2", "type": "Set<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testClear", "primary_tested": ["CompositeSet.clear()"], "associated_methods": ["Set.isEmpty()", "CompositeSet.size()"], "external_dependencies": {"modules": ["CompositeSet", "Set", "HashSet"], "class_members": [{"name": "compositeSet", "type": "variable"}, {"name": "set1", "type": "variable"}, {"name": "set2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clear functionality of the CompositeSet, ensuring that all composed sets are cleared and the composite set size is zero."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/TransformedSortedSet_subSetTest.java", "testclass_name": "TransformedSortedSet_subSetTest", "dependencies": ["package org.apache.commons.collections4.set;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.Test;", "import java.util.SortedSet;", "import java.util.TreeSet;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.mockito.Mockito.*;"], "name": "TransformedSortedSet_subSetTest", "description": "Unit tests for the subSet functionality of TransformedSortedSet.", "class_members": {"variables": [{"name": "originalSet", "type": "SortedSet<Integer>"}, {"name": "transformer", "type": "Transformer<Integer, Integer>"}, {"name": "transformedSet", "type": "TransformedSortedSet<Integer>"}]}, "fixtures": [], "test_cases": [{"name": "testSubSet", "primary_tested": ["TransformedSortedSet.subSet(int,int)"], "associated_methods": ["SortedSet.size()", "SortedSet.first()", "SortedSet.last()"], "external_dependencies": {"modules": ["SortedSet", "TreeSet", "Transformer", "TransformedSortedSet"], "class_members": [{"name": "originalSet", "type": "variable"}, {"name": "transformer", "type": "variable"}, {"name": "transformedSet", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the subSet functionality of the TransformedSortedSet, ensuring it returns the correct subset of elements."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIterator_previousTest.java", "testclass_name": "LoopingListIterator_previousTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.Arrays;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "LoopingListIterator_previousTest", "description": "Unit tests for the previous method of LoopingListIterator.", "class_members": {"variables": [{"name": "loopingListIterator", "type": "LoopingListIterator<String>"}, {"name": "list", "type": "List<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPreviousWithEmptyList", "primary_tested": ["LoopingListIterator.previous()"], "external_dependencies": {"modules": ["LoopingListIterator", "NoSuchElementException"], "class_members": [{"name": "loopingListIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the previous method when the list is empty, expecting a NoSuchElementException."}, {"name": "testPreviousAtBeginning", "primary_tested": ["LoopingListIterator.previous()"], "external_dependencies": {"modules": ["LoopingListIterator"], "class_members": [{"name": "loopingListIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the previous method when the iterator is at the beginning of the list."}, {"name": "testPreviousAtEnd", "primary_tested": ["LoopingListIterator.previous()"], "associated_methods": ["LoopingListIterator.next()"], "external_dependencies": {"modules": ["LoopingListIterator"], "class_members": [{"name": "loopingListIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the previous method when the iterator is at the end of the list."}, {"name": "testPreviousInMiddle", "primary_tested": ["LoopingListIterator.previous()"], "associated_methods": ["LoopingListIterator.next()"], "external_dependencies": {"modules": ["LoopingListIterator"], "class_members": [{"name": "loopingListIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the previous method when the iterator is in the middle of the list."}, {"name": "testPreviousAfterReset", "primary_tested": ["LoopingListIterator.previous()"], "associated_methods": ["LoopingListIterator.reset()"], "external_dependencies": {"modules": ["LoopingListIterator"], "class_members": [{"name": "loopingListIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the previous method after resetting the iterator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/TransformedSortedSet_tailSetTest.java", "testclass_name": "TransformedSortedSet_tailSetTest", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.mockito.Mockito.mock;", "import static org.mockito.Mockito.when;", "import java.util.SortedSet;", "import java.util.TreeSet;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.Test;"], "name": "TransformedSortedSet_tailSetTest", "description": "Unit tests for the tailSet method of TransformedSortedSet.", "class_members": {"variables": [{"name": "originalSet", "type": "SortedSet<Integer>"}, {"name": "transformer", "type": "Transformer<Integer, Integer>"}, {"name": "transformedSet", "type": "TransformedSortedSet<Integer>"}]}, "test_cases": [{"name": "testTailSet", "primary_tested": ["TransformedSortedSet.tailSet(Integer)"], "associated_methods": ["Transformer.transform(Integer)"], "external_dependencies": {"modules": ["SortedSet", "TreeSet", "Transformer", "TransformedSortedSet"], "class_members": [{"name": "originalSet", "type": "variable"}, {"name": "transformer", "type": "variable"}, {"name": "transformedSet", "type": "variable"}]}, "category": "unit", "description": "Tests the tailSet method of TransformedSortedSet to ensure it returns the correct subset of elements."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/TransformedSortedSet_transformedSortedSetTest.java", "testclass_name": "TransformedSortedSet_transformedSortedSetTest", "dependencies": ["package org.apache.commons.collections4.set;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.Test;", "import java.util.SortedSet;", "import java.util.TreeSet;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "TransformedSortedSet_transformedSortedSetTest", "description": "Unit tests for the TransformedSortedSet class, focusing on the transformation of elements within a SortedSet.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testTransformedSortedSetWithNonEmptySet", "primary_tested": ["TransformedSortedSet.transformedSortedSet(SortedSet<String>,Transformer<String,String>)"], "associated_methods": ["SortedSet.add(String)", "SortedSet.size()", "TransformedSortedSet.size()", "TransformedSortedSet.contains(String)"], "external_dependencies": {"modules": ["SortedSet", "TreeSet", "Transformer", "TransformedSortedSet"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformation of a non-empty SortedSet using TransformedSortedSet, ensuring the original set remains unchanged and the transformed set contains the transformed elements."}, {"name": "testTransformedSortedSetWithEmptySet", "primary_tested": ["TransformedSortedSet.transformedSortedSet(SortedSet<String>,Transformer<String,String>)"], "associated_methods": ["SortedSet.size()", "TransformedSortedSet.size()"], "external_dependencies": {"modules": ["SortedSet", "TreeSet", "Transformer", "TransformedSortedSet"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformation of an empty SortedSet using TransformedSortedSet, ensuring both the original and transformed sets remain empty."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/properties/OrderedProperties_mergeTest.java", "testclass_name": "OrderedProperties_mergeTest", "dependencies": ["package org.apache.commons.collections4.properties;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Map;", "import java.util.function.BiFunction;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "OrderedProperties_mergeTest", "description": "Unit tests for the merge functionality of the OrderedProperties class.", "class_members": {"variables": [{"name": "orderedProperties", "type": "OrderedProperties"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testMergeNewKey", "primary_tested": ["OrderedProperties.merge(String,Object,BiFunction)"], "external_dependencies": {"modules": ["OrderedProperties", "BiFunction"], "class_members": [{"name": "orderedProperties", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the merge functionality when adding a new key to the OrderedProperties."}, {"name": "testMergeExistingKey", "primary_tested": ["OrderedProperties.merge(String,Object,BiFunction)"], "associated_methods": ["OrderedProperties.put(String,Object)"], "external_dependencies": {"modules": ["OrderedProperties", "BiFunction"], "class_members": [{"name": "orderedProperties", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the merge functionality when updating an existing key in the OrderedProperties."}, {"name": "testMergeNullValue", "primary_tested": ["OrderedProperties.merge(String,Object,BiFunction)"], "associated_methods": ["OrderedProperties.put(String,Object)"], "external_dependencies": {"modules": ["OrderedProperties", "BiFunction"], "class_members": [{"name": "orderedProperties", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the merge functionality when the remapping function returns null."}, {"name": "testMergeWithEmptyProperties", "primary_tested": ["OrderedProperties.merge(String,Object,BiFunction)"], "external_dependencies": {"modules": ["OrderedProperties", "BiFunction"], "class_members": [{"name": "orderedProperties", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the merge functionality when the OrderedProperties is empty."}, {"name": "testMergeWithMultipleKeys", "primary_tested": ["OrderedProperties.merge(String,Object,BiFunction)"], "associated_methods": ["OrderedProperties.put(String,Object)"], "external_dependencies": {"modules": ["OrderedProperties", "BiFunction"], "class_members": [{"name": "orderedProperties", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the merge functionality with multiple keys in the OrderedProperties."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/GrowthList_addTest.java", "testclass_name": "GrowthList_addTest", "dependencies": ["package org.apache.commons.collections4.list;", "import org.junit.jupiter.api.Test;", "import java.util.ArrayList;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "GrowthList_addTest", "description": "Unit tests for the add method of GrowthList with growth functionality.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testAddWithGrowth", "primary_tested": ["GrowthList.add(int,String)"], "associated_methods": ["GrowthList.size()", "GrowthList.get(int)"], "external_dependencies": {"modules": ["ArrayList", "List", "GrowthList"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the add method of GrowthList, ensuring it correctly grows the list and places the element at the specified index."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/properties/OrderedProperties_removeTest.java", "testclass_name": "OrderedProperties_removeTest", "dependencies": ["package org.apache.commons.collections4.properties;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Properties;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "OrderedProperties_removeTest", "description": "Unit tests for the remove functionality of the OrderedProperties class.", "class_members": {"variables": [{"name": "orderedProperties", "type": "OrderedProperties"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveExistingKey", "primary_tested": ["OrderedProperties.remove(String)"], "associated_methods": ["OrderedProperties.put(String,String)", "OrderedProperties.get(String)", "OrderedProperties.isEmpty()"], "external_dependencies": {"modules": ["OrderedProperties"], "class_members": [{"name": "orderedProperties", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of an existing key from OrderedProperties and verifies the value and state of the properties."}, {"name": "testRemoveNonExistingKey", "primary_tested": ["OrderedProperties.remove(String)"], "associated_methods": ["OrderedProperties.isEmpty()"], "external_dependencies": {"modules": ["OrderedProperties"], "class_members": [{"name": "orderedProperties", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of a non-existing key from OrderedProperties and verifies the return value and state of the properties."}, {"name": "testRemoveAfterMultiplePuts", "primary_tested": ["OrderedProperties.remove(String)"], "associated_methods": ["OrderedProperties.put(String,String)", "OrderedProperties.get(String)", "OrderedProperties.size()", "OrderedProperties.containsKey(String)"], "external_dependencies": {"modules": ["OrderedProperties"], "class_members": [{"name": "orderedProperties", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of a key after multiple puts into OrderedProperties and verifies the state of the properties."}, {"name": "testRemoveAllKeys", "primary_tested": ["OrderedProperties.remove(String)"], "associated_methods": ["OrderedProperties.put(String,String)", "OrderedProperties.isEmpty()"], "external_dependencies": {"modules": ["OrderedProperties"], "class_members": [{"name": "orderedProperties", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of all keys from OrderedProperties and verifies the state of the properties."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/TransformedNavigableSet_transformedNavigableSetTest.java", "testclass_name": "TransformedNavigableSet_transformedNavigableSetTest", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.mockito.Mockito.*;", "import java.util.NavigableSet;", "import java.util.TreeSet;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.Test;"], "name": "TransformedNavigableSet_transformedNavigableSetTest", "description": "Unit tests for the TransformedNavigableSet class, specifically testing the transformedNavigableSet method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testTransformedNavigableSetWithNonEmptySet", "primary_tested": ["TransformedNavigableSet.transformedNavigableSet(NavigableSet<String>,Transformer<String,String>)"], "associated_methods": ["TransformedNavigableSet.size()", "TransformedNavigableSet.first()", "TransformedNavigableSet.last()"], "external_dependencies": {"modules": ["NavigableSet", "TreeSet", "Transformer", "TransformedNavigableSet"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformedNavigableSet method with a non-empty set, verifying the transformation and size of the transformed set."}, {"name": "testTransformedNavigableSetWithEmptySet", "primary_tested": ["TransformedNavigableSet.transformedNavigableSet(NavigableSet<String>,Transformer<String,String>)"], "associated_methods": ["TransformedNavigableSet.size()"], "external_dependencies": {"modules": ["NavigableSet", "TreeSet", "Transformer", "TransformedNavigableSet"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformedNavigableSet method with an empty set, verifying that no transformation occurs and the size of the transformed set is zero."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/ListOrderedSet_addAllTest.java", "testclass_name": "ListOrderedSet_addAllTest", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ListOrderedSet_addAllTest", "description": "Unit tests for the addAll method of ListOrderedSet.", "class_members": {"variables": [{"name": "listOrderedSet", "type": "ListOrderedSet<Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAddAll", "primary_tested": ["ListOrderedSet.addAll(Collection<? extends E>)"], "external_dependencies": {"modules": ["ListOrderedSet", "Arrays"], "class_members": [{"name": "listOrderedSet", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addAll method with a collection of unique elements."}, {"name": "testAddAllWithDuplicates", "primary_tested": ["ListOrderedSet.addAll(Collection<? extends E>)"], "external_dependencies": {"modules": ["ListOrderedSet", "Arrays"], "class_members": [{"name": "listOrderedSet", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addAll method with a collection containing duplicate elements."}, {"name": "testAddAllEmptyCollection", "primary_tested": ["ListOrderedSet.addAll(Collection<? extends E>)"], "external_dependencies": {"modules": ["ListOrderedSet", "ArrayList"], "class_members": [{"name": "listOrderedSet", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addAll method with an empty collection."}, {"name": "testAddAllWithExistingElements", "primary_tested": ["ListOrderedSet.addAll(Collection<? extends E>)"], "associated_methods": ["ListOrderedSet.add(E)"], "external_dependencies": {"modules": ["ListOrderedSet", "Arrays"], "class_members": [{"name": "listOrderedSet", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addAll method with a collection that includes elements already present in the set."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/ListOrderedSet_clearTest.java", "testclass_name": "ListOrderedSet_clearTest", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.HashSet;", "import java.util.List;", "import java.util.Set;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ListOrderedSet_clearTest", "description": "Unit tests for the clear functionality of the ListOrderedSet class.", "class_members": {"variables": [{"name": "listOrderedSet", "type": "ListOrderedSet<Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testClear", "primary_tested": ["ListOrderedSet.clear()"], "associated_methods": ["ListOrderedSet.add(Integer)", "ListOrderedSet.size()", "ListOrderedSet.isEmpty()"], "external_dependencies": {"modules": ["ListOrderedSet", "HashSet", "ArrayList"], "class_members": [{"name": "listOrderedSet", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clear functionality of the ListOrderedSet by adding elements and then clearing the set."}, {"name": "testClearEmptySet", "primary_tested": ["ListOrderedSet.clear()"], "associated_methods": ["ListOrderedSet.isEmpty()", "ListOrderedSet.size()"], "external_dependencies": {"modules": ["ListOrderedSet", "HashSet", "ArrayList"], "class_members": [{"name": "listOrderedSet", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clear functionality of the ListOrderedSet when the set is already empty."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/GrowthList_addAllTest.java", "testclass_name": "GrowthList_addAllTest", "dependencies": ["package org.apache.commons.collections4.list;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "GrowthList_addAllTest", "description": "Tests the addAll method of the GrowthList class, focusing on its growth behavior.", "class_members": {"variables": [{"name": "growthList", "type": "GrowthList<String>"}, {"name": "collection", "type": "List<String>"}]}, "fixtures": [], "test_cases": [{"name": "testAddAll_GrowthBehavior", "primary_tested": ["GrowthList.addAll(int,Collection<? extends E>)"], "associated_methods": [], "external_dependencies": {"modules": ["GrowthList", "Arrays", "Collections", "List"], "class_members": [{"name": "growthList", "type": "variable"}, {"name": "collection", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the growth behavior of the addAll method in GrowthList when adding elements at indices greater than and less than or equal to the current size."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/properties/OrderedProperties_toStringTest.java", "testclass_name": "OrderedProperties_toStringTest", "dependencies": ["package org.apache.commons.collections4.properties;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "OrderedProperties_toStringTest", "description": "Unit tests for the toString method of the OrderedProperties class.", "class_members": {"variables": [{"name": "orderedProperties", "type": "OrderedProperties"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testToStringEmpty", "primary_tested": ["OrderedProperties.toString()"], "external_dependencies": {"modules": ["OrderedProperties"], "class_members": [{"name": "orderedProperties", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the toString method when the OrderedProperties is empty."}, {"name": "testToStringSingleEntry", "primary_tested": ["OrderedProperties.toString()"], "associated_methods": ["OrderedProperties.put(String,String)"], "external_dependencies": {"modules": ["OrderedProperties"], "class_members": [{"name": "orderedProperties", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the toString method when the OrderedProperties contains a single entry."}, {"name": "testToStringMultipleEntries", "primary_tested": ["OrderedProperties.toString()"], "associated_methods": ["OrderedProperties.put(String,String)"], "external_dependencies": {"modules": ["OrderedProperties"], "class_members": [{"name": "orderedProperties", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the toString method when the OrderedProperties contains multiple entries."}, {"name": "testToStringWithSelfReference", "primary_tested": ["OrderedProperties.toString()"], "associated_methods": ["OrderedProperties.put(String,String)"], "external_dependencies": {"modules": ["OrderedProperties"], "class_members": [{"name": "orderedProperties", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the toString method when the OrderedProperties contains entries, including a self-reference."}, {"name": "testToStringAfterRemove", "primary_tested": ["OrderedProperties.toString()"], "associated_methods": ["OrderedProperties.put(String,String)", "OrderedProperties.remove(String)"], "external_dependencies": {"modules": ["OrderedProperties"], "class_members": [{"name": "orderedProperties", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the toString method after removing an entry from the OrderedProperties."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/TransformedList_transformedListTest.java", "testclass_name": "TransformedList_transformedListTest", "dependencies": ["package org.apache.commons.collections4.list;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.Test;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "TransformedList_transformedListTest", "description": "Unit tests for the TransformedList class, focusing on the transformation of lists.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testTransformedListWithNonEmptyList", "primary_tested": ["TransformedList.transformedList(List<Integer>,Transformer<Integer,Integer>)"], "associated_methods": ["TransformedList.size()"], "external_dependencies": {"modules": ["TransformedList", "Transformer", "ArrayList", "Arrays", "List"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformation of a non-empty list using TransformedList."}, {"name": "testTransformedListWithEmptyList", "primary_tested": ["TransformedList.transformedList(List<Integer>,Transformer<Integer,Integer>)"], "associated_methods": ["TransformedList.isEmpty()"], "external_dependencies": {"modules": ["TransformedList", "Transformer", "ArrayList", "List"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformation of an empty list using TransformedList."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/CollatingIterator_addIteratorTest.java", "testclass_name": "CollatingIterator_addIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.Arrays;", "import java.util.Comparator;", "import java.util.Iterator;", "import java.util.List;", "import org.apache.commons.collections4.comparators.ComparableComparator;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CollatingIterator_addIteratorTest", "description": "Unit tests for the addIterator method of the CollatingIterator class.", "class_members": {"variables": [{"name": "collatingIterator", "type": "CollatingIterator<Integer>"}, {"name": "comparator", "type": "Comparator<Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAddIteratorSuccess", "primary_tested": ["CollatingIterator.addIterator(Iterator<Integer>)"], "associated_methods": ["CollatingIterator.getIterators()"], "external_dependencies": {"modules": ["CollatingIterator", "Iterator", "Arrays"], "class_members": [{"name": "collatingIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful addition of an iterator to the CollatingIterator."}, {"name": "testAddIteratorNull", "primary_tested": ["CollatingIterator.addIterator(Iterator<Integer>)"], "external_dependencies": {"modules": ["CollatingIterator"], "class_members": [{"name": "collatingIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior when attempting to add a null iterator to the CollatingIterator."}, {"name": "testAddIteratorAfterIterationStarted", "primary_tested": ["CollatingIterator.addIterator(Iterator<Integer>)"], "associated_methods": ["CollatingIterator.hasNext()"], "external_dependencies": {"modules": ["CollatingIterator", "Iterator", "Arrays"], "class_members": [{"name": "collatingIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior when attempting to add an iterator after the iteration has started."}, {"name": "testAddIteratorMultiple", "primary_tested": ["CollatingIterator.addIterator(Iterator<Integer>)"], "associated_methods": ["CollatingIterator.getIterators()"], "external_dependencies": {"modules": ["CollatingIterator", "Iterator", "Arrays"], "class_members": [{"name": "collatingIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addition of multiple iterators to the CollatingIterator."}, {"name": "testAddIteratorAndCheckNext", "primary_tested": ["CollatingIterator.addIterator(Iterator<Integer>)"], "associated_methods": ["CollatingIterator.hasNext()", "CollatingIterator.next()"], "external_dependencies": {"modules": ["CollatingIterator", "Iterator", "Arrays"], "class_members": [{"name": "collatingIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addition of an iterator and checks the next element in the CollatingIterator."}, {"name": "testAddIteratorAndCheckHasNext", "primary_tested": ["CollatingIterator.addIterator(Iterator<Integer>)"], "associated_methods": ["CollatingIterator.hasNext()", "CollatingIterator.next()"], "external_dependencies": {"modules": ["CollatingIterator", "Iterator", "Arrays"], "class_members": [{"name": "collatingIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addition of an iterator and checks the hasNext method in the CollatingIterator."}, {"name": "testAddIteratorAndCheckGetIterators", "primary_tested": ["CollatingIterator.addIterator(Iterator<Integer>)"], "associated_methods": ["CollatingIterator.getIterators()"], "external_dependencies": {"modules": ["CollatingIterator", "Iterator", "Arrays", "List"], "class_members": [{"name": "collatingIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addition of an iterator and checks the getIterators method in the CollatingIterator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/FilterIterator_nextTest.java", "testclass_name": "FilterIterator_nextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.apache.commons.collections4.functors.TruePredicate.truePredicate;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.apache.commons.collections4.Predicate;", "import org.apache.commons.collections4.functors.NotNullPredicate;", "import org.apache.commons.lang3.ArrayUtils;", "import org.junit.jupiter.api.AfterEach;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "FilterIterator_nextTest", "description": "Unit tests for the next() method of the FilterIterator class.", "class_members": {"variables": [{"name": "iterator", "type": "FilterIterator<String>"}, {"name": "array", "type": "String[]"}], "methods": [{"name": "setUp", "signature": "void setUp()"}, {"name": "initIterator", "signature": "void initIterator()"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNextWithElements", "primary_tested": ["FilterIterator.next()"], "external_dependencies": {"modules": ["FilterIterator", "String"], "class_members": [{"name": "iterator", "type": "variable"}, {"name": "array", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next() method when there are elements in the iterator."}, {"name": "testNextWithoutElements", "primary_tested": ["FilterIterator.next()"], "external_dependencies": {"modules": ["FilterIterator", "Collections", "NoSuchElementException"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the next() method when there are no elements in the iterator."}, {"name": "testNextWithPredicate", "primary_tested": ["FilterIterator.next()"], "external_dependencies": {"modules": ["FilterIterator", "NotNullPredicate", "NoSuchElementException"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the next() method with a predicate that filters out null elements."}, {"name": "testNextAfterHasNext", "primary_tested": ["FilterIterator.next()"], "associated_methods": ["FilterIterator.hasNext()"], "external_dependencies": {"modules": ["FilterIterator", "NoSuchElementException"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next() method after checking hasNext() multiple times."}, {"name": "testNextAfterSetIterator", "primary_tested": ["FilterIterator.next()"], "associated_methods": ["FilterIterator.setIterator(Iterator)"], "external_dependencies": {"modules": ["FilterIterator", "NoSuchElementException"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the next() method after setting a new iterator."}, {"name": "testNextAfterSetPredicate", "primary_tested": ["FilterIterator.next()"], "associated_methods": ["FilterIterator.setPredicate(Predicate)"], "external_dependencies": {"modules": ["FilterIterator", "NotNullPredicate", "NoSuchElementException"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next() method after setting a new predicate."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/PredicatedSortedSet_headSetTest.java", "testclass_name": "PredicatedSortedSet_headSetTest", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.SortedSet;", "import java.util.TreeSet;", "import java.util.Arrays;", "import org.apache.commons.collections4.Predicate;", "import org.apache.commons.collections4.functors.TruePredicate;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "PredicatedSortedSet_headSetTest", "description": "Unit tests for the headSet functionality of PredicatedSortedSet.", "class_members": {"variables": [{"name": "predicatedSortedSet", "type": "PredicatedSortedSet<Integer>"}, {"name": "testSet", "type": "SortedSet<Integer>"}, {"name": "truePredicate", "type": "Predicate<Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testHeadSetValid", "primary_tested": ["PredicatedSortedSet.headSet(Integer)"], "external_dependencies": {"modules": ["PredicatedSortedSet", "SortedSet", "TruePredicate"], "class_members": [{"name": "predicatedSortedSet", "type": "variable"}, {"name": "truePredicate", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the headSet functionality with a valid boundary value."}, {"name": "testHeadSetInvalid", "primary_tested": ["PredicatedSortedSet.headSet(Integer)"], "external_dependencies": {"modules": ["PredicatedSortedSet", "SortedSet", "TruePredicate"], "class_members": [{"name": "predicatedSortedSet", "type": "variable"}, {"name": "truePredicate", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the headSet functionality with an invalid boundary value."}, {"name": "testHeadSetBoundary", "primary_tested": ["PredicatedSortedSet.headSet(Integer)"], "external_dependencies": {"modules": ["PredicatedSortedSet", "SortedSet", "TruePredicate"], "class_members": [{"name": "predicatedSortedSet", "type": "variable"}, {"name": "truePredicate", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the headSet functionality at the boundary value."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/UnmodifiableSortedSet_unmodifiableSortedSetTest.java", "testclass_name": "UnmodifiableSortedSet_unmodifiableSortedSetTest", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.Arrays;", "import java.util.SortedSet;", "import java.util.TreeSet;", "import org.apache.commons.collections4.Unmodifiable;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "UnmodifiableSortedSet_unmodifiableSortedSetTest", "description": "Unit tests for the UnmodifiableSortedSet class, focusing on the unmodifiableSortedSet method.", "class_members": {"variables": [{"name": "set", "type": "SortedSet<Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testUnmodifiableSortedSetWithUnmodifiableSet", "primary_tested": ["UnmodifiableSortedSet.unmodifiableSortedSet(SortedSet<Integer>)"], "external_dependencies": {"modules": ["UnmodifiableSortedSet", "SortedSet"], "class_members": [{"name": "set", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that wrapping an unmodifiable set with UnmodifiableSortedSet.unmodifiableSortedSet returns the same instance."}, {"name": "testUnmodifiableSortedSetWithModifiableSet", "primary_tested": ["UnmodifiableSortedSet.unmodifiableSortedSet(SortedSet<Integer>)"], "external_dependencies": {"modules": ["UnmodifiableSortedSet", "SortedSet", "Unmodifiable"], "class_members": [{"name": "set", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that wrapping a modifiable set with UnmodifiableSortedSet.unmodifiableSortedSet returns an unmodifiable instance."}, {"name": "testUnmodifiableSortedSetWithNullSet", "primary_tested": ["UnmodifiableSortedSet.unmodifiableSortedSet(SortedSet<Integer>)"], "external_dependencies": {"modules": ["UnmodifiableSortedSet"]}, "category": "unit", "description": "Tests that passing null to UnmodifiableSortedSet.unmodifiableSortedSet throws a NullPointerException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/ListOrderedSet_retainAllTest.java", "testclass_name": "ListOrderedSet_retainAllTest", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.List;", "import java.util.Set;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ListOrderedSet_retainAllTest", "description": "Unit tests for the retainAll functionality of ListOrderedSet.", "class_members": {"variables": [{"name": "orderedSet", "type": "ListOrderedSet<Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRetainAll_ElementsRetained", "primary_tested": ["ListOrderedSet.retainAll(Collection)"], "external_dependencies": {"modules": ["ListOrderedSet", "Collection", "ArrayList"], "class_members": [{"name": "orderedSet", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retainAll functionality when elements are retained."}, {"name": "testRetainAll_NoElementsRetained", "primary_tested": ["ListOrderedSet.retainAll(Collection)"], "external_dependencies": {"modules": ["ListOrderedSet", "Collection", "ArrayList"], "class_members": [{"name": "orderedSet", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retainAll functionality when no elements are retained."}, {"name": "testRetainAll_AllElementsRetained", "primary_tested": ["ListOrderedSet.retainAll(Collection)"], "external_dependencies": {"modules": ["ListOrderedSet", "Collection", "ArrayList"], "class_members": [{"name": "orderedSet", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retainAll functionality when all elements are retained."}, {"name": "testRetainAll_PartialElementsRetained", "primary_tested": ["ListOrderedSet.retainAll(Collection)"], "external_dependencies": {"modules": ["ListOrderedSet", "Collection", "ArrayList"], "class_members": [{"name": "orderedSet", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retainAll functionality when only some elements are retained."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/ListOrderedSet_listOrderedSetTest.java", "testclass_name": "ListOrderedSet_listOrderedSetTest", "dependencies": ["package org.apache.commons.collections4.set;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.ArrayList;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "ListOrderedSet_listOrderedSetTest", "description": "Unit tests for the ListOrderedSet class, focusing on the listOrderedSet method.", "class_members": {"variables": [{"name": "list", "type": "List<Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testListOrderedSetWithUniqueElements", "primary_tested": ["ListOrderedSet.listOrderedSet(List<Integer>)"], "associated_methods": ["ListOrderedSet.size()", "ListOrderedSet.get(int)"], "external_dependencies": {"modules": ["ListOrderedSet", "List", "Integer"], "class_members": [{"name": "list", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the creation of a ListOrderedSet with unique elements and verifies the order and size."}, {"name": "testListOrderedSetWithDuplicateElements", "primary_tested": ["ListOrderedSet.listOrderedSet(List<Integer>)"], "associated_methods": ["ListOrderedSet.size()", "ListOrderedSet.get(int)"], "external_dependencies": {"modules": ["ListOrderedSet", "List", "Integer"], "class_members": [{"name": "list", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the creation of a ListOrderedSet with duplicate elements and verifies the order and size."}, {"name": "testListOrderedSetWithNullList", "primary_tested": ["ListOrderedSet.listOrderedSet(List<Integer>)"], "external_dependencies": {"modules": ["ListOrderedSet", "List", "Integer"], "class_members": [{"name": "list", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of the listOrderedSet method when provided with a null list, expecting a NullPointerException."}, {"name": "testListOrderedSetWithEmptyList", "primary_tested": ["ListOrderedSet.listOrderedSet(List<Integer>)"], "associated_methods": ["ListOrderedSet.size()"], "external_dependencies": {"modules": ["ListOrderedSet", "List", "Integer"], "class_members": [{"name": "list", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the creation of a ListOrderedSet with an empty list and verifies the size."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/CollatingIterator_hasNextTest.java", "testclass_name": "CollatingIterator_hasNextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Comparator;", "import java.util.List;", "import org.apache.commons.collections4.comparators.ComparableComparator;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CollatingIterator_hasNextTest", "description": "Unit tests for the hasNext method of the CollatingIterator class.", "class_members": {"variables": [{"name": "comparator", "type": "Comparator<Integer>"}, {"name": "list1", "type": "List<Integer>"}, {"name": "list2", "type": "List<Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testHasNextWithElements", "primary_tested": ["CollatingIterator.hasNext()"], "external_dependencies": {"modules": ["CollatingIterator", "Comparator", "List", "Arrays"], "class_members": [{"name": "comparator", "type": "variable"}, {"name": "list1", "type": "variable"}, {"name": "list2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method when the CollatingIterator contains elements."}, {"name": "testHasNextWithoutElements", "primary_tested": ["CollatingIterator.hasNext()"], "external_dependencies": {"modules": ["CollatingIterator", "Comparator", "List", "ArrayList"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method when the CollatingIterator does not contain elements."}, {"name": "testHasNextWithOneEmptyIterator", "primary_tested": ["CollatingIterator.hasNext()"], "external_dependencies": {"modules": ["CollatingIterator", "Comparator", "List", "ArrayList"], "class_members": [{"name": "comparator", "type": "variable"}, {"name": "list1", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method when one of the iterators is empty."}, {"name": "testHasNextAfterIteration", "primary_tested": ["CollatingIterator.hasNext()"], "associated_methods": ["CollatingIterator.next()"], "external_dependencies": {"modules": ["CollatingIterator", "Comparator", "List", "Arrays"], "class_members": [{"name": "comparator", "type": "variable"}, {"name": "list1", "type": "variable"}, {"name": "list2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method after iterating through all elements."}, {"name": "testHasNextWithNullComparator", "primary_tested": ["CollatingIterator.hasNext()"], "external_dependencies": {"modules": ["CollatingIterator", "Comparator", "List", "Arrays"], "class_members": [{"name": "list1", "type": "variable"}, {"name": "list2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method when the comparator is null, expecting a NullPointerException."}, {"name": "testHasNextWithSetComparator", "primary_tested": ["CollatingIterator.hasNext()"], "associated_methods": ["CollatingIterator.setComparator(Comparator)"], "external_dependencies": {"modules": ["CollatingIterator", "Comparator", "List", "Arrays"], "class_members": [{"name": "comparator", "type": "variable"}, {"name": "list1", "type": "variable"}, {"name": "list2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method after setting the comparator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/UnmodifiableList_unmodifiableListTest.java", "testclass_name": "UnmodifiableList_unmodifiableListTest", "dependencies": ["package org.apache.commons.collections4.list;", "import org.apache.commons.collections4.Unmodifiable;", "import org.junit.jupiter.api.Test;", "import java.util.ArrayList;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "UnmodifiableList_unmodifiableListTest", "description": "Tests for the UnmodifiableList class, specifically the unmodifiableList method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testUnmodifiableListWithUnmodifiableList", "primary_tested": ["UnmodifiableList.unmodifiableList(List)"], "external_dependencies": {"modules": ["List", "ArrayList", "UnmodifiableList"], "class_members": []}, "category": "unit", "description": "Tests that passing an unmodifiable list to unmodifiableList returns the same list."}, {"name": "testUnmodifiableListWithModifiableList", "primary_tested": ["UnmodifiableList.unmodifiableList(List)"], "external_dependencies": {"modules": ["List", "ArrayList", "UnmodifiableList"], "class_members": []}, "category": "unit", "description": "Tests that passing a modifiable list to unmodifiableList returns an instance of UnmodifiableList."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/UnmodifiableNavigableSet_headSetTest.java", "testclass_name": "UnmodifiableNavigableSet_headSetTest", "dependencies": ["package org.apache.commons.collections4.set;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.NavigableSet;", "import java.util.SortedSet;", "import java.util.TreeSet;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;"], "name": "UnmodifiableNavigableSet_headSetTest", "description": "Tests for the headSet functionality of the UnmodifiableNavigableSet class.", "class_members": {"variables": [{"name": "set", "type": "UnmodifiableNavigableSet<Integer>"}]}, "fixtures": ["setupSet"], "test_cases": [{"name": "testHeadSet", "primary_tested": ["UnmodifiableNavigableSet.headSet(Integer)"], "external_dependencies": {"modules": ["UnmodifiableNavigableSet", "SortedSet"], "class_members": [{"name": "set", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setupSet"], "description": "Tests the headSet functionality of the UnmodifiableNavigableSet, ensuring the correct size and elements are returned."}, {"name": "testHeadSetInclusive", "primary_tested": ["UnmodifiableNavigableSet.headSet(Integer,boolean)"], "external_dependencies": {"modules": ["UnmodifiableNavigableSet", "NavigableSet"], "class_members": [{"name": "set", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setupSet"], "description": "Tests the inclusive headSet functionality of the UnmodifiableNavigableSet, ensuring the correct size and elements are returned."}, {"name": "testHeadSetModification", "primary_tested": ["UnmodifiableNavigableSet.headSet(Integer)"], "external_dependencies": {"modules": ["UnmodifiableNavigableSet", "SortedSet"], "class_members": [{"name": "set", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setupSet"], "description": "Tests that modifications to the headSet of the UnmodifiableNavigableSet throw an UnsupportedOperationException."}, {"name": "testHeadSetInclusiveModification", "primary_tested": ["UnmodifiableNavigableSet.headSet(Integer,boolean)"], "external_dependencies": {"modules": ["UnmodifiableNavigableSet", "NavigableSet"], "class_members": [{"name": "set", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setupSet"], "description": "Tests that modifications to the inclusive headSet of the UnmodifiableNavigableSet throw an UnsupportedOperationException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/SetUniqueList_clearTest.java", "testclass_name": "SetUniqueList_clearTest", "dependencies": ["package org.apache.commons.collections4.list;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.HashSet;", "import java.util.List;", "import java.util.Set;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SetUniqueList_clearTest", "description": "Unit tests for the clear functionality of SetUniqueList.", "class_members": {"variables": [{"name": "uniqueList", "type": "SetUniqueList<Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testClear", "primary_tested": ["SetUniqueList.clear()"], "associated_methods": ["SetUniqueList.isEmpty()", "SetUniqueList.asSet().isEmpty()"], "external_dependencies": {"modules": ["SetUniqueList", "ArrayList", "HashSet"], "class_members": [{"name": "uniqueList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clear functionality of the SetUniqueList, ensuring both the list and its internal set are empty after clearing."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/SetUniqueList_removeIfTest.java", "testclass_name": "SetUniqueList_removeIfTest", "dependencies": ["package org.apache.commons.collections4.list;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.List;", "import java.util.function.Predicate;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SetUniqueList_removeIfTest", "description": "Unit tests for the removeIf method of the SetUniqueList class.", "class_members": {"variables": [{"name": "uniqueList", "type": "SetUniqueList<Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveIf_AllElementsRemoved", "primary_tested": ["SetUniqueList.removeIf(Predicate<Integer>)"], "external_dependencies": {"modules": ["SetUniqueList", "Predicate"], "class_members": [{"name": "uniqueList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeIf method when all elements are removed from the list."}, {"name": "testRemoveIf_NoElementsRemoved", "primary_tested": ["SetUniqueList.removeIf(Predicate<Integer>)"], "external_dependencies": {"modules": ["SetUniqueList", "Predicate"], "class_members": [{"name": "uniqueList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeIf method when no elements are removed from the list."}, {"name": "testRemoveIf_SomeElementsRemoved", "primary_tested": ["SetUniqueList.removeIf(Predicate<Integer>)"], "external_dependencies": {"modules": ["SetUniqueList", "Predicate"], "class_members": [{"name": "uniqueList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeIf method when some elements are removed from the list."}, {"name": "testRemoveIf_EmptyList", "primary_tested": ["SetUniqueList.removeIf(Predicate<Integer>)"], "external_dependencies": {"modules": ["SetUniqueList", "Predicate"], "class_members": [{"name": "uniqueList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeIf method when the list is empty."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/UnmodifiableList_subListTest.java", "testclass_name": "UnmodifiableList_subListTest", "dependencies": ["package org.apache.commons.collections4.list;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "UnmodifiableList_subListTest", "description": "Tests for the subList functionality of the UnmodifiableList class.", "class_members": {"variables": [{"name": "originalList", "type": "List<String>"}, {"name": "unmodifiableList", "type": "UnmodifiableList<String>"}]}, "fixtures": ["setupList"], "test_cases": [{"name": "testSubList", "primary_tested": ["UnmodifiableList.subList(int,int)"], "external_dependencies": {"modules": ["UnmodifiableList", "List"], "class_members": [{"name": "unmodifiableList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setupList"], "description": "Tests the subList functionality of the UnmodifiableList, verifying the size and content of the subList."}, {"name": "testSubListUnmodifiable", "primary_tested": ["UnmodifiableList.subList(int,int)"], "associated_methods": ["List.add(String)"], "external_dependencies": {"modules": ["UnmodifiableList", "List"], "class_members": [{"name": "unmodifiableList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setupList"], "description": "Tests that the subList of the UnmodifiableList is unmodifiable by expecting an UnsupportedOperationException when attempting to add an element."}, {"name": "testSubListOutOfBounds", "primary_tested": ["UnmodifiableList.subList(int,int)"], "external_dependencies": {"modules": ["UnmodifiableList"], "class_members": [{"name": "unmodifiableList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setupList"], "description": "Tests that an IndexOutOfBoundsException is thrown when attempting to create a subList with invalid indices."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/BitMaps_getLongIndexTest.java", "testclass_name": "BitMaps_getLongIndexTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import org.junit.jupiter.api.Test;"], "name": "BitMaps_getLongIndexTest", "description": "Unit tests for the BitMaps.getLongIndex method, which calculates the long index for a given bit index.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testGetLongIndexPositive", "primary_tested": ["BitMaps.getLongIndex(int)"], "external_dependencies": {"modules": ["BitMaps"]}, "category": "unit", "description": "Tests the BitMaps.getLongIndex method with positive bit indices."}, {"name": "testGetLongIndexNegative", "primary_tested": ["BitMaps.getLongIndex(int)"], "external_dependencies": {"modules": ["BitMaps"]}, "category": "unit", "description": "Tests the BitMaps.getLongIndex method with negative bit indices."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/CompositeSet_hashCodeTest.java", "testclass_name": "CompositeSet_hashCodeTest", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import java.util.HashSet;", "import java.util.Set;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeSet_hashCodeTest", "description": "Unit tests for the hashCode method of the CompositeSet class.", "class_members": {"variables": [{"name": "compositeSet", "type": "CompositeSet<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testHashCodeWithEmptySet", "primary_tested": ["CompositeSet.hashCode()"], "external_dependencies": {"modules": ["CompositeSet"], "class_members": [{"name": "compositeSet", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hashCode method of an empty CompositeSet."}, {"name": "testHashCodeWithSingleElement", "primary_tested": ["CompositeSet.hashCode()"], "associated_methods": ["CompositeSet.addComposited(Set<String>)"], "external_dependencies": {"modules": ["CompositeSet", "HashSet"], "class_members": [{"name": "compositeSet", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hashCode method of a CompositeSet with a single element."}, {"name": "testHashCodeWithMultipleElements", "primary_tested": ["CompositeSet.hashCode()"], "associated_methods": ["CompositeSet.addComposited(Set<String>, Set<String>)"], "external_dependencies": {"modules": ["CompositeSet", "HashSet"], "class_members": [{"name": "compositeSet", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hashCode method of a CompositeSet with multiple elements."}, {"name": "testHashCodeWithNullElement", "primary_tested": ["CompositeSet.hashCode()"], "associated_methods": ["CompositeSet.addComposited(Set<String>)"], "external_dependencies": {"modules": ["CompositeSet", "HashSet"], "class_members": [{"name": "compositeSet", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hashCode method of a CompositeSet with a null element."}, {"name": "testHashCodeAfterAddingAndRemovingElements", "primary_tested": ["CompositeSet.hashCode()"], "associated_methods": ["CompositeSet.addComposited(Set<String>)", "Set.remove(Object)"], "external_dependencies": {"modules": ["CompositeSet", "HashSet"], "class_members": [{"name": "compositeSet", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hashCode method of a CompositeSet after adding and removing elements."}, {"name": "testHashCodeAfterClear", "primary_tested": ["CompositeSet.hashCode()"], "associated_methods": ["CompositeSet.addComposited(Set<String>)", "CompositeSet.clear()"], "external_dependencies": {"modules": ["CompositeSet", "HashSet"], "class_members": [{"name": "compositeSet", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hashCode method of a CompositeSet after clearing all elements."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/GrowthList_setTest.java", "testclass_name": "GrowthList_setTest", "dependencies": ["package org.apache.commons.collections4.list;", "import org.junit.jupiter.api.Test;", "import java.util.ArrayList;", "import java.util.Collections;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "GrowthList_setTest", "description": "Unit tests for the set method in the GrowthList class, including scenarios with and without growth.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testSetWithGrowth", "primary_tested": ["GrowthList.set(int,String)"], "associated_methods": ["GrowthList.get(int)", "GrowthList.size()"], "external_dependencies": {"modules": ["ArrayList", "GrowthList", "List"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the set method of GrowthList when the list needs to grow to accommodate the specified index."}, {"name": "testSetWithoutGrowth", "primary_tested": ["GrowthList.set(int,String)"], "associated_methods": ["GrowthList.get(int)", "GrowthList.size()"], "external_dependencies": {"modules": ["ArrayList", "GrowthList", "List"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the set method of GrowthList when the list does not need to grow."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/BitMaps_getLongBitTest.java", "testclass_name": "BitMaps_getLongBitTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import org.junit.jupiter.api.Test;"], "name": "BitMaps_getLongBitTest", "description": "Unit tests for the BitMaps.getLongBit method, testing various index values.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testGetLongBitPositiveIndex", "primary_tested": ["BitMaps.getLongBit(int)"], "external_dependencies": {"modules": ["BitMaps"]}, "category": "unit", "description": "Tests the BitMaps.getLongBit method with positive index values."}, {"name": "testGetLongBitNegativeIndex", "primary_tested": ["BitMaps.getLongBit(int)"], "external_dependencies": {"modules": ["BitMaps"]}, "category": "unit", "description": "Tests the BitMaps.getLongBit method with negative index values."}, {"name": "testGetLongBitLargeIndex", "primary_tested": ["BitMaps.getLongBit(int)"], "external_dependencies": {"modules": ["BitMaps"]}, "category": "unit", "description": "Tests the BitMaps.getLongBit method with large index values."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/TransformedList_addTest.java", "testclass_name": "TransformedList_addTest", "dependencies": ["package org.apache.commons.collections4.list;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.List;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.collection.TransformedCollectionTest;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "TransformedList_addTest", "description": "Unit tests for the add functionality of TransformedList, ensuring objects are transformed correctly.", "class_members": {"variables": [{"name": "transformedList", "type": "TransformedList<Object>"}, {"name": "originalList", "type": "List<Object>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAdd_TransformObject", "primary_tested": ["TransformedList.add(int,Object)"], "external_dependencies": {"modules": ["TransformedList", "TransformedCollectionTest"], "class_members": [{"name": "transformedList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addition of an object to the TransformedList at index 0, ensuring it is transformed correctly."}, {"name": "testAdd_TransformObjectAtNonZeroIndex", "primary_tested": ["TransformedList.add(int,Object)"], "external_dependencies": {"modules": ["TransformedList", "TransformedCollectionTest"], "class_members": [{"name": "transformedList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addition of objects to the TransformedList at non-zero indices, ensuring they are transformed correctly."}, {"name": "testAdd_TransformObjectAtExistingIndex", "primary_tested": ["TransformedList.add(int,Object)"], "external_dependencies": {"modules": ["TransformedList", "TransformedCollectionTest"], "class_members": [{"name": "transformedList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addition of an object to the TransformedList at an existing index, ensuring it is transformed correctly."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/PredicatedSortedSet_tailSetTest.java", "testclass_name": "PredicatedSortedSet_tailSetTest", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.Arrays;", "import java.util.SortedSet;", "import java.util.TreeSet;", "import org.apache.commons.collections4.Predicate;", "import org.apache.commons.collections4.functors.TruePredicate;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "PredicatedSortedSet_tailSetTest", "description": "Unit tests for the tailSet functionality of PredicatedSortedSet.", "class_members": {"variables": [{"name": "predicatedSortedSet", "type": "PredicatedSortedSet<Integer>"}, {"name": "testSet", "type": "SortedSet<Integer>"}, {"name": "truePredicate", "type": "Predicate<Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testTailSetValid", "primary_tested": ["PredicatedSortedSet.tailSet(Integer)"], "external_dependencies": {"modules": ["PredicatedSortedSet", "SortedSet", "TruePredicate"], "class_members": [{"name": "predicatedSortedSet", "type": "variable"}, {"name": "testSet", "type": "variable"}, {"name": "truePredicate", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the tailSet functionality with a valid fromElement."}, {"name": "testTailSetInvalid", "primary_tested": ["PredicatedSortedSet.tailSet(Integer)"], "external_dependencies": {"modules": ["PredicatedSortedSet", "SortedSet", "TruePredicate"], "class_members": [{"name": "predicatedSortedSet", "type": "variable"}, {"name": "testSet", "type": "variable"}, {"name": "truePredicate", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the tailSet functionality with an invalid fromElement."}, {"name": "testTailSetNullPredicate", "primary_tested": ["PredicatedSortedSet.tailSet(Integer)"], "external_dependencies": {"modules": ["PredicatedSortedSet", "SortedSet", "TruePredicate"], "class_members": [{"name": "testSet", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the tailSet functionality with a null predicate, expecting a NullPointerException."}, {"name": "testTailSetNullSet", "primary_tested": ["PredicatedSortedSet.tailSet(Integer)"], "external_dependencies": {"modules": ["PredicatedSortedSet", "SortedSet", "TruePredicate"], "class_members": [{"name": "truePredicate", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the tailSet functionality with a null set, expecting a NullPointerException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/TreeList_iteratorTest.java", "testclass_name": "TreeList_iteratorTest", "dependencies": ["package org.apache.commons.collections4.list;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.Iterator;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "TreeList_iteratorTest", "description": "Unit tests for the iterator functionality of the TreeList class.", "class_members": {"variables": [{"name": "treeList", "type": "TreeList<Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testIterator", "primary_tested": ["TreeList.iterator()"], "associated_methods": ["TreeList.size()"], "external_dependencies": {"modules": ["TreeList", "Iterator"], "class_members": [{"name": "treeList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the iterator functionality of the TreeList, ensuring it iterates correctly over the elements."}, {"name": "testIteratorNoSuchElementException", "primary_tested": ["TreeList.iterator()"], "associated_methods": ["TreeList.size()"], "external_dependencies": {"modules": ["TreeList", "Iterator", "NoSuchElementException"], "class_members": [{"name": "treeList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the iterator throws a NoSuchElementException when next() is called after all elements have been iterated."}, {"name": "testIteratorAfterRemove", "primary_tested": ["TreeList.iterator()"], "associated_methods": ["TreeList.remove(int)", "TreeList.size()"], "external_dependencies": {"modules": ["TreeList", "Iterator"], "class_members": [{"name": "treeList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the iterator functionality of the TreeList after removing an element, ensuring it iterates correctly over the remaining elements."}, {"name": "testIteratorEmptyList", "primary_tested": ["TreeList.iterator()"], "associated_methods": ["TreeList.clear()"], "external_dependencies": {"modules": ["TreeList", "Iterator"], "class_members": [{"name": "treeList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the iterator functionality of the TreeList when the list is empty, ensuring it correctly indicates no elements are available."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/FilterListIterator_previousTest.java", "testclass_name": "FilterListIterator_previousTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import java.util.ArrayList;", "import java.util.List;", "import java.util.ListIterator;", "import java.util.NoSuchElementException;", "import org.apache.commons.collections4.Predicate;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "FilterListIterator_previousTest", "description": "Unit tests for the previous method of FilterListIterator with various predicates.", "class_members": {"variables": [{"name": "list", "type": "List<Integer>"}, {"name": "truePred", "type": "Predicate<Integer>"}, {"name": "falsePred", "type": "Predicate<Integer>"}, {"name": "evenPred", "type": "Predicate<Integer>"}, {"name": "oddPred", "type": "Predicate<Integer>"}, {"name": "threePred", "type": "Predicate<Integer>"}, {"name": "fourPred", "type": "Predicate<Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPreviousWithTruePredicate", "primary_tested": ["FilterListIterator.previous()"], "external_dependencies": {"modules": ["FilterListIterator", "ListIterator"], "class_members": [{"name": "list", "type": "variable"}, {"name": "truePred", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the previous method with a true predicate, expecting the first element."}, {"name": "testPreviousWithFalsePredicate", "primary_tested": ["FilterListIterator.previous()"], "external_dependencies": {"modules": ["FilterListIterator", "ListIterator", "NoSuchElementException"], "class_members": [{"name": "list", "type": "variable"}, {"name": "falsePred", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the previous method with a false predicate, expecting a NoSuchElementException."}, {"name": "testPreviousWithEvenPredicate", "primary_tested": ["FilterListIterator.previous()"], "external_dependencies": {"modules": ["FilterListIterator", "ListIterator"], "class_members": [{"name": "list", "type": "variable"}, {"name": "evenPred", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the previous method with an even predicate, expecting the first even element."}, {"name": "testPreviousWithOddPredicate", "primary_tested": ["FilterListIterator.previous()"], "external_dependencies": {"modules": ["FilterListIterator", "ListIterator"], "class_members": [{"name": "list", "type": "variable"}, {"name": "oddPred", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the previous method with an odd predicate, expecting the first odd element."}, {"name": "testPreviousWithThreePredicate", "primary_tested": ["FilterListIterator.previous()"], "external_dependencies": {"modules": ["FilterListIterator", "ListIterator"], "class_members": [{"name": "list", "type": "variable"}, {"name": "threePred", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the previous method with a predicate for multiples of three, expecting the first multiple of three."}, {"name": "testPreviousWithFourPredicate", "primary_tested": ["FilterListIterator.previous()"], "external_dependencies": {"modules": ["FilterListIterator", "ListIterator"], "class_members": [{"name": "list", "type": "variable"}, {"name": "fourPred", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the previous method with a predicate for multiples of four, expecting the first multiple of four."}, {"name": "testPreviousNoPreviousObjectSet", "primary_tested": ["FilterListIterator.previous()"], "external_dependencies": {"modules": ["FilterListIterator", "ListIterator", "NoSuchElementException"], "class_members": [{"name": "list", "type": "variable"}, {"name": "truePred", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the previous method when no previous object is set, expecting a NoSuchElementException."}, {"name": "testPreviousAfterNext", "primary_tested": ["FilterListIterator.previous()"], "external_dependencies": {"modules": ["FilterListIterator", "ListIterator"], "class_members": [{"name": "list", "type": "variable"}, {"name": "truePred", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the previous method after calling next, expecting the previous element."}, {"name": "testPreviousAfterPrevious", "primary_tested": ["FilterListIterator.previous()"], "external_dependencies": {"modules": ["FilterListIterator", "ListIterator", "NoSuchElementException"], "class_members": [{"name": "list", "type": "variable"}, {"name": "truePred", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the previous method after calling previous, expecting a NoSuchElementException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/CompositeSet_equalsTest.java", "testclass_name": "CompositeSet_equalsTest", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.HashSet;", "import java.util.Set;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeSet_equalsTest", "description": "Unit tests for the equals method of the CompositeSet class.", "class_members": {"variables": [{"name": "compositeSet", "type": "CompositeSet<String>"}, {"name": "set1", "type": "Set<String>"}, {"name": "set2", "type": "Set<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEquals_SameSets", "primary_tested": ["CompositeSet.equals(Object)"], "external_dependencies": {"modules": ["CompositeSet", "Set"], "class_members": [{"name": "compositeSet", "type": "variable"}, {"name": "set1", "type": "variable"}, {"name": "set2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with two CompositeSets containing the same sets."}, {"name": "testEquals_DifferentSets", "primary_tested": ["CompositeSet.equals(Object)"], "external_dependencies": {"modules": ["CompositeSet", "Set"], "class_members": [{"name": "compositeSet", "type": "variable"}, {"name": "set1", "type": "variable"}, {"name": "set2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with two CompositeSets containing different sets."}, {"name": "testEquals_DifferentSize", "primary_tested": ["CompositeSet.equals(Object)"], "external_dependencies": {"modules": ["CompositeSet", "Set"], "class_members": [{"name": "compositeSet", "type": "variable"}, {"name": "set1", "type": "variable"}, {"name": "set2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with two CompositeSets having different sizes."}, {"name": "testEquals_Null", "primary_tested": ["CompositeSet.equals(Object)"], "external_dependencies": {"modules": ["CompositeSet"], "class_members": [{"name": "compositeSet", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with a null object."}, {"name": "testEquals_DifferentType", "primary_tested": ["CompositeSet.equals(Object)"], "external_dependencies": {"modules": ["CompositeSet"], "class_members": [{"name": "compositeSet", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with an object of a different type."}, {"name": "testEquals_EmptySets", "primary_tested": ["CompositeSet.equals(Object)"], "external_dependencies": {"modules": ["CompositeSet"]}, "category": "unit", "description": "Tests the equals method with two empty CompositeSets."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/CompositeSet_removeIfTest.java", "testclass_name": "CompositeSet_removeIfTest", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.HashSet;", "import java.util.Set;", "import java.util.function.Predicate;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeSet_removeIfTest", "description": "Unit tests for the removeIf functionality of the CompositeSet class.", "class_members": {"variables": [{"name": "compositeSet", "type": "CompositeSet<String>"}, {"name": "set1", "type": "Set<String>"}, {"name": "set2", "type": "Set<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveIf_NullFilter", "primary_tested": ["CompositeSet.removeIf(Predicate<String>)"], "external_dependencies": {"modules": ["CompositeSet", "Predicate"], "class_members": [{"name": "compositeSet", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeIf method with a null filter."}, {"name": "testRemoveIf_NoMatches", "primary_tested": ["CompositeSet.removeIf(Predicate<String>)"], "external_dependencies": {"modules": ["CompositeSet", "Predicate"], "class_members": [{"name": "compositeSet", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeIf method with a filter that does not match any elements."}, {"name": "testRemoveIf_MatchesInOneSet", "primary_tested": ["CompositeSet.removeIf(Predicate<String>)"], "external_dependencies": {"modules": ["CompositeSet", "Predicate"], "class_members": [{"name": "compositeSet", "type": "variable"}, {"name": "set1", "type": "variable"}, {"name": "set2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeIf method with a filter that matches elements in one set."}, {"name": "testRemoveIf_MatchesInMultipleSets", "primary_tested": ["CompositeSet.removeIf(Predicate<String>)"], "external_dependencies": {"modules": ["CompositeSet", "Predicate"], "class_members": [{"name": "compositeSet", "type": "variable"}, {"name": "set1", "type": "variable"}, {"name": "set2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeIf method with a filter that matches elements in multiple sets."}, {"name": "testRemoveIf_MatchesInAllSets", "primary_tested": ["CompositeSet.removeIf(Predicate<String>)"], "external_dependencies": {"modules": ["CompositeSet", "Predicate"], "class_members": [{"name": "compositeSet", "type": "variable"}, {"name": "set1", "type": "variable"}, {"name": "set2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeIf method with a filter that matches elements in all sets."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/multimap/ArrayListValuedHashMap_trimToSizeTest.java", "testclass_name": "ArrayListValuedHashMap_trimToSizeTest", "dependencies": ["package org.apache.commons.collections4.multimap;", "import org.junit.jupiter.api.Test;", "import java.util.ArrayList;", "import java.util.Collection;", "import java.util.HashMap;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "ArrayListValuedHashMap_trimToSizeTest", "description": "Unit tests for the trimToSize method of ArrayListValuedHashMap.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testTrimToSize", "primary_tested": ["ArrayListValuedHashMap.trimToSize()"], "associated_methods": ["ArrayListValuedHashMap.put(String,String)", "ArrayListValuedHashMap.getMap()"], "external_dependencies": {"modules": ["ArrayListValuedHashMap", "Collection", "ArrayList"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the trimToSize method of ArrayListValuedHashMap to ensure it trims the internal collections without throwing exceptions."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/CompositeSet_removeAllTest.java", "testclass_name": "CompositeSet_removeAllTest", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.Set;", "import org.apache.commons.collections4.CollectionUtils;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeSet_removeAllTest", "description": "Unit tests for the removeAll method of the CompositeSet class.", "class_members": {"variables": [{"name": "compositeSet", "type": "CompositeSet<String>"}, {"name": "set1", "type": "Set<String>"}, {"name": "set2", "type": "Set<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveAllWithNonEmptyCollection", "primary_tested": ["CompositeSet.removeAll(Collection<String>)"], "external_dependencies": {"modules": ["CompositeSet", "Set", "Arrays"], "class_members": [{"name": "compositeSet", "type": "variable"}, {"name": "set1", "type": "variable"}, {"name": "set2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeAll method with a non-empty collection."}, {"name": "testRemoveAllWithEmptyCollection", "primary_tested": ["CompositeSet.removeAll(Collection<String>)"], "external_dependencies": {"modules": ["CompositeSet", "Arrays"], "class_members": [{"name": "compositeSet", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeAll method with an empty collection."}, {"name": "testRemoveAllWithNullCollection", "primary_tested": ["CompositeSet.removeAll(Collection<String>)"], "external_dependencies": {"modules": ["CompositeSet"], "class_members": [{"name": "compositeSet", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeAll method with a null collection."}, {"name": "testRemoveAllWithNonExistentElements", "primary_tested": ["CompositeSet.removeAll(Collection<String>)"], "external_dependencies": {"modules": ["CompositeSet", "Arrays"], "class_members": [{"name": "compositeSet", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeAll method with a collection of non-existent elements."}, {"name": "testRemoveAllWithAllElements", "primary_tested": ["CompositeSet.removeAll(Collection<String>)"], "external_dependencies": {"modules": ["CompositeSet", "Arrays", "Set"], "class_members": [{"name": "compositeSet", "type": "variable"}, {"name": "set1", "type": "variable"}, {"name": "set2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeAll method with a collection containing all elements."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/multiset/UnmodifiableMultiSet_uniqueSetTest.java", "testclass_name": "UnmodifiableMultiSet_uniqueSetTest", "dependencies": ["package org.apache.commons.collections4.multiset;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Set;", "import org.apache.commons.collections4.MultiSet;", "import org.apache.commons.collections4.Unmodifiable;", "import org.junit.jupiter.api.Test;"], "name": "UnmodifiableMultiSet_uniqueSetTest", "description": "Test for the uniqueSet method of the UnmodifiableMultiSet class.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testUniqueSet", "primary_tested": ["UnmodifiableMultiSet.uniqueSet()"], "associated_methods": ["HashMultiSet.add(String)", "UnmodifiableMultiSet.unmodifiableMultiSet(MultiSet)", "HashMultiSet.uniqueSet()"], "external_dependencies": {"modules": ["org.apache.commons.collections4.MultiSet", "org.apache.commons.collections4.Unmodifiable", "java.util.Set"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the uniqueSet method of the UnmodifiableMultiSet class to ensure it returns an unmodifiable set of unique elements."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/TreeList_setTest.java", "testclass_name": "TreeList_setTest", "dependencies": ["package org.apache.commons.collections4.list;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "TreeList_setTest", "description": "Unit tests for the set method of the TreeList class.", "class_members": {"variables": [{"name": "treeList", "type": "TreeList<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testSetValidIndex", "primary_tested": ["TreeList.set(int,String)"], "associated_methods": ["TreeList.get(int)"], "external_dependencies": {"modules": ["TreeList"], "class_members": [{"name": "treeList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests setting a value at a valid index in the TreeList."}, {"name": "testSetInvalidIndex", "primary_tested": ["TreeList.set(int,String)"], "external_dependencies": {"modules": ["TreeList"], "class_members": [{"name": "treeList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests setting a value at an invalid index in the TreeList, expecting an IndexOutOfBoundsException."}, {"name": "testSetFirstIndex", "primary_tested": ["TreeList.set(int,String)"], "associated_methods": ["TreeList.get(int)"], "external_dependencies": {"modules": ["TreeList"], "class_members": [{"name": "treeList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests setting a value at the first index in the TreeList."}, {"name": "testSetLastIndex", "primary_tested": ["TreeList.set(int,String)"], "associated_methods": ["TreeList.get(int)"], "external_dependencies": {"modules": ["TreeList"], "class_members": [{"name": "treeList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests setting a value at the last index in the TreeList."}, {"name": "testSetEmptyList", "primary_tested": ["TreeList.set(int,String)"], "external_dependencies": {"modules": ["TreeList"]}, "category": "unit", "description": "Tests setting a value in an empty TreeList, expecting an IndexOutOfBoundsException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/CompositeSet_addCompositedTest.java", "testclass_name": "CompositeSet_addCompositedTest", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.HashSet;", "import java.util.Set;", "import java.util.List;", "import java.util.Collection;", "import org.apache.commons.collections4.set.CompositeSet.SetMutator;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeSet_addCompositedTest", "description": "Unit tests for the addComposited method of the CompositeSet class.", "class_members": {"variables": [{"name": "compositeSet", "type": "CompositeSet<String>"}, {"name": "set1", "type": "Set<String>"}, {"name": "set2", "type": "Set<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAddCompositedNoCollision", "primary_tested": ["CompositeSet.addComposited(Set<String>)"], "external_dependencies": {"modules": ["CompositeSet", "Set"], "class_members": [{"name": "compositeSet", "type": "variable"}, {"name": "set1", "type": "variable"}, {"name": "set2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addComposited method with no collision."}, {"name": "testAddCompositedWithCollisionNoMutator", "primary_tested": ["CompositeSet.addComposited(Set<String>)"], "external_dependencies": {"modules": ["CompositeSet", "Set"], "class_members": [{"name": "compositeSet", "type": "variable"}, {"name": "set1", "type": "variable"}, {"name": "set2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addComposited method with a collision and no mutator, expecting an UnsupportedOperationException."}, {"name": "testAddCompositedWithCollisionAndMutator", "primary_tested": ["CompositeSet.addComposited(Set<String>)"], "associated_methods": ["SetMutator.resolveCollision(CompositeSet<String>,Set<String>,Set<String>,Collection<String>)"], "external_dependencies": {"modules": ["CompositeSet", "Set", "SetMutator"], "class_members": [{"name": "compositeSet", "type": "variable"}, {"name": "set1", "type": "variable"}, {"name": "set2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addComposited method with a collision and a mutator resolving the collision."}, {"name": "testAddCompositedNullSet", "primary_tested": ["CompositeSet.addComposited(Set<String>)"], "external_dependencies": {"modules": ["CompositeSet", "Set"], "class_members": [{"name": "compositeSet", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addComposited method with a null set."}, {"name": "testAddCompositedIllegalEntryUnresolved", "primary_tested": ["CompositeSet.addComposited(Set<String>)"], "associated_methods": ["SetMutator.resolveCollision(CompositeSet<String>,Set<String>,Set<String>,Collection<String>)"], "external_dependencies": {"modules": ["CompositeSet", "Set", "SetMutator"], "class_members": [{"name": "compositeSet", "type": "variable"}, {"name": "set1", "type": "variable"}, {"name": "set2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addComposited method with a collision and a mutator that does not resolve the collision, expecting an IllegalArgumentException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/CompositeSet_isEmptyTest.java", "testclass_name": "CompositeSet_isEmptyTest", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.HashSet;", "import java.util.Set;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeSet_isEmptyTest", "description": "Unit tests for the isEmpty method of the CompositeSet class.", "class_members": {"variables": [{"name": "compositeSet", "type": "CompositeSet<String>"}, {"name": "set1", "type": "Set<String>"}, {"name": "set2", "type": "Set<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testIsEmpty_AllSetsEmpty", "primary_tested": ["CompositeSet.isEmpty()"], "external_dependencies": {"modules": ["CompositeSet"], "class_members": [{"name": "compositeSet", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isEmpty method when all sets in the CompositeSet are empty."}, {"name": "testIsEmpty_OneSetNotEmpty", "primary_tested": ["CompositeSet.isEmpty()"], "associated_methods": ["Set.add(String)"], "external_dependencies": {"modules": ["CompositeSet", "Set"], "class_members": [{"name": "compositeSet", "type": "variable"}, {"name": "set1", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isEmpty method when one set in the CompositeSet is not empty."}, {"name": "testIsEmpty_AllSetsNotEmpty", "primary_tested": ["CompositeSet.isEmpty()"], "associated_methods": ["Set.add(String)"], "external_dependencies": {"modules": ["CompositeSet", "Set"], "class_members": [{"name": "compositeSet", "type": "variable"}, {"name": "set1", "type": "variable"}, {"name": "set2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isEmpty method when all sets in the CompositeSet are not empty."}, {"name": "testIsEmpty_AfterClear", "primary_tested": ["CompositeSet.isEmpty()"], "associated_methods": ["Set.add(String)", "CompositeSet.clear()"], "external_dependencies": {"modules": ["CompositeSet", "Set"], "class_members": [{"name": "compositeSet", "type": "variable"}, {"name": "set1", "type": "variable"}, {"name": "set2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isEmpty method after clearing the CompositeSet."}, {"name": "testIsEmpty_AfterRemove", "primary_tested": ["CompositeSet.isEmpty()"], "associated_methods": ["Set.add(String)", "CompositeSet.remove(String)"], "external_dependencies": {"modules": ["CompositeSet", "Set"], "class_members": [{"name": "compositeSet", "type": "variable"}, {"name": "set1", "type": "variable"}, {"name": "set2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isEmpty method after removing elements from the CompositeSet."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/SetUniqueList_removeTest.java", "testclass_name": "SetUniqueList_removeTest", "dependencies": ["package org.apache.commons.collections4.list;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.ArrayList;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SetUniqueList_removeTest", "description": "Unit tests for the remove functionality of the SetUniqueList class.", "class_members": {"variables": [{"name": "setUniqueList", "type": "SetUniqueList<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveValidIndex", "primary_tested": ["SetUniqueList.remove(int)"], "associated_methods": ["SetUniqueList.size()", "SetUniqueList.get(int)"], "external_dependencies": {"modules": ["SetUniqueList", "ArrayList", "List"], "class_members": [{"name": "setUniqueList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of an element at a valid index from the SetUniqueList."}, {"name": "testRemoveInvalidIndex", "primary_tested": ["SetUniqueList.remove(int)"], "external_dependencies": {"modules": ["SetUniqueList", "ArrayList", "List"], "class_members": [{"name": "setUniqueList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of an element at an invalid index from the SetUniqueList, expecting an IndexOutOfBoundsException."}, {"name": "testRemoveFirstIndex", "primary_tested": ["SetUniqueList.remove(int)"], "associated_methods": ["SetUniqueList.size()", "SetUniqueList.get(int)"], "external_dependencies": {"modules": ["SetUniqueList", "ArrayList", "List"], "class_members": [{"name": "setUniqueList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of the first element from the SetUniqueList."}, {"name": "testRemoveLastIndex", "primary_tested": ["SetUniqueList.remove(int)"], "associated_methods": ["SetUniqueList.size()", "SetUniqueList.get(int)"], "external_dependencies": {"modules": ["SetUniqueList", "ArrayList", "List"], "class_members": [{"name": "setUniqueList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of the last element from the SetUniqueList."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/BitMaps_modTest.java", "testclass_name": "BitMaps_modTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import org.junit.jupiter.api.Test;"], "name": "BitMaps_modTest", "description": "Unit tests for the mod functionality in BitMaps class.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testModWithPositiveDividendAndDivisor", "primary_tested": ["BitMaps.mod(int,int)"], "external_dependencies": {"modules": ["BitMaps"]}, "category": "unit", "description": "Tests the mod functionality with positive dividend and divisor."}, {"name": "testModWithLargeDividend", "primary_tested": ["BitMaps.mod(long,int)"], "external_dependencies": {"modules": ["BitMaps"]}, "category": "unit", "description": "Tests the mod functionality with a large dividend."}, {"name": "testModWithNegativeDividend", "primary_tested": ["BitMaps.mod(int,int)"], "external_dependencies": {"modules": ["BitMaps"]}, "category": "unit", "description": "Tests the mod functionality with a negative dividend."}, {"name": "testModWithZeroDividend", "primary_tested": ["BitMaps.mod(int,int)"], "external_dependencies": {"modules": ["BitMaps"]}, "category": "unit", "description": "Tests the mod functionality with a zero dividend."}, {"name": "testModWithDivisorGreaterThanDividend", "primary_tested": ["BitMaps.mod(int,int)"], "external_dependencies": {"modules": ["BitMaps"]}, "category": "unit", "description": "Tests the mod functionality with a divisor greater than the dividend."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/SetUniqueList_setTest.java", "testclass_name": "SetUniqueList_setTest", "dependencies": ["package org.apache.commons.collections4.list;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SetUniqueList_setTest", "description": "Unit tests for the set method of SetUniqueList, which ensures that the list remains unique.", "class_members": {"variables": [{"name": "setUniqueList", "type": "SetUniqueList<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testSetUniqueElement", "primary_tested": ["SetUniqueList.set(int,String)"], "external_dependencies": {"modules": ["SetUniqueList"], "class_members": [{"name": "setUniqueList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests setting a unique element in the SetUniqueList."}, {"name": "testSetDuplicateElement", "primary_tested": ["SetUniqueList.set(int,String)"], "external_dependencies": {"modules": ["SetUniqueList"], "class_members": [{"name": "setUniqueList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests setting a duplicate element in the SetUniqueList."}, {"name": "testSetSameElement", "primary_tested": ["SetUniqueList.set(int,String)"], "external_dependencies": {"modules": ["SetUniqueList"], "class_members": [{"name": "setUniqueList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests setting the same element in the SetUniqueList."}, {"name": "testSetAtEndOfList", "primary_tested": ["SetUniqueList.set(int,String)"], "external_dependencies": {"modules": ["SetUniqueList"], "class_members": [{"name": "setUniqueList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests setting an element at the end of the SetUniqueList."}, {"name": "testSetAtBeginningOfList", "primary_tested": ["SetUniqueList.set(int,String)"], "external_dependencies": {"modules": ["SetUniqueList"], "class_members": [{"name": "setUniqueList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests setting an element at the beginning of the SetUniqueList."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/TreeList_addTest.java", "testclass_name": "TreeList_addTest", "dependencies": ["package org.apache.commons.collections4.list;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "TreeList_addTest", "description": "Unit tests for the add functionality of the TreeList class.", "class_members": {"variables": [{"name": "treeList", "type": "TreeList<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAddAtIndex", "primary_tested": ["TreeList.add(int,String)"], "associated_methods": ["TreeList.size()", "TreeList.get(int)"], "external_dependencies": {"modules": ["TreeList"], "class_members": [{"name": "treeList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the add functionality at specific indices in the TreeList."}, {"name": "testAddAtIndexOutOfBounds", "primary_tested": ["TreeList.add(int,String)"], "external_dependencies": {"modules": ["TreeList"], "class_members": [{"name": "treeList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior of the add method when the index is out of bounds."}, {"name": "testAddAtIndexWithEmptyList", "primary_tested": ["TreeList.add(int,String)"], "associated_methods": ["TreeList.size()", "TreeList.get(int)"], "external_dependencies": {"modules": ["TreeList"], "class_members": [{"name": "treeList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the add functionality at index 0 in an empty TreeList."}, {"name": "testAddAtIndexWithNull", "primary_tested": ["TreeList.add(int,String)"], "associated_methods": ["TreeList.size()", "TreeList.get(int)"], "external_dependencies": {"modules": ["TreeList"], "class_members": [{"name": "treeList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the add functionality with a null element at index 0."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/CompositeMap_getTest.java", "testclass_name": "CompositeMap_getTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import java.util.HashMap;", "import java.util.Map;", "import java.util.Collection;", "import org.apache.commons.collections4.map.CompositeMap;", "import org.apache.commons.collections4.map.CompositeMap.MapMutator;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeMap_getTest", "description": "Unit tests for the get method of the CompositeMap class.", "class_members": {"variables": [{"name": "compositeMap", "type": "CompositeMap<String, String>"}, {"name": "map1", "type": "Map<String, String>"}, {"name": "map2", "type": "Map<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetExistingKey", "primary_tested": ["CompositeMap.get(Object)"], "external_dependencies": {"modules": ["CompositeMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method for existing keys in the CompositeMap."}, {"name": "testGetNonExistingKey", "primary_tested": ["CompositeMap.get(Object)"], "external_dependencies": {"modules": ["CompositeMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method for a non-existing key in the CompositeMap."}, {"name": "testGetAfterRemove", "primary_tested": ["CompositeMap.get(Object)", "CompositeMap.remove(Object)"], "external_dependencies": {"modules": ["CompositeMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method after removing a key from the CompositeMap."}, {"name": "testGetAfterPut", "primary_tested": ["CompositeMap.get(Object)", "CompositeMap.put(K,V)"], "external_dependencies": {"modules": ["CompositeMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method after adding a new key-value pair to the CompositeMap."}, {"name": "testGetAfterPutAll", "primary_tested": ["CompositeMap.get(Object)", "CompositeMap.putAll(Map<? extends K, ? extends V>)"], "external_dependencies": {"modules": ["CompositeMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method after adding multiple key-value pairs to the CompositeMap."}, {"name": "testGetAfterClear", "primary_tested": ["CompositeMap.get(Object)", "CompositeMap.clear()"], "external_dependencies": {"modules": ["CompositeMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method after clearing all entries from the CompositeMap."}, {"name": "testGetAfterAddComposited", "primary_tested": ["CompositeMap.get(Object)", "CompositeMap.addComposited(Map<K, V>)"], "external_dependencies": {"modules": ["CompositeMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method after adding a new map to the CompositeMap."}, {"name": "testGetAfterRemoveComposited", "primary_tested": ["CompositeMap.get(Object)", "CompositeMap.removeComposited(Map<K, V>)"], "external_dependencies": {"modules": ["CompositeMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method after removing a map from the CompositeMap."}, {"name": "testContainsKey", "primary_tested": ["CompositeMap.containsKey(Object)"], "external_dependencies": {"modules": ["CompositeMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsKey method of the CompositeMap."}, {"name": "testRemove", "primary_tested": ["CompositeMap.remove(Object)"], "external_dependencies": {"modules": ["CompositeMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the remove method of the CompositeMap."}, {"name": "testPut", "primary_tested": ["CompositeMap.put(K,V)"], "external_dependencies": {"modules": ["CompositeMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the put method of the CompositeMap."}, {"name": "testPutAll", "primary_tested": ["CompositeMap.putAll(Map<? extends K, ? extends V>)"], "external_dependencies": {"modules": ["CompositeMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the putAll method of the CompositeMap."}, {"name": "testClear", "primary_tested": ["CompositeMap.clear()"], "external_dependencies": {"modules": ["CompositeMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clear method of the CompositeMap."}, {"name": "testEntrySet", "primary_tested": ["CompositeMap.entrySet()"], "external_dependencies": {"modules": ["CompositeMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the entrySet method of the CompositeMap."}, {"name": "testKeySet", "primary_tested": ["CompositeMap.keySet()"], "external_dependencies": {"modules": ["CompositeMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the keySet method of the CompositeMap."}, {"name": "testValues", "primary_tested": ["CompositeMap.values()"], "external_dependencies": {"modules": ["CompositeMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the values method of the CompositeMap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/TreeList_addAllTest.java", "testclass_name": "TreeList_addAllTest", "dependencies": ["package org.apache.commons.collections4.list;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "TreeList_addAllTest", "description": "Unit tests for the addAll method of the TreeList class.", "class_members": {"variables": [{"name": "treeList", "type": "TreeList<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAddAllEmptyCollection", "primary_tested": ["TreeList.addAll(Collection<? extends String>)"], "external_dependencies": {"modules": ["TreeList", "ArrayList"], "class_members": [{"name": "treeList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addAll method with an empty collection."}, {"name": "testAddAllNonEmptyCollection", "primary_tested": ["TreeList.addAll(Collection<? extends String>)"], "associated_methods": ["TreeList.size()", "TreeList.get(int)"], "external_dependencies": {"modules": ["TreeList", "Arrays"], "class_members": [{"name": "treeList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addAll method with a non-empty collection."}, {"name": "testAddAllToNonEmptyList", "primary_tested": ["TreeList.addAll(Collection<? extends String>)"], "associated_methods": ["TreeList.add(String)", "TreeList.size()", "TreeList.get(int)"], "external_dependencies": {"modules": ["TreeList", "Arrays"], "class_members": [{"name": "treeList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addAll method to a non-empty list."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/SetUniqueList_subListTest.java", "testclass_name": "SetUniqueList_subListTest", "dependencies": ["package org.apache.commons.collections4.list;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SetUniqueList_subListTest", "description": "Unit tests for the subList functionality of SetUniqueList.", "class_members": {"variables": [{"name": "setUniqueList", "type": "SetUniqueList<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testSubListValidRange", "primary_tested": ["SetUniqueList.subList(int,int)"], "external_dependencies": {"modules": ["SetUniqueList", "List"], "class_members": [{"name": "setUniqueList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the subList functionality with a valid range."}, {"name": "testSubListInvalidRange", "primary_tested": ["SetUniqueList.subList(int,int)"], "external_dependencies": {"modules": ["SetUniqueList", "List"], "class_members": [{"name": "setUniqueList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the subList functionality with an invalid range."}, {"name": "testSubListWithDuplicates", "primary_tested": ["SetUniqueList.subList(int,int)"], "external_dependencies": {"modules": ["SetUniqueList", "List"], "class_members": [{"name": "setUniqueList", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the subList functionality with a list containing duplicates."}, {"name": "testSubListUnmodifiable", "primary_tested": ["SetUniqueList.subList(int,int)"], "external_dependencies": {"modules": ["SetUniqueList", "List", "ArrayList"], "class_members": [{"name": "setUniqueList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the subList returned by SetUniqueList is unmodifiable."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/SetOperations_cardinalityTest.java", "testclass_name": "SetOperations_cardinalityTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SetOperations_cardinalityTest", "description": "Unit tests for the cardinality method in SetOperations class.", "class_members": {"variables": [{"name": "bitMapExtractor", "type": "BitMapExtractor"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testCardinalityWithNonZeroBitCount", "primary_tested": ["SetOperations.cardinality(BitMapExtractor)"], "external_dependencies": {"modules": ["BitMapExtractor", "SetOperations"], "class_members": [{"name": "bitMapExtractor", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the cardinality method with a non-zero bit count."}, {"name": "testCardinalityWithZeroBitCount", "primary_tested": ["SetOperations.cardinality(BitMapExtractor)"], "external_dependencies": {"modules": ["BitMapExtractor", "SetOperations"], "class_members": [{"name": "bitMapExtractor", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the cardinality method with a zero bit count."}, {"name": "testCardinalityWithMixedBitCounts", "primary_tested": ["SetOperations.cardinality(BitMapExtractor)"], "external_dependencies": {"modules": ["BitMapExtractor", "SetOperations"], "class_members": [{"name": "bitMapExtractor", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the cardinality method with mixed bit counts."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/CompositeSet_containsTest.java", "testclass_name": "CompositeSet_containsTest", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.HashSet;", "import java.util.Set;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeSet_containsTest", "description": "Unit tests for the contains method of the CompositeSet class.", "class_members": {"variables": [{"name": "compositeSet", "type": "CompositeSet<String>"}, {"name": "set1", "type": "Set<String>"}, {"name": "set2", "type": "Set<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testContains_ElementInFirstSet", "primary_tested": ["CompositeSet.contains(String)"], "external_dependencies": {"modules": ["CompositeSet", "Set"], "class_members": [{"name": "compositeSet", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the CompositeSet contains an element that is present in the first set."}, {"name": "testContains_ElementInSecondSet", "primary_tested": ["CompositeSet.contains(String)"], "external_dependencies": {"modules": ["CompositeSet", "Set"], "class_members": [{"name": "compositeSet", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the CompositeSet contains an element that is present in the second set."}, {"name": "testContains_ElementNotInAnySet", "primary_tested": ["CompositeSet.contains(String)"], "external_dependencies": {"modules": ["CompositeSet", "Set"], "class_members": [{"name": "compositeSet", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the CompositeSet does not contain an element that is not present in any set."}, {"name": "testContains_NullElement", "primary_tested": ["CompositeSet.contains(String)"], "external_dependencies": {"modules": ["CompositeSet", "Set"], "class_members": [{"name": "compositeSet", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the CompositeSet does not contain a null element."}, {"name": "testContains_EmptyCompositeSet", "primary_tested": ["CompositeSet.contains(String)"], "external_dependencies": {"modules": ["CompositeSet", "Set"], "class_members": [{"name": "compositeSet", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests if the CompositeSet does not contain an element when it is empty."}, {"name": "testContains_ElementInBothSets", "primary_tested": ["CompositeSet.contains(String)"], "associated_methods": ["Set.add(String)"], "external_dependencies": {"modules": ["CompositeSet", "Set"], "class_members": [{"name": "compositeSet", "type": "variable"}, {"name": "set2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the CompositeSet contains an element that is present in both sets."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/SetUniqueList_removeAllTest.java", "testclass_name": "SetUniqueList_removeAllTest", "dependencies": ["package org.apache.commons.collections4.list;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SetUniqueList_removeAllTest", "description": "Unit tests for the removeAll method of SetUniqueList.", "class_members": {"variables": [{"name": "uniqueList", "type": "SetUniqueList<Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveAll_AllElementsRemoved", "primary_tested": ["SetUniqueList.removeAll(Collection<Integer>)"], "external_dependencies": {"modules": ["SetUniqueList", "Collection", "Arrays"], "class_members": [{"name": "uniqueList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeAll method when all specified elements are removed from the list."}, {"name": "testRemoveAll_NoElementsRemoved", "primary_tested": ["SetUniqueList.removeAll(Collection<Integer>)"], "external_dependencies": {"modules": ["SetUniqueList", "Collection", "Arrays"], "class_members": [{"name": "uniqueList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeAll method when no elements are removed from the list."}, {"name": "testRemoveAll_SomeElementsRemoved", "primary_tested": ["SetUniqueList.removeAll(Collection<Integer>)"], "external_dependencies": {"modules": ["SetUniqueList", "Collection", "Arrays"], "class_members": [{"name": "uniqueList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeAll method when some specified elements are removed from the list."}, {"name": "testRemoveAll_EmptyCollection", "primary_tested": ["SetUniqueList.removeAll(Collection<Integer>)"], "external_dependencies": {"modules": ["SetUniqueList", "Collection", "ArrayList"], "class_members": [{"name": "uniqueList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeAll method when an empty collection is passed."}, {"name": "testRemoveAll_NullCollection", "primary_tested": ["SetUniqueList.removeAll(Collection<Integer>)"], "external_dependencies": {"modules": ["SetUniqueList"], "class_members": [{"name": "uniqueList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeAll method when a null collection is passed, expecting a NullPointerException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/SetUniqueList_setUniqueListTest.java", "testclass_name": "SetUniqueList_setUniqueListTest", "dependencies": ["package org.apache.commons.collections4.list;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SetUniqueList_setUniqueListTest", "description": "Unit tests for the SetUniqueList class, specifically focusing on the setUniqueList method.", "class_members": {"variables": [{"name": "list", "type": "List<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testSetUniqueListWithNonEmptyList", "primary_tested": ["SetUniqueList.setUniqueList(List<String>)"], "associated_methods": ["SetUniqueList.size()", "SetUniqueList.contains(String)"], "external_dependencies": {"modules": ["SetUniqueList", "List"], "class_members": [{"name": "list", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the setUniqueList method with a non-empty list, ensuring that the resulting SetUniqueList contains the expected elements."}, {"name": "testSetUniqueListWithEmptyList", "primary_tested": ["SetUniqueList.setUniqueList(List<String>)"], "associated_methods": ["SetUniqueList.size()"], "external_dependencies": {"modules": ["SetUniqueList", "List"], "class_members": [{"name": "list", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the setUniqueList method with an empty list, ensuring that the resulting SetUniqueList is also empty."}, {"name": "testSetUniqueListWithDuplicates", "primary_tested": ["SetUniqueList.setUniqueList(List<String>)"], "associated_methods": ["SetUniqueList.size()", "SetUniqueList.contains(String)"], "external_dependencies": {"modules": ["SetUniqueList", "List"], "class_members": [{"name": "list", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the setUniqueList method with a list containing duplicates, ensuring that the resulting SetUniqueList removes duplicates and contains the expected elements."}, {"name": "testSetUniqueListWithNullList", "primary_tested": ["SetUniqueList.setUniqueList(List<String>)"], "external_dependencies": {"modules": ["SetUniqueList"]}, "category": "unit", "fixtures_used": [], "description": "Tests the setUniqueList method with a null list, ensuring that a NullPointerException is thrown."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/Shape_fromNMTest.java", "testclass_name": "Shape_fromNMTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Shape_fromNMTest", "description": "Unit tests for the Shape.fromNM method in the Bloom filter implementation.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testFromNM_ValidParameters", "primary_tested": ["Shape.fromNM(int,int)"], "external_dependencies": {"modules": ["Shape"]}, "category": "unit", "description": "Tests the creation of a Shape with valid parameters and verifies the number of hash functions and bits."}, {"name": "testFromNM_InvalidNumberOfItems", "primary_tested": ["Shape.fromNM(int,int)"], "external_dependencies": {"modules": ["Shape"]}, "category": "unit", "description": "Tests the handling of an invalid number of items by the Shape.fromNM method."}, {"name": "testFromNM_InvalidNumberOfBits", "primary_tested": ["Shape.fromNM(int,int)"], "external_dependencies": {"modules": ["Shape"]}, "category": "unit", "description": "Tests the handling of an invalid number of bits by the Shape.fromNM method."}, {"name": "testFromNM_InvalidProbability", "primary_tested": ["Shape.fromNM(int,int)"], "external_dependencies": {"modules": ["Shape"]}, "category": "unit", "description": "Tests the handling of an invalid probability by the Shape.fromNM method."}, {"name": "testFromNM_MaxValues", "primary_tested": ["Shape.fromNM(int,int)"], "external_dependencies": {"modules": ["Shape"]}, "category": "unit", "description": "Tests the creation of a Shape with maximum integer values for items and bits."}, {"name": "testFromNM_MinValues", "primary_tested": ["Shape.fromNM(int,int)"], "external_dependencies": {"modules": ["Shape"]}, "category": "unit", "description": "Tests the creation of a Shape with minimum integer values for items and bits."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/TreeList_getTest.java", "testclass_name": "TreeList_getTest", "dependencies": ["package org.apache.commons.collections4.list;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "TreeList_getTest", "description": "Unit tests for the get method of the TreeList class.", "class_members": {"variables": [{"name": "treeList", "type": "TreeList<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetValidIndex", "primary_tested": ["TreeList.get(int)"], "external_dependencies": {"modules": ["TreeList"], "class_members": [{"name": "treeList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method with valid indices."}, {"name": "testGetInvalidIndex", "primary_tested": ["TreeList.get(int)"], "external_dependencies": {"modules": ["TreeList"], "class_members": [{"name": "treeList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method with invalid indices, expecting an IndexOutOfBoundsException."}, {"name": "testGetAfterRemove", "primary_tested": ["TreeList.get(int)"], "associated_methods": ["TreeList.remove(int)"], "external_dependencies": {"modules": ["TreeList"], "class_members": [{"name": "treeList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method after removing an element from the list."}, {"name": "testGetAfterAdd", "primary_tested": ["TreeList.get(int)"], "associated_methods": ["TreeList.add(int,String)"], "external_dependencies": {"modules": ["TreeList"], "class_members": [{"name": "treeList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method after adding an element to the list."}, {"name": "testGetAfterSet", "primary_tested": ["TreeList.get(int)"], "associated_methods": ["TreeList.set(int,String)"], "external_dependencies": {"modules": ["TreeList"], "class_members": [{"name": "treeList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method after setting an element in the list."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/multimap/TransformedMultiValuedMap_transformedMapTest.java", "testclass_name": "TransformedMultiValuedMap_transformedMapTest", "dependencies": ["package org.apache.commons.collections4.multimap;", "import org.apache.commons.collections4.MultiValuedMap;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;"], "name": "TransformedMultiValuedMap_transformedMapTest", "description": "Unit tests for the TransformedMultiValuedMap class, specifically focusing on the transformedMap method.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testTransformedMapWithNonEmptyMap", "primary_tested": ["TransformedMultiValuedMap.transformedMap(MultiValuedMap,Transformer,Transformer)"], "associated_methods": ["MultiValuedMap.isEmpty()", "MultiValuedMap.clear()", "MultiValuedMap.putAll(MultiValuedMap)"], "external_dependencies": {"modules": ["MultiValuedMap", "Transformer", "TransformedMultiValuedMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformedMap method with a non-empty original map, verifying that the map is not cleared and no elements are added."}, {"name": "testTransformedMapWithEmptyMap", "primary_tested": ["TransformedMultiValuedMap.transformedMap(MultiValuedMap,Transformer,Transformer)"], "associated_methods": ["MultiValuedMap.isEmpty()", "MultiValuedMap.clear()", "MultiValuedMap.putAll(MultiValuedMap)"], "external_dependencies": {"modules": ["MultiValuedMap", "Transformer", "TransformedMultiValuedMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformedMap method with an empty original map, verifying that the map is not cleared and no elements are added."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/SetUniqueList_addAllTest.java", "testclass_name": "SetUniqueList_addAllTest", "dependencies": ["package org.apache.commons.collections4.list;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SetUniqueList_addAllTest", "description": "Unit tests for the addAll method of SetUniqueList with index.", "class_members": {"variables": [{"name": "uniqueList", "type": "SetUniqueList<Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAddAllWithIndex", "primary_tested": ["SetUniqueList.addAll(int,Collection)"], "external_dependencies": {"modules": ["SetUniqueList", "Arrays", "Collection"], "class_members": [{"name": "uniqueList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests adding a collection to the list at a specified index."}, {"name": "testAddAllWithIndexDuplicates", "primary_tested": ["SetUniqueList.addAll(int,Collection)"], "external_dependencies": {"modules": ["SetUniqueList", "Arrays", "Collection"], "class_members": [{"name": "uniqueList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests adding a collection with duplicates to the list at a specified index."}, {"name": "testAddAllWithIndexEmptyCollection", "primary_tested": ["SetUniqueList.addAll(int,Collection)"], "external_dependencies": {"modules": ["SetUniqueList", "Collection"], "class_members": [{"name": "uniqueList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests adding an empty collection to the list at a specified index."}, {"name": "testAddAllWithIndexMixedDuplicates", "primary_tested": ["SetUniqueList.addAll(int,Collection)"], "associated_methods": ["SetUniqueList.addAll(Collection)"], "external_dependencies": {"modules": ["SetUniqueList", "Arrays", "Collection"], "class_members": [{"name": "uniqueList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests adding a collection with mixed duplicates to the list at a specified index."}, {"name": "testAddAllWithIndexAtEnd", "primary_tested": ["SetUniqueList.addAll(int,Collection)"], "associated_methods": ["SetUniqueList.addAll(Collection)", "SetUniqueList.size()"], "external_dependencies": {"modules": ["SetUniqueList", "Arrays", "Collection"], "class_members": [{"name": "uniqueList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests adding a collection to the end of the list."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/TreeList_listIteratorTest.java", "testclass_name": "TreeList_listIteratorTest", "dependencies": ["package org.apache.commons.collections4.list;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ListIterator;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "TreeList_listIteratorTest", "description": "Unit tests for the list iterator functionality of the TreeList class.", "class_members": {"variables": [{"name": "treeList", "type": "TreeList<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testListIterator", "primary_tested": ["TreeList.listIterator()"], "external_dependencies": {"modules": ["TreeList", "ListIterator"], "class_members": [{"name": "treeList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the basic functionality of the list iterator, including hasNext and next methods."}, {"name": "testListIteratorWithIndex", "primary_tested": ["TreeList.listIterator(int)"], "external_dependencies": {"modules": ["TreeList", "ListIterator"], "class_members": [{"name": "treeList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the list iterator starting from a specific index."}, {"name": "testListIteratorPrevious", "primary_tested": ["TreeList.listIterator(int)"], "external_dependencies": {"modules": ["TreeList", "ListIterator"], "class_members": [{"name": "treeList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the previous functionality of the list iterator."}, {"name": "testListIteratorAdd", "primary_tested": ["TreeList.listIterator()"], "associated_methods": ["ListIterator.add(String)"], "external_dependencies": {"modules": ["TreeList", "ListIterator"], "class_members": [{"name": "treeList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the add functionality of the list iterator."}, {"name": "testListIteratorRemove", "primary_tested": ["TreeList.listIterator()"], "associated_methods": ["ListIterator.remove()"], "external_dependencies": {"modules": ["TreeList", "ListIterator"], "class_members": [{"name": "treeList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the remove functionality of the list iterator."}, {"name": "testListIteratorSet", "primary_tested": ["TreeList.listIterator()"], "associated_methods": ["ListIterator.set(String)"], "external_dependencies": {"modules": ["TreeList", "ListIterator"], "class_members": [{"name": "treeList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the set functionality of the list iterator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/FixedSizeList_subListTest.java", "testclass_name": "FixedSizeList_subListTest", "dependencies": ["package org.apache.commons.collections4.list;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "FixedSizeList_subListTest", "description": "Unit tests for the subList functionality of the FixedSizeList class.", "class_members": {"variables": [{"name": "fixedSizeList", "type": "FixedSizeList<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testSubListValidRange", "primary_tested": ["FixedSizeList.subList(int,int)"], "associated_methods": ["List.size()", "List.get(int)"], "external_dependencies": {"modules": ["FixedSizeList", "List"], "class_members": [{"name": "fixedSizeList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the subList functionality with a valid range."}, {"name": "testSubListInvalidRange", "primary_tested": ["FixedSizeList.subList(int,int)"], "external_dependencies": {"modules": ["FixedSizeList"], "class_members": [{"name": "fixedSizeList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the subList functionality with an invalid range, expecting an IndexOutOfBoundsException."}, {"name": "testSubListEmptyRange", "primary_tested": ["FixedSizeList.subList(int,int)"], "associated_methods": ["List.size()"], "external_dependencies": {"modules": ["FixedSizeList", "List"], "class_members": [{"name": "fixedSizeList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the subList functionality with an empty range."}, {"name": "testSubListFullRange", "primary_tested": ["FixedSizeList.subList(int,int)"], "associated_methods": ["List.size()", "List.get(int)"], "external_dependencies": {"modules": ["FixedSizeList", "List"], "class_members": [{"name": "fixedSizeList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the subList functionality with a full range."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/TreeList_indexOfTest.java", "testclass_name": "TreeList_indexOfTest", "dependencies": ["package org.apache.commons.collections4.list;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "TreeList_indexOfTest", "description": "Unit tests for the indexOf method of the TreeList class.", "class_members": {"variables": [{"name": "treeList", "type": "TreeList<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testIndexOfWithEmptyList", "primary_tested": ["TreeList.indexOf(String)"], "external_dependencies": {"modules": ["TreeList"], "class_members": [{"name": "treeList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the indexOf method with an empty list, expecting -1."}, {"name": "testIndexOfWithElementPresent", "primary_tested": ["TreeList.indexOf(String)"], "associated_methods": ["TreeList.add(String)"], "external_dependencies": {"modules": ["TreeList"], "class_members": [{"name": "treeList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the indexOf method with an element present in the list, expecting the correct index."}, {"name": "testIndexOfWithElementNotPresent", "primary_tested": ["TreeList.indexOf(String)"], "associated_methods": ["TreeList.add(String)"], "external_dependencies": {"modules": ["TreeList"], "class_members": [{"name": "treeList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the indexOf method with an element not present in the list, expecting -1."}, {"name": "testIndexOfWithNullElement", "primary_tested": ["TreeList.indexOf(String)"], "associated_methods": ["TreeList.add(String)", "TreeList.get(int)"], "external_dependencies": {"modules": ["TreeList"], "class_members": [{"name": "treeList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the indexOf method with a null element in the list, expecting the correct index."}, {"name": "testIndexOfWithMultipleNullElements", "primary_tested": ["TreeList.indexOf(String)"], "associated_methods": ["TreeList.add(String)"], "external_dependencies": {"modules": ["TreeList"], "class_members": [{"name": "treeList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the indexOf method with multiple null elements in the list, expecting the correct index."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/keyvalue/DefaultKeyValue_setValueTest.java", "testclass_name": "DefaultKeyValue_setValueTest", "dependencies": ["package org.apache.commons.collections4.keyvalue;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "DefaultKeyValue_setValueTest", "description": "Unit tests for the setValue method of DefaultKeyValue.", "class_members": {"variables": [{"name": "defaultKeyValue", "type": "DefaultKeyValue<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testSetValueSuccess", "primary_tested": ["DefaultKeyValue.setValue(String)"], "associated_methods": ["DefaultKeyValue.getValue()"], "external_dependencies": {"modules": ["DefaultKeyValue"], "class_members": [{"name": "defaultKeyValue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful setting of a new value in DefaultKeyValue and verifies the old value."}, {"name": "testSetValueSelfReference", "primary_tested": ["DefaultKeyValue.setValue(Object)"], "external_dependencies": {"modules": ["DefaultKeyValue"], "class_members": [{"name": "defaultKeyValue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that setting the value to the DefaultKeyValue instance itself throws an IllegalArgumentException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/SetUniqueList_retainAllTest.java", "testclass_name": "SetUniqueList_retainAllTest", "dependencies": ["package org.apache.commons.collections4.list;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.List;", "import java.util.Set;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SetUniqueList_retainAllTest", "description": "Unit tests for the retainAll method of SetUniqueList.", "class_members": {"variables": [{"name": "setUniqueList", "type": "SetUniqueList<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRetainAllWithMatchingElements", "primary_tested": ["SetUniqueList.retainAll(Collection)"], "external_dependencies": {"modules": ["SetUniqueList", "HashSet", "Arrays"], "class_members": [{"name": "setUniqueList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retainAll method with a collection containing matching elements."}, {"name": "testRetainAllWithNoMatchingElements", "primary_tested": ["SetUniqueList.retainAll(Collection)"], "external_dependencies": {"modules": ["SetUniqueList", "HashSet", "Arrays"], "class_members": [{"name": "setUniqueList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retainAll method with a collection containing no matching elements."}, {"name": "testRetainAllWithAllElementsMatching", "primary_tested": ["SetUniqueList.retainAll(Collection)"], "external_dependencies": {"modules": ["SetUniqueList", "HashSet", "Arrays"], "class_members": [{"name": "setUniqueList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retainAll method with a collection containing all matching elements."}, {"name": "testRetainAllWithEmptyCollection", "primary_tested": ["SetUniqueList.retainAll(Collection)"], "external_dependencies": {"modules": ["SetUniqueList", "HashSet"], "class_members": [{"name": "setUniqueList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retainAll method with an empty collection."}, {"name": "testRetainAllWithNullCollection", "primary_tested": ["SetUniqueList.retainAll(Collection)"], "external_dependencies": {"modules": ["SetUniqueList"], "class_members": [{"name": "setUniqueList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retainAll method with a null collection, expecting a NullPointerException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/TreeList_removeTest.java", "testclass_name": "TreeList_removeTest", "dependencies": ["package org.apache.commons.collections4.list;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "TreeList_removeTest", "description": "Unit tests for the remove functionality of the TreeList class.", "class_members": {"variables": [{"name": "treeList", "type": "TreeList<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveMiddleElement", "primary_tested": ["TreeList.remove(int)"], "associated_methods": ["TreeList.size()", "TreeList.get(int)"], "external_dependencies": {"modules": ["TreeList"], "class_members": [{"name": "treeList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of the middle element from the TreeList."}, {"name": "testRemoveFirstElement", "primary_tested": ["TreeList.remove(int)"], "associated_methods": ["TreeList.size()", "TreeList.get(int)"], "external_dependencies": {"modules": ["TreeList"], "class_members": [{"name": "treeList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of the first element from the TreeList."}, {"name": "testRemoveLastElement", "primary_tested": ["TreeList.remove(int)"], "associated_methods": ["TreeList.size()", "TreeList.get(int)"], "external_dependencies": {"modules": ["TreeList"], "class_members": [{"name": "treeList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of the last element from the TreeList."}, {"name": "testRemoveOutOfBounds", "primary_tested": ["TreeList.remove(int)"], "external_dependencies": {"modules": ["TreeList"], "class_members": [{"name": "treeList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of elements with indices out of bounds from the TreeList."}, {"name": "testRemoveFromEmptyList", "primary_tested": ["TreeList.remove(int)"], "external_dependencies": {"modules": ["TreeList"]}, "category": "unit", "description": "Tests the removal of an element from an empty TreeList."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/SetUniqueList_addTest.java", "testclass_name": "SetUniqueList_addTest", "dependencies": ["package org.apache.commons.collections4.list;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SetUniqueList_addTest", "description": "Unit tests for the add functionality of SetUniqueList.", "class_members": {"variables": [{"name": "uniqueList", "type": "SetUniqueList<Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAddUniqueElement", "primary_tested": ["SetUniqueList.add(Integer)"], "external_dependencies": {"modules": ["SetUniqueList", "ArrayList", "List"], "class_members": [{"name": "uniqueList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests adding a unique element to the SetUniqueList."}, {"name": "testAddDuplicateElement", "primary_tested": ["SetUniqueList.add(Integer)"], "external_dependencies": {"modules": ["SetUniqueList", "ArrayList", "List"], "class_members": [{"name": "uniqueList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests adding a duplicate element to the SetUniqueList."}, {"name": "testAddNullElement", "primary_tested": ["SetUniqueList.add(Integer)"], "external_dependencies": {"modules": ["SetUniqueList", "ArrayList", "List"], "class_members": [{"name": "uniqueList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests adding a null element to the SetUniqueList."}, {"name": "testAddMultipleElements", "primary_tested": ["SetUniqueList.add(Integer)"], "external_dependencies": {"modules": ["SetUniqueList", "ArrayList", "List"], "class_members": [{"name": "uniqueList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests adding multiple unique elements to the SetUniqueList."}, {"name": "testAddMixedElements", "primary_tested": ["SetUniqueList.add(Integer)"], "external_dependencies": {"modules": ["SetUniqueList", "ArrayList", "List"], "class_members": [{"name": "uniqueList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests adding a mix of unique and duplicate elements (including null) to the SetUniqueList."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/Shape_estimateNTest.java", "testclass_name": "Shape_estimateNTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Shape_estimateNTest", "description": "Unit tests for the estimateN method of the Shape class in Apache Commons Collections4 Bloom Filter.", "class_members": {"variables": [{"name": "shape", "type": "Shape"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEstimateN_ZeroCardinality", "primary_tested": ["Shape.estimateN(int)"], "external_dependencies": {"modules": ["Shape"], "class_members": [{"name": "shape", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the estimateN method with zero cardinality."}, {"name": "testEstimateN_HalfCardinality", "primary_tested": ["Shape.estimateN(int)"], "external_dependencies": {"modules": ["Shape"], "class_members": [{"name": "shape", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the estimateN method with half of the maximum cardinality."}, {"name": "testEstimateN_FullCardinality", "primary_tested": ["Shape.estimateN(int)"], "external_dependencies": {"modules": ["Shape"], "class_members": [{"name": "shape", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the estimateN method with full cardinality."}, {"name": "testEstimateN_ExceedsCardinality", "primary_tested": ["Shape.estimateN(int)"], "external_dependencies": {"modules": ["Shape"], "class_members": [{"name": "shape", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the estimateN method with cardinality exceeding the maximum."}, {"name": "testEstimateN_DifferentShape", "primary_tested": ["Shape.estimateN(int)"], "external_dependencies": {"modules": ["Shape"], "class_members": [{"name": "shape", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the estimateN method with a different shape configuration."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/SimpleBloomFilter_cardinalityTest.java", "testclass_name": "SimpleBloomFilter_cardinalityTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SimpleBloomFilter_cardinalityTest", "description": "Unit tests for the cardinality functionality of the SimpleBloomFilter class.", "class_members": {"variables": [{"name": "filter", "type": "SimpleBloomFilter"}, {"name": "testShape", "type": "Shape"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testCardinalityInitialState", "primary_tested": ["SimpleBloomFilter.cardinality()"], "external_dependencies": {"modules": ["SimpleBloomFilter"], "class_members": [{"name": "filter", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the initial state of the cardinality of the SimpleBloomFilter."}, {"name": "testCardinalityAfterMerge", "primary_tested": ["SimpleBloomFilter.cardinality()"], "associated_methods": ["SimpleBloomFilter.merge(BitMapExtractor)"], "external_dependencies": {"modules": ["SimpleBloomFilter", "BitMapExtractor"], "class_members": [{"name": "filter", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the cardinality of the SimpleBloomFilter after merging a BitMapExtractor."}, {"name": "testCardinalityAfterMultipleMerges", "primary_tested": ["SimpleBloomFilter.cardinality()"], "associated_methods": ["SimpleBloomFilter.merge(BitMapExtractor)"], "external_dependencies": {"modules": ["SimpleBloomFilter", "BitMapExtractor"], "class_members": [{"name": "filter", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the cardinality of the SimpleBloomFilter after multiple merges of BitMapExtractors."}, {"name": "testCardinalityAfterClear", "primary_tested": ["SimpleBloomFilter.cardinality()"], "associated_methods": ["SimpleBloomFilter.merge(BitMapExtractor)", "SimpleBloomFilter.clear()"], "external_dependencies": {"modules": ["SimpleBloomFilter", "BitMapExtractor"], "class_members": [{"name": "filter", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the cardinality of the SimpleBloomFilter after merging a BitMapExtractor and then clearing the filter."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/Shape_getProbabilityTest.java", "testclass_name": "Shape_getProbabilityTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Shape_getProbabilityTest", "description": "Unit tests for the getProbability method of the Shape class in the Apache Commons Collections4 library.", "class_members": {"variables": [{"name": "shape", "type": "Shape"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetProbabilityWithNegativeNumberOfItems", "primary_tested": ["Shape.getProbability(int)"], "external_dependencies": {"modules": ["Shape"], "class_members": [{"name": "shape", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that an IllegalArgumentException is thrown when the number of items is negative."}, {"name": "testGetProbabilityWithZeroNumberOfItems", "primary_tested": ["Shape.getProbability(int)"], "external_dependencies": {"modules": ["Shape"], "class_members": [{"name": "shape", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the probability is 0.0 when the number of items is zero."}, {"name": "testGetProbabilityWithValidNumberOfItems", "primary_tested": ["Shape.getProbability(int)"], "external_dependencies": {"modules": ["Shape"], "class_members": [{"name": "shape", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the probability is between 0.0 and 1.0 for a valid number of items."}, {"name": "testGetProbabilityWithMaxNumberOfItems", "primary_tested": ["Shape.getProbability(int)"], "external_dependencies": {"modules": ["Shape"], "class_members": [{"name": "shape", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the probability is between 0.0 and 1.0 for the maximum number of items."}, {"name": "testGetProbabilityWithLargeNumberOfItems", "primary_tested": ["Shape.getProbability(int)"], "external_dependencies": {"modules": ["Shape"], "class_members": [{"name": "shape", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the probability is between 0.0 and 1.0 for a large number of items."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/SimpleBloomFilter_mergeTest.java", "testclass_name": "SimpleBloomFilter_mergeTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SimpleBloomFilter_mergeTest", "description": "Unit tests for the merge functionality of the SimpleBloomFilter class.", "class_members": {"variables": [{"name": "filter", "type": "SimpleBloomFilter"}, {"name": "shape", "type": "Shape"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testMergeValidBitMapExtractor", "primary_tested": ["SimpleBloomFilter.merge(BitMapExtractor)"], "external_dependencies": {"modules": ["SimpleBloomFilter", "BitMapExtractor"], "class_members": [{"name": "filter", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the merge functionality with a valid BitMapExtractor that sets all bits in the first long."}, {"name": "testMergeInvalidBitMapExtractor", "primary_tested": ["SimpleBloomFilter.merge(BitMapExtractor)"], "external_dependencies": {"modules": ["SimpleBloomFilter", "BitMapExtractor"], "class_members": [{"name": "filter", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the merge functionality with an invalid BitMapExtractor that sets bits exceeding the limit, expecting an IllegalArgumentException."}, {"name": "testMergeBitMapExtractorWithExcessBits", "primary_tested": ["SimpleBloomFilter.merge(BitMapExtractor)"], "external_dependencies": {"modules": ["SimpleBloomFilter", "BitMapExtractor"], "class_members": [{"name": "filter", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the merge functionality with a BitMapExtractor that sets a bit higher than the limit for the shape, expecting an IllegalArgumentException."}, {"name": "testMergeBitMapExtractorWithIndexOutOfBounds", "primary_tested": ["SimpleBloomFilter.merge(BitMapExtractor)"], "external_dependencies": {"modules": ["SimpleBloomFilter", "BitMapExtractor"], "class_members": [{"name": "filter", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the merge functionality with a BitMapExtractor that sets bits exceeding the limit and throws an IndexOutOfBoundsException, expecting an IllegalArgumentException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/SimpleBloomFilter_processBitMapsTest.java", "testclass_name": "SimpleBloomFilter_processBitMapsTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SimpleBloomFilter_processBitMapsTest", "description": "Unit tests for the processBitMaps method in the SimpleBloomFilter class.", "class_members": {"variables": [{"name": "filter", "type": "SimpleBloomFilter"}], "methods": [{"name": "getTestShape", "signature": "Shape getTestShape()"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testProcessBitMapsAllTrue", "primary_tested": ["SimpleBloomFilter.processBitMaps(LongPredicate)"], "associated_methods": ["SimpleBloomFilter.merge(BitMapExtractor)"], "external_dependencies": {"modules": ["SimpleBloomFilter", "BitMapExtractor", "LongPredicate"], "class_members": [{"name": "filter", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the processBitMaps method with a predicate that should return true for all bits."}, {"name": "testProcessBitMapsOneFalse", "primary_tested": ["SimpleBloomFilter.processBitMaps(LongPredicate)"], "associated_methods": ["SimpleBloomFilter.merge(BitMapExtractor)"], "external_dependencies": {"modules": ["SimpleBloomFilter", "BitMapExtractor", "LongPredicate"], "class_members": [{"name": "filter", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the processBitMaps method with a predicate that should return false for one bit."}, {"name": "testProcessBitMapsEmptyFilter", "primary_tested": ["SimpleBloomFilter.processBitMaps(LongPredicate)"], "external_dependencies": {"modules": ["SimpleBloomFilter", "LongPredicate"], "class_members": [{"name": "filter", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the processBitMaps method with an empty filter."}, {"name": "testProcessBitMapsNullConsumer", "primary_tested": ["SimpleBloomFilter.processBitMaps(LongPredicate)"], "external_dependencies": {"modules": ["SimpleBloomFilter", "LongPredicate"], "class_members": [{"name": "filter", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the processBitMaps method with a null consumer, expecting a NullPointerException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/keyvalue/DefaultKeyValue_hashCodeTest.java", "testclass_name": "DefaultKeyValue_hashCodeTest", "dependencies": ["package org.apache.commons.collections4.keyvalue;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "DefaultKeyValue_hashCodeTest", "description": "Unit tests for the hashCode method of DefaultKeyValue class with different key and value combinations.", "class_members": {"variables": [{"name": "defaultKeyValue", "type": "DefaultKeyValue<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testHashCodeWithNonNullKeyAndValue", "primary_tested": ["DefaultKeyValue.hashCode()"], "external_dependencies": {"modules": ["DefaultKeyValue"], "class_members": [{"name": "defaultKeyValue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hashCode method with non-null key and value."}, {"name": "testHashCodeWithNullKeyAndNonNullValue", "primary_tested": ["DefaultKeyValue.hashCode()"], "external_dependencies": {"modules": ["DefaultKeyValue"], "class_members": [{"name": "defaultKeyValue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hashCode method with null key and non-null value."}, {"name": "testHashCodeWithNonNullKeyAndNullValue", "primary_tested": ["DefaultKeyValue.hashCode()"], "external_dependencies": {"modules": ["DefaultKeyValue"], "class_members": [{"name": "defaultKeyValue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hashCode method with non-null key and null value."}, {"name": "testHashCodeWithNullKeyAndNullValue", "primary_tested": ["DefaultKeyValue.hashCode()"], "external_dependencies": {"modules": ["DefaultKeyValue"], "class_members": [{"name": "defaultKeyValue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hashCode method with null key and null value."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/LayerManager_getTargetTest.java", "testclass_name": "LayerManager_getTargetTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import java.util.function.Predicate;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "LayerManager_getTargetTest", "description": "Tests for the getTarget method of the LayerManager class.", "class_members": {"variables": [{"name": "layerManager", "type": "LayerManager<BloomFilter>"}, {"name": "shape", "type": "Shape"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetTargetWhenExtendCheckIsFalse", "primary_tested": ["LayerManager.getTarget()"], "associated_methods": ["LayerManager.last()"], "external_dependencies": {"modules": ["LayerManager", "SimpleBloomFilter", "Shape", "Predicate"], "class_members": [{"name": "layerManager", "type": "variable"}, {"name": "shape", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getTarget method when the extendCheck predicate returns false."}, {"name": "testGetTargetWhenExtendCheckIsTrue", "primary_tested": ["LayerManager.getTarget()"], "associated_methods": ["LayerManager.last()"], "external_dependencies": {"modules": ["LayerManager", "SimpleBloomFilter", "Shape", "Predicate"], "class_members": [{"name": "layerManager", "type": "variable"}, {"name": "shape", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getTarget method when the extendCheck predicate returns true."}, {"name": "testGetTargetAfterNext", "primary_tested": ["LayerManager.getTarget()"], "associated_methods": ["LayerManager.last()", "LayerManager.next()"], "external_dependencies": {"modules": ["LayerManager", "SimpleBloomFilter", "Shape", "Predicate"], "class_members": [{"name": "layerManager", "type": "variable"}, {"name": "shape", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getTarget method after calling the next method."}, {"name": "testGetTargetWithEmptyFilters", "primary_tested": ["LayerManager.getTarget()"], "associated_methods": ["LayerManager.last()", "LayerManager.clear()"], "external_dependencies": {"modules": ["LayerManager", "SimpleBloomFilter", "Shape"], "class_members": [{"name": "layerManager", "type": "variable"}, {"name": "shape", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getTarget method when the LayerManager has empty filters."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/keyvalue/TiedMapEntry_hashCodeTest.java", "testclass_name": "TiedMapEntry_hashCodeTest", "dependencies": ["package org.apache.commons.collections4.keyvalue;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "TiedMapEntry_hashCodeTest", "description": "Unit tests for the hashCode method of TiedMapEntry class.", "class_members": {"variables": [{"name": "map", "type": "Map<String, String>"}, {"name": "entry", "type": "TiedMapEntry<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testHashCodeWithNonNullKeyAndValue", "primary_tested": ["TiedMapEntry.hashCode()"], "external_dependencies": {"modules": ["TiedMapEntry", "Map"], "class_members": [{"name": "entry", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hashCode method with non-null key and value."}, {"name": "testHashCodeWithNullKey", "primary_tested": ["TiedMapEntry.hashCode()"], "external_dependencies": {"modules": ["TiedMapEntry", "Map"], "class_members": [{"name": "entry", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the hashCode method with a null key."}, {"name": "testHashCodeWithNullValue", "primary_tested": ["TiedMapEntry.hashCode()"], "external_dependencies": {"modules": ["TiedMapEntry", "Map"], "class_members": [{"name": "entry", "type": "variable"}, {"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hashCode method with a null value."}, {"name": "testHashCodeWithNullKeyAndValue", "primary_tested": ["TiedMapEntry.hashCode()"], "external_dependencies": {"modules": ["TiedMapEntry", "Map"], "class_members": [{"name": "entry", "type": "variable"}, {"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the hashCode method with both null key and value."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/Shape_equalsTest.java", "testclass_name": "Shape_equalsTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "Shape_equalsTest", "description": "Unit tests for the equals and hashCode methods of the Shape class.", "class_members": {"variables": [{"name": "shape1", "type": "Shape"}, {"name": "shape2", "type": "Shape"}, {"name": "shape3", "type": "Shape"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEquals_SameObject", "primary_tested": ["Shape.equals(Object)"], "external_dependencies": {"modules": ["Shape"], "class_members": [{"name": "shape1", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method for the same object."}, {"name": "testEquals_EqualObjects", "primary_tested": ["Shape.equals(Object)"], "external_dependencies": {"modules": ["Shape"], "class_members": [{"name": "shape1", "type": "variable"}, {"name": "shape2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method for equal objects."}, {"name": "testEquals_DifferentObjects", "primary_tested": ["Shape.equals(Object)"], "external_dependencies": {"modules": ["Shape"], "class_members": [{"name": "shape1", "type": "variable"}, {"name": "shape3", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method for different objects."}, {"name": "testEquals_DifferentClass", "primary_tested": ["Shape.equals(Object)"], "external_dependencies": {"modules": ["Shape"], "class_members": [{"name": "shape1", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method for objects of different classes."}, {"name": "testEquals_Null", "primary_tested": ["Shape.equals(Object)"], "external_dependencies": {"modules": ["Shape"], "class_members": [{"name": "shape1", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method for null comparison."}, {"name": "testHashCode_EqualObjects", "primary_tested": ["Shape.hashCode()"], "external_dependencies": {"modules": ["Shape"], "class_members": [{"name": "shape1", "type": "variable"}, {"name": "shape2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hashCode method for equal objects."}, {"name": "testHashCode_DifferentObjects", "primary_tested": ["Shape.hashCode()"], "external_dependencies": {"modules": ["Shape"], "class_members": [{"name": "shape1", "type": "variable"}, {"name": "shape3", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hashCode method for different objects."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/EnhancedDoubleHasher_indicesTest.java", "testclass_name": "EnhancedDoubleHasher_indicesTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.function.IntPredicate;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "EnhancedDoubleHasher_indicesTest", "description": "Unit tests for the EnhancedDoubleHasher class, focusing on the indices method and related functionalities.", "class_members": {"variables": [{"name": "hasher", "type": "EnhancedDoubleHasher"}, {"name": "shape", "type": "Shape"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testIndicesNonNullShape", "primary_tested": ["EnhancedDoubleHasher.indices(Shape)"], "external_dependencies": {"modules": ["EnhancedDoubleHasher", "Shape"], "class_members": [{"name": "hasher", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that a NullPointerException is thrown when passing a null Shape to the indices method."}, {"name": "testAsIndexArray", "primary_tested": ["IndexExtractor.asIndexArray()"], "associated_methods": ["Shape.getNumberOfHashFunctions()", "Shape.getNumberOfBits()"], "external_dependencies": {"modules": ["EnhancedDoubleHasher", "Shape", "IndexExtractor"], "class_members": [{"name": "hasher", "type": "variable"}, {"name": "shape", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the asIndexArray method of IndexExtractor to ensure indices are within the valid range."}, {"name": "testProcessIndicesNonNullConsumer", "primary_tested": ["IndexExtractor.processIndices(IntPredicate)"], "external_dependencies": {"modules": ["EnhancedDoubleHasher", "Shape", "IndexExtractor"], "class_members": [{"name": "hasher", "type": "variable"}, {"name": "shape", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that a NullPointerException is thrown when passing a null IntPredicate to the processIndices method."}, {"name": "testProcessIndicesValidConsumer", "primary_tested": ["IndexExtractor.processIndices(IntPredicate)"], "associated_methods": ["Shape.getNumberOfBits()"], "external_dependencies": {"modules": ["EnhancedDoubleHasher", "Shape", "IndexExtractor"], "class_members": [{"name": "hasher", "type": "variable"}, {"name": "shape", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the processIndices method with a valid IntPredicate that ensures indices are within the valid range."}, {"name": "testProcessIndicesInvalidConsumer", "primary_tested": ["IndexExtractor.processIndices(IntPredicate)"], "external_dependencies": {"modules": ["EnhancedDoubleHasher", "Shape", "IndexExtractor"], "class_members": [{"name": "hasher", "type": "variable"}, {"name": "shape", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the processIndices method with an invalid IntPredicate that ensures indices are out of the valid range."}, {"name": "testProcessIndicesWithKGreaterThanBits", "primary_tested": ["IndexExtractor.processIndices(IntPredicate)"], "associated_methods": ["Shape.getNumberOfBits()"], "external_dependencies": {"modules": ["EnhancedDoubleHasher", "Shape", "IndexExtractor"], "class_members": [{"name": "hasher", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the processIndices method with a Shape where K is greater than the number of bits."}, {"name": "testProcessIndicesWithKLessThanBits", "primary_tested": ["IndexExtractor.processIndices(IntPredicate)"], "associated_methods": ["Shape.getNumberOfBits()"], "external_dependencies": {"modules": ["EnhancedDoubleHasher", "Shape", "IndexExtractor"], "class_members": [{"name": "hasher", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the processIndices method with a Shape where K is less than the number of bits."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/keyvalue/DefaultKeyValue_equalsTest.java", "testclass_name": "DefaultKeyValue_equalsTest", "dependencies": ["package org.apache.commons.collections4.keyvalue;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "DefaultKeyValue_equalsTest", "description": "Unit tests for the equals method of the DefaultKeyValue class.", "class_members": {"variables": [{"name": "kv1", "type": "DefaultKeyValue<String, String>"}, {"name": "kv2", "type": "DefaultKeyValue<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEqualsSameObject", "primary_tested": ["DefaultKeyValue.equals(Object)"], "external_dependencies": {"modules": ["DefaultKeyValue"], "class_members": [{"name": "kv1", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing the same object."}, {"name": "testEqualsDifferentType", "primary_tested": ["DefaultKeyValue.equals(Object)"], "external_dependencies": {"modules": ["DefaultKeyValue"], "class_members": [{"name": "kv1", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing with a different type."}, {"name": "testEqualsSameKeyAndValue", "primary_tested": ["DefaultKeyValue.equals(Object)"], "external_dependencies": {"modules": ["DefaultKeyValue"], "class_members": [{"name": "kv1", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing objects with the same key and value."}, {"name": "testEqualsDifferentKey", "primary_tested": ["DefaultKeyValue.equals(Object)"], "external_dependencies": {"modules": ["DefaultKeyValue"], "class_members": [{"name": "kv1", "type": "variable"}, {"name": "kv2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing objects with different keys."}, {"name": "testEqualsNullKeyAndValue", "primary_tested": ["DefaultKeyValue.equals(Object)"], "external_dependencies": {"modules": ["DefaultKeyValue"]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing objects with null keys and values."}, {"name": "testEqualsNullKeyNonNullValue", "primary_tested": ["DefaultKeyValue.equals(Object)"], "external_dependencies": {"modules": ["DefaultKeyValue"], "class_members": [{"name": "kv1", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing objects with a null key and a non-null value."}, {"name": "testEqualsNonNullKeyNullValue", "primary_tested": ["DefaultKeyValue.equals(Object)"], "external_dependencies": {"modules": ["DefaultKeyValue"], "class_members": [{"name": "kv1", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing objects with a non-null key and a null value."}, {"name": "testEqualsDifferentKeyNullValue", "primary_tested": ["DefaultKeyValue.equals(Object)"], "external_dependencies": {"modules": ["DefaultKeyValue"]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing objects with different keys and null values."}, {"name": "testEqualsNullKeyDifferentValue", "primary_tested": ["DefaultKeyValue.equals(Object)"], "external_dependencies": {"modules": ["DefaultKeyValue"]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing objects with null keys and different values."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/keyvalue/MultiKey_equalsTest.java", "testclass_name": "MultiKey_equalsTest", "dependencies": ["package org.apache.commons.collections4.keyvalue;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "MultiKey_equalsTest", "description": "Unit tests for the equals method of the MultiKey class.", "class_members": {"variables": [{"name": "ONE", "type": "Integer"}, {"name": "TWO", "type": "Integer"}, {"name": "THREE", "type": "Integer"}, {"name": "FOUR", "type": "Integer"}, {"name": "FIVE", "type": "Integer"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEqualsSameInstance", "primary_tested": ["MultiKey.equals(Object)"], "external_dependencies": {"modules": ["MultiKey"], "class_members": [{"name": "ONE", "type": "variable"}, {"name": "TWO", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing the same instance of MultiKey."}, {"name": "testEqualsDifferentType", "primary_tested": ["MultiKey.equals(Object)"], "external_dependencies": {"modules": ["MultiKey"], "class_members": [{"name": "ONE", "type": "variable"}, {"name": "TWO", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing a MultiKey with a different type."}, {"name": "testEqualsSameKeys", "primary_tested": ["MultiKey.equals(Object)"], "external_dependencies": {"modules": ["MultiKey"], "class_members": [{"name": "ONE", "type": "variable"}, {"name": "TWO", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing two MultiKeys with the same keys."}, {"name": "testEqualsDifferentKeys", "primary_tested": ["MultiKey.equals(Object)"], "external_dependencies": {"modules": ["MultiKey"], "class_members": [{"name": "ONE", "type": "variable"}, {"name": "TWO", "type": "variable"}, {"name": "THREE", "type": "variable"}, {"name": "FOUR", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing two MultiKeys with different keys."}, {"name": "testEqualsNullKeys", "primary_tested": ["MultiKey.equals(Object)"], "external_dependencies": {"modules": ["MultiKey"]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing two MultiKeys with null keys."}, {"name": "testEqualsMixedNullKeys", "primary_tested": ["MultiKey.equals(Object)"], "external_dependencies": {"modules": ["MultiKey"], "class_members": [{"name": "ONE", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing two MultiKeys with mixed null keys."}, {"name": "testEqualsDifferentLengthKeys", "primary_tested": ["MultiKey.equals(Object)"], "external_dependencies": {"modules": ["MultiKey"], "class_members": [{"name": "ONE", "type": "variable"}, {"name": "TWO", "type": "variable"}, {"name": "THREE", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing two MultiKeys with different lengths of keys."}, {"name": "testEqualsEmptyKeys", "primary_tested": ["MultiKey.equals(Object)"], "external_dependencies": {"modules": ["MultiKey"]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing two MultiKeys with empty keys."}]}]