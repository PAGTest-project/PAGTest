[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.map;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class CompositeMap_hashCodeTest {\n\n    private Map<String, String> one;\n    private Map<String, String> two;\n\n    @BeforeEach\n    public void setUp() {\n        one = new HashMap<>();\n        one.put(\"1\", \"one\");\n        one.put(\"2\", \"two\");\n\n        two = new HashMap<>();\n        two.put(\"3\", \"three\");\n        two.put(\"4\", \"four\");\n    }\n\n    @Test\n    public void testHashCodeWithEmptyCompositeMap() {\n        CompositeMap<String, String> map = new CompositeMap<>();\n        assertEquals(0, map.hashCode());\n    }\n\n    @Test\n    public void testHashCodeWithNonEmptyCompositeMap() {\n        CompositeMap<String, String> map = new CompositeMap<>(one, two);\n        int expectedHashCode = one.hashCode() + two.hashCode();\n        assertEquals(expectedHashCode, map.hashCode());\n    }\n\n    @Test\n    public void testHashCodeWithSingleMap() {\n        CompositeMap<String, String> map = new CompositeMap<>(one);\n        assertEquals(one.hashCode(), map.hashCode());\n    }\n\n    @Test\n    public void testHashCodeWithDuplicateKeys() {\n        Map<String, String> duplicateKeyMap = new HashMap<>();\n        duplicateKeyMap.put(\"1\", \"duplicateOne\");\n        CompositeMap<String, String> map = new CompositeMap<>(one, duplicateKeyMap);\n        int expectedHashCode = one.hashCode() + duplicateKeyMap.hashCode();\n        assertEquals(expectedHashCode, map.hashCode());\n    }\n\n    @Test\n    public void testHashCodeWithNullValues() {\n        one.put(\"5\", null);\n        CompositeMap<String, String> map = new CompositeMap<>(one, two);\n        int expectedHashCode = one.hashCode() + two.hashCode();\n        assertEquals(expectedHashCode, map.hashCode());\n    }\n}\n"}]