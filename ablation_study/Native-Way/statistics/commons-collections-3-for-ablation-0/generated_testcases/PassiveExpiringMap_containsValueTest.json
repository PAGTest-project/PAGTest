[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.map;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.concurrent.TimeUnit;\n\npublic class PassiveExpiringMap_containsValueTest {\n\n    private PassiveExpiringMap<Integer, String> expiringMap;\n\n    @BeforeEach\n    public void setUp() {\n        expiringMap = new PassiveExpiringMap<>(1, TimeUnit.SECONDS);\n    }\n\n    @Test\n    public void testContainsValue_ValuePresent() {\n        expiringMap.put(1, \"one\");\n        expiringMap.put(2, \"two\");\n        assertTrue(expiringMap.containsValue(\"one\"));\n    }\n\n    @Test\n    public void testContainsValue_ValueNotPresent() {\n        expiringMap.put(1, \"one\");\n        assertFalse(expiringMap.containsValue(\"three\"));\n    }\n\n    @Test\n    public void testContainsValue_ValueExpired() throws InterruptedException {\n        expiringMap.put(1, \"one\");\n        Thread.sleep(1500); // Wait for the entry to expire\n        assertFalse(expiringMap.containsValue(\"one\"));\n    }\n\n    @Test\n    public void testContainsValue_EmptyMap() {\n        assertFalse(expiringMap.containsValue(\"one\"));\n    }\n\n    @Test\n    public void testContainsValue_NullValue() {\n        expiringMap.put(1, null);\n        assertTrue(expiringMap.containsValue(null));\n    }\n\n    @Test\n    public void testContainsValue_MultipleValues() {\n        expiringMap.put(1, \"one\");\n        expiringMap.put(2, \"two\");\n        expiringMap.put(3, \"three\");\n        assertTrue(expiringMap.containsValue(\"two\"));\n    }\n\n    @Test\n    public void testContainsValue_MultipleValuesWithExpired() throws InterruptedException {\n        expiringMap.put(1, \"one\");\n        expiringMap.put(2, \"two\");\n        expiringMap.put(3, \"three\");\n        Thread.sleep(1500); // Wait for the entries to expire\n        assertFalse(expiringMap.containsValue(\"two\"));\n    }\n\n    @Test\n    public void testContainsValue_NeverExpire() {\n        expiringMap = new PassiveExpiringMap<>(-1L);\n        expiringMap.put(1, \"one\");\n        assertTrue(expiringMap.containsValue(\"one\"));\n    }\n\n    @Test\n    public void testContainsValue_AlwaysExpire() {\n        expiringMap = new PassiveExpiringMap<>(0L);\n        expiringMap.put(1, \"one\");\n        assertFalse(expiringMap.containsValue(\"one\"));\n    }\n}\n"}]