[{"strategy": "retry", "code": "\npackage org.apache.commons.collections4.set;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.List;\nimport java.util.Collection;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class CompositeSet_addTest {\n\n    private CompositeSet<String> compositeSet;\n    private Set<String> set1;\n    private Set<String> set2;\n\n    @BeforeEach\n    public void setUp() {\n        compositeSet = new CompositeSet<>();\n        set1 = new HashSet<>();\n        set2 = new HashSet<>();\n    }\n\n    @Test\n    public void testAddWithSetMutator() {\n        compositeSet.setMutator(new CompositeSet.SetMutator<String>() {\n            @Override\n            public boolean add(CompositeSet<String> comp, List<Set<String>> sets, String obj) {\n                sets.get(0).add(obj);\n                return true;\n            }\n\n            @Override\n            public boolean addAll(CompositeSet<String> comp, List<Set<String>> sets, Collection<? extends String> coll) {\n                return false;\n            }\n\n            @Override\n            public boolean remove(CompositeSet<String> comp, List<Set<String>> sets, Object obj) {\n                return false;\n            }\n\n            @Override\n            public void resolveCollision(CompositeSet<String> comp, Set<String> existing, Set<String> added, Collection<String> intersects) {\n                // Implementation not needed for this test\n            }\n        });\n        compositeSet.addComposited(set1);\n        assertTrue(compositeSet.add(\"element\"));\n        assertTrue(set1.contains(\"element\"));\n    }\n\n    @Test\n    public void testAddWithoutSetMutator() {\n        compositeSet.addComposited(set1);\n        assertThrows(UnsupportedOperationException.class, () -> compositeSet.add(\"element\"));\n    }\n\n    @Test\n    public void testAddWithNullSetMutator() {\n        compositeSet.setMutator(null);\n        compositeSet.addComposited(set1);\n        assertThrows(UnsupportedOperationException.class, () -> compositeSet.add(\"element\"));\n    }\n\n    @Test\n    public void testAddWithCollision() {\n        set1.add(\"element\");\n        set2.add(\"element\");\n        compositeSet.addComposited(set1);\n        compositeSet.addComposited(set2);\n        compositeSet.setMutator(new CompositeSet.SetMutator<String>() {\n            @Override\n            public boolean add(CompositeSet<String> comp, List<Set<String>> sets, String obj) {\n                sets.get(0).add(obj);\n                return true;\n            }\n\n            @Override\n            public boolean addAll(CompositeSet<String> comp, List<Set<String>> sets, Collection<? extends String> coll) {\n                return false;\n            }\n\n            @Override\n            public boolean remove(CompositeSet<String> comp, List<Set<String>> sets, Object obj) {\n                return false;\n            }\n\n            @Override\n            public void resolveCollision(CompositeSet<String> comp, Set<String> existing, Set<String> added, Collection<String> intersects) {\n                // Implementation not needed for this test\n            }\n        });\n        assertThrows(IllegalArgumentException.class, () -> compositeSet.add(\"element\"));\n    }\n}\n"}]