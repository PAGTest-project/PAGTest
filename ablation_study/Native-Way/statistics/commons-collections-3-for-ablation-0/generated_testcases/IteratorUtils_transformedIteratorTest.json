[{"strategy": "retry", "code": "\npackage org.apache.commons.collections4;\n\nimport org.apache.commons.collections4.functors.Transformer;\nimport org.apache.commons.collections4.iterators.ArrayIterator;\nimport org.apache.commons.collections4.iterators.TransformIterator;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.Iterator;\nimport java.util.NoSuchElementException;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass IteratorUtils_transformedIteratorTest {\n\n    @Test\n    void testTransformedIterator_NonNullInputs() {\n        Iterator<String> inputIterator = new ArrayIterator<>(new String[]{\"a\", \"b\", \"c\"});\n        Transformer<String, String> transformer = new Transformer<String, String>() {\n            @Override\n            public String transform(String input) {\n                return input.toUpperCase();\n            }\n        };\n\n        Iterator<String> transformedIterator = IteratorUtils.transformedIterator(inputIterator, transformer);\n\n        assertTrue(transformedIterator.hasNext());\n        assertEquals(\"A\", transformedIterator.next());\n        assertTrue(transformedIterator.hasNext());\n        assertEquals(\"B\", transformedIterator.next());\n        assertTrue(transformedIterator.hasNext());\n        assertEquals(\"C\", transformedIterator.next());\n        assertFalse(transformedIterator.hasNext());\n        assertThrows(NoSuchElementException.class, transformedIterator::next);\n    }\n\n    @Test\n    void testTransformedIterator_NullIterator() {\n        Transformer<String, String> transformer = new Transformer<String, String>() {\n            @Override\n            public String transform(String input) {\n                return input.toUpperCase();\n            }\n        };\n\n        assertThrows(NullPointerException.class, () -> {\n            IteratorUtils.transformedIterator(null, transformer);\n        });\n    }\n\n    @Test\n    void testTransformedIterator_NullTransformer() {\n        Iterator<String> inputIterator = new ArrayIterator<>(new String[]{\"a\", \"b\", \"c\"});\n\n        assertThrows(NullPointerException.class, () -> {\n            IteratorUtils.transformedIterator(inputIterator, null);\n        });\n    }\n}\n"}]