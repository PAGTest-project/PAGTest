[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4;\n\nimport org.apache.commons.collections4.functors.ConstantTransformer;\nimport org.apache.commons.collections4.functors.EqualPredicate;\nimport org.apache.commons.collections4.functors.ExceptionTransformer;\nimport org.apache.commons.collections4.functors.FalsePredicate;\nimport org.apache.commons.collections4.functors.NOPTransformer;\nimport org.apache.commons.collections4.functors.TruePredicate;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TransformerUtils_switchTransformerTest {\n\n    @Test\n    public void testSwitchTransformerWithTruePredicate() {\n        Predicate<Object> truePredicate = TruePredicate.truePredicate();\n        Predicate<Object> falsePredicate = FalsePredicate.falsePredicate();\n        Transformer<Object, String> trueTransformer = ConstantTransformer.constantTransformer(\"True\");\n        Transformer<Object, String> falseTransformer = ConstantTransformer.constantTransformer(\"False\");\n\n        Transformer<Object, String> transformer = TransformerUtils.switchTransformer(truePredicate, trueTransformer, falseTransformer);\n\n        assertEquals(\"True\", transformer.transform(new Object()));\n    }\n\n    @Test\n    public void testSwitchTransformerWithFalsePredicate() {\n        Predicate<Object> truePredicate = TruePredicate.truePredicate();\n        Predicate<Object> falsePredicate = FalsePredicate.falsePredicate();\n        Transformer<Object, String> trueTransformer = ConstantTransformer.constantTransformer(\"True\");\n        Transformer<Object, String> falseTransformer = ConstantTransformer.constantTransformer(\"False\");\n\n        Transformer<Object, String> transformer = TransformerUtils.switchTransformer(falsePredicate, trueTransformer, falseTransformer);\n\n        assertEquals(\"False\", transformer.transform(new Object()));\n    }\n\n    @Test\n    public void testSwitchTransformerWithEqualPredicate() {\n        Predicate<Object> equalPredicate = EqualPredicate.equalPredicate(\"Match\");\n        Transformer<Object, String> matchTransformer = ConstantTransformer.constantTransformer(\"Matched\");\n        Transformer<Object, String> defaultTransformer = ConstantTransformer.constantTransformer(\"Default\");\n\n        Transformer<Object, String> transformer = TransformerUtils.switchTransformer(equalPredicate, matchTransformer, defaultTransformer);\n\n        assertEquals(\"Matched\", transformer.transform(\"Match\"));\n        assertEquals(\"Default\", transformer.transform(\"NoMatch\"));\n    }\n\n    @Test\n    public void testSwitchTransformerWithExceptionTransformer() {\n        Predicate<Object> truePredicate = TruePredicate.truePredicate();\n        Transformer<Object, Object> exceptionTransformer = ExceptionTransformer.exceptionTransformer();\n        Transformer<Object, Object> nopTransformer = NOPTransformer.nopTransformer();\n\n        Transformer<Object, Object> transformer = TransformerUtils.switchTransformer(truePredicate, exceptionTransformer, nopTransformer);\n\n        assertThrows(FunctorException.class, () -> transformer.transform(new Object()));\n    }\n\n    @Test\n    public void testSwitchTransformerWithNullDefault() {\n        Predicate<Object> truePredicate = TruePredicate.truePredicate();\n        Transformer<Object, Object> nopTransformer = NOPTransformer.nopTransformer();\n\n        Transformer<Object, Object> transformer = TransformerUtils.switchTransformer(truePredicate, nopTransformer, null);\n\n        assertNull(transformer.transform(new Object()));\n    }\n}\n"}]