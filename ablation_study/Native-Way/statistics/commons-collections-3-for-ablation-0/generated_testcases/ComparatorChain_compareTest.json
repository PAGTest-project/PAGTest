[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.comparators;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.Comparator;\n\npublic class ComparatorChain_compareTest {\n\n    private ComparatorChain<Integer> comparatorChain;\n\n    @BeforeEach\n    public void setUp() {\n        comparatorChain = new ComparatorChain<>();\n    }\n\n    @Test\n    public void testCompareWithSingleComparatorForwardOrder() {\n        comparatorChain.addComparator(Comparator.naturalOrder());\n        assertEquals(1, comparatorChain.compare(2, 1));\n        assertEquals(-1, comparatorChain.compare(1, 2));\n        assertEquals(0, comparatorChain.compare(1, 1));\n    }\n\n    @Test\n    public void testCompareWithSingleComparatorReverseOrder() {\n        comparatorChain.addComparator(Comparator.naturalOrder(), true);\n        assertEquals(-1, comparatorChain.compare(2, 1));\n        assertEquals(1, comparatorChain.compare(1, 2));\n        assertEquals(0, comparatorChain.compare(1, 1));\n    }\n\n    @Test\n    public void testCompareWithMultipleComparators() {\n        comparatorChain.addComparator(Comparator.naturalOrder());\n        comparatorChain.addComparator((a, b) -> a.compareTo(b) * -1, true);\n        assertEquals(1, comparatorChain.compare(2, 1));\n        assertEquals(-1, comparatorChain.compare(1, 2));\n        assertEquals(0, comparatorChain.compare(1, 1));\n    }\n\n    @Test\n    public void testCompareWithEmptyChain() {\n        assertThrows(UnsupportedOperationException.class, () -> {\n            comparatorChain.compare(1, 2);\n        });\n    }\n\n    @Test\n    public void testCompareAfterModification() {\n        comparatorChain.addComparator(Comparator.naturalOrder());\n        comparatorChain.compare(1, 2); // This should lock the chain\n        assertThrows(UnsupportedOperationException.class, () -> {\n            comparatorChain.addComparator(Comparator.naturalOrder());\n        });\n    }\n\n    @Test\n    public void testCompareWithMinValuedComparator() {\n        comparatorChain.addComparator((a, b) -> {\n            final int result = a.compareTo(b);\n            if (result < 0) {\n                return Integer.MIN_VALUE;\n            }\n            if (result > 0) {\n                return Integer.MAX_VALUE;\n            }\n            return 0;\n        }, true);\n\n        assertTrue(comparatorChain.compare(4, 5) > 0);\n        assertTrue(comparatorChain.compare(5, 4) < 0);\n        assertEquals(0, comparatorChain.compare(4, 4));\n    }\n}\n"}]