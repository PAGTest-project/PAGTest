[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.bloomfilter;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.util.function.IntPredicate;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class EnhancedDoubleHasher_indicesTest {\n\n    private EnhancedDoubleHasher hasher;\n    private Shape shape;\n\n    @BeforeEach\n    public void setUp() {\n        hasher = new EnhancedDoubleHasher(123456789L, 987654321L);\n        shape = Shape.fromNMK(5, 24, 3);\n    }\n\n    @Test\n    public void testIndicesNonNullShape() {\n        assertThrows(NullPointerException.class, () -> hasher.indices(null));\n    }\n\n    @Test\n    public void testAsIndexArray() {\n        IndexExtractor extractor = hasher.indices(shape);\n        int[] indices = extractor.asIndexArray();\n        assertEquals(shape.getNumberOfHashFunctions(), indices.length);\n        // Ensure all indices are within the valid range [0, shape.getNumberOfBits())\n        for (int index : indices) {\n            assertTrue(index >= 0 && index < shape.getNumberOfBits());\n        }\n    }\n\n    @Test\n    public void testProcessIndicesNonNullConsumer() {\n        IndexExtractor extractor = hasher.indices(shape);\n        assertThrows(NullPointerException.class, () -> extractor.processIndices(null));\n    }\n\n    @Test\n    public void testProcessIndicesValidConsumer() {\n        IndexExtractor extractor = hasher.indices(shape);\n        boolean result = extractor.processIndices(i -> i >= 0 && i < shape.getNumberOfBits());\n        assertTrue(result);\n    }\n\n    @Test\n    public void testProcessIndicesInvalidConsumer() {\n        IndexExtractor extractor = hasher.indices(shape);\n        boolean result = extractor.processIndices(i -> i < 0);\n        assertFalse(result);\n    }\n\n    @Test\n    public void testProcessIndicesWithKGreaterThanBits() {\n        Shape largeShape = Shape.fromNMK(5, 24, 25);\n        IndexExtractor extractor = hasher.indices(largeShape);\n        boolean result = extractor.processIndices(i -> i >= 0 && i < largeShape.getNumberOfBits());\n        assertTrue(result);\n    }\n\n    @Test\n    public void testProcessIndicesWithKLessThanBits() {\n        Shape smallShape = Shape.fromNMK(5, 24, 2);\n        IndexExtractor extractor = hasher.indices(smallShape);\n        boolean result = extractor.processIndices(i -> i >= 0 && i < smallShape.getNumberOfBits());\n        assertTrue(result);\n    }\n}\n"}]