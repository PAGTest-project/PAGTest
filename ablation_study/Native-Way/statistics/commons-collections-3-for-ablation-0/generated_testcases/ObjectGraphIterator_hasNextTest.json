[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.iterators;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.NoSuchElementException;\n\nimport org.apache.commons.collections4.Transformer;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class ObjectGraphIterator_hasNextTest {\n\n    private ObjectGraphIterator<Object> iterator;\n\n    @BeforeEach\n    public void setUp() {\n        iterator = new ObjectGraphIterator<>(null, null);\n    }\n\n    @Test\n    public void testHasNext_RootNull() {\n        assertFalse(iterator.hasNext());\n    }\n\n    @Test\n    public void testHasNext_RootNotNull() {\n        List<Object> list = new ArrayList<>();\n        list.add(\"element1\");\n        list.add(\"element2\");\n        iterator = new ObjectGraphIterator<>(list.iterator(), null);\n\n        assertTrue(iterator.hasNext());\n        iterator.next();\n        assertTrue(iterator.hasNext());\n        iterator.next();\n        assertFalse(iterator.hasNext());\n    }\n\n    @Test\n    public void testHasNext_WithTransformer() {\n        Transformer<Object, Object> transformer = obj -> obj + \"_transformed\";\n        List<Object> list = new ArrayList<>();\n        list.add(\"element1\");\n        list.add(\"element2\");\n        iterator = new ObjectGraphIterator<>(list.iterator(), transformer);\n\n        assertTrue(iterator.hasNext());\n        iterator.next();\n        assertTrue(iterator.hasNext());\n        iterator.next();\n        assertFalse(iterator.hasNext());\n    }\n\n    @Test\n    public void testHasNext_NestedIterators() {\n        List<Object> list1 = new ArrayList<>();\n        list1.add(\"element1\");\n        List<Object> list2 = new ArrayList<>();\n        list2.add(\"element2\");\n        List<Iterator<?>> nestedList = new ArrayList<>();\n        nestedList.add(list1.iterator());\n        nestedList.add(list2.iterator());\n        iterator = new ObjectGraphIterator<>(nestedList.iterator());\n\n        assertTrue(iterator.hasNext());\n        iterator.next();\n        assertTrue(iterator.hasNext());\n        iterator.next();\n        assertFalse(iterator.hasNext());\n    }\n\n    @Test\n    public void testHasNext_NoSuchElementException() {\n        assertFalse(iterator.hasNext());\n        assertThrows(NoSuchElementException.class, () -> iterator.next());\n    }\n}\n"}]