[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4;\n\nimport org.apache.commons.collections4.functors.ConstantTransformer;\nimport org.apache.commons.collections4.functors.EqualPredicate;\nimport org.apache.commons.collections4.functors.ExceptionTransformer;\nimport org.apache.commons.collections4.functors.NOPTransformer;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TransformerUtils_switchMapTransformerTest {\n\n    private static final Object cObject = new Object();\n    private static final Object cString = \"test\";\n    private static final Object cInteger = 123;\n\n    private Map<Object, Transformer<Object, Object>> objectsAndTransformers;\n\n    @BeforeEach\n    public void setUp() {\n        objectsAndTransformers = new HashMap<>();\n        objectsAndTransformers.put(cObject, ConstantTransformer.constantTransformer(cObject));\n        objectsAndTransformers.put(cString, ConstantTransformer.constantTransformer(cString));\n        objectsAndTransformers.put(cInteger, ConstantTransformer.constantTransformer(cInteger));\n    }\n\n    @Test\n    public void testSwitchMapTransformerWithValidMap() {\n        Transformer<Object, Object> transformer = TransformerUtils.switchMapTransformer(objectsAndTransformers);\n\n        assertAll(\"Valid transformations\",\n                () -> assertEquals(cObject, transformer.transform(cObject)),\n                () -> assertEquals(cString, transformer.transform(cString)),\n                () -> assertEquals(cInteger, transformer.transform(cInteger))\n        );\n    }\n\n    @Test\n    public void testSwitchMapTransformerWithNullInput() {\n        objectsAndTransformers.put(null, NOPTransformer.nopTransformer());\n        Transformer<Object, Object> transformer = TransformerUtils.switchMapTransformer(objectsAndTransformers);\n\n        assertNull(transformer.transform(null));\n    }\n\n    @Test\n    public void testSwitchMapTransformerWithDefaultTransformer() {\n        Transformer<Object, Object> defaultTransformer = ConstantTransformer.constantTransformer(\"default\");\n        objectsAndTransformers.put(null, defaultTransformer);\n        Transformer<Object, Object> transformer = TransformerUtils.switchMapTransformer(objectsAndTransformers);\n\n        assertEquals(\"default\", transformer.transform(new Object()));\n    }\n\n    @Test\n    public void testSwitchMapTransformerWithExceptionTransformer() {\n        objectsAndTransformers.put(cObject, ExceptionTransformer.exceptionTransformer());\n        Transformer<Object, Object> transformer = TransformerUtils.switchMapTransformer(objectsAndTransformers);\n\n        assertThrows(FunctorException.class, () -> transformer.transform(cObject));\n    }\n\n    @Test\n    public void testSwitchMapTransformerWithNullMap() {\n        assertThrows(NullPointerException.class, () -> TransformerUtils.switchMapTransformer(null));\n    }\n\n    @Test\n    public void testSwitchMapTransformerWithNullTransformer() {\n        objectsAndTransformers.put(cObject, null);\n        assertThrows(NullPointerException.class, () -> TransformerUtils.switchMapTransformer(objectsAndTransformers));\n    }\n}\n"}]