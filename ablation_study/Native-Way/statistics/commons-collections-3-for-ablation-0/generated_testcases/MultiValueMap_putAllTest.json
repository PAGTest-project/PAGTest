[{"strategy": "retry", "code": "\npackage org.apache.commons.collections4.map;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class MultiValueMap_putAllTest {\n\n    private MultiValueMap<String, String> map;\n\n    @BeforeEach\n    public void setUp() {\n        map = new MultiValueMap<>();\n    }\n\n    @Test\n    public void testPutAll_NullValues() {\n        assertFalse(map.putAll(\"key\", null));\n    }\n\n    @Test\n    public void testPutAll_EmptyValues() {\n        Collection<String> values = new ArrayList<>();\n        assertFalse(map.putAll(\"key\", values));\n    }\n\n    @Test\n    public void testPutAll_NewKey() {\n        Collection<String> values = Arrays.asList(\"value1\", \"value2\");\n        assertTrue(map.putAll(\"key\", values));\n        assertEquals(2, map.size(\"key\"));\n    }\n\n    @Test\n    public void testPutAll_ExistingKey() {\n        Collection<String> initialValues = Arrays.asList(\"value1\", \"value2\");\n        map.putAll(\"key\", initialValues);\n        Collection<String> additionalValues = Arrays.asList(\"value3\", \"value4\");\n        assertTrue(map.putAll(\"key\", additionalValues));\n        assertEquals(4, map.size(\"key\"));\n    }\n\n    @Test\n    public void testPutAll_CreateCollection() {\n        Collection<String> values = Arrays.asList(\"value1\", \"value2\");\n        map.putAll(\"key\", values);\n        assertNotNull(map.getCollection(\"key\"));\n    }\n\n    @Test\n    public void testPutAll_AddToExistingCollection() {\n        Collection<String> initialValues = Arrays.asList(\"value1\", \"value2\");\n        map.putAll(\"key\", initialValues);\n        Collection<String> additionalValues = Arrays.asList(\"value3\", \"value4\");\n        map.putAll(\"key\", additionalValues);\n        Collection<String> combinedValues = map.getCollection(\"key\");\n        assertEquals(4, combinedValues.size());\n        assertTrue(combinedValues.containsAll(Arrays.asList(\"value1\", \"value2\", \"value3\", \"value4\")));\n    }\n\n    @Test\n    public void testPutAll_NonEmptyCollection() {\n        Collection<String> values = Arrays.asList(\"value1\", \"value2\");\n        map.putAll(\"key\", values);\n        assertNotNull(map.getCollection(\"key\"));\n        assertFalse(map.getCollection(\"key\").isEmpty());\n    }\n\n    @Test\n    public void testPutAll_EmptyCollectionAfterAdd() {\n        Collection<String> values = new ArrayList<>();\n        map.putAll(\"key\", values);\n        assertNull(map.getCollection(\"key\"));\n    }\n\n    @Test\n    public void testPutAll_MultipleKeys() {\n        Collection<String> values1 = Arrays.asList(\"value1\", \"value2\");\n        Collection<String> values2 = Arrays.asList(\"value3\", \"value4\");\n        assertTrue(map.putAll(\"key1\", values1));\n        assertTrue(map.putAll(\"key2\", values2));\n        assertEquals(2, map.size(\"key1\"));\n        assertEquals(2, map.size(\"key2\"));\n    }\n\n    @Test\n    public void testPutAll_ClearBeforeAdd() {\n        Collection<String> values = Arrays.asList(\"value1\", \"value2\");\n        map.putAll(\"key\", values);\n        map.clear();\n        assertFalse(map.putAll(\"key\", values));\n    }\n\n    @Test\n    public void testPutAll_RemoveMapping() {\n        Collection<String> values = Arrays.asList(\"value1\", \"value2\");\n        map.putAll(\"key\", values);\n        assertTrue(map.removeMapping(\"key\", \"value1\"));\n        assertEquals(1, map.size(\"key\"));\n    }\n\n    @Test\n    public void testPutAll_IteratorInteraction() {\n        Collection<String> values = Arrays.asList(\"value1\", \"value2\");\n        map.putAll(\"key\", values);\n        Iterator<String> iterator = map.iterator(\"key\");\n        assertTrue(iterator.hasNext());\n        assertEquals(\"value1\", iterator.next());\n        assertTrue(iterator.hasNext());\n        assertEquals(\"value2\", iterator.next());\n        assertFalse(iterator.hasNext());\n    }\n}\n"}]