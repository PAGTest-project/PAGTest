[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.iterators;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.List;\nimport org.apache.commons.collections4.comparators.ComparableComparator;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class CollatingIterator_hasNextTest {\n\n    private Comparator<Integer> comparator;\n    private List<Integer> list1;\n    private List<Integer> list2;\n\n    @BeforeEach\n    public void setUp() {\n        comparator = new ComparableComparator<>();\n        list1 = Arrays.asList(1, 3, 5);\n        list2 = Arrays.asList(2, 4, 6);\n    }\n\n    @Test\n    public void testHasNextWithElements() {\n        CollatingIterator<Integer> collatingIterator = new CollatingIterator<>(comparator, list1.iterator(), list2.iterator());\n        assertTrue(collatingIterator.hasNext());\n    }\n\n    @Test\n    public void testHasNextWithoutElements() {\n        CollatingIterator<Integer> collatingIterator = new CollatingIterator<>(comparator, new ArrayList<Integer>().iterator(), new ArrayList<Integer>().iterator());\n        assertFalse(collatingIterator.hasNext());\n    }\n\n    @Test\n    public void testHasNextWithOneEmptyIterator() {\n        CollatingIterator<Integer> collatingIterator = new CollatingIterator<>(comparator, list1.iterator(), new ArrayList<Integer>().iterator());\n        assertTrue(collatingIterator.hasNext());\n    }\n\n    @Test\n    public void testHasNextAfterIteration() {\n        CollatingIterator<Integer> collatingIterator = new CollatingIterator<>(comparator, list1.iterator(), list2.iterator());\n        while (collatingIterator.hasNext()) {\n            collatingIterator.next();\n        }\n        assertFalse(collatingIterator.hasNext());\n    }\n\n    @Test\n    public void testHasNextWithNullComparator() {\n        CollatingIterator<Integer> collatingIterator = new CollatingIterator<>(null, list1.iterator(), list2.iterator());\n        try {\n            collatingIterator.hasNext();\n        } catch (NullPointerException e) {\n            assertTrue(e.getMessage().startsWith(\"You must invoke setComparator\"));\n        }\n    }\n\n    @Test\n    public void testHasNextWithSetComparator() {\n        CollatingIterator<Integer> collatingIterator = new CollatingIterator<>(null, list1.iterator(), list2.iterator());\n        collatingIterator.setComparator(comparator);\n        assertTrue(collatingIterator.hasNext());\n    }\n}\n"}]