[{"strategy": "retry", "code": "\npackage org.apache.commons.collections4.bloomfilter;\n\nimport org.junit.jupiter.api.Test;\nimport java.util.LinkedList;\nimport java.util.function.Predicate;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\nclass LayerManager_processBloomFiltersTest {\n\n    @Test\n    void testProcessBloomFilters_AllTrue() {\n        // Given\n        LayerManager<BloomFilter> layerManager = new LayerManager<>(\n                () -> mock(BloomFilter.class),\n                lm -> false,\n                deque -> {},\n                true\n        );\n        BloomFilter bf1 = mock(BloomFilter.class);\n        BloomFilter bf2 = mock(BloomFilter.class);\n        layerManager.filters.add(bf1);\n        layerManager.filters.add(bf2);\n\n        Predicate<BloomFilter> predicate = mock(Predicate.class);\n        when(predicate.test(bf1)).thenReturn(true);\n        when(predicate.test(bf2)).thenReturn(true);\n\n        // When\n        boolean result = layerManager.processBloomFilters(predicate);\n\n        // Then\n        assertTrue(result);\n        verify(predicate, times(1)).test(bf1);\n        verify(predicate, times(1)).test(bf2);\n    }\n\n    @Test\n    void testProcessBloomFilters_OneFalse() {\n        // Given\n        LayerManager<BloomFilter> layerManager = new LayerManager<>(\n                () -> mock(BloomFilter.class),\n                lm -> false,\n                deque -> {},\n                true\n        );\n        BloomFilter bf1 = mock(BloomFilter.class);\n        BloomFilter bf2 = mock(BloomFilter.class);\n        layerManager.filters.add(bf1);\n        layerManager.filters.add(bf2);\n\n        Predicate<BloomFilter> predicate = mock(Predicate.class);\n        when(predicate.test(bf1)).thenReturn(true);\n        when(predicate.test(bf2)).thenReturn(false);\n\n        // When\n        boolean result = layerManager.processBloomFilters(predicate);\n\n        // Then\n        assertFalse(result);\n        verify(predicate, times(1)).test(bf1);\n        verify(predicate, times(1)).test(bf2);\n    }\n}\n"}]