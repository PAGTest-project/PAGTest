[{"strategy": "retry", "code": "\npackage org.apache.commons.collections4.bidimap;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport java.util.Comparator;\nimport java.util.SortedMap;\nimport java.util.TreeMap;\nimport org.apache.commons.collections4.SortedBidiMap;\nimport org.apache.commons.collections4.comparators.ComparableComparator;\nimport org.apache.commons.collections4.comparators.ReverseComparator;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class DualTreeBidiMap_tailMapTest {\n\n    private DualTreeBidiMap<String, Integer> dtbm;\n\n    @BeforeEach\n    public void setUp() {\n        dtbm = new DualTreeBidiMap<>(String.CASE_INSENSITIVE_ORDER, null);\n        dtbm.put(\"one\", 1);\n        dtbm.put(\"two\", 2);\n        dtbm.put(\"three\", 3);\n    }\n\n    @Test\n    public void testTailMap() {\n        SortedMap<String, Integer> tailMap = dtbm.tailMap(\"two\");\n        assertNotNull(tailMap);\n        assertEquals(2, tailMap.size());\n        assertTrue(tailMap.containsKey(\"two\"));\n        assertTrue(tailMap.containsKey(\"three\"));\n    }\n\n    @Test\n    public void testTailMapWithNonExistentKey() {\n        SortedMap<String, Integer> tailMap = dtbm.tailMap(\"four\");\n        assertNotNull(tailMap);\n        assertTrue(tailMap.isEmpty());\n    }\n\n    @Test\n    public void testTailMapWithFirstKey() {\n        SortedMap<String, Integer> tailMap = dtbm.tailMap(\"one\");\n        assertNotNull(tailMap);\n        assertEquals(3, tailMap.size());\n        assertTrue(tailMap.containsKey(\"one\"));\n        assertTrue(tailMap.containsKey(\"two\"));\n        assertTrue(tailMap.containsKey(\"three\"));\n    }\n\n    @Test\n    public void testTailMapWithLastKey() {\n        SortedMap<String, Integer> tailMap = dtbm.tailMap(\"three\");\n        assertNotNull(tailMap);\n        assertEquals(1, tailMap.size());\n        assertTrue(tailMap.containsKey(\"three\"));\n    }\n\n    @Test\n    public void testTailMapWithComparator() {\n        Comparator<String> reverseComparator = new ReverseComparator<>(String.CASE_INSENSITIVE_ORDER);\n        dtbm = new DualTreeBidiMap<>(reverseComparator, null);\n        dtbm.put(\"one\", 1);\n        dtbm.put(\"two\", 2);\n        dtbm.put(\"three\", 3);\n\n        SortedMap<String, Integer> tailMap = dtbm.tailMap(\"two\");\n        assertNotNull(tailMap);\n        assertEquals(2, tailMap.size());\n        assertTrue(tailMap.containsKey(\"two\"));\n        assertTrue(tailMap.containsKey(\"one\"));\n    }\n}\n"}]