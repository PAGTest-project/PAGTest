[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.queue;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNull;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport java.util.NoSuchElementException;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class CircularFifoQueue_pollTest {\n\n    private CircularFifoQueue<String> queue;\n\n    @BeforeEach\n    public void setUp() {\n        queue = new CircularFifoQueue<>(3);\n    }\n\n    @Test\n    public void testPollEmptyQueue() {\n        assertNull(queue.poll());\n    }\n\n    @Test\n    public void testPollSingleElement() {\n        queue.add(\"element1\");\n        assertEquals(\"element1\", queue.poll());\n        assertTrue(queue.isEmpty());\n    }\n\n    @Test\n    public void testPollMultipleElements() {\n        queue.add(\"element1\");\n        queue.add(\"element2\");\n        queue.add(\"element3\");\n\n        assertEquals(\"element1\", queue.poll());\n        assertEquals(\"element2\", queue.poll());\n        assertEquals(\"element3\", queue.poll());\n\n        assertTrue(queue.isEmpty());\n    }\n\n    @Test\n    public void testPollAfterWrapAround() {\n        queue.add(\"element1\");\n        queue.add(\"element2\");\n        queue.add(\"element3\");\n        queue.add(\"element4\");\n\n        assertEquals(\"element2\", queue.poll());\n        assertEquals(\"element3\", queue.poll());\n        assertEquals(\"element4\", queue.poll());\n\n        assertTrue(queue.isEmpty());\n    }\n\n    @Test\n    public void testPollAfterRemove() {\n        queue.add(\"element1\");\n        queue.add(\"element2\");\n        queue.add(\"element3\");\n\n        queue.remove();\n        assertEquals(\"element2\", queue.poll());\n        assertEquals(\"element3\", queue.poll());\n\n        assertTrue(queue.isEmpty());\n    }\n\n    @Test\n    public void testPollAfterClear() {\n        queue.add(\"element1\");\n        queue.add(\"element2\");\n        queue.clear();\n\n        assertNull(queue.poll());\n        assertTrue(queue.isEmpty());\n    }\n}\n"}]