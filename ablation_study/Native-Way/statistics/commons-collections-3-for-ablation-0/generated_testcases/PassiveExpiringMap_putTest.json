[{"strategy": "retry", "code": "\npackage org.apache.commons.collections4.map;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNull;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.concurrent.TimeUnit;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class PassiveExpiringMap_putTest {\n\n    private PassiveExpiringMap<Integer, String> expiringMap;\n\n    @BeforeEach\n    public void setUp() {\n        PassiveExpiringMap.ExpirationPolicy<Integer, String> policy = new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<>(1, TimeUnit.MINUTES);\n        expiringMap = new PassiveExpiringMap<>(policy, new HashMap<>());\n    }\n\n    @Test\n    public void testPutNewEntry() {\n        String oldValue = expiringMap.put(1, \"value1\");\n        assertNull(oldValue);\n        assertEquals(\"value1\", expiringMap.get(1));\n    }\n\n    @Test\n    public void testPutReplaceEntry() {\n        expiringMap.put(1, \"value1\");\n        String oldValue = expiringMap.put(1, \"newValue1\");\n        assertEquals(\"value1\", oldValue);\n        assertEquals(\"newValue1\", expiringMap.get(1));\n    }\n\n    @Test\n    public void testPutExpiredEntry() {\n        expiringMap.put(1, \"value1\");\n        expiringMap.remove(1); // Use public remove method instead of private removeIfExpired\n        String oldValue = expiringMap.put(1, \"newValue1\");\n        assertNull(oldValue);\n        assertEquals(\"newValue1\", expiringMap.get(1));\n    }\n\n    @Test\n    public void testPutWithNegativeTimeToLive() {\n        PassiveExpiringMap.ExpirationPolicy<Integer, String> policy = new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<>(-1);\n        expiringMap = new PassiveExpiringMap<>(policy, new HashMap<>());\n        expiringMap.put(1, \"value1\");\n        String oldValue = expiringMap.put(1, \"newValue1\");\n        assertEquals(\"value1\", oldValue);\n        assertEquals(\"newValue1\", expiringMap.get(1));\n    }\n\n    @Test\n    public void testPutWithZeroTimeToLive() {\n        PassiveExpiringMap.ExpirationPolicy<Integer, String> policy = new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<>(0);\n        expiringMap = new PassiveExpiringMap<>(policy, new HashMap<>());\n        expiringMap.put(1, \"value1\");\n        String oldValue = expiringMap.put(1, \"newValue1\");\n        assertNull(oldValue);\n        assertNull(expiringMap.get(1));\n    }\n}\n"}]