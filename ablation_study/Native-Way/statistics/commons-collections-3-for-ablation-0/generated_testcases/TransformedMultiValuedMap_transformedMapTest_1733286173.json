[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.multimap;\n\nimport org.apache.commons.collections4.MultiValuedMap;\nimport org.apache.commons.collections4.Transformer;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\nclass TransformedMultiValuedMap_transformedMapTest {\n\n    @Test\n    void testTransformedMapWithNonEmptyMap() {\n        // Given\n        MultiValuedMap<String, String> originalMap = mock(MultiValuedMap.class);\n        when(originalMap.isEmpty()).thenReturn(false);\n\n        Transformer<String, String> keyTransformer = mock(Transformer.class);\n        Transformer<String, String> valueTransformer = mock(Transformer.class);\n\n        // When\n        TransformedMultiValuedMap<String, String> result = TransformedMultiValuedMap.transformedMap(originalMap, keyTransformer, valueTransformer);\n\n        // Then\n        assertNotNull(result);\n        verify(originalMap).isEmpty();\n        verify(originalMap, times(1)).clear();\n        verify(originalMap, times(1)).putAll(any(MultiValuedMap.class));\n    }\n\n    @Test\n    void testTransformedMapWithEmptyMap() {\n        // Given\n        MultiValuedMap<String, String> originalMap = mock(MultiValuedMap.class);\n        when(originalMap.isEmpty()).thenReturn(true);\n\n        Transformer<String, String> keyTransformer = mock(Transformer.class);\n        Transformer<String, String> valueTransformer = mock(Transformer.class);\n\n        // When\n        TransformedMultiValuedMap<String, String> result = TransformedMultiValuedMap.transformedMap(originalMap, keyTransformer, valueTransformer);\n\n        // Then\n        assertNotNull(result);\n        verify(originalMap).isEmpty();\n        verify(originalMap, never()).clear();\n        verify(originalMap, never()).putAll(any(MultiValuedMap.class));\n    }\n}\n"}]