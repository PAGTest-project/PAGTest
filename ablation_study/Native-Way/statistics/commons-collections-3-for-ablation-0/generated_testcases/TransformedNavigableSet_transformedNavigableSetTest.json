[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.set;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.*;\n\nimport java.util.NavigableSet;\nimport java.util.TreeSet;\nimport org.apache.commons.collections4.Transformer;\nimport org.junit.jupiter.api.Test;\n\npublic class TransformedNavigableSet_transformedNavigableSetTest {\n\n    @Test\n    public void testTransformedNavigableSetWithNonEmptySet() {\n        // Given\n        NavigableSet<String> originalSet = new TreeSet<>();\n        originalSet.add(\"one\");\n        originalSet.add(\"two\");\n        Transformer<String, String> transformer = mock(Transformer.class);\n        when(transformer.apply(\"one\")).thenReturn(\"ONE\");\n        when(transformer.apply(\"two\")).thenReturn(\"TWO\");\n\n        // When\n        TransformedNavigableSet<String> transformedSet = TransformedNavigableSet.transformedNavigableSet(originalSet, transformer);\n\n        // Then\n        assertEquals(2, transformedSet.size());\n        assertEquals(\"ONE\", transformedSet.first());\n        assertEquals(\"TWO\", transformedSet.last());\n        verify(transformer, times(1)).apply(\"one\");\n        verify(transformer, times(1)).apply(\"two\");\n    }\n\n    @Test\n    public void testTransformedNavigableSetWithEmptySet() {\n        // Given\n        NavigableSet<String> originalSet = new TreeSet<>();\n        Transformer<String, String> transformer = mock(Transformer.class);\n\n        // When\n        TransformedNavigableSet<String> transformedSet = TransformedNavigableSet.transformedNavigableSet(originalSet, transformer);\n\n        // Then\n        assertEquals(0, transformedSet.size());\n        verify(transformer, never()).apply(any());\n    }\n}\n"}]