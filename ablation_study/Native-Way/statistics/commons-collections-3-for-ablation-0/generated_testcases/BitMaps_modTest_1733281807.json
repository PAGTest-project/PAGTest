[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.bloomfilter;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport org.junit.jupiter.api.Test;\n\npublic class BitMaps_modTest {\n\n    @Test\n    public void testModWithPositiveDividendAndDivisor() {\n        assertEquals(0, BitMaps.mod(0, 1), \"0 % 1 should be 0\");\n        assertEquals(1, BitMaps.mod(1, 2), \"1 % 2 should be 1\");\n        assertEquals(2, BitMaps.mod(10, 4), \"10 % 4 should be 2\");\n        assertEquals(3, BitMaps.mod(15, 4), \"15 % 4 should be 3\");\n    }\n\n    @Test\n    public void testModWithLargeDividend() {\n        assertEquals(0, BitMaps.mod(Long.MAX_VALUE, 1), \"Long.MAX_VALUE % 1 should be 0\");\n        assertEquals(1, BitMaps.mod(Long.MAX_VALUE, 2), \"Long.MAX_VALUE % 2 should be 1\");\n        assertEquals(3, BitMaps.mod(Long.MAX_VALUE, 4), \"Long.MAX_VALUE % 4 should be 3\");\n    }\n\n    @Test\n    public void testModWithNegativeDividend() {\n        assertEquals(0, BitMaps.mod(-1, 1), \"-1 % 1 should be 0\");\n        assertEquals(1, BitMaps.mod(-1, 2), \"-1 % 2 should be 1\");\n        assertEquals(2, BitMaps.mod(-10, 4), \"-10 % 4 should be 2\");\n        assertEquals(3, BitMaps.mod(-15, 4), \"-15 % 4 should be 3\");\n    }\n\n    @Test\n    public void testModWithZeroDividend() {\n        assertEquals(0, BitMaps.mod(0, 1), \"0 % 1 should be 0\");\n        assertEquals(0, BitMaps.mod(0, 2), \"0 % 2 should be 0\");\n        assertEquals(0, BitMaps.mod(0, 4), \"0 % 4 should be 0\");\n    }\n\n    @Test\n    public void testModWithDivisorGreaterThanDividend() {\n        assertEquals(10, BitMaps.mod(10, 11), \"10 % 11 should be 10\");\n        assertEquals(15, BitMaps.mod(15, 16), \"15 % 16 should be 15\");\n        assertEquals(20, BitMaps.mod(20, 21), \"20 % 21 should be 20\");\n    }\n}\n"}]