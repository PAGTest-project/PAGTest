[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.set;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.HashSet;\nimport java.util.Set;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class CompositeSet_equalsTest {\n\n    private CompositeSet<String> compositeSet;\n    private Set<String> set1;\n    private Set<String> set2;\n\n    @BeforeEach\n    public void setUp() {\n        set1 = new HashSet<>();\n        set1.add(\"1\");\n        set1.add(\"2\");\n\n        set2 = new HashSet<>();\n        set2.add(\"3\");\n        set2.add(\"4\");\n\n        compositeSet = new CompositeSet<>(set1, set2);\n    }\n\n    @Test\n    public void testEquals_SameSets() {\n        CompositeSet<String> otherCompositeSet = new CompositeSet<>(set1, set2);\n        assertTrue(compositeSet.equals(otherCompositeSet));\n    }\n\n    @Test\n    public void testEquals_DifferentSets() {\n        Set<String> differentSet1 = new HashSet<>();\n        differentSet1.add(\"5\");\n        differentSet1.add(\"6\");\n\n        Set<String> differentSet2 = new HashSet<>();\n        differentSet2.add(\"7\");\n        differentSet2.add(\"8\");\n\n        CompositeSet<String> otherCompositeSet = new CompositeSet<>(differentSet1, differentSet2);\n        assertFalse(compositeSet.equals(otherCompositeSet));\n    }\n\n    @Test\n    public void testEquals_DifferentSize() {\n        Set<String> differentSet1 = new HashSet<>();\n        differentSet1.add(\"1\");\n        differentSet1.add(\"2\");\n        differentSet1.add(\"3\");\n\n        CompositeSet<String> otherCompositeSet = new CompositeSet<>(differentSet1);\n        assertFalse(compositeSet.equals(otherCompositeSet));\n    }\n\n    @Test\n    public void testEquals_Null() {\n        assertFalse(compositeSet.equals(null));\n    }\n\n    @Test\n    public void testEquals_DifferentType() {\n        assertFalse(compositeSet.equals(\"Not a Set\"));\n    }\n\n    @Test\n    public void testEquals_EmptySets() {\n        CompositeSet<String> emptyCompositeSet = new CompositeSet<>();\n        CompositeSet<String> otherEmptyCompositeSet = new CompositeSet<>();\n        assertTrue(emptyCompositeSet.equals(otherEmptyCompositeSet));\n    }\n}\n"}]