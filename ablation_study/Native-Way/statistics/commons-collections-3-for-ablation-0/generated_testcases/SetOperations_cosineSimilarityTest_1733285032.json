[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.bloomfilter;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport org.junit.jupiter.api.Test;\n\npublic class SetOperations_cosineSimilarityTest {\n\n    @Test\n    public final void testCosineSimilarity() {\n        BitMapExtractor extractor1 = createBitMapExtractor(1, 17);\n        BitMapExtractor extractor2 = createBitMapExtractor(1, 17);\n\n        int dotProduct = 17;\n        int cardinalityA = 17;\n        int cardinalityB = 17;\n        double expected = 1.0;\n        assertSymmetricOperation(expected, SetOperations::cosineSimilarity, extractor1, extractor2);\n\n        dotProduct = 7;\n        cardinalityA = 17;\n        cardinalityB = 17;\n        expected = dotProduct / Math.sqrt(cardinalityA * cardinalityB);\n        extractor2 = createBitMapExtractor(11, 27);\n        assertSymmetricOperation(expected, SetOperations::cosineSimilarity, extractor1, extractor2);\n\n        // test no values\n        extractor1 = new EmptyBitMapExtractor();\n        extractor2 = new EmptyBitMapExtractor();\n        // build a filter\n        final BitMapExtractor extractor3 = createBitMapExtractor(1, 17);\n        assertSymmetricOperation(0.0, SetOperations::cosineSimilarity, extractor1, extractor2);\n        assertSymmetricOperation(0.0, SetOperations::cosineSimilarity, extractor1, extractor3);\n    }\n\n    private BitMapExtractor createBitMapExtractor(int start, int end) {\n        // Mock implementation for BitMapExtractor creation\n        return new BitMapExtractor() {\n            @Override\n            public void processBitMaps(LongPredicate predicate) {\n                for (long i = start; i <= end; i++) {\n                    predicate.test(i);\n                }\n            }\n\n            @Override\n            public void processBitMapPairs(BitMapExtractor other, LongBinaryPredicate predicate) {\n                // Mock implementation for processBitMapPairs\n            }\n        };\n    }\n\n    private static class EmptyBitMapExtractor extends BitMapExtractor {\n        @Override\n        public void processBitMaps(LongPredicate predicate) {\n            // No-op\n        }\n\n        @Override\n        public void processBitMapPairs(BitMapExtractor other, LongBinaryPredicate predicate) {\n            // No-op\n        }\n    }\n\n    private <T> void assertSymmetricOperation(double expected, ToDoubleBiFunction<T, T> operation, T a, T b) {\n        assertEquals(expected, operation.applyAsDouble(a, b), 0.0001);\n        assertEquals(expected, operation.applyAsDouble(b, a), 0.0001);\n    }\n}\n"}]