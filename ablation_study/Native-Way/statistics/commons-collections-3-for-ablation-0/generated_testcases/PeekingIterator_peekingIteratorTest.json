[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.iterators;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.NoSuchElementException;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class PeekingIterator_peekingIteratorTest {\n\n    private Iterator<String> iterator;\n\n    @BeforeEach\n    public void setUp() {\n        List<String> list = Arrays.asList(\"A\", \"B\", \"C\");\n        iterator = list.iterator();\n    }\n\n    @Test\n    public void testPeekingIteratorWithRegularIterator() {\n        PeekingIterator<String> peekingIterator = PeekingIterator.peekingIterator(iterator);\n        assertTrue(peekingIterator.hasNext());\n        assertEquals(\"A\", peekingIterator.peek());\n        assertEquals(\"A\", peekingIterator.next());\n        assertEquals(\"B\", peekingIterator.peek());\n        assertEquals(\"B\", peekingIterator.next());\n        assertEquals(\"C\", peekingIterator.peek());\n        assertEquals(\"C\", peekingIterator.next());\n        assertFalse(peekingIterator.hasNext());\n        assertNull(peekingIterator.peek());\n        assertThrows(NoSuchElementException.class, () -> peekingIterator.next());\n    }\n\n    @Test\n    public void testPeekingIteratorWithPeekingIterator() {\n        PeekingIterator<String> originalPeekingIterator = PeekingIterator.peekingIterator(iterator);\n        PeekingIterator<String> peekingIterator = PeekingIterator.peekingIterator(originalPeekingIterator);\n        assertSame(originalPeekingIterator, peekingIterator);\n    }\n\n    @Test\n    public void testPeekingIteratorWithNullIterator() {\n        assertThrows(NullPointerException.class, () -> PeekingIterator.peekingIterator(null));\n    }\n\n    @Test\n    public void testPeekingIteratorWithEmptyIterator() {\n        Iterator<String> emptyIterator = makeEmptyIterator();\n        PeekingIterator<String> peekingIterator = PeekingIterator.peekingIterator(emptyIterator);\n        assertFalse(peekingIterator.hasNext());\n        assertNull(peekingIterator.peek());\n        assertThrows(NoSuchElementException.class, () -> peekingIterator.next());\n    }\n\n    private Iterator<String> makeEmptyIterator() {\n        return new ArrayList<String>().iterator();\n    }\n}\n"}]