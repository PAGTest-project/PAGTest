[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.iterators;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.Arrays;\nimport java.util.Iterator;\nimport java.util.List;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class BoundedIterator_hasNextTest {\n\n    private List<String> testList;\n\n    @BeforeEach\n    public void setUp() {\n        testList = Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\");\n    }\n\n    @Test\n    public void testHasNextWithinBounds() {\n        Iterator<String> iter = new BoundedIterator<>(testList.iterator(), 1, 5);\n        assertTrue(iter.hasNext());\n    }\n\n    @Test\n    public void testHasNextOutOfBounds() {\n        Iterator<String> iter = new BoundedIterator<>(testList.iterator(), 1, 5);\n        for (int i = 0; i < 5; i++) {\n            iter.next();\n        }\n        assertFalse(iter.hasNext());\n    }\n\n    @Test\n    public void testHasNextWithZeroMax() {\n        Iterator<String> iter = new BoundedIterator<>(testList.iterator(), 1, 0);\n        assertFalse(iter.hasNext());\n    }\n\n    @Test\n    public void testHasNextWithNegativeOffset() {\n        assertThrows(IllegalArgumentException.class, () -> new BoundedIterator<>(testList.iterator(), -1, 5));\n    }\n\n    @Test\n    public void testHasNextWithNegativeMax() {\n        assertThrows(IllegalArgumentException.class, () -> new BoundedIterator<>(testList.iterator(), 1, -1));\n    }\n}\n"}]