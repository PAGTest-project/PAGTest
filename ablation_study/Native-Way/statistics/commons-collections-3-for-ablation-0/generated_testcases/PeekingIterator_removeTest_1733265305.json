[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.iterators;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.NoSuchElementException;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class PeekingIterator_removeTest {\n\n    private PeekingIterator<String> peekingIterator;\n    private List<String> testList;\n\n    @BeforeEach\n    public void setUp() {\n        testList = new ArrayList<>(Arrays.asList(\"A\", \"B\", \"C\"));\n        peekingIterator = new PeekingIterator<>(testList.iterator());\n    }\n\n    @Test\n    public void testRemoveWithoutPeekOrElement() {\n        peekingIterator.next(); // Move to the first element\n        peekingIterator.remove(); // Remove the first element\n        assertEquals(Arrays.asList(\"B\", \"C\"), testList);\n    }\n\n    @Test\n    public void testRemoveAfterPeek() {\n        peekingIterator.peek(); // Peek at the first element\n        assertThrows(IllegalStateException.class, () -> {\n            peekingIterator.remove(); // Should throw IllegalStateException\n        });\n    }\n\n    @Test\n    public void testRemoveAfterElement() {\n        peekingIterator.element(); // Element at the first element\n        assertThrows(IllegalStateException.class, () -> {\n            peekingIterator.remove(); // Should throw IllegalStateException\n        });\n    }\n\n    @Test\n    public void testRemoveOnEmptyIterator() {\n        Iterator<String> emptyIterator = new ArrayList<String>().iterator();\n        PeekingIterator<String> emptyPeekingIterator = new PeekingIterator<>(emptyIterator);\n        assertThrows(IllegalStateException.class, () -> {\n            emptyPeekingIterator.remove(); // Should throw IllegalStateException\n        });\n    }\n\n    @Test\n    public void testRemoveAfterExhausted() {\n        while (peekingIterator.hasNext()) {\n            peekingIterator.next();\n        }\n        assertThrows(IllegalStateException.class, () -> {\n            peekingIterator.remove(); // Should throw IllegalStateException\n        });\n    }\n}\n"}]