[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.map;\n\nimport static org.junit.jupiter.api.Assertions.assertAll;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class ListOrderedMap_putAllTest {\n\n    private ListOrderedMap<String, String> listOrderedMap;\n\n    @BeforeEach\n    public void setUp() {\n        listOrderedMap = new ListOrderedMap<>();\n    }\n\n    @Test\n    public void testPutAll_IndexOutOfBoundsException() {\n        Map<String, String> map = new HashMap<>();\n        map.put(\"key1\", \"value1\");\n        map.put(\"key2\", \"value2\");\n\n        assertAll(\n            () -> assertThrows(IndexOutOfBoundsException.class, () -> listOrderedMap.putAll(-1, map)),\n            () -> assertThrows(IndexOutOfBoundsException.class, () -> listOrderedMap.putAll(1, map))\n        );\n    }\n\n    @Test\n    public void testPutAll_ValidIndex() {\n        Map<String, String> map = new HashMap<>();\n        map.put(\"key1\", \"value1\");\n        map.put(\"key2\", \"value2\");\n\n        listOrderedMap.putAll(0, map);\n\n        assertAll(\n            () -> assertEquals(2, listOrderedMap.size()),\n            () -> assertEquals(\"value1\", listOrderedMap.get(\"key1\")),\n            () -> assertEquals(\"value2\", listOrderedMap.get(\"key2\"))\n        );\n    }\n\n    @Test\n    public void testPutAll_ReplaceExistingKey() {\n        listOrderedMap.put(\"key1\", \"oldValue\");\n        Map<String, String> map = new HashMap<>();\n        map.put(\"key1\", \"newValue\");\n        map.put(\"key2\", \"value2\");\n\n        listOrderedMap.putAll(0, map);\n\n        assertAll(\n            () -> assertEquals(2, listOrderedMap.size()),\n            () -> assertEquals(\"newValue\", listOrderedMap.get(\"key1\")),\n            () -> assertEquals(\"value2\", listOrderedMap.get(\"key2\"))\n        );\n    }\n\n    @Test\n    public void testPutAll_EmptyMap() {\n        Map<String, String> map = new HashMap<>();\n\n        listOrderedMap.putAll(0, map);\n\n        assertTrue(listOrderedMap.isEmpty());\n    }\n\n    @Test\n    public void testPutAll_MultipleCalls() {\n        Map<String, String> map1 = new HashMap<>();\n        map1.put(\"key1\", \"value1\");\n        map1.put(\"key2\", \"value2\");\n\n        Map<String, String> map2 = new HashMap<>();\n        map2.put(\"key3\", \"value3\");\n        map2.put(\"key4\", \"value4\");\n\n        listOrderedMap.putAll(0, map1);\n        listOrderedMap.putAll(2, map2);\n\n        assertAll(\n            () -> assertEquals(4, listOrderedMap.size()),\n            () -> assertEquals(\"value1\", listOrderedMap.get(\"key1\")),\n            () -> assertEquals(\"value2\", listOrderedMap.get(\"key2\")),\n            () -> assertEquals(\"value3\", listOrderedMap.get(\"key3\")),\n            () -> assertEquals(\"value4\", listOrderedMap.get(\"key4\"))\n        );\n    }\n\n    @Test\n    public void testPutAll_RemoveAfterPut() {\n        Map<String, String> map = new HashMap<>();\n        map.put(\"key1\", \"value1\");\n        map.put(\"key2\", \"value2\");\n\n        listOrderedMap.putAll(0, map);\n        listOrderedMap.remove(\"key1\");\n\n        assertAll(\n            () -> assertEquals(1, listOrderedMap.size()),\n            () -> assertFalse(listOrderedMap.containsKey(\"key1\")),\n            () -> assertEquals(\"value2\", listOrderedMap.get(\"key2\"))\n        );\n    }\n}\n"}]