[{"strategy": "retry", "code": "\npackage org.apache.commons.collections4.iterators;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.NoSuchElementException;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class PermutationIterator_nextTest {\n\n    private PermutationIterator<Integer> iterator;\n\n    @BeforeEach\n    public void setUp() {\n        List<Integer> collection = Arrays.asList(1, 2, 3);\n        iterator = new PermutationIterator<>(collection);\n    }\n\n    @Test\n    public void testNextWithValidPermutation() {\n        List<Integer> expectedPermutation = Arrays.asList(1, 2, 3);\n        List<Integer> actualPermutation = iterator.next();\n        assertEquals(expectedPermutation, actualPermutation);\n    }\n\n    @Test\n    public void testNextWithNoMorePermutations() {\n        // Consume all permutations\n        while (iterator.hasNext()) {\n            iterator.next();\n        }\n        assertThrows(NoSuchElementException.class, () -> {\n            iterator.next();\n        });\n    }\n\n    @Test\n    public void testNextWithMultiplePermutations() {\n        List<List<Integer>> expectedPermutations = new ArrayList<>();\n        expectedPermutations.add(Arrays.asList(1, 2, 3));\n        expectedPermutations.add(Arrays.asList(1, 3, 2));\n        expectedPermutations.add(Arrays.asList(2, 1, 3));\n        expectedPermutations.add(Arrays.asList(2, 3, 1));\n        expectedPermutations.add(Arrays.asList(3, 1, 2));\n        expectedPermutations.add(Arrays.asList(3, 2, 1));\n\n        for (List<Integer> expected : expectedPermutations) {\n            assertTrue(iterator.hasNext());\n            assertEquals(expected, iterator.next());\n        }\n    }\n\n    @Test\n    public void testNextWithSingleElementCollection() {\n        List<Integer> collection = Arrays.asList(1);\n        iterator = new PermutationIterator<>(collection);\n        List<Integer> expectedPermutation = Arrays.asList(1);\n        assertEquals(expectedPermutation, iterator.next());\n        assertThrows(NoSuchElementException.class, () -> {\n            iterator.next();\n        });\n    }\n\n    @Test\n    public void testNextWithEmptyCollection() {\n        List<Integer> collection = new ArrayList<>();\n        iterator = new PermutationIterator<>(collection);\n        assertThrows(NoSuchElementException.class, () -> {\n            iterator.next();\n        });\n    }\n}\n"}]