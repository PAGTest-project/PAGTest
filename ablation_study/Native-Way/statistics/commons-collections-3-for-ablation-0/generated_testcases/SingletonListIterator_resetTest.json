[{"strategy": "retry", "code": "\npackage org.apache.commons.collections4.iterators;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class SingletonListIterator_resetTest {\n\n    private static final Object testValue = new Object();\n    private SingletonListIterator<Object> iterator;\n\n    @BeforeEach\n    public void setUp() {\n        iterator = new SingletonListIterator<>(testValue);\n    }\n\n    @Test\n    public void testResetInitialState() {\n        // Initial state\n        assertTrue(iterator.hasNext());\n        assertFalse(iterator.hasPrevious());\n        assertEquals(0, iterator.nextIndex());\n        assertEquals(-1, iterator.previousIndex());\n\n        // Call reset\n        iterator.reset();\n\n        // Verify reset state\n        assertTrue(iterator.hasNext());\n        assertFalse(iterator.hasPrevious());\n        assertEquals(0, iterator.nextIndex());\n        assertEquals(-1, iterator.previousIndex());\n    }\n\n    @Test\n    public void testResetAfterNext() {\n        // Move to the next element\n        iterator.next();\n\n        // State after next\n        assertFalse(iterator.hasNext());\n        assertTrue(iterator.hasPrevious());\n        assertEquals(1, iterator.nextIndex());\n        assertEquals(0, iterator.previousIndex());\n\n        // Call reset\n        iterator.reset();\n\n        // Verify reset state\n        assertTrue(iterator.hasNext());\n        assertFalse(iterator.hasPrevious());\n        assertEquals(0, iterator.nextIndex());\n        assertEquals(-1, iterator.previousIndex());\n    }\n\n    @Test\n    public void testResetAfterPrevious() {\n        // Move to the next element\n        iterator.next();\n        // Move to the previous element\n        iterator.previous();\n\n        // State after previous\n        assertTrue(iterator.hasNext());\n        assertFalse(iterator.hasPrevious());\n        assertEquals(0, iterator.nextIndex());\n        assertEquals(-1, iterator.previousIndex());\n\n        // Call reset\n        iterator.reset();\n\n        // Verify reset state\n        assertTrue(iterator.hasNext());\n        assertFalse(iterator.hasPrevious());\n        assertEquals(0, iterator.nextIndex());\n        assertEquals(-1, iterator.previousIndex());\n    }\n\n    @Test\n    public void testResetAfterRemove() {\n        // Move to the next element\n        iterator.next();\n        // Remove the element\n        iterator.remove();\n\n        // State after remove\n        assertFalse(iterator.hasNext());\n        assertFalse(iterator.hasPrevious());\n        assertEquals(0, iterator.nextIndex());\n        assertEquals(-1, iterator.previousIndex());\n\n        // Call reset\n        iterator.reset();\n\n        // Verify reset state\n        assertTrue(iterator.hasNext());\n        assertFalse(iterator.hasPrevious());\n        assertEquals(0, iterator.nextIndex());\n        assertEquals(-1, iterator.previousIndex());\n    }\n}\n"}]