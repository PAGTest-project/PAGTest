[{"strategy": "retry", "code": "\npackage org.apache.commons.collections4.bloomfilter;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport org.junit.jupiter.api.Test;\n\npublic class SetOperations_jaccardSimilarityTest {\n\n    @Test\n    public final void testJaccardSimilarityWithEqualBitMaps() {\n        final BitMapExtractor p1 = BitMapExtractor.fromBitMapArray(0x3L, 0x5L);\n        final BitMapExtractor p2 = BitMapExtractor.fromBitMapArray(0x3L, 0x5L);\n\n        assertEquals(1.0, SetOperations.jaccardSimilarity(p1, p2));\n    }\n\n    @Test\n    public final void testJaccardSimilarityWithNoIntersection() {\n        final BitMapExtractor p1 = BitMapExtractor.fromBitMapArray(0x3L, 0x5L);\n        final BitMapExtractor p2 = BitMapExtractor.fromBitMapArray(0x8L, 0x10L);\n\n        assertEquals(0.0, SetOperations.jaccardSimilarity(p1, p2));\n    }\n\n    @Test\n    public final void testJaccardSimilarityWithPartialIntersection() {\n        final BitMapExtractor p1 = BitMapExtractor.fromBitMapArray(0x3L, 0x5L);\n        final BitMapExtractor p2 = BitMapExtractor.fromBitMapArray(0x1L, 0x5L);\n\n        assertEquals(0.5, SetOperations.jaccardSimilarity(p1, p2), 0.0001);\n    }\n\n    @Test\n    public final void testJaccardSimilarityWithEmptyBitMap() {\n        final BitMapExtractor p1 = BitMapExtractor.fromBitMapArray(0x0L, 0x0L);\n        final BitMapExtractor p2 = BitMapExtractor.fromBitMapArray(0x3L, 0x5L);\n\n        assertEquals(0.0, SetOperations.jaccardSimilarity(p1, p2));\n    }\n\n    @Test\n    public final void testJaccardSimilarityWithCommutativity() {\n        final BitMapExtractor p1 = BitMapExtractor.fromBitMapArray(0x3L, 0x5L);\n        final BitMapExtractor p2 = BitMapExtractor.fromBitMapArray(0x1L, 0x5L);\n\n        assertEquals(SetOperations.jaccardSimilarity(p1, p2), SetOperations.jaccardSimilarity(p2, p1), 0.0001);\n    }\n}\n"}]