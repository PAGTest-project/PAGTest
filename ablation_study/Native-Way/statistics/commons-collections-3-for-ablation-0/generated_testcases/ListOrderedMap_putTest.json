[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.map;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class ListOrderedMap_putTest {\n    private ListOrderedMap<String, String> listOrderedMap;\n\n    @BeforeEach\n    public void setUp() {\n        listOrderedMap = new ListOrderedMap<>();\n    }\n\n    @Test\n    public void testPutAtIndexValidIndex() {\n        listOrderedMap.put(\"key1\", \"value1\");\n        listOrderedMap.put(\"key2\", \"value2\");\n        assertEquals(\"value1\", listOrderedMap.put(0, \"key1\", \"newValue1\"));\n        assertEquals(\"newValue1\", listOrderedMap.get(\"key1\"));\n    }\n\n    @Test\n    public void testPutAtIndexInvalidIndex() {\n        listOrderedMap.put(\"key1\", \"value1\");\n        assertThrows(IndexOutOfBoundsException.class, () -> listOrderedMap.put(2, \"key2\", \"value2\"));\n    }\n\n    @Test\n    public void testPutAtIndexNewKey() {\n        listOrderedMap.put(\"key1\", \"value1\");\n        assertNull(listOrderedMap.put(1, \"key2\", \"value2\"));\n        assertEquals(\"value2\", listOrderedMap.get(\"key2\"));\n    }\n\n    @Test\n    public void testPutAtIndexExistingKey() {\n        listOrderedMap.put(\"key1\", \"value1\");\n        listOrderedMap.put(\"key2\", \"value2\");\n        assertEquals(\"value2\", listOrderedMap.put(1, \"key2\", \"newValue2\"));\n        assertEquals(\"newValue2\", listOrderedMap.get(\"key2\"));\n    }\n\n    @Test\n    public void testPutAtIndexExistingKeyBeforeIndex() {\n        listOrderedMap.put(\"key1\", \"value1\");\n        listOrderedMap.put(\"key2\", \"value2\");\n        assertEquals(\"value1\", listOrderedMap.put(1, \"key1\", \"newValue1\"));\n        assertEquals(\"newValue1\", listOrderedMap.get(\"key1\"));\n    }\n\n    @Test\n    public void testPutAtIndexExistingKeyAtSameIndex() {\n        listOrderedMap.put(\"key1\", \"value1\");\n        listOrderedMap.put(\"key2\", \"value2\");\n        assertEquals(\"value2\", listOrderedMap.put(1, \"key2\", \"newValue2\"));\n        assertEquals(\"newValue2\", listOrderedMap.get(\"key2\"));\n    }\n\n    @Test\n    public void testPutAtIndexExistingKeyAfterIndex() {\n        listOrderedMap.put(\"key1\", \"value1\");\n        listOrderedMap.put(\"key2\", \"value2\");\n        assertEquals(\"value2\", listOrderedMap.put(0, \"key2\", \"newValue2\"));\n        assertEquals(\"newValue2\", listOrderedMap.get(\"key2\"));\n    }\n}\n"}]