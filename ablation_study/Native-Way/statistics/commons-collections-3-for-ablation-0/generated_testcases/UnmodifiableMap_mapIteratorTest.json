[{"strategy": "retry", "code": "\npackage org.apache.commons.collections4.map;\n\nimport org.apache.commons.collections4.IterableMap;\nimport org.apache.commons.collections4.MapIterator;\nimport org.apache.commons.collections4.iterators.UnmodifiableMapIterator;\nimport org.apache.commons.collections4.iterators.EntrySetMapIterator;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.Collection;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class UnmodifiableMap_mapIteratorTest {\n\n    private UnmodifiableMap<String, String> unmodifiableMap;\n    private Map<String, String> map;\n\n    @BeforeEach\n    public void setUp() {\n        map = new HashMap<>();\n        map.put(\"key1\", \"value1\");\n        map.put(\"key2\", \"value2\");\n        unmodifiableMap = UnmodifiableMap.unmodifiableMap(map);\n    }\n\n    @Test\n    public void testMapIteratorWithIterableMap() {\n        IterableMap<String, String> iterableMap = new IterableMap<String, String>() {\n            @Override\n            public MapIterator<String, String> mapIterator() {\n                return new EntrySetMapIterator<>(map);\n            }\n\n            @Override\n            public String put(String key, String value) {\n                return map.put(key, value);\n            }\n\n            @Override\n            public String get(Object key) {\n                return map.get(key);\n            }\n\n            @Override\n            public Set<String> keySet() {\n                return map.keySet();\n            }\n\n            @Override\n            public Collection<String> values() {\n                return map.values();\n            }\n\n            @Override\n            public Set<Map.Entry<String, String>> entrySet() {\n                return map.entrySet();\n            }\n\n            @Override\n            public int size() {\n                return map.size();\n            }\n\n            @Override\n            public boolean isEmpty() {\n                return map.isEmpty();\n            }\n\n            @Override\n            public boolean containsKey(Object key) {\n                return map.containsKey(key);\n            }\n\n            @Override\n            public boolean containsValue(Object value) {\n                return map.containsValue(value);\n            }\n\n            @Override\n            public String remove(Object key) {\n                return map.remove(key);\n            }\n\n            @Override\n            public void putAll(Map<? extends String, ? extends String> m) {\n                map.putAll(m);\n            }\n\n            @Override\n            public void clear() {\n                map.clear();\n            }\n        };\n\n        unmodifiableMap = UnmodifiableMap.unmodifiableMap(iterableMap);\n        MapIterator<String, String> iterator = unmodifiableMap.mapIterator();\n        assertTrue(iterator instanceof UnmodifiableMapIterator);\n    }\n\n    @Test\n    public void testMapIteratorWithoutIterableMap() {\n        MapIterator<String, String> iterator = unmodifiableMap.mapIterator();\n        assertTrue(iterator instanceof UnmodifiableMapIterator);\n    }\n}\n"}]