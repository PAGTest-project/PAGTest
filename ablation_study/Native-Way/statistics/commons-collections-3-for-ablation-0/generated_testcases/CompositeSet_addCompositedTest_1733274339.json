[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.set;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.HashSet;\nimport java.util.Set;\nimport org.apache.commons.collections4.set.CompositeSet.SetMutator;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class CompositeSet_addCompositedTest {\n\n    private CompositeSet<String> compositeSet;\n    private Set<String> set1;\n    private Set<String> set2;\n\n    @BeforeEach\n    public void setUp() {\n        compositeSet = new CompositeSet<>();\n        set1 = new HashSet<>();\n        set2 = new HashSet<>();\n        set1.add(\"1\");\n        set1.add(\"2\");\n        set2.add(\"3\");\n        set2.add(\"4\");\n    }\n\n    @Test\n    public void testAddCompositedNoCollision() {\n        compositeSet.addComposited(set1);\n        compositeSet.addComposited(set2);\n        assertEquals(4, compositeSet.size());\n    }\n\n    @Test\n    public void testAddCompositedWithCollisionNoMutator() {\n        set2.add(\"2\"); // Introduce collision\n        assertThrows(UnsupportedOperationException.class, () -> {\n            compositeSet.addComposited(set1);\n            compositeSet.addComposited(set2);\n        });\n    }\n\n    @Test\n    public void testAddCompositedWithCollisionAndMutator() {\n        set2.add(\"2\"); // Introduce collision\n        compositeSet.setMutator(new SetMutator<String>() {\n            @Override\n            public boolean add(CompositeSet<String> composite, List<Set<String>> sets, String obj) {\n                return true;\n            }\n\n            @Override\n            public boolean addAll(CompositeSet<String> composite, List<Set<String>> sets, Collection<? extends String> coll) {\n                return true;\n            }\n\n            @Override\n            public void resolveCollision(CompositeSet<String> comp, Set<String> existing, Set<String> added, Collection<String> intersects) {\n                added.removeAll(intersects);\n            }\n        });\n        compositeSet.addComposited(set1);\n        compositeSet.addComposited(set2);\n        assertEquals(4, compositeSet.size());\n    }\n\n    @Test\n    public void testAddCompositedNullSet() {\n        compositeSet.addComposited(null);\n        assertEquals(0, compositeSet.size());\n    }\n\n    @Test\n    public void testAddCompositedIllegalEntryUnresolved() {\n        set2.add(\"2\"); // Introduce collision\n        compositeSet.setMutator(new SetMutator<String>() {\n            @Override\n            public boolean add(CompositeSet<String> composite, List<Set<String>> sets, String obj) {\n                return true;\n            }\n\n            @Override\n            public boolean addAll(CompositeSet<String> composite, List<Set<String>> sets, Collection<? extends String> coll) {\n                return true;\n            }\n\n            @Override\n            public void resolveCollision(CompositeSet<String> comp, Set<String> existing, Set<String> added, Collection<String> intersects) {\n                // Do nothing, let the collision unresolved\n            }\n        });\n        assertThrows(IllegalArgumentException.class, () -> {\n            compositeSet.addComposited(set1);\n            compositeSet.addComposited(set2);\n        });\n    }\n}\n"}]