[{"strategy": "retry", "code": "\npackage org.apache.commons.collections4.iterators;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.List;\nimport java.util.NoSuchElementException;\n\nimport org.apache.commons.collections4.comparators.ComparableComparator;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class CollatingIterator_nextTest {\n\n    private Comparator<Integer> comparator;\n    private List<Integer> evens;\n    private List<Integer> odds;\n    private List<Integer> fib;\n\n    @BeforeEach\n    public void setUp() throws Exception {\n        comparator = new ComparableComparator<>();\n        evens = new ArrayList<>();\n        odds = new ArrayList<>();\n        for (int i = 0; i < 20; i++) {\n            if (0 == i % 2) {\n                evens.add(i);\n            } else {\n                odds.add(i);\n            }\n        }\n        fib = new ArrayList<>();\n        fib.add(1);\n        fib.add(1);\n        fib.add(2);\n        fib.add(3);\n        fib.add(5);\n        fib.add(8);\n        fib.add(13);\n        fib.add(21);\n    }\n\n    @Test\n    public void testNextWithElements() {\n        final CollatingIterator<Integer> iter = new CollatingIterator<>(comparator);\n        iter.addIterator(evens.iterator());\n        iter.addIterator(odds.iterator());\n\n        for (int i = 0; i < 20; i++) {\n            assertTrue(iter.hasNext());\n            assertEquals(i, iter.next().intValue());\n        }\n        assertFalse(iter.hasNext());\n    }\n\n    @Test\n    public void testNextWithoutElements() {\n        final CollatingIterator<Integer> iter = new CollatingIterator<>(comparator);\n        iter.addIterator(new ArrayList<Integer>().iterator());\n\n        assertFalse(iter.hasNext());\n        assertThrows(NoSuchElementException.class, () -> iter.next());\n    }\n\n    @Test\n    public void testNextWithSingleIterator() {\n        final CollatingIterator<Integer> iter = new CollatingIterator<>(comparator);\n        iter.addIterator(evens.iterator());\n\n        for (int i = 0; i < evens.size(); i++) {\n            assertTrue(iter.hasNext());\n            assertEquals(evens.get(i), iter.next());\n        }\n        assertFalse(iter.hasNext());\n    }\n\n    @Test\n    public void testNextWithMultipleIterators() {\n        final CollatingIterator<Integer> iter = new CollatingIterator<>(comparator);\n        iter.addIterator(evens.iterator());\n        iter.addIterator(odds.iterator());\n        iter.addIterator(fib.iterator());\n\n        List<Integer> combined = new ArrayList<>();\n        combined.addAll(evens);\n        combined.addAll(odds);\n        combined.addAll(fib);\n        combined.sort(comparator);\n\n        for (Integer value : combined) {\n            assertTrue(iter.hasNext());\n            assertEquals(value, iter.next());\n        }\n        assertFalse(iter.hasNext());\n    }\n\n    @Test\n    public void testNextWithNoComparator() {\n        final CollatingIterator<Integer> iter = new CollatingIterator<>();\n        iter.addIterator(evens.iterator());\n\n        assertThrows(IllegalStateException.class, () -> iter.next());\n    }\n}\n"}]