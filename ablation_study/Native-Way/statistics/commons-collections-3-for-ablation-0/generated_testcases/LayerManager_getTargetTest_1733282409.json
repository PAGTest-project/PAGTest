[{"strategy": "retry", "code": "\npackage org.apache.commons.collections4.bloomfilter;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\n\nimport java.util.function.Predicate;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class LayerManager_getTargetTest {\n\n    private LayerManager<BloomFilter> layerManager;\n    private Shape shape;\n\n    @BeforeEach\n    public void setUp() {\n        shape = new Shape(10, 5); // Provide necessary parameters to the Shape constructor\n        layerManager = LayerManager.builder()\n                                   .setSupplier(() -> new SimpleBloomFilter(shape))\n                                   .setExtendCheck(LayerManager.ExtendCheck.neverAdvance())\n                                   .setCleanup(LayerManager.Cleanup.noCleanup())\n                                   .get();\n    }\n\n    @Test\n    public void testGetTargetWhenExtendCheckIsFalse() {\n        // Arrange\n        Predicate<LayerManager<BloomFilter>> extendCheck = lm -> false;\n        layerManager = LayerManager.builder()\n                                   .setSupplier(() -> new SimpleBloomFilter(shape))\n                                   .setExtendCheck(extendCheck)\n                                   .setCleanup(LayerManager.Cleanup.noCleanup())\n                                   .get();\n\n        // Act\n        BloomFilter target = layerManager.getTarget();\n\n        // Assert\n        assertEquals(layerManager.last(), target);\n    }\n\n    @Test\n    public void testGetTargetWhenExtendCheckIsTrue() {\n        // Arrange\n        Predicate<LayerManager<BloomFilter>> extendCheck = lm -> true;\n        layerManager = LayerManager.builder()\n                                   .setSupplier(() -> new SimpleBloomFilter(shape))\n                                   .setExtendCheck(extendCheck)\n                                   .setCleanup(LayerManager.Cleanup.noCleanup())\n                                   .get();\n\n        // Act\n        BloomFilter target = layerManager.getTarget();\n\n        // Assert\n        assertEquals(layerManager.last(), target);\n    }\n\n    @Test\n    public void testGetTargetAfterNext() {\n        // Arrange\n        Predicate<LayerManager<BloomFilter>> extendCheck = lm -> true;\n        layerManager = LayerManager.builder()\n                                   .setSupplier(() -> new SimpleBloomFilter(shape))\n                                   .setExtendCheck(extendCheck)\n                                   .setCleanup(LayerManager.Cleanup.noCleanup())\n                                   .get();\n\n        // Act\n        layerManager.next();\n        BloomFilter target = layerManager.getTarget();\n\n        // Assert\n        assertEquals(layerManager.last(), target);\n    }\n\n    @Test\n    public void testGetTargetWithEmptyFilters() {\n        // Arrange\n        layerManager = LayerManager.builder()\n                                   .setSupplier(() -> new SimpleBloomFilter(shape))\n                                   .setExtendCheck(LayerManager.ExtendCheck.neverAdvance())\n                                   .setCleanup(LayerManager.Cleanup.noCleanup())\n                                   .get();\n        layerManager.clear();\n\n        // Act\n        BloomFilter target = layerManager.getTarget();\n\n        // Assert\n        assertEquals(layerManager.last(), target);\n    }\n}\n"}]