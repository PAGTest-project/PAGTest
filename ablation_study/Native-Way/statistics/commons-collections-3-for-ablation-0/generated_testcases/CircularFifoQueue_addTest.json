[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.queue;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class CircularFifoQueue_addTest {\n\n    private CircularFifoQueue<String> queue;\n\n    @BeforeEach\n    public void setUp() {\n        queue = new CircularFifoQueue<>(3);\n    }\n\n    @Test\n    public void testAddElementSuccess() {\n        assertTrue(queue.add(\"A\"));\n        assertTrue(queue.add(\"B\"));\n        assertTrue(queue.add(\"C\"));\n        assertEquals(3, queue.size());\n    }\n\n    @Test\n    public void testAddElementWhenFull() {\n        queue.add(\"A\");\n        queue.add(\"B\");\n        queue.add(\"C\");\n        assertTrue(queue.add(\"D\"));\n        assertEquals(3, queue.size());\n        assertEquals(\"B\", queue.get(0));\n        assertEquals(\"C\", queue.get(1));\n        assertEquals(\"D\", queue.get(2));\n    }\n\n    @Test\n    public void testAddNullElement() {\n        assertThrows(NullPointerException.class, () -> {\n            queue.add(null);\n        });\n    }\n\n    @Test\n    public void testAddElementWrapAround() {\n        queue.add(\"A\");\n        queue.add(\"B\");\n        queue.add(\"C\");\n        queue.remove();\n        queue.add(\"D\");\n        assertEquals(\"B\", queue.get(0));\n        assertEquals(\"C\", queue.get(1));\n        assertEquals(\"D\", queue.get(2));\n    }\n\n    @Test\n    public void testAddElementWhenQueueIsEmpty() {\n        assertTrue(queue.add(\"A\"));\n        assertEquals(1, queue.size());\n        assertEquals(\"A\", queue.get(0));\n    }\n\n    @Test\n    public void testAddElementWhenQueueHasOneElement() {\n        queue.add(\"A\");\n        assertTrue(queue.add(\"B\"));\n        assertEquals(2, queue.size());\n        assertEquals(\"A\", queue.get(0));\n        assertEquals(\"B\", queue.get(1));\n    }\n\n    @Test\n    public void testAddElementWhenQueueHasTwoElements() {\n        queue.add(\"A\");\n        queue.add(\"B\");\n        assertTrue(queue.add(\"C\"));\n        assertEquals(3, queue.size());\n        assertEquals(\"A\", queue.get(0));\n        assertEquals(\"B\", queue.get(1));\n        assertEquals(\"C\", queue.get(2));\n    }\n\n    @Test\n    public void testAddElementWhenQueueIsFullAndRemoveIsCalled() {\n        queue.add(\"A\");\n        queue.add(\"B\");\n        queue.add(\"C\");\n        queue.remove();\n        assertTrue(queue.add(\"D\"));\n        assertEquals(3, queue.size());\n        assertEquals(\"B\", queue.get(0));\n        assertEquals(\"C\", queue.get(1));\n        assertEquals(\"D\", queue.get(2));\n    }\n}\n"}]