[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.map;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class CompositeMap_addCompositedTest {\n\n    private CompositeMap<String, String> compositeMap;\n    private Map<String, String> map1;\n    private Map<String, String> map2;\n\n    @BeforeEach\n    public void setUp() {\n        map1 = new HashMap<>();\n        map1.put(\"key1\", \"value1\");\n        map1.put(\"key2\", \"value2\");\n\n        map2 = new HashMap<>();\n        map2.put(\"key3\", \"value3\");\n        map2.put(\"key4\", \"value4\");\n\n        compositeMap = new CompositeMap<>(map1, map2, new CompositeMap.MapMutator<String, String>() {\n            private static final long serialVersionUID = 1L;\n\n            @Override\n            public String put(CompositeMap<String, String> map, Map<String, String>[] composited, String key, String value) {\n                return null;\n            }\n\n            @Override\n            public void putAll(CompositeMap<String, String> map, Map<String, String>[] composited, Map<? extends String, ? extends String> t) {\n            }\n\n            @Override\n            public void resolveCollision(CompositeMap<String, String> composite, Map<String, String> existing, Map<String, String> added, Collection<String> intersect) {\n            }\n        });\n    }\n\n    @Test\n    public void testAddCompositedNoCollision() {\n        Map<String, String> newMap = new HashMap<>();\n        newMap.put(\"key5\", \"value5\");\n        newMap.put(\"key6\", \"value6\");\n\n        compositeMap.addComposited(newMap);\n\n        assertEquals(6, compositeMap.size());\n        assertTrue(compositeMap.containsKey(\"key5\"));\n        assertTrue(compositeMap.containsKey(\"key6\"));\n    }\n\n    @Test\n    public void testAddCompositedWithCollisionNoMutator() {\n        Map<String, String> newMap = new HashMap<>();\n        newMap.put(\"key1\", \"newValue1\");\n        newMap.put(\"key7\", \"value7\");\n\n        assertThrows(IllegalArgumentException.class, () -> compositeMap.addComposited(newMap));\n    }\n\n    @Test\n    public void testAddCompositedWithCollisionWithMutator() {\n        Map<String, String> newMap = new HashMap<>();\n        newMap.put(\"key1\", \"newValue1\");\n        newMap.put(\"key7\", \"value7\");\n\n        compositeMap.setMutator(new CompositeMap.MapMutator<String, String>() {\n            private static final long serialVersionUID = 1L;\n\n            @Override\n            public String put(CompositeMap<String, String> map, Map<String, String>[] composited, String key, String value) {\n                return null;\n            }\n\n            @Override\n            public void putAll(CompositeMap<String, String> map, Map<String, String>[] composited, Map<? extends String, ? extends String> t) {\n            }\n\n            @Override\n            public void resolveCollision(CompositeMap<String, String> composite, Map<String, String> existing, Map<String, String> added, Collection<String> intersect) {\n                // Handle collision\n            }\n        });\n\n        compositeMap.addComposited(newMap);\n\n        assertEquals(6, compositeMap.size());\n        assertTrue(compositeMap.containsKey(\"key7\"));\n    }\n\n    @Test\n    public void testAddCompositedNullMap() {\n        compositeMap.addComposited(null);\n\n        assertEquals(4, compositeMap.size());\n    }\n}\n"}]