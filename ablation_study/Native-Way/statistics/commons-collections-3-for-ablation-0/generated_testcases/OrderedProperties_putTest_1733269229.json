[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.properties;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNull;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class OrderedProperties_putTest {\n\n    private OrderedProperties orderedProperties;\n\n    @BeforeEach\n    public void setUp() {\n        orderedProperties = new OrderedProperties();\n    }\n\n    @Test\n    public void testPutNewKey() {\n        Object key = \"newKey\";\n        Object value = \"newValue\";\n        Object result = orderedProperties.put(key, value);\n        assertNull(result);\n        assertTrue(orderedProperties.keySet().contains(key));\n    }\n\n    @Test\n    public void testPutExistingKey() {\n        Object key = \"existingKey\";\n        Object value1 = \"value1\";\n        Object value2 = \"value2\";\n        orderedProperties.put(key, value1);\n        Object result = orderedProperties.put(key, value2);\n        assertEquals(value1, result);\n        assertTrue(orderedProperties.keySet().contains(key));\n    }\n\n    @Test\n    public void testPutNullKey() {\n        Object key = null;\n        Object value = \"nullValue\";\n        Object result = orderedProperties.put(key, value);\n        assertNull(result);\n        assertTrue(orderedProperties.keySet().contains(key));\n    }\n\n    @Test\n    public void testPutNullValue() {\n        Object key = \"nullValueKey\";\n        Object value = null;\n        Object result = orderedProperties.put(key, value);\n        assertNull(result);\n        assertTrue(orderedProperties.keySet().contains(key));\n    }\n\n    @Test\n    public void testPutAll() {\n        OrderedProperties sourceProperties = new OrderedProperties();\n        int first = 1;\n        int last = 11;\n        for (int i = first; i <= last; i++) {\n            sourceProperties.put(\"key\" + i, \"value\" + i);\n        }\n        orderedProperties.putAll(sourceProperties);\n        assertAscendingOrder(orderedProperties);\n        orderedProperties.clear();\n        first = 11;\n        last = 1;\n        for (int i = first; i >= last; i--) {\n            orderedProperties.put(\"key\" + i, \"value\" + i);\n        }\n        assertDescendingOrder(orderedProperties);\n    }\n\n    private void assertAscendingOrder(OrderedProperties properties) {\n        int expectedKey = 1;\n        for (Object key : properties.keySet()) {\n            assertEquals(\"key\" + expectedKey, key);\n            expectedKey++;\n        }\n    }\n\n    private void assertDescendingOrder(OrderedProperties properties) {\n        int expectedKey = 11;\n        for (Object key : properties.keySet()) {\n            assertEquals(\"key\" + expectedKey, key);\n            expectedKey--;\n        }\n    }\n}\n"}]