[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.iterators;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Iterator;\nimport java.util.List;\nimport org.apache.commons.collections4.comparators.ComparableComparator;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class CollatingIterator_addIteratorTest {\n\n    private CollatingIterator<Integer> collatingIterator;\n    private Comparator<Integer> comparator;\n\n    @BeforeEach\n    public void setUp() {\n        comparator = new ComparableComparator<>();\n        collatingIterator = new CollatingIterator<>(comparator);\n    }\n\n    @Test\n    public void testAddIteratorSuccess() {\n        Iterator<Integer> iterator = Arrays.asList(1, 2, 3).iterator();\n        collatingIterator.addIterator(iterator);\n        assertEquals(1, collatingIterator.getIterators().size());\n    }\n\n    @Test\n    public void testAddIteratorNull() {\n        assertThrows(NullPointerException.class, () -> {\n            collatingIterator.addIterator(null);\n        });\n    }\n\n    @Test\n    public void testAddIteratorAfterIterationStarted() {\n        Iterator<Integer> iterator = Arrays.asList(1, 2, 3).iterator();\n        collatingIterator.addIterator(iterator);\n        collatingIterator.hasNext(); // Start iteration\n        assertThrows(IllegalStateException.class, () -> {\n            collatingIterator.addIterator(iterator);\n        });\n    }\n\n    @Test\n    public void testAddIteratorMultiple() {\n        Iterator<Integer> iterator1 = Arrays.asList(1, 3, 5).iterator();\n        Iterator<Integer> iterator2 = Arrays.asList(2, 4, 6).iterator();\n        collatingIterator.addIterator(iterator1);\n        collatingIterator.addIterator(iterator2);\n        assertEquals(2, collatingIterator.getIterators().size());\n    }\n\n    @Test\n    public void testAddIteratorAndCheckNext() {\n        Iterator<Integer> iterator = Arrays.asList(1, 2, 3).iterator();\n        collatingIterator.addIterator(iterator);\n        assertTrue(collatingIterator.hasNext());\n        assertEquals(1, collatingIterator.next());\n    }\n\n    @Test\n    public void testAddIteratorAndCheckHasNext() {\n        Iterator<Integer> iterator = Arrays.asList(1, 2, 3).iterator();\n        collatingIterator.addIterator(iterator);\n        assertTrue(collatingIterator.hasNext());\n        collatingIterator.next();\n        assertTrue(collatingIterator.hasNext());\n        collatingIterator.next();\n        assertTrue(collatingIterator.hasNext());\n        collatingIterator.next();\n        assertFalse(collatingIterator.hasNext());\n    }\n\n    @Test\n    public void testAddIteratorAndCheckGetIterators() {\n        Iterator<Integer> iterator = Arrays.asList(1, 2, 3).iterator();\n        collatingIterator.addIterator(iterator);\n        List<Iterator<? extends Integer>> iterators = collatingIterator.getIterators();\n        assertEquals(1, iterators.size());\n        assertSame(iterator, iterators.get(0));\n    }\n}\n"}]