[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.queue;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class CircularFifoQueue_sizeTest {\n\n    private CircularFifoQueue<Integer> queue;\n\n    @BeforeEach\n    public void setUp() {\n        queue = new CircularFifoQueue<>(5);\n    }\n\n    @Test\n    public void testSizeEmptyQueue() {\n        assertEquals(0, queue.size());\n    }\n\n    @Test\n    public void testSizeNonEmptyQueue() {\n        queue.add(1);\n        queue.add(2);\n        assertEquals(2, queue.size());\n    }\n\n    @Test\n    public void testSizeFullQueue() {\n        for (int i = 0; i < 5; i++) {\n            queue.add(i);\n        }\n        assertEquals(5, queue.size());\n    }\n\n    @Test\n    public void testSizeAfterRemove() {\n        for (int i = 0; i < 5; i++) {\n            queue.add(i);\n        }\n        queue.remove();\n        assertEquals(4, queue.size());\n    }\n\n    @Test\n    public void testSizeAfterClear() {\n        for (int i = 0; i < 5; i++) {\n            queue.add(i);\n        }\n        queue.clear();\n        assertEquals(0, queue.size());\n    }\n\n    @Test\n    public void testSizeAfterWrapAround() {\n        for (int i = 0; i < 5; i++) {\n            queue.add(i);\n        }\n        queue.remove();\n        queue.add(5);\n        assertEquals(5, queue.size());\n    }\n\n    @Test\n    public void testSizeAfterPartialWrapAround() {\n        for (int i = 0; i < 3; i++) {\n            queue.add(i);\n        }\n        queue.remove();\n        queue.add(3);\n        assertEquals(3, queue.size());\n    }\n\n    @Test\n    public void testSizeAfterFullWrapAround() {\n        for (int i = 0; i < 5; i++) {\n            queue.add(i);\n        }\n        for (int i = 0; i < 5; i++) {\n            queue.remove();\n        }\n        for (int i = 0; i < 5; i++) {\n            queue.add(i);\n        }\n        assertEquals(5, queue.size());\n    }\n}\n"}]