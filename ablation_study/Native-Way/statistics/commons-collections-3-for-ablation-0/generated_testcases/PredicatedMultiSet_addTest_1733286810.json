[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.multiset;\n\nimport org.apache.commons.collections4.MultiSet;\nimport org.apache.commons.collections4.Predicate;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\npublic class PredicatedMultiSet_addTest {\n\n    @Test\n    public void testAddValidObject() {\n        MultiSet<String> mockMultiSet = mock(MultiSet.class);\n        Predicate<String> mockPredicate = mock(Predicate.class);\n        PredicatedMultiSet<String> predicatedMultiSet = new PredicatedMultiSet<>(mockMultiSet, mockPredicate);\n\n        String validObject = \"valid\";\n        when(mockPredicate.evaluate(validObject)).thenReturn(true);\n        when(mockMultiSet.add(validObject, 1)).thenReturn(1);\n\n        int result = predicatedMultiSet.add(validObject, 1);\n\n        assertEquals(1, result);\n        verify(mockPredicate).evaluate(validObject);\n        verify(mockMultiSet).add(validObject, 1);\n    }\n\n    @Test\n    public void testAddInvalidObject() {\n        MultiSet<String> mockMultiSet = mock(MultiSet.class);\n        Predicate<String> mockPredicate = mock(Predicate.class);\n        PredicatedMultiSet<String> predicatedMultiSet = new PredicatedMultiSet<>(mockMultiSet, mockPredicate);\n\n        String invalidObject = \"invalid\";\n        when(mockPredicate.evaluate(invalidObject)).thenReturn(false);\n\n        assertThrows(IllegalArgumentException.class, () -> {\n            predicatedMultiSet.add(invalidObject, 1);\n        });\n\n        verify(mockPredicate).evaluate(invalidObject);\n        verify(mockMultiSet, never()).add(any(), anyInt());\n    }\n}\n"}]