[{"strategy": "retry", "code": "\npackage org.apache.commons.collections4.multimap;\n\nimport org.apache.commons.collections4.Transformer;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.Arrays;\nimport java.util.Collections;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TransformedMultiValuedMap_putAllTest {\n\n    private TransformedMultiValuedMap<String, String> transformedMap;\n    private Transformer<String, String> keyTransformer;\n    private Transformer<String, String> valueTransformer;\n\n    @BeforeEach\n    public void setUp() {\n        keyTransformer = new Transformer<String, String>() {\n            @Override\n            public String transform(String input) {\n                return input.toUpperCase();\n            }\n        };\n        valueTransformer = new Transformer<String, String>() {\n            @Override\n            public String transform(String input) {\n                return input.toLowerCase();\n            }\n        };\n        transformedMap = new TransformedMultiValuedMap<>(new ArrayListValuedHashMap<>(), keyTransformer, valueTransformer);\n    }\n\n    @Test\n    public void testPutAllSuccess() {\n        boolean result = transformedMap.putAll(\"key\", Arrays.asList(\"VALUE1\", \"VALUE2\"));\n        assertTrue(result);\n        assertEquals(1, transformedMap.size());\n        assertEquals(Arrays.asList(\"value1\", \"value2\"), transformedMap.get(\"KEY\"));\n    }\n\n    @Test\n    public void testPutAllNullValues() {\n        assertThrows(NullPointerException.class, () -> {\n            transformedMap.putAll(\"key\", null);\n        });\n    }\n\n    @Test\n    public void testPutAllEmptyIterable() {\n        boolean result = transformedMap.putAll(\"key\", Collections.emptyList());\n        assertFalse(result);\n        assertTrue(transformedMap.isEmpty());\n    }\n\n    @Test\n    public void testPutAllWithNoTransformers() {\n        transformedMap = new TransformedMultiValuedMap<>(new ArrayListValuedHashMap<>(), null, null);\n        boolean result = transformedMap.putAll(\"key\", Arrays.asList(\"VALUE1\", \"VALUE2\"));\n        assertTrue(result);\n        assertEquals(1, transformedMap.size());\n        assertEquals(Arrays.asList(\"VALUE1\", \"VALUE2\"), transformedMap.get(\"key\"));\n    }\n\n    @Test\n    public void testPutAllWithKeyTransformerOnly() {\n        transformedMap = new TransformedMultiValuedMap<>(new ArrayListValuedHashMap<>(), keyTransformer, null);\n        boolean result = transformedMap.putAll(\"key\", Arrays.asList(\"VALUE1\", \"VALUE2\"));\n        assertTrue(result);\n        assertEquals(1, transformedMap.size());\n        assertEquals(Arrays.asList(\"VALUE1\", \"VALUE2\"), transformedMap.get(\"KEY\"));\n    }\n\n    @Test\n    public void testPutAllWithValueTransformerOnly() {\n        transformedMap = new TransformedMultiValuedMap<>(new ArrayListValuedHashMap<>(), null, valueTransformer);\n        boolean result = transformedMap.putAll(\"key\", Arrays.asList(\"VALUE1\", \"VALUE2\"));\n        assertTrue(result);\n        assertEquals(1, transformedMap.size());\n        assertEquals(Arrays.asList(\"value1\", \"value2\"), transformedMap.get(\"key\"));\n    }\n}\n"}]