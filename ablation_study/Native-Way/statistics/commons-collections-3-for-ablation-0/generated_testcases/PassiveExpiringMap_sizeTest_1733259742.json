[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.map;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.concurrent.TimeUnit;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class PassiveExpiringMap_sizeTest {\n\n    private PassiveExpiringMap<Integer, String> expiringMap;\n\n    @BeforeEach\n    public void setUp() {\n        expiringMap = new PassiveExpiringMap<>(1, TimeUnit.SECONDS);\n    }\n\n    @Test\n    public void testSizeWithNoExpiredEntries() {\n        expiringMap.put(1, \"One\");\n        expiringMap.put(2, \"Two\");\n        assertEquals(2, expiringMap.size());\n    }\n\n    @Test\n    public void testSizeWithExpiredEntries() throws InterruptedException {\n        expiringMap.put(1, \"One\");\n        expiringMap.put(2, \"Two\");\n        Thread.sleep(1500); // Wait for entries to expire\n        assertEquals(0, expiringMap.size());\n    }\n\n    @Test\n    public void testSizeWithMixedExpiredAndNonExpiredEntries() throws InterruptedException {\n        expiringMap.put(1, \"One\");\n        expiringMap.put(2, \"Two\");\n        Thread.sleep(500); // Wait for partial expiration\n        expiringMap.put(3, \"Three\");\n        assertEquals(1, expiringMap.size());\n    }\n\n    @Test\n    public void testSizeWithNeverExpiringEntries() {\n        expiringMap = new PassiveExpiringMap<>(-1L);\n        expiringMap.put(1, \"One\");\n        expiringMap.put(2, \"Two\");\n        assertEquals(2, expiringMap.size());\n    }\n\n    @Test\n    public void testSizeWithAlwaysExpiringEntries() {\n        expiringMap = new PassiveExpiringMap<>(0L);\n        expiringMap.put(1, \"One\");\n        expiringMap.put(2, \"Two\");\n        assertEquals(0, expiringMap.size());\n    }\n\n    @Test\n    public void testSizeWithEmptyMap() {\n        assertEquals(0, expiringMap.size());\n    }\n\n    @Test\n    public void testSizeWithCustomExpirationPolicy() {\n        ExpirationPolicy<Integer, String> customPolicy = (key, value) -> key == 1 ? -1L : 0L;\n        expiringMap = new PassiveExpiringMap<>(customPolicy);\n        expiringMap.put(1, \"One\");\n        expiringMap.put(2, \"Two\");\n        assertEquals(1, expiringMap.size());\n    }\n}\n"}]