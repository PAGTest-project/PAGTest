[{"strategy": "retry", "code": "\npackage org.apache.commons.collections4.properties;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNull;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\n\nimport java.util.function.Function;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class OrderedProperties_computeIfAbsentTest {\n\n    private OrderedProperties orderedProperties;\n\n    @BeforeEach\n    public void setUp() {\n        orderedProperties = new OrderedProperties();\n    }\n\n    @Test\n    public void testComputeIfAbsentWithExistingKey() {\n        orderedProperties.put(\"key1\", \"value1\");\n        Function<Object, Object> mappingFunction = key -> \"newValue\";\n        Object result = orderedProperties.computeIfAbsent(\"key1\", mappingFunction);\n        assertEquals(\"value1\", result);\n        assertTrue(orderedProperties.containsOrderedKey(\"key1\"));\n    }\n\n    @Test\n    public void testComputeIfAbsentWithNewKey() {\n        Function<Object, Object> mappingFunction = key -> \"newValue\";\n        Object result = orderedProperties.computeIfAbsent(\"key2\", mappingFunction);\n        assertEquals(\"newValue\", result);\n        assertTrue(orderedProperties.containsOrderedKey(\"key2\"));\n    }\n\n    @Test\n    public void testComputeIfAbsentWithNullMappingFunction() {\n        Function<Object, Object> mappingFunction = key -> null;\n        Object result = orderedProperties.computeIfAbsent(\"key3\", mappingFunction);\n        assertNull(result);\n        assertFalse(orderedProperties.containsOrderedKey(\"key3\"));\n    }\n}\n"}]