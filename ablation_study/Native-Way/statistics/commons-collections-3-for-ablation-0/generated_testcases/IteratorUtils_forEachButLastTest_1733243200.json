[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\nimport java.util.Iterator;\n\npublic class IteratorUtils_forEachButLastTest {\n\n    @Test\n    public void testForEachButLast_WithSingleElement() {\n        Iterator<String> iterator = mock(Iterator.class);\n        Closure<String> closure = mock(Closure.class);\n\n        when(iterator.hasNext()).thenReturn(true).thenReturn(false);\n        when(iterator.next()).thenReturn(\"single\");\n\n        String result = IteratorUtils.forEachButLast(iterator, closure);\n\n        assertEquals(\"single\", result);\n        verify(closure, never()).accept(any());\n    }\n\n    @Test\n    public void testForEachButLast_WithMultipleElements() {\n        Iterator<String> iterator = mock(Iterator.class);\n        Closure<String> closure = mock(Closure.class);\n\n        when(iterator.hasNext()).thenReturn(true, true, false);\n        when(iterator.next()).thenReturn(\"first\", \"last\");\n\n        String result = IteratorUtils.forEachButLast(iterator, closure);\n\n        assertEquals(\"last\", result);\n        verify(closure).accept(\"first\");\n    }\n\n    @Test\n    public void testForEachButLast_WithNullIterator() {\n        Closure<String> closure = mock(Closure.class);\n\n        String result = IteratorUtils.forEachButLast(null, closure);\n\n        assertNull(result);\n        verify(closure, never()).accept(any());\n    }\n\n    @Test\n    public void testForEachButLast_WithNullClosure() {\n        Iterator<String> iterator = mock(Iterator.class);\n\n        assertThrows(NullPointerException.class, () -> {\n            IteratorUtils.forEachButLast(iterator, null);\n        });\n    }\n}\n"}]