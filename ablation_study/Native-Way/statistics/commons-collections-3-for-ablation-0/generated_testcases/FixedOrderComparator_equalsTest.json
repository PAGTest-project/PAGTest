[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.comparators;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class FixedOrderComparator_equalsTest {\n\n    private FixedOrderComparator<String> comparator;\n\n    @BeforeEach\n    public void setUp() {\n        List<String> items = Arrays.asList(\"New York\", \"Los Angeles\", \"Chicago\");\n        comparator = new FixedOrderComparator<>(items);\n    }\n\n    @Test\n    public void testEqualsSameInstance() {\n        assertTrue(comparator.equals(comparator));\n    }\n\n    @Test\n    public void testEqualsNull() {\n        assertFalse(comparator.equals(null));\n    }\n\n    @Test\n    public void testEqualsDifferentClass() {\n        assertFalse(comparator.equals(new Object()));\n    }\n\n    @Test\n    public void testEqualsDifferentMap() {\n        FixedOrderComparator<String> other = new FixedOrderComparator<>(Arrays.asList(\"New York\", \"Chicago\", \"Los Angeles\"));\n        assertFalse(comparator.equals(other));\n    }\n\n    @Test\n    public void testEqualsDifferentCounter() {\n        FixedOrderComparator<String> other = new FixedOrderComparator<>(Arrays.asList(\"New York\", \"Los Angeles\", \"Chicago\"));\n        other.add(\"Houston\");\n        assertFalse(comparator.equals(other));\n    }\n\n    @Test\n    public void testEqualsDifferentIsLocked() {\n        FixedOrderComparator<String> other = new FixedOrderComparator<>(Arrays.asList(\"New York\", \"Los Angeles\", \"Chicago\"));\n        other.compare(\"New York\", \"Los Angeles\");\n        assertFalse(comparator.equals(other));\n    }\n\n    @Test\n    public void testEqualsDifferentUnknownObjectBehavior() {\n        FixedOrderComparator<String> other = new FixedOrderComparator<>(Arrays.asList(\"New York\", \"Los Angeles\", \"Chicago\"));\n        other.setUnknownObjectBehavior(FixedOrderComparator.UnknownObjectBehavior.BEFORE);\n        assertFalse(comparator.equals(other));\n    }\n\n    @Test\n    public void testEqualsIdentical() {\n        FixedOrderComparator<String> other = new FixedOrderComparator<>(Arrays.asList(\"New York\", \"Los Angeles\", \"Chicago\"));\n        assertTrue(comparator.equals(other));\n    }\n}\n"}]