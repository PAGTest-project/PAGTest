[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.map;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Set;\n\nimport org.apache.commons.collections4.set.CompositeSet;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class CompositeMap_keySetTest {\n\n    private CompositeMap<String, String> compositeMap;\n    private Map<String, String> map1;\n    private Map<String, String> map2;\n\n    @BeforeEach\n    public void setUp() {\n        map1 = new HashMap<>();\n        map1.put(\"1\", \"one\");\n        map1.put(\"2\", \"two\");\n\n        map2 = new HashMap<>();\n        map2.put(\"3\", \"three\");\n        map2.put(\"4\", \"four\");\n\n        compositeMap = new CompositeMap<>(map1, map2);\n    }\n\n    @Test\n    public void testKeySet() {\n        Set<String> keySet = compositeMap.keySet();\n        assertTrue(keySet instanceof CompositeSet);\n        assertEquals(4, keySet.size());\n        assertTrue(keySet.contains(\"1\"));\n        assertTrue(keySet.contains(\"2\"));\n        assertTrue(keySet.contains(\"3\"));\n        assertTrue(keySet.contains(\"4\"));\n    }\n\n    @Test\n    public void testKeySetAfterAddComposited() {\n        Map<String, String> map3 = new HashMap<>();\n        map3.put(\"5\", \"five\");\n        compositeMap.addComposited(map3);\n\n        Set<String> keySet = compositeMap.keySet();\n        assertTrue(keySet instanceof CompositeSet);\n        assertEquals(5, keySet.size());\n        assertTrue(keySet.contains(\"5\"));\n    }\n\n    @Test\n    public void testKeySetAfterRemoveComposited() {\n        compositeMap.removeComposited(map2);\n\n        Set<String> keySet = compositeMap.keySet();\n        assertTrue(keySet instanceof CompositeSet);\n        assertEquals(2, keySet.size());\n        assertTrue(keySet.contains(\"1\"));\n        assertTrue(keySet.contains(\"2\"));\n        assertFalse(keySet.contains(\"3\"));\n        assertFalse(keySet.contains(\"4\"));\n    }\n}\n"}]