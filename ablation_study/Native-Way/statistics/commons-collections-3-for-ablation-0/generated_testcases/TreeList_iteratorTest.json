[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.list;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\n\nimport java.util.Iterator;\nimport java.util.NoSuchElementException;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class TreeList_iteratorTest {\n\n    private TreeList<Integer> treeList;\n\n    @BeforeEach\n    public void setUp() {\n        treeList = new TreeList<>();\n        treeList.add(0);\n        treeList.add(1);\n        treeList.add(2);\n        treeList.add(3);\n        treeList.add(4);\n    }\n\n    @Test\n    public void testIterator() {\n        Iterator<Integer> iterator = treeList.iterator();\n        assertNotNull(iterator);\n        for (int i = 0; i < treeList.size(); i++) {\n            assertEquals(Integer.valueOf(i), iterator.next());\n        }\n        assertFalse(iterator.hasNext());\n    }\n\n    @Test\n    public void testIteratorNoSuchElementException() {\n        Iterator<Integer> iterator = treeList.iterator();\n        for (int i = 0; i < treeList.size(); i++) {\n            iterator.next();\n        }\n        assertThrows(NoSuchElementException.class, () -> iterator.next());\n    }\n\n    @Test\n    public void testIteratorAfterRemove() {\n        treeList.remove(2);\n        Iterator<Integer> iterator = treeList.iterator();\n        assertNotNull(iterator);\n        assertEquals(Integer.valueOf(0), iterator.next());\n        assertEquals(Integer.valueOf(1), iterator.next());\n        assertEquals(Integer.valueOf(3), iterator.next());\n        assertEquals(Integer.valueOf(4), iterator.next());\n        assertFalse(iterator.hasNext());\n    }\n\n    @Test\n    public void testIteratorEmptyList() {\n        treeList.clear();\n        Iterator<Integer> iterator = treeList.iterator();\n        assertNotNull(iterator);\n        assertFalse(iterator.hasNext());\n    }\n}\n"}]