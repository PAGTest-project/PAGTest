[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.bloomfilter;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class Shape_fromNMTest {\n\n    @Test\n    public void testFromNM_ValidParameters() {\n        Shape shape = Shape.fromNM(1000, 10000);\n        assertNotNull(shape);\n        assertEquals(7, shape.getNumberOfHashFunctions());\n        assertEquals(10000, shape.getNumberOfBits());\n    }\n\n    @Test\n    public void testFromNM_InvalidNumberOfItems() {\n        assertThrows(IllegalArgumentException.class, () -> Shape.fromNM(0, 10000));\n    }\n\n    @Test\n    public void testFromNM_InvalidNumberOfBits() {\n        assertThrows(IllegalArgumentException.class, () -> Shape.fromNM(1000, 0));\n    }\n\n    @Test\n    public void testFromNM_InvalidProbability() {\n        assertThrows(IllegalArgumentException.class, () -> Shape.fromNM(1, 1));\n    }\n\n    @Test\n    public void testFromNM_MaxValues() {\n        Shape shape = Shape.fromNM(Integer.MAX_VALUE, Integer.MAX_VALUE);\n        assertNotNull(shape);\n        assertEquals(1, shape.getNumberOfHashFunctions());\n        assertEquals(Integer.MAX_VALUE, shape.getNumberOfBits());\n    }\n\n    @Test\n    public void testFromNM_MinValues() {\n        Shape shape = Shape.fromNM(1, 1);\n        assertNotNull(shape);\n        assertEquals(1, shape.getNumberOfHashFunctions());\n        assertEquals(1, shape.getNumberOfBits());\n    }\n}\n"}]