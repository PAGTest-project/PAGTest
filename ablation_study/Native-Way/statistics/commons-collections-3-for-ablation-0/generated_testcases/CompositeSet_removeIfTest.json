[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.set;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.function.Predicate;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class CompositeSet_removeIfTest {\n\n    private CompositeSet<String> compositeSet;\n    private Set<String> set1;\n    private Set<String> set2;\n\n    @BeforeEach\n    public void setUp() {\n        set1 = new HashSet<>();\n        set1.add(\"A\");\n        set1.add(\"B\");\n\n        set2 = new HashSet<>();\n        set2.add(\"C\");\n        set2.add(\"D\");\n\n        compositeSet = new CompositeSet<>(set1, set2);\n    }\n\n    @Test\n    public void testRemoveIf_NullFilter() {\n        assertFalse(compositeSet.removeIf(null));\n    }\n\n    @Test\n    public void testRemoveIf_NoMatches() {\n        Predicate<String> filter = s -> s.equals(\"E\");\n        assertFalse(compositeSet.removeIf(filter));\n    }\n\n    @Test\n    public void testRemoveIf_MatchesInOneSet() {\n        Predicate<String> filter = s -> s.equals(\"A\");\n        assertTrue(compositeSet.removeIf(filter));\n        assertFalse(set1.contains(\"A\"));\n        assertTrue(set1.contains(\"B\"));\n        assertTrue(set2.contains(\"C\"));\n        assertTrue(set2.contains(\"D\"));\n    }\n\n    @Test\n    public void testRemoveIf_MatchesInMultipleSets() {\n        Predicate<String> filter = s -> s.equals(\"B\") || s.equals(\"C\");\n        assertTrue(compositeSet.removeIf(filter));\n        assertFalse(set1.contains(\"B\"));\n        assertTrue(set1.contains(\"A\"));\n        assertFalse(set2.contains(\"C\"));\n        assertTrue(set2.contains(\"D\"));\n    }\n\n    @Test\n    public void testRemoveIf_MatchesInAllSets() {\n        Predicate<String> filter = s -> s.equals(\"A\") || s.equals(\"C\");\n        assertTrue(compositeSet.removeIf(filter));\n        assertFalse(set1.contains(\"A\"));\n        assertTrue(set1.contains(\"B\"));\n        assertFalse(set2.contains(\"C\"));\n        assertTrue(set2.contains(\"D\"));\n    }\n}\n"}]