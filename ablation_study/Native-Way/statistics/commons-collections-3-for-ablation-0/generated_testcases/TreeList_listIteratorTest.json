[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.list;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertNull;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport java.util.ListIterator;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class TreeList_listIteratorTest {\n    private TreeList<String> treeList;\n\n    @BeforeEach\n    public void setUp() {\n        treeList = new TreeList<>();\n        treeList.add(\"hugo\");\n        treeList.add(\"erna\");\n        treeList.add(\"daniel\");\n        treeList.add(\"andres\");\n        treeList.add(\"harald\");\n    }\n\n    @Test\n    public void testListIterator() {\n        ListIterator<String> iterator = treeList.listIterator();\n        assertTrue(iterator.hasNext());\n        assertEquals(\"hugo\", iterator.next());\n        assertEquals(\"erna\", iterator.next());\n        assertEquals(\"daniel\", iterator.next());\n        assertEquals(\"andres\", iterator.next());\n        assertEquals(\"harald\", iterator.next());\n        assertFalse(iterator.hasNext());\n    }\n\n    @Test\n    public void testListIteratorWithIndex() {\n        ListIterator<String> iterator = treeList.listIterator(2);\n        assertTrue(iterator.hasNext());\n        assertEquals(\"daniel\", iterator.next());\n        assertEquals(\"andres\", iterator.next());\n        assertEquals(\"harald\", iterator.next());\n        assertFalse(iterator.hasNext());\n    }\n\n    @Test\n    public void testListIteratorPrevious() {\n        ListIterator<String> iterator = treeList.listIterator(5);\n        assertTrue(iterator.hasPrevious());\n        assertEquals(\"harald\", iterator.previous());\n        assertEquals(\"andres\", iterator.previous());\n        assertEquals(\"daniel\", iterator.previous());\n        assertEquals(\"erna\", iterator.previous());\n        assertEquals(\"hugo\", iterator.previous());\n        assertFalse(iterator.hasPrevious());\n    }\n\n    @Test\n    public void testListIteratorAdd() {\n        ListIterator<String> iterator = treeList.listIterator();\n        iterator.next();\n        iterator.add(\"inserted\");\n        assertEquals(6, treeList.size());\n        assertEquals(\"inserted\", treeList.get(1));\n    }\n\n    @Test\n    public void testListIteratorRemove() {\n        ListIterator<String> iterator = treeList.listIterator();\n        iterator.next();\n        iterator.next();\n        iterator.remove();\n        assertEquals(4, treeList.size());\n        assertEquals(\"daniel\", treeList.get(1));\n    }\n\n    @Test\n    public void testListIteratorSet() {\n        ListIterator<String> iterator = treeList.listIterator();\n        iterator.next();\n        iterator.set(\"updated\");\n        assertEquals(\"updated\", treeList.get(0));\n    }\n}\n"}]