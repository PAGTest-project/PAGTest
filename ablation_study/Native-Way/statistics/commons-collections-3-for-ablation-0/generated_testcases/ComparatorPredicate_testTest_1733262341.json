[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.functors;\n\nimport org.junit.jupiter.api.Test;\nimport java.util.Comparator;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass ComparatorPredicate_testTest {\n\n    private static final Comparator<Integer> INT_COMPARATOR = Integer::compare;\n\n    @Test\n    void testEqualCriterion() {\n        ComparatorPredicate<Integer> predicate = new ComparatorPredicate<>(5, INT_COMPARATOR, ComparatorPredicate.Criterion.EQUAL);\n        assertTrue(predicate.test(5));\n        assertFalse(predicate.test(4));\n        assertFalse(predicate.test(6));\n    }\n\n    @Test\n    void testGreaterCriterion() {\n        ComparatorPredicate<Integer> predicate = new ComparatorPredicate<>(5, INT_COMPARATOR, ComparatorPredicate.Criterion.GREATER);\n        assertFalse(predicate.test(5));\n        assertFalse(predicate.test(4));\n        assertTrue(predicate.test(6));\n    }\n\n    @Test\n    void testLessCriterion() {\n        ComparatorPredicate<Integer> predicate = new ComparatorPredicate<>(5, INT_COMPARATOR, ComparatorPredicate.Criterion.LESS);\n        assertFalse(predicate.test(5));\n        assertTrue(predicate.test(4));\n        assertFalse(predicate.test(6));\n    }\n\n    @Test\n    void testGreaterOrEqualCriterion() {\n        ComparatorPredicate<Integer> predicate = new ComparatorPredicate<>(5, INT_COMPARATOR, ComparatorPredicate.Criterion.GREATER_OR_EQUAL);\n        assertTrue(predicate.test(5));\n        assertFalse(predicate.test(4));\n        assertTrue(predicate.test(6));\n    }\n\n    @Test\n    void testLessOrEqualCriterion() {\n        ComparatorPredicate<Integer> predicate = new ComparatorPredicate<>(5, INT_COMPARATOR, ComparatorPredicate.Criterion.LESS_OR_EQUAL);\n        assertTrue(predicate.test(5));\n        assertTrue(predicate.test(4));\n        assertFalse(predicate.test(6));\n    }\n\n    @Test\n    void testInvalidCriterion() {\n        ComparatorPredicate<Integer> predicate = new ComparatorPredicate<>(5, INT_COMPARATOR, null);\n        assertThrows(IllegalStateException.class, () -> predicate.test(5));\n    }\n}\n"}]