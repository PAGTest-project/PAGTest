[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.iterators;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.NoSuchElementException;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class ZippingIterator_nextTest {\n\n    private List<Integer> evens;\n    private List<Integer> odds;\n    private List<Integer> fib;\n\n    @BeforeEach\n    public void setUp() throws Exception {\n        evens = new ArrayList<>();\n        odds = new ArrayList<>();\n        for (int i = 0; i < 20; i++) {\n            if (0 == i % 2) {\n                evens.add(i);\n            } else {\n                odds.add(i);\n            }\n        }\n        fib = new ArrayList<>();\n        fib.add(1);\n        fib.add(1);\n        fib.add(2);\n        fib.add(3);\n        fib.add(5);\n        fib.add(8);\n        fib.add(13);\n        fib.add(21);\n    }\n\n    @Test\n    public void testNextWithValidIterator() {\n        @SuppressWarnings(\"unchecked\")\n        final ZippingIterator<Integer> iter = new ZippingIterator<>(evens.iterator());\n        for (final Integer even : evens) {\n            assertTrue(iter.hasNext());\n            assertEquals(even, iter.next());\n        }\n        assertFalse(iter.hasNext());\n    }\n\n    @Test\n    public void testNextWithNoSuchElementException() {\n        @SuppressWarnings(\"unchecked\")\n        final ZippingIterator<Integer> iter = new ZippingIterator<>(evens.iterator());\n        // Consume all elements\n        while (iter.hasNext()) {\n            iter.next();\n        }\n        // Attempt to call next() when no elements are left\n        assertThrows(NoSuchElementException.class, () -> {\n            iter.next();\n        });\n    }\n\n    @Test\n    public void testNextWithMultipleIterators() {\n        @SuppressWarnings(\"unchecked\")\n        final ZippingIterator<Integer> iter = new ZippingIterator<>(evens.iterator(), odds.iterator(), fib.iterator());\n        int count = 0;\n        while (iter.hasNext()) {\n            iter.next();\n            count++;\n        }\n        // Ensure all elements from all iterators are consumed\n        assertEquals(evens.size() + odds.size() + fib.size(), count);\n    }\n}\n"}]