[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.map;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNull;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class CompositeMap_removeCompositedTest {\n\n    private CompositeMap<String, String> compositeMap;\n    private Map<String, String> map1;\n    private Map<String, String> map2;\n\n    @BeforeEach\n    public void setUp() {\n        map1 = new HashMap<>();\n        map1.put(\"1\", \"one\");\n        map1.put(\"2\", \"two\");\n\n        map2 = new HashMap<>();\n        map2.put(\"3\", \"three\");\n        map2.put(\"4\", \"four\");\n\n        compositeMap = new CompositeMap<>(map1, map2);\n    }\n\n    @Test\n    public void testRemoveCompositedExistingMap() {\n        Map<String, String> removedMap = compositeMap.removeComposited(map1);\n        assertEquals(map1, removedMap);\n        assertEquals(1, compositeMap.composite.length);\n        assertTrue(compositeMap.composite[0].equals(map2));\n    }\n\n    @Test\n    public void testRemoveCompositedNonExistingMap() {\n        Map<String, String> nonExistingMap = new HashMap<>();\n        nonExistingMap.put(\"5\", \"five\");\n        Map<String, String> removedMap = compositeMap.removeComposited(nonExistingMap);\n        assertNull(removedMap);\n        assertEquals(2, compositeMap.composite.length);\n    }\n\n    @Test\n    public void testRemoveCompositedLastMap() {\n        Map<String, String> removedMap = compositeMap.removeComposited(map2);\n        assertEquals(map2, removedMap);\n        assertEquals(1, compositeMap.composite.length);\n        assertTrue(compositeMap.composite[0].equals(map1));\n    }\n\n    @Test\n    public void testRemoveCompositedEmptyComposite() {\n        CompositeMap<String, String> emptyCompositeMap = new CompositeMap<>();\n        Map<String, String> removedMap = emptyCompositeMap.removeComposited(map1);\n        assertNull(removedMap);\n        assertEquals(0, emptyCompositeMap.composite.length);\n    }\n}\n"}]