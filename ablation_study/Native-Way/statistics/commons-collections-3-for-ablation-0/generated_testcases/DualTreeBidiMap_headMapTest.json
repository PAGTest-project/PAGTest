[{"strategy": "retry", "code": "\npackage org.apache.commons.collections4.bidimap;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport java.util.Comparator;\nimport java.util.SortedMap;\nimport java.util.TreeMap;\nimport org.apache.commons.collections4.SortedBidiMap;\nimport org.apache.commons.collections4.comparators.ComparableComparator;\nimport org.apache.commons.collections4.comparators.ReverseComparator;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class DualTreeBidiMap_headMapTest {\n\n    private DualTreeBidiMap<String, Integer> dtbm;\n\n    @BeforeEach\n    public void setUp() {\n        dtbm = new DualTreeBidiMap<>(String.CASE_INSENSITIVE_ORDER, null);\n        dtbm.put(\"one\", 1);\n        dtbm.put(\"two\", 2);\n        dtbm.put(\"three\", 3);\n    }\n\n    @Test\n    public void testHeadMap() {\n        SortedMap<String, Integer> headMap = dtbm.headMap(\"three\");\n        assertNotNull(headMap);\n        assertEquals(2, headMap.size());\n        assertTrue(headMap.containsKey(\"one\"));\n        assertTrue(headMap.containsKey(\"two\"));\n    }\n\n    @Test\n    public void testHeadMapBoundary() {\n        SortedMap<String, Integer> headMap = dtbm.headMap(\"one\");\n        assertNotNull(headMap);\n        assertEquals(0, headMap.size());\n    }\n\n    @Test\n    public void testHeadMapWithFirstKey() {\n        String firstKey = dtbm.firstKey();\n        SortedMap<String, Integer> headMap = dtbm.headMap(firstKey);\n        assertNotNull(headMap);\n        assertEquals(0, headMap.size());\n    }\n\n    @Test\n    public void testHeadMapWithLastKey() {\n        String lastKey = dtbm.lastKey();\n        SortedMap<String, Integer> headMap = dtbm.headMap(lastKey);\n        assertNotNull(headMap);\n        assertEquals(2, headMap.size());\n        assertTrue(headMap.containsKey(\"one\"));\n        assertTrue(headMap.containsKey(\"two\"));\n    }\n\n    @Test\n    public void testHeadMapWithNextKey() {\n        String nextKey = dtbm.nextKey(\"one\");\n        SortedMap<String, Integer> headMap = dtbm.headMap(nextKey);\n        assertNotNull(headMap);\n        assertEquals(1, headMap.size());\n        assertTrue(headMap.containsKey(\"one\"));\n    }\n\n    @Test\n    public void testHeadMapWithPreviousKey() {\n        String previousKey = dtbm.previousKey(\"three\");\n        SortedMap<String, Integer> headMap = dtbm.headMap(previousKey);\n        assertNotNull(headMap);\n        assertEquals(2, headMap.size());\n        assertTrue(headMap.containsKey(\"one\"));\n        assertTrue(headMap.containsKey(\"two\"));\n    }\n\n    @Test\n    public void testHeadMapWithInverseBidiMap() {\n        SortedBidiMap<Integer, String> inverseBidiMap = dtbm.inverseBidiMap();\n        SortedMap<Integer, String> headMap = inverseBidiMap.headMap(3);\n        assertNotNull(headMap);\n        assertEquals(2, headMap.size());\n        assertTrue(headMap.containsKey(1));\n        assertTrue(headMap.containsKey(2));\n    }\n}\n"}]