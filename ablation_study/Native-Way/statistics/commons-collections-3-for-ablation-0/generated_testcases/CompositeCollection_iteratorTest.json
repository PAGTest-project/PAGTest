[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.collection;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.function.Predicate;\n\nimport org.apache.commons.collections4.iterators.EmptyIterator;\nimport org.apache.commons.collections4.iterators.IteratorChain;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class CompositeCollection_iteratorTest {\n    private CompositeCollection<String> c;\n    private Collection<String> one;\n    private Collection<String> two;\n\n    @BeforeEach\n    public void setUp() {\n        c = new CompositeCollection<>();\n        one = new HashSet<>();\n        two = new HashSet<>();\n    }\n\n    @Test\n    public void testIteratorWithEmptyCompositeCollection() {\n        Iterator<String> iterator = c.iterator();\n        assertTrue(iterator instanceof EmptyIterator);\n    }\n\n    @Test\n    public void testIteratorWithNonEmptyCompositeCollection() {\n        one.add(\"1\");\n        two.add(\"2\");\n        c.addComposited(one, two);\n\n        Iterator<String> iterator = c.iterator();\n        assertTrue(iterator instanceof IteratorChain);\n\n        List<String> result = new ArrayList<>();\n        iterator.forEachRemaining(result::add);\n\n        assertEquals(2, result.size());\n        assertTrue(result.contains(\"1\"));\n        assertTrue(result.contains(\"2\"));\n    }\n\n    @Test\n    public void testIteratorWithOneCollection() {\n        one.add(\"1\");\n        c.addComposited(one);\n\n        Iterator<String> iterator = c.iterator();\n        assertTrue(iterator instanceof IteratorChain);\n\n        List<String> result = new ArrayList<>();\n        iterator.forEachRemaining(result::add);\n\n        assertEquals(1, result.size());\n        assertTrue(result.contains(\"1\"));\n    }\n\n    @Test\n    public void testIteratorWithMultipleCollections() {\n        Collection<String> three = new HashSet<>();\n        three.add(\"3\");\n\n        one.add(\"1\");\n        two.add(\"2\");\n        c.addComposited(one, two, three);\n\n        Iterator<String> iterator = c.iterator();\n        assertTrue(iterator instanceof IteratorChain);\n\n        List<String> result = new ArrayList<>();\n        iterator.forEachRemaining(result::add);\n\n        assertEquals(3, result.size());\n        assertTrue(result.contains(\"1\"));\n        assertTrue(result.contains(\"2\"));\n        assertTrue(result.contains(\"3\"));\n    }\n}\n"}]