[{"strategy": "retry", "code": "\npackage org.apache.commons.collections4.multimap;\n\nimport org.apache.commons.collections4.MultiValuedMap;\nimport org.apache.commons.collections4.Unmodifiable;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\nclass UnmodifiableMultiValuedMap_unmodifiableMultiValuedMapTest {\n\n    @Test\n    void testUnmodifiableMultiValuedMapWithUnmodifiableMap() {\n        MultiValuedMap<String, String> mockMap = mock(MultiValuedMap.class);\n        when(mockMap.getClass().isInstance(Unmodifiable.class)).thenReturn(true);\n\n        UnmodifiableMultiValuedMap<String, String> result = UnmodifiableMultiValuedMap.unmodifiableMultiValuedMap(mockMap);\n\n        assertSame(mockMap, result);\n    }\n\n    @Test\n    void testUnmodifiableMultiValuedMapWithModifiableMap() {\n        MultiValuedMap<String, String> mockMap = mock(MultiValuedMap.class);\n        when(mockMap.getClass().isInstance(Unmodifiable.class)).thenReturn(false);\n\n        UnmodifiableMultiValuedMap<String, String> result = UnmodifiableMultiValuedMap.unmodifiableMultiValuedMap(mockMap);\n\n        assertNotNull(result);\n        assertNotSame(mockMap, result);\n    }\n}\n"}]