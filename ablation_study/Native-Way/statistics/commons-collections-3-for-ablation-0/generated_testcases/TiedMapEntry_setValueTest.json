[{"strategy": "retry", "code": "\npackage org.apache.commons.collections4.keyvalue;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.HashMap;\nimport java.util.Map;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class TiedMapEntry_setValueTest {\n\n    private Map<String, String> map;\n    private TiedMapEntry<String, String> entry;\n\n    @BeforeEach\n    public void setUp() {\n        map = new HashMap<>();\n        map.put(\"A\", \"a\");\n        map.put(\"B\", \"b\");\n        map.put(\"C\", \"c\");\n        entry = new TiedMapEntry<>(map, \"A\");\n    }\n\n    @Test\n    public void testSetValueSuccess() {\n        assertEquals(\"a\", entry.setValue(\"x\"));\n        assertEquals(\"x\", entry.getValue());\n    }\n\n    @Test\n    public void testSetValueToSelf() {\n        assertThrows(IllegalArgumentException.class, () -> entry.setValue(entry));\n    }\n\n    @Test\n    public void testSetValueNull() {\n        assertEquals(\"a\", entry.setValue(null));\n        assertNull(entry.getValue());\n    }\n\n    @Test\n    public void testSetValueMultipleEntries() {\n        TiedMapEntry<String, String> entryB = new TiedMapEntry<>(map, \"B\");\n        TiedMapEntry<String, String> entryC = new TiedMapEntry<>(map, \"C\");\n\n        assertEquals(\"b\", entryB.setValue(\"y\"));\n        assertEquals(\"y\", entryB.getValue());\n\n        assertEquals(\"c\", entryC.setValue(\"z\"));\n        assertEquals(\"z\", entryC.getValue());\n    }\n}\n"}]