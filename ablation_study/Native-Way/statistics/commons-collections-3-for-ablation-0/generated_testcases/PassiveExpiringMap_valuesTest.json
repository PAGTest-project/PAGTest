[{"strategy": "retry", "code": "\npackage org.apache.commons.collections4.map;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.concurrent.TimeUnit;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\npublic class PassiveExpiringMap_valuesTest {\n\n    private PassiveExpiringMap<Integer, String> expiringMap;\n\n    @BeforeEach\n    public void setUp() {\n        expiringMap = new PassiveExpiringMap<>(1, TimeUnit.SECONDS);\n    }\n\n    @Test\n    public void testValuesWithNoExpiredEntries() {\n        expiringMap.put(1, \"One\");\n        expiringMap.put(2, \"Two\");\n        expiringMap.put(3, \"Three\");\n\n        Collection<String> values = expiringMap.values();\n        assertEquals(3, values.size());\n        assertTrue(values.contains(\"One\"));\n        assertTrue(values.contains(\"Two\"));\n        assertTrue(values.contains(\"Three\"));\n    }\n\n    @Test\n    public void testValuesWithExpiredEntries() throws InterruptedException {\n        expiringMap.put(1, \"One\");\n        expiringMap.put(2, \"Two\");\n        expiringMap.put(3, \"Three\");\n\n        // Wait for entries to expire\n        Thread.sleep(1500);\n\n        Collection<String> values = expiringMap.values();\n        assertEquals(0, values.size());\n    }\n\n    @Test\n    public void testValuesWithMixedExpiredAndNonExpiredEntries() throws InterruptedException {\n        expiringMap.put(1, \"One\");\n        expiringMap.put(2, \"Two\");\n        expiringMap.put(3, \"Three\");\n\n        // Wait for some entries to expire\n        Thread.sleep(500);\n\n        expiringMap.put(4, \"Four\");\n        expiringMap.put(5, \"Five\");\n\n        // Force removal of expired entries\n        expiringMap.values(); // This will internally call removeAllExpired(now())\n\n        Collection<String> values = expiringMap.values();\n        assertEquals(2, values.size());\n        assertTrue(values.contains(\"Four\"));\n        assertTrue(values.contains(\"Five\"));\n    }\n\n    @Test\n    public void testValuesWithNeverExpiringEntries() {\n        expiringMap = new PassiveExpiringMap<>(-1L);\n        expiringMap.put(1, \"One\");\n        expiringMap.put(2, \"Two\");\n        expiringMap.put(3, \"Three\");\n\n        Collection<String> values = expiringMap.values();\n        assertEquals(3, values.size());\n        assertTrue(values.contains(\"One\"));\n        assertTrue(values.contains(\"Two\"));\n        assertTrue(values.contains(\"Three\"));\n    }\n\n    @Test\n    public void testValuesWithAlwaysExpiringEntries() {\n        expiringMap = new PassiveExpiringMap<>(0L);\n        expiringMap.put(1, \"One\");\n        expiringMap.put(2, \"Two\");\n        expiringMap.put(3, \"Three\");\n\n        Collection<String> values = expiringMap.values();\n        assertEquals(0, values.size());\n    }\n}\n"}]