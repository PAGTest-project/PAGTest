[{"strategy": "retry", "code": "\npackage org.apache.commons.collections4.queue;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.NoSuchElementException;\nimport java.util.Iterator;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class CircularFifoQueue_iteratorTest {\n\n    private CircularFifoQueue<String> queue;\n\n    @BeforeEach\n    public void setUp() {\n        queue = new CircularFifoQueue<>(3);\n        queue.add(\"A\");\n        queue.add(\"B\");\n        queue.add(\"C\");\n    }\n\n    @Test\n    public void testIteratorHasNext() {\n        Iterator<String> iterator = queue.iterator();\n        assertTrue(iterator.hasNext());\n        iterator.next();\n        assertTrue(iterator.hasNext());\n        iterator.next();\n        assertTrue(iterator.hasNext());\n        iterator.next();\n        assertFalse(iterator.hasNext());\n    }\n\n    @Test\n    public void testIteratorNext() {\n        Iterator<String> iterator = queue.iterator();\n        assertEquals(\"A\", iterator.next());\n        assertEquals(\"B\", iterator.next());\n        assertEquals(\"C\", iterator.next());\n        assertThrows(NoSuchElementException.class, iterator::next);\n    }\n\n    @Test\n    public void testIteratorRemove() {\n        Iterator<String> iterator = queue.iterator();\n        assertEquals(\"A\", iterator.next());\n        iterator.remove();\n        assertEquals(2, queue.size());\n        assertEquals(\"B\", queue.peek());\n\n        assertEquals(\"B\", iterator.next());\n        iterator.remove();\n        assertEquals(1, queue.size());\n        assertEquals(\"C\", queue.peek());\n\n        assertEquals(\"C\", iterator.next());\n        iterator.remove();\n        assertTrue(queue.isEmpty());\n    }\n\n    @Test\n    public void testIteratorRemoveWithoutNext() {\n        Iterator<String> iterator = queue.iterator();\n        assertThrows(IllegalStateException.class, iterator::remove);\n    }\n\n    @Test\n    public void testIteratorRemoveTwice() {\n        Iterator<String> iterator = queue.iterator();\n        iterator.next();\n        iterator.remove();\n        assertThrows(IllegalStateException.class, iterator::remove);\n    }\n}\n"}]