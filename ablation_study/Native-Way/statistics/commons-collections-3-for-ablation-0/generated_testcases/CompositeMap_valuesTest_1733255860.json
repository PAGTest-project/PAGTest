[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.map;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\n\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.apache.commons.collections4.collection.CompositeCollection;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class CompositeMap_valuesTest {\n\n    private CompositeMap<String, String> compositeMap;\n\n    @BeforeEach\n    public void setUp() {\n        Map<String, String> map1 = new HashMap<>();\n        map1.put(\"key1\", \"value1\");\n        map1.put(\"key2\", \"value2\");\n\n        Map<String, String> map2 = new HashMap<>();\n        map2.put(\"key3\", \"value3\");\n        map2.put(\"key4\", \"value4\");\n\n        compositeMap = new CompositeMap<>(map1, map2);\n    }\n\n    @Test\n    public void testValues() {\n        Collection<String> values = compositeMap.values();\n        assertTrue(values instanceof CompositeCollection);\n        assertEquals(4, values.size());\n        assertTrue(values.contains(\"value1\"));\n        assertTrue(values.contains(\"value2\"));\n        assertTrue(values.contains(\"value3\"));\n        assertTrue(values.contains(\"value4\"));\n    }\n\n    @Test\n    public void testValuesAfterAddComposited() {\n        Map<String, String> map3 = new HashMap<>();\n        map3.put(\"key5\", \"value5\");\n        map3.put(\"key6\", \"value6\");\n\n        compositeMap.addComposited(map3);\n\n        Collection<String> values = compositeMap.values();\n        assertTrue(values instanceof CompositeCollection);\n        assertEquals(6, values.size());\n        assertTrue(values.contains(\"value1\"));\n        assertTrue(values.contains(\"value2\"));\n        assertTrue(values.contains(\"value3\"));\n        assertTrue(values.contains(\"value4\"));\n        assertTrue(values.contains(\"value5\"));\n        assertTrue(values.contains(\"value6\"));\n    }\n\n    @Test\n    public void testValuesAfterRemoveComposited() {\n        Map<String, String> map1 = new HashMap<>();\n        map1.put(\"key1\", \"value1\");\n        map1.put(\"key2\", \"value2\");\n\n        compositeMap.removeComposited(map1);\n\n        Collection<String> values = compositeMap.values();\n        assertTrue(values instanceof CompositeCollection);\n        assertEquals(2, values.size());\n        assertFalse(values.contains(\"value1\"));\n        assertFalse(values.contains(\"value2\"));\n        assertTrue(values.contains(\"value3\"));\n        assertTrue(values.contains(\"value4\"));\n    }\n\n    @Test\n    public void testValuesWithEmptyCompositeMap() {\n        compositeMap = new CompositeMap<>();\n        Collection<String> values = compositeMap.values();\n        assertTrue(values instanceof CompositeCollection);\n        assertTrue(values.isEmpty());\n    }\n\n    @Test\n    public void testValuesWithNullCompositeMap() {\n        assertThrows(IllegalArgumentException.class, () -> {\n            compositeMap.addComposited(null);\n        });\n    }\n}\n"}]