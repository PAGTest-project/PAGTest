[{"strategy": "retry", "code": "\npackage org.apache.commons.collections4.iterators;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport java.util.ArrayList;\nimport java.util.ListIterator;\nimport java.util.NoSuchElementException;\nimport org.apache.commons.collections4.Predicate;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class FilterListIterator_nextTest {\n\n    private ArrayList<Integer> list;\n    private Predicate<Integer> evenPred;\n    private Predicate<Integer> threePred;\n\n    @BeforeEach\n    public void setUp() {\n        list = new ArrayList<>();\n        for (int i = 0; i < 20; i++) {\n            list.add(Integer.valueOf(i));\n        }\n\n        evenPred = x -> x % 2 == 0;\n        threePred = x -> x % 3 == 0;\n    }\n\n    @Test\n    public void testNextWithValidElement() {\n        FilterListIterator<Integer> filtered = new FilterListIterator<>(list.listIterator(), evenPred);\n        assertEquals(Integer.valueOf(0), filtered.next());\n        assertEquals(Integer.valueOf(2), filtered.next());\n    }\n\n    @Test\n    public void testNextWithNoValidElement() {\n        FilterListIterator<Integer> filtered = new FilterListIterator<>(list.listIterator(), threePred);\n        assertEquals(Integer.valueOf(0), filtered.next());\n        assertEquals(Integer.valueOf(3), filtered.next());\n        assertThrows(NoSuchElementException.class, () -> {\n            while (filtered.hasNext()) {\n                filtered.next();\n            }\n            filtered.next();\n        });\n    }\n\n    @Test\n    public void testNextWithEmptyList() {\n        ArrayList<Integer> emptyList = new ArrayList<>();\n        FilterListIterator<Integer> filtered = new FilterListIterator<>(emptyList.listIterator(), evenPred);\n        assertThrows(NoSuchElementException.class, filtered::next);\n    }\n\n    @Test\n    public void testNextWithNullPredicate() {\n        FilterListIterator<Integer> filtered = new FilterListIterator<>(list.listIterator(), null);\n        assertThrows(NullPointerException.class, filtered::next);\n    }\n\n    @Test\n    public void testNextWithNullIterator() {\n        FilterListIterator<Integer> filtered = new FilterListIterator<>(null, evenPred);\n        assertThrows(NullPointerException.class, filtered::next);\n    }\n}\n"}]