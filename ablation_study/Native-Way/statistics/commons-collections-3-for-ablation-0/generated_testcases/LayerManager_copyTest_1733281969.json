[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.bloomfilter;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.Deque;\nimport java.util.LinkedList;\nimport java.util.function.Consumer;\nimport java.util.function.Predicate;\nimport java.util.function.Supplier;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class LayerManager_copyTest {\n\n    private LayerManager<BloomFilter> layerManager;\n    private Supplier<BloomFilter> filterSupplier;\n    private Predicate<LayerManager<BloomFilter>> extendCheck;\n    private Consumer<Deque<BloomFilter>> filterCleanup;\n\n    @BeforeEach\n    public void setUp() {\n        filterSupplier = () -> new SimpleBloomFilter(new Shape(10, 5));\n        extendCheck = ExtendCheck.neverAdvance();\n        filterCleanup = Cleanup.noCleanup();\n        layerManager = new LayerManager<>(filterSupplier, extendCheck, filterCleanup, true);\n    }\n\n    @Test\n    public void testCopyWithEmptyFilters() {\n        LayerManager<BloomFilter> copiedManager = layerManager.copy();\n        assertEquals(0, copiedManager.getDepth());\n        assertNotSame(layerManager, copiedManager);\n    }\n\n    @Test\n    public void testCopyWithNonEmptyFilters() {\n        layerManager.addFilter();\n        LayerManager<BloomFilter> copiedManager = layerManager.copy();\n        assertEquals(1, copiedManager.getDepth());\n        assertNotSame(layerManager, copiedManager);\n        assertNotSame(layerManager.first(), copiedManager.first());\n    }\n\n    @Test\n    public void testCopyWithMultipleFilters() {\n        layerManager.addFilter();\n        layerManager.addFilter();\n        LayerManager<BloomFilter> copiedManager = layerManager.copy();\n        assertEquals(2, copiedManager.getDepth());\n        assertNotSame(layerManager, copiedManager);\n        assertNotSame(layerManager.first(), copiedManager.first());\n        assertNotSame(layerManager.last(), copiedManager.last());\n    }\n\n    @Test\n    public void testCopyWithDifferentFilterSupplier() {\n        Supplier<BloomFilter> newFilterSupplier = () -> new SimpleBloomFilter(new Shape(20, 10));\n        LayerManager<BloomFilter> newLayerManager = new LayerManager<>(newFilterSupplier, extendCheck, filterCleanup, true);\n        newLayerManager.addFilter();\n        LayerManager<BloomFilter> copiedManager = newLayerManager.copy();\n        assertEquals(1, copiedManager.getDepth());\n        assertNotSame(newLayerManager, copiedManager);\n        assertNotSame(newLayerManager.first(), copiedManager.first());\n    }\n\n    @Test\n    public void testCopyWithDifferentExtendCheck() {\n        Predicate<LayerManager<BloomFilter>> newExtendCheck = ExtendCheck.advanceOnCount(2);\n        LayerManager<BloomFilter> newLayerManager = new LayerManager<>(filterSupplier, newExtendCheck, filterCleanup, true);\n        newLayerManager.addFilter();\n        LayerManager<BloomFilter> copiedManager = newLayerManager.copy();\n        assertEquals(1, copiedManager.getDepth());\n        assertNotSame(newLayerManager, copiedManager);\n        assertNotSame(newLayerManager.first(), copiedManager.first());\n    }\n\n    @Test\n    public void testCopyWithDifferentFilterCleanup() {\n        Consumer<Deque<BloomFilter>> newFilterCleanup = Cleanup.onMaxSize(1);\n        LayerManager<BloomFilter> newLayerManager = new LayerManager<>(filterSupplier, extendCheck, newFilterCleanup, true);\n        newLayerManager.addFilter();\n        LayerManager<BloomFilter> copiedManager = newLayerManager.copy();\n        assertEquals(1, copiedManager.getDepth());\n        assertNotSame(newLayerManager, copiedManager);\n        assertNotSame(newLayerManager.first(), copiedManager.first());\n    }\n}\n"}]