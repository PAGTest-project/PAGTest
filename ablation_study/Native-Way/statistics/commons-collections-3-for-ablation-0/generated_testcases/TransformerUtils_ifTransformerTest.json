[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4;\n\nimport org.apache.commons.collections4.functors.ConstantTransformer;\nimport org.apache.commons.collections4.functors.EqualPredicate;\nimport org.apache.commons.collections4.functors.ExceptionTransformer;\nimport org.apache.commons.collections4.functors.FalsePredicate;\nimport org.apache.commons.collections4.functors.NOPTransformer;\nimport org.apache.commons.collections4.functors.TruePredicate;\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TransformerUtils_ifTransformerTest {\n\n    private static final Object cObject = new Object();\n    private static final Object cString = \"Test\";\n    private static final Object cInteger = 1;\n\n    @Test\n    public void testIfTransformer() {\n        Predicate<Object> truePredicate = TruePredicate.truePredicate();\n        Predicate<Object> falsePredicate = FalsePredicate.falsePredicate();\n        Transformer<Object, Object> trueTransformer = ConstantTransformer.constantTransformer(cString);\n        Transformer<Object, Object> falseTransformer = ConstantTransformer.constantTransformer(cInteger);\n\n        Transformer<Object, Object> ifTransformerTrue = TransformerUtils.ifTransformer(truePredicate, trueTransformer, falseTransformer);\n        Transformer<Object, Object> ifTransformerFalse = TransformerUtils.ifTransformer(falsePredicate, trueTransformer, falseTransformer);\n\n        assertEquals(cString, ifTransformerTrue.transform(cObject));\n        assertEquals(cInteger, ifTransformerFalse.transform(cObject));\n    }\n\n    @Test\n    public void testIfTransformerWithNullPredicate() {\n        Transformer<Object, Object> trueTransformer = ConstantTransformer.constantTransformer(cString);\n        Transformer<Object, Object> falseTransformer = ConstantTransformer.constantTransformer(cInteger);\n\n        assertThrows(NullPointerException.class, () -> {\n            TransformerUtils.ifTransformer(null, trueTransformer, falseTransformer);\n        });\n    }\n\n    @Test\n    public void testIfTransformerWithNullTrueTransformer() {\n        Predicate<Object> truePredicate = TruePredicate.truePredicate();\n        Transformer<Object, Object> falseTransformer = ConstantTransformer.constantTransformer(cInteger);\n\n        assertThrows(NullPointerException.class, () -> {\n            TransformerUtils.ifTransformer(truePredicate, null, falseTransformer);\n        });\n    }\n\n    @Test\n    public void testIfTransformerWithNullFalseTransformer() {\n        Predicate<Object> truePredicate = TruePredicate.truePredicate();\n        Transformer<Object, Object> trueTransformer = ConstantTransformer.constantTransformer(cString);\n\n        assertThrows(NullPointerException.class, () -> {\n            TransformerUtils.ifTransformer(truePredicate, trueTransformer, null);\n        });\n    }\n\n    @Test\n    public void testIfTransformerWithExceptionTransformer() {\n        Predicate<Object> truePredicate = TruePredicate.truePredicate();\n        Predicate<Object> falsePredicate = FalsePredicate.falsePredicate();\n        Transformer<Object, Object> exceptionTransformer = ExceptionTransformer.exceptionTransformer();\n        Transformer<Object, Object> nopTransformer = NOPTransformer.nopTransformer();\n\n        Transformer<Object, Object> ifTransformerTrue = TransformerUtils.ifTransformer(truePredicate, exceptionTransformer, nopTransformer);\n        Transformer<Object, Object> ifTransformerFalse = TransformerUtils.ifTransformer(falsePredicate, exceptionTransformer, nopTransformer);\n\n        assertThrows(FunctorException.class, () -> {\n            ifTransformerTrue.transform(cObject);\n        });\n\n        assertEquals(cObject, ifTransformerFalse.transform(cObject));\n    }\n}\n"}]