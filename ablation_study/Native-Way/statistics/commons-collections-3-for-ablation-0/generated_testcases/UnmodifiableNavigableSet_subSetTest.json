[{"strategy": "retry", "code": "\npackage org.apache.commons.collections4.set;\n\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport java.util.NavigableSet;\nimport java.util.TreeSet;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class UnmodifiableNavigableSet_subSetTest {\n\n    private NavigableSet<Integer> originalSet;\n    private UnmodifiableNavigableSet<Integer> unmodifiableSet;\n\n    @BeforeEach\n    public void setUp() {\n        originalSet = new TreeSet<>(java.util.Arrays.asList(1, 2, 3, 4, 5));\n        unmodifiableSet = UnmodifiableNavigableSet.unmodifiableNavigableSet(originalSet);\n    }\n\n    @Test\n    public void testSubSetInclusive() {\n        NavigableSet<Integer> subSet = unmodifiableSet.subSet(2, true, 4, true);\n        assertTrue(subSet.containsAll(java.util.Arrays.asList(2, 3, 4)));\n    }\n\n    @Test\n    public void testSubSetExclusive() {\n        NavigableSet<Integer> subSet = unmodifiableSet.subSet(2, false, 4, false);\n        assertTrue(subSet.containsAll(java.util.Arrays.asList(3)));\n    }\n\n    @Test\n    public void testSubSetFromInclusiveToExclusive() {\n        NavigableSet<Integer> subSet = unmodifiableSet.subSet(2, true, 4, false);\n        assertTrue(subSet.containsAll(java.util.Arrays.asList(2, 3)));\n    }\n\n    @Test\n    public void testSubSetFromExclusiveToInclusive() {\n        NavigableSet<Integer> subSet = unmodifiableSet.subSet(2, false, 4, true);\n        assertTrue(subSet.containsAll(java.util.Arrays.asList(3, 4)));\n    }\n\n    @Test\n    public void testSubSetUnmodifiable() {\n        NavigableSet<Integer> subSet = unmodifiableSet.subSet(2, true, 4, true);\n        assertThrows(UnsupportedOperationException.class, () -> subSet.add(5));\n    }\n}\n"}]