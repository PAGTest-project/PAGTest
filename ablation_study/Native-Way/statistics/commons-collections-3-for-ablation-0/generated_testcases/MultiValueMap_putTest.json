[{"strategy": "retry", "code": "\npackage org.apache.commons.collections4.map;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Map;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class MultiValueMap_putTest {\n\n    private MultiValueMap<String, String> multiValueMap;\n\n    @BeforeEach\n    public void setUp() {\n        multiValueMap = new MultiValueMap<>();\n    }\n\n    @Test\n    public void testPutNewKey() {\n        String key = \"key1\";\n        String value = \"value1\";\n        Object result = multiValueMap.put(key, value);\n        assertEquals(value, result);\n        Collection<String> collection = multiValueMap.getCollection(key);\n        assertTrue(collection.contains(value));\n    }\n\n    @Test\n    public void testPutExistingKey() {\n        String key = \"key1\";\n        String value1 = \"value1\";\n        String value2 = \"value2\";\n        multiValueMap.put(key, value1);\n        Object result = multiValueMap.put(key, value2);\n        assertEquals(value2, result);\n        Collection<String> collection = multiValueMap.getCollection(key);\n        assertTrue(collection.contains(value1));\n        assertTrue(collection.contains(value2));\n    }\n\n    @Test\n    public void testPutNullValue() {\n        String key = \"key1\";\n        String value = null;\n        Object result = multiValueMap.put(key, value);\n        assertNull(result);\n        Collection<String> collection = multiValueMap.getCollection(key);\n        assertFalse(collection.contains(value));\n    }\n\n    @Test\n    public void testPutEmptyCollection() {\n        String key = \"key1\";\n        String value = \"value1\";\n        multiValueMap = new MultiValueMap<>(new HashMap<>(), () -> new ArrayList<>());\n        Object result = multiValueMap.put(key, value);\n        assertNull(result);\n        Collection<String> collection = multiValueMap.getCollection(key);\n        assertFalse(collection.contains(value));\n    }\n\n    @Test\n    public void testPutAllNewKey() {\n        String key = \"key1\";\n        Collection<String> values = new ArrayList<>();\n        values.add(\"value1\");\n        values.add(\"value2\");\n        boolean result = multiValueMap.putAll(key, values);\n        assertTrue(result);\n        Collection<String> collection = multiValueMap.getCollection(key);\n        assertEquals(values, collection);\n    }\n\n    @Test\n    public void testPutAllExistingKey() {\n        String key = \"key1\";\n        Collection<String> initialValues = new ArrayList<>();\n        initialValues.add(\"value1\");\n        multiValueMap.putAll(key, initialValues);\n        Collection<String> additionalValues = new ArrayList<>();\n        additionalValues.add(\"value2\");\n        additionalValues.add(\"value3\");\n        boolean result = multiValueMap.putAll(key, additionalValues);\n        assertTrue(result);\n        Collection<String> collection = multiValueMap.getCollection(key);\n        assertTrue(collection.containsAll(initialValues));\n        assertTrue(collection.containsAll(additionalValues));\n    }\n\n    @Test\n    public void testRemoveMapping() {\n        String key = \"key1\";\n        String value1 = \"value1\";\n        String value2 = \"value2\";\n        multiValueMap.put(key, value1);\n        multiValueMap.put(key, value2);\n        boolean result = multiValueMap.removeMapping(key, value1);\n        assertTrue(result);\n        Collection<String> collection = multiValueMap.getCollection(key);\n        assertFalse(collection.contains(value1));\n        assertTrue(collection.contains(value2));\n    }\n\n    @Test\n    public void testRemoveMappingLastValue() {\n        String key = \"key1\";\n        String value = \"value1\";\n        multiValueMap.put(key, value);\n        boolean result = multiValueMap.removeMapping(key, value);\n        assertTrue(result);\n        Collection<String> collection = multiValueMap.getCollection(key);\n        assertNull(collection);\n    }\n\n    @Test\n    public void testSize() {\n        String key = \"key1\";\n        String value1 = \"value1\";\n        String value2 = \"value2\";\n        multiValueMap.put(key, value1);\n        multiValueMap.put(key, value2);\n        int size = multiValueMap.size(key);\n        assertEquals(2, size);\n    }\n\n    @Test\n    public void testTotalSize() {\n        String key1 = \"key1\";\n        String key2 = \"key2\";\n        String value1 = \"value1\";\n        String value2 = \"value2\";\n        String value3 = \"value3\";\n        multiValueMap.put(key1, value1);\n        multiValueMap.put(key1, value2);\n        multiValueMap.put(key2, value3);\n        int totalSize = multiValueMap.totalSize();\n        assertEquals(3, totalSize);\n    }\n}\n"}]