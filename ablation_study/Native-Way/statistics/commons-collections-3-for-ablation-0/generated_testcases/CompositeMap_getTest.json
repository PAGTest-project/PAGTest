[{"strategy": "retry", "code": "\npackage org.apache.commons.collections4.map;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNull;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Collection;\n\nimport org.apache.commons.collections4.map.CompositeMap;\nimport org.apache.commons.collections4.map.CompositeMap.MapMutator;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class CompositeMap_getTest {\n\n    private CompositeMap<String, String> compositeMap;\n    private Map<String, String> map1;\n    private Map<String, String> map2;\n\n    @BeforeEach\n    public void setUp() {\n        map1 = new HashMap<>();\n        map1.put(\"key1\", \"value1\");\n        map1.put(\"key2\", \"value2\");\n\n        map2 = new HashMap<>();\n        map2.put(\"key3\", \"value3\");\n        map2.put(\"key4\", \"value4\");\n\n        compositeMap = new CompositeMap<>(map1, map2, new MapMutator<String, String>() {\n            @Override\n            public void resolveCollision(CompositeMap<String, String> composite,\n                                         Map<String, String> existing,\n                                         Map<String, String> added,\n                                         Collection<String> intersect) {\n                // No-op\n            }\n\n            @Override\n            public String put(CompositeMap<String, String> map,\n                              Map<String, String>[] composited,\n                              String key,\n                              String value) {\n                return map1.put(key, value);\n            }\n\n            @Override\n            public void putAll(CompositeMap<String, String> map,\n                               Map<String, String>[] composited,\n                               Map<? extends String, ? extends String> t) {\n                map1.putAll(t);\n            }\n        });\n    }\n\n    @Test\n    public void testGetExistingKey() {\n        assertEquals(\"value1\", compositeMap.get(\"key1\"));\n        assertEquals(\"value3\", compositeMap.get(\"key3\"));\n    }\n\n    @Test\n    public void testGetNonExistingKey() {\n        assertNull(compositeMap.get(\"key5\"));\n    }\n\n    @Test\n    public void testGetAfterRemove() {\n        compositeMap.remove(\"key1\");\n        assertNull(compositeMap.get(\"key1\"));\n    }\n\n    @Test\n    public void testGetAfterPut() {\n        compositeMap.put(\"key5\", \"value5\");\n        assertEquals(\"value5\", compositeMap.get(\"key5\"));\n    }\n\n    @Test\n    public void testGetAfterPutAll() {\n        Map<String, String> newMap = new HashMap<>();\n        newMap.put(\"key6\", \"value6\");\n        newMap.put(\"key7\", \"value7\");\n        compositeMap.putAll(newMap);\n        assertEquals(\"value6\", compositeMap.get(\"key6\"));\n        assertEquals(\"value7\", compositeMap.get(\"key7\"));\n    }\n\n    @Test\n    public void testGetAfterClear() {\n        compositeMap.clear();\n        assertNull(compositeMap.get(\"key1\"));\n        assertNull(compositeMap.get(\"key3\"));\n    }\n\n    @Test\n    public void testGetAfterAddComposited() {\n        Map<String, String> newMap = new HashMap<>();\n        newMap.put(\"key8\", \"value8\");\n        compositeMap.addComposited(newMap);\n        assertEquals(\"value8\", compositeMap.get(\"key8\"));\n    }\n\n    @Test\n    public void testGetAfterRemoveComposited() {\n        compositeMap.removeComposited(map1);\n        assertNull(compositeMap.get(\"key1\"));\n        assertEquals(\"value3\", compositeMap.get(\"key3\"));\n    }\n\n    @Test\n    public void testContainsKey() {\n        assertTrue(compositeMap.containsKey(\"key1\"));\n        assertFalse(compositeMap.containsKey(\"key5\"));\n    }\n\n    @Test\n    public void testRemove() {\n        assertEquals(\"value1\", compositeMap.remove(\"key1\"));\n        assertNull(compositeMap.get(\"key1\"));\n    }\n\n    @Test\n    public void testPut() {\n        assertEquals(\"value1\", compositeMap.put(\"key1\", \"newValue1\"));\n        assertEquals(\"newValue1\", compositeMap.get(\"key1\"));\n    }\n\n    @Test\n    public void testPutAll() {\n        Map<String, String> newMap = new HashMap<>();\n        newMap.put(\"key1\", \"newValue1\");\n        newMap.put(\"key5\", \"value5\");\n        compositeMap.putAll(newMap);\n        assertEquals(\"newValue1\", compositeMap.get(\"key1\"));\n        assertEquals(\"value5\", compositeMap.get(\"key5\"));\n    }\n\n    @Test\n    public void testClear() {\n        compositeMap.clear();\n        assertTrue(compositeMap.isEmpty());\n    }\n\n    @Test\n    public void testEntrySet() {\n        assertEquals(4, compositeMap.entrySet().size());\n    }\n\n    @Test\n    public void testKeySet() {\n        assertEquals(4, compositeMap.keySet().size());\n    }\n\n    @Test\n    public void testValues() {\n        assertEquals(4, compositeMap.values().size());\n    }\n}\n"}]