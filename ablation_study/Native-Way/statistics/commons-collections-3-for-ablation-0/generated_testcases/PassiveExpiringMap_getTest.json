[{"strategy": "retry", "code": "\npackage org.apache.commons.collections4.map;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNull;\nimport static org.mockito.Mockito.*;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\npublic class PassiveExpiringMap_getTest {\n\n    private PassiveExpiringMap<String, String> map;\n    private PassiveExpiringMap.ExpirationPolicy<String, String> mockPolicy;\n\n    @BeforeEach\n    public void setUp() {\n        mockPolicy = mock(PassiveExpiringMap.ExpirationPolicy.class);\n        map = new PassiveExpiringMap<>(mockPolicy, new HashMap<>());\n    }\n\n    @Test\n    public void testGet_EntryNotExpired() {\n        String key = \"key\";\n        String value = \"value\";\n        map.put(key, value);\n\n        when(mockPolicy.expirationTime(key, value)).thenReturn(System.currentTimeMillis() + 1000L);\n\n        // Ensure the current time is set before calling get\n        map.now = () -> System.currentTimeMillis();\n\n        assertEquals(value, map.get(key));\n    }\n\n    @Test\n    public void testGet_EntryExpired() {\n        String key = \"key\";\n        String value = \"value\";\n        map.put(key, value);\n\n        when(mockPolicy.expirationTime(key, value)).thenReturn(System.currentTimeMillis() - 1000L);\n\n        // Ensure the current time is set before calling get\n        map.now = () -> System.currentTimeMillis();\n\n        assertNull(map.get(key));\n    }\n}\n"}]