[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.map;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNull;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport org.apache.commons.collections4.keyvalue.MultiKey;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class MultiKeyMap_putTest {\n\n    private MultiKeyMap<String, String> multiKeyMap;\n\n    @BeforeEach\n    public void setUp() {\n        multiKeyMap = new MultiKeyMap<>();\n    }\n\n    @Test\n    public void testPutWithFiveKeys() {\n        String key1 = \"key1\";\n        String key2 = \"key2\";\n        String key3 = \"key3\";\n        String key4 = \"key4\";\n        String key5 = \"key5\";\n        String value = \"value\";\n\n        // Test adding a new entry\n        assertNull(multiKeyMap.put(key1, key2, key3, key4, key5, value));\n        assertEquals(1, multiKeyMap.size());\n        assertEquals(value, multiKeyMap.get(key1, key2, key3, key4, key5));\n        assertTrue(multiKeyMap.containsKey(key1, key2, key3, key4, key5));\n        assertTrue(multiKeyMap.containsKey(new MultiKey<>(key1, key2, key3, key4, key5)));\n\n        // Test updating an existing entry\n        String newValue = \"newValue\";\n        assertEquals(value, multiKeyMap.put(key1, key2, key3, key4, key5, newValue));\n        assertEquals(1, multiKeyMap.size());\n        assertEquals(newValue, multiKeyMap.get(key1, key2, key3, key4, key5));\n        assertTrue(multiKeyMap.containsKey(key1, key2, key3, key4, key5));\n        assertTrue(multiKeyMap.containsKey(new MultiKey<>(key1, key2, key3, key4, key5)));\n\n        // Test adding a null value\n        assertEquals(newValue, multiKeyMap.put(key1, key2, key3, key4, key5, null));\n        assertEquals(1, multiKeyMap.size());\n        assertNull(multiKeyMap.get(key1, key2, key3, key4, key5));\n        assertTrue(multiKeyMap.containsKey(key1, key2, key3, key4, key5));\n        assertTrue(multiKeyMap.containsKey(new MultiKey<>(key1, key2, key3, key4, key5)));\n    }\n\n    @Test\n    public void testPutWithFiveKeys_DifferentKeys() {\n        String key1 = \"key1\";\n        String key2 = \"key2\";\n        String key3 = \"key3\";\n        String key4 = \"key4\";\n        String key5 = \"key5\";\n        String value1 = \"value1\";\n\n        String key6 = \"key6\";\n        String key7 = \"key7\";\n        String key8 = \"key8\";\n        String key9 = \"key9\";\n        String key10 = \"key10\";\n        String value2 = \"value2\";\n\n        // Test adding two different entries\n        assertNull(multiKeyMap.put(key1, key2, key3, key4, key5, value1));\n        assertNull(multiKeyMap.put(key6, key7, key8, key9, key10, value2));\n        assertEquals(2, multiKeyMap.size());\n        assertEquals(value1, multiKeyMap.get(key1, key2, key3, key4, key5));\n        assertEquals(value2, multiKeyMap.get(key6, key7, key8, key9, key10));\n        assertTrue(multiKeyMap.containsKey(key1, key2, key3, key4, key5));\n        assertTrue(multiKeyMap.containsKey(key6, key7, key8, key9, key10));\n        assertTrue(multiKeyMap.containsKey(new MultiKey<>(key1, key2, key3, key4, key5)));\n        assertTrue(multiKeyMap.containsKey(new MultiKey<>(key6, key7, key8, key9, key10)));\n    }\n}\n"}]