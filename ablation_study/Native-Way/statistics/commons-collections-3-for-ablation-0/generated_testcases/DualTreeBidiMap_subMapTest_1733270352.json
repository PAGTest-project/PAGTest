[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.bidimap;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport java.util.Comparator;\nimport java.util.SortedMap;\nimport java.util.TreeMap;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class DualTreeBidiMap_subMapTest {\n\n    private DualTreeBidiMap<String, Integer> dualTreeBidiMap;\n\n    @BeforeEach\n    public void setUp() {\n        dualTreeBidiMap = new DualTreeBidiMap<>(String.CASE_INSENSITIVE_ORDER, null);\n        dualTreeBidiMap.put(\"one\", 1);\n        dualTreeBidiMap.put(\"two\", 2);\n        dualTreeBidiMap.put(\"three\", 3);\n    }\n\n    @Test\n    public void testSubMap() {\n        SortedMap<String, Integer> subMap = dualTreeBidiMap.subMap(\"one\", \"three\");\n        assertNotNull(subMap);\n        assertEquals(2, subMap.size());\n        assertTrue(subMap.containsKey(\"one\"));\n        assertTrue(subMap.containsKey(\"two\"));\n    }\n\n    @Test\n    public void testSubMapEmpty() {\n        SortedMap<String, Integer> subMap = dualTreeBidiMap.subMap(\"four\", \"five\");\n        assertNotNull(subMap);\n        assertTrue(subMap.isEmpty());\n    }\n\n    @Test\n    public void testSubMapSingleEntry() {\n        SortedMap<String, Integer> subMap = dualTreeBidiMap.subMap(\"one\", \"two\");\n        assertNotNull(subMap);\n        assertEquals(1, subMap.size());\n        assertTrue(subMap.containsKey(\"one\"));\n    }\n\n    @Test\n    public void testSubMapWithComparator() {\n        Comparator<String> reverseComparator = Comparator.reverseOrder();\n        DualTreeBidiMap<String, Integer> reverseBidiMap = new DualTreeBidiMap<>(reverseComparator, null);\n        reverseBidiMap.put(\"one\", 1);\n        reverseBidiMap.put(\"two\", 2);\n        reverseBidiMap.put(\"three\", 3);\n\n        SortedMap<String, Integer> subMap = reverseBidiMap.subMap(\"two\", \"one\");\n        assertNotNull(subMap);\n        assertEquals(1, subMap.size());\n        assertTrue(subMap.containsKey(\"two\"));\n    }\n}\n"}]