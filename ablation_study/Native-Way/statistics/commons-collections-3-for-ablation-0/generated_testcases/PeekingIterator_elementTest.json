[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.iterators;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.NoSuchElementException;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class PeekingIterator_elementTest {\n\n    private PeekingIterator<String> peekingIterator;\n    private List<String> elements;\n\n    @BeforeEach\n    public void setUp() {\n        elements = new ArrayList<>(Arrays.asList(\"A\", \"B\", \"C\"));\n        peekingIterator = new PeekingIterator<>(elements.iterator());\n    }\n\n    @Test\n    public void testElementWithElements() {\n        assertEquals(\"A\", peekingIterator.element());\n        assertEquals(\"A\", peekingIterator.next());\n        assertEquals(\"B\", peekingIterator.element());\n    }\n\n    @Test\n    public void testElementWithEmptyIterator() {\n        Iterator<String> emptyIterator = makeEmptyIterator();\n        PeekingIterator<String> emptyPeekingIterator = new PeekingIterator<>(emptyIterator);\n        assertThrows(NoSuchElementException.class, () -> emptyPeekingIterator.element());\n    }\n\n    @Test\n    public void testElementAfterExhaustion() {\n        while (peekingIterator.hasNext()) {\n            peekingIterator.next();\n        }\n        assertThrows(NoSuchElementException.class, () -> peekingIterator.element());\n    }\n\n    private Iterator<String> makeEmptyIterator() {\n        return new ArrayList<String>().iterator();\n    }\n}\n"}]