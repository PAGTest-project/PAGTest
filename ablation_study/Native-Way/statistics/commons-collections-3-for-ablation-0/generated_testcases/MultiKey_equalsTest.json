[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.keyvalue;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class MultiKey_equalsTest {\n\n    private Integer ONE;\n    private Integer TWO;\n    private Integer THREE;\n    private Integer FOUR;\n    private Integer FIVE;\n\n    @BeforeEach\n    public void setUp() {\n        ONE = 1;\n        TWO = 2;\n        THREE = 3;\n        FOUR = 4;\n        FIVE = 5;\n    }\n\n    @Test\n    public void testEqualsSameInstance() {\n        MultiKey<Integer> key = new MultiKey<>(ONE, TWO);\n        assertTrue(key.equals(key));\n    }\n\n    @Test\n    public void testEqualsDifferentType() {\n        MultiKey<Integer> key = new MultiKey<>(ONE, TWO);\n        assertFalse(key.equals(\"Not a MultiKey\"));\n    }\n\n    @Test\n    public void testEqualsSameKeys() {\n        MultiKey<Integer> key1 = new MultiKey<>(ONE, TWO);\n        MultiKey<Integer> key2 = new MultiKey<>(ONE, TWO);\n        assertTrue(key1.equals(key2));\n    }\n\n    @Test\n    public void testEqualsDifferentKeys() {\n        MultiKey<Integer> key1 = new MultiKey<>(ONE, TWO);\n        MultiKey<Integer> key2 = new MultiKey<>(THREE, FOUR);\n        assertFalse(key1.equals(key2));\n    }\n\n    @Test\n    public void testEqualsNullKeys() {\n        MultiKey<Integer> key1 = new MultiKey<>(null, null);\n        MultiKey<Integer> key2 = new MultiKey<>(null, null);\n        assertTrue(key1.equals(key2));\n    }\n\n    @Test\n    public void testEqualsMixedNullKeys() {\n        MultiKey<Integer> key1 = new MultiKey<>(ONE, null);\n        MultiKey<Integer> key2 = new MultiKey<>(ONE, null);\n        assertTrue(key1.equals(key2));\n    }\n\n    @Test\n    public void testEqualsDifferentLengthKeys() {\n        MultiKey<Integer> key1 = new MultiKey<>(ONE, TWO);\n        MultiKey<Integer> key2 = new MultiKey<>(ONE, TWO, THREE);\n        assertFalse(key1.equals(key2));\n    }\n\n    @Test\n    public void testEqualsEmptyKeys() {\n        MultiKey<Integer> key1 = new MultiKey<>(new Integer[] {});\n        MultiKey<Integer> key2 = new MultiKey<>(new Integer[] {});\n        assertTrue(key1.equals(key2));\n    }\n}\n"}]