[{"strategy": "retry", "code": "\npackage org.apache.commons.collections4.bloomfilter;\n\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.mockito.Mockito;\n\nimport java.util.function.IntPredicate;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\nclass IndexFilter_testTest {\n\n    private IndexFilter indexFilter;\n    private IntPredicate mockTracker;\n    private IntPredicate mockConsumer;\n    private Shape mockShape;\n\n    @BeforeEach\n    void setUp() {\n        mockShape = mock(Shape.class);\n        mockTracker = mock(IntPredicate.class);\n        mockConsumer = mock(IntPredicate.class);\n        indexFilter = new IndexFilter(mockShape, mockConsumer) {\n            @Override\n            IntPredicate getTracker() {\n                return mockTracker;\n            }\n        };\n        when(mockShape.getNumberOfBits()).thenReturn(10);\n    }\n\n    @Test\n    void testNumberTooLarge() {\n        assertThrows(IndexOutOfBoundsException.class, () -> indexFilter.test(10));\n    }\n\n    @Test\n    void testNumberNotSeen() {\n        when(mockTracker.test(5)).thenReturn(true);\n        when(mockConsumer.test(5)).thenReturn(false);\n        assertFalse(indexFilter.test(5));\n    }\n\n    @Test\n    void testNumberSeen() {\n        when(mockTracker.test(5)).thenReturn(false);\n        assertTrue(indexFilter.test(5));\n    }\n\n    @Test\n    void testNumberSeenWithMockTracker() {\n        when(mockTracker.test(5)).thenReturn(false);\n        assertTrue(indexFilter.test(5));\n    }\n}\n"}]