[{"strategy": "retry", "code": "\npackage org.apache.commons.collections4.iterators;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.NoSuchElementException;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class CartesianProductIterator_nextTest {\n\n    private List<Iterable<Character>> iterables;\n    private CartesianProductIterator<Character> iterator;\n\n    @BeforeEach\n    public void setUp() {\n        iterables = new ArrayList<>();\n    }\n\n    @Test\n    public void testNextWithSingleIterable() {\n        iterables.add(Arrays.asList('A', 'B', 'C'));\n        iterator = new CartesianProductIterator<>(iterables.toArray(new Iterable[0]));\n\n        assertTrue(iterator.hasNext());\n        assertEquals(Arrays.asList('A'), iterator.next());\n        assertEquals(Arrays.asList('B'), iterator.next());\n        assertEquals(Arrays.asList('C'), iterator.next());\n        assertThrows(NoSuchElementException.class, iterator::next);\n    }\n\n    @Test\n    public void testNextWithMultipleIterables() {\n        iterables.add(Arrays.asList('A', 'B'));\n        iterables.add(Arrays.asList('1', '2'));\n        iterator = new CartesianProductIterator<>(iterables.toArray(new Iterable[0]));\n\n        assertTrue(iterator.hasNext());\n        assertEquals(Arrays.asList('A', '1'), iterator.next());\n        assertEquals(Arrays.asList('A', '2'), iterator.next());\n        assertEquals(Arrays.asList('B', '1'), iterator.next());\n        assertEquals(Arrays.asList('B', '2'), iterator.next());\n        assertThrows(NoSuchElementException.class, iterator::next);\n    }\n\n    @Test\n    public void testNextWithEmptyIterable() {\n        iterables.add(Arrays.asList('A', 'B'));\n        iterables.add(new ArrayList<>());\n        iterator = new CartesianProductIterator<>(iterables.toArray(new Iterable[0]));\n\n        assertThrows(NoSuchElementException.class, iterator::next);\n    }\n\n    @Test\n    public void testNextWithAllEmptyLists() {\n        iterables.add(new ArrayList<>());\n        iterables.add(new ArrayList<>());\n        iterables.add(new ArrayList<>());\n        iterator = new CartesianProductIterator<>(iterables.toArray(new Iterable[0]));\n\n        assertThrows(NoSuchElementException.class, iterator::next);\n    }\n}\n"}]