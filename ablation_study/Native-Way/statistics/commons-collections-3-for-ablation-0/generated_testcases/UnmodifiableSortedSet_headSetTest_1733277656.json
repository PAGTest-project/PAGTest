[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.set;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.SortedSet;\nimport java.util.TreeSet;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class UnmodifiableSortedSet_headSetTest {\n\n    private SortedSet<Integer> originalSet;\n    private UnmodifiableSortedSet<Integer> unmodifiableSet;\n\n    @BeforeEach\n    public void setUp() {\n        originalSet = new TreeSet<>(Arrays.asList(1, 2, 3, 4, 5));\n        unmodifiableSet = new UnmodifiableSortedSet<>(originalSet);\n    }\n\n    @Test\n    public void testHeadSet() {\n        SortedSet<Integer> headSet = unmodifiableSet.headSet(3);\n        assertEquals(2, headSet.size());\n        assertTrue(headSet.contains(1));\n        assertTrue(headSet.contains(2));\n        assertFalse(headSet.contains(3));\n        assertFalse(headSet.contains(4));\n        assertFalse(headSet.contains(5));\n    }\n\n    @Test\n    public void testHeadSetWithBoundaryElement() {\n        SortedSet<Integer> headSet = unmodifiableSet.headSet(1);\n        assertEquals(0, headSet.size());\n        assertFalse(headSet.contains(1));\n        assertFalse(headSet.contains(2));\n        assertFalse(headSet.contains(3));\n        assertFalse(headSet.contains(4));\n        assertFalse(headSet.contains(5));\n    }\n\n    @Test\n    public void testHeadSetWithNonExistentElement() {\n        SortedSet<Integer> headSet = unmodifiableSet.headSet(0);\n        assertEquals(0, headSet.size());\n        assertFalse(headSet.contains(1));\n        assertFalse(headSet.contains(2));\n        assertFalse(headSet.contains(3));\n        assertFalse(headSet.contains(4));\n        assertFalse(headSet.contains(5));\n    }\n\n    @Test\n    public void testHeadSetWithUnmodifiableResult() {\n        SortedSet<Integer> headSet = unmodifiableSet.headSet(3);\n        assertThrows(UnsupportedOperationException.class, () -> headSet.add(0));\n    }\n}\n"}]