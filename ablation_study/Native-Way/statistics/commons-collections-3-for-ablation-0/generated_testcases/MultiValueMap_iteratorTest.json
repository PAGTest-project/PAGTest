[{"strategy": "retry", "code": "\npackage org.apache.commons.collections4.map;\n\nimport org.apache.commons.collections4.MultiMap;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.*;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MultiValueMap_iteratorTest {\n\n    private MultiValueMap<String, String> map;\n\n    @BeforeEach\n    public void setUp() {\n        map = new MultiValueMap<>();\n        map.put(\"key1\", \"value1\");\n        map.put(\"key1\", \"value2\");\n        map.put(\"key2\", \"value3\");\n    }\n\n    @Test\n    public void testIterator() {\n        Iterator<Map.Entry<String, String>> iterator = map.iterator();\n        List<Map.Entry<String, String>> entries = new ArrayList<>();\n        while (iterator.hasNext()) {\n            entries.add(iterator.next());\n        }\n\n        assertEquals(3, entries.size());\n        assertTrue(entries.contains(new AbstractMap.SimpleEntry<>(\"key1\", \"value1\")));\n        assertTrue(entries.contains(new AbstractMap.SimpleEntry<>(\"key1\", \"value2\")));\n        assertTrue(entries.contains(new AbstractMap.SimpleEntry<>(\"key2\", \"value3\")));\n    }\n\n    @Test\n    public void testIteratorWithEmptyMap() {\n        MultiValueMap<String, String> emptyMap = new MultiValueMap<>();\n        Iterator<Map.Entry<String, String>> iterator = emptyMap.iterator();\n        assertFalse(iterator.hasNext());\n    }\n\n    @Test\n    public void testIteratorWithSingleEntry() {\n        MultiValueMap<String, String> singleEntryMap = new MultiValueMap<>();\n        singleEntryMap.put(\"key\", \"value\");\n        Iterator<Map.Entry<String, String>> iterator = singleEntryMap.iterator();\n\n        assertTrue(iterator.hasNext());\n        Map.Entry<String, String> entry = iterator.next();\n        assertEquals(\"key\", entry.getKey());\n        assertEquals(\"value\", entry.getValue());\n        assertFalse(iterator.hasNext());\n    }\n\n    @Test\n    public void testIteratorWithMultipleValuesForSingleKey() {\n        Iterator<Map.Entry<String, String>> iterator = map.iterator();\n        List<Map.Entry<String, String>> entries = new ArrayList<>();\n        while (iterator.hasNext()) {\n            entries.add(iterator.next());\n        }\n\n        assertEquals(3, entries.size());\n        assertTrue(entries.contains(new AbstractMap.SimpleEntry<>(\"key1\", \"value1\")));\n        assertTrue(entries.contains(new AbstractMap.SimpleEntry<>(\"key1\", \"value2\")));\n        assertTrue(entries.contains(new AbstractMap.SimpleEntry<>(\"key2\", \"value3\")));\n    }\n\n    @Test\n    public void testIteratorRemoveNotSupported() {\n        Iterator<Map.Entry<String, String>> iterator = map.iterator();\n        assertTrue(iterator.hasNext());\n        iterator.next(); // Move to the first element\n        assertThrows(UnsupportedOperationException.class, iterator::remove);\n    }\n}\n"}]