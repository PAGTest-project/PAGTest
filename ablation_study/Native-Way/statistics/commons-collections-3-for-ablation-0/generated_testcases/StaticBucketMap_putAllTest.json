[{"strategy": "retry", "code": "\npackage org.apache.commons.collections4.map;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNull;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class StaticBucketMap_putAllTest {\n\n    private StaticBucketMap<String, String> map;\n\n    @BeforeEach\n    public void setUp() {\n        map = new StaticBucketMap<>(17);\n    }\n\n    @Test\n    public void testPutAll_EmptyMap() {\n        Map<String, String> emptyMap = new HashMap<>();\n        map.putAll(emptyMap);\n        assertTrue(map.isEmpty());\n    }\n\n    @Test\n    public void testPutAll_SingleEntry() {\n        Map<String, String> singleEntryMap = new HashMap<>();\n        singleEntryMap.put(\"key1\", \"value1\");\n        map.putAll(singleEntryMap);\n        assertEquals(1, map.size());\n        assertTrue(map.containsKey(\"key1\"));\n        assertEquals(\"value1\", map.get(\"key1\"));\n    }\n\n    @Test\n    public void testPutAll_MultipleEntries() {\n        Map<String, String> multipleEntriesMap = new HashMap<>();\n        multipleEntriesMap.put(\"key1\", \"value1\");\n        multipleEntriesMap.put(\"key2\", \"value2\");\n        multipleEntriesMap.put(\"key3\", \"value3\");\n        map.putAll(multipleEntriesMap);\n        assertEquals(3, map.size());\n        assertTrue(map.containsKey(\"key1\"));\n        assertTrue(map.containsKey(\"key2\"));\n        assertTrue(map.containsKey(\"key3\"));\n        assertEquals(\"value1\", map.get(\"key1\"));\n        assertEquals(\"value2\", map.get(\"key2\"));\n        assertEquals(\"value3\", map.get(\"key3\"));\n    }\n\n    @Test\n    public void testPutAll_OverwriteExistingEntries() {\n        map.put(\"key1\", \"oldValue\");\n        Map<String, String> overwriteMap = new HashMap<>();\n        overwriteMap.put(\"key1\", \"newValue\");\n        map.putAll(overwriteMap);\n        assertEquals(1, map.size());\n        assertTrue(map.containsKey(\"key1\"));\n        assertEquals(\"newValue\", map.get(\"key1\"));\n    }\n\n    @Test\n    public void testPutAll_NullKey() {\n        Map<String, String> nullKeyMap = new HashMap<>();\n        nullKeyMap.put(null, \"nullValue\");\n        map.putAll(nullKeyMap);\n        assertEquals(1, map.size());\n        assertTrue(map.containsKey(null));\n        assertEquals(\"nullValue\", map.get(null));\n    }\n\n    @Test\n    public void testPutAll_NullValue() {\n        Map<String, String> nullValueMap = new HashMap<>();\n        nullValueMap.put(\"key1\", null);\n        map.putAll(nullValueMap);\n        assertEquals(1, map.size());\n        assertTrue(map.containsKey(\"key1\"));\n        assertNull(map.get(\"key1\"));\n    }\n\n    @Test\n    public void testPutAll_NullMap() {\n        Map<String, String> nullMap = null;\n        map.putAll(nullMap);\n        assertTrue(map.isEmpty());\n    }\n}\n"}]