[{"strategy": "retry", "code": "\npackage org.apache.commons.collections4.map;\n\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.mockito.Mockito.*;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.Mock;\nimport org.mockito.junit.jupiter.MockitoExtension;\n\n@ExtendWith(MockitoExtension.class)\npublic class PassiveExpiringMap_containsKeyTest {\n\n    private PassiveExpiringMap<String, String> map;\n\n    @Mock\n    private ExpirationPolicy<String, String> expiringPolicy;\n\n    @BeforeEach\n    public void setUp() {\n        map = new PassiveExpiringMap<>(expiringPolicy, new HashMap<>());\n    }\n\n    @Test\n    public void testContainsKey_KeyExistsAndNotExpired() {\n        // Given\n        String key = \"key\";\n        String value = \"value\";\n        map.put(key, value);\n        when(expiringPolicy.expirationTime(key, value)).thenReturn(System.currentTimeMillis() + 1000L);\n\n        // When\n        boolean result = map.containsKey(key);\n\n        // Then\n        assertTrue(result);\n    }\n\n    @Test\n    public void testContainsKey_KeyExistsButExpired() {\n        // Given\n        String key = \"key\";\n        String value = \"value\";\n        map.put(key, value);\n        when(expiringPolicy.expirationTime(key, value)).thenReturn(System.currentTimeMillis() - 1000L);\n\n        // When\n        boolean result = map.containsKey(key);\n\n        // Then\n        assertFalse(result);\n    }\n\n    @Test\n    public void testContainsKey_KeyDoesNotExist() {\n        // Given\n        String key = \"nonexistentKey\";\n\n        // When\n        boolean result = map.containsKey(key);\n\n        // Then\n        assertFalse(result);\n    }\n}\n"}]