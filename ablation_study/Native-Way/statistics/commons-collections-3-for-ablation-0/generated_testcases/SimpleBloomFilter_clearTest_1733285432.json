[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.bloomfilter;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class SimpleBloomFilter_clearTest {\n    private SimpleBloomFilter filter;\n    private Shape testShape;\n\n    @BeforeEach\n    public void setUp() {\n        testShape = Shape.fromKM(1, 64); // Example shape for testing\n        filter = new SimpleBloomFilter(testShape);\n    }\n\n    @Test\n    public void testClear() {\n        // Set some bits in the filter\n        filter.merge((BitMapExtractor) predicate -> {\n            predicate.test(0xFFFFFFFFFFFFFFFFL);\n            return true;\n        });\n        assertEquals(64, filter.cardinality());\n\n        // Clear the filter\n        filter.clear();\n\n        // Verify that the filter is empty\n        assertTrue(filter.isEmpty());\n        assertEquals(0, filter.cardinality());\n    }\n\n    @Test\n    public void testClearAfterMerge() {\n        // Merge some indices into the filter\n        filter.merge((IndexExtractor) idx -> {\n            if (idx >= 0 && idx < testShape.getNumberOfBits()) {\n                return true;\n            }\n            return false;\n        });\n        assertEquals(1, filter.cardinality());\n\n        // Clear the filter\n        filter.clear();\n\n        // Verify that the filter is empty\n        assertTrue(filter.isEmpty());\n        assertEquals(0, filter.cardinality());\n    }\n}\n"}]