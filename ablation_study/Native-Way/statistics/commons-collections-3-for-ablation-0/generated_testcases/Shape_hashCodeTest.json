[{"strategy": "retry", "code": "\npackage org.apache.commons.collections4.bloomfilter;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class Shape_hashCodeTest {\n\n    private Shape shape;\n\n    @BeforeEach\n    public void setUp() {\n        shape = new Shape(5, 100);\n    }\n\n    @Test\n    public void testHashCode() {\n        int expectedHashCode = (31 + 100) * 31 + 5;\n        assertEquals(expectedHashCode, shape.hashCode());\n    }\n\n    @Test\n    public void testHashCodeWithDifferentValues() {\n        Shape shape2 = new Shape(7, 150);\n        int expectedHashCode2 = (31 + 150) * 31 + 7;\n        assertEquals(expectedHashCode2, shape2.hashCode());\n        assertNotEquals(shape.hashCode(), shape2.hashCode());\n    }\n\n    @Test\n    public void testHashCodeWithSameValues() {\n        Shape shape2 = new Shape(5, 100);\n        assertEquals(shape.hashCode(), shape2.hashCode());\n    }\n\n    @Test\n    public void testHashCodeWithZeroValues() {\n        Shape shape2 = new Shape(0, 0);\n        int expectedHashCode2 = (31 + 0) * 31 + 0;\n        assertEquals(expectedHashCode2, shape2.hashCode());\n    }\n\n    @Test\n    public void testHashCodeWithNegativeValues() {\n        Shape shape2 = new Shape(-5, -100);\n        int expectedHashCode2 = (31 + (-100)) * 31 + (-5);\n        assertEquals(expectedHashCode2, shape2.hashCode());\n    }\n}\n"}]