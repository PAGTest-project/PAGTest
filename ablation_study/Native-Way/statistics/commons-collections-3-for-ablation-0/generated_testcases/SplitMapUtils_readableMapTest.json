[{"strategy": "retry", "code": "\npackage org.apache.commons.collections4;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\nimport java.util.Map;\n\nimport org.apache.commons.collections4.map.HashedMap;\nimport org.apache.commons.collections4.map.WrappedGet;\nimport org.junit.jupiter.api.Test;\n\npublic class SplitMapUtils_readableMapTest {\n\n    @Test\n    public void testReadableMap_GetIsMapAndIterableMap() {\n        IterableMap<String, String> mockMap = mock(IterableMap.class);\n        IterableMap<String, String> result = SplitMapUtils.readableMap(mockMap);\n        assertEquals(mockMap, result);\n    }\n\n    @Test\n    public void testReadableMap_GetIsMapButNotIterableMap() {\n        Map<String, String> mockMap = mock(Map.class);\n        when(mockMap.entrySet()).thenReturn(new HashedMap<String, String>().entrySet());\n        IterableMap<String, String> result = SplitMapUtils.readableMap((Get<String, String>) mockMap);\n        assertEquals(MapUtils.iterableMap(mockMap), result);\n    }\n\n    @Test\n    public void testReadableMap_GetIsNotMap() {\n        Get<String, String> mockGet = mock(Get.class);\n        IterableMap<String, String> result = SplitMapUtils.readableMap(mockGet);\n        assertEquals(WrappedGet.class, result.getClass());\n    }\n\n    @Test\n    public void testReadableMap_NullGet() {\n        assertThrows(NullPointerException.class, () -> {\n            SplitMapUtils.readableMap(null);\n        });\n    }\n}\n"}]