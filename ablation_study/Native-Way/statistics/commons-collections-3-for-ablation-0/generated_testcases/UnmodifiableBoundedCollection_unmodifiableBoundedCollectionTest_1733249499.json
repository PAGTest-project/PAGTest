[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.collection;\n\nimport org.apache.commons.collections4.BoundedCollection;\nimport org.apache.commons.collections4.Unmodifiable;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class UnmodifiableBoundedCollection_unmodifiableBoundedCollectionTest {\n\n    private BoundedCollection<String> boundedCollection;\n\n    @BeforeEach\n    public void setUp() {\n        List<String> list = new ArrayList<>(List.of(\"A\", \"B\", \"C\"));\n        boundedCollection = new BoundedCollectionImpl<>(list, 5);\n    }\n\n    @Test\n    public void testUnmodifiableBoundedCollectionWithUnmodifiableCollection() {\n        BoundedCollection<String> unmodifiableBoundedCollection = UnmodifiableBoundedCollection.unmodifiableBoundedCollection(boundedCollection);\n        assertTrue(unmodifiableBoundedCollection instanceof Unmodifiable);\n    }\n\n    @Test\n    public void testUnmodifiableBoundedCollectionWithModifiableCollection() {\n        BoundedCollection<String> unmodifiableBoundedCollection = UnmodifiableBoundedCollection.unmodifiableBoundedCollection(boundedCollection);\n        assertNotSame(boundedCollection, unmodifiableBoundedCollection);\n        assertTrue(unmodifiableBoundedCollection instanceof Unmodifiable);\n    }\n\n    @Test\n    public void testUnmodifiableBoundedCollectionWithNullCollection() {\n        assertThrows(NullPointerException.class, () -> {\n            UnmodifiableBoundedCollection.unmodifiableBoundedCollection(null);\n        });\n    }\n\n    private static class BoundedCollectionImpl<E> implements BoundedCollection<E> {\n        private final Collection<E> collection;\n        private final int maxSize;\n\n        public BoundedCollectionImpl(Collection<E> collection, int maxSize) {\n            this.collection = collection;\n            this.maxSize = maxSize;\n        }\n\n        @Override\n        public boolean isFull() {\n            return collection.size() >= maxSize;\n        }\n\n        @Override\n        public int maxSize() {\n            return maxSize;\n        }\n\n        @Override\n        public boolean add(E e) {\n            return collection.add(e);\n        }\n\n        @Override\n        public boolean addAll(Collection<? extends E> c) {\n            return collection.addAll(c);\n        }\n\n        @Override\n        public void clear() {\n            collection.clear();\n        }\n\n        @Override\n        public boolean contains(Object o) {\n            return collection.contains(o);\n        }\n\n        @Override\n        public boolean containsAll(Collection<?> c) {\n            return collection.containsAll(c);\n        }\n\n        @Override\n        public boolean isEmpty() {\n            return collection.isEmpty();\n        }\n\n        @Override\n        public Iterator<E> iterator() {\n            return collection.iterator();\n        }\n\n        @Override\n        public boolean remove(Object o) {\n            return collection.remove(o);\n        }\n\n        @Override\n        public boolean removeAll(Collection<?> c) {\n            return collection.removeAll(c);\n        }\n\n        @Override\n        public boolean retainAll(Collection<?> c) {\n            return collection.retainAll(c);\n        }\n\n        @Override\n        public int size() {\n            return collection.size();\n        }\n\n        @Override\n        public Object[] toArray() {\n            return collection.toArray();\n        }\n\n        @Override\n        public <T> T[] toArray(T[] a) {\n            return collection.toArray(a);\n        }\n    }\n}\n"}]