[{"strategy": "retry", "code": "\npackage org.apache.commons.collections4.collection;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport org.apache.commons.collections4.Transformer;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class IndexedCollection_containsTest {\n\n    private IndexedCollection<Integer, String> indexedCollection;\n    private Collection<String> originalCollection;\n\n    @BeforeEach\n    public void setUp() {\n        originalCollection = new ArrayList<>();\n        indexedCollection = decorateUniqueCollection(originalCollection);\n    }\n\n    @Test\n    public void testContainsReturnsTrueForExistingElement() {\n        originalCollection.add(\"1\");\n        indexedCollection.reindex();\n        assertTrue(indexedCollection.contains(\"1\"));\n    }\n\n    @Test\n    public void testContainsReturnsFalseForNonExistingElement() {\n        originalCollection.add(\"1\");\n        indexedCollection.reindex();\n        assertFalse(indexedCollection.contains(\"2\"));\n    }\n\n    @Test\n    public void testContainsReturnsFalseForNullElement() {\n        originalCollection.add(\"1\");\n        indexedCollection.reindex();\n        assertFalse(indexedCollection.contains(null));\n    }\n\n    @Test\n    public void testContainsReturnsTrueAfterAddingElement() {\n        originalCollection.add(\"1\");\n        indexedCollection.reindex();\n        originalCollection.add(\"2\");\n        indexedCollection.reindex();\n        assertTrue(indexedCollection.contains(\"2\"));\n    }\n\n    @Test\n    public void testContainsReturnsFalseAfterRemovingElement() {\n        originalCollection.add(\"1\");\n        indexedCollection.reindex();\n        originalCollection.remove(\"1\");\n        indexedCollection.reindex();\n        assertFalse(indexedCollection.contains(\"1\"));\n    }\n\n    private IndexedCollection<Integer, String> decorateUniqueCollection(Collection<String> original) {\n        Transformer<String, Integer> keyTransformer = s -> s == null ? null : Integer.valueOf(s);\n        return IndexedCollection.uniqueIndexedCollection(original, keyTransformer);\n    }\n}\n"}]