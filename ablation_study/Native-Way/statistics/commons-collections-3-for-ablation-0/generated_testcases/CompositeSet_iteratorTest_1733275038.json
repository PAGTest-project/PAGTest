[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.set;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.Set;\n\nimport org.apache.commons.collections4.iterators.EmptyIterator;\nimport org.apache.commons.collections4.iterators.IteratorChain;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class CompositeSet_iteratorTest {\n\n    private CompositeSet<String> compositeSet;\n\n    @BeforeEach\n    public void setUp() {\n        compositeSet = new CompositeSet<>();\n    }\n\n    @Test\n    public void testIteratorWithEmptyCompositeSet() {\n        Iterator<String> iterator = compositeSet.iterator();\n        assertTrue(iterator instanceof EmptyIterator);\n    }\n\n    @Test\n    public void testIteratorWithNonEmptyCompositeSet() {\n        Set<String> set1 = new HashSet<>();\n        set1.add(\"A\");\n        set1.add(\"B\");\n        compositeSet.addComposited(set1);\n\n        Set<String> set2 = new HashSet<>();\n        set2.add(\"C\");\n        compositeSet.addComposited(set2);\n\n        Iterator<String> iterator = compositeSet.iterator();\n        assertTrue(iterator instanceof IteratorChain);\n\n        Set<String> resultSet = new HashSet<>();\n        iterator.forEachRemaining(resultSet::add);\n\n        assertEquals(3, resultSet.size());\n        assertTrue(resultSet.contains(\"A\"));\n        assertTrue(resultSet.contains(\"B\"));\n        assertTrue(resultSet.contains(\"C\"));\n    }\n\n    @Test\n    public void testIteratorWithEmptySetInCompositeSet() {\n        Set<String> set1 = new HashSet<>();\n        set1.add(\"A\");\n        compositeSet.addComposited(set1);\n\n        Set<String> set2 = new HashSet<>();\n        compositeSet.addComposited(set2);\n\n        Iterator<String> iterator = compositeSet.iterator();\n        assertTrue(iterator instanceof IteratorChain);\n\n        Set<String> resultSet = new HashSet<>();\n        iterator.forEachRemaining(resultSet::add);\n\n        assertEquals(1, resultSet.size());\n        assertTrue(resultSet.contains(\"A\"));\n    }\n\n    @Test\n    public void testIteratorWithAllEmptySetsInCompositeSet() {\n        Set<String> set1 = new HashSet<>();\n        compositeSet.addComposited(set1);\n\n        Set<String> set2 = new HashSet<>();\n        compositeSet.addComposited(set2);\n\n        Iterator<String> iterator = compositeSet.iterator();\n        assertTrue(iterator instanceof EmptyIterator);\n    }\n}\n"}]