[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.bloomfilter;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport org.junit.jupiter.api.Test;\n\npublic class BitMaps_getLongBitTest {\n\n    @Test\n    public void testGetLongBitPositiveIndex() {\n        assertEquals(1L << 0, BitMaps.getLongBit(0), \"Bit index 0\");\n        assertEquals(1L << 1, BitMaps.getLongBit(1), \"Bit index 1\");\n        assertEquals(1L << 31, BitMaps.getLongBit(31), \"Bit index 31\");\n        assertEquals(1L << 63, BitMaps.getLongBit(63), \"Bit index 63\");\n    }\n\n    @Test\n    public void testGetLongBitNegativeIndex() {\n        // Negative index behavior is not defined, but we can test the bitwise shift result\n        assertEquals(1L << -1, BitMaps.getLongBit(-1), \"Bit index -1\");\n        assertEquals(1L << -32, BitMaps.getLongBit(-32), \"Bit index -32\");\n    }\n\n    @Test\n    public void testGetLongBitLargeIndex() {\n        // Large index behavior is not defined, but we can test the bitwise shift result\n        assertEquals(1L << 64, BitMaps.getLongBit(64), \"Bit index 64\");\n        assertEquals(1L << 128, BitMaps.getLongBit(128), \"Bit index 128\");\n    }\n}\n"}]