[{"strategy": "retry", "code": "\npackage org.apache.commons.collections4.bloomfilter;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport org.apache.commons.collections4.bloomfilter.LayerManager.Cleanup;\nimport org.apache.commons.collections4.bloomfilter.LayerManager.ExtendCheck;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class LayeredBloomFilter_flattenTest {\n\n    private LayeredBloomFilter underTest;\n    private LayerManager layerManager;\n\n    @BeforeEach\n    public void setUp() {\n        final int[] sequence = {1};\n        layerManager = LayerManager.builder()\n                .setSupplier(() -> new SimpleBloomFilter(getTestShape()))\n                .setExtendCheck(ExtendCheck.neverAdvance())\n                .setCleanup(ll -> ll.removeIf(f -> (((SimpleBloomFilter) f).value-- == 0))).get();\n        underTest = new LayeredBloomFilter(getTestShape(), layerManager);\n    }\n\n    @Test\n    public void testFlatten() {\n        // Merge some BloomFilters into the LayeredBloomFilter\n        underTest.merge(TestingHashers.randomHasher());\n        underTest.next();\n        underTest.merge(TestingHashers.randomHasher());\n\n        // Flatten the LayeredBloomFilter\n        BloomFilter flattened = underTest.flatten();\n\n        // Verify that the flattened BloomFilter is not null and is a SimpleBloomFilter\n        assertTrue(flattened instanceof SimpleBloomFilter);\n\n        // Verify that the flattened BloomFilter has the correct shape\n        assertEquals(getTestShape(), flattened.getShape());\n\n        // Verify that the flattened BloomFilter has the correct cardinality\n        assertEquals(underTest.estimateN(), flattened.estimateN());\n    }\n\n    private Shape getTestShape() {\n        return Shape.fromNM(100, 1000);\n    }\n}\n"}]