[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.map;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNull;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport org.apache.commons.collections4.keyvalue.MultiKey;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class MultiKeyMap_getTest {\n\n    private MultiKeyMap<String, String> multiKeyMap;\n\n    @BeforeEach\n    public void setUp() {\n        multiKeyMap = new MultiKeyMap<>();\n    }\n\n    @Test\n    public void testGetExistingKey() {\n        multiKeyMap.put(\"key1\", \"key2\", \"value1\");\n        assertEquals(\"value1\", multiKeyMap.get(\"key1\", \"key2\"));\n    }\n\n    @Test\n    public void testGetNonExistingKey() {\n        assertNull(multiKeyMap.get(\"nonExistingKey1\", \"nonExistingKey2\"));\n    }\n\n    @Test\n    public void testGetWithNullKey() {\n        multiKeyMap.put(null, \"key2\", \"value2\");\n        assertEquals(\"value2\", multiKeyMap.get(null, \"key2\"));\n    }\n\n    @Test\n    public void testGetWithBothNullKeys() {\n        multiKeyMap.put(null, null, \"value3\");\n        assertEquals(\"value3\", multiKeyMap.get(null, null));\n    }\n\n    @Test\n    public void testGetAfterRemove() {\n        multiKeyMap.put(\"key1\", \"key2\", \"value1\");\n        multiKeyMap.removeMultiKey(\"key1\", \"key2\");\n        assertNull(multiKeyMap.get(\"key1\", \"key2\"));\n    }\n\n    @Test\n    public void testGetWithMultipleEntries() {\n        multiKeyMap.put(\"key1\", \"key2\", \"value1\");\n        multiKeyMap.put(\"key3\", \"key4\", \"value2\");\n        assertEquals(\"value1\", multiKeyMap.get(\"key1\", \"key2\"));\n        assertEquals(\"value2\", multiKeyMap.get(\"key3\", \"key4\"));\n    }\n\n    @Test\n    public void testGetWithSameHashCodeDifferentKeys() {\n        String key1 = \"Aa\";\n        String key2 = \"BB\";\n        assertTrue(key1.hashCode() == key2.hashCode());\n\n        multiKeyMap.put(key1, key1, \"value1\");\n        multiKeyMap.put(key2, key2, \"value2\");\n\n        assertEquals(\"value1\", multiKeyMap.get(key1, key1));\n        assertEquals(\"value2\", multiKeyMap.get(key2, key2));\n    }\n}\n"}]