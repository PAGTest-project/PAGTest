[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.bloomfilter;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class SimpleBloomFilter_mergeTest {\n    private SimpleBloomFilter filter;\n    private Shape shape;\n\n    @BeforeEach\n    public void setUp() {\n        shape = Shape.fromKM(1, 64); // Example shape with 1 hash function and 64 bits\n        filter = new SimpleBloomFilter(shape);\n    }\n\n    @Test\n    public void testMergeValidBitMapExtractor() {\n        BitMapExtractor bitMapExtractor = p -> {\n            p.test(0xFFFFFFFFFFFFFFFFL); // Set all bits in the first long\n            return true;\n        };\n        assertTrue(filter.merge(bitMapExtractor));\n        assertEquals(64, filter.cardinality());\n    }\n\n    @Test\n    public void testMergeInvalidBitMapExtractor() {\n        BitMapExtractor bitMapExtractor = p -> {\n            p.test(0xFFFFFFFFFFFFFFFFL); // Set all bits in the first long\n            p.test(0xFFFFFFFFFFFFFFFFL); // Set all bits in the second long, exceeding the limit\n            return true;\n        };\n        assertThrows(IllegalArgumentException.class, () -> filter.merge(bitMapExtractor));\n    }\n\n    @Test\n    public void testMergeBitMapExtractorWithExcessBits() {\n        BitMapExtractor bitMapExtractor = p -> {\n            p.test(0xFFFFFFFFFFFFFFFFL); // Set all bits in the first long\n            p.test(0x1L << 64); // Set a bit higher than the limit for the shape\n            return true;\n        };\n        assertThrows(IllegalArgumentException.class, () -> filter.merge(bitMapExtractor));\n    }\n\n    @Test\n    public void testMergeBitMapExtractorWithIndexOutOfBounds() {\n        BitMapExtractor bitMapExtractor = p -> {\n            p.test(0xFFFFFFFFFFFFFFFFL); // Set all bits in the first long\n            p.test(0xFFFFFFFFFFFFFFFFL); // Set all bits in the second long, exceeding the limit\n            p.test(0xFFFFFFFFFFFFFFFFL); // This should throw IndexOutOfBoundsException\n            return true;\n        };\n        assertThrows(IllegalArgumentException.class, () -> filter.merge(bitMapExtractor));\n    }\n}\n"}]