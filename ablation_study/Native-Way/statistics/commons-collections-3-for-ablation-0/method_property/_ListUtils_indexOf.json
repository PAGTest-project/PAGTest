{"target_method": "indexOf", "signature": "int indexOf(List<E>, Predicate<E>)", "direct_enhancements": [{"method_name": "select(Collection<? extends E>, Predicate<? super E>)", "relation_type": "Behavioral Similarity", "confidence": 0.9, "reason": "Both methods involve filtering elements based on a predicate, but 'select' returns a new collection of matching elements while 'indexOf' returns the index of the first matching element.", "is_external": false}, {"method_name": "selectRejected(Collection<? extends E>, Predicate<? super E>)", "relation_type": "Behavioral Similarity", "confidence": 0.85, "reason": "Both methods involve filtering elements based on a predicate, but 'selectRejected' returns elements that do not match the predicate while 'indexOf' returns the index of the first matching element.", "is_external": false}, {"method_name": "retainAll(Collection<E>, Collection<?>)", "relation_type": "Behavioral Similarity", "confidence": 0.8, "reason": "Both methods involve filtering elements based on a condition, but 'retainAll' modifies the collection to retain only elements present in another collection while 'indexOf' returns the index of the first matching element based on a predicate.", "is_external": false}, {"method_name": "removeAll(Collection<E>, Collection<?>)", "relation_type": "Behavioral Similarity", "confidence": 0.8, "reason": "Both methods involve filtering elements based on a condition, but 'removeAll' modifies the collection to remove elements present in another collection while 'indexOf' returns the index of the first matching element based on a predicate.", "is_external": false}, {"method_name": "intersection(List<? extends E>, List<? extends E>)", "relation_type": "Behavioral Similarity", "confidence": 0.75, "reason": "Both methods involve comparing elements between collections, but 'intersection' returns a new list containing common elements while 'indexOf' returns the index of the first matching element based on a predicate.", "is_external": false}, {"method_name": "union(List<? extends E>, List<? extends E>)", "relation_type": "Behavioral Similarity", "confidence": 0.75, "reason": "Both methods involve combining elements from different collections, but 'union' returns a new list containing all unique elements from both lists while 'indexOf' returns the index of the first matching element based on a predicate.", "is_external": false}, {"method_name": "subtract(List<E>, List<? extends E>)", "relation_type": "Behavioral Similarity", "confidence": 0.75, "reason": "Both methods involve comparing elements between collections, but 'subtract' returns a new list containing elements from the first list that are not in the second list while 'indexOf' returns the index of the first matching element based on a predicate.", "is_external": false}, {"method_name": "longestCommonSubsequence(List<E>, List<E>)", "relation_type": "Behavioral Similarity", "confidence": 0.7, "reason": "Both methods involve comparing elements between collections, but 'longestCommonSubsequence' returns the longest common subsequence while 'indexOf' returns the index of the first matching element based on a predicate.", "is_external": false}, {"method_name": "partition(List<T>, int)", "relation_type": "Behavioral Similarity", "confidence": 0.65, "reason": "Both methods involve manipulating collections, but 'partition' divides the list into sublists of a specified size while 'indexOf' returns the index of the first matching element based on a predicate.", "is_external": false}, {"method_name": "lazyList(List<E>, Factory<? extends E>)", "relation_type": "Behavioral Similarity", "confidence": 0.6, "reason": "Both methods involve manipulating collections, but 'lazyList' returns a list that creates elements on demand while 'indexOf' returns the index of the first matching element based on a predicate.", "is_external": false}]}