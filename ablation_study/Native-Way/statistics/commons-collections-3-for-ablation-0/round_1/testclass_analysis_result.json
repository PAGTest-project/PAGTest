[{"file_path": "src/test/java/org/apache/commons/collections4/EnumerationUtils_toListTest.java", "testclass_name": "EnumerationUtils_toListTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.List;", "import java.util.StringTokenizer;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "EnumerationUtils_toListTest", "description": "Unit tests for the EnumerationUtils.toList method with a StringTokenizer.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testToListWithStringTokenizer", "primary_tested": ["EnumerationUtils.toList(StringTokenizer)"], "external_dependencies": {"modules": ["EnumerationUtils", "StringTokenizer", "List"]}, "category": "unit", "description": "Tests the EnumerationUtils.toList method with a StringTokenizer, verifying the conversion of tokens to a list and their correctness."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/ListUtils_unionTest.java", "testclass_name": "ListUtils_unionTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "ListUtils_unionTest", "description": "Unit tests for the union functionality of ListUtils.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testUnion", "primary_tested": ["ListUtils.union(List<Integer>,List<Integer>)"], "external_dependencies": {"modules": ["ListUtils", "Arrays", "List"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the union functionality of ListUtils, ensuring that it correctly combines two lists."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/IteratorUtils_zippingIteratorTest.java", "testclass_name": "IteratorUtils_zippingIteratorTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Iterator;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import org.apache.commons.collections4.iterators.ZippingIterator;"], "name": "IteratorUtils_zippingIteratorTest", "description": "Test for the ZippingIterator functionality in IteratorUtils.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testZippingIterator", "primary_tested": ["IteratorUtils.zippingIterator(Iterator,Iterator,Iterator)"], "external_dependencies": {"modules": ["Arrays", "Iterator", "ZippingIterator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the creation of a ZippingIterator using IteratorUtils."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/ListUtils_subtractTest.java", "testclass_name": "ListUtils_subtractTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "ListUtils_subtractTest", "description": "Unit test for the subtract method in ListUtils.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testSubtract", "primary_tested": ["ListUtils.subtract(List<Integer>,List<Integer>)"], "external_dependencies": {"modules": ["ListUtils", "Arrays"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the subtract functionality of ListUtils, ensuring it correctly subtracts elements of one list from another."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/ListUtils_intersectionTest.java", "testclass_name": "ListUtils_intersectionTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "ListUtils_intersectionTest", "description": "Unit test for the intersection functionality of ListUtils.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testIntersection", "primary_tested": ["ListUtils.intersection(List<Integer>,List<Integer>)"], "external_dependencies": {"modules": ["ListUtils", "Arrays", "List", "Integer"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the intersection functionality of ListUtils to ensure it correctly identifies common elements between two lists."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/IteratorUtils_chainedIteratorTest.java", "testclass_name": "IteratorUtils_chainedIteratorTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Iterator;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "IteratorUtils_chainedIteratorTest", "description": "Unit tests for the chainedIterator functionality in IteratorUtils.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testChainedIterator", "primary_tested": ["IteratorUtils.chainedIterator(Iterator,Iterator)"], "external_dependencies": {"modules": ["java.util.Arrays", "java.util.Iterator", "java.util.List", "org.apache.commons.collections4.IteratorUtils"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the chainedIterator functionality of IteratorUtils by chaining two iterators and verifying the sequence of elements."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/ListUtils_retainAllTest.java", "testclass_name": "ListUtils_retainAllTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "ListUtils_retainAllTest", "description": "Unit test for the retainAll method in ListUtils.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testRetainAll", "primary_tested": ["ListUtils.retainAll(Collection<Integer>,Collection<Integer>)"], "external_dependencies": {"modules": ["java.util.Arrays", "java.util.Collection", "java.util.List", "org.apache.commons.collections4.ListUtils"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the retainAll functionality of the ListUtils, ensuring that only the elements present in both collections are retained."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/ListUtils_longestCommonSubsequenceTest.java", "testclass_name": "ListUtils_longestCommonSubsequenceTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "ListUtils_longestCommonSubsequenceTest", "description": "Unit tests for the longestCommonSubsequence method in ListUtils.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testLongestCommonSubsequence_NonNullInput", "primary_tested": ["ListUtils.longestCommonSubsequence(String,String)"], "external_dependencies": {"modules": ["ListUtils"]}, "category": "unit", "description": "Tests the longestCommonSubsequence method with non-null input strings."}, {"name": "testLongestCommonSubsequence_NullInput", "primary_tested": ["ListUtils.longestCommonSubsequence(String,String)"], "external_dependencies": {"modules": ["ListUtils"]}, "category": "unit", "description": "Tests the longestCommonSubsequence method with null input strings, expecting a NullPointerException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/ComparatorUtils_maxTest.java", "testclass_name": "ComparatorUtils_maxTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.Comparator;"], "name": "ComparatorUtils_maxTest", "description": "Unit tests for the max functionality of ComparatorUtils.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testMaxWithDefaultComparator", "primary_tested": ["ComparatorUtils.max(int,int,Comparator)"], "external_dependencies": {"modules": ["ComparatorUtils", "Comparator"]}, "category": "unit", "description": "Tests the max functionality of ComparatorUtils with the default comparator."}, {"name": "testMaxWithCustomComparator", "primary_tested": ["ComparatorUtils.max(int,int,Comparator)"], "associated_methods": ["Comparator.reverseOrder()"], "external_dependencies": {"modules": ["ComparatorUtils", "Comparator"]}, "category": "unit", "description": "Tests the max functionality of ComparatorUtils with a custom reverse order comparator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/ComparatorUtils_transformedComparatorTest.java", "testclass_name": "ComparatorUtils_transformedComparatorTest", "dependencies": ["package org.apache.commons.collections4;", "import org.apache.commons.collections4.comparators.TransformingComparator;", "import org.junit.jupiter.api.Test;", "import java.util.Comparator;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNotNull;"], "name": "ComparatorUtils_transformedComparatorTest", "description": "Unit tests for the transformedComparator method in ComparatorUtils.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testTransformedComparatorWithNullComparator", "primary_tested": ["ComparatorUtils.transformedComparator(Comparator,Transformer)"], "external_dependencies": {"modules": ["ComparatorUtils", "TransformingComparator", "Transformer"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the creation of a TransformingComparator with a null comparator."}, {"name": "testTransformedComparatorWithNonNullComparator", "primary_tested": ["ComparatorUtils.transformedComparator(Comparator,Transformer)"], "external_dependencies": {"modules": ["ComparatorUtils", "TransformingComparator", "Transformer"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the creation of a TransformingComparator with a non-null comparator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/MultiMapUtils_getCollectionTest.java", "testclass_name": "MultiMapUtils_getCollectionTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import java.util.Collection;", "import org.apache.commons.collections4.multimap.ArrayListValuedHashMap;", "import org.junit.jupiter.api.Test;"], "name": "MultiMapUtils_getCollectionTest", "description": "Unit tests for the MultiMapUtils.getCollection method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testGetCollection_WithNonNullMap", "primary_tested": ["MultiMapUtils.getCollection(MultiValuedMap,Object)"], "external_dependencies": {"modules": ["ArrayListValuedHashMap", "MultiValuedMap", "Collection"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the getCollection method with a non-null map, ensuring it returns the correct collection for a given key."}, {"name": "testGetCollection_WithNullMap", "primary_tested": ["MultiMapUtils.getCollection(MultiValuedMap,Object)"], "external_dependencies": {"modules": ["Collection"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the getCollection method with a null map, ensuring it returns null."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/IteratorUtils_toListTest.java", "testclass_name": "IteratorUtils_toListTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Iterator;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "IteratorUtils_toListTest", "description": "Unit tests for the IteratorUtils.toList method.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testToList_SuccessfulConversion", "primary_tested": ["IteratorUtils.toList(Iterator<String>,int)"], "external_dependencies": {"modules": ["Arrays", "Iterator", "List", "IteratorUtils"]}, "category": "unit", "description": "Tests the successful conversion of an iterator to a list."}, {"name": "testToList_NullIterator", "primary_tested": ["IteratorUtils.toList(Iterator<String>,int)"], "external_dependencies": {"modules": ["IteratorUtils"]}, "category": "unit", "description": "Tests the behavior of the toList method when a null iterator is provided, expecting a NullPointerException."}, {"name": "testToList_InvalidEstimatedSize", "primary_tested": ["IteratorUtils.toList(Iterator<String>,int)"], "external_dependencies": {"modules": ["Arrays", "Iterator", "IteratorUtils"]}, "category": "unit", "description": "Tests the behavior of the toList method when an invalid estimated size is provided, expecting an IllegalArgumentException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/IteratorUtils_sizeTest.java", "testclass_name": "IteratorUtils_sizeTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.Iterator;", "import java.util.NoSuchElementException;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.mockito.Mockito.*;"], "name": "IteratorUtils_sizeTest", "description": "Unit tests for the size method in IteratorUtils, which calculates the size of an iterator.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testSizeWithNonNullIterator", "primary_tested": ["IteratorUtils.size(Iterator)"], "associated_methods": ["Iterator.hasNext()", "Iterator.next()"], "external_dependencies": {"modules": ["Iterator", "IteratorUtils"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the size method of IteratorUtils with a non-null iterator, verifying that it correctly counts the elements."}, {"name": "testSizeWithNullIterator", "primary_tested": ["IteratorUtils.size(Iterator)"], "external_dependencies": {"modules": ["IteratorUtils"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the size method of IteratorUtils with a null iterator, verifying that it returns 0."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/SynchronizedQueue_peekTest.java", "testclass_name": "SynchronizedQueue_peekTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.mockito.Mockito.*;", "import java.util.Queue;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import org.mockito.Mock;", "import org.mockito.MockitoAnnotations;"], "name": "SynchronizedQueue_peekTest", "description": "Unit tests for the peek method of the SynchronizedQueue class.", "class_members": {"variables": [{"name": "mockQueue", "type": "Queue<String>"}, {"name": "synchronizedQueue", "type": "SynchronizedQueue<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPeek", "primary_tested": ["SynchronizedQueue.peek()"], "associated_methods": ["Queue.peek()"], "external_dependencies": {"modules": ["Queue", "SynchronizedQueue"], "class_members": [{"name": "mockQueue", "type": "variable"}, {"name": "synchronizedQueue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the peek functionality of the SynchronizedQueue, ensuring it returns the correct element and verifies the mock queue's peek method is called."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/SetUtils_unionTest.java", "testclass_name": "SetUtils_unionTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.HashSet;", "import java.util.Set;", "import org.apache.commons.collections4.SetUtils.SetView;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SetUtils_unionTest", "description": "Unit tests for the union functionality of SetUtils.", "class_members": {"variables": [{"name": "setA", "type": "Set<Integer>"}, {"name": "setB", "type": "Set<Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testUnion", "primary_tested": ["SetUtils.union(Set<Integer>,Set<Integer>)"], "associated_methods": ["SetView.size()", "SetView.contains(Integer)", "SetView.containsAll(Collection<Integer>)"], "external_dependencies": {"modules": ["SetUtils", "SetView", "HashSet", "Set", "NullPointerException"], "class_members": [{"name": "setA", "type": "variable"}, {"name": "setB", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the union functionality of SetUtils, including handling of empty sets and null parameters."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/IteratorUtils_filteredListIteratorTest.java", "testclass_name": "IteratorUtils_filteredListIteratorTest", "dependencies": ["package org.apache.commons.collections4;", "import org.apache.commons.collections4.functors.TruePredicate;", "import org.apache.commons.collections4.iterators.FilterListIterator;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.List;", "import java.util.ListIterator;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertThrows;"], "name": "IteratorUtils_filteredListIteratorTest", "description": "Unit tests for the filteredListIterator method in IteratorUtils.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testFilteredListIterator_Success", "primary_tested": ["IteratorUtils.filteredListIterator(ListIterator,Predicate)"], "external_dependencies": {"modules": ["Arrays", "List", "ListIterator", "FilterListIterator", "IteratorUtils", "TruePredicate"]}, "category": "unit", "description": "Tests the successful creation of a filtered list iterator."}, {"name": "testFilteredListIterator_NullListIterator", "primary_tested": ["IteratorUtils.filteredListIterator(ListIterator,Predicate)"], "external_dependencies": {"modules": ["IteratorUtils", "TruePredicate"]}, "category": "unit", "description": "Tests the behavior when a null list iterator is provided."}, {"name": "testFilteredListIterator_NullPredicate", "primary_tested": ["IteratorUtils.filteredListIterator(ListIterator,Predicate)"], "external_dependencies": {"modules": ["Arrays", "List", "ListIterator", "IteratorUtils"]}, "category": "unit", "description": "Tests the behavior when a null predicate is provided."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/SynchronizedQueue_elementTest.java", "testclass_name": "SynchronizedQueue_elementTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import org.junit.jupiter.api.Test;", "import org.mockito.Mockito;", "import java.util.Queue;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.mockito.Mockito.when;"], "name": "SynchronizedQueue_elementTest", "description": "Unit test for the element method of SynchronizedQueue.", "class_members": {"variables": [{"name": "mockQueue", "type": "Queue<String>"}, {"name": "lock", "type": "Object"}, {"name": "synchronizedQueue", "type": "SynchronizedQueue<String>"}, {"name": "expectedElement", "type": "String"}]}, "test_cases": [{"name": "testElement", "primary_tested": ["SynchronizedQueue.element()"], "associated_methods": ["Queue.element()"], "external_dependencies": {"modules": ["Queue", "SynchronizedQueue", "Mockito"], "class_members": [{"name": "mockQueue", "type": "variable"}, {"name": "lock", "type": "variable"}, {"name": "synchronizedQueue", "type": "variable"}, {"name": "expectedElement", "type": "variable"}]}, "category": "unit", "description": "Tests the element method of SynchronizedQueue to ensure it returns the expected element from the underlying queue."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/ArrayStack_peekTest.java", "testclass_name": "ArrayStack_peekTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.EmptyStackException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ArrayStack_peekTest", "description": "Unit tests for the peek functionality of the ArrayStack class.", "class_members": {"variables": [{"name": "stack", "type": "ArrayStack<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPeekWithNonEmptyStack", "primary_tested": ["ArrayStack.peek()"], "associated_methods": ["ArrayStack.push(String)"], "external_dependencies": {"modules": ["ArrayStack"], "class_members": [{"name": "stack", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the peek functionality of the ArrayStack when the stack is non-empty."}, {"name": "testPeekWithEmptyStack", "primary_tested": ["ArrayStack.peek()"], "external_dependencies": {"modules": ["ArrayStack", "EmptyStackException"], "class_members": [{"name": "stack", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the peek functionality of the ArrayStack when the stack is empty, expecting an EmptyStackException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/ListUtils_partitionTest.java", "testclass_name": "ListUtils_partitionTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "ListUtils_partitionTest", "description": "Unit tests for the partition functionality of ListUtils.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testPartition_NormalCase", "primary_tested": ["ListUtils.partition(List<Integer>,int)"], "external_dependencies": {"modules": ["ListUtils", "Arrays", "List"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the partition functionality of ListUtils with a normal case."}, {"name": "testPartition_NullList", "primary_tested": ["ListUtils.partition(List<Integer>,int)"], "external_dependencies": {"modules": ["ListUtils"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the partition functionality of ListUtils with a null list."}, {"name": "testPartition_InvalidSize", "primary_tested": ["ListUtils.partition(List<Integer>,int)"], "external_dependencies": {"modules": ["ListUtils", "Arrays", "List"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the partition functionality of ListUtils with invalid partition sizes."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/EnumerationUtils_getTest.java", "testclass_name": "EnumerationUtils_getTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.Enumeration;", "import java.util.Vector;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "EnumerationUtils_getTest", "description": "Unit tests for the EnumerationUtils.get method.", "class_members": {"variables": [{"name": "vector", "type": "Vector<String>"}, {"name": "enumeration", "type": "Enumeration<String>"}]}, "fixtures": [], "test_cases": [{"name": "testGetValidIndex", "primary_tested": ["EnumerationUtils.get(Enumeration<String>,int)"], "external_dependencies": {"modules": ["Vector", "Enumeration", "EnumerationUtils"], "class_members": [{"name": "vector", "type": "variable"}, {"name": "enumeration", "type": "variable"}]}, "category": "unit", "description": "Tests the EnumerationUtils.get method with a valid index."}, {"name": "testGetInvalidIndex", "primary_tested": ["EnumerationUtils.get(Enumeration<String>,int)"], "external_dependencies": {"modules": ["Vector", "Enumeration", "EnumerationUtils"], "class_members": [{"name": "vector", "type": "variable"}, {"name": "enumeration", "type": "variable"}]}, "category": "unit", "description": "Tests the EnumerationUtils.get method with an invalid index, expecting an IndexOutOfBoundsException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/SetUtils_hashSetTest.java", "testclass_name": "SetUtils_hashSetTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Arrays;", "import java.util.HashSet;", "import java.util.Set;", "import org.junit.jupiter.api.Test;"], "name": "SetUtils_hashSetTest", "description": "Unit tests for the SetUtils.hashSet method, which creates a HashSet with the given items.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testHashSetWithItems", "primary_tested": ["SetUtils.hashSet(String...)"], "external_dependencies": {"modules": ["SetUtils", "Set", "Arrays", "HashSet"]}, "category": "unit", "description": "Tests the creation of a HashSet with three items ('a', 'b', 'c') and verifies the size and content of the set."}, {"name": "testHashSetWithNoItems", "primary_tested": ["SetUtils.hashSet(String...)"], "external_dependencies": {"modules": ["SetUtils", "Set", "Arrays", "HashSet"]}, "category": "unit", "description": "Tests the creation of a HashSet with no items and verifies that the set is empty."}, {"name": "testHashSetWithNull", "primary_tested": ["SetUtils.hashSet(String...)"], "external_dependencies": {"modules": ["SetUtils", "Set", "Arrays", "HashSet"]}, "category": "unit", "description": "Tests the creation of a HashSet with a null array and verifies that the result is null."}, {"name": "testHashSetWithDuplicates", "primary_tested": ["SetUtils.hashSet(String...)"], "external_dependencies": {"modules": ["SetUtils", "Set", "Arrays", "HashSet"]}, "category": "unit", "description": "Tests the creation of a HashSet with duplicate items and verifies that the set contains only unique items."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/SynchronizedQueue_pollTest.java", "testclass_name": "SynchronizedQueue_pollTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.mockito.Mockito.mock;", "import static org.mockito.Mockito.when;", "import java.util.Queue;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SynchronizedQueue_pollTest", "description": "Unit tests for the poll method of the SynchronizedQueue class.", "class_members": {"variables": [{"name": "synchronizedQueue", "type": "SynchronizedQueue<String>"}, {"name": "mockQueue", "type": "Queue<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPoll_WhenQueueIsNotEmpty", "primary_tested": ["SynchronizedQueue.poll()"], "external_dependencies": {"modules": ["Queue", "SynchronizedQueue"], "class_members": [{"name": "synchronizedQueue", "type": "variable"}, {"name": "mockQueue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the poll method when the queue is not empty."}, {"name": "testPoll_WhenQueueIsEmpty", "primary_tested": ["SynchronizedQueue.poll()"], "external_dependencies": {"modules": ["Queue", "SynchronizedQueue"], "class_members": [{"name": "synchronizedQueue", "type": "variable"}, {"name": "mockQueue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the poll method when the queue is empty."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/SynchronizedQueue_removeTest.java", "testclass_name": "SynchronizedQueue_removeTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.mockito.Mockito.*;", "import java.util.NoSuchElementException;", "import java.util.Queue;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import org.mockito.Mock;", "import org.mockito.MockitoAnnotations;"], "name": "SynchronizedQueue_removeTest", "description": "Unit tests for the remove method of the SynchronizedQueue class.", "class_members": {"variables": [{"name": "mockQueue", "type": "Queue<String>"}, {"name": "synchronizedQueue", "type": "SynchronizedQueue<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemove_Success", "primary_tested": ["SynchronizedQueue.remove()"], "external_dependencies": {"modules": ["Queue", "SynchronizedQueue"], "class_members": [{"name": "mockQueue", "type": "variable"}, {"name": "synchronizedQueue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful removal of an element from the SynchronizedQueue."}, {"name": "testRemove_ThrowsNoSuchElementException", "primary_tested": ["SynchronizedQueue.remove()"], "external_dependencies": {"modules": ["Queue", "SynchronizedQueue", "NoSuchElementException"], "class_members": [{"name": "mockQueue", "type": "variable"}, {"name": "synchronizedQueue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the remove method of SynchronizedQueue throws a NoSuchElementException when the underlying queue is empty."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/ListUtils_hashCodeForListTest.java", "testclass_name": "ListUtils_hashCodeForListTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "ListUtils_hashCodeForListTest", "description": "Unit tests for the hashCodeForList method in ListUtils.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testHashCodeForList_NullList", "primary_tested": ["ListUtils.hashCodeForList(List)"], "external_dependencies": {"modules": ["ListUtils"]}, "category": "unit", "description": "Tests the hashCodeForList method with a null list."}, {"name": "testHashCodeForList_EmptyList", "primary_tested": ["ListUtils.hashCodeForList(List)"], "external_dependencies": {"modules": ["ListUtils", "Collections"]}, "category": "unit", "description": "Tests the hashCodeForList method with an empty list."}, {"name": "testHashCodeForList_NonEmptyList", "primary_tested": ["ListUtils.hashCodeForList(List)"], "associated_methods": ["String.hashCode()"], "external_dependencies": {"modules": ["ListUtils", "Arrays", "List"]}, "category": "unit", "description": "Tests the hashCodeForList method with a non-empty list."}, {"name": "testHashCodeForList_ListWithNullElements", "primary_tested": ["ListUtils.hashCodeForList(List)"], "associated_methods": ["String.hashCode()"], "external_dependencies": {"modules": ["ListUtils", "Arrays", "List"]}, "category": "unit", "description": "Tests the hashCodeForList method with a list containing null elements."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/TransformedBag_uniqueSetTest.java", "testclass_name": "TransformedBag_uniqueSetTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import org.apache.commons.collections4.Bag;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.set.TransformedSet;", "import org.junit.jupiter.api.Test;", "import org.mockito.Mockito;", "import java.util.HashSet;", "import java.util.Set;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.mockito.Mockito.when;"], "name": "TransformedBag_uniqueSetTest", "description": "Unit tests for the uniqueSet method in TransformedBag.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testUniqueSet", "primary_tested": ["TransformedBag.uniqueSet()"], "associated_methods": [], "external_dependencies": {"modules": ["Bag", "Transformer", "TransformedSet", "HashSet", "Set", "Mockito"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the uniqueSet method of TransformedBag to ensure it returns a TransformedSet."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/ComparatorUtils_chainedComparatorTest.java", "testclass_name": "ComparatorUtils_chainedComparatorTest", "dependencies": ["package org.apache.commons.collections4;", "import org.apache.commons.collections4.comparators.ComparatorChain;", "import org.junit.jupiter.api.Test;", "import java.util.Comparator;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "ComparatorUtils_chainedComparatorTest", "description": "Unit tests for the chainedComparator method in ComparatorUtils.", "class_members": {"variables": [{"name": "comparator1", "type": "Comparator<Integer>"}, {"name": "comparator2", "type": "Comparator<Integer>"}, {"name": "nullComparator", "type": "Comparator<Integer>"}, {"name": "chainedComparator", "type": "Comparator<Integer>"}]}, "fixtures": [], "test_cases": [{"name": "testChainedComparator_WithValidComparators", "primary_tested": ["ComparatorUtils.chainedComparator(Comparator,Comparator)"], "external_dependencies": {"modules": ["Comparator", "ComparatorUtils", "ComparatorChain"], "class_members": [{"name": "comparator1", "type": "variable"}, {"name": "comparator2", "type": "variable"}, {"name": "chainedComparator", "type": "variable"}]}, "category": "unit", "description": "Tests the creation of a chained comparator with valid comparators."}, {"name": "testChainedComparator_WithNullComparator", "primary_tested": ["ComparatorUtils.chainedComparator(Comparator,Comparator)"], "external_dependencies": {"modules": ["Comparator", "ComparatorUtils"], "class_members": [{"name": "comparator1", "type": "variable"}, {"name": "nullComparator", "type": "variable"}]}, "category": "unit", "description": "Tests the behavior of the chained comparator method when a null comparator is provided, expecting a NullPointerException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/MultiMapUtils_getValuesAsSetTest.java", "testclass_name": "MultiMapUtils_getValuesAsSetTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.Set;", "import org.apache.commons.collections4.multimap.ArrayListValuedHashMap;", "import org.apache.commons.collections4.multimap.HashSetValuedHashMap;", "import org.junit.jupiter.api.Test;"], "name": "MultiMapUtils_getValuesAsSetTest", "description": "Unit tests for the MultiMapUtils.getValuesAsSet method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testGetValuesAsSet_NullMap", "primary_tested": ["MultiMapUtils.getValuesAsSet(MultiValuedMap<String,String>,String)"], "external_dependencies": {"modules": ["MultiValuedMap", "MultiMapUtils", "Set"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of MultiMapUtils.getValuesAsSet when the map is null."}, {"name": "testGetValuesAsSet_NonSetCollection", "primary_tested": ["MultiMapUtils.getValuesAsSet(MultiValuedMap<String,String>,String)"], "associated_methods": ["ArrayListValuedHashMap.put(String,String)", "ArrayListValuedHashMap.get(String)"], "external_dependencies": {"modules": ["MultiValuedMap", "MultiMapUtils", "ArrayListValuedHashMap", "Set", "HashSet"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of MultiMapUtils.getValuesAsSet when the map contains a non-set collection."}, {"name": "testGetValuesAsSet_SetCollection", "primary_tested": ["MultiMapUtils.getValuesAsSet(MultiValuedMap<String,String>,String)"], "associated_methods": ["HashSetValuedHashMap.put(String,String)", "HashSetValuedHashMap.get(String)"], "external_dependencies": {"modules": ["MultiValuedMap", "MultiMapUtils", "HashSetValuedHashMap", "Set"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of MultiMapUtils.getValuesAsSet when the map contains a set collection."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/IteratorUtils_findTest.java", "testclass_name": "IteratorUtils_findTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Iterator;", "import java.util.function.Predicate;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "IteratorUtils_findTest", "description": "Unit tests for the find method in IteratorUtils class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testFind_ElementFound", "primary_tested": ["IteratorUtils.find(Iterator<Integer>,Predicate<Integer>)"], "external_dependencies": {"modules": ["Arrays", "Iterator", "Predicate", "IteratorUtils"], "class_members": []}, "category": "unit", "description": "Tests the find method when the element is found in the iterator."}, {"name": "testFind_ElementNotFound", "primary_tested": ["IteratorUtils.find(Iterator<Integer>,Predicate<Integer>)"], "external_dependencies": {"modules": ["Arrays", "Iterator", "Predicate", "IteratorUtils"], "class_members": []}, "category": "unit", "description": "Tests the find method when the element is not found in the iterator."}, {"name": "testFind_NullIterator", "primary_tested": ["IteratorUtils.find(Iterator<Integer>,Predicate<Integer>)"], "external_dependencies": {"modules": ["Predicate", "IteratorUtils"], "class_members": []}, "category": "unit", "description": "Tests the find method when the iterator is null."}, {"name": "testFind_NullPredicate", "primary_tested": ["IteratorUtils.find(Iterator<Integer>,Predicate<Integer>)"], "external_dependencies": {"modules": ["Arrays", "Iterator", "IteratorUtils"], "class_members": []}, "category": "unit", "description": "Tests the find method when the predicate is null, expecting a NullPointerException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/SynchronizedQueue_offerTest.java", "testclass_name": "SynchronizedQueue_offerTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.mockito.Mockito.mock;", "import static org.mockito.Mockito.when;", "import java.util.Queue;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SynchronizedQueue_offerTest", "description": "Unit tests for the offer method of SynchronizedQueue.", "class_members": {"variables": [{"name": "synchronizedQueue", "type": "SynchronizedQueue<String>"}, {"name": "mockQueue", "type": "Queue<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testOffer", "primary_tested": ["SynchronizedQueue.offer(String)"], "associated_methods": ["Queue.offer(String)"], "external_dependencies": {"modules": ["SynchronizedQueue", "Queue", "Mockito"], "class_members": [{"name": "synchronizedQueue", "type": "variable"}, {"name": "mockQueue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the offer method of SynchronizedQueue, ensuring it correctly delegates to the underlying Queue and returns the expected result."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/IteratorUtils_matchesAllTest.java", "testclass_name": "IteratorUtils_matchesAllTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Iterator;", "import java.util.function.Predicate;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "IteratorUtils_matchesAllTest", "description": "Unit tests for the IteratorUtils.matchesAll method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testMatchesAll_AllElementsMatch", "primary_tested": ["IteratorUtils.matchesAll(Iterator<Integer>,Predicate<Integer>)"], "external_dependencies": {"modules": ["IteratorUtils", "Arrays", "Predicate"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that IteratorUtils.matchesAll returns true when all elements in the iterator match the predicate."}, {"name": "testMatchesAll_NotAllElementsMatch", "primary_tested": ["IteratorUtils.matchesAll(Iterator<Integer>,Predicate<Integer>)"], "external_dependencies": {"modules": ["IteratorUtils", "Arrays", "Predicate"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that IteratorUtils.matchesAll returns false when not all elements in the iterator match the predicate."}, {"name": "testMatchesAll_NullIterator", "primary_tested": ["IteratorUtils.matchesAll(Iterator<Integer>,Predicate<Integer>)"], "external_dependencies": {"modules": ["IteratorUtils", "Predicate"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that IteratorUtils.matchesAll returns true when the iterator is null."}, {"name": "testMatchesAll_NullPredicate", "primary_tested": ["IteratorUtils.matchesAll(Iterator<Integer>,Predicate<Integer>)"], "external_dependencies": {"modules": ["IteratorUtils", "Arrays"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that IteratorUtils.matchesAll throws a NullPointerException when the predicate is null."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/IteratorUtils_forEachTest.java", "testclass_name": "IteratorUtils_forEachTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.Iterator;", "import java.util.NoSuchElementException;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;"], "name": "IteratorUtils_forEachTest", "description": "Unit tests for the IteratorUtils.forEach method.", "class_members": {"variables": [{"name": "iterator", "type": "Iterator<String>"}, {"name": "closure", "type": "Closure<String>"}]}, "test_cases": [{"name": "testForEachWithNonNullClosureAndNonNullIterator", "primary_tested": ["IteratorUtils.forEach(Iterator<String>,Closure<String>)"], "associated_methods": ["Iterator.hasNext()", "Iterator.next()", "Closure.accept(String)"], "external_dependencies": {"modules": ["Iterator", "Closure", "IteratorUtils"], "class_members": [{"name": "iterator", "type": "variable"}, {"name": "closure", "type": "variable"}]}, "category": "unit", "description": "Tests the forEach method with a non-null closure and a non-null iterator."}, {"name": "testForEachWithNonNullClosureAndNullIterator", "primary_tested": ["IteratorUtils.forEach(Iterator<String>,Closure<String>)"], "external_dependencies": {"modules": ["Closure", "IteratorUtils"], "class_members": [{"name": "closure", "type": "variable"}]}, "category": "unit", "description": "Tests the forEach method with a non-null closure and a null iterator."}, {"name": "testForEachWithNullClosure", "primary_tested": ["IteratorUtils.forEach(Iterator<String>,Closure<String>)"], "external_dependencies": {"modules": ["Iterator", "IteratorUtils"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "description": "Tests the forEach method with a null closure."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/ListUtils_indexOfTest.java", "testclass_name": "ListUtils_indexOfTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.List;", "import java.util.function.Predicate;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "ListUtils_indexOfTest", "description": "Unit tests for the ListUtils.indexOf method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testIndexOf_Found", "primary_tested": ["ListUtils.indexOf(List<String>,Predicate<String>)"], "external_dependencies": {"modules": ["ListUtils", "Arrays", "Predicate", "CollectionUtils"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the ListUtils.indexOf method to find the index of an element that matches a predicate."}, {"name": "testIndexOf_NotFound", "primary_tested": ["ListUtils.indexOf(List<String>,Predicate<String>)"], "external_dependencies": {"modules": ["ListUtils", "Arrays", "Predicate", "CollectionUtils"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the ListUtils.indexOf method when no element matches the predicate."}, {"name": "testIndexOf_NullList", "primary_tested": ["ListUtils.indexOf(List<String>,Predicate<String>)"], "external_dependencies": {"modules": ["ListUtils", "Predicate", "CollectionUtils"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the ListUtils.indexOf method when the list is null."}, {"name": "testIndexOf_NullPredicate", "primary_tested": ["ListUtils.indexOf(List<String>,Predicate<String>)"], "external_dependencies": {"modules": ["ListUtils", "Arrays", "CollectionUtils"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the ListUtils.indexOf method when the predicate is null."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/SetUtils_isEqualSetTest.java", "testclass_name": "SetUtils_isEqualSetTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.Collections;", "import java.util.HashSet;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "SetUtils_isEqualSetTest", "description": "Unit tests for the SetUtils.isEqualSet method, which checks if two sets are equal.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testIsEqualSet_SameReference", "primary_tested": ["SetUtils.isEqualSet(Collection,Collection)"], "external_dependencies": {"modules": ["SetUtils", "HashSet", "Arrays"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the isEqualSet method with the same reference for both sets."}, {"name": "testIsEqualSet_NullAndDifferentSizes", "primary_tested": ["SetUtils.isEqualSet(Collection,Collection)"], "external_dependencies": {"modules": ["SetUtils", "HashSet", "Arrays"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the isEqualSet method with one set being null and with sets of different sizes."}, {"name": "testIsEqualSet_EqualContents", "primary_tested": ["SetUtils.isEqualSet(Collection,Collection)"], "external_dependencies": {"modules": ["SetUtils", "HashSet", "Arrays"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the isEqualSet method with sets having the same contents but in different orders."}, {"name": "testIsEqualSet_DifferentContents", "primary_tested": ["SetUtils.isEqualSet(Collection,Collection)"], "external_dependencies": {"modules": ["SetUtils", "HashSet", "Arrays"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the isEqualSet method with sets having different contents."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/CollectionBag_removeAllTest.java", "testclass_name": "CollectionBag_removeAllTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import org.apache.commons.collections4.Bag;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;", "import java.util.Arrays;", "import java.util.Collection;"], "name": "CollectionBag_removeAllTest", "description": "Unit tests for the removeAll method in CollectionBag.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testRemoveAll_NonEmptyCollection", "primary_tested": ["CollectionBag.removeAll(Collection)"], "associated_methods": ["Bag.remove(Object,int)", "Bag.getCount(Object)"], "external_dependencies": {"modules": ["Bag", "CollectionBag", "Arrays"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the removeAll method with a non-empty collection."}, {"name": "testRemoveAll_NullCollection", "primary_tested": ["CollectionBag.removeAll(Collection)"], "associated_methods": ["Bag.removeAll(Collection)"], "external_dependencies": {"modules": ["Bag", "CollectionBag"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the removeAll method with a null collection."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/ArrayStack_popTest.java", "testclass_name": "ArrayStack_popTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.EmptyStackException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ArrayStack_popTest", "description": "Unit tests for the pop functionality of the ArrayStack class.", "class_members": {"variables": [{"name": "stack", "type": "ArrayStack<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPopWithNonEmptyStack", "primary_tested": ["ArrayStack.pop()"], "associated_methods": ["ArrayStack.push(String)"], "external_dependencies": {"modules": ["ArrayStack"], "class_members": [{"name": "stack", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the pop functionality of the ArrayStack with a non-empty stack."}, {"name": "testPopWithEmptyStack", "primary_tested": ["ArrayStack.pop()"], "external_dependencies": {"modules": ["ArrayStack", "EmptyStackException"], "class_members": [{"name": "stack", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the pop functionality of the ArrayStack with an empty stack, expecting an EmptyStackException."}, {"name": "testPopWithSingleItemStack", "primary_tested": ["ArrayStack.pop()"], "associated_methods": ["ArrayStack.push(String)"], "external_dependencies": {"modules": ["ArrayStack", "EmptyStackException"], "class_members": [{"name": "stack", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the pop functionality of the ArrayStack with a stack containing a single item."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/ListUtils_removeAllTest.java", "testclass_name": "ListUtils_removeAllTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;"], "name": "ListUtils_removeAllTest", "description": "Unit tests for the removeAll method in ListUtils.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testRemoveAll_NormalCase", "primary_tested": ["ListUtils.removeAll(List<Integer>,List<Integer>)"], "external_dependencies": {"modules": ["ListUtils", "Arrays", "Collections"]}, "category": "unit", "description": "Tests the removeAll method with a normal case where elements are removed from the list."}, {"name": "testRemoveAll_NoElementsToRemove", "primary_tested": ["ListUtils.removeAll(List<Integer>,List<Integer>)"], "external_dependencies": {"modules": ["ListUtils", "Arrays", "Collections"]}, "category": "unit", "description": "Tests the removeAll method when there are no elements to remove from the list."}, {"name": "testRemoveAll_AllElementsToRemove", "primary_tested": ["ListUtils.removeAll(List<Integer>,List<Integer>)"], "external_dependencies": {"modules": ["ListUtils", "Arrays", "Collections"]}, "category": "unit", "description": "Tests the removeAll method when all elements are to be removed from the list."}, {"name": "testRemoveAll_NullCollection", "primary_tested": ["ListUtils.removeAll(List<Integer>,List<Integer>)"], "external_dependencies": {"modules": ["ListUtils", "Arrays"]}, "category": "unit", "description": "Tests the removeAll method when the collection is null, expecting a NullPointerException."}, {"name": "testRemoveAll_NullRemove", "primary_tested": ["ListUtils.removeAll(List<Integer>,List<Integer>)"], "external_dependencies": {"modules": ["ListUtils", "Arrays"]}, "category": "unit", "description": "Tests the removeAll method when the remove list is null, expecting a NullPointerException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/IteratorUtils_indexOfTest.java", "testclass_name": "IteratorUtils_indexOfTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Iterator;", "import java.util.function.Predicate;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;"], "name": "IteratorUtils_indexOfTest", "description": "Unit tests for the IteratorUtils.indexOf method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testIndexOf_ElementFound", "primary_tested": ["IteratorUtils.indexOf(Iterator<Integer>,Predicate<Integer>)"], "external_dependencies": {"modules": ["Arrays", "Iterator", "Predicate", "IteratorUtils", "CollectionUtils"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the IteratorUtils.indexOf method when the element is found in the iterator."}, {"name": "testIndexOf_ElementNotFound", "primary_tested": ["IteratorUtils.indexOf(Iterator<Integer>,Predicate<Integer>)"], "external_dependencies": {"modules": ["Arrays", "Iterator", "Predicate", "IteratorUtils", "CollectionUtils"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the IteratorUtils.indexOf method when the element is not found in the iterator."}, {"name": "testIndexOf_NullPredicate", "primary_tested": ["IteratorUtils.indexOf(Iterator<Integer>,Predicate<Integer>)"], "external_dependencies": {"modules": ["Arrays", "Iterator", "Predicate", "IteratorUtils"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the IteratorUtils.indexOf method when the predicate is null, expecting a NullPointerException."}, {"name": "testIndexOf_NullIterator", "primary_tested": ["IteratorUtils.indexOf(Iterator<Integer>,Predicate<Integer>)"], "external_dependencies": {"modules": ["Predicate", "IteratorUtils", "CollectionUtils"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the IteratorUtils.indexOf method when the iterator is null."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/CollectionSortedBag_removeAllTest.java", "testclass_name": "CollectionSortedBag_removeAllTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import org.apache.commons.collections4.SortedBag;", "import org.junit.jupiter.api.Test;", "import org.mockito.Mockito;", "import java.util.Arrays;", "import java.util.Collection;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.mockito.Mockito.when;"], "name": "CollectionSortedBag_removeAllTest", "description": "Unit tests for the removeAll method in CollectionSortedBag.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testRemoveAll_NonEmptyCollection", "primary_tested": ["CollectionSortedBag.removeAll(Collection)"], "associated_methods": ["SortedBag.remove(Object,int)", "SortedBag.getCount(Object)"], "external_dependencies": {"modules": ["SortedBag", "CollectionSortedBag", "Arrays", "Mockito"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the removeAll method with a non-empty collection."}, {"name": "testRemoveAll_NullCollection", "primary_tested": ["CollectionSortedBag.removeAll(Collection)"], "associated_methods": ["SortedBag.removeAll(Collection)"], "external_dependencies": {"modules": ["SortedBag", "CollectionSortedBag", "Mockito"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the removeAll method with a null collection."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/MultiMapUtils_getValuesAsBagTest.java", "testclass_name": "MultiMapUtils_getValuesAsBagTest", "dependencies": ["package org.apache.commons.collections4;", "import org.apache.commons.collections4.bag.HashBag;", "import org.apache.commons.collections4.multimap.ArrayListValuedHashMap;", "import org.junit.jupiter.api.Test;", "import java.util.Collection;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;"], "name": "MultiMapUtils_getValuesAsBagTest", "description": "Unit tests for the MultiMapUtils.getValuesAsBag method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testGetValuesAsBag_NullMap", "primary_tested": ["MultiMapUtils.getValuesAsBag(MultiValuedMap<String,String>,String)"], "external_dependencies": {"modules": ["MultiValuedMap", "MultiMapUtils", "Bag"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of MultiMapUtils.getValuesAsBag when the input map is null."}, {"name": "testGetValuesAsBag_NonBagCollection", "primary_tested": ["MultiMapUtils.getValuesAsBag(MultiValuedMap<String,String>,String)"], "associated_methods": ["ArrayListValuedHashMap.put(String,String)", "Bag.size()", "Bag.getCount(String)"], "external_dependencies": {"modules": ["MultiValuedMap", "MultiMapUtils", "Bag", "ArrayListValuedHashMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of MultiMapUtils.getValuesAsBag when the input map contains non-bag collections."}, {"name": "testGetValuesAsBag_BagCollection", "primary_tested": ["MultiMapUtils.getValuesAsBag(MultiValuedMap<String,String>,String)"], "associated_methods": ["ArrayListValuedHashMap.putAll(String,Bag<String>)", "Bag.size()", "Bag.getCount(String)"], "external_dependencies": {"modules": ["MultiValuedMap", "MultiMapUtils", "Bag", "ArrayListValuedHashMap", "HashBag"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of MultiMapUtils.getValuesAsBag when the input map contains bag collections."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/CollectionBag_addAllTest.java", "testclass_name": "CollectionBag_addAllTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import org.apache.commons.collections4.Bag;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;", "import java.util.Arrays;", "import java.util.Collection;"], "name": "CollectionBag_addAllTest", "description": "Unit tests for the addAll method of the CollectionBag class.", "class_members": {"variables": [{"name": "mockBag", "type": "Bag<String>"}, {"name": "collectionBag", "type": "CollectionBag<String>"}]}, "fixtures": [], "test_cases": [{"name": "testAddAll", "primary_tested": ["CollectionBag.addAll(Collection<String>)"], "associated_methods": ["Bag.add(String,int)"], "external_dependencies": {"modules": ["Bag", "CollectionBag", "Arrays", "Collection"], "class_members": [{"name": "mockBag", "type": "variable"}, {"name": "collectionBag", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the addAll functionality of the CollectionBag, verifying that elements are added correctly and the result is as expected."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/CollectionSortedBag_addAllTest.java", "testclass_name": "CollectionSortedBag_addAllTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Collections;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "CollectionSortedBag_addAllTest", "description": "Tests for the addAll method of CollectionSortedBag.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testAddAll_EmptyCollection", "primary_tested": ["CollectionSortedBag.addAll(Collection)"], "external_dependencies": {"modules": ["CollectionSortedBag", "TreeBag", "Collections"]}, "category": "unit", "description": "Tests the addAll method with an empty collection."}, {"name": "testAddAll_NonEmptyCollection", "primary_tested": ["CollectionSortedBag.addAll(Collection)"], "external_dependencies": {"modules": ["CollectionSortedBag", "TreeBag", "Arrays"]}, "category": "unit", "description": "Tests the addAll method with a non-empty collection."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/CollectionSortedBag_addTest.java", "testclass_name": "CollectionSortedBag_addTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import org.apache.commons.collections4.SortedBag;", "import org.junit.jupiter.api.Test;", "import static org.mockito.Mockito.*;"], "name": "CollectionSortedBag_addTest", "description": "Unit test for the add method in CollectionSortedBag.", "class_members": {"variables": [{"name": "mockBag", "type": "SortedBag<String>"}, {"name": "bag", "type": "CollectionSortedBag<String>"}]}, "fixtures": [], "test_cases": [{"name": "testAdd", "primary_tested": ["CollectionSortedBag.add(String,int)"], "associated_methods": ["SortedBag.add(String,int)"], "external_dependencies": {"modules": ["SortedBag", "CollectionSortedBag"], "class_members": [{"name": "mockBag", "type": "variable"}, {"name": "bag", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the add functionality of the CollectionSortedBag, verifying that the add method delegates to the underlying SortedBag."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/TransformedBag_transformedBagTest.java", "testclass_name": "TransformedBag_transformedBagTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import org.apache.commons.collections4.Bag;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;"], "name": "TransformedBag_transformedBagTest", "description": "Unit tests for the TransformedBag.transformedBag method.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testTransformedBagWithNonEmptyBag", "primary_tested": ["TransformedBag.transformedBag(Bag<String>,Transformer<String,String>)"], "associated_methods": ["Bag.isEmpty()", "Bag.toArray()", "Transformer.apply(String)"], "external_dependencies": {"modules": ["Bag", "Transformer", "TransformedBag"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the TransformedBag.transformedBag method with a non-empty Bag, verifying that the transformer is applied to each element and the resulting Bag is not null."}, {"name": "testTransformedBagWithEmptyBag", "primary_tested": ["TransformedBag.transformedBag(Bag<String>,Transformer<String,String>)"], "associated_methods": ["Bag.isEmpty()"], "external_dependencies": {"modules": ["Bag", "Transformer", "TransformedBag"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the TransformedBag.transformedBag method with an empty Bag, verifying that no transformation occurs and the resulting Bag is not null."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/ComparatorUtils_minTest.java", "testclass_name": "ComparatorUtils_minTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.Comparator;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "ComparatorUtils_minTest", "description": "Unit tests for the ComparatorUtils.min method with different comparators.", "class_members": {"variables": [{"name": "o1", "type": "Integer"}, {"name": "o2", "type": "Integer"}, {"name": "comparator", "type": "Comparator<Integer>"}]}, "test_cases": [{"name": "testMinWithDefaultComparator", "primary_tested": ["ComparatorUtils.min(Integer,Integer,Comparator<Integer>)"], "external_dependencies": {"modules": ["ComparatorUtils", "Comparator"], "class_members": [{"name": "o1", "type": "variable"}, {"name": "o2", "type": "variable"}, {"name": "comparator", "type": "variable"}]}, "category": "unit", "description": "Tests the min method of ComparatorUtils with a null comparator, expecting the first object to be returned."}, {"name": "testMinWithCustomComparator", "primary_tested": ["ComparatorUtils.min(Integer,Integer,Comparator<Integer>)"], "external_dependencies": {"modules": ["ComparatorUtils", "Comparator"], "class_members": [{"name": "o1", "type": "variable"}, {"name": "o2", "type": "variable"}, {"name": "comparator", "type": "variable"}]}, "category": "unit", "description": "Tests the min method of ComparatorUtils with a natural order comparator, expecting the first object to be returned."}, {"name": "testMinWithReversedComparator", "primary_tested": ["ComparatorUtils.min(Integer,Integer,Comparator<Integer>)"], "external_dependencies": {"modules": ["ComparatorUtils", "Comparator"], "class_members": [{"name": "o1", "type": "variable"}, {"name": "o2", "type": "variable"}, {"name": "comparator", "type": "variable"}]}, "category": "unit", "description": "Tests the min method of ComparatorUtils with a reversed order comparator, expecting the second object to be returned."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/SetUtils_unmodifiableSetTest.java", "testclass_name": "SetUtils_unmodifiableSetTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.Set;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "SetUtils_unmodifiableSetTest", "description": "Unit tests for the unmodifiableSet method in SetUtils.", "fixtures": ["setUp"], "test_cases": [{"name": "testUnmodifiableSetWithNull", "primary_tested": ["SetUtils.unmodifiableSet(Object[])"], "external_dependencies": {"modules": ["SetUtils"]}, "category": "unit", "fixtures_used": [], "description": "Tests the unmodifiableSet method with a null array, expecting a null result."}, {"name": "testUnmodifiableSetWithEmptyArray", "primary_tested": ["SetUtils.unmodifiableSet()"], "external_dependencies": {"modules": ["SetUtils"]}, "category": "unit", "fixtures_used": [], "description": "Tests the unmodifiableSet method with an empty array, expecting an empty set."}, {"name": "testUnmodifiableSetWithNonEmptyArray", "primary_tested": ["SetUtils.unmodifiableSet(String[])"], "associated_methods": ["Set.size()", "Set.contains(Object)"], "external_dependencies": {"modules": ["SetUtils", "Set"]}, "category": "unit", "fixtures_used": [], "description": "Tests the unmodifiableSet method with a non-empty array, expecting a set with the correct elements."}, {"name": "testUnmodifiableSetWithDuplicates", "primary_tested": ["SetUtils.unmodifiableSet(String[])"], "associated_methods": ["Set.size()", "Set.contains(Object)"], "external_dependencies": {"modules": ["SetUtils", "Set"]}, "category": "unit", "fixtures_used": [], "description": "Tests the unmodifiableSet method with an array containing duplicates, expecting a set with unique elements."}, {"name": "testUnmodifiableSetWithMixedTypes", "primary_tested": ["SetUtils.unmodifiableSet(Object[])"], "associated_methods": ["Set.size()", "Set.contains(Object)"], "external_dependencies": {"modules": ["SetUtils", "Set"]}, "category": "unit", "fixtures_used": [], "description": "Tests the unmodifiableSet method with an array containing mixed types, expecting a set with the correct elements."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/CollectionBag_addTest.java", "testclass_name": "CollectionBag_addTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import org.apache.commons.collections4.Bag;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;"], "name": "CollectionBag_addTest", "description": "Unit tests for the add method of CollectionBag.", "class_members": {"variables": [{"name": "mockBag", "type": "Bag<String>"}, {"name": "collectionBag", "type": "CollectionBag<String>"}, {"name": "object", "type": "String"}, {"name": "count", "type": "int"}]}, "test_cases": [{"name": "testAdd", "primary_tested": ["CollectionBag.add(String,int)"], "associated_methods": ["Bag.add(String,int)"], "external_dependencies": {"modules": ["Bag", "CollectionBag", "Mockito"], "class_members": [{"name": "mockBag", "type": "variable"}, {"name": "collectionBag", "type": "variable"}, {"name": "object", "type": "variable"}, {"name": "count", "type": "variable"}]}, "category": "unit", "description": "Tests the add functionality of the CollectionBag, verifying that the object is added with the specified count and that the underlying Bag's add method is called."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/IteratorUtils_getTest.java", "testclass_name": "IteratorUtils_getTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.ArrayList;", "import java.util.Iterator;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "IteratorUtils_getTest", "description": "Unit tests for the IteratorUtils.get method, which retrieves elements from an iterator at specified indices.", "class_members": {"variables": [{"name": "list", "type": "List<String>"}, {"name": "iterator", "type": "Iterator<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetElementAtIndex", "primary_tested": ["IteratorUtils.get(Iterator<String>,int)"], "external_dependencies": {"modules": ["IteratorUtils", "List", "Iterator"], "class_members": [{"name": "iterator", "type": "variable"}, {"name": "list", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests retrieving elements from an iterator at valid indices."}, {"name": "testGetElementWithNegativeIndex", "primary_tested": ["IteratorUtils.get(Iterator<String>,int)"], "external_dependencies": {"modules": ["IteratorUtils", "Iterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests retrieving an element from an iterator with a negative index, expecting an IndexOutOfBoundsException."}, {"name": "testGetElementWithIndexOutOfBounds", "primary_tested": ["IteratorUtils.get(Iterator<String>,int)"], "external_dependencies": {"modules": ["IteratorUtils", "Iterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests retrieving an element from an iterator with an index out of bounds, expecting an IndexOutOfBoundsException."}, {"name": "testGetElementFromEmptyIterator", "primary_tested": ["IteratorUtils.get(Iterator<String>,int)"], "external_dependencies": {"modules": ["IteratorUtils", "List", "Iterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "description": "Tests retrieving an element from an empty iterator, expecting an IndexOutOfBoundsException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/ListUtils_isEqualListTest.java", "testclass_name": "ListUtils_isEqualListTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "ListUtils_isEqualListTest", "description": "Unit tests for the isEqualList method in ListUtils class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testIsEqualList_SameReference", "primary_tested": ["ListUtils.isEqualList(List,List)"], "external_dependencies": {"modules": ["ListUtils", "Arrays"]}, "category": "unit", "description": "Tests isEqualList method with the same list reference."}, {"name": "testIsEqualList_BothNull", "primary_tested": ["ListUtils.isEqualList(List,List)"], "external_dependencies": {"modules": ["ListUtils"]}, "category": "unit", "description": "Tests isEqualList method with both lists being null."}, {"name": "testIsEqualList_OneNull", "primary_tested": ["ListUtils.isEqualList(List,List)"], "external_dependencies": {"modules": ["ListUtils", "Arrays"]}, "category": "unit", "description": "Tests isEqualList method with one list being null."}, {"name": "testIsEqualList_DifferentSize", "primary_tested": ["ListUtils.isEqualList(List,List)"], "external_dependencies": {"modules": ["ListUtils", "Arrays"]}, "category": "unit", "description": "Tests isEqualList method with lists of different sizes."}, {"name": "testIsEqualList_SameElements", "primary_tested": ["ListUtils.isEqualList(List,List)"], "external_dependencies": {"modules": ["ListUtils", "Arrays"]}, "category": "unit", "description": "Tests isEqualList method with lists containing the same elements."}, {"name": "testIsEqualList_DifferentElements", "primary_tested": ["ListUtils.isEqualList(List,List)"], "external_dependencies": {"modules": ["ListUtils", "Arrays"]}, "category": "unit", "description": "Tests isEqualList method with lists containing different elements."}, {"name": "testIsEqualList_EmptyLists", "primary_tested": ["ListUtils.isEqualList(List,List)"], "external_dependencies": {"modules": ["ListUtils", "Collections"]}, "category": "unit", "description": "Tests isEqualList method with both lists being empty."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/TreeBag_addTest.java", "testclass_name": "TreeBag_addTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import org.junit.jupiter.api.Test;", "import java.util.Comparator;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "TreeBag_addTest", "description": "Unit tests for the add method of the TreeBag class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testAddWithComparableObject", "primary_tested": ["TreeBag.add(String)"], "external_dependencies": {"modules": ["TreeBag", "String"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the add method of TreeBag with a comparable object (String)."}, {"name": "testAddWithNonComparableObjectAndNoComparator", "primary_tested": ["TreeBag.add(Object)"], "external_dependencies": {"modules": ["TreeBag", "Object"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the add method of TreeBag with a non-comparable object and no custom comparator, expecting an IllegalArgumentException."}, {"name": "testAddWithNonComparableObjectAndCustomComparator", "primary_tested": ["TreeBag.add(Object)"], "external_dependencies": {"modules": ["TreeBag", "Object", "Comparator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the add method of TreeBag with a non-comparable object and a custom comparator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/UnmodifiableCollection_unmodifiableCollectionTest.java", "testclass_name": "UnmodifiableCollection_unmodifiableCollectionTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import org.apache.commons.collections4.Unmodifiable;", "import org.junit.jupiter.api.Test;", "import java.util.ArrayList;", "import java.util.Collection;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "UnmodifiableCollection_unmodifiableCollectionTest", "description": "Tests for the UnmodifiableCollection class, specifically the unmodifiableCollection method.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testUnmodifiableCollectionWithUnmodifiableCollection", "primary_tested": ["UnmodifiableCollection.unmodifiableCollection(Collection)"], "external_dependencies": {"modules": ["ArrayList", "Collection", "UnmodifiableCollection"]}, "category": "unit", "description": "Tests that wrapping an unmodifiable collection with unmodifiableCollection returns the same instance."}, {"name": "testUnmodifiableCollectionWithModifiableCollection", "primary_tested": ["UnmodifiableCollection.unmodifiableCollection(Collection)"], "external_dependencies": {"modules": ["ArrayList", "Collection", "UnmodifiableCollection", "Unmodifiable"]}, "category": "unit", "description": "Tests that wrapping a modifiable collection with unmodifiableCollection returns an instance of Unmodifiable."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/CollectionBag_retainAllTest.java", "testclass_name": "CollectionBag_retainAllTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import org.apache.commons.collections4.Bag;", "import org.junit.jupiter.api.Test;", "import org.mockito.Mockito;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.Iterator;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.mockito.Mockito.*;"], "name": "CollectionBag_retainAllTest", "description": "Unit tests for the retainAll method in CollectionBag.", "class_members": {"variables": [{"name": "mockBag", "type": "Bag<String>"}, {"name": "collectionBag", "type": "CollectionBag<String>"}, {"name": "coll", "type": "Collection<String>"}, {"name": "mockIterator", "type": "Iterator<String>"}]}, "fixtures": [], "test_cases": [{"name": "testRetainAll_NonEmptyCollection", "primary_tested": ["CollectionBag.retainAll(Collection)"], "associated_methods": ["Bag.iterator()", "Iterator.hasNext()", "Iterator.next()", "Iterator.remove()"], "external_dependencies": {"modules": ["Bag", "CollectionBag", "Collection", "Iterator", "Mockito", "Arrays"], "class_members": [{"name": "mockBag", "type": "variable"}, {"name": "collectionBag", "type": "variable"}, {"name": "coll", "type": "variable"}, {"name": "mockIterator", "type": "variable"}]}, "category": "unit", "description": "Tests the retainAll method with a non-empty collection."}, {"name": "testRetainAll_NullCollection", "primary_tested": ["CollectionBag.retainAll(Collection)"], "associated_methods": ["Bag.retainAll(Collection)"], "external_dependencies": {"modules": ["Bag", "CollectionBag", "Mockito"], "class_members": [{"name": "mockBag", "type": "variable"}, {"name": "collectionBag", "type": "variable"}]}, "category": "unit", "description": "Tests the retainAll method with a null collection."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_elementTest.java", "testclass_name": "CircularFifoQueue_elementTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CircularFifoQueue_elementTest", "description": "Unit tests for the element method of CircularFifoQueue.", "class_members": {"variables": [{"name": "queue", "type": "CircularFifoQueue<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testElementWhenQueueIsEmpty", "primary_tested": ["CircularFifoQueue.element()"], "external_dependencies": {"modules": ["CircularFifoQueue", "NoSuchElementException"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior of the element method when the queue is empty, expecting a NoSuchElementException."}, {"name": "testElementWhenQueueHasElements", "primary_tested": ["CircularFifoQueue.element()"], "associated_methods": ["CircularFifoQueue.add(String)"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the element method when the queue has elements, expecting the first element added."}, {"name": "testElementAfterAddingAndRemovingElements", "primary_tested": ["CircularFifoQueue.element()"], "associated_methods": ["CircularFifoQueue.add(String)", "CircularFifoQueue.remove()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the element method after adding and removing elements, expecting the next element in the queue."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_getTest.java", "testclass_name": "CircularFifoQueue_getTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CircularFifoQueue_getTest", "description": "Unit tests for the get method of CircularFifoQueue.", "class_members": {"variables": [{"name": "queue", "type": "CircularFifoQueue<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetValidIndex", "primary_tested": ["CircularFifoQueue.get(int)"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method with valid indices."}, {"name": "testGetInvalidIndex", "primary_tested": ["CircularFifoQueue.get(int)"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method with invalid indices, expecting NoSuchElementException."}, {"name": "testGetAfterRemove", "primary_tested": ["CircularFifoQueue.get(int)"], "associated_methods": ["CircularFifoQueue.remove()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method after elements have been removed."}, {"name": "testGetWithWrapAround", "primary_tested": ["CircularFifoQueue.get(int)"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method when elements wrap around the queue."}, {"name": "testGetEmptyQueue", "primary_tested": ["CircularFifoQueue.get(int)"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method on an empty queue, expecting NoSuchElementException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_iteratorTest.java", "testclass_name": "CircularFifoQueue_iteratorTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.NoSuchElementException;", "import java.util.Iterator;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CircularFifoQueue_iteratorTest", "description": "Unit tests for the iterator functionality of the CircularFifoQueue class.", "class_members": {"variables": [{"name": "queue", "type": "CircularFifoQueue<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testIteratorHasNext", "primary_tested": ["Iterator.hasNext()"], "external_dependencies": {"modules": ["CircularFifoQueue", "Iterator"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method of the iterator for the CircularFifoQueue."}, {"name": "testIteratorNext", "primary_tested": ["Iterator.next()"], "external_dependencies": {"modules": ["CircularFifoQueue", "Iterator", "NoSuchElementException"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method of the iterator for the CircularFifoQueue, including handling of NoSuchElementException."}, {"name": "testIteratorRemove", "primary_tested": ["Iterator.remove()"], "associated_methods": ["CircularFifoQueue.size()", "CircularFifoQueue.peek()"], "external_dependencies": {"modules": ["CircularFifoQueue", "Iterator"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the remove method of the iterator for the CircularFifoQueue, including checking the size and peek of the queue after removal."}, {"name": "testIteratorRemoveWithoutNext", "primary_tested": ["Iterator.remove()"], "external_dependencies": {"modules": ["CircularFifoQueue", "Iterator", "IllegalStateException"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the remove method of the iterator for the CircularFifoQueue without calling next, expecting an IllegalStateException."}, {"name": "testIteratorRemoveTwice", "primary_tested": ["Iterator.remove()"], "external_dependencies": {"modules": ["CircularFifoQueue", "Iterator", "IllegalStateException"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the remove method of the iterator for the CircularFifoQueue when called twice in a row, expecting an IllegalStateException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/PredicatedCollection_addAllTest.java", "testclass_name": "PredicatedCollection_addAllTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import org.apache.commons.collections4.Predicate;", "import org.apache.commons.collections4.functors.NotNullPredicate;", "import org.junit.jupiter.api.Test;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.assertThrows;"], "name": "PredicatedCollection_addAllTest", "description": "Unit tests for the addAll method of PredicatedCollection, ensuring it handles both valid and invalid elements correctly.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testAddAll_ValidElements", "primary_tested": ["PredicatedCollection.addAll(Collection)"], "external_dependencies": {"modules": ["Predicate", "NotNullPredicate", "PredicatedCollection", "ArrayList", "Arrays", "Collection"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the addAll method of PredicatedCollection with valid elements, ensuring it returns true."}, {"name": "testAddAll_InvalidElement", "primary_tested": ["PredicatedCollection.addAll(Collection)"], "external_dependencies": {"modules": ["Predicate", "NotNullPredicate", "PredicatedCollection", "ArrayList", "Arrays", "Collection"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the addAll method of PredicatedCollection with an invalid element, ensuring it throws an IllegalArgumentException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/CollectionSortedBag_retainAllTest.java", "testclass_name": "CollectionSortedBag_retainAllTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import org.apache.commons.collections4.SortedBag;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import org.mockito.Mockito;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.Iterator;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.mockito.Mockito.*;"], "name": "CollectionSortedBag_retainAllTest", "description": "Unit tests for the retainAll method in CollectionSortedBag.", "class_members": {"variables": [{"name": "bag", "type": "CollectionSortedBag<String>"}, {"name": "mockBag", "type": "SortedBag<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRetainAll_NonEmptyCollection", "primary_tested": ["CollectionSortedBag.retainAll(Collection)"], "associated_methods": ["SortedBag.iterator()", "Iterator.hasNext()", "Iterator.next()", "SortedBag.contains(Object)"], "external_dependencies": {"modules": ["CollectionSortedBag", "SortedBag", "Iterator", "Arrays"], "class_members": [{"name": "bag", "type": "variable"}, {"name": "mockBag", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retainAll method with a non-empty collection, ensuring that elements not in the collection are removed."}, {"name": "testRetainAll_NullCollection", "primary_tested": ["CollectionSortedBag.retainAll(Collection)"], "associated_methods": ["SortedBag.retainAll(Collection)"], "external_dependencies": {"modules": ["CollectionSortedBag", "SortedBag"], "class_members": [{"name": "bag", "type": "variable"}, {"name": "mockBag", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retainAll method with a null collection, ensuring that the method returns false and delegates to the underlying SortedBag."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_peekTest.java", "testclass_name": "CircularFifoQueue_peekTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CircularFifoQueue_peekTest", "description": "Unit tests for the peek functionality of the CircularFifoQueue class.", "class_members": {"variables": [{"name": "queue", "type": "CircularFifoQueue<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPeekOnEmptyQueue", "primary_tested": ["CircularFifoQueue.peek()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the peek functionality on an empty queue, expecting a null result."}, {"name": "testPeekOnNonEmptyQueue", "primary_tested": ["CircularFifoQueue.peek()"], "associated_methods": ["CircularFifoQueue.add(String)"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the peek functionality on a non-empty queue, expecting the first added element."}, {"name": "testPeekAfterAddingElements", "primary_tested": ["CircularFifoQueue.peek()"], "associated_methods": ["CircularFifoQueue.add(String)"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the peek functionality after adding elements to the queue, expecting the first added element and then the next after the queue wraps around."}, {"name": "testPeekAfterRemovingElements", "primary_tested": ["CircularFifoQueue.peek()"], "associated_methods": ["CircularFifoQueue.add(String)", "CircularFifoQueue.remove()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the peek functionality after removing elements from the queue, expecting the next element in the queue."}, {"name": "testPeekAfterClearingQueue", "primary_tested": ["CircularFifoQueue.peek()"], "associated_methods": ["CircularFifoQueue.add(String)", "CircularFifoQueue.clear()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the peek functionality after clearing the queue, expecting a null result."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/PredicatedCollection_addTest.java", "testclass_name": "PredicatedCollection_addTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import org.apache.commons.collections4.Predicate;", "import org.apache.commons.collections4.functors.TruePredicate;", "import org.junit.jupiter.api.Test;", "import java.util.ArrayList;", "import java.util.Collection;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "PredicatedCollection_addTest", "description": "Unit tests for the add method of PredicatedCollection, ensuring elements are added based on a predicate.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testAddValidElement", "primary_tested": ["PredicatedCollection.add(String)"], "external_dependencies": {"modules": ["TruePredicate", "ArrayList", "PredicatedCollection", "Collection"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the addition of a valid element to the PredicatedCollection when the predicate allows it."}, {"name": "testAddInvalidElement", "primary_tested": ["PredicatedCollection.add(String)"], "external_dependencies": {"modules": ["ArrayList", "PredicatedCollection", "Collection"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the addition of an invalid element to the PredicatedCollection when the predicate rejects it, expecting an IllegalArgumentException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_clearTest.java", "testclass_name": "CompositeCollection_clearTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.mockito.Mockito.*;", "import java.util.ArrayList;", "import java.util.Collection;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import org.mockito.Mockito;"], "name": "CompositeCollection_clearTest", "description": "Unit tests for the clear functionality of the CompositeCollection class.", "class_members": {"variables": [{"name": "compositeCollection", "type": "CompositeCollection<String>"}, {"name": "mockCollection1", "type": "Collection<String>"}, {"name": "mockCollection2", "type": "Collection<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testClear", "primary_tested": ["CompositeCollection.clear()"], "associated_methods": ["Collection.clear()"], "external_dependencies": {"modules": ["CompositeCollection", "Collection", "Mockito"], "class_members": [{"name": "compositeCollection", "type": "variable"}, {"name": "mockCollection1", "type": "variable"}, {"name": "mockCollection2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clear functionality of the CompositeCollection, ensuring that the clear method is called on all composed collections."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_clearTest.java", "testclass_name": "IndexedCollection_clearTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Collection;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "IndexedCollection_clearTest", "description": "Tests for the clear functionality of the IndexedCollection class.", "class_members": {"variables": [{"name": "indexedCollection", "type": "IndexedCollection<Integer, String>"}, {"name": "originalCollection", "type": "Collection<String>"}], "methods": [{"name": "decorateUniqueCollection", "signature": "IndexedCollection<Integer, String> decorateUniqueCollection(Collection<String> original)"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testClearRemovesAllElementsFromIndex", "primary_tested": ["IndexedCollection.clear()"], "associated_methods": ["IndexedCollection.reindex()", "IndexedCollection.get(Integer)"], "external_dependencies": {"modules": ["IndexedCollection", "Collection", "ArrayList"], "class_members": [{"name": "indexedCollection", "type": "variable"}, {"name": "originalCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the clear method removes all elements from the index of the IndexedCollection."}, {"name": "testClearRemovesAllElementsFromDecoratedCollection", "primary_tested": ["IndexedCollection.clear()"], "associated_methods": ["IndexedCollection.reindex()", "Collection.isEmpty()"], "external_dependencies": {"modules": ["IndexedCollection", "Collection", "ArrayList"], "class_members": [{"name": "indexedCollection", "type": "variable"}, {"name": "originalCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the clear method removes all elements from the decorated collection of the IndexedCollection."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_removeTest.java", "testclass_name": "CircularFifoQueue_removeTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CircularFifoQueue_removeTest", "description": "Unit tests for the remove functionality of the CircularFifoQueue class.", "class_members": {"variables": [{"name": "queue", "type": "CircularFifoQueue<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveWhenQueueIsEmpty", "primary_tested": ["CircularFifoQueue.remove()"], "external_dependencies": {"modules": ["CircularFifoQueue", "NoSuchElementException"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior of the remove method when the queue is empty, expecting a NoSuchElementException."}, {"name": "testRemoveWhenQueueHasOneElement", "primary_tested": ["CircularFifoQueue.remove()"], "associated_methods": ["CircularFifoQueue.add(String)", "CircularFifoQueue.isEmpty()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior of the remove method when the queue has one element, verifying the element is removed and the queue is empty."}, {"name": "testRemoveWhenQueueIsFull", "primary_tested": ["CircularFifoQueue.remove()"], "associated_methods": ["CircularFifoQueue.add(String)", "CircularFifoQueue.isFull()", "CircularFifoQueue.size()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior of the remove method when the queue is full, verifying the element is removed and the queue is no longer full."}, {"name": "testRemoveWhenQueueWrapsAround", "primary_tested": ["CircularFifoQueue.remove()"], "associated_methods": ["CircularFifoQueue.add(String)", "CircularFifoQueue.size()", "CircularFifoQueue.toString()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior of the remove method when the queue wraps around, verifying the correct element is removed and the queue size is updated."}, {"name": "testRemoveMultipleElements", "primary_tested": ["CircularFifoQueue.remove()"], "associated_methods": ["CircularFifoQueue.add(String)", "CircularFifoQueue.size()", "CircularFifoQueue.toString()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior of the remove method when multiple elements are removed, verifying the correct elements are removed and the queue size is updated."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/LazySortedMap_subMapTest.java", "testclass_name": "LazySortedMap_subMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.Factory;", "import org.junit.jupiter.api.Test;", "import java.util.SortedMap;", "import java.util.TreeMap;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNotNull;"], "name": "LazySortedMap_subMapTest", "description": "Unit tests for the subMap functionality of LazySortedMap.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testSubMap", "primary_tested": ["LazySortedMap.subMap(int,int)"], "associated_methods": ["SortedMap.size()", "SortedMap.get(int)"], "external_dependencies": {"modules": ["SortedMap", "TreeMap", "Factory", "LazySortedMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the subMap functionality of the LazySortedMap, ensuring that the subMap is correctly created and contains the expected entries."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/TransformedCollection_transformedCollectionTest.java", "testclass_name": "TransformedCollection_transformedCollectionTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.Collections;", "import java.util.LinkedList;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "TransformedCollection_transformedCollectionTest", "description": "Unit tests for the TransformedCollection class, specifically testing the transformedCollection method with both non-empty and empty collections.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testTransformedCollectionWithNonEmptyCollection", "primary_tested": ["TransformedCollection.transformedCollection(Collection<String>,Transformer<String,String>)"], "associated_methods": ["TransformedCollection.size()", "TransformedCollection.contains(String)"], "external_dependencies": {"modules": ["org.apache.commons.collections4.Transformer", "java.util.Arrays", "java.util.Collection", "java.util.LinkedList", "org.apache.commons.collections4.collection.TransformedCollection"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformedCollection method with a non-empty collection, ensuring the transformed collection contains the expected elements."}, {"name": "testTransformedCollectionWithEmptyCollection", "primary_tested": ["TransformedCollection.transformedCollection(Collection<String>,Transformer<String,String>)"], "associated_methods": ["TransformedCollection.isEmpty()"], "external_dependencies": {"modules": ["org.apache.commons.collections4.Transformer", "java.util.Collections", "java.util.Collection", "org.apache.commons.collections4.collection.TransformedCollection"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformedCollection method with an empty collection, ensuring the transformed collection is also empty."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/UnmodifiableMap_keySetTest.java", "testclass_name": "UnmodifiableMap_keySetTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.set.UnmodifiableSet;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;", "import java.util.Set;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "UnmodifiableMap_keySetTest", "description": "Tests the keySet functionality of the UnmodifiableMap class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testKeySet", "primary_tested": ["UnmodifiableMap.keySet()"], "associated_methods": ["UnmodifiableSet.contains(String)"], "external_dependencies": {"modules": ["UnmodifiableMap", "UnmodifiableSet", "HashMap", "Map", "Set"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests if the keySet of an UnmodifiableMap is an instance of UnmodifiableSet and contains the expected keys."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/UnmodifiableBoundedCollection_unmodifiableBoundedCollectionTest.java", "testclass_name": "UnmodifiableBoundedCollection_unmodifiableBoundedCollectionTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import org.apache.commons.collections4.BoundedCollection;", "import org.apache.commons.collections4.Unmodifiable;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.ArrayList;", "import java.util.Collection;", "import java.util.Iterator;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "UnmodifiableBoundedCollection_unmodifiableBoundedCollectionTest", "description": "Tests for the UnmodifiableBoundedCollection class, focusing on its unmodifiableBoundedCollection method.", "class_members": {"variables": [{"name": "boundedCollection", "type": "BoundedCollection<String>"}], "methods": [], "nested_classes": [{"name": "BoundedCollectionImpl", "description": "Internal implementation of BoundedCollection"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testUnmodifiableBoundedCollectionWithUnmodifiableCollection", "primary_tested": ["UnmodifiableBoundedCollection.unmodifiableBoundedCollection(BoundedCollection)"], "external_dependencies": {"modules": ["UnmodifiableBoundedCollection", "BoundedCollection", "Unmodifiable"], "class_members": [{"name": "boundedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the unmodifiableBoundedCollection method returns an instance of Unmodifiable."}, {"name": "testUnmodifiableBoundedCollectionWithModifiableCollection", "primary_tested": ["UnmodifiableBoundedCollection.unmodifiableBoundedCollection(BoundedCollection)"], "external_dependencies": {"modules": ["UnmodifiableBoundedCollection", "BoundedCollection", "Unmodifiable"], "class_members": [{"name": "boundedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the unmodifiableBoundedCollection method returns a different instance and if it is an instance of Unmodifiable."}, {"name": "testUnmodifiableBoundedCollectionWithNullCollection", "primary_tested": ["UnmodifiableBoundedCollection.unmodifiableBoundedCollection(BoundedCollection)"], "external_dependencies": {"modules": ["UnmodifiableBoundedCollection"]}, "category": "unit", "fixtures_used": [], "description": "Tests if the unmodifiableBoundedCollection method throws a NullPointerException when passed a null collection."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_clearTest.java", "testclass_name": "CircularFifoQueue_clearTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.NoSuchElementException;", "import java.util.Iterator;"], "name": "CircularFifoQueue_clearTest", "description": "Unit tests for the clear functionality of the CircularFifoQueue class.", "class_members": {"variables": [{"name": "queue", "type": "CircularFifoQueue<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testClearEmptyQueue", "primary_tested": ["CircularFifoQueue.clear()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests clearing an empty CircularFifoQueue."}, {"name": "testClearNonEmptyQueue", "primary_tested": ["CircularFifoQueue.clear()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests clearing a non-empty CircularFifoQueue."}, {"name": "testClearAndAdd", "primary_tested": ["CircularFifoQueue.clear()"], "associated_methods": ["CircularFifoQueue.add(String)", "CircularFifoQueue.peek()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests clearing a CircularFifoQueue and then adding an element."}, {"name": "testClearAndIterator", "primary_tested": ["CircularFifoQueue.clear()"], "associated_methods": ["CircularFifoQueue.iterator()", "Iterator.hasNext()", "Iterator.next()"], "external_dependencies": {"modules": ["CircularFifoQueue", "Iterator", "NoSuchElementException"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests clearing a CircularFifoQueue and then using an iterator."}, {"name": "testClearAndRemove", "primary_tested": ["CircularFifoQueue.clear()"], "associated_methods": ["CircularFifoQueue.remove()"], "external_dependencies": {"modules": ["CircularFifoQueue", "NoSuchElementException"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests clearing a CircularFifoQueue and then attempting to remove an element."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/ArrayStack_searchTest.java", "testclass_name": "ArrayStack_searchTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.EmptyStackException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ArrayStack_searchTest", "description": "Unit tests for the search functionality of the ArrayStack class.", "class_members": {"variables": [{"name": "stack", "type": "ArrayStack<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testSearchTopItem", "primary_tested": ["ArrayStack.search(String)"], "associated_methods": ["ArrayStack.push(String)"], "external_dependencies": {"modules": ["ArrayStack"], "class_members": [{"name": "stack", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the search functionality for the top item in the stack."}, {"name": "testSearchMiddleItem", "primary_tested": ["ArrayStack.search(String)"], "associated_methods": ["ArrayStack.push(String)"], "external_dependencies": {"modules": ["ArrayStack"], "class_members": [{"name": "stack", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the search functionality for a middle item in the stack."}, {"name": "testSearchBottomItem", "primary_tested": ["ArrayStack.search(String)"], "associated_methods": ["ArrayStack.push(String)"], "external_dependencies": {"modules": ["ArrayStack"], "class_members": [{"name": "stack", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the search functionality for the bottom item in the stack."}, {"name": "testSearchMissingItem", "primary_tested": ["ArrayStack.search(String)"], "associated_methods": ["ArrayStack.push(String)"], "external_dependencies": {"modules": ["ArrayStack"], "class_members": [{"name": "stack", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the search functionality for a missing item in the stack."}, {"name": "testSearchEmptyStack", "primary_tested": ["ArrayStack.search(String)"], "external_dependencies": {"modules": ["ArrayStack"], "class_members": [{"name": "stack", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the search functionality for an item in an empty stack."}, {"name": "testSearchNullItem", "primary_tested": ["ArrayStack.search(String)"], "associated_methods": ["ArrayStack.push(String)"], "external_dependencies": {"modules": ["ArrayStack"], "class_members": [{"name": "stack", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the search functionality for a null item in the stack."}, {"name": "testSearchNullInEmptyStack", "primary_tested": ["ArrayStack.search(String)"], "external_dependencies": {"modules": ["ArrayStack"], "class_members": [{"name": "stack", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the search functionality for a null item in an empty stack."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_addTest.java", "testclass_name": "CompositeCollection_addTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeCollection_addTest", "description": "Unit tests for the add functionality of the CompositeCollection class.", "class_members": {"variables": [{"name": "c", "type": "CompositeCollection<String>"}, {"name": "one", "type": "Collection<String>"}, {"name": "two", "type": "Collection<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAddWithMutator", "primary_tested": ["CompositeCollection.add(String)"], "associated_methods": ["CompositeCollection.setMutator(CompositeCollection.CollectionMutator<String>)", "CompositeCollection.addComposited(Collection<String>)", "Collection.contains(String)"], "external_dependencies": {"modules": ["CompositeCollection", "Collection", "List"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the add functionality of the CompositeCollection when a mutator is set."}, {"name": "testAddWithoutMutator", "primary_tested": ["CompositeCollection.add(String)"], "external_dependencies": {"modules": ["CompositeCollection"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the add functionality of the CompositeCollection when no mutator is set, expecting an UnsupportedOperationException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/TransformerUtils_ifTransformerTest.java", "testclass_name": "TransformerUtils_ifTransformerTest", "dependencies": ["package org.apache.commons.collections4;", "import org.apache.commons.collections4.functors.ConstantTransformer;", "import org.apache.commons.collections4.functors.EqualPredicate;", "import org.apache.commons.collections4.functors.ExceptionTransformer;", "import org.apache.commons.collections4.functors.FalsePredicate;", "import org.apache.commons.collections4.functors.NOPTransformer;", "import org.apache.commons.collections4.functors.TruePredicate;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "TransformerUtils_ifTransformerTest", "description": "Unit tests for the ifTransformer method in TransformerUtils.", "class_members": {"variables": [{"name": "cObject", "type": "static final Object"}, {"name": "cString", "type": "static final Object"}, {"name": "cInteger", "type": "static final Object"}]}, "fixtures": [], "test_cases": [{"name": "testIfTransformer", "primary_tested": ["TransformerUtils.ifTransformer(Predicate,Transformer,Transformer)"], "associated_methods": ["ConstantTransformer.constantTransformer(Object)", "TruePredicate.truePredicate()", "FalsePredicate.falsePredicate()", "Transformer.transform(Object)"], "external_dependencies": {"modules": ["TruePredicate", "FalsePredicate", "ConstantTransformer", "TransformerUtils"], "class_members": [{"name": "cObject", "type": "variable"}, {"name": "cString", "type": "variable"}, {"name": "cInteger", "type": "variable"}]}, "category": "unit", "description": "Tests the ifTransformer method with TruePredicate and FalsePredicate, ensuring the correct transformer is applied based on the predicate."}, {"name": "testIfTransformerWithNullPredicate", "primary_tested": ["TransformerUtils.ifTransformer(Predicate,Transformer,Transformer)"], "associated_methods": ["ConstantTransformer.constantTransformer(Object)"], "external_dependencies": {"modules": ["ConstantTransformer", "TransformerUtils"], "class_members": [{"name": "cString", "type": "variable"}, {"name": "cInteger", "type": "variable"}]}, "category": "unit", "description": "Tests the ifTransformer method with a null predicate, expecting a NullPointerException."}, {"name": "testIfTransformerWithNullTrueTransformer", "primary_tested": ["TransformerUtils.ifTransformer(Predicate,Transformer,Transformer)"], "associated_methods": ["TruePredicate.truePredicate()", "ConstantTransformer.constantTransformer(Object)"], "external_dependencies": {"modules": ["TruePredicate", "ConstantTransformer", "TransformerUtils"], "class_members": [{"name": "cInteger", "type": "variable"}]}, "category": "unit", "description": "Tests the ifTransformer method with a null true transformer, expecting a NullPointerException."}, {"name": "testIfTransformerWithNullFalseTransformer", "primary_tested": ["TransformerUtils.ifTransformer(Predicate,Transformer,Transformer)"], "associated_methods": ["TruePredicate.truePredicate()", "ConstantTransformer.constantTransformer(Object)"], "external_dependencies": {"modules": ["TruePredicate", "ConstantTransformer", "TransformerUtils"], "class_members": [{"name": "cString", "type": "variable"}]}, "category": "unit", "description": "Tests the ifTransformer method with a null false transformer, expecting a NullPointerException."}, {"name": "testIfTransformerWithExceptionTransformer", "primary_tested": ["TransformerUtils.ifTransformer(Predicate,Transformer,Transformer)"], "associated_methods": ["TruePredicate.truePredicate()", "FalsePredicate.falsePredicate()", "ExceptionTransformer.exceptionTransformer()", "NOPTransformer.nopTransformer()", "Transformer.transform(Object)"], "external_dependencies": {"modules": ["TruePredicate", "FalsePredicate", "ExceptionTransformer", "NOPTransformer", "TransformerUtils"], "class_members": [{"name": "cObject", "type": "variable"}]}, "category": "unit", "description": "Tests the ifTransformer method with ExceptionTransformer and NOPTransformer, ensuring the correct transformer behavior including throwing a FunctorException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_pollTest.java", "testclass_name": "CircularFifoQueue_pollTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CircularFifoQueue_pollTest", "description": "Unit tests for the poll method of the CircularFifoQueue class.", "class_members": {"variables": [{"name": "queue", "type": "CircularFifoQueue<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPollEmptyQueue", "primary_tested": ["CircularFifoQueue.poll()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the poll method when the queue is empty."}, {"name": "testPollSingleElement", "primary_tested": ["CircularFifoQueue.poll()"], "associated_methods": ["CircularFifoQueue.add(String)", "CircularFifoQueue.isEmpty()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the poll method when the queue contains a single element."}, {"name": "testPollMultipleElements", "primary_tested": ["CircularFifoQueue.poll()"], "associated_methods": ["CircularFifoQueue.add(String)", "CircularFifoQueue.isEmpty()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the poll method when the queue contains multiple elements."}, {"name": "testPollAfterWrapAround", "primary_tested": ["CircularFifoQueue.poll()"], "associated_methods": ["CircularFifoQueue.add(String)", "CircularFifoQueue.isEmpty()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the poll method after the queue has wrapped around."}, {"name": "testPollAfterRemove", "primary_tested": ["CircularFifoQueue.poll()"], "associated_methods": ["CircularFifoQueue.add(String)", "CircularFifoQueue.remove()", "CircularFifoQueue.isEmpty()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the poll method after an element has been removed from the queue."}, {"name": "testPollAfterClear", "primary_tested": ["CircularFifoQueue.poll()"], "associated_methods": ["CircularFifoQueue.add(String)", "CircularFifoQueue.clear()", "CircularFifoQueue.isEmpty()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the poll method after the queue has been cleared."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/SetUtils_hashCodeForSetTest.java", "testclass_name": "SetUtils_hashCodeForSetTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNotEquals;", "import java.util.HashSet;", "import java.util.Set;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SetUtils_hashCodeForSetTest", "description": "Unit tests for the SetUtils.hashCodeForSet method, which calculates the hash code for a set.", "class_members": {"variables": [{"name": "setA", "type": "Set<Integer>"}, {"name": "setB", "type": "Set<Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testHashCodeForSetWithNonNullElements", "primary_tested": ["SetUtils.hashCodeForSet(Set<Integer>)"], "external_dependencies": {"modules": ["SetUtils", "HashSet", "Set"], "class_members": [{"name": "setA", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hash code calculation for a set with non-null elements."}, {"name": "testHashCodeForSetWithNullElements", "primary_tested": ["SetUtils.hashCodeForSet(Set<Integer>)"], "external_dependencies": {"modules": ["SetUtils", "HashSet", "Set"], "class_members": [{"name": "setA", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hash code calculation for a set with null elements."}, {"name": "testHashCodeForSetWithAllNullElements", "primary_tested": ["SetUtils.hashCodeForSet(Set<Integer>)"], "external_dependencies": {"modules": ["SetUtils", "HashSet", "Set"]}, "category": "unit", "description": "Tests the hash code calculation for a set with all null elements."}, {"name": "testHashCodeForSetWithEmptySet", "primary_tested": ["SetUtils.hashCodeForSet(Set<Integer>)"], "external_dependencies": {"modules": ["SetUtils", "HashSet", "Set"]}, "category": "unit", "description": "Tests the hash code calculation for an empty set."}, {"name": "testHashCodeForSetWithNullSet", "primary_tested": ["SetUtils.hashCodeForSet(Set<Integer>)"], "external_dependencies": {"modules": ["SetUtils"]}, "category": "unit", "description": "Tests the hash code calculation for a null set."}, {"name": "testHashCodeForSetWithDifferentSets", "primary_tested": ["SetUtils.hashCodeForSet(Set<Integer>)"], "external_dependencies": {"modules": ["SetUtils", "HashSet", "Set"], "class_members": [{"name": "setA", "type": "variable"}, {"name": "setB", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hash code calculation for different sets."}, {"name": "testHashCodeForSetWithSameSets", "primary_tested": ["SetUtils.hashCodeForSet(Set<Integer>)"], "external_dependencies": {"modules": ["SetUtils", "HashSet", "Set"], "class_members": [{"name": "setA", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hash code calculation for the same sets."}, {"name": "testHashCodeForSetWithLargeSet", "primary_tested": ["SetUtils.hashCodeForSet(Set<Integer>)"], "external_dependencies": {"modules": ["SetUtils", "HashSet", "Set"]}, "category": "unit", "description": "Tests the hash code calculation for a large set."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/TransformerUtils_switchMapTransformerTest.java", "testclass_name": "TransformerUtils_switchMapTransformerTest", "dependencies": ["package org.apache.commons.collections4;", "import org.apache.commons.collections4.functors.ConstantTransformer;", "import org.apache.commons.collections4.functors.EqualPredicate;", "import org.apache.commons.collections4.functors.ExceptionTransformer;", "import org.apache.commons.collections4.functors.NOPTransformer;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "TransformerUtils_switchMapTransformerTest", "description": "Unit tests for the switchMapTransformer functionality in TransformerUtils.", "class_members": {"variables": [{"name": "cObject", "type": "static final Object"}, {"name": "cString", "type": "static final Object"}, {"name": "cInteger", "type": "static final Object"}, {"name": "objectsAndTransformers", "type": "Map<Object, Transformer<Object, Object>>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testSwitchMapTransformerWithValidMap", "primary_tested": ["TransformerUtils.switchMapTransformer(Map<Object, Transformer<Object, Object>>)"], "associated_methods": ["Transformer.transform(Object)"], "external_dependencies": {"modules": ["TransformerUtils", "ConstantTransformer", "Transformer"], "class_members": [{"name": "objectsAndTransformers", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the switchMapTransformer functionality with a valid map of objects and transformers."}, {"name": "testSwitchMapTransformerWithNullInput", "primary_tested": ["TransformerUtils.switchMapTransformer(Map<Object, Transformer<Object, Object>>)"], "associated_methods": ["Transformer.transform(Object)"], "external_dependencies": {"modules": ["TransformerUtils", "NOPTransformer", "Transformer"], "class_members": [{"name": "objectsAndTransformers", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the switchMapTransformer functionality with a null input and a NOPTransformer."}, {"name": "testSwitchMapTransformerWithDefaultTransformer", "primary_tested": ["TransformerUtils.switchMapTransformer(Map<Object, Transformer<Object, Object>>)"], "associated_methods": ["Transformer.transform(Object)"], "external_dependencies": {"modules": ["TransformerUtils", "ConstantTransformer", "Transformer"], "class_members": [{"name": "objectsAndTransformers", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the switchMapTransformer functionality with a default transformer for unmatched inputs."}, {"name": "testSwitchMapTransformerWithExceptionTransformer", "primary_tested": ["TransformerUtils.switchMapTransformer(Map<Object, Transformer<Object, Object>>)"], "associated_methods": ["Transformer.transform(Object)"], "external_dependencies": {"modules": ["TransformerUtils", "ExceptionTransformer", "Transformer"], "class_members": [{"name": "objectsAndTransformers", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the switchMapTransformer functionality with an ExceptionTransformer."}, {"name": "testSwitchMapTransformerWithNullMap", "primary_tested": ["TransformerUtils.switchMapTransformer(Map<Object, Transformer<Object, Object>>)"], "external_dependencies": {"modules": ["TransformerUtils"]}, "category": "unit", "description": "Tests the switchMapTransformer functionality with a null map, expecting a NullPointerException."}, {"name": "testSwitchMapTransformerWithNullTransformer", "primary_tested": ["TransformerUtils.switchMapTransformer(Map<Object, Transformer<Object, Object>>)"], "external_dependencies": {"modules": ["TransformerUtils"], "class_members": [{"name": "objectsAndTransformers", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the switchMapTransformer functionality with a null transformer in the map, expecting a NullPointerException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_retainAllTest.java", "testclass_name": "IndexedCollection_retainAllTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static java.util.Arrays.asList;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Collection;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "IndexedCollection_retainAllTest", "description": "Unit tests for the retainAll functionality of the IndexedCollection class.", "class_members": {"variables": [{"name": "indexedCollection", "type": "IndexedCollection<Integer, String>"}, {"name": "originalCollection", "type": "Collection<String>"}], "methods": [{"name": "decorateUniqueCollection", "signature": "IndexedCollection<Integer, String> decorateUniqueCollection(Collection<String> original)"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRetainAllWithMatchingElements", "primary_tested": ["IndexedCollection.retainAll(Collection<String>)"], "external_dependencies": {"modules": ["IndexedCollection", "Collection"], "class_members": [{"name": "indexedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retainAll functionality with matching elements in the collection."}, {"name": "testRetainAllWithNoMatchingElements", "primary_tested": ["IndexedCollection.retainAll(Collection<String>)"], "external_dependencies": {"modules": ["IndexedCollection", "Collection"], "class_members": [{"name": "indexedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retainAll functionality with no matching elements in the collection."}, {"name": "testRetainAllWithAllMatchingElements", "primary_tested": ["IndexedCollection.retainAll(Collection<String>)"], "external_dependencies": {"modules": ["IndexedCollection", "Collection"], "class_members": [{"name": "indexedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retainAll functionality with all elements matching in the collection."}, {"name": "testRetainAllWithEmptyCollection", "primary_tested": ["IndexedCollection.retainAll(Collection<String>)"], "external_dependencies": {"modules": ["IndexedCollection", "Collection"], "class_members": [{"name": "indexedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retainAll functionality with an empty collection."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_removeTest.java", "testclass_name": "CompositeCollection_removeTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeCollection_removeTest", "description": "Tests for the remove functionality of the CompositeCollection class.", "class_members": {"variables": [{"name": "c", "type": "CompositeCollection<String>"}, {"name": "one", "type": "Collection<String>"}, {"name": "two", "type": "Collection<String>"}]}, "fixtures": ["setUpTest"], "test_cases": [{"name": "testRemoveWithMutator", "primary_tested": ["CompositeCollection.remove(Object)"], "associated_methods": ["CompositeCollection.setMutator(CompositeCollection.CollectionMutator<String>)", "CompositeCollection.addComposited(Collection<String>)", "Collection.add(String)", "Collection.contains(Object)", "Collection.remove(Object)"], "external_dependencies": {"modules": ["CompositeCollection", "Collection", "List"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the remove functionality of the CompositeCollection when a mutator is set."}, {"name": "testRemoveWithoutMutator", "primary_tested": ["CompositeCollection.remove(Object)"], "associated_methods": ["CompositeCollection.addComposited(Collection<String>)", "Collection.add(String)", "Collection.contains(Object)"], "external_dependencies": {"modules": ["CompositeCollection", "Collection"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the remove functionality of the CompositeCollection when no mutator is set, expecting an UnsupportedOperationException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_uniqueIndexedCollectionTest.java", "testclass_name": "IndexedCollection_uniqueIndexedCollectionTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.Arrays;", "import java.util.Collection;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "IndexedCollection_uniqueIndexedCollectionTest", "description": "Unit tests for the uniqueIndexedCollection method of the IndexedCollection class.", "class_members": {"variables": [{"name": "keyTransformer", "type": "Transformer<String, Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testUniqueIndexedCollectionWithUniqueKeys", "primary_tested": ["IndexedCollection.uniqueIndexedCollection(Collection<String>,Transformer<String,Integer>)"], "associated_methods": ["IndexedCollection.get(Integer)"], "external_dependencies": {"modules": ["IndexedCollection", "Transformer", "Arrays", "Collection"], "class_members": [{"name": "keyTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the uniqueIndexedCollection method with a collection of unique keys."}, {"name": "testUniqueIndexedCollectionWithDuplicateKeys", "primary_tested": ["IndexedCollection.uniqueIndexedCollection(Collection<String>,Transformer<String,Integer>)"], "external_dependencies": {"modules": ["IndexedCollection", "Transformer", "Arrays", "Collection"], "class_members": [{"name": "keyTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the uniqueIndexedCollection method with a collection containing duplicate keys, expecting an IllegalArgumentException."}, {"name": "testUniqueIndexedCollectionWithEmptyCollection", "primary_tested": ["IndexedCollection.uniqueIndexedCollection(Collection<String>,Transformer<String,Integer>)"], "associated_methods": ["IndexedCollection.get(Integer)"], "external_dependencies": {"modules": ["IndexedCollection", "Transformer", "Arrays", "Collection"], "class_members": [{"name": "keyTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the uniqueIndexedCollection method with an empty collection."}, {"name": "testUniqueIndexedCollectionWithNullKeyTransformer", "primary_tested": ["IndexedCollection.uniqueIndexedCollection(Collection<String>,Transformer<String,Integer>)"], "external_dependencies": {"modules": ["IndexedCollection", "Transformer", "Arrays", "Collection"]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the uniqueIndexedCollection method with a null key transformer, expecting a NullPointerException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_addAllTest.java", "testclass_name": "CompositeCollection_addAllTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeCollection_addAllTest", "description": "Tests for the addAll functionality of the CompositeCollection class.", "class_members": {"variables": [{"name": "c", "type": "CompositeCollection<String>"}, {"name": "one", "type": "Collection<String>"}, {"name": "two", "type": "Collection<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAddAllWithMutator", "primary_tested": ["CompositeCollection.addAll(Collection<? extends String>)"], "associated_methods": ["CompositeCollection.setMutator(CompositeCollection.CollectionMutator<String>)", "CompositeCollection.addComposited(Collection<String>)", "Collection.addAll(Collection<? extends String>)", "Collection.size()", "Collection.contains(Object)"], "external_dependencies": {"modules": ["CompositeCollection", "Collection", "HashSet", "ArrayList"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addAll functionality of the CompositeCollection with a mutator set."}, {"name": "testAddAllWithoutMutator", "primary_tested": ["CompositeCollection.addAll(Collection<? extends String>)"], "associated_methods": ["CompositeCollection.addComposited(Collection<String>)"], "external_dependencies": {"modules": ["CompositeCollection", "Collection", "HashSet", "ArrayList"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addAll functionality of the CompositeCollection without a mutator set, expecting an UnsupportedOperationException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_getTest.java", "testclass_name": "IndexedCollection_getTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static java.util.Arrays.asList;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.ArrayList;", "import java.util.Collection;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "IndexedCollection_getTest", "description": "Unit tests for the get method of the IndexedCollection class.", "class_members": {"variables": [{"name": "indexedCollection", "type": "IndexedCollection<Integer, String>"}, {"name": "originalCollection", "type": "Collection<String>"}], "methods": [{"name": "decorateUniqueCollection", "signature": "IndexedCollection<Integer, String> decorateUniqueCollection(Collection<String> original)"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetReturnsFirstElementForKey", "primary_tested": ["IndexedCollection.get(Integer)"], "external_dependencies": {"modules": ["IndexedCollection", "Collection"], "class_members": [{"name": "indexedCollection", "type": "variable"}, {"name": "originalCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the get method returns the first element for a given key."}, {"name": "testGetReturnsNullForNonExistentKey", "primary_tested": ["IndexedCollection.get(Integer)"], "external_dependencies": {"modules": ["IndexedCollection", "Collection"], "class_members": [{"name": "indexedCollection", "type": "variable"}, {"name": "originalCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the get method returns null for a non-existent key."}, {"name": "testGetReturnsNullForEmptyCollection", "primary_tested": ["IndexedCollection.get(Integer)"], "external_dependencies": {"modules": ["IndexedCollection"], "class_members": [{"name": "indexedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the get method returns null for an empty collection."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_nonUniqueIndexedCollectionTest.java", "testclass_name": "IndexedCollection_nonUniqueIndexedCollectionTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.Collections;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNotNull;"], "name": "IndexedCollection_nonUniqueIndexedCollectionTest", "description": "Tests for the non-unique indexed collection functionality in the IndexedCollection class.", "class_members": {"variables": [{"name": "keyTransformer", "type": "Transformer<String, Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNonUniqueIndexedCollectionWithEmptyCollection", "primary_tested": ["IndexedCollection.nonUniqueIndexedCollection(Collection<String>,Transformer<String,Integer>)"], "external_dependencies": {"modules": ["IndexedCollection", "Transformer", "Collections"], "class_members": [{"name": "keyTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the creation of a non-unique indexed collection with an empty collection."}, {"name": "testNonUniqueIndexedCollectionWithNonEmptyCollection", "primary_tested": ["IndexedCollection.nonUniqueIndexedCollection(Collection<String>,Transformer<String,Integer>)"], "associated_methods": ["IndexedCollection.size()", "IndexedCollection.get(Integer)"], "external_dependencies": {"modules": ["IndexedCollection", "Transformer", "Arrays"], "class_members": [{"name": "keyTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the creation of a non-unique indexed collection with a non-empty collection and verifies the size and retrieval of elements."}, {"name": "testNonUniqueIndexedCollectionWithDuplicateKeys", "primary_tested": ["IndexedCollection.nonUniqueIndexedCollection(Collection<String>,Transformer<String,Integer>)"], "associated_methods": ["IndexedCollection.size()", "IndexedCollection.get(Integer)"], "external_dependencies": {"modules": ["IndexedCollection", "Transformer", "Arrays"], "class_members": [{"name": "keyTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the creation of a non-unique indexed collection with duplicate keys and verifies the size and retrieval of elements."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/SingletonMap_setValueTest.java", "testclass_name": "SingletonMap_setValueTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import org.junit.jupiter.api.Test;"], "name": "SingletonMap_setValueTest", "description": "Unit test for the setValue method of SingletonMap.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testSetValue", "primary_tested": ["SingletonMap.setValue(String)"], "associated_methods": ["SingletonMap.getValue()"], "external_dependencies": {"modules": ["SingletonMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the setValue method of SingletonMap, ensuring it correctly sets a new value and returns the old value."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/UnmodifiableMap_unmodifiableMapTest.java", "testclass_name": "UnmodifiableMap_unmodifiableMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.Unmodifiable;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "UnmodifiableMap_unmodifiableMapTest", "description": "Unit tests for the UnmodifiableMap.unmodifiableMap method.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testUnmodifiableMapWithUnmodifiableMap", "primary_tested": ["UnmodifiableMap.unmodifiableMap(Map)"], "external_dependencies": {"modules": ["UnmodifiableMap", "HashMap", "Map"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that wrapping an unmodifiable map with UnmodifiableMap.unmodifiableMap returns the same instance."}, {"name": "testUnmodifiableMapWithModifiableMap", "primary_tested": ["UnmodifiableMap.unmodifiableMap(Map)"], "external_dependencies": {"modules": ["UnmodifiableMap", "HashMap", "Map"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that wrapping a modifiable map with UnmodifiableMap.unmodifiableMap returns an instance of UnmodifiableMap and is not the same instance as the original map."}, {"name": "testUnmodifiableMapWithNullMap", "primary_tested": ["UnmodifiableMap.unmodifiableMap(Map)"], "external_dependencies": {"modules": ["UnmodifiableMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that passing a null map to UnmodifiableMap.unmodifiableMap throws a NullPointerException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_containsTest.java", "testclass_name": "CompositeCollection_containsTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeCollection_containsTest", "description": "Unit tests for the contains method of the CompositeCollection class.", "class_members": {"variables": [{"name": "c", "type": "CompositeCollection<String>"}, {"name": "one", "type": "Collection<String>"}, {"name": "two", "type": "Collection<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testContainsWithSingleCollection", "primary_tested": ["CompositeCollection.contains(String)"], "external_dependencies": {"modules": ["CompositeCollection", "Collection"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the contains method with a single collection."}, {"name": "testContainsWithMultipleCollections", "primary_tested": ["CompositeCollection.contains(String)"], "external_dependencies": {"modules": ["CompositeCollection", "Collection"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the contains method with multiple collections."}, {"name": "testContainsWithEmptyComposite", "primary_tested": ["CompositeCollection.contains(String)"], "external_dependencies": {"modules": ["CompositeCollection"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the contains method with an empty composite collection."}, {"name": "testContainsWithNullElement", "primary_tested": ["CompositeCollection.contains(String)"], "external_dependencies": {"modules": ["CompositeCollection", "Collection"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the contains method with a null element in a single collection."}, {"name": "testContainsWithMultipleCollectionsAndNull", "primary_tested": ["CompositeCollection.contains(String)"], "external_dependencies": {"modules": ["CompositeCollection", "Collection"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the contains method with multiple collections, including a null element."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/LazySortedMap_headMapTest.java", "testclass_name": "LazySortedMap_headMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.apache.commons.collections4.map.LazySortedMap.lazySortedMap;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertInstanceOf;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.SortedMap;", "import java.util.TreeMap;", "import org.apache.commons.collections4.Factory;", "import org.apache.commons.collections4.FactoryUtils;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "LazySortedMap_headMapTest", "description": "Unit tests for the headMap functionality of LazySortedMap.", "class_members": {"variables": [{"name": "oneFactory", "type": "static final Factory<Integer>"}, {"name": "lazySortedMap", "type": "LazySortedMap<String, Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testHeadMap", "primary_tested": ["LazySortedMap.headMap(String)"], "external_dependencies": {"modules": ["LazySortedMap", "SortedMap", "TreeMap", "Factory", "FactoryUtils"], "class_members": [{"name": "lazySortedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the headMap functionality of LazySortedMap with an existing key."}, {"name": "testHeadMapWithNonExistentKey", "primary_tested": ["LazySortedMap.headMap(String)"], "external_dependencies": {"modules": ["LazySortedMap", "SortedMap", "TreeMap", "Factory", "FactoryUtils"], "class_members": [{"name": "lazySortedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the headMap functionality of LazySortedMap with a non-existent key."}, {"name": "testHeadMapWithNullKey", "primary_tested": ["LazySortedMap.headMap(String)"], "external_dependencies": {"modules": ["LazySortedMap", "SortedMap", "TreeMap", "Factory", "FactoryUtils"], "class_members": [{"name": "lazySortedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the headMap functionality of LazySortedMap with a null key, expecting a NullPointerException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_previousKeyTest.java", "testclass_name": "ListOrderedMap_previousKeyTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "ListOrderedMap_previousKeyTest", "description": "Unit tests for the previousKey method in ListOrderedMap.", "class_members": {"variables": [{"name": "listOrderedMap", "type": "ListOrderedMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPreviousKey_ValidKey", "primary_tested": ["ListOrderedMap.previousKey(String)"], "external_dependencies": {"modules": ["ListOrderedMap"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the previousKey method with valid keys."}, {"name": "testPreviousKey_FirstKey", "primary_tested": ["ListOrderedMap.previousKey(String)"], "external_dependencies": {"modules": ["ListOrderedMap"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the previousKey method with the first key in the map."}, {"name": "testPreviousKey_NonExistentKey", "primary_tested": ["ListOrderedMap.previousKey(String)"], "external_dependencies": {"modules": ["ListOrderedMap"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the previousKey method with a non-existent key."}, {"name": "testPreviousKey_EmptyMap", "primary_tested": ["ListOrderedMap.previousKey(String)"], "associated_methods": ["ListOrderedMap.clear()"], "external_dependencies": {"modules": ["ListOrderedMap"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the previousKey method with an empty map."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_addCompositedTest.java", "testclass_name": "CompositeCollection_addCompositedTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeCollection_addCompositedTest", "description": "Unit tests for the addComposited method of the CompositeCollection class.", "class_members": {"variables": [{"name": "c", "type": "CompositeCollection<String>"}, {"name": "one", "type": "Collection<String>"}, {"name": "two", "type": "Collection<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAddCompositedNonNullCollection", "primary_tested": ["CompositeCollection.addComposited(Collection<String>)"], "external_dependencies": {"modules": ["CompositeCollection", "Collection"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests adding a non-null collection to the CompositeCollection."}, {"name": "testAddCompositedNullCollection", "primary_tested": ["CompositeCollection.addComposited(Collection<String>)"], "external_dependencies": {"modules": ["CompositeCollection"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests adding a null collection to the CompositeCollection."}, {"name": "testAddCompositedMultipleCollections", "primary_tested": ["CompositeCollection.addComposited(Collection<String>,Collection<String>)"], "external_dependencies": {"modules": ["CompositeCollection", "Collection"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests adding multiple collections to the CompositeCollection."}, {"name": "testAddCompositedEmptyCollections", "primary_tested": ["CompositeCollection.addComposited(Collection<String>,Collection<String>)"], "external_dependencies": {"modules": ["CompositeCollection", "Collection"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests adding empty collections to the CompositeCollection."}, {"name": "testAddCompositedMixedCollections", "primary_tested": ["CompositeCollection.addComposited(Collection<String>,Collection<String>)"], "external_dependencies": {"modules": ["CompositeCollection", "Collection"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests adding a mix of non-null and null collections to the CompositeCollection."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/LazySortedMap_tailMapTest.java", "testclass_name": "LazySortedMap_tailMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.Factory;", "import org.junit.jupiter.api.Test;", "import java.util.SortedMap;", "import java.util.TreeMap;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNotNull;"], "name": "LazySortedMap_tailMapTest", "description": "Unit tests for the tailMap functionality of LazySortedMap.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testTailMap", "primary_tested": ["LazySortedMap.tailMap(Integer)"], "associated_methods": ["SortedMap.size()", "SortedMap.get(Integer)"], "external_dependencies": {"modules": ["SortedMap", "TreeMap", "Factory", "LazySortedMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the tailMap functionality of the LazySortedMap, ensuring it returns the correct subset of the map starting from the specified key."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_removeIfTest.java", "testclass_name": "IndexedCollection_removeIfTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Collection;", "import java.util.function.Predicate;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "IndexedCollection_removeIfTest", "description": "Unit tests for the removeIf method in the IndexedCollection class.", "class_members": {"variables": [{"name": "indexedCollection", "type": "IndexedCollection<Integer, String>"}, {"name": "originalCollection", "type": "Collection<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveIfWithNullFilter", "primary_tested": ["IndexedCollection.removeIf(Predicate)"], "external_dependencies": {"modules": ["IndexedCollection", "Predicate"], "class_members": [{"name": "indexedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeIf method with a null filter."}, {"name": "testRemoveIfWithNoMatchingElements", "primary_tested": ["IndexedCollection.removeIf(Predicate)"], "external_dependencies": {"modules": ["IndexedCollection", "Predicate"], "class_members": [{"name": "indexedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeIf method with a filter that does not match any elements."}, {"name": "testRemoveIfWithMatchingElements", "primary_tested": ["IndexedCollection.removeIf(Predicate)"], "associated_methods": ["IndexedCollection.reindex()", "IndexedCollection.get(Integer)"], "external_dependencies": {"modules": ["IndexedCollection", "Predicate"], "class_members": [{"name": "indexedCollection", "type": "variable"}, {"name": "originalCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeIf method with a filter that matches some elements."}, {"name": "testRemoveIfWithAllMatchingElements", "primary_tested": ["IndexedCollection.removeIf(Predicate)"], "associated_methods": ["IndexedCollection.reindex()", "IndexedCollection.get(Integer)"], "external_dependencies": {"modules": ["IndexedCollection", "Predicate"], "class_members": [{"name": "indexedCollection", "type": "variable"}, {"name": "originalCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeIf method with a filter that matches all elements."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_retainAllTest.java", "testclass_name": "CompositeCollection_retainAllTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeCollection_retainAllTest", "description": "Unit tests for the retainAll functionality of the CompositeCollection class.", "class_members": {"variables": [{"name": "c", "type": "CompositeCollection<String>"}, {"name": "one", "type": "Collection<String>"}, {"name": "two", "type": "Collection<String>"}]}, "fixtures": ["setUpTest"], "test_cases": [{"name": "testRetainAllWithNullCollection", "primary_tested": ["CompositeCollection.retainAll(Collection)"], "external_dependencies": {"modules": ["CompositeCollection", "Collection"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the retainAll method with a null collection, ensuring no elements are removed."}, {"name": "testRetainAllWithEmptyCollection", "primary_tested": ["CompositeCollection.retainAll(Collection)"], "external_dependencies": {"modules": ["CompositeCollection", "Collection", "ArrayList"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the retainAll method with an empty collection, ensuring all elements are removed."}, {"name": "testRetainAllWithNonEmptyCollection", "primary_tested": ["CompositeCollection.retainAll(Collection)"], "external_dependencies": {"modules": ["CompositeCollection", "Collection", "ArrayList", "Arrays"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the retainAll method with a non-empty collection, ensuring only specified elements are retained."}, {"name": "testRetainAllWithAllElementsToRetain", "primary_tested": ["CompositeCollection.retainAll(Collection)"], "external_dependencies": {"modules": ["CompositeCollection", "Collection", "ArrayList", "Arrays"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the retainAll method with a collection containing all elements, ensuring no elements are removed."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_removeAllTest.java", "testclass_name": "IndexedCollection_removeAllTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static java.util.Arrays.asList;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Collection;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "IndexedCollection_removeAllTest", "description": "Unit tests for the removeAll functionality of the IndexedCollection class.", "class_members": {"variables": [{"name": "indexedCollection", "type": "IndexedCollection<Integer, String>"}, {"name": "originalCollection", "type": "Collection<String>"}], "methods": [{"name": "decorateUniqueCollection", "signature": "IndexedCollection<Integer, String> decorateUniqueCollection(Collection<String> original)"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveAllRemovesAllElements", "primary_tested": ["IndexedCollection.removeAll(Collection<String>)"], "associated_methods": ["IndexedCollection.contains(String)"], "external_dependencies": {"modules": ["IndexedCollection", "Collection"], "class_members": [{"name": "indexedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that removeAll removes all specified elements from the IndexedCollection."}, {"name": "testRemoveAllNoElementsToRemove", "primary_tested": ["IndexedCollection.removeAll(Collection<String>)"], "associated_methods": ["IndexedCollection.contains(String)"], "external_dependencies": {"modules": ["IndexedCollection", "Collection"], "class_members": [{"name": "indexedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that removeAll does nothing when the collection to remove is not present in the IndexedCollection."}, {"name": "testRemoveAllEmptyCollection", "primary_tested": ["IndexedCollection.removeAll(Collection<String>)"], "associated_methods": ["IndexedCollection.contains(String)"], "external_dependencies": {"modules": ["IndexedCollection", "Collection"], "class_members": [{"name": "indexedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that removeAll does nothing when the collection to remove is empty."}, {"name": "testRemoveAllNullCollection", "primary_tested": ["IndexedCollection.removeAll(Collection<String>)"], "external_dependencies": {"modules": ["IndexedCollection"], "class_members": [{"name": "indexedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that removeAll throws a NullPointerException when the collection to remove is null."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_isEmptyTest.java", "testclass_name": "CompositeCollection_isEmptyTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeCollection_isEmptyTest", "description": "Unit tests for the isEmpty functionality of the CompositeCollection class.", "class_members": {"variables": [{"name": "c", "type": "CompositeCollection<String>"}, {"name": "one", "type": "Collection<String>"}, {"name": "two", "type": "Collection<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testIsEmpty_AllCollectionsEmpty", "primary_tested": ["CompositeCollection.isEmpty()"], "external_dependencies": {"modules": ["CompositeCollection", "Collection"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isEmpty method when all collections are empty."}, {"name": "testIsEmpty_OneCollectionNotEmpty", "primary_tested": ["CompositeCollection.isEmpty()"], "external_dependencies": {"modules": ["CompositeCollection", "Collection"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isEmpty method when one collection is not empty."}, {"name": "testIsEmpty_AllCollectionsNotEmpty", "primary_tested": ["CompositeCollection.isEmpty()"], "external_dependencies": {"modules": ["CompositeCollection", "Collection"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isEmpty method when all collections are not empty."}, {"name": "testIsEmpty_AfterClear", "primary_tested": ["CompositeCollection.isEmpty()"], "associated_methods": ["CompositeCollection.clear()"], "external_dependencies": {"modules": ["CompositeCollection", "Collection"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isEmpty method after clearing the composite collection."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_removeAllTest.java", "testclass_name": "CompositeCollection_removeAllTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeCollection_removeAllTest", "description": "Unit tests for the removeAll method of the CompositeCollection class.", "class_members": {"variables": [{"name": "c", "type": "CompositeCollection<String>"}, {"name": "one", "type": "Collection<String>"}, {"name": "two", "type": "Collection<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveAllWithNonEmptyCollection", "primary_tested": ["CompositeCollection.removeAll(Collection<String>)"], "external_dependencies": {"modules": ["CompositeCollection", "Collection", "ArrayList", "Arrays", "HashSet"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeAll method with a non-empty collection to remove."}, {"name": "testRemoveAllWithEmptyCollection", "primary_tested": ["CompositeCollection.removeAll(Collection<String>)"], "external_dependencies": {"modules": ["CompositeCollection", "Collection", "ArrayList"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeAll method with an empty collection to remove."}, {"name": "testRemoveAllWithNullCollection", "primary_tested": ["CompositeCollection.removeAll(Collection<String>)"], "external_dependencies": {"modules": ["CompositeCollection"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeAll method with a null collection to remove."}, {"name": "testRemoveAllWithAllElements", "primary_tested": ["CompositeCollection.removeAll(Collection<String>)"], "external_dependencies": {"modules": ["CompositeCollection", "Collection", "ArrayList", "Arrays", "HashSet"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeAll method with a collection containing all elements to remove."}, {"name": "testRemoveAllWithNonExistentElements", "primary_tested": ["CompositeCollection.removeAll(Collection<String>)"], "external_dependencies": {"modules": ["CompositeCollection", "Collection", "ArrayList", "Arrays"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeAll method with a collection containing non-existent elements to remove."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_sizeTest.java", "testclass_name": "CircularFifoQueue_sizeTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CircularFifoQueue_sizeTest", "description": "Unit tests for the size method of the CircularFifoQueue class.", "class_members": {"variables": [{"name": "queue", "type": "CircularFifoQueue<Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testSizeEmptyQueue", "primary_tested": ["CircularFifoQueue.size()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size of an empty CircularFifoQueue."}, {"name": "testSizeNonEmptyQueue", "primary_tested": ["CircularFifoQueue.size()"], "associated_methods": ["CircularFifoQueue.add(Integer)"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size of a non-empty CircularFifoQueue."}, {"name": "testSizeFullQueue", "primary_tested": ["CircularFifoQueue.size()"], "associated_methods": ["CircularFifoQueue.add(Integer)"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size of a full CircularFifoQueue."}, {"name": "testSizeAfterRemove", "primary_tested": ["CircularFifoQueue.size()"], "associated_methods": ["CircularFifoQueue.add(Integer)", "CircularFifoQueue.remove()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size of the CircularFifoQueue after removing an element."}, {"name": "testSizeAfterClear", "primary_tested": ["CircularFifoQueue.size()"], "associated_methods": ["CircularFifoQueue.add(Integer)", "CircularFifoQueue.clear()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size of the CircularFifoQueue after clearing it."}, {"name": "testSizeAfterWrapAround", "primary_tested": ["CircularFifoQueue.size()"], "associated_methods": ["CircularFifoQueue.add(Integer)", "CircularFifoQueue.remove()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size of the CircularFifoQueue after a wrap-around."}, {"name": "testSizeAfterPartialWrapAround", "primary_tested": ["CircularFifoQueue.size()"], "associated_methods": ["CircularFifoQueue.add(Integer)", "CircularFifoQueue.remove()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size of the CircularFifoQueue after a partial wrap-around."}, {"name": "testSizeAfterFullWrapAround", "primary_tested": ["CircularFifoQueue.size()"], "associated_methods": ["CircularFifoQueue.add(Integer)", "CircularFifoQueue.remove()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size of the CircularFifoQueue after a full wrap-around."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_iteratorTest.java", "testclass_name": "CompositeCollection_iteratorTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.Iterator;", "import java.util.List;", "import java.util.function.Predicate;", "import org.apache.commons.collections4.iterators.EmptyIterator;", "import org.apache.commons.collections4.iterators.IteratorChain;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeCollection_iteratorTest", "description": "Tests for the iterator functionality of the CompositeCollection class.", "class_members": {"variables": [{"name": "c", "type": "CompositeCollection<String>"}, {"name": "one", "type": "Collection<String>"}, {"name": "two", "type": "Collection<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testIteratorWithEmptyCompositeCollection", "primary_tested": ["CompositeCollection.iterator()"], "external_dependencies": {"modules": ["CompositeCollection", "EmptyIterator"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the iterator functionality when the CompositeCollection is empty."}, {"name": "testIteratorWithNonEmptyCompositeCollection", "primary_tested": ["CompositeCollection.iterator()"], "associated_methods": ["CompositeCollection.addComposited(Collection<String>,Collection<String>)", "Iterator.forEachRemaining(Consumer<? super String>)"], "external_dependencies": {"modules": ["CompositeCollection", "IteratorChain", "ArrayList", "HashSet"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the iterator functionality when the CompositeCollection contains elements from multiple collections."}, {"name": "testIteratorWithOneCollection", "primary_tested": ["CompositeCollection.iterator()"], "associated_methods": ["CompositeCollection.addComposited(Collection<String>)", "Iterator.forEachRemaining(Consumer<? super String>)"], "external_dependencies": {"modules": ["CompositeCollection", "IteratorChain", "ArrayList", "HashSet"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the iterator functionality when the CompositeCollection contains elements from a single collection."}, {"name": "testIteratorWithMultipleCollections", "primary_tested": ["CompositeCollection.iterator()"], "associated_methods": ["CompositeCollection.addComposited(Collection<String>,Collection<String>,Collection<String>)", "Iterator.forEachRemaining(Consumer<? super String>)"], "external_dependencies": {"modules": ["CompositeCollection", "IteratorChain", "ArrayList", "HashSet"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the iterator functionality when the CompositeCollection contains elements from multiple collections."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_addTest.java", "testclass_name": "CircularFifoQueue_addTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CircularFifoQueue_addTest", "description": "Unit tests for the add functionality of the CircularFifoQueue class.", "class_members": {"variables": [{"name": "queue", "type": "CircularFifoQueue<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAddElementSuccess", "primary_tested": ["CircularFifoQueue.add(String)"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful addition of elements to the CircularFifoQueue."}, {"name": "testAddElementWhenFull", "primary_tested": ["CircularFifoQueue.add(String)"], "associated_methods": ["CircularFifoQueue.get(int)"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addition of an element when the CircularFifoQueue is full."}, {"name": "testAddNullElement", "primary_tested": ["CircularFifoQueue.add(String)"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addition of a null element to the CircularFifoQueue, expecting a NullPointerException."}, {"name": "testAddElementWrapAround", "primary_tested": ["CircularFifoQueue.add(String)"], "associated_methods": ["CircularFifoQueue.remove()", "CircularFifoQueue.get(int)"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addition of an element to the CircularFifoQueue when it wraps around after removal."}, {"name": "testAddElementWhenQueueIsEmpty", "primary_tested": ["CircularFifoQueue.add(String)"], "associated_methods": ["CircularFifoQueue.get(int)"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addition of an element to an empty CircularFifoQueue."}, {"name": "testAddElementWhenQueueHasOneElement", "primary_tested": ["CircularFifoQueue.add(String)"], "associated_methods": ["CircularFifoQueue.get(int)"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addition of an element to a CircularFifoQueue with one element."}, {"name": "testAddElementWhenQueueHasTwoElements", "primary_tested": ["CircularFifoQueue.add(String)"], "associated_methods": ["CircularFifoQueue.get(int)"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addition of an element to a CircularFifoQueue with two elements."}, {"name": "testAddElementWhenQueueIsFullAndRemoveIsCalled", "primary_tested": ["CircularFifoQueue.add(String)"], "associated_methods": ["CircularFifoQueue.remove()", "CircularFifoQueue.get(int)"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addition of an element to a full CircularFifoQueue after a removal."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_removeIfTest.java", "testclass_name": "CompositeCollection_removeIfTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.List;", "import java.util.function.Predicate;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeCollection_removeIfTest", "description": "Unit tests for the removeIf functionality of the CompositeCollection class.", "class_members": {"variables": [{"name": "c", "type": "CompositeCollection<String>"}, {"name": "one", "type": "Collection<String>"}, {"name": "two", "type": "Collection<String>"}]}, "fixtures": ["setUpTest"], "test_cases": [{"name": "testRemoveIf_NullFilter", "primary_tested": ["CompositeCollection.removeIf(Predicate)"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the removeIf method with a null filter."}, {"name": "testRemoveIf_NoChange", "primary_tested": ["CompositeCollection.removeIf(Predicate)"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet", "Predicate"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the removeIf method with a filter that does not match any elements."}, {"name": "testRemoveIf_WithChange", "primary_tested": ["CompositeCollection.removeIf(Predicate)"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet", "Predicate"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the removeIf method with a filter that matches and removes elements."}, {"name": "testRemoveIf_MultipleCollections", "primary_tested": ["CompositeCollection.removeIf(Predicate)"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet", "Predicate"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the removeIf method with a filter that matches and removes elements from multiple collections."}, {"name": "testRemoveIf_AllCollections", "primary_tested": ["CompositeCollection.removeIf(Predicate)"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet", "Predicate"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the removeIf method with a filter that matches and removes elements from all collections."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_containsTest.java", "testclass_name": "IndexedCollection_containsTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Collection;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "IndexedCollection_containsTest", "description": "Unit tests for the contains method of the IndexedCollection class.", "class_members": {"variables": [{"name": "indexedCollection", "type": "IndexedCollection<Integer, String>"}, {"name": "originalCollection", "type": "Collection<String>"}], "methods": [{"name": "decorateUniqueCollection", "signature": "IndexedCollection<Integer, String> decorateUniqueCollection(Collection<String> original)"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testContainsReturnsTrueForExistingElement", "primary_tested": ["IndexedCollection.contains(String)"], "external_dependencies": {"modules": ["IndexedCollection", "Collection"], "class_members": [{"name": "indexedCollection", "type": "variable"}, {"name": "originalCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the contains method returns true for an existing element."}, {"name": "testContainsReturnsFalseForNonExistingElement", "primary_tested": ["IndexedCollection.contains(String)"], "external_dependencies": {"modules": ["IndexedCollection", "Collection"], "class_members": [{"name": "indexedCollection", "type": "variable"}, {"name": "originalCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the contains method returns false for a non-existing element."}, {"name": "testContainsReturnsFalseForNullElement", "primary_tested": ["IndexedCollection.contains(String)"], "external_dependencies": {"modules": ["IndexedCollection", "Collection"], "class_members": [{"name": "indexedCollection", "type": "variable"}, {"name": "originalCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the contains method returns false for a null element."}, {"name": "testContainsReturnsTrueAfterAddingElement", "primary_tested": ["IndexedCollection.contains(String)"], "external_dependencies": {"modules": ["IndexedCollection", "Collection"], "class_members": [{"name": "indexedCollection", "type": "variable"}, {"name": "originalCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the contains method returns true after adding a new element."}, {"name": "testContainsReturnsFalseAfterRemovingElement", "primary_tested": ["IndexedCollection.contains(String)"], "external_dependencies": {"modules": ["IndexedCollection", "Collection"], "class_members": [{"name": "indexedCollection", "type": "variable"}, {"name": "originalCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the contains method returns false after removing an element."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/SingletonMap_equalsTest.java", "testclass_name": "SingletonMap_equalsTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;"], "name": "SingletonMap_equalsTest", "description": "Unit tests for the equals method of the SingletonMap class.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testEquals_SameInstance", "primary_tested": ["SingletonMap.equals(Object)"], "external_dependencies": {"modules": ["SingletonMap"]}, "category": "unit", "description": "Tests the equals method with the same instance."}, {"name": "testEquals_DifferentType", "primary_tested": ["SingletonMap.equals(Object)"], "external_dependencies": {"modules": ["SingletonMap"]}, "category": "unit", "description": "Tests the equals method with a different type."}, {"name": "testEquals_DifferentSizeMap", "primary_tested": ["SingletonMap.equals(Object)"], "external_dependencies": {"modules": ["SingletonMap", "HashMap"]}, "category": "unit", "description": "Tests the equals method with a map of different size."}, {"name": "testEquals_SameKeyDifferentValue", "primary_tested": ["SingletonMap.equals(Object)"], "external_dependencies": {"modules": ["SingletonMap", "HashMap"]}, "category": "unit", "description": "Tests the equals method with the same key but different value."}, {"name": "testEquals_DifferentKeySameValue", "primary_tested": ["SingletonMap.equals(Object)"], "external_dependencies": {"modules": ["SingletonMap", "HashMap"]}, "category": "unit", "description": "Tests the equals method with a different key but same value."}, {"name": "testEquals_SameKeySameValue", "primary_tested": ["SingletonMap.equals(Object)"], "external_dependencies": {"modules": ["SingletonMap", "HashMap"]}, "category": "unit", "description": "Tests the equals method with the same key and same value."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/SingletonMap_putTest.java", "testclass_name": "SingletonMap_putTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.Test;"], "name": "SingletonMap_putTest", "description": "Unit tests for the put method of SingletonMap, focusing on behavior with matching and non-matching keys.", "class_members": {"variables": [{"name": "map", "type": "SingletonMap<String, String>"}]}, "fixtures": [], "test_cases": [{"name": "testPutWithMatchingKey", "primary_tested": ["SingletonMap.put(String,String)"], "associated_methods": ["SingletonMap.getValue()"], "external_dependencies": {"modules": ["SingletonMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "description": "Tests the put method of SingletonMap with a matching key, ensuring the old value is returned and the new value is set."}, {"name": "testPutWithNonMatchingKey", "primary_tested": ["SingletonMap.put(String,String)"], "external_dependencies": {"modules": ["SingletonMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "description": "Tests the put method of SingletonMap with a non-matching key, ensuring an IllegalArgumentException is thrown."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/SingletonMap_hashCodeTest.java", "testclass_name": "SingletonMap_hashCodeTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SingletonMap_hashCodeTest", "description": "Unit tests for the hashCode method of the SingletonMap class.", "class_members": {"variables": [{"name": "singletonMap", "type": "SingletonMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testHashCodeWithNonNullKeyAndValue", "primary_tested": ["SingletonMap.hashCode()"], "external_dependencies": {"modules": ["SingletonMap"], "class_members": [{"name": "singletonMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hashCode method of SingletonMap with non-null key and value."}, {"name": "testHashCodeWithNullKey", "primary_tested": ["SingletonMap.hashCode()"], "external_dependencies": {"modules": ["SingletonMap"], "class_members": [{"name": "singletonMap", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the hashCode method of SingletonMap with a null key."}, {"name": "testHashCodeWithNullValue", "primary_tested": ["SingletonMap.hashCode()"], "external_dependencies": {"modules": ["SingletonMap"], "class_members": [{"name": "singletonMap", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the hashCode method of SingletonMap with a null value."}, {"name": "testHashCodeWithNullKeyAndValue", "primary_tested": ["SingletonMap.hashCode()"], "external_dependencies": {"modules": ["SingletonMap"], "class_members": [{"name": "singletonMap", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the hashCode method of SingletonMap with both null key and value."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_removeTest.java", "testclass_name": "PassiveExpiringMap_removeTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.mockito.Mockito.mock;", "import static org.mockito.Mockito.when;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "PassiveExpiringMap_removeTest", "description": "Unit tests for the remove functionality of PassiveExpiringMap.", "class_members": {"variables": [{"name": "map", "type": "PassiveExpiringMap<String, String>"}, {"name": "internalMap", "type": "Map<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemove_KeyExists", "primary_tested": ["PassiveExpiringMap.remove(String)"], "associated_methods": ["Map.put(String,String)", "Map.get(String)"], "external_dependencies": {"modules": ["PassiveExpiringMap", "Map", "HashMap"], "class_members": [{"name": "map", "type": "variable"}, {"name": "internalMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the remove functionality of PassiveExpiringMap when the key exists."}, {"name": "testRemove_KeyDoesNotExist", "primary_tested": ["PassiveExpiringMap.remove(String)"], "associated_methods": ["Map.get(String)"], "external_dependencies": {"modules": ["PassiveExpiringMap", "Map"], "class_members": [{"name": "map", "type": "variable"}, {"name": "internalMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the remove functionality of PassiveExpiringMap when the key does not exist."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_clearTest.java", "testclass_name": "ListOrderedMap_clearTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "ListOrderedMap_clearTest", "description": "Unit test for the clear method of ListOrderedMap.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testClear", "primary_tested": ["ListOrderedMap.clear()"], "associated_methods": ["ListOrderedMap.put(String,String)", "ListOrderedMap.size()", "ListOrderedMap.isEmpty()"], "external_dependencies": {"modules": ["ListOrderedMap", "HashMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the clear functionality of the ListOrderedMap, ensuring that the map is empty after clearing."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/UnmodifiableOrderedMap_entrySetTest.java", "testclass_name": "UnmodifiableOrderedMap_entrySetTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.OrderedMap;", "import org.apache.commons.collections4.map.UnmodifiableOrderedMap;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;", "import java.util.Set;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "UnmodifiableOrderedMap_entrySetTest", "description": "Tests the entrySet functionality of the UnmodifiableOrderedMap class.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testEntrySet", "primary_tested": ["UnmodifiableOrderedMap.entrySet()"], "external_dependencies": {"modules": ["UnmodifiableOrderedMap", "LinkedMap", "HashMap", "Map", "Set"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests whether the entrySet of the UnmodifiableOrderedMap contains all entries from the original map."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_removeTest.java", "testclass_name": "StaticBucketMap_removeTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "StaticBucketMap_removeTest", "description": "Unit tests for the remove functionality of the StaticBucketMap class.", "class_members": {"variables": [{"name": "map", "type": "StaticBucketMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveExistingKey", "primary_tested": ["StaticBucketMap.remove(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of an existing key from the StaticBucketMap."}, {"name": "testRemoveNonExistingKey", "primary_tested": ["StaticBucketMap.remove(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of a non-existing key from the StaticBucketMap."}, {"name": "testRemoveFromEmptyMap", "primary_tested": ["StaticBucketMap.remove(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of a key from an empty StaticBucketMap."}, {"name": "testRemoveHeadOfBucket", "primary_tested": ["StaticBucketMap.remove(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of the head element of a bucket in the StaticBucketMap."}, {"name": "testRemoveMiddleOfBucket", "primary_tested": ["StaticBucketMap.remove(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of a middle element of a bucket in the StaticBucketMap."}, {"name": "testRemoveTailOfBucket", "primary_tested": ["StaticBucketMap.remove(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of the tail element of a bucket in the StaticBucketMap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/TransformedSortedMap_tailMapTest.java", "testclass_name": "TransformedSortedMap_tailMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.functors.NOPTransformer;", "import org.junit.jupiter.api.Test;", "import java.util.SortedMap;", "import java.util.TreeMap;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNotNull;"], "name": "TransformedSortedMap_tailMapTest", "description": "Unit tests for the tailMap functionality of TransformedSortedMap.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testTailMap", "primary_tested": ["TransformedSortedMap.tailMap(Integer)"], "external_dependencies": {"modules": ["SortedMap", "TreeMap", "Transformer", "NOPTransformer", "TransformedSortedMap"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the tailMap functionality of the TransformedSortedMap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/TransformedSortedMap_transformedSortedMapTest.java", "testclass_name": "TransformedSortedMap_transformedSortedMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.Test;", "import java.util.SortedMap;", "import java.util.TreeMap;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "TransformedSortedMap_transformedSortedMapTest", "description": "Unit tests for the TransformedSortedMap class, specifically focusing on the transformedSortedMap method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testTransformedSortedMap_EmptyMap", "primary_tested": ["TransformedSortedMap.transformedSortedMap(SortedMap,Transformer,Transformer)"], "external_dependencies": {"modules": ["SortedMap", "TreeMap", "Transformer", "TransformedSortedMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the creation of a TransformedSortedMap from an empty map and verifies that the resulting map is empty."}, {"name": "testTransformedSortedMap_NonEmptyMap", "primary_tested": ["TransformedSortedMap.transformedSortedMap(SortedMap,Transformer,Transformer)"], "associated_methods": ["TransformedSortedMap.size()", "TransformedSortedMap.get(String)"], "external_dependencies": {"modules": ["SortedMap", "TreeMap", "Transformer", "TransformedSortedMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the creation of a TransformedSortedMap from a non-empty map, applying transformations to keys and values, and verifies the transformed map's size and content."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_sizeTest.java", "testclass_name": "CompositeCollection_sizeTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeCollection_sizeTest", "description": "Unit tests for the size method of the CompositeCollection class.", "class_members": {"variables": [{"name": "c", "type": "CompositeCollection<String>"}, {"name": "one", "type": "Collection<String>"}, {"name": "two", "type": "Collection<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testSizeEmpty", "primary_tested": ["CompositeCollection.size()"], "external_dependencies": {"modules": ["CompositeCollection"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method when the CompositeCollection is empty."}, {"name": "testSizeWithOneCollection", "primary_tested": ["CompositeCollection.size()"], "associated_methods": ["CompositeCollection.addComposited(Collection)"], "external_dependencies": {"modules": ["CompositeCollection", "Collection"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method when the CompositeCollection contains one collection."}, {"name": "testSizeWithMultipleCollections", "primary_tested": ["CompositeCollection.size()"], "associated_methods": ["CompositeCollection.addComposited(Collection,Collection)"], "external_dependencies": {"modules": ["CompositeCollection", "Collection"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method when the CompositeCollection contains multiple collections."}, {"name": "testSizeAfterClear", "primary_tested": ["CompositeCollection.size()"], "associated_methods": ["CompositeCollection.addComposited(Collection,Collection)", "CompositeCollection.clear()"], "external_dependencies": {"modules": ["CompositeCollection", "Collection"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method after clearing the CompositeCollection."}, {"name": "testSizeAfterAddAndRemove", "primary_tested": ["CompositeCollection.size()"], "associated_methods": ["CompositeCollection.addComposited(Collection)", "Collection.remove(Object)"], "external_dependencies": {"modules": ["CompositeCollection", "Collection"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method after adding and removing elements from the CompositeCollection."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/CompositeMap_entrySetTest.java", "testclass_name": "CompositeMap_entrySetTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Map;", "import java.util.Set;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeMap_entrySetTest", "description": "Unit tests for the entrySet functionality of the CompositeMap class.", "class_members": {"variables": [{"name": "compositeMap", "type": "CompositeMap<String, String>"}, {"name": "map1", "type": "Map<String, String>"}, {"name": "map2", "type": "Map<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEntrySet", "primary_tested": ["CompositeMap.entrySet()"], "associated_methods": ["Map.entrySet()"], "external_dependencies": {"modules": ["CompositeMap", "Map", "Set"], "class_members": [{"name": "compositeMap", "type": "variable"}, {"name": "map1", "type": "variable"}, {"name": "map2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the entrySet functionality of the CompositeMap, ensuring it contains entries from both composed maps."}, {"name": "testEntrySetAfterAddComposited", "primary_tested": ["CompositeMap.addComposited(Map<String, String>)"], "associated_methods": ["CompositeMap.entrySet()"], "external_dependencies": {"modules": ["CompositeMap", "Map", "Set"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the entrySet functionality of the CompositeMap after adding a new composed map, ensuring the entrySet contains entries from the newly added map."}, {"name": "testEntrySetAfterRemoveComposited", "primary_tested": ["CompositeMap.removeComposited(Map<String, String>)"], "associated_methods": ["CompositeMap.entrySet()"], "external_dependencies": {"modules": ["CompositeMap", "Map", "Set"], "class_members": [{"name": "compositeMap", "type": "variable"}, {"name": "map2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the entrySet functionality of the CompositeMap after removing a composed map, ensuring the entrySet no longer contains entries from the removed map."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_clearTest.java", "testclass_name": "StaticBucketMap_clearTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "StaticBucketMap_clearTest", "description": "Unit tests for the clear method of StaticBucketMap.", "class_members": {"variables": [{"name": "map", "type": "StaticBucketMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testClear", "primary_tested": ["StaticBucketMap.clear()"], "associated_methods": ["StaticBucketMap.put(String,String)", "StaticBucketMap.size()"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clear functionality of the StaticBucketMap, ensuring that all entries are removed and the size is reset to zero."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_isEmptyTest.java", "testclass_name": "PassiveExpiringMap_isEmptyTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "PassiveExpiringMap_isEmptyTest", "description": "Unit tests for the isEmpty method of PassiveExpiringMap.", "class_members": {"variables": [{"name": "expiringMap", "type": "PassiveExpiringMap<Integer, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testIsEmpty_EmptyMap", "primary_tested": ["PassiveExpiringMap.isEmpty()"], "external_dependencies": {"modules": ["PassiveExpiringMap"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isEmpty method when the map is empty."}, {"name": "testIsEmpty_NonEmptyMap", "primary_tested": ["PassiveExpiringMap.isEmpty()"], "associated_methods": ["PassiveExpiringMap.put(Integer,String)"], "external_dependencies": {"modules": ["PassiveExpiringMap"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isEmpty method when the map is non-empty."}, {"name": "testIsEmpty_ExpiredEntries", "primary_tested": ["PassiveExpiringMap.isEmpty()"], "associated_methods": ["PassiveExpiringMap.put(Integer,String)"], "external_dependencies": {"modules": ["PassiveExpiringMap"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isEmpty method when the map contains expired entries."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_containsAllTest.java", "testclass_name": "CompositeCollection_containsAllTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeCollection_containsAllTest", "description": "Unit tests for the containsAll method of the CompositeCollection class.", "class_members": {"variables": [{"name": "c", "type": "CompositeCollection<String>"}, {"name": "one", "type": "Collection<String>"}, {"name": "two", "type": "Collection<String>"}]}, "fixtures": ["setUpTest"], "test_cases": [{"name": "testContainsAllWithNullCollection", "primary_tested": ["CompositeCollection.containsAll(Collection)"], "external_dependencies": {"modules": ["CompositeCollection"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the containsAll method with a null collection."}, {"name": "testContainsAllWithEmptyCollection", "primary_tested": ["CompositeCollection.containsAll(Collection)"], "external_dependencies": {"modules": ["CompositeCollection", "ArrayList"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the containsAll method with an empty collection."}, {"name": "testContainsAllWithSingleCollection", "primary_tested": ["CompositeCollection.containsAll(Collection)"], "associated_methods": ["CompositeCollection.addComposited(Collection)"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet", "Arrays"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the containsAll method with a single collection."}, {"name": "testContainsAllWithMultipleCollections", "primary_tested": ["CompositeCollection.containsAll(Collection)"], "associated_methods": ["CompositeCollection.addComposited(Collection,Collection)"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet", "Arrays"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the containsAll method with multiple collections."}, {"name": "testContainsAllWithPartialMatch", "primary_tested": ["CompositeCollection.containsAll(Collection)"], "associated_methods": ["CompositeCollection.addComposited(Collection,Collection)"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet", "Arrays"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the containsAll method with a partial match in multiple collections."}, {"name": "testContainsAllWithEmptyComposite", "primary_tested": ["CompositeCollection.containsAll(Collection)"], "external_dependencies": {"modules": ["CompositeCollection", "Arrays"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the containsAll method with an empty composite collection."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/SingletonMap_entrySetTest.java", "testclass_name": "SingletonMap_entrySetTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Map;", "import java.util.Set;", "import org.apache.commons.collections4.keyvalue.TiedMapEntry;", "import org.junit.jupiter.api.Test;"], "name": "SingletonMap_entrySetTest", "description": "Unit tests for the entrySet method of the SingletonMap class.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testEntrySet", "primary_tested": ["SingletonMap.entrySet()"], "associated_methods": ["Set.size()", "Set.iterator()", "Iterator.next()", "TiedMapEntry.equals(Object)"], "external_dependencies": {"modules": ["SingletonMap", "Map", "Set", "TiedMapEntry"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the entrySet method of the SingletonMap to ensure it returns a set with the correct size and type of entries."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/TransformedSortedMap_headMapTest.java", "testclass_name": "TransformedSortedMap_headMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.functors.NOPTransformer;", "import org.junit.jupiter.api.Test;", "import java.util.SortedMap;", "import java.util.TreeMap;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "TransformedSortedMap_headMapTest", "description": "Unit tests for the headMap functionality of TransformedSortedMap.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testHeadMap", "primary_tested": ["TransformedSortedMap.headMap(Integer)"], "external_dependencies": {"modules": ["SortedMap", "TreeMap", "Transformer", "NOPTransformer", "TransformedSortedMap"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the headMap functionality of the TransformedSortedMap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/CompositeMap_removeTest.java", "testclass_name": "CompositeMap_removeTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeMap_removeTest", "description": "Unit tests for the remove functionality of the CompositeMap class.", "class_members": {"variables": [{"name": "compositeMap", "type": "CompositeMap<String, String>"}, {"name": "map1", "type": "Map<String, String>"}, {"name": "map2", "type": "Map<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveExistingKey", "primary_tested": ["CompositeMap.remove(String)"], "external_dependencies": {"modules": ["CompositeMap", "Map", "HashMap"], "class_members": [{"name": "compositeMap", "type": "variable"}, {"name": "map1", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of an existing key from the CompositeMap."}, {"name": "testRemoveNonExistingKey", "primary_tested": ["CompositeMap.remove(String)"], "external_dependencies": {"modules": ["CompositeMap", "Map", "HashMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of a non-existing key from the CompositeMap."}, {"name": "testRemoveFromMultipleMaps", "primary_tested": ["CompositeMap.remove(String)"], "external_dependencies": {"modules": ["CompositeMap", "Map", "HashMap"], "class_members": [{"name": "compositeMap", "type": "variable"}, {"name": "map1", "type": "variable"}, {"name": "map2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of a key that exists in multiple maps within the CompositeMap."}, {"name": "testRemoveWithEmptyCompositeMap", "primary_tested": ["CompositeMap.remove(String)"], "external_dependencies": {"modules": ["CompositeMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of a key from an empty CompositeMap."}, {"name": "testRemoveWithNullKey", "primary_tested": ["CompositeMap.remove(String)"], "external_dependencies": {"modules": ["CompositeMap", "Map", "HashMap"], "class_members": [{"name": "compositeMap", "type": "variable"}, {"name": "map1", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of a null key from the CompositeMap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_nextKeyTest.java", "testclass_name": "ListOrderedMap_nextKeyTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;"], "name": "ListOrderedMap_nextKeyTest", "description": "Unit tests for the nextKey method in the ListOrderedMap class.", "class_members": {"variables": [{"name": "listOrderedMap", "type": "ListOrderedMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNextKey_ValidKey", "primary_tested": ["ListOrderedMap.nextKey(String)"], "external_dependencies": {"modules": ["ListOrderedMap", "HashMap"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the nextKey method with valid keys in the ListOrderedMap."}, {"name": "testNextKey_LastKey", "primary_tested": ["ListOrderedMap.nextKey(String)"], "external_dependencies": {"modules": ["ListOrderedMap", "HashMap"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the nextKey method with the last key in the ListOrderedMap."}, {"name": "testNextKey_NonExistentKey", "primary_tested": ["ListOrderedMap.nextKey(String)"], "external_dependencies": {"modules": ["ListOrderedMap", "HashMap"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the nextKey method with a non-existent key in the ListOrderedMap."}, {"name": "testNextKey_EmptyMap", "primary_tested": ["ListOrderedMap.nextKey(String)"], "external_dependencies": {"modules": ["ListOrderedMap", "HashMap"]}, "category": "unit", "description": "Tests the nextKey method with an empty ListOrderedMap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_clearTest.java", "testclass_name": "PassiveExpiringMap_clearTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "PassiveExpiringMap_clearTest", "description": "Unit tests for the clear functionality of the PassiveExpiringMap class.", "class_members": {"variables": [{"name": "expiringMap", "type": "PassiveExpiringMap<Integer, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testClear", "primary_tested": ["PassiveExpiringMap.clear()"], "external_dependencies": {"modules": ["PassiveExpiringMap", "HashMap"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clear functionality of the PassiveExpiringMap, ensuring all entries are removed."}, {"name": "testClearWithExpiredEntries", "primary_tested": ["PassiveExpiringMap.clear()"], "external_dependencies": {"modules": ["PassiveExpiringMap", "HashMap"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clear functionality of the PassiveExpiringMap when entries are expired, ensuring all entries are removed."}, {"name": "testClearWithMixedEntries", "primary_tested": ["PassiveExpiringMap.clear()"], "external_dependencies": {"modules": ["PassiveExpiringMap", "HashMap"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clear functionality of the PassiveExpiringMap when entries are mixed (some expired, some not), ensuring all entries are removed."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_removeMultiKeyTest.java", "testclass_name": "MultiKeyMap_removeMultiKeyTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.*;", "import org.apache.commons.collections4.keyvalue.MultiKey;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "MultiKeyMap_removeMultiKeyTest", "description": "Unit tests for the removeMultiKey functionality of the MultiKeyMap class.", "class_members": {"variables": [{"name": "multiKeyMap", "type": "MultiKeyMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveMultiKey_ExistingKey", "primary_tested": ["MultiKeyMap.removeMultiKey(String,String)"], "associated_methods": ["MultiKeyMap.put(String,String,String)", "MultiKeyMap.containsKey(String,String)"], "external_dependencies": {"modules": ["MultiKeyMap", "MultiKey"], "class_members": [{"name": "multiKeyMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of an existing key from the MultiKeyMap."}, {"name": "testRemoveMultiKey_NonExistingKey", "primary_tested": ["MultiKeyMap.removeMultiKey(String,String)"], "external_dependencies": {"modules": ["MultiKeyMap", "MultiKey"], "class_members": [{"name": "multiKeyMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of a non-existing key from the MultiKeyMap."}, {"name": "testRemoveMultiKey_NullKey", "primary_tested": ["MultiKeyMap.removeMultiKey(String,String)"], "associated_methods": ["MultiKeyMap.put(String,String,String)", "MultiKeyMap.containsKey(String,String)"], "external_dependencies": {"modules": ["MultiKeyMap", "MultiKey"], "class_members": [{"name": "multiKeyMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of a key with a null value from the MultiKeyMap."}, {"name": "testRemoveMultiKey_MultipleEntries", "primary_tested": ["MultiKeyMap.removeMultiKey(String,String)"], "associated_methods": ["MultiKeyMap.put(String,String,String)", "MultiKeyMap.containsKey(String,String)"], "external_dependencies": {"modules": ["MultiKeyMap", "MultiKey"], "class_members": [{"name": "multiKeyMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of multiple entries from the MultiKeyMap."}, {"name": "testRemoveMultiKey_SameHashCodeDifferentKeys", "primary_tested": ["MultiKeyMap.removeMultiKey(String,String)"], "associated_methods": ["MultiKeyMap.put(String,String,String)", "MultiKeyMap.containsKey(String,String)"], "external_dependencies": {"modules": ["MultiKeyMap", "MultiKey"], "class_members": [{"name": "multiKeyMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of keys with the same hash code but different values from the MultiKeyMap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_getTest.java", "testclass_name": "MultiKeyMap_getTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.apache.commons.collections4.keyvalue.MultiKey;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "MultiKeyMap_getTest", "description": "Unit tests for the get method of MultiKeyMap class.", "class_members": {"variables": [{"name": "multiKeyMap", "type": "MultiKeyMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetExistingKey", "primary_tested": ["MultiKeyMap.get(String,String)"], "external_dependencies": {"modules": ["MultiKeyMap"], "class_members": [{"name": "multiKeyMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method of MultiKeyMap for an existing key."}, {"name": "testGetNonExistingKey", "primary_tested": ["MultiKeyMap.get(String,String)"], "external_dependencies": {"modules": ["MultiKeyMap"], "class_members": [{"name": "multiKeyMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method of MultiKeyMap for a non-existing key."}, {"name": "testGetWithNullKey", "primary_tested": ["MultiKeyMap.get(String,String)"], "external_dependencies": {"modules": ["MultiKeyMap"], "class_members": [{"name": "multiKeyMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method of MultiKeyMap with a null key."}, {"name": "testGetWithBothNullKeys", "primary_tested": ["MultiKeyMap.get(String,String)"], "external_dependencies": {"modules": ["MultiKeyMap"], "class_members": [{"name": "multiKeyMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method of MultiKeyMap with both keys being null."}, {"name": "testGetAfterRemove", "primary_tested": ["MultiKeyMap.get(String,String)"], "associated_methods": ["MultiKeyMap.removeMultiKey(String,String)"], "external_dependencies": {"modules": ["MultiKeyMap"], "class_members": [{"name": "multiKeyMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method of MultiKeyMap after removing a key."}, {"name": "testGetWithMultipleEntries", "primary_tested": ["MultiKeyMap.get(String,String)"], "external_dependencies": {"modules": ["MultiKeyMap"], "class_members": [{"name": "multiKeyMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method of MultiKeyMap with multiple entries."}, {"name": "testGetWithSameHashCodeDifferentKeys", "primary_tested": ["MultiKeyMap.get(String,String)"], "external_dependencies": {"modules": ["MultiKeyMap", "String"], "class_members": [{"name": "multiKeyMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method of MultiKeyMap with keys having the same hash code but different values."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/TransformedMap_transformedMapTest.java", "testclass_name": "TransformedMap_transformedMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "TransformedMap_transformedMapTest", "description": "Unit tests for the TransformedMap class, specifically testing the transformedMap method with both non-empty and empty maps.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testTransformedMapWithNonEmptyMap", "primary_tested": ["TransformedMap.transformedMap(Map<String,String>,Transformer<String,String>,Transformer<String,String>)"], "associated_methods": ["TransformedMap.size()", "TransformedMap.containsKey(String)", "TransformedMap.containsValue(String)"], "external_dependencies": {"modules": ["TransformedMap", "Transformer", "HashMap", "Map"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformedMap method with a non-empty map, ensuring that the keys and values are correctly transformed."}, {"name": "testTransformedMapWithEmptyMap", "primary_tested": ["TransformedMap.transformedMap(Map<String,String>,Transformer<String,String>,Transformer<String,String>)"], "associated_methods": ["TransformedMap.isEmpty()"], "external_dependencies": {"modules": ["TransformedMap", "Transformer", "HashMap", "Map"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformedMap method with an empty map, ensuring that the resulting map is also empty."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_cloneTest.java", "testclass_name": "MultiKeyMap_cloneTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "MultiKeyMap_cloneTest", "description": "Unit tests for the clone functionality of the MultiKeyMap class.", "class_members": {"variables": [{"name": "multiKeyMap", "type": "MultiKeyMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testClone", "primary_tested": ["MultiKeyMap.clone()"], "associated_methods": ["MultiKeyMap.put(String,String,String)", "MultiKeyMap.size()", "MultiKeyMap.get(String,String)"], "external_dependencies": {"modules": ["MultiKeyMap"], "class_members": [{"name": "multiKeyMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clone functionality of the MultiKeyMap with a single entry."}, {"name": "testCloneEmptyMap", "primary_tested": ["MultiKeyMap.clone()"], "associated_methods": ["MultiKeyMap.size()"], "external_dependencies": {"modules": ["MultiKeyMap"], "class_members": [{"name": "multiKeyMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clone functionality of an empty MultiKeyMap."}, {"name": "testCloneWithMultipleKeys", "primary_tested": ["MultiKeyMap.clone()"], "associated_methods": ["MultiKeyMap.put(String,String,String,String,String,String)", "MultiKeyMap.size()", "MultiKeyMap.get(String,String,String,String,String)"], "external_dependencies": {"modules": ["MultiKeyMap"], "class_members": [{"name": "multiKeyMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clone functionality of the MultiKeyMap with multiple keys."}, {"name": "testCloneWithNullValue", "primary_tested": ["MultiKeyMap.clone()"], "associated_methods": ["MultiKeyMap.put(String,String,String)", "MultiKeyMap.size()", "MultiKeyMap.get(String,String)"], "external_dependencies": {"modules": ["MultiKeyMap"], "class_members": [{"name": "multiKeyMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clone functionality of the MultiKeyMap with a null value."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/SingletonMap_cloneTest.java", "testclass_name": "SingletonMap_cloneTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "SingletonMap_cloneTest", "description": "Unit tests for the clone functionality of the SingletonMap class.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testClone", "primary_tested": ["SingletonMap.clone()"], "associated_methods": ["SingletonMap.getKey()", "SingletonMap.getValue()"], "external_dependencies": {"modules": ["SingletonMap"]}, "category": "unit", "description": "Tests the clone functionality of the SingletonMap, ensuring that the cloned instance is not the same object but has the same key and value."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_putAllTest.java", "testclass_name": "ListOrderedMap_putAllTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ListOrderedMap_putAllTest", "description": "Unit tests for the putAll method of the ListOrderedMap class.", "class_members": {"variables": [{"name": "listOrderedMap", "type": "ListOrderedMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPutAll_IndexOutOfBoundsException", "primary_tested": ["ListOrderedMap.putAll(int,Map)"], "external_dependencies": {"modules": ["ListOrderedMap", "HashMap", "Map", "IndexOutOfBoundsException"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that an IndexOutOfBoundsException is thrown when an invalid index is provided to the putAll method."}, {"name": "testPutAll_ValidIndex", "primary_tested": ["ListOrderedMap.putAll(int,Map)"], "associated_methods": ["ListOrderedMap.size()", "ListOrderedMap.get(Object)"], "external_dependencies": {"modules": ["ListOrderedMap", "HashMap", "Map"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the putAll method with a valid index, ensuring the map is correctly populated."}, {"name": "testPutAll_ReplaceExistingKey", "primary_tested": ["ListOrderedMap.putAll(int,Map)"], "associated_methods": ["ListOrderedMap.size()", "ListOrderedMap.get(Object)"], "external_dependencies": {"modules": ["ListOrderedMap", "HashMap", "Map"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the putAll method when replacing an existing key, ensuring the new value is correctly set."}, {"name": "testPutAll_EmptyMap", "primary_tested": ["ListOrderedMap.putAll(int,Map)"], "associated_methods": ["ListOrderedMap.isEmpty()"], "external_dependencies": {"modules": ["ListOrderedMap", "HashMap", "Map"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the putAll method with an empty map, ensuring the listOrderedMap remains empty."}, {"name": "testPutAll_MultipleCalls", "primary_tested": ["ListOrderedMap.putAll(int,Map)"], "associated_methods": ["ListOrderedMap.size()", "ListOrderedMap.get(Object)"], "external_dependencies": {"modules": ["ListOrderedMap", "HashMap", "Map"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests multiple calls to the putAll method, ensuring the map is correctly populated after each call."}, {"name": "testPutAll_RemoveAfterPut", "primary_tested": ["ListOrderedMap.putAll(int,Map)"], "associated_methods": ["ListOrderedMap.remove(Object)", "ListOrderedMap.size()", "ListOrderedMap.containsKey(Object)", "ListOrderedMap.get(Object)"], "external_dependencies": {"modules": ["ListOrderedMap", "HashMap", "Map"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the putAll method followed by a remove operation, ensuring the map is correctly updated."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/TransformedMap_putTest.java", "testclass_name": "TransformedMap_putTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import java.util.HashMap;", "import java.util.Map;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "TransformedMap_putTest", "description": "Unit tests for the put method of TransformedMap, focusing on key and value transformations.", "class_members": {"variables": [{"name": "transformedMap", "type": "TransformedMap<String, String>"}, {"name": "keyTransformer", "type": "Transformer<String, String>"}, {"name": "valueTransformer", "type": "Transformer<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPutWithTransformedKeyAndValue", "primary_tested": ["TransformedMap.put(String,String)"], "associated_methods": ["TransformedMap.get(String)"], "external_dependencies": {"modules": ["TransformedMap", "Transformer", "HashMap"], "class_members": [{"name": "transformedMap", "type": "variable"}, {"name": "keyTransformer", "type": "variable"}, {"name": "valueTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the put method with transformed key and value."}, {"name": "testPutWithNullKeyTransformer", "primary_tested": ["TransformedMap.put(String,String)"], "associated_methods": ["TransformedMap.get(String)"], "external_dependencies": {"modules": ["TransformedMap", "Transformer", "HashMap"], "class_members": [{"name": "transformedMap", "type": "variable"}, {"name": "valueTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the put method with a null key transformer."}, {"name": "testPutWithNullValueTransformer", "primary_tested": ["TransformedMap.put(String,String)"], "associated_methods": ["TransformedMap.get(String)"], "external_dependencies": {"modules": ["TransformedMap", "Transformer", "HashMap"], "class_members": [{"name": "transformedMap", "type": "variable"}, {"name": "keyTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the put method with a null value transformer."}, {"name": "testPutWithNullTransformers", "primary_tested": ["TransformedMap.put(String,String)"], "associated_methods": ["TransformedMap.get(String)"], "external_dependencies": {"modules": ["TransformedMap", "Transformer", "HashMap"], "class_members": [{"name": "transformedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the put method with both null key and value transformers."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/SingletonMap_getTest.java", "testclass_name": "SingletonMap_getTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import org.junit.jupiter.api.Test;"], "name": "SingletonMap_getTest", "description": "Unit tests for the get method of the SingletonMap class.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testGet_KeyMatches", "primary_tested": ["SingletonMap.get(String)"], "external_dependencies": {"modules": ["SingletonMap"]}, "category": "unit", "description": "Tests the get method of SingletonMap when the key matches."}, {"name": "testGet_KeyDoesNotMatch", "primary_tested": ["SingletonMap.get(String)"], "external_dependencies": {"modules": ["SingletonMap"]}, "category": "unit", "description": "Tests the get method of SingletonMap when the key does not match."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_entrySetTest.java", "testclass_name": "PassiveExpiringMap_entrySetTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.HashMap;", "import java.util.Map;", "import java.util.Set;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "PassiveExpiringMap_entrySetTest", "description": "Unit tests for the entrySet method of PassiveExpiringMap, focusing on the behavior with expired and non-expired entries.", "class_members": {"variables": [{"name": "expiringMap", "type": "PassiveExpiringMap<Integer, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEntrySetWithExpiredEntries", "primary_tested": ["PassiveExpiringMap.entrySet()"], "external_dependencies": {"modules": ["PassiveExpiringMap", "Map", "Set"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the entrySet method when all entries have expired."}, {"name": "testEntrySetWithNonExpiredEntries", "primary_tested": ["PassiveExpiringMap.entrySet()"], "external_dependencies": {"modules": ["PassiveExpiringMap", "Map", "Set"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the entrySet method when all entries are non-expired."}, {"name": "testEntrySetAfterPartialExpiration", "primary_tested": ["PassiveExpiringMap.entrySet()"], "external_dependencies": {"modules": ["PassiveExpiringMap", "Map", "Set"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the entrySet method after some entries have expired and new entries are added."}, {"name": "testEntrySetAfterClear", "primary_tested": ["PassiveExpiringMap.entrySet()"], "associated_methods": ["PassiveExpiringMap.clear()"], "external_dependencies": {"modules": ["PassiveExpiringMap", "Map", "Set"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the entrySet method after clearing all entries."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/SingletonMap_putAllTest.java", "testclass_name": "SingletonMap_putAllTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;"], "name": "SingletonMap_putAllTest", "description": "Tests for the putAll method of the SingletonMap class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testPutAllWithEmptyMap", "primary_tested": ["SingletonMap.putAll(Map)"], "external_dependencies": {"modules": ["SingletonMap", "HashMap", "Map"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the putAll method with an empty map, ensuring the SingletonMap remains unchanged."}, {"name": "testPutAllWithSingleEntryMap", "primary_tested": ["SingletonMap.putAll(Map)"], "external_dependencies": {"modules": ["SingletonMap", "HashMap", "Map"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the putAll method with a map containing a single entry, ensuring the SingletonMap updates the value."}, {"name": "testPutAllWithMultipleEntriesMap", "primary_tested": ["SingletonMap.putAll(Map)"], "external_dependencies": {"modules": ["SingletonMap", "HashMap", "Map"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the putAll method with a map containing multiple entries, ensuring an IllegalArgumentException is thrown."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_hashCodeTest.java", "testclass_name": "StaticBucketMap_hashCodeTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "StaticBucketMap_hashCodeTest", "description": "Unit tests for the hashCode method of the StaticBucketMap class.", "class_members": {"variables": [{"name": "map", "type": "StaticBucketMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testHashCodeWithEmptyMap", "primary_tested": ["StaticBucketMap.hashCode()"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hashCode method of an empty StaticBucketMap."}, {"name": "testHashCodeWithSingleEntry", "primary_tested": ["StaticBucketMap.hashCode()"], "associated_methods": ["StaticBucketMap.put(String,String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hashCode method of a StaticBucketMap with a single entry."}, {"name": "testHashCodeWithMultipleEntries", "primary_tested": ["StaticBucketMap.hashCode()"], "associated_methods": ["StaticBucketMap.put(String,String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hashCode method of a StaticBucketMap with multiple entries."}, {"name": "testHashCodeWithNullKey", "primary_tested": ["StaticBucketMap.hashCode()"], "associated_methods": ["StaticBucketMap.put(String,String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hashCode method of a StaticBucketMap with a null key."}, {"name": "testHashCodeWithNullValue", "primary_tested": ["StaticBucketMap.hashCode()"], "associated_methods": ["StaticBucketMap.put(String,String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hashCode method of a StaticBucketMap with a null value."}, {"name": "testHashCodeWithMultipleBuckets", "primary_tested": ["StaticBucketMap.hashCode()"], "associated_methods": ["StaticBucketMap.put(String,String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hashCode method of a StaticBucketMap with multiple entries across different buckets."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/sequence/SequencesComparator_getScriptTest.java", "testclass_name": "SequencesComparator_getScriptTest", "dependencies": ["package org.apache.commons.collections4.sequence;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "SequencesComparator_getScriptTest", "description": "Unit test for the getScript method of the SequencesComparator class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testGetScript", "primary_tested": ["SequencesComparator.getScript()"], "external_dependencies": {"modules": ["SequencesComparator", "EditScript", "Arrays", "List"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the getScript method of the SequencesComparator class by comparing two sequences and verifying the modifications and LCS length."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/LinkedMap_indexOfTest.java", "testclass_name": "LinkedMap_indexOfTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.CollectionUtils;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "LinkedMap_indexOfTest", "description": "Unit tests for the indexOf method in the LinkedMap class.", "class_members": {"variables": [{"name": "linkedMap", "type": "LinkedMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testIndexOfExistingKey", "primary_tested": ["LinkedMap.indexOf(String)"], "external_dependencies": {"modules": ["LinkedMap"], "class_members": [{"name": "linkedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the indexOf method for existing keys in the LinkedMap."}, {"name": "testIndexOfNonExistingKey", "primary_tested": ["LinkedMap.indexOf(String)"], "external_dependencies": {"modules": ["LinkedMap", "CollectionUtils"], "class_members": [{"name": "linkedMap", "type": "variable"}], "project_specific_resources": ["CollectionUtils.INDEX_NOT_FOUND"]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the indexOf method for a non-existing key in the LinkedMap."}, {"name": "testIndexOfNullKey", "primary_tested": ["LinkedMap.indexOf(String)"], "external_dependencies": {"modules": ["LinkedMap", "CollectionUtils"], "class_members": [{"name": "linkedMap", "type": "variable"}], "project_specific_resources": ["CollectionUtils.INDEX_NOT_FOUND"]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the indexOf method for a null key in the LinkedMap."}, {"name": "testIndexOfAfterRemove", "primary_tested": ["LinkedMap.indexOf(String)"], "associated_methods": ["LinkedMap.remove(Object)"], "external_dependencies": {"modules": ["LinkedMap", "CollectionUtils"], "class_members": [{"name": "linkedMap", "type": "variable"}], "project_specific_resources": ["CollectionUtils.INDEX_NOT_FOUND"]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the indexOf method after removing a key from the LinkedMap."}, {"name": "testIndexOfAfterAdd", "primary_tested": ["LinkedMap.indexOf(String)"], "associated_methods": ["LinkedMap.put(Object,Object)"], "external_dependencies": {"modules": ["LinkedMap"], "class_members": [{"name": "linkedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the indexOf method after adding a new key to the LinkedMap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/CompositeMap_addCompositedTest.java", "testclass_name": "CompositeMap_addCompositedTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.Collection;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeMap_addCompositedTest", "description": "Unit tests for the addComposited method of the CompositeMap class.", "class_members": {"variables": [{"name": "compositeMap", "type": "CompositeMap<String, String>"}, {"name": "map1", "type": "Map<String, String>"}, {"name": "map2", "type": "Map<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAddCompositedNoCollision", "primary_tested": ["CompositeMap.addComposited(Map<String, String>)"], "associated_methods": ["CompositeMap.size()", "CompositeMap.containsKey(String)"], "external_dependencies": {"modules": ["CompositeMap", "Map", "HashMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests adding a map to the composite map without any key collisions."}, {"name": "testAddCompositedWithCollisionNoMutator", "primary_tested": ["CompositeMap.addComposited(Map<String, String>)"], "associated_methods": ["CompositeMap.setMutator(CompositeMap.MapMutator<String, String>)"], "external_dependencies": {"modules": ["CompositeMap", "Map", "HashMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests adding a map to the composite map with key collisions but without a mutator, expecting an IllegalArgumentException."}, {"name": "testAddCompositedWithCollisionWithMutator", "primary_tested": ["CompositeMap.addComposited(Map<String, String>)"], "associated_methods": ["CompositeMap.setMutator(CompositeMap.MapMutator<String, String>)", "CompositeMap.size()", "CompositeMap.containsKey(String)"], "external_dependencies": {"modules": ["CompositeMap", "Map", "HashMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests adding a map to the composite map with key collisions and with a mutator."}, {"name": "testAddCompositedNullMap", "primary_tested": ["CompositeMap.addComposited(Map<String, String>)"], "associated_methods": ["CompositeMap.size()"], "external_dependencies": {"modules": ["CompositeMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests adding a null map to the composite map."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/CompositeMap_containsValueTest.java", "testclass_name": "CompositeMap_containsValueTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeMap_containsValueTest", "description": "Unit tests for the containsValue method in CompositeMap.", "class_members": {"variables": [{"name": "compositeMap", "type": "CompositeMap<String, String>"}, {"name": "map1", "type": "Map<String, String>"}, {"name": "map2", "type": "Map<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testContainsValue_ValuePresentInFirstMap", "primary_tested": ["CompositeMap.containsValue(String)"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the containsValue method correctly identifies a value present in the first map."}, {"name": "testContainsValue_ValuePresentInSecondMap", "primary_tested": ["CompositeMap.containsValue(String)"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the containsValue method correctly identifies a value present in the second map."}, {"name": "testContainsValue_ValueNotPresent", "primary_tested": ["CompositeMap.containsValue(String)"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the containsValue method correctly identifies a value not present in any map."}, {"name": "testContainsValue_NullValuePresent", "primary_tested": ["CompositeMap.containsValue(String)"], "associated_methods": ["Map.put(String,String)"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}, {"name": "map1", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the containsValue method correctly identifies a null value present in the map."}, {"name": "testContainsValue_NullValueNotPresent", "primary_tested": ["CompositeMap.containsValue(String)"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the containsValue method correctly identifies a null value not present in any map."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/UnmodifiableOrderedMap_unmodifiableOrderedMapTest.java", "testclass_name": "UnmodifiableOrderedMap_unmodifiableOrderedMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.OrderedMap;", "import org.apache.commons.collections4.Unmodifiable;", "import org.apache.commons.collections4.map.ListOrderedMap;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "UnmodifiableOrderedMap_unmodifiableOrderedMapTest", "description": "Tests for the UnmodifiableOrderedMap class, focusing on the unmodifiableOrderedMap method.", "class_members": {"variables": [{"name": "modifiableMap", "type": "OrderedMap<String, String>"}, {"name": "unmodifiableMap", "type": "OrderedMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testUnmodifiableOrderedMapWithModifiableMap", "primary_tested": ["UnmodifiableOrderedMap.unmodifiableOrderedMap(OrderedMap<String, String>)"], "external_dependencies": {"modules": ["UnmodifiableOrderedMap", "OrderedMap"], "class_members": [{"name": "modifiableMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the creation of an unmodifiable map from a modifiable map and verifies its properties."}, {"name": "testUnmodifiableOrderedMapWithUnmodifiableMap", "primary_tested": ["UnmodifiableOrderedMap.unmodifiableOrderedMap(OrderedMap<String, String>)"], "external_dependencies": {"modules": ["UnmodifiableOrderedMap", "OrderedMap"], "class_members": [{"name": "unmodifiableMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the creation of an unmodifiable map from an already unmodifiable map and verifies it returns the same instance."}, {"name": "testUnmodifiableOrderedMapWithNullMap", "primary_tested": ["UnmodifiableOrderedMap.unmodifiableOrderedMap(OrderedMap<String, String>)"], "external_dependencies": {"modules": ["UnmodifiableOrderedMap"]}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of the unmodifiableOrderedMap method when a null map is provided, expecting a NullPointerException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_putAllTest.java", "testclass_name": "PassiveExpiringMap_putAllTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.Test;"], "name": "PassiveExpiringMap_putAllTest", "description": "Unit tests for the putAll method of PassiveExpiringMap.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testPutAll", "primary_tested": ["PassiveExpiringMap.putAll(Map)"], "associated_methods": ["PassiveExpiringMap.size()", "PassiveExpiringMap.containsKey(String)"], "external_dependencies": {"modules": ["PassiveExpiringMap", "HashMap", "Map"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the putAll functionality of the PassiveExpiringMap, ensuring that all entries from the provided map are correctly added and can be queried."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_containsKeyTest.java", "testclass_name": "StaticBucketMap_containsKeyTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "StaticBucketMap_containsKeyTest", "description": "Unit tests for the containsKey method of the StaticBucketMap class.", "class_members": {"variables": [{"name": "map", "type": "StaticBucketMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testContainsKey_KeyExists", "primary_tested": ["StaticBucketMap.containsKey(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsKey method when the key exists in the map."}, {"name": "testContainsKey_KeyDoesNotExist", "primary_tested": ["StaticBucketMap.containsKey(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsKey method when the key does not exist in the map."}, {"name": "testContainsKey_NullKeyExists", "primary_tested": ["StaticBucketMap.containsKey(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsKey method when the null key exists in the map."}, {"name": "testContainsKey_NullKeyDoesNotExist", "primary_tested": ["StaticBucketMap.containsKey(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsKey method when the null key does not exist in the map."}, {"name": "testContainsKey_AfterRemove", "primary_tested": ["StaticBucketMap.containsKey(String)"], "associated_methods": ["StaticBucketMap.remove(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsKey method after removing a key from the map."}, {"name": "testContainsKey_AfterClear", "primary_tested": ["StaticBucketMap.containsKey(String)"], "associated_methods": ["StaticBucketMap.clear()"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsKey method after clearing the map."}, {"name": "testContainsKey_AfterPutAll", "primary_tested": ["StaticBucketMap.containsKey(String)"], "associated_methods": ["StaticBucketMap.putAll(Map<? extends String, ? extends String>)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsKey method after adding all entries from another map."}, {"name": "testContainsKey_AfterPut", "primary_tested": ["StaticBucketMap.containsKey(String)"], "associated_methods": ["StaticBucketMap.put(String,String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsKey method after adding a key-value pair to the map."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_removeMappingTest.java", "testclass_name": "MultiValueMap_removeMappingTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Collection;", "import java.util.HashMap;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "MultiValueMap_removeMappingTest", "description": "Unit tests for the removeMapping method in the MultiValueMap class.", "class_members": {"variables": [{"name": "map", "type": "MultiValueMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveMapping_KeyExistsAndValueExists", "primary_tested": ["MultiValueMap.removeMapping(String,String)"], "associated_methods": ["MultiValueMap.put(String,String)", "MultiValueMap.containsValue(String,String)"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeMapping method when the key exists and the value exists in the map."}, {"name": "testRemoveMapping_KeyExistsAndValueDoesNotExist", "primary_tested": ["MultiValueMap.removeMapping(String,String)"], "associated_methods": ["MultiValueMap.put(String,String)", "MultiValueMap.containsValue(String,String)"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeMapping method when the key exists but the value does not exist in the map."}, {"name": "testRemoveMapping_KeyDoesNotExist", "primary_tested": ["MultiValueMap.removeMapping(String,String)"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeMapping method when the key does not exist in the map."}, {"name": "testRemoveMapping_KeyExistsAndCollectionBecomesEmpty", "primary_tested": ["MultiValueMap.removeMapping(String,String)"], "associated_methods": ["MultiValueMap.put(String,String)", "MultiValueMap.getCollection(String)"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeMapping method when the key exists and the collection becomes empty after removal."}, {"name": "testRemoveMapping_MultipleValuesAndCollectionRemainsNonEmpty", "primary_tested": ["MultiValueMap.removeMapping(String,String)"], "associated_methods": ["MultiValueMap.put(String,String)", "MultiValueMap.containsValue(String,String)", "MultiValueMap.getCollection(String)"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeMapping method when multiple values exist and the collection remains non-empty after removal."}, {"name": "testRemoveMapping_MultipleKeysAndValues", "primary_tested": ["MultiValueMap.removeMapping(String,String)"], "associated_methods": ["MultiValueMap.put(String,String)", "MultiValueMap.containsValue(String,String)"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeMapping method when multiple keys and values exist in the map."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/CompositeMap_putAllTest.java", "testclass_name": "CompositeMap_putAllTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import java.util.HashMap;", "import java.util.Map;", "import java.util.Collection;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeMap_putAllTest", "description": "Tests for the putAll method in CompositeMap with and without a mutator.", "class_members": {"variables": [{"name": "compositeMap", "type": "CompositeMap<String, String>"}, {"name": "mapOne", "type": "Map<String, String>"}, {"name": "mapTwo", "type": "Map<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPutAllWithMutator", "primary_tested": ["CompositeMap.putAll(Map<? extends String, ? extends String>)"], "associated_methods": ["Map.containsKey(Object)", "Map.get(Object)"], "external_dependencies": {"modules": ["CompositeMap", "Map", "HashMap"], "class_members": [{"name": "compositeMap", "type": "variable"}, {"name": "mapOne", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the putAll method of CompositeMap when a mutator is provided, ensuring that the new map entries are correctly added to mapOne."}, {"name": "testPutAllWithoutMutator", "primary_tested": ["CompositeMap.putAll(Map<? extends String, ? extends String>)"], "associated_methods": ["CompositeMap.setMutator(CompositeMap.MapMutator<String, String>)"], "external_dependencies": {"modules": ["CompositeMap", "Map", "HashMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the putAll method of CompositeMap when no mutator is provided, expecting an UnsupportedOperationException to be thrown."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/CompositeMap_equalsTest.java", "testclass_name": "CompositeMap_equalsTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeMap_equalsTest", "description": "Unit tests for the equals method of the CompositeMap class.", "class_members": {"variables": [{"name": "one", "type": "Map<String, String>"}, {"name": "two", "type": "Map<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEqualsWithEqualMaps", "primary_tested": ["CompositeMap.equals(Object)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap", "Map"], "class_members": [{"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with two equal maps."}, {"name": "testEqualsWithDifferentMaps", "primary_tested": ["CompositeMap.equals(Object)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap", "Map"], "class_members": [{"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with two different maps."}, {"name": "testEqualsWithNonMapObject", "primary_tested": ["CompositeMap.equals(Object)"], "external_dependencies": {"modules": ["CompositeMap"], "class_members": [{"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with a non-map object."}, {"name": "testEqualsWithEmptyMap", "primary_tested": ["CompositeMap.equals(Object)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap", "Map"], "class_members": [{"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with an empty map."}, {"name": "testEqualsWithNull", "primary_tested": ["CompositeMap.equals(Object)"], "external_dependencies": {"modules": ["CompositeMap"], "class_members": [{"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with a null object."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/TransformedMap_putAllTest.java", "testclass_name": "TransformedMap_putAllTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.HashMap;", "import java.util.Map;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "TransformedMap_putAllTest", "description": "Unit tests for the putAll method of the TransformedMap class.", "class_members": {"variables": [{"name": "transformedMap", "type": "TransformedMap<String, String>"}, {"name": "keyTransformer", "type": "Transformer<String, String>"}, {"name": "valueTransformer", "type": "Transformer<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPutAll", "primary_tested": ["TransformedMap.putAll(Map<String, String>)"], "associated_methods": ["TransformedMap.get(String)"], "external_dependencies": {"modules": ["TransformedMap", "HashMap", "Transformer"], "class_members": [{"name": "transformedMap", "type": "variable"}, {"name": "keyTransformer", "type": "variable"}, {"name": "valueTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the putAll method of TransformedMap with a non-empty map."}, {"name": "testPutAllWithEmptyMap", "primary_tested": ["TransformedMap.putAll(Map<String, String>)"], "associated_methods": ["TransformedMap.size()"], "external_dependencies": {"modules": ["TransformedMap", "HashMap", "Transformer"], "class_members": [{"name": "transformedMap", "type": "variable"}, {"name": "keyTransformer", "type": "variable"}, {"name": "valueTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the putAll method of TransformedMap with an empty map."}, {"name": "testPutAllWithNullKey", "primary_tested": ["TransformedMap.putAll(Map<String, String>)"], "external_dependencies": {"modules": ["TransformedMap", "HashMap", "Transformer"], "class_members": [{"name": "transformedMap", "type": "variable"}, {"name": "keyTransformer", "type": "variable"}, {"name": "valueTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the putAll method of TransformedMap with a null key, expecting a NullPointerException."}, {"name": "testPutAllWithNullValue", "primary_tested": ["TransformedMap.putAll(Map<String, String>)"], "external_dependencies": {"modules": ["TransformedMap", "HashMap", "Transformer"], "class_members": [{"name": "transformedMap", "type": "variable"}, {"name": "keyTransformer", "type": "variable"}, {"name": "valueTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the putAll method of TransformedMap with a null value, expecting a NullPointerException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/CompositeMap_containsKeyTest.java", "testclass_name": "CompositeMap_containsKeyTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeMap_containsKeyTest", "description": "Unit tests for the containsKey method in the CompositeMap class.", "class_members": {"variables": [{"name": "one", "type": "Map<String, String>"}, {"name": "two", "type": "Map<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testContainsKey_KeyPresentInFirstMap", "primary_tested": ["CompositeMap.containsKey(String)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap"], "class_members": [{"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the containsKey method returns true when the key is present in the first map."}, {"name": "testContainsKey_KeyPresentInSecondMap", "primary_tested": ["CompositeMap.containsKey(String)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap"], "class_members": [{"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the containsKey method returns true when the key is present in the second map."}, {"name": "testContainsKey_KeyNotPresent", "primary_tested": ["CompositeMap.containsKey(String)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap"], "class_members": [{"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the containsKey method returns false when the key is not present in any map."}, {"name": "testContainsKey_AfterAddingNewMap", "primary_tested": ["CompositeMap.containsKey(String)"], "associated_methods": ["CompositeMap.addComposited(Map)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap"], "class_members": [{"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the containsKey method returns true after adding a new map with the key."}, {"name": "testContainsKey_AfterRemovingMap", "primary_tested": ["CompositeMap.containsKey(String)"], "associated_methods": ["CompositeMap.addComposited(Map)", "CompositeMap.removeComposited(Map)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap"], "class_members": [{"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the containsKey method returns false after removing a map that contained the key."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/functors/AllPredicate_testTest.java", "testclass_name": "AllPredicate_testTest", "dependencies": ["package org.apache.commons.collections4.functors;", "import org.apache.commons.collections4.Predicate;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;"], "name": "AllPredicate_testTest", "description": "Unit tests for the AllPredicate class in Apache Commons Collections, focusing on the behavior of combining multiple predicates.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testAllPredicatesTrue", "primary_tested": ["AllPredicate.test(String)"], "associated_methods": ["Predicate.test(String)"], "external_dependencies": {"modules": ["Predicate", "AllPredicate"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the AllPredicate functionality when all combined predicates return true."}, {"name": "testOnePredicateFalse", "primary_tested": ["AllPredicate.test(String)"], "associated_methods": ["Predicate.test(String)"], "external_dependencies": {"modules": ["Predicate", "AllPredicate"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the AllPredicate functionality when one of the combined predicates returns false."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_putTest.java", "testclass_name": "PassiveExpiringMap_putTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import java.util.HashMap;", "import java.util.Map;", "import java.util.concurrent.TimeUnit;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "PassiveExpiringMap_putTest", "description": "Unit tests for the put method of PassiveExpiringMap.", "class_members": {"variables": [{"name": "expiringMap", "type": "PassiveExpiringMap<Integer, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPutNewEntry", "primary_tested": ["PassiveExpiringMap.put(Integer,String)"], "associated_methods": ["PassiveExpiringMap.get(Integer)"], "external_dependencies": {"modules": ["PassiveExpiringMap", "HashMap"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the put method when adding a new entry to the map."}, {"name": "testPutReplaceEntry", "primary_tested": ["PassiveExpiringMap.put(Integer,String)"], "associated_methods": ["PassiveExpiringMap.get(Integer)"], "external_dependencies": {"modules": ["PassiveExpiringMap", "HashMap"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the put method when replacing an existing entry in the map."}, {"name": "testPutExpiredEntry", "primary_tested": ["PassiveExpiringMap.put(Integer,String)"], "associated_methods": ["PassiveExpiringMap.get(Integer)", "PassiveExpiringMap.remove(Integer)"], "external_dependencies": {"modules": ["PassiveExpiringMap", "HashMap"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the put method when adding a new entry after an entry has expired and been removed."}, {"name": "testPutWithNegativeTimeToLive", "primary_tested": ["PassiveExpiringMap.put(Integer,String)"], "associated_methods": ["PassiveExpiringMap.get(Integer)"], "external_dependencies": {"modules": ["PassiveExpiringMap", "HashMap"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the put method with a negative time-to-live policy."}, {"name": "testPutWithZeroTimeToLive", "primary_tested": ["PassiveExpiringMap.put(Integer,String)"], "associated_methods": ["PassiveExpiringMap.get(Integer)"], "external_dependencies": {"modules": ["PassiveExpiringMap", "HashMap"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the put method with a zero time-to-live policy."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_firstKeyTest.java", "testclass_name": "ListOrderedMap_firstKeyTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.NoSuchElementException;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "ListOrderedMap_firstKeyTest", "description": "Unit tests for the firstKey method of the ListOrderedMap class.", "class_members": {"variables": [{"name": "listOrderedMap", "type": "ListOrderedMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testFirstKey_EmptyMap", "primary_tested": ["ListOrderedMap.firstKey()"], "external_dependencies": {"modules": ["ListOrderedMap", "NoSuchElementException"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the firstKey method when the map is empty, expecting a NoSuchElementException."}, {"name": "testFirstKey_NonEmptyMap", "primary_tested": ["ListOrderedMap.firstKey()"], "associated_methods": ["ListOrderedMap.put(String,String)"], "external_dependencies": {"modules": ["ListOrderedMap"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the firstKey method when the map is non-empty, expecting the first key added."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/CompositeMap_keySetTest.java", "testclass_name": "CompositeMap_keySetTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Map;", "import java.util.Set;", "import org.apache.commons.collections4.set.CompositeSet;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeMap_keySetTest", "description": "Unit tests for the keySet functionality of the CompositeMap class.", "class_members": {"variables": [{"name": "compositeMap", "type": "CompositeMap<String, String>"}, {"name": "map1", "type": "Map<String, String>"}, {"name": "map2", "type": "Map<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testKeySet", "primary_tested": ["CompositeMap.keySet()"], "associated_methods": ["CompositeSet.size()", "CompositeSet.contains(Object)"], "external_dependencies": {"modules": ["CompositeMap", "CompositeSet", "HashMap", "Set"], "class_members": [{"name": "compositeMap", "type": "variable"}, {"name": "map1", "type": "variable"}, {"name": "map2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the keySet functionality of the CompositeMap, ensuring it returns a CompositeSet and contains the correct keys."}, {"name": "testKeySetAfterAddComposited", "primary_tested": ["CompositeMap.addComposited(Map<String, String>)"], "associated_methods": ["CompositeMap.keySet()", "CompositeSet.size()", "CompositeSet.contains(Object)"], "external_dependencies": {"modules": ["CompositeMap", "CompositeSet", "HashMap", "Set"], "class_members": [{"name": "compositeMap", "type": "variable"}, {"name": "map1", "type": "variable"}, {"name": "map2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the keySet functionality of the CompositeMap after adding a new map to it, ensuring the keySet is updated correctly."}, {"name": "testKeySetAfterRemoveComposited", "primary_tested": ["CompositeMap.removeComposited(Map<String, String>)"], "associated_methods": ["CompositeMap.keySet()", "CompositeSet.size()", "CompositeSet.contains(Object)"], "external_dependencies": {"modules": ["CompositeMap", "CompositeSet", "HashMap", "Set"], "class_members": [{"name": "compositeMap", "type": "variable"}, {"name": "map1", "type": "variable"}, {"name": "map2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the keySet functionality of the CompositeMap after removing a map from it, ensuring the keySet is updated correctly."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_containsValueTest.java", "testclass_name": "StaticBucketMap_containsValueTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "StaticBucketMap_containsValueTest", "description": "Unit tests for the containsValue method of the StaticBucketMap class.", "class_members": {"variables": [{"name": "map", "type": "StaticBucketMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testContainsValue_ValuePresent", "primary_tested": ["StaticBucketMap.containsValue(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsValue method when the value is present in the map."}, {"name": "testContainsValue_ValueNotPresent", "primary_tested": ["StaticBucketMap.containsValue(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsValue method when the value is not present in the map."}, {"name": "testContainsValue_NullValuePresent", "primary_tested": ["StaticBucketMap.containsValue(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsValue method when the value is null and present in the map."}, {"name": "testContainsValue_NullValueNotPresent", "primary_tested": ["StaticBucketMap.containsValue(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsValue method when the value is null and not present in the map."}, {"name": "testContainsValue_EmptyMap", "primary_tested": ["StaticBucketMap.containsValue(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsValue method when the map is empty."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/functors/EqualPredicate_equalPredicateTest.java", "testclass_name": "EqualPredicate_equalPredicateTest", "dependencies": ["package org.apache.commons.collections4.functors;", "import org.apache.commons.collections4.Predicate;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "EqualPredicate_equalPredicateTest", "description": "Unit tests for the EqualPredicate class, specifically testing the equalPredicate method with non-null and null objects.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testEqualPredicateWithNonNullObject", "primary_tested": ["EqualPredicate.equalPredicate(String)"], "associated_methods": ["Predicate.test(String)"], "external_dependencies": {"modules": ["EqualPredicate", "Predicate"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the equalPredicate method of EqualPredicate with a non-null object."}, {"name": "testEqualPredicateWithNullObject", "primary_tested": ["EqualPredicate.equalPredicate(String)"], "associated_methods": ["Predicate.test(String)"], "external_dependencies": {"modules": ["EqualPredicate", "Predicate"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the equalPredicate method of EqualPredicate with a null object."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/BooleanComparator_hashCodeTest.java", "testclass_name": "BooleanComparator_hashCodeTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "BooleanComparator_hashCodeTest", "description": "Unit tests for the hashCode method of BooleanComparator.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testHashCodeTrueFirst", "primary_tested": ["BooleanComparator.hashCode()"], "external_dependencies": {"modules": ["BooleanComparator"]}, "category": "unit", "description": "Tests the hashCode method of BooleanComparator when true values are prioritized."}, {"name": "testHashCodeFalseFirst", "primary_tested": ["BooleanComparator.hashCode()"], "external_dependencies": {"modules": ["BooleanComparator"]}, "category": "unit", "description": "Tests the hashCode method of BooleanComparator when false values are prioritized."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/LazyMap_getTest.java", "testclass_name": "LazyMap_getTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.Factory;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.mockito.Mockito.*;"], "name": "LazyMap_getTest", "description": "Unit tests for the get method of LazyMap.", "class_members": {"variables": [{"name": "map", "type": "Map<String, String>"}, {"name": "factory", "type": "Factory<String>"}, {"name": "lazyMap", "type": "LazyMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGet_KeyNotInMap", "primary_tested": ["LazyMap.get(String)"], "associated_methods": ["Factory.create()"], "external_dependencies": {"modules": ["LazyMap", "Factory", "HashMap", "Map"], "class_members": [{"name": "map", "type": "variable"}, {"name": "factory", "type": "variable"}, {"name": "lazyMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method of LazyMap when the key is not present in the map."}, {"name": "testGet_KeyInMap", "primary_tested": ["LazyMap.get(String)"], "associated_methods": ["Factory.create()"], "external_dependencies": {"modules": ["LazyMap", "Factory", "HashMap", "Map"], "class_members": [{"name": "map", "type": "variable"}, {"name": "factory", "type": "variable"}, {"name": "lazyMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method of LazyMap when the key is already present in the map."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/ComparatorChain_hashCodeTest.java", "testclass_name": "ComparatorChain_hashCodeTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import org.junit.jupiter.api.Test;", "import java.util.ArrayList;", "import java.util.BitSet;", "import java.util.Comparator;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "ComparatorChain_hashCodeTest", "description": "Unit tests for the hashCode method of the ComparatorChain class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testHashCode", "primary_tested": ["ComparatorChain.hashCode()"], "external_dependencies": {"modules": ["ArrayList", "BitSet", "ComparatorChain", "Comparator", "List"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the hashCode method of the ComparatorChain class."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/ComparatorChain_setComparatorTest.java", "testclass_name": "ComparatorChain_setComparatorTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import org.junit.jupiter.api.Test;", "import java.util.Comparator;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "ComparatorChain_setComparatorTest", "description": "Unit tests for the setComparator method in the ComparatorChain class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testSetComparator", "primary_tested": ["ComparatorChain.setComparator(int,Comparator,boolean)"], "associated_methods": ["ComparatorChain.addComparator(Comparator)", "Comparator.naturalOrder()"], "external_dependencies": {"modules": ["ComparatorChain", "Comparator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests setting a comparator in the ComparatorChain with and without reversing the order."}, {"name": "testSetComparatorLocked", "primary_tested": ["ComparatorChain.setComparator(int,Comparator,boolean)"], "associated_methods": ["ComparatorChain.addComparator(Comparator)", "ComparatorChain.compare(String,String)", "Comparator.naturalOrder()"], "external_dependencies": {"modules": ["ComparatorChain", "Comparator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests attempting to set a comparator in a locked ComparatorChain, which should throw an UnsupportedOperationException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/splitmap/TransformedSplitMap_transformingMapTest.java", "testclass_name": "TransformedSplitMap_transformingMapTest", "dependencies": ["package org.apache.commons.collections4.splitmap;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.map.LinkedMap;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.assertNotNull;"], "name": "TransformedSplitMap_transformingMapTest", "description": "Unit tests for the transformingMap functionality of TransformedSplitMap.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testTransformingMap", "primary_tested": ["TransformedSplitMap.transformingMap(Map<String, Integer>, Transformer<String, String>, Transformer<Integer, Integer>)"], "external_dependencies": {"modules": ["LinkedMap", "Transformer", "TransformedSplitMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformingMap functionality of TransformedSplitMap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/functors/AllPredicate_allPredicateTest.java", "testclass_name": "AllPredicate_allPredicateTest", "dependencies": ["package org.apache.commons.collections4.functors;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.mockito.Mockito.mock;", "import static org.mockito.Mockito.when;", "import java.util.Arrays;", "import java.util.Collection;", "import org.apache.commons.collections4.Predicate;", "import org.junit.jupiter.api.Test;"], "name": "AllPredicate_allPredicateTest", "description": "Unit tests for the AllPredicate class, specifically testing the allPredicate method with various scenarios.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testAllPredicate_EmptyCollection", "primary_tested": ["AllPredicate.allPredicate(Collection<Predicate<Object>>)"], "external_dependencies": {"modules": ["AllPredicate", "Predicate", "Arrays"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the allPredicate method with an empty collection of predicates."}, {"name": "testAllPredicate_SinglePredicate", "primary_tested": ["AllPredicate.allPredicate(Collection<Predicate<Object>>)"], "associated_methods": ["Predicate.test(Object)"], "external_dependencies": {"modules": ["AllPredicate", "Predicate", "Arrays", "Mockito"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the allPredicate method with a single predicate."}, {"name": "testAllPredicate_MultiplePredicates", "primary_tested": ["AllPredicate.allPredicate(Collection<Predicate<Object>>)"], "associated_methods": ["Predicate.test(Object)"], "external_dependencies": {"modules": ["AllPredicate", "Predicate", "Arrays", "Mockito"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the allPredicate method with multiple predicates."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_clearTest.java", "testclass_name": "MultiValueMap_clearTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Collection;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "MultiValueMap_clearTest", "description": "Unit tests for the clear functionality of the MultiValueMap class.", "class_members": {"variables": [{"name": "multiValueMap", "type": "MultiValueMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testClear", "primary_tested": ["MultiValueMap.clear()"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "multiValueMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clear functionality of the MultiValueMap when it contains multiple values for a key."}, {"name": "testClearWithEmptyMap", "primary_tested": ["MultiValueMap.clear()"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "multiValueMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clear functionality of the MultiValueMap when it is initially empty."}, {"name": "testClearWithNonEmptyMap", "primary_tested": ["MultiValueMap.clear()"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "multiValueMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clear functionality of the MultiValueMap when it contains multiple values for different keys."}, {"name": "testClearWithMultipleKeys", "primary_tested": ["MultiValueMap.clear()"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "multiValueMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clear functionality of the MultiValueMap when it contains multiple values for multiple keys."}, {"name": "testClearWithDifferentCollectionTypes", "primary_tested": ["MultiValueMap.clear()"], "external_dependencies": {"modules": ["MultiValueMap", "HashMap", "ArrayList"], "class_members": [{"name": "multiValueMap", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the clear functionality of the MultiValueMap when it uses different collection types."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/functors/ComparatorPredicate_comparatorPredicateTest.java", "testclass_name": "ComparatorPredicate_comparatorPredicateTest", "dependencies": ["package org.apache.commons.collections4.functors;", "import org.apache.commons.collections4.Predicate;", "import org.junit.jupiter.api.Test;", "import java.util.Comparator;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "ComparatorPredicate_comparatorPredicateTest", "description": "Unit tests for the ComparatorPredicate class, focusing on the comparatorPredicate method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testComparatorPredicate_WithNonNullComparatorAndCriterion", "primary_tested": ["ComparatorPredicate.comparatorPredicate(Integer,Comparator<Integer>,ComparatorPredicate.Criterion)"], "external_dependencies": {"modules": ["Comparator", "Predicate", "ComparatorPredicate", "ComparatorPredicate.Criterion"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the comparatorPredicate method with a non-null comparator and criterion, ensuring the predicate correctly evaluates to true when the input matches the criterion."}, {"name": "testComparatorPredicate_WithNullComparator", "primary_tested": ["ComparatorPredicate.comparatorPredicate(Integer,Comparator<Integer>,ComparatorPredicate.Criterion)"], "external_dependencies": {"modules": ["ComparatorPredicate", "ComparatorPredicate.Criterion"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the comparatorPredicate method with a null comparator, expecting a NullPointerException to be thrown."}, {"name": "testComparatorPredicate_WithNullCriterion", "primary_tested": ["ComparatorPredicate.comparatorPredicate(Integer,Comparator<Integer>,ComparatorPredicate.Criterion)"], "external_dependencies": {"modules": ["Comparator", "ComparatorPredicate", "ComparatorPredicate.Criterion"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the comparatorPredicate method with a null criterion, expecting a NullPointerException to be thrown."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/CompositeMap_sizeTest.java", "testclass_name": "CompositeMap_sizeTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeMap_sizeTest", "description": "Unit tests for the size functionality of the CompositeMap class.", "class_members": {"variables": [{"name": "compositeMap", "type": "CompositeMap<String, String>"}, {"name": "map1", "type": "Map<String, String>"}, {"name": "map2", "type": "Map<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testSizeWithEmptyMaps", "primary_tested": ["CompositeMap.size()"], "external_dependencies": {"modules": ["CompositeMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "description": "Tests the size of an empty CompositeMap."}, {"name": "testSizeWithNonEmptyMaps", "primary_tested": ["CompositeMap.size()"], "external_dependencies": {"modules": ["CompositeMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size of a CompositeMap with non-empty maps."}, {"name": "testSizeAfterAddingMap", "primary_tested": ["CompositeMap.size()"], "associated_methods": ["CompositeMap.addComposited(Map<String, String>)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size of a CompositeMap after adding another map."}, {"name": "testSizeAfterRemovingMap", "primary_tested": ["CompositeMap.size()"], "associated_methods": ["CompositeMap.removeComposited(Map<String, String>)"], "external_dependencies": {"modules": ["CompositeMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size of a CompositeMap after removing a map."}, {"name": "testSizeAfterClearingMap", "primary_tested": ["CompositeMap.size()"], "associated_methods": ["Map.clear()"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}, {"name": "map1", "type": "variable"}, {"name": "map2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size of a CompositeMap after clearing the underlying maps."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_containsKeyTest.java", "testclass_name": "MultiKeyMap_containsKeyTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "MultiKeyMap_containsKeyTest", "description": "Unit tests for the containsKey method of the MultiKeyMap class.", "class_members": {"variables": [{"name": "map", "type": "MultiKeyMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testContainsKeyWithExistingKeys", "primary_tested": ["MultiKeyMap.containsKey(String,String)"], "external_dependencies": {"modules": ["MultiKeyMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsKey method with existing keys in the MultiKeyMap."}, {"name": "testContainsKeyWithNonExistingKeys", "primary_tested": ["MultiKeyMap.containsKey(String,String)"], "external_dependencies": {"modules": ["MultiKeyMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsKey method with non-existing keys in the MultiKeyMap."}, {"name": "testContainsKeyWithNullKeys", "primary_tested": ["MultiKeyMap.containsKey(String,String)"], "external_dependencies": {"modules": ["MultiKeyMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsKey method with null keys in the MultiKeyMap."}, {"name": "testContainsKeyWithEmptyMap", "primary_tested": ["MultiKeyMap.containsKey(String,String)"], "external_dependencies": {"modules": ["MultiKeyMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsKey method with an empty MultiKeyMap."}, {"name": "testContainsKeyWithMultipleEntries", "primary_tested": ["MultiKeyMap.containsKey(String,String)"], "external_dependencies": {"modules": ["MultiKeyMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsKey method with multiple entries in the MultiKeyMap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_keySetTest.java", "testclass_name": "PassiveExpiringMap_keySetTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Map;", "import java.util.Set;", "import java.util.concurrent.TimeUnit;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "PassiveExpiringMap_keySetTest", "description": "Unit tests for the keySet functionality of PassiveExpiringMap, including scenarios with expired and non-expired entries.", "class_members": {"variables": [{"name": "expiringMap", "type": "PassiveExpiringMap<Integer, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testKeySetWithExpiredEntries", "primary_tested": ["PassiveExpiringMap.keySet()"], "external_dependencies": {"modules": ["PassiveExpiringMap", "Set"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the keySet functionality when all entries have expired."}, {"name": "testKeySetWithoutExpiredEntries", "primary_tested": ["PassiveExpiringMap.keySet()"], "external_dependencies": {"modules": ["PassiveExpiringMap", "Set"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the keySet functionality when no entries have expired."}, {"name": "testKeySetAfterPartialExpiration", "primary_tested": ["PassiveExpiringMap.keySet()"], "external_dependencies": {"modules": ["PassiveExpiringMap", "Set"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the keySet functionality after some entries have expired and new entries are added."}, {"name": "testKeySetWithNeverExpiringEntries", "primary_tested": ["PassiveExpiringMap.keySet()"], "external_dependencies": {"modules": ["PassiveExpiringMap", "Set"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the keySet functionality with entries that never expire."}, {"name": "testKeySetWithZeroTimeToLive", "primary_tested": ["PassiveExpiringMap.keySet()"], "external_dependencies": {"modules": ["PassiveExpiringMap", "Set"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the keySet functionality with entries that have zero time to live."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_putTest.java", "testclass_name": "StaticBucketMap_putTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "StaticBucketMap_putTest", "description": "Unit tests for the put method of StaticBucketMap.", "class_members": {"variables": [{"name": "map", "type": "StaticBucketMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPutNewKey", "primary_tested": ["StaticBucketMap.put(String,String)"], "associated_methods": ["StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the put method with a new key."}, {"name": "testPutExistingKey", "primary_tested": ["StaticBucketMap.put(String,String)"], "associated_methods": ["StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the put method with an existing key."}, {"name": "testPutNullKey", "primary_tested": ["StaticBucketMap.put(String,String)"], "associated_methods": ["StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the put method with a null key."}, {"name": "testPutNullValue", "primary_tested": ["StaticBucketMap.put(String,String)"], "associated_methods": ["StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the put method with a null value."}, {"name": "testPutMultipleKeys", "primary_tested": ["StaticBucketMap.put(String,String)"], "associated_methods": ["StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the put method with multiple keys."}, {"name": "testPutSameHashKey", "primary_tested": ["StaticBucketMap.put(String,String)"], "associated_methods": ["StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the put method with keys that hash to the same bucket."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/ComparatorChain_addComparatorTest.java", "testclass_name": "ComparatorChain_addComparatorTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import org.junit.jupiter.api.Test;", "import java.util.Comparator;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "ComparatorChain_addComparatorTest", "description": "Unit tests for the addComparator method in the ComparatorChain class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testAddComparator_ForwardOrder", "primary_tested": ["ComparatorChain.addComparator(Comparator,boolean)"], "external_dependencies": {"modules": ["ComparatorChain", "Comparator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests adding a comparator in forward order to the ComparatorChain."}, {"name": "testAddComparator_ReverseOrder", "primary_tested": ["ComparatorChain.addComparator(Comparator,boolean)"], "external_dependencies": {"modules": ["ComparatorChain", "Comparator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests adding a comparator in reverse order to the ComparatorChain."}, {"name": "testAddComparator_LockedChain", "primary_tested": ["ComparatorChain.addComparator(Comparator,boolean)"], "associated_methods": ["ComparatorChain.compare(String,String)"], "external_dependencies": {"modules": ["ComparatorChain", "Comparator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests adding a comparator to a locked ComparatorChain, which should throw an UnsupportedOperationException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_putTest.java", "testclass_name": "MultiKeyMap_putTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.apache.commons.collections4.keyvalue.MultiKey;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "MultiKeyMap_putTest", "description": "Unit tests for the put functionality of MultiKeyMap with five keys.", "class_members": {"variables": [{"name": "multiKeyMap", "type": "MultiKeyMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPutWithFiveKeys", "primary_tested": ["MultiKeyMap.put(String,String,String,String,String,String)"], "associated_methods": ["MultiKeyMap.size()", "MultiKeyMap.get(String,String,String,String,String)", "MultiKeyMap.containsKey(String,String,String,String,String)", "MultiKeyMap.containsKey(MultiKey<String>)"], "external_dependencies": {"modules": ["MultiKeyMap", "MultiKey", "org.junit.jupiter.api.Assertions"], "class_members": [{"name": "multiKeyMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the put functionality of MultiKeyMap with five keys, including adding a new entry, updating an existing entry, and adding a null value."}, {"name": "testPutWithFiveKeys_DifferentKeys", "primary_tested": ["MultiKeyMap.put(String,String,String,String,String,String)"], "associated_methods": ["MultiKeyMap.size()", "MultiKeyMap.get(String,String,String,String,String)", "MultiKeyMap.containsKey(String,String,String,String,String)", "MultiKeyMap.containsKey(MultiKey<String>)"], "external_dependencies": {"modules": ["MultiKeyMap", "MultiKey", "org.junit.jupiter.api.Assertions"], "class_members": [{"name": "multiKeyMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the put functionality of MultiKeyMap with five keys, specifically adding two different entries."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/CompositeMap_clearTest.java", "testclass_name": "CompositeMap_clearTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Collection;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeMap_clearTest", "description": "Unit tests for the clear functionality of the CompositeMap class.", "class_members": {"variables": [{"name": "compositeMap", "type": "CompositeMap<String, String>"}, {"name": "mapOne", "type": "Map<String, String>"}, {"name": "mapTwo", "type": "Map<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testClear", "primary_tested": ["CompositeMap.clear()"], "associated_methods": ["Map.isEmpty()"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}, {"name": "mapOne", "type": "variable"}, {"name": "mapTwo", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clear functionality of the CompositeMap, ensuring all internal maps are cleared."}, {"name": "testClearWithEmptyCompositeMap", "primary_tested": ["CompositeMap.clear()"], "associated_methods": ["Map.isEmpty()"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "description": "Tests the clear functionality of an empty CompositeMap."}, {"name": "testClearWithSingleMap", "primary_tested": ["CompositeMap.clear()"], "associated_methods": ["Map.isEmpty()"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}, {"name": "mapOne", "type": "variable"}]}, "category": "unit", "description": "Tests the clear functionality of a CompositeMap with a single internal map."}, {"name": "testClearWithMultipleMaps", "primary_tested": ["CompositeMap.clear()"], "associated_methods": ["Map.isEmpty()"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}, {"name": "mapOne", "type": "variable"}, {"name": "mapTwo", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clear functionality of a CompositeMap with multiple internal maps."}, {"name": "testClearWithNullMap", "primary_tested": ["CompositeMap.clear()"], "associated_methods": ["Map.isEmpty()"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}, {"name": "mapOne", "type": "variable"}, {"name": "mapTwo", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clear functionality of a CompositeMap when a null map is added."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_containsValueTest.java", "testclass_name": "PassiveExpiringMap_containsValueTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;", "import java.util.concurrent.TimeUnit;"], "name": "PassiveExpiringMap_containsValueTest", "description": "Unit tests for the containsValue method of PassiveExpiringMap.", "class_members": {"variables": [{"name": "expiringMap", "type": "PassiveExpiringMap<Integer, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testContainsValue_ValuePresent", "primary_tested": ["PassiveExpiringMap.containsValue(String)"], "external_dependencies": {"modules": ["PassiveExpiringMap"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that containsValue returns true when the value is present in the map."}, {"name": "testContainsValue_ValueNotPresent", "primary_tested": ["PassiveExpiringMap.containsValue(String)"], "external_dependencies": {"modules": ["PassiveExpiringMap"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that containsValue returns false when the value is not present in the map."}, {"name": "testContainsValue_ValueExpired", "primary_tested": ["PassiveExpiringMap.containsValue(String)"], "external_dependencies": {"modules": ["PassiveExpiringMap"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that containsValue returns false when the value has expired in the map."}, {"name": "testContainsValue_EmptyMap", "primary_tested": ["PassiveExpiringMap.containsValue(String)"], "external_dependencies": {"modules": ["PassiveExpiringMap"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that containsValue returns false when the map is empty."}, {"name": "testContainsValue_NullValue", "primary_tested": ["PassiveExpiringMap.containsValue(String)"], "external_dependencies": {"modules": ["PassiveExpiringMap"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that containsValue returns true when the value is null."}, {"name": "testContainsValue_MultipleValues", "primary_tested": ["PassiveExpiringMap.containsValue(String)"], "external_dependencies": {"modules": ["PassiveExpiringMap"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that containsValue returns true when multiple values are present in the map."}, {"name": "testContainsValue_MultipleValuesWithExpired", "primary_tested": ["PassiveExpiringMap.containsValue(String)"], "external_dependencies": {"modules": ["PassiveExpiringMap"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that containsValue returns false when multiple values are present but some have expired."}, {"name": "testContainsValue_NeverExpire", "primary_tested": ["PassiveExpiringMap.containsValue(String)"], "external_dependencies": {"modules": ["PassiveExpiringMap"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests that containsValue returns true when the map is configured to never expire entries."}, {"name": "testContainsValue_AlwaysExpire", "primary_tested": ["PassiveExpiringMap.containsValue(String)"], "external_dependencies": {"modules": ["PassiveExpiringMap"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests that containsValue returns false when the map is configured to always expire entries."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/functors/EqualPredicate_testTest.java", "testclass_name": "EqualPredicate_testTest", "dependencies": ["package org.apache.commons.collections4.functors;", "import org.apache.commons.collections4.Equator;", "import org.apache.commons.collections4.Predicate;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "EqualPredicate_testTest", "description": "Unit tests for the EqualPredicate class in Apache Commons Collections, focusing on its behavior with and without an Equator.", "class_members": {"variables": [{"name": "equalPredicate", "type": "EqualPredicate<String>"}, {"name": "equalPredicateWithEquator", "type": "EqualPredicate<String>"}, {"name": "mockEquator", "type": "Equator<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testTestWithEquator", "primary_tested": ["EqualPredicate.test(String)"], "external_dependencies": {"modules": ["EqualPredicate", "Equator"], "class_members": [{"name": "equalPredicateWithEquator", "type": "variable"}, {"name": "mockEquator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the EqualPredicate's test method with an Equator, ensuring case-insensitive comparison."}, {"name": "testTestWithoutEquator", "primary_tested": ["EqualPredicate.test(String)"], "external_dependencies": {"modules": ["EqualPredicate"], "class_members": [{"name": "equalPredicate", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the EqualPredicate's test method without an Equator, ensuring case-sensitive comparison."}, {"name": "testNullArgumentEqualsNullPredicate", "primary_tested": ["EqualPredicate.equalPredicate(Object)"], "associated_methods": ["NullPredicate.nullPredicate()"], "external_dependencies": {"modules": ["EqualPredicate", "NullPredicate"]}, "category": "unit", "description": "Tests the creation of an EqualPredicate with a null argument, ensuring it returns a NullPredicate."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_putTest.java", "testclass_name": "ListOrderedMap_putTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;"], "name": "ListOrderedMap_putTest", "description": "Unit tests for the putAtIndex functionality of the ListOrderedMap class.", "class_members": {"variables": [{"name": "listOrderedMap", "type": "ListOrderedMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPutAtIndexValidIndex", "primary_tested": ["ListOrderedMap.put(int,String,String)"], "associated_methods": ["ListOrderedMap.put(String,String)", "ListOrderedMap.get(String)"], "external_dependencies": {"modules": ["ListOrderedMap"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the putAtIndex functionality with a valid index."}, {"name": "testPutAtIndexInvalidIndex", "primary_tested": ["ListOrderedMap.put(int,String,String)"], "associated_methods": ["ListOrderedMap.put(String,String)"], "external_dependencies": {"modules": ["ListOrderedMap"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the putAtIndex functionality with an invalid index, expecting an IndexOutOfBoundsException."}, {"name": "testPutAtIndexNewKey", "primary_tested": ["ListOrderedMap.put(int,String,String)"], "associated_methods": ["ListOrderedMap.put(String,String)", "ListOrderedMap.get(String)"], "external_dependencies": {"modules": ["ListOrderedMap"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the putAtIndex functionality with a new key."}, {"name": "testPutAtIndexExistingKey", "primary_tested": ["ListOrderedMap.put(int,String,String)"], "associated_methods": ["ListOrderedMap.put(String,String)", "ListOrderedMap.get(String)"], "external_dependencies": {"modules": ["ListOrderedMap"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the putAtIndex functionality with an existing key."}, {"name": "testPutAtIndexExistingKeyBeforeIndex", "primary_tested": ["ListOrderedMap.put(int,String,String)"], "associated_methods": ["ListOrderedMap.put(String,String)", "ListOrderedMap.get(String)"], "external_dependencies": {"modules": ["ListOrderedMap"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the putAtIndex functionality with an existing key before the specified index."}, {"name": "testPutAtIndexExistingKeyAtSameIndex", "primary_tested": ["ListOrderedMap.put(int,String,String)"], "associated_methods": ["ListOrderedMap.put(String,String)", "ListOrderedMap.get(String)"], "external_dependencies": {"modules": ["ListOrderedMap"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the putAtIndex functionality with an existing key at the same index."}, {"name": "testPutAtIndexExistingKeyAfterIndex", "primary_tested": ["ListOrderedMap.put(int,String,String)"], "associated_methods": ["ListOrderedMap.put(String,String)", "ListOrderedMap.get(String)"], "external_dependencies": {"modules": ["ListOrderedMap"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the putAtIndex functionality with an existing key after the specified index."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_sizeTest.java", "testclass_name": "StaticBucketMap_sizeTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "StaticBucketMap_sizeTest", "description": "Unit tests for the size method of the StaticBucketMap class.", "class_members": {"variables": [{"name": "map", "type": "StaticBucketMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testSizeEmptyMap", "primary_tested": ["StaticBucketMap.size()"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method when the map is empty."}, {"name": "testSizeAfterPut", "primary_tested": ["StaticBucketMap.size()"], "associated_methods": ["StaticBucketMap.put(String,String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method after adding a single entry to the map."}, {"name": "testSizeAfterMultiplePuts", "primary_tested": ["StaticBucketMap.size()"], "associated_methods": ["StaticBucketMap.put(String,String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method after adding multiple entries to the map."}, {"name": "testSizeAfterRemove", "primary_tested": ["StaticBucketMap.size()"], "associated_methods": ["StaticBucketMap.put(String,String)", "StaticBucketMap.remove(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method after adding and then removing an entry from the map."}, {"name": "testSizeAfterClear", "primary_tested": ["StaticBucketMap.size()"], "associated_methods": ["StaticBucketMap.put(String,String)", "StaticBucketMap.clear()"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method after adding entries and then clearing the map."}, {"name": "testSizeAfterPutAndRemoveDifferentBuckets", "primary_tested": ["StaticBucketMap.size()"], "associated_methods": ["StaticBucketMap.put(String,String)", "StaticBucketMap.remove(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method after adding entries and removing one from a different bucket."}, {"name": "testSizeAfterPutAndRemoveSameBucket", "primary_tested": ["StaticBucketMap.size()"], "associated_methods": ["StaticBucketMap.put(String,String)", "StaticBucketMap.remove(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method after adding entries and removing both from the same bucket."}, {"name": "testSizeAfterPutAndRemoveNonExistentKey", "primary_tested": ["StaticBucketMap.size()"], "associated_methods": ["StaticBucketMap.put(String,String)", "StaticBucketMap.remove(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method after adding an entry and attempting to remove a non-existent key."}, {"name": "testSizeAfterPutNullKey", "primary_tested": ["StaticBucketMap.size()"], "associated_methods": ["StaticBucketMap.put(String,String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method after adding an entry with a null key."}, {"name": "testSizeAfterRemoveNullKey", "primary_tested": ["StaticBucketMap.size()"], "associated_methods": ["StaticBucketMap.put(String,String)", "StaticBucketMap.remove(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method after adding an entry with a null key and then removing it."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_removeTest.java", "testclass_name": "ListOrderedMap_removeTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ListOrderedMap_removeTest", "description": "Unit tests for the remove functionality of the ListOrderedMap class.", "class_members": {"variables": [{"name": "listOrderedMap", "type": "ListOrderedMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveExistingKey", "primary_tested": ["ListOrderedMap.remove(String)"], "external_dependencies": {"modules": ["ListOrderedMap", "HashMap"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of an existing key from the ListOrderedMap."}, {"name": "testRemoveNonExistingKey", "primary_tested": ["ListOrderedMap.remove(String)"], "external_dependencies": {"modules": ["ListOrderedMap", "HashMap"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of a non-existing key from the ListOrderedMap."}, {"name": "testRemoveFromEmptyMap", "primary_tested": ["ListOrderedMap.remove(String)"], "external_dependencies": {"modules": ["ListOrderedMap", "HashMap"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of a key from an empty ListOrderedMap."}, {"name": "testRemoveNullKey", "primary_tested": ["ListOrderedMap.remove(String)"], "external_dependencies": {"modules": ["ListOrderedMap", "HashMap"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of a null key from the ListOrderedMap."}, {"name": "testRemoveAfterClear", "primary_tested": ["ListOrderedMap.remove(String)"], "associated_methods": ["ListOrderedMap.clear()"], "external_dependencies": {"modules": ["ListOrderedMap", "HashMap"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of a key from the ListOrderedMap after clearing it."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_removeAllTest.java", "testclass_name": "MultiKeyMap_removeAllTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.*;", "import org.apache.commons.collections4.keyvalue.MultiKey;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "MultiKeyMap_removeAllTest", "description": "Unit tests for the removeAll functionality of the MultiKeyMap class.", "class_members": {"variables": [{"name": "multiKeyMap", "type": "MultiKeyMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveAllWithExistingKey", "primary_tested": ["MultiKeyMap.removeAll(String)"], "associated_methods": ["MultiKeyMap.put(String,String,String)", "MultiKeyMap.size()", "MultiKeyMap.containsKey(String,String)"], "external_dependencies": {"modules": ["MultiKeyMap", "MultiKey"], "class_members": [{"name": "multiKeyMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeAll functionality with an existing key in the MultiKeyMap."}, {"name": "testRemoveAllWithNonExistingKey", "primary_tested": ["MultiKeyMap.removeAll(String)"], "associated_methods": ["MultiKeyMap.put(String,String,String)", "MultiKeyMap.size()", "MultiKeyMap.containsKey(String,String)"], "external_dependencies": {"modules": ["MultiKeyMap", "MultiKey"], "class_members": [{"name": "multiKeyMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeAll functionality with a non-existing key in the MultiKeyMap."}, {"name": "testRemoveAllWithNullKey", "primary_tested": ["MultiKeyMap.removeAll(String)"], "associated_methods": ["MultiKeyMap.put(String,String,String)", "MultiKeyMap.size()", "MultiKeyMap.containsKey(String,String)"], "external_dependencies": {"modules": ["MultiKeyMap", "MultiKey"], "class_members": [{"name": "multiKeyMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeAll functionality with a null key in the MultiKeyMap."}, {"name": "testRemoveAllWithEmptyMap", "primary_tested": ["MultiKeyMap.removeAll(String)"], "associated_methods": ["MultiKeyMap.size()"], "external_dependencies": {"modules": ["MultiKeyMap", "MultiKey"], "class_members": [{"name": "multiKeyMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeAll functionality with an empty MultiKeyMap."}, {"name": "testRemoveAllWithMultipleRemovals", "primary_tested": ["MultiKeyMap.removeAll(String)"], "associated_methods": ["MultiKeyMap.put(String,String,String)", "MultiKeyMap.size()", "MultiKeyMap.containsKey(String,String)"], "external_dependencies": {"modules": ["MultiKeyMap", "MultiKey"], "class_members": [{"name": "multiKeyMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeAll functionality with multiple removals in the MultiKeyMap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/TransformingComparator_compareTest.java", "testclass_name": "TransformingComparator_compareTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import java.util.Comparator;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.TransformerUtils;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "TransformingComparator_compareTest", "description": "Unit tests for the compare method of the TransformingComparator class.", "class_members": {"variables": [{"name": "transformer", "type": "Transformer<String, Integer>"}, {"name": "decoratedComparator", "type": "Comparator<Integer>"}, {"name": "transformingComparator", "type": "TransformingComparator<String, Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testCompareLessThan", "primary_tested": ["TransformingComparator.compare(String,String)"], "external_dependencies": {"modules": ["TransformingComparator", "Comparator"], "class_members": [{"name": "transformingComparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the compare method of TransformingComparator for less than comparison."}, {"name": "testCompareGreaterThan", "primary_tested": ["TransformingComparator.compare(String,String)"], "external_dependencies": {"modules": ["TransformingComparator", "Comparator"], "class_members": [{"name": "transformingComparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the compare method of TransformingComparator for greater than comparison."}, {"name": "testCompareEqual", "primary_tested": ["TransformingComparator.compare(String,String)"], "external_dependencies": {"modules": ["TransformingComparator", "Comparator"], "class_members": [{"name": "transformingComparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the compare method of TransformingComparator for equal comparison."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/ReverseComparator_equalsTest.java", "testclass_name": "ReverseComparator_equalsTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import org.junit.jupiter.api.Test;", "import java.util.Comparator;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "ReverseComparator_equalsTest", "description": "Unit tests for the equals method of the ReverseComparator class.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testEquals_SameInstance", "primary_tested": ["ReverseComparator.equals(Object)"], "external_dependencies": {"modules": ["ReverseComparator", "Comparator"]}, "category": "unit", "description": "Tests the equals method with the same instance."}, {"name": "testEquals_NullObject", "primary_tested": ["ReverseComparator.equals(Object)"], "external_dependencies": {"modules": ["ReverseComparator", "Comparator"]}, "category": "unit", "description": "Tests the equals method with a null object."}, {"name": "testEquals_DifferentClass", "primary_tested": ["ReverseComparator.equals(Object)"], "external_dependencies": {"modules": ["ReverseComparator", "Comparator"]}, "category": "unit", "description": "Tests the equals method with an object of a different class."}, {"name": "testEquals_SameComparator", "primary_tested": ["ReverseComparator.equals(Object)"], "external_dependencies": {"modules": ["ReverseComparator", "Comparator"]}, "category": "unit", "description": "Tests the equals method with two instances of the same comparator."}, {"name": "testEquals_DifferentComparator", "primary_tested": ["ReverseComparator.equals(Object)"], "external_dependencies": {"modules": ["ReverseComparator", "Comparator"]}, "category": "unit", "description": "Tests the equals method with two instances of different comparators."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/ComparatorChain_equalsTest.java", "testclass_name": "ComparatorChain_equalsTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import org.junit.jupiter.api.Test;", "import java.util.ArrayList;", "import java.util.BitSet;", "import java.util.Comparator;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "ComparatorChain_equalsTest", "description": "Unit tests for the equals method of the ComparatorChain class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testEquals_SameInstance", "primary_tested": ["ComparatorChain.equals(Object)"], "external_dependencies": {"modules": ["ComparatorChain"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the equals method with the same instance."}, {"name": "testEquals_NullObject", "primary_tested": ["ComparatorChain.equals(Object)"], "external_dependencies": {"modules": ["ComparatorChain"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the equals method with a null object."}, {"name": "testEquals_DifferentClass", "primary_tested": ["ComparatorChain.equals(Object)"], "external_dependencies": {"modules": ["ComparatorChain"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the equals method with an object of a different class."}, {"name": "testEquals_SameClassDifferentState", "primary_tested": ["ComparatorChain.equals(Object)"], "external_dependencies": {"modules": ["ComparatorChain", "Comparator", "ArrayList", "BitSet"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the equals method with instances of the same class but different states."}, {"name": "testEquals_SameClassSameState", "primary_tested": ["ComparatorChain.equals(Object)"], "external_dependencies": {"modules": ["ComparatorChain", "Comparator", "ArrayList", "BitSet"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the equals method with instances of the same class and same state."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/BoundedIterator_removeTest.java", "testclass_name": "BoundedIterator_removeTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.Arrays;", "import java.util.Iterator;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "BoundedIterator_removeTest", "description": "Unit tests for the remove functionality of the BoundedIterator class.", "class_members": {"variables": [{"name": "testList", "type": "List<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveBeforeNext", "primary_tested": ["Iterator.remove()"], "external_dependencies": {"modules": ["BoundedIterator", "Iterator", "IllegalStateException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that calling remove before next throws an IllegalStateException."}, {"name": "testRemoveAfterNext", "primary_tested": ["Iterator.remove()"], "external_dependencies": {"modules": ["BoundedIterator", "Iterator", "UnsupportedOperationException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that calling remove after next throws an UnsupportedOperationException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/BooleanComparator_equalsTest.java", "testclass_name": "BooleanComparator_equalsTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.Test;"], "name": "BooleanComparator_equalsTest", "description": "Unit tests for the equals method of BooleanComparator.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testEqualsWithSameInstance", "primary_tested": ["BooleanComparator.equals(Object)"], "external_dependencies": {"modules": ["BooleanComparator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the equals method with the same instance."}, {"name": "testEqualsWithDifferentInstanceSameTrueFirst", "primary_tested": ["BooleanComparator.equals(Object)"], "external_dependencies": {"modules": ["BooleanComparator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the equals method with different instances but same true-first order."}, {"name": "testEqualsWithDifferentInstanceDifferentTrueFirst", "primary_tested": ["BooleanComparator.equals(Object)"], "external_dependencies": {"modules": ["BooleanComparator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the equals method with different instances and different true-first order."}, {"name": "testEqualsWithNonBooleanComparatorInstance", "primary_tested": ["BooleanComparator.equals(Object)"], "external_dependencies": {"modules": ["BooleanComparator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the equals method with a non-BooleanComparator instance."}, {"name": "testEqualsWithNull", "primary_tested": ["BooleanComparator.equals(Object)"], "external_dependencies": {"modules": ["BooleanComparator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the equals method with a null instance."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/NodeListIterator_nextTest.java", "testclass_name": "NodeListIterator_nextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import org.junit.jupiter.api.Test;", "import org.w3c.dom.Node;", "import org.w3c.dom.NodeList;", "import java.util.NoSuchElementException;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;"], "name": "NodeListIterator_nextTest", "description": "Unit tests for the next() method of NodeListIterator.", "class_members": {"variables": [{"name": "mockNodeList", "type": "NodeList"}, {"name": "mockNode", "type": "Node"}]}, "fixtures": [], "test_cases": [{"name": "testNextWithElements", "primary_tested": ["NodeListIterator.next()"], "associated_methods": ["NodeList.getLength()", "NodeList.item(int)"], "external_dependencies": {"modules": ["NodeList", "Node", "NodeListIterator", "NoSuchElementException"], "class_members": [{"name": "mockNodeList", "type": "variable"}, {"name": "mockNode", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the next() method of NodeListIterator when there are elements in the NodeList."}, {"name": "testNextWithoutElements", "primary_tested": ["NodeListIterator.next()"], "associated_methods": ["NodeList.getLength()"], "external_dependencies": {"modules": ["NodeList", "NodeListIterator", "NoSuchElementException"], "class_members": [{"name": "mockNodeList", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the next() method of NodeListIterator when there are no elements in the NodeList."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/PushbackIterator_pushbackIteratorTest.java", "testclass_name": "PushbackIterator_pushbackIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Iterator;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "PushbackIterator_pushbackIteratorTest", "description": "Unit tests for the PushbackIterator class, specifically focusing on the pushbackIterator method.", "class_members": {"variables": [{"name": "testList", "type": "List<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPushbackIteratorWithPushbackIterator", "primary_tested": ["PushbackIterator.pushbackIterator(PushbackIterator)"], "external_dependencies": {"modules": ["PushbackIterator", "List", "Iterator"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the pushbackIterator method when provided with a PushbackIterator instance."}, {"name": "testPushbackIteratorWithRegularIterator", "primary_tested": ["PushbackIterator.pushbackIterator(Iterator)"], "external_dependencies": {"modules": ["PushbackIterator", "List", "Iterator"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the pushbackIterator method when provided with a regular Iterator instance."}, {"name": "testPushbackIteratorWithNullIterator", "primary_tested": ["PushbackIterator.pushbackIterator(Iterator)"], "external_dependencies": {"modules": ["PushbackIterator"]}, "category": "unit", "fixtures_used": [], "description": "Tests the pushbackIterator method when provided with a null Iterator, expecting a NullPointerException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/CompositeMap_isEmptyTest.java", "testclass_name": "CompositeMap_isEmptyTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeMap_isEmptyTest", "description": "Unit tests for the isEmpty method of the CompositeMap class.", "class_members": {"variables": [{"name": "compositeMap", "type": "CompositeMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testIsEmptyWhenEmpty", "primary_tested": ["CompositeMap.isEmpty()"], "external_dependencies": {"modules": ["CompositeMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isEmpty method when the CompositeMap is empty."}, {"name": "testIsEmptyWhenNotEmpty", "primary_tested": ["CompositeMap.isEmpty()"], "associated_methods": ["CompositeMap.addComposited(Map<String, String>)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isEmpty method when the CompositeMap is not empty."}, {"name": "testIsEmptyAfterClear", "primary_tested": ["CompositeMap.isEmpty()"], "associated_methods": ["CompositeMap.addComposited(Map<String, String>)", "CompositeMap.clear()"], "external_dependencies": {"modules": ["CompositeMap", "HashMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isEmpty method after clearing the CompositeMap."}, {"name": "testIsEmptyAfterAddingAndRemovingMap", "primary_tested": ["CompositeMap.isEmpty()"], "associated_methods": ["CompositeMap.addComposited(Map<String, String>)", "CompositeMap.removeComposited(Map<String, String>)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isEmpty method after adding and removing a map from the CompositeMap."}, {"name": "testIsEmptyWithMultipleMaps", "primary_tested": ["CompositeMap.isEmpty()"], "associated_methods": ["CompositeMap.addComposited(Map<String, String>)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isEmpty method with multiple maps added to the CompositeMap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_addTest.java", "testclass_name": "IndexedCollection_addTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Collection;", "import java.util.HashMap;", "import java.util.Arrays;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.map.MultiValueMap;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "IndexedCollection_addTest", "description": "Unit tests for the IndexedCollection class, focusing on the add, addAll, remove, removeAll, removeIf, retainAll, clear, and reindex methods.", "class_members": {"variables": [{"name": "indexedCollection", "type": "IndexedCollection<Integer, String>"}, {"name": "originalCollection", "type": "Collection<String>"}, {"name": "keyTransformer", "type": "Transformer<String, Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAddSuccess", "primary_tested": ["IndexedCollection.add(String)"], "associated_methods": ["IndexedCollection.get(Integer)"], "external_dependencies": {"modules": ["IndexedCollection", "Transformer"], "class_members": [{"name": "indexedCollection", "type": "variable"}, {"name": "keyTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful addition of an element to the IndexedCollection."}, {"name": "testAddFailureDueToUniqueConstraint", "primary_tested": ["IndexedCollection.add(String)"], "associated_methods": ["IndexedCollection.get(Integer)"], "external_dependencies": {"modules": ["IndexedCollection", "Transformer"], "class_members": [{"name": "indexedCollection", "type": "variable"}, {"name": "keyTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the failure of adding an element due to unique constraint violation."}, {"name": "testAddFailureDueToNonUniqueIndex", "primary_tested": ["IndexedCollection.add(String)"], "associated_methods": ["IndexedCollection.values(Integer)"], "external_dependencies": {"modules": ["IndexedCollection", "Transformer", "MultiValueMap"], "class_members": [{"name": "indexedCollection", "type": "variable"}, {"name": "keyTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the failure of adding an element due to non-unique index."}, {"name": "testAddAllSuccess", "primary_tested": ["IndexedCollection.addAll(Collection<String>)"], "associated_methods": ["IndexedCollection.get(Integer)"], "external_dependencies": {"modules": ["IndexedCollection", "Transformer"], "class_members": [{"name": "indexedCollection", "type": "variable"}, {"name": "keyTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful addition of multiple elements to the IndexedCollection."}, {"name": "testAddAllFailureDueToUniqueConstraint", "primary_tested": ["IndexedCollection.addAll(Collection<String>)"], "external_dependencies": {"modules": ["IndexedCollection", "Transformer"], "class_members": [{"name": "indexedCollection", "type": "variable"}, {"name": "keyTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the failure of adding multiple elements due to unique constraint violation."}, {"name": "testRemoveSuccess", "primary_tested": ["IndexedCollection.remove(String)"], "associated_methods": ["IndexedCollection.get(Integer)"], "external_dependencies": {"modules": ["IndexedCollection", "Transformer"], "class_members": [{"name": "indexedCollection", "type": "variable"}, {"name": "keyTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful removal of an element from the IndexedCollection."}, {"name": "testRemoveAllSuccess", "primary_tested": ["IndexedCollection.removeAll(Collection<String>)"], "associated_methods": ["IndexedCollection.get(Integer)"], "external_dependencies": {"modules": ["IndexedCollection", "Transformer"], "class_members": [{"name": "indexedCollection", "type": "variable"}, {"name": "keyTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful removal of multiple elements from the IndexedCollection."}, {"name": "testRemoveIfSuccess", "primary_tested": ["IndexedCollection.removeIf(Predicate<String>)"], "associated_methods": ["IndexedCollection.get(Integer)"], "external_dependencies": {"modules": ["IndexedCollection", "Transformer"], "class_members": [{"name": "indexedCollection", "type": "variable"}, {"name": "keyTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful conditional removal of elements from the IndexedCollection."}, {"name": "testRetainAllSuccess", "primary_tested": ["IndexedCollection.retainAll(Collection<String>)"], "associated_methods": ["IndexedCollection.get(Integer)"], "external_dependencies": {"modules": ["IndexedCollection", "Transformer"], "class_members": [{"name": "indexedCollection", "type": "variable"}, {"name": "keyTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful retention of specified elements in the IndexedCollection."}, {"name": "testClear", "primary_tested": ["IndexedCollection.clear()"], "associated_methods": ["IndexedCollection.get(Integer)"], "external_dependencies": {"modules": ["IndexedCollection", "Transformer"], "class_members": [{"name": "indexedCollection", "type": "variable"}, {"name": "keyTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clearing of all elements from the IndexedCollection."}, {"name": "testReindex", "primary_tested": ["IndexedCollection.reindex()"], "associated_methods": ["IndexedCollection.get(Integer)"], "external_dependencies": {"modules": ["IndexedCollection", "Transformer"], "class_members": [{"name": "indexedCollection", "type": "variable"}, {"name": "keyTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the reindexing of elements in the IndexedCollection."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/LRUMap_getTest.java", "testclass_name": "LRUMap_getTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "LRUMap_getTest", "description": "Unit tests for the get method of LRUMap, focusing on different scenarios including updating to MRU, not updating to MRU, handling non-existing keys, null keys, and full maps.", "class_members": {"variables": [{"name": "lruMap", "type": "LRUMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetExistingKeyWithUpdateToMRU", "primary_tested": ["LRUMap.get(String,boolean)"], "external_dependencies": {"modules": ["LRUMap"], "class_members": [{"name": "lruMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method with an existing key and updates to MRU."}, {"name": "testGetExistingKeyWithoutUpdateToMRU", "primary_tested": ["LRUMap.get(String,boolean)"], "external_dependencies": {"modules": ["LRUMap"], "class_members": [{"name": "lruMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method with an existing key without updating to MRU."}, {"name": "testGetNonExistingKey", "primary_tested": ["LRUMap.get(String,boolean)"], "external_dependencies": {"modules": ["LRUMap"], "class_members": [{"name": "lruMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method with a non-existing key."}, {"name": "testGetNullKey", "primary_tested": ["LRUMap.get(String,boolean)"], "external_dependencies": {"modules": ["LRUMap"], "class_members": [{"name": "lruMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method with a null key."}, {"name": "testGetWithFullMap", "primary_tested": ["LRUMap.get(String,boolean)"], "external_dependencies": {"modules": ["LRUMap"], "class_members": [{"name": "lruMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method with a full map and updates to MRU."}, {"name": "testGetWithFullMapWithoutUpdateToMRU", "primary_tested": ["LRUMap.get(String,boolean)"], "external_dependencies": {"modules": ["LRUMap"], "class_members": [{"name": "lruMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method with a full map without updating to MRU."}, {"name": "testGetWithEmptyMap", "primary_tested": ["LRUMap.get(String,boolean)"], "external_dependencies": {"modules": ["LRUMap"], "class_members": [{"name": "lruMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method with an empty map."}, {"name": "testGetWithMultipleGets", "primary_tested": ["LRUMap.get(String,boolean)"], "external_dependencies": {"modules": ["LRUMap"], "class_members": [{"name": "lruMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method with multiple gets and updates to MRU."}, {"name": "testGetWithMultipleGetsWithoutUpdateToMRU", "primary_tested": ["LRUMap.get(String,boolean)"], "external_dependencies": {"modules": ["LRUMap"], "class_members": [{"name": "lruMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method with multiple gets without updating to MRU."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_setTest.java", "testclass_name": "SingletonListIterator_setTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SingletonListIterator_setTest", "description": "Unit tests for the set method of SingletonListIterator.", "class_members": {"variables": [{"name": "testValue", "type": "static final Object"}, {"name": "iterator", "type": "SingletonListIterator<Object>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testSetSuccess", "primary_tested": ["SingletonListIterator.set(Object)"], "associated_methods": ["SingletonListIterator.next()", "SingletonListIterator.previous()"], "external_dependencies": {"modules": ["SingletonListIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful setting of a new value after calling next."}, {"name": "testSetWithoutNextCall", "primary_tested": ["SingletonListIterator.set(Object)"], "external_dependencies": {"modules": ["SingletonListIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that setting a value without calling next throws an IllegalStateException."}, {"name": "testSetAfterRemove", "primary_tested": ["SingletonListIterator.set(Object)"], "associated_methods": ["SingletonListIterator.next()", "SingletonListIterator.remove()"], "external_dependencies": {"modules": ["SingletonListIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that setting a value after calling remove throws an IllegalStateException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_previousTest.java", "testclass_name": "SingletonListIterator_previousTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SingletonListIterator_previousTest", "description": "Unit tests for the previous method of SingletonListIterator.", "class_members": {"variables": [{"name": "iterator", "type": "SingletonListIterator<String>"}, {"name": "testValue", "type": "static final String"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPreviousSuccess", "primary_tested": ["SingletonListIterator.previous()"], "associated_methods": ["SingletonListIterator.next()"], "external_dependencies": {"modules": ["SingletonListIterator", "NoSuchElementException"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful retrieval of the previous element after moving forward."}, {"name": "testPreviousBeforeFirst", "primary_tested": ["SingletonListIterator.previous()"], "external_dependencies": {"modules": ["SingletonListIterator", "NoSuchElementException"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that calling previous before moving forward throws a NoSuchElementException."}, {"name": "testPreviousAfterRemove", "primary_tested": ["SingletonListIterator.previous()"], "associated_methods": ["SingletonListIterator.next()", "SingletonListIterator.remove()"], "external_dependencies": {"modules": ["SingletonListIterator", "NoSuchElementException"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that calling previous after removing the element throws a NoSuchElementException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparator_addAsEqualTest.java", "testclass_name": "FixedOrderComparator_addAsEqualTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "FixedOrderComparator_addAsEqualTest", "description": "Unit tests for the addAsEqual method of FixedOrderComparator.", "class_members": {"variables": [{"name": "comparator", "type": "FixedOrderComparator<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAddAsEqual_Success", "primary_tested": ["FixedOrderComparator.addAsEqual(String,String)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful addition of an object as equal to an existing object in the FixedOrderComparator."}, {"name": "testAddAsEqual_ExistingObjNotKnown", "primary_tested": ["FixedOrderComparator.addAsEqual(String,String)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that an IllegalArgumentException is thrown when trying to add an object as equal to a non-existing object in the FixedOrderComparator."}, {"name": "testAddAsEqual_AlreadyKnown", "primary_tested": ["FixedOrderComparator.addAsEqual(String,String)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that adding an object as equal to an existing object in the FixedOrderComparator returns false if the object is already known."}, {"name": "testAddAsEqual_LockedComparator", "primary_tested": ["FixedOrderComparator.addAsEqual(String,String)"], "associated_methods": ["FixedOrderComparator.compare(String,String)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that an UnsupportedOperationException is thrown when trying to add an object as equal to an existing object in a locked FixedOrderComparator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/SkippingIterator_nextTest.java", "testclass_name": "SkippingIterator_nextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Arrays;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SkippingIterator_nextTest", "description": "Unit tests for the next method of the SkippingIterator class.", "class_members": {"variables": [{"name": "testList", "type": "List<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNextWithOffset", "primary_tested": ["SkippingIterator.next()"], "associated_methods": ["SkippingIterator.hasNext()"], "external_dependencies": {"modules": ["SkippingIterator", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method of SkippingIterator with an offset, ensuring correct elements are returned and NoSuchElementException is thrown when expected."}, {"name": "testNextWithoutOffset", "primary_tested": ["SkippingIterator.next()"], "associated_methods": ["SkippingIterator.hasNext()"], "external_dependencies": {"modules": ["SkippingIterator", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method of SkippingIterator without an offset, ensuring all elements are returned and NoSuchElementException is thrown when expected."}, {"name": "testNextWithOffsetGreaterThanSize", "primary_tested": ["SkippingIterator.next()"], "external_dependencies": {"modules": ["SkippingIterator", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method of SkippingIterator with an offset greater than the size of the list, ensuring NoSuchElementException is thrown."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableListIterator_unmodifiableListIteratorTest.java", "testclass_name": "UnmodifiableListIterator_unmodifiableListIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import org.apache.commons.collections4.Unmodifiable;", "import org.junit.jupiter.api.Test;", "import java.util.ListIterator;", "import java.util.NoSuchElementException;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;"], "name": "UnmodifiableListIterator_unmodifiableListIteratorTest", "description": "Tests for the UnmodifiableListIterator class, focusing on the unmodifiableListIterator method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testUnmodifiableListIteratorWithUnmodifiableIterator", "primary_tested": ["UnmodifiableListIterator.unmodifiableListIterator(ListIterator)"], "associated_methods": ["ListIterator.hasNext()", "ListIterator.next()"], "external_dependencies": {"modules": ["ListIterator", "UnmodifiableListIterator"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the unmodifiableListIterator method with an unmodifiable iterator, verifying that it correctly wraps and delegates calls to the underlying iterator."}, {"name": "testUnmodifiableListIteratorWithModifiableIterator", "primary_tested": ["UnmodifiableListIterator.unmodifiableListIterator(ListIterator)"], "associated_methods": ["ListIterator.hasNext()", "ListIterator.next()"], "external_dependencies": {"modules": ["ListIterator", "UnmodifiableListIterator"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the unmodifiableListIterator method with a modifiable iterator, verifying that it correctly wraps and delegates calls to the underlying iterator."}, {"name": "testUnmodifiableListIteratorWithNullIterator", "primary_tested": ["UnmodifiableListIterator.unmodifiableListIterator(ListIterator)"], "external_dependencies": {"modules": ["UnmodifiableListIterator"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the unmodifiableListIterator method with a null iterator, expecting a NullPointerException to be thrown."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/FilterIterator_removeTest.java", "testclass_name": "FilterIterator_removeTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.apache.commons.collections4.functors.TruePredicate.truePredicate;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.apache.commons.collections4.Predicate;", "import org.apache.commons.collections4.functors.NotNullPredicate;", "import org.apache.commons.lang3.ArrayUtils;", "import org.junit.jupiter.api.AfterEach;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "FilterIterator_removeTest", "description": "Unit tests for the remove functionality of the FilterIterator class.", "class_members": {"variables": [{"name": "iterator", "type": "FilterIterator<String>"}, {"name": "list", "type": "List<String>"}], "methods": [{"name": "initIterator", "signature": "void initIterator()"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveWithoutNext", "primary_tested": ["FilterIterator.remove()"], "external_dependencies": {"modules": ["FilterIterator", "IllegalStateException"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that calling remove() without calling next() throws an IllegalStateException."}, {"name": "testRemoveAfterNext", "primary_tested": ["FilterIterator.remove()"], "associated_methods": ["FilterIterator.next()"], "external_dependencies": {"modules": ["FilterIterator", "List"], "class_members": [{"name": "iterator", "type": "variable"}, {"name": "list", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that calling remove() after calling next() removes the element from the list."}, {"name": "testRemoveAfterHasNext", "primary_tested": ["FilterIterator.remove()"], "associated_methods": ["FilterIterator.hasNext()"], "external_dependencies": {"modules": ["FilterIterator", "IllegalStateException"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that calling remove() after calling hasNext() throws an IllegalStateException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/CollatingIterator_setIteratorTest.java", "testclass_name": "CollatingIterator_setIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import org.junit.jupiter.api.Test;", "import java.util.Iterator;", "import java.util.NoSuchElementException;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;"], "name": "CollatingIterator_setIteratorTest", "description": "Unit tests for the setIterator method of the CollatingIterator class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testSetIterator_Success", "primary_tested": ["CollatingIterator.setIterator(int,Iterator)"], "associated_methods": ["CollatingIterator.addIterator(Iterator)", "CollatingIterator.getIterators()"], "external_dependencies": {"modules": ["CollatingIterator", "Iterator"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the successful setting of an iterator in the CollatingIterator."}, {"name": "testSetIterator_NullIterator", "primary_tested": ["CollatingIterator.setIterator(int,Iterator)"], "associated_methods": ["CollatingIterator.addIterator(Iterator)"], "external_dependencies": {"modules": ["CollatingIterator", "Iterator"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior when attempting to set a null iterator in the CollatingIterator, expecting a NullPointerException."}, {"name": "testSetIterator_IterationStarted", "primary_tested": ["CollatingIterator.setIterator(int,Iterator)"], "associated_methods": ["CollatingIterator.addIterator(Iterator)", "CollatingIterator.hasNext()"], "external_dependencies": {"modules": ["CollatingIterator", "Iterator"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior when attempting to set an iterator after the iteration has started, expecting an IllegalStateException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableIterator_unmodifiableIteratorTest.java", "testclass_name": "UnmodifiableIterator_unmodifiableIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import org.junit.jupiter.api.Test;", "import java.util.Iterator;", "import java.util.NoSuchElementException;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;"], "name": "UnmodifiableIterator_unmodifiableIteratorTest", "description": "Tests for the UnmodifiableIterator class, focusing on the behavior of the unmodifiableIterator method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testUnmodifiableIteratorWithModifiableIterator", "primary_tested": ["UnmodifiableIterator.unmodifiableIterator(Iterator)"], "external_dependencies": {"modules": ["Iterator", "UnmodifiableIterator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the unmodifiableIterator method returns a new UnmodifiableIterator instance when given a modifiable iterator."}, {"name": "testUnmodifiableIteratorWithUnmodifiableIterator", "primary_tested": ["UnmodifiableIterator.unmodifiableIterator(Iterator)"], "external_dependencies": {"modules": ["Iterator", "UnmodifiableIterator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the unmodifiableIterator method returns the same UnmodifiableIterator instance when given an unmodifiable iterator."}, {"name": "testUnmodifiableIteratorWithNullIterator", "primary_tested": ["UnmodifiableIterator.unmodifiableIterator(Iterator)"], "external_dependencies": {"modules": ["UnmodifiableIterator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the unmodifiableIterator method throws a NullPointerException when given a null iterator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_getTest.java", "testclass_name": "StaticBucketMap_getTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "StaticBucketMap_getTest", "description": "Unit tests for the get method of StaticBucketMap.", "class_members": {"variables": [{"name": "map", "type": "StaticBucketMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetExistingKey", "primary_tested": ["StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method for an existing key in the map."}, {"name": "testGetNonExistingKey", "primary_tested": ["StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method for a non-existing key in the map."}, {"name": "testGetNullKey", "primary_tested": ["StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method for a null key in the map."}, {"name": "testGetAfterRemove", "primary_tested": ["StaticBucketMap.get(String)"], "associated_methods": ["StaticBucketMap.remove(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method after removing a key from the map."}, {"name": "testGetWithMultipleEntries", "primary_tested": ["StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method with multiple entries in the map."}, {"name": "testGetWithCollision", "primary_tested": ["StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method with keys that hash to the same bucket."}, {"name": "testGetWithEmptyMap", "primary_tested": ["StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method with an empty map."}, {"name": "testGetWithSameKeyDifferentValue", "primary_tested": ["StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method with the same key but different values in the map."}, {"name": "testGetWithNullValue", "primary_tested": ["StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method with a null value in the map."}, {"name": "testGetWithNullKeyAndNullValue", "primary_tested": ["StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method with a null key and null value in the map."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIterator_nextIndexTest.java", "testclass_name": "LoopingListIterator_nextIndexTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.Arrays;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "LoopingListIterator_nextIndexTest", "description": "Unit tests for the nextIndex method of the LoopingListIterator class.", "class_members": {"variables": [{"name": "loopingListIterator", "type": "LoopingListIterator<String>"}, {"name": "list", "type": "List<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNextIndexWithElements", "primary_tested": ["LoopingListIterator.nextIndex()"], "associated_methods": ["LoopingListIterator.next()"], "external_dependencies": {"modules": ["LoopingListIterator", "List"], "class_members": [{"name": "loopingListIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the nextIndex method with elements in the list."}, {"name": "testNextIndexWithEmptyList", "primary_tested": ["LoopingListIterator.nextIndex()"], "external_dependencies": {"modules": ["LoopingListIterator", "List", "NoSuchElementException"], "class_members": [{"name": "loopingListIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the nextIndex method with an empty list, expecting a NoSuchElementException."}, {"name": "testNextIndexAfterReset", "primary_tested": ["LoopingListIterator.nextIndex()"], "associated_methods": ["LoopingListIterator.next()", "LoopingListIterator.reset()"], "external_dependencies": {"modules": ["LoopingListIterator", "List"], "class_members": [{"name": "loopingListIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the nextIndex method after resetting the iterator."}, {"name": "testNextIndexAfterPrevious", "primary_tested": ["LoopingListIterator.nextIndex()"], "associated_methods": ["LoopingListIterator.previous()"], "external_dependencies": {"modules": ["LoopingListIterator", "List"], "class_members": [{"name": "loopingListIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the nextIndex method after calling the previous method."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/properties/OrderedProperties_clearTest.java", "testclass_name": "OrderedProperties_clearTest", "dependencies": ["package org.apache.commons.collections4.properties;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "OrderedProperties_clearTest", "description": "Unit tests for the clear functionality of OrderedProperties.", "class_members": {"variables": [{"name": "orderedProperties", "type": "OrderedProperties"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testClear", "primary_tested": ["OrderedProperties.clear()"], "associated_methods": ["OrderedProperties.put(String,String)", "OrderedProperties.isEmpty()"], "external_dependencies": {"modules": ["OrderedProperties"], "class_members": [{"name": "orderedProperties", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clear functionality of the OrderedProperties by adding elements and then clearing them, verifying the properties are empty afterwards."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/TransformingComparator_hashCodeTest.java", "testclass_name": "TransformingComparator_hashCodeTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.TransformerUtils;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "TransformingComparator_hashCodeTest", "description": "Unit tests for the hashCode method of the TransformingComparator class.", "class_members": {"variables": [{"name": "transformer", "type": "Transformer<String, String>"}, {"name": "comparator", "type": "TransformingComparator<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testHashCodeWithNonNullDecoratedAndTransformer", "primary_tested": ["TransformingComparator.hashCode()"], "associated_methods": ["TransformingComparator.TransformingComparator(Transformer,Comparator)", "TransformingComparator.hashCode()"], "external_dependencies": {"modules": ["Transformer", "TransformingComparator"], "class_members": [{"name": "transformer", "type": "variable"}, {"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hashCode method of TransformingComparator with non-null decorated comparator and transformer."}, {"name": "testHashCodeWithNullDecorated", "primary_tested": ["TransformingComparator.hashCode()"], "associated_methods": ["TransformingComparator.TransformingComparator(Transformer,Comparator)", "TransformingComparator.hashCode()"], "external_dependencies": {"modules": ["Transformer", "TransformingComparator"], "class_members": [{"name": "transformer", "type": "variable"}, {"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hashCode method of TransformingComparator with null decorated comparator."}, {"name": "testHashCodeWithNullTransformer", "primary_tested": ["TransformingComparator.hashCode()"], "associated_methods": ["TransformingComparator.TransformingComparator(Transformer,Comparator)", "TransformingComparator.hashCode()"], "external_dependencies": {"modules": ["Transformer", "TransformingComparator"], "class_members": [{"name": "transformer", "type": "variable"}, {"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hashCode method of TransformingComparator with null transformer."}, {"name": "testHashCodeWithNullDecoratedAndTransformer", "primary_tested": ["TransformingComparator.hashCode()"], "associated_methods": ["TransformingComparator.TransformingComparator(Transformer,Comparator)", "TransformingComparator.hashCode()"], "external_dependencies": {"modules": ["Transformer", "TransformingComparator"], "class_members": [{"name": "transformer", "type": "variable"}, {"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hashCode method of TransformingComparator with null decorated comparator and transformer."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableMapIterator_unmodifiableMapIteratorTest.java", "testclass_name": "UnmodifiableMapIterator_unmodifiableMapIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import org.apache.commons.collections4.MapIterator;", "import org.apache.commons.collections4.Unmodifiable;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;"], "name": "UnmodifiableMapIterator_unmodifiableMapIteratorTest", "description": "Tests for the UnmodifiableMapIterator class, focusing on the unmodifiableMapIterator method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testUnmodifiableMapIteratorWithUnmodifiableIterator", "primary_tested": ["UnmodifiableMapIterator.unmodifiableMapIterator(MapIterator)"], "associated_methods": ["MapIterator.hasNext()", "MapIterator.next()", "MapIterator.getKey()", "MapIterator.getValue()"], "external_dependencies": {"modules": ["MapIterator", "UnmodifiableMapIterator", "Unmodifiable"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the unmodifiableMapIterator method with an unmodifiable iterator, ensuring the result is an instance of Unmodifiable and that the key and value are correctly retrieved."}, {"name": "testUnmodifiableMapIteratorWithModifiableIterator", "primary_tested": ["UnmodifiableMapIterator.unmodifiableMapIterator(MapIterator)"], "associated_methods": ["MapIterator.hasNext()", "MapIterator.next()", "MapIterator.getKey()", "MapIterator.getValue()"], "external_dependencies": {"modules": ["MapIterator", "UnmodifiableMapIterator"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the unmodifiableMapIterator method with a modifiable iterator, ensuring the result is an instance of UnmodifiableMapIterator and that the key and value are correctly retrieved."}, {"name": "testUnmodifiableMapIteratorWithNullIterator", "primary_tested": ["UnmodifiableMapIterator.unmodifiableMapIterator(MapIterator)"], "external_dependencies": {"modules": ["MapIterator", "UnmodifiableMapIterator"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the unmodifiableMapIterator method with a null iterator, ensuring a NullPointerException is thrown."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_equalsTest.java", "testclass_name": "StaticBucketMap_equalsTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "StaticBucketMap_equalsTest", "description": "Unit tests for the equals method of the StaticBucketMap class.", "class_members": {"variables": [{"name": "map", "type": "StaticBucketMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEquals_SameInstance", "primary_tested": ["StaticBucketMap.equals(Object)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with the same instance."}, {"name": "testEquals_DifferentType", "primary_tested": ["StaticBucketMap.equals(Object)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with a different type."}, {"name": "testEquals_EmptyMaps", "primary_tested": ["StaticBucketMap.equals(Object)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with two empty maps."}, {"name": "testEquals_NonEmptyMapsEqual", "primary_tested": ["StaticBucketMap.equals(Object)"], "associated_methods": ["StaticBucketMap.put(String,String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with two non-empty maps that are equal."}, {"name": "testEquals_NonEmptyMapsNotEqual", "primary_tested": ["StaticBucketMap.equals(Object)"], "associated_methods": ["StaticBucketMap.put(String,String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with two non-empty maps that are not equal."}, {"name": "testEquals_NullKey", "primary_tested": ["StaticBucketMap.equals(Object)"], "associated_methods": ["StaticBucketMap.put(String,String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with null keys."}, {"name": "testEquals_NullValue", "primary_tested": ["StaticBucketMap.equals(Object)"], "associated_methods": ["StaticBucketMap.put(String,String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with null values."}, {"name": "testEquals_DifferentBucketSize", "primary_tested": ["StaticBucketMap.equals(Object)"], "associated_methods": ["StaticBucketMap.put(String,String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with maps having different bucket sizes."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/SkippingIterator_removeTest.java", "testclass_name": "SkippingIterator_removeTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;", "import java.util.Iterator;"], "name": "SkippingIterator_removeTest", "description": "Unit tests for the remove method of the SkippingIterator class.", "class_members": {"variables": [{"name": "mockIterator", "type": "Iterator<Object>"}, {"name": "skippingIterator", "type": "SkippingIterator<Object>"}]}, "fixtures": [], "test_cases": [{"name": "testRemoveBeforeNext", "primary_tested": ["SkippingIterator.remove()"], "external_dependencies": {"modules": ["Iterator", "SkippingIterator"], "class_members": [{"name": "mockIterator", "type": "variable"}, {"name": "skippingIterator", "type": "variable"}]}, "category": "unit", "description": "Tests that calling remove before next throws an IllegalStateException."}, {"name": "testRemoveAfterNext", "primary_tested": ["SkippingIterator.remove()"], "associated_methods": ["SkippingIterator.next()"], "external_dependencies": {"modules": ["Iterator", "SkippingIterator"], "class_members": [{"name": "mockIterator", "type": "variable"}, {"name": "skippingIterator", "type": "variable"}]}, "category": "unit", "description": "Tests that calling remove after next successfully removes the element and calls the underlying iterator's remove method."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/SingletonIterator_nextTest.java", "testclass_name": "SingletonIterator_nextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SingletonIterator_nextTest", "description": "Unit tests for the next() method of the SingletonIterator class.", "class_members": {"variables": [{"name": "iterator", "type": "SingletonIterator<String>"}, {"name": "testValue", "type": "static final String"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNextSuccess", "primary_tested": ["SingletonIterator.next()"], "associated_methods": ["SingletonIterator.hasNext()"], "external_dependencies": {"modules": ["SingletonIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful retrieval of the next element from the SingletonIterator."}, {"name": "testNextNoSuchElementException", "primary_tested": ["SingletonIterator.next()"], "associated_methods": ["SingletonIterator.hasNext()"], "external_dependencies": {"modules": ["SingletonIterator", "NoSuchElementException"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that a NoSuchElementException is thrown when calling next() after the element has been retrieved."}, {"name": "testNextAfterRemove", "primary_tested": ["SingletonIterator.next()"], "associated_methods": ["SingletonIterator.hasNext()", "SingletonIterator.remove()"], "external_dependencies": {"modules": ["SingletonIterator", "NoSuchElementException"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that a NoSuchElementException is thrown when calling next() after the element has been removed."}, {"name": "testNextAfterReset", "primary_tested": ["SingletonIterator.next()"], "associated_methods": ["SingletonIterator.hasNext()", "SingletonIterator.reset()"], "external_dependencies": {"modules": ["SingletonIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful retrieval of the next element after resetting the SingletonIterator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/ObjectArrayIterator_nextTest.java", "testclass_name": "ObjectArrayIterator_nextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ObjectArrayIterator_nextTest", "description": "Unit tests for the next() method of the ObjectArrayIterator class.", "class_members": {"variables": [{"name": "iterator", "type": "ObjectArrayIterator<String>"}, {"name": "testArray", "type": "String[]"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNextWithElements", "primary_tested": ["ObjectArrayIterator.next()"], "external_dependencies": {"modules": ["ObjectArrayIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next() method when there are elements in the iterator."}, {"name": "testNextWithoutElements", "primary_tested": ["ObjectArrayIterator.next()"], "external_dependencies": {"modules": ["ObjectArrayIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the next() method when there are no elements in the iterator."}, {"name": "testNextAfterReset", "primary_tested": ["ObjectArrayIterator.next()"], "associated_methods": ["ObjectArrayIterator.reset()"], "external_dependencies": {"modules": ["ObjectArrayIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next() method after resetting the iterator."}, {"name": "testNextWithCustomStartIndex", "primary_tested": ["ObjectArrayIterator.next()"], "external_dependencies": {"modules": ["ObjectArrayIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the next() method with a custom start index."}, {"name": "testNextWithCustomRange", "primary_tested": ["ObjectArrayIterator.next()"], "external_dependencies": {"modules": ["ObjectArrayIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the next() method with a custom range."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/ObjectGraphIterator_hasNextTest.java", "testclass_name": "ObjectGraphIterator_hasNextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ObjectGraphIterator_hasNextTest", "description": "Unit tests for the hasNext method of the ObjectGraphIterator class.", "class_members": {"variables": [{"name": "iterator", "type": "ObjectGraphIterator<Object>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testHasNext_RootNull", "primary_tested": ["ObjectGraphIterator.hasNext()"], "external_dependencies": {"modules": ["ObjectGraphIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method when the root is null."}, {"name": "testHasNext_RootNotNull", "primary_tested": ["ObjectGraphIterator.hasNext()"], "associated_methods": ["ObjectGraphIterator.next()"], "external_dependencies": {"modules": ["ObjectGraphIterator", "ArrayList", "List"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method when the root is not null."}, {"name": "testHasNext_WithTransformer", "primary_tested": ["ObjectGraphIterator.hasNext()"], "associated_methods": ["ObjectGraphIterator.next()"], "external_dependencies": {"modules": ["ObjectGraphIterator", "ArrayList", "List", "Transformer"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method with a transformer."}, {"name": "testHasNext_NestedIterators", "primary_tested": ["ObjectGraphIterator.hasNext()"], "associated_methods": ["ObjectGraphIterator.next()"], "external_dependencies": {"modules": ["ObjectGraphIterator", "ArrayList", "List", "Iterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method with nested iterators."}, {"name": "testHasNext_NoSuchElementException", "primary_tested": ["ObjectGraphIterator.hasNext()"], "associated_methods": ["ObjectGraphIterator.next()"], "external_dependencies": {"modules": ["ObjectGraphIterator", "NoSuchElementException"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method and expects a NoSuchElementException when calling next on an empty iterator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bidimap/UnmodifiableSortedBidiMap_entrySetTest.java", "testclass_name": "UnmodifiableSortedBidiMap_entrySetTest", "dependencies": ["package org.apache.commons.collections4.bidimap;", "import org.apache.commons.collections4.map.UnmodifiableEntrySet;", "import org.junit.jupiter.api.Test;", "import java.util.Map;", "import java.util.Set;", "import java.util.SortedMap;", "import java.util.TreeMap;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "UnmodifiableSortedBidiMap_entrySetTest", "description": "Tests the entrySet functionality of the UnmodifiableSortedBidiMap.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testEntrySet", "primary_tested": ["UnmodifiableSortedBidiMap.entrySet()"], "external_dependencies": {"modules": ["SortedMap", "TreeMap", "UnmodifiableEntrySet", "UnmodifiableSortedBidiMap", "DualTreeBidiMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests if the entrySet of the UnmodifiableSortedBidiMap is an instance of UnmodifiableEntrySet."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/LoopingIterator_nextTest.java", "testclass_name": "LoopingIterator_nextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "LoopingIterator_nextTest", "description": "Unit tests for the next method of the LoopingIterator class.", "class_members": {"variables": [{"name": "loop", "type": "LoopingIterator<String>"}, {"name": "list", "type": "List<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNextWithElements", "primary_tested": ["LoopingIterator.next()"], "external_dependencies": {"modules": ["LoopingIterator", "List"], "class_members": [{"name": "loop", "type": "variable"}, {"name": "list", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method of LoopingIterator with elements, ensuring it loops back to the start."}, {"name": "testNextWithEmptyCollection", "primary_tested": ["LoopingIterator.next()"], "external_dependencies": {"modules": ["LoopingIterator", "List", "NoSuchElementException"], "class_members": [{"name": "loop", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the next method of LoopingIterator with an empty collection, expecting a NoSuchElementException."}, {"name": "testNextWithReset", "primary_tested": ["LoopingIterator.next()"], "associated_methods": ["LoopingIterator.reset()"], "external_dependencies": {"modules": ["LoopingIterator", "List"], "class_members": [{"name": "loop", "type": "variable"}, {"name": "list", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method of LoopingIterator after resetting, ensuring it starts from the beginning."}, {"name": "testNextWithRemove", "primary_tested": ["LoopingIterator.next()"], "associated_methods": ["LoopingIterator.remove()", "LoopingIterator.size()"], "external_dependencies": {"modules": ["LoopingIterator", "List"], "class_members": [{"name": "loop", "type": "variable"}, {"name": "list", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method of LoopingIterator after removing an element, ensuring it loops correctly."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bidimap/UnmodifiableBidiMap_entrySetTest.java", "testclass_name": "UnmodifiableBidiMap_entrySetTest", "dependencies": ["package org.apache.commons.collections4.bidimap;", "import org.apache.commons.collections4.BidiMap;", "import org.apache.commons.collections4.map.UnmodifiableEntrySet;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;", "import java.util.Set;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "UnmodifiableBidiMap_entrySetTest", "description": "Tests the entrySet functionality of the UnmodifiableBidiMap.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testEntrySet", "primary_tested": ["UnmodifiableBidiMap.entrySet()"], "external_dependencies": {"modules": ["BidiMap", "DualHashBidiMap", "UnmodifiableBidiMap", "UnmodifiableEntrySet", "Map", "Set"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the entrySet of an UnmodifiableBidiMap is an instance of UnmodifiableEntrySet."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableOrderedMapIterator_unmodifiableOrderedMapIteratorTest.java", "testclass_name": "UnmodifiableOrderedMapIterator_unmodifiableOrderedMapIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import org.apache.commons.collections4.OrderedMapIterator;", "import org.apache.commons.collections4.Unmodifiable;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;"], "name": "UnmodifiableOrderedMapIterator_unmodifiableOrderedMapIteratorTest", "description": "Tests for the UnmodifiableOrderedMapIterator class, specifically focusing on the unmodifiableOrderedMapIterator method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testUnmodifiableOrderedMapIteratorWithUnmodifiableIterator", "primary_tested": ["UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator(OrderedMapIterator)"], "external_dependencies": {"modules": ["OrderedMapIterator", "UnmodifiableOrderedMapIterator", "Unmodifiable"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the unmodifiableOrderedMapIterator method returns an instance of Unmodifiable when provided with an unmodifiable iterator."}, {"name": "testUnmodifiableOrderedMapIteratorWithModifiableIterator", "primary_tested": ["UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator(OrderedMapIterator)"], "external_dependencies": {"modules": ["OrderedMapIterator", "UnmodifiableOrderedMapIterator", "Unmodifiable"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the unmodifiableOrderedMapIterator method returns a different instance and an instance of Unmodifiable when provided with a modifiable iterator."}, {"name": "testUnmodifiableOrderedMapIteratorWithNullIterator", "primary_tested": ["UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator(OrderedMapIterator)"], "external_dependencies": {"modules": ["OrderedMapIterator", "UnmodifiableOrderedMapIterator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the unmodifiableOrderedMapIterator method throws a NullPointerException when provided with a null iterator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bidimap/UnmodifiableBidiMap_valuesTest.java", "testclass_name": "UnmodifiableBidiMap_valuesTest", "dependencies": ["package org.apache.commons.collections4.bidimap;", "import org.apache.commons.collections4.BidiMap;", "import org.apache.commons.collections4.set.UnmodifiableSet;", "import org.junit.jupiter.api.Test;", "import java.util.Set;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "UnmodifiableBidiMap_valuesTest", "description": "Tests the values functionality of the UnmodifiableBidiMap.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testValues", "primary_tested": ["UnmodifiableBidiMap.values()"], "associated_methods": ["UnmodifiableSet.contains(Object)", "UnmodifiableSet.size()"], "external_dependencies": {"modules": ["BidiMap", "DualHashBidiMap", "UnmodifiableBidiMap", "UnmodifiableSet"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the values functionality of the UnmodifiableBidiMap, ensuring the returned set is unmodifiable and contains the correct values."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bidimap/UnmodifiableBidiMap_keySetTest.java", "testclass_name": "UnmodifiableBidiMap_keySetTest", "dependencies": ["package org.apache.commons.collections4.bidimap;", "import org.apache.commons.collections4.BidiMap;", "import org.apache.commons.collections4.set.UnmodifiableSet;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;", "import java.util.Set;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "UnmodifiableBidiMap_keySetTest", "description": "Test suite for the keySet method of the UnmodifiableBidiMap class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testKeySet", "primary_tested": ["UnmodifiableBidiMap.keySet()"], "external_dependencies": {"modules": ["BidiMap", "UnmodifiableSet", "HashMap", "Map", "Set"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the keySet method of the UnmodifiableBidiMap to ensure it returns an unmodifiable set containing the correct keys."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/ComparatorChain_compareTest.java", "testclass_name": "ComparatorChain_compareTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.Comparator;"], "name": "ComparatorChain_compareTest", "description": "Unit tests for the compare method in the ComparatorChain class.", "class_members": {"variables": [{"name": "comparatorChain", "type": "ComparatorChain<Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testCompareWithSingleComparatorForwardOrder", "primary_tested": ["ComparatorChain.compare(Integer,Integer)"], "external_dependencies": {"modules": ["ComparatorChain", "Comparator"], "class_members": [{"name": "comparatorChain", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the compare method with a single comparator in forward order."}, {"name": "testCompareWithSingleComparatorReverseOrder", "primary_tested": ["ComparatorChain.compare(Integer,Integer)"], "external_dependencies": {"modules": ["ComparatorChain", "Comparator"], "class_members": [{"name": "comparatorChain", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the compare method with a single comparator in reverse order."}, {"name": "testCompareWithMultipleComparators", "primary_tested": ["ComparatorChain.compare(Integer,Integer)"], "external_dependencies": {"modules": ["ComparatorChain", "Comparator"], "class_members": [{"name": "comparatorChain", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the compare method with multiple comparators."}, {"name": "testCompareWithEmptyChain", "primary_tested": ["ComparatorChain.compare(Integer,Integer)"], "external_dependencies": {"modules": ["ComparatorChain"], "class_members": [{"name": "comparatorChain", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the compare method with an empty comparator chain, expecting an UnsupportedOperationException."}, {"name": "testCompareAfterModification", "primary_tested": ["ComparatorChain.compare(Integer,Integer)"], "associated_methods": ["ComparatorChain.addComparator(Comparator<Integer>,boolean)"], "external_dependencies": {"modules": ["ComparatorChain", "Comparator"], "class_members": [{"name": "comparatorChain", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the compare method after modifying the comparator chain, expecting an UnsupportedOperationException."}, {"name": "testCompareWithMinValuedComparator", "primary_tested": ["ComparatorChain.compare(Integer,Integer)"], "external_dependencies": {"modules": ["ComparatorChain", "Comparator"], "class_members": [{"name": "comparatorChain", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the compare method with a custom comparator that returns Integer.MIN_VALUE or Integer.MAX_VALUE."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/TransformingComparator_equalsTest.java", "testclass_name": "TransformingComparator_equalsTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.Comparator;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.TransformerUtils;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "TransformingComparator_equalsTest", "description": "Unit tests for the equals method of the TransformingComparator class.", "class_members": {"variables": [{"name": "transformer", "type": "Transformer<String, String>"}, {"name": "comparator", "type": "Comparator<String>"}, {"name": "transformingComparator", "type": "TransformingComparator<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEqualsSameObject", "primary_tested": ["TransformingComparator.equals(Object)"], "external_dependencies": {"modules": ["TransformingComparator"], "class_members": [{"name": "transformingComparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing the same object."}, {"name": "testEqualsNullObject", "primary_tested": ["TransformingComparator.equals(Object)"], "external_dependencies": {"modules": ["TransformingComparator"], "class_members": [{"name": "transformingComparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing with a null object."}, {"name": "testEqualsDifferentClass", "primary_tested": ["TransformingComparator.equals(Object)"], "external_dependencies": {"modules": ["TransformingComparator"], "class_members": [{"name": "transformingComparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing with an object of a different class."}, {"name": "testEqualsSameAttributes", "primary_tested": ["TransformingComparator.equals(Object)"], "external_dependencies": {"modules": ["TransformingComparator"], "class_members": [{"name": "transformingComparator", "type": "variable"}, {"name": "transformer", "type": "variable"}, {"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing with another TransformingComparator having the same attributes."}, {"name": "testEqualsDifferentTransformer", "primary_tested": ["TransformingComparator.equals(Object)"], "external_dependencies": {"modules": ["TransformingComparator", "TransformerUtils"], "class_members": [{"name": "transformingComparator", "type": "variable"}, {"name": "transformer", "type": "variable"}, {"name": "comparator", "type": "variable"}], "project_specific_resources": ["TransformerUtils.constantTransformer(String)"]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing with another TransformingComparator having a different transformer."}, {"name": "testEqualsDifferentComparator", "primary_tested": ["TransformingComparator.equals(Object)"], "external_dependencies": {"modules": ["TransformingComparator", "Comparator"], "class_members": [{"name": "transformingComparator", "type": "variable"}, {"name": "transformer", "type": "variable"}, {"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing with another TransformingComparator having a different comparator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/ZippingIterator_nextTest.java", "testclass_name": "ZippingIterator_nextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ZippingIterator_nextTest", "description": "Unit tests for the next() method of the ZippingIterator class.", "class_members": {"variables": [{"name": "evens", "type": "List<Integer>"}, {"name": "odds", "type": "List<Integer>"}, {"name": "fib", "type": "List<Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNextWithValidIterator", "primary_tested": ["ZippingIterator.next()"], "associated_methods": ["ZippingIterator.hasNext()"], "external_dependencies": {"modules": ["ZippingIterator", "List", "Iterator"], "class_members": [{"name": "evens", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next() method of ZippingIterator with a valid iterator, ensuring it returns the correct elements and handles hasNext() correctly."}, {"name": "testNextWithNoSuchElementException", "primary_tested": ["ZippingIterator.next()"], "associated_methods": ["ZippingIterator.hasNext()"], "external_dependencies": {"modules": ["ZippingIterator", "List", "Iterator", "NoSuchElementException"], "class_members": [{"name": "evens", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next() method of ZippingIterator when no elements are left, ensuring it throws a NoSuchElementException."}, {"name": "testNextWithMultipleIterators", "primary_tested": ["ZippingIterator.next()"], "associated_methods": ["ZippingIterator.hasNext()"], "external_dependencies": {"modules": ["ZippingIterator", "List", "Iterator"], "class_members": [{"name": "evens", "type": "variable"}, {"name": "odds", "type": "variable"}, {"name": "fib", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next() method of ZippingIterator with multiple iterators, ensuring all elements from all iterators are consumed."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparator_compareTest.java", "testclass_name": "FixedOrderComparator_compareTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "FixedOrderComparator_compareTest", "description": "Unit tests for the compare method of FixedOrderComparator.", "class_members": {"variables": [{"name": "comparator", "type": "FixedOrderComparator<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testCompareKnownObjects", "primary_tested": ["FixedOrderComparator.compare(String,String)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the comparison of known objects in the FixedOrderComparator."}, {"name": "testCompareUnknownObjectBefore", "primary_tested": ["FixedOrderComparator.compare(String,String)"], "associated_methods": ["FixedOrderComparator.setUnknownObjectBehavior(UnknownObjectBehavior)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the comparison of unknown objects with behavior set to BEFORE in the FixedOrderComparator."}, {"name": "testCompareUnknownObjectAfter", "primary_tested": ["FixedOrderComparator.compare(String,String)"], "associated_methods": ["FixedOrderComparator.setUnknownObjectBehavior(UnknownObjectBehavior)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the comparison of unknown objects with behavior set to AFTER in the FixedOrderComparator."}, {"name": "testCompareUnknownObjectException", "primary_tested": ["FixedOrderComparator.compare(String,String)"], "associated_methods": ["FixedOrderComparator.setUnknownObjectBehavior(UnknownObjectBehavior)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the comparison of unknown objects with behavior set to EXCEPTION in the FixedOrderComparator, expecting an IllegalArgumentException."}, {"name": "testCompareUnknownObjectBehaviorNull", "primary_tested": ["FixedOrderComparator.setUnknownObjectBehavior(UnknownObjectBehavior)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior of setting null as the unknown object behavior in the FixedOrderComparator, expecting a NullPointerException."}, {"name": "testCompareAfterLock", "primary_tested": ["FixedOrderComparator.compare(String,String)"], "associated_methods": ["FixedOrderComparator.add(String)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior of adding an object after the comparator has been locked, expecting an UnsupportedOperationException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparator_equalsTest.java", "testclass_name": "FixedOrderComparator_equalsTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.List;"], "name": "FixedOrderComparator_equalsTest", "description": "Unit tests for the equals method of the FixedOrderComparator class.", "class_members": {"variables": [{"name": "comparator", "type": "FixedOrderComparator<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEqualsSameInstance", "primary_tested": ["FixedOrderComparator.equals(Object)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with the same instance."}, {"name": "testEqualsNull", "primary_tested": ["FixedOrderComparator.equals(Object)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with a null object."}, {"name": "testEqualsDifferentClass", "primary_tested": ["FixedOrderComparator.equals(Object)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with an object of a different class."}, {"name": "testEqualsDifferentMap", "primary_tested": ["FixedOrderComparator.equals(Object)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with a comparator having a different order map."}, {"name": "testEqualsDifferentCounter", "primary_tested": ["FixedOrderComparator.equals(Object)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with a comparator having a different counter."}, {"name": "testEqualsDifferentIsLocked", "primary_tested": ["FixedOrderComparator.equals(Object)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with a comparator having a different lock status."}, {"name": "testEqualsDifferentUnknownObjectBehavior", "primary_tested": ["FixedOrderComparator.equals(Object)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with a comparator having a different unknown object behavior."}, {"name": "testEqualsIdentical", "primary_tested": ["FixedOrderComparator.equals(Object)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with an identical comparator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/CollatingIterator_getIteratorIndexTest.java", "testclass_name": "CollatingIterator_getIteratorIndexTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Comparator;", "import java.util.List;", "import org.apache.commons.collections4.comparators.ComparableComparator;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CollatingIterator_getIteratorIndexTest", "description": "Tests for the getIteratorIndex method of the CollatingIterator class.", "class_members": {"variables": [{"name": "comparator", "type": "Comparator<Integer>"}, {"name": "evens", "type": "List<Integer>"}, {"name": "odds", "type": "List<Integer>"}, {"name": "fib", "type": "List<Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetIteratorIndexSuccess", "primary_tested": ["CollatingIterator.getIteratorIndex()"], "associated_methods": ["CollatingIterator.addIterator(Iterator<Integer>)", "CollatingIterator.next()"], "external_dependencies": {"modules": ["CollatingIterator", "Comparator", "List", "Iterator"], "class_members": [{"name": "comparator", "type": "variable"}, {"name": "evens", "type": "variable"}, {"name": "odds", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getIteratorIndex method of CollatingIterator when a value has been returned by the iterator."}, {"name": "testGetIteratorIndexNoValueReturnedYet", "primary_tested": ["CollatingIterator.getIteratorIndex()"], "associated_methods": ["CollatingIterator.addIterator(Iterator<Integer>)"], "external_dependencies": {"modules": ["CollatingIterator", "Comparator", "List", "Iterator"], "class_members": [{"name": "comparator", "type": "variable"}, {"name": "evens", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getIteratorIndex method of CollatingIterator when no value has been returned by the iterator, expecting an IllegalStateException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_elementTest.java", "testclass_name": "PeekingIterator_elementTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "PeekingIterator_elementTest", "description": "Unit tests for the PeekingIterator's element method.", "class_members": {"variables": [{"name": "peekingIterator", "type": "PeekingIterator<String>"}, {"name": "elements", "type": "List<String>"}], "methods": [{"name": "makeEmptyIterator", "signature": "Iterator<String> makeEmptyIterator()"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testElementWithElements", "primary_tested": ["PeekingIterator.element()"], "associated_methods": ["PeekingIterator.next()"], "external_dependencies": {"modules": ["PeekingIterator", "List", "Iterator"], "class_members": [{"name": "peekingIterator", "type": "variable"}, {"name": "elements", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the element method of PeekingIterator when there are elements in the iterator."}, {"name": "testElementWithEmptyIterator", "primary_tested": ["PeekingIterator.element()"], "external_dependencies": {"modules": ["PeekingIterator", "Iterator", "NoSuchElementException"], "class_members": [{"name": "makeEmptyIterator", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the element method of PeekingIterator when the iterator is empty."}, {"name": "testElementAfterExhaustion", "primary_tested": ["PeekingIterator.element()"], "associated_methods": ["PeekingIterator.hasNext()", "PeekingIterator.next()"], "external_dependencies": {"modules": ["PeekingIterator", "NoSuchElementException"], "class_members": [{"name": "peekingIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the element method of PeekingIterator after the iterator has been exhausted."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/SingletonIterator_removeTest.java", "testclass_name": "SingletonIterator_removeTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SingletonIterator_removeTest", "description": "Unit tests for the remove functionality of the SingletonIterator class.", "class_members": {"variables": [{"name": "iterator", "type": "SingletonIterator<Object>"}, {"name": "testValue", "type": "static final Object"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveSuccess", "primary_tested": ["SingletonIterator.remove()"], "associated_methods": ["SingletonIterator.next()", "SingletonIterator.hasNext()"], "external_dependencies": {"modules": ["SingletonIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful removal of the element from the SingletonIterator."}, {"name": "testRemoveNotAllowed", "primary_tested": ["SingletonIterator.remove()"], "associated_methods": ["SingletonIterator.next()"], "external_dependencies": {"modules": ["SingletonIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests that removing an element is not allowed when the SingletonIterator is created with removal disabled."}, {"name": "testRemoveBeforeNext", "primary_tested": ["SingletonIterator.remove()"], "external_dependencies": {"modules": ["SingletonIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that removing an element before calling next() throws an IllegalStateException."}, {"name": "testRemoveAfterAlreadyRemoved", "primary_tested": ["SingletonIterator.remove()"], "associated_methods": ["SingletonIterator.next()"], "external_dependencies": {"modules": ["SingletonIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that removing an element after it has already been removed throws an IllegalStateException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/properties/OrderedProperties_putIfAbsentTest.java", "testclass_name": "OrderedProperties_putIfAbsentTest", "dependencies": ["package org.apache.commons.collections4.properties;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "OrderedProperties_putIfAbsentTest", "description": "Unit tests for the putIfAbsent method in the OrderedProperties class.", "class_members": {"variables": [{"name": "orderedProperties", "type": "OrderedProperties"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPutIfAbsentNewKey", "primary_tested": ["OrderedProperties.putIfAbsent(Object,Object)"], "associated_methods": ["OrderedProperties.keySet()", "OrderedProperties.get(Object)"], "external_dependencies": {"modules": ["OrderedProperties"], "class_members": [{"name": "orderedProperties", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the putIfAbsent method when adding a new key to the OrderedProperties."}, {"name": "testPutIfAbsentExistingKey", "primary_tested": ["OrderedProperties.putIfAbsent(Object,Object)"], "associated_methods": ["OrderedProperties.put(Object,Object)", "OrderedProperties.keySet()", "OrderedProperties.get(Object)"], "external_dependencies": {"modules": ["OrderedProperties"], "class_members": [{"name": "orderedProperties", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the putIfAbsent method when the key already exists in the OrderedProperties."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/DefaultedMap_getTest.java", "testclass_name": "DefaultedMap_getTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Map;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.functors.ConstantTransformer;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "DefaultedMap_getTest", "description": "Unit tests for the get method of the DefaultedMap class, which tests various scenarios including existing keys, non-existing keys, null keys, and changes in default transformers.", "class_members": {"variables": [{"name": "defaultedMap", "type": "DefaultedMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetExistingKey", "primary_tested": ["DefaultedMap.get(String)"], "external_dependencies": {"modules": ["DefaultedMap", "HashMap", "Transformer", "ConstantTransformer"], "class_members": [{"name": "defaultedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method of DefaultedMap for an existing key."}, {"name": "testGetNonExistingKey", "primary_tested": ["DefaultedMap.get(String)"], "external_dependencies": {"modules": ["DefaultedMap", "HashMap", "Transformer", "ConstantTransformer"], "class_members": [{"name": "defaultedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method of DefaultedMap for a non-existing key, expecting the default value."}, {"name": "testGetNonExistingKeyWithDefault", "primary_tested": ["DefaultedMap.get(String)"], "external_dependencies": {"modules": ["DefaultedMap", "HashMap", "Transformer", "ConstantTransformer"], "class_members": [{"name": "defaultedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method of DefaultedMap for a non-existing key, expecting the default value."}, {"name": "testGetWithNullKey", "primary_tested": ["DefaultedMap.get(String)"], "external_dependencies": {"modules": ["DefaultedMap", "HashMap", "Transformer", "ConstantTransformer"], "class_members": [{"name": "defaultedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method of DefaultedMap for a null key, expecting the default value."}, {"name": "testGetWithNullKeyAndDefault", "primary_tested": ["DefaultedMap.get(String)"], "external_dependencies": {"modules": ["DefaultedMap", "HashMap", "Transformer", "ConstantTransformer"], "class_members": [{"name": "defaultedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method of DefaultedMap for a null key after putting a value for null, expecting the put value."}, {"name": "testGetWithDefaultTransformer", "primary_tested": ["DefaultedMap.get(String)"], "external_dependencies": {"modules": ["DefaultedMap", "HashMap", "Transformer", "ConstantTransformer"], "class_members": [{"name": "defaultedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method of DefaultedMap with a new default transformer for a non-existing key."}, {"name": "testGetWithExistingKeyAfterDefaultTransformerChange", "primary_tested": ["DefaultedMap.get(String)"], "external_dependencies": {"modules": ["DefaultedMap", "HashMap", "Transformer", "ConstantTransformer"], "class_members": [{"name": "defaultedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method of DefaultedMap for an existing key after changing the default transformer."}, {"name": "testGetWithNonExistingKeyAfterDefaultTransformerChange", "primary_tested": ["DefaultedMap.get(String)"], "external_dependencies": {"modules": ["DefaultedMap", "HashMap", "Transformer", "ConstantTransformer"], "class_members": [{"name": "defaultedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method of DefaultedMap for a non-existing key after changing the default transformer."}, {"name": "testGetWithDefaultTransformerAndNullKey", "primary_tested": ["DefaultedMap.get(String)"], "external_dependencies": {"modules": ["DefaultedMap", "HashMap", "Transformer", "ConstantTransformer"], "class_members": [{"name": "defaultedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method of DefaultedMap for a null key with a new default transformer."}, {"name": "testGetWithDefaultTransformerAndNullKeyAfterPut", "primary_tested": ["DefaultedMap.get(String)"], "external_dependencies": {"modules": ["DefaultedMap", "HashMap", "Transformer", "ConstantTransformer"], "class_members": [{"name": "defaultedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method of DefaultedMap for a null key after putting a value for null with a new default transformer."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/TransformedSortedSet_headSetTest.java", "testclass_name": "TransformedSortedSet_headSetTest", "dependencies": ["package org.apache.commons.collections4.set;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.Test;", "import java.util.SortedSet;", "import java.util.TreeSet;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.mockito.Mockito.*;"], "name": "TransformedSortedSet_headSetTest", "description": "Unit tests for the headSet method of TransformedSortedSet.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testHeadSet", "primary_tested": ["TransformedSortedSet.headSet(Integer)"], "associated_methods": ["SortedSet.size()", "SortedSet.first()", "SortedSet.last()"], "external_dependencies": {"modules": ["SortedSet", "TreeSet", "Transformer", "TransformedSortedSet"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the headSet method of TransformedSortedSet to ensure it returns the correct subset of elements."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/TransformedNavigableSet_headSetTest.java", "testclass_name": "TransformedNavigableSet_headSetTest", "dependencies": ["package org.apache.commons.collections4.set;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.Test;", "import java.util.NavigableSet;", "import java.util.TreeSet;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.mockito.Mockito.mock;", "import static org.mockito.Mockito.when;"], "name": "TransformedNavigableSet_headSetTest", "description": "Unit tests for the headSet method of TransformedNavigableSet.", "class_members": {"variables": [{"name": "originalSet", "type": "NavigableSet<Integer>"}, {"name": "transformer", "type": "Transformer<Integer, Integer>"}, {"name": "transformedSet", "type": "TransformedNavigableSet<Integer>"}]}, "test_cases": [{"name": "testHeadSet", "primary_tested": ["TransformedNavigableSet.headSet(Integer,boolean)"], "associated_methods": ["Transformer.transform(Integer)"], "external_dependencies": {"modules": ["NavigableSet", "TreeSet", "Transformer", "TransformedNavigableSet"], "class_members": [{"name": "originalSet", "type": "variable"}, {"name": "transformer", "type": "variable"}, {"name": "transformedSet", "type": "variable"}]}, "category": "unit", "description": "Tests the headSet method of TransformedNavigableSet to ensure it returns the correct subset and transforms elements correctly."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/BoundedIterator_hasNextTest.java", "testclass_name": "BoundedIterator_hasNextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.Arrays;", "import java.util.Iterator;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "BoundedIterator_hasNextTest", "description": "Unit tests for the hasNext method of the BoundedIterator class.", "class_members": {"variables": [{"name": "testList", "type": "List<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testHasNextWithinBounds", "primary_tested": ["BoundedIterator.hasNext()"], "external_dependencies": {"modules": ["BoundedIterator", "Iterator"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method when the iterator is within bounds."}, {"name": "testHasNextOutOfBounds", "primary_tested": ["BoundedIterator.hasNext()"], "external_dependencies": {"modules": ["BoundedIterator", "Iterator"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method when the iterator is out of bounds."}, {"name": "testHasNextWithZeroMax", "primary_tested": ["BoundedIterator.hasNext()"], "external_dependencies": {"modules": ["BoundedIterator", "Iterator"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method when the maximum number of elements to iterate over is zero."}, {"name": "testHasNextWithNegativeOffset", "primary_tested": ["BoundedIterator.<init>(Iterator,int,int)"], "external_dependencies": {"modules": ["BoundedIterator", "Iterator"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method when the offset is negative, expecting an IllegalArgumentException."}, {"name": "testHasNextWithNegativeMax", "primary_tested": ["BoundedIterator.<init>(Iterator,int,int)"], "external_dependencies": {"modules": ["BoundedIterator", "Iterator"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method when the maximum number of elements to iterate over is negative, expecting an IllegalArgumentException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/BoundedIterator_nextTest.java", "testclass_name": "BoundedIterator_nextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.Arrays;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "BoundedIterator_nextTest", "description": "Unit tests for the next method of the BoundedIterator class.", "class_members": {"variables": [{"name": "testList", "type": "List<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNextWithinBounds", "primary_tested": ["BoundedIterator.next()"], "external_dependencies": {"modules": ["BoundedIterator", "Iterator"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method of BoundedIterator within the bounds."}, {"name": "testNextOutOfBounds", "primary_tested": ["BoundedIterator.next()"], "external_dependencies": {"modules": ["BoundedIterator", "Iterator", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method of BoundedIterator when called out of bounds."}, {"name": "testNextWithZeroMax", "primary_tested": ["BoundedIterator.next()"], "external_dependencies": {"modules": ["BoundedIterator", "Iterator", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method of BoundedIterator with zero max."}, {"name": "testNextWithNegativeOffset", "primary_tested": ["BoundedIterator.BoundedIterator(Iterator,int,int)"], "external_dependencies": {"modules": ["BoundedIterator", "Iterator", "IllegalArgumentException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the BoundedIterator constructor with a negative offset."}, {"name": "testNextWithNegativeMax", "primary_tested": ["BoundedIterator.BoundedIterator(Iterator,int,int)"], "external_dependencies": {"modules": ["BoundedIterator", "Iterator", "IllegalArgumentException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the BoundedIterator constructor with a negative max."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_nextTest.java", "testclass_name": "PeekingIterator_nextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "PeekingIterator_nextTest", "description": "Unit tests for the next method of the PeekingIterator class.", "class_members": {"variables": [{"name": "peekingIterator", "type": "PeekingIterator<String>"}, {"name": "testList", "type": "List<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNextWithElements", "primary_tested": ["PeekingIterator.next()"], "external_dependencies": {"modules": ["PeekingIterator"], "class_members": [{"name": "peekingIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method of PeekingIterator when there are elements in the iterator."}, {"name": "testNextWithEmptyIterator", "primary_tested": ["PeekingIterator.next()"], "external_dependencies": {"modules": ["PeekingIterator", "NoSuchElementException"], "class_members": [{"name": "emptyPeekingIterator", "type": "variable"}]}, "category": "unit", "description": "Tests the next method of PeekingIterator when the iterator is empty, expecting a NoSuchElementException."}, {"name": "testNextAfterPeek", "primary_tested": ["PeekingIterator.next()"], "associated_methods": ["PeekingIterator.peek()"], "external_dependencies": {"modules": ["PeekingIterator"], "class_members": [{"name": "peekingIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method of PeekingIterator after peeking at the next element."}, {"name": "testNextAfterElement", "primary_tested": ["PeekingIterator.next()"], "associated_methods": ["PeekingIterator.element()"], "external_dependencies": {"modules": ["PeekingIterator"], "class_members": [{"name": "peekingIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method of PeekingIterator after accessing the current element."}, {"name": "testNextAfterHasNext", "primary_tested": ["PeekingIterator.next()"], "associated_methods": ["PeekingIterator.hasNext()"], "external_dependencies": {"modules": ["PeekingIterator", "NoSuchElementException"], "class_members": [{"name": "peekingIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method of PeekingIterator after checking if there are more elements, expecting a NoSuchElementException when no more elements are present."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_peekingIteratorTest.java", "testclass_name": "PeekingIterator_peekingIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "PeekingIterator_peekingIteratorTest", "description": "Unit tests for the PeekingIterator class, focusing on its functionality with different types of iterators.", "class_members": {"variables": [{"name": "iterator", "type": "Iterator<String>"}], "methods": [{"name": "makeEmptyIterator", "signature": "Iterator<String> makeEmptyIterator()"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPeekingIteratorWithRegularIterator", "primary_tested": ["PeekingIterator.peekingIterator(Iterator<String>)", "PeekingIterator.hasNext()", "PeekingIterator.peek()", "PeekingIterator.next()"], "external_dependencies": {"modules": ["PeekingIterator", "Iterator", "NoSuchElementException"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the functionality of PeekingIterator with a regular iterator, checking hasNext, peek, and next methods."}, {"name": "testPeekingIteratorWithPeekingIterator", "primary_tested": ["PeekingIterator.peekingIterator(Iterator<String>)"], "external_dependencies": {"modules": ["PeekingIterator", "Iterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the functionality of PeekingIterator when wrapping another PeekingIterator, ensuring the same instance is returned."}, {"name": "testPeekingIteratorWithNullIterator", "primary_tested": ["PeekingIterator.peekingIterator(Iterator<String>)"], "external_dependencies": {"modules": ["PeekingIterator", "NullPointerException"]}, "category": "unit", "description": "Tests the behavior of PeekingIterator when a null iterator is provided, expecting a NullPointerException."}, {"name": "testPeekingIteratorWithEmptyIterator", "primary_tested": ["PeekingIterator.peekingIterator(Iterator<String>)", "PeekingIterator.hasNext()", "PeekingIterator.peek()", "PeekingIterator.next()"], "associated_methods": ["PeekingIterator.makeEmptyIterator()"], "external_dependencies": {"modules": ["PeekingIterator", "Iterator", "NoSuchElementException"], "class_members": [{"name": "makeEmptyIterator", "type": "method"}]}, "category": "unit", "description": "Tests the functionality of PeekingIterator with an empty iterator, checking hasNext, peek, and next methods."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/TransformedNavigableSet_subSetTest.java", "testclass_name": "TransformedNavigableSet_subSetTest", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.mockito.Mockito.mock;", "import static org.mockito.Mockito.when;", "import java.util.NavigableSet;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.Test;"], "name": "TransformedNavigableSet_subSetTest", "description": "Unit tests for the subSet method of TransformedNavigableSet.", "class_members": {"variables": [{"name": "mockSet", "type": "NavigableSet<String>"}, {"name": "mockTransformer", "type": "Transformer<String, String>"}, {"name": "transformedSet", "type": "TransformedNavigableSet<String>"}, {"name": "mockSubSet", "type": "NavigableSet<String>"}]}, "fixtures": [], "test_cases": [{"name": "testSubSet", "primary_tested": ["TransformedNavigableSet.subSet(String,boolean,String,boolean)"], "associated_methods": ["NavigableSet.subSet(String,boolean,String,boolean)"], "external_dependencies": {"modules": ["NavigableSet", "Transformer", "TransformedNavigableSet"], "class_members": [{"name": "mockSet", "type": "variable"}, {"name": "mockTransformer", "type": "variable"}, {"name": "transformedSet", "type": "variable"}, {"name": "mockSubSet", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the subSet method of TransformedNavigableSet, ensuring it returns a TransformedNavigableSet instance."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/properties/OrderedProperties_computeIfAbsentTest.java", "testclass_name": "OrderedProperties_computeIfAbsentTest", "dependencies": ["package org.apache.commons.collections4.properties;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import java.util.function.Function;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "OrderedProperties_computeIfAbsentTest", "description": "Unit tests for the computeIfAbsent method in OrderedProperties.", "class_members": {"variables": [{"name": "orderedProperties", "type": "OrderedProperties"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testComputeIfAbsentWithExistingKey", "primary_tested": ["OrderedProperties.computeIfAbsent(Object,Function)"], "associated_methods": ["OrderedProperties.put(Object,Object)", "OrderedProperties.containsKey(Object)"], "external_dependencies": {"modules": ["OrderedProperties", "Function"], "class_members": [{"name": "orderedProperties", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the computeIfAbsent method with an existing key in OrderedProperties."}, {"name": "testComputeIfAbsentWithNewKey", "primary_tested": ["OrderedProperties.computeIfAbsent(Object,Function)"], "associated_methods": ["OrderedProperties.containsKey(Object)"], "external_dependencies": {"modules": ["OrderedProperties", "Function"], "class_members": [{"name": "orderedProperties", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the computeIfAbsent method with a new key in OrderedProperties."}, {"name": "testComputeIfAbsentWithNullMappingFunction", "primary_tested": ["OrderedProperties.computeIfAbsent(Object,Function)"], "associated_methods": ["OrderedProperties.containsKey(Object)"], "external_dependencies": {"modules": ["OrderedProperties", "Function"], "class_members": [{"name": "orderedProperties", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the computeIfAbsent method with a null mapping function in OrderedProperties."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/TransformedNavigableSet_tailSetTest.java", "testclass_name": "TransformedNavigableSet_tailSetTest", "dependencies": ["package org.apache.commons.collections4.set;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.Test;", "import java.util.NavigableSet;", "import java.util.TreeSet;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.mockito.Mockito.*;"], "name": "TransformedNavigableSet_tailSetTest", "description": "Unit tests for the tailSet method of TransformedNavigableSet.", "class_members": {"variables": [{"name": "originalSet", "type": "NavigableSet<Integer>"}, {"name": "transformer", "type": "Transformer<Integer, Integer>"}, {"name": "transformedSet", "type": "TransformedNavigableSet<Integer>"}]}, "test_cases": [{"name": "testTailSet", "primary_tested": ["TransformedNavigableSet.tailSet(Integer,boolean)"], "associated_methods": ["NavigableSet.add(Integer)", "NavigableSet.first()", "NavigableSet.last()", "NavigableSet.size()"], "external_dependencies": {"modules": ["NavigableSet", "TreeSet", "Transformer", "TransformedNavigableSet"], "class_members": [{"name": "originalSet", "type": "variable"}, {"name": "transformer", "type": "variable"}, {"name": "transformedSet", "type": "variable"}]}, "category": "unit", "description": "Tests the tailSet method of TransformedNavigableSet to ensure it returns the correct subset of elements."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_hasNextTest.java", "testclass_name": "PeekingIterator_hasNextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "PeekingIterator_hasNextTest", "description": "Unit tests for the hasNext method of the PeekingIterator class.", "class_members": {"variables": [{"name": "testList", "type": "List<String>"}, {"name": "testArray", "type": "static final String[]"}], "methods": [{"name": "makeObject", "signature": "PeekingIterator<String> makeObject()"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testHasNextWhenIteratorHasNext", "primary_tested": ["PeekingIterator.hasNext()"], "external_dependencies": {"modules": ["PeekingIterator"], "class_members": [{"name": "testList", "type": "variable"}, {"name": "makeObject", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method when the iterator has elements."}, {"name": "testHasNextWhenIteratorIsExhausted", "primary_tested": ["PeekingIterator.hasNext()"], "associated_methods": ["PeekingIterator.next()"], "external_dependencies": {"modules": ["PeekingIterator"], "class_members": [{"name": "testList", "type": "variable"}, {"name": "makeObject", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method when the iterator is exhausted."}, {"name": "testHasNextWhenSlotIsFilled", "primary_tested": ["PeekingIterator.hasNext()"], "associated_methods": ["PeekingIterator.peek()"], "external_dependencies": {"modules": ["PeekingIterator"], "class_members": [{"name": "testList", "type": "variable"}, {"name": "makeObject", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method when the slot is filled by peeking."}, {"name": "testHasNextWhenSlotIsFilledAndIteratorIsExhausted", "primary_tested": ["PeekingIterator.hasNext()"], "associated_methods": ["PeekingIterator.next()", "PeekingIterator.peek()"], "external_dependencies": {"modules": ["PeekingIterator"], "class_members": [{"name": "testList", "type": "variable"}, {"name": "makeObject", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method when the slot is filled by peeking and the iterator is exhausted."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/TransformedSet_transformedSetTest.java", "testclass_name": "TransformedSet_transformedSetTest", "dependencies": ["package org.apache.commons.collections4.set;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.Test;", "import java.util.HashSet;", "import java.util.Set;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "TransformedSet_transformedSetTest", "description": "Unit tests for the TransformedSet class, specifically testing the transformedSet method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testTransformedSetWithNonEmptySet", "primary_tested": ["TransformedSet.transformedSet(Set<String>,Transformer<String,String>)"], "associated_methods": ["Transformer.transform(String)"], "external_dependencies": {"modules": ["HashSet", "Set", "Transformer", "TransformedSet"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformedSet method with a non-empty set, ensuring the transformation is applied correctly."}, {"name": "testTransformedSetWithEmptySet", "primary_tested": ["TransformedSet.transformedSet(Set<String>,Transformer<String,String>)"], "associated_methods": ["Transformer.transform(String)"], "external_dependencies": {"modules": ["HashSet", "Set", "Transformer", "TransformedSet"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformedSet method with an empty set, ensuring the transformation does not affect an empty set."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/properties/OrderedProperties_putAllTest.java", "testclass_name": "OrderedProperties_putAllTest", "dependencies": ["package org.apache.commons.collections4.properties;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "OrderedProperties_putAllTest", "description": "Unit tests for the putAll method of the OrderedProperties class.", "class_members": {"variables": [{"name": "orderedProperties", "type": "OrderedProperties"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPutAll", "primary_tested": ["OrderedProperties.putAll(Map<Object,Object>)"], "external_dependencies": {"modules": ["OrderedProperties", "HashMap", "Map"], "class_members": [{"name": "orderedProperties", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the putAll method by adding multiple key-value pairs to the OrderedProperties instance and verifying the size and content."}, {"name": "testPutAllEmptyMap", "primary_tested": ["OrderedProperties.putAll(Map<Object,Object>)"], "external_dependencies": {"modules": ["OrderedProperties", "HashMap", "Map"], "class_members": [{"name": "orderedProperties", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the putAll method with an empty map, verifying that the size of the OrderedProperties instance remains zero."}, {"name": "testPutAllWithExistingKeys", "primary_tested": ["OrderedProperties.putAll(Map<Object,Object>)"], "associated_methods": ["OrderedProperties.put(Object,Object)", "OrderedProperties.get(Object)"], "external_dependencies": {"modules": ["OrderedProperties", "HashMap", "Map"], "class_members": [{"name": "orderedProperties", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the putAll method with a map containing keys that already exist in the OrderedProperties instance, verifying that the values are updated and new keys are added."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/CartesianProductIterator_nextTest.java", "testclass_name": "CartesianProductIterator_nextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CartesianProductIterator_nextTest", "description": "Unit tests for the next method of CartesianProductIterator.", "class_members": {"variables": [{"name": "iterables", "type": "List<Iterable<Character>>"}, {"name": "iterator", "type": "CartesianProductIterator<Character>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNextWithSingleIterable", "primary_tested": ["CartesianProductIterator.next()"], "external_dependencies": {"modules": ["CartesianProductIterator", "Arrays", "NoSuchElementException"], "class_members": [{"name": "iterables", "type": "variable"}, {"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method with a single iterable."}, {"name": "testNextWithMultipleIterables", "primary_tested": ["CartesianProductIterator.next()"], "external_dependencies": {"modules": ["CartesianProductIterator", "Arrays", "NoSuchElementException"], "class_members": [{"name": "iterables", "type": "variable"}, {"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method with multiple iterables."}, {"name": "testNextWithEmptyIterable", "primary_tested": ["CartesianProductIterator.next()"], "external_dependencies": {"modules": ["CartesianProductIterator", "Arrays", "NoSuchElementException"], "class_members": [{"name": "iterables", "type": "variable"}, {"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method with an empty iterable."}, {"name": "testNextWithAllEmptyLists", "primary_tested": ["CartesianProductIterator.next()"], "external_dependencies": {"modules": ["CartesianProductIterator", "NoSuchElementException"], "class_members": [{"name": "iterables", "type": "variable"}, {"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method with all empty lists."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/BooleanComparator_compareTest.java", "testclass_name": "BooleanComparator_compareTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "BooleanComparator_compareTest", "description": "Unit tests for the compare method of BooleanComparator.", "class_members": {"variables": [{"name": "trueFirstComparator", "type": "BooleanComparator"}, {"name": "falseFirstComparator", "type": "BooleanComparator"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testCompareTrueFirst_TrueAndTrue", "primary_tested": ["BooleanComparator.compare(Boolean,Boolean)"], "external_dependencies": {"modules": ["BooleanComparator", "Boolean"], "class_members": [{"name": "trueFirstComparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the compare method of BooleanComparator with true and true inputs when true is first."}, {"name": "testCompareTrueFirst_TrueAndFalse", "primary_tested": ["BooleanComparator.compare(Boolean,Boolean)"], "external_dependencies": {"modules": ["BooleanComparator", "Boolean"], "class_members": [{"name": "trueFirstComparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the compare method of BooleanComparator with true and false inputs when true is first."}, {"name": "testCompareTrueFirst_FalseAndTrue", "primary_tested": ["BooleanComparator.compare(Boolean,Boolean)"], "external_dependencies": {"modules": ["BooleanComparator", "Boolean"], "class_members": [{"name": "trueFirstComparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the compare method of BooleanComparator with false and true inputs when true is first."}, {"name": "testCompareTrueFirst_FalseAndFalse", "primary_tested": ["BooleanComparator.compare(Boolean,Boolean)"], "external_dependencies": {"modules": ["BooleanComparator", "Boolean"], "class_members": [{"name": "trueFirstComparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the compare method of BooleanComparator with false and false inputs when true is first."}, {"name": "testCompareFalseFirst_TrueAndTrue", "primary_tested": ["BooleanComparator.compare(Boolean,Boolean)"], "external_dependencies": {"modules": ["BooleanComparator", "Boolean"], "class_members": [{"name": "falseFirstComparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the compare method of BooleanComparator with true and true inputs when false is first."}, {"name": "testCompareFalseFirst_TrueAndFalse", "primary_tested": ["BooleanComparator.compare(Boolean,Boolean)"], "external_dependencies": {"modules": ["BooleanComparator", "Boolean"], "class_members": [{"name": "falseFirstComparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the compare method of BooleanComparator with true and false inputs when false is first."}, {"name": "testCompareFalseFirst_FalseAndTrue", "primary_tested": ["BooleanComparator.compare(Boolean,Boolean)"], "external_dependencies": {"modules": ["BooleanComparator", "Boolean"], "class_members": [{"name": "falseFirstComparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the compare method of BooleanComparator with false and true inputs when false is first."}, {"name": "testCompareFalseFirst_FalseAndFalse", "primary_tested": ["BooleanComparator.compare(Boolean,Boolean)"], "external_dependencies": {"modules": ["BooleanComparator", "Boolean"], "class_members": [{"name": "falseFirstComparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the compare method of BooleanComparator with false and false inputs when false is first."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/CompositeSet_removeTest.java", "testclass_name": "CompositeSet_removeTest", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.junit.jupiter.api.Test;", "import java.util.HashSet;", "import java.util.Set;"], "name": "CompositeSet_removeTest", "description": "Unit tests for the remove functionality of the CompositeSet class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testRemove_ElementPresentInFirstSet", "primary_tested": ["CompositeSet.remove(Integer)"], "associated_methods": ["HashSet.contains(Integer)"], "external_dependencies": {"modules": ["CompositeSet", "HashSet"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the removal of an element present in the first set of the CompositeSet."}, {"name": "testRemove_ElementNotPresent", "primary_tested": ["CompositeSet.remove(Integer)"], "external_dependencies": {"modules": ["CompositeSet", "HashSet"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the removal of an element not present in the CompositeSet."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/UnmodifiableSet_unmodifiableSetTest.java", "testclass_name": "UnmodifiableSet_unmodifiableSetTest", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashSet;", "import java.util.Set;", "import org.apache.commons.collections4.Unmodifiable;", "import org.junit.jupiter.api.Test;"], "name": "UnmodifiableSet_unmodifiableSetTest", "description": "Tests for the UnmodifiableSet class, specifically focusing on the unmodifiableSet method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testUnmodifiableSet_WithUnmodifiableSet", "primary_tested": ["UnmodifiableSet.unmodifiableSet(Set<String>)"], "external_dependencies": {"modules": ["HashSet", "Set", "UnmodifiableSet"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that wrapping an unmodifiable set with UnmodifiableSet.unmodifiableSet returns the same instance."}, {"name": "testUnmodifiableSet_WithModifiableSet", "primary_tested": ["UnmodifiableSet.unmodifiableSet(Set<String>)"], "external_dependencies": {"modules": ["HashSet", "Set", "UnmodifiableSet", "Unmodifiable"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that wrapping a modifiable set with UnmodifiableSet.unmodifiableSet returns an instance of Unmodifiable."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_nextTest.java", "testclass_name": "SingletonListIterator_nextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SingletonListIterator_nextTest", "description": "Unit tests for the next method of SingletonListIterator.", "class_members": {"variables": [{"name": "iterator", "type": "SingletonListIterator<String>"}, {"name": "testValue", "type": "static final String"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNextSuccess", "primary_tested": ["SingletonListIterator.hasNext()", "SingletonListIterator.next()"], "external_dependencies": {"modules": ["SingletonListIterator"], "class_members": [{"name": "iterator", "type": "variable"}, {"name": "testValue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful iteration and retrieval of the next element."}, {"name": "testNextNoSuchElementException", "primary_tested": ["SingletonListIterator.next()"], "external_dependencies": {"modules": ["SingletonListIterator", "NoSuchElementException"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that NoSuchElementException is thrown when calling next after the iterator has no more elements."}, {"name": "testNextAfterRemove", "primary_tested": ["SingletonListIterator.next()"], "associated_methods": ["SingletonListIterator.remove()"], "external_dependencies": {"modules": ["SingletonListIterator", "NoSuchElementException"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that NoSuchElementException is thrown when calling next after removing the element."}, {"name": "testNextAfterReset", "primary_tested": ["SingletonListIterator.next()"], "associated_methods": ["SingletonListIterator.reset()"], "external_dependencies": {"modules": ["SingletonListIterator"], "class_members": [{"name": "iterator", "type": "variable"}, {"name": "testValue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful iteration and retrieval of the next element after resetting the iterator."}, {"name": "testNextAfterSet", "primary_tested": ["SingletonListIterator.next()"], "associated_methods": ["SingletonListIterator.set(String)", "SingletonListIterator.reset()"], "external_dependencies": {"modules": ["SingletonListIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful iteration and retrieval of the next element after setting a new value and resetting the iterator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/CompositeSet_addAllTest.java", "testclass_name": "CompositeSet_addAllTest", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.List;", "import java.util.Set;", "import org.apache.commons.collections4.set.CompositeSet.SetMutator;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeSet_addAllTest", "description": "Unit tests for the addAll functionality of the CompositeSet class.", "class_members": {"variables": [{"name": "compositeSet", "type": "CompositeSet<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAddAllWithMutator", "primary_tested": ["CompositeSet.addAll(Collection<? extends String>)"], "associated_methods": ["CompositeSet.setMutator(SetMutator<String>)"], "external_dependencies": {"modules": ["CompositeSet", "SetMutator", "HashSet"], "class_members": [{"name": "compositeSet", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addAll functionality of the CompositeSet with a SetMutator."}, {"name": "testAddAllWithoutMutator", "primary_tested": ["CompositeSet.addAll(Collection<? extends String>)"], "external_dependencies": {"modules": ["CompositeSet", "HashSet"], "class_members": [{"name": "compositeSet", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addAll functionality of the CompositeSet without a SetMutator, expecting an UnsupportedOperationException."}, {"name": "testAddAllWithEmptyCollection", "primary_tested": ["CompositeSet.addAll(Collection<? extends String>)"], "associated_methods": ["CompositeSet.setMutator(SetMutator<String>)"], "external_dependencies": {"modules": ["CompositeSet", "SetMutator", "HashSet"], "class_members": [{"name": "compositeSet", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addAll functionality of the CompositeSet with an empty collection and a SetMutator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/UnmodifiableNavigableSet_unmodifiableNavigableSetTest.java", "testclass_name": "UnmodifiableNavigableSet_unmodifiableNavigableSetTest", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertNotSame;", "import java.util.NavigableSet;", "import java.util.TreeSet;", "import org.apache.commons.collections4.Unmodifiable;", "import org.junit.jupiter.api.Test;"], "name": "UnmodifiableNavigableSet_unmodifiableNavigableSetTest", "description": "Tests for the UnmodifiableNavigableSet class, specifically focusing on the unmodifiableNavigableSet method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testUnmodifiableNavigableSet_UnmodifiableInstance", "primary_tested": ["UnmodifiableNavigableSet.unmodifiableNavigableSet(NavigableSet)"], "external_dependencies": {"modules": ["NavigableSet", "TreeSet", "UnmodifiableNavigableSet"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the unmodifiableNavigableSet method returns the same instance when called with an already unmodifiable set."}, {"name": "testUnmodifiableNavigableSet_ModifiableInstance", "primary_tested": ["UnmodifiableNavigableSet.unmodifiableNavigableSet(NavigableSet)"], "external_dependencies": {"modules": ["NavigableSet", "TreeSet", "UnmodifiableNavigableSet"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the unmodifiableNavigableSet method returns a different instance when called with a modifiable set, and that the returned instance is of type UnmodifiableNavigableSet."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/CompositeSet_clearTest.java", "testclass_name": "CompositeSet_clearTest", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashSet;", "import java.util.Set;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeSet_clearTest", "description": "Unit tests for the clear functionality of the CompositeSet class.", "class_members": {"variables": [{"name": "compositeSet", "type": "CompositeSet<String>"}, {"name": "set1", "type": "Set<String>"}, {"name": "set2", "type": "Set<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testClear", "primary_tested": ["CompositeSet.clear()"], "associated_methods": ["Set.isEmpty()", "CompositeSet.size()"], "external_dependencies": {"modules": ["CompositeSet", "Set", "HashSet"], "class_members": [{"name": "compositeSet", "type": "variable"}, {"name": "set1", "type": "variable"}, {"name": "set2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clear functionality of the CompositeSet, ensuring that all composed sets are cleared and the composite set size is zero."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/TransformedSortedSet_subSetTest.java", "testclass_name": "TransformedSortedSet_subSetTest", "dependencies": ["package org.apache.commons.collections4.set;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.Test;", "import java.util.SortedSet;", "import java.util.TreeSet;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.mockito.Mockito.*;"], "name": "TransformedSortedSet_subSetTest", "description": "Unit tests for the subSet functionality of TransformedSortedSet.", "class_members": {"variables": [{"name": "originalSet", "type": "SortedSet<Integer>"}, {"name": "transformer", "type": "Transformer<Integer, Integer>"}, {"name": "transformedSet", "type": "TransformedSortedSet<Integer>"}]}, "fixtures": [], "test_cases": [{"name": "testSubSet", "primary_tested": ["TransformedSortedSet.subSet(int,int)"], "associated_methods": ["SortedSet.size()", "SortedSet.first()", "SortedSet.last()"], "external_dependencies": {"modules": ["SortedSet", "TreeSet", "Transformer", "TransformedSortedSet"], "class_members": [{"name": "originalSet", "type": "variable"}, {"name": "transformer", "type": "variable"}, {"name": "transformedSet", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the subSet functionality of the TransformedSortedSet, ensuring it returns the correct subset of elements."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIterator_previousTest.java", "testclass_name": "LoopingListIterator_previousTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.Arrays;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "LoopingListIterator_previousTest", "description": "Unit tests for the previous method of LoopingListIterator.", "class_members": {"variables": [{"name": "loopingListIterator", "type": "LoopingListIterator<String>"}, {"name": "list", "type": "List<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPreviousWithEmptyList", "primary_tested": ["LoopingListIterator.previous()"], "external_dependencies": {"modules": ["LoopingListIterator", "NoSuchElementException"], "class_members": [{"name": "loopingListIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the previous method when the list is empty, expecting a NoSuchElementException."}, {"name": "testPreviousAtBeginning", "primary_tested": ["LoopingListIterator.previous()"], "external_dependencies": {"modules": ["LoopingListIterator"], "class_members": [{"name": "loopingListIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the previous method when the iterator is at the beginning of the list."}, {"name": "testPreviousAtEnd", "primary_tested": ["LoopingListIterator.previous()"], "associated_methods": ["LoopingListIterator.next()"], "external_dependencies": {"modules": ["LoopingListIterator"], "class_members": [{"name": "loopingListIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the previous method when the iterator is at the end of the list."}, {"name": "testPreviousInMiddle", "primary_tested": ["LoopingListIterator.previous()"], "associated_methods": ["LoopingListIterator.next()"], "external_dependencies": {"modules": ["LoopingListIterator"], "class_members": [{"name": "loopingListIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the previous method when the iterator is in the middle of the list."}, {"name": "testPreviousAfterReset", "primary_tested": ["LoopingListIterator.previous()"], "associated_methods": ["LoopingListIterator.reset()"], "external_dependencies": {"modules": ["LoopingListIterator"], "class_members": [{"name": "loopingListIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the previous method after resetting the iterator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/TransformedSortedSet_tailSetTest.java", "testclass_name": "TransformedSortedSet_tailSetTest", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.mockito.Mockito.mock;", "import static org.mockito.Mockito.when;", "import java.util.SortedSet;", "import java.util.TreeSet;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.Test;"], "name": "TransformedSortedSet_tailSetTest", "description": "Unit tests for the tailSet method of TransformedSortedSet.", "class_members": {"variables": [{"name": "originalSet", "type": "SortedSet<Integer>"}, {"name": "transformer", "type": "Transformer<Integer, Integer>"}, {"name": "transformedSet", "type": "TransformedSortedSet<Integer>"}]}, "test_cases": [{"name": "testTailSet", "primary_tested": ["TransformedSortedSet.tailSet(Integer)"], "associated_methods": ["Transformer.transform(Integer)"], "external_dependencies": {"modules": ["SortedSet", "TreeSet", "Transformer", "TransformedSortedSet"], "class_members": [{"name": "originalSet", "type": "variable"}, {"name": "transformer", "type": "variable"}, {"name": "transformedSet", "type": "variable"}]}, "category": "unit", "description": "Tests the tailSet method of TransformedSortedSet to ensure it returns the correct subset of elements."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/TransformedSortedSet_transformedSortedSetTest.java", "testclass_name": "TransformedSortedSet_transformedSortedSetTest", "dependencies": ["package org.apache.commons.collections4.set;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.Test;", "import java.util.SortedSet;", "import java.util.TreeSet;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "TransformedSortedSet_transformedSortedSetTest", "description": "Unit tests for the TransformedSortedSet class, focusing on the transformation of elements within a SortedSet.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testTransformedSortedSetWithNonEmptySet", "primary_tested": ["TransformedSortedSet.transformedSortedSet(SortedSet<String>,Transformer<String,String>)"], "associated_methods": ["SortedSet.add(String)", "SortedSet.size()", "TransformedSortedSet.size()", "TransformedSortedSet.contains(String)"], "external_dependencies": {"modules": ["SortedSet", "TreeSet", "Transformer", "TransformedSortedSet"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformation of a non-empty SortedSet using TransformedSortedSet, ensuring the original set remains unchanged and the transformed set contains the transformed elements."}, {"name": "testTransformedSortedSetWithEmptySet", "primary_tested": ["TransformedSortedSet.transformedSortedSet(SortedSet<String>,Transformer<String,String>)"], "associated_methods": ["SortedSet.size()", "TransformedSortedSet.size()"], "external_dependencies": {"modules": ["SortedSet", "TreeSet", "Transformer", "TransformedSortedSet"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformation of an empty SortedSet using TransformedSortedSet, ensuring both the original and transformed sets remain empty."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/properties/OrderedProperties_mergeTest.java", "testclass_name": "OrderedProperties_mergeTest", "dependencies": ["package org.apache.commons.collections4.properties;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Map;", "import java.util.function.BiFunction;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "OrderedProperties_mergeTest", "description": "Unit tests for the merge functionality of the OrderedProperties class.", "class_members": {"variables": [{"name": "orderedProperties", "type": "OrderedProperties"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testMergeNewKey", "primary_tested": ["OrderedProperties.merge(String,Object,BiFunction)"], "external_dependencies": {"modules": ["OrderedProperties", "BiFunction"], "class_members": [{"name": "orderedProperties", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the merge functionality when adding a new key to the OrderedProperties."}, {"name": "testMergeExistingKey", "primary_tested": ["OrderedProperties.merge(String,Object,BiFunction)"], "associated_methods": ["OrderedProperties.put(String,Object)"], "external_dependencies": {"modules": ["OrderedProperties", "BiFunction"], "class_members": [{"name": "orderedProperties", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the merge functionality when updating an existing key in the OrderedProperties."}, {"name": "testMergeNullValue", "primary_tested": ["OrderedProperties.merge(String,Object,BiFunction)"], "associated_methods": ["OrderedProperties.put(String,Object)"], "external_dependencies": {"modules": ["OrderedProperties", "BiFunction"], "class_members": [{"name": "orderedProperties", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the merge functionality when the remapping function returns null."}, {"name": "testMergeWithEmptyProperties", "primary_tested": ["OrderedProperties.merge(String,Object,BiFunction)"], "external_dependencies": {"modules": ["OrderedProperties", "BiFunction"], "class_members": [{"name": "orderedProperties", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the merge functionality when the OrderedProperties is empty."}, {"name": "testMergeWithMultipleKeys", "primary_tested": ["OrderedProperties.merge(String,Object,BiFunction)"], "associated_methods": ["OrderedProperties.put(String,Object)"], "external_dependencies": {"modules": ["OrderedProperties", "BiFunction"], "class_members": [{"name": "orderedProperties", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the merge functionality with multiple keys in the OrderedProperties."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/GrowthList_addTest.java", "testclass_name": "GrowthList_addTest", "dependencies": ["package org.apache.commons.collections4.list;", "import org.junit.jupiter.api.Test;", "import java.util.ArrayList;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "GrowthList_addTest", "description": "Unit tests for the add method of GrowthList with growth functionality.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testAddWithGrowth", "primary_tested": ["GrowthList.add(int,String)"], "associated_methods": ["GrowthList.size()", "GrowthList.get(int)"], "external_dependencies": {"modules": ["ArrayList", "List", "GrowthList"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the add method of GrowthList, ensuring it correctly grows the list and places the element at the specified index."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/properties/OrderedProperties_removeTest.java", "testclass_name": "OrderedProperties_removeTest", "dependencies": ["package org.apache.commons.collections4.properties;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Properties;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "OrderedProperties_removeTest", "description": "Unit tests for the remove functionality of the OrderedProperties class.", "class_members": {"variables": [{"name": "orderedProperties", "type": "OrderedProperties"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveExistingKey", "primary_tested": ["OrderedProperties.remove(String)"], "associated_methods": ["OrderedProperties.put(String,String)", "OrderedProperties.get(String)", "OrderedProperties.isEmpty()"], "external_dependencies": {"modules": ["OrderedProperties"], "class_members": [{"name": "orderedProperties", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of an existing key from OrderedProperties and verifies the value and state of the properties."}, {"name": "testRemoveNonExistingKey", "primary_tested": ["OrderedProperties.remove(String)"], "associated_methods": ["OrderedProperties.isEmpty()"], "external_dependencies": {"modules": ["OrderedProperties"], "class_members": [{"name": "orderedProperties", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of a non-existing key from OrderedProperties and verifies the return value and state of the properties."}, {"name": "testRemoveAfterMultiplePuts", "primary_tested": ["OrderedProperties.remove(String)"], "associated_methods": ["OrderedProperties.put(String,String)", "OrderedProperties.get(String)", "OrderedProperties.size()", "OrderedProperties.containsKey(String)"], "external_dependencies": {"modules": ["OrderedProperties"], "class_members": [{"name": "orderedProperties", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of a key after multiple puts into OrderedProperties and verifies the state of the properties."}, {"name": "testRemoveAllKeys", "primary_tested": ["OrderedProperties.remove(String)"], "associated_methods": ["OrderedProperties.put(String,String)", "OrderedProperties.isEmpty()"], "external_dependencies": {"modules": ["OrderedProperties"], "class_members": [{"name": "orderedProperties", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of all keys from OrderedProperties and verifies the state of the properties."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/TransformedNavigableSet_transformedNavigableSetTest.java", "testclass_name": "TransformedNavigableSet_transformedNavigableSetTest", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.mockito.Mockito.*;", "import java.util.NavigableSet;", "import java.util.TreeSet;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.Test;"], "name": "TransformedNavigableSet_transformedNavigableSetTest", "description": "Unit tests for the TransformedNavigableSet class, specifically testing the transformedNavigableSet method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testTransformedNavigableSetWithNonEmptySet", "primary_tested": ["TransformedNavigableSet.transformedNavigableSet(NavigableSet<String>,Transformer<String,String>)"], "associated_methods": ["TransformedNavigableSet.size()", "TransformedNavigableSet.first()", "TransformedNavigableSet.last()"], "external_dependencies": {"modules": ["NavigableSet", "TreeSet", "Transformer", "TransformedNavigableSet"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformedNavigableSet method with a non-empty set, verifying the transformation and size of the transformed set."}, {"name": "testTransformedNavigableSetWithEmptySet", "primary_tested": ["TransformedNavigableSet.transformedNavigableSet(NavigableSet<String>,Transformer<String,String>)"], "associated_methods": ["TransformedNavigableSet.size()"], "external_dependencies": {"modules": ["NavigableSet", "TreeSet", "Transformer", "TransformedNavigableSet"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformedNavigableSet method with an empty set, verifying that no transformation occurs and the size of the transformed set is zero."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/ListOrderedSet_addAllTest.java", "testclass_name": "ListOrderedSet_addAllTest", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ListOrderedSet_addAllTest", "description": "Unit tests for the addAll method of ListOrderedSet.", "class_members": {"variables": [{"name": "listOrderedSet", "type": "ListOrderedSet<Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAddAll", "primary_tested": ["ListOrderedSet.addAll(Collection<? extends E>)"], "external_dependencies": {"modules": ["ListOrderedSet", "Arrays"], "class_members": [{"name": "listOrderedSet", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addAll method with a collection of unique elements."}, {"name": "testAddAllWithDuplicates", "primary_tested": ["ListOrderedSet.addAll(Collection<? extends E>)"], "external_dependencies": {"modules": ["ListOrderedSet", "Arrays"], "class_members": [{"name": "listOrderedSet", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addAll method with a collection containing duplicate elements."}, {"name": "testAddAllEmptyCollection", "primary_tested": ["ListOrderedSet.addAll(Collection<? extends E>)"], "external_dependencies": {"modules": ["ListOrderedSet", "ArrayList"], "class_members": [{"name": "listOrderedSet", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addAll method with an empty collection."}, {"name": "testAddAllWithExistingElements", "primary_tested": ["ListOrderedSet.addAll(Collection<? extends E>)"], "associated_methods": ["ListOrderedSet.add(E)"], "external_dependencies": {"modules": ["ListOrderedSet", "Arrays"], "class_members": [{"name": "listOrderedSet", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addAll method with a collection that includes elements already present in the set."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/ListOrderedSet_clearTest.java", "testclass_name": "ListOrderedSet_clearTest", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.HashSet;", "import java.util.List;", "import java.util.Set;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ListOrderedSet_clearTest", "description": "Unit tests for the clear functionality of the ListOrderedSet class.", "class_members": {"variables": [{"name": "listOrderedSet", "type": "ListOrderedSet<Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testClear", "primary_tested": ["ListOrderedSet.clear()"], "associated_methods": ["ListOrderedSet.add(Integer)", "ListOrderedSet.size()", "ListOrderedSet.isEmpty()"], "external_dependencies": {"modules": ["ListOrderedSet", "HashSet", "ArrayList"], "class_members": [{"name": "listOrderedSet", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clear functionality of the ListOrderedSet by adding elements and then clearing the set."}, {"name": "testClearEmptySet", "primary_tested": ["ListOrderedSet.clear()"], "associated_methods": ["ListOrderedSet.isEmpty()", "ListOrderedSet.size()"], "external_dependencies": {"modules": ["ListOrderedSet", "HashSet", "ArrayList"], "class_members": [{"name": "listOrderedSet", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clear functionality of the ListOrderedSet when the set is already empty."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/GrowthList_addAllTest.java", "testclass_name": "GrowthList_addAllTest", "dependencies": ["package org.apache.commons.collections4.list;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "GrowthList_addAllTest", "description": "Tests the addAll method of the GrowthList class, focusing on its growth behavior.", "class_members": {"variables": [{"name": "growthList", "type": "GrowthList<String>"}, {"name": "collection", "type": "List<String>"}]}, "fixtures": [], "test_cases": [{"name": "testAddAll_GrowthBehavior", "primary_tested": ["GrowthList.addAll(int,Collection<? extends E>)"], "associated_methods": [], "external_dependencies": {"modules": ["GrowthList", "Arrays", "Collections", "List"], "class_members": [{"name": "growthList", "type": "variable"}, {"name": "collection", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the growth behavior of the addAll method in GrowthList when adding elements at indices greater than and less than or equal to the current size."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/properties/OrderedProperties_toStringTest.java", "testclass_name": "OrderedProperties_toStringTest", "dependencies": ["package org.apache.commons.collections4.properties;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "OrderedProperties_toStringTest", "description": "Unit tests for the toString method of the OrderedProperties class.", "class_members": {"variables": [{"name": "orderedProperties", "type": "OrderedProperties"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testToStringEmpty", "primary_tested": ["OrderedProperties.toString()"], "external_dependencies": {"modules": ["OrderedProperties"], "class_members": [{"name": "orderedProperties", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the toString method when the OrderedProperties is empty."}, {"name": "testToStringSingleEntry", "primary_tested": ["OrderedProperties.toString()"], "associated_methods": ["OrderedProperties.put(String,String)"], "external_dependencies": {"modules": ["OrderedProperties"], "class_members": [{"name": "orderedProperties", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the toString method when the OrderedProperties contains a single entry."}, {"name": "testToStringMultipleEntries", "primary_tested": ["OrderedProperties.toString()"], "associated_methods": ["OrderedProperties.put(String,String)"], "external_dependencies": {"modules": ["OrderedProperties"], "class_members": [{"name": "orderedProperties", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the toString method when the OrderedProperties contains multiple entries."}, {"name": "testToStringWithSelfReference", "primary_tested": ["OrderedProperties.toString()"], "associated_methods": ["OrderedProperties.put(String,String)"], "external_dependencies": {"modules": ["OrderedProperties"], "class_members": [{"name": "orderedProperties", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the toString method when the OrderedProperties contains entries, including a self-reference."}, {"name": "testToStringAfterRemove", "primary_tested": ["OrderedProperties.toString()"], "associated_methods": ["OrderedProperties.put(String,String)", "OrderedProperties.remove(String)"], "external_dependencies": {"modules": ["OrderedProperties"], "class_members": [{"name": "orderedProperties", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the toString method after removing an entry from the OrderedProperties."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/TransformedList_transformedListTest.java", "testclass_name": "TransformedList_transformedListTest", "dependencies": ["package org.apache.commons.collections4.list;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.Test;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "TransformedList_transformedListTest", "description": "Unit tests for the TransformedList class, focusing on the transformation of lists.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testTransformedListWithNonEmptyList", "primary_tested": ["TransformedList.transformedList(List<Integer>,Transformer<Integer,Integer>)"], "associated_methods": ["TransformedList.size()"], "external_dependencies": {"modules": ["TransformedList", "Transformer", "ArrayList", "Arrays", "List"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformation of a non-empty list using TransformedList."}, {"name": "testTransformedListWithEmptyList", "primary_tested": ["TransformedList.transformedList(List<Integer>,Transformer<Integer,Integer>)"], "associated_methods": ["TransformedList.isEmpty()"], "external_dependencies": {"modules": ["TransformedList", "Transformer", "ArrayList", "List"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformation of an empty list using TransformedList."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/CollatingIterator_addIteratorTest.java", "testclass_name": "CollatingIterator_addIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.Arrays;", "import java.util.Comparator;", "import java.util.Iterator;", "import java.util.List;", "import org.apache.commons.collections4.comparators.ComparableComparator;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CollatingIterator_addIteratorTest", "description": "Unit tests for the addIterator method of the CollatingIterator class.", "class_members": {"variables": [{"name": "collatingIterator", "type": "CollatingIterator<Integer>"}, {"name": "comparator", "type": "Comparator<Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAddIteratorSuccess", "primary_tested": ["CollatingIterator.addIterator(Iterator<Integer>)"], "associated_methods": ["CollatingIterator.getIterators()"], "external_dependencies": {"modules": ["CollatingIterator", "Iterator", "Arrays"], "class_members": [{"name": "collatingIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful addition of an iterator to the CollatingIterator."}, {"name": "testAddIteratorNull", "primary_tested": ["CollatingIterator.addIterator(Iterator<Integer>)"], "external_dependencies": {"modules": ["CollatingIterator"], "class_members": [{"name": "collatingIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior when attempting to add a null iterator to the CollatingIterator."}, {"name": "testAddIteratorAfterIterationStarted", "primary_tested": ["CollatingIterator.addIterator(Iterator<Integer>)"], "associated_methods": ["CollatingIterator.hasNext()"], "external_dependencies": {"modules": ["CollatingIterator", "Iterator", "Arrays"], "class_members": [{"name": "collatingIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior when attempting to add an iterator after the iteration has started."}, {"name": "testAddIteratorMultiple", "primary_tested": ["CollatingIterator.addIterator(Iterator<Integer>)"], "associated_methods": ["CollatingIterator.getIterators()"], "external_dependencies": {"modules": ["CollatingIterator", "Iterator", "Arrays"], "class_members": [{"name": "collatingIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addition of multiple iterators to the CollatingIterator."}, {"name": "testAddIteratorAndCheckNext", "primary_tested": ["CollatingIterator.addIterator(Iterator<Integer>)"], "associated_methods": ["CollatingIterator.hasNext()", "CollatingIterator.next()"], "external_dependencies": {"modules": ["CollatingIterator", "Iterator", "Arrays"], "class_members": [{"name": "collatingIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addition of an iterator and checks the next element in the CollatingIterator."}, {"name": "testAddIteratorAndCheckHasNext", "primary_tested": ["CollatingIterator.addIterator(Iterator<Integer>)"], "associated_methods": ["CollatingIterator.hasNext()", "CollatingIterator.next()"], "external_dependencies": {"modules": ["CollatingIterator", "Iterator", "Arrays"], "class_members": [{"name": "collatingIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addition of an iterator and checks the hasNext method in the CollatingIterator."}, {"name": "testAddIteratorAndCheckGetIterators", "primary_tested": ["CollatingIterator.addIterator(Iterator<Integer>)"], "associated_methods": ["CollatingIterator.getIterators()"], "external_dependencies": {"modules": ["CollatingIterator", "Iterator", "Arrays", "List"], "class_members": [{"name": "collatingIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addition of an iterator and checks the getIterators method in the CollatingIterator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/FilterIterator_nextTest.java", "testclass_name": "FilterIterator_nextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.apache.commons.collections4.functors.TruePredicate.truePredicate;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.apache.commons.collections4.Predicate;", "import org.apache.commons.collections4.functors.NotNullPredicate;", "import org.apache.commons.lang3.ArrayUtils;", "import org.junit.jupiter.api.AfterEach;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "FilterIterator_nextTest", "description": "Unit tests for the next() method of the FilterIterator class.", "class_members": {"variables": [{"name": "iterator", "type": "FilterIterator<String>"}, {"name": "array", "type": "String[]"}], "methods": [{"name": "setUp", "signature": "void setUp()"}, {"name": "initIterator", "signature": "void initIterator()"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNextWithElements", "primary_tested": ["FilterIterator.next()"], "external_dependencies": {"modules": ["FilterIterator", "String"], "class_members": [{"name": "iterator", "type": "variable"}, {"name": "array", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next() method when there are elements in the iterator."}, {"name": "testNextWithoutElements", "primary_tested": ["FilterIterator.next()"], "external_dependencies": {"modules": ["FilterIterator", "Collections", "NoSuchElementException"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the next() method when there are no elements in the iterator."}, {"name": "testNextWithPredicate", "primary_tested": ["FilterIterator.next()"], "external_dependencies": {"modules": ["FilterIterator", "NotNullPredicate", "NoSuchElementException"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the next() method with a predicate that filters out null elements."}, {"name": "testNextAfterHasNext", "primary_tested": ["FilterIterator.next()"], "associated_methods": ["FilterIterator.hasNext()"], "external_dependencies": {"modules": ["FilterIterator", "NoSuchElementException"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next() method after checking hasNext() multiple times."}, {"name": "testNextAfterSetIterator", "primary_tested": ["FilterIterator.next()"], "associated_methods": ["FilterIterator.setIterator(Iterator)"], "external_dependencies": {"modules": ["FilterIterator", "NoSuchElementException"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the next() method after setting a new iterator."}, {"name": "testNextAfterSetPredicate", "primary_tested": ["FilterIterator.next()"], "associated_methods": ["FilterIterator.setPredicate(Predicate)"], "external_dependencies": {"modules": ["FilterIterator", "NotNullPredicate", "NoSuchElementException"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next() method after setting a new predicate."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/PredicatedSortedSet_headSetTest.java", "testclass_name": "PredicatedSortedSet_headSetTest", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.SortedSet;", "import java.util.TreeSet;", "import java.util.Arrays;", "import org.apache.commons.collections4.Predicate;", "import org.apache.commons.collections4.functors.TruePredicate;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "PredicatedSortedSet_headSetTest", "description": "Unit tests for the headSet functionality of PredicatedSortedSet.", "class_members": {"variables": [{"name": "predicatedSortedSet", "type": "PredicatedSortedSet<Integer>"}, {"name": "testSet", "type": "SortedSet<Integer>"}, {"name": "truePredicate", "type": "Predicate<Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testHeadSetValid", "primary_tested": ["PredicatedSortedSet.headSet(Integer)"], "external_dependencies": {"modules": ["PredicatedSortedSet", "SortedSet", "TruePredicate"], "class_members": [{"name": "predicatedSortedSet", "type": "variable"}, {"name": "truePredicate", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the headSet functionality with a valid boundary value."}, {"name": "testHeadSetInvalid", "primary_tested": ["PredicatedSortedSet.headSet(Integer)"], "external_dependencies": {"modules": ["PredicatedSortedSet", "SortedSet", "TruePredicate"], "class_members": [{"name": "predicatedSortedSet", "type": "variable"}, {"name": "truePredicate", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the headSet functionality with an invalid boundary value."}, {"name": "testHeadSetBoundary", "primary_tested": ["PredicatedSortedSet.headSet(Integer)"], "external_dependencies": {"modules": ["PredicatedSortedSet", "SortedSet", "TruePredicate"], "class_members": [{"name": "predicatedSortedSet", "type": "variable"}, {"name": "truePredicate", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the headSet functionality at the boundary value."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/UnmodifiableSortedSet_unmodifiableSortedSetTest.java", "testclass_name": "UnmodifiableSortedSet_unmodifiableSortedSetTest", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.Arrays;", "import java.util.SortedSet;", "import java.util.TreeSet;", "import org.apache.commons.collections4.Unmodifiable;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "UnmodifiableSortedSet_unmodifiableSortedSetTest", "description": "Unit tests for the UnmodifiableSortedSet class, focusing on the unmodifiableSortedSet method.", "class_members": {"variables": [{"name": "set", "type": "SortedSet<Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testUnmodifiableSortedSetWithUnmodifiableSet", "primary_tested": ["UnmodifiableSortedSet.unmodifiableSortedSet(SortedSet<Integer>)"], "external_dependencies": {"modules": ["UnmodifiableSortedSet", "SortedSet"], "class_members": [{"name": "set", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that wrapping an unmodifiable set with UnmodifiableSortedSet.unmodifiableSortedSet returns the same instance."}, {"name": "testUnmodifiableSortedSetWithModifiableSet", "primary_tested": ["UnmodifiableSortedSet.unmodifiableSortedSet(SortedSet<Integer>)"], "external_dependencies": {"modules": ["UnmodifiableSortedSet", "SortedSet", "Unmodifiable"], "class_members": [{"name": "set", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that wrapping a modifiable set with UnmodifiableSortedSet.unmodifiableSortedSet returns an unmodifiable instance."}, {"name": "testUnmodifiableSortedSetWithNullSet", "primary_tested": ["UnmodifiableSortedSet.unmodifiableSortedSet(SortedSet<Integer>)"], "external_dependencies": {"modules": ["UnmodifiableSortedSet"]}, "category": "unit", "description": "Tests that passing null to UnmodifiableSortedSet.unmodifiableSortedSet throws a NullPointerException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/ListOrderedSet_retainAllTest.java", "testclass_name": "ListOrderedSet_retainAllTest", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.List;", "import java.util.Set;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ListOrderedSet_retainAllTest", "description": "Unit tests for the retainAll functionality of ListOrderedSet.", "class_members": {"variables": [{"name": "orderedSet", "type": "ListOrderedSet<Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRetainAll_ElementsRetained", "primary_tested": ["ListOrderedSet.retainAll(Collection)"], "external_dependencies": {"modules": ["ListOrderedSet", "Collection", "ArrayList"], "class_members": [{"name": "orderedSet", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retainAll functionality when elements are retained."}, {"name": "testRetainAll_NoElementsRetained", "primary_tested": ["ListOrderedSet.retainAll(Collection)"], "external_dependencies": {"modules": ["ListOrderedSet", "Collection", "ArrayList"], "class_members": [{"name": "orderedSet", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retainAll functionality when no elements are retained."}, {"name": "testRetainAll_AllElementsRetained", "primary_tested": ["ListOrderedSet.retainAll(Collection)"], "external_dependencies": {"modules": ["ListOrderedSet", "Collection", "ArrayList"], "class_members": [{"name": "orderedSet", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retainAll functionality when all elements are retained."}, {"name": "testRetainAll_PartialElementsRetained", "primary_tested": ["ListOrderedSet.retainAll(Collection)"], "external_dependencies": {"modules": ["ListOrderedSet", "Collection", "ArrayList"], "class_members": [{"name": "orderedSet", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retainAll functionality when only some elements are retained."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/ListOrderedSet_listOrderedSetTest.java", "testclass_name": "ListOrderedSet_listOrderedSetTest", "dependencies": ["package org.apache.commons.collections4.set;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.ArrayList;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "ListOrderedSet_listOrderedSetTest", "description": "Unit tests for the ListOrderedSet class, focusing on the listOrderedSet method.", "class_members": {"variables": [{"name": "list", "type": "List<Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testListOrderedSetWithUniqueElements", "primary_tested": ["ListOrderedSet.listOrderedSet(List<Integer>)"], "associated_methods": ["ListOrderedSet.size()", "ListOrderedSet.get(int)"], "external_dependencies": {"modules": ["ListOrderedSet", "List", "Integer"], "class_members": [{"name": "list", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the creation of a ListOrderedSet with unique elements and verifies the order and size."}, {"name": "testListOrderedSetWithDuplicateElements", "primary_tested": ["ListOrderedSet.listOrderedSet(List<Integer>)"], "associated_methods": ["ListOrderedSet.size()", "ListOrderedSet.get(int)"], "external_dependencies": {"modules": ["ListOrderedSet", "List", "Integer"], "class_members": [{"name": "list", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the creation of a ListOrderedSet with duplicate elements and verifies the order and size."}, {"name": "testListOrderedSetWithNullList", "primary_tested": ["ListOrderedSet.listOrderedSet(List<Integer>)"], "external_dependencies": {"modules": ["ListOrderedSet", "List", "Integer"], "class_members": [{"name": "list", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of the listOrderedSet method when provided with a null list, expecting a NullPointerException."}, {"name": "testListOrderedSetWithEmptyList", "primary_tested": ["ListOrderedSet.listOrderedSet(List<Integer>)"], "associated_methods": ["ListOrderedSet.size()"], "external_dependencies": {"modules": ["ListOrderedSet", "List", "Integer"], "class_members": [{"name": "list", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the creation of a ListOrderedSet with an empty list and verifies the size."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/CollatingIterator_hasNextTest.java", "testclass_name": "CollatingIterator_hasNextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Comparator;", "import java.util.List;", "import org.apache.commons.collections4.comparators.ComparableComparator;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CollatingIterator_hasNextTest", "description": "Unit tests for the hasNext method of the CollatingIterator class.", "class_members": {"variables": [{"name": "comparator", "type": "Comparator<Integer>"}, {"name": "list1", "type": "List<Integer>"}, {"name": "list2", "type": "List<Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testHasNextWithElements", "primary_tested": ["CollatingIterator.hasNext()"], "external_dependencies": {"modules": ["CollatingIterator", "Comparator", "List", "Arrays"], "class_members": [{"name": "comparator", "type": "variable"}, {"name": "list1", "type": "variable"}, {"name": "list2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method when the CollatingIterator contains elements."}, {"name": "testHasNextWithoutElements", "primary_tested": ["CollatingIterator.hasNext()"], "external_dependencies": {"modules": ["CollatingIterator", "Comparator", "List", "ArrayList"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method when the CollatingIterator does not contain elements."}, {"name": "testHasNextWithOneEmptyIterator", "primary_tested": ["CollatingIterator.hasNext()"], "external_dependencies": {"modules": ["CollatingIterator", "Comparator", "List", "ArrayList"], "class_members": [{"name": "comparator", "type": "variable"}, {"name": "list1", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method when one of the iterators is empty."}, {"name": "testHasNextAfterIteration", "primary_tested": ["CollatingIterator.hasNext()"], "associated_methods": ["CollatingIterator.next()"], "external_dependencies": {"modules": ["CollatingIterator", "Comparator", "List", "Arrays"], "class_members": [{"name": "comparator", "type": "variable"}, {"name": "list1", "type": "variable"}, {"name": "list2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method after iterating through all elements."}, {"name": "testHasNextWithNullComparator", "primary_tested": ["CollatingIterator.hasNext()"], "external_dependencies": {"modules": ["CollatingIterator", "Comparator", "List", "Arrays"], "class_members": [{"name": "list1", "type": "variable"}, {"name": "list2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method when the comparator is null, expecting a NullPointerException."}, {"name": "testHasNextWithSetComparator", "primary_tested": ["CollatingIterator.hasNext()"], "associated_methods": ["CollatingIterator.setComparator(Comparator)"], "external_dependencies": {"modules": ["CollatingIterator", "Comparator", "List", "Arrays"], "class_members": [{"name": "comparator", "type": "variable"}, {"name": "list1", "type": "variable"}, {"name": "list2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method after setting the comparator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/UnmodifiableList_unmodifiableListTest.java", "testclass_name": "UnmodifiableList_unmodifiableListTest", "dependencies": ["package org.apache.commons.collections4.list;", "import org.apache.commons.collections4.Unmodifiable;", "import org.junit.jupiter.api.Test;", "import java.util.ArrayList;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "UnmodifiableList_unmodifiableListTest", "description": "Tests for the UnmodifiableList class, specifically the unmodifiableList method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testUnmodifiableListWithUnmodifiableList", "primary_tested": ["UnmodifiableList.unmodifiableList(List)"], "external_dependencies": {"modules": ["List", "ArrayList", "UnmodifiableList"], "class_members": []}, "category": "unit", "description": "Tests that passing an unmodifiable list to unmodifiableList returns the same list."}, {"name": "testUnmodifiableListWithModifiableList", "primary_tested": ["UnmodifiableList.unmodifiableList(List)"], "external_dependencies": {"modules": ["List", "ArrayList", "UnmodifiableList"], "class_members": []}, "category": "unit", "description": "Tests that passing a modifiable list to unmodifiableList returns an instance of UnmodifiableList."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/UnmodifiableNavigableSet_headSetTest.java", "testclass_name": "UnmodifiableNavigableSet_headSetTest", "dependencies": ["package org.apache.commons.collections4.set;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.NavigableSet;", "import java.util.SortedSet;", "import java.util.TreeSet;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;"], "name": "UnmodifiableNavigableSet_headSetTest", "description": "Tests for the headSet functionality of the UnmodifiableNavigableSet class.", "class_members": {"variables": [{"name": "set", "type": "UnmodifiableNavigableSet<Integer>"}]}, "fixtures": ["setupSet"], "test_cases": [{"name": "testHeadSet", "primary_tested": ["UnmodifiableNavigableSet.headSet(Integer)"], "external_dependencies": {"modules": ["UnmodifiableNavigableSet", "SortedSet"], "class_members": [{"name": "set", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setupSet"], "description": "Tests the headSet functionality of the UnmodifiableNavigableSet, ensuring the correct size and elements are returned."}, {"name": "testHeadSetInclusive", "primary_tested": ["UnmodifiableNavigableSet.headSet(Integer,boolean)"], "external_dependencies": {"modules": ["UnmodifiableNavigableSet", "NavigableSet"], "class_members": [{"name": "set", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setupSet"], "description": "Tests the inclusive headSet functionality of the UnmodifiableNavigableSet, ensuring the correct size and elements are returned."}, {"name": "testHeadSetModification", "primary_tested": ["UnmodifiableNavigableSet.headSet(Integer)"], "external_dependencies": {"modules": ["UnmodifiableNavigableSet", "SortedSet"], "class_members": [{"name": "set", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setupSet"], "description": "Tests that modifications to the headSet of the UnmodifiableNavigableSet throw an UnsupportedOperationException."}, {"name": "testHeadSetInclusiveModification", "primary_tested": ["UnmodifiableNavigableSet.headSet(Integer,boolean)"], "external_dependencies": {"modules": ["UnmodifiableNavigableSet", "NavigableSet"], "class_members": [{"name": "set", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setupSet"], "description": "Tests that modifications to the inclusive headSet of the UnmodifiableNavigableSet throw an UnsupportedOperationException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/SetUniqueList_clearTest.java", "testclass_name": "SetUniqueList_clearTest", "dependencies": ["package org.apache.commons.collections4.list;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.HashSet;", "import java.util.List;", "import java.util.Set;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SetUniqueList_clearTest", "description": "Unit tests for the clear functionality of SetUniqueList.", "class_members": {"variables": [{"name": "uniqueList", "type": "SetUniqueList<Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testClear", "primary_tested": ["SetUniqueList.clear()"], "associated_methods": ["SetUniqueList.isEmpty()", "SetUniqueList.asSet().isEmpty()"], "external_dependencies": {"modules": ["SetUniqueList", "ArrayList", "HashSet"], "class_members": [{"name": "uniqueList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clear functionality of the SetUniqueList, ensuring both the list and its internal set are empty after clearing."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/SetUniqueList_removeIfTest.java", "testclass_name": "SetUniqueList_removeIfTest", "dependencies": ["package org.apache.commons.collections4.list;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.List;", "import java.util.function.Predicate;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SetUniqueList_removeIfTest", "description": "Unit tests for the removeIf method of the SetUniqueList class.", "class_members": {"variables": [{"name": "uniqueList", "type": "SetUniqueList<Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveIf_AllElementsRemoved", "primary_tested": ["SetUniqueList.removeIf(Predicate<Integer>)"], "external_dependencies": {"modules": ["SetUniqueList", "Predicate"], "class_members": [{"name": "uniqueList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeIf method when all elements are removed from the list."}, {"name": "testRemoveIf_NoElementsRemoved", "primary_tested": ["SetUniqueList.removeIf(Predicate<Integer>)"], "external_dependencies": {"modules": ["SetUniqueList", "Predicate"], "class_members": [{"name": "uniqueList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeIf method when no elements are removed from the list."}, {"name": "testRemoveIf_SomeElementsRemoved", "primary_tested": ["SetUniqueList.removeIf(Predicate<Integer>)"], "external_dependencies": {"modules": ["SetUniqueList", "Predicate"], "class_members": [{"name": "uniqueList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeIf method when some elements are removed from the list."}, {"name": "testRemoveIf_EmptyList", "primary_tested": ["SetUniqueList.removeIf(Predicate<Integer>)"], "external_dependencies": {"modules": ["SetUniqueList", "Predicate"], "class_members": [{"name": "uniqueList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeIf method when the list is empty."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/UnmodifiableList_subListTest.java", "testclass_name": "UnmodifiableList_subListTest", "dependencies": ["package org.apache.commons.collections4.list;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "UnmodifiableList_subListTest", "description": "Tests for the subList functionality of the UnmodifiableList class.", "class_members": {"variables": [{"name": "originalList", "type": "List<String>"}, {"name": "unmodifiableList", "type": "UnmodifiableList<String>"}]}, "fixtures": ["setupList"], "test_cases": [{"name": "testSubList", "primary_tested": ["UnmodifiableList.subList(int,int)"], "external_dependencies": {"modules": ["UnmodifiableList", "List"], "class_members": [{"name": "unmodifiableList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setupList"], "description": "Tests the subList functionality of the UnmodifiableList, verifying the size and content of the subList."}, {"name": "testSubListUnmodifiable", "primary_tested": ["UnmodifiableList.subList(int,int)"], "associated_methods": ["List.add(String)"], "external_dependencies": {"modules": ["UnmodifiableList", "List"], "class_members": [{"name": "unmodifiableList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setupList"], "description": "Tests that the subList of the UnmodifiableList is unmodifiable by expecting an UnsupportedOperationException when attempting to add an element."}, {"name": "testSubListOutOfBounds", "primary_tested": ["UnmodifiableList.subList(int,int)"], "external_dependencies": {"modules": ["UnmodifiableList"], "class_members": [{"name": "unmodifiableList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setupList"], "description": "Tests that an IndexOutOfBoundsException is thrown when attempting to create a subList with invalid indices."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/BitMaps_getLongIndexTest.java", "testclass_name": "BitMaps_getLongIndexTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import org.junit.jupiter.api.Test;"], "name": "BitMaps_getLongIndexTest", "description": "Unit tests for the BitMaps.getLongIndex method, which calculates the long index for a given bit index.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testGetLongIndexPositive", "primary_tested": ["BitMaps.getLongIndex(int)"], "external_dependencies": {"modules": ["BitMaps"]}, "category": "unit", "description": "Tests the BitMaps.getLongIndex method with positive bit indices."}, {"name": "testGetLongIndexNegative", "primary_tested": ["BitMaps.getLongIndex(int)"], "external_dependencies": {"modules": ["BitMaps"]}, "category": "unit", "description": "Tests the BitMaps.getLongIndex method with negative bit indices."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/CompositeSet_hashCodeTest.java", "testclass_name": "CompositeSet_hashCodeTest", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import java.util.HashSet;", "import java.util.Set;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeSet_hashCodeTest", "description": "Unit tests for the hashCode method of the CompositeSet class.", "class_members": {"variables": [{"name": "compositeSet", "type": "CompositeSet<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testHashCodeWithEmptySet", "primary_tested": ["CompositeSet.hashCode()"], "external_dependencies": {"modules": ["CompositeSet"], "class_members": [{"name": "compositeSet", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hashCode method of an empty CompositeSet."}, {"name": "testHashCodeWithSingleElement", "primary_tested": ["CompositeSet.hashCode()"], "associated_methods": ["CompositeSet.addComposited(Set<String>)"], "external_dependencies": {"modules": ["CompositeSet", "HashSet"], "class_members": [{"name": "compositeSet", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hashCode method of a CompositeSet with a single element."}, {"name": "testHashCodeWithMultipleElements", "primary_tested": ["CompositeSet.hashCode()"], "associated_methods": ["CompositeSet.addComposited(Set<String>, Set<String>)"], "external_dependencies": {"modules": ["CompositeSet", "HashSet"], "class_members": [{"name": "compositeSet", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hashCode method of a CompositeSet with multiple elements."}, {"name": "testHashCodeWithNullElement", "primary_tested": ["CompositeSet.hashCode()"], "associated_methods": ["CompositeSet.addComposited(Set<String>)"], "external_dependencies": {"modules": ["CompositeSet", "HashSet"], "class_members": [{"name": "compositeSet", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hashCode method of a CompositeSet with a null element."}, {"name": "testHashCodeAfterAddingAndRemovingElements", "primary_tested": ["CompositeSet.hashCode()"], "associated_methods": ["CompositeSet.addComposited(Set<String>)", "Set.remove(Object)"], "external_dependencies": {"modules": ["CompositeSet", "HashSet"], "class_members": [{"name": "compositeSet", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hashCode method of a CompositeSet after adding and removing elements."}, {"name": "testHashCodeAfterClear", "primary_tested": ["CompositeSet.hashCode()"], "associated_methods": ["CompositeSet.addComposited(Set<String>)", "CompositeSet.clear()"], "external_dependencies": {"modules": ["CompositeSet", "HashSet"], "class_members": [{"name": "compositeSet", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hashCode method of a CompositeSet after clearing all elements."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/GrowthList_setTest.java", "testclass_name": "GrowthList_setTest", "dependencies": ["package org.apache.commons.collections4.list;", "import org.junit.jupiter.api.Test;", "import java.util.ArrayList;", "import java.util.Collections;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "GrowthList_setTest", "description": "Unit tests for the set method in the GrowthList class, including scenarios with and without growth.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testSetWithGrowth", "primary_tested": ["GrowthList.set(int,String)"], "associated_methods": ["GrowthList.get(int)", "GrowthList.size()"], "external_dependencies": {"modules": ["ArrayList", "GrowthList", "List"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the set method of GrowthList when the list needs to grow to accommodate the specified index."}, {"name": "testSetWithoutGrowth", "primary_tested": ["GrowthList.set(int,String)"], "associated_methods": ["GrowthList.get(int)", "GrowthList.size()"], "external_dependencies": {"modules": ["ArrayList", "GrowthList", "List"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the set method of GrowthList when the list does not need to grow."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/BitMaps_getLongBitTest.java", "testclass_name": "BitMaps_getLongBitTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import org.junit.jupiter.api.Test;"], "name": "BitMaps_getLongBitTest", "description": "Unit tests for the BitMaps.getLongBit method, testing various index values.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testGetLongBitPositiveIndex", "primary_tested": ["BitMaps.getLongBit(int)"], "external_dependencies": {"modules": ["BitMaps"]}, "category": "unit", "description": "Tests the BitMaps.getLongBit method with positive index values."}, {"name": "testGetLongBitNegativeIndex", "primary_tested": ["BitMaps.getLongBit(int)"], "external_dependencies": {"modules": ["BitMaps"]}, "category": "unit", "description": "Tests the BitMaps.getLongBit method with negative index values."}, {"name": "testGetLongBitLargeIndex", "primary_tested": ["BitMaps.getLongBit(int)"], "external_dependencies": {"modules": ["BitMaps"]}, "category": "unit", "description": "Tests the BitMaps.getLongBit method with large index values."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/TransformedList_addTest.java", "testclass_name": "TransformedList_addTest", "dependencies": ["package org.apache.commons.collections4.list;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.List;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.collection.TransformedCollectionTest;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "TransformedList_addTest", "description": "Unit tests for the add functionality of TransformedList, ensuring objects are transformed correctly.", "class_members": {"variables": [{"name": "transformedList", "type": "TransformedList<Object>"}, {"name": "originalList", "type": "List<Object>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAdd_TransformObject", "primary_tested": ["TransformedList.add(int,Object)"], "external_dependencies": {"modules": ["TransformedList", "TransformedCollectionTest"], "class_members": [{"name": "transformedList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addition of an object to the TransformedList at index 0, ensuring it is transformed correctly."}, {"name": "testAdd_TransformObjectAtNonZeroIndex", "primary_tested": ["TransformedList.add(int,Object)"], "external_dependencies": {"modules": ["TransformedList", "TransformedCollectionTest"], "class_members": [{"name": "transformedList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addition of objects to the TransformedList at non-zero indices, ensuring they are transformed correctly."}, {"name": "testAdd_TransformObjectAtExistingIndex", "primary_tested": ["TransformedList.add(int,Object)"], "external_dependencies": {"modules": ["TransformedList", "TransformedCollectionTest"], "class_members": [{"name": "transformedList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addition of an object to the TransformedList at an existing index, ensuring it is transformed correctly."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/PredicatedSortedSet_tailSetTest.java", "testclass_name": "PredicatedSortedSet_tailSetTest", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.Arrays;", "import java.util.SortedSet;", "import java.util.TreeSet;", "import org.apache.commons.collections4.Predicate;", "import org.apache.commons.collections4.functors.TruePredicate;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "PredicatedSortedSet_tailSetTest", "description": "Unit tests for the tailSet functionality of PredicatedSortedSet.", "class_members": {"variables": [{"name": "predicatedSortedSet", "type": "PredicatedSortedSet<Integer>"}, {"name": "testSet", "type": "SortedSet<Integer>"}, {"name": "truePredicate", "type": "Predicate<Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testTailSetValid", "primary_tested": ["PredicatedSortedSet.tailSet(Integer)"], "external_dependencies": {"modules": ["PredicatedSortedSet", "SortedSet", "TruePredicate"], "class_members": [{"name": "predicatedSortedSet", "type": "variable"}, {"name": "testSet", "type": "variable"}, {"name": "truePredicate", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the tailSet functionality with a valid fromElement."}, {"name": "testTailSetInvalid", "primary_tested": ["PredicatedSortedSet.tailSet(Integer)"], "external_dependencies": {"modules": ["PredicatedSortedSet", "SortedSet", "TruePredicate"], "class_members": [{"name": "predicatedSortedSet", "type": "variable"}, {"name": "testSet", "type": "variable"}, {"name": "truePredicate", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the tailSet functionality with an invalid fromElement."}, {"name": "testTailSetNullPredicate", "primary_tested": ["PredicatedSortedSet.tailSet(Integer)"], "external_dependencies": {"modules": ["PredicatedSortedSet", "SortedSet", "TruePredicate"], "class_members": [{"name": "testSet", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the tailSet functionality with a null predicate, expecting a NullPointerException."}, {"name": "testTailSetNullSet", "primary_tested": ["PredicatedSortedSet.tailSet(Integer)"], "external_dependencies": {"modules": ["PredicatedSortedSet", "SortedSet", "TruePredicate"], "class_members": [{"name": "truePredicate", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the tailSet functionality with a null set, expecting a NullPointerException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/TreeList_iteratorTest.java", "testclass_name": "TreeList_iteratorTest", "dependencies": ["package org.apache.commons.collections4.list;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.Iterator;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "TreeList_iteratorTest", "description": "Unit tests for the iterator functionality of the TreeList class.", "class_members": {"variables": [{"name": "treeList", "type": "TreeList<Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testIterator", "primary_tested": ["TreeList.iterator()"], "associated_methods": ["TreeList.size()"], "external_dependencies": {"modules": ["TreeList", "Iterator"], "class_members": [{"name": "treeList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the iterator functionality of the TreeList, ensuring it iterates correctly over the elements."}, {"name": "testIteratorNoSuchElementException", "primary_tested": ["TreeList.iterator()"], "associated_methods": ["TreeList.size()"], "external_dependencies": {"modules": ["TreeList", "Iterator", "NoSuchElementException"], "class_members": [{"name": "treeList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the iterator throws a NoSuchElementException when next() is called after all elements have been iterated."}, {"name": "testIteratorAfterRemove", "primary_tested": ["TreeList.iterator()"], "associated_methods": ["TreeList.remove(int)", "TreeList.size()"], "external_dependencies": {"modules": ["TreeList", "Iterator"], "class_members": [{"name": "treeList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the iterator functionality of the TreeList after removing an element, ensuring it iterates correctly over the remaining elements."}, {"name": "testIteratorEmptyList", "primary_tested": ["TreeList.iterator()"], "associated_methods": ["TreeList.clear()"], "external_dependencies": {"modules": ["TreeList", "Iterator"], "class_members": [{"name": "treeList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the iterator functionality of the TreeList when the list is empty, ensuring it correctly indicates no elements are available."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/FilterListIterator_previousTest.java", "testclass_name": "FilterListIterator_previousTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import java.util.ArrayList;", "import java.util.List;", "import java.util.ListIterator;", "import java.util.NoSuchElementException;", "import org.apache.commons.collections4.Predicate;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "FilterListIterator_previousTest", "description": "Unit tests for the previous method of FilterListIterator with various predicates.", "class_members": {"variables": [{"name": "list", "type": "List<Integer>"}, {"name": "truePred", "type": "Predicate<Integer>"}, {"name": "falsePred", "type": "Predicate<Integer>"}, {"name": "evenPred", "type": "Predicate<Integer>"}, {"name": "oddPred", "type": "Predicate<Integer>"}, {"name": "threePred", "type": "Predicate<Integer>"}, {"name": "fourPred", "type": "Predicate<Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPreviousWithTruePredicate", "primary_tested": ["FilterListIterator.previous()"], "external_dependencies": {"modules": ["FilterListIterator", "ListIterator"], "class_members": [{"name": "list", "type": "variable"}, {"name": "truePred", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the previous method with a true predicate, expecting the first element."}, {"name": "testPreviousWithFalsePredicate", "primary_tested": ["FilterListIterator.previous()"], "external_dependencies": {"modules": ["FilterListIterator", "ListIterator", "NoSuchElementException"], "class_members": [{"name": "list", "type": "variable"}, {"name": "falsePred", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the previous method with a false predicate, expecting a NoSuchElementException."}, {"name": "testPreviousWithEvenPredicate", "primary_tested": ["FilterListIterator.previous()"], "external_dependencies": {"modules": ["FilterListIterator", "ListIterator"], "class_members": [{"name": "list", "type": "variable"}, {"name": "evenPred", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the previous method with an even predicate, expecting the first even element."}, {"name": "testPreviousWithOddPredicate", "primary_tested": ["FilterListIterator.previous()"], "external_dependencies": {"modules": ["FilterListIterator", "ListIterator"], "class_members": [{"name": "list", "type": "variable"}, {"name": "oddPred", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the previous method with an odd predicate, expecting the first odd element."}, {"name": "testPreviousWithThreePredicate", "primary_tested": ["FilterListIterator.previous()"], "external_dependencies": {"modules": ["FilterListIterator", "ListIterator"], "class_members": [{"name": "list", "type": "variable"}, {"name": "threePred", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the previous method with a predicate for multiples of three, expecting the first multiple of three."}, {"name": "testPreviousWithFourPredicate", "primary_tested": ["FilterListIterator.previous()"], "external_dependencies": {"modules": ["FilterListIterator", "ListIterator"], "class_members": [{"name": "list", "type": "variable"}, {"name": "fourPred", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the previous method with a predicate for multiples of four, expecting the first multiple of four."}, {"name": "testPreviousNoPreviousObjectSet", "primary_tested": ["FilterListIterator.previous()"], "external_dependencies": {"modules": ["FilterListIterator", "ListIterator", "NoSuchElementException"], "class_members": [{"name": "list", "type": "variable"}, {"name": "truePred", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the previous method when no previous object is set, expecting a NoSuchElementException."}, {"name": "testPreviousAfterNext", "primary_tested": ["FilterListIterator.previous()"], "external_dependencies": {"modules": ["FilterListIterator", "ListIterator"], "class_members": [{"name": "list", "type": "variable"}, {"name": "truePred", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the previous method after calling next, expecting the previous element."}, {"name": "testPreviousAfterPrevious", "primary_tested": ["FilterListIterator.previous()"], "external_dependencies": {"modules": ["FilterListIterator", "ListIterator", "NoSuchElementException"], "class_members": [{"name": "list", "type": "variable"}, {"name": "truePred", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the previous method after calling previous, expecting a NoSuchElementException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/CompositeSet_equalsTest.java", "testclass_name": "CompositeSet_equalsTest", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.HashSet;", "import java.util.Set;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeSet_equalsTest", "description": "Unit tests for the equals method of the CompositeSet class.", "class_members": {"variables": [{"name": "compositeSet", "type": "CompositeSet<String>"}, {"name": "set1", "type": "Set<String>"}, {"name": "set2", "type": "Set<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEquals_SameSets", "primary_tested": ["CompositeSet.equals(Object)"], "external_dependencies": {"modules": ["CompositeSet", "Set"], "class_members": [{"name": "compositeSet", "type": "variable"}, {"name": "set1", "type": "variable"}, {"name": "set2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with two CompositeSets containing the same sets."}, {"name": "testEquals_DifferentSets", "primary_tested": ["CompositeSet.equals(Object)"], "external_dependencies": {"modules": ["CompositeSet", "Set"], "class_members": [{"name": "compositeSet", "type": "variable"}, {"name": "set1", "type": "variable"}, {"name": "set2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with two CompositeSets containing different sets."}, {"name": "testEquals_DifferentSize", "primary_tested": ["CompositeSet.equals(Object)"], "external_dependencies": {"modules": ["CompositeSet", "Set"], "class_members": [{"name": "compositeSet", "type": "variable"}, {"name": "set1", "type": "variable"}, {"name": "set2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with two CompositeSets having different sizes."}, {"name": "testEquals_Null", "primary_tested": ["CompositeSet.equals(Object)"], "external_dependencies": {"modules": ["CompositeSet"], "class_members": [{"name": "compositeSet", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with a null object."}, {"name": "testEquals_DifferentType", "primary_tested": ["CompositeSet.equals(Object)"], "external_dependencies": {"modules": ["CompositeSet"], "class_members": [{"name": "compositeSet", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with an object of a different type."}, {"name": "testEquals_EmptySets", "primary_tested": ["CompositeSet.equals(Object)"], "external_dependencies": {"modules": ["CompositeSet"]}, "category": "unit", "description": "Tests the equals method with two empty CompositeSets."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/CompositeSet_removeIfTest.java", "testclass_name": "CompositeSet_removeIfTest", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.HashSet;", "import java.util.Set;", "import java.util.function.Predicate;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeSet_removeIfTest", "description": "Unit tests for the removeIf functionality of the CompositeSet class.", "class_members": {"variables": [{"name": "compositeSet", "type": "CompositeSet<String>"}, {"name": "set1", "type": "Set<String>"}, {"name": "set2", "type": "Set<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveIf_NullFilter", "primary_tested": ["CompositeSet.removeIf(Predicate<String>)"], "external_dependencies": {"modules": ["CompositeSet", "Predicate"], "class_members": [{"name": "compositeSet", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeIf method with a null filter."}, {"name": "testRemoveIf_NoMatches", "primary_tested": ["CompositeSet.removeIf(Predicate<String>)"], "external_dependencies": {"modules": ["CompositeSet", "Predicate"], "class_members": [{"name": "compositeSet", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeIf method with a filter that does not match any elements."}, {"name": "testRemoveIf_MatchesInOneSet", "primary_tested": ["CompositeSet.removeIf(Predicate<String>)"], "external_dependencies": {"modules": ["CompositeSet", "Predicate"], "class_members": [{"name": "compositeSet", "type": "variable"}, {"name": "set1", "type": "variable"}, {"name": "set2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeIf method with a filter that matches elements in one set."}, {"name": "testRemoveIf_MatchesInMultipleSets", "primary_tested": ["CompositeSet.removeIf(Predicate<String>)"], "external_dependencies": {"modules": ["CompositeSet", "Predicate"], "class_members": [{"name": "compositeSet", "type": "variable"}, {"name": "set1", "type": "variable"}, {"name": "set2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeIf method with a filter that matches elements in multiple sets."}, {"name": "testRemoveIf_MatchesInAllSets", "primary_tested": ["CompositeSet.removeIf(Predicate<String>)"], "external_dependencies": {"modules": ["CompositeSet", "Predicate"], "class_members": [{"name": "compositeSet", "type": "variable"}, {"name": "set1", "type": "variable"}, {"name": "set2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeIf method with a filter that matches elements in all sets."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/multimap/ArrayListValuedHashMap_trimToSizeTest.java", "testclass_name": "ArrayListValuedHashMap_trimToSizeTest", "dependencies": ["package org.apache.commons.collections4.multimap;", "import org.junit.jupiter.api.Test;", "import java.util.ArrayList;", "import java.util.Collection;", "import java.util.HashMap;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "ArrayListValuedHashMap_trimToSizeTest", "description": "Unit tests for the trimToSize method of ArrayListValuedHashMap.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testTrimToSize", "primary_tested": ["ArrayListValuedHashMap.trimToSize()"], "associated_methods": ["ArrayListValuedHashMap.put(String,String)", "ArrayListValuedHashMap.getMap()"], "external_dependencies": {"modules": ["ArrayListValuedHashMap", "Collection", "ArrayList"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the trimToSize method of ArrayListValuedHashMap to ensure it trims the internal collections without throwing exceptions."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/CompositeSet_removeAllTest.java", "testclass_name": "CompositeSet_removeAllTest", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.Set;", "import org.apache.commons.collections4.CollectionUtils;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeSet_removeAllTest", "description": "Unit tests for the removeAll method of the CompositeSet class.", "class_members": {"variables": [{"name": "compositeSet", "type": "CompositeSet<String>"}, {"name": "set1", "type": "Set<String>"}, {"name": "set2", "type": "Set<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveAllWithNonEmptyCollection", "primary_tested": ["CompositeSet.removeAll(Collection<String>)"], "external_dependencies": {"modules": ["CompositeSet", "Set", "Arrays"], "class_members": [{"name": "compositeSet", "type": "variable"}, {"name": "set1", "type": "variable"}, {"name": "set2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeAll method with a non-empty collection."}, {"name": "testRemoveAllWithEmptyCollection", "primary_tested": ["CompositeSet.removeAll(Collection<String>)"], "external_dependencies": {"modules": ["CompositeSet", "Arrays"], "class_members": [{"name": "compositeSet", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeAll method with an empty collection."}, {"name": "testRemoveAllWithNullCollection", "primary_tested": ["CompositeSet.removeAll(Collection<String>)"], "external_dependencies": {"modules": ["CompositeSet"], "class_members": [{"name": "compositeSet", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeAll method with a null collection."}, {"name": "testRemoveAllWithNonExistentElements", "primary_tested": ["CompositeSet.removeAll(Collection<String>)"], "external_dependencies": {"modules": ["CompositeSet", "Arrays"], "class_members": [{"name": "compositeSet", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeAll method with a collection of non-existent elements."}, {"name": "testRemoveAllWithAllElements", "primary_tested": ["CompositeSet.removeAll(Collection<String>)"], "external_dependencies": {"modules": ["CompositeSet", "Arrays", "Set"], "class_members": [{"name": "compositeSet", "type": "variable"}, {"name": "set1", "type": "variable"}, {"name": "set2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeAll method with a collection containing all elements."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/multiset/UnmodifiableMultiSet_uniqueSetTest.java", "testclass_name": "UnmodifiableMultiSet_uniqueSetTest", "dependencies": ["package org.apache.commons.collections4.multiset;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Set;", "import org.apache.commons.collections4.MultiSet;", "import org.apache.commons.collections4.Unmodifiable;", "import org.junit.jupiter.api.Test;"], "name": "UnmodifiableMultiSet_uniqueSetTest", "description": "Test for the uniqueSet method of the UnmodifiableMultiSet class.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testUniqueSet", "primary_tested": ["UnmodifiableMultiSet.uniqueSet()"], "associated_methods": ["HashMultiSet.add(String)", "UnmodifiableMultiSet.unmodifiableMultiSet(MultiSet)", "HashMultiSet.uniqueSet()"], "external_dependencies": {"modules": ["org.apache.commons.collections4.MultiSet", "org.apache.commons.collections4.Unmodifiable", "java.util.Set"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the uniqueSet method of the UnmodifiableMultiSet class to ensure it returns an unmodifiable set of unique elements."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/TreeList_setTest.java", "testclass_name": "TreeList_setTest", "dependencies": ["package org.apache.commons.collections4.list;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "TreeList_setTest", "description": "Unit tests for the set method of the TreeList class.", "class_members": {"variables": [{"name": "treeList", "type": "TreeList<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testSetValidIndex", "primary_tested": ["TreeList.set(int,String)"], "associated_methods": ["TreeList.get(int)"], "external_dependencies": {"modules": ["TreeList"], "class_members": [{"name": "treeList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests setting a value at a valid index in the TreeList."}, {"name": "testSetInvalidIndex", "primary_tested": ["TreeList.set(int,String)"], "external_dependencies": {"modules": ["TreeList"], "class_members": [{"name": "treeList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests setting a value at an invalid index in the TreeList, expecting an IndexOutOfBoundsException."}, {"name": "testSetFirstIndex", "primary_tested": ["TreeList.set(int,String)"], "associated_methods": ["TreeList.get(int)"], "external_dependencies": {"modules": ["TreeList"], "class_members": [{"name": "treeList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests setting a value at the first index in the TreeList."}, {"name": "testSetLastIndex", "primary_tested": ["TreeList.set(int,String)"], "associated_methods": ["TreeList.get(int)"], "external_dependencies": {"modules": ["TreeList"], "class_members": [{"name": "treeList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests setting a value at the last index in the TreeList."}, {"name": "testSetEmptyList", "primary_tested": ["TreeList.set(int,String)"], "external_dependencies": {"modules": ["TreeList"]}, "category": "unit", "description": "Tests setting a value in an empty TreeList, expecting an IndexOutOfBoundsException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/CompositeSet_addCompositedTest.java", "testclass_name": "CompositeSet_addCompositedTest", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.HashSet;", "import java.util.Set;", "import java.util.List;", "import java.util.Collection;", "import org.apache.commons.collections4.set.CompositeSet.SetMutator;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeSet_addCompositedTest", "description": "Unit tests for the addComposited method of the CompositeSet class.", "class_members": {"variables": [{"name": "compositeSet", "type": "CompositeSet<String>"}, {"name": "set1", "type": "Set<String>"}, {"name": "set2", "type": "Set<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAddCompositedNoCollision", "primary_tested": ["CompositeSet.addComposited(Set<String>)"], "external_dependencies": {"modules": ["CompositeSet", "Set"], "class_members": [{"name": "compositeSet", "type": "variable"}, {"name": "set1", "type": "variable"}, {"name": "set2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addComposited method with no collision."}, {"name": "testAddCompositedWithCollisionNoMutator", "primary_tested": ["CompositeSet.addComposited(Set<String>)"], "external_dependencies": {"modules": ["CompositeSet", "Set"], "class_members": [{"name": "compositeSet", "type": "variable"}, {"name": "set1", "type": "variable"}, {"name": "set2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addComposited method with a collision and no mutator, expecting an UnsupportedOperationException."}, {"name": "testAddCompositedWithCollisionAndMutator", "primary_tested": ["CompositeSet.addComposited(Set<String>)"], "associated_methods": ["SetMutator.resolveCollision(CompositeSet<String>,Set<String>,Set<String>,Collection<String>)"], "external_dependencies": {"modules": ["CompositeSet", "Set", "SetMutator"], "class_members": [{"name": "compositeSet", "type": "variable"}, {"name": "set1", "type": "variable"}, {"name": "set2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addComposited method with a collision and a mutator resolving the collision."}, {"name": "testAddCompositedNullSet", "primary_tested": ["CompositeSet.addComposited(Set<String>)"], "external_dependencies": {"modules": ["CompositeSet", "Set"], "class_members": [{"name": "compositeSet", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addComposited method with a null set."}, {"name": "testAddCompositedIllegalEntryUnresolved", "primary_tested": ["CompositeSet.addComposited(Set<String>)"], "associated_methods": ["SetMutator.resolveCollision(CompositeSet<String>,Set<String>,Set<String>,Collection<String>)"], "external_dependencies": {"modules": ["CompositeSet", "Set", "SetMutator"], "class_members": [{"name": "compositeSet", "type": "variable"}, {"name": "set1", "type": "variable"}, {"name": "set2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addComposited method with a collision and a mutator that does not resolve the collision, expecting an IllegalArgumentException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/CompositeSet_isEmptyTest.java", "testclass_name": "CompositeSet_isEmptyTest", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.HashSet;", "import java.util.Set;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeSet_isEmptyTest", "description": "Unit tests for the isEmpty method of the CompositeSet class.", "class_members": {"variables": [{"name": "compositeSet", "type": "CompositeSet<String>"}, {"name": "set1", "type": "Set<String>"}, {"name": "set2", "type": "Set<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testIsEmpty_AllSetsEmpty", "primary_tested": ["CompositeSet.isEmpty()"], "external_dependencies": {"modules": ["CompositeSet"], "class_members": [{"name": "compositeSet", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isEmpty method when all sets in the CompositeSet are empty."}, {"name": "testIsEmpty_OneSetNotEmpty", "primary_tested": ["CompositeSet.isEmpty()"], "associated_methods": ["Set.add(String)"], "external_dependencies": {"modules": ["CompositeSet", "Set"], "class_members": [{"name": "compositeSet", "type": "variable"}, {"name": "set1", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isEmpty method when one set in the CompositeSet is not empty."}, {"name": "testIsEmpty_AllSetsNotEmpty", "primary_tested": ["CompositeSet.isEmpty()"], "associated_methods": ["Set.add(String)"], "external_dependencies": {"modules": ["CompositeSet", "Set"], "class_members": [{"name": "compositeSet", "type": "variable"}, {"name": "set1", "type": "variable"}, {"name": "set2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isEmpty method when all sets in the CompositeSet are not empty."}, {"name": "testIsEmpty_AfterClear", "primary_tested": ["CompositeSet.isEmpty()"], "associated_methods": ["Set.add(String)", "CompositeSet.clear()"], "external_dependencies": {"modules": ["CompositeSet", "Set"], "class_members": [{"name": "compositeSet", "type": "variable"}, {"name": "set1", "type": "variable"}, {"name": "set2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isEmpty method after clearing the CompositeSet."}, {"name": "testIsEmpty_AfterRemove", "primary_tested": ["CompositeSet.isEmpty()"], "associated_methods": ["Set.add(String)", "CompositeSet.remove(String)"], "external_dependencies": {"modules": ["CompositeSet", "Set"], "class_members": [{"name": "compositeSet", "type": "variable"}, {"name": "set1", "type": "variable"}, {"name": "set2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isEmpty method after removing elements from the CompositeSet."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/SetUniqueList_removeTest.java", "testclass_name": "SetUniqueList_removeTest", "dependencies": ["package org.apache.commons.collections4.list;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.ArrayList;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SetUniqueList_removeTest", "description": "Unit tests for the remove functionality of the SetUniqueList class.", "class_members": {"variables": [{"name": "setUniqueList", "type": "SetUniqueList<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveValidIndex", "primary_tested": ["SetUniqueList.remove(int)"], "associated_methods": ["SetUniqueList.size()", "SetUniqueList.get(int)"], "external_dependencies": {"modules": ["SetUniqueList", "ArrayList", "List"], "class_members": [{"name": "setUniqueList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of an element at a valid index from the SetUniqueList."}, {"name": "testRemoveInvalidIndex", "primary_tested": ["SetUniqueList.remove(int)"], "external_dependencies": {"modules": ["SetUniqueList", "ArrayList", "List"], "class_members": [{"name": "setUniqueList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of an element at an invalid index from the SetUniqueList, expecting an IndexOutOfBoundsException."}, {"name": "testRemoveFirstIndex", "primary_tested": ["SetUniqueList.remove(int)"], "associated_methods": ["SetUniqueList.size()", "SetUniqueList.get(int)"], "external_dependencies": {"modules": ["SetUniqueList", "ArrayList", "List"], "class_members": [{"name": "setUniqueList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of the first element from the SetUniqueList."}, {"name": "testRemoveLastIndex", "primary_tested": ["SetUniqueList.remove(int)"], "associated_methods": ["SetUniqueList.size()", "SetUniqueList.get(int)"], "external_dependencies": {"modules": ["SetUniqueList", "ArrayList", "List"], "class_members": [{"name": "setUniqueList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of the last element from the SetUniqueList."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/BitMaps_modTest.java", "testclass_name": "BitMaps_modTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import org.junit.jupiter.api.Test;"], "name": "BitMaps_modTest", "description": "Unit tests for the mod functionality in BitMaps class.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testModWithPositiveDividendAndDivisor", "primary_tested": ["BitMaps.mod(int,int)"], "external_dependencies": {"modules": ["BitMaps"]}, "category": "unit", "description": "Tests the mod functionality with positive dividend and divisor."}, {"name": "testModWithLargeDividend", "primary_tested": ["BitMaps.mod(long,int)"], "external_dependencies": {"modules": ["BitMaps"]}, "category": "unit", "description": "Tests the mod functionality with a large dividend."}, {"name": "testModWithNegativeDividend", "primary_tested": ["BitMaps.mod(int,int)"], "external_dependencies": {"modules": ["BitMaps"]}, "category": "unit", "description": "Tests the mod functionality with a negative dividend."}, {"name": "testModWithZeroDividend", "primary_tested": ["BitMaps.mod(int,int)"], "external_dependencies": {"modules": ["BitMaps"]}, "category": "unit", "description": "Tests the mod functionality with a zero dividend."}, {"name": "testModWithDivisorGreaterThanDividend", "primary_tested": ["BitMaps.mod(int,int)"], "external_dependencies": {"modules": ["BitMaps"]}, "category": "unit", "description": "Tests the mod functionality with a divisor greater than the dividend."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/SetUniqueList_setTest.java", "testclass_name": "SetUniqueList_setTest", "dependencies": ["package org.apache.commons.collections4.list;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SetUniqueList_setTest", "description": "Unit tests for the set method of SetUniqueList, which ensures that the list remains unique.", "class_members": {"variables": [{"name": "setUniqueList", "type": "SetUniqueList<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testSetUniqueElement", "primary_tested": ["SetUniqueList.set(int,String)"], "external_dependencies": {"modules": ["SetUniqueList"], "class_members": [{"name": "setUniqueList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests setting a unique element in the SetUniqueList."}, {"name": "testSetDuplicateElement", "primary_tested": ["SetUniqueList.set(int,String)"], "external_dependencies": {"modules": ["SetUniqueList"], "class_members": [{"name": "setUniqueList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests setting a duplicate element in the SetUniqueList."}, {"name": "testSetSameElement", "primary_tested": ["SetUniqueList.set(int,String)"], "external_dependencies": {"modules": ["SetUniqueList"], "class_members": [{"name": "setUniqueList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests setting the same element in the SetUniqueList."}, {"name": "testSetAtEndOfList", "primary_tested": ["SetUniqueList.set(int,String)"], "external_dependencies": {"modules": ["SetUniqueList"], "class_members": [{"name": "setUniqueList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests setting an element at the end of the SetUniqueList."}, {"name": "testSetAtBeginningOfList", "primary_tested": ["SetUniqueList.set(int,String)"], "external_dependencies": {"modules": ["SetUniqueList"], "class_members": [{"name": "setUniqueList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests setting an element at the beginning of the SetUniqueList."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/TreeList_addTest.java", "testclass_name": "TreeList_addTest", "dependencies": ["package org.apache.commons.collections4.list;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "TreeList_addTest", "description": "Unit tests for the add functionality of the TreeList class.", "class_members": {"variables": [{"name": "treeList", "type": "TreeList<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAddAtIndex", "primary_tested": ["TreeList.add(int,String)"], "associated_methods": ["TreeList.size()", "TreeList.get(int)"], "external_dependencies": {"modules": ["TreeList"], "class_members": [{"name": "treeList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the add functionality at specific indices in the TreeList."}, {"name": "testAddAtIndexOutOfBounds", "primary_tested": ["TreeList.add(int,String)"], "external_dependencies": {"modules": ["TreeList"], "class_members": [{"name": "treeList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior of the add method when the index is out of bounds."}, {"name": "testAddAtIndexWithEmptyList", "primary_tested": ["TreeList.add(int,String)"], "associated_methods": ["TreeList.size()", "TreeList.get(int)"], "external_dependencies": {"modules": ["TreeList"], "class_members": [{"name": "treeList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the add functionality at index 0 in an empty TreeList."}, {"name": "testAddAtIndexWithNull", "primary_tested": ["TreeList.add(int,String)"], "associated_methods": ["TreeList.size()", "TreeList.get(int)"], "external_dependencies": {"modules": ["TreeList"], "class_members": [{"name": "treeList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the add functionality with a null element at index 0."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/CompositeMap_getTest.java", "testclass_name": "CompositeMap_getTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import java.util.HashMap;", "import java.util.Map;", "import java.util.Collection;", "import org.apache.commons.collections4.map.CompositeMap;", "import org.apache.commons.collections4.map.CompositeMap.MapMutator;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeMap_getTest", "description": "Unit tests for the get method of the CompositeMap class.", "class_members": {"variables": [{"name": "compositeMap", "type": "CompositeMap<String, String>"}, {"name": "map1", "type": "Map<String, String>"}, {"name": "map2", "type": "Map<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetExistingKey", "primary_tested": ["CompositeMap.get(Object)"], "external_dependencies": {"modules": ["CompositeMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method for existing keys in the CompositeMap."}, {"name": "testGetNonExistingKey", "primary_tested": ["CompositeMap.get(Object)"], "external_dependencies": {"modules": ["CompositeMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method for a non-existing key in the CompositeMap."}, {"name": "testGetAfterRemove", "primary_tested": ["CompositeMap.get(Object)", "CompositeMap.remove(Object)"], "external_dependencies": {"modules": ["CompositeMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method after removing a key from the CompositeMap."}, {"name": "testGetAfterPut", "primary_tested": ["CompositeMap.get(Object)", "CompositeMap.put(K,V)"], "external_dependencies": {"modules": ["CompositeMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method after adding a new key-value pair to the CompositeMap."}, {"name": "testGetAfterPutAll", "primary_tested": ["CompositeMap.get(Object)", "CompositeMap.putAll(Map<? extends K, ? extends V>)"], "external_dependencies": {"modules": ["CompositeMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method after adding multiple key-value pairs to the CompositeMap."}, {"name": "testGetAfterClear", "primary_tested": ["CompositeMap.get(Object)", "CompositeMap.clear()"], "external_dependencies": {"modules": ["CompositeMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method after clearing all entries from the CompositeMap."}, {"name": "testGetAfterAddComposited", "primary_tested": ["CompositeMap.get(Object)", "CompositeMap.addComposited(Map<K, V>)"], "external_dependencies": {"modules": ["CompositeMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method after adding a new map to the CompositeMap."}, {"name": "testGetAfterRemoveComposited", "primary_tested": ["CompositeMap.get(Object)", "CompositeMap.removeComposited(Map<K, V>)"], "external_dependencies": {"modules": ["CompositeMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method after removing a map from the CompositeMap."}, {"name": "testContainsKey", "primary_tested": ["CompositeMap.containsKey(Object)"], "external_dependencies": {"modules": ["CompositeMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsKey method of the CompositeMap."}, {"name": "testRemove", "primary_tested": ["CompositeMap.remove(Object)"], "external_dependencies": {"modules": ["CompositeMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the remove method of the CompositeMap."}, {"name": "testPut", "primary_tested": ["CompositeMap.put(K,V)"], "external_dependencies": {"modules": ["CompositeMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the put method of the CompositeMap."}, {"name": "testPutAll", "primary_tested": ["CompositeMap.putAll(Map<? extends K, ? extends V>)"], "external_dependencies": {"modules": ["CompositeMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the putAll method of the CompositeMap."}, {"name": "testClear", "primary_tested": ["CompositeMap.clear()"], "external_dependencies": {"modules": ["CompositeMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clear method of the CompositeMap."}, {"name": "testEntrySet", "primary_tested": ["CompositeMap.entrySet()"], "external_dependencies": {"modules": ["CompositeMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the entrySet method of the CompositeMap."}, {"name": "testKeySet", "primary_tested": ["CompositeMap.keySet()"], "external_dependencies": {"modules": ["CompositeMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the keySet method of the CompositeMap."}, {"name": "testValues", "primary_tested": ["CompositeMap.values()"], "external_dependencies": {"modules": ["CompositeMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the values method of the CompositeMap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/TreeList_addAllTest.java", "testclass_name": "TreeList_addAllTest", "dependencies": ["package org.apache.commons.collections4.list;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "TreeList_addAllTest", "description": "Unit tests for the addAll method of the TreeList class.", "class_members": {"variables": [{"name": "treeList", "type": "TreeList<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAddAllEmptyCollection", "primary_tested": ["TreeList.addAll(Collection<? extends String>)"], "external_dependencies": {"modules": ["TreeList", "ArrayList"], "class_members": [{"name": "treeList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addAll method with an empty collection."}, {"name": "testAddAllNonEmptyCollection", "primary_tested": ["TreeList.addAll(Collection<? extends String>)"], "associated_methods": ["TreeList.size()", "TreeList.get(int)"], "external_dependencies": {"modules": ["TreeList", "Arrays"], "class_members": [{"name": "treeList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addAll method with a non-empty collection."}, {"name": "testAddAllToNonEmptyList", "primary_tested": ["TreeList.addAll(Collection<? extends String>)"], "associated_methods": ["TreeList.add(String)", "TreeList.size()", "TreeList.get(int)"], "external_dependencies": {"modules": ["TreeList", "Arrays"], "class_members": [{"name": "treeList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addAll method to a non-empty list."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/SetUniqueList_subListTest.java", "testclass_name": "SetUniqueList_subListTest", "dependencies": ["package org.apache.commons.collections4.list;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SetUniqueList_subListTest", "description": "Unit tests for the subList functionality of SetUniqueList.", "class_members": {"variables": [{"name": "setUniqueList", "type": "SetUniqueList<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testSubListValidRange", "primary_tested": ["SetUniqueList.subList(int,int)"], "external_dependencies": {"modules": ["SetUniqueList", "List"], "class_members": [{"name": "setUniqueList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the subList functionality with a valid range."}, {"name": "testSubListInvalidRange", "primary_tested": ["SetUniqueList.subList(int,int)"], "external_dependencies": {"modules": ["SetUniqueList", "List"], "class_members": [{"name": "setUniqueList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the subList functionality with an invalid range."}, {"name": "testSubListWithDuplicates", "primary_tested": ["SetUniqueList.subList(int,int)"], "external_dependencies": {"modules": ["SetUniqueList", "List"], "class_members": [{"name": "setUniqueList", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the subList functionality with a list containing duplicates."}, {"name": "testSubListUnmodifiable", "primary_tested": ["SetUniqueList.subList(int,int)"], "external_dependencies": {"modules": ["SetUniqueList", "List", "ArrayList"], "class_members": [{"name": "setUniqueList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the subList returned by SetUniqueList is unmodifiable."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/SetOperations_cardinalityTest.java", "testclass_name": "SetOperations_cardinalityTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SetOperations_cardinalityTest", "description": "Unit tests for the cardinality method in SetOperations class.", "class_members": {"variables": [{"name": "bitMapExtractor", "type": "BitMapExtractor"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testCardinalityWithNonZeroBitCount", "primary_tested": ["SetOperations.cardinality(BitMapExtractor)"], "external_dependencies": {"modules": ["BitMapExtractor", "SetOperations"], "class_members": [{"name": "bitMapExtractor", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the cardinality method with a non-zero bit count."}, {"name": "testCardinalityWithZeroBitCount", "primary_tested": ["SetOperations.cardinality(BitMapExtractor)"], "external_dependencies": {"modules": ["BitMapExtractor", "SetOperations"], "class_members": [{"name": "bitMapExtractor", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the cardinality method with a zero bit count."}, {"name": "testCardinalityWithMixedBitCounts", "primary_tested": ["SetOperations.cardinality(BitMapExtractor)"], "external_dependencies": {"modules": ["BitMapExtractor", "SetOperations"], "class_members": [{"name": "bitMapExtractor", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the cardinality method with mixed bit counts."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/CompositeSet_containsTest.java", "testclass_name": "CompositeSet_containsTest", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.HashSet;", "import java.util.Set;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeSet_containsTest", "description": "Unit tests for the contains method of the CompositeSet class.", "class_members": {"variables": [{"name": "compositeSet", "type": "CompositeSet<String>"}, {"name": "set1", "type": "Set<String>"}, {"name": "set2", "type": "Set<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testContains_ElementInFirstSet", "primary_tested": ["CompositeSet.contains(String)"], "external_dependencies": {"modules": ["CompositeSet", "Set"], "class_members": [{"name": "compositeSet", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the CompositeSet contains an element that is present in the first set."}, {"name": "testContains_ElementInSecondSet", "primary_tested": ["CompositeSet.contains(String)"], "external_dependencies": {"modules": ["CompositeSet", "Set"], "class_members": [{"name": "compositeSet", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the CompositeSet contains an element that is present in the second set."}, {"name": "testContains_ElementNotInAnySet", "primary_tested": ["CompositeSet.contains(String)"], "external_dependencies": {"modules": ["CompositeSet", "Set"], "class_members": [{"name": "compositeSet", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the CompositeSet does not contain an element that is not present in any set."}, {"name": "testContains_NullElement", "primary_tested": ["CompositeSet.contains(String)"], "external_dependencies": {"modules": ["CompositeSet", "Set"], "class_members": [{"name": "compositeSet", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the CompositeSet does not contain a null element."}, {"name": "testContains_EmptyCompositeSet", "primary_tested": ["CompositeSet.contains(String)"], "external_dependencies": {"modules": ["CompositeSet", "Set"], "class_members": [{"name": "compositeSet", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests if the CompositeSet does not contain an element when it is empty."}, {"name": "testContains_ElementInBothSets", "primary_tested": ["CompositeSet.contains(String)"], "associated_methods": ["Set.add(String)"], "external_dependencies": {"modules": ["CompositeSet", "Set"], "class_members": [{"name": "compositeSet", "type": "variable"}, {"name": "set2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the CompositeSet contains an element that is present in both sets."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/SetUniqueList_removeAllTest.java", "testclass_name": "SetUniqueList_removeAllTest", "dependencies": ["package org.apache.commons.collections4.list;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SetUniqueList_removeAllTest", "description": "Unit tests for the removeAll method of SetUniqueList.", "class_members": {"variables": [{"name": "uniqueList", "type": "SetUniqueList<Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveAll_AllElementsRemoved", "primary_tested": ["SetUniqueList.removeAll(Collection<Integer>)"], "external_dependencies": {"modules": ["SetUniqueList", "Collection", "Arrays"], "class_members": [{"name": "uniqueList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeAll method when all specified elements are removed from the list."}, {"name": "testRemoveAll_NoElementsRemoved", "primary_tested": ["SetUniqueList.removeAll(Collection<Integer>)"], "external_dependencies": {"modules": ["SetUniqueList", "Collection", "Arrays"], "class_members": [{"name": "uniqueList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeAll method when no elements are removed from the list."}, {"name": "testRemoveAll_SomeElementsRemoved", "primary_tested": ["SetUniqueList.removeAll(Collection<Integer>)"], "external_dependencies": {"modules": ["SetUniqueList", "Collection", "Arrays"], "class_members": [{"name": "uniqueList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeAll method when some specified elements are removed from the list."}, {"name": "testRemoveAll_EmptyCollection", "primary_tested": ["SetUniqueList.removeAll(Collection<Integer>)"], "external_dependencies": {"modules": ["SetUniqueList", "Collection", "ArrayList"], "class_members": [{"name": "uniqueList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeAll method when an empty collection is passed."}, {"name": "testRemoveAll_NullCollection", "primary_tested": ["SetUniqueList.removeAll(Collection<Integer>)"], "external_dependencies": {"modules": ["SetUniqueList"], "class_members": [{"name": "uniqueList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeAll method when a null collection is passed, expecting a NullPointerException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/SetUniqueList_setUniqueListTest.java", "testclass_name": "SetUniqueList_setUniqueListTest", "dependencies": ["package org.apache.commons.collections4.list;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SetUniqueList_setUniqueListTest", "description": "Unit tests for the SetUniqueList class, specifically focusing on the setUniqueList method.", "class_members": {"variables": [{"name": "list", "type": "List<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testSetUniqueListWithNonEmptyList", "primary_tested": ["SetUniqueList.setUniqueList(List<String>)"], "associated_methods": ["SetUniqueList.size()", "SetUniqueList.contains(String)"], "external_dependencies": {"modules": ["SetUniqueList", "List"], "class_members": [{"name": "list", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the setUniqueList method with a non-empty list, ensuring that the resulting SetUniqueList contains the expected elements."}, {"name": "testSetUniqueListWithEmptyList", "primary_tested": ["SetUniqueList.setUniqueList(List<String>)"], "associated_methods": ["SetUniqueList.size()"], "external_dependencies": {"modules": ["SetUniqueList", "List"], "class_members": [{"name": "list", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the setUniqueList method with an empty list, ensuring that the resulting SetUniqueList is also empty."}, {"name": "testSetUniqueListWithDuplicates", "primary_tested": ["SetUniqueList.setUniqueList(List<String>)"], "associated_methods": ["SetUniqueList.size()", "SetUniqueList.contains(String)"], "external_dependencies": {"modules": ["SetUniqueList", "List"], "class_members": [{"name": "list", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the setUniqueList method with a list containing duplicates, ensuring that the resulting SetUniqueList removes duplicates and contains the expected elements."}, {"name": "testSetUniqueListWithNullList", "primary_tested": ["SetUniqueList.setUniqueList(List<String>)"], "external_dependencies": {"modules": ["SetUniqueList"]}, "category": "unit", "fixtures_used": [], "description": "Tests the setUniqueList method with a null list, ensuring that a NullPointerException is thrown."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/Shape_fromNMTest.java", "testclass_name": "Shape_fromNMTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Shape_fromNMTest", "description": "Unit tests for the Shape.fromNM method in the Bloom filter implementation.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testFromNM_ValidParameters", "primary_tested": ["Shape.fromNM(int,int)"], "external_dependencies": {"modules": ["Shape"]}, "category": "unit", "description": "Tests the creation of a Shape with valid parameters and verifies the number of hash functions and bits."}, {"name": "testFromNM_InvalidNumberOfItems", "primary_tested": ["Shape.fromNM(int,int)"], "external_dependencies": {"modules": ["Shape"]}, "category": "unit", "description": "Tests the handling of an invalid number of items by the Shape.fromNM method."}, {"name": "testFromNM_InvalidNumberOfBits", "primary_tested": ["Shape.fromNM(int,int)"], "external_dependencies": {"modules": ["Shape"]}, "category": "unit", "description": "Tests the handling of an invalid number of bits by the Shape.fromNM method."}, {"name": "testFromNM_InvalidProbability", "primary_tested": ["Shape.fromNM(int,int)"], "external_dependencies": {"modules": ["Shape"]}, "category": "unit", "description": "Tests the handling of an invalid probability by the Shape.fromNM method."}, {"name": "testFromNM_MaxValues", "primary_tested": ["Shape.fromNM(int,int)"], "external_dependencies": {"modules": ["Shape"]}, "category": "unit", "description": "Tests the creation of a Shape with maximum integer values for items and bits."}, {"name": "testFromNM_MinValues", "primary_tested": ["Shape.fromNM(int,int)"], "external_dependencies": {"modules": ["Shape"]}, "category": "unit", "description": "Tests the creation of a Shape with minimum integer values for items and bits."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/TreeList_getTest.java", "testclass_name": "TreeList_getTest", "dependencies": ["package org.apache.commons.collections4.list;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "TreeList_getTest", "description": "Unit tests for the get method of the TreeList class.", "class_members": {"variables": [{"name": "treeList", "type": "TreeList<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetValidIndex", "primary_tested": ["TreeList.get(int)"], "external_dependencies": {"modules": ["TreeList"], "class_members": [{"name": "treeList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method with valid indices."}, {"name": "testGetInvalidIndex", "primary_tested": ["TreeList.get(int)"], "external_dependencies": {"modules": ["TreeList"], "class_members": [{"name": "treeList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method with invalid indices, expecting an IndexOutOfBoundsException."}, {"name": "testGetAfterRemove", "primary_tested": ["TreeList.get(int)"], "associated_methods": ["TreeList.remove(int)"], "external_dependencies": {"modules": ["TreeList"], "class_members": [{"name": "treeList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method after removing an element from the list."}, {"name": "testGetAfterAdd", "primary_tested": ["TreeList.get(int)"], "associated_methods": ["TreeList.add(int,String)"], "external_dependencies": {"modules": ["TreeList"], "class_members": [{"name": "treeList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method after adding an element to the list."}, {"name": "testGetAfterSet", "primary_tested": ["TreeList.get(int)"], "associated_methods": ["TreeList.set(int,String)"], "external_dependencies": {"modules": ["TreeList"], "class_members": [{"name": "treeList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method after setting an element in the list."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/multimap/TransformedMultiValuedMap_transformedMapTest.java", "testclass_name": "TransformedMultiValuedMap_transformedMapTest", "dependencies": ["package org.apache.commons.collections4.multimap;", "import org.apache.commons.collections4.MultiValuedMap;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;"], "name": "TransformedMultiValuedMap_transformedMapTest", "description": "Unit tests for the TransformedMultiValuedMap class, specifically focusing on the transformedMap method.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testTransformedMapWithNonEmptyMap", "primary_tested": ["TransformedMultiValuedMap.transformedMap(MultiValuedMap,Transformer,Transformer)"], "associated_methods": ["MultiValuedMap.isEmpty()", "MultiValuedMap.clear()", "MultiValuedMap.putAll(MultiValuedMap)"], "external_dependencies": {"modules": ["MultiValuedMap", "Transformer", "TransformedMultiValuedMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformedMap method with a non-empty original map, verifying that the map is not cleared and no elements are added."}, {"name": "testTransformedMapWithEmptyMap", "primary_tested": ["TransformedMultiValuedMap.transformedMap(MultiValuedMap,Transformer,Transformer)"], "associated_methods": ["MultiValuedMap.isEmpty()", "MultiValuedMap.clear()", "MultiValuedMap.putAll(MultiValuedMap)"], "external_dependencies": {"modules": ["MultiValuedMap", "Transformer", "TransformedMultiValuedMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformedMap method with an empty original map, verifying that the map is not cleared and no elements are added."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/SetUniqueList_addAllTest.java", "testclass_name": "SetUniqueList_addAllTest", "dependencies": ["package org.apache.commons.collections4.list;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SetUniqueList_addAllTest", "description": "Unit tests for the addAll method of SetUniqueList with index.", "class_members": {"variables": [{"name": "uniqueList", "type": "SetUniqueList<Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAddAllWithIndex", "primary_tested": ["SetUniqueList.addAll(int,Collection)"], "external_dependencies": {"modules": ["SetUniqueList", "Arrays", "Collection"], "class_members": [{"name": "uniqueList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests adding a collection to the list at a specified index."}, {"name": "testAddAllWithIndexDuplicates", "primary_tested": ["SetUniqueList.addAll(int,Collection)"], "external_dependencies": {"modules": ["SetUniqueList", "Arrays", "Collection"], "class_members": [{"name": "uniqueList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests adding a collection with duplicates to the list at a specified index."}, {"name": "testAddAllWithIndexEmptyCollection", "primary_tested": ["SetUniqueList.addAll(int,Collection)"], "external_dependencies": {"modules": ["SetUniqueList", "Collection"], "class_members": [{"name": "uniqueList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests adding an empty collection to the list at a specified index."}, {"name": "testAddAllWithIndexMixedDuplicates", "primary_tested": ["SetUniqueList.addAll(int,Collection)"], "associated_methods": ["SetUniqueList.addAll(Collection)"], "external_dependencies": {"modules": ["SetUniqueList", "Arrays", "Collection"], "class_members": [{"name": "uniqueList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests adding a collection with mixed duplicates to the list at a specified index."}, {"name": "testAddAllWithIndexAtEnd", "primary_tested": ["SetUniqueList.addAll(int,Collection)"], "associated_methods": ["SetUniqueList.addAll(Collection)", "SetUniqueList.size()"], "external_dependencies": {"modules": ["SetUniqueList", "Arrays", "Collection"], "class_members": [{"name": "uniqueList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests adding a collection to the end of the list."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/TreeList_listIteratorTest.java", "testclass_name": "TreeList_listIteratorTest", "dependencies": ["package org.apache.commons.collections4.list;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ListIterator;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "TreeList_listIteratorTest", "description": "Unit tests for the list iterator functionality of the TreeList class.", "class_members": {"variables": [{"name": "treeList", "type": "TreeList<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testListIterator", "primary_tested": ["TreeList.listIterator()"], "external_dependencies": {"modules": ["TreeList", "ListIterator"], "class_members": [{"name": "treeList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the basic functionality of the list iterator, including hasNext and next methods."}, {"name": "testListIteratorWithIndex", "primary_tested": ["TreeList.listIterator(int)"], "external_dependencies": {"modules": ["TreeList", "ListIterator"], "class_members": [{"name": "treeList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the list iterator starting from a specific index."}, {"name": "testListIteratorPrevious", "primary_tested": ["TreeList.listIterator(int)"], "external_dependencies": {"modules": ["TreeList", "ListIterator"], "class_members": [{"name": "treeList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the previous functionality of the list iterator."}, {"name": "testListIteratorAdd", "primary_tested": ["TreeList.listIterator()"], "associated_methods": ["ListIterator.add(String)"], "external_dependencies": {"modules": ["TreeList", "ListIterator"], "class_members": [{"name": "treeList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the add functionality of the list iterator."}, {"name": "testListIteratorRemove", "primary_tested": ["TreeList.listIterator()"], "associated_methods": ["ListIterator.remove()"], "external_dependencies": {"modules": ["TreeList", "ListIterator"], "class_members": [{"name": "treeList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the remove functionality of the list iterator."}, {"name": "testListIteratorSet", "primary_tested": ["TreeList.listIterator()"], "associated_methods": ["ListIterator.set(String)"], "external_dependencies": {"modules": ["TreeList", "ListIterator"], "class_members": [{"name": "treeList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the set functionality of the list iterator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/FixedSizeList_subListTest.java", "testclass_name": "FixedSizeList_subListTest", "dependencies": ["package org.apache.commons.collections4.list;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "FixedSizeList_subListTest", "description": "Unit tests for the subList functionality of the FixedSizeList class.", "class_members": {"variables": [{"name": "fixedSizeList", "type": "FixedSizeList<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testSubListValidRange", "primary_tested": ["FixedSizeList.subList(int,int)"], "associated_methods": ["List.size()", "List.get(int)"], "external_dependencies": {"modules": ["FixedSizeList", "List"], "class_members": [{"name": "fixedSizeList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the subList functionality with a valid range."}, {"name": "testSubListInvalidRange", "primary_tested": ["FixedSizeList.subList(int,int)"], "external_dependencies": {"modules": ["FixedSizeList"], "class_members": [{"name": "fixedSizeList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the subList functionality with an invalid range, expecting an IndexOutOfBoundsException."}, {"name": "testSubListEmptyRange", "primary_tested": ["FixedSizeList.subList(int,int)"], "associated_methods": ["List.size()"], "external_dependencies": {"modules": ["FixedSizeList", "List"], "class_members": [{"name": "fixedSizeList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the subList functionality with an empty range."}, {"name": "testSubListFullRange", "primary_tested": ["FixedSizeList.subList(int,int)"], "associated_methods": ["List.size()", "List.get(int)"], "external_dependencies": {"modules": ["FixedSizeList", "List"], "class_members": [{"name": "fixedSizeList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the subList functionality with a full range."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/TreeList_indexOfTest.java", "testclass_name": "TreeList_indexOfTest", "dependencies": ["package org.apache.commons.collections4.list;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "TreeList_indexOfTest", "description": "Unit tests for the indexOf method of the TreeList class.", "class_members": {"variables": [{"name": "treeList", "type": "TreeList<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testIndexOfWithEmptyList", "primary_tested": ["TreeList.indexOf(String)"], "external_dependencies": {"modules": ["TreeList"], "class_members": [{"name": "treeList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the indexOf method with an empty list, expecting -1."}, {"name": "testIndexOfWithElementPresent", "primary_tested": ["TreeList.indexOf(String)"], "associated_methods": ["TreeList.add(String)"], "external_dependencies": {"modules": ["TreeList"], "class_members": [{"name": "treeList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the indexOf method with an element present in the list, expecting the correct index."}, {"name": "testIndexOfWithElementNotPresent", "primary_tested": ["TreeList.indexOf(String)"], "associated_methods": ["TreeList.add(String)"], "external_dependencies": {"modules": ["TreeList"], "class_members": [{"name": "treeList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the indexOf method with an element not present in the list, expecting -1."}, {"name": "testIndexOfWithNullElement", "primary_tested": ["TreeList.indexOf(String)"], "associated_methods": ["TreeList.add(String)", "TreeList.get(int)"], "external_dependencies": {"modules": ["TreeList"], "class_members": [{"name": "treeList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the indexOf method with a null element in the list, expecting the correct index."}, {"name": "testIndexOfWithMultipleNullElements", "primary_tested": ["TreeList.indexOf(String)"], "associated_methods": ["TreeList.add(String)"], "external_dependencies": {"modules": ["TreeList"], "class_members": [{"name": "treeList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the indexOf method with multiple null elements in the list, expecting the correct index."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/keyvalue/DefaultKeyValue_setValueTest.java", "testclass_name": "DefaultKeyValue_setValueTest", "dependencies": ["package org.apache.commons.collections4.keyvalue;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "DefaultKeyValue_setValueTest", "description": "Unit tests for the setValue method of DefaultKeyValue.", "class_members": {"variables": [{"name": "defaultKeyValue", "type": "DefaultKeyValue<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testSetValueSuccess", "primary_tested": ["DefaultKeyValue.setValue(String)"], "associated_methods": ["DefaultKeyValue.getValue()"], "external_dependencies": {"modules": ["DefaultKeyValue"], "class_members": [{"name": "defaultKeyValue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful setting of a new value in DefaultKeyValue and verifies the old value."}, {"name": "testSetValueSelfReference", "primary_tested": ["DefaultKeyValue.setValue(Object)"], "external_dependencies": {"modules": ["DefaultKeyValue"], "class_members": [{"name": "defaultKeyValue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that setting the value to the DefaultKeyValue instance itself throws an IllegalArgumentException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/SetUniqueList_retainAllTest.java", "testclass_name": "SetUniqueList_retainAllTest", "dependencies": ["package org.apache.commons.collections4.list;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.List;", "import java.util.Set;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SetUniqueList_retainAllTest", "description": "Unit tests for the retainAll method of SetUniqueList.", "class_members": {"variables": [{"name": "setUniqueList", "type": "SetUniqueList<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRetainAllWithMatchingElements", "primary_tested": ["SetUniqueList.retainAll(Collection)"], "external_dependencies": {"modules": ["SetUniqueList", "HashSet", "Arrays"], "class_members": [{"name": "setUniqueList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retainAll method with a collection containing matching elements."}, {"name": "testRetainAllWithNoMatchingElements", "primary_tested": ["SetUniqueList.retainAll(Collection)"], "external_dependencies": {"modules": ["SetUniqueList", "HashSet", "Arrays"], "class_members": [{"name": "setUniqueList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retainAll method with a collection containing no matching elements."}, {"name": "testRetainAllWithAllElementsMatching", "primary_tested": ["SetUniqueList.retainAll(Collection)"], "external_dependencies": {"modules": ["SetUniqueList", "HashSet", "Arrays"], "class_members": [{"name": "setUniqueList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retainAll method with a collection containing all matching elements."}, {"name": "testRetainAllWithEmptyCollection", "primary_tested": ["SetUniqueList.retainAll(Collection)"], "external_dependencies": {"modules": ["SetUniqueList", "HashSet"], "class_members": [{"name": "setUniqueList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retainAll method with an empty collection."}, {"name": "testRetainAllWithNullCollection", "primary_tested": ["SetUniqueList.retainAll(Collection)"], "external_dependencies": {"modules": ["SetUniqueList"], "class_members": [{"name": "setUniqueList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retainAll method with a null collection, expecting a NullPointerException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/TreeList_removeTest.java", "testclass_name": "TreeList_removeTest", "dependencies": ["package org.apache.commons.collections4.list;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "TreeList_removeTest", "description": "Unit tests for the remove functionality of the TreeList class.", "class_members": {"variables": [{"name": "treeList", "type": "TreeList<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveMiddleElement", "primary_tested": ["TreeList.remove(int)"], "associated_methods": ["TreeList.size()", "TreeList.get(int)"], "external_dependencies": {"modules": ["TreeList"], "class_members": [{"name": "treeList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of the middle element from the TreeList."}, {"name": "testRemoveFirstElement", "primary_tested": ["TreeList.remove(int)"], "associated_methods": ["TreeList.size()", "TreeList.get(int)"], "external_dependencies": {"modules": ["TreeList"], "class_members": [{"name": "treeList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of the first element from the TreeList."}, {"name": "testRemoveLastElement", "primary_tested": ["TreeList.remove(int)"], "associated_methods": ["TreeList.size()", "TreeList.get(int)"], "external_dependencies": {"modules": ["TreeList"], "class_members": [{"name": "treeList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of the last element from the TreeList."}, {"name": "testRemoveOutOfBounds", "primary_tested": ["TreeList.remove(int)"], "external_dependencies": {"modules": ["TreeList"], "class_members": [{"name": "treeList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of elements with indices out of bounds from the TreeList."}, {"name": "testRemoveFromEmptyList", "primary_tested": ["TreeList.remove(int)"], "external_dependencies": {"modules": ["TreeList"]}, "category": "unit", "description": "Tests the removal of an element from an empty TreeList."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/SetUniqueList_addTest.java", "testclass_name": "SetUniqueList_addTest", "dependencies": ["package org.apache.commons.collections4.list;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SetUniqueList_addTest", "description": "Unit tests for the add functionality of SetUniqueList.", "class_members": {"variables": [{"name": "uniqueList", "type": "SetUniqueList<Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAddUniqueElement", "primary_tested": ["SetUniqueList.add(Integer)"], "external_dependencies": {"modules": ["SetUniqueList", "ArrayList", "List"], "class_members": [{"name": "uniqueList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests adding a unique element to the SetUniqueList."}, {"name": "testAddDuplicateElement", "primary_tested": ["SetUniqueList.add(Integer)"], "external_dependencies": {"modules": ["SetUniqueList", "ArrayList", "List"], "class_members": [{"name": "uniqueList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests adding a duplicate element to the SetUniqueList."}, {"name": "testAddNullElement", "primary_tested": ["SetUniqueList.add(Integer)"], "external_dependencies": {"modules": ["SetUniqueList", "ArrayList", "List"], "class_members": [{"name": "uniqueList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests adding a null element to the SetUniqueList."}, {"name": "testAddMultipleElements", "primary_tested": ["SetUniqueList.add(Integer)"], "external_dependencies": {"modules": ["SetUniqueList", "ArrayList", "List"], "class_members": [{"name": "uniqueList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests adding multiple unique elements to the SetUniqueList."}, {"name": "testAddMixedElements", "primary_tested": ["SetUniqueList.add(Integer)"], "external_dependencies": {"modules": ["SetUniqueList", "ArrayList", "List"], "class_members": [{"name": "uniqueList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests adding a mix of unique and duplicate elements (including null) to the SetUniqueList."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/Shape_estimateNTest.java", "testclass_name": "Shape_estimateNTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Shape_estimateNTest", "description": "Unit tests for the estimateN method of the Shape class in Apache Commons Collections4 Bloom Filter.", "class_members": {"variables": [{"name": "shape", "type": "Shape"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEstimateN_ZeroCardinality", "primary_tested": ["Shape.estimateN(int)"], "external_dependencies": {"modules": ["Shape"], "class_members": [{"name": "shape", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the estimateN method with zero cardinality."}, {"name": "testEstimateN_HalfCardinality", "primary_tested": ["Shape.estimateN(int)"], "external_dependencies": {"modules": ["Shape"], "class_members": [{"name": "shape", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the estimateN method with half of the maximum cardinality."}, {"name": "testEstimateN_FullCardinality", "primary_tested": ["Shape.estimateN(int)"], "external_dependencies": {"modules": ["Shape"], "class_members": [{"name": "shape", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the estimateN method with full cardinality."}, {"name": "testEstimateN_ExceedsCardinality", "primary_tested": ["Shape.estimateN(int)"], "external_dependencies": {"modules": ["Shape"], "class_members": [{"name": "shape", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the estimateN method with cardinality exceeding the maximum."}, {"name": "testEstimateN_DifferentShape", "primary_tested": ["Shape.estimateN(int)"], "external_dependencies": {"modules": ["Shape"], "class_members": [{"name": "shape", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the estimateN method with a different shape configuration."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/SimpleBloomFilter_cardinalityTest.java", "testclass_name": "SimpleBloomFilter_cardinalityTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SimpleBloomFilter_cardinalityTest", "description": "Unit tests for the cardinality functionality of the SimpleBloomFilter class.", "class_members": {"variables": [{"name": "filter", "type": "SimpleBloomFilter"}, {"name": "testShape", "type": "Shape"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testCardinalityInitialState", "primary_tested": ["SimpleBloomFilter.cardinality()"], "external_dependencies": {"modules": ["SimpleBloomFilter"], "class_members": [{"name": "filter", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the initial state of the cardinality of the SimpleBloomFilter."}, {"name": "testCardinalityAfterMerge", "primary_tested": ["SimpleBloomFilter.cardinality()"], "associated_methods": ["SimpleBloomFilter.merge(BitMapExtractor)"], "external_dependencies": {"modules": ["SimpleBloomFilter", "BitMapExtractor"], "class_members": [{"name": "filter", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the cardinality of the SimpleBloomFilter after merging a BitMapExtractor."}, {"name": "testCardinalityAfterMultipleMerges", "primary_tested": ["SimpleBloomFilter.cardinality()"], "associated_methods": ["SimpleBloomFilter.merge(BitMapExtractor)"], "external_dependencies": {"modules": ["SimpleBloomFilter", "BitMapExtractor"], "class_members": [{"name": "filter", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the cardinality of the SimpleBloomFilter after multiple merges of BitMapExtractors."}, {"name": "testCardinalityAfterClear", "primary_tested": ["SimpleBloomFilter.cardinality()"], "associated_methods": ["SimpleBloomFilter.merge(BitMapExtractor)", "SimpleBloomFilter.clear()"], "external_dependencies": {"modules": ["SimpleBloomFilter", "BitMapExtractor"], "class_members": [{"name": "filter", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the cardinality of the SimpleBloomFilter after merging a BitMapExtractor and then clearing the filter."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/Shape_getProbabilityTest.java", "testclass_name": "Shape_getProbabilityTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Shape_getProbabilityTest", "description": "Unit tests for the getProbability method of the Shape class in the Apache Commons Collections4 library.", "class_members": {"variables": [{"name": "shape", "type": "Shape"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetProbabilityWithNegativeNumberOfItems", "primary_tested": ["Shape.getProbability(int)"], "external_dependencies": {"modules": ["Shape"], "class_members": [{"name": "shape", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that an IllegalArgumentException is thrown when the number of items is negative."}, {"name": "testGetProbabilityWithZeroNumberOfItems", "primary_tested": ["Shape.getProbability(int)"], "external_dependencies": {"modules": ["Shape"], "class_members": [{"name": "shape", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the probability is 0.0 when the number of items is zero."}, {"name": "testGetProbabilityWithValidNumberOfItems", "primary_tested": ["Shape.getProbability(int)"], "external_dependencies": {"modules": ["Shape"], "class_members": [{"name": "shape", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the probability is between 0.0 and 1.0 for a valid number of items."}, {"name": "testGetProbabilityWithMaxNumberOfItems", "primary_tested": ["Shape.getProbability(int)"], "external_dependencies": {"modules": ["Shape"], "class_members": [{"name": "shape", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the probability is between 0.0 and 1.0 for the maximum number of items."}, {"name": "testGetProbabilityWithLargeNumberOfItems", "primary_tested": ["Shape.getProbability(int)"], "external_dependencies": {"modules": ["Shape"], "class_members": [{"name": "shape", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the probability is between 0.0 and 1.0 for a large number of items."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/SimpleBloomFilter_mergeTest.java", "testclass_name": "SimpleBloomFilter_mergeTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SimpleBloomFilter_mergeTest", "description": "Unit tests for the merge functionality of the SimpleBloomFilter class.", "class_members": {"variables": [{"name": "filter", "type": "SimpleBloomFilter"}, {"name": "shape", "type": "Shape"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testMergeValidBitMapExtractor", "primary_tested": ["SimpleBloomFilter.merge(BitMapExtractor)"], "external_dependencies": {"modules": ["SimpleBloomFilter", "BitMapExtractor"], "class_members": [{"name": "filter", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the merge functionality with a valid BitMapExtractor that sets all bits in the first long."}, {"name": "testMergeInvalidBitMapExtractor", "primary_tested": ["SimpleBloomFilter.merge(BitMapExtractor)"], "external_dependencies": {"modules": ["SimpleBloomFilter", "BitMapExtractor"], "class_members": [{"name": "filter", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the merge functionality with an invalid BitMapExtractor that sets bits exceeding the limit, expecting an IllegalArgumentException."}, {"name": "testMergeBitMapExtractorWithExcessBits", "primary_tested": ["SimpleBloomFilter.merge(BitMapExtractor)"], "external_dependencies": {"modules": ["SimpleBloomFilter", "BitMapExtractor"], "class_members": [{"name": "filter", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the merge functionality with a BitMapExtractor that sets a bit higher than the limit for the shape, expecting an IllegalArgumentException."}, {"name": "testMergeBitMapExtractorWithIndexOutOfBounds", "primary_tested": ["SimpleBloomFilter.merge(BitMapExtractor)"], "external_dependencies": {"modules": ["SimpleBloomFilter", "BitMapExtractor"], "class_members": [{"name": "filter", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the merge functionality with a BitMapExtractor that sets bits exceeding the limit and throws an IndexOutOfBoundsException, expecting an IllegalArgumentException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/SimpleBloomFilter_processBitMapsTest.java", "testclass_name": "SimpleBloomFilter_processBitMapsTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SimpleBloomFilter_processBitMapsTest", "description": "Unit tests for the processBitMaps method in the SimpleBloomFilter class.", "class_members": {"variables": [{"name": "filter", "type": "SimpleBloomFilter"}], "methods": [{"name": "getTestShape", "signature": "Shape getTestShape()"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testProcessBitMapsAllTrue", "primary_tested": ["SimpleBloomFilter.processBitMaps(LongPredicate)"], "associated_methods": ["SimpleBloomFilter.merge(BitMapExtractor)"], "external_dependencies": {"modules": ["SimpleBloomFilter", "BitMapExtractor", "LongPredicate"], "class_members": [{"name": "filter", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the processBitMaps method with a predicate that should return true for all bits."}, {"name": "testProcessBitMapsOneFalse", "primary_tested": ["SimpleBloomFilter.processBitMaps(LongPredicate)"], "associated_methods": ["SimpleBloomFilter.merge(BitMapExtractor)"], "external_dependencies": {"modules": ["SimpleBloomFilter", "BitMapExtractor", "LongPredicate"], "class_members": [{"name": "filter", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the processBitMaps method with a predicate that should return false for one bit."}, {"name": "testProcessBitMapsEmptyFilter", "primary_tested": ["SimpleBloomFilter.processBitMaps(LongPredicate)"], "external_dependencies": {"modules": ["SimpleBloomFilter", "LongPredicate"], "class_members": [{"name": "filter", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the processBitMaps method with an empty filter."}, {"name": "testProcessBitMapsNullConsumer", "primary_tested": ["SimpleBloomFilter.processBitMaps(LongPredicate)"], "external_dependencies": {"modules": ["SimpleBloomFilter", "LongPredicate"], "class_members": [{"name": "filter", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the processBitMaps method with a null consumer, expecting a NullPointerException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/keyvalue/DefaultKeyValue_hashCodeTest.java", "testclass_name": "DefaultKeyValue_hashCodeTest", "dependencies": ["package org.apache.commons.collections4.keyvalue;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "DefaultKeyValue_hashCodeTest", "description": "Unit tests for the hashCode method of DefaultKeyValue class with different key and value combinations.", "class_members": {"variables": [{"name": "defaultKeyValue", "type": "DefaultKeyValue<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testHashCodeWithNonNullKeyAndValue", "primary_tested": ["DefaultKeyValue.hashCode()"], "external_dependencies": {"modules": ["DefaultKeyValue"], "class_members": [{"name": "defaultKeyValue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hashCode method with non-null key and value."}, {"name": "testHashCodeWithNullKeyAndNonNullValue", "primary_tested": ["DefaultKeyValue.hashCode()"], "external_dependencies": {"modules": ["DefaultKeyValue"], "class_members": [{"name": "defaultKeyValue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hashCode method with null key and non-null value."}, {"name": "testHashCodeWithNonNullKeyAndNullValue", "primary_tested": ["DefaultKeyValue.hashCode()"], "external_dependencies": {"modules": ["DefaultKeyValue"], "class_members": [{"name": "defaultKeyValue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hashCode method with non-null key and null value."}, {"name": "testHashCodeWithNullKeyAndNullValue", "primary_tested": ["DefaultKeyValue.hashCode()"], "external_dependencies": {"modules": ["DefaultKeyValue"], "class_members": [{"name": "defaultKeyValue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hashCode method with null key and null value."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/LayerManager_getTargetTest.java", "testclass_name": "LayerManager_getTargetTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import java.util.function.Predicate;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "LayerManager_getTargetTest", "description": "Tests for the getTarget method of the LayerManager class.", "class_members": {"variables": [{"name": "layerManager", "type": "LayerManager<BloomFilter>"}, {"name": "shape", "type": "Shape"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetTargetWhenExtendCheckIsFalse", "primary_tested": ["LayerManager.getTarget()"], "associated_methods": ["LayerManager.last()"], "external_dependencies": {"modules": ["LayerManager", "SimpleBloomFilter", "Shape", "Predicate"], "class_members": [{"name": "layerManager", "type": "variable"}, {"name": "shape", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getTarget method when the extendCheck predicate returns false."}, {"name": "testGetTargetWhenExtendCheckIsTrue", "primary_tested": ["LayerManager.getTarget()"], "associated_methods": ["LayerManager.last()"], "external_dependencies": {"modules": ["LayerManager", "SimpleBloomFilter", "Shape", "Predicate"], "class_members": [{"name": "layerManager", "type": "variable"}, {"name": "shape", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getTarget method when the extendCheck predicate returns true."}, {"name": "testGetTargetAfterNext", "primary_tested": ["LayerManager.getTarget()"], "associated_methods": ["LayerManager.last()", "LayerManager.next()"], "external_dependencies": {"modules": ["LayerManager", "SimpleBloomFilter", "Shape", "Predicate"], "class_members": [{"name": "layerManager", "type": "variable"}, {"name": "shape", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getTarget method after calling the next method."}, {"name": "testGetTargetWithEmptyFilters", "primary_tested": ["LayerManager.getTarget()"], "associated_methods": ["LayerManager.last()", "LayerManager.clear()"], "external_dependencies": {"modules": ["LayerManager", "SimpleBloomFilter", "Shape"], "class_members": [{"name": "layerManager", "type": "variable"}, {"name": "shape", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getTarget method when the LayerManager has empty filters."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/keyvalue/TiedMapEntry_hashCodeTest.java", "testclass_name": "TiedMapEntry_hashCodeTest", "dependencies": ["package org.apache.commons.collections4.keyvalue;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "TiedMapEntry_hashCodeTest", "description": "Unit tests for the hashCode method of TiedMapEntry class.", "class_members": {"variables": [{"name": "map", "type": "Map<String, String>"}, {"name": "entry", "type": "TiedMapEntry<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testHashCodeWithNonNullKeyAndValue", "primary_tested": ["TiedMapEntry.hashCode()"], "external_dependencies": {"modules": ["TiedMapEntry", "Map"], "class_members": [{"name": "entry", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hashCode method with non-null key and value."}, {"name": "testHashCodeWithNullKey", "primary_tested": ["TiedMapEntry.hashCode()"], "external_dependencies": {"modules": ["TiedMapEntry", "Map"], "class_members": [{"name": "entry", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the hashCode method with a null key."}, {"name": "testHashCodeWithNullValue", "primary_tested": ["TiedMapEntry.hashCode()"], "external_dependencies": {"modules": ["TiedMapEntry", "Map"], "class_members": [{"name": "entry", "type": "variable"}, {"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hashCode method with a null value."}, {"name": "testHashCodeWithNullKeyAndValue", "primary_tested": ["TiedMapEntry.hashCode()"], "external_dependencies": {"modules": ["TiedMapEntry", "Map"], "class_members": [{"name": "entry", "type": "variable"}, {"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the hashCode method with both null key and value."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/Shape_equalsTest.java", "testclass_name": "Shape_equalsTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "Shape_equalsTest", "description": "Unit tests for the equals and hashCode methods of the Shape class.", "class_members": {"variables": [{"name": "shape1", "type": "Shape"}, {"name": "shape2", "type": "Shape"}, {"name": "shape3", "type": "Shape"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEquals_SameObject", "primary_tested": ["Shape.equals(Object)"], "external_dependencies": {"modules": ["Shape"], "class_members": [{"name": "shape1", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method for the same object."}, {"name": "testEquals_EqualObjects", "primary_tested": ["Shape.equals(Object)"], "external_dependencies": {"modules": ["Shape"], "class_members": [{"name": "shape1", "type": "variable"}, {"name": "shape2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method for equal objects."}, {"name": "testEquals_DifferentObjects", "primary_tested": ["Shape.equals(Object)"], "external_dependencies": {"modules": ["Shape"], "class_members": [{"name": "shape1", "type": "variable"}, {"name": "shape3", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method for different objects."}, {"name": "testEquals_DifferentClass", "primary_tested": ["Shape.equals(Object)"], "external_dependencies": {"modules": ["Shape"], "class_members": [{"name": "shape1", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method for objects of different classes."}, {"name": "testEquals_Null", "primary_tested": ["Shape.equals(Object)"], "external_dependencies": {"modules": ["Shape"], "class_members": [{"name": "shape1", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method for null comparison."}, {"name": "testHashCode_EqualObjects", "primary_tested": ["Shape.hashCode()"], "external_dependencies": {"modules": ["Shape"], "class_members": [{"name": "shape1", "type": "variable"}, {"name": "shape2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hashCode method for equal objects."}, {"name": "testHashCode_DifferentObjects", "primary_tested": ["Shape.hashCode()"], "external_dependencies": {"modules": ["Shape"], "class_members": [{"name": "shape1", "type": "variable"}, {"name": "shape3", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hashCode method for different objects."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/EnhancedDoubleHasher_indicesTest.java", "testclass_name": "EnhancedDoubleHasher_indicesTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.function.IntPredicate;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "EnhancedDoubleHasher_indicesTest", "description": "Unit tests for the EnhancedDoubleHasher class, focusing on the indices method and related functionalities.", "class_members": {"variables": [{"name": "hasher", "type": "EnhancedDoubleHasher"}, {"name": "shape", "type": "Shape"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testIndicesNonNullShape", "primary_tested": ["EnhancedDoubleHasher.indices(Shape)"], "external_dependencies": {"modules": ["EnhancedDoubleHasher", "Shape"], "class_members": [{"name": "hasher", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that a NullPointerException is thrown when passing a null Shape to the indices method."}, {"name": "testAsIndexArray", "primary_tested": ["IndexExtractor.asIndexArray()"], "associated_methods": ["Shape.getNumberOfHashFunctions()", "Shape.getNumberOfBits()"], "external_dependencies": {"modules": ["EnhancedDoubleHasher", "Shape", "IndexExtractor"], "class_members": [{"name": "hasher", "type": "variable"}, {"name": "shape", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the asIndexArray method of IndexExtractor to ensure indices are within the valid range."}, {"name": "testProcessIndicesNonNullConsumer", "primary_tested": ["IndexExtractor.processIndices(IntPredicate)"], "external_dependencies": {"modules": ["EnhancedDoubleHasher", "Shape", "IndexExtractor"], "class_members": [{"name": "hasher", "type": "variable"}, {"name": "shape", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that a NullPointerException is thrown when passing a null IntPredicate to the processIndices method."}, {"name": "testProcessIndicesValidConsumer", "primary_tested": ["IndexExtractor.processIndices(IntPredicate)"], "associated_methods": ["Shape.getNumberOfBits()"], "external_dependencies": {"modules": ["EnhancedDoubleHasher", "Shape", "IndexExtractor"], "class_members": [{"name": "hasher", "type": "variable"}, {"name": "shape", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the processIndices method with a valid IntPredicate that ensures indices are within the valid range."}, {"name": "testProcessIndicesInvalidConsumer", "primary_tested": ["IndexExtractor.processIndices(IntPredicate)"], "external_dependencies": {"modules": ["EnhancedDoubleHasher", "Shape", "IndexExtractor"], "class_members": [{"name": "hasher", "type": "variable"}, {"name": "shape", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the processIndices method with an invalid IntPredicate that ensures indices are out of the valid range."}, {"name": "testProcessIndicesWithKGreaterThanBits", "primary_tested": ["IndexExtractor.processIndices(IntPredicate)"], "associated_methods": ["Shape.getNumberOfBits()"], "external_dependencies": {"modules": ["EnhancedDoubleHasher", "Shape", "IndexExtractor"], "class_members": [{"name": "hasher", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the processIndices method with a Shape where K is greater than the number of bits."}, {"name": "testProcessIndicesWithKLessThanBits", "primary_tested": ["IndexExtractor.processIndices(IntPredicate)"], "associated_methods": ["Shape.getNumberOfBits()"], "external_dependencies": {"modules": ["EnhancedDoubleHasher", "Shape", "IndexExtractor"], "class_members": [{"name": "hasher", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the processIndices method with a Shape where K is less than the number of bits."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/keyvalue/DefaultKeyValue_equalsTest.java", "testclass_name": "DefaultKeyValue_equalsTest", "dependencies": ["package org.apache.commons.collections4.keyvalue;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "DefaultKeyValue_equalsTest", "description": "Unit tests for the equals method of the DefaultKeyValue class.", "class_members": {"variables": [{"name": "kv1", "type": "DefaultKeyValue<String, String>"}, {"name": "kv2", "type": "DefaultKeyValue<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEqualsSameObject", "primary_tested": ["DefaultKeyValue.equals(Object)"], "external_dependencies": {"modules": ["DefaultKeyValue"], "class_members": [{"name": "kv1", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing the same object."}, {"name": "testEqualsDifferentType", "primary_tested": ["DefaultKeyValue.equals(Object)"], "external_dependencies": {"modules": ["DefaultKeyValue"], "class_members": [{"name": "kv1", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing with a different type."}, {"name": "testEqualsSameKeyAndValue", "primary_tested": ["DefaultKeyValue.equals(Object)"], "external_dependencies": {"modules": ["DefaultKeyValue"], "class_members": [{"name": "kv1", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing objects with the same key and value."}, {"name": "testEqualsDifferentKey", "primary_tested": ["DefaultKeyValue.equals(Object)"], "external_dependencies": {"modules": ["DefaultKeyValue"], "class_members": [{"name": "kv1", "type": "variable"}, {"name": "kv2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing objects with different keys."}, {"name": "testEqualsNullKeyAndValue", "primary_tested": ["DefaultKeyValue.equals(Object)"], "external_dependencies": {"modules": ["DefaultKeyValue"]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing objects with null keys and values."}, {"name": "testEqualsNullKeyNonNullValue", "primary_tested": ["DefaultKeyValue.equals(Object)"], "external_dependencies": {"modules": ["DefaultKeyValue"], "class_members": [{"name": "kv1", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing objects with a null key and a non-null value."}, {"name": "testEqualsNonNullKeyNullValue", "primary_tested": ["DefaultKeyValue.equals(Object)"], "external_dependencies": {"modules": ["DefaultKeyValue"], "class_members": [{"name": "kv1", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing objects with a non-null key and a null value."}, {"name": "testEqualsDifferentKeyNullValue", "primary_tested": ["DefaultKeyValue.equals(Object)"], "external_dependencies": {"modules": ["DefaultKeyValue"]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing objects with different keys and null values."}, {"name": "testEqualsNullKeyDifferentValue", "primary_tested": ["DefaultKeyValue.equals(Object)"], "external_dependencies": {"modules": ["DefaultKeyValue"]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing objects with null keys and different values."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/keyvalue/MultiKey_equalsTest.java", "testclass_name": "MultiKey_equalsTest", "dependencies": ["package org.apache.commons.collections4.keyvalue;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "MultiKey_equalsTest", "description": "Unit tests for the equals method of the MultiKey class.", "class_members": {"variables": [{"name": "ONE", "type": "Integer"}, {"name": "TWO", "type": "Integer"}, {"name": "THREE", "type": "Integer"}, {"name": "FOUR", "type": "Integer"}, {"name": "FIVE", "type": "Integer"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEqualsSameInstance", "primary_tested": ["MultiKey.equals(Object)"], "external_dependencies": {"modules": ["MultiKey"], "class_members": [{"name": "ONE", "type": "variable"}, {"name": "TWO", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing the same instance of MultiKey."}, {"name": "testEqualsDifferentType", "primary_tested": ["MultiKey.equals(Object)"], "external_dependencies": {"modules": ["MultiKey"], "class_members": [{"name": "ONE", "type": "variable"}, {"name": "TWO", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing a MultiKey with a different type."}, {"name": "testEqualsSameKeys", "primary_tested": ["MultiKey.equals(Object)"], "external_dependencies": {"modules": ["MultiKey"], "class_members": [{"name": "ONE", "type": "variable"}, {"name": "TWO", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing two MultiKeys with the same keys."}, {"name": "testEqualsDifferentKeys", "primary_tested": ["MultiKey.equals(Object)"], "external_dependencies": {"modules": ["MultiKey"], "class_members": [{"name": "ONE", "type": "variable"}, {"name": "TWO", "type": "variable"}, {"name": "THREE", "type": "variable"}, {"name": "FOUR", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing two MultiKeys with different keys."}, {"name": "testEqualsNullKeys", "primary_tested": ["MultiKey.equals(Object)"], "external_dependencies": {"modules": ["MultiKey"]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing two MultiKeys with null keys."}, {"name": "testEqualsMixedNullKeys", "primary_tested": ["MultiKey.equals(Object)"], "external_dependencies": {"modules": ["MultiKey"], "class_members": [{"name": "ONE", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing two MultiKeys with mixed null keys."}, {"name": "testEqualsDifferentLengthKeys", "primary_tested": ["MultiKey.equals(Object)"], "external_dependencies": {"modules": ["MultiKey"], "class_members": [{"name": "ONE", "type": "variable"}, {"name": "TWO", "type": "variable"}, {"name": "THREE", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing two MultiKeys with different lengths of keys."}, {"name": "testEqualsEmptyKeys", "primary_tested": ["MultiKey.equals(Object)"], "external_dependencies": {"modules": ["MultiKey"]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing two MultiKeys with empty keys."}]}]