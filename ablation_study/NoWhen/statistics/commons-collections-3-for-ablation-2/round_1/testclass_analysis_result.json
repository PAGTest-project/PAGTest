[{"file_path": "src/test/java/org/apache/commons/collections4/queue/SynchronizedQueue_elementTest.java", "testclass_name": "SynchronizedQueue_elementTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import org.junit.jupiter.api.Test;", "import java.util.LinkedList;", "import java.util.Queue;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "SynchronizedQueue_elementTest", "description": "Unit test for the element method of SynchronizedQueue.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testElement", "primary_tested": ["SynchronizedQueue.element()"], "external_dependencies": {"modules": ["Queue", "LinkedList", "SynchronizedQueue"], "class_members": []}, "category": "unit", "description": "Tests the element method of SynchronizedQueue to ensure it retrieves the head element of the queue."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/EnumerationUtils_toListTest.java", "testclass_name": "EnumerationUtils_toListTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.List;", "import java.util.StringTokenizer;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "EnumerationUtils_toListTest", "description": "Unit tests for the EnumerationUtils.toList method.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testToListWithStringTokenizer", "primary_tested": ["EnumerationUtils.toList(StringTokenizer)"], "external_dependencies": {"modules": ["EnumerationUtils", "StringTokenizer", "List"]}, "category": "unit", "description": "Tests the EnumerationUtils.toList method with a StringTokenizer, verifying the conversion of tokens to a list and their correctness."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/SetUtils_isEqualSetTest.java", "testclass_name": "SetUtils_isEqualSetTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.HashSet;", "import java.util.Set;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "SetUtils_isEqualSetTest", "description": "Unit tests for the isEqualSet method in SetUtils.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testIsEqualSet", "primary_tested": ["SetUtils.isEqualSet(Set,Set)"], "external_dependencies": {"modules": ["SetUtils", "HashSet", "Arrays", "Set"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the isEqualSet functionality of the SetUtils. It checks if two sets are equal regardless of order and handles null cases."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/SynchronizedQueue_removeTest.java", "testclass_name": "SynchronizedQueue_removeTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import org.junit.jupiter.api.Test;", "import java.util.LinkedList;", "import java.util.Queue;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "SynchronizedQueue_removeTest", "description": "Unit test for the remove method of SynchronizedQueue.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testRemove", "primary_tested": ["SynchronizedQueue.remove()"], "external_dependencies": {"modules": ["java.util.LinkedList", "java.util.Queue", "org.apache.commons.collections4.queue.SynchronizedQueue"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the remove functionality of the SynchronizedQueue, ensuring the correct element is removed and the queue is empty after removal."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/IteratorUtils_chainedIteratorTest.java", "testclass_name": "IteratorUtils_chainedIteratorTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Iterator;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "IteratorUtils_chainedIteratorTest", "description": "Unit tests for the chainedIterator functionality in IteratorUtils.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testChainedIterator", "primary_tested": ["IteratorUtils.chainedIterator(Iterator,Iterator)"], "external_dependencies": {"modules": ["java.util.Arrays", "java.util.Iterator", "org.apache.commons.collections4.IteratorUtils"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the chainedIterator functionality of IteratorUtils by chaining two iterators and verifying the sequence of elements."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/UnmodifiableBag_uniqueSetTest.java", "testclass_name": "UnmodifiableBag_uniqueSetTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import org.apache.commons.collections4.Bag;", "import org.apache.commons.collections4.set.UnmodifiableSet;", "import org.junit.jupiter.api.Test;", "import java.util.HashSet;", "import java.util.Set;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "UnmodifiableBag_uniqueSetTest", "description": "Test for the uniqueSet method of the UnmodifiableBag class.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testUniqueSet", "primary_tested": ["UnmodifiableBag.uniqueSet()"], "associated_methods": ["UnmodifiableSet.contains(Object)"], "external_dependencies": {"modules": ["Bag", "HashBag", "UnmodifiableBag", "Set", "UnmodifiableSet"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the uniqueSet method of the UnmodifiableBag class to ensure it returns an UnmodifiableSet containing unique elements from the bag."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/IteratorUtils_sizeTest.java", "testclass_name": "IteratorUtils_sizeTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.Iterator;"], "name": "IteratorUtils_sizeTest", "description": "Unit tests for the size method in IteratorUtils.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testSizeWithNonNullIterator", "primary_tested": ["IteratorUtils.size(Iterator)"], "external_dependencies": {"modules": ["IteratorUtils", "Iterator"]}, "category": "unit", "description": "Tests the size method of IteratorUtils with a non-null iterator."}, {"name": "testSizeWithNullIterator", "primary_tested": ["IteratorUtils.size(Iterator)"], "external_dependencies": {"modules": ["IteratorUtils", "Iterator"]}, "category": "unit", "description": "Tests the size method of IteratorUtils with a null iterator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/CollectionBag_addAllTest.java", "testclass_name": "CollectionBag_addAllTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import org.apache.commons.collections4.Bag;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.Arrays;", "import java.util.Collection;"], "name": "CollectionBag_addAllTest", "description": "Unit test for the addAll method of the CollectionBag class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testAddAll", "primary_tested": ["Bag.addAll(Collection)"], "associated_methods": ["Bag.containsAll(Collection)"], "external_dependencies": {"modules": ["org.apache.commons.collections4.Bag", "org.apache.commons.collections4.bag.CollectionBag", "java.util.Arrays", "java.util.Collection"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the addAll functionality of the CollectionBag, ensuring that elements are added and can be verified."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/TransformerUtils_ifTransformerTest.java", "testclass_name": "TransformerUtils_ifTransformerTest", "dependencies": ["package org.apache.commons.collections4;", "import org.apache.commons.collections4.functors.ConstantTransformer;", "import org.apache.commons.collections4.functors.EqualPredicate;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "TransformerUtils_ifTransformerTest", "description": "Unit tests for the ifTransformer method in TransformerUtils.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testIfTransformer", "primary_tested": ["TransformerUtils.ifTransformer(Predicate,Transformer,Transformer)"], "associated_methods": ["ConstantTransformer.constantTransformer(String)", "EqualPredicate.equalPredicate(Integer)"], "external_dependencies": {"modules": ["ConstantTransformer", "EqualPredicate", "TransformerUtils"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the ifTransformer functionality in TransformerUtils, ensuring it returns the correct transformed value based on the predicate."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/TransformerUtils_switchTransformerTest.java", "testclass_name": "TransformerUtils_switchTransformerTest", "dependencies": ["package org.apache.commons.collections4;", "import org.apache.commons.collections4.functors.ConstantTransformer;", "import org.apache.commons.collections4.functors.EqualPredicate;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "TransformerUtils_switchTransformerTest", "description": "Unit tests for the switchTransformer functionality in TransformerUtils.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testSwitchTransformer", "primary_tested": ["TransformerUtils.switchTransformer(Predicate,Transformer,Transformer)"], "associated_methods": ["ConstantTransformer.constantTransformer(String)", "EqualPredicate.equalPredicate(Integer)"], "external_dependencies": {"modules": ["ConstantTransformer", "EqualPredicate", "TransformerUtils"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the switchTransformer functionality of TransformerUtils, ensuring it correctly transforms based on the provided predicate."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/ComparatorUtils_transformedComparatorTest.java", "testclass_name": "ComparatorUtils_transformedComparatorTest", "dependencies": ["package org.apache.commons.collections4;", "import org.apache.commons.collections4.comparators.TransformingComparator;", "import org.junit.jupiter.api.Test;", "import java.util.Comparator;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNotNull;"], "name": "ComparatorUtils_transformedComparatorTest", "description": "Unit tests for the transformedComparator method in ComparatorUtils.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testTransformedComparatorWithNullComparator", "primary_tested": ["ComparatorUtils.transformedComparator(Comparator<String>,Transformer<Integer,String>)"], "external_dependencies": {"modules": ["Comparator", "Transformer", "ComparatorUtils", "TransformingComparator"]}, "category": "unit", "description": "Tests the creation of a TransformingComparator with a null comparator."}, {"name": "testTransformedComparatorWithNonNullComparator", "primary_tested": ["ComparatorUtils.transformedComparator(Comparator<String>,Transformer<Integer,String>)"], "external_dependencies": {"modules": ["Comparator", "Transformer", "ComparatorUtils", "TransformingComparator"]}, "category": "unit", "description": "Tests the creation of a TransformingComparator with a non-null comparator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/IteratorUtils_getTest.java", "testclass_name": "IteratorUtils_getTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Iterator;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "IteratorUtils_getTest", "description": "Unit tests for the IteratorUtils.get method, which retrieves an element at a specific index from an iterator.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testGetElementAtIndex", "primary_tested": ["IteratorUtils.get(Iterator<Integer>,int)"], "external_dependencies": {"modules": ["Arrays", "IteratorUtils", "Iterator"]}, "category": "unit", "description": "Tests the retrieval of an element at a specific index from an iterator."}, {"name": "testGetElementAtIndexOutOfBounds", "primary_tested": ["IteratorUtils.get(Iterator<Integer>,int)"], "external_dependencies": {"modules": ["Arrays", "IteratorUtils", "Iterator", "IndexOutOfBoundsException"]}, "category": "unit", "description": "Tests the behavior of the IteratorUtils.get method when attempting to retrieve an element at an index out of bounds, expecting an IndexOutOfBoundsException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/IteratorUtils_zippingIteratorTest.java", "testclass_name": "IteratorUtils_zippingIteratorTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Iterator;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import org.apache.commons.collections4.iterators.ZippingIterator;"], "name": "IteratorUtils_zippingIteratorTest", "description": "Test for the ZippingIterator functionality in IteratorUtils.", "class_members": {"variables": [{"name": "iterator1", "type": "Iterator<Integer>"}, {"name": "iterator2", "type": "Iterator<Integer>"}, {"name": "iterator3", "type": "Iterator<Integer>"}]}, "test_cases": [{"name": "testZippingIterator", "primary_tested": ["IteratorUtils.zippingIterator(Iterator,Iterator,Iterator)"], "external_dependencies": {"modules": ["Iterator", "Arrays", "ZippingIterator"], "class_members": [{"name": "iterator1", "type": "variable"}, {"name": "iterator2", "type": "variable"}, {"name": "iterator3", "type": "variable"}]}, "category": "unit", "description": "Tests the creation of a ZippingIterator using IteratorUtils."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/SetUtils_hashSetTest.java", "testclass_name": "SetUtils_hashSetTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Arrays;", "import java.util.HashSet;", "import java.util.Set;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SetUtils_hashSetTest", "description": "Unit tests for the SetUtils.hashSet method.", "class_members": {"variables": [{"name": "setA", "type": "Set<Integer>"}, {"name": "setB", "type": "Set<Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testHashSetWithNull", "primary_tested": ["SetUtils.hashSet(Integer[])"], "external_dependencies": {"modules": ["SetUtils"]}, "category": "unit", "fixtures_used": [], "description": "Tests the SetUtils.hashSet method with a null input."}, {"name": "testHashSetWithItems", "primary_tested": ["SetUtils.hashSet(Integer[])"], "external_dependencies": {"modules": ["SetUtils"]}, "category": "unit", "fixtures_used": [], "description": "Tests the SetUtils.hashSet method with valid items."}, {"name": "testHashSetWithEmptyItems", "primary_tested": ["SetUtils.hashSet(Integer[])"], "external_dependencies": {"modules": ["SetUtils"]}, "category": "unit", "fixtures_used": [], "description": "Tests the SetUtils.hashSet method with no items."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/SynchronizedQueue_peekTest.java", "testclass_name": "SynchronizedQueue_peekTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.mockito.Mockito.*;", "import java.util.Queue;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import org.mockito.Mock;", "import org.mockito.MockitoAnnotations;"], "name": "SynchronizedQueue_peekTest", "description": "Unit tests for the peek method of the SynchronizedQueue class.", "class_members": {"variables": [{"name": "mockQueue", "type": "Queue<String>"}, {"name": "synchronizedQueue", "type": "SynchronizedQueue<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPeek", "primary_tested": ["SynchronizedQueue.peek()"], "associated_methods": ["Queue.peek()"], "external_dependencies": {"modules": ["Queue", "SynchronizedQueue", "Mockito"], "class_members": [{"name": "mockQueue", "type": "variable"}, {"name": "synchronizedQueue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the peek functionality of the SynchronizedQueue, ensuring it returns the expected element and verifies the mock queue's peek method is called once."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/SynchronizedQueue_offerTest.java", "testclass_name": "SynchronizedQueue_offerTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.mockito.Mockito.mock;", "import static org.mockito.Mockito.when;", "import java.util.Queue;", "import org.junit.jupiter.api.Test;"], "name": "SynchronizedQueue_offerTest", "description": "Unit test for the offer method of SynchronizedQueue.", "class_members": {"variables": [{"name": "mockQueue", "type": "Queue<String>"}, {"name": "synchronizedQueue", "type": "SynchronizedQueue<String>"}, {"name": "element", "type": "String"}]}, "test_cases": [{"name": "testOffer", "primary_tested": ["SynchronizedQueue.offer(String)"], "associated_methods": ["Queue.offer(String)"], "external_dependencies": {"modules": ["Queue", "SynchronizedQueue", "org.mockito.Mockito"], "class_members": [{"name": "mockQueue", "type": "variable"}, {"name": "synchronizedQueue", "type": "variable"}, {"name": "element", "type": "variable"}]}, "category": "unit", "description": "Tests the offer method of SynchronizedQueue by mocking the underlying Queue and verifying the result."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/UnmodifiableQueue_unmodifiableQueueTest.java", "testclass_name": "UnmodifiableQueue_unmodifiableQueueTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import org.apache.commons.collections4.Unmodifiable;", "import org.junit.jupiter.api.Test;", "import java.util.ArrayDeque;", "import java.util.Queue;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "UnmodifiableQueue_unmodifiableQueueTest", "description": "Tests for the UnmodifiableQueue class, specifically focusing on the unmodifiableQueue method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testUnmodifiableQueueWithUnmodifiableQueue", "primary_tested": ["UnmodifiableQueue.unmodifiableQueue(Queue<String>)"], "external_dependencies": {"modules": ["UnmodifiableQueue", "ArrayDeque", "Queue", "Unmodifiable"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the unmodifiableQueue method when provided with an already unmodifiable queue."}, {"name": "testUnmodifiableQueueWithModifiableQueue", "primary_tested": ["UnmodifiableQueue.unmodifiableQueue(Queue<String>)"], "external_dependencies": {"modules": ["UnmodifiableQueue", "ArrayDeque", "Queue", "Unmodifiable"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the unmodifiableQueue method when provided with a modifiable queue."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/SetUtils_unmodifiableSetTest.java", "testclass_name": "SetUtils_unmodifiableSetTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Set;", "import org.junit.jupiter.api.Test;"], "name": "SetUtils_unmodifiableSetTest", "description": "Unit tests for the unmodifiableSet method in SetUtils.", "test_cases": [{"name": "testUnmodifiableSetWithNullInput", "primary_tested": ["SetUtils.unmodifiableSet(Integer[])"], "external_dependencies": {"modules": ["SetUtils", "Set"]}, "category": "unit", "description": "Tests the unmodifiableSet method with a null input."}, {"name": "testUnmodifiableSetWithEmptyInput", "primary_tested": ["SetUtils.unmodifiableSet()"], "external_dependencies": {"modules": ["SetUtils", "Set"]}, "category": "unit", "description": "Tests the unmodifiableSet method with an empty input."}, {"name": "testUnmodifiableSetWithNonEmptyInput", "primary_tested": ["SetUtils.unmodifiableSet(Integer[])"], "associated_methods": ["Set.size()", "Set.contains(Integer)"], "external_dependencies": {"modules": ["SetUtils", "Set"]}, "category": "unit", "description": "Tests the unmodifiableSet method with a non-empty input."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/IteratorUtils_toListTest.java", "testclass_name": "IteratorUtils_toListTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Iterator;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "IteratorUtils_toListTest", "description": "Unit tests for the IteratorUtils.toList method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testToList_SuccessfulConversion", "primary_tested": ["IteratorUtils.toList(Iterator<String>,int)"], "external_dependencies": {"modules": ["IteratorUtils", "Arrays", "List", "Iterator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the successful conversion of an iterator to a list."}, {"name": "testToList_NullIterator", "primary_tested": ["IteratorUtils.toList(Iterator<String>,int)"], "external_dependencies": {"modules": ["IteratorUtils", "Iterator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of the toList method when a null iterator is provided."}, {"name": "testToList_InvalidEstimatedSize", "primary_tested": ["IteratorUtils.toList(Iterator<String>,int)"], "external_dependencies": {"modules": ["IteratorUtils", "Arrays", "Iterator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of the toList method when an invalid estimated size is provided."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/IteratorUtils_forEachTest.java", "testclass_name": "IteratorUtils_forEachTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.Iterator;", "import java.util.NoSuchElementException;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;"], "name": "IteratorUtils_forEachTest", "description": "Unit tests for the IteratorUtils.forEach method.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testForEachWithNonNullClosureAndNonNullIterator", "primary_tested": ["IteratorUtils.forEach(Iterator<String>,Closure<String>)"], "associated_methods": ["Iterator.hasNext()", "Iterator.next()", "Closure.accept(String)"], "external_dependencies": {"modules": ["Iterator", "Closure", "IteratorUtils"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the forEach method with a non-null closure and a non-null iterator."}, {"name": "testForEachWithNonNullClosureAndNullIterator", "primary_tested": ["IteratorUtils.forEach(Iterator<String>,Closure<String>)"], "associated_methods": ["Closure.accept(String)"], "external_dependencies": {"modules": ["Closure", "IteratorUtils"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the forEach method with a non-null closure and a null iterator."}, {"name": "testForEachWithNullClosure", "primary_tested": ["IteratorUtils.forEach(Iterator<String>,Closure<String>)"], "associated_methods": [], "external_dependencies": {"modules": ["Iterator", "IteratorUtils"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the forEach method with a null closure, expecting a NullPointerException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/MultiMapUtils_getCollectionTest.java", "testclass_name": "MultiMapUtils_getCollectionTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;", "import java.util.ArrayList;", "import java.util.Collection;"], "name": "MultiMapUtils_getCollectionTest", "description": "Unit tests for the MultiMapUtils.getCollection method.", "class_members": {"variables": [{"name": "map", "type": "MultiValuedMap<String, Integer>"}, {"name": "expectedCollection", "type": "Collection<Integer>"}]}, "test_cases": [{"name": "testGetCollection_WithNonNullMap", "primary_tested": ["MultiMapUtils.getCollection(MultiValuedMap<String, Integer>,String)"], "associated_methods": ["MultiValuedMap.get(String)"], "external_dependencies": {"modules": ["MultiValuedMap", "MultiMapUtils", "Collection", "ArrayList"], "class_members": [{"name": "map", "type": "variable"}, {"name": "expectedCollection", "type": "variable"}]}, "category": "unit", "description": "Tests the getCollection method of MultiMapUtils with a non-null map."}, {"name": "testGetCollection_WithNullMap", "primary_tested": ["MultiMapUtils.getCollection(MultiValuedMap<String, Integer>,String)"], "external_dependencies": {"modules": ["MultiMapUtils"]}, "category": "unit", "description": "Tests the getCollection method of MultiMapUtils with a null map."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/IteratorUtils_toStringTest.java", "testclass_name": "IteratorUtils_toStringTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import java.util.Arrays;", "import java.util.Iterator;", "import java.util.List;"], "name": "IteratorUtils_toStringTest", "description": "Unit tests for the IteratorUtils.toString method.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testToStringWithNonEmptyIterator", "primary_tested": ["IteratorUtils.toString(Iterator<String>)"], "external_dependencies": {"modules": ["java.util.Arrays", "java.util.Iterator", "java.util.List", "org.apache.commons.collections4.IteratorUtils"]}, "category": "unit", "description": "Tests the IteratorUtils.toString method with a non-empty iterator."}, {"name": "testToStringWithEmptyIterator", "primary_tested": ["IteratorUtils.toString(Iterator<String>)"], "external_dependencies": {"modules": ["java.util.Arrays", "java.util.Iterator", "java.util.List", "org.apache.commons.collections4.IteratorUtils"]}, "category": "unit", "description": "Tests the IteratorUtils.toString method with an empty iterator."}, {"name": "testToStringWithSingleElementIterator", "primary_tested": ["IteratorUtils.toString(Iterator<String>)"], "external_dependencies": {"modules": ["java.util.Arrays", "java.util.Iterator", "java.util.List", "org.apache.commons.collections4.IteratorUtils"]}, "category": "unit", "description": "Tests the IteratorUtils.toString method with a single-element iterator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/ComparatorUtils_chainedComparatorTest.java", "testclass_name": "ComparatorUtils_chainedComparatorTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.Comparator;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "ComparatorUtils_chainedComparatorTest", "description": "Unit tests for the chainedComparator method in ComparatorUtils.", "class_members": {"variables": [{"name": "comparator1", "type": "Comparator<Integer>"}, {"name": "comparator2", "type": "Comparator<Integer>"}, {"name": "nullComparator", "type": "Comparator<Integer>"}]}, "test_cases": [{"name": "testChainedComparator", "primary_tested": ["ComparatorUtils.chainedComparator(Comparator,Comparator)"], "external_dependencies": {"modules": ["Comparator", "ComparatorUtils"], "class_members": [{"name": "comparator1", "type": "variable"}, {"name": "comparator2", "type": "variable"}]}, "category": "unit", "description": "Tests the chainedComparator method with two valid comparators."}, {"name": "testChainedComparatorWithNull", "primary_tested": ["ComparatorUtils.chainedComparator(Comparator,Comparator)"], "external_dependencies": {"modules": ["Comparator", "ComparatorUtils"], "class_members": [{"name": "comparator1", "type": "variable"}, {"name": "nullComparator", "type": "variable"}]}, "category": "unit", "description": "Tests the chainedComparator method with a null comparator, expecting a NullPointerException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/SynchronizedQueue_pollTest.java", "testclass_name": "SynchronizedQueue_pollTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.mockito.Mockito.*;", "import java.util.Queue;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.api.BeforeEach;", "import org.mockito.Mockito;"], "name": "SynchronizedQueue_pollTest", "description": "Unit tests for the poll method of SynchronizedQueue.", "class_members": {"variables": [{"name": "mockQueue", "type": "Queue<String>"}, {"name": "synchronizedQueue", "type": "SynchronizedQueue<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPoll_WhenQueueHasElements", "primary_tested": ["SynchronizedQueue.poll()"], "external_dependencies": {"modules": ["Queue", "SynchronizedQueue"], "class_members": [{"name": "mockQueue", "type": "variable"}, {"name": "synchronizedQueue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the poll method when the queue has elements."}, {"name": "testPoll_WhenQueueIsEmpty", "primary_tested": ["SynchronizedQueue.poll()"], "external_dependencies": {"modules": ["Queue", "SynchronizedQueue"], "class_members": [{"name": "mockQueue", "type": "variable"}, {"name": "synchronizedQueue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the poll method when the queue is empty."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/SetUtils_hashCodeForSetTest.java", "testclass_name": "SetUtils_hashCodeForSetTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.HashSet;", "import java.util.Set;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "SetUtils_hashCodeForSetTest", "description": "Unit tests for the SetUtils.hashCodeForSet method.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testHashCodeForSet_NullSet", "primary_tested": ["SetUtils.hashCodeForSet(Set)"], "external_dependencies": {"modules": ["SetUtils"]}, "category": "unit", "description": "Tests the hashCodeForSet method with a null set."}, {"name": "testHashCodeForSet_EmptySet", "primary_tested": ["SetUtils.hashCodeForSet(Set)"], "external_dependencies": {"modules": ["SetUtils", "Collections"]}, "category": "unit", "description": "Tests the hashCodeForSet method with an empty set."}, {"name": "testHashCodeForSet_NonEmptySet", "primary_tested": ["SetUtils.hashCodeForSet(Set)"], "external_dependencies": {"modules": ["SetUtils", "HashSet", "Arrays", "Collections"]}, "category": "unit", "description": "Tests the hashCodeForSet method with a non-empty set."}, {"name": "testHashCodeForSet_SetWithNullElements", "primary_tested": ["SetUtils.hashCodeForSet(Set)"], "external_dependencies": {"modules": ["SetUtils", "HashSet", "Arrays", "Collections"]}, "category": "unit", "description": "Tests the hashCodeForSet method with a set containing null elements."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/IteratorUtils_transformedIteratorTest.java", "testclass_name": "IteratorUtils_transformedIteratorTest", "dependencies": ["package org.apache.commons.collections4;", "import org.apache.commons.collections4.functors.ConstantTransformer;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Iterator;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertThrows;"], "name": "IteratorUtils_transformedIteratorTest", "description": "Unit tests for the transformedIterator method in IteratorUtils class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testTransformedIterator_Success", "primary_tested": ["IteratorUtils.transformedIterator(Iterator<String>,Transformer<String,Integer>)"], "external_dependencies": {"modules": ["IteratorUtils", "ConstantTransformer", "Arrays"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the successful transformation of an iterator using a constant transformer."}, {"name": "testTransformedIterator_NullIterator", "primary_tested": ["IteratorUtils.transformedIterator(Iterator<String>,Transformer<String,Integer>)"], "external_dependencies": {"modules": ["IteratorUtils", "ConstantTransformer"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of the transformedIterator method when the input iterator is null, expecting a NullPointerException."}, {"name": "testTransformedIterator_NullTransformer", "primary_tested": ["IteratorUtils.transformedIterator(Iterator<String>,Transformer<String,Integer>)"], "external_dependencies": {"modules": ["IteratorUtils", "Arrays"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of the transformedIterator method when the transformer is null, expecting a NullPointerException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/MultiMapUtils_getValuesAsSetTest.java", "testclass_name": "MultiMapUtils_getValuesAsSetTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.Set;", "import static org.junit.jupiter.api.Assertions.*;", "import org.apache.commons.collections4.multimap.HashSetValuedHashMap;", "import org.apache.commons.collections4.multimap.ArrayListValuedHashMap;"], "name": "MultiMapUtils_getValuesAsSetTest", "description": "Unit tests for the MultiMapUtils.getValuesAsSet method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testGetValuesAsSet", "primary_tested": ["MultiMapUtils.getValuesAsSet(MultiValuedMap<String,String>,String)"], "external_dependencies": {"modules": ["MultiValuedMap", "HashSetValuedHashMap", "Set", "MultiMapUtils"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the getValuesAsSet method with a non-null map and verifies the result contains the expected values."}, {"name": "testGetValuesAsSet_NullMap", "primary_tested": ["MultiMapUtils.getValuesAsSet(MultiValuedMap<String,String>,String)"], "external_dependencies": {"modules": ["MultiValuedMap", "MultiMapUtils"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the getValuesAsSet method with a null map and verifies the result is null."}, {"name": "testGetValuesAsSet_NonSetCollection", "primary_tested": ["MultiMapUtils.getValuesAsSet(MultiValuedMap<String,String>,String)"], "external_dependencies": {"modules": ["MultiValuedMap", "ArrayListValuedHashMap", "Set", "MultiMapUtils"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the getValuesAsSet method with a map that uses a non-set collection and verifies the result contains the expected values."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/CollectionBag_removeAllTest.java", "testclass_name": "CollectionBag_removeAllTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import org.apache.commons.collections4.Bag;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import org.mockito.Mockito;", "import java.util.Arrays;", "import java.util.Collection;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.mockito.Mockito.when;"], "name": "CollectionBag_removeAllTest", "description": "Unit tests for the removeAll method in the CollectionBag class.", "class_members": {"variables": [{"name": "mockBag", "type": "Bag<String>"}, {"name": "collectionBag", "type": "CollectionBag<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveAll_NonEmptyCollection", "primary_tested": ["CollectionBag.removeAll(Collection)"], "associated_methods": ["Bag.remove(String,int)", "Bag.getCount(String)"], "external_dependencies": {"modules": ["Bag", "CollectionBag", "Mockito", "Arrays"], "class_members": [{"name": "mockBag", "type": "variable"}, {"name": "collectionBag", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeAll method with a non-empty collection."}, {"name": "testRemoveAll_NullCollection", "primary_tested": ["CollectionBag.removeAll(Collection)"], "external_dependencies": {"modules": ["Bag", "CollectionBag"], "class_members": [{"name": "collectionBag", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeAll method with a null collection."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/ComparatorUtils_minTest.java", "testclass_name": "ComparatorUtils_minTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.Comparator;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "ComparatorUtils_minTest", "description": "Unit tests for the min method in ComparatorUtils, testing both default and custom comparators.", "class_members": {"variables": [{"name": "o1", "type": "Integer"}, {"name": "o2", "type": "Integer"}, {"name": "reverseComparator", "type": "Comparator<Integer>"}]}, "test_cases": [{"name": "testMinWithDefaultComparator", "primary_tested": ["ComparatorUtils.min(Integer,Integer,Comparator)"], "external_dependencies": {"modules": ["ComparatorUtils", "Integer", "Comparator"], "class_members": [{"name": "o1", "type": "variable"}, {"name": "o2", "type": "variable"}]}, "category": "unit", "description": "Tests the min method of ComparatorUtils with a default comparator."}, {"name": "testMinWithCustomComparator", "primary_tested": ["ComparatorUtils.min(Integer,Integer,Comparator)"], "external_dependencies": {"modules": ["ComparatorUtils", "Integer", "Comparator"], "class_members": [{"name": "o1", "type": "variable"}, {"name": "o2", "type": "variable"}, {"name": "reverseComparator", "type": "variable"}]}, "category": "unit", "description": "Tests the min method of ComparatorUtils with a custom comparator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/UnmodifiableSortedBag_uniqueSetTest.java", "testclass_name": "UnmodifiableSortedBag_uniqueSetTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import org.apache.commons.collections4.SortedBag;", "import org.apache.commons.collections4.set.UnmodifiableSet;", "import org.junit.jupiter.api.Test;", "import java.util.Collections;", "import java.util.Set;", "import java.util.TreeSet;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "UnmodifiableSortedBag_uniqueSetTest", "description": "Unit tests for the uniqueSet method of the UnmodifiableSortedBag class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testUniqueSet", "primary_tested": ["UnmodifiableSortedBag.uniqueSet()"], "associated_methods": ["UnmodifiableSet.contains(Object)", "UnmodifiableSet.contains(Object)"], "external_dependencies": {"modules": ["SortedBag", "TreeBag", "UnmodifiableSortedBag", "Set", "UnmodifiableSet"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the uniqueSet method of the UnmodifiableSortedBag to ensure it returns an unmodifiable set containing unique elements from the bag."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/CollectionBag_addTest.java", "testclass_name": "CollectionBag_addTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import org.apache.commons.collections4.Bag;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;"], "name": "CollectionBag_addTest", "description": "Unit tests for the add method in CollectionBag.", "class_members": {"variables": [{"name": "mockBag", "type": "Bag<String>"}, {"name": "collectionBag", "type": "CollectionBag<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAdd", "primary_tested": ["CollectionBag.add(String,int)"], "associated_methods": ["Bag.add(String,int)"], "external_dependencies": {"modules": ["Bag", "CollectionBag", "Mockito"], "class_members": [{"name": "mockBag", "type": "variable"}, {"name": "collectionBag", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the add functionality of the CollectionBag, verifying that the object is added with the specified count and that the underlying Bag's add method is called."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/CollectionSortedBag_addAllTest.java", "testclass_name": "CollectionSortedBag_addAllTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import org.apache.commons.collections4.SortedBag;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Collection;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;"], "name": "CollectionSortedBag_addAllTest", "description": "Unit tests for the addAll method of CollectionSortedBag.", "class_members": {"variables": [{"name": "mockBag", "type": "SortedBag<String>"}, {"name": "collectionSortedBag", "type": "CollectionSortedBag<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAddAll", "primary_tested": ["CollectionSortedBag.addAll(Collection<String>)"], "associated_methods": ["SortedBag.add(String,int)"], "external_dependencies": {"modules": ["SortedBag", "CollectionSortedBag", "Arrays", "Collection"], "class_members": [{"name": "mockBag", "type": "variable"}, {"name": "collectionSortedBag", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addAll functionality of the CollectionSortedBag, verifying that elements are added to the underlying SortedBag."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/IteratorUtils_forEachButLastTest.java", "testclass_name": "IteratorUtils_forEachButLastTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Iterator;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "IteratorUtils_forEachButLastTest", "description": "Unit tests for the IteratorUtils.forEachButLast method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testForEachButLast_SingleElement", "primary_tested": ["IteratorUtils.forEachButLast(Iterator<String>,Closure<String>)"], "external_dependencies": {"modules": ["IteratorUtils", "Arrays", "Closure"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the forEachButLast method with a single element in the iterator."}, {"name": "testForEachButLast_MultipleElements", "primary_tested": ["IteratorUtils.forEachButLast(Iterator<String>,Closure<String>)"], "external_dependencies": {"modules": ["IteratorUtils", "Arrays", "Closure"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the forEachButLast method with multiple elements in the iterator."}, {"name": "testForEachButLast_NullIterator", "primary_tested": ["IteratorUtils.forEachButLast(Iterator<String>,Closure<String>)"], "external_dependencies": {"modules": ["IteratorUtils", "Closure"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the forEachButLast method with a null iterator."}, {"name": "testForEachButLast_NullClosure", "primary_tested": ["IteratorUtils.forEachButLast(Iterator<String>,Closure<String>)"], "external_dependencies": {"modules": ["IteratorUtils", "Arrays"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the forEachButLast method with a null closure."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/TransformerUtils_switchMapTransformerTest.java", "testclass_name": "TransformerUtils_switchMapTransformerTest", "dependencies": ["package org.apache.commons.collections4;", "import org.apache.commons.collections4.functors.ConstantTransformer;", "import org.apache.commons.collections4.functors.EqualPredicate;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;"], "name": "TransformerUtils_switchMapTransformerTest", "description": "Unit tests for the switchMapTransformer method in TransformerUtils.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testSwitchMapTransformer_WithDefaultTransformer", "primary_tested": ["TransformerUtils.switchMapTransformer(Map<Integer,Transformer<Integer,String>>)"], "associated_methods": ["ConstantTransformer.constantTransformer(String)", "Transformer.transform(Integer)"], "external_dependencies": {"modules": ["org.apache.commons.collections4.functors.ConstantTransformer", "org.apache.commons.collections4.TransformerUtils", "java.util.HashMap", "java.util.Map"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the switchMapTransformer method with a default transformer."}, {"name": "testSwitchMapTransformer_WithoutDefaultTransformer", "primary_tested": ["TransformerUtils.switchMapTransformer(Map<Integer,Transformer<Integer,String>>)"], "associated_methods": ["ConstantTransformer.constantTransformer(String)", "Transformer.transform(Integer)"], "external_dependencies": {"modules": ["org.apache.commons.collections4.functors.ConstantTransformer", "org.apache.commons.collections4.TransformerUtils", "java.util.HashMap", "java.util.Map"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the switchMapTransformer method without a default transformer."}, {"name": "testSwitchMapTransformer_NullMap", "primary_tested": ["TransformerUtils.switchMapTransformer(Map<Integer,Transformer<Integer,String>>)"], "external_dependencies": {"modules": ["org.apache.commons.collections4.TransformerUtils", "java.util.Map"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the switchMapTransformer method with a null map, expecting a NullPointerException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/CollectionSortedBag_addTest.java", "testclass_name": "CollectionSortedBag_addTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import org.apache.commons.collections4.SortedBag;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import org.mockito.Mockito;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.mockito.Mockito.verify;"], "name": "CollectionSortedBag_addTest", "description": "Unit tests for the add method of CollectionSortedBag.", "class_members": {"variables": [{"name": "mockBag", "type": "SortedBag<String>"}, {"name": "collectionSortedBag", "type": "CollectionSortedBag<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAdd", "primary_tested": ["CollectionSortedBag.add(String,int)"], "associated_methods": ["SortedBag.add(String,int)"], "external_dependencies": {"modules": ["SortedBag", "CollectionSortedBag", "Mockito"], "class_members": [{"name": "mockBag", "type": "variable"}, {"name": "collectionSortedBag", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the add functionality of the CollectionSortedBag, verifying that the element is added to the underlying SortedBag."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/CollectionBag_retainAllTest.java", "testclass_name": "CollectionBag_retainAllTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import org.apache.commons.collections4.Bag;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import org.mockito.Mockito;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.Iterator;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.mockito.Mockito.*;"], "name": "CollectionBag_retainAllTest", "description": "Unit tests for the retainAll method in the CollectionBag class.", "class_members": {"variables": [{"name": "bag", "type": "CollectionBag<String>"}, {"name": "decoratedBag", "type": "Bag<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRetainAll_NonEmptyCollection", "primary_tested": ["CollectionBag.retainAll(Collection)"], "associated_methods": ["Bag.iterator()", "Iterator.hasNext()", "Iterator.next()", "Iterator.remove()"], "external_dependencies": {"modules": ["CollectionBag", "Bag", "Iterator", "Arrays", "Mockito"], "class_members": [{"name": "bag", "type": "variable"}, {"name": "decoratedBag", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retainAll method with a non-empty collection, ensuring that elements not in the collection are removed."}, {"name": "testRetainAll_NullCollection", "primary_tested": ["CollectionBag.retainAll(Collection)"], "associated_methods": ["Bag.retainAll(Collection)"], "external_dependencies": {"modules": ["CollectionBag", "Bag", "Mockito"], "class_members": [{"name": "bag", "type": "variable"}, {"name": "decoratedBag", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retainAll method with a null collection, ensuring that the method handles null input correctly."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/ArrayStack_popTest.java", "testclass_name": "ArrayStack_popTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.EmptyStackException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ArrayStack_popTest", "description": "Unit tests for the pop method of the ArrayStack class.", "class_members": {"variables": [{"name": "stack", "type": "ArrayStack<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPopOnNonEmptyStack", "primary_tested": ["ArrayStack.pop()"], "associated_methods": ["ArrayStack.push(String)", "ArrayStack.peek()"], "external_dependencies": {"modules": ["ArrayStack"], "class_members": [{"name": "stack", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the pop method on a non-empty stack, ensuring the correct item is returned and the stack is updated."}, {"name": "testPopOnEmptyStack", "primary_tested": ["ArrayStack.pop()"], "external_dependencies": {"modules": ["ArrayStack", "EmptyStackException"], "class_members": [{"name": "stack", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the pop method on an empty stack, expecting an EmptyStackException to be thrown."}, {"name": "testPopRemovesElement", "primary_tested": ["ArrayStack.pop()"], "associated_methods": ["ArrayStack.push(String)", "ArrayStack.search(String)"], "external_dependencies": {"modules": ["ArrayStack"], "class_members": [{"name": "stack", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the pop method removes the element from the stack."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/IteratorUtils_matchesAllTest.java", "testclass_name": "IteratorUtils_matchesAllTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Iterator;", "import java.util.function.Predicate;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "IteratorUtils_matchesAllTest", "description": "Unit tests for the IteratorUtils.matchesAll method, which checks if all elements in an iterator match a given predicate.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testMatchesAll_AllElementsMatch", "primary_tested": ["IteratorUtils.matchesAll(Iterator<Integer>,Predicate<Integer>)"], "external_dependencies": {"modules": ["IteratorUtils", "Arrays", "Predicate"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that IteratorUtils.matchesAll returns true when all elements in the iterator match the predicate."}, {"name": "testMatchesAll_SomeElementsDoNotMatch", "primary_tested": ["IteratorUtils.matchesAll(Iterator<Integer>,Predicate<Integer>)"], "external_dependencies": {"modules": ["IteratorUtils", "Arrays", "Predicate"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that IteratorUtils.matchesAll returns false when some elements in the iterator do not match the predicate."}, {"name": "testMatchesAll_NullIterator", "primary_tested": ["IteratorUtils.matchesAll(Iterator<Integer>,Predicate<Integer>)"], "external_dependencies": {"modules": ["IteratorUtils", "Predicate"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that IteratorUtils.matchesAll returns true when the iterator is null."}, {"name": "testMatchesAll_NullPredicate", "primary_tested": ["IteratorUtils.matchesAll(Iterator<Integer>,Predicate<Integer>)"], "external_dependencies": {"modules": ["IteratorUtils", "Arrays"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that IteratorUtils.matchesAll throws a NullPointerException when the predicate is null."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/TransformedBag_transformedBagTest.java", "testclass_name": "TransformedBag_transformedBagTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import org.apache.commons.collections4.Bag;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;"], "name": "TransformedBag_transformedBagTest", "description": "Unit tests for the TransformedBag class, specifically focusing on the transformedBag method.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testTransformedBagWithNonEmptyBag", "primary_tested": ["TransformedBag.transformedBag(Bag<String>,Transformer<String,String>)"], "associated_methods": ["Bag.isEmpty()", "Bag.toArray()", "Transformer.apply(String)"], "external_dependencies": {"modules": ["Bag", "Transformer", "TransformedBag"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformedBag method with a non-empty Bag, ensuring the transformer is applied correctly and the Bag is modified as expected."}, {"name": "testTransformedBagWithEmptyBag", "primary_tested": ["TransformedBag.transformedBag(Bag<String>,Transformer<String,String>)"], "associated_methods": ["Bag.isEmpty()"], "external_dependencies": {"modules": ["Bag", "Transformer", "TransformedBag"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformedBag method with an empty Bag, ensuring no modifications are made to the Bag."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_clearTest.java", "testclass_name": "CircularFifoQueue_clearTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CircularFifoQueue_clearTest", "description": "Unit tests for the clear functionality of the CircularFifoQueue class.", "class_members": {"variables": [{"name": "queue", "type": "CircularFifoQueue<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testClear", "primary_tested": ["CircularFifoQueue.clear()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clear functionality of the CircularFifoQueue when the queue is fully filled."}, {"name": "testClearOnEmptyQueue", "primary_tested": ["CircularFifoQueue.clear()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clear functionality of the CircularFifoQueue when the queue is initially empty."}, {"name": "testClearWithPartialFill", "primary_tested": ["CircularFifoQueue.clear()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clear functionality of the CircularFifoQueue when the queue is partially filled."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/MultiMapUtils_getValuesAsBagTest.java", "testclass_name": "MultiMapUtils_getValuesAsBagTest", "dependencies": ["package org.apache.commons.collections4;", "import org.apache.commons.collections4.bag.HashBag;", "import org.apache.commons.collections4.multimap.ArrayListValuedHashMap;", "import org.junit.jupiter.api.Test;", "import java.util.Collection;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;"], "name": "MultiMapUtils_getValuesAsBagTest", "description": "Unit tests for the MultiMapUtils.getValuesAsBag method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testGetValuesAsBag_WithNullMap", "primary_tested": ["MultiMapUtils.getValuesAsBag(MultiValuedMap<String,String>,String)"], "external_dependencies": {"modules": ["MultiValuedMap", "MultiMapUtils", "Bag"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of MultiMapUtils.getValuesAsBag when the input map is null."}, {"name": "testGetValuesAsBag_WithNonBagCollection", "primary_tested": ["MultiMapUtils.getValuesAsBag(MultiValuedMap<String,String>,String)"], "associated_methods": ["ArrayListValuedHashMap.put(String,String)", "Bag.size()", "Bag.getCount(String)"], "external_dependencies": {"modules": ["MultiValuedMap", "MultiMapUtils", "Bag", "ArrayListValuedHashMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of MultiMapUtils.getValuesAsBag when the input map contains non-bag collections."}, {"name": "testGetValuesAsBag_WithBagCollection", "primary_tested": ["MultiMapUtils.getValuesAsBag(MultiValuedMap<String,String>,String)"], "associated_methods": ["HashBag.add(String,int)", "ArrayListValuedHashMap.putAll(String,Collection<? extends String>)", "Bag.size()", "Bag.getCount(String)"], "external_dependencies": {"modules": ["MultiValuedMap", "MultiMapUtils", "Bag", "ArrayListValuedHashMap", "HashBag"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of MultiMapUtils.getValuesAsBag when the input map contains bag collections."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_uniqueIndexedCollectionTest.java", "testclass_name": "IndexedCollection_uniqueIndexedCollectionTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.map.MultiValueMap;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.HashMap;", "import static org.junit.jupiter.api.Assertions.assertNotNull;"], "name": "IndexedCollection_uniqueIndexedCollectionTest", "description": "Test for the uniqueIndexedCollection method of the IndexedCollection class.", "class_members": {"variables": [{"name": "coll", "type": "Collection<String>"}, {"name": "keyTransformer", "type": "Transformer<String, String>"}]}, "test_cases": [{"name": "testUniqueIndexedCollection", "primary_tested": ["IndexedCollection.uniqueIndexedCollection(Collection<String>,Transformer<String,String>)"], "external_dependencies": {"modules": ["IndexedCollection", "Transformer", "Arrays"], "class_members": [{"name": "coll", "type": "variable"}, {"name": "keyTransformer", "type": "variable"}]}, "category": "unit", "description": "Tests the creation of a unique indexed collection using the uniqueIndexedCollection method."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/IteratorUtils_indexOfTest.java", "testclass_name": "IteratorUtils_indexOfTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Iterator;", "import java.util.function.Predicate;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;"], "name": "IteratorUtils_indexOfTest", "description": "Unit tests for the indexOf method in IteratorUtils.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testIndexOf_ElementFound", "primary_tested": ["IteratorUtils.indexOf(Iterator<Integer>,org.apache.commons.collections4.Predicate<Integer>)"], "external_dependencies": {"modules": ["Arrays", "Iterator", "Predicate", "IteratorUtils", "org.apache.commons.collections4.Predicate"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the indexOf method when the element is found in the iterator."}, {"name": "testIndexOf_ElementNotFound", "primary_tested": ["IteratorUtils.indexOf(Iterator<Integer>,org.apache.commons.collections4.Predicate<Integer>)"], "external_dependencies": {"modules": ["Arrays", "Iterator", "Predicate", "IteratorUtils", "org.apache.commons.collections4.Predicate", "CollectionUtils"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the indexOf method when the element is not found in the iterator."}, {"name": "testIndexOf_NullIterator", "primary_tested": ["IteratorUtils.indexOf(Iterator<Integer>,org.apache.commons.collections4.Predicate<Integer>)"], "external_dependencies": {"modules": ["Predicate", "IteratorUtils", "org.apache.commons.collections4.Predicate", "CollectionUtils"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the indexOf method when the iterator is null."}, {"name": "testIndexOf_NullPredicate", "primary_tested": ["IteratorUtils.indexOf(Iterator<Integer>,org.apache.commons.collections4.Predicate<Integer>)"], "external_dependencies": {"modules": ["Arrays", "Iterator", "IteratorUtils"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the indexOf method when the predicate is null, expecting a NullPointerException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/TreeBag_addTest.java", "testclass_name": "TreeBag_addTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import org.junit.jupiter.api.Test;", "import java.util.Comparator;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "TreeBag_addTest", "description": "Unit tests for the add method of the TreeBag class, including scenarios with Comparable and non-Comparable objects, and the use of a custom Comparator.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testAddWithComparableObject", "primary_tested": ["TreeBag.add(String)"], "external_dependencies": {"modules": ["TreeBag", "String"]}, "category": "unit", "description": "Tests the add method of TreeBag with a Comparable object (String)."}, {"name": "testAddWithNonComparableObjectAndNoComparator", "primary_tested": ["TreeBag.add(Object)"], "external_dependencies": {"modules": ["TreeBag", "Object"]}, "category": "unit", "description": "Tests the add method of TreeBag with a non-Comparable object and no custom Comparator, expecting an IllegalArgumentException."}, {"name": "testAddWithNonComparableObjectAndCustomComparator", "primary_tested": ["TreeBag.add(Object)"], "external_dependencies": {"modules": ["TreeBag", "Object", "Comparator"]}, "category": "unit", "description": "Tests the add method of TreeBag with a non-Comparable object and a custom Comparator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/TransformedQueue_transformedQueueTest.java", "testclass_name": "TransformedQueue_transformedQueueTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.Test;", "import java.util.LinkedList;", "import java.util.Queue;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;"], "name": "TransformedQueue_transformedQueueTest", "description": "Unit tests for the TransformedQueue class, focusing on the transformedQueue method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testTransformedQueueWithNonEmptyQueue", "primary_tested": ["TransformedQueue.transformedQueue(Queue<String>,Transformer<String,String>)"], "associated_methods": ["TransformedQueue.size()", "TransformedQueue.poll()"], "external_dependencies": {"modules": ["Queue", "LinkedList", "Transformer", "TransformedQueue"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformation of a non-empty queue using the transformedQueue method."}, {"name": "testTransformedQueueWithEmptyQueue", "primary_tested": ["TransformedQueue.transformedQueue(Queue<String>,Transformer<String,String>)"], "associated_methods": ["TransformedQueue.size()"], "external_dependencies": {"modules": ["Queue", "LinkedList", "Transformer", "TransformedQueue"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformation of an empty queue using the transformedQueue method."}, {"name": "testTransformedQueueWithNullQueue", "primary_tested": ["TransformedQueue.transformedQueue(Queue<String>,Transformer<String,String>)"], "external_dependencies": {"modules": ["Queue", "Transformer", "TransformedQueue"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of the transformedQueue method when provided with a null queue."}, {"name": "testTransformedQueueWithNullTransformer", "primary_tested": ["TransformedQueue.transformedQueue(Queue<String>,Transformer<String,String>)"], "external_dependencies": {"modules": ["Queue", "LinkedList", "Transformer", "TransformedQueue"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of the transformedQueue method when provided with a null transformer."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/ComparatorUtils_maxTest.java", "testclass_name": "ComparatorUtils_maxTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.Comparator;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "ComparatorUtils_maxTest", "description": "Unit tests for the max functionality of ComparatorUtils with different comparators.", "class_members": {"variables": [{"name": "o1", "type": "Integer"}, {"name": "o2", "type": "Integer"}, {"name": "comparator", "type": "Comparator<Integer>"}]}, "test_cases": [{"name": "testMaxWithDefaultComparator", "primary_tested": ["ComparatorUtils.max(Integer,Integer,Comparator<Integer>)"], "external_dependencies": {"modules": ["ComparatorUtils", "Comparator"], "class_members": [{"name": "o1", "type": "variable"}, {"name": "o2", "type": "variable"}, {"name": "comparator", "type": "variable"}]}, "category": "unit", "description": "Tests the max functionality of ComparatorUtils with a null comparator, which should use the default comparator."}, {"name": "testMaxWithCustomComparator", "primary_tested": ["ComparatorUtils.max(Integer,Integer,Comparator<Integer>)"], "external_dependencies": {"modules": ["ComparatorUtils", "Comparator"], "class_members": [{"name": "o1", "type": "variable"}, {"name": "o2", "type": "variable"}, {"name": "comparator", "type": "variable"}]}, "category": "unit", "description": "Tests the max functionality of ComparatorUtils with a custom natural order comparator."}, {"name": "testMaxWithCustomComparatorReversed", "primary_tested": ["ComparatorUtils.max(Integer,Integer,Comparator<Integer>)"], "external_dependencies": {"modules": ["ComparatorUtils", "Comparator"], "class_members": [{"name": "o1", "type": "variable"}, {"name": "o2", "type": "variable"}, {"name": "comparator", "type": "variable"}]}, "category": "unit", "description": "Tests the max functionality of ComparatorUtils with a custom reversed order comparator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_addTest.java", "testclass_name": "IndexedCollection_addTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.Collection;", "import java.util.Collections;", "import java.util.HashMap;", "import java.util.ArrayList;"], "name": "IndexedCollection_addTest", "description": "Unit tests for the add functionality of the IndexedCollection class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testAdd", "primary_tested": ["IndexedCollection.add(String)"], "associated_methods": ["IndexedCollection.contains(String)", "IndexedCollection.get(int)"], "external_dependencies": {"modules": ["IndexedCollection", "Transformer", "ArrayList"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the add functionality of the IndexedCollection, ensuring that the element is added and can be retrieved and checked for existence."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/IteratorUtils_findTest.java", "testclass_name": "IteratorUtils_findTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Iterator;", "import java.util.function.Predicate;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "IteratorUtils_findTest", "description": "Unit tests for the find method in IteratorUtils class.", "class_members": {"variables": [{"name": "iterator", "type": "Iterator<Integer>"}, {"name": "predicate", "type": "Predicate<Integer>"}]}, "test_cases": [{"name": "testFind_ElementFound", "primary_tested": ["IteratorUtils.find(Iterator<Integer>,Predicate<Integer>)"], "external_dependencies": {"modules": ["IteratorUtils", "Arrays", "Predicate"], "class_members": [{"name": "iterator", "type": "variable"}, {"name": "predicate", "type": "variable"}]}, "category": "unit", "description": "Tests the find method when the element is found in the iterator."}, {"name": "testFind_ElementNotFound", "primary_tested": ["IteratorUtils.find(Iterator<Integer>,Predicate<Integer>)"], "external_dependencies": {"modules": ["IteratorUtils", "Arrays", "Predicate"], "class_members": [{"name": "iterator", "type": "variable"}, {"name": "predicate", "type": "variable"}]}, "category": "unit", "description": "Tests the find method when the element is not found in the iterator."}, {"name": "testFind_NullIterator", "primary_tested": ["IteratorUtils.find(Iterator<Integer>,Predicate<Integer>)"], "external_dependencies": {"modules": ["IteratorUtils", "Predicate"], "class_members": [{"name": "predicate", "type": "variable"}]}, "category": "unit", "description": "Tests the find method when the iterator is null."}, {"name": "testFind_NullPredicate", "primary_tested": ["IteratorUtils.find(Iterator<Integer>,Predicate<Integer>)"], "external_dependencies": {"modules": ["IteratorUtils", "Arrays"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "description": "Tests the find method when the predicate is null, expecting a NullPointerException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/ArrayStack_peekTest.java", "testclass_name": "ArrayStack_peekTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.EmptyStackException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ArrayStack_peekTest", "description": "Unit tests for the peek functionality of the ArrayStack class.", "class_members": {"variables": [{"name": "stack", "type": "ArrayStack<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPeekWithEmptyStack", "primary_tested": ["ArrayStack.peek()"], "external_dependencies": {"modules": ["ArrayStack", "EmptyStackException"], "class_members": [{"name": "stack", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the peek method on an empty stack, expecting an EmptyStackException."}, {"name": "testPeekWithNonEmptyStack", "primary_tested": ["ArrayStack.peek()"], "associated_methods": ["ArrayStack.push(String)", "ArrayStack.size()"], "external_dependencies": {"modules": ["ArrayStack"], "class_members": [{"name": "stack", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the peek method on a non-empty stack after pushing an item."}, {"name": "testPeekAfterPushAndPop", "primary_tested": ["ArrayStack.peek()"], "associated_methods": ["ArrayStack.push(String)", "ArrayStack.pop()", "ArrayStack.size()"], "external_dependencies": {"modules": ["ArrayStack"], "class_members": [{"name": "stack", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the peek method after pushing and popping items from the stack."}, {"name": "testPeekAfterMultiplePushes", "primary_tested": ["ArrayStack.peek()"], "associated_methods": ["ArrayStack.push(String)", "ArrayStack.size()"], "external_dependencies": {"modules": ["ArrayStack"], "class_members": [{"name": "stack", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the peek method after multiple pushes to the stack."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_containsAllTest.java", "testclass_name": "IndexedCollection_containsAllTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.Collections;", "import java.util.HashMap;", "import org.apache.commons.collections4.map.MultiValueMap;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "IndexedCollection_containsAllTest", "description": "Unit tests for the containsAll method of the IndexedCollection class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testContainsAll_AllElementsPresent", "primary_tested": ["IndexedCollection.containsAll(Collection)"], "external_dependencies": {"modules": ["IndexedCollection", "MultiValueMap", "HashMap", "Arrays", "Collection"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the containsAll method when all elements are present in the collection."}, {"name": "testContainsAll_SomeElementsMissing", "primary_tested": ["IndexedCollection.containsAll(Collection)"], "external_dependencies": {"modules": ["IndexedCollection", "MultiValueMap", "HashMap", "Arrays", "Collection"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the containsAll method when some elements are missing in the collection."}, {"name": "testContainsAll_EmptyCollection", "primary_tested": ["IndexedCollection.containsAll(Collection)"], "external_dependencies": {"modules": ["IndexedCollection", "MultiValueMap", "HashMap", "Arrays", "Collections", "Collection"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the containsAll method when the collection is empty."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_pollTest.java", "testclass_name": "CircularFifoQueue_pollTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CircularFifoQueue_pollTest", "description": "Unit tests for the poll method of CircularFifoQueue.", "class_members": {"variables": [{"name": "queue", "type": "CircularFifoQueue<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPollWhenQueueIsEmpty", "primary_tested": ["CircularFifoQueue.poll()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the poll method when the queue is empty."}, {"name": "testPollWhenQueueHasElements", "primary_tested": ["CircularFifoQueue.poll()"], "associated_methods": ["CircularFifoQueue.add(String)", "CircularFifoQueue.isEmpty()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the poll method when the queue has elements."}, {"name": "testPollWhenQueueIsFull", "primary_tested": ["CircularFifoQueue.poll()"], "associated_methods": ["CircularFifoQueue.add(String)", "CircularFifoQueue.isEmpty()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the poll method when the queue is full."}, {"name": "testPollAfterAddingAndRemovingElements", "primary_tested": ["CircularFifoQueue.poll()"], "associated_methods": ["CircularFifoQueue.add(String)", "CircularFifoQueue.isEmpty()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the poll method after adding and removing elements from the queue."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/PredicatedCollection_addAllTest.java", "testclass_name": "PredicatedCollection_addAllTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import org.apache.commons.collections4.Predicate;", "import org.apache.commons.collections4.functors.TruePredicate;", "import org.junit.jupiter.api.Test;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "PredicatedCollection_addAllTest", "description": "Unit tests for the addAll method of PredicatedCollection.", "class_members": {"variables": [{"name": "truePredicate", "type": "Predicate<String>"}, {"name": "predicatedCollection", "type": "PredicatedCollection<String>"}, {"name": "initialItems", "type": "Collection<String>"}, {"name": "newItems", "type": "Collection<String>"}]}, "test_cases": [{"name": "testAddAll", "primary_tested": ["PredicatedCollection.addAll(Collection<? extends String>)"], "associated_methods": ["PredicatedCollection.containsAll(Collection<? extends String>)"], "external_dependencies": {"modules": ["Predicate", "TruePredicate", "PredicatedCollection", "ArrayList", "Arrays"], "class_members": [{"name": "truePredicate", "type": "variable"}, {"name": "predicatedCollection", "type": "variable"}, {"name": "initialItems", "type": "variable"}, {"name": "newItems", "type": "variable"}]}, "category": "unit", "description": "Tests the addAll functionality of the PredicatedCollection, ensuring that all items are added and can be verified using containsAll."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_getTest.java", "testclass_name": "CircularFifoQueue_getTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CircularFifoQueue_getTest", "description": "Unit tests for the get method of CircularFifoQueue.", "class_members": {"variables": [{"name": "queue", "type": "CircularFifoQueue<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetValidIndex", "primary_tested": ["CircularFifoQueue.get(int)"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method with valid indices."}, {"name": "testGetInvalidIndex", "primary_tested": ["CircularFifoQueue.get(int)"], "external_dependencies": {"modules": ["CircularFifoQueue", "NoSuchElementException"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method with invalid indices, expecting NoSuchElementException."}, {"name": "testGetAfterWrapAround", "primary_tested": ["CircularFifoQueue.get(int)"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method after the queue has wrapped around."}, {"name": "testGetEmptyQueue", "primary_tested": ["CircularFifoQueue.get(int)"], "external_dependencies": {"modules": ["CircularFifoQueue", "NoSuchElementException"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method on an empty queue, expecting NoSuchElementException."}, {"name": "testGetAfterClear", "primary_tested": ["CircularFifoQueue.get(int)"], "associated_methods": ["CircularFifoQueue.clear()"], "external_dependencies": {"modules": ["CircularFifoQueue", "NoSuchElementException"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method after clearing the queue, expecting NoSuchElementException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/LazySortedMap_headMapTest.java", "testclass_name": "LazySortedMap_headMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.Factory;", "import org.junit.jupiter.api.Test;", "import java.util.SortedMap;", "import java.util.TreeMap;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "LazySortedMap_headMapTest", "description": "Unit tests for the headMap functionality of LazySortedMap.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testHeadMap", "primary_tested": ["LazySortedMap.headMap(Integer)"], "associated_methods": ["SortedMap.size()", "SortedMap.containsKey(Integer)", "SortedMap.get(Integer)"], "external_dependencies": {"modules": ["org.apache.commons.collections4.Factory", "java.util.SortedMap", "java.util.TreeMap", "org.apache.commons.collections4.map.LazySortedMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the headMap functionality of the LazySortedMap, ensuring it returns the correct sub-map."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/CollectionSortedBag_retainAllTest.java", "testclass_name": "CollectionSortedBag_retainAllTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import org.apache.commons.collections4.SortedBag;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import org.mockito.Mockito;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.Iterator;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.mockito.Mockito.*;"], "name": "CollectionSortedBag_retainAllTest", "description": "Unit tests for the retainAll method in CollectionSortedBag.", "class_members": {"variables": [{"name": "bag", "type": "CollectionSortedBag<String>"}, {"name": "mockBag", "type": "SortedBag<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRetainAll_NonEmptyCollection", "primary_tested": ["CollectionSortedBag.retainAll(Collection)"], "associated_methods": ["SortedBag.iterator()", "Iterator.hasNext()", "Iterator.next()", "SortedBag.contains(Object)", "Iterator.remove()"], "external_dependencies": {"modules": ["org.apache.commons.collections4.SortedBag", "org.mockito.Mockito", "java.util.Arrays", "java.util.Collection", "java.util.Iterator"], "class_members": [{"name": "bag", "type": "variable"}, {"name": "mockBag", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retainAll method with a non-empty collection, ensuring that elements not in the collection are removed."}, {"name": "testRetainAll_NullCollection", "primary_tested": ["CollectionSortedBag.retainAll(Collection)"], "associated_methods": ["SortedBag.retainAll(Collection)"], "external_dependencies": {"modules": ["org.apache.commons.collections4.SortedBag", "org.mockito.Mockito", "java.util.Collection"], "class_members": [{"name": "bag", "type": "variable"}, {"name": "mockBag", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retainAll method with a null collection, ensuring that the method handles null input correctly."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/UnmodifiableOrderedMap_valuesTest.java", "testclass_name": "UnmodifiableOrderedMap_valuesTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.OrderedMap;", "import org.apache.commons.collections4.collection.UnmodifiableCollection;", "import org.junit.jupiter.api.Test;", "import java.util.Collection;", "import java.util.HashMap;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "UnmodifiableOrderedMap_valuesTest", "description": "Tests the behavior of the values() method in UnmodifiableOrderedMap to ensure it returns an unmodifiable collection.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testValuesReturnsUnmodifiableCollection", "primary_tested": ["OrderedMap.values()"], "external_dependencies": {"modules": ["OrderedMap", "UnmodifiableCollection", "HashMap", "Map"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the values() method of UnmodifiableOrderedMap returns an instance of UnmodifiableCollection."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_reindexTest.java", "testclass_name": "IndexedCollection_reindexTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import org.apache.commons.collections4.MultiMap;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.map.MultiValueMap;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.Collection;", "import java.util.HashMap;", "import java.util.HashSet;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;"], "name": "IndexedCollection_reindexTest", "description": "Unit tests for the reindex functionality of the IndexedCollection class.", "class_members": {"variables": [{"name": "indexedCollection", "type": "IndexedCollection<String, String>"}, {"name": "mockIndex", "type": "MultiMap<String, String>"}, {"name": "mockKeyTransformer", "type": "Transformer<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testReindex", "primary_tested": ["IndexedCollection.reindex()"], "associated_methods": ["IndexedCollection.get(String)", "IndexedCollection.contains(String)"], "external_dependencies": {"modules": ["IndexedCollection", "MultiMap", "Transformer", "MultiValueMap", "HashMap", "HashSet"], "class_members": [{"name": "indexedCollection", "type": "variable"}, {"name": "mockIndex", "type": "variable"}, {"name": "mockKeyTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the reindex functionality of the IndexedCollection, ensuring that elements are correctly indexed and retrievable."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_elementTest.java", "testclass_name": "CircularFifoQueue_elementTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CircularFifoQueue_elementTest", "description": "Unit tests for the element method of CircularFifoQueue.", "class_members": {"variables": [{"name": "queue", "type": "CircularFifoQueue<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testElementWhenQueueIsEmpty", "primary_tested": ["CircularFifoQueue.element()"], "external_dependencies": {"modules": ["CircularFifoQueue", "NoSuchElementException"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the element method when the queue is empty, expecting a NoSuchElementException."}, {"name": "testElementWhenQueueHasElements", "primary_tested": ["CircularFifoQueue.element()"], "associated_methods": ["CircularFifoQueue.add(String)"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the element method when the queue has elements, expecting the first element added."}, {"name": "testElementAfterAddingAndRemovingElements", "primary_tested": ["CircularFifoQueue.element()"], "associated_methods": ["CircularFifoQueue.add(String)", "CircularFifoQueue.remove()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the element method after adding and removing elements, expecting the new first element."}, {"name": "testElementAfterQueueIsFull", "primary_tested": ["CircularFifoQueue.element()"], "associated_methods": ["CircularFifoQueue.add(String)"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the element method after the queue is full, expecting the first element after the queue has wrapped around."}, {"name": "testElementAfterClearingQueue", "primary_tested": ["CircularFifoQueue.element()"], "associated_methods": ["CircularFifoQueue.add(String)", "CircularFifoQueue.clear()"], "external_dependencies": {"modules": ["CircularFifoQueue", "NoSuchElementException"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the element method after clearing the queue, expecting a NoSuchElementException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_removeIfTest.java", "testclass_name": "CompositeCollection_removeIfTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.List;", "import java.util.function.Predicate;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeCollection_removeIfTest", "description": "Unit tests for the removeIf functionality of the CompositeCollection class.", "class_members": {"variables": [{"name": "c", "type": "CompositeCollection<String>"}, {"name": "one", "type": "Collection<String>"}, {"name": "two", "type": "Collection<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveIf_AllElementsRemoved", "primary_tested": ["CompositeCollection.removeIf(Predicate<String>)"], "external_dependencies": {"modules": ["CompositeCollection", "Predicate"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeIf functionality when all elements are removed."}, {"name": "testRemoveIf_NoElementsRemoved", "primary_tested": ["CompositeCollection.removeIf(Predicate<String>)"], "external_dependencies": {"modules": ["CompositeCollection", "Predicate"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeIf functionality when no elements are removed."}, {"name": "testRemoveIf_SomeElementsRemoved", "primary_tested": ["CompositeCollection.removeIf(Predicate<String>)"], "external_dependencies": {"modules": ["CompositeCollection", "Predicate"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeIf functionality when some elements are removed."}, {"name": "testRemoveIf_NullFilter", "primary_tested": ["CompositeCollection.removeIf(Predicate<String>)"], "external_dependencies": {"modules": ["CompositeCollection"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeIf functionality when the filter is null."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/TransformedCollection_transformedCollectionTest.java", "testclass_name": "TransformedCollection_transformedCollectionTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.Test;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.Collections;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "TransformedCollection_transformedCollectionTest", "description": "Unit tests for the TransformedCollection class, specifically testing the transformedCollection method with different types of collections.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testTransformedCollectionWithNonEmptyCollection", "primary_tested": ["TransformedCollection.transformedCollection(Collection<String>,Transformer<String,String>)"], "associated_methods": ["TransformedCollection.size()", "TransformedCollection.contains(String)"], "external_dependencies": {"modules": ["org.apache.commons.collections4.Transformer", "java.util.ArrayList", "java.util.Arrays", "java.util.Collection", "org.apache.commons.collections4.collection.TransformedCollection"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformedCollection method with a non-empty collection, ensuring the transformation is applied correctly and the transformed collection contains the expected elements."}, {"name": "testTransformedCollectionWithEmptyCollection", "primary_tested": ["TransformedCollection.transformedCollection(Collection<String>,Transformer<String,String>)"], "associated_methods": ["TransformedCollection.isEmpty()"], "external_dependencies": {"modules": ["org.apache.commons.collections4.Transformer", "java.util.Collections", "java.util.Collection", "org.apache.commons.collections4.collection.TransformedCollection"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformedCollection method with an empty collection, ensuring the transformed collection is also empty."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_removeTest.java", "testclass_name": "CircularFifoQueue_removeTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CircularFifoQueue_removeTest", "description": "Unit tests for the remove functionality of the CircularFifoQueue class.", "class_members": {"variables": [{"name": "queue", "type": "CircularFifoQueue<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveWhenQueueIsEmpty", "primary_tested": ["CircularFifoQueue.remove()"], "external_dependencies": {"modules": ["CircularFifoQueue", "NoSuchElementException"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior of the remove method when the queue is empty, expecting a NoSuchElementException."}, {"name": "testRemoveSingleElement", "primary_tested": ["CircularFifoQueue.remove()"], "associated_methods": ["CircularFifoQueue.add(String)", "CircularFifoQueue.size()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of a single element from the queue."}, {"name": "testRemoveMultipleElements", "primary_tested": ["CircularFifoQueue.remove()"], "associated_methods": ["CircularFifoQueue.add(String)", "CircularFifoQueue.peek()", "CircularFifoQueue.size()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of multiple elements from the queue."}, {"name": "testRemoveWithWrapAround", "primary_tested": ["CircularFifoQueue.remove()"], "associated_methods": ["CircularFifoQueue.add(String)", "CircularFifoQueue.peek()", "CircularFifoQueue.size()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of elements from the queue when it wraps around."}, {"name": "testRemoveAllElements", "primary_tested": ["CircularFifoQueue.remove()"], "associated_methods": ["CircularFifoQueue.add(String)", "CircularFifoQueue.size()"], "external_dependencies": {"modules": ["CircularFifoQueue", "NoSuchElementException"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of all elements from the queue, expecting a NoSuchElementException when attempting to remove from an empty queue."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/CompositeMap_entrySetTest.java", "testclass_name": "CompositeMap_entrySetTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.set.CompositeSet;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;", "import java.util.Set;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "CompositeMap_entrySetTest", "description": "Unit tests for the entrySet method of the CompositeMap class.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testEntrySet", "primary_tested": ["CompositeMap.entrySet()"], "associated_methods": ["CompositeSet.containsAll(Collection<?>)", "CompositeSet.size()"], "external_dependencies": {"modules": ["CompositeMap", "HashMap", "Map", "Set"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the entrySet method of the CompositeMap class, ensuring it correctly combines entries from multiple maps."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_addAllTest.java", "testclass_name": "CompositeCollection_addAllTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeCollection_addAllTest", "description": "Unit tests for the addAll functionality of the CompositeCollection class.", "class_members": {"variables": [{"name": "c", "type": "CompositeCollection<String>"}, {"name": "one", "type": "Collection<String>"}, {"name": "two", "type": "Collection<String>"}]}, "fixtures": ["setUpTest"], "test_cases": [{"name": "testAddAllWithMutator", "primary_tested": ["CompositeCollection.addAll(Collection<? extends String>)"], "associated_methods": ["CompositeCollection.setMutator(CompositeCollection.CollectionMutator<String>)", "CompositeCollection.addComposited(Collection<String>)", "CompositeCollection.size()", "CompositeCollection.containsAll(Collection<? extends String>)"], "external_dependencies": {"modules": ["CompositeCollection", "Collection", "ArrayList", "Arrays", "HashSet"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the addAll functionality of the CompositeCollection with a custom mutator."}, {"name": "testAddAllWithoutMutator", "primary_tested": ["CompositeCollection.addAll(Collection<? extends String>)"], "associated_methods": ["CompositeCollection.addComposited(Collection<String>)"], "external_dependencies": {"modules": ["CompositeCollection", "Collection", "ArrayList", "Arrays", "HashSet"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the addAll functionality of the CompositeCollection without a mutator, expecting an UnsupportedOperationException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_removeTest.java", "testclass_name": "PassiveExpiringMap_removeTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;"], "name": "PassiveExpiringMap_removeTest", "description": "Unit tests for the remove functionality of PassiveExpiringMap.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testRemove", "primary_tested": ["PassiveExpiringMap.remove(String)"], "associated_methods": ["PassiveExpiringMap.get(String)"], "external_dependencies": {"modules": ["java.util.HashMap", "java.util.Map", "org.apache.commons.collections4.map.PassiveExpiringMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the remove functionality of the PassiveExpiringMap, ensuring that the value is removed and can no longer be retrieved."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_removeMultiKeyTest.java", "testclass_name": "MultiKeyMap_removeMultiKeyTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.keyvalue.MultiKey;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "MultiKeyMap_removeMultiKeyTest", "description": "Unit tests for the removeMultiKey functionality of the MultiKeyMap class.", "class_members": {"variables": [{"name": "map", "type": "MultiKeyMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveMultiKey_KeyExists", "primary_tested": ["MultiKeyMap.removeMultiKey(String,String)"], "associated_methods": ["MultiKeyMap.put(String,String,String)", "MultiKeyMap.containsKey(String,String)"], "external_dependencies": {"modules": ["MultiKeyMap", "MultiKey"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of a key-value pair from the MultiKeyMap when the key exists."}, {"name": "testRemoveMultiKey_KeyDoesNotExist", "primary_tested": ["MultiKeyMap.removeMultiKey(String,String)"], "external_dependencies": {"modules": ["MultiKeyMap", "MultiKey"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of a key-value pair from the MultiKeyMap when the key does not exist."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_cloneTest.java", "testclass_name": "MultiKeyMap_cloneTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "MultiKeyMap_cloneTest", "description": "Unit tests for the clone functionality of the MultiKeyMap class.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testClone", "primary_tested": ["MultiKeyMap.clone()"], "associated_methods": ["MultiKeyMap.put(String,String,String)", "MultiKeyMap.get(String,String)"], "external_dependencies": {"modules": ["MultiKeyMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the clone functionality of the MultiKeyMap to ensure that the cloned map contains the same values as the original."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_nonUniqueIndexedCollectionTest.java", "testclass_name": "IndexedCollection_nonUniqueIndexedCollectionTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Arrays;", "import java.util.Collection;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "IndexedCollection_nonUniqueIndexedCollectionTest", "description": "Tests for the non-unique indexed collection functionality in the IndexedCollection class.", "class_members": {"variables": [{"name": "keyTransformer", "type": "Transformer<String, Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNonUniqueIndexedCollection", "primary_tested": ["IndexedCollection.nonUniqueIndexedCollection(Collection<String>,Transformer<String,Integer>)"], "associated_methods": ["IndexedCollection.size()", "IndexedCollection.contains(String)"], "external_dependencies": {"modules": ["IndexedCollection", "Transformer", "Arrays"], "class_members": [{"name": "keyTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the creation and basic operations of a non-unique indexed collection with a non-empty collection."}, {"name": "testNonUniqueIndexedCollectionWithEmptyCollection", "primary_tested": ["IndexedCollection.nonUniqueIndexedCollection(Collection<String>,Transformer<String,Integer>)"], "associated_methods": ["IndexedCollection.size()"], "external_dependencies": {"modules": ["IndexedCollection", "Transformer", "Arrays"], "class_members": [{"name": "keyTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the creation and basic operations of a non-unique indexed collection with an empty collection."}, {"name": "testNonUniqueIndexedCollectionWithDuplicateKeys", "primary_tested": ["IndexedCollection.nonUniqueIndexedCollection(Collection<String>,Transformer<String,Integer>)"], "associated_methods": ["IndexedCollection.size()", "IndexedCollection.contains(String)"], "external_dependencies": {"modules": ["IndexedCollection", "Transformer", "Arrays"], "class_members": [{"name": "keyTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the creation and basic operations of a non-unique indexed collection with duplicate keys."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_previousKeyTest.java", "testclass_name": "ListOrderedMap_previousKeyTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ListOrderedMap_previousKeyTest", "description": "Unit tests for the previousKey method in ListOrderedMap.", "class_members": {"variables": [{"name": "listOrderedMap", "type": "ListOrderedMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPreviousKeyWithExistingKey", "primary_tested": ["ListOrderedMap.previousKey(String)"], "external_dependencies": {"modules": ["ListOrderedMap"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the previousKey method with an existing key in the ListOrderedMap."}, {"name": "testPreviousKeyWithFirstKey", "primary_tested": ["ListOrderedMap.previousKey(String)"], "external_dependencies": {"modules": ["ListOrderedMap"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the previousKey method with the first key in the ListOrderedMap."}, {"name": "testPreviousKeyWithNonExistingKey", "primary_tested": ["ListOrderedMap.previousKey(String)"], "external_dependencies": {"modules": ["ListOrderedMap"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the previousKey method with a non-existing key in the ListOrderedMap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_iteratorTest.java", "testclass_name": "CircularFifoQueue_iteratorTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.Iterator;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CircularFifoQueue_iteratorTest", "description": "Unit tests for the iterator functionality of the CircularFifoQueue class.", "class_members": {"variables": [{"name": "queue", "type": "CircularFifoQueue<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testIteratorHasNext", "primary_tested": ["Iterator.hasNext()"], "external_dependencies": {"modules": ["CircularFifoQueue", "Iterator"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method of the iterator for the CircularFifoQueue."}, {"name": "testIteratorNext", "primary_tested": ["Iterator.next()"], "external_dependencies": {"modules": ["CircularFifoQueue", "Iterator", "NoSuchElementException"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method of the iterator for the CircularFifoQueue, including handling of NoSuchElementException."}, {"name": "testIteratorRemove", "primary_tested": ["Iterator.remove()"], "associated_methods": ["CircularFifoQueue.size()", "CircularFifoQueue.get(int)"], "external_dependencies": {"modules": ["CircularFifoQueue", "Iterator"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the remove method of the iterator for the CircularFifoQueue, ensuring elements are correctly removed and queue size is updated."}, {"name": "testIteratorRemoveFirstElement", "primary_tested": ["Iterator.remove()"], "associated_methods": ["CircularFifoQueue.size()", "CircularFifoQueue.get(int)"], "external_dependencies": {"modules": ["CircularFifoQueue", "Iterator"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the remove method of the iterator for the CircularFifoQueue when removing the first element."}, {"name": "testIteratorRemoveWithoutNext", "primary_tested": ["Iterator.remove()"], "external_dependencies": {"modules": ["CircularFifoQueue", "Iterator", "IllegalStateException"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the remove method of the iterator for the CircularFifoQueue without calling next, expecting an IllegalStateException."}, {"name": "testIteratorRemoveFullQueue", "primary_tested": ["Iterator.remove()"], "associated_methods": ["CircularFifoQueue.size()", "CircularFifoQueue.get(int)"], "external_dependencies": {"modules": ["CircularFifoQueue", "Iterator"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the remove method of the iterator for the CircularFifoQueue when the queue is full."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_containsKeyTest.java", "testclass_name": "PassiveExpiringMap_containsKeyTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;"], "name": "PassiveExpiringMap_containsKeyTest", "description": "Unit tests for the containsKey method in PassiveExpiringMap.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testContainsKey_KeyExistsAndNotExpired", "primary_tested": ["PassiveExpiringMap.containsKey(String)"], "external_dependencies": {"modules": ["PassiveExpiringMap", "HashMap", "Map"]}, "category": "unit", "description": "Tests that the containsKey method returns true when the key exists and is not expired."}, {"name": "testContainsKey_KeyExistsButExpired", "primary_tested": ["PassiveExpiringMap.containsKey(String)"], "external_dependencies": {"modules": ["PassiveExpiringMap", "HashMap", "Map"]}, "category": "unit", "description": "Tests that the containsKey method returns false when the key exists but is expired."}, {"name": "testContainsKey_KeyDoesNotExist", "primary_tested": ["PassiveExpiringMap.containsKey(String)"], "external_dependencies": {"modules": ["PassiveExpiringMap", "HashMap", "Map"]}, "category": "unit", "description": "Tests that the containsKey method returns false when the key does not exist."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_isEmptyTest.java", "testclass_name": "CompositeCollection_isEmptyTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Collection;", "import java.util.HashSet;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeCollection_isEmptyTest", "description": "Unit tests for the isEmpty functionality of the CompositeCollection class.", "class_members": {"variables": [{"name": "c", "type": "CompositeCollection<String>"}, {"name": "one", "type": "Collection<String>"}, {"name": "two", "type": "Collection<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testIsEmptyWhenAllCollectionsAreEmpty", "primary_tested": ["CompositeCollection.isEmpty()"], "associated_methods": ["CompositeCollection.addComposited(Collection<String>)"], "external_dependencies": {"modules": ["CompositeCollection", "Collection"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isEmpty method when all collections in the CompositeCollection are empty."}, {"name": "testIsEmptyWhenOneCollectionIsNotEmpty", "primary_tested": ["CompositeCollection.isEmpty()"], "associated_methods": ["CompositeCollection.addComposited(Collection<String>)"], "external_dependencies": {"modules": ["CompositeCollection", "Collection"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isEmpty method when one collection in the CompositeCollection is not empty."}, {"name": "testIsEmptyAfterAddingAndRemovingCollections", "primary_tested": ["CompositeCollection.isEmpty()"], "associated_methods": ["CompositeCollection.addComposited(Collection<String>)", "CompositeCollection.removeComposited(Collection<String>)"], "external_dependencies": {"modules": ["CompositeCollection", "Collection", "ArrayList"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isEmpty method after adding and removing collections from the CompositeCollection."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_containsTest.java", "testclass_name": "IndexedCollection_containsTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static java.util.Arrays.asList;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Collection;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "IndexedCollection_containsTest", "description": "Unit tests for the contains functionality of the IndexedCollection class.", "class_members": {"variables": [{"name": "indexedCollection", "type": "IndexedCollection<Integer, String>"}, {"name": "originalCollection", "type": "Collection<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testContainsReturnsTrueForExistingElement", "primary_tested": ["IndexedCollection.contains(String)"], "external_dependencies": {"modules": ["IndexedCollection", "Collection"], "class_members": [{"name": "indexedCollection", "type": "variable"}, {"name": "originalCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the contains method returns true for elements that exist in the IndexedCollection."}, {"name": "testContainsReturnsFalseForNonExistingElement", "primary_tested": ["IndexedCollection.contains(String)"], "external_dependencies": {"modules": ["IndexedCollection", "Collection"], "class_members": [{"name": "indexedCollection", "type": "variable"}, {"name": "originalCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the contains method returns false for elements that do not exist in the IndexedCollection."}, {"name": "testContainsAfterReindex", "primary_tested": ["IndexedCollection.contains(String)"], "associated_methods": ["IndexedCollection.reindex()"], "external_dependencies": {"modules": ["IndexedCollection", "Collection"], "class_members": [{"name": "indexedCollection", "type": "variable"}, {"name": "originalCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the contains method after reindexing the IndexedCollection."}, {"name": "testContainsAfterElementRemoval", "primary_tested": ["IndexedCollection.contains(String)"], "associated_methods": ["IndexedCollection.reindex()"], "external_dependencies": {"modules": ["IndexedCollection", "Collection"], "class_members": [{"name": "indexedCollection", "type": "variable"}, {"name": "originalCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the contains method after removing an element and reindexing the IndexedCollection."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/SingletonMap_hashCodeTest.java", "testclass_name": "SingletonMap_hashCodeTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import org.junit.jupiter.api.Test;"], "name": "SingletonMap_hashCodeTest", "description": "Unit tests for the hashCode method of the SingletonMap class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testHashCodeWithNonNullKeyAndValue", "primary_tested": ["SingletonMap.hashCode()"], "external_dependencies": {"modules": ["SingletonMap", "String"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the hashCode method of SingletonMap with non-null key and value."}, {"name": "testHashCodeWithNullKeyAndNonNullValue", "primary_tested": ["SingletonMap.hashCode()"], "external_dependencies": {"modules": ["SingletonMap", "String"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the hashCode method of SingletonMap with null key and non-null value."}, {"name": "testHashCodeWithNonNullKeyAndNullValue", "primary_tested": ["SingletonMap.hashCode()"], "external_dependencies": {"modules": ["SingletonMap", "String"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the hashCode method of SingletonMap with non-null key and null value."}, {"name": "testHashCodeWithNullKeyAndNullValue", "primary_tested": ["SingletonMap.hashCode()"], "external_dependencies": {"modules": ["SingletonMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the hashCode method of SingletonMap with null key and null value."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_getTest.java", "testclass_name": "IndexedCollection_getTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static java.util.Arrays.asList;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.ArrayList;", "import java.util.Collection;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "IndexedCollection_getTest", "description": "Unit tests for the get method of the IndexedCollection class.", "class_members": {"variables": [{"name": "indexedCollection", "type": "IndexedCollection<Integer, String>"}, {"name": "originalCollection", "type": "Collection<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetReturnsFirstElementForExistingKey", "primary_tested": ["IndexedCollection.get(Integer)"], "external_dependencies": {"modules": ["IndexedCollection", "Collection"], "class_members": [{"name": "indexedCollection", "type": "variable"}, {"name": "originalCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the get method returns the correct element for existing keys."}, {"name": "testGetReturnsNullForNonExistingKey", "primary_tested": ["IndexedCollection.get(Integer)"], "external_dependencies": {"modules": ["IndexedCollection", "Collection"], "class_members": [{"name": "indexedCollection", "type": "variable"}, {"name": "originalCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the get method returns null for non-existing keys."}, {"name": "testGetReturnsNullForEmptyCollection", "primary_tested": ["IndexedCollection.get(Integer)"], "external_dependencies": {"modules": ["IndexedCollection"], "class_members": [{"name": "indexedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the get method returns null for an empty collection."}, {"name": "testGetReturnsFirstElementAfterReindex", "primary_tested": ["IndexedCollection.get(Integer)"], "associated_methods": ["IndexedCollection.reindex()"], "external_dependencies": {"modules": ["IndexedCollection", "Collection"], "class_members": [{"name": "indexedCollection", "type": "variable"}, {"name": "originalCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the get method returns the correct element after reindexing the collection."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_retainAllTest.java", "testclass_name": "IndexedCollection_retainAllTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static java.util.Arrays.asList;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Collection;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "IndexedCollection_retainAllTest", "description": "Unit tests for the retainAll functionality of the IndexedCollection class.", "class_members": {"variables": [{"name": "indexedCollection", "type": "IndexedCollection<Integer, String>"}, {"name": "originalCollection", "type": "Collection<String>"}], "methods": [{"name": "decorateUniqueCollection", "signature": "IndexedCollection<Integer, String> decorateUniqueCollection(Collection<String> original)"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRetainAllWithMatchingElements", "primary_tested": ["IndexedCollection.retainAll(Collection<String>)"], "external_dependencies": {"modules": ["IndexedCollection", "Collection"], "class_members": [{"name": "indexedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retainAll functionality with matching elements."}, {"name": "testRetainAllWithNoMatchingElements", "primary_tested": ["IndexedCollection.retainAll(Collection<String>)"], "external_dependencies": {"modules": ["IndexedCollection", "Collection"], "class_members": [{"name": "indexedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retainAll functionality with no matching elements."}, {"name": "testRetainAllWithAllMatchingElements", "primary_tested": ["IndexedCollection.retainAll(Collection<String>)"], "external_dependencies": {"modules": ["IndexedCollection", "Collection"], "class_members": [{"name": "indexedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retainAll functionality with all matching elements."}, {"name": "testRetainAllWithEmptyCollection", "primary_tested": ["IndexedCollection.retainAll(Collection<String>)"], "external_dependencies": {"modules": ["IndexedCollection", "Collection"], "class_members": [{"name": "indexedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retainAll functionality with an empty collection."}, {"name": "testRetainAllWithNullCollection", "primary_tested": ["IndexedCollection.retainAll(Collection<String>)"], "external_dependencies": {"modules": ["IndexedCollection", "Collection"], "class_members": [{"name": "indexedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retainAll functionality with a null collection, expecting a NullPointerException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_addTest.java", "testclass_name": "CompositeCollection_addTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeCollection_addTest", "description": "Unit tests for the add functionality of the CompositeCollection class.", "class_members": {"variables": [{"name": "c", "type": "CompositeCollection<String>"}, {"name": "one", "type": "Collection<String>"}, {"name": "two", "type": "Collection<String>"}]}, "fixtures": ["setUpTest"], "test_cases": [{"name": "testAddWithMutator", "primary_tested": ["CompositeCollection.add(String)"], "associated_methods": ["CompositeCollection.setMutator(CompositeCollection.CollectionMutator<String>)", "CompositeCollection.addComposited(Collection<String>)", "Collection.contains(String)"], "external_dependencies": {"modules": ["CompositeCollection", "Collection", "List"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the add functionality of the CompositeCollection with a mutator."}, {"name": "testAddWithoutMutator", "primary_tested": ["CompositeCollection.add(String)"], "external_dependencies": {"modules": ["CompositeCollection"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the add functionality of the CompositeCollection without a mutator, expecting an UnsupportedOperationException."}, {"name": "testAddIncreasesSize", "primary_tested": ["CompositeCollection.add(String)"], "associated_methods": ["CompositeCollection.setMutator(CompositeCollection.CollectionMutator<String>)", "CompositeCollection.addComposited(Collection<String>)", "CompositeCollection.size()"], "external_dependencies": {"modules": ["CompositeCollection", "Collection", "List"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests that adding an element to the CompositeCollection increases its size."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_retainAllTest.java", "testclass_name": "CompositeCollection_retainAllTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeCollection_retainAllTest", "description": "Unit tests for the retainAll method of the CompositeCollection class.", "class_members": {"variables": [{"name": "c", "type": "CompositeCollection<String>"}, {"name": "one", "type": "Collection<String>"}, {"name": "two", "type": "Collection<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRetainAllWithMatchingElements", "primary_tested": ["CompositeCollection.retainAll(Collection<String>)"], "external_dependencies": {"modules": ["CompositeCollection", "Collection", "HashSet", "Arrays"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retainAll method with matching elements."}, {"name": "testRetainAllWithNoMatchingElements", "primary_tested": ["CompositeCollection.retainAll(Collection<String>)"], "external_dependencies": {"modules": ["CompositeCollection", "Collection", "HashSet", "Arrays"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retainAll method with no matching elements."}, {"name": "testRetainAllWithNullCollection", "primary_tested": ["CompositeCollection.retainAll(Collection<String>)"], "external_dependencies": {"modules": ["CompositeCollection"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retainAll method with a null collection."}, {"name": "testRetainAllWithEmptyCollection", "primary_tested": ["CompositeCollection.retainAll(Collection<String>)"], "external_dependencies": {"modules": ["CompositeCollection", "Collection", "ArrayList"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retainAll method with an empty collection."}, {"name": "testRetainAllWithAllElementsMatching", "primary_tested": ["CompositeCollection.retainAll(Collection<String>)"], "external_dependencies": {"modules": ["CompositeCollection", "Collection", "HashSet", "Arrays"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retainAll method with all elements matching."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_lastKeyTest.java", "testclass_name": "ListOrderedMap_lastKeyTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ListOrderedMap_lastKeyTest", "description": "Unit tests for the lastKey method of the ListOrderedMap class.", "class_members": {"variables": [{"name": "listOrderedMap", "type": "ListOrderedMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testLastKey_EmptyMap", "primary_tested": ["ListOrderedMap.lastKey()"], "external_dependencies": {"modules": ["ListOrderedMap", "NoSuchElementException"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the lastKey method when the map is empty, expecting a NoSuchElementException."}, {"name": "testLastKey_NonEmptyMap", "primary_tested": ["ListOrderedMap.lastKey()"], "external_dependencies": {"modules": ["ListOrderedMap"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the lastKey method when the map is non-empty, expecting the last key added."}, {"name": "testLastKey_AfterRemoval", "primary_tested": ["ListOrderedMap.lastKey()"], "associated_methods": ["ListOrderedMap.remove(String)"], "external_dependencies": {"modules": ["ListOrderedMap"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the lastKey method after removing an element, expecting the new last key."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_peekTest.java", "testclass_name": "CircularFifoQueue_peekTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CircularFifoQueue_peekTest", "description": "Unit tests for the peek functionality of the CircularFifoQueue class.", "class_members": {"variables": [{"name": "queue", "type": "CircularFifoQueue<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPeekWhenQueueIsEmpty", "primary_tested": ["CircularFifoQueue.peek()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the peek method when the queue is empty."}, {"name": "testPeekWhenQueueHasOneElement", "primary_tested": ["CircularFifoQueue.peek()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the peek method when the queue has one element."}, {"name": "testPeekWhenQueueIsFull", "primary_tested": ["CircularFifoQueue.peek()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the peek method when the queue is full."}, {"name": "testPeekAfterRemovingElements", "primary_tested": ["CircularFifoQueue.peek()"], "associated_methods": ["CircularFifoQueue.remove()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the peek method after removing elements from the queue."}, {"name": "testPeekAfterAddingMoreThanCapacity", "primary_tested": ["CircularFifoQueue.peek()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the peek method after adding more elements than the queue's capacity."}, {"name": "testPeekAfterClear", "primary_tested": ["CircularFifoQueue.peek()"], "associated_methods": ["CircularFifoQueue.clear()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the peek method after clearing the queue."}, {"name": "testPeekAfterRemovingAllElements", "primary_tested": ["CircularFifoQueue.peek()"], "associated_methods": ["CircularFifoQueue.remove()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the peek method after removing all elements from the queue."}, {"name": "testPeekWithNoSuchElementException", "primary_tested": ["CircularFifoQueue.element()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the element method to ensure it throws NoSuchElementException when the queue is empty."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_iteratorTest.java", "testclass_name": "CompositeCollection_iteratorTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.Iterator;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeCollection_iteratorTest", "description": "Unit tests for the iterator functionality of the CompositeCollection class.", "class_members": {"variables": [{"name": "c", "type": "CompositeCollection<String>"}, {"name": "one", "type": "Collection<String>"}, {"name": "two", "type": "Collection<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testIteratorWithEmptyCompositeCollection", "primary_tested": ["CompositeCollection.iterator()"], "external_dependencies": {"modules": ["CompositeCollection", "Iterator"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the iterator functionality when the CompositeCollection is empty."}, {"name": "testIteratorWithSingleCollection", "primary_tested": ["CompositeCollection.iterator()"], "associated_methods": ["CompositeCollection.addComposited(Collection<String>)"], "external_dependencies": {"modules": ["CompositeCollection", "Iterator", "Collection", "HashSet", "ArrayList"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the iterator functionality when the CompositeCollection contains a single collection."}, {"name": "testIteratorWithMultipleCollections", "primary_tested": ["CompositeCollection.iterator()"], "associated_methods": ["CompositeCollection.addComposited(Collection<String>)"], "external_dependencies": {"modules": ["CompositeCollection", "Iterator", "Collection", "HashSet", "ArrayList"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the iterator functionality when the CompositeCollection contains multiple collections."}, {"name": "testIteratorAfterRemovingCollection", "primary_tested": ["CompositeCollection.iterator()"], "associated_methods": ["CompositeCollection.addComposited(Collection<String>)", "CompositeCollection.removeComposited(Collection<String>)"], "external_dependencies": {"modules": ["CompositeCollection", "Iterator", "Collection", "HashSet", "ArrayList"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the iterator functionality after removing a collection from the CompositeCollection."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/ArrayStack_searchTest.java", "testclass_name": "ArrayStack_searchTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.EmptyStackException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ArrayStack_searchTest", "description": "Unit tests for the search functionality of the ArrayStack class.", "class_members": {"variables": [{"name": "stack", "type": "ArrayStack<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testSearchElementFound", "primary_tested": ["ArrayStack.search(String)"], "associated_methods": ["ArrayStack.push(String)"], "external_dependencies": {"modules": ["ArrayStack"], "class_members": [{"name": "stack", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the search functionality when the element is found in the stack."}, {"name": "testSearchElementNotFound", "primary_tested": ["ArrayStack.search(String)"], "associated_methods": ["ArrayStack.push(String)"], "external_dependencies": {"modules": ["ArrayStack"], "class_members": [{"name": "stack", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the search functionality when the element is not found in the stack."}, {"name": "testSearchNullElement", "primary_tested": ["ArrayStack.search(String)"], "associated_methods": ["ArrayStack.push(String)"], "external_dependencies": {"modules": ["ArrayStack"], "class_members": [{"name": "stack", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the search functionality when the element to search is null."}, {"name": "testSearchEmptyStack", "primary_tested": ["ArrayStack.search(String)"], "external_dependencies": {"modules": ["ArrayStack"], "class_members": [{"name": "stack", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the search functionality when the stack is empty."}, {"name": "testSearchAfterPop", "primary_tested": ["ArrayStack.search(String)"], "associated_methods": ["ArrayStack.push(String)", "ArrayStack.pop()"], "external_dependencies": {"modules": ["ArrayStack"], "class_members": [{"name": "stack", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the search functionality after performing a pop operation."}, {"name": "testSearchAfterPeek", "primary_tested": ["ArrayStack.search(String)"], "associated_methods": ["ArrayStack.push(String)", "ArrayStack.peek()"], "external_dependencies": {"modules": ["ArrayStack"], "class_members": [{"name": "stack", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the search functionality after performing a peek operation."}, {"name": "testSearchAfterPeekWithIndex", "primary_tested": ["ArrayStack.search(String)"], "associated_methods": ["ArrayStack.push(String)", "ArrayStack.peek(int)"], "external_dependencies": {"modules": ["ArrayStack"], "class_members": [{"name": "stack", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the search functionality after performing a peek operation with an index."}, {"name": "testSearchWithEmptyStackException", "primary_tested": ["ArrayStack.peek()", "ArrayStack.pop()"], "external_dependencies": {"modules": ["ArrayStack", "EmptyStackException"], "class_members": [{"name": "stack", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior of peek and pop operations when the stack is empty, expecting an EmptyStackException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_removeAllTest.java", "testclass_name": "CompositeCollection_removeAllTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeCollection_removeAllTest", "description": "Unit tests for the removeAll functionality of the CompositeCollection class.", "class_members": {"variables": [{"name": "c", "type": "CompositeCollection<String>"}, {"name": "one", "type": "Collection<String>"}, {"name": "two", "type": "Collection<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveAllWithEmptyCollection", "primary_tested": ["CompositeCollection.removeAll(Collection<? extends E>)"], "associated_methods": ["CompositeCollection.addComposited(Collection<? extends E>)", "CompositeCollection.contains(Object)"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet", "ArrayList"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeAll functionality with an empty collection."}, {"name": "testRemoveAllWithNonEmptyCollection", "primary_tested": ["CompositeCollection.removeAll(Collection<? extends E>)"], "associated_methods": ["CompositeCollection.addComposited(Collection<? extends E>)", "CompositeCollection.contains(Object)"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeAll functionality with a non-empty collection."}, {"name": "testRemoveAllWithAllElements", "primary_tested": ["CompositeCollection.removeAll(Collection<? extends E>)"], "associated_methods": ["CompositeCollection.addComposited(Collection<? extends E>)", "CompositeCollection.contains(Object)"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeAll functionality with a collection containing all elements."}, {"name": "testRemoveAllWithNoMatchingElements", "primary_tested": ["CompositeCollection.removeAll(Collection<? extends E>)"], "associated_methods": ["CompositeCollection.addComposited(Collection<? extends E>)", "CompositeCollection.contains(Object)"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeAll functionality with a collection containing no matching elements."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/LazySortedMap_tailMapTest.java", "testclass_name": "LazySortedMap_tailMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.Factory;", "import org.junit.jupiter.api.Test;", "import java.util.SortedMap;", "import java.util.TreeMap;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNotNull;"], "name": "LazySortedMap_tailMapTest", "description": "Unit tests for the tailMap functionality of LazySortedMap.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testTailMap", "primary_tested": ["LazySortedMap.tailMap(Integer)"], "associated_methods": ["SortedMap.put(Integer,String)", "SortedMap.size()", "SortedMap.get(Integer)"], "external_dependencies": {"modules": ["org.apache.commons.collections4.Factory", "java.util.SortedMap", "java.util.TreeMap", "org.apache.commons.collections4.map.LazySortedMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the tailMap functionality of the LazySortedMap, ensuring it returns the correct sub-map starting from the specified key."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_containsTest.java", "testclass_name": "CompositeCollection_containsTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeCollection_containsTest", "description": "Unit tests for the contains functionality of the CompositeCollection class.", "class_members": {"variables": [{"name": "c", "type": "CompositeCollection<String>"}, {"name": "one", "type": "Collection<String>"}, {"name": "two", "type": "Collection<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testContainsWithEmptyComposite", "primary_tested": ["CompositeCollection.contains(String)"], "external_dependencies": {"modules": ["CompositeCollection"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the contains method when the CompositeCollection is empty."}, {"name": "testContainsWithSingleCollection", "primary_tested": ["CompositeCollection.contains(String)"], "associated_methods": ["CompositeCollection.addComposited(Collection)"], "external_dependencies": {"modules": ["CompositeCollection"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the contains method when the CompositeCollection contains a single collection."}, {"name": "testContainsWithMultipleCollections", "primary_tested": ["CompositeCollection.contains(String)"], "associated_methods": ["CompositeCollection.addComposited(Collection,Collection)"], "external_dependencies": {"modules": ["CompositeCollection"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the contains method when the CompositeCollection contains multiple collections."}, {"name": "testContainsAfterRemoveComposited", "primary_tested": ["CompositeCollection.contains(String)"], "associated_methods": ["CompositeCollection.addComposited(Collection,Collection)", "CompositeCollection.removeComposited(Collection)"], "external_dependencies": {"modules": ["CompositeCollection"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the contains method after removing a collection from the CompositeCollection."}, {"name": "testContainsWithEmptyCollection", "primary_tested": ["CompositeCollection.contains(String)"], "associated_methods": ["CompositeCollection.addComposited(Collection)", "Collection.clear()"], "external_dependencies": {"modules": ["CompositeCollection"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the contains method when a collection within the CompositeCollection is cleared."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_addTest.java", "testclass_name": "CircularFifoQueue_addTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CircularFifoQueue_addTest", "description": "Unit tests for the add functionality of the CircularFifoQueue class.", "class_members": {"variables": [{"name": "queue", "type": "CircularFifoQueue<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAddElementSuccess", "primary_tested": ["CircularFifoQueue.add(String)"], "associated_methods": ["CircularFifoQueue.size()", "CircularFifoQueue.peek()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful addition of an element to the CircularFifoQueue."}, {"name": "testAddElementWhenFull", "primary_tested": ["CircularFifoQueue.add(String)"], "associated_methods": ["CircularFifoQueue.size()", "CircularFifoQueue.peek()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addition of an element to the CircularFifoQueue when it is full."}, {"name": "testAddNullElement", "primary_tested": ["CircularFifoQueue.add(String)"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addition of a null element to the CircularFifoQueue, expecting a NullPointerException."}, {"name": "testAddElementAndCheckFullCapacity", "primary_tested": ["CircularFifoQueue.add(String)"], "associated_methods": ["CircularFifoQueue.isAtFullCapacity()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addition of elements to the CircularFifoQueue and checks if it reaches full capacity."}, {"name": "testAddElementAndCheckSize", "primary_tested": ["CircularFifoQueue.add(String)"], "associated_methods": ["CircularFifoQueue.size()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addition of elements to the CircularFifoQueue and checks the size after each addition."}, {"name": "testAddElementAndRemove", "primary_tested": ["CircularFifoQueue.add(String)"], "associated_methods": ["CircularFifoQueue.remove()", "CircularFifoQueue.size()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addition of elements to the CircularFifoQueue and checks the removal of elements."}, {"name": "testAddElementAndClear", "primary_tested": ["CircularFifoQueue.add(String)"], "associated_methods": ["CircularFifoQueue.clear()", "CircularFifoQueue.size()", "CircularFifoQueue.isEmpty()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addition of elements to the CircularFifoQueue and checks the clearing of the queue."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/SingletonMap_putTest.java", "testclass_name": "SingletonMap_putTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.Test;"], "name": "SingletonMap_putTest", "description": "Unit tests for the put method of the SingletonMap class.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testPutWithMatchingKey", "primary_tested": ["SingletonMap.put(String,String)"], "associated_methods": ["SingletonMap.get(String)"], "external_dependencies": {"modules": ["SingletonMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the put method of SingletonMap with a matching key, ensuring the old value is returned and the new value is set."}, {"name": "testPutWithNonMatchingKey", "primary_tested": ["SingletonMap.put(String,String)"], "external_dependencies": {"modules": ["SingletonMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the put method of SingletonMap with a non-matching key, ensuring an IllegalArgumentException is thrown."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_removeAllTest.java", "testclass_name": "IndexedCollection_removeAllTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static java.util.Arrays.asList;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Collection;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "IndexedCollection_removeAllTest", "description": "Unit tests for the removeAll functionality of the IndexedCollection class.", "class_members": {"variables": [{"name": "indexedCollection", "type": "IndexedCollection<Integer, String>"}, {"name": "originalCollection", "type": "Collection<String>"}], "methods": [{"name": "decorateUniqueCollection", "signature": "IndexedCollection<Integer, String> decorateUniqueCollection(Collection<String> original)"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveAllRemovesAllElements", "primary_tested": ["IndexedCollection.removeAll(Collection<String>)"], "associated_methods": ["IndexedCollection.containsAll(Collection<String>)", "IndexedCollection.size()"], "external_dependencies": {"modules": ["IndexedCollection", "Collection"], "class_members": [{"name": "indexedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that removeAll removes all specified elements from the collection."}, {"name": "testRemoveAllNoElementsToRemove", "primary_tested": ["IndexedCollection.removeAll(Collection<String>)"], "associated_methods": ["IndexedCollection.size()"], "external_dependencies": {"modules": ["IndexedCollection", "Collection"], "class_members": [{"name": "indexedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that removeAll does nothing when the collection to remove is not present in the indexed collection."}, {"name": "testRemoveAllReindexAfterRemoval", "primary_tested": ["IndexedCollection.removeAll(Collection<String>)"], "associated_methods": ["IndexedCollection.reindex()", "IndexedCollection.get(Integer)"], "external_dependencies": {"modules": ["IndexedCollection", "Collection"], "class_members": [{"name": "indexedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that removeAll removes specified elements and reindexing works correctly after removal."}, {"name": "testRemoveAllWithEmptyCollection", "primary_tested": ["IndexedCollection.removeAll(Collection<String>)"], "associated_methods": ["IndexedCollection.size()"], "external_dependencies": {"modules": ["IndexedCollection", "Collection"], "class_members": [{"name": "indexedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that removeAll does nothing when the collection to remove is empty."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_putAllTest.java", "testclass_name": "ListOrderedMap_putAllTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ListOrderedMap_putAllTest", "description": "Unit tests for the putAll method of ListOrderedMap with different scenarios.", "class_members": {"variables": [{"name": "listOrderedMap", "type": "ListOrderedMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPutAllAtIndexValid", "primary_tested": ["ListOrderedMap.putAll(int,Map)"], "external_dependencies": {"modules": ["ListOrderedMap", "HashMap", "Map"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the putAll method with a valid index, ensuring the map contents are correctly inserted."}, {"name": "testPutAllAtIndexInvalid", "primary_tested": ["ListOrderedMap.putAll(int,Map)"], "external_dependencies": {"modules": ["ListOrderedMap", "HashMap", "Map"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the putAll method with invalid indices, expecting IndexOutOfBoundsException to be thrown."}, {"name": "testPutAllAtIndexWithExistingKeys", "primary_tested": ["ListOrderedMap.putAll(int,Map)"], "associated_methods": ["ListOrderedMap.put(String,String)"], "external_dependencies": {"modules": ["ListOrderedMap", "HashMap", "Map"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the putAll method with a map containing existing keys, ensuring the values are updated and new keys are added."}, {"name": "testPutAllAtIndexEmptyMap", "primary_tested": ["ListOrderedMap.putAll(int,Map)"], "external_dependencies": {"modules": ["ListOrderedMap", "HashMap", "Map"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the putAll method with an empty map, ensuring the ListOrderedMap remains empty."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/SingletonMap_equalsTest.java", "testclass_name": "SingletonMap_equalsTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "SingletonMap_equalsTest", "description": "Unit tests for the equals method of the SingletonMap class.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testEquals_SameInstance", "primary_tested": ["SingletonMap.equals(Object)"], "external_dependencies": {"modules": ["SingletonMap"]}, "category": "unit", "description": "Tests the equals method with the same instance."}, {"name": "testEquals_DifferentType", "primary_tested": ["SingletonMap.equals(Object)"], "external_dependencies": {"modules": ["SingletonMap"]}, "category": "unit", "description": "Tests the equals method with a different type."}, {"name": "testEquals_DifferentSizeMap", "primary_tested": ["SingletonMap.equals(Object)"], "external_dependencies": {"modules": ["SingletonMap", "HashMap"]}, "category": "unit", "description": "Tests the equals method with a map of different size."}, {"name": "testEquals_SameKeyDifferentValue", "primary_tested": ["SingletonMap.equals(Object)"], "external_dependencies": {"modules": ["SingletonMap", "HashMap"]}, "category": "unit", "description": "Tests the equals method with the same key but different value."}, {"name": "testEquals_DifferentKeySameValue", "primary_tested": ["SingletonMap.equals(Object)"], "external_dependencies": {"modules": ["SingletonMap", "HashMap"]}, "category": "unit", "description": "Tests the equals method with different key but same value."}, {"name": "testEquals_SameKeySameValue", "primary_tested": ["SingletonMap.equals(Object)"], "external_dependencies": {"modules": ["SingletonMap", "HashMap"]}, "category": "unit", "description": "Tests the equals method with the same key and same value."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_removeIfTest.java", "testclass_name": "IndexedCollection_removeIfTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static java.util.Arrays.asList;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Collection;", "import java.util.function.Predicate;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "IndexedCollection_removeIfTest", "description": "Unit tests for the removeIf functionality of the IndexedCollection class.", "class_members": {"variables": [{"name": "indexedCollection", "type": "IndexedCollection<Integer, String>"}, {"name": "originalCollection", "type": "Collection<String>"}], "methods": [{"name": "decorateUniqueCollection", "signature": "IndexedCollection<Integer, String> decorateUniqueCollection(Collection<String> original)"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveIfWithNullFilter", "primary_tested": ["IndexedCollection.removeIf(Predicate<String>)"], "external_dependencies": {"modules": ["IndexedCollection"], "class_members": [{"name": "indexedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeIf method with a null filter."}, {"name": "testRemoveIfWithNoMatchingElements", "primary_tested": ["IndexedCollection.removeIf(Predicate<String>)"], "external_dependencies": {"modules": ["IndexedCollection"], "class_members": [{"name": "indexedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeIf method with a filter that does not match any elements."}, {"name": "testRemoveIfWithMatchingElements", "primary_tested": ["IndexedCollection.removeIf(Predicate<String>)"], "external_dependencies": {"modules": ["IndexedCollection"], "class_members": [{"name": "indexedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeIf method with a filter that matches some elements."}, {"name": "testRemoveIfWithAllMatchingElements", "primary_tested": ["IndexedCollection.removeIf(Predicate<String>)"], "external_dependencies": {"modules": ["IndexedCollection"], "class_members": [{"name": "indexedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeIf method with a filter that matches all elements."}, {"name": "testRemoveIfReindexesAfterRemoval", "primary_tested": ["IndexedCollection.removeIf(Predicate<String>)"], "associated_methods": ["IndexedCollection.get(Integer)"], "external_dependencies": {"modules": ["IndexedCollection"], "class_members": [{"name": "indexedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeIf method and verifies that the collection reindexes after removal."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_putAllTest.java", "testclass_name": "MultiKeyMap_putAllTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.keyvalue.MultiKey;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "MultiKeyMap_putAllTest", "description": "Unit tests for the putAll method of the MultiKeyMap class.", "class_members": {"variables": [{"name": "multiKeyMap", "type": "MultiKeyMap<String, String>"}, {"name": "mapToCopy", "type": "Map<MultiKey<? extends String>, String>"}, {"name": "key1", "type": "MultiKey<String>"}, {"name": "key2", "type": "MultiKey<String>"}, {"name": "nullKey", "type": "MultiKey<String>"}]}, "fixtures": [], "test_cases": [{"name": "testPutAll", "primary_tested": ["MultiKeyMap.putAll(Map<MultiKey<? extends String>, String>)"], "associated_methods": ["MultiKeyMap.containsKey(String, String)", "MultiKeyMap.get(MultiKey<String>)"], "external_dependencies": {"modules": ["MultiKeyMap", "MultiKey", "HashMap", "Map"], "class_members": [{"name": "multiKeyMap", "type": "variable"}, {"name": "mapToCopy", "type": "variable"}, {"name": "key1", "type": "variable"}, {"name": "key2", "type": "variable"}]}, "category": "unit", "description": "Tests the putAll method of MultiKeyMap to ensure it correctly adds all entries from a given map."}, {"name": "testPutAllWithNullKey", "primary_tested": ["MultiKeyMap.putAll(Map<MultiKey<? extends String>, String>)"], "associated_methods": [], "external_dependencies": {"modules": ["MultiKeyMap", "MultiKey", "HashMap", "Map"], "class_members": [{"name": "multiKeyMap", "type": "variable"}, {"name": "mapToCopy", "type": "variable"}, {"name": "nullKey", "type": "variable"}]}, "category": "unit", "description": "Tests the putAll method of MultiKeyMap to ensure it throws a NullPointerException when a null key is present in the map to be copied."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_removeTest.java", "testclass_name": "StaticBucketMap_removeTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "StaticBucketMap_removeTest", "description": "Unit tests for the remove functionality of the StaticBucketMap class.", "class_members": {"variables": [{"name": "map", "type": "StaticBucketMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveExistingKey", "primary_tested": ["StaticBucketMap.remove(String)"], "associated_methods": ["StaticBucketMap.put(String,String)", "StaticBucketMap.containsKey(String)", "StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of an existing key from the StaticBucketMap."}, {"name": "testRemoveNonExistingKey", "primary_tested": ["StaticBucketMap.remove(String)"], "associated_methods": ["StaticBucketMap.containsKey(String)", "StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of a non-existing key from the StaticBucketMap."}, {"name": "testRemoveNullKey", "primary_tested": ["StaticBucketMap.remove(String)"], "associated_methods": ["StaticBucketMap.put(String,String)", "StaticBucketMap.containsKey(String)", "StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of a null key from the StaticBucketMap."}, {"name": "testRemoveAndSizeDecrease", "primary_tested": ["StaticBucketMap.remove(String)"], "associated_methods": ["StaticBucketMap.put(String,String)", "StaticBucketMap.size()"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of keys and the decrease in size of the StaticBucketMap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_addAllTest.java", "testclass_name": "IndexedCollection_addAllTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static java.util.Arrays.asList;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Collection;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "IndexedCollection_addAllTest", "description": "Unit tests for the addAll method of the IndexedCollection class.", "class_members": {"variables": [{"name": "indexedCollection", "type": "IndexedCollection<Integer, String>"}, {"name": "originalCollection", "type": "Collection<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAddAllSuccess", "primary_tested": ["IndexedCollection.addAll(Collection<String>)"], "associated_methods": ["IndexedCollection.containsAll(Collection<String>)", "IndexedCollection.get(Integer)"], "external_dependencies": {"modules": ["IndexedCollection", "Collection", "Transformer"], "class_members": [{"name": "indexedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful addition of elements to the IndexedCollection."}, {"name": "testAddAllNoChange", "primary_tested": ["IndexedCollection.addAll(Collection<String>)"], "associated_methods": ["IndexedCollection.isEmpty()"], "external_dependencies": {"modules": ["IndexedCollection", "Collection", "Transformer"], "class_members": [{"name": "indexedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addition of an empty collection to the IndexedCollection, ensuring no change occurs."}, {"name": "testAddAllWithDuplicateKey", "primary_tested": ["IndexedCollection.addAll(Collection<String>)"], "external_dependencies": {"modules": ["IndexedCollection", "Collection", "Transformer"], "class_members": [{"name": "indexedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addition of elements with duplicate keys to the IndexedCollection, expecting an IllegalArgumentException."}, {"name": "testAddAllWithEmptyCollection", "primary_tested": ["IndexedCollection.addAll(Collection<String>)"], "associated_methods": ["IndexedCollection.isEmpty()"], "external_dependencies": {"modules": ["IndexedCollection", "Collection", "Transformer"], "class_members": [{"name": "indexedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addition of an empty collection to the IndexedCollection, ensuring no change occurs."}, {"name": "testAddAllWithNullElement", "primary_tested": ["IndexedCollection.addAll(Collection<String>)"], "external_dependencies": {"modules": ["IndexedCollection", "Collection", "Transformer"], "class_members": [{"name": "indexedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addition of elements containing a null value to the IndexedCollection, expecting a NullPointerException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_getTest.java", "testclass_name": "MultiKeyMap_getTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import org.apache.commons.collections4.keyvalue.MultiKey;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "MultiKeyMap_getTest", "description": "Unit tests for the get functionality of MultiKeyMap.", "class_members": {"variables": [{"name": "map", "type": "MultiKeyMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetExistingKey", "primary_tested": ["MultiKeyMap.get(String,String)"], "external_dependencies": {"modules": ["MultiKeyMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get functionality of MultiKeyMap with an existing key."}, {"name": "testGetNonExistingKey", "primary_tested": ["MultiKeyMap.get(String,String)"], "external_dependencies": {"modules": ["MultiKeyMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get functionality of MultiKeyMap with a non-existing key."}, {"name": "testGetWithNullKey", "primary_tested": ["MultiKeyMap.get(String,String)"], "external_dependencies": {"modules": ["MultiKeyMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get functionality of MultiKeyMap with a null key."}, {"name": "testGetWithBothNullKeys", "primary_tested": ["MultiKeyMap.get(String,String)"], "external_dependencies": {"modules": ["MultiKeyMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get functionality of MultiKeyMap with both keys being null."}, {"name": "testGetAfterRemove", "primary_tested": ["MultiKeyMap.get(String,String)"], "associated_methods": ["MultiKeyMap.removeMultiKey(String,String)"], "external_dependencies": {"modules": ["MultiKeyMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get functionality of MultiKeyMap after removing a key."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/TransformedMap_putTest.java", "testclass_name": "TransformedMap_putTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.mockito.Mockito.*;"], "name": "TransformedMap_putTest", "description": "Unit tests for the put method of TransformedMap with transformers.", "class_members": {"variables": [{"name": "keyTransformer", "type": "Transformer<String, String>"}, {"name": "valueTransformer", "type": "Transformer<String, String>"}, {"name": "originalMap", "type": "Map<String, String>"}, {"name": "transformedMap", "type": "TransformedMap<String, String>"}, {"name": "originalKey", "type": "String"}, {"name": "originalValue", "type": "String"}, {"name": "transformedKey", "type": "String"}, {"name": "transformedValue", "type": "String"}]}, "test_cases": [{"name": "testPutWithTransformers", "primary_tested": ["TransformedMap.put(String,String)"], "associated_methods": ["Transformer.apply(String)", "Map.get(String)"], "external_dependencies": {"modules": ["Transformer", "TransformedMap", "Map", "HashMap"], "class_members": [{"name": "keyTransformer", "type": "variable"}, {"name": "valueTransformer", "type": "variable"}, {"name": "originalMap", "type": "variable"}, {"name": "transformedMap", "type": "variable"}]}, "category": "unit", "description": "Tests the put method of TransformedMap with key and value transformers, verifying that the transformed key and value are correctly inserted into the original map."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/CompositeMap_removeTest.java", "testclass_name": "CompositeMap_removeTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeMap_removeTest", "description": "Unit tests for the remove functionality of the CompositeMap class.", "class_members": {"variables": [{"name": "compositeMap", "type": "CompositeMap<String, String>"}, {"name": "map1", "type": "Map<String, String>"}, {"name": "map2", "type": "Map<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveExistingKey", "primary_tested": ["CompositeMap.remove(String)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of an existing key from the CompositeMap."}, {"name": "testRemoveNonExistingKey", "primary_tested": ["CompositeMap.remove(String)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of a non-existing key from the CompositeMap."}, {"name": "testRemoveFromSecondMap", "primary_tested": ["CompositeMap.remove(String)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of a key from the second map in the CompositeMap."}, {"name": "testRemoveAllKeys", "primary_tested": ["CompositeMap.remove(String)"], "associated_methods": ["CompositeMap.isEmpty()"], "external_dependencies": {"modules": ["CompositeMap", "HashMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of all keys from the CompositeMap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_containsValueTest.java", "testclass_name": "PassiveExpiringMap_containsValueTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "PassiveExpiringMap_containsValueTest", "description": "Unit tests for the containsValue method of PassiveExpiringMap.", "class_members": {"variables": [{"name": "map", "type": "PassiveExpiringMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testContainsValue_ValuePresentAndNotExpired", "primary_tested": ["PassiveExpiringMap.containsValue(String)"], "external_dependencies": {"modules": ["PassiveExpiringMap", "HashMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsValue method when the value is present and not expired."}, {"name": "testContainsValue_ValuePresentButExpired", "primary_tested": ["PassiveExpiringMap.containsValue(String)"], "external_dependencies": {"modules": ["PassiveExpiringMap", "HashMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsValue method when the value is present but expired."}, {"name": "testContainsValue_ValueNotPresent", "primary_tested": ["PassiveExpiringMap.containsValue(String)"], "external_dependencies": {"modules": ["PassiveExpiringMap", "HashMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsValue method when the value is not present."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_sizeTest.java", "testclass_name": "CircularFifoQueue_sizeTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CircularFifoQueue_sizeTest", "description": "Unit tests for the size method of the CircularFifoQueue class.", "class_members": {"variables": [{"name": "queue", "type": "CircularFifoQueue<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testSizeWhenQueueIsEmpty", "primary_tested": ["CircularFifoQueue.size()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method when the queue is empty."}, {"name": "testSizeWhenQueueIsNotFull", "primary_tested": ["CircularFifoQueue.size()"], "associated_methods": ["CircularFifoQueue.add(String)"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method when the queue is not full."}, {"name": "testSizeWhenQueueIsFull", "primary_tested": ["CircularFifoQueue.size()"], "associated_methods": ["CircularFifoQueue.add(String)"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method when the queue is full."}, {"name": "testSizeWhenQueueIsWrapped", "primary_tested": ["CircularFifoQueue.size()"], "associated_methods": ["CircularFifoQueue.add(String)"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method when the queue is wrapped."}, {"name": "testSizeAfterRemove", "primary_tested": ["CircularFifoQueue.size()"], "associated_methods": ["CircularFifoQueue.add(String)", "CircularFifoQueue.remove()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method after removing an element from the queue."}, {"name": "testSizeAfterClear", "primary_tested": ["CircularFifoQueue.size()"], "associated_methods": ["CircularFifoQueue.add(String)", "CircularFifoQueue.clear()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method after clearing the queue."}, {"name": "testSizeWhenQueueIsFullAndWrapped", "primary_tested": ["CircularFifoQueue.size()"], "associated_methods": ["CircularFifoQueue.add(String)", "CircularFifoQueue.remove()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method when the queue is full and wrapped."}, {"name": "testSizeWhenQueueIsFullAndRemovedFromMiddle", "primary_tested": ["CircularFifoQueue.size()"], "associated_methods": ["CircularFifoQueue.add(String)", "CircularFifoQueue.remove(String)"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method when the queue is full and an element is removed from the middle."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_containsKeyTest.java", "testclass_name": "StaticBucketMap_containsKeyTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "StaticBucketMap_containsKeyTest", "description": "Unit tests for the containsKey method of the StaticBucketMap class.", "class_members": {"variables": [{"name": "map", "type": "StaticBucketMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testContainsKey_KeyExists", "primary_tested": ["StaticBucketMap.containsKey(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsKey method when the key exists in the map."}, {"name": "testContainsKey_KeyDoesNotExist", "primary_tested": ["StaticBucketMap.containsKey(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsKey method when the key does not exist in the map."}, {"name": "testContainsKey_NullKey", "primary_tested": ["StaticBucketMap.containsKey(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsKey method when the key is null and exists in the map."}, {"name": "testContainsKey_NullKeyDoesNotExist", "primary_tested": ["StaticBucketMap.containsKey(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsKey method when the key is null and does not exist in the map."}, {"name": "testContainsKey_AfterRemove", "primary_tested": ["StaticBucketMap.containsKey(String)"], "associated_methods": ["StaticBucketMap.remove(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsKey method after removing the key from the map."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_clearTest.java", "testclass_name": "ListOrderedMap_clearTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "ListOrderedMap_clearTest", "description": "Unit test for the clear method of ListOrderedMap.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testClear", "primary_tested": ["ListOrderedMap.clear()"], "associated_methods": ["ListOrderedMap.isEmpty()", "ListOrderedMap.size()"], "external_dependencies": {"modules": ["ListOrderedMap", "HashMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the clear functionality of the ListOrderedMap, ensuring that the map is empty and has a size of 0 after clearing."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_removeTest.java", "testclass_name": "IndexedCollection_removeTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static java.util.Arrays.asList;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Collection;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "IndexedCollection_removeTest", "description": "Unit tests for the remove functionality of the IndexedCollection class.", "class_members": {"variables": [{"name": "indexedCollection", "type": "IndexedCollection<Integer, String>"}, {"name": "originalCollection", "type": "Collection<String>"}], "methods": [{"name": "decorateUniqueCollection", "signature": "IndexedCollection<Integer, String> decorateUniqueCollection(Collection<String> original)"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveSuccess", "primary_tested": ["IndexedCollection.remove(String)"], "associated_methods": ["IndexedCollection.contains(String)", "IndexedCollection.get(int)"], "external_dependencies": {"modules": ["IndexedCollection", "java.util.Collection"], "class_members": [{"name": "indexedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful removal of an element from the IndexedCollection."}, {"name": "testRemoveFailure", "primary_tested": ["IndexedCollection.remove(String)"], "associated_methods": ["IndexedCollection.contains(String)", "IndexedCollection.get(int)"], "external_dependencies": {"modules": ["IndexedCollection", "java.util.Collection"], "class_members": [{"name": "indexedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the failure to remove a non-existent element from the IndexedCollection."}, {"name": "testRemoveAll", "primary_tested": ["IndexedCollection.removeAll(Collection<String>)"], "associated_methods": ["IndexedCollection.contains(String)", "IndexedCollection.get(int)"], "external_dependencies": {"modules": ["IndexedCollection", "java.util.Collection"], "class_members": [{"name": "indexedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of multiple elements from the IndexedCollection."}, {"name": "testReindexAfterRemove", "primary_tested": ["IndexedCollection.remove(String)", "IndexedCollection.reindex()"], "associated_methods": ["IndexedCollection.contains(String)", "IndexedCollection.get(int)"], "external_dependencies": {"modules": ["IndexedCollection", "java.util.Collection"], "class_members": [{"name": "indexedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the reindexing of the IndexedCollection after removing an element."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_clearTest.java", "testclass_name": "CompositeCollection_clearTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeCollection_clearTest", "description": "Unit tests for the clear functionality of the CompositeCollection class.", "class_members": {"variables": [{"name": "c", "type": "CompositeCollection<String>"}, {"name": "one", "type": "Collection<String>"}, {"name": "two", "type": "Collection<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testClear", "primary_tested": ["CompositeCollection.clear()"], "associated_methods": ["CompositeCollection.isEmpty()", "CompositeCollection.size()"], "external_dependencies": {"modules": ["CompositeCollection", "Collection", "HashSet"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clear functionality of the CompositeCollection with multiple collections."}, {"name": "testClearWithEmptyComposite", "primary_tested": ["CompositeCollection.clear()"], "associated_methods": ["CompositeCollection.isEmpty()", "CompositeCollection.size()"], "external_dependencies": {"modules": ["CompositeCollection"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clear functionality of the CompositeCollection with an empty composite collection."}, {"name": "testClearWithSingleCollection", "primary_tested": ["CompositeCollection.clear()"], "associated_methods": ["CompositeCollection.isEmpty()", "CompositeCollection.size()"], "external_dependencies": {"modules": ["CompositeCollection", "Collection", "HashSet"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clear functionality of the CompositeCollection with a single collection."}, {"name": "testClearWithMultipleCollections", "primary_tested": ["CompositeCollection.clear()"], "associated_methods": ["CompositeCollection.isEmpty()", "CompositeCollection.size()"], "external_dependencies": {"modules": ["CompositeCollection", "Collection", "HashSet"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clear functionality of the CompositeCollection with multiple collections."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/UnmodifiableSortedMap_unmodifiableSortedMapTest.java", "testclass_name": "UnmodifiableSortedMap_unmodifiableSortedMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.Unmodifiable;", "import org.junit.jupiter.api.Test;", "import java.util.SortedMap;", "import java.util.TreeMap;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "UnmodifiableSortedMap_unmodifiableSortedMapTest", "description": "Tests for the UnmodifiableSortedMap class, specifically focusing on the unmodifiableSortedMap method.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testUnmodifiableSortedMapWithUnmodifiableMap", "primary_tested": ["UnmodifiableSortedMap.unmodifiableSortedMap(SortedMap)"], "external_dependencies": {"modules": ["SortedMap", "TreeMap", "UnmodifiableSortedMap"]}, "category": "unit", "description": "Tests that passing an unmodifiable map to unmodifiableSortedMap returns the same map."}, {"name": "testUnmodifiableSortedMapWithModifiableMap", "primary_tested": ["UnmodifiableSortedMap.unmodifiableSortedMap(SortedMap)"], "external_dependencies": {"modules": ["SortedMap", "TreeMap", "UnmodifiableSortedMap", "Unmodifiable"]}, "category": "unit", "description": "Tests that passing a modifiable map to unmodifiableSortedMap returns an unmodifiable map."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/LazySortedMap_subMapTest.java", "testclass_name": "LazySortedMap_subMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.apache.commons.collections4.map.LazySortedMap.lazySortedMap;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertInstanceOf;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.Comparator;", "import java.util.SortedMap;", "import java.util.TreeMap;", "import org.apache.commons.collections4.Factory;", "import org.apache.commons.collections4.FactoryUtils;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "LazySortedMap_subMapTest", "description": "Unit tests for the subMap functionality of LazySortedMap.", "class_members": {"variables": [{"name": "oneFactory", "type": "static final Factory<Integer>"}, {"name": "originalMap", "type": "SortedMap<String, Integer>"}, {"name": "lazySortedMap", "type": "LazySortedMap<String, Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testSubMap", "primary_tested": ["LazySortedMap.subMap(String,String)"], "associated_methods": ["LazySortedMap.firstKey()", "LazySortedMap.lastKey()"], "external_dependencies": {"modules": ["LazySortedMap", "SortedMap", "FactoryUtils"], "class_members": [{"name": "lazySortedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the subMap functionality of LazySortedMap with valid keys."}, {"name": "testSubMapWithNonExistentKeys", "primary_tested": ["LazySortedMap.subMap(String,String)"], "associated_methods": ["LazySortedMap.firstKey()", "LazySortedMap.lastKey()"], "external_dependencies": {"modules": ["LazySortedMap", "SortedMap", "FactoryUtils"], "class_members": [{"name": "lazySortedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the subMap functionality of LazySortedMap with non-existent keys."}, {"name": "testSubMapWithInvalidRange", "primary_tested": ["LazySortedMap.subMap(String,String)"], "external_dependencies": {"modules": ["LazySortedMap", "SortedMap", "FactoryUtils"], "class_members": [{"name": "lazySortedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the subMap functionality of LazySortedMap with an invalid range."}, {"name": "testSubMapWithSameKeys", "primary_tested": ["LazySortedMap.subMap(String,String)"], "associated_methods": ["LazySortedMap.firstKey()", "LazySortedMap.lastKey()"], "external_dependencies": {"modules": ["LazySortedMap", "SortedMap", "FactoryUtils"], "class_members": [{"name": "lazySortedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the subMap functionality of LazySortedMap with the same keys."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_containsAllTest.java", "testclass_name": "CompositeCollection_containsAllTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeCollection_containsAllTest", "description": "Unit tests for the containsAll method of the CompositeCollection class.", "class_members": {"variables": [{"name": "c", "type": "CompositeCollection<String>"}, {"name": "one", "type": "Collection<String>"}, {"name": "two", "type": "Collection<String>"}]}, "fixtures": ["setUpTest"], "test_cases": [{"name": "testContainsAllWithEmptyComposite", "primary_tested": ["CompositeCollection.containsAll(Collection<String>)"], "external_dependencies": {"modules": ["CompositeCollection", "ArrayList", "Arrays", "Collection"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the containsAll method with an empty CompositeCollection."}, {"name": "testContainsAllWithNonEmptyComposite", "primary_tested": ["CompositeCollection.containsAll(Collection<String>)"], "associated_methods": ["CompositeCollection.addComposited(Collection<String>,Collection<String>)"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet", "ArrayList", "Arrays", "Collection"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the containsAll method with a non-empty CompositeCollection."}, {"name": "testContainsAllWithPartialMatch", "primary_tested": ["CompositeCollection.containsAll(Collection<String>)"], "associated_methods": ["CompositeCollection.addComposited(Collection<String>)"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet", "ArrayList", "Arrays", "Collection"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the containsAll method with a CompositeCollection that has a partial match."}, {"name": "testContainsAllWithNullCollection", "primary_tested": ["CompositeCollection.containsAll(Collection<String>)"], "external_dependencies": {"modules": ["CompositeCollection"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the containsAll method with a null collection."}, {"name": "testContainsAllWithEmptyCollection", "primary_tested": ["CompositeCollection.containsAll(Collection<String>)"], "external_dependencies": {"modules": ["CompositeCollection", "ArrayList"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the containsAll method with an empty collection."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_putTest.java", "testclass_name": "PassiveExpiringMap_putTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "PassiveExpiringMap_putTest", "description": "Unit test for the put method of PassiveExpiringMap.", "class_members": {"variables": [{"name": "policy", "type": "PassiveExpiringMap.ExpirationPolicy<String, String>"}, {"name": "map", "type": "PassiveExpiringMap<String, String>"}, {"name": "key", "type": "String"}, {"name": "value", "type": "String"}]}, "test_cases": [{"name": "testPut", "primary_tested": ["PassiveExpiringMap.put(String,String)"], "associated_methods": ["PassiveExpiringMap.containsKey(String)", "PassiveExpiringMap.get(String)"], "external_dependencies": {"modules": ["PassiveExpiringMap", "HashMap", "Map"], "class_members": [{"name": "policy", "type": "variable"}, {"name": "map", "type": "variable"}, {"name": "key", "type": "variable"}, {"name": "value", "type": "variable"}]}, "category": "unit", "description": "Tests the put functionality of the PassiveExpiringMap, ensuring that the key-value pair is correctly added and retrievable."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/UnmodifiableMap_valuesTest.java", "testclass_name": "UnmodifiableMap_valuesTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.Unmodifiable;", "import org.apache.commons.collections4.collection.UnmodifiableCollection;", "import org.junit.jupiter.api.Test;", "import java.util.Collection;", "import java.util.HashMap;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "UnmodifiableMap_valuesTest", "description": "Tests the values method of the UnmodifiableMap class to ensure it returns an unmodifiable collection.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testValues", "primary_tested": ["UnmodifiableMap.values()"], "associated_methods": ["UnmodifiableCollection.add(E)", "UnmodifiableCollection.size()", "UnmodifiableCollection.contains(Object)"], "external_dependencies": {"modules": ["UnmodifiableMap", "UnmodifiableCollection", "HashMap", "Map", "Collection"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the values method of UnmodifiableMap returns an unmodifiable collection, checks the size and content of the collection, and ensures that adding to the collection throws an UnsupportedOperationException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_clearTest.java", "testclass_name": "StaticBucketMap_clearTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "StaticBucketMap_clearTest", "description": "Unit test for the clear method of StaticBucketMap.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testClear", "primary_tested": ["StaticBucketMap.clear()"], "associated_methods": ["StaticBucketMap.isEmpty()", "StaticBucketMap.size()"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the clear functionality of the StaticBucketMap, ensuring that the map is empty and has a size of 0 after clearing."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/UnmodifiableOrderedMap_keySetTest.java", "testclass_name": "UnmodifiableOrderedMap_keySetTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.OrderedMap;", "import org.apache.commons.collections4.set.UnmodifiableSet;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;", "import java.util.Set;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "UnmodifiableOrderedMap_keySetTest", "description": "Tests the keySet functionality of the UnmodifiableOrderedMap.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testKeySet", "primary_tested": ["OrderedMap.keySet()"], "associated_methods": ["UnmodifiableSet.unmodifiableSet(Set)"], "external_dependencies": {"modules": ["OrderedMap", "UnmodifiableSet", "HashMap", "Map", "Set"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the keySet method of the UnmodifiableOrderedMap to ensure it returns an unmodifiable set of keys."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/CompositeMap_clearTest.java", "testclass_name": "CompositeMap_clearTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "CompositeMap_clearTest", "description": "Unit test for the clear functionality of the CompositeMap class.", "class_members": {"variables": [{"name": "map1", "type": "Map<String, String>"}, {"name": "map2", "type": "Map<String, String>"}, {"name": "compositeMap", "type": "CompositeMap<String, String>"}]}, "test_cases": [{"name": "testClear", "primary_tested": ["CompositeMap.clear()"], "associated_methods": ["CompositeMap.isEmpty()", "CompositeMap.size()"], "external_dependencies": {"modules": ["HashMap", "CompositeMap"], "class_members": [{"name": "map1", "type": "variable"}, {"name": "map2", "type": "variable"}, {"name": "compositeMap", "type": "variable"}]}, "category": "unit", "description": "Tests the clear functionality of the CompositeMap, ensuring it removes all mappings and the map is empty."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_getTest.java", "testclass_name": "PassiveExpiringMap_getTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;"], "name": "PassiveExpiringMap_getTest", "description": "Unit tests for the get method of PassiveExpiringMap, checking both non-expired and expired entries.", "class_members": {"variables": [{"name": "map", "type": "Map<String, String>"}, {"name": "expiringMap", "type": "PassiveExpiringMap<String, String>"}]}, "test_cases": [{"name": "testGet_EntryNotExpired", "primary_tested": ["PassiveExpiringMap.get(String)"], "external_dependencies": {"modules": ["HashMap", "PassiveExpiringMap"], "class_members": [{"name": "map", "type": "variable"}, {"name": "expiringMap", "type": "variable"}]}, "category": "unit", "description": "Tests the get method of PassiveExpiringMap when the entry is not expired."}, {"name": "testGet_EntryExpired", "primary_tested": ["PassiveExpiringMap.get(String)"], "external_dependencies": {"modules": ["HashMap", "PassiveExpiringMap"], "class_members": [{"name": "map", "type": "variable"}, {"name": "expiringMap", "type": "variable"}]}, "category": "unit", "description": "Tests the get method of PassiveExpiringMap when the entry is expired."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/CompositeMap_hashCodeTest.java", "testclass_name": "CompositeMap_hashCodeTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "CompositeMap_hashCodeTest", "description": "Unit tests for the hashCode method of the CompositeMap class.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testHashCodeWithSingleMap", "primary_tested": ["CompositeMap.hashCode()"], "external_dependencies": {"modules": ["HashMap", "CompositeMap", "Map"]}, "category": "unit", "description": "Tests the hashCode method of CompositeMap with a single map."}, {"name": "testHashCodeWithMultipleMaps", "primary_tested": ["CompositeMap.hashCode()"], "external_dependencies": {"modules": ["HashMap", "CompositeMap", "Map"]}, "category": "unit", "description": "Tests the hashCode method of CompositeMap with multiple maps."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/TransformedMap_putAllTest.java", "testclass_name": "TransformedMap_putAllTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.mockito.Mockito.*;"], "name": "TransformedMap_putAllTest", "description": "Unit tests for the putAll method of the TransformedMap class.", "class_members": {"variables": [{"name": "originalMap", "type": "Map<String, String>"}, {"name": "keyTransformer", "type": "Transformer<String, String>"}, {"name": "valueTransformer", "type": "Transformer<String, String>"}, {"name": "transformedMap", "type": "TransformedMap<String, String>"}, {"name": "expectedMap", "type": "Map<String, String>"}]}, "test_cases": [{"name": "testPutAll", "primary_tested": ["TransformedMap.putAll(Map<String, String>)"], "associated_methods": ["TransformedMap.decorated()"], "external_dependencies": {"modules": ["org.apache.commons.collections4.Transformer", "java.util.HashMap", "java.util.Map", "org.mockito.Mockito"], "class_members": [{"name": "originalMap", "type": "variable"}, {"name": "keyTransformer", "type": "variable"}, {"name": "valueTransformer", "type": "variable"}, {"name": "transformedMap", "type": "variable"}, {"name": "expectedMap", "type": "variable"}], "project_specific_resources": []}, "category": "unit", "description": "Tests the putAll method of the TransformedMap class, ensuring that keys and values are transformed as expected."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/PredicatedCollection_addTest.java", "testclass_name": "PredicatedCollection_addTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.List;", "import java.util.Queue;", "import java.util.Set;", "import org.apache.commons.collections4.Bag;", "import org.apache.commons.collections4.Predicate;", "import org.apache.commons.collections4.functors.NotNullPredicate;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.ArrayList;"], "name": "PredicatedCollection_addTest", "description": "Unit tests for the add functionality of PredicatedCollection with a NotNullPredicate.", "class_members": {"variables": [{"name": "predicatedCollection", "type": "PredicatedCollection<String>"}, {"name": "notNullPredicate", "type": "Predicate<String>"}], "methods": [{"name": "checkPredicatedCollection1", "signature": "void checkPredicatedCollection1(Collection<String> collection)"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAddValidElement", "primary_tested": ["PredicatedCollection.add(String)"], "external_dependencies": {"modules": ["PredicatedCollection", "NotNullPredicate"], "class_members": [{"name": "predicatedCollection", "type": "variable"}, {"name": "notNullPredicate", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests adding a valid element to the PredicatedCollection."}, {"name": "testAddNullElement", "primary_tested": ["PredicatedCollection.add(String)"], "external_dependencies": {"modules": ["PredicatedCollection", "NotNullPredicate"], "class_members": [{"name": "predicatedCollection", "type": "variable"}, {"name": "notNullPredicate", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests adding a null element to the PredicatedCollection, expecting an IllegalArgumentException."}, {"name": "testAddAllValidElements", "primary_tested": ["PredicatedCollection.addAll(Collection<? extends String>)"], "external_dependencies": {"modules": ["PredicatedCollection", "NotNullPredicate"], "class_members": [{"name": "predicatedCollection", "type": "variable"}, {"name": "notNullPredicate", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests adding a collection of valid elements to the PredicatedCollection."}, {"name": "testAddAllWithNullElement", "primary_tested": ["PredicatedCollection.addAll(Collection<? extends String>)"], "external_dependencies": {"modules": ["PredicatedCollection", "NotNullPredicate"], "class_members": [{"name": "predicatedCollection", "type": "variable"}, {"name": "notNullPredicate", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests adding a collection containing a null element to the PredicatedCollection, expecting an IllegalArgumentException."}, {"name": "testCreatePredicatedCollectionWithNotNullPredicate", "primary_tested": ["PredicatedCollection.Builder.createPredicatedList()", "PredicatedCollection.Builder.createPredicatedSet()", "PredicatedCollection.Builder.createPredicatedBag()", "PredicatedCollection.Builder.createPredicatedQueue()"], "associated_methods": ["PredicatedCollection.Builder.add(String)", "PredicatedCollection.Builder.add(String)"], "external_dependencies": {"modules": ["PredicatedCollection", "NotNullPredicate"], "class_members": [{"name": "checkPredicatedCollection1", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests creating different types of PredicatedCollections with a NotNullPredicate and adding elements to them."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_putTest.java", "testclass_name": "ListOrderedMap_putTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "ListOrderedMap_putTest", "description": "Unit tests for the put method in the ListOrderedMap class.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testPut_NewKey", "primary_tested": ["ListOrderedMap.put(int,String,String)"], "associated_methods": ["ListOrderedMap.get(String)", "ListOrderedMap.size()"], "external_dependencies": {"modules": ["ListOrderedMap", "HashMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the put method when adding a new key to the map."}, {"name": "testPut_ExistingKey", "primary_tested": ["ListOrderedMap.put(int,String,String)"], "associated_methods": ["ListOrderedMap.get(String)", "ListOrderedMap.size()"], "external_dependencies": {"modules": ["ListOrderedMap", "HashMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the put method when updating an existing key in the map."}, {"name": "testPut_IndexOutOfBounds", "primary_tested": ["ListOrderedMap.put(int,String,String)"], "external_dependencies": {"modules": ["ListOrderedMap", "HashMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the put method when the index is out of bounds."}, {"name": "testPut_ExistingKeyWithDifferentIndex", "primary_tested": ["ListOrderedMap.put(int,String,String)"], "associated_methods": ["ListOrderedMap.get(String)", "ListOrderedMap.size()"], "external_dependencies": {"modules": ["ListOrderedMap", "HashMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the put method when updating an existing key with a different index."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_sizeTest.java", "testclass_name": "CompositeCollection_sizeTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeCollection_sizeTest", "description": "Unit tests for the size method of the CompositeCollection class.", "class_members": {"variables": [{"name": "c", "type": "CompositeCollection<String>"}, {"name": "one", "type": "Collection<String>"}, {"name": "two", "type": "Collection<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testSizeEmpty", "primary_tested": ["CompositeCollection.size()"], "external_dependencies": {"modules": ["CompositeCollection"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method when the CompositeCollection is empty."}, {"name": "testSizeWithOneCollection", "primary_tested": ["CompositeCollection.size()"], "associated_methods": ["CompositeCollection.addComposited(Collection)"], "external_dependencies": {"modules": ["CompositeCollection"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method when the CompositeCollection contains one collection."}, {"name": "testSizeWithMultipleCollections", "primary_tested": ["CompositeCollection.size()"], "associated_methods": ["CompositeCollection.addComposited(Collection)"], "external_dependencies": {"modules": ["CompositeCollection"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method when the CompositeCollection contains multiple collections."}, {"name": "testSizeAfterRemoveCollection", "primary_tested": ["CompositeCollection.size()"], "associated_methods": ["CompositeCollection.addComposited(Collection)", "CompositeCollection.removeComposited(Collection)"], "external_dependencies": {"modules": ["CompositeCollection"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method after removing a collection from the CompositeCollection."}, {"name": "testSizeAfterClearCollection", "primary_tested": ["CompositeCollection.size()"], "associated_methods": ["CompositeCollection.addComposited(Collection)", "Collection.clear()"], "external_dependencies": {"modules": ["CompositeCollection"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method after clearing a collection within the CompositeCollection."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_hashCodeTest.java", "testclass_name": "StaticBucketMap_hashCodeTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "StaticBucketMap_hashCodeTest", "description": "Unit tests for the hashCode method of the StaticBucketMap class.", "class_members": {"variables": [{"name": "map", "type": "StaticBucketMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testHashCodeWithEmptyMap", "primary_tested": ["StaticBucketMap.hashCode()"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hashCode method of an empty StaticBucketMap."}, {"name": "testHashCodeWithSingleEntry", "primary_tested": ["StaticBucketMap.hashCode()"], "associated_methods": ["StaticBucketMap.put(String,String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hashCode method of a StaticBucketMap with a single entry."}, {"name": "testHashCodeWithMultipleEntries", "primary_tested": ["StaticBucketMap.hashCode()"], "associated_methods": ["StaticBucketMap.put(String,String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hashCode method of a StaticBucketMap with multiple entries."}, {"name": "testHashCodeWithNullKey", "primary_tested": ["StaticBucketMap.hashCode()"], "associated_methods": ["StaticBucketMap.put(String,String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hashCode method of a StaticBucketMap with a null key."}, {"name": "testHashCodeWithNullValue", "primary_tested": ["StaticBucketMap.hashCode()"], "associated_methods": ["StaticBucketMap.put(String,String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hashCode method of a StaticBucketMap with a null value."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/SingletonMap_setValueTest.java", "testclass_name": "SingletonMap_setValueTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SingletonMap_setValueTest", "description": "Unit tests for the setValue method of SingletonMap.", "class_members": {"variables": [{"name": "singletonMap", "type": "SingletonMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testSetValue", "primary_tested": ["SingletonMap.setValue(String)"], "associated_methods": ["SingletonMap.getValue()"], "external_dependencies": {"modules": ["SingletonMap"], "class_members": [{"name": "singletonMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the setValue method of SingletonMap and verifies the old value and new value."}, {"name": "testSetValueWithNull", "primary_tested": ["SingletonMap.setValue(String)"], "associated_methods": ["SingletonMap.getValue()"], "external_dependencies": {"modules": ["SingletonMap"], "class_members": [{"name": "singletonMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the setValue method of SingletonMap with null value and verifies the old value and new value."}, {"name": "testSetValueAndCheckWithGet", "primary_tested": ["SingletonMap.setValue(String)"], "associated_methods": ["SingletonMap.get(String)"], "external_dependencies": {"modules": ["SingletonMap"], "class_members": [{"name": "singletonMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the setValue method of SingletonMap and verifies the new value using the get method."}, {"name": "testSetValueAndCheckWithGetValue", "primary_tested": ["SingletonMap.setValue(String)"], "associated_methods": ["SingletonMap.getValue()"], "external_dependencies": {"modules": ["SingletonMap"], "class_members": [{"name": "singletonMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the setValue method of SingletonMap and verifies the new value using the getValue method."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/TransformedSortedMap_transformedSortedMapTest.java", "testclass_name": "TransformedSortedMap_transformedSortedMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.Test;", "import java.util.SortedMap;", "import java.util.TreeMap;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "TransformedSortedMap_transformedSortedMapTest", "description": "Unit tests for the TransformedSortedMap class, specifically testing the transformedSortedMap method with both non-empty and empty maps.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testTransformedSortedMapWithNonEmptyMap", "primary_tested": ["TransformedSortedMap.transformedSortedMap(SortedMap<String, Integer>, Transformer<String, String>, Transformer<Integer, Integer>)"], "associated_methods": ["TransformedSortedMap.size()", "TransformedSortedMap.containsKey(String)", "TransformedSortedMap.get(String)"], "external_dependencies": {"modules": ["SortedMap", "TreeMap", "Transformer", "TransformedSortedMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformedSortedMap method with a non-empty map, ensuring the key and value transformations are applied correctly."}, {"name": "testTransformedSortedMapWithEmptyMap", "primary_tested": ["TransformedSortedMap.transformedSortedMap(SortedMap<String, Integer>, Transformer<String, String>, Transformer<Integer, Integer>)"], "associated_methods": ["TransformedSortedMap.isEmpty()"], "external_dependencies": {"modules": ["SortedMap", "TreeMap", "Transformer", "TransformedSortedMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformedSortedMap method with an empty map, ensuring the resulting map is also empty."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/SingletonMap_entrySetTest.java", "testclass_name": "SingletonMap_entrySetTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.junit.jupiter.api.Test;", "import java.util.Map;", "import java.util.Set;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "SingletonMap_entrySetTest", "description": "Unit tests for the entrySet method of SingletonMap.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testEntrySet", "primary_tested": ["SingletonMap.entrySet()"], "associated_methods": ["Set.size()", "Set.iterator()", "Iterator.next()", "Map.Entry.getKey()", "Map.Entry.getValue()"], "external_dependencies": {"modules": ["SingletonMap", "Map", "Set", "Map.Entry", "Iterator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the entrySet method of SingletonMap to ensure it returns a set with the correct entry."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/CompositeMap_addCompositedTest.java", "testclass_name": "CompositeMap_addCompositedTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Map;", "import java.util.Collection;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeMap_addCompositedTest", "description": "Tests for the addComposited method of the CompositeMap class.", "class_members": {"variables": [{"name": "compositeMap", "type": "CompositeMap<String, String>"}, {"name": "map1", "type": "Map<String, String>"}, {"name": "map2", "type": "Map<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAddCompositedSuccess", "primary_tested": ["CompositeMap.addComposited(Map<String, String>)"], "associated_methods": ["CompositeMap.size()", "CompositeMap.containsKey(String)"], "external_dependencies": {"modules": ["CompositeMap", "Map", "HashMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful addition of a new map to the CompositeMap without key collisions."}, {"name": "testAddCompositedKeyCollisionWithoutMutator", "primary_tested": ["CompositeMap.addComposited(Map<String, String>)"], "associated_methods": [], "external_dependencies": {"modules": ["CompositeMap", "Map", "HashMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior of adding a new map to the CompositeMap with key collisions when no mutator is set, expecting an IllegalArgumentException."}, {"name": "testAddCompositedKeyCollisionWithMutator", "primary_tested": ["CompositeMap.addComposited(Map<String, String>)"], "associated_methods": ["CompositeMap.size()", "CompositeMap.containsKey(String)"], "external_dependencies": {"modules": ["CompositeMap", "Map", "HashMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior of adding a new map to the CompositeMap with key collisions when a mutator is set to resolve the collisions."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_clearTest.java", "testclass_name": "PassiveExpiringMap_clearTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "PassiveExpiringMap_clearTest", "description": "Unit tests for the clear functionality of the PassiveExpiringMap class.", "class_members": {"variables": [{"name": "expiringMap", "type": "PassiveExpiringMap<Integer, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testClear", "primary_tested": ["PassiveExpiringMap.clear()"], "external_dependencies": {"modules": ["PassiveExpiringMap"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clear functionality of the PassiveExpiringMap when entries do not expire."}, {"name": "testClearWithExpiredEntries", "primary_tested": ["PassiveExpiringMap.clear()"], "external_dependencies": {"modules": ["PassiveExpiringMap"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "description": "Tests the clear functionality of the PassiveExpiringMap when entries expire after 1 millisecond."}, {"name": "testClearWithNonExpiredEntries", "primary_tested": ["PassiveExpiringMap.clear()"], "external_dependencies": {"modules": ["PassiveExpiringMap"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "description": "Tests the clear functionality of the PassiveExpiringMap when entries expire after 1 second."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/TransformedMap_transformedMapTest.java", "testclass_name": "TransformedMap_transformedMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "TransformedMap_transformedMapTest", "description": "Unit tests for the TransformedMap class, specifically testing the transformation of keys and values in a map.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testTransformedMapWithNonEmptyMap", "primary_tested": ["TransformedMap.transformedMap(Map<String,Integer>,Transformer<String,String>,Transformer<Integer,Integer>)"], "associated_methods": ["TransformedMap.decorated()"], "external_dependencies": {"modules": ["TransformedMap", "Transformer", "HashMap", "Map"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformation of keys and values in a non-empty map using TransformedMap."}, {"name": "testTransformedMapWithEmptyMap", "primary_tested": ["TransformedMap.transformedMap(Map<String,Integer>,Transformer<String,String>,Transformer<Integer,Integer>)"], "associated_methods": ["TransformedMap.decorated()"], "external_dependencies": {"modules": ["TransformedMap", "Transformer", "HashMap", "Map"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformation of keys and values in an empty map using TransformedMap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/sequence/SequencesComparator_getScriptTest.java", "testclass_name": "SequencesComparator_getScriptTest", "dependencies": ["package org.apache.commons.collections4.sequence;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "SequencesComparator_getScriptTest", "description": "Unit test for the getScript method of the SequencesComparator class.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testGetScript", "primary_tested": ["SequencesComparator.getScript()"], "external_dependencies": {"modules": ["SequencesComparator", "EditScript", "Arrays", "List"]}, "category": "unit", "description": "Tests the getScript method of the SequencesComparator class, verifying the number of modifications and the length of the longest common subsequence."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_nextKeyTest.java", "testclass_name": "ListOrderedMap_nextKeyTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ListOrderedMap_nextKeyTest", "description": "Unit tests for the nextKey method in ListOrderedMap.", "class_members": {"variables": [{"name": "listOrderedMap", "type": "ListOrderedMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNextKeyWithValidKey", "primary_tested": ["ListOrderedMap.nextKey(String)"], "external_dependencies": {"modules": ["ListOrderedMap"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the nextKey method with valid keys in the ListOrderedMap."}, {"name": "testNextKeyWithLastKey", "primary_tested": ["ListOrderedMap.nextKey(String)"], "external_dependencies": {"modules": ["ListOrderedMap"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the nextKey method with the last key in the ListOrderedMap."}, {"name": "testNextKeyWithInvalidKey", "primary_tested": ["ListOrderedMap.nextKey(String)"], "external_dependencies": {"modules": ["ListOrderedMap"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the nextKey method with an invalid key in the ListOrderedMap."}, {"name": "testNextKeyWithEmptyMap", "primary_tested": ["ListOrderedMap.nextKey(String)"], "associated_methods": ["ListOrderedMap.clear()"], "external_dependencies": {"modules": ["ListOrderedMap"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the nextKey method with an empty ListOrderedMap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/SingletonMap_putAllTest.java", "testclass_name": "SingletonMap_putAllTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "SingletonMap_putAllTest", "description": "Tests for the putAll method of the SingletonMap class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testPutAll_EmptyMap", "primary_tested": ["SingletonMap.putAll(Map)"], "external_dependencies": {"modules": ["SingletonMap", "HashMap", "Map"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the putAll method with an empty map."}, {"name": "testPutAll_SingleEntryMap", "primary_tested": ["SingletonMap.putAll(Map)"], "external_dependencies": {"modules": ["SingletonMap", "HashMap", "Map"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the putAll method with a map containing a single entry."}, {"name": "testPutAll_MultipleEntriesMap", "primary_tested": ["SingletonMap.putAll(Map)"], "external_dependencies": {"modules": ["SingletonMap", "HashMap", "Map"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the putAll method with a map containing multiple entries, expecting an IllegalArgumentException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/PredicatedSortedMap_headMapTest.java", "testclass_name": "PredicatedSortedMap_headMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.Predicate;", "import org.junit.jupiter.api.Test;", "import java.util.SortedMap;", "import java.util.TreeMap;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "PredicatedSortedMap_headMapTest", "description": "Unit tests for the headMap functionality of PredicatedSortedMap.", "class_members": {"variables": [{"name": "originalMap", "type": "SortedMap<Integer, String>"}, {"name": "keyPredicate", "type": "Predicate<Integer>"}, {"name": "valuePredicate", "type": "Predicate<String>"}, {"name": "predicatedMap", "type": "PredicatedSortedMap<Integer, String>"}]}, "test_cases": [{"name": "testHeadMap", "primary_tested": ["PredicatedSortedMap.headMap(Integer)"], "associated_methods": ["SortedMap.put(Integer,String)", "SortedMap.size()", "SortedMap.containsKey(Integer)"], "external_dependencies": {"modules": ["SortedMap", "TreeMap", "Predicate", "PredicatedSortedMap"], "class_members": [{"name": "originalMap", "type": "variable"}, {"name": "keyPredicate", "type": "variable"}, {"name": "valuePredicate", "type": "variable"}, {"name": "predicatedMap", "type": "variable"}]}, "category": "unit", "description": "Tests the headMap functionality of the PredicatedSortedMap, ensuring it returns the correct subset of the map."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/PredicatedSortedMap_tailMapTest.java", "testclass_name": "PredicatedSortedMap_tailMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.Predicate;", "import org.junit.jupiter.api.Test;", "import java.util.SortedMap;", "import java.util.TreeMap;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "PredicatedSortedMap_tailMapTest", "description": "Unit tests for the tailMap functionality of PredicatedSortedMap.", "class_members": {"variables": [{"name": "originalMap", "type": "SortedMap<Integer, String>"}, {"name": "keyPredicate", "type": "Predicate<Integer>"}, {"name": "valuePredicate", "type": "Predicate<String>"}, {"name": "predicatedMap", "type": "PredicatedSortedMap<Integer, String>"}]}, "test_cases": [{"name": "testTailMap", "primary_tested": ["PredicatedSortedMap.tailMap(Integer)"], "associated_methods": ["SortedMap.put(Integer,String)", "SortedMap.size()", "SortedMap.containsKey(Integer)"], "external_dependencies": {"modules": ["SortedMap", "TreeMap", "Predicate", "PredicatedSortedMap"], "class_members": [{"name": "originalMap", "type": "variable"}, {"name": "keyPredicate", "type": "variable"}, {"name": "valuePredicate", "type": "variable"}, {"name": "predicatedMap", "type": "variable"}]}, "category": "unit", "description": "Tests the tailMap functionality of the PredicatedSortedMap, ensuring it returns the correct subset of the map."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_removeTest.java", "testclass_name": "ListOrderedMap_removeTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "ListOrderedMap_removeTest", "description": "Unit tests for the remove functionality of the ListOrderedMap class.", "class_members": {"variables": [{"name": "map", "type": "ListOrderedMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveExistingKey", "primary_tested": ["ListOrderedMap.remove(String)"], "associated_methods": ["ListOrderedMap.containsKey(String)"], "external_dependencies": {"modules": ["ListOrderedMap", "HashMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of an existing key from the ListOrderedMap."}, {"name": "testRemoveNonExistingKey", "primary_tested": ["ListOrderedMap.remove(String)"], "associated_methods": ["ListOrderedMap.containsKey(String)"], "external_dependencies": {"modules": ["ListOrderedMap", "HashMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of a non-existing key from the ListOrderedMap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/CompositeMap_containsValueTest.java", "testclass_name": "CompositeMap_containsValueTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeMap_containsValueTest", "description": "Unit tests for the containsValue method in CompositeMap.", "class_members": {"variables": [{"name": "compositeMap", "type": "CompositeMap<String, String>"}, {"name": "map1", "type": "Map<String, String>"}, {"name": "map2", "type": "Map<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testContainsValue_ValuePresentInFirstMap", "primary_tested": ["CompositeMap.containsValue(String)"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the containsValue method correctly identifies a value present in the first map."}, {"name": "testContainsValue_ValuePresentInSecondMap", "primary_tested": ["CompositeMap.containsValue(String)"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the containsValue method correctly identifies a value present in the second map."}, {"name": "testContainsValue_ValueNotPresent", "primary_tested": ["CompositeMap.containsValue(String)"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the containsValue method correctly identifies a value not present in either map."}, {"name": "testContainsValue_NullValuePresent", "primary_tested": ["CompositeMap.containsValue(String)"], "associated_methods": ["Map.put(String,String)"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}, {"name": "map1", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the containsValue method correctly identifies a null value present in the map."}, {"name": "testContainsValue_NullValueNotPresent", "primary_tested": ["CompositeMap.containsValue(String)"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the containsValue method correctly identifies a null value not present in the map."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/functors/AllPredicate_testTest.java", "testclass_name": "AllPredicate_testTest", "dependencies": ["package org.apache.commons.collections4.functors;", "import org.apache.commons.collections4.Predicate;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;"], "name": "AllPredicate_testTest", "description": "Unit tests for the AllPredicate class in Apache Commons Collections, focusing on the behavior of the predicate when all or some predicates return true or false.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testAllPredicatesTrue", "primary_tested": ["AllPredicate.test(String)"], "associated_methods": ["Predicate.test(String)"], "external_dependencies": {"modules": ["Predicate", "AllPredicate"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the AllPredicate functionality when all predicates return true."}, {"name": "testOnePredicateFalse", "primary_tested": ["AllPredicate.test(String)"], "associated_methods": ["Predicate.test(String)"], "external_dependencies": {"modules": ["Predicate", "AllPredicate"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the AllPredicate functionality when one predicate returns false."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/ComparatorChain_hashCodeTest.java", "testclass_name": "ComparatorChain_hashCodeTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import org.junit.jupiter.api.Test;", "import java.util.ArrayList;", "import java.util.BitSet;", "import java.util.Comparator;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "ComparatorChain_hashCodeTest", "description": "Unit test for the hashCode method of the ComparatorChain class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testHashCode", "primary_tested": ["ComparatorChain.hashCode()"], "external_dependencies": {"modules": ["ArrayList", "BitSet", "Comparator", "ComparatorChain", "List"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the hashCode method of the ComparatorChain class to ensure it returns the expected hash code based on the comparators and bitset."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/functors/EqualPredicate_equalPredicateTest.java", "testclass_name": "EqualPredicate_equalPredicateTest", "dependencies": ["package org.apache.commons.collections4.functors;", "import org.apache.commons.collections4.Predicate;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "EqualPredicate_equalPredicateTest", "description": "Unit tests for the EqualPredicate class, specifically testing the equalPredicate method with non-null and null objects.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testEqualPredicateWithNonNullObject", "primary_tested": ["EqualPredicate.equalPredicate(String)"], "associated_methods": ["Predicate.test(String)"], "external_dependencies": {"modules": ["EqualPredicate", "Predicate"]}, "category": "unit", "description": "Tests the EqualPredicate with a non-null object, ensuring it returns true for the same object and false for a different object."}, {"name": "testEqualPredicateWithNullObject", "primary_tested": ["EqualPredicate.equalPredicate(String)"], "associated_methods": ["Predicate.test(String)"], "external_dependencies": {"modules": ["EqualPredicate", "Predicate"]}, "category": "unit", "description": "Tests the EqualPredicate with a null object, ensuring it returns true for null and false for a non-null object."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/CompositeMap_removeCompositedTest.java", "testclass_name": "CompositeMap_removeCompositedTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeMap_removeCompositedTest", "description": "Unit tests for the removeComposited method of the CompositeMap class.", "class_members": {"variables": [{"name": "compositeMap", "type": "CompositeMap<String, String>"}, {"name": "mapOne", "type": "Map<String, String>"}, {"name": "mapTwo", "type": "Map<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveCompositedExistingMap", "primary_tested": ["CompositeMap.removeComposited(Map<String, String>)"], "associated_methods": ["CompositeMap.containsKey(String)", "CompositeMap.size()"], "external_dependencies": {"modules": ["CompositeMap", "Map", "HashMap"], "class_members": [{"name": "compositeMap", "type": "variable"}, {"name": "mapTwo", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of an existing map from the CompositeMap."}, {"name": "testRemoveCompositedNonExistingMap", "primary_tested": ["CompositeMap.removeComposited(Map<String, String>)"], "associated_methods": ["CompositeMap.size()"], "external_dependencies": {"modules": ["CompositeMap", "Map", "HashMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of a non-existing map from the CompositeMap."}, {"name": "testRemoveCompositedEmptyCompositeMap", "primary_tested": ["CompositeMap.removeComposited(Map<String, String>)"], "associated_methods": ["CompositeMap.isEmpty()"], "external_dependencies": {"modules": ["CompositeMap", "Map", "HashMap"], "class_members": [{"name": "mapOne", "type": "variable"}]}, "category": "unit", "description": "Tests the removal of a map from an empty CompositeMap."}, {"name": "testRemoveCompositedSingleMap", "primary_tested": ["CompositeMap.removeComposited(Map<String, String>)"], "associated_methods": ["CompositeMap.isEmpty()"], "external_dependencies": {"modules": ["CompositeMap", "Map", "HashMap"], "class_members": [{"name": "mapOne", "type": "variable"}]}, "category": "unit", "description": "Tests the removal of a single map from a CompositeMap containing only one map."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/TransformedSortedMap_headMapTest.java", "testclass_name": "TransformedSortedMap_headMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.SortedMap;", "import java.util.TreeMap;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.TransformerUtils;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "TransformedSortedMap_headMapTest", "description": "Unit tests for the headMap functionality of TransformedSortedMap.", "class_members": {"variables": [{"name": "baseMap", "type": "SortedMap<String, String>"}, {"name": "keyTransformer", "type": "Transformer<String, String>"}, {"name": "valueTransformer", "type": "Transformer<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testHeadMap", "primary_tested": ["TransformedSortedMap.headMap(String)"], "external_dependencies": {"modules": ["SortedMap", "TreeMap", "Transformer", "TransformerUtils", "TransformedSortedMap"], "class_members": [{"name": "baseMap", "type": "variable"}, {"name": "keyTransformer", "type": "variable"}, {"name": "valueTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the headMap functionality of TransformedSortedMap with no-operation transformers."}, {"name": "testHeadMapWithTransformers", "primary_tested": ["TransformedSortedMap.headMap(String)"], "external_dependencies": {"modules": ["SortedMap", "TreeMap", "Transformer", "TransformerUtils", "TransformedSortedMap"], "class_members": [{"name": "baseMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the headMap functionality of TransformedSortedMap with string value transformers."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/CompositeMap_valuesTest.java", "testclass_name": "CompositeMap_valuesTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Collection;", "import java.util.HashMap;", "import java.util.Map;", "import org.apache.commons.collections4.collection.CompositeCollection;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeMap_valuesTest", "description": "Unit tests for the values method in CompositeMap class.", "class_members": {"variables": [{"name": "compositeMap", "type": "CompositeMap<String, String>"}, {"name": "map1", "type": "Map<String, String>"}, {"name": "map2", "type": "Map<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testValues", "primary_tested": ["CompositeMap.values()"], "external_dependencies": {"modules": ["CompositeMap", "Collection"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the values method of CompositeMap to ensure it returns the correct collection of values."}, {"name": "testValuesAfterAddComposited", "primary_tested": ["CompositeMap.values()"], "associated_methods": ["CompositeMap.addComposited(Map<String, String>)"], "external_dependencies": {"modules": ["CompositeMap", "Collection", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the values method of CompositeMap after adding a new map to ensure it includes the new values."}, {"name": "testValuesAfterRemoveComposited", "primary_tested": ["CompositeMap.values()"], "associated_methods": ["CompositeMap.removeComposited(Map<String, String>)"], "external_dependencies": {"modules": ["CompositeMap", "Collection", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the values method of CompositeMap after removing a map to ensure it no longer includes the removed values."}, {"name": "testValuesEmptyCompositeMap", "primary_tested": ["CompositeMap.values()"], "external_dependencies": {"modules": ["CompositeMap", "Collection"]}, "category": "unit", "description": "Tests the values method of an empty CompositeMap to ensure it returns an empty collection."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/CompositeMap_putAllTest.java", "testclass_name": "CompositeMap_putAllTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Map;", "import java.util.Collection;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeMap_putAllTest", "description": "Tests for the putAll method in CompositeMap, including scenarios with and without a MapMutator.", "class_members": {"variables": [{"name": "compositeMap", "type": "CompositeMap<String, String>"}, {"name": "mapOne", "type": "Map<String, String>"}, {"name": "mapTwo", "type": "Map<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPutAllWithMutator", "primary_tested": ["CompositeMap.putAll(Map<? extends String, ? extends String>)"], "associated_methods": ["CompositeMap.setMutator(CompositeMap.MapMutator<String, String>)", "CompositeMap.put(String, String)", "CompositeMap.size()", "CompositeMap.containsKey(String)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap", "Map", "Collection"], "class_members": [{"name": "compositeMap", "type": "variable"}, {"name": "mapOne", "type": "variable"}, {"name": "mapTwo", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the putAll method of CompositeMap with a MapMutator, ensuring that the new entries are added and the size and key presence are verified."}, {"name": "testPutAllWithoutMutator", "primary_tested": ["CompositeMap.putAll(Map<? extends String, ? extends String>)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the putAll method of CompositeMap without a MapMutator, expecting an UnsupportedOperationException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/BooleanComparator_hashCodeTest.java", "testclass_name": "BooleanComparator_hashCodeTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "BooleanComparator_hashCodeTest", "description": "Unit tests for the hashCode method of the BooleanComparator class.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testHashCodeTrueFirst", "primary_tested": ["BooleanComparator.hashCode()"], "external_dependencies": {"modules": ["BooleanComparator"]}, "category": "unit", "description": "Tests the hashCode method of BooleanComparator when true is first."}, {"name": "testHashCodeFalseFirst", "primary_tested": ["BooleanComparator.hashCode()"], "external_dependencies": {"modules": ["BooleanComparator"]}, "category": "unit", "description": "Tests the hashCode method of BooleanComparator when false is first."}, {"name": "testHashCodeConsistencyWithEquals", "primary_tested": ["BooleanComparator.hashCode()"], "associated_methods": ["BooleanComparator.equals(Object)"], "external_dependencies": {"modules": ["BooleanComparator"]}, "category": "unit", "description": "Tests the consistency of the hashCode method with the equals method of BooleanComparator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_keySetTest.java", "testclass_name": "PassiveExpiringMap_keySetTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Map;", "import java.util.Set;", "import java.util.concurrent.TimeUnit;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "PassiveExpiringMap_keySetTest", "description": "Unit tests for the keySet functionality of PassiveExpiringMap, focusing on the behavior with expired and non-expired entries.", "class_members": {"variables": [{"name": "expiringMap", "type": "PassiveExpiringMap<Integer, String>"}], "methods": [{"name": "makeTestMap", "signature": "Map<Integer, String> makeTestMap()"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testKeySetWithExpiredEntries", "primary_tested": ["PassiveExpiringMap.keySet()"], "external_dependencies": {"modules": ["PassiveExpiringMap", "Set", "Thread"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the keySet method when all entries have expired."}, {"name": "testKeySetWithoutExpiredEntries", "primary_tested": ["PassiveExpiringMap.keySet()"], "external_dependencies": {"modules": ["PassiveExpiringMap", "Set"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the keySet method when no entries have expired."}, {"name": "testKeySetWithMixedExpiry", "primary_tested": ["PassiveExpiringMap.keySet()"], "external_dependencies": {"modules": ["PassiveExpiringMap", "Set", "Thread"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the keySet method when entries have mixed expiry states."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/LazyMap_getTest.java", "testclass_name": "LazyMap_getTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.Factory;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.mockito.Mockito.*;"], "name": "LazyMap_getTest", "description": "Unit tests for the get method of LazyMap.", "class_members": {"variables": [{"name": "map", "type": "Map<String, String>"}, {"name": "factory", "type": "Factory<String>"}, {"name": "lazyMap", "type": "LazyMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGet_KeyNotInMap", "primary_tested": ["LazyMap.get(String)"], "associated_methods": ["Factory.create()"], "external_dependencies": {"modules": ["LazyMap", "Factory", "Map", "HashMap"], "class_members": [{"name": "lazyMap", "type": "variable"}, {"name": "factory", "type": "variable"}, {"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method of LazyMap when the key is not present in the map."}, {"name": "testGet_KeyInMap", "primary_tested": ["LazyMap.get(String)"], "associated_methods": ["Factory.create()"], "external_dependencies": {"modules": ["LazyMap", "Factory", "Map", "HashMap"], "class_members": [{"name": "lazyMap", "type": "variable"}, {"name": "factory", "type": "variable"}, {"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method of LazyMap when the key is already present in the map."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/functors/AllPredicate_allPredicateTest.java", "testclass_name": "AllPredicate_allPredicateTest", "dependencies": ["package org.apache.commons.collections4.functors;", "import org.apache.commons.collections4.Predicate;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Collection;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.assertSame;"], "name": "AllPredicate_allPredicateTest", "description": "Unit tests for the AllPredicate.allPredicate method in the Apache Commons Collections4 library.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testAllPredicate_EmptyCollection", "primary_tested": ["AllPredicate.allPredicate(Collection<Predicate<Object>>)"], "external_dependencies": {"modules": ["AllPredicate", "Predicate", "Arrays"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of AllPredicate.allPredicate when provided with an empty collection of predicates."}, {"name": "testAllPredicate_SinglePredicate", "primary_tested": ["AllPredicate.allPredicate(Collection<Predicate<Object>>)"], "external_dependencies": {"modules": ["AllPredicate", "Predicate", "Arrays"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of AllPredicate.allPredicate when provided with a single predicate."}, {"name": "testAllPredicate_MultiplePredicates", "primary_tested": ["AllPredicate.allPredicate(Collection<Predicate<Object>>)"], "external_dependencies": {"modules": ["AllPredicate", "Predicate", "Arrays"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of AllPredicate.allPredicate when provided with multiple predicates."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/ComparatorChain_addComparatorTest.java", "testclass_name": "ComparatorChain_addComparatorTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import org.junit.jupiter.api.Test;", "import java.util.ArrayList;", "import java.util.BitSet;", "import java.util.Comparator;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "ComparatorChain_addComparatorTest", "description": "Unit test for the addComparator method of the ComparatorChain class.", "class_members": {"variables": [{"name": "comparators", "type": "List<Comparator<String>>"}, {"name": "bits", "type": "BitSet"}, {"name": "chain", "type": "ComparatorChain<String>"}, {"name": "comparator", "type": "Comparator<String>"}]}, "test_cases": [{"name": "testAddComparator", "primary_tested": ["ComparatorChain.addComparator(Comparator<String>,boolean)"], "associated_methods": ["ComparatorChain.size()", "BitSet.get(int)"], "external_dependencies": {"modules": ["java.util.ArrayList", "java.util.BitSet", "java.util.Comparator", "java.util.List", "org.apache.commons.collections4.comparators.ComparatorChain"], "class_members": [{"name": "comparators", "type": "variable"}, {"name": "bits", "type": "variable"}, {"name": "chain", "type": "variable"}, {"name": "comparator", "type": "variable"}]}, "category": "unit", "description": "Tests the addition of a comparator to the ComparatorChain and verifies the size of the chain and the state of the BitSet."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/functors/ComparatorPredicate_comparatorPredicateTest.java", "testclass_name": "ComparatorPredicate_comparatorPredicateTest", "dependencies": ["package org.apache.commons.collections4.functors;", "import org.apache.commons.collections4.Predicate;", "import org.junit.jupiter.api.Test;", "import java.util.Comparator;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "ComparatorPredicate_comparatorPredicateTest", "description": "Unit tests for the ComparatorPredicate class, focusing on the comparatorPredicate method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testComparatorPredicate_WithNonNullComparatorAndCriterion", "primary_tested": ["ComparatorPredicate.comparatorPredicate(Integer,Comparator<Integer>,ComparatorPredicate.Criterion)"], "external_dependencies": {"modules": ["Comparator", "Predicate", "ComparatorPredicate", "ComparatorPredicate.Criterion"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the comparatorPredicate method with a non-null comparator and criterion."}, {"name": "testComparatorPredicate_WithNullComparator", "primary_tested": ["ComparatorPredicate.comparatorPredicate(Integer,Comparator<Integer>,ComparatorPredicate.Criterion)"], "external_dependencies": {"modules": ["Comparator", "ComparatorPredicate", "ComparatorPredicate.Criterion"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the comparatorPredicate method with a null comparator, expecting a NullPointerException."}, {"name": "testComparatorPredicate_WithNullCriterion", "primary_tested": ["ComparatorPredicate.comparatorPredicate(Integer,Comparator<Integer>,ComparatorPredicate.Criterion)"], "external_dependencies": {"modules": ["Comparator", "ComparatorPredicate", "ComparatorPredicate.Criterion"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the comparatorPredicate method with a null criterion, expecting a NullPointerException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/CompositeMap_equalsTest.java", "testclass_name": "CompositeMap_equalsTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeMap_equalsTest", "description": "Unit tests for the equals method of the CompositeMap class.", "class_members": {"variables": [{"name": "one", "type": "Map<String, String>"}, {"name": "two", "type": "Map<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEqualsWithEqualMaps", "primary_tested": ["CompositeMap.equals(Object)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap", "Map"], "class_members": [{"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with two equal maps."}, {"name": "testEqualsWithDifferentMaps", "primary_tested": ["CompositeMap.equals(Object)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap", "Map"], "class_members": [{"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with two different maps."}, {"name": "testEqualsWithNonMapObject", "primary_tested": ["CompositeMap.equals(Object)"], "external_dependencies": {"modules": ["CompositeMap"], "class_members": [{"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with a non-map object."}, {"name": "testEqualsWithEmptyMap", "primary_tested": ["CompositeMap.equals(Object)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap", "Map"], "class_members": [{"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with an empty map."}, {"name": "testEqualsWithNull", "primary_tested": ["CompositeMap.equals(Object)"], "external_dependencies": {"modules": ["CompositeMap"], "class_members": [{"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with a null object."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/functors/EqualPredicate_testTest.java", "testclass_name": "EqualPredicate_testTest", "dependencies": ["package org.apache.commons.collections4.functors;", "import org.apache.commons.collections4.Equator;", "import org.apache.commons.collections4.Predicate;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;"], "name": "EqualPredicate_testTest", "description": "Unit tests for the EqualPredicate class, focusing on its functionality with and without an Equator.", "class_members": {"variables": [{"name": "expectedValue", "type": "String"}, {"name": "equator", "type": "Equator<String>"}, {"name": "predicate", "type": "Predicate<String>"}]}, "test_cases": [{"name": "testWithEquator", "primary_tested": ["EqualPredicate.equalPredicate(String,Equator<String>)"], "associated_methods": ["Equator.equate(String,String)"], "external_dependencies": {"modules": ["Equator", "Predicate", "EqualPredicate"], "class_members": [{"name": "expectedValue", "type": "variable"}, {"name": "equator", "type": "variable"}, {"name": "predicate", "type": "variable"}]}, "category": "unit", "description": "Tests the EqualPredicate functionality when an Equator is provided."}, {"name": "testWithoutEquator", "primary_tested": ["EqualPredicate.equalPredicate(String)"], "external_dependencies": {"modules": ["Predicate", "EqualPredicate"], "class_members": [{"name": "expectedValue", "type": "variable"}, {"name": "predicate", "type": "variable"}]}, "category": "unit", "description": "Tests the EqualPredicate functionality when no Equator is provided."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/splitmap/TransformedSplitMap_transformingMapTest.java", "testclass_name": "TransformedSplitMap_transformingMapTest", "dependencies": ["package org.apache.commons.collections4.splitmap;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.map.LinkedMap;", "import org.junit.jupiter.api.Test;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.assertNotNull;"], "name": "TransformedSplitMap_transformingMapTest", "description": "Unit tests for the TransformedSplitMap transformingMap functionality.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testTransformingMap", "primary_tested": ["TransformedSplitMap.transformingMap(Map,Transformer,Transformer)"], "external_dependencies": {"modules": ["LinkedMap", "Transformer", "TransformedSplitMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the creation of a TransformedSplitMap using transformingMap method."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/ReverseComparator_equalsTest.java", "testclass_name": "ReverseComparator_equalsTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import org.junit.jupiter.api.Test;", "import java.util.Comparator;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "ReverseComparator_equalsTest", "description": "Unit tests for the equals method of the ReverseComparator class.", "class_members": {"variables": [{"name": "naturalOrder", "type": "Comparator<Integer>"}, {"name": "rc1", "type": "ReverseComparator<Integer>"}, {"name": "rc2", "type": "ReverseComparator<Integer>"}, {"name": "rc3", "type": "ReverseComparator<Integer>"}]}, "test_cases": [{"name": "testEquals", "primary_tested": ["ReverseComparator.equals(Object)"], "external_dependencies": {"modules": ["Comparator", "ReverseComparator"], "class_members": [{"name": "naturalOrder", "type": "variable"}, {"name": "rc1", "type": "variable"}, {"name": "rc2", "type": "variable"}, {"name": "rc3", "type": "variable"}]}, "category": "unit", "description": "Tests the equals method of the ReverseComparator class, including same instance, null comparison, same class with same comparator, same class with different comparator, and different class comparison."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/TransformedSortedMap_tailMapTest.java", "testclass_name": "TransformedSortedMap_tailMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.SortedMap;", "import java.util.TreeMap;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.TransformerUtils;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "TransformedSortedMap_tailMapTest", "description": "Unit tests for the tailMap functionality of TransformedSortedMap.", "class_members": {"variables": [{"name": "baseMap", "type": "SortedMap<String, String>"}, {"name": "keyTransformer", "type": "Transformer<String, String>"}, {"name": "valueTransformer", "type": "Transformer<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testTailMap", "primary_tested": ["TransformedSortedMap.tailMap(String)"], "associated_methods": ["SortedMap.size()", "SortedMap.get(String)"], "external_dependencies": {"modules": ["TransformedSortedMap", "SortedMap", "Transformer", "TransformerUtils"], "class_members": [{"name": "baseMap", "type": "variable"}, {"name": "keyTransformer", "type": "variable"}, {"name": "valueTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the tailMap functionality of TransformedSortedMap, ensuring it returns the correct submap starting from the specified key."}, {"name": "testTailMapWithNullKey", "primary_tested": ["TransformedSortedMap.tailMap(String)"], "external_dependencies": {"modules": ["TransformedSortedMap", "Transformer", "TransformerUtils"], "class_members": [{"name": "baseMap", "type": "variable"}, {"name": "keyTransformer", "type": "variable"}, {"name": "valueTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the tailMap functionality of TransformedSortedMap when a null key is provided, expecting a NullPointerException."}, {"name": "testTailMapWithNonExistentKey", "primary_tested": ["TransformedSortedMap.tailMap(String)"], "associated_methods": ["SortedMap.size()"], "external_dependencies": {"modules": ["TransformedSortedMap", "SortedMap", "Transformer", "TransformerUtils"], "class_members": [{"name": "baseMap", "type": "variable"}, {"name": "keyTransformer", "type": "variable"}, {"name": "valueTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the tailMap functionality of TransformedSortedMap when a non-existent key is provided, ensuring it returns an empty submap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/BooleanComparator_equalsTest.java", "testclass_name": "BooleanComparator_equalsTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.junit.jupiter.api.Test;"], "name": "BooleanComparator_equalsTest", "description": "Unit tests for the equals method of the BooleanComparator class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testEquals_SameInstance", "primary_tested": ["BooleanComparator.equals(Object)"], "external_dependencies": {"modules": ["BooleanComparator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the equals method with the same instance."}, {"name": "testEquals_DifferentInstanceSameState", "primary_tested": ["BooleanComparator.equals(Object)"], "external_dependencies": {"modules": ["BooleanComparator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the equals method with different instances but the same state."}, {"name": "testEquals_DifferentInstanceDifferentState", "primary_tested": ["BooleanComparator.equals(Object)"], "external_dependencies": {"modules": ["BooleanComparator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the equals method with different instances and different states."}, {"name": "testEquals_DifferentClass", "primary_tested": ["BooleanComparator.equals(Object)"], "external_dependencies": {"modules": ["BooleanComparator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the equals method with an instance of a different class."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_containsValueTest.java", "testclass_name": "StaticBucketMap_containsValueTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "StaticBucketMap_containsValueTest", "description": "Unit tests for the containsValue method of the StaticBucketMap class.", "class_members": {"variables": [{"name": "map", "type": "StaticBucketMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testContainsValue_ValuePresent", "primary_tested": ["StaticBucketMap.containsValue(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsValue method when the value is present in the map."}, {"name": "testContainsValue_ValueNotPresent", "primary_tested": ["StaticBucketMap.containsValue(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsValue method when the value is not present in the map."}, {"name": "testContainsValue_NullValuePresent", "primary_tested": ["StaticBucketMap.containsValue(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsValue method when a null value is present in the map."}, {"name": "testContainsValue_NullValueNotPresent", "primary_tested": ["StaticBucketMap.containsValue(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsValue method when a null value is not present in the map."}, {"name": "testContainsValue_EmptyMap", "primary_tested": ["StaticBucketMap.containsValue(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsValue method on an empty map."}, {"name": "testContainsValue_MultipleValues", "primary_tested": ["StaticBucketMap.containsValue(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsValue method with multiple values in the map."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_isEmptyTest.java", "testclass_name": "PassiveExpiringMap_isEmptyTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.HashMap;", "import java.util.Map;", "import java.util.concurrent.TimeUnit;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "PassiveExpiringMap_isEmptyTest", "description": "Unit tests for the isEmpty method of PassiveExpiringMap.", "class_members": {"variables": [{"name": "expiringMap", "type": "PassiveExpiringMap<Integer, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testIsEmpty_WithNoEntries", "primary_tested": ["PassiveExpiringMap.isEmpty()"], "external_dependencies": {"modules": ["PassiveExpiringMap"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isEmpty method when the map has no entries."}, {"name": "testIsEmpty_WithNonExpiredEntries", "primary_tested": ["PassiveExpiringMap.isEmpty()"], "associated_methods": ["PassiveExpiringMap.put(Integer,String)"], "external_dependencies": {"modules": ["PassiveExpiringMap"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isEmpty method when the map has non-expired entries."}, {"name": "testIsEmpty_WithExpiredEntries", "primary_tested": ["PassiveExpiringMap.isEmpty()"], "associated_methods": ["PassiveExpiringMap.put(Integer,String)"], "external_dependencies": {"modules": ["PassiveExpiringMap"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isEmpty method when the map has expired entries."}, {"name": "testIsEmpty_WithMixedExpiry", "primary_tested": ["PassiveExpiringMap.isEmpty()"], "associated_methods": ["PassiveExpiringMap.put(Integer,String)"], "external_dependencies": {"modules": ["PassiveExpiringMap"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isEmpty method when the map has entries with mixed expiry times."}, {"name": "testIsEmpty_AfterClear", "primary_tested": ["PassiveExpiringMap.isEmpty()"], "associated_methods": ["PassiveExpiringMap.put(Integer,String)", "PassiveExpiringMap.clear()"], "external_dependencies": {"modules": ["PassiveExpiringMap"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isEmpty method after clearing the map."}, {"name": "testIsEmpty_AfterRemove", "primary_tested": ["PassiveExpiringMap.isEmpty()"], "associated_methods": ["PassiveExpiringMap.put(Integer,String)", "PassiveExpiringMap.remove(Integer)"], "external_dependencies": {"modules": ["PassiveExpiringMap"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isEmpty method after removing entries from the map."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/trie/UnmodifiableTrie_unmodifiableTrieTest.java", "testclass_name": "UnmodifiableTrie_unmodifiableTrieTest", "dependencies": ["package org.apache.commons.collections4.trie;", "import org.apache.commons.collections4.Trie;", "import org.apache.commons.collections4.Unmodifiable;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;"], "name": "UnmodifiableTrie_unmodifiableTrieTest", "description": "Tests for the UnmodifiableTrie class, specifically focusing on the unmodifiableTrie method.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testUnmodifiableTrieWithUnmodifiableTrie", "primary_tested": ["UnmodifiableTrie.unmodifiableTrie(Trie)"], "associated_methods": ["Trie.containsKey(String)"], "external_dependencies": {"modules": ["Trie", "UnmodifiableTrie"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the unmodifiableTrie method when the input is already an UnmodifiableTrie."}, {"name": "testUnmodifiableTrieWithModifiableTrie", "primary_tested": ["UnmodifiableTrie.unmodifiableTrie(Trie)"], "associated_methods": ["Trie.containsKey(String)"], "external_dependencies": {"modules": ["Trie", "UnmodifiableTrie"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the unmodifiableTrie method when the input is a modifiable Trie."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/DefaultedMap_getTest.java", "testclass_name": "DefaultedMap_getTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Map;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.functors.ConstantTransformer;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "DefaultedMap_getTest", "description": "Unit tests for the get method of DefaultedMap class in Apache Commons Collections.", "class_members": {"variables": [{"name": "defaultedMap", "type": "DefaultedMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetExistingKey", "primary_tested": ["DefaultedMap.get(String)"], "external_dependencies": {"modules": ["DefaultedMap", "HashMap"], "class_members": [{"name": "defaultedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method of DefaultedMap for an existing key."}, {"name": "testGetNonExistingKey", "primary_tested": ["DefaultedMap.get(String)"], "associated_methods": ["DefaultedMap.containsKey(String)"], "external_dependencies": {"modules": ["DefaultedMap", "HashMap"], "class_members": [{"name": "defaultedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method of DefaultedMap for a non-existing key."}, {"name": "testGetNullKey", "primary_tested": ["DefaultedMap.get(String)"], "associated_methods": ["DefaultedMap.containsKey(String)"], "external_dependencies": {"modules": ["DefaultedMap", "HashMap"], "class_members": [{"name": "defaultedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method of DefaultedMap for a null key."}, {"name": "testGetAfterAddingAndRemovingKey", "primary_tested": ["DefaultedMap.get(String)"], "associated_methods": ["DefaultedMap.containsKey(String)", "DefaultedMap.remove(String)"], "external_dependencies": {"modules": ["DefaultedMap", "HashMap"], "class_members": [{"name": "defaultedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method of DefaultedMap after adding and removing a key."}, {"name": "testGetWithEmptyMap", "primary_tested": ["DefaultedMap.get(String)"], "associated_methods": ["DefaultedMap.containsKey(String)", "DefaultedMap.size()"], "external_dependencies": {"modules": ["DefaultedMap", "HashMap"], "class_members": [{"name": "defaultedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method of DefaultedMap with an empty map."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_containsValueTest.java", "testclass_name": "MultiValueMap_containsValueTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Collection;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "MultiValueMap_containsValueTest", "description": "Unit tests for the containsValue method in the MultiValueMap class.", "class_members": {"variables": [{"name": "multiValueMap", "type": "MultiValueMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testContainsValue_ValuePresentInCollection", "primary_tested": ["MultiValueMap.containsValue(String)"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "multiValueMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the containsValue method correctly identifies a value present in the collection."}, {"name": "testContainsValue_ValueNotPresentInCollection", "primary_tested": ["MultiValueMap.containsValue(String)"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "multiValueMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the containsValue method correctly identifies a value not present in the collection."}, {"name": "testContainsValue_EmptyMap", "primary_tested": ["MultiValueMap.containsValue(String)"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "multiValueMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsValue method on an empty map."}, {"name": "testContainsValue_NullValue", "primary_tested": ["MultiValueMap.containsValue(String)"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "multiValueMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the containsValue method correctly handles a null value."}, {"name": "testContainsValue_MultipleKeysWithSameValue", "primary_tested": ["MultiValueMap.containsValue(String)"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "multiValueMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the containsValue method correctly identifies a value present under multiple keys."}, {"name": "testContainsValue_ValuePresentInDifferentCollections", "primary_tested": ["MultiValueMap.containsValue(String)"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "multiValueMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the containsValue method correctly identifies values present in different collections."}, {"name": "testContainsValue_ValueRemovedFromCollection", "primary_tested": ["MultiValueMap.containsValue(String)"], "associated_methods": ["MultiValueMap.removeMapping(String,String)"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "multiValueMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the containsValue method correctly identifies a value after it has been removed from a collection."}, {"name": "testContainsValue_ValueAddedToNewCollection", "primary_tested": ["MultiValueMap.containsValue(String)"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "multiValueMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the containsValue method correctly identifies a value added to a new collection."}, {"name": "testContainsValue_ValueAddedToExistingCollection", "primary_tested": ["MultiValueMap.containsValue(String)"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "multiValueMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the containsValue method correctly identifies a value added to an existing collection."}, {"name": "testContainsValue_ValueRemovedFromAllCollections", "primary_tested": ["MultiValueMap.containsValue(String)"], "associated_methods": ["MultiValueMap.removeMapping(String,String)"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "multiValueMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the containsValue method correctly identifies a value after it has been removed from all collections."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/CompositeMap_containsKeyTest.java", "testclass_name": "CompositeMap_containsKeyTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeMap_containsKeyTest", "description": "Unit tests for the containsKey method in the CompositeMap class.", "class_members": {"variables": [{"name": "one", "type": "Map<String, String>"}, {"name": "two", "type": "Map<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testContainsKey_KeyPresentInFirstMap", "primary_tested": ["CompositeMap.containsKey(String)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap"], "class_members": [{"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the containsKey method returns true when the key is present in the first map."}, {"name": "testContainsKey_KeyPresentInSecondMap", "primary_tested": ["CompositeMap.containsKey(String)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap"], "class_members": [{"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the containsKey method returns true when the key is present in the second map."}, {"name": "testContainsKey_KeyNotPresent", "primary_tested": ["CompositeMap.containsKey(String)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap"], "class_members": [{"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the containsKey method returns false when the key is not present in any map."}, {"name": "testContainsKey_AfterAddingNewMap", "primary_tested": ["CompositeMap.containsKey(String)"], "associated_methods": ["CompositeMap.addComposited(Map)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap"], "class_members": [{"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the containsKey method returns true after adding a new map with the key."}, {"name": "testContainsKey_AfterRemovingKey", "primary_tested": ["CompositeMap.containsKey(String)"], "associated_methods": ["CompositeMap.remove(Object)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap"], "class_members": [{"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the containsKey method returns false after removing the key from the map."}, {"name": "testContainsKey_AfterRemovingCompositedMap", "primary_tested": ["CompositeMap.containsKey(String)"], "associated_methods": ["CompositeMap.removeComposited(Map)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap"], "class_members": [{"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the containsKey method returns false after removing a composited map containing the key."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_sizeTest.java", "testclass_name": "StaticBucketMap_sizeTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "StaticBucketMap_sizeTest", "description": "Unit tests for the size method of the StaticBucketMap class.", "class_members": {"variables": [{"name": "map", "type": "StaticBucketMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testSizeEmptyMap", "primary_tested": ["StaticBucketMap.size()"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method when the map is empty."}, {"name": "testSizeAfterPut", "primary_tested": ["StaticBucketMap.size()"], "associated_methods": ["StaticBucketMap.put(String,String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method after adding elements to the map."}, {"name": "testSizeAfterRemove", "primary_tested": ["StaticBucketMap.size()"], "associated_methods": ["StaticBucketMap.put(String,String)", "StaticBucketMap.remove(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method after adding and removing elements from the map."}, {"name": "testSizeAfterClear", "primary_tested": ["StaticBucketMap.size()"], "associated_methods": ["StaticBucketMap.put(String,String)", "StaticBucketMap.clear()"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method after adding elements and then clearing the map."}, {"name": "testSizeWithDuplicateKeys", "primary_tested": ["StaticBucketMap.size()"], "associated_methods": ["StaticBucketMap.put(String,String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method when duplicate keys are added to the map."}, {"name": "testSizeWithNullValues", "primary_tested": ["StaticBucketMap.size()"], "associated_methods": ["StaticBucketMap.put(String,String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method when null values are added to the map."}, {"name": "testSizeWithNullKeys", "primary_tested": ["StaticBucketMap.size()"], "associated_methods": ["StaticBucketMap.put(String,String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method when null keys are added to the map."}, {"name": "testSizeWithMultiplePutsAndRemoves", "primary_tested": ["StaticBucketMap.size()"], "associated_methods": ["StaticBucketMap.put(String,String)", "StaticBucketMap.remove(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method after multiple put and remove operations."}, {"name": "testSizeWithConcurrentOperations", "primary_tested": ["StaticBucketMap.size()"], "associated_methods": ["StaticBucketMap.put(String,String)", "StaticBucketMap.remove(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method after concurrent put and remove operations."}, {"name": "testSizeWithEmptyBuckets", "primary_tested": ["StaticBucketMap.size()"], "associated_methods": ["StaticBucketMap.put(String,String)", "StaticBucketMap.remove(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method after adding and removing elements, leaving empty buckets."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_firstKeyTest.java", "testclass_name": "ListOrderedMap_firstKeyTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ListOrderedMap_firstKeyTest", "description": "Unit tests for the firstKey method of the ListOrderedMap class.", "class_members": {"variables": [{"name": "listOrderedMap", "type": "ListOrderedMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testFirstKey_EmptyMap", "primary_tested": ["ListOrderedMap.firstKey()"], "external_dependencies": {"modules": ["ListOrderedMap", "NoSuchElementException"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the firstKey method when the map is empty, expecting a NoSuchElementException."}, {"name": "testFirstKey_NonEmptyMap", "primary_tested": ["ListOrderedMap.firstKey()"], "associated_methods": ["ListOrderedMap.put(String,String)"], "external_dependencies": {"modules": ["ListOrderedMap"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the firstKey method when the map is non-empty, expecting the first key added."}, {"name": "testFirstKey_AfterRemoveFirstKey", "primary_tested": ["ListOrderedMap.firstKey()"], "associated_methods": ["ListOrderedMap.put(String,String)", "ListOrderedMap.remove(String)"], "external_dependencies": {"modules": ["ListOrderedMap"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the firstKey method after removing the first key, expecting the next key in order."}, {"name": "testFirstKey_AfterAddNewKey", "primary_tested": ["ListOrderedMap.firstKey()"], "associated_methods": ["ListOrderedMap.put(String,String)"], "external_dependencies": {"modules": ["ListOrderedMap"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the firstKey method after adding new keys, expecting the first key added."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/BooleanComparator_compareTest.java", "testclass_name": "BooleanComparator_compareTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "BooleanComparator_compareTest", "description": "Unit tests for the BooleanComparator class, focusing on its compare method and related functionalities.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testCompareTrueFirst", "primary_tested": ["BooleanComparator.compare(Boolean,Boolean)"], "external_dependencies": {"modules": ["BooleanComparator", "Boolean"]}, "category": "unit", "description": "Tests the compare method of BooleanComparator when TRUE values are prioritized."}, {"name": "testCompareFalseFirst", "primary_tested": ["BooleanComparator.compare(Boolean,Boolean)"], "external_dependencies": {"modules": ["BooleanComparator", "Boolean"]}, "category": "unit", "description": "Tests the compare method of BooleanComparator when FALSE values are prioritized."}, {"name": "testCompareWithNull", "primary_tested": ["BooleanComparator.compare(Boolean,Boolean)"], "external_dependencies": {"modules": ["BooleanComparator", "Boolean"]}, "category": "unit", "description": "Tests the compare method of BooleanComparator when null values are passed, expecting a NullPointerException."}, {"name": "testSortsTrueFirst", "primary_tested": ["BooleanComparator.sortsTrueFirst()"], "external_dependencies": {"modules": ["BooleanComparator"]}, "category": "unit", "description": "Tests the sortsTrueFirst method of BooleanComparator to ensure it correctly identifies the sorting order."}, {"name": "testEquals", "primary_tested": ["BooleanComparator.equals(Object)"], "external_dependencies": {"modules": ["BooleanComparator"]}, "category": "unit", "description": "Tests the equals method of BooleanComparator to ensure it correctly identifies equality between comparators."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_removeAllTest.java", "testclass_name": "MultiKeyMap_removeAllTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.*;", "import org.apache.commons.collections4.MapIterator;", "import org.apache.commons.collections4.keyvalue.MultiKey;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "MultiKeyMap_removeAllTest", "description": "Unit tests for the removeAll functionality of the MultiKeyMap class.", "class_members": {"variables": [{"name": "multiKeyMap", "type": "MultiKeyMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveAllWithExistingKey", "primary_tested": ["MultiKeyMap.removeAll(String)"], "associated_methods": ["MultiKeyMap.put(String,String,String)", "MultiKeyMap.containsKey(String,String)"], "external_dependencies": {"modules": ["MultiKeyMap", "MultiKey"], "class_members": [{"name": "multiKeyMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeAll functionality with an existing key in the MultiKeyMap."}, {"name": "testRemoveAllWithNonExistingKey", "primary_tested": ["MultiKeyMap.removeAll(String)"], "associated_methods": ["MultiKeyMap.put(String,String,String)", "MultiKeyMap.containsKey(String,String)"], "external_dependencies": {"modules": ["MultiKeyMap", "MultiKey"], "class_members": [{"name": "multiKeyMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeAll functionality with a non-existing key in the MultiKeyMap."}, {"name": "testRemoveAllWithNullKey", "primary_tested": ["MultiKeyMap.removeAll(String)"], "associated_methods": ["MultiKeyMap.put(String,String,String)", "MultiKeyMap.containsKey(String,String)"], "external_dependencies": {"modules": ["MultiKeyMap", "MultiKey"], "class_members": [{"name": "multiKeyMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeAll functionality with a null key in the MultiKeyMap."}, {"name": "testRemoveAllWithEmptyMap", "primary_tested": ["MultiKeyMap.removeAll(String)"], "external_dependencies": {"modules": ["MultiKeyMap", "MultiKey"], "class_members": [{"name": "multiKeyMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeAll functionality with an empty MultiKeyMap."}, {"name": "testRemoveAllWithMultipleKeys", "primary_tested": ["MultiKeyMap.removeAll(String)"], "associated_methods": ["MultiKeyMap.put(String,String,String)", "MultiKeyMap.containsKey(String,String)"], "external_dependencies": {"modules": ["MultiKeyMap", "MultiKey"], "class_members": [{"name": "multiKeyMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeAll functionality with multiple keys in the MultiKeyMap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/TransformedSortedMap_subMapTest.java", "testclass_name": "TransformedSortedMap_subMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.SortedMap;", "import java.util.TreeMap;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.TransformerUtils;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "TransformedSortedMap_subMapTest", "description": "Unit tests for the subMap functionality of TransformedSortedMap.", "class_members": {"variables": [{"name": "originalMap", "type": "SortedMap<String, String>"}, {"name": "keyTransformer", "type": "Transformer<String, String>"}, {"name": "valueTransformer", "type": "Transformer<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testSubMap", "primary_tested": ["TransformedSortedMap.subMap(String,String)"], "external_dependencies": {"modules": ["TransformedSortedMap", "TransformerUtils", "SortedMap", "TreeMap"], "class_members": [{"name": "originalMap", "type": "variable"}, {"name": "keyTransformer", "type": "variable"}, {"name": "valueTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the subMap functionality of TransformedSortedMap with both key and value transformers."}, {"name": "testSubMapWithNoTransformers", "primary_tested": ["TransformedSortedMap.subMap(String,String)"], "external_dependencies": {"modules": ["TransformedSortedMap", "SortedMap", "TreeMap"], "class_members": [{"name": "originalMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the subMap functionality of TransformedSortedMap without any transformers."}, {"name": "testSubMapWithKeyTransformer", "primary_tested": ["TransformedSortedMap.subMap(String,String)"], "external_dependencies": {"modules": ["TransformedSortedMap", "TransformerUtils", "SortedMap", "TreeMap"], "class_members": [{"name": "originalMap", "type": "variable"}, {"name": "keyTransformer", "type": "variable"}, {"name": "valueTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the subMap functionality of TransformedSortedMap with only a key transformer."}, {"name": "testSubMapWithValueTransformer", "primary_tested": ["TransformedSortedMap.subMap(String,String)"], "external_dependencies": {"modules": ["TransformedSortedMap", "TransformerUtils", "SortedMap", "TreeMap"], "class_members": [{"name": "originalMap", "type": "variable"}, {"name": "keyTransformer", "type": "variable"}, {"name": "valueTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the subMap functionality of TransformedSortedMap with only a value transformer."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_putTest.java", "testclass_name": "MultiKeyMap_putTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.keyvalue.MultiKey;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "MultiKeyMap_putTest", "description": "Unit tests for the put method of MultiKeyMap, focusing on adding new entries and updating existing ones.", "class_members": {"variables": [{"name": "map", "type": "MultiKeyMap<String, String>"}, {"name": "key1", "type": "String"}, {"name": "key2", "type": "String"}, {"name": "key3", "type": "String"}, {"name": "key4", "type": "String"}, {"name": "key5", "type": "String"}, {"name": "value", "type": "String"}, {"name": "value1", "type": "String"}, {"name": "value2", "type": "String"}]}, "test_cases": [{"name": "testPutNewEntry", "primary_tested": ["MultiKeyMap.put(String,String,String,String,String,String)"], "external_dependencies": {"modules": ["MultiKeyMap", "String"], "class_members": [{"name": "map", "type": "variable"}, {"name": "key1", "type": "variable"}, {"name": "key2", "type": "variable"}, {"name": "key3", "type": "variable"}, {"name": "key4", "type": "variable"}, {"name": "key5", "type": "variable"}, {"name": "value", "type": "variable"}]}, "category": "unit", "description": "Tests the addition of a new entry to the MultiKeyMap using the put method."}, {"name": "testPutExistingEntry", "primary_tested": ["MultiKeyMap.put(String,String,String,String,String,String)"], "external_dependencies": {"modules": ["MultiKeyMap", "String"], "class_members": [{"name": "map", "type": "variable"}, {"name": "key1", "type": "variable"}, {"name": "key2", "type": "variable"}, {"name": "key3", "type": "variable"}, {"name": "key4", "type": "variable"}, {"name": "key5", "type": "variable"}, {"name": "value1", "type": "variable"}, {"name": "value2", "type": "variable"}]}, "category": "unit", "description": "Tests the update of an existing entry in the MultiKeyMap using the put method."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/TransformingComparator_compareTest.java", "testclass_name": "TransformingComparator_compareTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Comparator;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.TransformerUtils;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "TransformingComparator_compareTest", "description": "Unit tests for the TransformingComparator class, focusing on the compare method and equality checks.", "class_members": {"variables": [{"name": "transformer", "type": "Transformer<String, String>"}, {"name": "comparator", "type": "Comparator<String>"}, {"name": "transformingComparator", "type": "TransformingComparator<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testCompareEqualObjects", "primary_tested": ["TransformingComparator.compare(String,String)"], "external_dependencies": {"modules": ["TransformingComparator", "TransformerUtils"], "class_members": [{"name": "transformingComparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the compare method of TransformingComparator for equal objects."}, {"name": "testCompareLessThan", "primary_tested": ["TransformingComparator.compare(String,String)"], "external_dependencies": {"modules": ["TransformingComparator", "TransformerUtils"], "class_members": [{"name": "transformingComparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the compare method of TransformingComparator for objects where the first is less than the second."}, {"name": "testCompareGreaterThan", "primary_tested": ["TransformingComparator.compare(String,String)"], "external_dependencies": {"modules": ["TransformingComparator", "TransformerUtils"], "class_members": [{"name": "transformingComparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the compare method of TransformingComparator for objects where the first is greater than the second."}, {"name": "testEquals", "primary_tested": ["TransformingComparator.equals(Object)", "TransformingComparator.hashCode()"], "external_dependencies": {"modules": ["TransformingComparator", "TransformerUtils"], "class_members": [{"name": "transformingComparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals and hashCode methods of TransformingComparator to ensure they adhere to the equals-hashCode contract."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_putAllTest.java", "testclass_name": "StaticBucketMap_putAllTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;"], "name": "StaticBucketMap_putAllTest", "description": "Unit tests for the putAll method of StaticBucketMap.", "class_members": {"variables": [{"name": "map", "type": "StaticBucketMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPutAll_SingleEntry", "primary_tested": ["StaticBucketMap.putAll(Map<String,String>)"], "associated_methods": ["StaticBucketMap.size()", "StaticBucketMap.containsKey(String)", "StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap", "HashMap", "Map"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the putAll method with a single entry."}, {"name": "testPutAll_MultipleEntries", "primary_tested": ["StaticBucketMap.putAll(Map<String,String>)"], "associated_methods": ["StaticBucketMap.size()", "StaticBucketMap.containsKey(String)", "StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap", "HashMap", "Map"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the putAll method with multiple entries."}, {"name": "testPutAll_EmptyMap", "primary_tested": ["StaticBucketMap.putAll(Map<String,String>)"], "associated_methods": ["StaticBucketMap.size()"], "external_dependencies": {"modules": ["StaticBucketMap", "HashMap", "Map"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the putAll method with an empty map."}, {"name": "testPutAll_OverwriteExistingEntries", "primary_tested": ["StaticBucketMap.putAll(Map<String,String>)"], "associated_methods": ["StaticBucketMap.put(String,String)", "StaticBucketMap.size()", "StaticBucketMap.containsKey(String)", "StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap", "HashMap", "Map"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the putAll method by overwriting existing entries."}, {"name": "testPutAll_ClearBeforeAdding", "primary_tested": ["StaticBucketMap.putAll(Map<String,String>)"], "associated_methods": ["StaticBucketMap.put(String,String)", "StaticBucketMap.clear()", "StaticBucketMap.size()", "StaticBucketMap.containsKey(String)", "StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap", "HashMap", "Map"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the putAll method after clearing the map."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/SkippingIterator_nextTest.java", "testclass_name": "SkippingIterator_nextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import java.util.Arrays;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SkippingIterator_nextTest", "description": "Unit tests for the next() method of the SkippingIterator class.", "class_members": {"variables": [{"name": "testList", "type": "List<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNextAfterSkipping", "primary_tested": ["SkippingIterator.next()"], "associated_methods": ["SkippingIterator.hasNext()"], "external_dependencies": {"modules": ["SkippingIterator", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next() method of SkippingIterator after skipping elements."}, {"name": "testNextWithoutSkipping", "primary_tested": ["SkippingIterator.next()"], "associated_methods": ["SkippingIterator.hasNext()"], "external_dependencies": {"modules": ["SkippingIterator", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next() method of SkippingIterator without skipping any elements."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_putAllTest.java", "testclass_name": "MultiValueMap_putAllTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "MultiValueMap_putAllTest", "description": "Unit tests for the putAll method of the MultiValueMap class.", "class_members": {"variables": [{"name": "multiValueMap", "type": "MultiValueMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPutAll_Success", "primary_tested": ["MultiValueMap.putAll(String,Collection<String>)"], "associated_methods": ["MultiValueMap.size(String)", "MultiValueMap.totalSize()"], "external_dependencies": {"modules": ["MultiValueMap", "Collection", "Arrays"], "class_members": [{"name": "multiValueMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful addition of multiple values to a key in the MultiValueMap."}, {"name": "testPutAll_NullValues", "primary_tested": ["MultiValueMap.putAll(String,Collection<String>)"], "associated_methods": ["MultiValueMap.getCollection(String)", "MultiValueMap.totalSize()"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "multiValueMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior of the putAll method when null values are provided."}, {"name": "testPutAll_EmptyValues", "primary_tested": ["MultiValueMap.putAll(String,Collection<String>)"], "associated_methods": ["MultiValueMap.getCollection(String)", "MultiValueMap.totalSize()"], "external_dependencies": {"modules": ["MultiValueMap", "Collection", "ArrayList"], "class_members": [{"name": "multiValueMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior of the putAll method when empty values are provided."}, {"name": "testPutAll_ExistingKey", "primary_tested": ["MultiValueMap.putAll(String,Collection<String>)"], "associated_methods": ["MultiValueMap.size(String)", "MultiValueMap.totalSize()"], "external_dependencies": {"modules": ["MultiValueMap", "Collection", "Arrays"], "class_members": [{"name": "multiValueMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior of the putAll method when adding values to an existing key in the MultiValueMap."}, {"name": "testPutAll_MultipleKeys", "primary_tested": ["MultiValueMap.putAll(String,Collection<String>)"], "associated_methods": ["MultiValueMap.size(String)", "MultiValueMap.totalSize()"], "external_dependencies": {"modules": ["MultiValueMap", "Collection", "Arrays"], "class_members": [{"name": "multiValueMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior of the putAll method when adding values to multiple keys in the MultiValueMap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/FilterListIterator_nextTest.java", "testclass_name": "FilterListIterator_nextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.List;", "import java.util.ListIterator;", "import java.util.NoSuchElementException;", "import org.apache.commons.collections4.Predicate;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "FilterListIterator_nextTest", "description": "Unit tests for the next() method of FilterListIterator.", "class_members": {"variables": [{"name": "list", "type": "List<Integer>"}, {"name": "truePred", "type": "Predicate<Integer>"}, {"name": "filterListIterator", "type": "FilterListIterator<Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNextWithValidElement", "primary_tested": ["FilterListIterator.next()"], "external_dependencies": {"modules": ["FilterListIterator", "Predicate"], "class_members": [{"name": "filterListIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next() method of FilterListIterator when there is a valid element to return."}, {"name": "testNextWithNoSuchElementException", "primary_tested": ["FilterListIterator.next()"], "associated_methods": ["FilterListIterator.hasNext()"], "external_dependencies": {"modules": ["FilterListIterator", "Predicate", "NoSuchElementException"], "class_members": [{"name": "filterListIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next() method of FilterListIterator when there are no more elements to return, expecting a NoSuchElementException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/CompositeMap_isEmptyTest.java", "testclass_name": "CompositeMap_isEmptyTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeMap_isEmptyTest", "description": "Unit tests for the isEmpty method of the CompositeMap class.", "class_members": {"variables": [{"name": "compositeMap", "type": "CompositeMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testIsEmpty_WhenNoMapsAdded", "primary_tested": ["CompositeMap.isEmpty()"], "external_dependencies": {"modules": ["CompositeMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isEmpty method when no maps are added to the CompositeMap."}, {"name": "testIsEmpty_WhenMapsAddedButEmpty", "primary_tested": ["CompositeMap.isEmpty()"], "associated_methods": ["CompositeMap.addComposited(Map<String, String>)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isEmpty method when empty maps are added to the CompositeMap."}, {"name": "testIsEmpty_WhenMapsAddedWithEntries", "primary_tested": ["CompositeMap.isEmpty()"], "associated_methods": ["CompositeMap.addComposited(Map<String, String>)", "HashMap.put(String, String)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isEmpty method when maps with entries are added to the CompositeMap."}, {"name": "testIsEmpty_AfterClear", "primary_tested": ["CompositeMap.isEmpty()"], "associated_methods": ["CompositeMap.addComposited(Map<String, String>)", "CompositeMap.clear()", "HashMap.put(String, String)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isEmpty method after clearing the CompositeMap."}, {"name": "testIsEmpty_AfterRemovingMap", "primary_tested": ["CompositeMap.isEmpty()"], "associated_methods": ["CompositeMap.addComposited(Map<String, String>)", "CompositeMap.removeComposited(Map<String, String>)", "HashMap.put(String, String)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isEmpty method after removing a map from the CompositeMap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/NodeListIterator_nextTest.java", "testclass_name": "NodeListIterator_nextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.easymock.EasyMock.createMock;", "import static org.easymock.EasyMock.expect;", "import static org.easymock.EasyMock.replay;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import org.w3c.dom.Element;", "import org.w3c.dom.Node;", "import org.w3c.dom.NodeList;", "import org.w3c.dom.Text;"], "name": "NodeListIterator_nextTest", "description": "Unit tests for the next() method of NodeListIterator.", "class_members": {"variables": [{"name": "nodeListIterator", "type": "NodeListIterator"}, {"name": "nodes", "type": "Node[]"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNextWithElements", "primary_tested": ["NodeListIterator.next()"], "external_dependencies": {"modules": ["NodeListIterator", "Node"], "class_members": [{"name": "nodeListIterator", "type": "variable"}, {"name": "nodes", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next() method of NodeListIterator when there are elements to iterate over."}, {"name": "testNextWithNoMoreElements", "primary_tested": ["NodeListIterator.next()"], "external_dependencies": {"modules": ["NodeListIterator", "NoSuchElementException"], "class_members": [{"name": "nodeListIterator", "type": "variable"}, {"name": "nodes", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next() method of NodeListIterator when there are no more elements to iterate over, expecting a NoSuchElementException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/SingletonMap_getTest.java", "testclass_name": "SingletonMap_getTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SingletonMap_getTest", "description": "Unit tests for the get method of the SingletonMap class.", "class_members": {"variables": [{"name": "singletonMap", "type": "SingletonMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetWithMatchingKey", "primary_tested": ["SingletonMap.get(String)"], "external_dependencies": {"modules": ["SingletonMap"], "class_members": [{"name": "singletonMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method with a matching key."}, {"name": "testGetWithNonMatchingKey", "primary_tested": ["SingletonMap.get(String)"], "external_dependencies": {"modules": ["SingletonMap"], "class_members": [{"name": "singletonMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method with a non-matching key."}, {"name": "testGetWithNullKey", "primary_tested": ["SingletonMap.get(String)"], "external_dependencies": {"modules": ["SingletonMap"]}, "category": "unit", "description": "Tests the get method with a null key."}, {"name": "testGetWithNullValue", "primary_tested": ["SingletonMap.get(String)"], "external_dependencies": {"modules": ["SingletonMap"]}, "category": "unit", "description": "Tests the get method with a null value."}, {"name": "testGetWithNullKeyAndValue", "primary_tested": ["SingletonMap.get(String)"], "external_dependencies": {"modules": ["SingletonMap"]}, "category": "unit", "description": "Tests the get method with both null key and value."}, {"name": "testIsEqualKey", "primary_tested": ["SingletonMap.isEqualKey(String)"], "external_dependencies": {"modules": ["SingletonMap"], "class_members": [{"name": "singletonMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isEqualKey method."}, {"name": "testContainsKey", "primary_tested": ["SingletonMap.containsKey(String)"], "external_dependencies": {"modules": ["SingletonMap"], "class_members": [{"name": "singletonMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsKey method."}, {"name": "testGetValue", "primary_tested": ["SingletonMap.getValue()"], "external_dependencies": {"modules": ["SingletonMap"], "class_members": [{"name": "singletonMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getValue method."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparator_addTest.java", "testclass_name": "FixedOrderComparator_addTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "FixedOrderComparator_addTest", "description": "Unit tests for the add functionality of the FixedOrderComparator class.", "class_members": {"variables": [{"name": "comparator", "type": "FixedOrderComparator<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAddNewObject", "primary_tested": ["FixedOrderComparator.add(String)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests adding a new object to the FixedOrderComparator and ensures it cannot be added again."}, {"name": "testAddAfterLock", "primary_tested": ["FixedOrderComparator.add(String)"], "associated_methods": ["FixedOrderComparator.compare(String,String)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests adding an object to the FixedOrderComparator after it has been locked by invoking compare."}, {"name": "testAddAsEqual", "primary_tested": ["FixedOrderComparator.addAsEqual(String,String)"], "associated_methods": ["FixedOrderComparator.compare(String,String)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests adding an object as equal to another object in the FixedOrderComparator."}, {"name": "testCompareAfterAdd", "primary_tested": ["FixedOrderComparator.compare(String,String)"], "associated_methods": ["FixedOrderComparator.add(String)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the comparison functionality of the FixedOrderComparator after adding objects."}, {"name": "testEqualsAfterAdd", "primary_tested": ["FixedOrderComparator.equals(Object)"], "associated_methods": ["FixedOrderComparator.add(String)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equality of two FixedOrderComparator instances after adding the same objects."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_putTest.java", "testclass_name": "StaticBucketMap_putTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "StaticBucketMap_putTest", "description": "Unit tests for the put method of the StaticBucketMap class.", "class_members": {"variables": [{"name": "map", "type": "StaticBucketMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPutNewKey", "primary_tested": ["StaticBucketMap.put(String,String)"], "associated_methods": ["StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the put method with a new key, ensuring the value is correctly added and retrieved."}, {"name": "testPutExistingKey", "primary_tested": ["StaticBucketMap.put(String,String)"], "associated_methods": ["StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the put method with an existing key, ensuring the value is correctly updated and retrieved."}, {"name": "testPutNullKey", "primary_tested": ["StaticBucketMap.put(String,String)"], "associated_methods": ["StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the put method with a null key, ensuring the value is correctly added and retrieved."}, {"name": "testPutNullValue", "primary_tested": ["StaticBucketMap.put(String,String)"], "associated_methods": ["StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the put method with a null value, ensuring the null value is correctly added and retrieved."}, {"name": "testPutMultipleKeys", "primary_tested": ["StaticBucketMap.put(String,String)"], "associated_methods": ["StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the put method with multiple keys, ensuring each key-value pair is correctly added and retrieved."}, {"name": "testPutAndCheckContainsKey", "primary_tested": ["StaticBucketMap.put(String,String)"], "associated_methods": ["StaticBucketMap.containsKey(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the put method and checks if the key is contained in the map, ensuring the key is correctly added and recognized."}, {"name": "testPutAndRemove", "primary_tested": ["StaticBucketMap.put(String,String)"], "associated_methods": ["StaticBucketMap.remove(String)", "StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the put method and then removes the key, ensuring the key-value pair is correctly added, removed, and not retrievable."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIterator_nextIndexTest.java", "testclass_name": "LoopingListIterator_nextIndexTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.Arrays;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "LoopingListIterator_nextIndexTest", "description": "Unit tests for the nextIndex method of the LoopingListIterator class.", "class_members": {"variables": [{"name": "loopingListIterator", "type": "LoopingListIterator<String>"}, {"name": "list", "type": "List<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNextIndexWithElements", "primary_tested": ["LoopingListIterator.nextIndex()"], "associated_methods": ["LoopingListIterator.next()"], "external_dependencies": {"modules": ["LoopingListIterator", "List"], "class_members": [{"name": "loopingListIterator", "type": "variable"}, {"name": "list", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the nextIndex method when there are elements in the list."}, {"name": "testNextIndexAtEndOfList", "primary_tested": ["LoopingListIterator.nextIndex()"], "associated_methods": ["LoopingListIterator.next()"], "external_dependencies": {"modules": ["LoopingListIterator", "List"], "class_members": [{"name": "loopingListIterator", "type": "variable"}, {"name": "list", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the nextIndex method when the iterator is at the end of the list."}, {"name": "testNextIndexWithEmptyList", "primary_tested": ["LoopingListIterator.nextIndex()"], "external_dependencies": {"modules": ["LoopingListIterator", "List", "NoSuchElementException"], "class_members": [{"name": "loopingListIterator", "type": "variable"}, {"name": "list", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the nextIndex method when the list is empty, expecting a NoSuchElementException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_equalsTest.java", "testclass_name": "StaticBucketMap_equalsTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "StaticBucketMap_equalsTest", "description": "Unit tests for the equals method of the StaticBucketMap class.", "class_members": {"variables": [{"name": "map", "type": "StaticBucketMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEquals_SameInstance", "primary_tested": ["StaticBucketMap.equals(Object)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with the same instance."}, {"name": "testEquals_DifferentType", "primary_tested": ["StaticBucketMap.equals(Object)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with a different type."}, {"name": "testEquals_EmptyMaps", "primary_tested": ["StaticBucketMap.equals(Object)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with two empty maps."}, {"name": "testEquals_NonEmptyMapsWithSameEntries", "primary_tested": ["StaticBucketMap.equals(Object)"], "associated_methods": ["StaticBucketMap.put(String,String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with two non-empty maps having the same entries."}, {"name": "testEquals_NonEmptyMapsWithDifferentEntries", "primary_tested": ["StaticBucketMap.equals(Object)"], "associated_methods": ["StaticBucketMap.put(String,String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with two non-empty maps having different entries."}, {"name": "testEquals_NullValue", "primary_tested": ["StaticBucketMap.equals(Object)"], "associated_methods": ["StaticBucketMap.put(String,String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with null values in the maps."}, {"name": "testEquals_DifferentBucketSize", "primary_tested": ["StaticBucketMap.equals(Object)"], "associated_methods": ["StaticBucketMap.put(String,String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with maps having different bucket sizes."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/ComparatorChain_compareTest.java", "testclass_name": "ComparatorChain_compareTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.ArrayList;", "import java.util.BitSet;", "import java.util.Comparator;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;"], "name": "ComparatorChain_compareTest", "description": "Unit tests for the compare method in ComparatorChain class.", "class_members": {"variables": [{"name": "comparatorChain", "type": "ComparatorChain<String>"}, {"name": "comparators", "type": "List<Comparator<String>>"}, {"name": "orderingBits", "type": "BitSet"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testCompare_SingleComparator_ForwardOrder", "primary_tested": ["ComparatorChain.compare(String,String)"], "external_dependencies": {"modules": ["Comparator", "ComparatorChain"], "class_members": [{"name": "comparatorChain", "type": "variable"}, {"name": "comparators", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the compare method with a single comparator in forward order."}, {"name": "testCompare_SingleComparator_ReverseOrder", "primary_tested": ["ComparatorChain.compare(String,String)"], "external_dependencies": {"modules": ["Comparator", "ComparatorChain"], "class_members": [{"name": "comparatorChain", "type": "variable"}, {"name": "comparators", "type": "variable"}, {"name": "orderingBits", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the compare method with a single comparator in reverse order."}, {"name": "testCompare_MultipleComparators_MixedOrder", "primary_tested": ["ComparatorChain.compare(String,String)"], "external_dependencies": {"modules": ["Comparator", "ComparatorChain"], "class_members": [{"name": "comparatorChain", "type": "variable"}, {"name": "comparators", "type": "variable"}, {"name": "orderingBits", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the compare method with multiple comparators in mixed order."}, {"name": "testCompare_EmptyChain_ThrowsException", "primary_tested": ["ComparatorChain.compare(String,String)"], "external_dependencies": {"modules": ["ComparatorChain"], "class_members": [{"name": "comparatorChain", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the compare method throws an exception when the comparator chain is empty."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/IteratorIterable_iteratorTest.java", "testclass_name": "IteratorIterable_iteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import org.apache.commons.collections4.ResettableIterator;", "import org.junit.jupiter.api.Test;", "import java.util.Iterator;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.mockito.Mockito.*;"], "name": "IteratorIterable_iteratorTest", "description": "Unit tests for the IteratorIterable class, focusing on the iterator method.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testIteratorWithResettableIterator", "primary_tested": ["IteratorIterable.iterator()"], "associated_methods": ["ResettableIterator.reset()"], "external_dependencies": {"modules": ["ResettableIterator", "IteratorIterable", "Iterator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the iterator method of IteratorIterable when using a ResettableIterator, verifying that the reset method is called."}, {"name": "testIteratorWithoutResettableIterator", "primary_tested": ["IteratorIterable.iterator()"], "external_dependencies": {"modules": ["Iterator", "IteratorIterable"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the iterator method of IteratorIterable when using a regular Iterator, verifying that the iterator is correctly instantiated."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/CompositeMap_sizeTest.java", "testclass_name": "CompositeMap_sizeTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeMap_sizeTest", "description": "Unit tests for the size functionality of the CompositeMap class.", "class_members": {"variables": [{"name": "compositeMap", "type": "CompositeMap<String, String>"}, {"name": "mapOne", "type": "Map<String, String>"}, {"name": "mapTwo", "type": "Map<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testSizeWithTwoMaps", "primary_tested": ["CompositeMap.size()"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size of the CompositeMap with two initial maps."}, {"name": "testSizeAfterAddingMap", "primary_tested": ["CompositeMap.addComposited(Map<String, String>)"], "associated_methods": ["CompositeMap.size()"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size of the CompositeMap after adding a new map."}, {"name": "testSizeAfterRemovingMap", "primary_tested": ["CompositeMap.removeComposited(Map<String, String>)"], "associated_methods": ["CompositeMap.size()"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size of the CompositeMap after removing a map."}, {"name": "testSizeWithEmptyCompositeMap", "primary_tested": ["CompositeMap.size()"], "external_dependencies": {"modules": ["CompositeMap"]}, "category": "unit", "description": "Tests the size of an empty CompositeMap."}, {"name": "testSizeWithSingleMap", "primary_tested": ["CompositeMap.size()"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "mapOne", "type": "variable"}]}, "category": "unit", "description": "Tests the size of the CompositeMap with a single initial map."}, {"name": "testSizeAfterClear", "primary_tested": ["CompositeMap.clear()"], "associated_methods": ["CompositeMap.size()"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size of the CompositeMap after clearing all maps."}, {"name": "testSizeAfterPartialClear", "primary_tested": ["Map.clear()"], "associated_methods": ["CompositeMap.size()"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}, {"name": "mapOne", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size of the CompositeMap after partially clearing one of the maps."}, {"name": "testSizeWithDuplicateKeys", "primary_tested": ["CompositeMap.addComposited(Map<String, String>)"], "associated_methods": ["CompositeMap.size()"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size of the CompositeMap after adding a map with non-colliding keys."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparator_addAsEqualTest.java", "testclass_name": "FixedOrderComparator_addAsEqualTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.Arrays;", "import java.util.Comparator;", "import java.util.LinkedList;", "import java.util.List;", "import java.util.Random;", "import org.apache.commons.lang3.ArrayUtils;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "FixedOrderComparator_addAsEqualTest", "description": "Unit tests for the addAsEqual method of the FixedOrderComparator class.", "class_members": {"variables": [{"name": "comparator", "type": "FixedOrderComparator<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAddAsEqual_Success", "primary_tested": ["FixedOrderComparator.addAsEqual(String,String)"], "associated_methods": ["FixedOrderComparator.add(String)", "FixedOrderComparator.compare(String,String)"], "external_dependencies": {"modules": ["FixedOrderComparator", "org.junit.jupiter.api.Assertions"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful addition of new objects as equal to an existing object in the FixedOrderComparator."}, {"name": "testAddAsEqual_ExistingObjNotKnown", "primary_tested": ["FixedOrderComparator.addAsEqual(String,String)"], "external_dependencies": {"modules": ["FixedOrderComparator", "org.junit.jupiter.api.Assertions"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior when trying to add a new object as equal to an unknown existing object in the FixedOrderComparator, expecting an IllegalArgumentException."}, {"name": "testAddAsEqual_AlreadyKnown", "primary_tested": ["FixedOrderComparator.addAsEqual(String,String)"], "associated_methods": ["FixedOrderComparator.add(String)"], "external_dependencies": {"modules": ["FixedOrderComparator", "org.junit.jupiter.api.Assertions"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior when trying to add a new object as equal to an existing object that is already known in the FixedOrderComparator, expecting a false return."}, {"name": "testAddAsEqual_LockedComparator", "primary_tested": ["FixedOrderComparator.addAsEqual(String,String)"], "associated_methods": ["FixedOrderComparator.add(String)", "FixedOrderComparator.compare(String,String)"], "external_dependencies": {"modules": ["FixedOrderComparator", "org.junit.jupiter.api.Assertions"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior when trying to add a new object as equal to an existing object in a locked FixedOrderComparator, expecting an UnsupportedOperationException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/ZippingIterator_nextTest.java", "testclass_name": "ZippingIterator_nextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.ArrayList;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ZippingIterator_nextTest", "description": "Unit tests for the next method of the ZippingIterator class.", "class_members": {"variables": [{"name": "evens", "type": "ArrayList<Integer>"}, {"name": "odds", "type": "ArrayList<Integer>"}, {"name": "fib", "type": "ArrayList<Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNextWithElements", "primary_tested": ["ZippingIterator.next()"], "external_dependencies": {"modules": ["ZippingIterator", "ArrayList", "Integer"], "class_members": [{"name": "evens", "type": "variable"}, {"name": "odds", "type": "variable"}, {"name": "fib", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method of ZippingIterator when there are elements to iterate over."}, {"name": "testNextWithoutElements", "primary_tested": ["ZippingIterator.next()"], "external_dependencies": {"modules": ["ZippingIterator", "ArrayList", "NoSuchElementException"]}, "category": "unit", "fixtures_used": [], "description": "Tests the next method of ZippingIterator when there are no elements to iterate over, expecting a NoSuchElementException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableListIterator_unmodifiableListIteratorTest.java", "testclass_name": "UnmodifiableListIterator_unmodifiableListIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import org.junit.jupiter.api.Test;", "import java.util.ListIterator;", "import java.util.NoSuchElementException;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;"], "name": "UnmodifiableListIterator_unmodifiableListIteratorTest", "description": "Unit tests for the UnmodifiableListIterator class, specifically focusing on the unmodifiableListIterator method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testUnmodifiableListIteratorWithUnmodifiableIterator", "primary_tested": ["UnmodifiableListIterator.unmodifiableListIterator(ListIterator)"], "associated_methods": ["ListIterator.hasNext()", "ListIterator.next()", "ListIterator.hasPrevious()"], "external_dependencies": {"modules": ["ListIterator", "UnmodifiableListIterator"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the unmodifiableListIterator method with an unmodifiable iterator, verifying that the iterator's methods return the expected results."}, {"name": "testUnmodifiableListIteratorWithModifiableIterator", "primary_tested": ["UnmodifiableListIterator.unmodifiableListIterator(ListIterator)"], "associated_methods": ["ListIterator.hasNext()", "ListIterator.next()", "ListIterator.hasPrevious()"], "external_dependencies": {"modules": ["ListIterator", "UnmodifiableListIterator"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the unmodifiableListIterator method with a modifiable iterator, verifying that the iterator's methods return the expected results."}, {"name": "testUnmodifiableListIteratorWithNullIterator", "primary_tested": ["UnmodifiableListIterator.unmodifiableListIterator(ListIterator)"], "external_dependencies": {"modules": ["ListIterator", "UnmodifiableListIterator"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the unmodifiableListIterator method with a null iterator, expecting a NullPointerException to be thrown."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/BoundedIterator_hasNextTest.java", "testclass_name": "BoundedIterator_hasNextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import org.junit.jupiter.api.Test;", "import java.util.Iterator;", "import java.util.NoSuchElementException;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;"], "name": "BoundedIterator_hasNextTest", "description": "Unit tests for the hasNext method of the BoundedIterator class.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testHasNext_WithinBounds", "primary_tested": ["BoundedIterator.hasNext()"], "external_dependencies": {"modules": ["Iterator", "BoundedIterator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the hasNext method when the iterator is within bounds."}, {"name": "testHasNext_OutOfBounds", "primary_tested": ["BoundedIterator.hasNext()"], "external_dependencies": {"modules": ["Iterator", "BoundedIterator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the hasNext method when the iterator is out of bounds."}, {"name": "testHasNext_IteratorExhausted", "primary_tested": ["BoundedIterator.hasNext()"], "external_dependencies": {"modules": ["Iterator", "BoundedIterator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the hasNext method when the underlying iterator is exhausted."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/PushbackIterator_pushbackIteratorTest.java", "testclass_name": "PushbackIterator_pushbackIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.Iterator;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "PushbackIterator_pushbackIteratorTest", "description": "Unit tests for the PushbackIterator class in Apache Commons Collections, focusing on the pushbackIterator method.", "class_members": {"variables": [{"name": "testList", "type": "List<String>"}], "methods": [{"name": "setUp", "signature": "void setUp() throws Exception"}, {"name": "makeObject", "signature": "PushbackIterator<String> makeObject()"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPushbackIteratorWithPushbackIterator", "primary_tested": ["PushbackIterator.pushbackIterator(Iterator<String>)"], "external_dependencies": {"modules": ["PushbackIterator", "Iterator"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the pushbackIterator method when provided with another PushbackIterator instance."}, {"name": "testPushbackIteratorWithRegularIterator", "primary_tested": ["PushbackIterator.pushbackIterator(Iterator<String>)"], "external_dependencies": {"modules": ["PushbackIterator", "Iterator"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the pushbackIterator method when provided with a regular Iterator instance."}, {"name": "testPushbackIteratorWithNullIterator", "primary_tested": ["PushbackIterator.pushbackIterator(Iterator<String>)"], "external_dependencies": {"modules": ["PushbackIterator", "Iterator"]}, "category": "unit", "fixtures_used": [], "description": "Tests the pushbackIterator method when provided with a null Iterator instance, expecting a NullPointerException."}, {"name": "testPushbackIteratorWithEmptyIterator", "primary_tested": ["PushbackIterator.pushbackIterator(Iterator<String>)"], "external_dependencies": {"modules": ["PushbackIterator", "Iterator", "Collections"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the pushbackIterator method when provided with an empty Iterator instance."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableIterator_unmodifiableIteratorTest.java", "testclass_name": "UnmodifiableIterator_unmodifiableIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import org.junit.jupiter.api.Test;", "import java.util.Iterator;", "import java.util.NoSuchElementException;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;"], "name": "UnmodifiableIterator_unmodifiableIteratorTest", "description": "Tests for the UnmodifiableIterator class, specifically focusing on the unmodifiableIterator method.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testUnmodifiableIteratorWithModifiableIterator", "primary_tested": ["UnmodifiableIterator.unmodifiableIterator(Iterator)"], "external_dependencies": {"modules": ["Iterator", "UnmodifiableIterator"]}, "category": "unit", "description": "Tests that the unmodifiableIterator method returns a new UnmodifiableIterator instance when given a modifiable iterator."}, {"name": "testUnmodifiableIteratorWithUnmodifiableIterator", "primary_tested": ["UnmodifiableIterator.unmodifiableIterator(Iterator)"], "external_dependencies": {"modules": ["Iterator", "UnmodifiableIterator"]}, "category": "unit", "description": "Tests that the unmodifiableIterator method returns the same UnmodifiableIterator instance when given an unmodifiable iterator."}, {"name": "testUnmodifiableIteratorWithNullIterator", "primary_tested": ["UnmodifiableIterator.unmodifiableIterator(Iterator)"], "external_dependencies": {"modules": ["Iterator", "UnmodifiableIterator"]}, "category": "unit", "description": "Tests that the unmodifiableIterator method throws a NullPointerException when given a null iterator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/FilterIterator_removeTest.java", "testclass_name": "FilterIterator_removeTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.apache.commons.collections4.functors.TruePredicate.truePredicate;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.apache.commons.collections4.Predicate;", "import org.apache.commons.collections4.functors.NotNullPredicate;", "import org.apache.commons.lang3.ArrayUtils;", "import org.junit.jupiter.api.AfterEach;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "FilterIterator_removeTest", "description": "Unit tests for the remove functionality of the FilterIterator class.", "class_members": {"variables": [{"name": "iterator", "type": "FilterIterator<String>"}, {"name": "list", "type": "List<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveSuccess", "primary_tested": ["FilterIterator.remove()"], "associated_methods": ["FilterIterator.next()"], "external_dependencies": {"modules": ["FilterIterator", "List"], "class_members": [{"name": "iterator", "type": "variable"}, {"name": "list", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful removal of an element from the FilterIterator."}, {"name": "testRemoveWithoutNextCall", "primary_tested": ["FilterIterator.remove()"], "external_dependencies": {"modules": ["FilterIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal operation without calling next() first, expecting an IllegalStateException."}, {"name": "testRemoveAfterHasNextCall", "primary_tested": ["FilterIterator.remove()"], "associated_methods": ["FilterIterator.hasNext()"], "external_dependencies": {"modules": ["FilterIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal operation after calling hasNext(), expecting an IllegalStateException."}, {"name": "testRemoveOnEmptyIterator", "primary_tested": ["FilterIterator.next()"], "external_dependencies": {"modules": ["FilterIterator", "Collections"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "description": "Tests the next() operation on an empty FilterIterator, expecting a NoSuchElementException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_setTest.java", "testclass_name": "SingletonListIterator_setTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SingletonListIterator_setTest", "description": "Unit tests for the set method of SingletonListIterator.", "class_members": {"variables": [{"name": "testValue", "type": "static final Object"}, {"name": "iterator", "type": "SingletonListIterator<Object>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testSetAfterNext", "primary_tested": ["SingletonListIterator.set(Object)"], "associated_methods": ["SingletonListIterator.next()", "SingletonListIterator.previous()"], "external_dependencies": {"modules": ["SingletonListIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the set method works correctly after calling next()."}, {"name": "testSetAfterRemove", "primary_tested": ["SingletonListIterator.set(Object)"], "associated_methods": ["SingletonListIterator.next()", "SingletonListIterator.remove()"], "external_dependencies": {"modules": ["SingletonListIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the set method throws IllegalStateException after calling remove()."}, {"name": "testSetWithoutNext", "primary_tested": ["SingletonListIterator.set(Object)"], "external_dependencies": {"modules": ["SingletonListIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the set method throws IllegalStateException if next() has not been called."}, {"name": "testSetAfterReset", "primary_tested": ["SingletonListIterator.set(Object)"], "associated_methods": ["SingletonListIterator.next()", "SingletonListIterator.reset()"], "external_dependencies": {"modules": ["SingletonListIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the set method throws IllegalStateException after calling reset()."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/TransformingComparator_equalsTest.java", "testclass_name": "TransformingComparator_equalsTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import static org.junit.jupiter.api.Assertions.*;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.TransformerUtils;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "TransformingComparator_equalsTest", "description": "Unit tests for the equals method of the TransformingComparator class.", "class_members": {"variables": [{"name": "transformer", "type": "Transformer<String, String>"}, {"name": "comparator1", "type": "TransformingComparator<String, String>"}, {"name": "comparator2", "type": "TransformingComparator<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEqualsSameInstance", "primary_tested": ["TransformingComparator.equals(Object)"], "external_dependencies": {"modules": ["TransformingComparator"], "class_members": [{"name": "comparator1", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing the same instance."}, {"name": "testEqualsNull", "primary_tested": ["TransformingComparator.equals(Object)"], "external_dependencies": {"modules": ["TransformingComparator"], "class_members": [{"name": "comparator1", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing with null."}, {"name": "testEqualsDifferentClass", "primary_tested": ["TransformingComparator.equals(Object)"], "external_dependencies": {"modules": ["TransformingComparator"], "class_members": [{"name": "comparator1", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing with an object of a different class."}, {"name": "testEqualsSameAttributes", "primary_tested": ["TransformingComparator.equals(Object)"], "external_dependencies": {"modules": ["TransformingComparator"], "class_members": [{"name": "comparator1", "type": "variable"}, {"name": "comparator2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing two instances with the same attributes."}, {"name": "testEqualsDifferentTransformer", "primary_tested": ["TransformingComparator.equals(Object)"], "external_dependencies": {"modules": ["TransformingComparator", "TransformerUtils"], "class_members": [{"name": "comparator1", "type": "variable"}], "project_specific_resources": ["TransformerUtils.constantTransformer(String)"]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing two instances with different transformers."}, {"name": "testEqualsDifferentDecorated", "primary_tested": ["TransformingComparator.equals(Object)"], "external_dependencies": {"modules": ["TransformingComparator"], "class_members": [{"name": "comparator1", "type": "variable"}, {"name": "transformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing two instances with different decorated comparators."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_previousTest.java", "testclass_name": "SingletonListIterator_previousTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SingletonListIterator_previousTest", "description": "Unit tests for the previous method of SingletonListIterator.", "class_members": {"variables": [{"name": "testValue", "type": "static final Object"}, {"name": "iterator", "type": "SingletonListIterator<Object>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPreviousSuccess", "primary_tested": ["SingletonListIterator.previous()"], "associated_methods": ["SingletonListIterator.next()"], "external_dependencies": {"modules": ["SingletonListIterator", "Object"], "class_members": [{"name": "iterator", "type": "variable"}, {"name": "testValue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the previous method returns the correct value after calling next."}, {"name": "testPreviousBeforeFirst", "primary_tested": ["SingletonListIterator.previous()"], "external_dependencies": {"modules": ["SingletonListIterator", "NoSuchElementException"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that NoSuchElementException is thrown when calling previous before the first element."}, {"name": "testPreviousAfterRemove", "primary_tested": ["SingletonListIterator.previous()"], "associated_methods": ["SingletonListIterator.next()", "SingletonListIterator.remove()"], "external_dependencies": {"modules": ["SingletonListIterator", "NoSuchElementException"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that NoSuchElementException is thrown when calling previous after removing an element."}, {"name": "testPreviousAfterReset", "primary_tested": ["SingletonListIterator.previous()"], "associated_methods": ["SingletonListIterator.next()", "SingletonListIterator.reset()"], "external_dependencies": {"modules": ["SingletonListIterator", "NoSuchElementException"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that NoSuchElementException is thrown when calling previous after resetting the iterator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/FilterListIterator_previousTest.java", "testclass_name": "FilterListIterator_previousTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.ArrayList;", "import java.util.List;", "import java.util.ListIterator;", "import java.util.NoSuchElementException;", "import org.apache.commons.collections4.Predicate;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "FilterListIterator_previousTest", "description": "Unit tests for the previous method of FilterListIterator with different predicates.", "class_members": {"variables": [{"name": "list", "type": "List<Integer>"}, {"name": "evenPred", "type": "Predicate<Integer>"}, {"name": "oddPred", "type": "Predicate<Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPreviousWithEvenPredicate", "primary_tested": ["FilterListIterator.previous()"], "external_dependencies": {"modules": ["FilterListIterator", "ListIterator", "Predicate"], "class_members": [{"name": "list", "type": "variable"}, {"name": "evenPred", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the previous method of FilterListIterator with an even predicate."}, {"name": "testPreviousWithOddPredicate", "primary_tested": ["FilterListIterator.previous()"], "external_dependencies": {"modules": ["FilterListIterator", "ListIterator", "Predicate"], "class_members": [{"name": "list", "type": "variable"}, {"name": "oddPred", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the previous method of FilterListIterator with an odd predicate."}, {"name": "testPreviousNoSuchElementException", "primary_tested": ["FilterListIterator.previous()"], "external_dependencies": {"modules": ["FilterListIterator", "ListIterator", "Predicate", "NoSuchElementException"], "class_members": [{"name": "list", "type": "variable"}, {"name": "evenPred", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that NoSuchElementException is thrown when calling previous on an empty iterator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/SingletonIterator_nextTest.java", "testclass_name": "SingletonIterator_nextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SingletonIterator_nextTest", "description": "Unit tests for the next() method of SingletonIterator.", "class_members": {"variables": [{"name": "testValue", "type": "static final Object"}, {"name": "iterator", "type": "SingletonIterator<Object>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNextSuccess", "primary_tested": ["SingletonIterator.next()"], "external_dependencies": {"modules": ["SingletonIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful iteration of the SingletonIterator."}, {"name": "testNextAfterReset", "primary_tested": ["SingletonIterator.next()"], "associated_methods": ["SingletonIterator.reset()"], "external_dependencies": {"modules": ["SingletonIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the iteration of the SingletonIterator after a reset."}, {"name": "testNextAfterRemove", "primary_tested": ["SingletonIterator.next()"], "associated_methods": ["SingletonIterator.remove()"], "external_dependencies": {"modules": ["SingletonIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that NoSuchElementException is thrown after removing the element from the SingletonIterator."}, {"name": "testNextWithoutReset", "primary_tested": ["SingletonIterator.next()"], "external_dependencies": {"modules": ["SingletonIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that NoSuchElementException is thrown when trying to iterate without resetting the SingletonIterator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableMapIterator_unmodifiableMapIteratorTest.java", "testclass_name": "UnmodifiableMapIterator_unmodifiableMapIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import org.apache.commons.collections4.MapIterator;", "import org.apache.commons.collections4.Unmodifiable;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;"], "name": "UnmodifiableMapIterator_unmodifiableMapIteratorTest", "description": "Tests for the UnmodifiableMapIterator class, specifically focusing on the unmodifiableMapIterator method.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testUnmodifiableMapIteratorWithUnmodifiableIterator", "primary_tested": ["UnmodifiableMapIterator.unmodifiableMapIterator(MapIterator)"], "associated_methods": ["MapIterator.getKey()", "MapIterator.getValue()", "MapIterator.hasNext()", "MapIterator.next()"], "external_dependencies": {"modules": ["MapIterator", "UnmodifiableMapIterator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the unmodifiableMapIterator method with an unmodifiable iterator, verifying that the returned iterator is not the same instance and behaves correctly."}, {"name": "testUnmodifiableMapIteratorWithModifiableIterator", "primary_tested": ["UnmodifiableMapIterator.unmodifiableMapIterator(MapIterator)"], "associated_methods": ["MapIterator.getKey()", "MapIterator.getValue()", "MapIterator.hasNext()", "MapIterator.next()"], "external_dependencies": {"modules": ["MapIterator", "UnmodifiableMapIterator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the unmodifiableMapIterator method with a modifiable iterator, verifying that the returned iterator is not the same instance and behaves correctly."}, {"name": "testUnmodifiableMapIteratorWithNullIterator", "primary_tested": ["UnmodifiableMapIterator.unmodifiableMapIterator(MapIterator)"], "external_dependencies": {"modules": ["MapIterator", "UnmodifiableMapIterator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the unmodifiableMapIterator method with a null iterator, expecting a NullPointerException to be thrown."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_removeTest.java", "testclass_name": "PeekingIterator_removeTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Iterator;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "PeekingIterator_removeTest", "description": "Unit tests for the remove functionality of the PeekingIterator class.", "class_members": {"variables": [{"name": "testList", "type": "List<String>"}, {"name": "testArray", "type": "static final String[]"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveWithoutPeekOrElement", "primary_tested": ["PeekingIterator.remove()"], "associated_methods": ["PeekingIterator.next()"], "external_dependencies": {"modules": ["PeekingIterator", "List", "ArrayList", "Arrays"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the remove functionality of the PeekingIterator when called after next() but not after peek() or element()."}, {"name": "testRemoveAfterPeek", "primary_tested": ["PeekingIterator.remove()"], "associated_methods": ["PeekingIterator.peek()"], "external_dependencies": {"modules": ["PeekingIterator", "List", "ArrayList", "Arrays"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the remove functionality of the PeekingIterator when called after peek(), expecting an IllegalStateException."}, {"name": "testRemoveAfterElement", "primary_tested": ["PeekingIterator.remove()"], "associated_methods": ["PeekingIterator.element()"], "external_dependencies": {"modules": ["PeekingIterator", "List", "ArrayList", "Arrays"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the remove functionality of the PeekingIterator when called after element(), expecting an IllegalStateException."}, {"name": "testRemoveOnEmptyIterator", "primary_tested": ["PeekingIterator.remove()"], "external_dependencies": {"modules": ["PeekingIterator", "ArrayList"]}, "category": "unit", "description": "Tests the remove functionality of the PeekingIterator when called on an empty iterator, expecting an IllegalStateException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparator_equalsTest.java", "testclass_name": "FixedOrderComparator_equalsTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.List;"], "name": "FixedOrderComparator_equalsTest", "description": "Unit tests for the equals method of the FixedOrderComparator class.", "class_members": {"variables": [{"name": "comparator", "type": "FixedOrderComparator<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEqualsSameInstance", "primary_tested": ["FixedOrderComparator.equals(Object)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with the same instance."}, {"name": "testEqualsNull", "primary_tested": ["FixedOrderComparator.equals(Object)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with a null object."}, {"name": "testEqualsDifferentClass", "primary_tested": ["FixedOrderComparator.equals(Object)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with an object of a different class."}, {"name": "testEqualsDifferentState", "primary_tested": ["FixedOrderComparator.equals(Object)"], "associated_methods": ["FixedOrderComparator.add(String)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with a comparator having different state."}, {"name": "testEqualsSameState", "primary_tested": ["FixedOrderComparator.equals(Object)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with a comparator having the same state."}, {"name": "testEqualsDifferentLockState", "primary_tested": ["FixedOrderComparator.equals(Object)"], "associated_methods": ["FixedOrderComparator.compare(String,String)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with a comparator having a different lock state."}, {"name": "testEqualsDifferentUnknownObjectBehavior", "primary_tested": ["FixedOrderComparator.equals(Object)"], "associated_methods": ["FixedOrderComparator.setUnknownObjectBehavior(FixedOrderComparator.UnknownObjectBehavior)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with a comparator having different unknown object behavior."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/ObjectGraphIterator_nextTest.java", "testclass_name": "ObjectGraphIterator_nextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ObjectGraphIterator_nextTest", "description": "Unit tests for the next() method of the ObjectGraphIterator class.", "class_members": {"variables": [{"name": "iterator", "type": "ObjectGraphIterator<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNext_Success", "primary_tested": ["ObjectGraphIterator.next()"], "external_dependencies": {"modules": ["ObjectGraphIterator", "ArrayList", "Iterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful iteration over elements using the next() method."}, {"name": "testNext_NoSuchElementException", "primary_tested": ["ObjectGraphIterator.next()"], "external_dependencies": {"modules": ["ObjectGraphIterator", "ArrayList", "Iterator", "NoSuchElementException"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that NoSuchElementException is thrown when calling next() on an exhausted iterator."}, {"name": "testNext_WithTransformer", "primary_tested": ["ObjectGraphIterator.next()"], "external_dependencies": {"modules": ["ObjectGraphIterator", "Transformer"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "description": "Tests the next() method when a transformer is used to transform elements."}, {"name": "testNext_EmptyIterator", "primary_tested": ["ObjectGraphIterator.next()"], "external_dependencies": {"modules": ["ObjectGraphIterator", "ArrayList", "Iterator", "NoSuchElementException"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "description": "Tests that NoSuchElementException is thrown when calling next() on an empty iterator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/SkippingIterator_removeTest.java", "testclass_name": "SkippingIterator_removeTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import org.junit.jupiter.api.Test;", "import java.util.Iterator;", "import java.util.NoSuchElementException;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;"], "name": "SkippingIterator_removeTest", "description": "Unit tests for the remove method of the SkippingIterator class.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testRemoveBeforeNext", "primary_tested": ["SkippingIterator.remove()"], "external_dependencies": {"modules": ["Iterator", "SkippingIterator", "IllegalStateException"], "class_members": []}, "category": "unit", "description": "Tests that an IllegalStateException is thrown when remove() is called before next()."}, {"name": "testRemoveAfterNext", "primary_tested": ["SkippingIterator.remove()"], "associated_methods": ["SkippingIterator.next()"], "external_dependencies": {"modules": ["Iterator", "SkippingIterator", "Mockito"], "class_members": []}, "category": "unit", "description": "Tests that super.remove() is called when remove() is called after next()."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/ObjectArrayIterator_nextTest.java", "testclass_name": "ObjectArrayIterator_nextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ObjectArrayIterator_nextTest", "description": "Unit tests for the next method of ObjectArrayIterator.", "class_members": {"variables": [{"name": "testArray", "type": "String[]"}, {"name": "iterator", "type": "ObjectArrayIterator<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNextWithElements", "primary_tested": ["ObjectArrayIterator.next()"], "external_dependencies": {"modules": ["ObjectArrayIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method of ObjectArrayIterator when there are elements in the array."}, {"name": "testNextThrowsNoSuchElementException", "primary_tested": ["ObjectArrayIterator.next()"], "external_dependencies": {"modules": ["ObjectArrayIterator", "NoSuchElementException"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the next method of ObjectArrayIterator throws NoSuchElementException when there are no more elements."}, {"name": "testNextAfterReset", "primary_tested": ["ObjectArrayIterator.next()"], "associated_methods": ["ObjectArrayIterator.reset()"], "external_dependencies": {"modules": ["ObjectArrayIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method of ObjectArrayIterator after resetting the iterator."}, {"name": "testNextWithCustomStartIndex", "primary_tested": ["ObjectArrayIterator.next()"], "external_dependencies": {"modules": ["ObjectArrayIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method of ObjectArrayIterator with a custom start index."}, {"name": "testNextWithCustomRange", "primary_tested": ["ObjectArrayIterator.next()"], "external_dependencies": {"modules": ["ObjectArrayIterator", "NoSuchElementException"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method of ObjectArrayIterator with a custom range."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_elementTest.java", "testclass_name": "PeekingIterator_elementTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "PeekingIterator_elementTest", "description": "Unit tests for the PeekingIterator's element method.", "class_members": {"variables": [{"name": "testList", "type": "List<String>"}, {"name": "testArray", "type": "static final String[]"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testElementWithValidElement", "primary_tested": ["PeekingIterator.element()"], "external_dependencies": {"modules": ["PeekingIterator", "List", "Iterator"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the element method of PeekingIterator when there is a valid element to peek."}, {"name": "testElementWithExhaustedIterator", "primary_tested": ["PeekingIterator.element()"], "associated_methods": ["PeekingIterator.hasNext()", "PeekingIterator.next()"], "external_dependencies": {"modules": ["PeekingIterator", "List", "Iterator", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the element method of PeekingIterator when the iterator is exhausted, expecting a NoSuchElementException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/PermutationIterator_nextTest.java", "testclass_name": "PermutationIterator_nextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Arrays;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "PermutationIterator_nextTest", "description": "Unit tests for the next method of the PermutationIterator class.", "class_members": {"variables": [{"name": "permutationIterator", "type": "PermutationIterator<Character>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNextPermutationSuccess", "primary_tested": ["PermutationIterator.next()"], "external_dependencies": {"modules": ["PermutationIterator", "Arrays", "List"], "class_members": [{"name": "permutationIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful retrieval of the next permutation."}, {"name": "testNextPermutationNoSuchElementException", "primary_tested": ["PermutationIterator.next()"], "associated_methods": ["PermutationIterator.hasNext()"], "external_dependencies": {"modules": ["PermutationIterator", "NoSuchElementException"], "class_members": [{"name": "permutationIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that NoSuchElementException is thrown when there are no more permutations."}, {"name": "testNextPermutationMultipleCalls", "primary_tested": ["PermutationIterator.next()"], "external_dependencies": {"modules": ["PermutationIterator", "Arrays", "List"], "class_members": [{"name": "permutationIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retrieval of multiple permutations in sequence."}, {"name": "testNextPermutationHasNextValidation", "primary_tested": ["PermutationIterator.hasNext()"], "associated_methods": ["PermutationIterator.next()"], "external_dependencies": {"modules": ["PermutationIterator"], "class_members": [{"name": "permutationIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method to ensure it correctly indicates the presence of more permutations."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/LoopingIterator_nextTest.java", "testclass_name": "LoopingIterator_nextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "LoopingIterator_nextTest", "description": "Unit tests for the next method of the LoopingIterator class.", "class_members": {"variables": [{"name": "loopingIterator", "type": "LoopingIterator<String>"}, {"name": "list", "type": "List<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNextWithElements", "primary_tested": ["LoopingIterator.next()"], "external_dependencies": {"modules": ["LoopingIterator", "List"], "class_members": [{"name": "loopingIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method of LoopingIterator with elements, ensuring it loops correctly."}, {"name": "testNextWithEmptyCollection", "primary_tested": ["LoopingIterator.next()"], "external_dependencies": {"modules": ["LoopingIterator", "List", "NoSuchElementException"], "class_members": [{"name": "loopingIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the next method of LoopingIterator with an empty collection, expecting a NoSuchElementException."}, {"name": "testNextWithReset", "primary_tested": ["LoopingIterator.next()", "LoopingIterator.reset()"], "external_dependencies": {"modules": ["LoopingIterator", "List"], "class_members": [{"name": "loopingIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method of LoopingIterator after resetting the iterator."}, {"name": "testNextWithRemove", "primary_tested": ["LoopingIterator.next()", "LoopingIterator.remove()"], "external_dependencies": {"modules": ["LoopingIterator", "List"], "class_members": [{"name": "loopingIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method of LoopingIterator after removing an element."}, {"name": "testNextWithSize", "primary_tested": ["LoopingIterator.next()", "LoopingIterator.size()"], "external_dependencies": {"modules": ["LoopingIterator", "List"], "class_members": [{"name": "loopingIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method of LoopingIterator and checks the size method."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/CollatingIterator_addIteratorTest.java", "testclass_name": "CollatingIterator_addIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Comparator;", "import java.util.Iterator;", "import org.apache.commons.collections4.comparators.ComparableComparator;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CollatingIterator_addIteratorTest", "description": "Unit tests for the addIterator method of the CollatingIterator class.", "class_members": {"variables": [{"name": "comparator", "type": "Comparator<Integer>"}, {"name": "evens", "type": "ArrayList<Integer>"}, {"name": "odds", "type": "ArrayList<Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAddIteratorValid", "primary_tested": ["CollatingIterator.addIterator(Iterator<Integer>)"], "associated_methods": ["CollatingIterator.getIterators()"], "external_dependencies": {"modules": ["CollatingIterator", "Iterator", "ArrayList"], "class_members": [{"name": "comparator", "type": "variable"}, {"name": "evens", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the valid addition of an iterator to the CollatingIterator."}, {"name": "testAddIteratorNull", "primary_tested": ["CollatingIterator.addIterator(Iterator<Integer>)"], "external_dependencies": {"modules": ["CollatingIterator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior when attempting to add a null iterator to the CollatingIterator."}, {"name": "testAddIteratorAfterIterationStarted", "primary_tested": ["CollatingIterator.addIterator(Iterator<Integer>)"], "associated_methods": ["CollatingIterator.hasNext()"], "external_dependencies": {"modules": ["CollatingIterator", "ArrayList"], "class_members": [{"name": "comparator", "type": "variable"}, {"name": "evens", "type": "variable"}, {"name": "odds", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior when attempting to add an iterator to the CollatingIterator after iteration has started."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/CollatingIterator_nextTest.java", "testclass_name": "CollatingIterator_nextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.*;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;"], "name": "CollatingIterator_nextTest", "description": "Unit tests for the next() method of the CollatingIterator class.", "class_members": {"variables": [{"name": "collatingIterator", "type": "CollatingIterator<Integer>"}, {"name": "comparator", "type": "Comparator<Integer>"}, {"name": "iterators", "type": "List<Iterator<Integer>>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNext_NoSuchElementException", "primary_tested": ["CollatingIterator.next()"], "external_dependencies": {"modules": ["CollatingIterator", "Collections", "NoSuchElementException"], "class_members": [{"name": "collatingIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that NoSuchElementException is thrown when calling next() on an empty iterator."}, {"name": "testNext_Success", "primary_tested": ["CollatingIterator.next()"], "associated_methods": ["CollatingIterator.addIterator(Iterator<Integer>)"], "external_dependencies": {"modules": ["CollatingIterator", "Arrays", "Iterator"], "class_members": [{"name": "collatingIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful retrieval of elements in sorted order from the CollatingIterator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparator_compareTest.java", "testclass_name": "FixedOrderComparator_compareTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.Arrays;", "import java.util.Comparator;", "import java.util.LinkedList;", "import java.util.List;", "import java.util.Random;", "import org.apache.commons.lang3.ArrayUtils;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "FixedOrderComparator_compareTest", "description": "Unit tests for the compare functionality of the FixedOrderComparator class.", "class_members": {"variables": [{"name": "comparator", "type": "FixedOrderComparator<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testCompareKnownObjects", "primary_tested": ["FixedOrderComparator.compare(String,String)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the comparison of known objects in the FixedOrderComparator."}, {"name": "testCompareUnknownObjectsBefore", "primary_tested": ["FixedOrderComparator.compare(String,String)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the comparison of unknown objects with the BEFORE behavior in the FixedOrderComparator."}, {"name": "testCompareUnknownObjectsAfter", "primary_tested": ["FixedOrderComparator.compare(String,String)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the comparison of unknown objects with the AFTER behavior in the FixedOrderComparator."}, {"name": "testCompareUnknownObjectsException", "primary_tested": ["FixedOrderComparator.compare(String,String)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the comparison of unknown objects that throw an exception in the FixedOrderComparator."}, {"name": "testCompareAfterLock", "primary_tested": ["FixedOrderComparator.compare(String,String)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the comparison after the comparator has been locked in the FixedOrderComparator."}, {"name": "testAddAsEqual", "primary_tested": ["FixedOrderComparator.compare(String,String)"], "associated_methods": ["FixedOrderComparator.addAsEqual(String,String)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests adding objects as equal in the FixedOrderComparator."}, {"name": "testAddAsEqualUnknownObject", "primary_tested": ["FixedOrderComparator.addAsEqual(String,String)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests adding an unknown object as equal in the FixedOrderComparator."}, {"name": "testEquals", "primary_tested": ["FixedOrderComparator.equals(Object)"], "external_dependencies": {"modules": ["FixedOrderComparator"]}, "category": "unit", "description": "Tests the equality comparison of two FixedOrderComparator instances."}, {"name": "testHashCode", "primary_tested": ["FixedOrderComparator.hashCode()"], "external_dependencies": {"modules": ["FixedOrderComparator"]}, "category": "unit", "description": "Tests the hash code generation of FixedOrderComparator instances."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/CollatingIterator_getIteratorIndexTest.java", "testclass_name": "CollatingIterator_getIteratorIndexTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.ArrayList;", "import java.util.Comparator;", "import java.util.Iterator;", "import org.apache.commons.collections4.comparators.ComparableComparator;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CollatingIterator_getIteratorIndexTest", "description": "Unit tests for the getIteratorIndex method of the CollatingIterator class.", "class_members": {"variables": [{"name": "comparator", "type": "Comparator<Integer>"}, {"name": "evens", "type": "ArrayList<Integer>"}, {"name": "odds", "type": "ArrayList<Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetIteratorIndexSuccess", "primary_tested": ["CollatingIterator.getIteratorIndex()"], "associated_methods": ["CollatingIterator.next()"], "external_dependencies": {"modules": ["CollatingIterator", "ArrayList", "Iterator", "ComparableComparator"], "class_members": [{"name": "comparator", "type": "variable"}, {"name": "evens", "type": "variable"}, {"name": "odds", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getIteratorIndex method of CollatingIterator when an element has been returned by the iterator."}, {"name": "testGetIteratorIndexNoValueReturnedYet", "primary_tested": ["CollatingIterator.getIteratorIndex()"], "external_dependencies": {"modules": ["CollatingIterator", "ArrayList", "Iterator", "ComparableComparator"], "class_members": [{"name": "comparator", "type": "variable"}, {"name": "evens", "type": "variable"}, {"name": "odds", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getIteratorIndex method of CollatingIterator when no element has been returned by the iterator, expecting an IllegalStateException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_getTest.java", "testclass_name": "StaticBucketMap_getTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "StaticBucketMap_getTest", "description": "Unit tests for the get method of StaticBucketMap.", "class_members": {"variables": [{"name": "map", "type": "StaticBucketMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetExistingKey", "primary_tested": ["StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method for an existing key in the map."}, {"name": "testGetNonExistingKey", "primary_tested": ["StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method for a non-existing key in the map."}, {"name": "testGetNullKey", "primary_tested": ["StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method for a null key in the map."}, {"name": "testGetAfterRemove", "primary_tested": ["StaticBucketMap.get(String)"], "associated_methods": ["StaticBucketMap.remove(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method after removing a key from the map."}, {"name": "testGetWithMultipleEntries", "primary_tested": ["StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method with multiple entries in the map."}, {"name": "testGetWithSameHashDifferentKey", "primary_tested": ["StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method with keys that hash to the same bucket but are different."}, {"name": "testGetWithCollision", "primary_tested": ["StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method with keys that collide and hash to the same bucket."}, {"name": "testGetWithNullValue", "primary_tested": ["StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method with a key that has a null value in the map."}, {"name": "testGetWithNullKeyAndNullValue", "primary_tested": ["StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method with a null key and null value in the map."}, {"name": "testGetWithEmptyMap", "primary_tested": ["StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method with an empty map."}, {"name": "testGetWithConcurrentModification", "primary_tested": ["StaticBucketMap.get(String)"], "associated_methods": ["StaticBucketMap.remove(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method with concurrent modifications in the map."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_peekingIteratorTest.java", "testclass_name": "PeekingIterator_peekingIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Iterator;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "PeekingIterator_peekingIteratorTest", "description": "Unit tests for the PeekingIterator class, focusing on its behavior with different types of iterators.", "class_members": {"variables": [{"name": "testList", "type": "List<String>"}, {"name": "testArray", "type": "static final String[]"}], "methods": [{"name": "validate", "signature": "void validate(Iterator<String> iter, String... items)"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPeekingIteratorWithNonNullIterator", "primary_tested": ["PeekingIterator.peekingIterator(Iterator<String>)"], "associated_methods": ["PeekingIterator.peek()", "PeekingIterator.element()"], "external_dependencies": {"modules": ["PeekingIterator", "Iterator", "List"], "class_members": [{"name": "testList", "type": "variable"}, {"name": "validate", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the creation and behavior of PeekingIterator with a non-null iterator."}, {"name": "testPeekingIteratorWithNullIterator", "primary_tested": ["PeekingIterator.peekingIterator(Iterator<String>)"], "external_dependencies": {"modules": ["PeekingIterator", "Iterator"]}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of PeekingIterator when provided with a null iterator, expecting a NullPointerException."}, {"name": "testPeekingIteratorWithPeekingIterator", "primary_tested": ["PeekingIterator.peekingIterator(Iterator<String>)"], "external_dependencies": {"modules": ["PeekingIterator", "Iterator", "List"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior of PeekingIterator when provided with another PeekingIterator, expecting the same instance to be returned."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableOrderedMapIterator_unmodifiableOrderedMapIteratorTest.java", "testclass_name": "UnmodifiableOrderedMapIterator_unmodifiableOrderedMapIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import org.apache.commons.collections4.OrderedMapIterator;", "import org.apache.commons.collections4.Unmodifiable;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;"], "name": "UnmodifiableOrderedMapIterator_unmodifiableOrderedMapIteratorTest", "description": "Tests for the UnmodifiableOrderedMapIterator class, specifically focusing on the unmodifiableOrderedMapIterator method.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testUnmodifiableOrderedMapIteratorWithUnmodifiableIterator", "primary_tested": ["UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator(OrderedMapIterator)"], "associated_methods": ["OrderedMapIterator.hasNext()", "OrderedMapIterator.next()", "OrderedMapIterator.getKey()", "OrderedMapIterator.getValue()"], "external_dependencies": {"modules": ["OrderedMapIterator", "UnmodifiableOrderedMapIterator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the unmodifiableOrderedMapIterator method with an unmodifiable iterator, verifying that the iterator methods return the expected values."}, {"name": "testUnmodifiableOrderedMapIteratorWithModifiableIterator", "primary_tested": ["UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator(OrderedMapIterator)"], "associated_methods": ["OrderedMapIterator.hasNext()", "OrderedMapIterator.next()", "OrderedMapIterator.getKey()", "OrderedMapIterator.getValue()"], "external_dependencies": {"modules": ["OrderedMapIterator", "UnmodifiableOrderedMapIterator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the unmodifiableOrderedMapIterator method with a modifiable iterator, verifying that the iterator methods return the expected values."}, {"name": "testUnmodifiableOrderedMapIteratorWithNullIterator", "primary_tested": ["UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator(OrderedMapIterator)"], "external_dependencies": {"modules": ["OrderedMapIterator", "UnmodifiableOrderedMapIterator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the unmodifiableOrderedMapIterator method with a null iterator, expecting a NullPointerException to be thrown."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/CollatingIterator_hasNextTest.java", "testclass_name": "CollatingIterator_hasNextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Comparator;", "import java.util.Iterator;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "CollatingIterator_hasNextTest", "description": "Unit tests for the hasNext method of the CollatingIterator class.", "class_members": {"variables": [{"name": "collatingIterator", "type": "CollatingIterator<Integer>"}, {"name": "iterators", "type": "List<Iterator<Integer>>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testHasNext_WithNoIterators", "primary_tested": ["CollatingIterator.hasNext()"], "external_dependencies": {"modules": ["CollatingIterator"], "class_members": [{"name": "collatingIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method when no iterators are added to the CollatingIterator."}, {"name": "testHasNext_WithEmptyIterators", "primary_tested": ["CollatingIterator.hasNext()"], "associated_methods": ["CollatingIterator.addIterator(Iterator<Integer>)"], "external_dependencies": {"modules": ["CollatingIterator", "Arrays", "List"], "class_members": [{"name": "collatingIterator", "type": "variable"}, {"name": "iterators", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method when empty iterators are added to the CollatingIterator."}, {"name": "testHasNext_WithNonEmptyIterators", "primary_tested": ["CollatingIterator.hasNext()"], "associated_methods": ["CollatingIterator.addIterator(Iterator<Integer>)"], "external_dependencies": {"modules": ["CollatingIterator", "Arrays", "List"], "class_members": [{"name": "collatingIterator", "type": "variable"}, {"name": "iterators", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method when non-empty iterators are added to the CollatingIterator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/CollatingIterator_setIteratorTest.java", "testclass_name": "CollatingIterator_setIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Comparator;", "import java.util.Iterator;", "import java.util.List;", "import org.apache.commons.collections4.comparators.ComparableComparator;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CollatingIterator_setIteratorTest", "description": "Unit tests for the setIterator method of the CollatingIterator class.", "class_members": {"variables": [{"name": "comparator", "type": "Comparator<Integer>"}, {"name": "evens", "type": "List<Integer>"}, {"name": "odds", "type": "List<Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testSetIteratorValid", "primary_tested": ["CollatingIterator.setIterator(int,Iterator)"], "associated_methods": ["CollatingIterator.addIterator(Iterator)", "CollatingIterator.getIterators()"], "external_dependencies": {"modules": ["CollatingIterator", "Arrays", "Iterator", "List"], "class_members": [{"name": "comparator", "type": "variable"}, {"name": "evens", "type": "variable"}, {"name": "odds", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the setIterator method with a valid index."}, {"name": "testSetIteratorNull", "primary_tested": ["CollatingIterator.setIterator(int,Iterator)"], "associated_methods": ["CollatingIterator.addIterator(Iterator)"], "external_dependencies": {"modules": ["CollatingIterator", "Iterator"], "class_members": [{"name": "comparator", "type": "variable"}, {"name": "evens", "type": "variable"}, {"name": "odds", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the setIterator method with a null iterator, expecting a NullPointerException."}, {"name": "testSetIteratorIndexOutOfBounds", "primary_tested": ["CollatingIterator.setIterator(int,Iterator)"], "associated_methods": ["CollatingIterator.addIterator(Iterator)"], "external_dependencies": {"modules": ["CollatingIterator", "Arrays", "Iterator"], "class_members": [{"name": "comparator", "type": "variable"}, {"name": "evens", "type": "variable"}, {"name": "odds", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the setIterator method with an index out of bounds, expecting an IndexOutOfBoundsException."}, {"name": "testSetIteratorAfterStart", "primary_tested": ["CollatingIterator.setIterator(int,Iterator)"], "associated_methods": ["CollatingIterator.addIterator(Iterator)", "CollatingIterator.hasNext()"], "external_dependencies": {"modules": ["CollatingIterator", "Arrays", "Iterator"], "class_members": [{"name": "comparator", "type": "variable"}, {"name": "evens", "type": "variable"}, {"name": "odds", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the setIterator method after the iteration has started, expecting an IllegalStateException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_nextTest.java", "testclass_name": "PeekingIterator_nextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "PeekingIterator_nextTest", "description": "Unit tests for the next method of the PeekingIterator class.", "class_members": {"variables": [{"name": "testList", "type": "List<String>"}, {"name": "testArray", "type": "static final String[]"}], "methods": [{"name": "setUp", "signature": "void setUp() throws Exception"}, {"name": "makeObject", "signature": "PeekingIterator<String> makeObject()"}, {"name": "validate", "signature": "void validate(Iterator<String> iter, String... items)"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNextWithPeek", "primary_tested": ["PeekingIterator.next()"], "associated_methods": ["PeekingIterator.peek()"], "external_dependencies": {"modules": ["PeekingIterator", "Iterator"], "class_members": [{"name": "testList", "type": "variable"}, {"name": "makeObject", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method of PeekingIterator when peeking before each next call."}, {"name": "testNextWithoutPeek", "primary_tested": ["PeekingIterator.next()"], "external_dependencies": {"modules": ["PeekingIterator", "Iterator"], "class_members": [{"name": "testList", "type": "variable"}, {"name": "makeObject", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method of PeekingIterator without peeking."}, {"name": "testNextThrowsNoSuchElementException", "primary_tested": ["PeekingIterator.next()"], "external_dependencies": {"modules": ["PeekingIterator", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}, {"name": "makeObject", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the next method of PeekingIterator throws NoSuchElementException when called after the iterator is exhausted."}, {"name": "testNextAfterExhausted", "primary_tested": ["PeekingIterator.next()"], "external_dependencies": {"modules": ["PeekingIterator", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}, {"name": "makeObject", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the next method of PeekingIterator throws NoSuchElementException after the iterator is exhausted."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/SingletonIterator_removeTest.java", "testclass_name": "SingletonIterator_removeTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SingletonIterator_removeTest", "description": "Unit tests for the remove functionality of the SingletonIterator class.", "class_members": {"variables": [{"name": "testValue", "type": "static final Object"}, {"name": "iterator", "type": "SingletonIterator<Object>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveAllowed", "primary_tested": ["SingletonIterator.remove()"], "associated_methods": ["SingletonIterator.next()", "SingletonIterator.hasNext()"], "external_dependencies": {"modules": ["SingletonIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the remove operation is allowed and correctly removes the element from the iterator."}, {"name": "testRemoveNotAllowed", "primary_tested": ["SingletonIterator.remove()"], "associated_methods": ["SingletonIterator.next()"], "external_dependencies": {"modules": ["SingletonIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests that the remove operation throws UnsupportedOperationException when not allowed."}, {"name": "testRemoveBeforeNext", "primary_tested": ["SingletonIterator.remove()"], "external_dependencies": {"modules": ["SingletonIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the remove operation throws IllegalStateException when called before next."}, {"name": "testRemoveAfterReset", "primary_tested": ["SingletonIterator.remove()"], "associated_methods": ["SingletonIterator.next()", "SingletonIterator.reset()"], "external_dependencies": {"modules": ["SingletonIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the remove operation throws IllegalStateException after reset."}, {"name": "testRemoveTwice", "primary_tested": ["SingletonIterator.remove()"], "associated_methods": ["SingletonIterator.next()"], "external_dependencies": {"modules": ["SingletonIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the remove operation throws IllegalStateException when called twice."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIterator_nextTest.java", "testclass_name": "LoopingListIterator_nextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "LoopingListIterator_nextTest", "description": "Unit tests for the next method of LoopingListIterator.", "class_members": {"variables": [{"name": "loopingListIterator", "type": "LoopingListIterator<String>"}, {"name": "list", "type": "List<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNextWithNonEmptyList", "primary_tested": ["LoopingListIterator.next()"], "external_dependencies": {"modules": ["LoopingListIterator"], "class_members": [{"name": "loopingListIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method with a non-empty list, ensuring it loops back to the start."}, {"name": "testNextWithEmptyList", "primary_tested": ["LoopingListIterator.next()"], "external_dependencies": {"modules": ["LoopingListIterator"], "class_members": [{"name": "loopingListIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method with an empty list, expecting a NoSuchElementException."}, {"name": "testNextWithReset", "primary_tested": ["LoopingListIterator.next()"], "associated_methods": ["LoopingListIterator.reset()"], "external_dependencies": {"modules": ["LoopingListIterator"], "class_members": [{"name": "loopingListIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method after resetting the iterator, ensuring it starts from the beginning."}, {"name": "testNextWithRemove", "primary_tested": ["LoopingListIterator.next()"], "associated_methods": ["LoopingListIterator.remove()"], "external_dependencies": {"modules": ["LoopingListIterator"], "class_members": [{"name": "loopingListIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method after removing an element, ensuring it loops correctly."}, {"name": "testNextWithPrevious", "primary_tested": ["LoopingListIterator.next()"], "associated_methods": ["LoopingListIterator.previous()"], "external_dependencies": {"modules": ["LoopingListIterator"], "class_members": [{"name": "loopingListIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method after moving backward using the previous method, ensuring it loops correctly."}, {"name": "testNextWithNextIndex", "primary_tested": ["LoopingListIterator.next()"], "associated_methods": ["LoopingListIterator.nextIndex()"], "external_dependencies": {"modules": ["LoopingListIterator"], "class_members": [{"name": "loopingListIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method and the nextIndex method, ensuring it loops back to the start."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/BoundedIterator_nextTest.java", "testclass_name": "BoundedIterator_nextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.Arrays;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "BoundedIterator_nextTest", "description": "Unit tests for the next() method of the BoundedIterator class.", "class_members": {"variables": [{"name": "testList", "type": "List<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNextWithinBounds", "primary_tested": ["BoundedIterator.next()"], "external_dependencies": {"modules": ["BoundedIterator", "Iterator", "List"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next() method of BoundedIterator within the bounds."}, {"name": "testNextOutOfBounds", "primary_tested": ["BoundedIterator.next()"], "external_dependencies": {"modules": ["BoundedIterator", "Iterator", "List", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next() method of BoundedIterator when out of bounds, expecting a NoSuchElementException."}, {"name": "testNextWithZeroMax", "primary_tested": ["BoundedIterator.next()"], "external_dependencies": {"modules": ["BoundedIterator", "Iterator", "List", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next() method of BoundedIterator with a max of zero, expecting a NoSuchElementException."}, {"name": "testNextWithNegativeOffset", "primary_tested": ["BoundedIterator.BoundedIterator(Iterator<String>,int,int)"], "external_dependencies": {"modules": ["BoundedIterator", "Iterator", "List", "IllegalArgumentException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the BoundedIterator constructor with a negative offset, expecting an IllegalArgumentException."}, {"name": "testNextWithNegativeMax", "primary_tested": ["BoundedIterator.BoundedIterator(Iterator<String>,int,int)"], "external_dependencies": {"modules": ["BoundedIterator", "Iterator", "List", "IllegalArgumentException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the BoundedIterator constructor with a negative max, expecting an IllegalArgumentException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/CompositeMap_getTest.java", "testclass_name": "CompositeMap_getTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Collection;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeMap_getTest", "description": "Unit tests for the get method of the CompositeMap class.", "class_members": {"variables": [{"name": "compositeMap", "type": "CompositeMap<String, String>"}, {"name": "map1", "type": "Map<String, String>"}, {"name": "map2", "type": "Map<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetExistingKey", "primary_tested": ["CompositeMap.get(String)"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method for existing keys in the CompositeMap."}, {"name": "testGetNonExistingKey", "primary_tested": ["CompositeMap.get(String)"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method for a non-existing key in the CompositeMap."}, {"name": "testGetAfterAddingNewMap", "primary_tested": ["CompositeMap.get(String)"], "associated_methods": ["CompositeMap.addComposited(Map)"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method after adding a new map to the CompositeMap."}, {"name": "testGetAfterRemovingKey", "primary_tested": ["CompositeMap.get(String)"], "associated_methods": ["CompositeMap.remove(Object)"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method after removing a key from the CompositeMap."}, {"name": "testGetAfterPuttingNewKey", "primary_tested": ["CompositeMap.get(String)"], "associated_methods": ["CompositeMap.put(String,String)"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method after putting a new key-value pair in the CompositeMap."}, {"name": "testGetAfterPuttingExistingKey", "primary_tested": ["CompositeMap.get(String)"], "associated_methods": ["CompositeMap.put(String,String)"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method after updating an existing key-value pair in the CompositeMap."}, {"name": "testGetWithNullKey", "primary_tested": ["CompositeMap.get(String)"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method with a null key in the CompositeMap."}, {"name": "testGetWithEmptyCompositeMap", "primary_tested": ["CompositeMap.get(String)"], "external_dependencies": {"modules": ["CompositeMap", "Map"]}, "category": "unit", "description": "Tests the get method on an empty CompositeMap."}, {"name": "testGetWithSingleMap", "primary_tested": ["CompositeMap.get(String)"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "map1", "type": "variable"}]}, "category": "unit", "description": "Tests the get method on a CompositeMap with a single map."}, {"name": "testGetWithMultipleMaps", "primary_tested": ["CompositeMap.get(String)"], "associated_methods": ["CompositeMap.addComposited(Map)"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method on a CompositeMap with multiple maps."}, {"name": "testGetWithOverlappingKeys", "primary_tested": ["CompositeMap.get(String)"], "associated_methods": ["CompositeMap.addComposited(Map)"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method on a CompositeMap with overlapping keys."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/ZippingIterator_hasNextTest.java", "testclass_name": "ZippingIterator_hasNextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Iterator;", "import org.apache.commons.collections4.IteratorUtils;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ZippingIterator_hasNextTest", "description": "Unit tests for the hasNext method of the ZippingIterator class.", "class_members": {"variables": [{"name": "evens", "type": "ArrayList<Integer>"}, {"name": "odds", "type": "ArrayList<Integer>"}, {"name": "fib", "type": "ArrayList<Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testHasNextWithElements", "primary_tested": ["ZippingIterator.hasNext()"], "external_dependencies": {"modules": ["ZippingIterator", "ArrayList", "Iterator"], "class_members": [{"name": "fib", "type": "variable"}, {"name": "evens", "type": "variable"}, {"name": "odds", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method when the ZippingIterator contains elements."}, {"name": "testHasNextWithoutElements", "primary_tested": ["ZippingIterator.hasNext()"], "external_dependencies": {"modules": ["ZippingIterator", "IteratorUtils", "Iterator"]}, "category": "unit", "fixtures_used": [], "description": "Tests the hasNext method when the ZippingIterator does not contain elements."}, {"name": "testHasNextWithOneExhaustedIterator", "primary_tested": ["ZippingIterator.hasNext()"], "external_dependencies": {"modules": ["ZippingIterator", "ArrayList", "Iterator"], "class_members": [{"name": "evens", "type": "variable"}, {"name": "odds", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method when one of the iterators in the ZippingIterator is exhausted."}, {"name": "testHasNextWithAllExhaustedIterators", "primary_tested": ["ZippingIterator.hasNext()"], "external_dependencies": {"modules": ["ZippingIterator", "ArrayList", "Iterator"]}, "category": "unit", "fixtures_used": [], "description": "Tests the hasNext method when all iterators in the ZippingIterator are exhausted."}, {"name": "testHasNextWithMultipleCalls", "primary_tested": ["ZippingIterator.hasNext()"], "external_dependencies": {"modules": ["ZippingIterator", "ArrayList", "Iterator"], "class_members": [{"name": "fib", "type": "variable"}, {"name": "evens", "type": "variable"}, {"name": "odds", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method with multiple calls when the ZippingIterator contains elements."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_nextTest.java", "testclass_name": "SingletonListIterator_nextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SingletonListIterator_nextTest", "description": "Unit tests for the next method of SingletonListIterator.", "class_members": {"variables": [{"name": "testValue", "type": "static final Object"}, {"name": "iterator", "type": "SingletonListIterator<Object>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNextSuccess", "primary_tested": ["SingletonListIterator.next()"], "associated_methods": ["SingletonListIterator.hasNext()"], "external_dependencies": {"modules": ["SingletonListIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful retrieval of the next element from the SingletonListIterator."}, {"name": "testNextAfterReset", "primary_tested": ["SingletonListIterator.next()"], "associated_methods": ["SingletonListIterator.reset()", "SingletonListIterator.hasNext()"], "external_dependencies": {"modules": ["SingletonListIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retrieval of the next element after resetting the SingletonListIterator."}, {"name": "testNextAfterRemove", "primary_tested": ["SingletonListIterator.next()"], "associated_methods": ["SingletonListIterator.remove()"], "external_dependencies": {"modules": ["SingletonListIterator", "NoSuchElementException"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior of the next method after removing an element from the SingletonListIterator."}, {"name": "testNextAfterPrevious", "primary_tested": ["SingletonListIterator.next()"], "associated_methods": ["SingletonListIterator.previous()", "SingletonListIterator.hasNext()"], "external_dependencies": {"modules": ["SingletonListIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retrieval of the next element after calling the previous method on the SingletonListIterator."}, {"name": "testNextThrowsNoSuchElementException", "primary_tested": ["SingletonListIterator.next()"], "external_dependencies": {"modules": ["SingletonListIterator", "NoSuchElementException"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the next method throws a NoSuchElementException when called after the iterator has no more elements."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/FilterIterator_nextTest.java", "testclass_name": "FilterIterator_nextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.apache.commons.collections4.functors.TruePredicate.truePredicate;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.apache.commons.collections4.Predicate;", "import org.apache.commons.collections4.functors.NotNullPredicate;", "import org.apache.commons.lang3.ArrayUtils;", "import org.junit.jupiter.api.AfterEach;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "FilterIterator_nextTest", "description": "Unit tests for the next() method of the FilterIterator class.", "class_members": {"variables": [{"name": "iterator", "type": "FilterIterator<String>"}, {"name": "array", "type": "String[]"}], "methods": [{"name": "setUp", "signature": "void setUp()"}, {"name": "initIterator", "signature": "void initIterator()"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNextWithElements", "primary_tested": ["FilterIterator.next()"], "external_dependencies": {"modules": ["FilterIterator", "String"], "class_members": [{"name": "iterator", "type": "variable"}, {"name": "array", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next() method of FilterIterator when there are elements to iterate over."}, {"name": "testNextWithNoElements", "primary_tested": ["FilterIterator.next()"], "external_dependencies": {"modules": ["FilterIterator", "Collections", "NoSuchElementException"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the next() method of FilterIterator when there are no elements to iterate over."}, {"name": "testNextWithPredicate", "primary_tested": ["FilterIterator.next()"], "external_dependencies": {"modules": ["FilterIterator", "NotNullPredicate", "String"], "class_members": [{"name": "iterator", "type": "variable"}, {"name": "array", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the next() method of FilterIterator with a predicate that filters out null elements."}, {"name": "testNextWithNoMatchingPredicate", "primary_tested": ["FilterIterator.next()"], "external_dependencies": {"modules": ["FilterIterator", "NotNullPredicate", "NoSuchElementException", "String"], "class_members": [{"name": "iterator", "type": "variable"}, {"name": "array", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the next() method of FilterIterator with a predicate that does not match any elements, expecting a NoSuchElementException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_removeTest.java", "testclass_name": "SingletonListIterator_removeTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SingletonListIterator_removeTest", "description": "Unit tests for the remove functionality of the SingletonListIterator class.", "class_members": {"variables": [{"name": "testValue", "type": "static final Object"}, {"name": "iterator", "type": "SingletonListIterator<Object>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveSuccess", "primary_tested": ["SingletonListIterator.remove()"], "associated_methods": ["SingletonListIterator.hasNext()", "SingletonListIterator.next()", "SingletonListIterator.hasPrevious()"], "external_dependencies": {"modules": ["SingletonListIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful removal of an element from the SingletonListIterator."}, {"name": "testRemoveWithoutNextCall", "primary_tested": ["SingletonListIterator.remove()"], "external_dependencies": {"modules": ["SingletonListIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that an IllegalStateException is thrown when trying to remove an element without calling next()."}, {"name": "testRemoveTwice", "primary_tested": ["SingletonListIterator.remove()"], "associated_methods": ["SingletonListIterator.next()"], "external_dependencies": {"modules": ["SingletonListIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that an IllegalStateException is thrown when trying to remove an element twice."}, {"name": "testRemoveAfterReset", "primary_tested": ["SingletonListIterator.remove()"], "associated_methods": ["SingletonListIterator.next()", "SingletonListIterator.reset()"], "external_dependencies": {"modules": ["SingletonListIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that an IllegalStateException is thrown when trying to remove an element after resetting the iterator."}, {"name": "testRemoveAfterSet", "primary_tested": ["SingletonListIterator.remove()"], "associated_methods": ["SingletonListIterator.next()", "SingletonListIterator.set(Object)", "SingletonListIterator.hasNext()", "SingletonListIterator.hasPrevious()"], "external_dependencies": {"modules": ["SingletonListIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of an element after setting a new value in the SingletonListIterator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_resetTest.java", "testclass_name": "SingletonListIterator_resetTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SingletonListIterator_resetTest", "description": "Unit tests for the reset functionality of the SingletonListIterator class.", "class_members": {"variables": [{"name": "testValue", "type": "static final Object"}, {"name": "iterator", "type": "SingletonListIterator<Object>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testResetInitialState", "primary_tested": ["SingletonListIterator.reset()"], "associated_methods": ["SingletonListIterator.next()", "SingletonListIterator.previous()", "SingletonListIterator.hasNext()", "SingletonListIterator.hasPrevious()", "SingletonListIterator.nextIndex()", "SingletonListIterator.previousIndex()"], "external_dependencies": {"modules": ["SingletonListIterator", "Object"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the initial state of the iterator after reset."}, {"name": "testResetAfterRemove", "primary_tested": ["SingletonListIterator.reset()"], "associated_methods": ["SingletonListIterator.next()", "SingletonListIterator.remove()", "SingletonListIterator.hasNext()", "SingletonListIterator.hasPrevious()", "SingletonListIterator.nextIndex()", "SingletonListIterator.previousIndex()"], "external_dependencies": {"modules": ["SingletonListIterator", "Object"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the state of the iterator after reset following a remove operation."}, {"name": "testResetAndNext", "primary_tested": ["SingletonListIterator.reset()"], "associated_methods": ["SingletonListIterator.next()"], "external_dependencies": {"modules": ["SingletonListIterator", "Object"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next value after reset."}, {"name": "testResetAndHasNext", "primary_tested": ["SingletonListIterator.reset()"], "associated_methods": ["SingletonListIterator.hasNext()"], "external_dependencies": {"modules": ["SingletonListIterator", "Object"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method after reset."}, {"name": "testResetAndNextThrowsException", "primary_tested": ["SingletonListIterator.reset()"], "associated_methods": ["SingletonListIterator.next()", "SingletonListIterator.remove()"], "external_dependencies": {"modules": ["SingletonListIterator", "Object", "NoSuchElementException"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that NoSuchElementException is thrown after reset and next call following a remove operation."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_hasNextTest.java", "testclass_name": "PeekingIterator_hasNextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "PeekingIterator_hasNextTest", "description": "Unit tests for the hasNext method of the PeekingIterator class.", "class_members": {"variables": [{"name": "testList", "type": "List<String>"}, {"name": "testArray", "type": "static final String[]"}], "methods": [{"name": "setUp", "signature": "void setUp() throws Exception"}, {"name": "makeObject", "signature": "PeekingIterator<String> makeObject()"}, {"name": "validate", "signature": "void validate(Iterator<String> iter, String... items)"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testHasNextWithElements", "primary_tested": ["PeekingIterator.hasNext()"], "associated_methods": ["PeekingIterator.makeObject()", "PeekingIterator.validate(Iterator<String>,String...)"], "external_dependencies": {"modules": ["PeekingIterator", "ArrayList", "Arrays", "Iterator"], "class_members": [{"name": "testList", "type": "variable"}, {"name": "testArray", "type": "variable"}, {"name": "makeObject", "type": "method"}, {"name": "validate", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method when the iterator has elements."}, {"name": "testHasNextWithNoElements", "primary_tested": ["PeekingIterator.hasNext()"], "external_dependencies": {"modules": ["PeekingIterator", "ArrayList", "Iterator"]}, "category": "unit", "description": "Tests the hasNext method when the iterator has no elements."}, {"name": "testHasNextAfterPeek", "primary_tested": ["PeekingIterator.hasNext()"], "associated_methods": ["PeekingIterator.makeObject()", "PeekingIterator.peek()", "PeekingIterator.validate(Iterator<String>,String...)"], "external_dependencies": {"modules": ["PeekingIterator", "ArrayList", "Arrays", "Iterator"], "class_members": [{"name": "testList", "type": "variable"}, {"name": "testArray", "type": "variable"}, {"name": "makeObject", "type": "method"}, {"name": "validate", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method after a peek operation."}, {"name": "testHasNextAfterElement", "primary_tested": ["PeekingIterator.hasNext()"], "associated_methods": ["PeekingIterator.makeObject()", "PeekingIterator.element()", "PeekingIterator.validate(Iterator<String>,String...)"], "external_dependencies": {"modules": ["PeekingIterator", "ArrayList", "Arrays", "Iterator"], "class_members": [{"name": "testList", "type": "variable"}, {"name": "testArray", "type": "variable"}, {"name": "makeObject", "type": "method"}, {"name": "validate", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method after accessing the element."}, {"name": "testHasNextAfterNext", "primary_tested": ["PeekingIterator.hasNext()"], "associated_methods": ["PeekingIterator.makeObject()", "PeekingIterator.next()", "PeekingIterator.validate(Iterator<String>,String...)"], "external_dependencies": {"modules": ["PeekingIterator", "ArrayList", "Arrays", "Iterator"], "class_members": [{"name": "testList", "type": "variable"}, {"name": "testArray", "type": "variable"}, {"name": "makeObject", "type": "method"}, {"name": "validate", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method after a next operation."}, {"name": "testHasNextAfterExhaustion", "primary_tested": ["PeekingIterator.hasNext()"], "associated_methods": ["PeekingIterator.makeObject()", "PeekingIterator.validate(Iterator<String>,String...)"], "external_dependencies": {"modules": ["PeekingIterator", "ArrayList", "Arrays", "Iterator"], "class_members": [{"name": "testList", "type": "variable"}, {"name": "testArray", "type": "variable"}, {"name": "makeObject", "type": "method"}, {"name": "validate", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method after the iterator is exhausted."}]}]