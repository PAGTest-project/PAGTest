[{"file_path": "src/test/java/org/apache/commons/collections4/TrieUtilsTest.java", "testclass_name": "TrieUtilsTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertInstanceOf;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import org.apache.commons.collections4.trie.PatriciaTrie;", "import org.apache.commons.collections4.trie.UnmodifiableTrie;", "import org.junit.jupiter.api.Test;"], "name": "TrieUtilsTest", "description": "Unit tests for the TrieUtils class, specifically focusing on the unmodifiableTrie method.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testUnmodifiableTrie", "primary_tested": ["TrieUtils.unmodifiableTrie(Trie)"], "external_dependencies": {"modules": ["PatriciaTrie", "UnmodifiableTrie", "TrieUtils"]}, "category": "unit", "description": "Tests the functionality of the unmodifiableTrie method in TrieUtils."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/SynchronizedQueueTest.java", "testclass_name": "SynchronizedQueueTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import java.util.LinkedList;", "import java.util.Queue;", "import org.apache.commons.collections4.BulkTest;", "import org.junit.jupiter.api.Disabled;", "import org.junit.jupiter.api.Test;"], "name": "SynchronizedQueueTest", "description": "Tests for the SynchronizedQueue class, focusing on serialization and external form writing.", "class_members": {"methods": [{"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "makeObject", "signature": "Queue<T> makeObject()"}]}, "fixtures": [], "test_cases": [{"name": "testCreate", "primary_tested": ["SynchronizedQueue.synchronizedQueue(Queue<T>)"], "associated_methods": ["AbstractQueueTest.makeFullCollection()"], "external_dependencies": {"modules": ["SynchronizedQueue", "LinkedList", "BulkTest", "java.io.Serializable"], "class_members": [{"name": "makeObject", "type": "method"}], "project_specific_resources": ["BulkTest.TEST_DATA_PATH"]}, "category": "unit", "fixtures_used": [], "description": "Tests the creation and serialization of an empty and a full SynchronizedQueue."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/UnmodifiableBoundedCollectionTest.java", "testclass_name": "UnmodifiableBoundedCollectionTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import org.apache.commons.collections4.BoundedCollection;", "import org.apache.commons.collections4.Unmodifiable;", "import org.apache.commons.collections4.list.FixedSizeList;", "import org.junit.jupiter.api.Test;"], "name": "UnmodifiableBoundedCollectionTest", "description": "Tests for the UnmodifiableBoundedCollection class, focusing on its unmodifiable and bounded properties.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testDecorateFactory", "primary_tested": ["UnmodifiableBoundedCollection.unmodifiableBoundedCollection(BoundedCollection)"], "associated_methods": [], "external_dependencies": {"modules": ["BoundedCollection", "UnmodifiableBoundedCollection"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the factory method for decorating a BoundedCollection with UnmodifiableBoundedCollection, ensuring it returns the same instance and handles null input correctly."}, {"name": "testUnmodifiable", "primary_tested": ["UnmodifiableBoundedCollection.makeObject()", "UnmodifiableBoundedCollection.makeFullCollection()"], "associated_methods": [], "external_dependencies": {"modules": ["Unmodifiable", "UnmodifiableBoundedCollection"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the objects created by makeObject and makeFullCollection are instances of Unmodifiable."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/HashedMapTest.java", "testclass_name": "HashedMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import org.junit.jupiter.api.Test;"], "name": "HashedMapTest", "description": "Unit tests for the HashedMap class in the Apache Commons Collections library.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testClone", "primary_tested": ["HashedMap.clone()"], "external_dependencies": {"modules": ["HashedMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the cloning functionality of the HashedMap."}, {"name": "testInitialCapacityZero", "primary_tested": ["HashedMap.HashedMap(int)"], "external_dependencies": {"modules": ["HashedMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of HashedMap when initialized with an initial capacity of zero."}, {"name": "testInternalState", "primary_tested": ["HashedMap.HashedMap(int,float)", "HashedMap.putAll(Map)"], "associated_methods": ["HashedMap.put(K,V)"], "external_dependencies": {"modules": ["HashedMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the internal state and capacity management of the HashedMap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/StaticBucketMapTest.java", "testclass_name": "StaticBucketMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.junit.jupiter.api.Test;"], "name": "StaticBucketMapTest", "description": "Unit tests for StaticBucketMap class, focusing on key and value checks, including null handling.", "class_members": {"methods": [{"name": "ignoredTests", "signature": "String[] ignoredTests()"}, {"name": "isFailFastExpected", "signature": "boolean isFailFastExpected()"}, {"name": "makeObject", "signature": "StaticBucketMap<K, V> makeObject()"}]}, "test_cases": [{"name": "test_containsKey_nullMatchesIncorrectly", "primary_tested": ["StaticBucketMap.containsKey(Object)"], "external_dependencies": {"modules": ["StaticBucketMap"]}, "category": "unit", "description": "Tests the containsKey method with null key, ensuring it matches correctly and does not incorrectly match other keys in the same bucket."}, {"name": "test_containsValue_nullMatchesIncorrectly", "primary_tested": ["StaticBucketMap.containsValue(Object)"], "external_dependencies": {"modules": ["StaticBucketMap"]}, "category": "unit", "description": "Tests the containsValue method with null value, ensuring it matches correctly and does not incorrectly match other values in the same bucket."}, {"name": "test_get_nullMatchesIncorrectly", "primary_tested": ["StaticBucketMap.get(Object)"], "external_dependencies": {"modules": ["StaticBucketMap"]}, "category": "unit", "description": "Tests the get method with null key, ensuring it retrieves the correct value and does not incorrectly retrieve values for other keys in the same bucket."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/ArrayStackTest.java", "testclass_name": "ArrayStackTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.EmptyStackException;", "import org.junit.jupiter.api.Test;"], "name": "ArrayStackTest", "description": "Unit tests for the ArrayStack class, focusing on its stack operations and deprecated methods.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testNewStack", "primary_tested": ["ArrayStack.empty()", "ArrayStack.size()", "ArrayStack.peek()", "ArrayStack.pop()"], "external_dependencies": {"modules": ["ArrayStack", "EmptyStackException"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "description": "Tests the initialization and basic properties of a new ArrayStack."}, {"name": "testPushPeekPop", "primary_tested": ["ArrayStack.push(E)", "ArrayStack.peek()", "ArrayStack.pop()"], "external_dependencies": {"modules": ["ArrayStack"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "description": "Tests the push, peek, and pop operations of the ArrayStack."}, {"name": "testSearch", "primary_tested": ["ArrayStack.push(E)", "ArrayStack.search(Object)"], "external_dependencies": {"modules": ["ArrayStack"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "description": "Tests the search functionality of the ArrayStack."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/TreeBagTest.java", "testclass_name": "TreeBagTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import org.apache.commons.collections4.Bag;", "import org.apache.commons.collections4.SortedBag;", "import org.junit.jupiter.api.Test;"], "name": "TreeBagTest", "description": "Unit tests for TreeBag class in Apache Commons Collections.", "class_members": {"methods": [{"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "makeObject", "signature": "SortedBag<T> makeObject()"}, {"name": "setupBag", "signature": "SortedBag<T> setupBag()"}]}, "test_cases": [{"name": "testCollections265", "primary_tested": ["TreeBag.add(Object)"], "external_dependencies": {"modules": ["TreeBag", "IllegalArgumentException"]}, "category": "unit", "description": "Tests that adding an invalid object to a TreeBag throws an IllegalArgumentException."}, {"name": "testCollections555", "primary_tested": ["TreeBag.add(Object)"], "external_dependencies": {"modules": ["TreeBag", "NullPointerException", "String"]}, "category": "unit", "description": "Tests that adding null to a TreeBag throws a NullPointerException, and ensures that adding null to a non-empty TreeBag with a comparator also throws a NullPointerException."}, {"name": "testOrdering", "primary_tested": ["TreeBag.toArray()", "SortedBag.first()", "SortedBag.last()"], "associated_methods": ["TreeBag.setupBag()"], "external_dependencies": {"modules": ["TreeBag", "SortedBag"], "class_members": [{"name": "setupBag", "type": "method"}]}, "category": "unit", "description": "Tests the ordering of elements in a TreeBag, ensuring that elements are returned in the correct order and that the first and last elements are correctly identified."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/TransformedBagTest.java", "testclass_name": "TransformedBagTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.apache.commons.collections4.Bag;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.collection.TransformedCollectionTest;", "import org.junit.jupiter.api.Test;"], "name": "TransformedBagTest", "description": "Tests for TransformedBag functionality.", "class_members": {"variables": [], "methods": [{"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "getIterationBehaviour", "signature": "int getIterationBehaviour()"}, {"name": "makeObject", "signature": "Bag<T> makeObject()"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testTransformedBag", "primary_tested": ["TransformedBag.transformingBag(Bag<T>,Transformer<T,T>)"], "associated_methods": ["Bag.isEmpty()", "Bag.add(T)", "Bag.size()", "Bag.contains(Object)", "Bag.remove(Object)"], "external_dependencies": {"modules": ["TransformedBag", "HashBag", "Transformer", "TransformedCollectionTest", "Integer"], "class_members": []}, "category": "unit", "description": "Tests the transforming functionality of TransformedBag, ensuring elements are transformed and added correctly."}, {"name": "testTransformedBag_decorateTransform", "primary_tested": ["TransformedBag.transformedBag(Bag<T>,Transformer<T,T>)"], "associated_methods": ["Bag.add(T)", "Bag.size()", "Bag.contains(Object)", "Bag.remove(Object)"], "external_dependencies": {"modules": ["TransformedBag", "HashBag", "Transformer", "TransformedCollectionTest", "Integer"], "class_members": []}, "category": "unit", "description": "Tests the decorating and transforming functionality of TransformedBag, ensuring elements are transformed and added correctly."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/CollectionBagTest.java", "testclass_name": "CollectionBagTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.io.IOException;", "import java.io.Serializable;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import org.apache.commons.collections4.Bag;", "import org.apache.commons.collections4.collection.AbstractCollectionTest;", "import org.junit.jupiter.api.Test;"], "name": "CollectionBagTest", "description": "Tests for the CollectionBag class, focusing on serialization compatibility.", "class_members": {"methods": [{"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "getIterationBehaviour", "signature": "int getIterationBehaviour()"}, {"name": "makeConfirmedCollection", "signature": "Collection<T> makeConfirmedCollection()"}, {"name": "makeConfirmedFullCollection", "signature": "Collection<T> makeConfirmedFullCollection()"}, {"name": "makeObject", "signature": "Bag<T> makeObject()"}]}, "test_cases": [{"name": "testEmptyBagCompatibility", "primary_tested": ["CollectionBag.makeObject()"], "associated_methods": ["CollectionBag.isEmpty()", "CollectionBag.equals(Object)"], "external_dependencies": {"modules": ["Bag", "Serializable", "IOException", "ClassNotFoundException"], "class_members": [{"name": "makeObject", "type": "method"}], "project_specific_resources": ["CollectionBag.readExternalFormFromDisk(String)"]}, "category": "unit", "description": "Tests the serialization compatibility of an empty CollectionBag."}, {"name": "testFullBagCompatibility", "primary_tested": ["CollectionBag.makeFullCollection()"], "associated_methods": ["CollectionBag.size()", "CollectionBag.equals(Object)"], "external_dependencies": {"modules": ["Bag", "Serializable", "IOException", "ClassNotFoundException"], "class_members": [{"name": "makeFullCollection", "type": "method"}], "project_specific_resources": ["CollectionBag.readExternalFormFromDisk(String)"]}, "category": "unit", "description": "Tests the serialization compatibility of a full CollectionBag."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/ArrayUtilsTest.java", "testclass_name": "ArrayUtilsTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.junit.jupiter.api.Test;"], "name": "ArrayUtilsTest", "description": "Unit tests for the ArrayUtils class, focusing on methods like contains and indexOf.", "class_members": {"variables": [{"name": "array", "type": "Object[]"}], "nested_classes": [{"name": "LANG1261ParentObject", "description": "Internal class used in testContains_LANG_1261"}, {"name": "LANG1261ChildObject", "description": "Internal class used in testContains_LANG_1261"}]}, "test_cases": [{"name": "testContains", "primary_tested": ["ArrayUtils.contains(Object[],Object)"], "external_dependencies": {"modules": ["ArrayUtils"], "class_members": [{"name": "array", "type": "variable"}]}, "category": "unit", "description": "Tests the contains functionality of the ArrayUtils class."}, {"name": "testContains_LANG_1261", "primary_tested": ["ArrayUtils.contains(Object[],Object)"], "associated_methods": ["LANG1261ParentObject.equals(Object)"], "external_dependencies": {"modules": ["ArrayUtils"], "class_members": [{"name": "array", "type": "variable"}]}, "category": "unit", "description": "Tests the contains functionality of the ArrayUtils class with custom objects overriding equals."}, {"name": "testIndexOf", "primary_tested": ["ArrayUtils.indexOf(Object[],Object)"], "external_dependencies": {"modules": ["ArrayUtils"], "class_members": [{"name": "array", "type": "variable"}]}, "category": "unit", "description": "Tests the indexOf functionality of the ArrayUtils class."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/TransformedSortedBagTest.java", "testclass_name": "TransformedSortedBagTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.apache.commons.collections4.SortedBag;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.collection.TransformedCollectionTest;", "import org.junit.jupiter.api.Test;"], "name": "TransformedSortedBagTest", "description": "Tests for TransformedSortedBag functionality.", "class_members": {"methods": [{"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "makeObject", "signature": "SortedBag<T> makeObject()"}]}, "fixtures": [], "test_cases": [{"name": "testTransformedBag", "primary_tested": ["TransformedSortedBag.transformingSortedBag(SortedBag<T>,Transformer<T,T>)"], "associated_methods": ["SortedBag.add(T)", "SortedBag.size()", "SortedBag.contains(Object)", "SortedBag.remove(Object)"], "external_dependencies": {"modules": ["SortedBag", "Transformer", "TransformedCollectionTest", "TreeBag", "Integer"], "class_members": [], "project_specific_resources": ["TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER"]}, "category": "unit", "fixtures_used": [], "description": "Tests the transforming functionality of TransformedSortedBag by adding elements and checking their transformed state."}, {"name": "testTransformedBag_decorateTransform", "primary_tested": ["TransformedSortedBag.transformedSortedBag(SortedBag<T>,Transformer<T,T>)"], "associated_methods": ["TreeBag.add(T)", "SortedBag.size()", "SortedBag.contains(Object)", "SortedBag.remove(Object)"], "external_dependencies": {"modules": ["SortedBag", "Transformer", "TransformedCollectionTest", "TreeBag", "Integer"], "class_members": [], "project_specific_resources": ["TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER"]}, "category": "unit", "fixtures_used": [], "description": "Tests the decorating and transforming functionality of TransformedSortedBag by adding elements to an original bag and checking their transformed state."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/PredicatedSortedBagTest.java", "testclass_name": "PredicatedSortedBagTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.Comparator;", "import org.apache.commons.collections4.Predicate;", "import org.apache.commons.collections4.SortedBag;", "import org.apache.commons.collections4.functors.TruePredicate;", "import org.junit.jupiter.api.Test;"], "name": "PredicatedSortedBagTest", "description": "Unit tests for PredicatedSortedBag functionality.", "class_members": {"variables": [{"name": "nullBag", "type": "SortedBag<T>"}, {"name": "truePredicate", "type": "Predicate<T>"}], "methods": [{"name": "decorateBag", "signature": "SortedBag<T> decorateBag(SortedBag<T> bag, Predicate<T> predicate)"}, {"name": "makeTestBag", "signature": "SortedBag<T> makeTestBag()"}, {"name": "stringPredicate", "signature": "Predicate<T> stringPredicate()"}]}, "fixtures": [], "test_cases": [{"name": "testDecorate", "primary_tested": ["PredicatedSortedBag.predicatedSortedBag(SortedBag<T>,Predicate<T>)"], "associated_methods": ["PredicatedSortedBag.decorated()"], "external_dependencies": {"modules": ["TreeBag", "PredicatedSortedBag", "NullPointerException"], "class_members": [{"name": "nullBag", "type": "variable"}, {"name": "stringPredicate", "type": "method"}]}, "category": "unit", "description": "Tests the decoration functionality of PredicatedSortedBag and checks for expected exceptions when decorating with null parameters."}, {"name": "testSortOrder", "primary_tested": ["SortedBag.add(T)", "SortedBag.first()", "SortedBag.last()", "SortedBag.comparator()"], "associated_methods": [], "external_dependencies": {"modules": ["TreeBag", "PredicatedSortedBag", "Comparator"], "class_members": [{"name": "stringPredicate", "type": "method"}]}, "category": "unit", "description": "Tests the sort order and comparator functionality of a decorated SortedBag."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/TransformedQueueTest.java", "testclass_name": "TransformedQueueTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.LinkedList;", "import java.util.Queue;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.collection.AbstractCollectionTest;", "import org.apache.commons.collections4.collection.TransformedCollectionTest;", "import org.junit.jupiter.api.Test;"], "name": "TransformedQueueTest", "description": "Tests for TransformedQueue functionality, including transformation of elements and queue operations.", "class_members": {"variables": [], "methods": [{"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "makeConfirmedCollection", "signature": "Queue<E> makeConfirmedCollection()"}, {"name": "makeConfirmedFullCollection", "signature": "Queue<E> makeConfirmedFullCollection()"}, {"name": "makeFullCollection", "signature": "Queue<E> makeFullCollection()"}, {"name": "makeObject", "signature": "Queue<E> makeObject()"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testTransformedQueue", "primary_tested": ["TransformedQueue.transformingQueue(Queue<E>,Transformer<E,E>)"], "associated_methods": ["Queue.add(E)", "Queue.size()", "Queue.contains(Object)", "Queue.remove(Object)"], "external_dependencies": {"modules": ["TransformedQueue", "TransformedCollectionTest", "Transformer", "LinkedList", "Arrays", "Integer"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformation of elements in a queue and verifies the queue operations."}, {"name": "testTransformedQueue_decorateTransform", "primary_tested": ["TransformedQueue.transformedQueue(Queue<E>,Transformer<E,E>)"], "associated_methods": ["Queue.add(E)", "Queue.size()", "Queue.contains(Object)", "Queue.remove(Object)"], "external_dependencies": {"modules": ["TransformedQueue", "TransformedCollectionTest", "Transformer", "LinkedList", "Collections", "Integer"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformation of elements in a queue using the decorateTransform method and verifies the queue operations."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/UnmodifiableBagTest.java", "testclass_name": "UnmodifiableBagTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Arrays;", "import org.apache.commons.collections4.Bag;", "import org.apache.commons.collections4.Unmodifiable;", "import org.apache.commons.collections4.collection.AbstractCollectionTest;", "import org.junit.jupiter.api.Test;"], "name": "UnmodifiableBagTest", "description": "Tests for the UnmodifiableBag class, focusing on its unmodifiable behavior and factory decoration.", "class_members": {"methods": [{"name": "getCollection", "signature": "Bag<E> getCollection()"}, {"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "getIterationBehaviour", "signature": "int getIterationBehaviour()"}, {"name": "isAddSupported", "signature": "boolean isAddSupported()"}, {"name": "isNullSupported", "signature": "boolean isNullSupported()"}, {"name": "isRemoveSupported", "signature": "boolean isRemoveSupported()"}, {"name": "makeFullCollection", "signature": "Bag<E> makeFullCollection()"}, {"name": "makeObject", "signature": "Bag<E> makeObject()"}]}, "test_cases": [{"name": "testDecorateFactory", "primary_tested": ["UnmodifiableBag.unmodifiableBag(Bag)"], "external_dependencies": {"modules": ["UnmodifiableBag", "Bag", "HashBag", "Arrays"], "class_members": [{"name": "makeFullCollection", "type": "method"}]}, "category": "unit", "description": "Tests the factory decoration of UnmodifiableBag, ensuring it returns the same instance and handles null input correctly."}, {"name": "testUnmodifiable", "primary_tested": ["UnmodifiableBag.makeObject()", "UnmodifiableBag.makeFullCollection()"], "external_dependencies": {"modules": ["UnmodifiableBag", "Bag", "HashBag", "Unmodifiable"], "class_members": [{"name": "makeObject", "type": "method"}, {"name": "makeFullCollection", "type": "method"}]}, "category": "unit", "description": "Tests the unmodifiable behavior of the UnmodifiableBag, ensuring it implements the Unmodifiable interface."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/UnmodifiableSortedBagTest.java", "testclass_name": "UnmodifiableSortedBagTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Arrays;", "import org.apache.commons.collections4.SortedBag;", "import org.apache.commons.collections4.Unmodifiable;", "import org.apache.commons.collections4.collection.AbstractCollectionTest;", "import org.junit.jupiter.api.Test;"], "name": "UnmodifiableSortedBagTest", "description": "Tests for the UnmodifiableSortedBag class, focusing on its unmodifiable behavior and factory decoration.", "class_members": {"methods": [{"name": "getCollection", "signature": "SortedBag<E> getCollection()"}, {"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "isAddSupported", "signature": "boolean isAddSupported()"}, {"name": "isNullSupported", "signature": "boolean isNullSupported()"}, {"name": "isRemoveSupported", "signature": "boolean isRemoveSupported()"}, {"name": "makeFullCollection", "signature": "SortedBag<E> makeFullCollection()"}, {"name": "makeObject", "signature": "SortedBag<E> makeObject()"}]}, "test_cases": [{"name": "testDecorateFactory", "primary_tested": ["UnmodifiableSortedBag.unmodifiableSortedBag(SortedBag)"], "associated_methods": ["UnmodifiableSortedBagTest.makeFullCollection()"], "external_dependencies": {"modules": ["UnmodifiableSortedBag", "SortedBag", "NullPointerException"], "class_members": [{"name": "makeFullCollection", "type": "method"}]}, "category": "unit", "description": "Tests the factory decoration of UnmodifiableSortedBag and ensures it throws NullPointerException for null input."}, {"name": "testUnmodifiable", "primary_tested": ["UnmodifiableSortedBag.unmodifiableSortedBag(SortedBag)"], "associated_methods": ["UnmodifiableSortedBagTest.makeObject()", "UnmodifiableSortedBagTest.makeFullCollection()"], "external_dependencies": {"modules": ["UnmodifiableSortedBag", "SortedBag", "Unmodifiable"], "class_members": [{"name": "makeObject", "type": "method"}, {"name": "makeFullCollection", "type": "method"}]}, "category": "unit", "description": "Tests that the created objects are instances of Unmodifiable."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/TransformedCollectionTest.java", "testclass_name": "TransformedCollectionTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.Collections;", "import java.util.List;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.TransformerUtils;", "import org.junit.jupiter.api.Test;"], "name": "TransformedCollectionTest", "description": "Unit tests for TransformedCollection functionality, focusing on transformations like String to Integer and case conversion.", "class_members": {"variables": [{"name": "NOOP_TRANSFORMER", "type": "static final Transformer<Object, Object>"}, {"name": "STRING_TO_INTEGER_TRANSFORMER", "type": "static final Transformer<Object, Object>"}, {"name": "TO_LOWER_CASE_TRANSFORMER", "type": "static final Transformer<Object, Object>"}], "methods": [], "nested_classes": [{"name": "StringToInteger", "description": "Transformer class converting String to Integer"}, {"name": "ToLowerCase", "description": "Transformer class converting String to lower case"}]}, "fixtures": [], "test_cases": [{"name": "testTransformedCollection", "primary_tested": ["TransformedCollection.transformingCollection(Collection,Transformer)"], "associated_methods": ["TransformedCollection.add(Object)", "TransformedCollection.contains(Object)", "TransformedCollection.remove(Object)"], "external_dependencies": {"modules": ["TransformedCollection", "Transformer", "ArrayList", "Arrays", "Integer"], "class_members": [{"name": "STRING_TO_INTEGER_TRANSFORMER", "type": "variable"}]}, "category": "unit", "description": "Tests the transformation of a collection from String to Integer."}, {"name": "testTransformedCollection_decorateTransform", "primary_tested": ["TransformedCollection.transformedCollection(Collection,Transformer)"], "associated_methods": ["TransformedCollection.contains(Object)", "TransformedCollection.remove(Object)"], "external_dependencies": {"modules": ["TransformedCollection", "Transformer", "ArrayList", "Collections", "Integer"], "class_members": [{"name": "STRING_TO_INTEGER_TRANSFORMER", "type": "variable"}]}, "category": "unit", "description": "Tests the transformation of an existing collection from String to Integer using decoration."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/UnmodifiableQueueTest.java", "testclass_name": "UnmodifiableQueueTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.LinkedList;", "import java.util.Queue;", "import org.apache.commons.collections4.Unmodifiable;", "import org.apache.commons.collections4.collection.AbstractCollectionTest;", "import org.junit.jupiter.api.Test;"], "name": "UnmodifiableQueueTest", "description": "Tests for the UnmodifiableQueue class, ensuring it behaves as an unmodifiable queue.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testDecorateFactory", "primary_tested": ["UnmodifiableQueue.unmodifiableQueue(Queue)"], "external_dependencies": {"modules": ["UnmodifiableQueue", "Queue"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the factory method for creating an unmodifiable queue and ensures it throws a NullPointerException when given null."}, {"name": "testOffer", "primary_tested": ["Queue.offer(E)"], "external_dependencies": {"modules": ["Queue"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the offer method throws an UnsupportedOperationException for an unmodifiable queue."}, {"name": "testPoll", "primary_tested": ["Queue.poll()"], "external_dependencies": {"modules": ["Queue"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the poll method throws an UnsupportedOperationException for an unmodifiable queue."}, {"name": "testQueueRemove", "primary_tested": ["Queue.remove()"], "external_dependencies": {"modules": ["Queue"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the remove method throws an UnsupportedOperationException for an unmodifiable queue."}, {"name": "testUnmodifiable", "primary_tested": ["UnmodifiableQueue.makeObject()", "UnmodifiableQueue.makeFullCollection()"], "external_dependencies": {"modules": ["UnmodifiableQueue", "Unmodifiable"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the objects created by makeObject and makeFullCollection are instances of Unmodifiable."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/CollectionSortedBagTest.java", "testclass_name": "CollectionSortedBagTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import java.io.IOException;", "import java.io.Serializable;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import org.apache.commons.collections4.Bag;", "import org.apache.commons.collections4.SortedBag;", "import org.apache.commons.collections4.collection.AbstractCollectionTest;", "import org.junit.jupiter.api.Test;"], "name": "CollectionSortedBagTest", "description": "Unit tests for CollectionSortedBag, focusing on serialization compatibility.", "class_members": {"methods": [{"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "getFullNonNullElements", "signature": "T[] getFullNonNullElements()"}, {"name": "getOtherNonNullElements", "signature": "T[] getOtherNonNullElements()"}, {"name": "isNullSupported", "signature": "boolean isNullSupported()"}, {"name": "makeConfirmedCollection", "signature": "Collection<T> makeConfirmedCollection()"}, {"name": "makeConfirmedFullCollection", "signature": "Collection<T> makeConfirmedFullCollection()"}, {"name": "makeObject", "signature": "Bag<T> makeObject()"}]}, "test_cases": [{"name": "testEmptyBagCompatibility", "primary_tested": ["CollectionSortedBag.makeObject()"], "associated_methods": ["CollectionSortedBag.readExternalFormFromDisk(String)"], "external_dependencies": {"modules": ["Bag", "Serializable", "IOException", "ClassNotFoundException"], "class_members": [{"name": "makeObject", "type": "method"}], "project_specific_resources": ["CollectionSortedBag.getCanonicalEmptyCollectionName(Bag)"]}, "category": "unit", "description": "Tests the serialization compatibility of an empty CollectionSortedBag."}, {"name": "testFullBagCompatibility", "primary_tested": ["CollectionSortedBag.makeFullCollection()"], "associated_methods": ["CollectionSortedBag.readExternalFormFromDisk(String)"], "external_dependencies": {"modules": ["SortedBag", "Serializable", "IOException", "ClassNotFoundException"], "class_members": [{"name": "makeFullCollection", "type": "method"}], "project_specific_resources": ["CollectionSortedBag.getCanonicalFullCollectionName(SortedBag)"]}, "category": "unit", "description": "Tests the serialization compatibility of a full CollectionSortedBag."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/UnmodifiableCollectionTest.java", "testclass_name": "UnmodifiableCollectionTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.List;", "import org.apache.commons.collections4.Unmodifiable;", "import org.junit.jupiter.api.Test;"], "name": "UnmodifiableCollectionTest", "description": "Tests for the UnmodifiableCollection class, focusing on its unmodifiable nature and factory decoration.", "class_members": {"methods": [{"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "isAddSupported", "signature": "boolean isAddSupported()"}, {"name": "isRemoveSupported", "signature": "boolean isRemoveSupported()"}, {"name": "makeConfirmedCollection", "signature": "Collection<E> makeConfirmedCollection()"}, {"name": "makeConfirmedFullCollection", "signature": "Collection<E> makeConfirmedFullCollection()"}, {"name": "makeFullCollection", "signature": "Collection<E> makeFullCollection()"}, {"name": "makeObject", "signature": "Collection<E> makeObject()"}]}, "test_cases": [{"name": "testDecorateFactory", "primary_tested": ["UnmodifiableCollection.unmodifiableCollection(Collection<E>)"], "associated_methods": ["UnmodifiableCollection.makeFullCollection()"], "external_dependencies": {"modules": ["UnmodifiableCollection", "Collection"], "class_members": [{"name": "makeFullCollection", "type": "method"}]}, "category": "unit", "description": "Tests the factory decoration of UnmodifiableCollection, ensuring it returns the same instance and handles null input correctly."}, {"name": "testUnmodifiable", "primary_tested": ["UnmodifiableCollection.makeObject()", "UnmodifiableCollection.makeFullCollection()"], "associated_methods": ["UnmodifiableCollection.makeObject()", "UnmodifiableCollection.makeFullCollection()"], "external_dependencies": {"modules": ["UnmodifiableCollection", "Unmodifiable"], "class_members": [{"name": "makeObject", "type": "method"}, {"name": "makeFullCollection", "type": "method"}]}, "category": "unit", "description": "Tests the unmodifiable nature of the collections created by makeObject and makeFullCollection methods."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/PredicatedBagTest.java", "testclass_name": "PredicatedBagTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Set;", "import org.apache.commons.collections4.Bag;", "import org.apache.commons.collections4.Predicate;", "import org.apache.commons.collections4.functors.TruePredicate;", "import org.junit.jupiter.api.Test;"], "name": "PredicatedBagTest", "description": "Unit tests for PredicatedBag functionality, focusing on illegal and legal additions, and decorations.", "class_members": {"variables": [{"name": "truePredicate", "type": "Predicate<T>"}], "methods": [{"name": "decorateBag", "signature": "protected Bag<T> decorateBag(final HashBag<T> bag, final Predicate<T> predicate)"}, {"name": "makeTestBag", "signature": "protected Bag<T> makeTestBag()"}, {"name": "stringPredicate", "signature": "protected Predicate<T> stringPredicate()"}]}, "fixtures": [], "test_cases": [{"name": "testIllegalAdd", "primary_tested": ["Bag.add(T)"], "external_dependencies": {"modules": ["Bag", "Integer"], "class_members": [{"name": "makeTestBag", "type": "method"}]}, "category": "unit", "description": "Tests that adding an illegal element to the bag throws an IllegalArgumentException."}, {"name": "testIllegalDecorate", "primary_tested": ["PredicatedBag.predicatedBag(HashBag<T>,Predicate<T>)"], "external_dependencies": {"modules": ["HashBag", "Predicate"], "class_members": [{"name": "decorateBag", "type": "method"}, {"name": "stringPredicate", "type": "method"}]}, "category": "unit", "description": "Tests that decorating a bag with illegal elements throws an IllegalArgumentException, and decorating with a null predicate throws a NullPointerException."}, {"name": "testLegalAddRemove", "primary_tested": ["Bag.add(T)", "Bag.remove(T)", "Bag.uniqueSet()"], "associated_methods": ["Bag.size()"], "external_dependencies": {"modules": ["Bag", "Set"], "class_members": [{"name": "makeTestBag", "type": "method"}]}, "category": "unit", "description": "Tests the legal addition and removal of elements from the bag, and verifies the state of the unique set after these operations."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/PredicatedCollectionTest.java", "testclass_name": "PredicatedCollectionTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.List;", "import org.apache.commons.collections4.Predicate;", "import org.apache.commons.collections4.functors.TruePredicate;", "import org.junit.jupiter.api.Test;"], "name": "PredicatedCollectionTest", "description": "Tests for PredicatedCollection, which validates elements based on a predicate.", "class_members": {"variables": [{"name": "truePredicate", "type": "Predicate<E>"}, {"name": "testPredicate", "type": "Predicate<E>"}], "methods": [{"name": "decorateCollection", "signature": "protected Collection<E> decorateCollection(Collection<E> collection, Predicate<E> predicate)"}, {"name": "getCompatibilityVersion", "signature": "public String getCompatibilityVersion()"}, {"name": "getFullElements", "signature": "public E[] getFullElements()"}, {"name": "makeConfirmedCollection", "signature": "public Collection<E> makeConfirmedCollection()"}, {"name": "makeConfirmedFullCollection", "signature": "public Collection<E> makeConfirmedFullCollection()"}, {"name": "makeFullCollection", "signature": "public Collection<E> makeFullCollection()"}, {"name": "makeObject", "signature": "public Collection<E> makeObject()"}, {"name": "makeTestCollection", "signature": "public Collection<E> makeTestCollection()"}]}, "test_cases": [{"name": "testIllegalAdd", "primary_tested": ["Collection.add(E)"], "associated_methods": ["Collection.contains(Object)"], "external_dependencies": {"modules": ["Collection", "IllegalArgumentException"], "class_members": [{"name": "makeTestCollection", "type": "method"}]}, "category": "unit", "description": "Tests that adding an illegal element (non-string) to the collection throws an IllegalArgumentException."}, {"name": "testIllegalAddAll", "primary_tested": ["Collection.addAll(Collection<? extends E>)"], "associated_methods": ["Collection.contains(Object)"], "external_dependencies": {"modules": ["Collection", "IllegalArgumentException"], "class_members": [{"name": "makeTestCollection", "type": "method"}]}, "category": "unit", "description": "Tests that adding a collection with an illegal element (non-string) throws an IllegalArgumentException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/ComparatorUtilsTest.java", "testclass_name": "ComparatorUtilsTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Comparator;", "import org.junit.jupiter.api.Test;"], "name": "ComparatorUtilsTest", "description": "Unit tests for the ComparatorUtils class, which provides utility methods for comparators.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testBooleanComparator", "primary_tested": ["ComparatorUtils.booleanComparator(boolean)"], "external_dependencies": {"modules": ["Comparator", "ComparatorUtils"]}, "category": "unit", "description": "Tests the booleanComparator method of ComparatorUtils, ensuring it correctly compares Boolean values based on the provided boolean parameter."}, {"name": "testChainedComparator", "primary_tested": ["ComparatorUtils.chainedComparator(Comparator,Comparator)"], "external_dependencies": {"modules": ["Comparator", "ComparatorUtils"]}, "category": "unit", "description": "Tests the chainedComparator method of ComparatorUtils, ensuring it correctly chains two natural comparators for Integer values."}, {"name": "testMax", "primary_tested": ["ComparatorUtils.max(Integer,Integer,Comparator)"], "associated_methods": ["ComparatorUtils.reversedComparator(Comparator)"], "external_dependencies": {"modules": ["Comparator", "ComparatorUtils"]}, "category": "unit", "description": "Tests the max method of ComparatorUtils, ensuring it correctly returns the maximum value based on the provided comparator."}, {"name": "testMin", "primary_tested": ["ComparatorUtils.min(Integer,Integer,Comparator)"], "associated_methods": ["ComparatorUtils.reversedComparator(Comparator)"], "external_dependencies": {"modules": ["Comparator", "ComparatorUtils"]}, "category": "unit", "description": "Tests the min method of ComparatorUtils, ensuring it correctly returns the minimum value based on the provided comparator."}, {"name": "testNullHighComparator", "primary_tested": ["ComparatorUtils.nullHighComparator(Comparator)"], "external_dependencies": {"modules": ["Comparator", "ComparatorUtils"]}, "category": "unit", "description": "Tests the nullHighComparator method of ComparatorUtils, ensuring it correctly handles null values as higher than non-null values."}, {"name": "testNullLowComparator", "primary_tested": ["ComparatorUtils.nullLowComparator(Comparator)"], "external_dependencies": {"modules": ["Comparator", "ComparatorUtils"]}, "category": "unit", "description": "Tests the nullLowComparator method of ComparatorUtils, ensuring it correctly handles null values as lower than non-null values."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/QueueUtilsTest.java", "testclass_name": "QueueUtilsTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertInstanceOf;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.LinkedList;", "import java.util.Queue;", "import org.apache.commons.collections4.functors.TruePredicate;", "import org.apache.commons.collections4.queue.PredicatedQueue;", "import org.apache.commons.collections4.queue.SynchronizedQueue;", "import org.apache.commons.collections4.queue.TransformedQueue;", "import org.apache.commons.collections4.queue.UnmodifiableQueue;", "import org.junit.jupiter.api.Test;"], "name": "QueueUtilsTest", "description": "Unit tests for various utility methods in QueueUtils.", "class_members": {"variables": [{"name": "truePredicate", "type": "Predicate<Object>"}, {"name": "nopTransformer", "type": "Transformer<Object, Object>"}]}, "fixtures": [], "test_cases": [{"name": "testEmptyQueue", "primary_tested": ["QueueUtils.emptyQueue()"], "external_dependencies": {"modules": ["QueueUtils", "UnmodifiableQueue"], "class_members": [{"name": "truePredicate", "type": "variable"}]}, "category": "unit", "description": "Tests the creation of an empty unmodifiable queue and verifies its properties."}, {"name": "testPredicatedQueue", "primary_tested": ["QueueUtils.predicatedQueue(Queue,Predicate)"], "external_dependencies": {"modules": ["QueueUtils", "PredicatedQueue", "TruePredicate"], "class_members": [{"name": "truePredicate", "type": "variable"}]}, "category": "unit", "description": "Tests the creation of a predicated queue and verifies its properties and exceptions."}, {"name": "testSynchronizedQueue", "primary_tested": ["QueueUtils.synchronizedQueue(Queue)"], "external_dependencies": {"modules": ["QueueUtils", "SynchronizedQueue"], "class_members": [{"name": "truePredicate", "type": "variable"}]}, "category": "unit", "description": "Tests the creation of a synchronized queue and verifies its properties and exceptions."}, {"name": "testTransformedQueue", "primary_tested": ["QueueUtils.transformingQueue(Queue,Transformer)"], "external_dependencies": {"modules": ["QueueUtils", "TransformedQueue", "TransformerUtils"], "class_members": [{"name": "nopTransformer", "type": "variable"}]}, "category": "unit", "description": "Tests the creation of a transformed queue and verifies its properties and exceptions."}, {"name": "testUnmodifiableQueue", "primary_tested": ["QueueUtils.unmodifiableQueue(Queue)"], "external_dependencies": {"modules": ["QueueUtils", "UnmodifiableQueue"], "class_members": [{"name": "truePredicate", "type": "variable"}]}, "category": "unit", "description": "Tests the creation of an unmodifiable queue and verifies its properties and exceptions."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/PredicatedQueueTest.java", "testclass_name": "PredicatedQueueTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.LinkedList;", "import java.util.Queue;", "import org.apache.commons.collections4.Predicate;", "import org.apache.commons.collections4.collection.PredicatedCollectionTest;", "import org.apache.commons.collections4.functors.TruePredicate;", "import org.junit.jupiter.api.Test;"], "name": "PredicatedQueueTest", "description": "Unit tests for PredicatedQueue functionality.", "class_members": {"variables": [{"name": "truePredicate", "type": "Predicate<E>"}, {"name": "testPredicate", "type": "Predicate<E>"}], "methods": [{"name": "decorateCollection", "signature": "Queue<E> decorateCollection(Queue<E> queue, Predicate<E> predicate)"}, {"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "makeConfirmedCollection", "signature": "Collection<E> makeConfirmedCollection()"}, {"name": "makeConfirmedFullCollection", "signature": "Collection<E> makeConfirmedFullCollection()"}, {"name": "makeFullCollection", "signature": "Queue<E> makeFullCollection()"}, {"name": "makeObject", "signature": "Queue<E> makeObject()"}, {"name": "makeTestQueue", "signature": "Queue<E> makeTestQueue()"}]}, "test_cases": [{"name": "testGet", "primary_tested": ["Queue.peek()"], "associated_methods": ["Queue.add(E)", "Queue.peek()"], "external_dependencies": {"modules": ["Queue", "Predicate", "TruePredicate", "LinkedList", "Arrays"], "class_members": [{"name": "truePredicate", "type": "variable"}, {"name": "testPredicate", "type": "variable"}, {"name": "decorateCollection", "type": "method"}, {"name": "makeTestQueue", "type": "method"}]}, "category": "unit", "description": "Tests the peek functionality of the PredicatedQueue."}, {"name": "testRemove", "primary_tested": ["Queue.poll()"], "associated_methods": ["Queue.add(E)", "Queue.poll()"], "external_dependencies": {"modules": ["Queue", "Predicate", "TruePredicate", "LinkedList", "Arrays"], "class_members": [{"name": "truePredicate", "type": "variable"}, {"name": "testPredicate", "type": "variable"}, {"name": "decorateCollection", "type": "method"}, {"name": "makeTestQueue", "type": "method"}]}, "category": "unit", "description": "Tests the poll functionality of the PredicatedQueue."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/MultiSetUtilsTest.java", "testclass_name": "MultiSetUtilsTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.Arrays;", "import org.apache.commons.collections4.multiset.HashMultiSet;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "MultiSetUtilsTest", "description": "Unit tests for MultiSetUtils class, focusing on various utility methods for MultiSet operations.", "class_members": {"variables": [{"name": "fullArray", "type": "String[]"}, {"name": "multiSet", "type": "MultiSet<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEmptyMultiSet", "primary_tested": ["MultiSetUtils.emptyMultiSet()"], "external_dependencies": {"modules": ["MultiSetUtils", "MultiSet", "UnsupportedOperationException"]}, "category": "unit", "description": "Tests the creation and behavior of an empty MultiSet, ensuring it is read-only."}, {"name": "testPredicatedMultiSet", "primary_tested": ["MultiSetUtils.predicatedMultiSet(MultiSet<String>,Predicate<String>)"], "associated_methods": ["MultiSet.size()", "MultiSet.getCount(String)"], "external_dependencies": {"modules": ["MultiSetUtils", "MultiSet", "Predicate", "NullPointerException", "IllegalArgumentException"], "class_members": [{"name": "multiSet", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the predicated MultiSet creation and behavior, ensuring it adheres to the provided predicate."}, {"name": "testSynchronizedMultiSet", "primary_tested": ["MultiSetUtils.synchronizedMultiSet(MultiSet<String>)"], "associated_methods": ["MultiSet.add(String)"], "external_dependencies": {"modules": ["MultiSetUtils", "MultiSet"], "class_members": [{"name": "multiSet", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the synchronized MultiSet creation and behavior, ensuring it can be modified safely in a multi-threaded environment."}, {"name": "testUnmodifiableMultiSet", "primary_tested": ["MultiSetUtils.unmodifiableMultiSet(MultiSet<String>)"], "external_dependencies": {"modules": ["MultiSetUtils", "MultiSet", "UnsupportedOperationException", "NullPointerException"], "class_members": [{"name": "multiSet", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the unmodifiable MultiSet creation and behavior, ensuring it is read-only."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/TransformedMapTest.java", "testclass_name": "TransformedMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Map;", "import java.util.Set;", "import org.apache.commons.collections4.IterableMap;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.TransformerUtils;", "import org.apache.commons.collections4.collection.TransformedCollectionTest;", "import org.junit.jupiter.api.Test;"], "name": "TransformedMapTest", "description": "Unit tests for TransformedMap functionality.", "class_members": {"variables": [], "methods": [{"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "makeObject", "signature": "IterableMap<K, V> makeObject()"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testFactory_Decorate", "primary_tested": ["TransformedMap.transformingMap(Map,Transformer,Transformer)"], "associated_methods": ["Map.put(K,V)", "Map.get(Object)", "Map.size()"], "external_dependencies": {"modules": ["HashMap", "TransformedMap", "TransformedCollectionTest"], "class_members": []}, "category": "unit", "description": "Tests the factory method for decorating a map with transformers."}, {"name": "testFactory_decorateTransform", "primary_tested": ["TransformedMap.transformedMap(Map,Transformer,Transformer)"], "associated_methods": ["Map.put(K,V)", "Map.get(Object)", "Map.size()"], "external_dependencies": {"modules": ["HashMap", "TransformedMap", "TransformedCollectionTest"], "class_members": []}, "category": "unit", "description": "Tests the factory method for transforming a map with transformers."}, {"name": "testTransformedMap", "primary_tested": ["TransformedMap.transformingMap(Map,Transformer,Transformer)"], "associated_methods": ["Map.put(K,V)", "Map.get(Object)", "Map.size()", "Map.containsKey(Object)", "Map.containsValue(Object)", "Map.remove(Object)", "Map.entrySet()", "Map.Entry.setValue(V)"], "external_dependencies": {"modules": ["HashMap", "TransformedMap", "TransformedCollectionTest"], "class_members": []}, "category": "unit", "description": "Tests the functionality of TransformedMap with various transformers."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/EnumerationUtilsTest.java", "testclass_name": "EnumerationUtilsTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Enumeration;", "import java.util.Hashtable;", "import java.util.Iterator;", "import java.util.List;", "import java.util.StringTokenizer;", "import java.util.Vector;", "import org.junit.jupiter.api.Test;"], "name": "EnumerationUtilsTest", "description": "Unit tests for the EnumerationUtils class, which provides utility methods for working with Enumerations.", "class_members": {"variables": [{"name": "TO_LIST_FIXTURE", "type": "static final String"}]}, "fixtures": [], "test_cases": [{"name": "testAsIterableFor", "primary_tested": ["EnumerationUtils.asIterable(Enumeration<String>)"], "associated_methods": ["Iterator.hasNext()", "Iterator.next()"], "external_dependencies": {"modules": ["Vector", "Enumeration", "Iterator"], "class_members": []}, "category": "unit", "description": "Tests the asIterable method of EnumerationUtils to ensure it correctly converts an Enumeration to an Iterable."}, {"name": "testAsIterableForNull", "primary_tested": ["EnumerationUtils.asIterable(Enumeration<String>)"], "external_dependencies": {"modules": ["Enumeration"], "class_members": []}, "category": "unit", "description": "Tests the asIterable method of EnumerationUtils to ensure it throws a NullPointerException when given a null Enumeration."}, {"name": "testGetFromEnumeration", "primary_tested": ["EnumerationUtils.get(Enumeration<String>, int)"], "associated_methods": ["Enumeration.hasMoreElements()"], "external_dependencies": {"modules": ["Vector", "Enumeration"], "class_members": []}, "category": "unit", "description": "Tests the get method of EnumerationUtils to ensure it correctly retrieves elements from an Enumeration and handles IndexOutOfBoundsException."}, {"name": "testToListWithHashtable", "primary_tested": ["EnumerationUtils.toList(Enumeration<Integer>)", "EnumerationUtils.toList(Enumeration<String>)"], "associated_methods": ["List.contains(Object)", "List.containsAll(Collection<?>)", "List.size()"], "external_dependencies": {"modules": ["Hashtable", "Enumeration", "List", "ArrayList"], "class_members": []}, "category": "unit", "description": "Tests the toList method of EnumerationUtils to ensure it correctly converts elements and keys of a Hashtable to Lists."}, {"name": "testToListWithStringTokenizer", "primary_tested": ["EnumerationUtils.toList(Enumeration<String>)"], "associated_methods": ["StringTokenizer.hasMoreTokens()", "StringTokenizer.nextToken()", "List.add(Object)", "List.equals(Object)"], "external_dependencies": {"modules": ["StringTokenizer", "List", "ArrayList"], "class_members": [{"name": "TO_LIST_FIXTURE", "type": "variable"}]}, "category": "unit", "description": "Tests the toList method of EnumerationUtils to ensure it correctly converts a StringTokenizer to a List."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/UnmodifiableOrderedMapTest.java", "testclass_name": "UnmodifiableOrderedMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import org.apache.commons.collections4.OrderedMap;", "import org.apache.commons.collections4.Unmodifiable;", "import org.junit.jupiter.api.Test;"], "name": "UnmodifiableOrderedMapTest", "description": "Tests for the UnmodifiableOrderedMap class, focusing on its unmodifiable and factory decoration functionalities.", "class_members": {"methods": [{"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "isPutAddSupported", "signature": "boolean isPutAddSupported()"}, {"name": "isPutChangeSupported", "signature": "boolean isPutChangeSupported()"}, {"name": "isRemoveSupported", "signature": "boolean isRemoveSupported()"}, {"name": "makeFullMap", "signature": "OrderedMap<K, V> makeFullMap()"}, {"name": "makeObject", "signature": "OrderedMap<K, V> makeObject()"}]}, "test_cases": [{"name": "testDecorateFactory", "primary_tested": ["UnmodifiableOrderedMap.unmodifiableOrderedMap(OrderedMap<K, V>)"], "associated_methods": ["UnmodifiableOrderedMapTest.makeFullMap()"], "external_dependencies": {"modules": ["OrderedMap", "UnmodifiableOrderedMap", "NullPointerException"], "class_members": [{"name": "makeFullMap", "type": "method"}]}, "category": "unit", "description": "Tests the factory decoration functionality of UnmodifiableOrderedMap, ensuring it returns the same map and handles null input correctly."}, {"name": "testUnmodifiable", "primary_tested": ["UnmodifiableOrderedMap.unmodifiableOrderedMap(OrderedMap<K, V>)"], "associated_methods": ["UnmodifiableOrderedMapTest.makeObject()", "UnmodifiableOrderedMapTest.makeFullMap()"], "external_dependencies": {"modules": ["OrderedMap", "UnmodifiableOrderedMap", "Unmodifiable"], "class_members": [{"name": "makeObject", "type": "method"}, {"name": "makeFullMap", "type": "method"}]}, "category": "unit", "description": "Tests that the UnmodifiableOrderedMap instances created are indeed unmodifiable."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/LazySortedMapTest.java", "testclass_name": "LazySortedMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.apache.commons.collections4.map.LazySortedMap.lazySortedMap;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertInstanceOf;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.Comparator;", "import java.util.Map;", "import java.util.SortedMap;", "import java.util.TreeMap;", "import java.util.concurrent.ConcurrentSkipListMap;", "import org.apache.commons.collections4.Factory;", "import org.apache.commons.collections4.FactoryUtils;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.TransformerUtils;", "import org.junit.jupiter.api.Test;"], "name": "LazySortedMapTest", "description": "Unit tests for the LazySortedMap class, focusing on its functionality and behavior with different comparators and factories.", "class_members": {"variables": [{"name": "oneFactory", "type": "static final Factory<Integer>"}, {"name": "reverseStringComparator", "type": "Comparator<String>"}], "methods": [], "nested_classes": [{"name": "ReverseStringComparator", "description": "A comparator that reverses the natural order of strings."}]}, "fixtures": [], "test_cases": [{"name": "testMapGet", "primary_tested": ["LazySortedMap.get(Integer)"], "external_dependencies": {"modules": ["TreeMap", "FactoryUtils"], "class_members": [{"name": "oneFactory", "type": "variable"}]}, "category": "unit", "description": "Tests the get method of LazySortedMap to ensure it correctly creates and retrieves entries using the provided factory."}, {"name": "testReverseSortOrder", "primary_tested": ["LazySortedMap.lastKey()", "LazySortedMap.firstKey()", "LazySortedMap.tailMap(String).firstKey()", "LazySortedMap.headMap(String).lastKey()", "LazySortedMap.subMap(String,String).lastKey()", "LazySortedMap.comparator()"], "associated_methods": ["LazySortedMap.put(String,Number)", "LazySortedMap.get(String)"], "external_dependencies": {"modules": ["ConcurrentSkipListMap", "FactoryUtils"], "class_members": [{"name": "oneFactory", "type": "variable"}, {"name": "reverseStringComparator", "type": "variable"}]}, "category": "unit", "description": "Tests the sorting order of LazySortedMap when using a reverse string comparator, ensuring keys are ordered correctly."}, {"name": "testSortOrder", "primary_tested": ["LazySortedMap.firstKey()", "LazySortedMap.lastKey()", "LazySortedMap.tailMap(String).firstKey()", "LazySortedMap.headMap(String).lastKey()", "LazySortedMap.subMap(String,String).lastKey()", "LazySortedMap.comparator()"], "associated_methods": ["LazySortedMap.put(String,Number)", "LazySortedMap.get(String)"], "external_dependencies": {"modules": ["TreeMap", "FactoryUtils"], "class_members": [{"name": "oneFactory", "type": "variable"}]}, "category": "unit", "description": "Tests the natural sorting order of LazySortedMap, ensuring keys are ordered correctly."}, {"name": "testTransformerDecorate", "primary_tested": ["LazySortedMap.lazySortedMap(TreeMap,Transformer)"], "external_dependencies": {"modules": ["TreeMap", "TransformerUtils", "FactoryUtils"], "class_members": [{"name": "oneFactory", "type": "variable"}], "project_specific_resources": ["TransformerUtils.asTransformer(Factory)"]}, "category": "unit", "description": "Tests the decoration of LazySortedMap with a transformer, ensuring correct behavior and handling of null inputs."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/PredicatedCollectionBuilderTest.java", "testclass_name": "PredicatedCollectionBuilderTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.List;", "import java.util.Queue;", "import java.util.Set;", "import org.apache.commons.collections4.Bag;", "import org.apache.commons.collections4.Predicate;", "import org.junit.jupiter.api.Test;"], "name": "PredicatedCollectionBuilderTest", "description": "Tests for the PredicatedCollectionBuilder class, focusing on the behavior of collections with predicates.", "class_members": {"variables": [], "methods": [{"name": "checkPredicatedCollection1", "signature": "void checkPredicatedCollection1(Collection<String>)"}, {"name": "checkPredicatedCollection2", "signature": "void checkPredicatedCollection2(Collection<Integer>)"}], "nested_classes": [{"name": "OddPredicate", "description": "Internal predicate class for evaluating odd integers"}]}, "fixtures": [], "test_cases": [{"name": "testAddAllPass", "primary_tested": ["PredicatedCollection.Builder.addAll(Collection<String>)"], "external_dependencies": {"modules": ["PredicatedCollection", "Arrays"], "class_members": []}, "category": "unit", "description": "Verify that only items that pass the Predicate end up in the buffer."}, {"name": "testAddFail", "primary_tested": ["PredicatedCollection.Builder.add(String)"], "external_dependencies": {"modules": ["PredicatedCollection"], "class_members": []}, "category": "unit", "description": "Verify that failing the Predicate means NOT ending up in the buffer."}, {"name": "testAddPass", "primary_tested": ["PredicatedCollection.Builder.add(String)"], "external_dependencies": {"modules": ["PredicatedCollection"], "class_members": []}, "category": "unit", "description": "Verify that passing the Predicate means ending up in the buffer."}, {"name": "testCreatePredicatedCollectionWithNotNullPredicate", "primary_tested": ["PredicatedCollection.Builder.createPredicatedList()", "PredicatedCollection.Builder.createPredicatedSet()", "PredicatedCollection.Builder.createPredicatedBag()", "PredicatedCollection.Builder.createPredicatedQueue()"], "associated_methods": ["PredicatedCollectionBuilderTest.checkPredicatedCollection1(Collection<String>)"], "external_dependencies": {"modules": ["PredicatedCollection", "List", "Set", "Bag", "Queue"], "class_members": [{"name": "checkPredicatedCollection1", "type": "method"}]}, "category": "unit", "description": "Test creating predicated collections with a not-null predicate."}, {"name": "testCreatePredicatedCollectionWithPredicate", "primary_tested": ["PredicatedCollection.Builder.createPredicatedList()", "PredicatedCollection.Builder.createPredicatedSet()", "PredicatedCollection.Builder.createPredicatedBag()", "PredicatedCollection.Builder.createPredicatedQueue()"], "associated_methods": ["PredicatedCollectionBuilderTest.checkPredicatedCollection2(Collection<Integer>)"], "external_dependencies": {"modules": ["PredicatedCollection", "List", "Set", "Bag", "Queue"], "class_members": [{"name": "checkPredicatedCollection2", "type": "method"}]}, "category": "unit", "description": "Test creating predicated collections with a custom predicate."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/UnmodifiableSortedMapTest.java", "testclass_name": "UnmodifiableSortedMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.SortedMap;", "import java.util.TreeMap;", "import org.apache.commons.collections4.Unmodifiable;", "import org.junit.jupiter.api.Test;"], "name": "UnmodifiableSortedMapTest", "description": "Tests for the UnmodifiableSortedMap class, focusing on its unmodifiable properties and map operations.", "class_members": {"methods": [{"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "isPutAddSupported", "signature": "boolean isPutAddSupported()"}, {"name": "isPutChangeSupported", "signature": "boolean isPutChangeSupported()"}, {"name": "isRemoveSupported", "signature": "boolean isRemoveSupported()"}, {"name": "makeFullMap", "signature": "SortedMap<K, V> makeFullMap()"}, {"name": "makeObject", "signature": "SortedMap<K, V> makeObject()"}]}, "test_cases": [{"name": "testDecorateFactory", "primary_tested": ["UnmodifiableSortedMap.unmodifiableSortedMap(SortedMap)"], "associated_methods": ["UnmodifiableSortedMap.unmodifiableSortedMap(SortedMap)"], "external_dependencies": {"modules": ["UnmodifiableSortedMap", "SortedMap", "NullPointerException"], "class_members": [{"name": "makeFullMap", "type": "method"}]}, "category": "unit", "description": "Tests the factory method for decorating a SortedMap as unmodifiable and checks for null input handling."}, {"name": "testHeadMap", "primary_tested": ["SortedMap.headMap(K)"], "associated_methods": ["SortedMap.isEmpty()"], "external_dependencies": {"modules": ["SortedMap", "TreeMap"], "class_members": [{"name": "makeFullMap", "type": "method"}]}, "category": "unit", "description": "Tests the headMap method of the SortedMap to ensure it returns the correct sub-map."}, {"name": "testSubMap", "primary_tested": ["SortedMap.subMap(K,K)"], "associated_methods": ["SortedMap.headMap(K)"], "external_dependencies": {"modules": ["SortedMap"], "class_members": [{"name": "makeFullMap", "type": "method"}]}, "category": "unit", "description": "Tests the subMap method of the SortedMap to ensure it returns the correct sub-map."}, {"name": "testTailMap", "primary_tested": ["SortedMap.tailMap(K)"], "external_dependencies": {"modules": ["SortedMap"], "class_members": [{"name": "makeFullMap", "type": "method"}]}, "category": "unit", "description": "Tests the tailMap method of the SortedMap to ensure it returns the correct sub-map."}, {"name": "testUnmodifiable", "primary_tested": ["UnmodifiableSortedMap.makeObject()"], "associated_methods": ["UnmodifiableSortedMap.makeFullMap()"], "external_dependencies": {"modules": ["Unmodifiable", "UnmodifiableSortedMap"], "class_members": [{"name": "makeObject", "type": "method"}, {"name": "makeFullMap", "type": "method"}]}, "category": "unit", "description": "Tests that the created maps are instances of Unmodifiable."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/PredicatedMapTest.java", "testclass_name": "PredicatedMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.HashMap;", "import java.util.Iterator;", "import java.util.Map;", "import org.apache.commons.collections4.IterableMap;", "import org.apache.commons.collections4.Predicate;", "import org.apache.commons.collections4.functors.TruePredicate;", "import org.junit.jupiter.api.Test;"], "name": "PredicatedMapTest", "description": "Unit tests for the PredicatedMap class, focusing on entry set and put operations.", "class_members": {"variables": [{"name": "truePredicate", "type": "static final Predicate<Object>"}, {"name": "testPredicate", "type": "static final Predicate<Object>"}], "methods": [{"name": "decorateMap", "signature": "IterableMap<K, V> decorateMap(Map<K, V> map, Predicate<? super K> keyPredicate, Predicate<? super V> valuePredicate)"}, {"name": "makeTestMap", "signature": "IterableMap<K, V> makeTestMap()"}]}, "fixtures": [], "test_cases": [{"name": "testEntrySet", "primary_tested": ["Map.entrySet()"], "associated_methods": ["Map.put(K,V)"], "external_dependencies": {"modules": ["Map", "HashMap", "PredicatedMap"], "class_members": [{"name": "decorateMap", "type": "method"}]}, "category": "unit", "description": "Tests the entry set functionality of the PredicatedMap."}, {"name": "testPut", "primary_tested": ["Map.put(K,V)", "Map.putAll(Map<? extends K, ? extends V>)", "Map.Entry.setValue(V)"], "associated_methods": ["Map.containsKey(Object)", "Map.containsValue(Object)", "Map.entrySet()"], "external_dependencies": {"modules": ["Map", "HashMap", "PredicatedMap", "IllegalArgumentException"], "class_members": [{"name": "decorateMap", "type": "method"}]}, "category": "unit", "description": "Tests the put operation and its validation in the PredicatedMap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/functors/NullPredicateTest.java", "testclass_name": "NullPredicateTest", "dependencies": ["package org.apache.commons.collections4.functors;", "import static org.apache.commons.collections4.functors.NullPredicate.nullPredicate;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import org.apache.commons.collections4.Predicate;", "import org.junit.jupiter.api.Test;"], "name": "NullPredicateTest", "description": "Tests for the NullPredicate class in Apache Commons Collections.", "class_members": {"methods": [{"name": "generatePredicate", "signature": "Predicate<?> generatePredicate()"}]}, "fixtures": [], "test_cases": [{"name": "testEnsurePredicateCanBeTypedWithoutWarning", "primary_tested": ["NullPredicate.nullPredicate()"], "associated_methods": ["AbstractPredicateTest.assertPredicateFalse(Predicate<String>,String)"], "external_dependencies": {"modules": ["NullPredicate", "Predicate"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the NullPredicate can be typed without warnings."}, {"name": "testNullPredicate", "primary_tested": ["NullPredicate.nullPredicate()"], "associated_methods": ["AbstractPredicateTest.assertPredicateTrue(Predicate<?>,Object)"], "external_dependencies": {"modules": ["NullPredicate", "Predicate"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the functionality of the NullPredicate."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/LazyMapTest.java", "testclass_name": "LazyMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.apache.commons.collections4.map.LazyMap.lazyMap;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import java.util.HashMap;", "import java.util.Map;", "import org.apache.commons.collections4.Factory;", "import org.apache.commons.collections4.FactoryUtils;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.Test;"], "name": "LazyMapTest", "description": "Unit tests for LazyMap functionality, including map get operations with factories and transformers.", "class_members": {"variables": [{"name": "oneFactory", "type": "static final Factory<Integer>"}], "methods": [{"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "makeObject", "signature": "LazyMap<K, V> makeObject()"}]}, "fixtures": [], "test_cases": [{"name": "testMapGetWithFactory", "primary_tested": ["LazyMap.get(Object)"], "associated_methods": ["FactoryUtils.constantFactory(Integer)", "FactoryUtils.nullFactory()"], "external_dependencies": {"modules": ["HashMap", "FactoryUtils", "LazyMap"], "class_members": [{"name": "oneFactory", "type": "variable"}]}, "category": "unit", "description": "Tests the get functionality of LazyMap with a factory, ensuring the correct value is returned and the map size is updated accordingly."}, {"name": "testMapGetWithTransformer", "primary_tested": ["LazyMap.get(Object)"], "associated_methods": ["Number.intValue()"], "external_dependencies": {"modules": ["HashMap", "LazyMap"]}, "category": "unit", "description": "Tests the get functionality of LazyMap with a transformer, ensuring the correct value is returned and the map size is updated accordingly."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/IndexedCollectionTest.java", "testclass_name": "IndexedCollectionTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static java.util.Arrays.asList;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.io.Serializable;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.Test;"], "name": "IndexedCollectionTest", "description": "Unit tests for the IndexedCollection class, focusing on its indexing and retrieval functionalities.", "class_members": {"variables": [], "methods": [{"name": "decorateCollection", "signature": "Collection<String> decorateCollection(Collection<String>)"}, {"name": "decorateUniqueCollection", "signature": "IndexedCollection<Integer, String> decorateUniqueCollection(Collection<String>)"}, {"name": "getFullElements", "signature": "String[] getFullElements()"}, {"name": "getOtherElements", "signature": "String[] getOtherElements()"}, {"name": "makeConfirmedCollection", "signature": "Collection<String> makeConfirmedCollection()"}, {"name": "makeConfirmedFullCollection", "signature": "Collection<String> makeConfirmedFullCollection()"}, {"name": "makeFullCollection", "signature": "Collection<String> makeFullCollection()"}, {"name": "makeObject", "signature": "Collection<String> makeObject()"}, {"name": "makeTestCollection", "signature": "Collection<String> makeTestCollection()"}, {"name": "makeUniqueTestCollection", "signature": "Collection<String> makeUniqueTestCollection()"}, {"name": "skipSerializedCanonicalTests", "signature": "boolean skipSerializedCanonicalTests()"}], "nested_classes": [{"name": "IntegerTransformer", "description": "Internal transformer class to convert String to Integer"}]}, "fixtures": [], "test_cases": [{"name": "testAddedObjectsCanBeRetrievedByKey", "primary_tested": ["IndexedCollection.get(Integer)"], "associated_methods": ["IndexedCollection.add(String)", "IndexedCollection.addAll(Collection)"], "external_dependencies": {"modules": ["IndexedCollection", "Collection", "IntegerTransformer"], "class_members": [{"name": "makeTestCollection", "type": "method"}]}, "category": "unit", "description": "Tests that objects added to the IndexedCollection can be retrieved using their keys."}, {"name": "testDecoratedCollectionIsIndexedOnCreation", "primary_tested": ["IndexedCollection.get(Integer)"], "associated_methods": ["IndexedCollection.decorateUniqueCollection(Collection)"], "external_dependencies": {"modules": ["IndexedCollection", "Collection", "IntegerTransformer"], "class_members": [{"name": "makeFullCollection", "type": "method"}, {"name": "decorateUniqueCollection", "type": "method"}]}, "category": "unit", "description": "Tests that the decorated collection is indexed upon creation."}, {"name": "testEnsureDuplicateObjectsCauseException", "primary_tested": ["IndexedCollection.add(String)"], "associated_methods": [], "external_dependencies": {"modules": ["IndexedCollection", "Collection", "IntegerTransformer"], "class_members": [{"name": "makeUniqueTestCollection", "type": "method"}]}, "category": "unit", "description": "Tests that adding duplicate objects to a unique indexed collection causes an exception."}, {"name": "testReindexUpdatesIndexWhenDecoratedCollectionIsModifiedSeparately", "primary_tested": ["IndexedCollection.reindex()"], "associated_methods": ["IndexedCollection.get(Integer)", "IndexedCollection.add(String)"], "external_dependencies": {"modules": ["IndexedCollection", "Collection", "IntegerTransformer"], "class_members": [{"name": "decorateUniqueCollection", "type": "method"}]}, "category": "unit", "description": "Tests that reindexing updates the index when the decorated collection is modified separately."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/TransformingComparatorTest.java", "testclass_name": "TransformingComparatorTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Comparator;", "import java.util.LinkedList;", "import java.util.List;", "import org.apache.commons.collections4.ComparatorUtils;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.TransformerUtils;", "import org.junit.jupiter.api.Test;"], "name": "TransformingComparatorTest", "description": "Unit tests for the TransformingComparator class.", "class_members": {"variables": [], "methods": [{"name": "getComparableObjectsOrdered", "signature": "List<Integer> getComparableObjectsOrdered()"}, {"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "makeObject", "signature": "Comparator<Integer> makeObject()"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testEquals", "primary_tested": ["TransformingComparator.equals(Object)", "TransformingComparator.hashCode()"], "associated_methods": [], "external_dependencies": {"modules": ["TransformerUtils", "TransformingComparator"], "class_members": [], "project_specific_resources": ["TransformerUtils.nopTransformer()"]}, "category": "unit", "fixtures_used": [], "description": "Tests the equals and hashCode methods of TransformingComparator to ensure they adhere to the equals-hashCode contract."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/SplitMapUtilsTest.java", "testclass_name": "SplitMapUtilsTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertInstanceOf;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Map;", "import org.apache.commons.collections4.functors.NOPTransformer;", "import org.apache.commons.collections4.map.HashedMap;", "import org.apache.commons.collections4.splitmap.TransformedSplitMap;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SplitMapUtilsTest", "description": "Unit tests for the SplitMapUtils class, focusing on the functionality of readable and writable maps.", "class_members": {"variables": [{"name": "backingMap", "type": "Map<String, Integer>"}, {"name": "transformedMap", "type": "TransformedSplitMap<String, String, String, Integer>"}, {"name": "stringToInt", "type": "Transformer<String, Integer>"}], "methods": [{"name": "attemptGetOperation", "signature": "void attemptGetOperation(Runnable)"}, {"name": "attemptPutOperation", "signature": "void attemptPutOperation(Runnable)"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAlreadyReadableMap", "primary_tested": ["SplitMapUtils.readableMap(Map)"], "external_dependencies": {"modules": ["HashedMap", "SplitMapUtils"], "class_members": [{"name": "backingMap", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests that a map is already readable when passed to SplitMapUtils.readableMap."}, {"name": "testAlreadyWritableMap", "primary_tested": ["SplitMapUtils.writableMap(Map)"], "external_dependencies": {"modules": ["HashedMap", "SplitMapUtils"], "class_members": [{"name": "backingMap", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests that a map is already writable when passed to SplitMapUtils.writableMap."}, {"name": "testReadableMap", "primary_tested": ["SplitMapUtils.readableMap(TransformedSplitMap)"], "associated_methods": ["IterableMap.containsValue(Object)", "IterableMap.get(Object)", "MapIterator.hasNext()", "MapIterator.next()", "MapIterator.getKey()", "MapIterator.getValue()", "Unmodifiable.class", "IterableMap.size()", "IterableMap.remove(Object)", "IterableMap.isEmpty()"], "external_dependencies": {"modules": ["SplitMapUtils", "IterableMap", "MapIterator", "Unmodifiable"], "class_members": [{"name": "transformedMap", "type": "variable"}, {"name": "attemptPutOperation", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the functionality of a readable map created by SplitMapUtils.readableMap, including basic operations, mapIterator, unmodifiable checks, and individual operations."}, {"name": "testWritableMap", "primary_tested": ["SplitMapUtils.writableMap(TransformedSplitMap)"], "associated_methods": ["Map.get(Object)", "Map.entrySet()", "Map.keySet()", "Map.values()", "Map.size()", "Map.isEmpty()", "Map.containsKey(Object)", "Map.containsValue(Object)", "Map.remove(Object)", "Map.put(Object, Object)", "Map.putAll(Map)", "Map.clear()"], "external_dependencies": {"modules": ["SplitMapUtils", "Map"], "class_members": [{"name": "transformedMap", "type": "variable"}, {"name": "attemptGetOperation", "type": "method"}, {"name": "backingMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the functionality of a writable map created by SplitMapUtils.writableMap, including get operations, put operations, and clear operations."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/LinkedMapTest.java", "testclass_name": "LinkedMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import java.util.ArrayList;", "import java.util.Iterator;", "import java.util.List;", "import java.util.Map;", "import org.apache.commons.collections4.BulkTest;", "import org.apache.commons.collections4.MapIterator;", "import org.apache.commons.collections4.OrderedMap;", "import org.apache.commons.collections4.ResettableIterator;", "import org.apache.commons.collections4.list.AbstractListTest;", "import org.junit.jupiter.api.Test;"], "name": "LinkedMapTest", "description": "Unit tests for LinkedMap operations and functionalities.", "class_members": {"variables": [], "methods": [{"name": "bulkTestListView", "signature": "public BulkTest bulkTestListView()"}, {"name": "getCompatibilityVersion", "signature": "public String getCompatibilityVersion()"}, {"name": "getMap", "signature": "public LinkedMap<K, V> getMap()"}, {"name": "makeFullMap", "signature": "public LinkedMap<K, V> makeFullMap()"}, {"name": "makeObject", "signature": "public LinkedMap<K, V> makeObject()"}], "nested_classes": [{"name": "TestListView", "description": "Internal test class for list view operations"}]}, "fixtures": [], "test_cases": [{"name": "testClone", "primary_tested": ["LinkedMap.clone()"], "external_dependencies": {"modules": ["LinkedMap", "Map"], "class_members": []}, "category": "unit", "description": "Tests the cloning functionality of the LinkedMap."}, {"name": "testGetByIndex", "primary_tested": ["LinkedMap.get(int)"], "associated_methods": ["LinkedMap.mapIterator()"], "external_dependencies": {"modules": ["LinkedMap", "MapIterator", "IndexOutOfBoundsException"], "class_members": []}, "category": "unit", "description": "Tests the get by index functionality of the LinkedMap."}, {"name": "testGetValueByIndex", "primary_tested": ["LinkedMap.getValue(int)"], "associated_methods": ["LinkedMap.mapIterator()"], "external_dependencies": {"modules": ["LinkedMap", "MapIterator", "IndexOutOfBoundsException"], "class_members": []}, "category": "unit", "description": "Tests the getValue by index functionality of the LinkedMap."}, {"name": "testIndexOf", "primary_tested": ["LinkedMap.indexOf(Object)"], "associated_methods": ["LinkedMap.mapIterator()"], "external_dependencies": {"modules": ["LinkedMap", "MapIterator", "ArrayList"], "class_members": []}, "category": "unit", "description": "Tests the indexOf functionality of the LinkedMap."}, {"name": "testInitialCapacityZero", "primary_tested": ["LinkedMap.LinkedMap(int)"], "external_dependencies": {"modules": ["LinkedMap"], "class_members": []}, "category": "unit", "description": "Tests the initial capacity zero functionality of the LinkedMap."}, {"name": "testInsertionOrder", "primary_tested": ["LinkedMap.put(K,V)", "LinkedMap.keySet()", "LinkedMap.values()"], "associated_methods": ["LinkedMap.mapIterator()"], "external_dependencies": {"modules": ["LinkedMap", "MapIterator", "Iterator"], "class_members": []}, "category": "unit", "description": "Tests the insertion order functionality of the LinkedMap."}, {"name": "testRemoveByIndex", "primary_tested": ["LinkedMap.remove(int)"], "associated_methods": ["LinkedMap.mapIterator()"], "external_dependencies": {"modules": ["LinkedMap", "MapIterator", "IndexOutOfBoundsException", "ArrayList"], "class_members": []}, "category": "unit", "description": "Tests the remove by index functionality of the LinkedMap."}, {"name": "testReset", "primary_tested": ["ResettableIterator.reset()"], "associated_methods": ["LinkedMap.mapIterator()"], "external_dependencies": {"modules": ["LinkedMap", "ResettableIterator", "ArrayList"], "class_members": []}, "category": "unit", "description": "Tests the reset functionality of the ResettableIterator in LinkedMap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/MultiMapUtilsTest.java", "testclass_name": "MultiMapUtilsTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.List;", "import java.util.Set;", "import org.apache.commons.collections4.multimap.ArrayListValuedHashMap;", "import org.junit.jupiter.api.Test;"], "name": "MultiMapUtilsTest", "description": "Unit tests for the MultiMapUtils class, which provides utility methods for MultiValuedMap operations.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testEmptyIfNull", "primary_tested": ["MultiMapUtils.emptyIfNull(MultiValuedMap)"], "external_dependencies": {"modules": ["MultiMapUtils", "ArrayListValuedHashMap"]}, "category": "unit", "description": "Tests the emptyIfNull method to ensure it returns an empty map if the input is null, and the original map otherwise."}, {"name": "testEmptyUnmodifiableMultiValuedMap", "primary_tested": ["MultiMapUtils.EMPTY_MULTI_VALUED_MAP"], "external_dependencies": {"modules": ["MultiMapUtils"]}, "category": "unit", "description": "Tests the EMPTY_MULTI_VALUED_MAP to ensure it is empty and unmodifiable."}, {"name": "testGetCollection", "primary_tested": ["MultiMapUtils.getCollection(MultiValuedMap,String)"], "external_dependencies": {"modules": ["MultiMapUtils", "ArrayListValuedHashMap"]}, "category": "unit", "description": "Tests the getCollection method to ensure it retrieves the correct collection of values for a given key."}, {"name": "testGetValuesAsBag", "primary_tested": ["MultiMapUtils.getValuesAsBag(MultiValuedMap,String)"], "external_dependencies": {"modules": ["MultiMapUtils", "ArrayListValuedHashMap"]}, "category": "unit", "description": "Tests the getValuesAsBag method to ensure it retrieves the correct bag of values for a given key."}, {"name": "testGetValuesAsList", "primary_tested": ["MultiMapUtils.getValuesAsList(MultiValuedMap,String)"], "external_dependencies": {"modules": ["MultiMapUtils", "ArrayListValuedHashMap"]}, "category": "unit", "description": "Tests the getValuesAsList method to ensure it retrieves the correct list of values for a given key."}, {"name": "testGetValuesAsSet", "primary_tested": ["MultiMapUtils.getValuesAsSet(MultiValuedMap,String)"], "external_dependencies": {"modules": ["MultiMapUtils", "ArrayListValuedHashMap"]}, "category": "unit", "description": "Tests the getValuesAsSet method to ensure it retrieves the correct set of values for a given key."}, {"name": "testIsEmptyWithEmptyMap", "primary_tested": ["MultiMapUtils.isEmpty(MultiValuedMap)"], "external_dependencies": {"modules": ["MultiMapUtils", "ArrayListValuedHashMap"]}, "category": "unit", "description": "Tests the isEmpty method to ensure it returns true for an empty map."}, {"name": "testIsEmptyWithNonEmptyMap", "primary_tested": ["MultiMapUtils.isEmpty(MultiValuedMap)"], "external_dependencies": {"modules": ["MultiMapUtils", "ArrayListValuedHashMap"]}, "category": "unit", "description": "Tests the isEmpty method to ensure it returns false for a non-empty map."}, {"name": "testIsEmptyWithNull", "primary_tested": ["MultiMapUtils.isEmpty(MultiValuedMap)"], "external_dependencies": {"modules": ["MultiMapUtils"]}, "category": "unit", "description": "Tests the isEmpty method to ensure it returns true for a null map."}, {"name": "testTypeSafeEmptyMultiValuedMap", "primary_tested": ["MultiMapUtils.emptyMultiValuedMap()"], "external_dependencies": {"modules": ["MultiMapUtils"]}, "category": "unit", "description": "Tests the emptyMultiValuedMap method to ensure it returns an empty and unmodifiable map."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/ReverseComparatorTest.java", "testclass_name": "ReverseComparatorTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import java.io.ByteArrayInputStream;", "import java.io.ByteArrayOutputStream;", "import java.io.ObjectInputStream;", "import java.io.ObjectOutputStream;", "import java.util.Collections;", "import java.util.Comparator;", "import java.util.LinkedList;", "import java.util.List;", "import org.junit.jupiter.api.Test;"], "name": "ReverseComparatorTest", "description": "Tests for the ReverseComparator class, which reverses the order of a given comparator.", "class_members": {"variables": [], "methods": [{"name": "getComparableObjectsOrdered", "signature": "List<Integer> getComparableObjectsOrdered()"}, {"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "makeObject", "signature": "Comparator<Integer> makeObject()"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testSerializeDeserializeThenCompare", "primary_tested": ["ReverseComparator.ReverseComparator(Comparator)"], "associated_methods": ["ReverseComparator.equals(Object)"], "external_dependencies": {"modules": ["ReverseComparator", "ComparableComparator", "ByteArrayOutputStream", "ObjectOutputStream", "ByteArrayInputStream", "ObjectInputStream"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the serialization and deserialization of a ReverseComparator, ensuring that the deserialized object is equal to the original."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/TransformedSortedMapTest.java", "testclass_name": "TransformedSortedMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Map;", "import java.util.Set;", "import java.util.SortedMap;", "import java.util.TreeMap;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.TransformerUtils;", "import org.apache.commons.collections4.collection.TransformedCollectionTest;", "import org.junit.jupiter.api.Test;"], "name": "TransformedSortedMapTest", "description": "Unit tests for TransformedSortedMap functionality.", "class_members": {"variables": [], "methods": [{"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "ignoredTests", "signature": "String[] ignoredTests()"}, {"name": "isSubMapViewsSerializable", "signature": "boolean isSubMapViewsSerializable()"}, {"name": "makeObject", "signature": "SortedMap<K, V> makeObject()"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testFactory_Decorate", "primary_tested": ["TransformedSortedMap.transformingSortedMap(SortedMap,Transformer,Transformer)"], "associated_methods": ["SortedMap.put(K,V)", "SortedMap.get(Object)", "SortedMap.size()"], "external_dependencies": {"modules": ["TreeMap", "TransformedSortedMap", "TransformedCollectionTest", "TransformerUtils"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the factory method for decorating a SortedMap with transformers."}, {"name": "testFactory_decorateTransform", "primary_tested": ["TransformedSortedMap.transformedSortedMap(SortedMap,Transformer,Transformer)"], "associated_methods": ["SortedMap.put(K,V)", "SortedMap.get(Object)", "SortedMap.size()"], "external_dependencies": {"modules": ["TreeMap", "TransformedSortedMap", "TransformedCollectionTest", "TransformerUtils"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the factory method for transforming a SortedMap with transformers."}, {"name": "testTransformedMap", "primary_tested": ["TransformedSortedMap.transformingSortedMap(SortedMap,Transformer,Transformer)"], "associated_methods": ["SortedMap.put(K,V)", "SortedMap.get(Object)", "SortedMap.size()", "SortedMap.containsKey(Object)", "SortedMap.containsValue(Object)", "SortedMap.remove(Object)", "SortedMap.entrySet()"], "external_dependencies": {"modules": ["TreeMap", "TransformedSortedMap", "TransformedCollectionTest", "TransformerUtils"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the functionality of TransformedSortedMap with various transformations."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/UnmodifiableMapTest.java", "testclass_name": "UnmodifiableMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Map;", "import org.apache.commons.collections4.IterableMap;", "import org.apache.commons.collections4.Unmodifiable;", "import org.junit.jupiter.api.Test;"], "name": "UnmodifiableMapTest", "description": "Tests for the UnmodifiableMap class, focusing on its unmodifiable behavior and factory decoration.", "class_members": {"methods": [{"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "isPutAddSupported", "signature": "boolean isPutAddSupported()"}, {"name": "isPutChangeSupported", "signature": "boolean isPutChangeSupported()"}, {"name": "isRemoveSupported", "signature": "boolean isRemoveSupported()"}, {"name": "makeFullMap", "signature": "IterableMap<K, V> makeFullMap()"}, {"name": "makeObject", "signature": "IterableMap<K, V> makeObject()"}]}, "fixtures": [], "test_cases": [{"name": "testDecorateFactory", "primary_tested": ["UnmodifiableMap.unmodifiableMap(Map<K, V>)"], "external_dependencies": {"modules": ["UnmodifiableMap", "Map"], "class_members": [{"name": "makeFullMap", "type": "method"}]}, "category": "unit", "description": "Tests the factory decoration of UnmodifiableMap, ensuring it returns the same instance and handles null input correctly."}, {"name": "testUnmodifiable", "primary_tested": ["UnmodifiableMap.unmodifiableMap(Map<K, V>)"], "associated_methods": ["UnmodifiableMap.makeObject()", "UnmodifiableMap.makeFullMap()"], "external_dependencies": {"modules": ["UnmodifiableMap", "Unmodifiable"], "class_members": [{"name": "makeObject", "type": "method"}, {"name": "makeFullMap", "type": "method"}]}, "category": "unit", "description": "Tests that the UnmodifiableMap instances created are indeed unmodifiable."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/CaseInsensitiveMapTest.java", "testclass_name": "CaseInsensitiveMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Locale;", "import java.util.Map;", "import java.util.Set;", "import org.apache.commons.lang3.StringUtils;", "import org.junit.jupiter.api.Test;"], "name": "CaseInsensitiveMapTest", "description": "Unit tests for the CaseInsensitiveMap class, focusing on case insensitivity, cloning, initial capacity, locale independence, null handling, and putAll functionality.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testCaseInsensitive", "primary_tested": ["CaseInsensitiveMap.put(K,V)", "CaseInsensitiveMap.get(Object)"], "external_dependencies": {"modules": ["CaseInsensitiveMap", "Map"], "class_members": []}, "category": "unit", "description": "Tests the case insensitivity of the CaseInsensitiveMap by adding keys with different cases and verifying retrieval."}, {"name": "testClone", "primary_tested": ["CaseInsensitiveMap.clone()"], "external_dependencies": {"modules": ["CaseInsensitiveMap"], "class_members": []}, "category": "unit", "description": "Tests the cloning functionality of the CaseInsensitiveMap by verifying the size and content of the cloned map."}, {"name": "testInitialCapacityZero", "primary_tested": ["CaseInsensitiveMap.CaseInsensitiveMap(int)"], "external_dependencies": {"modules": ["CaseInsensitiveMap"], "class_members": []}, "category": "unit", "description": "Tests the initial capacity of the CaseInsensitiveMap when set to zero."}, {"name": "testLocaleIndependence", "primary_tested": ["CaseInsensitiveMap.put(K,V)", "CaseInsensitiveMap.get(Object)"], "external_dependencies": {"modules": ["CaseInsensitiveMap", "Locale", "StringUtils"], "class_members": []}, "category": "unit", "description": "Tests the locale independence of the CaseInsensitiveMap by verifying case insensitivity across different locales."}, {"name": "testNullHandling", "primary_tested": ["CaseInsensitiveMap.put(K,V)", "CaseInsensitiveMap.get(Object)", "CaseInsensitiveMap.keySet()"], "external_dependencies": {"modules": ["CaseInsensitiveMap", "Map", "Set"], "class_members": []}, "category": "unit", "description": "Tests the handling of null keys in the CaseInsensitiveMap."}, {"name": "testPutAll", "primary_tested": ["CaseInsensitiveMap.CaseInsensitiveMap(Map)", "CaseInsensitiveMap.keySet()", "CaseInsensitiveMap.containsValue(Object)", "CaseInsensitiveMap.get(Object)"], "external_dependencies": {"modules": ["CaseInsensitiveMap", "HashMap", "Map", "Set"], "class_members": []}, "category": "unit", "description": "Tests the putAll functionality of the CaseInsensitiveMap by verifying the size and content after adding entries from another map."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/IteratorEnumerationTest.java", "testclass_name": "IteratorEnumerationTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Arrays;", "import java.util.Iterator;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.Test;"], "name": "IteratorEnumerationTest", "description": "Unit tests for the IteratorEnumeration class.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testEnumeration", "primary_tested": ["IteratorEnumeration.getIterator()", "IteratorEnumeration.hasMoreElements()", "IteratorEnumeration.nextElement()"], "associated_methods": [], "external_dependencies": {"modules": ["Arrays", "Iterator", "NoSuchElementException"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the functionality of the IteratorEnumeration class, including getting the iterator, checking for more elements, and retrieving the next element. Also tests the behavior when there are no more elements."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap2Test.java", "testclass_name": "ListOrderedMap2Test", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import java.util.ArrayList;", "import java.util.List;", "import org.apache.commons.collections4.BulkTest;", "import org.apache.commons.collections4.MapIterator;", "import org.apache.commons.collections4.list.AbstractListTest;", "import org.junit.jupiter.api.Test;"], "name": "ListOrderedMap2Test", "description": "Unit tests for ListOrderedMap2 class, focusing on index-based operations and value retrieval.", "class_members": {"variables": [], "methods": [{"name": "bulkTestListView", "signature": "BulkTest bulkTestListView()"}, {"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "getMap", "signature": "ListOrderedMap<K, V> getMap()"}, {"name": "makeFullMap", "signature": "ListOrderedMap<K, V> makeFullMap()"}, {"name": "makeObject", "signature": "ListOrderedMap<K, V> makeObject()"}], "nested_classes": [{"name": "TestListView", "description": "Internal test view class extending AbstractListTest"}]}, "fixtures": [], "test_cases": [{"name": "testGetByIndex", "primary_tested": ["ListOrderedMap.get(int)"], "external_dependencies": {"modules": ["ListOrderedMap", "MapIterator", "IndexOutOfBoundsException"], "class_members": [{"name": "getMap", "type": "method"}]}, "category": "unit", "description": "Tests the get method by index, ensuring it handles out-of-bounds indices correctly and retrieves elements correctly."}, {"name": "testGetValueByIndex", "primary_tested": ["ListOrderedMap.getValue(int)"], "external_dependencies": {"modules": ["ListOrderedMap", "MapIterator", "IndexOutOfBoundsException"], "class_members": [{"name": "getMap", "type": "method"}]}, "category": "unit", "description": "Tests the getValue method by index, ensuring it handles out-of-bounds indices correctly and retrieves values correctly."}, {"name": "testIndexOf", "primary_tested": ["ListOrderedMap.indexOf(Object)"], "external_dependencies": {"modules": ["ListOrderedMap", "MapIterator", "ArrayList"], "class_members": [{"name": "getMap", "type": "method"}]}, "category": "unit", "description": "Tests the indexOf method, ensuring it returns the correct index for elements and handles non-existent elements correctly."}, {"name": "testRemoveByIndex", "primary_tested": ["ListOrderedMap.remove(int)"], "external_dependencies": {"modules": ["ListOrderedMap", "MapIterator", "IndexOutOfBoundsException", "ArrayList"], "class_members": [{"name": "getMap", "type": "method"}]}, "category": "unit", "description": "Tests the remove method by index, ensuring it handles out-of-bounds indices correctly and removes elements correctly."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/functors/EqualPredicateTest.java", "testclass_name": "EqualPredicateTest", "dependencies": ["package org.apache.commons.collections4.functors;", "import static org.apache.commons.collections4.functors.EqualPredicate.equalPredicate;", "import static org.apache.commons.collections4.functors.NullPredicate.nullPredicate;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import org.apache.commons.collections4.Predicate;", "import org.junit.jupiter.api.Test;"], "name": "EqualPredicateTest", "description": "Tests for the EqualPredicate class in Apache Commons Collections, focusing on equality checks and predicate behavior.", "class_members": {"variables": [{"name": "FALSE_OBJECT", "type": "static final EqualsTestObject"}, {"name": "TRUE_OBJECT", "type": "static final EqualsTestObject"}], "nested_classes": [{"name": "EqualsTestObject", "description": "Internal test object class used for equality testing"}]}, "fixtures": [], "test_cases": [{"name": "testNullArgumentEqualsNullPredicate", "primary_tested": ["EqualPredicate.equalPredicate(Object)"], "associated_methods": ["NullPredicate.nullPredicate()"], "external_dependencies": {"modules": ["EqualPredicate", "NullPredicate"]}, "category": "unit", "description": "Tests if passing null to equalPredicate returns the same instance as nullPredicate."}, {"name": "testObjectFactoryUsesEqualsForTest", "primary_tested": ["EqualPredicate.equalPredicate(EqualsTestObject)"], "associated_methods": ["AbstractPredicateTest.assertPredicateFalse(Predicate,EqualsTestObject)", "AbstractPredicateTest.assertPredicateTrue(Predicate,EqualsTestObject)"], "external_dependencies": {"modules": ["EqualPredicate", "AbstractPredicateTest"], "class_members": [{"name": "FALSE_OBJECT", "type": "variable"}, {"name": "TRUE_OBJECT", "type": "variable"}]}, "category": "unit", "description": "Tests if the EqualPredicate uses the equals method for comparison with test objects."}, {"name": "testPredicateTypeCanBeSuperClassOfObject", "primary_tested": ["EqualPredicate.equalPredicate(Number)"], "associated_methods": ["AbstractPredicateTest.assertPredicateTrue(Predicate,Number)"], "external_dependencies": {"modules": ["EqualPredicate", "AbstractPredicateTest"]}, "category": "unit", "description": "Tests if the predicate type can be a superclass of the object type."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/BagUtilsTest.java", "testclass_name": "BagUtilsTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertInstanceOf;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import org.apache.commons.collections4.bag.HashBag;", "import org.apache.commons.collections4.bag.PredicatedBag;", "import org.apache.commons.collections4.bag.PredicatedSortedBag;", "import org.apache.commons.collections4.bag.SynchronizedBag;", "import org.apache.commons.collections4.bag.SynchronizedSortedBag;", "import org.apache.commons.collections4.bag.TransformedBag;", "import org.apache.commons.collections4.bag.TransformedSortedBag;", "import org.apache.commons.collections4.bag.TreeBag;", "import org.apache.commons.collections4.bag.UnmodifiableBag;", "import org.apache.commons.collections4.bag.UnmodifiableSortedBag;", "import org.apache.commons.collections4.functors.TruePredicate;", "import org.junit.jupiter.api.Test;"], "name": "BagUtilsTest", "description": "Unit tests for various utility methods in BagUtils class.", "class_members": {"variables": [{"name": "truePredicate", "type": "Predicate<Object>"}, {"name": "nopTransformer", "type": "Transformer<Object, Object>"}]}, "fixtures": [], "test_cases": [{"name": "testPredicatedBag", "primary_tested": ["BagUtils.predicatedBag(Bag,Predicate)"], "associated_methods": ["PredicatedBag.predicatedBag(Bag,Predicate)"], "external_dependencies": {"modules": ["HashBag", "PredicatedBag", "TruePredicate"], "class_members": [{"name": "truePredicate", "type": "variable"}]}, "category": "unit", "description": "Tests the predicatedBag method in BagUtils to ensure it returns a PredicatedBag and handles null inputs correctly."}, {"name": "testPredicatedSortedBag", "primary_tested": ["BagUtils.predicatedSortedBag(SortedBag,Predicate)"], "associated_methods": ["PredicatedSortedBag.predicatedSortedBag(SortedBag,Predicate)"], "external_dependencies": {"modules": ["TreeBag", "PredicatedSortedBag", "TruePredicate"], "class_members": [{"name": "truePredicate", "type": "variable"}]}, "category": "unit", "description": "Tests the predicatedSortedBag method in BagUtils to ensure it returns a PredicatedSortedBag and handles null inputs correctly."}, {"name": "testSynchronizedBag", "primary_tested": ["BagUtils.synchronizedBag(Bag)"], "associated_methods": ["SynchronizedBag.synchronizedBag(Bag)"], "external_dependencies": {"modules": ["HashBag", "SynchronizedBag"]}, "category": "unit", "description": "Tests the synchronizedBag method in BagUtils to ensure it returns a SynchronizedBag and handles null inputs correctly."}, {"name": "testSynchronizedSortedBag", "primary_tested": ["BagUtils.synchronizedSortedBag(SortedBag)"], "associated_methods": ["SynchronizedSortedBag.synchronizedSortedBag(SortedBag)"], "external_dependencies": {"modules": ["TreeBag", "SynchronizedSortedBag"]}, "category": "unit", "description": "Tests the synchronizedSortedBag method in BagUtils to ensure it returns a SynchronizedSortedBag and handles null inputs correctly."}, {"name": "testTransformedBag", "primary_tested": ["BagUtils.transformingBag(Bag,Transformer)"], "associated_methods": ["TransformedBag.transformingBag(Bag,Transformer)"], "external_dependencies": {"modules": ["HashBag", "TransformedBag", "TransformerUtils"], "class_members": [{"name": "nopTransformer", "type": "variable"}]}, "category": "unit", "description": "Tests the transformingBag method in BagUtils to ensure it returns a TransformedBag and handles null inputs correctly."}, {"name": "testTransformedSortedBag", "primary_tested": ["BagUtils.transformingSortedBag(SortedBag,Transformer)"], "associated_methods": ["TransformedSortedBag.transformingSortedBag(SortedBag,Transformer)"], "external_dependencies": {"modules": ["TreeBag", "TransformedSortedBag", "TransformerUtils"], "class_members": [{"name": "nopTransformer", "type": "variable"}]}, "category": "unit", "description": "Tests the transformingSortedBag method in BagUtils to ensure it returns a TransformedSortedBag and handles null inputs correctly."}, {"name": "testUnmodifiableBag", "primary_tested": ["BagUtils.unmodifiableBag(Bag)"], "associated_methods": ["UnmodifiableBag.unmodifiableBag(Bag)"], "external_dependencies": {"modules": ["HashBag", "UnmodifiableBag"]}, "category": "unit", "description": "Tests the unmodifiableBag method in BagUtils to ensure it returns an UnmodifiableBag and handles null inputs correctly."}, {"name": "testUnmodifiableSortedBag", "primary_tested": ["BagUtils.unmodifiableSortedBag(SortedBag)"], "associated_methods": ["UnmodifiableSortedBag.unmodifiableSortedBag(SortedBag)"], "external_dependencies": {"modules": ["TreeBag", "UnmodifiableSortedBag"]}, "category": "unit", "description": "Tests the unmodifiableSortedBag method in BagUtils to ensure it returns an UnmodifiableSortedBag and handles null inputs correctly."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/BooleanComparatorTest.java", "testclass_name": "BooleanComparatorTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNotEquals;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Comparator;", "import java.util.List;", "import org.junit.jupiter.api.Test;"], "name": "BooleanComparatorTest", "description": "Unit tests for BooleanComparator class, which compares Boolean objects.", "class_members": {"methods": [{"name": "allTests", "signature": "void allTests(boolean, BooleanComparator)"}, {"name": "falseFirstTests", "signature": "void falseFirstTests(BooleanComparator)"}, {"name": "nullArgumentTests", "signature": "void nullArgumentTests(BooleanComparator)"}, {"name": "orderIndependentTests", "signature": "void orderIndependentTests(BooleanComparator)"}, {"name": "trueFirstTests", "signature": "void trueFirstTests(BooleanComparator)"}]}, "test_cases": [{"name": "testConstructors", "primary_tested": ["BooleanComparator.BooleanComparator()"], "associated_methods": ["BooleanComparatorTest.allTests(boolean,BooleanComparator)"], "external_dependencies": {"modules": ["BooleanComparator"]}, "category": "unit", "description": "Tests the constructors of BooleanComparator and their behavior."}, {"name": "testEqualsCompatibleInstance", "primary_tested": ["BooleanComparator.equals(Object)"], "associated_methods": ["BooleanComparator.getFalseFirstComparator()", "BooleanComparator.booleanComparator(boolean)", "BooleanComparator.getTrueFirstComparator()"], "external_dependencies": {"modules": ["BooleanComparator"]}, "category": "unit", "description": "Tests the equality of different instances of BooleanComparator."}, {"name": "testStaticFactoryMethods", "primary_tested": ["BooleanComparator.getFalseFirstComparator()", "BooleanComparator.booleanComparator(boolean)", "BooleanComparator.getTrueFirstComparator()"], "associated_methods": ["BooleanComparatorTest.allTests(boolean,BooleanComparator)"], "external_dependencies": {"modules": ["BooleanComparator"]}, "category": "unit", "description": "Tests the static factory methods of BooleanComparator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/SingletonMapTest.java", "testclass_name": "SingletonMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertInstanceOf;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import org.apache.commons.collections4.BoundedMap;", "import org.apache.commons.collections4.KeyValue;", "import org.apache.commons.collections4.OrderedMap;", "import org.junit.jupiter.api.Test;"], "name": "SingletonMapTest", "description": "Unit tests for the SingletonMap class, focusing on its bounded map properties, cloning, and key-value handling.", "class_members": {"variables": [{"name": "ONE", "type": "static final Integer"}, {"name": "TWO", "type": "static final Integer"}, {"name": "TEN", "type": "static final String"}], "methods": [{"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "getNewSampleValues", "signature": "V[] getNewSampleValues()"}, {"name": "getSampleKeys", "signature": "K[] getSampleKeys()"}, {"name": "getSampleValues", "signature": "V[] getSampleValues()"}, {"name": "ignoredTests", "signature": "String[] ignoredTests()"}, {"name": "isPutAddSupported", "signature": "boolean isPutAddSupported()"}, {"name": "isRemoveSupported", "signature": "boolean isRemoveSupported()"}, {"name": "makeFullMap", "signature": "SingletonMap<K, V> makeFullMap()"}, {"name": "makeObject", "signature": "OrderedMap<K, V> makeObject()"}]}, "fixtures": [], "test_cases": [{"name": "testBoundedMap", "primary_tested": ["SingletonMap.size()", "SingletonMap.isFull()", "SingletonMap.maxSize()"], "associated_methods": ["SingletonMap.makeFullMap()"], "external_dependencies": {"modules": ["SingletonMap", "BoundedMap"], "class_members": [{"name": "makeFullMap", "type": "method"}]}, "category": "unit", "description": "Tests the bounded map properties of SingletonMap, including size, fullness, and max size."}, {"name": "testClone", "primary_tested": ["SingletonMap.clone()"], "associated_methods": ["SingletonMap.makeFullMap()"], "external_dependencies": {"modules": ["SingletonMap"], "class_members": [{"name": "makeFullMap", "type": "method"}]}, "category": "unit", "description": "Tests the cloning functionality of SingletonMap, ensuring the cloned map contains the same key-value pairs."}, {"name": "testKeyValue", "primary_tested": ["SingletonMap.getKey()", "SingletonMap.getValue()"], "associated_methods": ["SingletonMap.makeFullMap()"], "external_dependencies": {"modules": ["SingletonMap", "KeyValue"], "class_members": [{"name": "makeFullMap", "type": "method"}]}, "category": "unit", "description": "Tests the key-value handling of SingletonMap, ensuring the correct key and value are retrieved."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/functors/ComparatorPredicateTest.java", "testclass_name": "ComparatorPredicateTest", "dependencies": ["package org.apache.commons.collections4.functors;", "import static org.apache.commons.collections4.functors.ComparatorPredicate.comparatorPredicate;", "import java.util.Comparator;", "import org.apache.commons.collections4.Predicate;", "import org.apache.commons.collections4.functors.ComparatorPredicate.Criterion;", "import org.junit.jupiter.api.Test;"], "name": "ComparatorPredicateTest", "description": "Unit tests for the ComparatorPredicate class, which tests various comparison criteria using a custom comparator.", "class_members": {"nested_classes": [{"name": "TestComparator", "description": "Internal custom comparator class for testing purposes."}]}, "fixtures": [], "test_cases": [{"name": "testCompareEquals", "primary_tested": ["ComparatorPredicate.comparatorPredicate(Integer,TestComparator)"], "external_dependencies": {"modules": ["Integer", "Predicate", "ComparatorPredicate"], "class_members": [{"name": "TestComparator", "type": "nested_class"}]}, "category": "unit", "description": "Tests the equality comparison functionality of the ComparatorPredicate."}, {"name": "testCompareGreater", "primary_tested": ["ComparatorPredicate.comparatorPredicate(Integer,TestComparator,Criterion)"], "external_dependencies": {"modules": ["Integer", "Predicate", "ComparatorPredicate", "Criterion"], "class_members": [{"name": "TestComparator", "type": "nested_class"}]}, "category": "unit", "description": "Tests the greater than comparison functionality of the ComparatorPredicate."}, {"name": "testCompareGreaterOrEqual", "primary_tested": ["ComparatorPredicate.comparatorPredicate(Integer,TestComparator,Criterion)"], "external_dependencies": {"modules": ["Integer", "Predicate", "ComparatorPredicate", "Criterion"], "class_members": [{"name": "TestComparator", "type": "nested_class"}]}, "category": "unit", "description": "Tests the greater than or equal to comparison functionality of the ComparatorPredicate."}, {"name": "testCompareLess", "primary_tested": ["ComparatorPredicate.comparatorPredicate(Integer,TestComparator,Criterion)"], "external_dependencies": {"modules": ["Integer", "Predicate", "ComparatorPredicate", "Criterion"], "class_members": [{"name": "TestComparator", "type": "nested_class"}]}, "category": "unit", "description": "Tests the less than comparison functionality of the ComparatorPredicate."}, {"name": "testCompareLessOrEqual", "primary_tested": ["ComparatorPredicate.comparatorPredicate(Integer,TestComparator,Criterion)"], "external_dependencies": {"modules": ["Integer", "Predicate", "ComparatorPredicate", "Criterion"], "class_members": [{"name": "TestComparator", "type": "nested_class"}]}, "category": "unit", "description": "Tests the less than or equal to comparison functionality of the ComparatorPredicate."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/trie/UnmodifiableTrieTest.java", "testclass_name": "UnmodifiableTrieTest", "dependencies": ["package org.apache.commons.collections4.trie;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.apache.commons.collections4.Trie;", "import org.apache.commons.collections4.Unmodifiable;", "import org.apache.commons.collections4.map.AbstractSortedMapTest;", "import org.junit.jupiter.api.Test;"], "name": "UnmodifiableTrieTest", "description": "Tests for the UnmodifiableTrie class, ensuring that the Trie is unmodifiable.", "class_members": {"methods": [{"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "ignoredTests", "signature": "String[] ignoredTests()"}, {"name": "isPutAddSupported", "signature": "boolean isPutAddSupported()"}, {"name": "isPutChangeSupported", "signature": "boolean isPutChangeSupported()"}, {"name": "isRemoveSupported", "signature": "boolean isRemoveSupported()"}, {"name": "makeFullMap", "signature": "Trie<String, V> makeFullMap()"}, {"name": "makeObject", "signature": "Trie<String, V> makeObject()"}]}, "test_cases": [{"name": "testDecorateFactory", "primary_tested": ["UnmodifiableTrie.unmodifiableTrie(Trie<String, V>)"], "associated_methods": ["UnmodifiableTrieTest.makeFullMap()"], "external_dependencies": {"modules": ["UnmodifiableTrie", "Trie", "PatriciaTrie"], "class_members": [{"name": "makeFullMap", "type": "method"}]}, "category": "unit", "description": "Tests the factory method for creating an unmodifiable Trie and ensures it throws a NullPointerException if null is passed."}, {"name": "testUnmodifiable", "primary_tested": ["UnmodifiableTrie.unmodifiableTrie(Trie<String, V>)"], "associated_methods": ["UnmodifiableTrieTest.makeObject()", "UnmodifiableTrieTest.makeFullMap()"], "external_dependencies": {"modules": ["UnmodifiableTrie", "Trie", "PatriciaTrie", "Unmodifiable"], "class_members": [{"name": "makeObject", "type": "method"}, {"name": "makeFullMap", "type": "method"}]}, "category": "unit", "description": "Tests that the Trie created by the factory method is indeed unmodifiable."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/ComparatorChainTest.java", "testclass_name": "ComparatorChainTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.io.Serializable;", "import java.util.Arrays;", "import java.util.Comparator;", "import java.util.LinkedList;", "import java.util.List;", "import org.junit.jupiter.api.Test;"], "name": "ComparatorChainTest", "description": "Unit tests for the ComparatorChain class, which chains multiple comparators together.", "class_members": {"variables": [], "methods": [], "nested_classes": [{"name": "ColumnComparator", "description": "A comparator for PseudoRow objects based on a specific column index."}, {"name": "PseudoRow", "description": "A mock row object used for testing, containing an array of integers representing columns."}]}, "fixtures": [], "test_cases": [{"name": "testBadListComparatorChain", "primary_tested": ["ComparatorChain.compare(Integer,Integer)"], "external_dependencies": {"modules": ["ComparatorChain", "Integer"], "class_members": [], "project_specific_resources": []}, "category": "unit", "description": "Tests that an UnsupportedOperationException is thrown when a ComparatorChain is created with an empty list of comparators."}, {"name": "testBadNoopComparatorChain", "primary_tested": ["ComparatorChain.compare(Integer,Integer)"], "external_dependencies": {"modules": ["ComparatorChain", "Integer"], "class_members": [], "project_specific_resources": []}, "category": "unit", "description": "Tests that an UnsupportedOperationException is thrown when a ComparatorChain is created with no comparators."}, {"name": "testComparatorChainOnMinValuedComparator", "primary_tested": ["ComparatorChain.compare(Integer,Integer)"], "associated_methods": ["ComparatorChain.addComparator(Comparator,boolean)"], "external_dependencies": {"modules": ["ComparatorChain", "Integer"], "class_members": [], "project_specific_resources": []}, "category": "unit", "description": "Tests the ComparatorChain with a custom comparator that returns Integer.MIN_VALUE for negative comparisons."}, {"name": "testListComparatorChain", "primary_tested": ["ComparatorChain.compare(Integer,Integer)"], "associated_methods": ["ComparatorChain.addComparator(Comparator,boolean)"], "external_dependencies": {"modules": ["ComparatorChain", "Integer", "ComparableComparator"], "class_members": [], "project_specific_resources": []}, "category": "unit", "description": "Tests the ComparatorChain with a list of comparators containing a single ComparableComparator."}, {"name": "testNoopComparatorChain", "primary_tested": ["ComparatorChain.compare(Integer,Integer)"], "associated_methods": ["ComparatorChain.addComparator(Comparator,boolean)"], "external_dependencies": {"modules": ["ComparatorChain", "Integer", "ComparableComparator"], "class_members": [], "project_specific_resources": []}, "category": "unit", "description": "Tests the ComparatorChain with no initial comparators but adding a ComparableComparator later."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/DefaultedMapTest.java", "testclass_name": "DefaultedMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Map;", "import org.apache.commons.collections4.Factory;", "import org.apache.commons.collections4.FactoryUtils;", "import org.apache.commons.collections4.IterableMap;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.TransformerUtils;", "import org.apache.commons.collections4.functors.ConstantFactory;", "import org.junit.jupiter.api.Test;"], "name": "DefaultedMapTest", "description": "Unit tests for the DefaultedMap class, focusing on its factory methods and map get operations.", "class_members": {"variables": [{"name": "nullFactory", "type": "Factory<V>"}, {"name": "nullTransformer", "type": "Transformer<K, V>"}], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testFactoryMethods", "primary_tested": ["DefaultedMap.defaultedMap(Map<K, V>, V)", "DefaultedMap.defaultedMap(Map<K, V>, Factory<V>)", "DefaultedMap.defaultedMap(Map<K, V>, Transformer<K, V>)"], "external_dependencies": {"modules": ["DefaultedMap", "HashMap", "FactoryUtils", "TransformerUtils"], "class_members": [{"name": "nullFactory", "type": "variable"}, {"name": "nullTransformer", "type": "variable"}]}, "category": "unit", "description": "Tests the factory methods of DefaultedMap to ensure they throw NullPointerException when expected."}, {"name": "testMapGet", "primary_tested": ["DefaultedMap.get(Object)"], "associated_methods": ["DefaultedMap.size()", "DefaultedMap.containsKey(Object)", "DefaultedMap.put(K, V)"], "external_dependencies": {"modules": ["DefaultedMap", "HashMap"]}, "category": "unit", "description": "Tests the get operation of DefaultedMap to ensure it returns the default value for non-existent keys and the correct value for existing keys."}, {"name": "testMapGet2", "primary_tested": ["DefaultedMap.get(Object)"], "associated_methods": ["DefaultedMap.size()", "DefaultedMap.containsKey(Object)", "DefaultedMap.put(K, V)"], "external_dependencies": {"modules": ["DefaultedMap", "HashMap"]}, "category": "unit", "description": "Tests the get operation of DefaultedMap with a HashMap base to ensure it returns the default value for non-existent keys and the correct value for existing keys."}, {"name": "testMapGet3", "primary_tested": ["DefaultedMap.get(Object)"], "associated_methods": ["DefaultedMap.size()", "DefaultedMap.containsKey(Object)", "DefaultedMap.put(K, V)"], "external_dependencies": {"modules": ["DefaultedMap", "HashMap", "ConstantFactory"]}, "category": "unit", "description": "Tests the get operation of DefaultedMap with a ConstantFactory to ensure it returns the default value for non-existent keys and the correct value for existing keys."}, {"name": "testMapGet4", "primary_tested": ["DefaultedMap.get(Object)"], "associated_methods": ["DefaultedMap.size()", "DefaultedMap.containsKey(Object)", "DefaultedMap.put(K, V)"], "external_dependencies": {"modules": ["DefaultedMap", "HashMap"]}, "category": "unit", "description": "Tests the get operation of DefaultedMap with a custom Transformer to ensure it returns the default value for non-existent keys and the correct value for existing keys."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/SetUtilsTest.java", "testclass_name": "SetUtilsTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertInstanceOf;", "import static org.junit.jupiter.api.Assertions.assertNotEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.Set;", "import org.apache.commons.collections4.SetUtils.SetView;", "import org.apache.commons.collections4.set.PredicatedSet;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SetUtilsTest", "description": "Unit tests for various SetUtils operations including difference, disjunction, intersection, union, and more.", "class_members": {"variables": [{"name": "setA", "type": "Set<Integer>"}, {"name": "setB", "type": "Set<Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testDifference", "primary_tested": ["SetUtils.difference(Set,Set)"], "associated_methods": ["SetUtils.emptySet()"], "external_dependencies": {"modules": ["SetUtils", "SetView", "NullPointerException"], "class_members": [{"name": "setA", "type": "variable"}, {"name": "setB", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the difference operation between two sets."}, {"name": "testDisjunction", "primary_tested": ["SetUtils.disjunction(Set,Set)"], "associated_methods": ["SetUtils.emptySet()"], "external_dependencies": {"modules": ["SetUtils", "SetView", "NullPointerException"], "class_members": [{"name": "setA", "type": "variable"}, {"name": "setB", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the disjunction operation between two sets."}, {"name": "testEmptyIfNull", "primary_tested": ["SetUtils.emptyIfNull(Set)"], "external_dependencies": {"modules": ["SetUtils"]}, "category": "unit", "description": "Tests the emptyIfNull operation which returns an empty set if the input set is null."}, {"name": "testEquals", "primary_tested": ["SetUtils.isEqualSet(Set,Set)"], "external_dependencies": {"modules": ["SetUtils", "Arrays", "HashSet"]}, "category": "unit", "description": "Tests the isEqualSet operation which checks if two sets are equal."}, {"name": "testHashCode", "primary_tested": ["SetUtils.hashCodeForSet(Set)"], "external_dependencies": {"modules": ["SetUtils", "Arrays", "HashSet"]}, "category": "unit", "description": "Tests the hashCodeForSet operation which computes the hash code for a set."}, {"name": "testHashSet", "primary_tested": ["SetUtils.unmodifiableSet()", "SetUtils.hashSet(Object[])"], "external_dependencies": {"modules": ["SetUtils"]}, "category": "unit", "description": "Tests the creation of unmodifiable and hash sets using SetUtils."}, {"name": "testIntersection", "primary_tested": ["SetUtils.intersection(Set,Set)"], "associated_methods": ["SetUtils.emptySet()"], "external_dependencies": {"modules": ["SetUtils", "SetView", "NullPointerException"], "class_members": [{"name": "setA", "type": "variable"}, {"name": "setB", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the intersection operation between two sets."}, {"name": "testNewIdentityHashSet", "primary_tested": ["SetUtils.newIdentityHashSet()"], "external_dependencies": {"modules": ["SetUtils"]}, "category": "unit", "description": "Tests the creation of a new identity hash set using SetUtils."}, {"name": "testpredicatedSet", "primary_tested": ["SetUtils.predicatedSet(Set,Predicate)"], "external_dependencies": {"modules": ["SetUtils", "PredicatedSet", "Predicate", "NullPointerException"]}, "category": "unit", "description": "Tests the creation of a predicated set using SetUtils."}, {"name": "testUnion", "primary_tested": ["SetUtils.union(Set,Set)"], "associated_methods": ["SetUtils.emptySet()"], "external_dependencies": {"modules": ["SetUtils", "SetView", "NullPointerException"], "class_members": [{"name": "setA", "type": "variable"}, {"name": "setB", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the union operation between two sets."}, {"name": "testUnmodifiableSet", "primary_tested": ["SetUtils.unmodifiableSet()", "SetUtils.unmodifiableSet(Object[])"], "external_dependencies": {"modules": ["SetUtils"]}, "category": "unit", "description": "Tests the creation of unmodifiable sets using SetUtils."}, {"name": "testUnmodifiableSetWrap", "primary_tested": ["SetUtils.unmodifiableSet(Set)"], "external_dependencies": {"modules": ["SetUtils"]}, "category": "unit", "description": "Tests the wrapping of an existing set into an unmodifiable set using SetUtils."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/ObjectArrayListIteratorTest.java", "testclass_name": "ObjectArrayListIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertArrayEquals;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.ListIterator;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.Test;"], "name": "ObjectArrayListIteratorTest", "description": "Tests for the ObjectArrayListIterator class, focusing on ListIterator functionality.", "class_members": {"methods": [{"name": "makeArrayListIterator", "signature": "ObjectArrayListIterator<E> makeArrayListIterator(E[] array)"}, {"name": "makeEmptyIterator", "signature": "ObjectArrayListIterator<E> makeEmptyIterator()"}, {"name": "makeObject", "signature": "ObjectArrayListIterator<E> makeObject()"}]}, "test_cases": [{"name": "testListIterator", "primary_tested": ["ListIterator.previous()"], "associated_methods": ["ListIterator.hasNext()", "ListIterator.next()"], "external_dependencies": {"modules": ["ListIterator", "NoSuchElementException"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "description": "Tests the basic ListIterator functionality by iterating backwards using previous()."}, {"name": "testListIteratorSet", "primary_tested": ["ListIterator.set(E)"], "associated_methods": ["ListIterator.hasNext()", "ListIterator.next()"], "external_dependencies": {"modules": ["ListIterator", "IllegalStateException"], "class_members": [{"name": "makeArrayListIterator", "type": "method"}]}, "category": "unit", "description": "Tests the ListIterator set operation and ensures it throws IllegalStateException if set is called before next or previous."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/ReferenceMapTest.java", "testclass_name": "ReferenceMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.fail;", "import java.io.ByteArrayInputStream;", "import java.io.ByteArrayOutputStream;", "import java.io.IOException;", "import java.io.ObjectInputStream;", "import java.io.ObjectOutputStream;", "import java.io.Serializable;", "import java.lang.ref.WeakReference;", "import java.util.ArrayList;", "import java.util.Iterator;", "import java.util.List;", "import java.util.Map;", "import java.util.function.Consumer;", "import org.apache.commons.collections4.map.AbstractHashedMap.HashEntry;", "import org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceEntry;", "import org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceStrength;", "import org.junit.jupiter.api.Test;"], "name": "ReferenceMapTest", "description": "Unit tests for the ReferenceMap class, focusing on various functionalities such as purging, serialization, and iterator behavior.", "class_members": {"variables": [{"name": "keyReference", "type": "WeakReference<K>"}, {"name": "valueReference", "type": "WeakReference<V>"}], "methods": [{"name": "buildRefMap", "signature": "Map<K, V> buildRefMap()"}, {"name": "gc", "signature": "void gc()"}], "nested_classes": [{"name": "AccessibleEntry", "description": "Internal helper class extending ReferenceEntry to provide custom purge behavior."}]}, "fixtures": [], "test_cases": [{"name": "testCustomPurge", "primary_tested": ["ReferenceMap.createEntry(HashEntry<Integer, Integer>,int,Integer,Integer)"], "associated_methods": ["AccessibleEntry.onPurge()"], "external_dependencies": {"modules": ["ReferenceMap", "AccessibleEntry", "ArrayList", "Consumer", "Serializable"], "class_members": [{"name": "AccessibleEntry", "type": "nested_class"}]}, "category": "unit", "description": "Tests custom purge behavior by checking if expired values are added to a list."}, {"name": "testDataSizeAfterSerialization", "primary_tested": ["ReferenceMap.size()"], "associated_methods": ["ReferenceMap.put(String,String)", "ReferenceMap.data.length"], "external_dependencies": {"modules": ["ReferenceMap", "ByteArrayOutputStream", "ObjectOutputStream", "ByteArrayInputStream", "ObjectInputStream"]}, "category": "unit", "description": "Tests whether the 'data' HashEntry array size remains the same after serialization."}, {"name": "testIteratorLastEntryCanBeRemovedAfterHasNext", "primary_tested": ["ReferenceMap.entrySet().iterator()"], "associated_methods": ["ReferenceMap.put(Integer,Integer)", "ReferenceMap.isEmpty()"], "external_dependencies": {"modules": ["ReferenceMap", "Iterator", "Map.Entry"]}, "category": "unit", "description": "Tests whether the last entry can be removed after calling hasNext on the iterator."}, {"name": "testNullHandling", "primary_tested": ["ReferenceMap.get(null)", "ReferenceMap.containsKey(null)", "ReferenceMap.containsValue(null)", "ReferenceMap.remove(null)", "ReferenceMap.entrySet().contains(null)", "ReferenceMap.put(null,null)", "ReferenceMap.put(Object,null)", "ReferenceMap.put(null,Object)"], "external_dependencies": {"modules": ["ReferenceMap", "NullPointerException"]}, "category": "unit", "description": "Tests the handling of null values and keys in the ReferenceMap."}, {"name": "testPurgeValues", "primary_tested": ["ReferenceMap.isEmpty()"], "associated_methods": ["ReferenceMap.buildRefMap()"], "external_dependencies": {"modules": ["ReferenceMap", "WeakReference"], "class_members": [{"name": "buildRefMap", "type": "method"}]}, "category": "unit", "description": "Tests whether the purge values setting works by checking if references are released after garbage collection."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/functors/AllPredicateTest.java", "testclass_name": "AllPredicateTest", "dependencies": ["package org.apache.commons.collections4.functors;", "import static org.apache.commons.collections4.functors.AllPredicate.allPredicate;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Collection;", "import java.util.Collections;", "import org.apache.commons.collections4.Predicate;", "import org.junit.jupiter.api.Test;"], "name": "AllPredicateTest", "description": "Tests for the AllPredicate class in Apache Commons Collections, which evaluates to true if all predicates in a collection evaluate to true.", "class_members": {"variables": [], "methods": [{"name": "getPredicateInstance", "signature": "Predicate<Integer> getPredicateInstance(Collection<Predicate<Integer>> predicates)"}, {"name": "getPredicateInstance", "signature": "Predicate<Integer> getPredicateInstance(Predicate<? super Integer>... predicates)"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testAllTrue", "primary_tested": ["AllPredicate.allPredicate(Collection<Predicate<Integer>>)"], "external_dependencies": {"modules": ["AllPredicate", "Predicate"], "class_members": [{"name": "getPredicateInstance", "type": "method"}]}, "category": "unit", "description": "Tests whether multiple true predicates evaluate to true."}, {"name": "testEmptyArrayToGetInstance", "primary_tested": ["AllPredicate.allPredicate(Collection<Predicate<Integer>>)"], "external_dependencies": {"modules": ["AllPredicate", "Predicate"], "class_members": [{"name": "getPredicateInstance", "type": "method"}]}, "category": "unit", "description": "Verifies that providing an empty predicate array evaluates to true."}, {"name": "testEmptyCollectionToGetInstance", "primary_tested": ["AllPredicate.allPredicate(Collection<Predicate<Integer>>)"], "external_dependencies": {"modules": ["AllPredicate", "Predicate", "Collections"], "class_members": [{"name": "getPredicateInstance", "type": "method"}]}, "category": "unit", "description": "Verifies that providing an empty predicate collection evaluates to true."}, {"name": "testOneFalsePredicate", "primary_tested": ["AllPredicate.allPredicate(Collection<Predicate<Integer>>)"], "external_dependencies": {"modules": ["AllPredicate", "Predicate"], "class_members": [{"name": "createMockPredicate", "type": "method"}]}, "category": "unit", "description": "Tests whether a single false predicate evaluates to true."}, {"name": "testOneTruePredicate", "primary_tested": ["AllPredicate.allPredicate(Collection<Predicate<Integer>>)"], "external_dependencies": {"modules": ["AllPredicate", "Predicate"], "class_members": [{"name": "createMockPredicate", "type": "method"}]}, "category": "unit", "description": "Tests whether a single true predicate evaluates to true."}, {"name": "testTrueAndFalseCombined", "primary_tested": ["AllPredicate.allPredicate(Collection<Predicate<Integer>>)"], "external_dependencies": {"modules": ["AllPredicate", "Predicate"], "class_members": [{"name": "getPredicateInstance", "type": "method"}]}, "category": "unit", "description": "Tests whether combining some true and one false evaluates to false. Also verifies that only the first false predicate is actually evaluated."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/PredicatedSortedMapTest.java", "testclass_name": "PredicatedSortedMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.Comparator;", "import java.util.HashMap;", "import java.util.Iterator;", "import java.util.Map;", "import java.util.SortedMap;", "import java.util.TreeMap;", "import java.util.concurrent.ConcurrentSkipListMap;", "import org.apache.commons.collections4.Predicate;", "import org.apache.commons.collections4.functors.TruePredicate;", "import org.junit.jupiter.api.Test;"], "name": "PredicatedSortedMapTest", "description": "Unit tests for PredicatedSortedMap functionality, including entry set, put operations, and sorting order.", "class_members": {"variables": [{"name": "truePredicate", "type": "static final Predicate<Object>"}, {"name": "testPredicate", "type": "static final Predicate<Object>"}, {"name": "reverseStringComparator", "type": "final Comparator<K>"}], "methods": [{"name": "decorateMap", "signature": "SortedMap<K, V> decorateMap(SortedMap<K, V> map, Predicate<? super K> keyPredicate, Predicate<? super V> valuePredicate)"}, {"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "isAllowNullKey", "signature": "boolean isAllowNullKey()"}, {"name": "isSubMapViewsSerializable", "signature": "boolean isSubMapViewsSerializable()"}, {"name": "makeObject", "signature": "SortedMap<K, V> makeObject()"}, {"name": "makeTestMap", "signature": "SortedMap<K, V> makeTestMap()"}, {"name": "makeTestMapWithComparator", "signature": "SortedMap<K, V> makeTestMapWithComparator()"}], "nested_classes": [{"name": "ReverseStringComparator", "description": "Internal comparator class for reversing string comparison"}]}, "fixtures": [], "test_cases": [{"name": "testEntrySet", "primary_tested": ["SortedMap.entrySet()"], "external_dependencies": {"modules": ["TreeMap", "PredicatedSortedMap"], "class_members": [{"name": "truePredicate", "type": "variable"}]}, "category": "unit", "description": "Tests the entry set functionality of the SortedMap."}, {"name": "testPut", "primary_tested": ["Map.put(K,V)", "Map.putAll(Map<? extends K, ? extends V>)"], "associated_methods": ["Map.containsKey(Object)", "Map.containsValue(Object)"], "external_dependencies": {"modules": ["HashMap", "PredicatedSortedMap"], "class_members": [{"name": "testPredicate", "type": "variable"}]}, "category": "unit", "description": "Tests the put operation and putAll functionality of the SortedMap, ensuring illegal arguments are handled."}, {"name": "testReverseSortOrder", "primary_tested": ["SortedMap.put(K,V)", "SortedMap.lastKey()", "SortedMap.firstKey()", "SortedMap.tailMap(K).firstKey()", "SortedMap.headMap(K).lastKey()", "SortedMap.subMap(K,K).lastKey()", "SortedMap.comparator()"], "external_dependencies": {"modules": ["ConcurrentSkipListMap", "PredicatedSortedMap"], "class_members": [{"name": "testPredicate", "type": "variable"}, {"name": "reverseStringComparator", "type": "variable"}]}, "category": "unit", "description": "Tests the reverse sorting order of the SortedMap with a custom comparator."}, {"name": "testSortOrder", "primary_tested": ["SortedMap.put(K,V)", "SortedMap.firstKey()", "SortedMap.lastKey()", "SortedMap.tailMap(K).firstKey()", "SortedMap.headMap(K).lastKey()", "SortedMap.subMap(K,K).lastKey()", "SortedMap.comparator()"], "external_dependencies": {"modules": ["TreeMap", "PredicatedSortedMap"], "class_members": [{"name": "testPredicate", "type": "variable"}]}, "category": "unit", "description": "Tests the natural sorting order of the SortedMap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/FactoryUtilsTest.java", "testclass_name": "FactoryUtilsTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertNotSame;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.io.IOException;", "import java.io.Serializable;", "import java.util.Date;", "import java.util.TimeZone;", "import org.apache.commons.collections4.functors.ConstantFactory;", "import org.apache.commons.collections4.functors.ExceptionFactory;", "import org.junit.jupiter.api.Test;"], "name": "FactoryUtilsTest", "description": "Unit tests for FactoryUtils class, which provides utility methods for creating factories.", "class_members": {"nested_classes": [{"name": "Mock1", "description": "Internal mock class with constructors and equals/hashCode methods."}, {"name": "Mock2", "description": "Internal mock class implementing Serializable with constructors and equals/hashCode methods."}, {"name": "Mock3", "description": "Internal mock class with a static counter and a default constructor."}]}, "fixtures": [], "test_cases": [{"name": "testConstantFactoryConstant", "primary_tested": ["FactoryUtils.constantFactory(Integer)"], "external_dependencies": {"modules": ["Factory", "FactoryUtils", "Integer"]}, "category": "unit", "description": "Tests the constant factory functionality with a non-null constant."}, {"name": "testConstantFactoryNull", "primary_tested": ["FactoryUtils.constantFactory(Object)"], "external_dependencies": {"modules": ["Factory", "FactoryUtils"]}, "category": "unit", "description": "Tests the constant factory functionality with a null constant."}, {"name": "testExceptionFactory", "primary_tested": ["FactoryUtils.exceptionFactory()"], "external_dependencies": {"modules": ["FactoryUtils", "FunctorException"]}, "category": "unit", "description": "Tests the exception factory functionality."}, {"name": "testInstantiateFactoryComplex", "primary_tested": ["FactoryUtils.instantiateFactory(Class,Class[],Object[])"], "external_dependencies": {"modules": ["Factory", "FactoryUtils", "Date", "TimeZone"]}, "category": "unit", "description": "Tests the instantiate factory functionality with complex parameters."}, {"name": "testInstantiateFactoryMismatch", "primary_tested": ["FactoryUtils.instantiateFactory(Class,Class[],Object[])"], "external_dependencies": {"modules": ["FactoryUtils", "Date"]}, "category": "unit", "description": "Tests the instantiate factory functionality with mismatched parameters."}, {"name": "testInstantiateFactoryNoConstructor", "primary_tested": ["FactoryUtils.instantiateFactory(Class,Class[],Object[])"], "external_dependencies": {"modules": ["FactoryUtils", "Date"]}, "category": "unit", "description": "Tests the instantiate factory functionality with no matching constructor."}, {"name": "testInstantiateFactoryNull", "primary_tested": ["FactoryUtils.instantiateFactory(Class)"], "external_dependencies": {"modules": ["FactoryUtils"]}, "category": "unit", "description": "Tests the instantiate factory functionality with a null class."}, {"name": "testInstantiateFactorySimple", "primary_tested": ["FactoryUtils.instantiateFactory(Class)"], "external_dependencies": {"modules": ["Factory", "FactoryUtils", "Mock3"]}, "category": "unit", "description": "Tests the instantiate factory functionality with a simple class."}, {"name": "testNullFactory", "primary_tested": ["FactoryUtils.nullFactory()"], "external_dependencies": {"modules": ["Factory", "FactoryUtils"]}, "category": "unit", "description": "Tests the null factory functionality."}, {"name": "testPrototypeFactoryNull", "primary_tested": ["FactoryUtils.prototypeFactory(Object)"], "external_dependencies": {"modules": ["ConstantFactory", "FactoryUtils"]}, "category": "unit", "description": "Tests the prototype factory functionality with a null prototype."}, {"name": "testPrototypeFactoryPublicBad", "primary_tested": ["FactoryUtils.prototypeFactory(Object)"], "external_dependencies": {"modules": ["FactoryUtils"]}, "category": "unit", "description": "Tests the prototype factory functionality with a bad prototype."}, {"name": "testPrototypeFactoryPublicCloneMethod", "primary_tested": ["FactoryUtils.prototypeFactory(Date)"], "external_dependencies": {"modules": ["Factory", "FactoryUtils", "Date"]}, "category": "unit", "description": "Tests the prototype factory functionality with a prototype having a public clone method."}, {"name": "testPrototypeFactoryPublicCopyConstructor", "primary_tested": ["FactoryUtils.prototypeFactory(Mock1)"], "external_dependencies": {"modules": ["Factory", "FactoryUtils", "Mock1"]}, "category": "unit", "description": "Tests the prototype factory functionality with a prototype having a public copy constructor."}, {"name": "testPrototypeFactoryPublicSerialization", "primary_tested": ["FactoryUtils.prototypeFactory(Integer)"], "external_dependencies": {"modules": ["Factory", "FactoryUtils", "Integer"]}, "category": "unit", "description": "Tests the prototype factory functionality with a prototype that is serializable."}, {"name": "testPrototypeFactoryPublicSerializationError", "primary_tested": ["FactoryUtils.prototypeFactory(Mock2)"], "external_dependencies": {"modules": ["Factory", "FactoryUtils", "Mock2", "FunctorException", "IOException"]}, "category": "unit", "description": "Tests the prototype factory functionality with a prototype that causes a serialization error."}, {"name": "testSingletonPatternInSerialization", "primary_tested": [], "external_dependencies": {"modules": ["ExceptionFactory", "TestUtils"]}, "category": "unit", "description": "Tests that all Factory singletons hold the singleton pattern in the serialization/deserialization process."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/ArrayIteratorTest.java", "testclass_name": "ArrayIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.Iterator;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.Test;"], "name": "ArrayIteratorTest", "description": "Unit tests for the ArrayIterator class in the Apache Commons Collections library.", "class_members": {"variables": [{"name": "testArray", "type": "String[]"}], "methods": [{"name": "makeEmptyIterator", "signature": "ArrayIterator<E> makeEmptyIterator()"}, {"name": "makeObject", "signature": "ArrayIterator<E> makeObject()"}, {"name": "supportsRemove", "signature": "boolean supportsRemove()"}]}, "test_cases": [{"name": "testIterator", "primary_tested": ["Iterator.next()"], "associated_methods": ["Iterator.hasNext()"], "external_dependencies": {"modules": ["ArrayIterator", "Iterator", "NoSuchElementException"], "class_members": [{"name": "testArray", "type": "variable"}, {"name": "makeObject", "type": "method"}]}, "category": "unit", "description": "Tests the iteration functionality of the ArrayIterator, ensuring correct values and behavior when the iterator is exhausted."}, {"name": "testNullArray", "primary_tested": ["ArrayIterator.ArrayIterator(Object[])"], "external_dependencies": {"modules": ["ArrayIterator", "NullPointerException"]}, "category": "unit", "description": "Tests the behavior of the ArrayIterator constructor when a null array is provided, expecting a NullPointerException."}, {"name": "testReset", "primary_tested": ["ArrayIterator.reset()"], "associated_methods": ["ArrayIterator.next()"], "external_dependencies": {"modules": ["ArrayIterator"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "description": "Tests the reset functionality of the ArrayIterator, ensuring it correctly resets the iterator to the beginning of the array."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/sequence/SequencesComparatorTest.java", "testclass_name": "SequencesComparatorTest", "dependencies": ["package org.apache.commons.collections4.sequence;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.List;", "import java.util.Random;", "import org.apache.commons.lang3.StringUtils;", "import org.junit.jupiter.api.AfterEach;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SequencesComparatorTest", "description": "Unit tests for the SequencesComparator class, which compares sequences and generates scripts for modifications.", "class_members": {"variables": [{"name": "before", "type": "List<String>"}, {"name": "after", "type": "List<String>"}, {"name": "length", "type": "int[]"}], "methods": [{"name": "sequence", "signature": "List<Character> sequence(String)"}], "nested_classes": [{"name": "ExecutionVisitor", "description": "Internal helper class implementing CommandVisitor to process sequences."}]}, "fixtures": ["setUp", "tearDown"], "test_cases": [{"name": "testExecution", "primary_tested": ["SequencesComparator.getScript().visit(CommandVisitor)"], "associated_methods": ["ExecutionVisitor.setList(List<Character>)", "ExecutionVisitor.getString()"], "external_dependencies": {"modules": ["SequencesComparator", "ExecutionVisitor", "List", "Character"], "class_members": [{"name": "before", "type": "variable"}, {"name": "after", "type": "variable"}, {"name": "sequence", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the execution of the script generated by SequencesComparator to transform 'before' sequences into 'after' sequences."}, {"name": "testLength", "primary_tested": ["SequencesComparator.getScript().getModifications()"], "external_dependencies": {"modules": ["SequencesComparator", "List", "Character"], "class_members": [{"name": "before", "type": "variable"}, {"name": "after", "type": "variable"}, {"name": "length", "type": "variable"}, {"name": "sequence", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the number of modifications returned by the script generated by SequencesComparator."}, {"name": "testMinimal", "primary_tested": ["SequencesComparator.getScript().getModifications()"], "external_dependencies": {"modules": ["SequencesComparator", "List", "String", "Random"], "class_members": [{"name": "sequence", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the minimal number of modifications required to transform a sequence based on random insertions and deletions."}, {"name": "testShadok", "primary_tested": ["SequencesComparator.getScript().visit(CommandVisitor)"], "associated_methods": ["ExecutionVisitor.setList(List<String>)", "ExecutionVisitor.getString()"], "external_dependencies": {"modules": ["SequencesComparator", "ExecutionVisitor", "List", "String", "StringBuilder"], "class_members": [{"name": "sequence", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the transformation of Shadok sentences using the script generated by SequencesComparator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableOrderedMapIteratorTest.java", "testclass_name": "UnmodifiableOrderedMapIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertNotSame;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Map;", "import java.util.TreeMap;", "import org.apache.commons.collections4.OrderedMap;", "import org.apache.commons.collections4.OrderedMapIterator;", "import org.apache.commons.collections4.Unmodifiable;", "import org.apache.commons.collections4.map.ListOrderedMap;", "import org.junit.jupiter.api.Test;"], "name": "UnmodifiableOrderedMapIteratorTest", "description": "Tests for the UnmodifiableOrderedMapIterator class, which ensures that the OrderedMapIterator is unmodifiable.", "class_members": {"methods": [{"name": "getConfirmedMap", "signature": "Map<K, V> getConfirmedMap()"}, {"name": "getMap", "signature": "OrderedMap<K, V> getMap()"}, {"name": "makeEmptyIterator", "signature": "OrderedMapIterator<K, V> makeEmptyIterator()"}, {"name": "makeObject", "signature": "OrderedMapIterator<K, V> makeObject()"}, {"name": "supportsRemove", "signature": "boolean supportsRemove()"}, {"name": "supportsSetValue", "signature": "boolean supportsSetValue()"}]}, "fixtures": [], "test_cases": [{"name": "testDecorateFactory", "primary_tested": ["UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator(OrderedMapIterator<K, V>)"], "associated_methods": ["ListOrderedMap.mapIterator()"], "external_dependencies": {"modules": ["UnmodifiableOrderedMapIterator", "ListOrderedMap", "OrderedMapIterator"], "class_members": [{"name": "makeObject", "type": "method"}, {"name": "getMap", "type": "method"}]}, "category": "unit", "description": "Tests the factory method for creating an unmodifiable OrderedMapIterator and ensures it handles null input correctly."}, {"name": "testOrderedMapIterator", "primary_tested": ["UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator(OrderedMapIterator<K, V>)"], "external_dependencies": {"modules": ["UnmodifiableOrderedMapIterator", "Unmodifiable", "OrderedMapIterator"], "class_members": [{"name": "makeEmptyIterator", "type": "method"}]}, "category": "unit", "description": "Tests that the OrderedMapIterator created by the factory method is indeed unmodifiable."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/ClosureUtilsTest.java", "testclass_name": "ClosureUtilsTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.ArrayList;", "import java.util.Collection;", "import java.util.Collections;", "import java.util.HashMap;", "import java.util.Map;", "import org.apache.commons.collections4.functors.EqualPredicate;", "import org.apache.commons.collections4.functors.ExceptionClosure;", "import org.apache.commons.collections4.functors.FalsePredicate;", "import org.apache.commons.collections4.functors.NOPClosure;", "import org.apache.commons.collections4.functors.TruePredicate;", "import org.junit.jupiter.api.Test;"], "name": "ClosureUtilsTest", "description": "Unit tests for ClosureUtils class, which provides utility methods for creating and manipulating Closure objects.", "class_members": {"variables": [{"name": "cString", "type": "static final Object"}], "methods": [], "nested_classes": [{"name": "MockClosure", "description": "Internal helper class implementing Closure interface for testing purposes."}, {"name": "MockTransformer", "description": "Internal helper class implementing Transformer interface for testing purposes."}]}, "fixtures": [], "test_cases": [{"name": "testChainedClosure", "primary_tested": ["ClosureUtils.chainedClosure(Closure,Closure)"], "associated_methods": ["MockClosure.reset()"], "external_dependencies": {"modules": ["ClosureUtils", "MockClosure", "NOPClosure", "Collections"], "class_members": [{"name": "cString", "type": "variable"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the chainedClosure functionality of ClosureUtils, ensuring that multiple closures are executed in sequence."}, {"name": "testDoWhileClosure", "primary_tested": ["ClosureUtils.doWhileClosure(Closure,Predicate)"], "associated_methods": [], "external_dependencies": {"modules": ["ClosureUtils", "MockClosure", "FalsePredicate", "PredicateUtils"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the doWhileClosure functionality of ClosureUtils, ensuring that the closure is executed at least once and then repeatedly based on the predicate."}, {"name": "testExceptionClosure", "primary_tested": ["ClosureUtils.exceptionClosure()"], "associated_methods": [], "external_dependencies": {"modules": ["ClosureUtils", "ExceptionClosure", "FunctorException"], "class_members": [{"name": "cString", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the exceptionClosure functionality of ClosureUtils, ensuring that an exception is thrown when the closure is executed."}, {"name": "testForClosure", "primary_tested": ["ClosureUtils.forClosure(int,Closure)"], "associated_methods": [], "external_dependencies": {"modules": ["ClosureUtils", "MockClosure", "NOPClosure"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the forClosure functionality of ClosureUtils, ensuring that the closure is executed a specified number of times."}, {"name": "testIfClosure", "primary_tested": ["ClosureUtils.ifClosure(Predicate,Closure)"], "associated_methods": [], "external_dependencies": {"modules": ["ClosureUtils", "MockClosure", "TruePredicate", "FalsePredicate"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the ifClosure functionality of ClosureUtils, ensuring that the closure is executed based on the predicate."}, {"name": "testInvokeClosure", "primary_tested": ["ClosureUtils.invokerClosure(String)"], "associated_methods": [], "external_dependencies": {"modules": ["ClosureUtils"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the invokerClosure functionality of ClosureUtils, ensuring that a method is invoked on the input object."}, {"name": "testNopClosure", "primary_tested": ["ClosureUtils.nopClosure()"], "associated_methods": [], "external_dependencies": {"modules": ["ClosureUtils", "NOPClosure"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the nopClosure functionality of ClosureUtils, ensuring that the closure does nothing."}, {"name": "testSingletonPatternInSerialization", "primary_tested": [], "associated_methods": [], "external_dependencies": {"modules": ["ExceptionClosure", "NOPClosure", "TestUtils"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that all Closure singletons hold the singleton pattern in the serialization/deserialization process."}, {"name": "testSwitchClosure", "primary_tested": ["ClosureUtils.switchClosure(Predicate[],Closure[])"], "associated_methods": [], "external_dependencies": {"modules": ["ClosureUtils", "MockClosure", "EqualPredicate", "NOPClosure", "Collections"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the switchClosure functionality of ClosureUtils, ensuring that the appropriate closure is executed based on the predicate."}, {"name": "testSwitchMapClosure", "primary_tested": ["ClosureUtils.switchMapClosure(Map)"], "associated_methods": [], "external_dependencies": {"modules": ["ClosureUtils", "MockClosure", "NOPClosure", "Collections"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the switchMapClosure functionality of ClosureUtils, ensuring that the appropriate closure is executed based on the map key."}, {"name": "testTransformerClosure", "primary_tested": ["ClosureUtils.asClosure(Transformer)"], "associated_methods": [], "external_dependencies": {"modules": ["ClosureUtils", "MockTransformer", "NOPClosure"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the asClosure functionality of ClosureUtils, ensuring that a Transformer is wrapped as a Closure."}, {"name": "testWhileClosure", "primary_tested": ["ClosureUtils.whileClosure(Predicate,Closure)"], "associated_methods": [], "external_dependencies": {"modules": ["ClosureUtils", "MockClosure", "FalsePredicate", "PredicateUtils", "NOPClosure"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the whileClosure functionality of ClosureUtils, ensuring that the closure is executed repeatedly based on the predicate."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/SingletonIteratorTest.java", "testclass_name": "SingletonIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Iterator;", "import java.util.NoSuchElementException;", "import org.apache.commons.collections4.ResettableIterator;", "import org.junit.jupiter.api.Test;"], "name": "SingletonIteratorTest", "description": "Unit tests for the SingletonIterator class, which is a ResettableIterator that iterates over a single element.", "class_members": {"variables": [{"name": "testValue", "type": "static final Object"}], "methods": [{"name": "makeEmptyIterator", "signature": "SingletonIterator<E> makeEmptyIterator()"}, {"name": "makeObject", "signature": "SingletonIterator<E> makeObject()"}, {"name": "supportsEmptyIterator", "signature": "boolean supportsEmptyIterator()"}, {"name": "supportsRemove", "signature": "boolean supportsRemove()"}]}, "fixtures": [], "test_cases": [{"name": "testIterator", "primary_tested": ["SingletonIterator.hasNext()", "SingletonIterator.next()"], "associated_methods": ["SingletonIterator.remove()"], "external_dependencies": {"modules": ["Iterator", "NoSuchElementException"], "class_members": [{"name": "testValue", "type": "variable"}, {"name": "makeObject", "type": "method"}]}, "category": "unit", "description": "Tests the basic iterator functionality of SingletonIterator, including hasNext, next, and handling NoSuchElementException."}, {"name": "testReset", "primary_tested": ["SingletonIterator.reset()"], "associated_methods": ["SingletonIterator.hasNext()", "SingletonIterator.next()"], "external_dependencies": {"modules": ["ResettableIterator"], "class_members": [{"name": "testValue", "type": "variable"}, {"name": "makeObject", "type": "method"}]}, "category": "unit", "description": "Tests the reset functionality of SingletonIterator, ensuring that the iterator can be reset and used multiple times."}, {"name": "testSingletonIteratorRemove", "primary_tested": ["SingletonIterator.remove()"], "associated_methods": ["SingletonIterator.hasNext()", "SingletonIterator.next()", "SingletonIterator.reset()"], "external_dependencies": {"modules": ["ResettableIterator"], "class_members": []}, "category": "unit", "description": "Tests the remove functionality of SingletonIterator, ensuring that the element can be removed and the iterator behaves correctly afterwards."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/ReferenceIdentityMapTest.java", "testclass_name": "ReferenceIdentityMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.fail;", "import java.lang.ref.WeakReference;", "import java.util.Iterator;", "import java.util.Map;", "import org.apache.commons.collections4.IterableMap;", "import org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceStrength;", "import org.junit.jupiter.api.Test;"], "name": "ReferenceIdentityMapTest", "description": "Unit tests for the ReferenceIdentityMap class, focusing on reference handling and identity-based operations.", "class_members": {"variables": [{"name": "I1A", "type": "static final Integer"}, {"name": "I1B", "type": "static final Integer"}, {"name": "I2A", "type": "static final Integer"}, {"name": "I2B", "type": "static final Integer"}, {"name": "keyReference", "type": "WeakReference<K>"}, {"name": "valueReference", "type": "WeakReference<V>"}], "methods": [{"name": "gc", "signature": "static void gc()"}, {"name": "buildRefMap", "signature": "private Map<K, V> buildRefMap()"}, {"name": "getCompatibilityVersion", "signature": "public String getCompatibilityVersion()"}, {"name": "isAllowNullKey", "signature": "public boolean isAllowNullKey()"}, {"name": "isAllowNullValue", "signature": "public boolean isAllowNullValue()"}, {"name": "makeConfirmedMap", "signature": "public Map<K, V> makeConfirmedMap()"}, {"name": "makeObject", "signature": "public ReferenceIdentityMap<K, V> makeObject()"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testBasics", "primary_tested": ["ReferenceIdentityMap.put(K,V)", "ReferenceIdentityMap.get(Object)", "ReferenceIdentityMap.containsKey(Object)", "ReferenceIdentityMap.containsValue(Object)"], "external_dependencies": {"modules": ["ReferenceIdentityMap", "IterableMap", "Integer"], "class_members": [{"name": "I1A", "type": "variable"}, {"name": "I1B", "type": "variable"}, {"name": "I2A", "type": "variable"}, {"name": "I2B", "type": "variable"}]}, "category": "unit", "description": "Tests basic operations of ReferenceIdentityMap, including put, get, containsKey, and containsValue."}, {"name": "testHashEntry", "primary_tested": ["ReferenceIdentityMap.put(K,V)", "ReferenceIdentityMap.entrySet()"], "external_dependencies": {"modules": ["ReferenceIdentityMap", "IterableMap", "Integer"], "class_members": [{"name": "I1A", "type": "variable"}, {"name": "I1B", "type": "variable"}, {"name": "I2A", "type": "variable"}]}, "category": "unit", "description": "Tests the behavior of entrySet and equality of entries in ReferenceIdentityMap."}, {"name": "testNullHandling", "primary_tested": ["ReferenceIdentityMap.get(Object)", "ReferenceIdentityMap.containsKey(Object)", "ReferenceIdentityMap.containsValue(Object)", "ReferenceIdentityMap.remove(Object)", "ReferenceIdentityMap.entrySet().contains(Object)", "ReferenceIdentityMap.put(K,V)"], "external_dependencies": {"modules": ["ReferenceIdentityMap", "NullPointerException"], "class_members": []}, "category": "unit", "description": "Tests the handling of null values and keys in ReferenceIdentityMap, ensuring proper exceptions are thrown."}, {"name": "testPurgeValues", "primary_tested": ["ReferenceIdentityMap.isEmpty()"], "associated_methods": ["ReferenceIdentityMap.buildRefMap()"], "external_dependencies": {"modules": ["ReferenceIdentityMap", "WeakReference"], "class_members": [{"name": "keyReference", "type": "variable"}, {"name": "valueReference", "type": "variable"}, {"name": "buildRefMap", "type": "method"}]}, "category": "unit", "description": "Tests the purging of values in ReferenceIdentityMap, ensuring weak references are properly released."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIteratorTest.java", "testclass_name": "SingletonListIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ListIterator;", "import java.util.NoSuchElementException;", "import org.apache.commons.collections4.ResettableListIterator;", "import org.junit.jupiter.api.Test;"], "name": "SingletonListIteratorTest", "description": "Unit tests for the SingletonListIterator class, which is a ListIterator implementation that only contains a single element.", "class_members": {"variables": [{"name": "testValue", "type": "static final Object"}], "methods": [{"name": "makeEmptyIterator", "signature": "SingletonListIterator<E> makeEmptyIterator()"}, {"name": "makeObject", "signature": "SingletonListIterator<E> makeObject()"}, {"name": "supportsAdd", "signature": "boolean supportsAdd()"}, {"name": "supportsEmptyIterator", "signature": "boolean supportsEmptyIterator()"}, {"name": "supportsRemove", "signature": "boolean supportsRemove()"}]}, "test_cases": [{"name": "testIterator", "primary_tested": ["SingletonListIterator.hasNext()", "SingletonListIterator.hasPrevious()", "SingletonListIterator.nextIndex()", "SingletonListIterator.previousIndex()", "SingletonListIterator.next()", "SingletonListIterator.previous()"], "associated_methods": ["SingletonListIterator.makeObject()"], "external_dependencies": {"modules": ["ListIterator", "NoSuchElementException"], "class_members": [{"name": "testValue", "type": "variable"}]}, "category": "unit", "description": "Tests the basic functionality of the SingletonListIterator, including hasNext, hasPrevious, nextIndex, previousIndex, next, and previous methods."}, {"name": "testReset", "primary_tested": ["SingletonListIterator.reset()"], "associated_methods": ["SingletonListIterator.makeObject()"], "external_dependencies": {"modules": ["ResettableListIterator"], "class_members": [{"name": "testValue", "type": "variable"}]}, "category": "unit", "description": "Tests the reset functionality of the SingletonListIterator, ensuring that the iterator can be reset to its initial state."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/ObjectArrayIteratorTest.java", "testclass_name": "ObjectArrayIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.Iterator;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.Test;"], "name": "ObjectArrayIteratorTest", "description": "Unit tests for the ObjectArrayIterator class, which is part of the Apache Commons Collections4 library.", "class_members": {"variables": [{"name": "testArray", "type": "String[]"}], "methods": [{"name": "makeArrayIterator", "signature": "ObjectArrayIterator<E> makeArrayIterator()"}, {"name": "makeArrayIterator", "signature": "ObjectArrayIterator<E> makeArrayIterator(E[] array)"}, {"name": "makeArrayIterator", "signature": "ObjectArrayIterator<E> makeArrayIterator(E[] array, int index)"}, {"name": "makeArrayIterator", "signature": "ObjectArrayIterator<E> makeArrayIterator(E[] array, int start, int end)"}, {"name": "makeEmptyIterator", "signature": "ObjectArrayIterator<E> makeEmptyIterator()"}, {"name": "makeObject", "signature": "ObjectArrayIterator<E> makeObject()"}, {"name": "supportsRemove", "signature": "boolean supportsRemove()"}]}, "test_cases": [{"name": "testIterator", "primary_tested": ["Iterator.next()"], "associated_methods": ["Iterator.hasNext()"], "external_dependencies": {"modules": ["Iterator", "NoSuchElementException"], "class_members": [{"name": "testArray", "type": "variable"}, {"name": "makeObject", "type": "method"}]}, "category": "unit", "description": "Tests the iteration functionality of the ObjectArrayIterator, ensuring it correctly iterates over the array and throws NoSuchElementException when exhausted."}, {"name": "testNullArray", "primary_tested": ["ObjectArrayIterator.ObjectArrayIterator(E[] array)"], "external_dependencies": {"modules": ["NullPointerException"], "class_members": [{"name": "makeArrayIterator", "type": "method"}]}, "category": "unit", "description": "Tests that creating an ObjectArrayIterator with a null array throws a NullPointerException."}, {"name": "testReset", "primary_tested": ["ObjectArrayIterator.reset()"], "associated_methods": ["ObjectArrayIterator.next()"], "external_dependencies": {"modules": ["ObjectArrayIterator"], "class_members": [{"name": "testArray", "type": "variable"}, {"name": "makeArrayIterator", "type": "method"}]}, "category": "unit", "description": "Tests the reset functionality of the ObjectArrayIterator, ensuring it correctly resets the iterator to the beginning of the array."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/NodeListIteratorTest.java", "testclass_name": "NodeListIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.easymock.EasyMock.createMock;", "import static org.easymock.EasyMock.expect;", "import static org.easymock.EasyMock.replay;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.Iterator;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import org.w3c.dom.Element;", "import org.w3c.dom.Node;", "import org.w3c.dom.NodeList;", "import org.w3c.dom.Text;"], "name": "NodeListIteratorTest", "description": "Unit tests for NodeListIterator class, focusing on different constructors and edge cases.", "class_members": {"variables": [{"name": "nodes", "type": "Node[]"}, {"name": "createIteratorWithStandardConstr", "type": "boolean"}], "methods": [{"name": "makeEmptyIterator", "signature": "Iterator<Node> makeEmptyIterator()"}, {"name": "makeObject", "signature": "Iterator<Node> makeObject()"}, {"name": "setUp", "signature": "void setUp() throws Exception"}, {"name": "supportsRemove", "signature": "boolean supportsRemove()"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEmptyIteratorWithNodeConstructor", "primary_tested": ["NodeListIterator.NodeListIterator(Node)"], "associated_methods": ["NodeListIteratorTest.testEmptyIterator()"], "external_dependencies": {"modules": ["NodeListIterator", "Node"], "class_members": [{"name": "createIteratorWithStandardConstr", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the constructor of NodeListIterator with a Node parameter for an empty iterator."}, {"name": "testFullIteratorWithNodeConstructor", "primary_tested": ["NodeListIterator.NodeListIterator(Node)"], "associated_methods": ["NodeListIteratorTest.testFullIterator()"], "external_dependencies": {"modules": ["NodeListIterator", "Node"], "class_members": [{"name": "createIteratorWithStandardConstr", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the constructor of NodeListIterator with a Node parameter for a full iterator."}, {"name": "testNullConstructor", "primary_tested": ["NodeListIterator.NodeListIterator(Node)"], "external_dependencies": {"modules": ["NodeListIterator", "Node"]}, "category": "unit", "fixtures_used": [], "description": "Tests the constructor of NodeListIterator with a null Node parameter, expecting a NullPointerException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/SingletonIterator2Test.java", "testclass_name": "SingletonIterator2Test", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Iterator;", "import java.util.NoSuchElementException;", "import org.apache.commons.collections4.ResettableIterator;", "import org.junit.jupiter.api.Test;"], "name": "SingletonIterator2Test", "description": "Tests for the SingletonIterator2 class, focusing on its iterator and reset functionalities.", "class_members": {"variables": [{"name": "testValue", "type": "static final Object"}], "methods": [{"name": "makeEmptyIterator", "signature": "SingletonIterator<E> makeEmptyIterator()"}, {"name": "makeObject", "signature": "SingletonIterator<E> makeObject()"}, {"name": "supportsEmptyIterator", "signature": "boolean supportsEmptyIterator()"}, {"name": "supportsRemove", "signature": "boolean supportsRemove()"}]}, "test_cases": [{"name": "testIterator", "primary_tested": ["SingletonIterator.hasNext()", "SingletonIterator.next()"], "associated_methods": ["SingletonIterator.remove()"], "external_dependencies": {"modules": ["Iterator", "NoSuchElementException"], "class_members": [{"name": "testValue", "type": "variable"}, {"name": "makeObject", "type": "method"}]}, "category": "unit", "description": "Tests the basic iterator functionality of SingletonIterator, including hasNext, next, and exception handling."}, {"name": "testReset", "primary_tested": ["ResettableIterator.reset()"], "associated_methods": ["ResettableIterator.hasNext()", "ResettableIterator.next()"], "external_dependencies": {"modules": ["ResettableIterator"], "class_members": [{"name": "testValue", "type": "variable"}, {"name": "makeObject", "type": "method"}]}, "category": "unit", "description": "Tests the reset functionality of ResettableIterator, ensuring that the iterator can be reset and used multiple times."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/splitmap/TransformedSplitMapTest.java", "testclass_name": "TransformedSplitMapTest", "dependencies": ["package org.apache.commons.collections4.splitmap;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.io.FileInputStream;", "import java.io.IOException;", "import java.io.ObjectInputStream;", "import java.math.BigInteger;", "import java.util.HashMap;", "import org.apache.commons.collections4.BulkTest;", "import org.apache.commons.collections4.MapIterator;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.functors.NOPTransformer;", "import org.apache.commons.lang3.StringUtils;", "import org.junit.jupiter.api.Test;"], "name": "TransformedSplitMapTest", "description": "Unit tests for TransformedSplitMap functionality.", "class_members": {"variables": [{"name": "intToString", "type": "Transformer<Integer, String>"}, {"name": "objectToClass", "type": "Transformer<Object, Class<?>>"}, {"name": "stringToInt", "type": "Transformer<String, Integer>"}]}, "fixtures": [], "test_cases": [{"name": "testEmptyMap", "primary_tested": ["TransformedSplitMap.isEmpty()"], "associated_methods": ["TransformedSplitMap.entrySet()"], "external_dependencies": {"modules": ["TransformedSplitMap", "HashMap", "NOPTransformer", "ObjectInputStream", "FileInputStream"], "class_members": [{"name": "TEST_DATA_PATH", "type": "static final String"}]}, "category": "unit", "description": "Tests if an empty TransformedSplitMap is correctly deserialized and remains empty."}, {"name": "testFullMap", "primary_tested": ["TransformedSplitMap.isEmpty()"], "associated_methods": ["TransformedSplitMap.entrySet()"], "external_dependencies": {"modules": ["TransformedSplitMap", "HashMap", "NOPTransformer", "ObjectInputStream", "FileInputStream"], "class_members": [{"name": "TEST_DATA_PATH", "type": "static final String"}]}, "category": "unit", "description": "Tests if a full TransformedSplitMap is correctly deserialized and remains full."}, {"name": "testMapIterator", "primary_tested": ["TransformedSplitMap.mapIterator()"], "associated_methods": ["TransformedSplitMap.size()", "TransformedSplitMap.put(String,String)", "TransformedSplitMap.get(String)"], "external_dependencies": {"modules": ["TransformedSplitMap", "HashMap", "NOPTransformer", "MapIterator"], "class_members": [{"name": "stringToInt", "type": "variable"}]}, "category": "unit", "description": "Tests the functionality of the MapIterator in TransformedSplitMap."}, {"name": "testTransformedMap", "primary_tested": ["TransformedSplitMap.transformingMap(HashMap,Transformer,Transformer)"], "associated_methods": ["TransformedSplitMap.size()", "TransformedSplitMap.put(Integer,Object)", "TransformedSplitMap.containsKey(String)", "TransformedSplitMap.containsValue(Class<?>)", "TransformedSplitMap.get(String)", "TransformedSplitMap.remove(String)"], "external_dependencies": {"modules": ["TransformedSplitMap", "HashMap", "NOPTransformer", "StringUtils", "BigInteger"], "class_members": [{"name": "intToString", "type": "variable"}, {"name": "objectToClass", "type": "variable"}, {"name": "stringToInt", "type": "variable"}]}, "category": "unit", "description": "Tests the transformation functionality of TransformedSplitMap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/IteratorChainTest.java", "testclass_name": "IteratorChainTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.apache.commons.collections4.IteratorUtils;", "import org.apache.commons.collections4.Predicate;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "IteratorChainTest", "description": "Unit tests for the IteratorChain class in Apache Commons Collections.", "class_members": {"variables": [{"name": "testArray", "type": "String[]"}, {"name": "list1", "type": "List<String>"}, {"name": "list2", "type": "List<String>"}, {"name": "list3", "type": "List<String>"}], "methods": [{"name": "makeEmptyIterator", "signature": "IteratorChain<String> makeEmptyIterator()"}, {"name": "makeObject", "signature": "IteratorChain<String> makeObject()"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEmptyChain", "primary_tested": [], "associated_methods": [], "external_dependencies": {"modules": ["IteratorChain", "NoSuchElementException", "IllegalStateException"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of an empty IteratorChain."}, {"name": "testFirstIteratorIsEmptyBug", "primary_tested": [], "associated_methods": [], "external_dependencies": {"modules": ["IteratorChain", "ArrayList"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior when the first iterator in the chain is empty."}, {"name": "testIterator", "primary_tested": [], "associated_methods": [], "external_dependencies": {"modules": ["IteratorChain", "NoSuchElementException"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the basic iteration functionality of the IteratorChain."}, {"name": "testRemove", "primary_tested": [], "associated_methods": [], "external_dependencies": {"modules": ["IteratorChain", "IllegalStateException"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the remove functionality of the IteratorChain."}, {"name": "testRemoveFromFilteredIterator", "primary_tested": [], "associated_methods": [], "external_dependencies": {"modules": ["IteratorUtils", "Predicate", "ArrayList"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the remove functionality from a filtered iterator within the IteratorChain."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/ArrayIterator2Test.java", "testclass_name": "ArrayIterator2Test", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.fail;", "import java.util.Iterator;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.Test;"], "name": "ArrayIterator2Test", "description": "Unit tests for ArrayIterator2 functionality.", "class_members": {"variables": [{"name": "testArray", "type": "int[]"}], "methods": [{"name": "makeArrayIterator", "signature": "ArrayIterator<E> makeArrayIterator(Object array)"}, {"name": "makeArrayIterator", "signature": "ArrayIterator<E> makeArrayIterator(Object array, int index)"}, {"name": "makeArrayIterator", "signature": "ArrayIterator<E> makeArrayIterator(Object array, int start, int end)"}, {"name": "makeEmptyIterator", "signature": "ArrayIterator<E> makeEmptyIterator()"}, {"name": "makeObject", "signature": "ArrayIterator<E> makeObject()"}, {"name": "supportsRemove", "signature": "boolean supportsRemove()"}]}, "fixtures": [], "test_cases": [{"name": "testIndexedArray", "primary_tested": ["ArrayIterator.hasNext()", "ArrayIterator.next()"], "associated_methods": ["ArrayIterator.makeArrayIterator(Object,int)", "ArrayIterator.makeArrayIterator(Object,int,int)"], "external_dependencies": {"modules": ["ArrayIterator", "ArrayIndexOutOfBoundsException", "IllegalArgumentException"], "class_members": [{"name": "testArray", "type": "variable"}, {"name": "makeArrayIterator", "type": "method"}]}, "category": "unit", "description": "Tests the indexed array functionality of ArrayIterator, including boundary conditions and exceptions."}, {"name": "testIterator", "primary_tested": ["ArrayIterator.hasNext()", "ArrayIterator.next()"], "associated_methods": ["ArrayIterator.makeObject()"], "external_dependencies": {"modules": ["ArrayIterator", "NoSuchElementException"], "class_members": [{"name": "testArray", "type": "variable"}, {"name": "makeObject", "type": "method"}]}, "category": "unit", "description": "Tests the basic iterator functionality of ArrayIterator, including iteration and exception handling."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableMapIteratorTest.java", "testclass_name": "UnmodifiableMapIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertNotSame;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Map;", "import org.apache.commons.collections4.IterableMap;", "import org.apache.commons.collections4.MapIterator;", "import org.apache.commons.collections4.Unmodifiable;", "import org.apache.commons.collections4.bidimap.DualHashBidiMap;", "import org.junit.jupiter.api.Test;"], "name": "UnmodifiableMapIteratorTest", "description": "Tests for the UnmodifiableMapIterator class, focusing on its factory methods and unmodifiable behavior.", "class_members": {"variables": [], "methods": [{"name": "getConfirmedMap", "signature": "Map<K, V> getConfirmedMap()"}, {"name": "getMap", "signature": "IterableMap<K, V> getMap()"}, {"name": "makeEmptyIterator", "signature": "MapIterator<K, V> makeEmptyIterator()"}, {"name": "makeObject", "signature": "MapIterator<K, V> makeObject()"}, {"name": "supportsRemove", "signature": "boolean supportsRemove()"}, {"name": "supportsSetValue", "signature": "boolean supportsSetValue()"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testDecorateFactory", "primary_tested": ["UnmodifiableMapIterator.unmodifiableMapIterator(MapIterator<K, V>)"], "associated_methods": ["DualHashBidiMap.mapIterator()"], "external_dependencies": {"modules": ["UnmodifiableMapIterator", "DualHashBidiMap", "MapIterator"], "class_members": [{"name": "makeObject", "type": "method"}, {"name": "getMap", "type": "method"}]}, "category": "unit", "description": "Tests the factory method of UnmodifiableMapIterator to ensure it correctly decorates and handles null input."}, {"name": "testMapIterator", "primary_tested": ["UnmodifiableMapIterator.unmodifiableMapIterator(MapIterator<K, V>)"], "associated_methods": [], "external_dependencies": {"modules": ["UnmodifiableMapIterator", "Unmodifiable", "MapIterator"], "class_members": [{"name": "makeEmptyIterator", "type": "method"}]}, "category": "unit", "description": "Tests that the MapIterator created by UnmodifiableMapIterator is indeed unmodifiable."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/properties/OrderedPropertiesFactoryTest.java", "testclass_name": "OrderedPropertiesFactoryTest", "dependencies": ["package org.apache.commons.collections4.properties;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import org.junit.jupiter.api.Test;"], "name": "OrderedPropertiesFactoryTest", "description": "Tests for the OrderedPropertiesFactory class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testInstance", "primary_tested": ["OrderedPropertiesFactory.INSTANCE"], "external_dependencies": {"modules": ["OrderedPropertiesFactory"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the instance of OrderedPropertiesFactory is not null."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableIteratorTest.java", "testclass_name": "UnmodifiableIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertNotSame;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.Iterator;", "import java.util.List;", "import org.apache.commons.collections4.Unmodifiable;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "UnmodifiableIteratorTest", "description": "Tests for the UnmodifiableIterator class, which decorates an iterator to ensure it cannot be modified.", "class_members": {"variables": [{"name": "testArray", "type": "String[]"}, {"name": "testList", "type": "List<E>"}], "methods": [{"name": "makeEmptyIterator", "signature": "Iterator<E> makeEmptyIterator()"}, {"name": "makeObject", "signature": "Iterator<E> makeObject()"}, {"name": "supportsRemove", "signature": "boolean supportsRemove()"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testDecorateFactory", "primary_tested": ["UnmodifiableIterator.unmodifiableIterator(Iterator<E>)"], "associated_methods": ["UnmodifiableIteratorTest.makeObject()"], "external_dependencies": {"modules": ["UnmodifiableIterator", "Iterator", "NullPointerException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the factory method of UnmodifiableIterator to ensure it correctly decorates an iterator and handles null input."}, {"name": "testIterator", "primary_tested": ["UnmodifiableIterator.makeEmptyIterator()"], "external_dependencies": {"modules": ["UnmodifiableIterator", "Unmodifiable"], "class_members": [{"name": "makeEmptyIterator", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests that the iterator created by makeEmptyIterator is an instance of Unmodifiable."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/UniqueFilterIteratorTest.java", "testclass_name": "UniqueFilterIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import java.util.ArrayList;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "UniqueFilterIteratorTest", "description": "Unit tests for the UniqueFilterIterator class, which filters out duplicate elements from an iterator.", "class_members": {"variables": [{"name": "testArray", "type": "String[]"}, {"name": "list1", "type": "List<E>"}], "methods": [{"name": "makeEmptyIterator", "signature": "UniqueFilterIterator<E> makeEmptyIterator()"}, {"name": "makeObject", "signature": "UniqueFilterIterator<E> makeObject()"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testIterator", "primary_tested": ["UniqueFilterIterator.next()"], "associated_methods": ["UniqueFilterIterator.hasNext()"], "external_dependencies": {"modules": ["UniqueFilterIterator", "ArrayList", "Iterator", "NoSuchElementException"], "class_members": [{"name": "list1", "type": "variable"}, {"name": "testArray", "type": "variable"}, {"name": "makeObject", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the iteration functionality of the UniqueFilterIterator, ensuring it correctly filters out duplicate elements and handles the end of the iterator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/properties/PropertiesFactoryTest.java", "testclass_name": "PropertiesFactoryTest", "dependencies": ["package org.apache.commons.collections4.properties;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import java.util.Properties;", "import org.junit.jupiter.api.Test;"], "name": "PropertiesFactoryTest", "description": "Test class for PropertiesFactory, extending AbstractPropertiesFactoryTest.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testInstance", "primary_tested": ["PropertiesFactory.INSTANCE"], "external_dependencies": {"modules": ["PropertiesFactory"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the PropertiesFactory instance is not null."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/ListOrderedMapTest.java", "testclass_name": "ListOrderedMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.ArrayList;", "import java.util.HashMap;", "import java.util.List;", "import java.util.Map;", "import java.util.TreeMap;", "import org.apache.commons.collections4.BulkTest;", "import org.apache.commons.collections4.MapIterator;", "import org.apache.commons.collections4.list.AbstractListTest;", "import org.apache.commons.lang3.StringUtils;", "import org.junit.jupiter.api.Test;"], "name": "ListOrderedMapTest", "description": "Unit tests for ListOrderedMap operations and functionalities.", "class_members": {"variables": [], "methods": [], "nested_classes": [{"name": "TestKeyListView", "description": "Internal helper class for testing key list view"}, {"name": "TestValueListView", "description": "Internal helper class for testing value list view"}]}, "fixtures": [], "test_cases": [{"name": "testCOLLECTIONS_474_nonNullValues", "primary_tested": ["ListOrderedMap.putAll(int,Map)"], "external_dependencies": {"modules": ["HashMap", "ListOrderedMap"], "class_members": []}, "category": "unit", "description": "Tests the putAll method with non-null values."}, {"name": "testCOLLECTIONS_474_nullValues", "primary_tested": ["ListOrderedMap.putAll(int,Map)"], "external_dependencies": {"modules": ["HashMap", "ListOrderedMap"], "class_members": []}, "category": "unit", "description": "Tests the putAll method with null values."}, {"name": "testGetByIndex", "primary_tested": ["ListOrderedMap.get(int)"], "external_dependencies": {"modules": ["ListOrderedMap", "MapIterator"], "class_members": []}, "category": "unit", "description": "Tests the get method by index."}, {"name": "testGetValueByIndex", "primary_tested": ["ListOrderedMap.getValue(int)"], "external_dependencies": {"modules": ["ListOrderedMap", "MapIterator"], "class_members": []}, "category": "unit", "description": "Tests the getValue method by index."}, {"name": "testIndexOf", "primary_tested": ["ListOrderedMap.indexOf(Object)"], "external_dependencies": {"modules": ["ListOrderedMap", "MapIterator", "ArrayList"], "class_members": []}, "category": "unit", "description": "Tests the indexOf method."}, {"name": "testPut_intObjectObject", "primary_tested": ["ListOrderedMap.put(int,Object,Object)"], "external_dependencies": {"modules": ["ListOrderedMap", "Integer", "IndexOutOfBoundsException"], "class_members": []}, "category": "unit", "description": "Tests the put method with index, key, and value."}, {"name": "testPutAllWithIndex", "primary_tested": ["ListOrderedMap.putAll(int,Map)"], "external_dependencies": {"modules": ["ListOrderedMap", "Map"], "class_members": []}, "category": "unit", "description": "Tests the putAll method with index."}, {"name": "testPutAllWithIndexBug441", "primary_tested": ["ListOrderedMap.putAll(int,Map)"], "external_dependencies": {"modules": ["ListOrderedMap", "TreeMap", "Integer"], "class_members": []}, "category": "unit", "description": "Tests the putAll method with index for bug COLLECTIONS-441."}, {"name": "testRemoveByIndex", "primary_tested": ["ListOrderedMap.remove(int)"], "external_dependencies": {"modules": ["ListOrderedMap", "MapIterator", "ArrayList"], "class_members": []}, "category": "unit", "description": "Tests the remove method by index."}, {"name": "testSetValueByIndex", "primary_tested": ["ListOrderedMap.setValue(int,Object)"], "external_dependencies": {"modules": ["ListOrderedMap", "StringUtils", "Integer"], "class_members": []}, "category": "unit", "description": "Tests the setValue method by index."}, {"name": "testValueList_getByIndex", "primary_tested": ["ListOrderedMap.valueList().get(int)"], "external_dependencies": {"modules": ["ListOrderedMap"], "class_members": []}, "category": "unit", "description": "Tests the valueList get method by index."}, {"name": "testValueList_removeByIndex", "primary_tested": ["ListOrderedMap.valueList().remove(int)"], "external_dependencies": {"modules": ["ListOrderedMap"], "class_members": []}, "category": "unit", "description": "Tests the valueList remove method by index."}, {"name": "testValueList_setByIndex", "primary_tested": ["ListOrderedMap.valueList().set(int,Object)"], "external_dependencies": {"modules": ["ListOrderedMap", "Integer"], "class_members": []}, "category": "unit", "description": "Tests the valueList set method by index."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/properties/SortedPropertiesFactoryTest.java", "testclass_name": "SortedPropertiesFactoryTest", "dependencies": ["package org.apache.commons.collections4.properties;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import org.junit.jupiter.api.Test;"], "name": "SortedPropertiesFactoryTest", "description": "Test class for SortedPropertiesFactory, extending AbstractPropertiesFactoryTest.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testInstance", "primary_tested": ["SortedPropertiesFactory.INSTANCE"], "external_dependencies": {"modules": ["SortedPropertiesFactory"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the SortedPropertiesFactory instance is not null."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/FilterIteratorTest.java", "testclass_name": "FilterIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.apache.commons.collections4.functors.TruePredicate.truePredicate;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.apache.commons.collections4.Predicate;", "import org.apache.commons.collections4.functors.NotNullPredicate;", "import org.apache.commons.lang3.ArrayUtils;", "import org.junit.jupiter.api.AfterEach;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "FilterIteratorTest", "description": "Unit tests for FilterIterator functionality, including hasNext, next, and predicate handling.", "class_members": {"variables": [{"name": "array", "type": "String[]"}, {"name": "list", "type": "List<E>"}, {"name": "iterator", "type": "FilterIterator<E>"}], "methods": [{"name": "initIterator", "signature": "void initIterator()"}, {"name": "makeBlockAllFilter", "signature": "FilterIterator<E> makeBlockAllFilter(Iterator<E>)"}, {"name": "makePassThroughFilter", "signature": "FilterIterator<E> makePassThroughFilter(Iterator<E>)"}, {"name": "verifyElementsInPredicate", "signature": "void verifyElementsInPredicate(String[])"}, {"name": "verifyNoMoreElements", "signature": "void verifyNoMoreElements()"}]}, "fixtures": ["setUp", "tearDown"], "test_cases": [{"name": "testRepeatedHasNext", "primary_tested": ["FilterIterator.hasNext()"], "external_dependencies": {"modules": ["FilterIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests repeated calls to hasNext method to ensure it returns the correct response."}, {"name": "testRepeatedNext", "primary_tested": ["FilterIterator.next()"], "associated_methods": ["FilterIterator.verifyNoMoreElements()"], "external_dependencies": {"modules": ["FilterIterator"], "class_members": [{"name": "iterator", "type": "variable"}, {"name": "verifyNoMoreElements", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests repeated calls to next method to ensure it returns the correct elements and handles end of iteration."}, {"name": "testReturnValues", "primary_tested": ["FilterIterator.next()"], "associated_methods": ["FilterIterator.verifyElementsInPredicate(String[])"], "external_dependencies": {"modules": ["FilterIterator", "ArrayUtils"], "class_members": [{"name": "iterator", "type": "variable"}, {"name": "verifyElementsInPredicate", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the return values of the next method with different predicates."}, {"name": "testSetIterator", "primary_tested": ["FilterIterator.setIterator(Iterator<E>)"], "external_dependencies": {"modules": ["FilterIterator", "Collections"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "description": "Tests setting a new iterator and checking hasNext with the new iterator."}, {"name": "testSetPredicate", "primary_tested": ["FilterIterator.setPredicate(Predicate<E>)"], "external_dependencies": {"modules": ["FilterIterator", "Collections", "NotNullPredicate"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "description": "Tests setting a new predicate and checking hasNext with the new predicate."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/PushbackIteratorTest.java", "testclass_name": "PushbackIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.Iterator;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "PushbackIteratorTest", "description": "Unit tests for the PushbackIterator class, which allows elements to be pushed back onto the iterator.", "class_members": {"variables": [{"name": "testArray", "type": "final String[]"}, {"name": "testList", "type": "List<E>"}], "methods": [{"name": "makeEmptyIterator", "signature": "Iterator<E> makeEmptyIterator()"}, {"name": "makeObject", "signature": "PushbackIterator<E> makeObject()"}, {"name": "supportsRemove", "signature": "boolean supportsRemove()"}, {"name": "validate", "signature": "void validate(Iterator<E> iter, Object... items)"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testDelayedPushback", "primary_tested": ["PushbackIterator.next()"], "associated_methods": ["PushbackIterator.pushback(E)"], "external_dependencies": {"modules": ["PushbackIterator", "Iterator"], "class_members": [{"name": "testList", "type": "variable"}, {"name": "makeObject", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the delayed pushback functionality of the PushbackIterator."}, {"name": "testImmediatePushback", "primary_tested": ["PushbackIterator.next()"], "associated_methods": ["PushbackIterator.pushback(E)"], "external_dependencies": {"modules": ["PushbackIterator", "Iterator"], "class_members": [{"name": "testList", "type": "variable"}, {"name": "makeObject", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the immediate pushback functionality of the PushbackIterator."}, {"name": "testMultiplePushback", "primary_tested": ["PushbackIterator.next()"], "associated_methods": ["PushbackIterator.pushback(E)"], "external_dependencies": {"modules": ["PushbackIterator", "Iterator"], "class_members": [{"name": "testList", "type": "variable"}, {"name": "makeObject", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the multiple pushback functionality of the PushbackIterator."}, {"name": "testNormalIteration", "primary_tested": ["PushbackIterator.next()"], "external_dependencies": {"modules": ["PushbackIterator", "Iterator"], "class_members": [{"name": "testList", "type": "variable"}, {"name": "makeObject", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the normal iteration functionality of the PushbackIterator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/ArrayListIteratorTest.java", "testclass_name": "ArrayListIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertArrayEquals;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.ListIterator;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.Test;"], "name": "ArrayListIteratorTest", "description": "Tests for the ArrayListIterator class, focusing on ListIterator functionality and set operation.", "class_members": {"methods": [{"name": "makeArrayListIterator", "signature": "ArrayListIterator<E> makeArrayListIterator(Object array)"}, {"name": "makeEmptyIterator", "signature": "ArrayListIterator<E> makeEmptyIterator()"}, {"name": "makeObject", "signature": "ArrayListIterator<E> makeObject()"}, {"name": "supportsRemove", "signature": "boolean supportsRemove()"}]}, "test_cases": [{"name": "testListIterator", "primary_tested": ["ListIterator.previous()"], "associated_methods": ["ListIterator.hasNext()", "ListIterator.next()"], "external_dependencies": {"modules": ["ListIterator", "NoSuchElementException"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "description": "Tests the basic ListIterator functionality by going backwards using previous()."}, {"name": "testListIteratorSet", "primary_tested": ["ListIterator.set(E)"], "associated_methods": ["ListIterator.hasNext()", "ListIterator.next()"], "external_dependencies": {"modules": ["ListIterator", "IllegalStateException"], "class_members": [{"name": "makeArrayListIterator", "type": "method"}]}, "category": "unit", "description": "Tests the ListIterator set operation and ensures it throws an IllegalStateException if next() or previous() have not been called."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/IteratorIterableTest.java", "testclass_name": "IteratorIterableTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.fail;", "import java.util.ArrayList;", "import java.util.Iterator;", "import java.util.List;", "import org.apache.commons.collections4.BulkTest;", "import org.junit.jupiter.api.Test;"], "name": "IteratorIterableTest", "description": "Tests for the IteratorIterable class, focusing on its behavior with iterators and iterables.", "class_members": {"methods": [{"name": "createIterator", "signature": "Iterator<Integer> createIterator()"}, {"name": "verifyIteration", "signature": "void verifyIteration(Iterable<Number> iterable)"}]}, "fixtures": [], "test_cases": [{"name": "testIterator", "primary_tested": ["IteratorIterable.<init>(Iterator<Integer>)"], "associated_methods": ["IteratorIterableTest.verifyIteration(Iterable<Number>)"], "external_dependencies": {"modules": ["Iterator", "Iterable", "IteratorIterable", "ArrayList", "List"], "class_members": [{"name": "createIterator", "type": "method"}, {"name": "verifyIteration", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of IteratorIterable when used with an iterator that should not be able to iterate twice."}, {"name": "testMultipleUserIterator", "primary_tested": ["IteratorIterable.<init>(Iterator<Integer>,boolean)"], "associated_methods": ["IteratorIterableTest.verifyIteration(Iterable<Number>)"], "external_dependencies": {"modules": ["Iterator", "Iterable", "IteratorIterable", "ArrayList", "List"], "class_members": [{"name": "createIterator", "type": "method"}, {"name": "verifyIteration", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of IteratorIterable when used with an iterator that should be able to iterate multiple times."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/properties/SortedPropertiesTest.java", "testclass_name": "SortedPropertiesTest", "dependencies": ["package org.apache.commons.collections4.properties;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import java.util.Enumeration;", "import java.util.Iterator;", "import java.util.Map;", "import org.junit.jupiter.api.Test;"], "name": "SortedPropertiesTest", "description": "Unit tests for the SortedProperties class, focusing on the entrySet and keys methods.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testEntrySet", "primary_tested": ["SortedProperties.entrySet()"], "associated_methods": ["SortedProperties.put(String,String)", "SortedProperties.iterator()"], "external_dependencies": {"modules": ["SortedProperties", "Map", "Iterator"]}, "category": "unit", "description": "Tests the entrySet method of SortedProperties to ensure entries are sorted correctly."}, {"name": "testKeys", "primary_tested": ["SortedProperties.keys()"], "associated_methods": ["SortedProperties.put(String,String)", "SortedProperties.nextElement()"], "external_dependencies": {"modules": ["SortedProperties", "Enumeration"]}, "category": "unit", "description": "Tests the keys method of SortedProperties to ensure keys are sorted correctly."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/CompositeMapTest.java", "testclass_name": "CompositeMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Collection;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeMapTest", "description": "Unit tests for the CompositeMap class, which is part of the Apache Commons Collections library.", "class_members": {"variables": [{"name": "pass", "type": "boolean"}], "methods": [{"name": "buildOne", "signature": "Map<K, V> buildOne()"}, {"name": "buildTwo", "signature": "Map<K, V> buildTwo()"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAddComposited", "primary_tested": ["CompositeMap.addComposited(Map<K, V>)"], "associated_methods": ["CompositeMap.containsKey(Object)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap"], "class_members": [{"name": "buildOne", "type": "method"}, {"name": "buildTwo", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addition of composited maps to a CompositeMap and checks for key presence."}, {"name": "testGet", "primary_tested": ["CompositeMap.get(Object)"], "external_dependencies": {"modules": ["CompositeMap"], "class_members": [{"name": "buildOne", "type": "method"}, {"name": "buildTwo", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retrieval of values from a CompositeMap."}, {"name": "testPut", "primary_tested": ["CompositeMap.put(K, V)"], "associated_methods": ["CompositeMap.MapMutator.put(CompositeMap<K, V>, Map<K, V>[], K, V)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap"], "class_members": [{"name": "buildOne", "type": "method"}, {"name": "buildTwo", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the insertion of a key-value pair into a CompositeMap using a custom MapMutator."}, {"name": "testPutAll", "primary_tested": ["CompositeMap.putAll(Map<? extends K, ? extends V>)"], "associated_methods": ["CompositeMap.MapMutator.putAll(CompositeMap<K, V>, Map<K, V>[], Map<? extends K, ? extends V>)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap"], "class_members": [{"name": "buildOne", "type": "method"}, {"name": "buildTwo", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the insertion of all key-value pairs from a map into a CompositeMap using a custom MapMutator."}, {"name": "testRemoveComposited", "primary_tested": ["CompositeMap.removeComposited(Map<K, V>)"], "associated_methods": ["CompositeMap.containsKey(Object)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap"], "class_members": [{"name": "buildOne", "type": "method"}, {"name": "buildTwo", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of composited maps from a CompositeMap and checks for key presence."}, {"name": "testRemoveFromComposited", "primary_tested": ["CompositeMap.remove(Object)"], "associated_methods": ["HashMap.containsKey(Object)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap"], "class_members": [{"name": "buildOne", "type": "method"}, {"name": "buildTwo", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of a key-value pair from a composited map within a CompositeMap."}, {"name": "testRemoveFromUnderlying", "primary_tested": ["HashMap.remove(Object)"], "associated_methods": ["CompositeMap.containsKey(Object)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap"], "class_members": [{"name": "buildOne", "type": "method"}, {"name": "buildTwo", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of a key-value pair from an underlying map within a CompositeMap."}, {"name": "testResolveCollision", "primary_tested": ["CompositeMap.MapMutator.resolveCollision(CompositeMap<K, V>, Map<K, V>, Map<K, V>, Collection<K>)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap"], "class_members": [{"name": "buildOne", "type": "method"}, {"name": "buildTwo", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the resolution of key collisions in a CompositeMap using a custom MapMutator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableListIteratorTest.java", "testclass_name": "UnmodifiableListIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertNotSame;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.List;", "import java.util.ListIterator;", "import org.apache.commons.collections4.Unmodifiable;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "UnmodifiableListIteratorTest", "description": "Tests for the UnmodifiableListIterator class, which decorates a ListIterator to ensure it is unmodifiable.", "class_members": {"variables": [{"name": "testArray", "type": "String[]"}, {"name": "testList", "type": "List<E>"}], "methods": [{"name": "makeEmptyIterator", "signature": "ListIterator<E> makeEmptyIterator()"}, {"name": "makeObject", "signature": "ListIterator<E> makeObject()"}, {"name": "setUp", "signature": "void setUp() throws Exception"}, {"name": "supportsAdd", "signature": "boolean supportsAdd()"}, {"name": "supportsRemove", "signature": "boolean supportsRemove()"}, {"name": "supportsSet", "signature": "boolean supportsSet()"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testDecorateFactory", "primary_tested": ["UnmodifiableListIterator.unmodifiableListIterator(ListIterator<E>)"], "associated_methods": ["UnmodifiableListIterator.unmodifiableListIterator(ListIterator<E>)"], "external_dependencies": {"modules": ["UnmodifiableListIterator", "ListIterator", "NullPointerException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the factory method for creating an unmodifiable list iterator and ensures it handles null input correctly."}, {"name": "testListIterator", "primary_tested": ["UnmodifiableListIterator.makeEmptyIterator()"], "external_dependencies": {"modules": ["UnmodifiableListIterator", "Unmodifiable"]}, "category": "unit", "description": "Tests that the empty iterator created is an instance of Unmodifiable."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/trie/PatriciaTrieTest.java", "testclass_name": "PatriciaTrieTest", "dependencies": ["package org.apache.commons.collections4.trie;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.ConcurrentModificationException;", "import java.util.HashSet;", "import java.util.Iterator;", "import java.util.Map;", "import java.util.NoSuchElementException;", "import java.util.Set;", "import java.util.SortedMap;", "import org.apache.commons.collections4.Trie;", "import org.apache.commons.collections4.map.AbstractSortedMapTest;", "import org.apache.commons.lang3.StringUtils;", "import org.junit.jupiter.api.Test;"], "name": "PatriciaTrieTest", "description": "Unit tests for PatriciaTrie operations, including prefix mapping and removal.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testPrefixMap", "primary_tested": ["PatriciaTrie.prefixMap(String)"], "associated_methods": ["PatriciaTrie.put(String,String)", "PatriciaTrie.get(String)", "PatriciaTrie.remove(String)"], "external_dependencies": {"modules": ["PatriciaTrie", "StringUtils", "SortedMap", "Iterator", "Map.Entry", "ConcurrentModificationException", "NoSuchElementException"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the prefix mapping functionality of the PatriciaTrie, including adding, retrieving, and removing entries based on prefixes."}, {"name": "testPrefixMapClear", "primary_tested": ["PatriciaTrie.prefixMap(String)"], "associated_methods": ["PatriciaTrie.put(String,Integer)", "SortedMap.clear()", "SortedMap.isEmpty()"], "external_dependencies": {"modules": ["PatriciaTrie", "SortedMap", "HashSet", "Arrays", "ArrayList"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests clearing a prefix map and verifying the state of the PatriciaTrie and the prefix map."}, {"name": "testPrefixMapClearNothing", "primary_tested": ["PatriciaTrie.prefixMap(String)"], "associated_methods": ["SortedMap.clear()", "SortedMap.isEmpty()"], "external_dependencies": {"modules": ["PatriciaTrie", "SortedMap", "HashSet", "ArrayList"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests clearing an empty prefix map and verifying the state of the PatriciaTrie and the prefix map."}, {"name": "testPrefixMapClearUsingRemove", "primary_tested": ["PatriciaTrie.prefixMap(String)"], "associated_methods": ["PatriciaTrie.put(String,Integer)", "SortedMap.remove(String)", "SortedMap.isEmpty()"], "external_dependencies": {"modules": ["PatriciaTrie", "SortedMap", "HashSet", "Arrays", "ArrayList"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests removing entries from a prefix map and verifying the state of the PatriciaTrie and the prefix map."}, {"name": "testPrefixMapRemoval", "primary_tested": ["PatriciaTrie.prefixMap(String)"], "associated_methods": ["PatriciaTrie.put(String,String)", "SortedMap.keySet().iterator().remove()"], "external_dependencies": {"modules": ["PatriciaTrie", "SortedMap", "Iterator"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests removing entries from a prefix map using the iterator's remove method and verifying the state of the PatriciaTrie and the prefix map."}, {"name": "testPrefixMapSizes", "primary_tested": ["PatriciaTrie.prefixMap(String)"], "associated_methods": ["PatriciaTrie.put(String,String)", "PatriciaTrie.prefixMap(String).size()", "PatriciaTrie.prefixMap(String).isEmpty()"], "external_dependencies": {"modules": ["PatriciaTrie", "SortedMap"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the size of the prefix map and verifies the state of the PatriciaTrie and the prefix map."}, {"name": "testPrefixMapSizes2", "primary_tested": ["PatriciaTrie.prefixMap(String)"], "associated_methods": ["PatriciaTrie.put(String,String)", "PatriciaTrie.prefixMap(String).size()", "PatriciaTrie.prefixMap(String).containsKey(String)"], "external_dependencies": {"modules": ["PatriciaTrie", "SortedMap", "StringUtils"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the size of the prefix map with specific character lengths and verifies the state of the PatriciaTrie and the prefix map."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMapTest.java", "testclass_name": "PassiveExpiringMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.fail;", "import java.util.HashMap;", "import java.util.Map;", "import java.util.concurrent.TimeUnit;", "import org.apache.commons.collections4.collection.AbstractCollectionTest;", "import org.apache.commons.collections4.map.PassiveExpiringMap.ExpirationPolicy;", "import org.junit.jupiter.api.Test;"], "name": "PassiveExpiringMapTest", "description": "Unit tests for the PassiveExpiringMap class, focusing on expiration policies and map operations.", "class_members": {"variables": [], "methods": [{"name": "makeDecoratedTestMap", "signature": "Map<Integer, String> makeDecoratedTestMap()"}, {"name": "makeTestMap", "signature": "Map<Integer, String> makeTestMap()"}, {"name": "validateExpiration", "signature": "void validateExpiration(Map<String, String> map, long timeout)"}], "nested_classes": [{"name": "TestExpirationPolicy", "description": "Internal class implementing ExpirationPolicy for testing purposes."}]}, "fixtures": [], "test_cases": [{"name": "testConstructors", "primary_tested": [], "associated_methods": [], "external_dependencies": {"modules": ["PassiveExpiringMap", "ExpirationPolicy", "TimeUnit"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the constructors of PassiveExpiringMap for exception handling."}, {"name": "testContainsKey", "primary_tested": ["PassiveExpiringMap.containsKey(Integer)"], "associated_methods": [], "external_dependencies": {"modules": ["PassiveExpiringMap"], "class_members": [{"name": "makeTestMap", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the containsKey method of PassiveExpiringMap."}, {"name": "testContainsValue", "primary_tested": ["PassiveExpiringMap.containsValue(String)"], "associated_methods": [], "external_dependencies": {"modules": ["PassiveExpiringMap"], "class_members": [{"name": "makeTestMap", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the containsValue method of PassiveExpiringMap."}, {"name": "testDecoratedMap", "primary_tested": ["PassiveExpiringMap.get(Integer)", "PassiveExpiringMap.remove(Integer)", "PassiveExpiringMap.put(Integer, String)"], "associated_methods": [], "external_dependencies": {"modules": ["PassiveExpiringMap"], "class_members": [{"name": "makeDecoratedTestMap", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of a decorated map with PassiveExpiringMap."}, {"name": "testEntrySet", "primary_tested": ["PassiveExpiringMap.entrySet()"], "associated_methods": [], "external_dependencies": {"modules": ["PassiveExpiringMap"], "class_members": [{"name": "makeTestMap", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the entrySet method of PassiveExpiringMap."}, {"name": "testExpiration", "primary_tested": [], "associated_methods": ["PassiveExpiringMap.validateExpiration(Map<String, String>, long)"], "external_dependencies": {"modules": ["PassiveExpiringMap", "PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy"], "class_members": [{"name": "validateExpiration", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the expiration behavior of PassiveExpiringMap with different timeouts."}, {"name": "testGet", "primary_tested": ["PassiveExpiringMap.get(Integer)"], "associated_methods": [], "external_dependencies": {"modules": ["PassiveExpiringMap"], "class_members": [{"name": "makeTestMap", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the get method of PassiveExpiringMap."}, {"name": "testIsEmpty", "primary_tested": ["PassiveExpiringMap.isEmpty()"], "associated_methods": [], "external_dependencies": {"modules": ["PassiveExpiringMap"], "class_members": [{"name": "makeTestMap", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the isEmpty method of PassiveExpiringMap."}, {"name": "testKeySet", "primary_tested": ["PassiveExpiringMap.keySet()"], "associated_methods": [], "external_dependencies": {"modules": ["PassiveExpiringMap"], "class_members": [{"name": "makeTestMap", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the keySet method of PassiveExpiringMap."}, {"name": "testPut", "primary_tested": ["PassiveExpiringMap.put(Integer, String)"], "associated_methods": [], "external_dependencies": {"modules": ["PassiveExpiringMap"], "class_members": [{"name": "makeTestMap", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the put method of PassiveExpiringMap."}, {"name": "testSize", "primary_tested": ["PassiveExpiringMap.size()"], "associated_methods": [], "external_dependencies": {"modules": ["PassiveExpiringMap"], "class_members": [{"name": "makeTestMap", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the size method of PassiveExpiringMap."}, {"name": "testValues", "primary_tested": ["PassiveExpiringMap.values()"], "associated_methods": [], "external_dependencies": {"modules": ["PassiveExpiringMap"], "class_members": [{"name": "makeTestMap", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the values method of PassiveExpiringMap."}, {"name": "testZeroTimeToLive", "primary_tested": ["PassiveExpiringMap.put(String, String)", "PassiveExpiringMap.get(String)"], "associated_methods": [], "external_dependencies": {"modules": ["PassiveExpiringMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of PassiveExpiringMap with zero time-to-live."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bidimap/UnmodifiableOrderedBidiMapTest.java", "testclass_name": "UnmodifiableOrderedBidiMapTest", "dependencies": ["package org.apache.commons.collections4.bidimap;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Map;", "import java.util.TreeMap;", "import org.apache.commons.collections4.OrderedBidiMap;", "import org.apache.commons.collections4.Unmodifiable;", "import org.junit.jupiter.api.Test;"], "name": "UnmodifiableOrderedBidiMapTest", "description": "Tests for the UnmodifiableOrderedBidiMap class, ensuring that the map is unmodifiable and behaves as expected.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testDecorateFactory", "primary_tested": ["UnmodifiableOrderedBidiMap.unmodifiableOrderedBidiMap(OrderedBidiMap)"], "associated_methods": [], "external_dependencies": {"modules": ["OrderedBidiMap", "UnmodifiableOrderedBidiMap"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the factory method for decorating an OrderedBidiMap as unmodifiable."}, {"name": "testUnmodifiable", "primary_tested": ["UnmodifiableOrderedBidiMap.makeObject()", "UnmodifiableOrderedBidiMap.makeFullMap()"], "associated_methods": [], "external_dependencies": {"modules": ["Unmodifiable", "UnmodifiableOrderedBidiMap"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the created objects are instances of Unmodifiable."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueueTest.java", "testclass_name": "CircularFifoQueueTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.io.ByteArrayInputStream;", "import java.io.ByteArrayOutputStream;", "import java.io.ObjectInputStream;", "import java.io.ObjectOutputStream;", "import java.util.ArrayList;", "import java.util.Collection;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import java.util.Queue;", "import org.junit.jupiter.api.Test;"], "name": "CircularFifoQueueTest", "description": "Unit tests for the CircularFifoQueue class, focusing on its behavior and edge cases.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testAddNull", "primary_tested": ["CircularFifoQueue.add(E)"], "external_dependencies": {"modules": ["CircularFifoQueue"]}, "category": "unit", "description": "Tests that adding a null element to the CircularFifoQueue throws a NullPointerException."}, {"name": "testCircularFifoQueueCircular", "primary_tested": ["CircularFifoQueue.add(E)", "CircularFifoQueue.contains(Object)", "CircularFifoQueue.peek()", "CircularFifoQueue.remove()"], "external_dependencies": {"modules": ["CircularFifoQueue", "ArrayList"]}, "category": "unit", "description": "Tests the circular behavior of the CircularFifoQueue by adding elements and checking their presence and order."}, {"name": "testCircularFifoQueueRemove", "primary_tested": ["CircularFifoQueue.remove()"], "associated_methods": ["CircularFifoQueue.resetFull()"], "external_dependencies": {"modules": ["CircularFifoQueue", "List"]}, "category": "unit", "description": "Tests the removal operation of the CircularFifoQueue to ensure it removes the first element correctly."}, {"name": "testConstructorException1", "primary_tested": ["CircularFifoQueue.<init>(int)"], "external_dependencies": {"modules": ["CircularFifoQueue"]}, "category": "unit", "description": "Tests that the constructor throws an IllegalArgumentException when given a size of 0."}, {"name": "testConstructorException2", "primary_tested": ["CircularFifoQueue.<init>(int)"], "external_dependencies": {"modules": ["CircularFifoQueue"]}, "category": "unit", "description": "Tests that the constructor throws an IllegalArgumentException when given a negative size."}, {"name": "testConstructorException3", "primary_tested": ["CircularFifoQueue.<init>(Collection)"], "external_dependencies": {"modules": ["CircularFifoQueue"]}, "category": "unit", "description": "Tests that the constructor throws a NullPointerException when given a null collection."}, {"name": "testDefaultSizeAndGetError1", "primary_tested": ["CircularFifoQueue.maxSize()", "CircularFifoQueue.add(E)", "CircularFifoQueue.size()", "CircularFifoQueue.get(int)"], "external_dependencies": {"modules": ["CircularFifoQueue"]}, "category": "unit", "description": "Tests the default size of the CircularFifoQueue and ensures that accessing an out-of-bounds index throws a NoSuchElementException."}, {"name": "testDefaultSizeAndGetError2", "primary_tested": ["CircularFifoQueue.maxSize()", "CircularFifoQueue.add(E)", "CircularFifoQueue.size()", "CircularFifoQueue.get(int)"], "external_dependencies": {"modules": ["CircularFifoQueue"]}, "category": "unit", "description": "Tests the default size of the CircularFifoQueue and ensures that accessing a negative index throws a NoSuchElementException."}, {"name": "testGetIndex", "primary_tested": ["CircularFifoQueue.get(int)", "CircularFifoQueue.remove()"], "associated_methods": ["CircularFifoQueue.resetFull()"], "external_dependencies": {"modules": ["CircularFifoQueue", "List"]}, "category": "unit", "description": "Tests the get operation of the CircularFifoQueue to ensure it retrieves elements correctly."}, {"name": "testRemoveError1", "primary_tested": ["CircularFifoQueue.add(E)", "CircularFifoQueue.remove(Object)", "CircularFifoQueue.toString()"], "external_dependencies": {"modules": ["CircularFifoQueue"]}, "category": "unit", "description": "Tests the removal of elements from the CircularFifoQueue and verifies the queue's state after each removal."}, {"name": "testRemoveError2", "primary_tested": ["CircularFifoQueue.add(E)", "CircularFifoQueue.remove(Object)", "CircularFifoQueue.toString()"], "external_dependencies": {"modules": ["CircularFifoQueue"]}, "category": "unit", "description": "Tests the removal of elements from the CircularFifoQueue and verifies the queue's state after each removal, including overflow behavior."}, {"name": "testRemoveError3", "primary_tested": ["CircularFifoQueue.add(E)", "CircularFifoQueue.remove(Object)", "CircularFifoQueue.toString()"], "external_dependencies": {"modules": ["CircularFifoQueue"]}, "category": "unit", "description": "Tests the removal of elements from the CircularFifoQueue and verifies the queue's state after each removal, including adding new elements after removals."}, {"name": "testRemoveError4", "primary_tested": ["CircularFifoQueue.add(E)", "CircularFifoQueue.remove(Object)", "CircularFifoQueue.toString()"], "external_dependencies": {"modules": ["CircularFifoQueue"]}, "category": "unit", "description": "Tests the removal of elements from the CircularFifoQueue and verifies the queue's state after each removal, focusing on elements in the middle of the array."}, {"name": "testRemoveError5", "primary_tested": ["CircularFifoQueue.add(E)", "CircularFifoQueue.remove(Object)", "CircularFifoQueue.toString()"], "external_dependencies": {"modules": ["CircularFifoQueue"]}, "category": "unit", "description": "Tests the removal of elements from the CircularFifoQueue and verifies the queue's state after each removal, focusing on the last element in the array."}, {"name": "testRemoveError6", "primary_tested": ["CircularFifoQueue.add(E)", "CircularFifoQueue.remove(Object)", "CircularFifoQueue.toString()"], "external_dependencies": {"modules": ["CircularFifoQueue"]}, "category": "unit", "description": "Tests the removal of elements from the CircularFifoQueue and verifies the queue's state after each removal, focusing on the first element in the array."}, {"name": "testRemoveError7", "primary_tested": ["CircularFifoQueue.add(E)", "CircularFifoQueue.remove(Object)", "CircularFifoQueue.toString()"], "external_dependencies": {"modules": ["CircularFifoQueue"]}, "category": "unit", "description": "Tests the removal of elements from the CircularFifoQueue and verifies the queue's state after each removal, focusing on the second element in the array."}, {"name": "testRemoveError8", "primary_tested": ["CircularFifoQueue.add(E)", "CircularFifoQueue.remove(Object)", "CircularFifoQueue.toString()"], "external_dependencies": {"modules": ["CircularFifoQueue"]}, "category": "unit", "description": "Tests the removal of elements from the CircularFifoQueue and verifies the queue's state after each removal, focusing on the second element in the array with additional elements added."}, {"name": "testRemoveError9", "primary_tested": ["CircularFifoQueue.add(E)", "CircularFifoQueue.remove(Object)", "CircularFifoQueue.toString()"], "external_dependencies": {"modules": ["CircularFifoQueue"]}, "category": "unit", "description": "Tests the removal of elements from the CircularFifoQueue and verifies the queue's state after each removal, focusing on the third element in the array."}, {"name": "testRepeatedSerialization", "primary_tested": ["CircularFifoQueue.add(E)", "CircularFifoQueue.contains(Object)", "CircularFifoQueue.size()"], "external_dependencies": {"modules": ["CircularFifoQueue", "ByteArrayInputStream", "ByteArrayOutputStream", "ObjectInputStream", "ObjectOutputStream"]}, "category": "unit", "description": "Tests the serialization and deserialization of the CircularFifoQueue to ensure its state is preserved."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/LoopingIteratorTest.java", "testclass_name": "LoopingIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.Test;"], "name": "LoopingIteratorTest", "description": "Unit tests for the LoopingIterator class, which tests various functionalities such as constructor exceptions, looping behavior, removal, reset, and size.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testConstructorEx", "primary_tested": ["LoopingIterator.<init>(List)"], "external_dependencies": {"modules": ["LoopingIterator", "NullPointerException"]}, "category": "unit", "description": "Tests the constructor exception when a null list is passed."}, {"name": "testLooping0", "primary_tested": ["LoopingIterator.hasNext()", "LoopingIterator.next()"], "external_dependencies": {"modules": ["LoopingIterator", "ArrayList", "NoSuchElementException"]}, "category": "unit", "description": "Tests the behavior of an empty looping iterator."}, {"name": "testLooping1", "primary_tested": ["LoopingIterator.hasNext()", "LoopingIterator.next()"], "external_dependencies": {"modules": ["LoopingIterator", "Arrays"]}, "category": "unit", "description": "Tests the behavior of a looping iterator with a single element."}, {"name": "testLooping2", "primary_tested": ["LoopingIterator.hasNext()", "LoopingIterator.next()"], "external_dependencies": {"modules": ["LoopingIterator", "Arrays"]}, "category": "unit", "description": "Tests the behavior of a looping iterator with two elements."}, {"name": "testLooping3", "primary_tested": ["LoopingIterator.hasNext()", "LoopingIterator.next()"], "external_dependencies": {"modules": ["LoopingIterator", "Arrays"]}, "category": "unit", "description": "Tests the behavior of a looping iterator with three elements."}, {"name": "testRemoving1", "primary_tested": ["LoopingIterator.hasNext()", "LoopingIterator.next()", "LoopingIterator.remove()"], "external_dependencies": {"modules": ["LoopingIterator", "ArrayList", "Arrays", "NoSuchElementException"]}, "category": "unit", "description": "Tests the remove() method on a LoopingIterator wrapped ArrayList."}, {"name": "testReset", "primary_tested": ["LoopingIterator.next()", "LoopingIterator.reset()"], "external_dependencies": {"modules": ["LoopingIterator", "Arrays"]}, "category": "unit", "description": "Tests the reset() method on a LoopingIterator wrapped ArrayList."}, {"name": "testSize", "primary_tested": ["LoopingIterator.size()", "LoopingIterator.next()", "LoopingIterator.reset()", "LoopingIterator.remove()"], "external_dependencies": {"modules": ["LoopingIterator", "ArrayList", "Arrays"]}, "category": "unit", "description": "Tests the size() method on a LoopingIterator wrapped ArrayList."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/ListIteratorWrapper2Test.java", "testclass_name": "ListIteratorWrapper2Test", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.ArrayList;", "import java.util.List;", "import java.util.ListIterator;", "import java.util.NoSuchElementException;", "import org.apache.commons.collections4.ResettableListIterator;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ListIteratorWrapper2Test", "description": "Unit tests for the ListIteratorWrapper class, focusing on its iteration and reset functionalities.", "class_members": {"variables": [{"name": "testArray", "type": "String[]"}, {"name": "list1", "type": "List<E>"}], "methods": [{"name": "makeEmptyIterator", "signature": "ResettableListIterator<E> makeEmptyIterator()"}, {"name": "makeObject", "signature": "ResettableListIterator<E> makeObject()"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testIterator", "primary_tested": ["ListIterator.next()", "ListIterator.previous()"], "associated_methods": ["ListIterator.hasNext()"], "external_dependencies": {"modules": ["ListIterator", "NoSuchElementException"], "class_members": [{"name": "list1", "type": "variable"}, {"name": "testArray", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the iteration functionality of the ListIteratorWrapper, including forward and backward iteration, and handling of NoSuchElementException."}, {"name": "testRemove", "primary_tested": ["ListIterator.remove()"], "associated_methods": ["ListIterator.previousIndex()", "ListIterator.nextIndex()", "ListIterator.next()", "ListIterator.previous()"], "external_dependencies": {"modules": ["ListIterator", "IllegalStateException"], "class_members": [{"name": "list1", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the remove functionality of the ListIteratorWrapper, including handling of IllegalStateException and verifying the state after removal."}, {"name": "testReset", "primary_tested": ["ResettableListIterator.reset()"], "associated_methods": ["ResettableListIterator.next()", "ResettableListIterator.hasPrevious()"], "external_dependencies": {"modules": ["ResettableListIterator"], "class_members": [{"name": "list1", "type": "variable"}, {"name": "testArray", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the reset functionality of the ResettableListIterator, ensuring that the iterator state is correctly reset and iteration continues as expected."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIterator_previousIndexTest.java", "testclass_name": "LoopingListIterator_previousIndexTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.Arrays;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "LoopingListIterator_previousIndexTest", "description": "Unit tests for the previousIndex method of the LoopingListIterator class.", "class_members": {"variables": [{"name": "loopingListIterator", "type": "LoopingListIterator<String>"}, {"name": "list", "type": "List<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPreviousIndexWithEmptyList", "primary_tested": ["LoopingListIterator.previousIndex()"], "external_dependencies": {"modules": ["LoopingListIterator", "NoSuchElementException"], "class_members": [{"name": "loopingListIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the previousIndex method when the list is empty, expecting a NoSuchElementException."}, {"name": "testPreviousIndexAtBeginning", "primary_tested": ["LoopingListIterator.previousIndex()"], "external_dependencies": {"modules": ["LoopingListIterator"], "class_members": [{"name": "loopingListIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the previousIndex method at the beginning of the list."}, {"name": "testPreviousIndexAfterPrevious", "primary_tested": ["LoopingListIterator.previousIndex()"], "associated_methods": ["LoopingListIterator.previous()"], "external_dependencies": {"modules": ["LoopingListIterator"], "class_members": [{"name": "loopingListIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the previousIndex method after calling the previous method."}, {"name": "testPreviousIndexAfterReset", "primary_tested": ["LoopingListIterator.previousIndex()"], "associated_methods": ["LoopingListIterator.reset()"], "external_dependencies": {"modules": ["LoopingListIterator"], "class_members": [{"name": "loopingListIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the previousIndex method after resetting the iterator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/LazyIteratorChainTest.java", "testclass_name": "LazyIteratorChainTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.apache.commons.collections4.IteratorUtils;", "import org.apache.commons.collections4.Predicate;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "LazyIteratorChainTest", "description": "Unit tests for the LazyIteratorChain class, which chains multiple iterators together.", "class_members": {"variables": [{"name": "testArray", "type": "String[]"}, {"name": "list1", "type": "List<String>"}, {"name": "list2", "type": "List<String>"}, {"name": "list3", "type": "List<String>"}], "methods": [{"name": "makeEmptyIterator", "signature": "LazyIteratorChain<String> makeEmptyIterator()"}, {"name": "makeObject", "signature": "LazyIteratorChain<String> makeObject()"}, {"name": "setUp", "signature": "void setUp()"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEmptyChain", "primary_tested": ["LazyIteratorChain.hasNext()"], "associated_methods": ["LazyIteratorChain.next()", "LazyIteratorChain.remove()"], "external_dependencies": {"modules": ["LazyIteratorChain", "NoSuchElementException", "IllegalStateException"], "class_members": [{"name": "makeEmptyIterator", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior of an empty LazyIteratorChain."}, {"name": "testFirstIteratorIsEmptyBug", "primary_tested": ["LazyIteratorChain.hasNext()", "LazyIteratorChain.next()"], "associated_methods": [], "external_dependencies": {"modules": ["LazyIteratorChain", "ArrayList"], "class_members": []}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior when the first iterator in the chain is empty."}, {"name": "testIterator", "primary_tested": ["LazyIteratorChain.next()"], "associated_methods": ["LazyIteratorChain.hasNext()"], "external_dependencies": {"modules": ["LazyIteratorChain", "NoSuchElementException"], "class_members": [{"name": "makeObject", "type": "method"}, {"name": "testArray", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the iteration functionality of the LazyIteratorChain."}, {"name": "testRemove", "primary_tested": ["LazyIteratorChain.remove()"], "associated_methods": ["LazyIteratorChain.next()"], "external_dependencies": {"modules": ["LazyIteratorChain", "IllegalStateException"], "class_members": [{"name": "makeObject", "type": "method"}, {"name": "testArray", "type": "variable"}, {"name": "list1", "type": "variable"}, {"name": "list2", "type": "variable"}, {"name": "list3", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the remove functionality of the LazyIteratorChain."}, {"name": "testRemoveFromFilteredIterator", "primary_tested": ["IteratorUtils.filteredIterator(Iterator, Predicate)", "IteratorUtils.chainedIterator(Iterator, Iterator)"], "associated_methods": ["Iterator.hasNext()", "Iterator.next()", "Iterator.remove()"], "external_dependencies": {"modules": ["IteratorUtils", "Predicate", "ArrayList"], "class_members": []}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal functionality from a filtered iterator chained with another iterator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/ReverseListIteratorTest.java", "testclass_name": "ReverseListIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.List;", "import java.util.ListIterator;", "import java.util.NoSuchElementException;", "import org.apache.commons.collections4.ResettableListIterator;", "import org.junit.jupiter.api.Test;"], "name": "ReverseListIteratorTest", "description": "Unit tests for the ReverseListIterator class, which reverses the order of elements in a list iterator.", "class_members": {"variables": [{"name": "testArray", "type": "String[]"}], "methods": [{"name": "makeEmptyIterator", "signature": "ListIterator<E> makeEmptyIterator()"}, {"name": "makeObject", "signature": "ReverseListIterator<E> makeObject()"}]}, "fixtures": [], "test_cases": [{"name": "testEmptyListIteratorIsIndeedEmpty", "primary_tested": ["ListIterator.hasNext()", "ListIterator.nextIndex()", "ListIterator.hasPrevious()", "ListIterator.previousIndex()", "ListIterator.next()", "ListIterator.previous()"], "external_dependencies": {"modules": ["ListIterator", "NoSuchElementException"], "class_members": [{"name": "makeEmptyIterator", "type": "method"}]}, "category": "unit", "description": "Tests that an empty list iterator behaves correctly, including throwing NoSuchElementException when next() or previous() is called."}, {"name": "testReset", "primary_tested": ["ResettableListIterator.next()", "ResettableListIterator.reset()"], "external_dependencies": {"modules": ["ResettableListIterator"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "description": "Tests the reset functionality of the ResettableListIterator, ensuring that the iterator returns to the start after reset."}, {"name": "testReverse", "primary_tested": ["ListIterator.hasNext()", "ListIterator.nextIndex()", "ListIterator.hasPrevious()", "ListIterator.previousIndex()", "ListIterator.next()", "ListIterator.previous()"], "external_dependencies": {"modules": ["ListIterator"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "description": "Tests the reverse iteration functionality, ensuring that the iterator correctly navigates through the list in reverse order."}, {"name": "testWalkForwardAndBack", "primary_tested": ["ListIterator.hasNext()", "ListIterator.next()", "ListIterator.hasPrevious()", "ListIterator.previous()"], "external_dependencies": {"modules": ["ListIterator", "NoSuchElementException"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "description": "Tests walking forward and backward through the list iterator, ensuring correct state and behavior at both ends of the list."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/MultiKeyMapTest.java", "testclass_name": "MultiKeyMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.fail;", "import java.util.Map;", "import org.apache.commons.collections4.MapIterator;", "import org.apache.commons.collections4.keyvalue.MultiKey;", "import org.junit.jupiter.api.Test;"], "name": "MultiKeyMapTest", "description": "Unit tests for the MultiKeyMap class, focusing on various operations like cloning, LRU behavior, key checks, value retrieval, and removal.", "class_members": {"variables": [{"name": "I1", "type": "static final Integer"}, {"name": "I2", "type": "static final Integer"}, {"name": "I3", "type": "static final Integer"}, {"name": "I4", "type": "static final Integer"}, {"name": "I5", "type": "static final Integer"}, {"name": "I6", "type": "static final Integer"}, {"name": "I7", "type": "static final Integer"}, {"name": "I8", "type": "static final Integer"}], "methods": [{"name": "getMultiKeyKeys", "signature": "@SuppressWarnings(\"unchecked\") private MultiKey<K>[] getMultiKeyKeys()"}, {"name": "getNewSampleValues", "signature": "@Override @SuppressWarnings(\"unchecked\") public V[] getNewSampleValues()"}, {"name": "getOtherKeys", "signature": "@Override @SuppressWarnings(\"unchecked\") public MultiKey<K>[] getOtherKeys()"}, {"name": "getSampleKeys", "signature": "@Override public MultiKey<K>[] getSampleKeys()"}, {"name": "getSampleValues", "signature": "@Override @SuppressWarnings(\"unchecked\") public V[] getSampleValues()"}, {"name": "isAllowNullKey", "signature": "@Override public boolean isAllowNullKey()"}, {"name": "makeObject", "signature": "@Override public MultiKeyMap<K, V> makeObject()"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testClone", "primary_tested": ["MultiKeyMap.clone()"], "external_dependencies": {"modules": ["MultiKeyMap", "MultiKey"], "class_members": [{"name": "I1", "type": "variable"}, {"name": "I2", "type": "variable"}]}, "category": "unit", "description": "Tests the cloning functionality of the MultiKeyMap."}, {"name": "testLRUMultiKeyMap", "primary_tested": ["MultiKeyMap.multiKeyMap(LRUMap)", "MultiKeyMap.put(K,K,V)", "MultiKeyMap.containsKey(K,K)"], "external_dependencies": {"modules": ["MultiKeyMap", "LRUMap", "MultiKey"], "class_members": [{"name": "I1", "type": "variable"}, {"name": "I2", "type": "variable"}, {"name": "I3", "type": "variable"}, {"name": "I4", "type": "variable"}, {"name": "I5", "type": "variable"}]}, "category": "unit", "description": "Tests the LRU behavior of the MultiKeyMap."}, {"name": "testMultiKeyContainsKey", "primary_tested": ["MultiKeyMap.containsKey(K,K)", "MultiKeyMap.containsKey(K,K,K)", "MultiKeyMap.containsKey(K,K,K,K)", "MultiKeyMap.containsKey(K,K,K,K,K)"], "external_dependencies": {"modules": ["MultiKeyMap", "MultiKey"], "class_members": [{"name": "getMultiKeyKeys", "type": "method"}]}, "category": "unit", "description": "Tests the key containment checks in the MultiKeyMap."}, {"name": "testMultiKeyGet", "primary_tested": ["MultiKeyMap.get(K,K)", "MultiKeyMap.get(K,K,K)", "MultiKeyMap.get(K,K,K,K)", "MultiKeyMap.get(K,K,K,K,K)"], "external_dependencies": {"modules": ["MultiKeyMap", "MultiKey"], "class_members": [{"name": "getMultiKeyKeys", "type": "method"}, {"name": "getSampleValues", "type": "method"}]}, "category": "unit", "description": "Tests the value retrieval functionality of the MultiKeyMap."}, {"name": "testMultiKeyPut", "primary_tested": ["MultiKeyMap.put(K,K,V)", "MultiKeyMap.put(K,K,K,V)", "MultiKeyMap.put(K,K,K,K,V)", "MultiKeyMap.put(K,K,K,K,K,V)"], "external_dependencies": {"modules": ["MultiKeyMap", "MultiKey"], "class_members": [{"name": "getMultiKeyKeys", "type": "method"}, {"name": "getSampleValues", "type": "method"}]}, "category": "unit", "description": "Tests the put functionality of the MultiKeyMap."}, {"name": "testMultiKeyPutWithNullKey", "primary_tested": ["MultiKeyMap.put(K,K,V)"], "external_dependencies": {"modules": ["MultiKeyMap"]}, "category": "unit", "description": "Tests the put functionality of the MultiKeyMap with null keys."}, {"name": "testMultiKeyRemove", "primary_tested": ["MultiKeyMap.removeMultiKey(K,K)", "MultiKeyMap.removeMultiKey(K,K,K)", "MultiKeyMap.removeMultiKey(K,K,K,K)", "MultiKeyMap.removeMultiKey(K,K,K,K,K)"], "external_dependencies": {"modules": ["MultiKeyMap", "MultiKey"], "class_members": [{"name": "getMultiKeyKeys", "type": "method"}, {"name": "getSampleValues", "type": "method"}]}, "category": "unit", "description": "Tests the remove functionality of the MultiKeyMap."}, {"name": "testMultiKeyRemoveAll1", "primary_tested": ["MultiKeyMap.removeAll(K)"], "external_dependencies": {"modules": ["MultiKeyMap", "MapIterator"], "class_members": [{"name": "I1", "type": "variable"}]}, "category": "unit", "description": "Tests the removeAll functionality of the MultiKeyMap with a single key."}, {"name": "testMultiKeyRemoveAll2", "primary_tested": ["MultiKeyMap.removeAll(K,K)"], "external_dependencies": {"modules": ["MultiKeyMap", "MapIterator"], "class_members": [{"name": "I2", "type": "variable"}, {"name": "I3", "type": "variable"}]}, "category": "unit", "description": "Tests the removeAll functionality of the MultiKeyMap with two keys."}, {"name": "testMultiKeyRemoveAll3", "primary_tested": ["MultiKeyMap.removeAll(K,K,K)"], "external_dependencies": {"modules": ["MultiKeyMap", "MapIterator"], "class_members": [{"name": "I1", "type": "variable"}, {"name": "I2", "type": "variable"}]}, "category": "unit", "description": "Tests the removeAll functionality of the MultiKeyMap with three keys."}, {"name": "testMultiKeyRemoveAll4", "primary_tested": ["MultiKeyMap.removeAll(K,K,K,K)"], "external_dependencies": {"modules": ["MultiKeyMap", "MapIterator"], "class_members": [{"name": "I1", "type": "variable"}, {"name": "I2", "type": "variable"}, {"name": "I3", "type": "variable"}]}, "category": "unit", "description": "Tests the removeAll functionality of the MultiKeyMap with four keys."}, {"name": "testNullHandling", "primary_tested": ["MultiKeyMap.get(K)", "MultiKeyMap.containsKey(K)", "MultiKeyMap.containsValue(V)", "MultiKeyMap.remove(K)", "MultiKeyMap.entrySet().contains(K)", "MultiKeyMap.put(K,V)"], "external_dependencies": {"modules": ["MultiKeyMap", "MultiKey"]}, "category": "unit", "description": "Tests the handling of null values and keys in the MultiKeyMap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/ListIteratorWrapperTest.java", "testclass_name": "ListIteratorWrapperTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.ArrayList;", "import java.util.List;", "import java.util.ListIterator;", "import java.util.NoSuchElementException;", "import org.apache.commons.collections4.ResettableListIterator;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ListIteratorWrapperTest", "description": "Unit tests for the ListIteratorWrapper class, which wraps a ListIterator and provides additional functionality.", "class_members": {"variables": [{"name": "testArray", "type": "String[]"}, {"name": "list1", "type": "List<E>"}], "methods": [{"name": "makeEmptyIterator", "signature": "ResettableListIterator<E> makeEmptyIterator()"}, {"name": "makeObject", "signature": "ResettableListIterator<E> makeObject()"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testIterator", "primary_tested": ["ListIterator.next()", "ListIterator.hasNext()", "ListIterator.previous()"], "external_dependencies": {"modules": ["ListIterator", "NoSuchElementException"], "class_members": [{"name": "list1", "type": "variable"}, {"name": "testArray", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the basic iteration functionality of the ListIteratorWrapper, including forward and backward iteration, and handling of NoSuchElementException."}, {"name": "testRemove", "primary_tested": ["ListIterator.remove()"], "associated_methods": ["ListIterator.previousIndex()", "ListIterator.nextIndex()", "ListIterator.next()", "ListIterator.previous()"], "external_dependencies": {"modules": ["ListIterator", "IllegalStateException"], "class_members": [{"name": "list1", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the remove functionality of the ListIteratorWrapper, including handling of IllegalStateException and correct state management after removal."}, {"name": "testReset", "primary_tested": ["ResettableListIterator.reset()"], "associated_methods": ["ResettableListIterator.next()", "ResettableListIterator.hasPrevious()"], "external_dependencies": {"modules": ["ResettableListIterator"], "class_members": [{"name": "list1", "type": "variable"}, {"name": "testArray", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the reset functionality of the ResettableListIterator, ensuring that the iterator state is correctly reset and subsequent iterations work as expected."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/MapBackedSet2Test.java", "testclass_name": "MapBackedSet2Test", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Iterator;", "import java.util.Set;", "import org.apache.commons.collections4.map.LinkedMap;", "import org.junit.jupiter.api.Test;"], "name": "MapBackedSet2Test", "description": "Tests for the MapBackedSet2 class, focusing on ordering and element management.", "class_members": {"methods": [{"name": "makeObject", "signature": "Set<E> makeObject()"}, {"name": "setupSet", "signature": "Set<E> setupSet()"}]}, "test_cases": [{"name": "testCanonicalEmptyCollectionExists", "primary_tested": [], "external_dependencies": {"modules": []}, "category": "unit", "description": "Tests the existence of a canonical empty collection."}, {"name": "testCanonicalFullCollectionExists", "primary_tested": [], "external_dependencies": {"modules": []}, "category": "unit", "description": "Tests the existence of a canonical full collection."}, {"name": "testOrdering", "primary_tested": ["Set.iterator()", "Set.remove(Object)", "Set.add(E)", "Set.size()"], "associated_methods": ["MapBackedSet2Test.setupSet()"], "external_dependencies": {"modules": ["LinkedMap", "Iterator", "Set"], "class_members": [{"name": "makeObject", "type": "method"}, {"name": "setupSet", "type": "method"}]}, "category": "unit", "description": "Tests the ordering and element management of the Set."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bidimap/UnmodifiableBidiMapTest.java", "testclass_name": "UnmodifiableBidiMapTest", "dependencies": ["package org.apache.commons.collections4.bidimap;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Map;", "import org.apache.commons.collections4.BidiMap;", "import org.apache.commons.collections4.Unmodifiable;", "import org.apache.commons.collections4.collection.AbstractCollectionTest;", "import org.junit.jupiter.api.Test;"], "name": "UnmodifiableBidiMapTest", "description": "Tests for the UnmodifiableBidiMap class, focusing on its unmodifiable behavior and factory decoration.", "class_members": {"methods": [{"name": "getIterationBehaviour", "signature": "int getIterationBehaviour()"}, {"name": "ignoredTests", "signature": "String[] ignoredTests()"}, {"name": "isPutAddSupported", "signature": "boolean isPutAddSupported()"}, {"name": "isPutChangeSupported", "signature": "boolean isPutChangeSupported()"}, {"name": "isRemoveSupported", "signature": "boolean isRemoveSupported()"}, {"name": "makeConfirmedMap", "signature": "Map<K, V> makeConfirmedMap()"}, {"name": "makeFullMap", "signature": "BidiMap<K, V> makeFullMap()"}, {"name": "makeObject", "signature": "BidiMap<K, V> makeObject()"}]}, "test_cases": [{"name": "testDecorateFactory", "primary_tested": ["UnmodifiableBidiMap.unmodifiableBidiMap(BidiMap)"], "external_dependencies": {"modules": ["BidiMap", "UnmodifiableBidiMap", "NullPointerException"], "class_members": [{"name": "makeFullMap", "type": "method"}]}, "category": "unit", "description": "Tests the factory decoration of UnmodifiableBidiMap, ensuring it returns the same instance and handles null input correctly."}, {"name": "testUnmodifiable", "primary_tested": ["UnmodifiableBidiMap.makeObject()", "UnmodifiableBidiMap.makeFullMap()"], "external_dependencies": {"modules": ["Unmodifiable", "UnmodifiableBidiMap"], "class_members": [{"name": "makeObject", "type": "method"}, {"name": "makeFullMap", "type": "method"}]}, "category": "unit", "description": "Tests that the objects created by makeObject and makeFullMap are instances of Unmodifiable."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/UnmodifiableSetTest.java", "testclass_name": "UnmodifiableSetTest", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Arrays;", "import java.util.HashSet;", "import java.util.Set;", "import org.apache.commons.collections4.Unmodifiable;", "import org.junit.jupiter.api.Test;"], "name": "UnmodifiableSetTest", "description": "Tests for the UnmodifiableSet class, focusing on its factory methods and unmodifiable behavior.", "class_members": {"variables": [], "methods": [{"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "getIterationBehaviour", "signature": "int getIterationBehaviour()"}, {"name": "isAddSupported", "signature": "boolean isAddSupported()"}, {"name": "isRemoveSupported", "signature": "boolean isRemoveSupported()"}, {"name": "makeFullCollection", "signature": "Set<E> makeFullCollection()"}, {"name": "makeObject", "signature": "Set<E> makeObject()"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testDecorateFactory", "primary_tested": ["UnmodifiableSet.unmodifiableSet(Set<E>)"], "external_dependencies": {"modules": ["UnmodifiableSet", "Set", "HashSet", "Arrays"], "class_members": [{"name": "makeFullCollection", "type": "method"}]}, "category": "unit", "description": "Tests the factory method of UnmodifiableSet to ensure it returns the same instance and handles null input correctly."}, {"name": "testUnmodifiable", "primary_tested": ["UnmodifiableSet.unmodifiableSet(Set<E>)"], "associated_methods": ["UnmodifiableSet.makeObject()", "UnmodifiableSet.makeFullCollection()"], "external_dependencies": {"modules": ["UnmodifiableSet", "Set", "Unmodifiable"], "class_members": [{"name": "makeObject", "type": "method"}, {"name": "makeFullCollection", "type": "method"}]}, "category": "unit", "description": "Tests that the sets created by UnmodifiableSet are indeed unmodifiable."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/TransformedSortedSetTest.java", "testclass_name": "TransformedSortedSetTest", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.Set;", "import java.util.SortedSet;", "import java.util.TreeSet;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.collection.TransformedCollectionTest;", "import org.junit.jupiter.api.Test;"], "name": "TransformedSortedSetTest", "description": "Tests for TransformedSortedSet functionality.", "class_members": {"variables": [], "methods": [{"name": "makeFullCollection", "signature": "SortedSet<E> makeFullCollection()"}, {"name": "makeObject", "signature": "SortedSet<E> makeObject()"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testTransformedSet", "primary_tested": ["TransformedSortedSet.transformingSortedSet(SortedSet<E>,Transformer<E,E>)"], "associated_methods": ["SortedSet.add(E)", "SortedSet.contains(Object)", "SortedSet.remove(Object)"], "external_dependencies": {"modules": ["TransformedSortedSet", "Transformer", "TransformedCollectionTest", "TreeSet", "Arrays", "Integer"], "class_members": [], "project_specific_resources": ["TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER"]}, "category": "unit", "fixtures_used": [], "description": "Tests the transforming functionality of TransformedSortedSet by adding elements and checking their transformed state."}, {"name": "testTransformedSet_decorateTransform", "primary_tested": ["TransformedSet.transformedSet(Set<Object>,Transformer<Object,Object>)"], "associated_methods": ["Set.contains(Object)", "Set.remove(Object)"], "external_dependencies": {"modules": ["TransformedSet", "Transformer", "TransformedCollectionTest", "TreeSet", "Collections", "Integer"], "class_members": [], "project_specific_resources": ["TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER"]}, "category": "unit", "fixtures_used": [], "description": "Tests the decorating and transforming functionality of TransformedSet by adding elements and checking their transformed state."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/TransformedNavigableSetTest.java", "testclass_name": "TransformedNavigableSetTest", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.NavigableSet;", "import java.util.Set;", "import java.util.TreeSet;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.collection.TransformedCollectionTest;", "import org.junit.jupiter.api.Test;"], "name": "TransformedNavigableSetTest", "description": "Tests for TransformedNavigableSet functionality.", "class_members": {"methods": [{"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "makeFullCollection", "signature": "NavigableSet<E> makeFullCollection()"}, {"name": "makeObject", "signature": "NavigableSet<E> makeObject()"}]}, "test_cases": [{"name": "testTransformedSet", "primary_tested": ["TransformedNavigableSet.transformingNavigableSet(NavigableSet<E>,Transformer<E,E>)"], "associated_methods": ["NavigableSet.add(E)", "NavigableSet.size()", "NavigableSet.contains(Object)", "NavigableSet.remove(Object)"], "external_dependencies": {"modules": ["TransformedNavigableSet", "TreeSet", "Transformer", "TransformedCollectionTest", "Arrays", "Integer"], "class_members": [{"name": "makeFullCollection", "type": "method"}, {"name": "makeObject", "type": "method"}], "project_specific_resources": ["TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER"]}, "category": "unit", "description": "Tests the transforming functionality of TransformedNavigableSet by adding elements and checking their transformed state."}, {"name": "testTransformedSet_decorateTransform", "primary_tested": ["TransformedSet.transformedSet(Set<Object>,Transformer<Object,Object>)"], "associated_methods": ["Set.size()", "Set.contains(Object)", "Set.remove(Object)"], "external_dependencies": {"modules": ["TransformedSet", "TreeSet", "Transformer", "TransformedCollectionTest", "Collections", "Integer"], "project_specific_resources": ["TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER"]}, "category": "unit", "description": "Tests the transforming functionality of TransformedSet by adding elements and checking their transformed state."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/PredicatedSetTest.java", "testclass_name": "PredicatedSetTest", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.HashSet;", "import java.util.Set;", "import org.apache.commons.collections4.Predicate;", "import org.apache.commons.collections4.functors.TruePredicate;", "import org.junit.jupiter.api.Test;"], "name": "PredicatedSetTest", "description": "Unit tests for PredicatedSet functionality, focusing on predicate-based validation and illegal element addition.", "class_members": {"variables": [{"name": "truePredicate", "type": "Predicate<E>"}, {"name": "testPredicate", "type": "Predicate<E>"}], "methods": [{"name": "decorateSet", "signature": "protected PredicatedSet<E> decorateSet(Set<E> set, Predicate<? super E> predicate)"}, {"name": "makeTestSet", "signature": "protected PredicatedSet<E> makeTestSet()"}]}, "fixtures": [], "test_cases": [{"name": "testGetSet", "primary_tested": ["PredicatedSet.decorated()"], "external_dependencies": {"modules": ["PredicatedSet"], "class_members": [{"name": "makeTestSet", "type": "method"}]}, "category": "unit", "description": "Tests that the decorated set returned by PredicatedSet is not null."}, {"name": "testIllegalAdd", "primary_tested": ["Set.add(E)"], "associated_methods": ["Set.contains(Object)"], "external_dependencies": {"modules": ["Set", "Integer"], "class_members": [{"name": "makeTestSet", "type": "method"}]}, "category": "unit", "description": "Tests that adding an illegal element (Integer) to the set throws an IllegalArgumentException and the element is not contained in the set."}, {"name": "testIllegalAddAll", "primary_tested": ["Set.addAll(Collection<? extends E>)"], "associated_methods": ["Set.contains(Object)"], "external_dependencies": {"modules": ["Set", "HashSet", "Integer"], "class_members": [{"name": "makeTestSet", "type": "method"}]}, "category": "unit", "description": "Tests that adding a collection containing an illegal element (Integer) to the set throws an IllegalArgumentException and none of the elements are contained in the set."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/UnmodifiableSortedSetTest.java", "testclass_name": "UnmodifiableSortedSetTest", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Comparator;", "import java.util.Set;", "import java.util.SortedSet;", "import java.util.TreeSet;", "import org.junit.jupiter.api.Test;"], "name": "UnmodifiableSortedSetTest", "description": "Tests for the UnmodifiableSortedSet class, focusing on its unmodifiable nature and comparator functionality.", "class_members": {"variables": [{"name": "set", "type": "UnmodifiableSortedSet<E>"}, {"name": "array", "type": "ArrayList<E>"}], "methods": [{"name": "setupSet", "signature": "void setupSet()"}, {"name": "verifyUnmodifiable", "signature": "void verifyUnmodifiable(Set<E> set)"}]}, "test_cases": [{"name": "testComparator", "primary_tested": ["UnmodifiableSortedSet.comparator()"], "associated_methods": [], "external_dependencies": {"modules": ["Comparator"], "class_members": [{"name": "set", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the comparator method of UnmodifiableSortedSet, expecting it to be null for natural order."}, {"name": "testDecorateFactory", "primary_tested": ["UnmodifiableSortedSet.unmodifiableSortedSet(SortedSet<E>)"], "associated_methods": [], "external_dependencies": {"modules": ["UnmodifiableSortedSet", "SortedSet", "NullPointerException"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the factory method for creating unmodifiable sorted sets, ensuring it returns the same instance and handles null input correctly."}, {"name": "testUnmodifiable", "primary_tested": [], "associated_methods": ["UnmodifiableSortedSet.headSet(E)", "UnmodifiableSortedSet.tailSet(E)", "UnmodifiableSortedSet.subSet(E,E)"], "external_dependencies": {"modules": ["Set", "UnsupportedOperationException"], "class_members": [{"name": "set", "type": "variable"}, {"name": "verifyUnmodifiable", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests that the base set and its subsets are unmodifiable, verifying that all modification operations throw UnsupportedOperationException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bidimap/UnmodifiableSortedBidiMapTest.java", "testclass_name": "UnmodifiableSortedBidiMapTest", "dependencies": ["package org.apache.commons.collections4.bidimap;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.SortedMap;", "import java.util.TreeMap;", "import org.apache.commons.collections4.SortedBidiMap;", "import org.apache.commons.collections4.Unmodifiable;", "import org.junit.jupiter.api.Test;"], "name": "UnmodifiableSortedBidiMapTest", "description": "Tests for the UnmodifiableSortedBidiMap class, focusing on its unmodifiable behavior and factory methods.", "class_members": {"methods": [{"name": "ignoredTests", "signature": "String[] ignoredTests()"}, {"name": "isAllowNullKey", "signature": "boolean isAllowNullKey()"}, {"name": "isAllowNullValue", "signature": "boolean isAllowNullValue()"}, {"name": "isPutAddSupported", "signature": "boolean isPutAddSupported()"}, {"name": "isPutChangeSupported", "signature": "boolean isPutChangeSupported()"}, {"name": "isRemoveSupported", "signature": "boolean isRemoveSupported()"}, {"name": "isSubMapViewsSerializable", "signature": "boolean isSubMapViewsSerializable()"}, {"name": "makeConfirmedMap", "signature": "SortedMap<K, V> makeConfirmedMap()"}, {"name": "makeFullMap", "signature": "SortedBidiMap<K, V> makeFullMap()"}, {"name": "makeObject", "signature": "SortedBidiMap<K, V> makeObject()"}]}, "fixtures": [], "test_cases": [{"name": "testDecorateFactory", "primary_tested": ["UnmodifiableSortedBidiMap.unmodifiableSortedBidiMap(SortedBidiMap)"], "associated_methods": ["UnmodifiableSortedBidiMapTest.makeFullMap()"], "external_dependencies": {"modules": ["SortedBidiMap", "UnmodifiableSortedBidiMap"], "class_members": [{"name": "makeFullMap", "type": "method"}]}, "category": "unit", "description": "Tests the factory method for creating an unmodifiable sorted bidi map and ensures it throws a NullPointerException when given null."}, {"name": "testUnmodifiable", "primary_tested": ["UnmodifiableSortedBidiMap.unmodifiableSortedBidiMap(SortedBidiMap)"], "associated_methods": ["UnmodifiableSortedBidiMapTest.makeObject()", "UnmodifiableSortedBidiMapTest.makeFullMap()"], "external_dependencies": {"modules": ["Unmodifiable", "UnmodifiableSortedBidiMap"], "class_members": [{"name": "makeObject", "type": "method"}, {"name": "makeFullMap", "type": "method"}]}, "category": "unit", "description": "Tests that the created maps are instances of Unmodifiable."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/SkippingIteratorTest.java", "testclass_name": "SkippingIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SkippingIteratorTest", "description": "Unit tests for the SkippingIterator class, which skips a specified number of elements in an iterator.", "class_members": {"variables": [{"name": "testArray", "type": "final String[]"}, {"name": "testList", "type": "List<E>"}], "methods": [{"name": "makeEmptyIterator", "signature": "Iterator<E> makeEmptyIterator()"}, {"name": "makeObject", "signature": "Iterator<E> makeObject()"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNegativeOffset", "primary_tested": ["SkippingIterator.<init>(Iterator<E>,int)"], "external_dependencies": {"modules": ["SkippingIterator", "IllegalArgumentException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the case if a negative offset is passed to the constructor. Expected IllegalArgumentException."}, {"name": "testOffsetGreaterThanSize", "primary_tested": ["SkippingIterator.<init>(Iterator<E>,int)"], "external_dependencies": {"modules": ["SkippingIterator", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the case if the offset passed to the constructor is greater than the decorated iterator's size. The SkippingIterator should behave as if there are no more elements to return."}, {"name": "testRemoveCalledTwice", "primary_tested": ["SkippingIterator.remove()"], "external_dependencies": {"modules": ["SkippingIterator", "IllegalStateException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the remove() method being called twice without calling next() in between. Expected IllegalStateException."}, {"name": "testRemoveFirst", "primary_tested": ["SkippingIterator.remove()"], "external_dependencies": {"modules": ["SkippingIterator", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests removing the first element. Verifies that the element is removed from the underlying collection."}, {"name": "testRemoveLast", "primary_tested": ["SkippingIterator.remove()"], "external_dependencies": {"modules": ["SkippingIterator", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests removing the last element. Verifies that the element is removed from the underlying collection."}, {"name": "testRemoveMiddle", "primary_tested": ["SkippingIterator.remove()"], "external_dependencies": {"modules": ["SkippingIterator", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests removing an element in the middle of the iterator. Verifies that the element is removed from the underlying collection."}, {"name": "testRemoveUnsupported", "primary_tested": ["SkippingIterator.remove()"], "external_dependencies": {"modules": ["SkippingIterator", "UnsupportedOperationException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the case if the decorated iterator does not support the remove() method and throws an UnsupportedOperationException."}, {"name": "testRemoveWithoutCallingNext", "primary_tested": ["SkippingIterator.remove()"], "external_dependencies": {"modules": ["SkippingIterator", "IllegalStateException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the remove() method being called without next() being called first. Expected IllegalStateException."}, {"name": "testSameAsDecorated", "primary_tested": ["SkippingIterator.<init>(Iterator<E>,int)"], "external_dependencies": {"modules": ["SkippingIterator", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests a decorated iterator bounded such that the offset is zero, in that the SkippingIterator should return all the same elements as its decorated iterator."}, {"name": "testSkipping", "primary_tested": ["SkippingIterator.<init>(Iterator<E>,int)"], "external_dependencies": {"modules": ["SkippingIterator", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests a decorated iterator bounded such that the first element returned is at an index greater than its first element, and the last element returned is at an index less than its last element."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bidimap/DualTreeBidiMap2Test.java", "testclass_name": "DualTreeBidiMap2Test", "dependencies": ["package org.apache.commons.collections4.bidimap;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.io.ByteArrayInputStream;", "import java.io.ByteArrayOutputStream;", "import java.io.ObjectInputStream;", "import java.io.ObjectOutputStream;", "import java.io.Serializable;", "import java.util.Collections;", "import java.util.Comparator;", "import java.util.Iterator;", "import java.util.List;", "import java.util.TreeMap;", "import org.apache.commons.collections4.SortedBidiMap;", "import org.apache.commons.collections4.comparators.ComparableComparator;", "import org.apache.commons.collections4.comparators.ReverseComparator;", "import org.junit.jupiter.api.Test;"], "name": "DualTreeBidiMap2Test", "description": "Unit tests for DualTreeBidiMap2, focusing on serialization, comparator checks, and sort order.", "class_members": {"variables": [], "methods": [], "nested_classes": [{"name": "IntegerComparator", "description": "Internal comparator class for Integer objects"}]}, "fixtures": [], "test_cases": [{"name": "testCollections364", "primary_tested": ["DualTreeBidiMap.comparator()"], "associated_methods": ["DualTreeBidiMap.valueComparator()"], "external_dependencies": {"modules": ["DualTreeBidiMap", "ByteArrayOutputStream", "ObjectOutputStream", "ObjectInputStream", "ByteArrayInputStream", "IntegerComparator"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the serialization and deserialization of DualTreeBidiMap with custom comparators."}, {"name": "testComparator", "primary_tested": ["SortedBidiMap.comparator()"], "external_dependencies": {"modules": ["SortedBidiMap", "ReverseComparator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the comparator of the SortedBidiMap, ensuring it is an instance of ReverseComparator."}, {"name": "testComparator2", "primary_tested": ["DualTreeBidiMap.firstKey()", "DualTreeBidiMap.lastKey()"], "external_dependencies": {"modules": ["DualTreeBidiMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the key order in DualTreeBidiMap with a case-insensitive comparator."}, {"name": "testSerializeDeserializeCheckComparator", "primary_tested": ["SortedBidiMap.comparator()"], "external_dependencies": {"modules": ["SortedBidiMap", "ByteArrayOutputStream", "ObjectOutputStream", "ObjectInputStream", "ByteArrayInputStream", "ReverseComparator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the serialization and deserialization of SortedBidiMap, ensuring the comparator is preserved."}, {"name": "testSortOrder", "primary_tested": ["SortedBidiMap.keySet()"], "associated_methods": ["Collections.sort(List,Comparator)"], "external_dependencies": {"modules": ["SortedBidiMap", "ReverseComparator", "ComparableComparator", "Collections"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the sort order of keys in SortedBidiMap, ensuring they match the expected reverse order."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/PermutationIteratorTest.java", "testclass_name": "PermutationIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.HashSet;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import java.util.Set;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "PermutationIteratorTest", "description": "Unit tests for the PermutationIterator class, which generates permutations of a given list.", "class_members": {"variables": [{"name": "testArray", "type": "Character[]"}, {"name": "testList", "type": "List<Character>"}], "methods": [{"name": "makeEmptyIterator", "signature": "PermutationIterator<Character> makeEmptyIterator()"}, {"name": "makeObject", "signature": "PermutationIterator<Character> makeObject()"}, {"name": "setUp", "signature": "void setUp()"}, {"name": "supportsEmptyIterator", "signature": "boolean supportsEmptyIterator()"}, {"name": "supportsRemove", "signature": "boolean supportsRemove()"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEmptyCollection", "primary_tested": ["PermutationIterator.hasNext()"], "associated_methods": ["PermutationIterator.next()"], "external_dependencies": {"modules": ["PermutationIterator", "List"], "class_members": [{"name": "makeEmptyIterator", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of the PermutationIterator with an empty collection."}, {"name": "testPermutationException", "primary_tested": ["PermutationIterator.next()"], "associated_methods": ["PermutationIterator.hasNext()"], "external_dependencies": {"modules": ["PermutationIterator", "List", "NoSuchElementException"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests that an exception is thrown when trying to get a permutation after all have been returned."}, {"name": "testPermutationExhaustivity", "primary_tested": ["PermutationIterator.next()"], "associated_methods": ["PermutationIterator.hasNext()"], "external_dependencies": {"modules": ["PermutationIterator", "List"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests that all permutations of a given list are generated."}, {"name": "testPermutationResultSize", "primary_tested": ["PermutationIterator.hasNext()"], "associated_methods": ["PermutationIterator.next()"], "external_dependencies": {"modules": ["PermutationIterator", "List"]}, "category": "unit", "fixtures_used": [], "description": "Tests the size of the permutation results for different list sizes."}, {"name": "testPermutationUnicity", "primary_tested": ["PermutationIterator.next()"], "associated_methods": ["PermutationIterator.hasNext()"], "external_dependencies": {"modules": ["PermutationIterator", "List", "Set"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests that all permutations are unique."}, {"name": "testPermutatorHasMore", "primary_tested": ["PermutationIterator.hasNext()"], "associated_methods": ["PermutationIterator.next()"], "external_dependencies": {"modules": ["PermutationIterator"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the hasNext method of the PermutationIterator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/PeekingIteratorTest.java", "testclass_name": "PeekingIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "PeekingIteratorTest", "description": "Unit tests for the PeekingIterator class, which provides a peeking functionality for iterators.", "class_members": {"variables": [{"name": "testArray", "type": "final String[]"}, {"name": "testList", "type": "List<E>"}], "methods": [{"name": "makeEmptyIterator", "signature": "Iterator<E> makeEmptyIterator()"}, {"name": "makeObject", "signature": "PeekingIterator<E> makeObject()"}, {"name": "supportsRemove", "signature": "boolean supportsRemove()"}, {"name": "validate", "signature": "void validate(Iterator<E> iter, E... items)"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEmpty", "primary_tested": ["PeekingIterator.hasNext()"], "external_dependencies": {"modules": ["PeekingIterator", "Collections", "Iterator"], "class_members": [{"name": "makeEmptyIterator", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of an empty iterator."}, {"name": "testIllegalRemove", "primary_tested": ["PeekingIterator.remove()"], "associated_methods": ["PeekingIterator.next()", "PeekingIterator.peek()"], "external_dependencies": {"modules": ["PeekingIterator", "IllegalStateException"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior of the remove method when it is called illegally."}, {"name": "testIteratorExhausted", "primary_tested": ["PeekingIterator.hasNext()", "PeekingIterator.peek()", "PeekingIterator.element()"], "external_dependencies": {"modules": ["PeekingIterator", "NoSuchElementException"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior of the iterator when it is exhausted."}, {"name": "testMultiplePeek", "primary_tested": ["PeekingIterator.peek()", "PeekingIterator.next()", "PeekingIterator.hasNext()"], "external_dependencies": {"modules": ["PeekingIterator"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the peeking functionality of the iterator multiple times."}, {"name": "testSinglePeek", "primary_tested": ["PeekingIterator.peek()", "PeekingIterator.element()"], "associated_methods": ["PeekingIteratorTest.validate(Iterator<E>, E...)"], "external_dependencies": {"modules": ["PeekingIterator"], "class_members": [{"name": "makeObject", "type": "method"}, {"name": "validate", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the peeking functionality of the iterator a single time."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/Collections701Test.java", "testclass_name": "Collections701Test", "dependencies": ["package org.apache.commons.collections4.list;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import java.util.ArrayList;", "import java.util.HashSet;", "import java.util.List;", "import java.util.Set;", "import org.junit.jupiter.api.Test;"], "name": "Collections701Test", "description": "Unit tests for verifying the behavior of ArrayList, HashSet, and SetUniqueList in the context of adding self-references.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testArrayList", "primary_tested": ["ArrayList.add(Object)", "ArrayList.size()", "ArrayList.get(int)"], "external_dependencies": {"modules": ["ArrayList"]}, "category": "unit", "description": "Tests the behavior of adding a self-reference to an ArrayList and verifies the size and content."}, {"name": "testHashSet", "primary_tested": ["HashSet.add(Object)", "HashSet.size()", "HashSet.iterator()"], "external_dependencies": {"modules": ["HashSet"]}, "category": "unit", "description": "Tests the behavior of adding a self-reference to a HashSet and verifies the size and content."}, {"name": "testSetUniqueList", "primary_tested": ["SetUniqueList.setUniqueList(List)", "SetUniqueList.add(Object)", "SetUniqueList.size()", "SetUniqueList.get(int)"], "external_dependencies": {"modules": ["ArrayList", "SetUniqueList"]}, "category": "unit", "description": "Tests the behavior of adding a self-reference to a SetUniqueList and verifies the size and content."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/LRUMapTest.java", "testclass_name": "LRUMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.fail;", "import java.util.ArrayList;", "import java.util.HashMap;", "import java.util.Iterator;", "import java.util.List;", "import java.util.Map;", "import org.apache.commons.collections4.MapIterator;", "import org.apache.commons.collections4.OrderedMap;", "import org.apache.commons.collections4.ResettableIterator;", "import org.junit.jupiter.api.Test;"], "name": "LRUMapTest", "description": "Unit tests for the LRUMap class, focusing on its LRU (Least Recently Used) eviction policy and internal state management.", "class_members": {"variables": [], "methods": [], "nested_classes": [{"name": "MockLRUMapSubclass", "description": "A subclass of LRUMap used for testing the LRU removal behavior."}, {"name": "MockLRUMapSubclassBlocksRemove", "description": "A subclass of LRUMap that blocks the removal of LRU entries."}, {"name": "MockLRUMapSubclassFirstBlocksRemove", "description": "A subclass of LRUMap that blocks the removal of the first LRU entry."}, {"name": "SingleHashCode", "description": "A helper class used to ensure consistent hash codes for testing purposes."}]}, "fixtures": [], "test_cases": [{"name": "testAccessOrder", "primary_tested": ["LRUMap.put(K,V)", "LRUMap.get(K)"], "associated_methods": ["LRUMap.keySet().iterator()", "LRUMap.values().iterator()"], "external_dependencies": {"modules": ["LRUMap", "Iterator"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the access order of the LRUMap, ensuring that the most recently accessed elements are moved to the end of the order."}, {"name": "testAccessOrder2", "primary_tested": ["LRUMap.put(K,V)", "LRUMap.get(K,boolean)"], "associated_methods": ["LRUMap.keySet().iterator()", "LRUMap.values().iterator()"], "external_dependencies": {"modules": ["LRUMap", "Iterator"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the access order of the LRUMap with a boolean parameter, ensuring that the most recently accessed elements are moved to the end of the order."}, {"name": "testClone", "primary_tested": ["LRUMap.clone()"], "associated_methods": [], "external_dependencies": {"modules": ["LRUMap", "Map"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the cloning functionality of the LRUMap, ensuring that the cloned map is a deep copy with the same elements."}, {"name": "testCtors", "primary_tested": ["LRUMap.LRUMap(int)", "LRUMap.LRUMap(int,int,float,boolean)"], "associated_methods": [], "external_dependencies": {"modules": ["LRUMap", "IllegalArgumentException"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the constructors of the LRUMap, ensuring that they throw exceptions for invalid parameters."}, {"name": "testInternalState_Buckets", "primary_tested": ["LRUMap.put(K,V)", "LRUMap.get(K)"], "associated_methods": ["LRUMap.hashIndex(int,int)", "LRUMap.hash(Object)"], "external_dependencies": {"modules": ["LRUMap", "SingleHashCode"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the internal state of the LRUMap, ensuring that the buckets and linked list are correctly managed."}, {"name": "testInternalState_getEntry_int", "primary_tested": ["LRUMap.getEntry(int)"], "associated_methods": [], "external_dependencies": {"modules": ["LRUMap", "SingleHashCode", "IndexOutOfBoundsException"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the getEntry method of the LRUMap, ensuring that it returns the correct entry and handles out-of-bounds indices."}, {"name": "testLRU", "primary_tested": ["LRUMap.put(K,V)", "LRUMap.isFull()", "LRUMap.maxSize()"], "associated_methods": ["LRUMap.keySet().iterator()", "LRUMap.values().iterator()"], "external_dependencies": {"modules": ["LRUMap", "Iterator"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the LRU eviction policy of the LRUMap, ensuring that the least recently used elements are removed when the map is full."}, {"name": "testRemoveLRU", "primary_tested": ["MockLRUMapSubclass.removeLRU(LinkEntry<K,V>)"], "associated_methods": ["MockLRUMapSubclass.put(K,V)", "MockLRUMapSubclass.containsKey(Object)"], "external_dependencies": {"modules": ["MockLRUMapSubclass", "LinkEntry"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the custom LRU removal behavior in the MockLRUMapSubclass, ensuring that the least recently used entry is correctly removed."}, {"name": "testRemoveLRUBlocksRemove", "primary_tested": ["MockLRUMapSubclassBlocksRemove.removeLRU(LinkEntry<K,V>)"], "associated_methods": ["MockLRUMapSubclassBlocksRemove.put(K,V)", "MockLRUMapSubclassBlocksRemove.containsKey(Object)"], "external_dependencies": {"modules": ["MockLRUMapSubclassBlocksRemove", "LinkEntry"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the blocking of LRU removal in the MockLRUMapSubclassBlocksRemove, ensuring that no entries are removed."}, {"name": "testRemoveLRUBlocksRemoveScan", "primary_tested": ["MockLRUMapSubclassBlocksRemove.removeLRU(LinkEntry<K,V>)"], "associated_methods": ["MockLRUMapSubclassBlocksRemove.put(K,V)", "MockLRUMapSubclassBlocksRemove.containsKey(Object)"], "external_dependencies": {"modules": ["MockLRUMapSubclassBlocksRemove", "LinkEntry"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the blocking of LRU removal with scanning in the MockLRUMapSubclassBlocksRemove, ensuring that no entries are removed."}, {"name": "testRemoveLRUFirstBlocksRemove", "primary_tested": ["MockLRUMapSubclassFirstBlocksRemove.removeLRU(LinkEntry<K,V>)"], "associated_methods": ["MockLRUMapSubclassFirstBlocksRemove.put(K,V)", "MockLRUMapSubclassFirstBlocksRemove.containsKey(Object)"], "external_dependencies": {"modules": ["MockLRUMapSubclassFirstBlocksRemove", "LinkEntry"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the blocking of the first LRU removal in the MockLRUMapSubclassFirstBlocksRemove, ensuring that the first entry is not removed."}, {"name": "testReset", "primary_tested": ["ResettableIterator.reset()"], "associated_methods": ["OrderedMap.mapIterator()"], "external_dependencies": {"modules": ["ResettableIterator", "OrderedMap", "ArrayList"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the reset functionality of the ResettableIterator, ensuring that the iterator can be reset to its initial state."}, {"name": "testSynchronizedRemoveFromEntrySet", "primary_tested": ["LRUMap.entrySet().removeIf(Predicate<Map.Entry<K,V>>)"], "associated_methods": ["LRUMap.put(K,V)"], "external_dependencies": {"modules": ["LRUMap", "Map", "Thread", "ThreadGroup", "HashMap"], "class_members": [], "project_specific_resources": []}, "category": "integration", "fixtures_used": [], "description": "Tests the synchronized removal of entries from the entry set in a multi-threaded environment, ensuring thread safety."}, {"name": "testSynchronizedRemoveFromKeySet", "primary_tested": ["LRUMap.keySet().iterator().remove()"], "associated_methods": ["LRUMap.put(K,V)"], "external_dependencies": {"modules": ["LRUMap", "Map", "Thread", "ThreadGroup", "HashMap"], "class_members": [], "project_specific_resources": []}, "category": "integration", "fixtures_used": [], "description": "Tests the synchronized removal of entries from the key set in a multi-threaded environment, ensuring thread safety."}, {"name": "testSynchronizedRemoveFromMapIterator", "primary_tested": ["MapIterator.remove()"], "associated_methods": ["LRUMap.put(K,V)"], "external_dependencies": {"modules": ["LRUMap", "MapIterator", "Thread", "ThreadGroup", "HashMap"], "class_members": [], "project_specific_resources": []}, "category": "integration", "fixtures_used": [], "description": "Tests the synchronized removal of entries using a map iterator in a multi-threaded environment, ensuring thread safety."}, {"name": "testSynchronizedRemoveFromValues", "primary_tested": ["LRUMap.values().removeIf(Predicate<V>)"], "associated_methods": ["LRUMap.put(K,V)"], "external_dependencies": {"modules": ["LRUMap", "Map", "Thread", "ThreadGroup", "HashMap"], "class_members": [], "project_specific_resources": []}, "category": "integration", "fixtures_used": [], "description": "Tests the synchronized removal of entries from the values collection in a multi-threaded environment, ensuring thread safety."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/PredicatedNavigableSetTest.java", "testclass_name": "PredicatedNavigableSetTest", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.Arrays;", "import java.util.Comparator;", "import java.util.NavigableSet;", "import java.util.Set;", "import java.util.TreeSet;", "import org.apache.commons.collections4.Predicate;", "import org.apache.commons.collections4.functors.TruePredicate;", "import org.junit.jupiter.api.Test;"], "name": "PredicatedNavigableSetTest", "description": "Tests for the PredicatedNavigableSet class, focusing on predicate validation and set operations.", "class_members": {"variables": [{"name": "truePredicate", "type": "Predicate<E>"}, {"name": "testPredicate", "type": "Predicate<E>"}], "methods": [{"name": "makeFullCollection", "signature": "NavigableSet<E> makeFullCollection()"}, {"name": "makeObject", "signature": "NavigableSet<E> makeObject()"}, {"name": "makeTestSet", "signature": "PredicatedNavigableSet<E> makeTestSet()"}]}, "fixtures": [], "test_cases": [{"name": "testComparator", "primary_tested": ["NavigableSet.comparator()"], "external_dependencies": {"modules": ["NavigableSet", "Comparator"], "class_members": [{"name": "makeTestSet", "type": "method"}]}, "category": "unit", "description": "Tests the comparator method of the NavigableSet, expecting it to be null for natural order."}, {"name": "testGetSet", "primary_tested": ["PredicatedNavigableSet.decorated()"], "external_dependencies": {"modules": ["PredicatedNavigableSet"], "class_members": [{"name": "makeTestSet", "type": "method"}]}, "category": "unit", "description": "Tests the decorated method of PredicatedNavigableSet, ensuring it returns a non-null set."}, {"name": "testIllegalAdd", "primary_tested": ["NavigableSet.add(E)"], "external_dependencies": {"modules": ["NavigableSet", "IllegalArgumentException"], "class_members": [{"name": "makeTestSet", "type": "method"}]}, "category": "unit", "description": "Tests the add method of NavigableSet, expecting an IllegalArgumentException for an invalid element."}, {"name": "testIllegalAddAll", "primary_tested": ["NavigableSet.addAll(Collection<? extends E>)"], "external_dependencies": {"modules": ["NavigableSet", "IllegalArgumentException", "TreeSet"], "class_members": [{"name": "makeTestSet", "type": "method"}]}, "category": "unit", "description": "Tests the addAll method of NavigableSet, expecting an IllegalArgumentException for invalid elements."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/UnmodifiableNavigableSetTest.java", "testclass_name": "UnmodifiableNavigableSetTest", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Comparator;", "import java.util.NavigableSet;", "import java.util.Set;", "import java.util.TreeSet;", "import org.junit.jupiter.api.Test;"], "name": "UnmodifiableNavigableSetTest", "description": "Tests for the UnmodifiableNavigableSet class, focusing on its unmodifiable nature and comparator functionality.", "class_members": {"variables": [{"name": "set", "type": "UnmodifiableNavigableSet<E>"}, {"name": "array", "type": "ArrayList<E>"}], "methods": [{"name": "setupSet", "signature": "void setupSet()"}, {"name": "verifyUnmodifiable", "signature": "void verifyUnmodifiable(Set<E>)"}]}, "fixtures": [], "test_cases": [{"name": "testComparator", "primary_tested": ["UnmodifiableNavigableSet.comparator()"], "associated_methods": [], "external_dependencies": {"modules": ["Comparator"], "class_members": [{"name": "set", "type": "variable"}, {"name": "setupSet", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests that the comparator of the UnmodifiableNavigableSet is null, indicating natural order."}, {"name": "testDecorateFactory", "primary_tested": ["UnmodifiableNavigableSet.unmodifiableNavigableSet(NavigableSet<E>)"], "associated_methods": [], "external_dependencies": {"modules": ["NavigableSet", "UnmodifiableNavigableSet"], "class_members": [{"name": "makeFullCollection", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the factory method for creating an unmodifiable navigable set and ensures it throws a NullPointerException when given null."}, {"name": "testUnmodifiable", "primary_tested": [], "associated_methods": ["UnmodifiableNavigableSet.descendingSet()", "UnmodifiableNavigableSet.headSet(E)", "UnmodifiableNavigableSet.headSet(E,boolean)", "UnmodifiableNavigableSet.tailSet(E)", "UnmodifiableNavigableSet.tailSet(E,boolean)", "UnmodifiableNavigableSet.subSet(E,E)", "UnmodifiableNavigableSet.subSet(E,boolean,E,boolean)"], "external_dependencies": {"modules": ["NavigableSet", "Set"], "class_members": [{"name": "set", "type": "variable"}, {"name": "setupSet", "type": "method"}, {"name": "verifyUnmodifiable", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests that the base set and its subsets are unmodifiable."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/NodeCachingLinkedListTest.java", "testclass_name": "NodeCachingLinkedListTest", "dependencies": ["package org.apache.commons.collections4.list;", "import java.util.Arrays;", "import java.util.LinkedList;", "import org.junit.jupiter.api.Test;"], "name": "NodeCachingLinkedListTest", "description": "Test class for NodeCachingLinkedList, focusing on performance comparison and cache management.", "class_members": {"variables": [{"name": "ncll", "type": "NodeCachingLinkedList<Object>"}, {"name": "ll", "type": "LinkedList<Object>"}, {"name": "o1", "type": "Object"}, {"name": "o2", "type": "Object"}, {"name": "loopCount", "type": "int"}], "methods": [{"name": "compareSpeed", "signature": "void compareSpeed()"}, {"name": "getCollection", "signature": "NodeCachingLinkedList<E> getCollection()"}, {"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "makeObject", "signature": "NodeCachingLinkedList<E> makeObject()"}]}, "fixtures": [], "test_cases": [{"name": "testShrinkCache", "primary_tested": ["NodeCachingLinkedList.removeAllNodes()", "NodeCachingLinkedList.setMaximumCacheSize(int)", "NodeCachingLinkedList.addAll(Collection<? extends E>)", "NodeCachingLinkedList.removeNode(Node<E>)", "NodeCachingLinkedList.getNode(int,boolean)"], "associated_methods": ["NodeCachingLinkedList.checkNodes()"], "external_dependencies": {"modules": ["NodeCachingLinkedList", "Arrays", "String"], "class_members": [{"name": "list", "type": "variable"}], "project_specific_resources": []}, "category": "performance", "fixtures_used": [], "description": "Tests the cache shrinking functionality of NodeCachingLinkedList by adding and removing elements, then verifying the cache size."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/TransformedSetTest.java", "testclass_name": "TransformedSetTest", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.HashSet;", "import java.util.Set;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.collection.TransformedCollectionTest;", "import org.junit.jupiter.api.Test;"], "name": "TransformedSetTest", "description": "Tests for the TransformedSet class, which transforms elements in a set using a Transformer.", "class_members": {"variables": [], "methods": [{"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "getIterationBehaviour", "signature": "int getIterationBehaviour()"}, {"name": "makeConfirmedCollection", "signature": "Set<E> makeConfirmedCollection()"}, {"name": "makeConfirmedFullCollection", "signature": "Set<E> makeConfirmedFullCollection()"}, {"name": "makeFullCollection", "signature": "Set<E> makeFullCollection()"}, {"name": "makeObject", "signature": "Set<E> makeObject()"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testTransformedSet", "primary_tested": ["TransformedSet.transformingSet(Set<E>,Transformer<E,E>)"], "associated_methods": ["TransformedSet.add(E)", "TransformedSet.contains(Object)", "TransformedSet.remove(Object)"], "external_dependencies": {"modules": ["TransformedSet", "TransformedCollectionTest", "Transformer", "HashSet", "Arrays", "Integer"], "class_members": [], "project_specific_resources": ["TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER"]}, "category": "unit", "fixtures_used": [], "description": "Tests the transforming functionality of TransformedSet by adding elements and checking their transformed state."}, {"name": "testTransformedSet_decorateTransform", "primary_tested": ["TransformedSet.transformedSet(Set<Object>,Transformer<Object,Object>)"], "associated_methods": ["TransformedSet.contains(Object)", "TransformedSet.remove(Object)"], "external_dependencies": {"modules": ["TransformedSet", "TransformedCollectionTest", "Transformer", "HashSet", "Collections", "Integer"], "class_members": [], "project_specific_resources": ["TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER"]}, "category": "unit", "fixtures_used": [], "description": "Tests the transformedSet method by adding elements and checking their transformed state."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/PredicatedSortedSetTest.java", "testclass_name": "PredicatedSortedSetTest", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.Arrays;", "import java.util.Comparator;", "import java.util.Set;", "import java.util.SortedSet;", "import java.util.TreeSet;", "import org.apache.commons.collections4.Predicate;", "import org.apache.commons.collections4.functors.TruePredicate;", "import org.junit.jupiter.api.Test;"], "name": "PredicatedSortedSetTest", "description": "Unit tests for PredicatedSortedSet functionality.", "class_members": {"variables": [{"name": "truePredicate", "type": "Predicate<E>"}, {"name": "testPredicate", "type": "Predicate<E>"}], "methods": [{"name": "makeFullCollection", "signature": "SortedSet<E> makeFullCollection()"}, {"name": "makeObject", "signature": "SortedSet<E> makeObject()"}, {"name": "makeTestSet", "signature": "PredicatedSortedSet<E> makeTestSet()"}]}, "fixtures": [], "test_cases": [{"name": "testComparator", "primary_tested": ["SortedSet.comparator()"], "external_dependencies": {"modules": ["SortedSet", "Comparator"], "class_members": [{"name": "makeTestSet", "type": "method"}]}, "category": "unit", "description": "Tests the comparator method of the SortedSet."}, {"name": "testGetSet", "primary_tested": ["PredicatedSortedSet.decorated()"], "external_dependencies": {"modules": ["PredicatedSortedSet"], "class_members": [{"name": "makeTestSet", "type": "method"}]}, "category": "unit", "description": "Tests the decorated method of the PredicatedSortedSet."}, {"name": "testIllegalAdd", "primary_tested": ["SortedSet.add(E)"], "external_dependencies": {"modules": ["SortedSet", "IllegalArgumentException"], "class_members": [{"name": "makeTestSet", "type": "method"}]}, "category": "unit", "description": "Tests the add method of the SortedSet with an illegal element."}, {"name": "testIllegalAddAll", "primary_tested": ["SortedSet.addAll(Collection<? extends E>)"], "external_dependencies": {"modules": ["SortedSet", "IllegalArgumentException"], "class_members": [{"name": "makeTestSet", "type": "method"}]}, "category": "unit", "description": "Tests the addAll method of the SortedSet with a collection containing illegal elements."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/ZippingIteratorTest.java", "testclass_name": "ZippingIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import org.apache.commons.collections4.IteratorUtils;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ZippingIteratorTest", "description": "Unit tests for the ZippingIterator class, which combines multiple iterators into a single iterator.", "class_members": {"variables": [{"name": "evens", "type": "ArrayList<Integer>"}, {"name": "odds", "type": "ArrayList<Integer>"}, {"name": "fib", "type": "ArrayList<Integer>"}], "methods": [{"name": "makeEmptyIterator", "signature": "ZippingIterator<Integer> makeEmptyIterator()"}, {"name": "makeObject", "signature": "ZippingIterator<Integer> makeObject()"}, {"name": "setUp", "signature": "void setUp() throws Exception"}], "nested_classes": []}, "fixtures": ["setUp"], "test_cases": [{"name": "testIterateEven", "primary_tested": ["ZippingIterator.hasNext()", "ZippingIterator.next()"], "external_dependencies": {"modules": ["ZippingIterator", "ArrayList"], "class_members": [{"name": "evens", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the iteration over a single list of even numbers using ZippingIterator."}, {"name": "testIterateEvenEven", "primary_tested": ["ZippingIterator.hasNext()", "ZippingIterator.next()"], "external_dependencies": {"modules": ["ZippingIterator", "ArrayList"], "class_members": [{"name": "evens", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the iteration over two lists of even numbers using ZippingIterator."}, {"name": "testIterateEvenOdd", "primary_tested": ["ZippingIterator.hasNext()", "ZippingIterator.next()"], "external_dependencies": {"modules": ["ZippingIterator", "ArrayList"], "class_members": [{"name": "evens", "type": "variable"}, {"name": "odds", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the iteration over a list of even numbers and a list of odd numbers using ZippingIterator."}, {"name": "testIterateFibEvenOdd", "primary_tested": ["ZippingIterator.hasNext()", "ZippingIterator.next()"], "external_dependencies": {"modules": ["ZippingIterator", "ArrayList"], "class_members": [{"name": "fib", "type": "variable"}, {"name": "evens", "type": "variable"}, {"name": "odds", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the iteration over a list of Fibonacci numbers, a list of even numbers, and a list of odd numbers using ZippingIterator."}, {"name": "testIterateOddEven", "primary_tested": ["ZippingIterator.hasNext()", "ZippingIterator.next()"], "external_dependencies": {"modules": ["ZippingIterator", "ArrayList"], "class_members": [{"name": "odds", "type": "variable"}, {"name": "evens", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the iteration over a list of odd numbers and a list of even numbers using ZippingIterator."}, {"name": "testRemoveFromDouble", "primary_tested": ["ZippingIterator.hasNext()", "ZippingIterator.next()", "ZippingIterator.remove()"], "external_dependencies": {"modules": ["ZippingIterator", "ArrayList"], "class_members": [{"name": "evens", "type": "variable"}, {"name": "odds", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of elements from a ZippingIterator that combines two lists."}, {"name": "testRemoveFromSingle", "primary_tested": ["ZippingIterator.hasNext()", "ZippingIterator.next()", "ZippingIterator.remove()"], "external_dependencies": {"modules": ["ZippingIterator", "ArrayList"], "class_members": [{"name": "evens", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of elements from a ZippingIterator that combines a single list."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/TransformerUtilsTest.java", "testclass_name": "TransformerUtilsTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.ArrayList;", "import java.util.Collection;", "import java.util.Collections;", "import java.util.Date;", "import java.util.HashMap;", "import java.util.List;", "import java.util.Map;", "import org.apache.commons.collections4.functors.ConstantTransformer;", "import org.apache.commons.collections4.functors.EqualPredicate;", "import org.apache.commons.collections4.functors.ExceptionTransformer;", "import org.apache.commons.collections4.functors.FalsePredicate;", "import org.apache.commons.collections4.functors.NOPTransformer;", "import org.apache.commons.collections4.functors.StringValueTransformer;", "import org.apache.commons.collections4.functors.TruePredicate;", "import org.apache.commons.lang3.StringUtils;", "import org.junit.jupiter.api.Test;"], "name": "TransformerUtilsTest", "description": "Unit tests for various utility methods in TransformerUtils.", "class_members": {"variables": [{"name": "cObject", "type": "static final Object"}, {"name": "cString", "type": "static final Object"}, {"name": "cInteger", "type": "static final Object"}]}, "fixtures": [], "test_cases": [{"name": "testChainedTransformer", "primary_tested": ["TransformerUtils.chainedTransformer(Transformer[],Transformer[])"], "associated_methods": ["TransformerUtils.constantTransformer(Object)", "TransformerUtils.chainedTransformer(Collection<Transformer<Object, Object>>)", "TransformerUtils.chainedTransformer(Transformer[])"], "external_dependencies": {"modules": ["TransformerUtils", "NOPTransformer", "ArrayList", "Collections", "NullPointerException"], "class_members": [{"name": "cString", "type": "variable"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the chained transformer functionality."}, {"name": "testCloneTransformer", "primary_tested": ["TransformerUtils.cloneTransformer()"], "associated_methods": [], "external_dependencies": {"modules": ["TransformerUtils", "IllegalArgumentException"], "class_members": [{"name": "cString", "type": "variable"}, {"name": "cInteger", "type": "variable"}, {"name": "cObject", "type": "variable"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the clone transformer functionality."}, {"name": "testConstantTransformer", "primary_tested": ["TransformerUtils.constantTransformer(Object)"], "associated_methods": [], "external_dependencies": {"modules": ["TransformerUtils", "ConstantTransformer"], "class_members": [{"name": "cObject", "type": "variable"}, {"name": "cString", "type": "variable"}, {"name": "cInteger", "type": "variable"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the constant transformer functionality."}, {"name": "testExceptionTransformer", "primary_tested": ["TransformerUtils.exceptionTransformer()"], "associated_methods": [], "external_dependencies": {"modules": ["TransformerUtils", "FunctorException"], "class_members": [{"name": "cString", "type": "variable"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the exception transformer functionality."}, {"name": "testExecutorTransformer", "primary_tested": ["TransformerUtils.asTransformer(Closure<Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["TransformerUtils", "ClosureUtils", "NullPointerException"], "class_members": [{"name": "cObject", "type": "variable"}, {"name": "cString", "type": "variable"}, {"name": "cInteger", "type": "variable"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the executor transformer functionality."}, {"name": "testFactoryTransformer", "primary_tested": ["TransformerUtils.asTransformer(Factory<Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["TransformerUtils", "FactoryUtils", "NullPointerException"], "class_members": [{"name": "cObject", "type": "variable"}, {"name": "cString", "type": "variable"}, {"name": "cInteger", "type": "variable"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the factory transformer functionality."}, {"name": "testIfTransformer", "primary_tested": ["TransformerUtils.ifTransformer(Predicate<Integer>,Transformer<Object, String>,Transformer<Object, String>)"], "associated_methods": [], "external_dependencies": {"modules": ["TransformerUtils", "TruePredicate", "FalsePredicate", "EqualPredicate", "NullPointerException"], "class_members": [{"name": "cString", "type": "variable"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the if transformer functionality."}, {"name": "testInstantiateTransformerNull", "primary_tested": ["TransformerUtils.instantiateTransformer(Class[],Object[])"], "associated_methods": [], "external_dependencies": {"modules": ["TransformerUtils", "IllegalArgumentException", "FunctorException", "StringUtils"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the instantiate transformer functionality with null values."}, {"name": "testInvokerTransformer", "primary_tested": ["TransformerUtils.invokerTransformer(String)"], "associated_methods": [], "external_dependencies": {"modules": ["TransformerUtils", "ArrayList", "NullPointerException", "FunctorException"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the invoker transformer functionality."}, {"name": "testInvokerTransformer2", "primary_tested": ["TransformerUtils.invokerTransformer(String,Class[],Object[])"], "associated_methods": [], "external_dependencies": {"modules": ["TransformerUtils", "ArrayList", "NullPointerException", "FunctorException", "IllegalArgumentException"], "class_members": [{"name": "cString", "type": "variable"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the invoker transformer functionality with method parameters."}, {"name": "testMapTransformer", "primary_tested": ["TransformerUtils.mapTransformer(Map<Object, Integer>)"], "associated_methods": [], "external_dependencies": {"modules": ["TransformerUtils", "HashMap", "ConstantTransformer"], "class_members": [{"name": "cObject", "type": "variable"}, {"name": "cString", "type": "variable"}, {"name": "cInteger", "type": "variable"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the map transformer functionality."}, {"name": "testNopTransformer", "primary_tested": ["TransformerUtils.nopTransformer()"], "associated_methods": [], "external_dependencies": {"modules": ["TransformerUtils"], "class_members": [{"name": "cObject", "type": "variable"}, {"name": "cString", "type": "variable"}, {"name": "cInteger", "type": "variable"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the nop transformer functionality."}, {"name": "testNullTransformer", "primary_tested": ["TransformerUtils.nullTransformer()"], "associated_methods": [], "external_dependencies": {"modules": ["TransformerUtils"], "class_members": [{"name": "cObject", "type": "variable"}, {"name": "cString", "type": "variable"}, {"name": "cInteger", "type": "variable"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the null transformer functionality."}, {"name": "testPredicateTransformer", "primary_tested": ["TransformerUtils.asTransformer(Predicate<Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["TransformerUtils", "TruePredicate", "IllegalArgumentException"], "class_members": [{"name": "cObject", "type": "variable"}, {"name": "cString", "type": "variable"}, {"name": "cInteger", "type": "variable"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the predicate transformer functionality."}, {"name": "testSingletonPatternInSerialization", "primary_tested": [], "associated_methods": [], "external_dependencies": {"modules": ["ExceptionTransformer", "NOPTransformer", "StringValueTransformer", "TestUtils"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the singleton pattern in serialization."}, {"name": "testStringValueTransformer", "primary_tested": ["TransformerUtils.stringValueTransformer()"], "associated_methods": [], "external_dependencies": {"modules": ["TransformerUtils"], "class_members": [{"name": "cInteger", "type": "variable"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the string value transformer functionality."}, {"name": "testSwitchMapTransformer", "primary_tested": ["TransformerUtils.switchMapTransformer(Map<String, Transformer<String, String>>)"], "associated_methods": [], "external_dependencies": {"modules": ["TransformerUtils", "HashMap", "ConstantTransformer", "NullPointerException"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the switch map transformer functionality."}, {"name": "testSwitchTransformer", "primary_tested": ["TransformerUtils.switchTransformer(Predicate[],Transformer[])"], "associated_methods": [], "external_dependencies": {"modules": ["TransformerUtils", "TruePredicate", "FalsePredicate", "EqualPredicate", "HashMap", "ConstantTransformer", "NullPointerException", "IllegalArgumentException"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the switch transformer functionality."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/ArrayTrackerTest.java", "testclass_name": "ArrayTrackerTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.function.IntPredicate;", "import org.junit.jupiter.api.Test;"], "name": "ArrayTrackerTest", "description": "Unit tests for the ArrayTracker class in the Bloom filter implementation.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testSeen", "primary_tested": ["IndexFilter.ArrayTracker.test(int)"], "associated_methods": [], "external_dependencies": {"modules": ["Shape", "IndexFilter", "IntPredicate", "IndexOutOfBoundsException"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the functionality of the ArrayTracker's seen method, including handling of valid and invalid indices."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/BitMapTrackerTest.java", "testclass_name": "BitMapTrackerTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.function.IntPredicate;", "import org.junit.jupiter.api.Test;"], "name": "BitMapTrackerTest", "description": "Unit tests for the BitMapTracker class in the Bloom filter implementation.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testSeen", "primary_tested": ["IndexFilter.BitMapTracker.test(int)"], "external_dependencies": {"modules": ["Shape", "IndexFilter", "IntPredicate"], "class_members": []}, "category": "unit", "description": "Tests the functionality of the BitMapTracker's seen method, ensuring it correctly tracks and reports seen indices."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/IndexExtractorFromBitmapExtractorTest.java", "testclass_name": "IndexExtractorFromBitmapExtractorTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import java.util.ArrayList;", "import java.util.List;", "import java.util.function.LongPredicate;", "import org.junit.jupiter.api.Test;"], "name": "IndexExtractorFromBitmapExtractorTest", "description": "Tests for the IndexExtractor created from a BitMapExtractor.", "class_members": {"variables": [], "methods": [], "nested_classes": [{"name": "TestingBitMapExtractor", "description": "Internal class implementing BitMapExtractor for testing purposes."}]}, "fixtures": [], "test_cases": [{"name": "testFromBitMapExtractor", "primary_tested": ["IndexExtractor.fromBitMapExtractor(BitMapExtractor)"], "associated_methods": ["IndexExtractor.processIndices(IntConsumer)", "TestingBitMapExtractor.processBitMaps(LongPredicate)"], "external_dependencies": {"modules": ["IndexExtractor", "BitMapExtractor", "LongPredicate", "ArrayList", "List", "Integer"], "class_members": [{"name": "TestingBitMapExtractor", "type": "nested_class"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the functionality of creating an IndexExtractor from a BitMapExtractor and processing indices."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/BitMapExtractorFromIndexExtractorTest.java", "testclass_name": "BitMapExtractorFromIndexExtractorTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.List;", "import org.junit.jupiter.api.Test;"], "name": "BitMapExtractorFromIndexExtractorTest", "description": "Tests for BitMapExtractor created from an IndexExtractor.", "class_members": {"methods": [{"name": "createEmptyExtractor", "signature": "BitMapExtractor createEmptyExtractor()"}, {"name": "createExtractor", "signature": "BitMapExtractor createExtractor()"}]}, "fixtures": [], "test_cases": [{"name": "testFromIndexExtractor", "primary_tested": ["BitMapExtractor.processBitMaps(Consumer)"], "associated_methods": ["BitMaps.contains(long[],int)"], "external_dependencies": {"modules": ["BitMapExtractor", "IndexExtractor", "BitMaps", "List", "ArrayList", "Long"], "class_members": [{"name": "createExtractor", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the processBitMaps method of BitMapExtractor to ensure it correctly processes and contains the expected bitmaps."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/ListOrderedSet2Test.java", "testclass_name": "ListOrderedSet2Test", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Iterator;", "import java.util.List;", "import org.junit.jupiter.api.Test;"], "name": "ListOrderedSet2Test", "description": "Unit tests for ListOrderedSet operations like adding, removing, and maintaining order.", "class_members": {"variables": [{"name": "ZERO", "type": "static final Integer"}, {"name": "ONE", "type": "static final Integer"}, {"name": "TWO", "type": "static final Integer"}, {"name": "THREE", "type": "static final Integer"}], "methods": [{"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "makeObject", "signature": "ListOrderedSet<E> makeObject()"}, {"name": "setupSet", "signature": "ListOrderedSet<E> setupSet()"}]}, "test_cases": [{"name": "testListAddIndexed", "primary_tested": ["ListOrderedSet.add(int,E)", "ListOrderedSet.addAll(int,Collection<? extends E>)"], "associated_methods": ["ListOrderedSet.size()", "ListOrderedSet.get(int)"], "external_dependencies": {"modules": ["ListOrderedSet", "ArrayList", "Integer"], "class_members": [{"name": "ZERO", "type": "variable"}, {"name": "ONE", "type": "variable"}, {"name": "TWO", "type": "variable"}, {"name": "THREE", "type": "variable"}]}, "category": "unit", "description": "Tests the indexed add and addAll functionalities of ListOrderedSet."}, {"name": "testListAddRemove", "primary_tested": ["ListOrderedSet.add(E)", "ListOrderedSet.remove(int)"], "associated_methods": ["ListOrderedSet.size()", "ListOrderedSet.get(int)", "ListOrderedSet.asList()", "ListOrderedSet.indexOf(Object)"], "external_dependencies": {"modules": ["ListOrderedSet", "Integer"], "class_members": [{"name": "ZERO", "type": "variable"}, {"name": "ONE", "type": "variable"}, {"name": "TWO", "type": "variable"}]}, "category": "unit", "description": "Tests the add and remove functionalities of ListOrderedSet."}, {"name": "testOrdering", "primary_tested": ["ListOrderedSet.iterator()", "ListOrderedSet.remove(Object)", "ListOrderedSet.add(E)"], "associated_methods": ["ListOrderedSet.size()"], "external_dependencies": {"modules": ["ListOrderedSet", "Iterator", "Integer"], "class_members": [{"name": "setupSet", "type": "method"}]}, "category": "unit", "description": "Tests the ordering and removal functionalities of ListOrderedSet."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/TransformedListTest.java", "testclass_name": "TransformedListTest", "dependencies": ["package org.apache.commons.collections4.list;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.List;", "import java.util.ListIterator;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.collection.TransformedCollectionTest;", "import org.junit.jupiter.api.Test;"], "name": "TransformedListTest", "description": "Tests for the TransformedList class, focusing on its transformation and sublist functionalities.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testSubList", "primary_tested": ["List.subList(int,int)"], "associated_methods": ["List.add(E)", "List.addAll(int,Collection<? extends E>)", "List.size()"], "external_dependencies": {"modules": ["ArrayList", "Arrays", "Collections"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the subList functionality of the TransformedList, including adding elements and verifying sublist sizes."}, {"name": "testTransformedList", "primary_tested": ["TransformedList.transformingList(List<E>,Transformer<E,E>)"], "associated_methods": ["List.size()", "List.add(E)", "List.contains(Object)", "List.remove(Object)", "List.clear()", "List.add(int,E)", "List.get(int)", "List.set(int,E)", "ListIterator.next()", "ListIterator.set(E)", "ListIterator.add(E)", "List.addAll(Collection<? extends E>)", "List.addAll(int,Collection<? extends E>)"], "external_dependencies": {"modules": ["ArrayList", "TransformedList", "Transformer", "TransformedCollectionTest", "ListIterator"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformation functionality of the TransformedList, including adding, removing, and iterating over elements."}, {"name": "testTransformedList_decorateTransform", "primary_tested": ["TransformedList.transformedList(List<E>,Transformer<? super E,? extends E>)"], "associated_methods": ["List.size()", "List.contains(Object)", "List.remove(Object)"], "external_dependencies": {"modules": ["ArrayList", "TransformedList", "Transformer", "TransformedCollectionTest", "Collections"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformedList method with a transformer, verifying the transformation and removal of elements."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/CompositeCollectionTest.java", "testclass_name": "CompositeCollectionTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.Iterator;", "import java.util.List;", "import java.util.function.Predicate;", "import org.junit.jupiter.api.Test;"], "name": "CompositeCollectionTest", "description": "Unit tests for CompositeCollection operations.", "class_members": {"variables": [{"name": "c", "type": "CompositeCollection<E>"}, {"name": "one", "type": "Collection<E>"}, {"name": "two", "type": "Collection<E>"}], "methods": [{"name": "setUpMutatorTest", "signature": "void setUpMutatorTest()"}, {"name": "setUpTest", "signature": "void setUpTest()"}]}, "fixtures": ["setUpTest"], "test_cases": [{"name": "testAddAllMutator", "primary_tested": ["CompositeCollection.addAll(Collection<? extends E>)"], "associated_methods": ["CompositeCollection.contains(Object)", "HashSet.contains(Object)"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the addAll functionality with a mutator in CompositeCollection."}, {"name": "testAddAllToCollection", "primary_tested": ["CompositeCollection.addComposited(Collection<? extends E>, Collection<? extends E>)"], "associated_methods": ["CompositeCollection.containsAll(Collection<?>)", "CompositeCollection.size()"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests adding all elements from a CompositeCollection to another collection."}, {"name": "testAddMutator", "primary_tested": ["CompositeCollection.add(E)"], "associated_methods": ["CompositeCollection.contains(Object)", "HashSet.contains(Object)"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the add functionality with a mutator in CompositeCollection."}, {"name": "testAddNullList", "primary_tested": ["CompositeCollection.addComposited(Collection<? extends E>)"], "external_dependencies": {"modules": ["CompositeCollection"]}, "category": "unit", "description": "Tests adding a null list to CompositeCollection."}, {"name": "testAddNullLists2Args", "primary_tested": ["CompositeCollection.addComposited(Collection<? extends E>, Collection<? extends E>)"], "external_dependencies": {"modules": ["CompositeCollection"]}, "category": "unit", "description": "Tests adding two null lists to CompositeCollection."}, {"name": "testAddNullListsVarArgs", "primary_tested": ["CompositeCollection.addComposited(Collection<? extends E>...)"], "external_dependencies": {"modules": ["CompositeCollection"]}, "category": "unit", "description": "Tests adding multiple null lists to CompositeCollection."}, {"name": "testClear", "primary_tested": ["CompositeCollection.clear()"], "associated_methods": ["HashSet.isEmpty()"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests clearing the CompositeCollection."}, {"name": "testContainsAll", "primary_tested": ["CompositeCollection.containsAll(Collection<?>)", "CompositeCollection.containsAll(null)"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the containsAll functionality in CompositeCollection."}, {"name": "testIsEmpty", "primary_tested": ["CompositeCollection.isEmpty()"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the isEmpty functionality in CompositeCollection."}, {"name": "testIterator", "primary_tested": ["CompositeCollection.iterator()"], "associated_methods": ["CompositeCollection.contains(Object)", "HashSet.contains(Object)"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the iterator functionality in CompositeCollection."}, {"name": "testMultipleCollectionsSize", "primary_tested": ["CompositeCollection.size()"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the size functionality with multiple collections in CompositeCollection."}, {"name": "testRemove", "primary_tested": ["CompositeCollection.remove(Object)"], "associated_methods": ["CompositeCollection.contains(Object)", "HashSet.contains(Object)"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpMutatorTest"], "description": "Tests the remove functionality in CompositeCollection."}, {"name": "testRemoveAll", "primary_tested": ["CompositeCollection.removeAll(Collection<?>)", "CompositeCollection.removeAll(null)"], "associated_methods": ["CompositeCollection.contains(Object)", "HashSet.contains(Object)"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet", "ArrayList"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpMutatorTest"], "description": "Tests the removeAll functionality in CompositeCollection."}, {"name": "testRemoveComposited", "primary_tested": ["CompositeCollection.removeComposited(Collection<? extends E>)"], "associated_methods": ["CompositeCollection.contains(Object)", "CompositeCollection.size()"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpMutatorTest"], "description": "Tests the removeComposited functionality in CompositeCollection."}, {"name": "testRemoveIf", "primary_tested": ["CompositeCollection.removeIf(Predicate<? super E>)", "CompositeCollection.removeIf(null)"], "associated_methods": ["CompositeCollection.contains(Object)", "HashSet.contains(Object)"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpMutatorTest"], "description": "Tests the removeIf functionality in CompositeCollection."}, {"name": "testRetainAll", "primary_tested": ["CompositeCollection.retainAll(Collection<?>)", "CompositeCollection.retainAll(null)"], "associated_methods": ["CompositeCollection.contains(Object)", "HashSet.contains(Object)"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the retainAll functionality in CompositeCollection."}, {"name": "testSize", "primary_tested": ["CompositeCollection.size()"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the size functionality in CompositeCollection."}, {"name": "testToCollection", "primary_tested": ["CompositeCollection.toCollection()"], "associated_methods": ["CompositeCollection.containsAll(Collection<?>)", "CompositeCollection.size()"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests converting the CompositeCollection to another collection."}, {"name": "testUnsupportedRemove", "primary_tested": ["CompositeCollection.remove(Object)"], "external_dependencies": {"modules": ["CompositeCollection"]}, "category": "unit", "description": "Tests the unsupported remove operation in CompositeCollection."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/SimpleBloomFilterTest.java", "testclass_name": "SimpleBloomFilterTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.junit.jupiter.api.Test;"], "name": "SimpleBloomFilterTest", "description": "Unit tests for the SimpleBloomFilter class, focusing on the merge functionality with a short BitMapExtractor.", "class_members": {"methods": [{"name": "createEmptyFilter", "signature": "SimpleBloomFilter createEmptyFilter(Shape shape)"}]}, "fixtures": [], "test_cases": [{"name": "testMergeShortBitMapExtractor", "primary_tested": ["SimpleBloomFilter.merge(BitMapExtractor)"], "associated_methods": ["SimpleBloomFilter.cardinality()"], "external_dependencies": {"modules": ["SimpleBloomFilter", "BitMapExtractor", "Shape"], "class_members": [{"name": "createEmptyFilter", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the merge functionality of the SimpleBloomFilter with a BitMapExtractor that returns too few values."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/EnhancedDoubleHasherTest.java", "testclass_name": "EnhancedDoubleHasherTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import org.junit.jupiter.api.Test;"], "name": "EnhancedDoubleHasherTest", "description": "Tests for the EnhancedDoubleHasher class, focusing on its constructor and methods.", "class_members": {"variables": [{"name": "expected", "type": "int[]"}], "methods": [{"name": "createEmptyHasher", "signature": "Hasher createEmptyHasher()"}, {"name": "createHasher", "signature": "Hasher createHasher()"}, {"name": "getAsIndexArrayBehaviour", "signature": "int getAsIndexArrayBehaviour()"}, {"name": "getExpectedIndices", "signature": "int[] getExpectedIndices()"}, {"name": "getHasherSize", "signature": "int getHasherSize(Hasher)"}]}, "fixtures": [], "test_cases": [{"name": "testByteConstructor", "primary_tested": ["EnhancedDoubleHasher.EnhancedDoubleHasher(byte[])", "EnhancedDoubleHasher.getInitial()", "EnhancedDoubleHasher.getIncrement()"], "associated_methods": [], "external_dependencies": {"modules": ["EnhancedDoubleHasher", "IllegalArgumentException"], "class_members": [{"name": "expected", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the byte array constructor of EnhancedDoubleHasher, ensuring correct parsing of initial and increment values, and handling of edge cases like empty buffers."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/WrappedBloomFilterTest.java", "testclass_name": "WrappedBloomFilterTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.ValueSource;"], "name": "WrappedBloomFilterTest", "description": "Tests for the WrappedBloomFilter class, focusing on its characteristics.", "class_members": {"methods": [{"name": "createEmptyFilter", "signature": "WrappedBloomFilter createEmptyFilter(Shape shape)"}]}, "fixtures": [], "test_cases": [{"name": "testCharacteristics", "primary_tested": ["WrappedBloomFilter.characteristics()"], "associated_methods": ["DefaultBloomFilterTest.SparseDefaultBloomFilter.characteristics()"], "external_dependencies": {"modules": ["WrappedBloomFilter", "DefaultBloomFilterTest.SparseDefaultBloomFilter", "Shape", "BloomFilter"], "class_members": [{"name": "createEmptyFilter", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the characteristics method of the WrappedBloomFilter class by comparing it with the characteristics of an inner BloomFilter."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIteratorTest.java", "testclass_name": "LoopingListIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.Test;"], "name": "LoopingListIteratorTest", "description": "Unit tests for the LoopingListIterator class, which tests various functionalities such as adding, removing, resetting, and iterating over elements in a looping manner.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testAdd", "primary_tested": ["LoopingListIterator.add(String)"], "associated_methods": ["LoopingListIterator.next()", "LoopingListIterator.previous()", "LoopingListIterator.reset()"], "external_dependencies": {"modules": ["ArrayList", "Arrays", "LoopingListIterator"], "class_members": []}, "category": "unit", "description": "Tests the add method of LoopingListIterator by adding elements and verifying the order of elements after adding."}, {"name": "testConstructorEx", "primary_tested": ["LoopingListIterator.<init>(List)"], "external_dependencies": {"modules": ["LoopingListIterator"], "class_members": []}, "category": "unit", "description": "Tests the constructor of LoopingListIterator to ensure it throws a NullPointerException when given a null list."}, {"name": "testJoggingNotOverBoundary", "primary_tested": ["LoopingListIterator.next()", "LoopingListIterator.previous()", "LoopingListIterator.reset()"], "external_dependencies": {"modules": ["Arrays", "LoopingListIterator"], "class_members": []}, "category": "unit", "description": "Tests jogging back and forth between two elements without crossing the boundary of the list."}, {"name": "testJoggingOverBoundary", "primary_tested": ["LoopingListIterator.next()", "LoopingListIterator.previous()"], "external_dependencies": {"modules": ["Arrays", "LoopingListIterator"], "class_members": []}, "category": "unit", "description": "Tests jogging back and forth between two elements while crossing the boundary of the list."}, {"name": "testLooping0", "primary_tested": ["LoopingListIterator.hasNext()", "LoopingListIterator.hasPrevious()", "LoopingListIterator.next()", "LoopingListIterator.previous()"], "external_dependencies": {"modules": ["ArrayList", "LoopingListIterator", "NoSuchElementException"], "class_members": []}, "category": "unit", "description": "Tests the behavior of LoopingListIterator with an empty list, ensuring it correctly handles no elements."}, {"name": "testLooping1", "primary_tested": ["LoopingListIterator.hasNext()", "LoopingListIterator.next()", "LoopingListIterator.hasPrevious()", "LoopingListIterator.previous()"], "external_dependencies": {"modules": ["Arrays", "LoopingListIterator"], "class_members": []}, "category": "unit", "description": "Tests the behavior of LoopingListIterator with a list containing a single element."}, {"name": "testLooping2", "primary_tested": ["LoopingListIterator.hasNext()", "LoopingListIterator.next()", "LoopingListIterator.reset()", "LoopingListIterator.hasPrevious()", "LoopingListIterator.previous()"], "external_dependencies": {"modules": ["Arrays", "LoopingListIterator"], "class_members": []}, "category": "unit", "description": "Tests the behavior of LoopingListIterator with a list containing two elements."}, {"name": "testNextAndPreviousIndex", "primary_tested": ["LoopingListIterator.nextIndex()", "LoopingListIterator.previousIndex()", "LoopingListIterator.next()", "LoopingListIterator.previous()"], "external_dependencies": {"modules": ["Arrays", "LoopingListIterator"], "class_members": []}, "category": "unit", "description": "Tests the nextIndex and previousIndex methods of LoopingListIterator."}, {"name": "testRemovingElementsAndIteratingBackwards", "primary_tested": ["LoopingListIterator.hasPrevious()", "LoopingListIterator.previous()", "LoopingListIterator.remove()"], "external_dependencies": {"modules": ["ArrayList", "Arrays", "LoopingListIterator", "NoSuchElementException"], "class_members": []}, "category": "unit", "description": "Tests removing elements from a list while iterating backwards using LoopingListIterator."}, {"name": "testRemovingElementsAndIteratingForward", "primary_tested": ["LoopingListIterator.hasNext()", "LoopingListIterator.next()", "LoopingListIterator.remove()"], "external_dependencies": {"modules": ["ArrayList", "Arrays", "LoopingListIterator", "NoSuchElementException"], "class_members": []}, "category": "unit", "description": "Tests removing elements from a list while iterating forward using LoopingListIterator."}, {"name": "testReset", "primary_tested": ["LoopingListIterator.next()", "LoopingListIterator.previous()", "LoopingListIterator.reset()"], "external_dependencies": {"modules": ["Arrays", "LoopingListIterator"], "class_members": []}, "category": "unit", "description": "Tests the reset method of LoopingListIterator to ensure it correctly resets the iterator position."}, {"name": "testSet", "primary_tested": ["LoopingListIterator.previous()", "LoopingListIterator.set(String)", "LoopingListIterator.reset()", "LoopingListIterator.next()"], "external_dependencies": {"modules": ["Arrays", "LoopingListIterator"], "class_members": []}, "category": "unit", "description": "Tests using the set method of LoopingListIterator to change elements in the list."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/FixedSizeListTest.java", "testclass_name": "FixedSizeListTest", "dependencies": ["package org.apache.commons.collections4.list;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.List;", "import org.junit.jupiter.api.Test;"], "name": "FixedSizeListTest", "description": "Test suite for FixedSizeList functionality.", "class_members": {"variables": [], "methods": [{"name": "initFixedSizeList", "signature": "FixedSizeList<String> initFixedSizeList()"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testAdd", "primary_tested": ["FixedSizeList.add(int,String)"], "external_dependencies": {"modules": ["FixedSizeList", "UnsupportedOperationException"], "class_members": [{"name": "initFixedSizeList", "type": "method"}]}, "category": "unit", "description": "Tests that adding an element to a FixedSizeList throws an UnsupportedOperationException."}, {"name": "testAddAll", "primary_tested": ["FixedSizeList.addAll(int,List<String>)"], "external_dependencies": {"modules": ["FixedSizeList", "UnsupportedOperationException"], "class_members": [{"name": "initFixedSizeList", "type": "method"}]}, "category": "unit", "description": "Tests that adding a collection of elements to a FixedSizeList throws an UnsupportedOperationException."}, {"name": "testIsFull", "primary_tested": ["FixedSizeList.isFull()"], "external_dependencies": {"modules": ["FixedSizeList"], "class_members": [{"name": "initFixedSizeList", "type": "method"}]}, "category": "unit", "description": "Tests that the FixedSizeList is full."}, {"name": "testListAllowsMutationOfUnderlyingCollection", "primary_tested": ["ArrayList.add(String)"], "associated_methods": ["FixedSizeList.size()"], "external_dependencies": {"modules": ["FixedSizeList", "ArrayList"]}, "category": "unit", "description": "Tests that the underlying list of a FixedSizeList can be mutated."}, {"name": "testMaxSize", "primary_tested": ["FixedSizeList.maxSize()"], "external_dependencies": {"modules": ["FixedSizeList"], "class_members": [{"name": "initFixedSizeList", "type": "method"}]}, "category": "unit", "description": "Tests the max size of the FixedSizeList."}, {"name": "testRemove", "primary_tested": ["FixedSizeList.remove(int)"], "external_dependencies": {"modules": ["FixedSizeList", "UnsupportedOperationException"], "class_members": [{"name": "initFixedSizeList", "type": "method"}]}, "category": "unit", "description": "Tests that removing an element from a FixedSizeList throws an UnsupportedOperationException."}, {"name": "testSubList", "primary_tested": ["FixedSizeList.subList(int,int)"], "external_dependencies": {"modules": ["FixedSizeList"], "class_members": [{"name": "initFixedSizeList", "type": "method"}]}, "category": "unit", "description": "Tests the subList functionality of the FixedSizeList."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/UnmodifiableListTest.java", "testclass_name": "UnmodifiableListTest", "dependencies": ["package org.apache.commons.collections4.list;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Iterator;", "import java.util.List;", "import org.junit.jupiter.api.Test;"], "name": "UnmodifiableListTest", "description": "Tests for the UnmodifiableList class, focusing on its unmodifiable behavior.", "class_members": {"variables": [{"name": "list", "type": "UnmodifiableList<E>"}, {"name": "array", "type": "ArrayList<E>"}], "methods": [{"name": "setupList", "signature": "void setupList()"}, {"name": "verifyUnmodifiable", "signature": "void verifyUnmodifiable(List<E> list)"}]}, "fixtures": [], "test_cases": [{"name": "testDecorateFactory", "primary_tested": ["UnmodifiableList.unmodifiableList(List<E>)"], "external_dependencies": {"modules": ["UnmodifiableList", "NullPointerException"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "description": "Tests the factory method for creating an unmodifiable list and ensures it throws a NullPointerException for null input."}, {"name": "testUnmodifiable", "primary_tested": ["UnmodifiableList.subList(int,int)"], "associated_methods": ["UnmodifiableList.verifyUnmodifiable(List<E>)"], "external_dependencies": {"modules": ["UnmodifiableList"], "class_members": [{"name": "setupList", "type": "method"}, {"name": "verifyUnmodifiable", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Verifies that both the base list and its sublists are not modifiable."}, {"name": "testUnmodifiableIterator", "primary_tested": ["UnmodifiableList.iterator()"], "external_dependencies": {"modules": ["UnmodifiableList", "UnsupportedOperationException"], "class_members": [{"name": "setupList", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Verifies that the iterator of the unmodifiable list is not modifiable."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparatorTest.java", "testclass_name": "FixedOrderComparatorTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Arrays;", "import java.util.Comparator;", "import java.util.LinkedList;", "import java.util.List;", "import java.util.Random;", "import org.apache.commons.lang3.ArrayUtils;", "import org.junit.jupiter.api.Nested;", "import org.junit.jupiter.api.Test;"], "name": "FixedOrderComparatorTest", "description": "Unit tests for the FixedOrderComparator class, focusing on its comparison and behavior with different configurations.", "class_members": {"variables": [{"name": "topCities", "type": "static final String[]"}], "methods": [{"name": "assertComparatorYieldsOrder", "signature": "void assertComparatorYieldsOrder(String[], Comparator<String>)"}, {"name": "getComparableObjectsOrdered", "signature": "List<String> getComparableObjectsOrdered()"}, {"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "makeObject", "signature": "Comparator<String> makeObject()"}], "nested_classes": [{"name": "Equals", "description": "Nested class containing tests for the equals method of FixedOrderComparator."}]}, "fixtures": [], "test_cases": [{"name": "expectFalseWhenBothComparatorsWithDifferentItems", "primary_tested": ["FixedOrderComparator.equals(Object)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator1", "type": "variable"}, {"name": "comparator2", "type": "variable"}]}, "category": "unit", "description": "Tests that two FixedOrderComparators with different items are not equal."}, {"name": "expectFalseWhenBothComparatorsWithDifferentUnknownObjectBehavior", "primary_tested": ["FixedOrderComparator.equals(Object)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator1", "type": "variable"}, {"name": "comparator2", "type": "variable"}]}, "category": "unit", "description": "Tests that two FixedOrderComparators with different unknown object behaviors are not equal."}, {"name": "expectFalseWhenFixedOrderComparatorIsComparedWithNull", "primary_tested": ["FixedOrderComparator.equals(Object)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "description": "Tests that a FixedOrderComparator is not equal to null."}, {"name": "expectFalseWhenFixedOrderComparatorIsComparedWithOtherObject", "primary_tested": ["FixedOrderComparator.equals(Object)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "description": "Tests that a FixedOrderComparator is not equal to an instance of a different class."}, {"name": "expectFalseWhenOneComparatorIsLocked", "primary_tested": ["FixedOrderComparator.equals(Object)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator1", "type": "variable"}, {"name": "comparator2", "type": "variable"}]}, "category": "unit", "description": "Tests that two FixedOrderComparators are not equal if one is locked and the other is not."}, {"name": "expectFalseWhenOneComparatorsWithDuplicateItems", "primary_tested": ["FixedOrderComparator.equals(Object)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator1", "type": "variable"}, {"name": "comparator2", "type": "variable"}]}, "category": "unit", "description": "Tests that two FixedOrderComparators with different item counts (due to duplicates) are not equal."}, {"name": "expectTrueWhenBothComparatorsAreLocked", "primary_tested": ["FixedOrderComparator.equals(Object)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator1", "type": "variable"}, {"name": "comparator2", "type": "variable"}]}, "category": "unit", "description": "Tests that two locked FixedOrderComparators with the same items are equal."}, {"name": "expectTrueWhenBothComparatorsWithoutAnyItems", "primary_tested": ["FixedOrderComparator.equals(Object)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator1", "type": "variable"}, {"name": "comparator2", "type": "variable"}]}, "category": "unit", "description": "Tests that two FixedOrderComparators without any items are equal."}, {"name": "expectTrueWhenBothObjectsAreSame", "primary_tested": ["FixedOrderComparator.equals(Object)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "description": "Tests that a FixedOrderComparator is equal to itself."}, {"name": "testAddAsEqual", "primary_tested": ["FixedOrderComparator.addAsEqual(String,String)", "FixedOrderComparator.compare(String,String)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "description": "Tests the addAsEqual method and ensures that added items are treated as equal."}, {"name": "testArrayConstructor", "primary_tested": ["FixedOrderComparator.FixedOrderComparator(String[])"], "associated_methods": ["FixedOrderComparator.assertComparatorYieldsOrder(String[],Comparator<String>)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}, {"name": "assertComparatorYieldsOrder", "type": "method"}]}, "category": "unit", "description": "Tests the array constructor and ensures that the comparator sorts items in the specified order."}, {"name": "testConstructorPlusAdd", "primary_tested": ["FixedOrderComparator.FixedOrderComparator()", "FixedOrderComparator.add(String)"], "associated_methods": ["FixedOrderComparator.assertComparatorYieldsOrder(String[],Comparator<String>)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}, {"name": "assertComparatorYieldsOrder", "type": "method"}]}, "category": "unit", "description": "Tests the constructor and add method combination and ensures that the comparator sorts items in the specified order."}, {"name": "testListConstructor", "primary_tested": ["FixedOrderComparator.FixedOrderComparator(List<String>)"], "associated_methods": ["FixedOrderComparator.assertComparatorYieldsOrder(String[],Comparator<String>)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}, {"name": "assertComparatorYieldsOrder", "type": "method"}]}, "category": "unit", "description": "Tests the list constructor and ensures that the comparator sorts items in the specified order."}, {"name": "testLock", "primary_tested": ["FixedOrderComparator.isLocked()", "FixedOrderComparator.compare(String,String)", "FixedOrderComparator.add(String)", "FixedOrderComparator.addAsEqual(String,String)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "description": "Tests the locking behavior of the FixedOrderComparator and ensures that updates are disabled after a comparison is made."}, {"name": "testUnknownObjectBehavior", "primary_tested": ["FixedOrderComparator.compare(String,String)", "FixedOrderComparator.setUnknownObjectBehavior(UnknownObjectBehavior)", "FixedOrderComparator.getUnknownObjectBehavior()"], "associated_methods": ["FixedOrderComparator.assertComparatorYieldsOrder(String[],Comparator<String>)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}, {"name": "assertComparatorYieldsOrder", "type": "method"}]}, "category": "unit", "description": "Tests the behavior of the FixedOrderComparator when handling unknown objects with different configurations."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/SparseBloomFilterTest.java", "testclass_name": "SparseBloomFilterTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.junit.jupiter.api.Test;"], "name": "SparseBloomFilterTest", "description": "Unit tests for the SparseBloomFilter class, focusing on edge cases for bit map extraction and Bloom filter-based merge operations.", "class_members": {"methods": [{"name": "createEmptyFilter", "signature": "SparseBloomFilter createEmptyFilter(Shape shape)"}]}, "fixtures": [], "test_cases": [{"name": "testBitMapExtractorEdgeCases", "primary_tested": ["BloomFilter.processBitMaps(BitMapProcessor)", "BloomFilter.merge(Hasher)"], "associated_methods": [], "external_dependencies": {"modules": ["BloomFilter", "IndexExtractor", "SparseBloomFilter", "SimpleBloomFilter", "TestingHashers"], "class_members": [{"name": "createEmptyFilter", "type": "method"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests edge cases for bit map extraction in the BloomFilter, including early exit conditions and processing of bit maps."}, {"name": "testBloomFilterBasedMergeEdgeCases", "primary_tested": ["BloomFilter.merge(BloomFilter)", "BloomFilter.processBitMapPairs(BloomFilter, BitMapPairProcessor)"], "associated_methods": [], "external_dependencies": {"modules": ["BloomFilter", "SparseBloomFilter", "SimpleBloomFilter", "TestingHashers"], "class_members": [{"name": "createEmptyFilter", "type": "method"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests edge cases for merging Bloom filters, specifically verifying the merge operation and processing of bit map pairs."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/IndexExtractorTest.java", "testclass_name": "IndexExtractorTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import java.util.ArrayList;", "import java.util.List;", "import java.util.function.LongPredicate;", "import org.junit.jupiter.api.Assertions;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.ValueSource;"], "name": "IndexExtractorTest", "description": "Tests for the IndexExtractor class, focusing on its functionality with BitMapExtractor.", "class_members": {"variables": [], "methods": [], "nested_classes": [{"name": "TestingBitMapExtractor", "description": "Internal class implementing BitMapExtractor for testing purposes."}]}, "fixtures": [], "test_cases": [{"name": "testAsIndexArray", "primary_tested": ["IndexExtractor.asIndexArray()"], "external_dependencies": {"modules": ["IndexExtractor"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the asIndexArray method of IndexExtractor with different input sizes."}, {"name": "testFromBitMapExtractor", "primary_tested": ["IndexExtractor.fromBitMapExtractor(BitMapExtractor)", "IndexExtractor.processIndices(IntConsumer)"], "associated_methods": ["TestingBitMapExtractor.processBitMaps(LongPredicate)"], "external_dependencies": {"modules": ["IndexExtractor", "TestingBitMapExtractor", "ArrayList", "List", "Integer"], "class_members": [{"name": "TestingBitMapExtractor", "type": "nested_class"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the fromBitMapExtractor and processIndices methods of IndexExtractor using a custom BitMapExtractor implementation."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/PredicatedListTest.java", "testclass_name": "PredicatedListTest", "dependencies": ["package org.apache.commons.collections4.list;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.List;", "import org.apache.commons.collections4.Predicate;", "import org.apache.commons.collections4.functors.TruePredicate;", "import org.junit.jupiter.api.Test;"], "name": "PredicatedListTest", "description": "Unit tests for PredicatedList functionality, focusing on predicate validation and list operations.", "class_members": {"variables": [{"name": "truePredicate", "type": "Predicate<E>"}, {"name": "testPredicate", "type": "Predicate<E>"}], "methods": [{"name": "decorateList", "signature": "List<E> decorateList(List<E> list, Predicate<E> predicate)"}, {"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "getFullElements", "signature": "E[] getFullElements()"}, {"name": "makeObject", "signature": "List<E> makeObject()"}, {"name": "makeTestList", "signature": "List<E> makeTestList()"}]}, "fixtures": [], "test_cases": [{"name": "testIllegalAdd", "primary_tested": ["List.add(E)"], "external_dependencies": {"modules": ["List", "Integer", "IllegalArgumentException"], "class_members": [{"name": "makeTestList", "type": "method"}]}, "category": "unit", "description": "Tests that adding an illegal element (non-string) to the list throws an IllegalArgumentException."}, {"name": "testIllegalAddAll", "primary_tested": ["List.addAll(int,Collection<? extends E>)"], "external_dependencies": {"modules": ["List", "ArrayList", "IllegalArgumentException"], "class_members": [{"name": "makeTestList", "type": "method"}]}, "category": "unit", "description": "Tests that adding a collection with an illegal element (non-string) to the list throws an IllegalArgumentException."}, {"name": "testIllegalSet", "primary_tested": ["List.set(int,E)"], "external_dependencies": {"modules": ["List", "IllegalArgumentException"], "class_members": [{"name": "makeTestList", "type": "method"}]}, "category": "unit", "description": "Tests that setting an illegal element (non-string) in the list throws an IllegalArgumentException."}, {"name": "testLegalAddAll", "primary_tested": ["List.addAll(int,Collection<? extends E>)"], "external_dependencies": {"modules": ["List", "ArrayList"], "class_members": [{"name": "makeTestList", "type": "method"}]}, "category": "unit", "description": "Tests that adding a collection with only legal elements (strings) to the list succeeds."}, {"name": "testSubList", "primary_tested": ["List.subList(int,int)"], "external_dependencies": {"modules": ["List", "ArrayList"], "class_members": [{"name": "makeTestList", "type": "method"}]}, "category": "unit", "description": "Tests the subList functionality of the list, ensuring correct sublist creation and size."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java", "testclass_name": "ListUtilsTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertInstanceOf;", "import static org.junit.jupiter.api.Assertions.assertNotEquals;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.Collections;", "import java.util.HashSet;", "import java.util.List;", "import org.apache.commons.collections4.functors.EqualPredicate;", "import org.apache.commons.collections4.list.PredicatedList;", "import org.apache.commons.lang3.StringUtils;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ListUtilsTest", "description": "Unit tests for various utility methods in the ListUtils class.", "class_members": {"variables": [{"name": "a", "type": "static final String"}, {"name": "b", "type": "static final String"}, {"name": "c", "type": "static final String"}, {"name": "d", "type": "static final String"}, {"name": "e", "type": "static final String"}, {"name": "x", "type": "static final String"}, {"name": "EQUALS_TWO", "type": "static final Predicate<Number>"}, {"name": "fullArray", "type": "String[]"}, {"name": "fullList", "type": "List<String>"}], "methods": [], "nested_classes": []}, "fixtures": ["setUp"], "test_cases": [{"name": "testDefaultIfNull", "primary_tested": ["ListUtils.defaultIfNull(List,List)"], "external_dependencies": {"modules": ["ListUtils", "Collections"], "class_members": [{"name": "fullList", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the defaultIfNull method of ListUtils."}, {"name": "testEmptyIfNull", "primary_tested": ["ListUtils.emptyIfNull(List)"], "external_dependencies": {"modules": ["ListUtils", "Collections"], "class_members": [{"name": "fullList", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the emptyIfNull method of ListUtils."}, {"name": "testEquals", "primary_tested": ["ListUtils.isEqualList(List,List)"], "external_dependencies": {"modules": ["ListUtils", "Collections", "Arrays"], "class_members": [{"name": "fullList", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the isEqualList method of ListUtils."}, {"name": "testGetFirst", "primary_tested": ["ListUtils.getFirst(List)"], "external_dependencies": {"modules": ["ListUtils", "Collections"], "class_members": [{"name": "fullList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getFirst method of ListUtils."}, {"name": "testGetLast", "primary_tested": ["ListUtils.getLast(List)"], "external_dependencies": {"modules": ["ListUtils", "Collections"], "class_members": [{"name": "fullList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getLast method of ListUtils."}, {"name": "testHashCode", "primary_tested": ["ListUtils.hashCodeForList(List)"], "external_dependencies": {"modules": ["ListUtils", "Collections", "Arrays"], "class_members": [{"name": "fullList", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the hashCodeForList method of ListUtils."}, {"name": "testIndexOf", "primary_tested": ["ListUtils.indexOf(List,Predicate)"], "external_dependencies": {"modules": ["ListUtils", "EqualPredicate"], "class_members": [{"name": "fullList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the indexOf method of ListUtils."}, {"name": "testIntersectEmptyWithEmptyList", "primary_tested": ["ListUtils.intersection(List,List)"], "external_dependencies": {"modules": ["ListUtils", "Collections"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests intersecting an empty list with another empty list."}, {"name": "testIntersectionOrderInsensitivity", "primary_tested": ["ListUtils.intersection(List,List)"], "external_dependencies": {"modules": ["ListUtils", "Collections"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests intersecting two lists in different orders."}, {"name": "testIntersectListWithNoOverlapAndDifferentTypes", "primary_tested": ["ListUtils.intersection(List,List)"], "external_dependencies": {"modules": ["ListUtils", "Collections", "Arrays"], "class_members": [{"name": "fullList", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests intersecting a list with no overlap and different types."}, {"name": "testIntersectListWithSelf", "primary_tested": ["ListUtils.intersection(List,List)"], "external_dependencies": {"modules": ["ListUtils", "Collections"], "class_members": [{"name": "fullList", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests intersecting a list with itself."}, {"name": "testIntersectNonEmptySubset", "primary_tested": ["ListUtils.intersection(List,List)"], "external_dependencies": {"modules": ["ListUtils", "Collections"], "class_members": [{"name": "fullList", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests intersecting a list with a non-empty subset."}, {"name": "testIntersectNonEmptyWithEmptyList", "primary_tested": ["ListUtils.intersection(List,List)"], "external_dependencies": {"modules": ["ListUtils", "Collections"], "class_members": [{"name": "fullList", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests intersecting a non-empty list with an empty list."}, {"name": "testLazyFactoryList", "primary_tested": ["ListUtils.lazyList(List,Factory)"], "external_dependencies": {"modules": ["ListUtils", "Collections"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the lazyList method of ListUtils with a factory."}, {"name": "testLazyTransformerList", "primary_tested": ["ListUtils.lazyList(List,Transformer)"], "external_dependencies": {"modules": ["ListUtils", "Collections", "Arrays"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the lazyList method of ListUtils with a transformer."}, {"name": "testLongestCommonSubsequence", "primary_tested": ["ListUtils.longestCommonSubsequence(List,List)"], "external_dependencies": {"modules": ["ListUtils", "Collections", "Arrays"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the longestCommonSubsequence method of ListUtils."}, {"name": "testLongestCommonSubsequenceWithString", "primary_tested": ["ListUtils.longestCommonSubsequence(String,String)"], "external_dependencies": {"modules": ["ListUtils", "StringUtils"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the longestCommonSubsequence method of ListUtils with strings."}, {"name": "testPartition", "primary_tested": ["ListUtils.partition(List,int)"], "external_dependencies": {"modules": ["ListUtils", "Collections"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the partition method of ListUtils."}, {"name": "testPredicatedList", "primary_tested": ["ListUtils.predicatedList(List,Predicate)"], "external_dependencies": {"modules": ["ListUtils", "Collections"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the predicatedList method of ListUtils."}, {"name": "testRemoveAll", "primary_tested": ["ListUtils.removeAll(List,List)"], "external_dependencies": {"modules": ["ListUtils", "Collections"], "class_members": [{"name": "fullList", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the removeAll method of ListUtils."}, {"name": "testRetainAll", "primary_tested": ["ListUtils.retainAll(List,List)"], "external_dependencies": {"modules": ["ListUtils", "Collections"], "class_members": [{"name": "fullList", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the retainAll method of ListUtils."}, {"name": "testSelect", "primary_tested": ["ListUtils.select(List,Predicate)"], "external_dependencies": {"modules": ["ListUtils", "CollectionUtils"], "class_members": [{"name": "EQUALS_TWO", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the select method of ListUtils."}, {"name": "testSelectRejected", "primary_tested": ["ListUtils.selectRejected(List,Predicate)"], "external_dependencies": {"modules": ["ListUtils", "CollectionUtils"], "class_members": [{"name": "EQUALS_TWO", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the selectRejected method of ListUtils."}, {"name": "testSubtract", "primary_tested": ["ListUtils.subtract(List,List)"], "external_dependencies": {"modules": ["ListUtils", "Collections"], "class_members": [{"name": "fullList", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the subtract method of ListUtils."}, {"name": "testSubtractNullElement", "primary_tested": ["ListUtils.subtract(List,List)"], "external_dependencies": {"modules": ["ListUtils", "Collections"], "class_members": [{"name": "fullList", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the subtract method of ListUtils with null elements."}, {"name": "testSum", "primary_tested": ["ListUtils.sum(List,List)"], "external_dependencies": {"modules": ["ListUtils", "Collections"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the sum method of ListUtils."}, {"name": "testUnion", "primary_tested": ["ListUtils.union(List,List)"], "external_dependencies": {"modules": ["ListUtils", "Collections"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the union method of ListUtils."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/IndexFilterTest.java", "testclass_name": "IndexFilterTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.assertArrayEquals;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.BitSet;", "import java.util.List;", "import java.util.SplittableRandom;", "import java.util.concurrent.ThreadLocalRandom;", "import java.util.function.IntPredicate;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.CsvSource;"], "name": "IndexFilterTest", "description": "Unit tests for the IndexFilter class, focusing on its filtering functionality.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testFilter", "primary_tested": ["IndexFilter.create(Shape,IntConsumer)"], "associated_methods": ["BitSet.clear()", "BitSet.get(int)", "BitSet.set(int)", "BitSet.stream()", "List.size()", "List.add(Integer)", "IntPredicate.test(int)", "SplittableRandom.nextInt(int)", "ThreadLocalRandom.current().nextLong()"], "external_dependencies": {"modules": ["Shape", "BitSet", "List", "IntPredicate", "SplittableRandom", "ThreadLocalRandom"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the creation and functionality of the IndexFilter, ensuring it correctly filters and handles duplicate indices."}, {"name": "testFiltering", "primary_tested": ["IndexFilter.create(Shape,IntConsumer)"], "associated_methods": ["List.size()", "List.add(Integer)", "IntPredicate.test(int)"], "external_dependencies": {"modules": ["Shape", "List", "IntPredicate"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the filtering functionality of the IndexFilter, ensuring it correctly processes indices and maintains the list size."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/DefaultIndexExtractorTest.java", "testclass_name": "DefaultIndexExtractorTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.assertArrayEquals;", "import java.util.Arrays;", "import java.util.BitSet;", "import java.util.Objects;", "import java.util.concurrent.ThreadLocalRandom;", "import java.util.stream.IntStream;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.ValueSource;"], "name": "DefaultIndexExtractorTest", "description": "Tests for the DefaultIndexExtractor class, focusing on various functionalities such as generating arrays, creating unique sets, and testing index extraction methods.", "class_members": {"variables": [{"name": "values", "type": "int[]"}], "methods": [{"name": "generateIntArray", "signature": "int[] generateIntArray(int, int)"}, {"name": "unique", "signature": "int[] unique(int[])"}, {"name": "uniqueSet", "signature": "BitSet uniqueSet(int[])"}]}, "fixtures": [], "test_cases": [{"name": "testEntries", "primary_tested": ["IndexExtractor.asIndexArray()"], "associated_methods": ["IndexExtractor.test(Predicate<Integer>)"], "external_dependencies": {"modules": ["IntStream", "IndexExtractor", "Predicate"], "class_members": [{"name": "values", "type": "variable"}]}, "category": "unit", "description": "Tests the functionality of converting an index extractor to an index array."}, {"name": "testFromBitMapExtractor", "primary_tested": ["IndexExtractor.fromBitMapExtractor(BitMapExtractor)"], "associated_methods": ["BitMaps.numberOfBitMaps(int)", "BitMaps.set(long[], int)", "BitMapExtractor.fromBitMapArray(long[])"], "external_dependencies": {"modules": ["BitMaps", "BitMapExtractor", "IndexExtractor"], "class_members": [{"name": "generateIntArray", "type": "method"}, {"name": "unique", "type": "method"}]}, "category": "unit", "description": "Tests the functionality of creating an index extractor from a bitmap extractor."}, {"name": "testFromIndexArray", "primary_tested": ["IndexExtractor.fromIndexArray(int[])"], "external_dependencies": {"modules": ["IndexExtractor"], "class_members": [{"name": "generateIntArray", "type": "method"}]}, "category": "unit", "description": "Tests the functionality of creating an index extractor from an index array."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/CartesianProductIteratorTest.java", "testclass_name": "CartesianProductIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertArrayEquals;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CartesianProductIteratorTest", "description": "Unit tests for the CartesianProductIterator class, which generates the Cartesian product of multiple lists.", "class_members": {"variables": [{"name": "letters", "type": "List<Character>"}, {"name": "numbers", "type": "List<Character>"}, {"name": "symbols", "type": "List<Character>"}, {"name": "emptyList", "type": "List<Character>"}], "methods": [{"name": "makeEmptyIterator", "signature": "CartesianProductIterator<Character> makeEmptyIterator()"}, {"name": "makeObject", "signature": "CartesianProductIterator<Character> makeObject()"}, {"name": "setUp", "signature": "void setUp()"}, {"name": "supportsRemove", "signature": "boolean supportsRemove()"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveThrows", "primary_tested": ["CartesianProductIterator.remove()"], "external_dependencies": {"modules": ["CartesianProductIterator"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests that the remove operation throws an UnsupportedOperationException."}, {"name": "testEmptyCollection", "primary_tested": ["CartesianProductIterator.hasNext()"], "associated_methods": ["CartesianProductIterator.next()"], "external_dependencies": {"modules": ["CartesianProductIterator"], "class_members": [{"name": "letters", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests that the iterator returns false for hasNext and throws NoSuchElementException for next when one of the lists is empty."}, {"name": "testExhaustivity", "primary_tested": ["CartesianProductIterator.hasNext()", "CartesianProductIterator.next()"], "associated_methods": ["CartesianProductIterator.next()"], "external_dependencies": {"modules": ["CartesianProductIterator"], "class_members": [{"name": "makeObject", "type": "method"}, {"name": "letters", "type": "variable"}, {"name": "numbers", "type": "variable"}, {"name": "symbols", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests that all tuples are returned and the iterator is exhausted correctly."}, {"name": "testExhaustivityWithEmptyList", "primary_tested": ["CartesianProductIterator.hasNext()", "CartesianProductIterator.next()"], "associated_methods": ["CartesianProductIterator.next()"], "external_dependencies": {"modules": ["CartesianProductIterator"], "class_members": [{"name": "letters", "type": "variable"}, {"name": "emptyList", "type": "variable"}, {"name": "symbols", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests that no tuples are returned when one of the lists is empty."}, {"name": "testExhaustivityWithEmptyFirstList", "primary_tested": ["CartesianProductIterator.hasNext()", "CartesianProductIterator.next()"], "associated_methods": ["CartesianProductIterator.next()"], "external_dependencies": {"modules": ["CartesianProductIterator"], "class_members": [{"name": "emptyList", "type": "variable"}, {"name": "numbers", "type": "variable"}, {"name": "symbols", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests that no tuples are returned when the first list is empty."}, {"name": "testExhaustivityWithEmptyLastList", "primary_tested": ["CartesianProductIterator.hasNext()", "CartesianProductIterator.next()"], "associated_methods": ["CartesianProductIterator.next()"], "external_dependencies": {"modules": ["CartesianProductIterator"], "class_members": [{"name": "letters", "type": "variable"}, {"name": "numbers", "type": "variable"}, {"name": "emptyList", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests that no tuples are returned when the last list is empty."}, {"name": "testExhaustivityWithAllEmptyLists", "primary_tested": ["CartesianProductIterator.hasNext()", "CartesianProductIterator.next()"], "associated_methods": ["CartesianProductIterator.next()"], "external_dependencies": {"modules": ["CartesianProductIterator"], "class_members": [{"name": "emptyList", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests that no tuples are returned when all lists are empty."}, {"name": "testExhaustivityWithSameList", "primary_tested": ["CartesianProductIterator.hasNext()", "CartesianProductIterator.next()"], "associated_methods": ["CartesianProductIterator.next()"], "external_dependencies": {"modules": ["CartesianProductIterator"], "class_members": [{"name": "letters", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests that all tuples are returned when the same list is passed multiple times."}, {"name": "testForEachRemaining", "primary_tested": ["CartesianProductIterator.forEachRemaining(Consumer<? super List<Character>>)"], "associated_methods": ["CartesianProductIterator.next()"], "external_dependencies": {"modules": ["CartesianProductIterator"], "class_members": [{"name": "makeObject", "type": "method"}, {"name": "letters", "type": "variable"}, {"name": "numbers", "type": "variable"}, {"name": "symbols", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests that all tuples are provided to the consumer."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/ListOrderedSetTest.java", "testclass_name": "ListOrderedSetTest", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.Iterator;", "import java.util.List;", "import java.util.Set;", "import org.apache.commons.collections4.IteratorUtils;", "import org.junit.jupiter.api.Test;"], "name": "ListOrderedSetTest", "description": "Unit tests for ListOrderedSet operations including decorator, duplicates, list add indexed, list add remove, list add replacing, ordering, and retain all.", "class_members": {"variables": [{"name": "ZERO", "type": "static final Integer"}, {"name": "ONE", "type": "static final Integer"}, {"name": "TWO", "type": "static final Integer"}, {"name": "THREE", "type": "static final Integer"}], "methods": [{"name": "makeObject", "signature": "ListOrderedSet<E> makeObject()"}, {"name": "setupSet", "signature": "ListOrderedSet<E> setupSet()"}], "nested_classes": [{"name": "A", "description": "Internal class with overridden equals and hashCode methods"}, {"name": "B", "description": "Internal class with overridden equals and hashCode methods"}]}, "fixtures": [], "test_cases": [{"name": "testDecorator", "primary_tested": ["ListOrderedSet.listOrderedSet(List<E>)", "ListOrderedSet.listOrderedSet(Set<E>)", "ListOrderedSet.listOrderedSet(Set<E>, List<E>)"], "external_dependencies": {"modules": ["ListOrderedSet", "HashSet", "ArrayList", "NullPointerException"]}, "category": "unit", "description": "Tests the decorator functionality of ListOrderedSet by checking for expected exceptions when passing null parameters."}, {"name": "testDuplicates", "primary_tested": ["ListOrderedSet.listOrderedSet(List<E>)", "ListOrderedSet.size()", "ListOrderedSet.get(int)"], "associated_methods": ["IteratorUtils.toArray(Iterator<E>)"], "external_dependencies": {"modules": ["ListOrderedSet", "ArrayList", "IteratorUtils"]}, "category": "unit", "description": "Tests the handling of duplicates in ListOrderedSet and checks if the insertion order is preserved."}, {"name": "testListAddIndexed", "primary_tested": ["ListOrderedSet.add(E)", "ListOrderedSet.add(int, E)", "ListOrderedSet.addAll(int, Collection<? extends E>)", "ListOrderedSet.get(int)"], "external_dependencies": {"modules": ["ListOrderedSet", "ArrayList"]}, "category": "unit", "description": "Tests the indexed add functionality of ListOrderedSet and checks if the insertion order is preserved."}, {"name": "testListAddRemove", "primary_tested": ["ListOrderedSet.add(E)", "ListOrderedSet.remove(int)", "ListOrderedSet.indexOf(Object)", "ListOrderedSet.asList()"], "external_dependencies": {"modules": ["ListOrderedSet", "ArrayList"]}, "category": "unit", "description": "Tests the add and remove functionality of ListOrderedSet and checks if the insertion order is preserved."}, {"name": "testListAddReplacing", "primary_tested": ["ListOrderedSet.add(E)", "ListOrderedSet.decorated()", "ListOrderedSet.iterator()", "ListOrderedSet.get(int)", "ListOrderedSet.asList()"], "external_dependencies": {"modules": ["ListOrderedSet"]}, "category": "unit", "description": "Tests the add functionality of ListOrderedSet when adding objects that are equal but not the same instance."}, {"name": "testOrdering", "primary_tested": ["ListOrderedSet.iterator()", "ListOrderedSet.remove(Object)", "ListOrderedSet.add(E)", "ListOrderedSet.size()"], "external_dependencies": {"modules": ["ListOrderedSet"]}, "category": "unit", "description": "Tests the ordering and removal functionality of ListOrderedSet and checks if the insertion order is preserved."}, {"name": "testRetainAll", "primary_tested": ["ListOrderedSet.listOrderedSet(Set<E>, List<E>)", "ListOrderedSet.add(E)", "ListOrderedSet.retainAll(Collection<?>)", "ListOrderedSet.get(int)"], "external_dependencies": {"modules": ["ListOrderedSet", "ArrayList", "HashSet"]}, "category": "unit", "description": "Tests the retainAll functionality of ListOrderedSet and checks if the insertion order is preserved."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/DefaultBitMapExtractorTest.java", "testclass_name": "DefaultBitMapExtractorTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.assertArrayEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.concurrent.ThreadLocalRandom;", "import java.util.function.LongPredicate;", "import org.junit.jupiter.api.Test;"], "name": "DefaultBitMapExtractorTest", "description": "Unit tests for the DefaultBitMapExtractor class, which processes bitmaps using a LongPredicate.", "class_members": {"variables": [{"name": "values", "type": "long[]"}], "methods": [{"name": "generateLongArray", "signature": "static long[] generateLongArray(int)"}], "nested_classes": [{"name": "DefaultBitMapExtractor", "description": "Internal class implementing BitMapExtractor interface"}]}, "fixtures": [], "test_cases": [{"name": "testAsBitMapArrayLargeArray", "primary_tested": ["BitMapExtractor.asBitMapArray()"], "external_dependencies": {"modules": ["BitMapExtractor", "ThreadLocalRandom"], "class_members": [{"name": "generateLongArray", "type": "method"}]}, "category": "unit", "description": "Tests the asBitMapArray method with a large array of long values."}, {"name": "testFromBitMapArray", "primary_tested": ["BitMapExtractor.fromBitMapArray(long[])"], "external_dependencies": {"modules": ["BitMapExtractor", "BitMaps", "ThreadLocalRandom"], "class_members": [{"name": "generateLongArray", "type": "method"}]}, "category": "unit", "description": "Tests the fromBitMapArray method by generating an array of long values and comparing the result."}, {"name": "testFromIndexExtractor", "primary_tested": ["BitMapExtractor.fromIndexExtractor(IndexExtractor, int)"], "associated_methods": ["BitMaps.contains(long[], int)"], "external_dependencies": {"modules": ["BitMapExtractor", "IndexExtractor", "BitMaps", "DefaultIndexExtractorTest"], "class_members": [{"name": "generateLongArray", "type": "method"}], "project_specific_resources": ["DefaultIndexExtractorTest.generateIntArray(int, int)"]}, "category": "unit", "description": "Tests the fromIndexExtractor method by generating an array of indices and checking if the bitmaps contain these indices."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/CompositeSetTest.java", "testclass_name": "CompositeSetTest", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.List;", "import java.util.Set;", "import org.apache.commons.collections4.set.CompositeSet.SetMutator;", "import org.junit.jupiter.api.Test;"], "name": "CompositeSetTest", "description": "Unit tests for CompositeSet operations like addComposited, contains, remove, and collision resolution.", "class_members": {"variables": [], "methods": [{"name": "buildOne", "signature": "Set<E> buildOne()"}, {"name": "buildTwo", "signature": "Set<E> buildTwo()"}, {"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "getIterationBehaviour", "signature": "int getIterationBehaviour()"}, {"name": "makeObject", "signature": "CompositeSet<E> makeObject()"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testAddComposited", "primary_tested": ["CompositeSet.addComposited(Set<E>,Set<E>)"], "associated_methods": ["CompositeSet.addComposited(Set<E>)", "CompositeSet.addComposited(Set<E>[])", "CompositeSet.addComposited(Set<E>,Set<E>,Set<E>)"], "external_dependencies": {"modules": ["CompositeSet", "HashSet"], "class_members": [{"name": "buildOne", "type": "method"}, {"name": "buildTwo", "type": "method"}]}, "category": "unit", "description": "Tests the addComposited functionality of the CompositeSet."}, {"name": "testAddCompositedCollision", "primary_tested": ["CompositeSet.addComposited(Set<E>,Set<E>)"], "associated_methods": ["CompositeSet.addComposited(Set<E>,Set<E>,Set<E>)"], "external_dependencies": {"modules": ["CompositeSet", "HashSet"], "class_members": [{"name": "buildOne", "type": "method"}, {"name": "buildTwo", "type": "method"}]}, "category": "unit", "description": "Tests the collision handling in addComposited functionality of the CompositeSet."}, {"name": "testContains", "primary_tested": ["CompositeSet.contains(Object)"], "external_dependencies": {"modules": ["CompositeSet"], "class_members": [{"name": "buildOne", "type": "method"}, {"name": "buildTwo", "type": "method"}]}, "category": "unit", "description": "Tests the contains functionality of the CompositeSet."}, {"name": "testContainsAll", "primary_tested": ["CompositeSet.containsAll(Collection<?>)", "CompositeSet.containsAll(Collection<?>)"], "external_dependencies": {"modules": ["CompositeSet"], "class_members": [{"name": "buildOne", "type": "method"}, {"name": "buildTwo", "type": "method"}]}, "category": "unit", "description": "Tests the containsAll functionality of the CompositeSet."}, {"name": "testFailedCollisionResolution", "primary_tested": ["CompositeSet.addComposited(Set<E>)"], "external_dependencies": {"modules": ["CompositeSet", "HashSet"], "class_members": [{"name": "buildOne", "type": "method"}, {"name": "buildTwo", "type": "method"}]}, "category": "unit", "description": "Tests the collision resolution failure in CompositeSet."}, {"name": "testRemoveAll", "primary_tested": ["CompositeSet.removeAll(Collection<?>)"], "external_dependencies": {"modules": ["CompositeSet"], "class_members": [{"name": "buildOne", "type": "method"}, {"name": "buildTwo", "type": "method"}]}, "category": "unit", "description": "Tests the removeAll functionality of the CompositeSet."}, {"name": "testRemoveComposited", "primary_tested": ["CompositeSet.remove(Object)"], "external_dependencies": {"modules": ["CompositeSet", "HashSet"], "class_members": [{"name": "buildOne", "type": "method"}, {"name": "buildTwo", "type": "method"}]}, "category": "unit", "description": "Tests the remove functionality of the CompositeSet."}, {"name": "testRemoveUnderlying", "primary_tested": ["CompositeSet.contains(Object)"], "external_dependencies": {"modules": ["CompositeSet", "HashSet"], "class_members": [{"name": "buildOne", "type": "method"}, {"name": "buildTwo", "type": "method"}]}, "category": "unit", "description": "Tests the removal of elements from underlying sets in CompositeSet."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/BitMapExtractorFromLongArrayTest.java", "testclass_name": "BitMapExtractorFromLongArrayTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import java.util.ArrayList;", "import java.util.List;", "import org.junit.jupiter.api.Test;"], "name": "BitMapExtractorFromLongArrayTest", "description": "Tests for BitMapExtractorFromLongArray functionality.", "class_members": {"methods": [{"name": "createEmptyExtractor", "signature": "BitMapExtractor createEmptyExtractor()"}, {"name": "createExtractor", "signature": "BitMapExtractor createExtractor()"}, {"name": "emptyIsZeroLength", "signature": "boolean emptyIsZeroLength()"}]}, "test_cases": [{"name": "constructorTest", "primary_tested": ["BitMapExtractor.processBitMaps(Consumer)"], "associated_methods": ["BitMapExtractor.createExtractor()"], "external_dependencies": {"modules": ["BitMapExtractor", "List", "ArrayList", "Long"], "class_members": [{"name": "createExtractor", "type": "method"}]}, "category": "unit", "description": "Tests the constructor and processBitMaps method of BitMapExtractor."}, {"name": "testFromIndexExtractor", "primary_tested": ["BitMapExtractor.fromIndexExtractor(IndexExtractor,int)", "BitMapExtractor.processBitMaps(Consumer)"], "associated_methods": ["BitMapExtractor.fromIndexExtractor(IndexExtractor,int)"], "external_dependencies": {"modules": ["BitMapExtractor", "IndexExtractor", "List", "ArrayList", "Long"]}, "category": "unit", "description": "Tests the fromIndexExtractor and processBitMaps methods of BitMapExtractor."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java", "testclass_name": "FluentIterableTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertArrayEquals;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.Collections;", "import java.util.Enumeration;", "import java.util.Iterator;", "import java.util.LinkedList;", "import java.util.List;", "import java.util.concurrent.atomic.AtomicInteger;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/GrowthListTest.java", "testclass_name": "GrowthListTest", "dependencies": ["package org.apache.commons.collections4.list;", "import static org.hamcrest.MatcherAssert.assertThat;", "import static org.hamcrest.core.Is.is;", "import static org.hamcrest.core.IsEqual.equalTo;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.List;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.api.function.Executable;"], "name": "GrowthListTest", "description": "Unit tests for the GrowthList class, focusing on its growth and modification functionalities.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testGrowthAdd", "primary_tested": ["GrowthList.add(int,Integer)"], "external_dependencies": {"modules": ["GrowthList", "Integer"], "class_members": []}, "category": "unit", "description": "Tests the addition of an element at a specific index, causing the list to grow."}, {"name": "testGrowthAddAll", "primary_tested": ["GrowthList.addAll(int,Collection)"], "external_dependencies": {"modules": ["GrowthList", "Integer", "Collection", "ArrayList"], "class_members": []}, "category": "unit", "description": "Tests the addition of a collection of elements at a specific index, causing the list to grow."}, {"name": "testGrowthList", "primary_tested": ["GrowthList.add(int,Integer)"], "external_dependencies": {"modules": ["GrowthList", "Integer"], "class_members": []}, "category": "unit", "description": "Tests the growth of the list by adding elements at increasing indices."}, {"name": "testGrowthSet1", "primary_tested": ["GrowthList.set(int,Integer)"], "external_dependencies": {"modules": ["GrowthList", "Integer"], "class_members": []}, "category": "unit", "description": "Tests setting an element at a specific index, causing the list to grow if necessary."}, {"name": "testGrowthSet2", "primary_tested": ["GrowthList.set(int,Integer)"], "external_dependencies": {"modules": ["GrowthList", "Integer"], "class_members": []}, "category": "unit", "description": "Tests setting an element at the first index, causing the list to grow if necessary."}, {"name": "testListAddByIndexBoundsChecking", "primary_tested": ["List.add(int,E)"], "external_dependencies": {"modules": ["List", "Executable", "IndexOutOfBoundsException"], "class_members": []}, "category": "unit", "description": "Tests the bounds checking for adding an element at an invalid index."}, {"name": "testListAddByIndexBoundsChecking2", "primary_tested": ["List.add(int,E)"], "external_dependencies": {"modules": ["List", "IndexOutOfBoundsException"], "class_members": []}, "category": "unit", "description": "Tests the bounds checking for adding an element at an invalid index in a full collection."}, {"name": "testListSetByIndexBoundsChecking", "primary_tested": ["List.set(int,E)"], "external_dependencies": {"modules": ["List", "IndexOutOfBoundsException"], "class_members": []}, "category": "unit", "description": "Tests the bounds checking for setting an element at an invalid index."}, {"name": "testListSetByIndexBoundsChecking2", "primary_tested": ["List.set(int,E)"], "external_dependencies": {"modules": ["List", "IndexOutOfBoundsException"], "class_members": []}, "category": "unit", "description": "Tests the bounds checking for setting an element at an invalid index in a full collection."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/CollatingIteratorTest.java", "testclass_name": "CollatingIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Comparator;", "import java.util.List;", "import org.apache.commons.collections4.comparators.ComparableComparator;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CollatingIteratorTest", "description": "Unit tests for the CollatingIterator class, which merges multiple sorted inputs into a single sorted output.", "class_members": {"variables": [{"name": "comparator", "type": "Comparator<Integer>"}, {"name": "evens", "type": "ArrayList<Integer>"}, {"name": "odds", "type": "ArrayList<Integer>"}, {"name": "fib", "type": "ArrayList<Integer>"}], "methods": [{"name": "makeEmptyIterator", "signature": "CollatingIterator<Integer> makeEmptyIterator()"}, {"name": "makeObject", "signature": "CollatingIterator<Integer> makeObject()"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetSetComparator", "primary_tested": ["CollatingIterator.getComparator()", "CollatingIterator.setComparator(Comparator)"], "external_dependencies": {"modules": ["CollatingIterator", "Comparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the getter and setter methods for the comparator in CollatingIterator."}, {"name": "testIterateEven", "primary_tested": ["CollatingIterator.hasNext()", "CollatingIterator.next()", "CollatingIterator.getIteratorIndex()"], "external_dependencies": {"modules": ["CollatingIterator", "ArrayList"], "class_members": [{"name": "comparator", "type": "variable"}, {"name": "evens", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests iterating through even numbers using CollatingIterator."}, {"name": "testIterateEvenEven", "primary_tested": ["CollatingIterator.hasNext()", "CollatingIterator.next()", "CollatingIterator.getIteratorIndex()"], "external_dependencies": {"modules": ["CollatingIterator", "ArrayList"], "class_members": [{"name": "comparator", "type": "variable"}, {"name": "evens", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests iterating through even numbers twice using CollatingIterator."}, {"name": "testIterateEvenOdd", "primary_tested": ["CollatingIterator.hasNext()", "CollatingIterator.next()", "CollatingIterator.getIteratorIndex()"], "external_dependencies": {"modules": ["CollatingIterator", "ArrayList"], "class_members": [{"name": "comparator", "type": "variable"}, {"name": "evens", "type": "variable"}, {"name": "odds", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests iterating through even and odd numbers using CollatingIterator."}, {"name": "testIterateFibEvenOdd", "primary_tested": ["CollatingIterator.hasNext()", "CollatingIterator.next()", "CollatingIterator.getIteratorIndex()"], "external_dependencies": {"modules": ["CollatingIterator", "ArrayList"], "class_members": [{"name": "comparator", "type": "variable"}, {"name": "fib", "type": "variable"}, {"name": "evens", "type": "variable"}, {"name": "odds", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests iterating through Fibonacci, even, and odd numbers using CollatingIterator."}, {"name": "testIterateOddEven", "primary_tested": ["CollatingIterator.hasNext()", "CollatingIterator.next()", "CollatingIterator.getIteratorIndex()"], "external_dependencies": {"modules": ["CollatingIterator", "ArrayList"], "class_members": [{"name": "comparator", "type": "variable"}, {"name": "odds", "type": "variable"}, {"name": "evens", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests iterating through odd and even numbers using CollatingIterator."}, {"name": "testNullComparator", "primary_tested": ["CollatingIterator.next()"], "external_dependencies": {"modules": ["CollatingIterator", "ArrayList", "ComparableComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of CollatingIterator when a null comparator is used."}, {"name": "testRemoveFromDouble", "primary_tested": ["CollatingIterator.hasNext()", "CollatingIterator.next()", "CollatingIterator.remove()"], "external_dependencies": {"modules": ["CollatingIterator", "ArrayList"], "class_members": [{"name": "comparator", "type": "variable"}, {"name": "evens", "type": "variable"}, {"name": "odds", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests removing elements from a CollatingIterator that iterates over both evens and odds."}, {"name": "testRemoveFromSingle", "primary_tested": ["CollatingIterator.hasNext()", "CollatingIterator.next()", "CollatingIterator.remove()"], "external_dependencies": {"modules": ["CollatingIterator", "ArrayList"], "class_members": [{"name": "comparator", "type": "variable"}, {"name": "evens", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests removing elements from a CollatingIterator that iterates over evens."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/BitMapsTest.java", "testclass_name": "BitMapsTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.junit.jupiter.api.Test;"], "name": "BitMapsTest", "description": "Unit tests for the BitMaps class, focusing on various bit manipulation methods.", "class_members": {"methods": [{"name": "assertMod", "signature": "void assertMod(long, int)"}]}, "fixtures": [], "test_cases": [{"name": "testContains", "primary_tested": ["BitMaps.contains(long[],int)"], "associated_methods": ["BitMaps.set(long[],int)"], "external_dependencies": {"modules": ["BitMaps"]}, "category": "unit", "description": "Tests the contains method of BitMaps, ensuring it correctly identifies set bits and handles boundary conditions."}, {"name": "testGetLongBit", "primary_tested": ["BitMaps.getLongBit(int)"], "external_dependencies": {"modules": ["BitMaps"]}, "category": "unit", "description": "Tests the getLongBit method of BitMaps, ensuring it correctly returns the bit value for given indices."}, {"name": "testGetLongIndex", "primary_tested": ["BitMaps.getLongIndex(int)"], "external_dependencies": {"modules": ["BitMaps"]}, "category": "unit", "description": "Tests the getLongIndex method of BitMaps, ensuring it correctly returns the long index for given bit indices."}, {"name": "testMod", "primary_tested": ["BitMaps.mod(long,int)"], "associated_methods": ["BitMaps.assertMod(long,int)"], "external_dependencies": {"modules": ["BitMaps"], "class_members": [{"name": "assertMod", "type": "method"}]}, "category": "unit", "description": "Tests the mod method of BitMaps, ensuring it functions as an unsigned modulus."}, {"name": "testModEdgeCases", "primary_tested": ["BitMaps.mod(long,int)"], "external_dependencies": {"modules": ["BitMaps"]}, "category": "unit", "description": "Tests edge cases for the mod method of BitMaps, including division by zero and negative divisors."}, {"name": "testNumberOfBitMaps", "primary_tested": ["BitMaps.numberOfBitMaps(int)"], "external_dependencies": {"modules": ["BitMaps"]}, "category": "unit", "description": "Tests the numberOfBitMaps method of BitMaps, ensuring it correctly calculates the number of long arrays needed for a given number of bits."}, {"name": "testSet", "primary_tested": ["BitMaps.set(long[],int)"], "associated_methods": ["BitMaps.contains(long[],int)"], "external_dependencies": {"modules": ["BitMaps"]}, "category": "unit", "description": "Tests the set method of BitMaps, ensuring it correctly sets bits and verifies their state."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/keyvalue/TiedMapEntryTest.java", "testclass_name": "TiedMapEntryTest", "dependencies": ["package org.apache.commons.collections4.keyvalue;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.Test;"], "name": "TiedMapEntryTest", "description": "Tests for the TiedMapEntry class, focusing on the setValue method.", "class_members": {"methods": [{"name": "makeMapEntry", "signature": "Map.Entry<K, V> makeMapEntry(K key, V value)"}]}, "fixtures": [], "test_cases": [{"name": "testConstructors", "primary_tested": [], "external_dependencies": {"modules": []}, "category": "unit", "fixtures_used": [], "description": "Tests the constructors."}, {"name": "testSetValue", "primary_tested": ["TiedMapEntry.setValue(V)"], "associated_methods": ["TiedMapEntry.getKey()", "TiedMapEntry.getValue()"], "external_dependencies": {"modules": ["HashMap", "Map", "TiedMapEntry"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the setValue method of TiedMapEntry, ensuring it correctly updates the value in the underlying map and returns the old value."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/TreeListTest.java", "testclass_name": "TreeListTest", "dependencies": ["package org.apache.commons.collections4.list;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import java.util.ArrayList;", "import java.util.List;", "import java.util.ListIterator;", "import org.junit.jupiter.api.Test;"], "name": "TreeListTest", "description": "Unit tests for TreeList operations including add, remove, indexOf, and iteration order.", "class_members": {"variables": [], "methods": [{"name": "benchmark", "signature": "void benchmark(List<? super Integer>)"}, {"name": "makeObject", "signature": "TreeList<E> makeObject()"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testAddMultiple", "primary_tested": ["TreeList.add(E)", "TreeList.get(int)"], "external_dependencies": {"modules": ["TreeList"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "description": "Tests the addition of multiple elements to a TreeList and verifies their positions."}, {"name": "testBug35258", "primary_tested": ["TreeList.remove(Object)", "TreeList.listIterator()"], "associated_methods": ["TreeList.listIterator().next()", "TreeList.listIterator().previous()"], "external_dependencies": {"modules": ["TreeList", "ListIterator"]}, "category": "unit", "description": "Tests the removal of an element from a TreeList and verifies the consistency of the ListIterator."}, {"name": "testBugCollections447", "primary_tested": ["TreeList.listIterator()", "TreeList.remove(Object)"], "associated_methods": ["TreeList.listIterator().next()", "TreeList.listIterator().previous()"], "external_dependencies": {"modules": ["TreeList", "ListIterator"]}, "category": "unit", "description": "Tests the removal of an element from a TreeList and verifies the behavior of the ListIterator after removal."}, {"name": "testIndexOf", "primary_tested": ["TreeList.indexOf(Object)", "TreeList.set(int,E)"], "external_dependencies": {"modules": ["TreeList"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "description": "Tests the indexOf method and the setting of elements in a TreeList."}, {"name": "testInsertBefore", "primary_tested": ["TreeList.add(int,E)", "TreeList.get(int)"], "external_dependencies": {"modules": ["TreeList"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "description": "Tests the insertion of an element at a specific index in a TreeList."}, {"name": "testIterationOrder", "primary_tested": ["TreeList.listIterator()", "TreeList.listIterator().next()", "TreeList.listIterator().previous()"], "external_dependencies": {"modules": ["TreeList", "ListIterator", "ArrayList"]}, "category": "unit", "description": "Tests the iteration order of elements in a TreeList initialized with another collection."}, {"name": "testIterationOrderAfterAddAll", "primary_tested": ["TreeList.addAll(Collection)", "TreeList.listIterator()", "TreeList.listIterator().next()", "TreeList.listIterator().previous()"], "external_dependencies": {"modules": ["TreeList", "ListIterator", "ArrayList"]}, "category": "unit", "description": "Tests the iteration order of elements in a TreeList after calling addAll."}, {"name": "testRemove", "primary_tested": ["TreeList.remove(int)", "TreeList.get(int)"], "external_dependencies": {"modules": ["TreeList"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "description": "Tests the removal of elements from a TreeList and verifies the remaining elements' positions."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java", "testclass_name": "PredicateUtilsTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.apache.commons.collections4.functors.NullPredicate.nullPredicate;", "import static org.apache.commons.collections4.functors.TruePredicate.truePredicate;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.Collections;", "import java.util.HashMap;", "import java.util.List;", "import java.util.Map;", "import org.apache.commons.collections4.functors.AbstractPredicateTest;", "import org.apache.commons.collections4.functors.AllPredicate;", "import org.apache.commons.collections4.functors.EqualPredicate;", "import org.apache.commons.collections4.functors.ExceptionPredicate;", "import org.apache.commons.collections4.functors.FalsePredicate;", "import org.apache.commons.collections4.functors.NotNullPredicate;", "import org.apache.commons.collections4.functors.NullPredicate;", "import org.apache.commons.collections4.functors.TruePredicate;", "import org.junit.jupiter.api.Test;"]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/CountingPredicateTest.java", "testclass_name": "CountingPredicateTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.List;", "import java.util.function.BiPredicate;", "import org.apache.commons.lang3.tuple.Pair;", "import org.junit.jupiter.api.Test;"], "name": "CountingPredicateTest", "description": "Tests for the CountingPredicate class, focusing on different scenarios where the predicate array is longer, shorter, or the same length as the other array.", "class_members": {"variables": [{"name": "ary", "type": "Integer[]"}], "methods": [{"name": "makeFunc", "signature": "BiPredicate<Integer, Integer> makeFunc(BiPredicate<Integer, Integer> inner, List<Pair<Integer, Integer>> result)"}]}, "fixtures": [], "test_cases": [{"name": "testPredicateLonger", "primary_tested": ["CountingPredicate.test(Integer)", "CountingPredicate.processRemaining()"], "associated_methods": [], "external_dependencies": {"modules": ["CountingPredicate", "Pair", "ArrayList", "List"], "class_members": [{"name": "ary", "type": "variable"}, {"name": "makeFunc", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the scenario where the predicate array is longer than the other array, ensuring that all values result in a true statement and verifying the behavior of processRemaining()."}, {"name": "testPredicateSameLength", "primary_tested": ["CountingPredicate.test(Integer)", "CountingPredicate.processRemaining()"], "associated_methods": [], "external_dependencies": {"modules": ["CountingPredicate", "Pair", "ArrayList", "List"], "class_members": [{"name": "ary", "type": "variable"}, {"name": "makeFunc", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the scenario where the predicate array is the same length as the other array, ensuring that all values result in a true statement and verifying the behavior of processRemaining()."}, {"name": "testPredicateShorter", "primary_tested": ["CountingPredicate.test(Integer)", "CountingPredicate.processRemaining()"], "associated_methods": [], "external_dependencies": {"modules": ["CountingPredicate", "Pair", "ArrayList", "List"], "class_members": [{"name": "ary", "type": "variable"}, {"name": "makeFunc", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the scenario where the predicate array is shorter than the other array, ensuring that all values result in a true statement and verifying the behavior of processRemaining()."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java", "testclass_name": "IterableUtilsTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.apache.commons.collections4.functors.EqualPredicate.equalPredicate;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertArrayEquals;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.fail;", "import java.util.ArrayDeque;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.Collections;", "import java.util.Deque;", "import java.util.HashSet;", "import java.util.LinkedHashSet;", "import java.util.LinkedList;", "import java.util.List;", "import java.util.Set;", "import org.apache.commons.collections4.bag.HashBag;", "import org.apache.commons.lang3.StringUtils;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"]}, {"file_path": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java", "testclass_name": "IteratorUtilsTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.apache.commons.collections4.functors.EqualPredicate.equalPredicate;", "import static org.apache.commons.collections4.functors.TruePredicate.INSTANCE;", "import static org.easymock.EasyMock.createMock;", "import static org.easymock.EasyMock.expect;", "import static org.easymock.EasyMock.replay;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.Collections;", "import java.util.Comparator;", "import java.util.Dictionary;", "import java.util.Enumeration;", "import java.util.HashMap;", "import java.util.Iterator;", "import java.util.LinkedHashSet;", "import java.util.List;", "import java.util.ListIterator;", "import java.util.Map;", "import java.util.NoSuchElementException;", "import java.util.Set;", "import java.util.Vector;", "import org.apache.commons.collections4.iterators.ArrayIterator;", "import org.apache.commons.collections4.iterators.EmptyIterator;", "import org.apache.commons.collections4.iterators.EmptyListIterator;", "import org.apache.commons.collections4.iterators.EmptyMapIterator;", "import org.apache.commons.collections4.iterators.EmptyOrderedIterator;", "import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;", "import org.apache.commons.collections4.iterators.EnumerationIterator;", "import org.apache.commons.collections4.iterators.NodeListIterator;", "import org.apache.commons.collections4.iterators.ObjectArrayIterator;", "import org.apache.commons.collections4.iterators.ZippingIterator;", "import org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import org.w3c.dom.Node;", "import org.w3c.dom.NodeList;"]}, {"file_path": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java", "testclass_name": "MapUtilsTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertInstanceOf;", "import static org.junit.jupiter.api.Assertions.assertNotSame;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.fail;", "import java.io.ByteArrayOutputStream;", "import java.io.PrintStream;", "import java.text.DecimalFormat;", "import java.text.NumberFormat;", "import java.util.AbstractMap;", "import java.util.ArrayList;", "import java.util.HashMap;", "import java.util.HashSet;", "import java.util.List;", "import java.util.ListResourceBundle;", "import java.util.Map;", "import java.util.Properties;", "import java.util.ResourceBundle;", "import java.util.Set;", "import java.util.SortedMap;", "import java.util.TreeMap;", "import org.apache.commons.collections4.collection.TransformedCollectionTest;", "import org.apache.commons.collections4.keyvalue.DefaultKeyValue;", "import org.apache.commons.collections4.keyvalue.DefaultMapEntry;", "import org.apache.commons.collections4.map.HashedMap;", "import org.apache.commons.collections4.map.LazyMap;", "import org.apache.commons.collections4.map.MultiValueMap;", "import org.apache.commons.collections4.map.PredicatedMap;", "import org.apache.commons.lang3.StringUtils;", "import org.junit.jupiter.api.Test;"]}, {"file_path": "src/test/java/org/apache/commons/collections4/keyvalue/DefaultMapEntryTest.java", "testclass_name": "DefaultMapEntryTest", "dependencies": ["package org.apache.commons.collections4.keyvalue;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import java.util.Map;", "import org.apache.commons.collections4.KeyValue;", "import org.junit.jupiter.api.Test;"], "name": "DefaultMapEntryTest", "description": "Tests for the DefaultMapEntry class, focusing on constructors and self-reference handling.", "class_members": {"methods": [{"name": "makeMapEntry", "signature": "Map.Entry<K, V> makeMapEntry()"}, {"name": "makeMapEntry", "signature": "Map.Entry<K, V> makeMapEntry(K key, V value)"}]}, "test_cases": [{"name": "testConstructors", "primary_tested": ["DefaultMapEntry.<init>(K,V)", "DefaultKeyValue.<init>(K,V)", "DefaultMapEntry.<init>(Map.Entry<K,V>)"], "associated_methods": ["DefaultMapEntry.getKey()", "DefaultMapEntry.getValue()", "DefaultKeyValue.getKey()", "DefaultKeyValue.getValue()", "DefaultMapEntry.setValue(V)"], "external_dependencies": {"modules": ["DefaultMapEntry", "DefaultKeyValue", "Map.Entry", "KeyValue"]}, "category": "unit", "description": "Tests the constructors of DefaultMapEntry and DefaultKeyValue, ensuring correct key and value assignment and independence of objects."}, {"name": "testSelfReferenceHandling", "primary_tested": ["DefaultMapEntry.setValue(V)"], "associated_methods": ["DefaultMapEntry.getValue()"], "external_dependencies": {"modules": ["DefaultMapEntry", "Map.Entry"], "class_members": [{"name": "makeMapEntry", "type": "method"}]}, "category": "unit", "description": "Tests the handling of self-reference in DefaultMapEntry, ensuring the entry can reference itself as its value."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "testclass_name": "CollectionUtilsTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.apache.commons.collections4.functors.EqualPredicate.equalPredicate;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertArrayEquals;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertInstanceOf;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.Collections;", "import java.util.Comparator;", "import java.util.Enumeration;", "import java.util.HashMap;", "import java.util.HashSet;", "import java.util.Hashtable;", "import java.util.Iterator;", "import java.util.LinkedHashMap;", "import java.util.LinkedList;", "import java.util.List;", "import java.util.Map;", "import java.util.Objects;", "import java.util.Queue;", "import java.util.Set;", "import java.util.SortedMap;", "import java.util.TreeMap;", "import java.util.Vector;", "import org.apache.commons.collections4.bag.HashBag;", "import org.apache.commons.collections4.collection.PredicatedCollection;", "import org.apache.commons.collections4.collection.SynchronizedCollection;", "import org.apache.commons.collections4.collection.TransformedCollection;", "import org.apache.commons.collections4.collection.UnmodifiableCollection;", "import org.apache.commons.collections4.functors.DefaultEquator;", "import org.apache.commons.collections4.queue.CircularFifoQueue;", "import org.apache.commons.lang3.ArrayUtils;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/LazyListTest.java", "testclass_name": "LazyListTest", "dependencies": ["package org.apache.commons.collections4.list;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.time.LocalDateTime;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.List;", "import org.apache.commons.collections4.AbstractObjectTest;", "import org.apache.commons.collections4.Factory;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.Test;"], "name": "LazyListTest", "description": "Unit tests for the LazyList class, focusing on its behavior with Factory and Transformer.", "class_members": {"variables": [], "methods": [{"name": "testSubList", "signature": "void testSubList(List<LocalDateTime>)"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testCreateNullGapsWithFactory", "primary_tested": ["LazyList.get(int)"], "associated_methods": ["LazyList.isEmpty()", "LazyList.get(int)"], "external_dependencies": {"modules": ["LocalDateTime", "LazyList", "ArrayList"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the creation of null gaps in LazyList using a Factory."}, {"name": "testCreateNullGapsWithTransformer", "primary_tested": ["LazyList.get(int)"], "associated_methods": ["LazyList.isEmpty()", "LazyList.get(int)"], "external_dependencies": {"modules": ["LocalDateTime", "LazyList", "ArrayList", "Arrays"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the creation of null gaps in LazyList using a Transformer."}, {"name": "testElementCreationWithFactory", "primary_tested": ["LazyList.get(int)"], "associated_methods": ["LazyList.isEmpty()", "LazyList.get(int)"], "external_dependencies": {"modules": ["LocalDateTime", "LazyList", "ArrayList"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the creation of elements in LazyList using a Factory."}, {"name": "testElementCreationWithTransformer", "primary_tested": ["LazyList.get(int)"], "associated_methods": ["LazyList.isEmpty()", "LazyList.get(int)"], "external_dependencies": {"modules": ["LocalDateTime", "LazyList", "ArrayList"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the creation of elements in LazyList using a Transformer."}, {"name": "testGetWithNull", "primary_tested": ["LazyList.get(int)"], "associated_methods": ["LazyList.isEmpty()", "LazyList.get(int)", "LazyList.remove(int)", "LazyList.add(int,LocalDateTime)"], "external_dependencies": {"modules": ["LocalDateTime", "LazyList", "ArrayList", "Arrays"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of LazyList when getting an element that was set to null."}, {"name": "testSubListWitheFactory", "primary_tested": ["LazyList.get(int)"], "associated_methods": ["LazyList.isEmpty()", "LazyList.get(int)", "LazyList.subList(int,int)"], "external_dependencies": {"modules": ["LocalDateTime", "LazyList", "ArrayList"], "class_members": [{"name": "testSubList", "type": "method"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the subList functionality of LazyList using a Factory."}, {"name": "testSubListWithTransformer", "primary_tested": ["LazyList.get(int)"], "associated_methods": ["LazyList.isEmpty()", "LazyList.get(int)", "LazyList.subList(int,int)"], "external_dependencies": {"modules": ["LocalDateTime", "LazyList", "ArrayList", "Arrays"], "class_members": [{"name": "testSubList", "type": "method"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the subList functionality of LazyList using a Transformer."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/ObjectGraphIteratorTest.java", "testclass_name": "ObjectGraphIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.apache.commons.collections4.IteratorUtils;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ObjectGraphIteratorTest", "description": "Unit tests for the ObjectGraphIterator class, which is used to iterate over a graph of objects.", "class_members": {"variables": [{"name": "testArray", "type": "String[]"}, {"name": "list1", "type": "List<String>"}, {"name": "list2", "type": "List<String>"}, {"name": "list3", "type": "List<String>"}, {"name": "iteratorList", "type": "List<Iterator<String>>"}], "methods": [{"name": "makeEmptyIterator", "signature": "ObjectGraphIterator<Object> makeEmptyIterator()"}, {"name": "makeObject", "signature": "ObjectGraphIterator<Object> makeObject()"}], "nested_classes": [{"name": "Branch", "description": "Internal class representing a branch in a tree structure."}, {"name": "Forest", "description": "Internal class representing a forest containing multiple trees."}, {"name": "Leaf", "description": "Internal class representing a leaf in a tree structure."}, {"name": "LeafFinder", "description": "Internal class implementing Transformer to find leaves in a forest."}, {"name": "Tree", "description": "Internal class representing a tree containing multiple branches."}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testIteration_IteratorOfIterators", "primary_tested": ["ObjectGraphIterator.hasNext()", "ObjectGraphIterator.next()"], "external_dependencies": {"modules": ["ObjectGraphIterator", "IteratorUtils"], "class_members": [{"name": "list1", "type": "variable"}, {"name": "list2", "type": "variable"}, {"name": "list3", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the iteration over a list of iterators using ObjectGraphIterator."}, {"name": "testIteration_IteratorOfIteratorsWithEmptyIterators", "primary_tested": ["ObjectGraphIterator.hasNext()", "ObjectGraphIterator.next()"], "external_dependencies": {"modules": ["ObjectGraphIterator", "IteratorUtils"], "class_members": [{"name": "list1", "type": "variable"}, {"name": "list2", "type": "variable"}, {"name": "list3", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the iteration over a list of iterators, including empty iterators, using ObjectGraphIterator."}, {"name": "testIteration_RootNoTransformer", "primary_tested": ["ObjectGraphIterator.hasNext()", "ObjectGraphIterator.next()"], "external_dependencies": {"modules": ["ObjectGraphIterator"], "class_members": [{"name": "Forest", "type": "nested_class"}]}, "category": "unit", "description": "Tests the iteration over a root object without a transformer using ObjectGraphIterator."}, {"name": "testIteration_RootNull", "primary_tested": ["ObjectGraphIterator.hasNext()", "ObjectGraphIterator.next()"], "external_dependencies": {"modules": ["ObjectGraphIterator"]}, "category": "unit", "description": "Tests the iteration over a null root object using ObjectGraphIterator."}, {"name": "testIteration_Transformed1", "primary_tested": ["ObjectGraphIterator.hasNext()", "ObjectGraphIterator.next()"], "external_dependencies": {"modules": ["ObjectGraphIterator", "LeafFinder"], "class_members": [{"name": "Forest", "type": "nested_class"}, {"name": "Leaf", "type": "nested_class"}]}, "category": "unit", "description": "Tests the iteration over a transformed forest object using ObjectGraphIterator."}, {"name": "testIteration_Transformed2", "primary_tested": ["ObjectGraphIterator.hasNext()", "ObjectGraphIterator.next()"], "external_dependencies": {"modules": ["ObjectGraphIterator", "LeafFinder"], "class_members": [{"name": "Forest", "type": "nested_class"}, {"name": "Tree", "type": "nested_class"}, {"name": "Branch", "type": "nested_class"}, {"name": "Leaf", "type": "nested_class"}]}, "category": "unit", "description": "Tests the iteration over a transformed forest object with multiple trees and branches using ObjectGraphIterator."}, {"name": "testIteration_Transformed3", "primary_tested": ["ObjectGraphIterator.hasNext()", "ObjectGraphIterator.next()"], "external_dependencies": {"modules": ["ObjectGraphIterator", "LeafFinder"], "class_members": [{"name": "Forest", "type": "nested_class"}, {"name": "Tree", "type": "nested_class"}, {"name": "Branch", "type": "nested_class"}, {"name": "Leaf", "type": "nested_class"}]}, "category": "unit", "description": "Tests the iteration over a transformed forest object with multiple trees and branches using ObjectGraphIterator."}, {"name": "testIteratorConstructor_null_next", "primary_tested": ["ObjectGraphIterator.next()"], "external_dependencies": {"modules": ["ObjectGraphIterator"]}, "category": "unit", "description": "Tests the behavior of ObjectGraphIterator when constructed with a null iterator and calling next()."}, {"name": "testIteratorConstructor_null_remove", "primary_tested": ["ObjectGraphIterator.remove()"], "external_dependencies": {"modules": ["ObjectGraphIterator"]}, "category": "unit", "description": "Tests the behavior of ObjectGraphIterator when constructed with a null iterator and calling remove()."}, {"name": "testIteratorConstructor_null1", "primary_tested": ["ObjectGraphIterator.hasNext()", "ObjectGraphIterator.next()", "ObjectGraphIterator.remove()"], "external_dependencies": {"modules": ["ObjectGraphIterator"]}, "category": "unit", "description": "Tests the behavior of ObjectGraphIterator when constructed with a null iterator."}, {"name": "testIteratorConstructorIteration_Empty", "primary_tested": ["ObjectGraphIterator.hasNext()", "ObjectGraphIterator.next()", "ObjectGraphIterator.remove()"], "external_dependencies": {"modules": ["ObjectGraphIterator"]}, "category": "unit", "description": "Tests the iteration over an empty list of iterators using ObjectGraphIterator."}, {"name": "testIteratorConstructorIteration_Simple", "primary_tested": ["ObjectGraphIterator.hasNext()", "ObjectGraphIterator.next()"], "external_dependencies": {"modules": ["ObjectGraphIterator"], "class_members": [{"name": "list1", "type": "variable"}, {"name": "list2", "type": "variable"}, {"name": "list3", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the iteration over a simple list of iterators using ObjectGraphIterator."}, {"name": "testIteratorConstructorIteration_SimpleNoHasNext", "primary_tested": ["ObjectGraphIterator.next()"], "external_dependencies": {"modules": ["ObjectGraphIterator"], "class_members": [{"name": "list1", "type": "variable"}, {"name": "list2", "type": "variable"}, {"name": "list3", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the iteration over a simple list of iterators without using hasNext() using ObjectGraphIterator."}, {"name": "testIteratorConstructorIteration_WithEmptyIterators", "primary_tested": ["ObjectGraphIterator.hasNext()", "ObjectGraphIterator.next()"], "external_dependencies": {"modules": ["ObjectGraphIterator", "IteratorUtils"], "class_members": [{"name": "list1", "type": "variable"}, {"name": "list2", "type": "variable"}, {"name": "list3", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the iteration over a list of iterators, including empty iterators, using ObjectGraphIterator."}, {"name": "testIteratorConstructorRemove", "primary_tested": ["ObjectGraphIterator.next()", "ObjectGraphIterator.remove()"], "external_dependencies": {"modules": ["ObjectGraphIterator"], "class_members": [{"name": "list1", "type": "variable"}, {"name": "list2", "type": "variable"}, {"name": "list3", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the remove operation during iteration over a list of iterators using ObjectGraphIterator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/multiset/PredicatedMultiSetTest.java", "testclass_name": "PredicatedMultiSetTest", "dependencies": ["package org.apache.commons.collections4.multiset;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Set;", "import org.apache.commons.collections4.MultiSet;", "import org.apache.commons.collections4.Predicate;", "import org.apache.commons.collections4.functors.TruePredicate;", "import org.junit.jupiter.api.Test;"], "name": "PredicatedMultiSetTest", "description": "Tests for the PredicatedMultiSet class, focusing on predicate validation and element management.", "class_members": {"variables": [{"name": "truePredicate", "type": "Predicate<T>"}], "methods": [{"name": "decorateMultiSet", "signature": "protected MultiSet<T> decorateMultiSet(HashMultiSet<T> multiset, Predicate<T> predicate)"}, {"name": "makeTestMultiSet", "signature": "protected MultiSet<T> makeTestMultiSet()"}, {"name": "stringPredicate", "signature": "protected Predicate<T> stringPredicate()"}]}, "fixtures": [], "test_cases": [{"name": "testIllegalAdd", "primary_tested": ["MultiSet.add(T)"], "associated_methods": ["MultiSet.contains(Object)"], "external_dependencies": {"modules": ["MultiSet", "Integer"], "class_members": [{"name": "makeTestMultiSet", "type": "method"}]}, "category": "unit", "description": "Tests that adding an illegal element (non-string) to the MultiSet throws an IllegalArgumentException."}, {"name": "testIllegalDecorate", "primary_tested": ["PredicatedMultiSet.predicatedMultiSet(HashMultiSet<T>, Predicate<T>)"], "associated_methods": [], "external_dependencies": {"modules": ["HashMultiSet", "Integer"], "class_members": [{"name": "decorateMultiSet", "type": "method"}, {"name": "stringPredicate", "type": "method"}]}, "category": "unit", "description": "Tests that decorating a MultiSet with an illegal element throws an IllegalArgumentException and that decorating with a null predicate throws a NullPointerException."}, {"name": "testLegalAddRemove", "primary_tested": ["MultiSet.add(T)", "MultiSet.remove(Object)"], "associated_methods": ["MultiSet.size()", "MultiSet.contains(Object)", "PredicatedMultiSet.uniqueSet()"], "external_dependencies": {"modules": ["MultiSet", "PredicatedMultiSet", "Set"], "class_members": [{"name": "makeTestMultiSet", "type": "method"}]}, "category": "unit", "description": "Tests the legal addition and removal of elements from the MultiSet, ensuring the unique set is updated correctly."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/BoundedIteratorTest.java", "testclass_name": "BoundedIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.hamcrest.MatcherAssert.assertThat;", "import static org.hamcrest.core.Is.is;", "import static org.hamcrest.core.IsEqual.equalTo;", "import static org.hamcrest.core.IsNull.nullValue;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "BoundedIteratorTest", "description": "Unit tests for the BoundedIterator class, which decorates an iterator with bounds on the start index and maximum number of elements.", "class_members": {"variables": [{"name": "testArray", "type": "String[]"}, {"name": "testList", "type": "List<E>"}], "methods": [], "nested_classes": []}, "fixtures": ["setUp"], "test_cases": [{"name": "testBounded", "primary_tested": ["BoundedIterator.next()"], "associated_methods": ["BoundedIterator.hasNext()"], "external_dependencies": {"modules": ["BoundedIterator", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the bounded iterator functionality where the first element returned is at an index greater than the first element of the decorated iterator, and the last element returned is at an index less than the last element of the decorated iterator."}, {"name": "testEmptyBounded", "primary_tested": ["BoundedIterator.hasNext()", "BoundedIterator.next()"], "external_dependencies": {"modules": ["BoundedIterator", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior of a bounded iterator with a max of 0, which should behave as an empty iterator."}, {"name": "testMaxGreaterThanSize", "primary_tested": ["BoundedIterator.next()"], "associated_methods": ["BoundedIterator.hasNext()"], "external_dependencies": {"modules": ["BoundedIterator", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the case where the max parameter is greater than the size of the decorated iterator, ensuring the last element returned is the same as the last element of the decorated iterator."}, {"name": "testNegativeMax", "primary_tested": ["BoundedIterator.BoundedIterator(Iterator<E>, int, int)"], "external_dependencies": {"modules": ["BoundedIterator", "IllegalArgumentException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the case where a negative max parameter is passed to the BoundedIterator constructor, expecting an IllegalArgumentException."}, {"name": "testNegativeOffset", "primary_tested": ["BoundedIterator.BoundedIterator(Iterator<E>, int, int)"], "external_dependencies": {"modules": ["BoundedIterator", "IllegalArgumentException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the case where a negative offset parameter is passed to the BoundedIterator constructor, expecting an IllegalArgumentException."}, {"name": "testOffsetGreaterThanSize", "primary_tested": ["BoundedIterator.hasNext()", "BoundedIterator.next()"], "external_dependencies": {"modules": ["BoundedIterator", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the case where the offset parameter is greater than the size of the decorated iterator, ensuring the BoundedIterator behaves as an empty iterator."}, {"name": "testRemoveCalledTwice", "primary_tested": ["BoundedIterator.remove()"], "associated_methods": ["BoundedIterator.next()"], "external_dependencies": {"modules": ["BoundedIterator", "IllegalStateException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior of calling the remove() method twice without calling next() in between, expecting an IllegalStateException."}, {"name": "testRemoveFirst", "primary_tested": ["BoundedIterator.remove()"], "associated_methods": ["BoundedIterator.next()"], "external_dependencies": {"modules": ["BoundedIterator", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests removing the first element from the iterator and verifies that the element is removed from the underlying collection."}, {"name": "testRemoveLast", "primary_tested": ["BoundedIterator.remove()"], "associated_methods": ["BoundedIterator.next()"], "external_dependencies": {"modules": ["BoundedIterator", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests removing the last element from the iterator and verifies that the element is removed from the underlying collection."}, {"name": "testRemoveMiddle", "primary_tested": ["BoundedIterator.remove()"], "associated_methods": ["BoundedIterator.next()"], "external_dependencies": {"modules": ["BoundedIterator", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests removing an element in the middle of the iterator and verifies that the element is removed from the underlying collection."}, {"name": "testRemoveUnsupported", "primary_tested": ["BoundedIterator.remove()"], "associated_methods": ["BoundedIterator.next()"], "external_dependencies": {"modules": ["BoundedIterator", "UnsupportedOperationException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the case where the decorated iterator does not support the remove() method and throws an UnsupportedOperationException."}, {"name": "testRemoveWithoutCallingNext", "primary_tested": ["BoundedIterator.remove()"], "external_dependencies": {"modules": ["BoundedIterator", "IllegalStateException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests calling the remove() method without first calling next(), expecting an IllegalStateException."}, {"name": "testSameAsDecorated", "primary_tested": ["BoundedIterator.next()"], "associated_methods": ["BoundedIterator.hasNext()"], "external_dependencies": {"modules": ["BoundedIterator", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the case where the offset is zero and the max is the size of the decorated iterator, ensuring the BoundedIterator returns all the same elements as the decorated iterator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/properties/OrderedPropertiesTest.java", "testclass_name": "OrderedPropertiesTest", "dependencies": ["package org.apache.commons.collections4.properties;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import java.io.FileNotFoundException;", "import java.io.FileReader;", "import java.io.IOException;", "import java.util.Collections;", "import java.util.Enumeration;", "import java.util.Iterator;", "import java.util.Map;", "import java.util.Map.Entry;", "import java.util.concurrent.atomic.AtomicInteger;", "import org.junit.jupiter.api.Test;"], "name": "OrderedPropertiesTest", "description": "Unit tests for the OrderedProperties class, focusing on various operations like compute, merge, put, and remove.", "class_members": {"variables": [], "methods": [{"name": "assertAscendingOrder", "signature": "void assertAscendingOrder(OrderedProperties)"}, {"name": "assertDescendingOrder", "signature": "OrderedProperties assertDescendingOrder(OrderedProperties)"}, {"name": "loadOrderedKeysReverse", "signature": "OrderedProperties loadOrderedKeysReverse() throws FileNotFoundException, IOException"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testCompute", "primary_tested": ["OrderedProperties.compute(String,BiFunction)"], "associated_methods": ["OrderedProperties.clear()"], "external_dependencies": {"modules": ["OrderedProperties", "AtomicInteger"], "class_members": [{"name": "assertAscendingOrder", "type": "method"}, {"name": "assertDescendingOrder", "type": "method"}]}, "category": "unit", "description": "Tests the compute functionality of OrderedProperties, ensuring keys and values are computed and ordered correctly."}, {"name": "testComputeIfAbsent", "primary_tested": ["OrderedProperties.computeIfAbsent(String,Function)"], "associated_methods": ["OrderedProperties.clear()"], "external_dependencies": {"modules": ["OrderedProperties", "AtomicInteger"], "class_members": [{"name": "assertAscendingOrder", "type": "method"}, {"name": "assertDescendingOrder", "type": "method"}]}, "category": "unit", "description": "Tests the computeIfAbsent functionality of OrderedProperties, ensuring keys and values are computed if absent and ordered correctly."}, {"name": "testEntrySet", "primary_tested": ["OrderedProperties.entrySet()"], "external_dependencies": {"modules": ["OrderedProperties", "Map.Entry"]}, "category": "unit", "description": "Tests the entrySet functionality of OrderedProperties, ensuring entries are iterated and ordered correctly."}, {"name": "testForEach", "primary_tested": ["OrderedProperties.forEach(BiConsumer)"], "external_dependencies": {"modules": ["OrderedProperties", "AtomicInteger"]}, "category": "unit", "description": "Tests the forEach functionality of OrderedProperties, ensuring keys and values are iterated and ordered correctly."}, {"name": "testKeys", "primary_tested": ["OrderedProperties.keys()"], "external_dependencies": {"modules": ["OrderedProperties"]}, "category": "unit", "description": "Tests the keys functionality of OrderedProperties, ensuring keys are iterated and ordered correctly."}, {"name": "testLoadOrderedKeys", "primary_tested": ["OrderedProperties.load(Reader)"], "associated_methods": ["OrderedProperties.clear()"], "external_dependencies": {"modules": ["OrderedProperties", "FileReader"], "class_members": [{"name": "assertAscendingOrder", "type": "method"}]}, "category": "unit", "description": "Tests the load functionality of OrderedProperties, ensuring properties are loaded from a file and ordered correctly."}, {"name": "testLoadOrderedKeysReverse", "primary_tested": ["OrderedProperties.load(Reader)"], "associated_methods": ["OrderedProperties.clear()"], "external_dependencies": {"modules": ["OrderedProperties", "FileReader"], "class_members": [{"name": "loadOrderedKeysReverse", "type": "method"}]}, "category": "unit", "description": "Tests the load functionality of OrderedProperties, ensuring properties are loaded from a file in reverse order and ordered correctly."}, {"name": "testMerge", "primary_tested": ["OrderedProperties.merge(String,Object,BiFunction)"], "associated_methods": ["OrderedProperties.clear()"], "external_dependencies": {"modules": ["OrderedProperties"], "class_members": [{"name": "assertAscendingOrder", "type": "method"}, {"name": "assertDescendingOrder", "type": "method"}]}, "category": "unit", "description": "Tests the merge functionality of OrderedProperties, ensuring keys and values are merged and ordered correctly."}, {"name": "testPut", "primary_tested": ["OrderedProperties.put(String,String)"], "associated_methods": ["OrderedProperties.clear()"], "external_dependencies": {"modules": ["OrderedProperties"], "class_members": [{"name": "assertAscendingOrder", "type": "method"}, {"name": "assertDescendingOrder", "type": "method"}]}, "category": "unit", "description": "Tests the put functionality of OrderedProperties, ensuring keys and values are added and ordered correctly."}, {"name": "testPutAll", "primary_tested": ["OrderedProperties.putAll(Map)"], "associated_methods": ["OrderedProperties.clear()"], "external_dependencies": {"modules": ["OrderedProperties"], "class_members": [{"name": "assertAscendingOrder", "type": "method"}, {"name": "assertDescendingOrder", "type": "method"}]}, "category": "unit", "description": "Tests the putAll functionality of OrderedProperties, ensuring all keys and values from another map are added and ordered correctly."}, {"name": "testPutIfAbsent", "primary_tested": ["OrderedProperties.putIfAbsent(String,String)"], "associated_methods": ["OrderedProperties.clear()"], "external_dependencies": {"modules": ["OrderedProperties"], "class_members": [{"name": "assertAscendingOrder", "type": "method"}, {"name": "assertDescendingOrder", "type": "method"}]}, "category": "unit", "description": "Tests the putIfAbsent functionality of OrderedProperties, ensuring keys and values are added only if absent and ordered correctly."}, {"name": "testRemoveKey", "primary_tested": ["OrderedProperties.remove(Object)"], "associated_methods": ["OrderedProperties.contains(Object)", "OrderedProperties.containsKey(Object)"], "external_dependencies": {"modules": ["OrderedProperties", "Collections"], "class_members": [{"name": "loadOrderedKeysReverse", "type": "method"}]}, "category": "unit", "description": "Tests the remove functionality of OrderedProperties, ensuring a key is removed and does not exist in the properties."}, {"name": "testRemoveKeyValue", "primary_tested": ["OrderedProperties.remove(Object,Object)"], "associated_methods": ["OrderedProperties.contains(Object)", "OrderedProperties.containsKey(Object)"], "external_dependencies": {"modules": ["OrderedProperties", "Collections"], "class_members": [{"name": "loadOrderedKeysReverse", "type": "method"}]}, "category": "unit", "description": "Tests the remove functionality of OrderedProperties, ensuring a key-value pair is removed and does not exist in the properties."}, {"name": "testToString", "primary_tested": ["OrderedProperties.toString()"], "external_dependencies": {"modules": ["OrderedProperties"]}, "category": "unit", "description": "Tests the toString functionality of OrderedProperties, ensuring the string representation is correct and ordered."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/multimap/HashSetValuedHashMapTest.java", "testclass_name": "HashSetValuedHashMapTest", "dependencies": ["package org.apache.commons.collections4.multimap;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotSame;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Iterator;", "import java.util.Map;", "import java.util.Set;", "import org.apache.commons.collections4.MultiValuedMap;", "import org.apache.commons.collections4.SetValuedMap;", "import org.apache.commons.collections4.collection.AbstractCollectionTest;", "import org.junit.jupiter.api.Test;"], "name": "HashSetValuedHashMapTest", "description": "Unit tests for HashSetValuedHashMap operations.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testHashSetValuedHashMap_2", "primary_tested": ["HashSetValuedHashMap.get(K)"], "external_dependencies": {"modules": ["HashMap", "HashSetValuedHashMap"], "class_members": []}, "category": "unit", "description": "Tests the creation and size of a HashSetValuedHashMap from a HashMap."}, {"name": "testHashSetValueHashMap", "primary_tested": ["HashSetValuedHashMap.get(K)"], "external_dependencies": {"modules": ["HashSetValuedHashMap"], "class_members": []}, "category": "unit", "description": "Tests the addition of elements to a HashSetValuedHashMap and checks the size."}, {"name": "testHashSetValueHashMap_1", "primary_tested": ["HashSetValuedHashMap.get(K)"], "associated_methods": ["HashSetValuedHashMap.put(K,V)", "HashSetValuedHashMap.hashCode()"], "external_dependencies": {"modules": ["ArrayListValuedHashMap", "HashSetValuedHashMap"], "class_members": []}, "category": "unit", "description": "Tests the creation and comparison of HashSetValuedHashMap instances."}, {"name": "testSetValuedMapAdd", "primary_tested": ["HashSetValuedHashMap.get(K)", "HashSetValuedHashMap.put(K,V)"], "external_dependencies": {"modules": ["HashSetValuedHashMap"], "class_members": []}, "category": "unit", "description": "Tests the addition of elements to a SetValuedMap and checks the size and presence of keys."}, {"name": "testSetValuedMapEqualsHashCodeContract", "primary_tested": ["HashSetValuedHashMap.put(K,V)", "HashSetValuedHashMap.hashCode()"], "external_dependencies": {"modules": ["HashSetValuedHashMap"], "class_members": []}, "category": "unit", "description": "Tests the equality and hashCode contract of SetValuedMap instances."}, {"name": "testSetValuedMapRemove", "primary_tested": ["HashSetValuedHashMap.get(K)", "HashSetValuedHashMap.remove(K,V)"], "external_dependencies": {"modules": ["HashSetValuedHashMap"], "class_members": []}, "category": "unit", "description": "Tests the removal of elements from a SetValuedMap and checks the size and presence of keys."}, {"name": "testSetValuedMapRemoveViaIterator", "primary_tested": ["HashSetValuedHashMap.get(K)", "HashSetValuedHashMap.remove(K,V)"], "external_dependencies": {"modules": ["HashSetValuedHashMap"], "class_members": []}, "category": "unit", "description": "Tests the removal of elements from a SetValuedMap via an iterator and checks the size and presence of keys."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/multiset/UnmodifiableMultiSetTest.java", "testclass_name": "UnmodifiableMultiSetTest", "dependencies": ["package org.apache.commons.collections4.multiset;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Arrays;", "import org.apache.commons.collections4.MultiSet;", "import org.apache.commons.collections4.Unmodifiable;", "import org.junit.jupiter.api.Test;"], "name": "UnmodifiableMultiSetTest", "description": "Tests for the UnmodifiableMultiSet class, focusing on its unmodifiable behavior and factory methods.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testAdd", "primary_tested": ["UnmodifiableMultiSet.add(E,int)"], "external_dependencies": {"modules": ["UnmodifiableMultiSet", "HashMultiSet", "Arrays"], "class_members": []}, "category": "unit", "description": "Tests that adding an element to an unmodifiable multiset throws an UnsupportedOperationException."}, {"name": "testDecorateFactory", "primary_tested": ["UnmodifiableMultiSet.unmodifiableMultiSet(MultiSet)"], "external_dependencies": {"modules": ["UnmodifiableMultiSet", "HashMultiSet", "Arrays"], "class_members": []}, "category": "unit", "description": "Tests the factory method for creating an unmodifiable multiset and ensures it throws a NullPointerException when given null."}, {"name": "testEntrySet", "primary_tested": ["UnmodifiableMultiSet.entrySet()"], "external_dependencies": {"modules": ["UnmodifiableMultiSet", "HashMultiSet", "Arrays"], "class_members": []}, "category": "unit", "description": "Tests that the entry set of an unmodifiable multiset has the same size as the original multiset."}, {"name": "testRemove", "primary_tested": ["UnmodifiableMultiSet.remove(Object,int)"], "external_dependencies": {"modules": ["UnmodifiableMultiSet", "HashMultiSet", "Arrays"], "class_members": []}, "category": "unit", "description": "Tests that removing an element from an unmodifiable multiset throws an UnsupportedOperationException."}, {"name": "testSetCount", "primary_tested": ["UnmodifiableMultiSet.setCount(E,int)"], "external_dependencies": {"modules": ["UnmodifiableMultiSet", "HashMultiSet", "Arrays"], "class_members": []}, "category": "unit", "description": "Tests that setting the count of an element in an unmodifiable multiset throws an UnsupportedOperationException."}, {"name": "testUnmodifiable", "primary_tested": ["UnmodifiableMultiSet.makeObject()", "UnmodifiableMultiSet.makeFullCollection()"], "external_dependencies": {"modules": ["UnmodifiableMultiSet", "HashMultiSet", "Arrays", "Unmodifiable"], "class_members": []}, "category": "unit", "description": "Tests that the objects created by the factory methods are instances of Unmodifiable."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/keyvalue/UnmodifiableMapEntryTest.java", "testclass_name": "UnmodifiableMapEntryTest", "dependencies": ["package org.apache.commons.collections4.keyvalue;", "import static org.junit.jupiter.api.Assertions.assertInstanceOf;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.Map;", "import org.apache.commons.collections4.KeyValue;", "import org.apache.commons.collections4.Unmodifiable;", "import org.junit.jupiter.api.Test;"], "name": "UnmodifiableMapEntryTest", "description": "Tests for the UnmodifiableMapEntry class, focusing on its unmodifiable behavior and constructor functionalities.", "class_members": {"methods": [{"name": "makeMapEntry", "signature": "Map.Entry<K, V> makeMapEntry()"}, {"name": "makeMapEntry", "signature": "Map.Entry<K, V> makeMapEntry(K key, V value)"}]}, "test_cases": [{"name": "testAccessorsAndMutators", "primary_tested": ["Map.Entry.getKey()", "Map.Entry.getValue()"], "associated_methods": ["UnmodifiableMapEntryTest.makeMapEntry(K,V)"], "external_dependencies": {"modules": ["Map", "UnmodifiableMapEntry"], "class_members": [{"name": "makeMapEntry", "type": "method"}]}, "category": "unit", "description": "Tests the accessor methods (getKey and getValue) of the Map.Entry interface."}, {"name": "testConstructors", "primary_tested": ["UnmodifiableMapEntry.UnmodifiableMapEntry(K,V)", "UnmodifiableMapEntry.UnmodifiableMapEntry(KeyValue<K,V>)", "UnmodifiableMapEntry.UnmodifiableMapEntry(Map.Entry<K,V>)"], "associated_methods": ["Map.Entry.getKey()", "Map.Entry.getValue()"], "external_dependencies": {"modules": ["Map", "UnmodifiableMapEntry", "KeyValue", "DefaultKeyValue"], "class_members": [{"name": "makeMapEntry", "type": "method"}]}, "category": "unit", "description": "Tests the constructors of the UnmodifiableMapEntry class."}, {"name": "testSelfReferenceHandling", "primary_tested": [], "external_dependencies": {}, "category": "unit", "description": "Tests the handling of self-references in the UnmodifiableMapEntry class."}, {"name": "testUnmodifiable", "primary_tested": ["Map.Entry.setValue(V)"], "external_dependencies": {"modules": ["Map", "UnmodifiableMapEntry"], "class_members": [{"name": "makeMapEntry", "type": "method"}]}, "category": "unit", "description": "Tests the unmodifiable behavior of the UnmodifiableMapEntry class by attempting to set a value and expecting an UnsupportedOperationException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/multimap/TransformedMultiValuedMapTest.java", "testclass_name": "TransformedMultiValuedMapTest", "dependencies": ["package org.apache.commons.collections4.multimap;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Collection;", "import org.apache.commons.collections4.MultiValuedMap;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.TransformerUtils;", "import org.apache.commons.collections4.collection.AbstractCollectionTest;", "import org.apache.commons.collections4.collection.TransformedCollectionTest;", "import org.junit.jupiter.api.Test;"], "name": "TransformedMultiValuedMapTest", "description": "Unit tests for TransformedMultiValuedMap functionality.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testFactory_Decorate", "primary_tested": ["TransformedMultiValuedMap.transformingMap(MultiValuedMap,Transformer,Transformer)"], "associated_methods": ["MultiValuedMap.put(K,V)", "MultiValuedMap.get(K)", "MultiValuedMap.size()"], "external_dependencies": {"modules": ["MultiValuedMap", "ArrayListValuedHashMap", "TransformerUtils", "TransformedCollectionTest"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the factory method for decorating a MultiValuedMap with transformers."}, {"name": "testFactory_decorateTransform", "primary_tested": ["TransformedMultiValuedMap.transformedMap(MultiValuedMap,Transformer,Transformer)"], "associated_methods": ["MultiValuedMap.put(K,V)", "MultiValuedMap.get(K)", "MultiValuedMap.size()"], "external_dependencies": {"modules": ["MultiValuedMap", "ArrayListValuedHashMap", "TransformerUtils", "TransformedCollectionTest"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the factory method for transforming a MultiValuedMap with transformers."}, {"name": "testKeyTransformedMap", "primary_tested": ["TransformedMultiValuedMap.transformingMap(MultiValuedMap,Transformer,Transformer)"], "associated_methods": ["MultiValuedMap.put(K,V)", "MultiValuedMap.size()", "MultiValuedMap.containsKey(Object)", "MultiValuedMap.containsValue(Object)", "MultiValuedMap.get(K)", "MultiValuedMap.remove(Object)"], "external_dependencies": {"modules": ["MultiValuedMap", "ArrayListValuedHashMap", "TransformerUtils", "TransformedCollectionTest"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformation of keys in a MultiValuedMap."}, {"name": "testValueTransformedMap", "primary_tested": ["TransformedMultiValuedMap.transformingMap(MultiValuedMap,Transformer,Transformer)"], "associated_methods": ["MultiValuedMap.put(K,V)", "MultiValuedMap.size()", "MultiValuedMap.containsValue(Object)", "MultiValuedMap.containsKey(Object)", "MultiValuedMap.get(K)", "MultiValuedMap.remove(Object)"], "external_dependencies": {"modules": ["MultiValuedMap", "ArrayListValuedHashMap", "TransformerUtils", "TransformedCollectionTest"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformation of values in a MultiValuedMap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java", "testclass_name": "MultiValueMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.io.ByteArrayInputStream;", "import java.io.ByteArrayOutputStream;", "import java.io.IOException;", "import java.io.ObjectInputStream;", "import java.io.ObjectOutputStream;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.HashMap;", "import java.util.HashSet;", "import java.util.Iterator;", "import java.util.LinkedList;", "import java.util.Map;", "import org.apache.commons.collections4.AbstractObjectTest;", "import org.apache.commons.collections4.IteratorUtils;", "import org.apache.commons.collections4.MultiMap;", "import org.junit.jupiter.api.Test;"], "name": "MultiValueMapTest", "description": "Unit tests for the MultiValueMap class, focusing on various operations and functionalities.", "class_members": {"variables": [{"name": "DEFAULT_VALUE", "type": "static final int"}], "methods": [{"name": "createTestMap", "signature": "<C extends Collection<V>> MultiValueMap<K, V> createTestMap(Class<C> collectionClass)"}, {"name": "deserialize", "signature": "Object deserialize(byte[] data) throws IOException, ClassNotFoundException"}, {"name": "makeEmptyMap", "signature": "Map makeEmptyMap()"}, {"name": "serialize", "signature": "byte[] serialize(Object object) throws IOException"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testContainsValue", "primary_tested": ["MultiValueMap.containsValue(Object)"], "external_dependencies": {"modules": ["MultiValueMap", "HashSet"], "class_members": [{"name": "createTestMap", "type": "method"}]}, "category": "unit", "description": "Tests the containsValue method of MultiValueMap to check if it correctly identifies the presence of values."}, {"name": "testContainsValue_Key", "primary_tested": ["MultiValueMap.containsValue(Object, Object)"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": []}, "category": "unit", "description": "Tests the containsValue method of MultiValueMap with key-value pairs to check if it correctly identifies the presence of specific values for a given key."}, {"name": "testEmptyMapCompatibility", "primary_tested": ["MultiValueMap.makeEmptyMap()"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "makeEmptyMap", "type": "method"}]}, "category": "unit", "description": "Tests the creation of an empty MultiValueMap and checks its compatibility."}, {"name": "testFullMapCompatibility", "primary_tested": ["MultiValueMap.makeObject()"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "description": "Tests the creation of a full MultiValueMap and checks its compatibility."}, {"name": "testGetCollection", "primary_tested": ["MultiValueMap.get(Object)"], "associated_methods": ["MultiValueMap.getCollection(Object)"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": []}, "category": "unit", "description": "Tests the get method of MultiValueMap to ensure it returns the correct collection for a given key."}, {"name": "testIterator", "primary_tested": ["MultiValueMap.iterator()"], "external_dependencies": {"modules": ["MultiValueMap", "ArrayList"], "class_members": [{"name": "createTestMap", "type": "method"}]}, "category": "unit", "description": "Tests the iterator method of MultiValueMap to ensure it correctly iterates over the map entries."}, {"name": "testIterator_Key", "primary_tested": ["MultiValueMap.iterator(Object)"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": []}, "category": "unit", "description": "Tests the iterator method of MultiValueMap with a specific key to ensure it correctly iterates over the values for that key."}, {"name": "testKeyContainsValue", "primary_tested": ["MultiValueMap.containsValue(Object, Object)"], "external_dependencies": {"modules": ["MultiValueMap", "HashSet"], "class_members": [{"name": "createTestMap", "type": "method"}]}, "category": "unit", "description": "Tests the containsValue method of MultiValueMap with key-value pairs to check if it correctly identifies the presence of specific values for a given key."}, {"name": "testKeyedIterator", "primary_tested": ["MultiValueMap.iterator(Object)"], "external_dependencies": {"modules": ["MultiValueMap", "ArrayList", "Arrays", "IteratorUtils"], "class_members": [{"name": "createTestMap", "type": "method"}]}, "category": "unit", "description": "Tests the iterator method of MultiValueMap with a specific key to ensure it correctly iterates over the values for that key and returns the expected results."}, {"name": "testMapEquals", "primary_tested": ["MultiValueMap.equals(Object)"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": []}, "category": "unit", "description": "Tests the equals method of MultiValueMap to ensure it correctly compares two MultiValueMap instances."}, {"name": "testMultipleValues", "primary_tested": ["MultiValueMap.get(Object)"], "external_dependencies": {"modules": ["MultiValueMap", "HashSet"], "class_members": [{"name": "createTestMap", "type": "method"}]}, "category": "unit", "description": "Tests the get method of MultiValueMap to ensure it returns the correct collection of multiple values for a given key."}, {"name": "testNoMappingReturnsNull", "primary_tested": ["MultiValueMap.get(Object)"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "createTestMap", "type": "method"}]}, "category": "unit", "description": "Tests the get method of MultiValueMap to ensure it returns null when no mapping exists for a given key."}, {"name": "testPutAll_KeyCollection", "primary_tested": ["MultiValueMap.putAll(Object, Collection)"], "external_dependencies": {"modules": ["MultiValueMap", "Arrays"], "class_members": []}, "category": "unit", "description": "Tests the putAll method of MultiValueMap to ensure it correctly adds multiple values for a given key."}, {"name": "testPutAll_Map1", "primary_tested": ["MultiValueMap.putAll(Map)"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": []}, "category": "unit", "description": "Tests the putAll method of MultiValueMap to ensure it correctly merges another MultiValueMap into the current one."}, {"name": "testPutAll_Map2", "primary_tested": ["MultiValueMap.putAll(Map)"], "external_dependencies": {"modules": ["MultiValueMap", "HashMap"], "class_members": []}, "category": "unit", "description": "Tests the putAll method of MultiValueMap to ensure it correctly merges a standard Map into the current MultiValueMap."}, {"name": "testPutWithList", "primary_tested": ["MultiValueMap.put(Object, Object)"], "external_dependencies": {"modules": ["MultiValueMap", "HashMap", "ArrayList"], "class_members": []}, "category": "unit", "description": "Tests the put method of MultiValueMap with a list collection to ensure it correctly adds values for a given key."}, {"name": "testPutWithSet", "primary_tested": ["MultiValueMap.put(Object, Object)"], "external_dependencies": {"modules": ["MultiValueMap", "HashMap", "HashSet"], "class_members": []}, "category": "unit", "description": "Tests the put method of MultiValueMap with a set collection to ensure it correctly adds values for a given key."}, {"name": "testRemove_KeyItem", "primary_tested": ["MultiValueMap.removeMapping(Object, Object)"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": []}, "category": "unit", "description": "Tests the removeMapping method of MultiValueMap to ensure it correctly removes a specific value for a given key."}, {"name": "testRemoveAllViaEntryIterator", "primary_tested": ["MultiValueMap.iterator()"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "createTestMap", "type": "method"}]}, "category": "unit", "description": "Tests the iterator method of MultiValueMap to ensure it correctly removes all entries when the remove method is called on each iterator."}, {"name": "testRemoveAllViaIterator", "primary_tested": ["MultiValueMap.values()"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "createTestMap", "type": "method"}]}, "category": "unit", "description": "Tests the values method of MultiValueMap to ensure it correctly removes all values when the remove method is called on each iterator."}, {"name": "testRemoveAllViaKeyedIterator", "primary_tested": ["MultiValueMap.iterator(Object)"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "createTestMap", "type": "method"}]}, "category": "unit", "description": "Tests the iterator method of MultiValueMap with a specific key to ensure it correctly removes all values for that key when the remove method is called on each iterator."}, {"name": "testSize", "primary_tested": ["MultiValueMap.size()"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": []}, "category": "unit", "description": "Tests the size method of MultiValueMap to ensure it correctly returns the number of keys in the map."}, {"name": "testSize_Key", "primary_tested": ["MultiValueMap.size(Object)"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": []}, "category": "unit", "description": "Tests the size method of MultiValueMap with a specific key to ensure it correctly returns the number of values for that key."}, {"name": "testTotalSize", "primary_tested": ["MultiValueMap.totalSize()"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": []}, "category": "unit", "description": "Tests the totalSize method of MultiValueMap to ensure it correctly returns the total number of values in the map."}, {"name": "testTotalSizeA", "primary_tested": ["MultiValueMap.totalSize()"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "createTestMap", "type": "method"}]}, "category": "unit", "description": "Tests the totalSize method of MultiValueMap to ensure it correctly returns the total number of values in a specific test map."}, {"name": "testUnsafeDeSerialization", "primary_tested": ["MultiValueMap.serialize(Object)", "MultiValueMap.deserialize(byte[])"], "external_dependencies": {"modules": ["MultiValueMap", "HashMap", "ArrayList"], "class_members": [{"name": "serialize", "type": "method"}, {"name": "deserialize", "type": "method"}]}, "category": "unit", "description": "Tests the serialization and deserialization methods of MultiValueMap to ensure they correctly handle unsafe deserialization."}, {"name": "testValueCollectionType", "primary_tested": ["MultiValueMap.get(Object)"], "external_dependencies": {"modules": ["MultiValueMap", "LinkedList"], "class_members": [{"name": "createTestMap", "type": "method"}]}, "category": "unit", "description": "Tests the get method of MultiValueMap to ensure it returns the correct collection type for a given key."}, {"name": "testValues", "primary_tested": ["MultiValueMap.values()"], "external_dependencies": {"modules": ["MultiValueMap", "HashSet"], "class_members": [{"name": "createTestMap", "type": "method"}]}, "category": "unit", "description": "Tests the values method of MultiValueMap to ensure it correctly returns all values in the map."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/DefaultBloomFilterTest.java", "testclass_name": "DefaultBloomFilterTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.TreeSet;", "import java.util.function.IntPredicate;", "import java.util.function.LongPredicate;", "import org.junit.jupiter.api.Test;"], "name": "DefaultBloomFilterTest", "description": "Unit tests for the DefaultBloomFilter class, focusing on its merge, cardinality, and intersection functionalities.", "class_members": {"variables": [], "methods": [], "nested_classes": [{"name": "AbstractDefaultBloomFilter", "description": "Abstract class implementing BloomFilter interface with common functionalities."}, {"name": "BrokenCardinality", "description": "Subclass of NonSparseDefaultBloomFilter with a broken cardinality method."}, {"name": "NonSparseDefaultBloomFilter", "description": "Default implementation of a non-sparse Bloom filter."}, {"name": "SparseDefaultBloomFilter", "description": "Default implementation of a sparse Bloom filter."}]}, "fixtures": [], "test_cases": [{"name": "testDefaultBloomFilterSimpleSpecificMerge", "primary_tested": ["AbstractDefaultBloomFilter.merge(Hasher)", "AbstractDefaultBloomFilter.cardinality()"], "external_dependencies": {"modules": ["SparseDefaultBloomFilter", "Shape", "Hasher", "IncrementingHasher"], "class_members": []}, "category": "unit", "description": "Tests the merge functionality of a SparseDefaultBloomFilter with a specific hasher and verifies the cardinality."}, {"name": "testDefaultBloomFilterSparseSpecificMerge", "primary_tested": ["AbstractDefaultBloomFilter.merge(IndexExtractor)", "AbstractDefaultBloomFilter.cardinality()"], "associated_methods": ["AbstractDefaultBloomFilter.copy()"], "external_dependencies": {"modules": ["SparseDefaultBloomFilter", "Shape", "IncrementingHasher"], "class_members": []}, "category": "unit", "description": "Tests the merge functionality of a SparseDefaultBloomFilter with another filter and verifies the cardinality."}, {"name": "testEstimateLargeN", "primary_tested": ["SimpleBloomFilter.merge(BitMapExtractor)", "SimpleBloomFilter.estimateN()"], "external_dependencies": {"modules": ["Shape", "SimpleBloomFilter", "BitMapExtractor", "BitMaps"], "class_members": []}, "category": "unit", "description": "Tests the estimation of N for a very large Bloom filter with Integer.MAX_VALUE-1 bits set."}, {"name": "testEstimateNWithBrokenCardinality", "primary_tested": ["BrokenCardinality.estimateN()"], "external_dependencies": {"modules": ["TestingHashers", "BrokenCardinality", "Shape"], "class_members": []}, "category": "unit", "description": "Tests the estimation of N with a Bloom filter having a broken cardinality method, expecting an IllegalArgumentException."}, {"name": "testHasherBasedMergeWithDifferingSparseness", "primary_tested": ["NonSparseDefaultBloomFilter.merge(Hasher)", "SparseDefaultBloomFilter.merge(Hasher)", "BitMapExtractor.processBitMapPairs(BloomFilter, LongBinaryOperator)"], "external_dependencies": {"modules": ["NonSparseDefaultBloomFilter", "SparseDefaultBloomFilter", "Hasher", "IncrementingHasher", "BitMapExtractor", "Shape"], "class_members": []}, "category": "unit", "description": "Tests the merge functionality with hashers for both non-sparse and sparse Bloom filters and verifies bit map pairs."}, {"name": "testIntersectionLimit", "primary_tested": ["SimpleBloomFilter.merge(BitMapExtractor)", "SimpleBloomFilter.estimateIntersection(BloomFilter)"], "external_dependencies": {"modules": ["Shape", "SimpleBloomFilter", "BitMapExtractor", "BitMaps"], "class_members": []}, "category": "unit", "description": "Tests the intersection estimation for a very large Bloom filter with Integer.MAX_VALUE-1 bits set."}, {"name": "testSparseNonSparseMerging", "primary_tested": ["SparseDefaultBloomFilter.merge(Hasher)", "NonSparseDefaultBloomFilter.merge(Hasher)", "AbstractDefaultBloomFilter.copy()", "AbstractDefaultBloomFilter.cardinality()"], "external_dependencies": {"modules": ["SparseDefaultBloomFilter", "NonSparseDefaultBloomFilter", "TestingHashers", "Shape"], "class_members": []}, "category": "unit", "description": "Tests the merge functionality between sparse and non-sparse Bloom filters and verifies the cardinality."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/DefaultAbstractLinkedListForJava21Test.java", "testclass_name": "DefaultAbstractLinkedListForJava21Test", "dependencies": ["package org.apache.commons.collections4.list;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.io.IOException;", "import java.io.ObjectInputStream;", "import java.io.ObjectOutputStream;", "import java.util.Arrays;", "import java.util.List;", "import org.junit.jupiter.api.Test;"], "name": "DefaultAbstractLinkedListForJava21Test", "description": "Unit tests for the DefaultAbstractLinkedListForJava21 class, focusing on various operations like adding, removing, and sublist manipulations.", "class_members": {"variables": [], "methods": [{"name": "checkNodes", "signature": "void checkNodes()"}], "nested_classes": [{"name": "DefaultAbstractLinkedListForJava21", "description": "Internal class extending AbstractLinkedListForJava21 with serialization methods."}]}, "fixtures": [], "test_cases": [{"name": "testAddNodeAfter", "primary_tested": ["AbstractLinkedListForJava21.addNodeAfter(Node,E)"], "associated_methods": ["AbstractLinkedListForJava21.addFirst(E)", "AbstractLinkedListForJava21.getFirst()", "AbstractLinkedListForJava21.getLast()", "AbstractLinkedListForJava21.removeFirst()", "AbstractLinkedListForJava21.getNode(int,boolean)"], "external_dependencies": {"modules": ["AbstractLinkedListForJava21", "UnsupportedOperationException"], "class_members": [{"name": "checkNodes", "type": "method"}]}, "category": "unit", "description": "Tests the functionality of adding a node after a specified node in the list."}, {"name": "testGetNode", "primary_tested": ["AbstractLinkedListForJava21.getNode(int,boolean)"], "associated_methods": ["AbstractLinkedListForJava21.addAll(Collection)", "AbstractLinkedListForJava21.addFirst(E)", "AbstractLinkedListForJava21.removeNode(Node)"], "external_dependencies": {"modules": ["AbstractLinkedListForJava21", "IndexOutOfBoundsException", "Arrays"], "class_members": [{"name": "checkNodes", "type": "method"}]}, "category": "unit", "description": "Tests the functionality of retrieving nodes from the list and handling index out of bounds exceptions."}, {"name": "testRemoveFirst", "primary_tested": ["AbstractLinkedListForJava21.removeFirst()"], "associated_methods": ["AbstractLinkedListForJava21.addAll(Collection)", "AbstractLinkedListForJava21.addLast(E)"], "external_dependencies": {"modules": ["AbstractLinkedListForJava21", "UnsupportedOperationException", "Arrays"], "class_members": [{"name": "checkNodes", "type": "method"}]}, "category": "unit", "description": "Tests the functionality of removing the first element from the list."}, {"name": "testRemoveLast", "primary_tested": ["AbstractLinkedListForJava21.removeLast()"], "associated_methods": ["AbstractLinkedListForJava21.addAll(Collection)", "AbstractLinkedListForJava21.addFirst(E)"], "external_dependencies": {"modules": ["AbstractLinkedListForJava21", "UnsupportedOperationException", "Arrays"], "class_members": [{"name": "checkNodes", "type": "method"}]}, "category": "unit", "description": "Tests the functionality of removing the last element from the list."}, {"name": "testRemoveNode", "primary_tested": ["AbstractLinkedListForJava21.removeNode(Node)"], "associated_methods": ["AbstractLinkedListForJava21.addAll(Collection)", "AbstractLinkedListForJava21.addFirst(E)", "AbstractLinkedListForJava21.getFirst()", "AbstractLinkedListForJava21.getLast()", "AbstractLinkedListForJava21.getNode(int,boolean)"], "external_dependencies": {"modules": ["AbstractLinkedListForJava21", "Arrays"], "class_members": [{"name": "checkNodes", "type": "method"}]}, "category": "unit", "description": "Tests the functionality of removing a specific node from the list."}, {"name": "testSubList", "primary_tested": ["List.subList(int,int)"], "associated_methods": [], "external_dependencies": {"modules": ["List"], "class_members": []}, "category": "unit", "description": "Tests the functionality of creating and using sublists from the main list."}, {"name": "testSubListAddBegin", "primary_tested": ["List.subList(int,int).add(E)"], "associated_methods": [], "external_dependencies": {"modules": ["List"], "class_members": []}, "category": "unit", "description": "Tests the functionality of adding elements to the beginning of a sublist."}, {"name": "testSubListAddEnd", "primary_tested": ["List.subList(int,int).add(E)"], "associated_methods": [], "external_dependencies": {"modules": ["List"], "class_members": []}, "category": "unit", "description": "Tests the functionality of adding elements to the end of a sublist."}, {"name": "testSubListAddMiddle", "primary_tested": ["List.subList(int,int).add(E)"], "associated_methods": [], "external_dependencies": {"modules": ["List"], "class_members": []}, "category": "unit", "description": "Tests the functionality of adding elements to the middle of a sublist."}, {"name": "testSubListRemove", "primary_tested": ["List.subList(int,int).remove(Object)", "List.subList(int,int).remove(int)", "List.subList(int,int).clear()"], "associated_methods": [], "external_dependencies": {"modules": ["List"], "class_members": []}, "category": "unit", "description": "Tests the functionality of removing elements from a sublist."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java", "testclass_name": "Flat3MapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertNotSame;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.io.ByteArrayInputStream;", "import java.io.ByteArrayOutputStream;", "import java.io.ObjectInputStream;", "import java.io.ObjectOutputStream;", "import java.util.HashMap;", "import java.util.Iterator;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.apache.commons.collections4.BulkTest;", "import org.apache.commons.collections4.IterableMap;", "import org.apache.commons.collections4.MapIterator;", "import org.apache.commons.collections4.iterators.AbstractMapIteratorTest;", "import org.junit.jupiter.api.Test;"]}, {"file_path": "src/test/java/org/apache/commons/collections4/keyvalue/DefaultKeyValueTest.java", "testclass_name": "DefaultKeyValueTest", "dependencies": ["package org.apache.commons.collections4.keyvalue;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.Test;"], "name": "DefaultKeyValueTest", "description": "Unit tests for the DefaultKeyValue class, focusing on its constructors, accessors, mutators, and other functionalities.", "class_members": {"variables": [{"name": "key", "type": "String"}, {"name": "value", "type": "String"}], "methods": [{"name": "makeDefaultKeyValue", "signature": "DefaultKeyValue<K, V> makeDefaultKeyValue()"}, {"name": "makeDefaultKeyValue", "signature": "DefaultKeyValue<K, V> makeDefaultKeyValue(K key, V value)"}]}, "test_cases": [{"name": "testAccessorsAndMutators", "primary_tested": ["DefaultKeyValue.setKey(K)", "DefaultKeyValue.getKey()", "DefaultKeyValue.setValue(V)", "DefaultKeyValue.getValue()"], "external_dependencies": {"modules": ["DefaultKeyValue"], "class_members": [{"name": "key", "type": "variable"}, {"name": "value", "type": "variable"}, {"name": "makeDefaultKeyValue", "type": "method"}]}, "category": "unit", "description": "Tests the accessors and mutators of the DefaultKeyValue class."}, {"name": "testConstructors", "primary_tested": ["DefaultKeyValue.DefaultKeyValue()", "DefaultKeyValue.DefaultKeyValue(K, V)", "DefaultKeyValue.DefaultKeyValue(DefaultKeyValue<K, V>)", "DefaultKeyValue.DefaultKeyValue(Map.Entry<K, V>)"], "external_dependencies": {"modules": ["DefaultKeyValue", "Map", "HashMap"], "class_members": [{"name": "key", "type": "variable"}, {"name": "value", "type": "variable"}]}, "category": "unit", "description": "Tests the constructors of the DefaultKeyValue class."}, {"name": "testEqualsAndHashCode", "primary_tested": ["DefaultKeyValue.equals(Object)", "DefaultKeyValue.hashCode()"], "external_dependencies": {"modules": ["DefaultKeyValue"], "class_members": [{"name": "key", "type": "variable"}, {"name": "value", "type": "variable"}, {"name": "makeDefaultKeyValue", "type": "method"}]}, "category": "unit", "description": "Tests the equals and hashCode methods of the DefaultKeyValue class."}, {"name": "testSelfReferenceHandling", "primary_tested": ["DefaultKeyValue.setKey(K)"], "external_dependencies": {"modules": ["DefaultKeyValue"], "class_members": [{"name": "makeDefaultKeyValue", "type": "method"}]}, "category": "unit", "description": "Tests the handling of self-reference in the setKey method of the DefaultKeyValue class."}, {"name": "testToMapEntry", "primary_tested": ["DefaultKeyValue.toMapEntry()"], "external_dependencies": {"modules": ["DefaultKeyValue", "Map", "HashMap"], "class_members": [{"name": "key", "type": "variable"}, {"name": "value", "type": "variable"}, {"name": "makeDefaultKeyValue", "type": "method"}]}, "category": "unit", "description": "Tests the toMapEntry method of the DefaultKeyValue class."}, {"name": "testToString", "primary_tested": ["DefaultKeyValue.toString()"], "external_dependencies": {"modules": ["DefaultKeyValue"], "class_members": [{"name": "key", "type": "variable"}, {"name": "value", "type": "variable"}, {"name": "makeDefaultKeyValue", "type": "method"}]}, "category": "unit", "description": "Tests the toString method of the DefaultKeyValue class."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/FilterListIteratorTest.java", "testclass_name": "FilterListIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Collection;", "import java.util.List;", "import java.util.ListIterator;", "import java.util.Random;", "import org.apache.commons.collections4.Predicate;", "import org.apache.commons.collections4.PredicateUtils;", "import org.apache.commons.collections4.list.GrowthList;", "import org.junit.jupiter.api.AfterEach;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "FilterListIteratorTest", "description": "Unit tests for the FilterListIterator class, which filters elements of a list based on a predicate.", "class_members": {"variables": [{"name": "list", "type": "ArrayList<Integer>"}, {"name": "odds", "type": "ArrayList<Integer>"}, {"name": "evens", "type": "ArrayList<Integer>"}, {"name": "threes", "type": "ArrayList<Integer>"}, {"name": "fours", "type": "ArrayList<Integer>"}, {"name": "sixes", "type": "ArrayList<Integer>"}, {"name": "truePred", "type": "Predicate<Integer>"}, {"name": "falsePred", "type": "Predicate<Integer>"}, {"name": "evenPred", "type": "Predicate<Integer>"}, {"name": "oddPred", "type": "Predicate<Integer>"}, {"name": "threePred", "type": "Predicate<Integer>"}, {"name": "fourPred", "type": "Predicate<Integer>"}, {"name": "random", "type": "Random"}], "methods": [{"name": "nextNextPrevious", "signature": "void nextNextPrevious(ListIterator<?>, ListIterator<?>)"}, {"name": "previousPreviousNext", "signature": "void previousPreviousNext(ListIterator<?>, ListIterator<?>)"}, {"name": "walkBackward", "signature": "void walkBackward(ListIterator<?>, ListIterator<?>)"}, {"name": "walkForward", "signature": "void walkForward(ListIterator<?>, ListIterator<?>)"}, {"name": "walkLists", "signature": "void walkLists(List<E>, ListIterator<E>)"}], "nested_classes": []}, "fixtures": ["setUp", "tearDown"], "test_cases": [{"name": "testCollections360", "primary_tested": ["FilterListIterator.hasNext()", "FilterListIterator.hasPrevious()"], "external_dependencies": {"modules": ["GrowthList", "PredicateUtils", "FilterListIterator"], "class_members": [{"name": "truePred", "type": "variable"}], "project_specific_resources": ["PredicateUtils.anyPredicate(Collection<Predicate<Object>>)"]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext and hasPrevious methods of FilterListIterator for an empty list."}, {"name": "testEvens", "primary_tested": ["FilterListIterator.next()", "FilterListIterator.previous()"], "external_dependencies": {"modules": ["FilterListIterator"], "class_members": [{"name": "list", "type": "variable"}, {"name": "evens", "type": "variable"}, {"name": "evenPred", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the FilterListIterator with an even predicate."}, {"name": "testFailingHasNextBug", "primary_tested": ["FilterListIterator.hasNext()", "FilterListIterator.hasPrevious()", "FilterListIterator.next()", "FilterListIterator.previous()"], "external_dependencies": {"modules": ["FilterListIterator"], "class_members": [{"name": "list", "type": "variable"}, {"name": "fours", "type": "variable"}, {"name": "fourPred", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext and hasPrevious methods of FilterListIterator for a list filtered by a four predicate."}, {"name": "testFalsePredicate", "primary_tested": ["FilterListIterator.next()", "FilterListIterator.previous()"], "external_dependencies": {"modules": ["FilterListIterator"], "class_members": [{"name": "list", "type": "variable"}, {"name": "falsePred", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the FilterListIterator with a false predicate."}, {"name": "testFours", "primary_tested": ["FilterListIterator.next()", "FilterListIterator.previous()"], "external_dependencies": {"modules": ["FilterListIterator"], "class_members": [{"name": "list", "type": "variable"}, {"name": "fours", "type": "variable"}, {"name": "fourPred", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the FilterListIterator with a four predicate."}, {"name": "testManual", "primary_tested": ["FilterListIterator.next()", "FilterListIterator.previous()"], "external_dependencies": {"modules": ["FilterListIterator"], "class_members": [{"name": "list", "type": "variable"}, {"name": "threePred", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the FilterListIterator manually with a three predicate."}, {"name": "testNestedSixes", "primary_tested": ["FilterListIterator.next()", "FilterListIterator.previous()"], "external_dependencies": {"modules": ["FilterListIterator"], "class_members": [{"name": "list", "type": "variable"}, {"name": "sixes", "type": "variable"}, {"name": "threePred", "type": "variable"}, {"name": "evenPred", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests nested FilterListIterators with a three and even predicate."}, {"name": "testNestedSixes2", "primary_tested": ["FilterListIterator.next()", "FilterListIterator.previous()"], "external_dependencies": {"modules": ["FilterListIterator"], "class_members": [{"name": "list", "type": "variable"}, {"name": "sixes", "type": "variable"}, {"name": "evenPred", "type": "variable"}, {"name": "threePred", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests nested FilterListIterators with an even and three predicate."}, {"name": "testNestedSixes3", "primary_tested": ["FilterListIterator.next()", "FilterListIterator.previous()"], "external_dependencies": {"modules": ["FilterListIterator"], "class_members": [{"name": "list", "type": "variable"}, {"name": "sixes", "type": "variable"}, {"name": "threePred", "type": "variable"}, {"name": "evenPred", "type": "variable"}, {"name": "truePred", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests nested FilterListIterators with a three, even, and true predicate."}, {"name": "testNextChangesPrevious", "primary_tested": ["FilterListIterator.next()", "FilterListIterator.previous()"], "associated_methods": ["FilterListIteratorTest.nextNextPrevious(ListIterator<?>, ListIterator<?>)"], "external_dependencies": {"modules": ["FilterListIterator"], "class_members": [{"name": "list", "type": "variable"}, {"name": "threes", "type": "variable"}, {"name": "threePred", "type": "variable"}, {"name": "truePred", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if calls to next() change the value returned by previous() in FilterListIterator."}, {"name": "testOdds", "primary_tested": ["FilterListIterator.next()", "FilterListIterator.previous()"], "external_dependencies": {"modules": ["FilterListIterator"], "class_members": [{"name": "list", "type": "variable"}, {"name": "odds", "type": "variable"}, {"name": "oddPred", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the FilterListIterator with an odd predicate."}, {"name": "testPreviousChangesNext", "primary_tested": ["FilterListIterator.next()", "FilterListIterator.previous()"], "associated_methods": ["FilterListIteratorTest.previousPreviousNext(ListIterator<?>, ListIterator<?>)"], "external_dependencies": {"modules": ["FilterListIterator"], "class_members": [{"name": "list", "type": "variable"}, {"name": "threes", "type": "variable"}, {"name": "threePred", "type": "variable"}, {"name": "truePred", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if calls to previous() change the value returned by next() in FilterListIterator."}, {"name": "testThrees", "primary_tested": ["FilterListIterator.next()", "FilterListIterator.previous()"], "external_dependencies": {"modules": ["FilterListIterator"], "class_members": [{"name": "list", "type": "variable"}, {"name": "threes", "type": "variable"}, {"name": "threePred", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the FilterListIterator with a three predicate."}, {"name": "testTruePredicate", "primary_tested": ["FilterListIterator.next()", "FilterListIterator.previous()"], "external_dependencies": {"modules": ["FilterListIterator"], "class_members": [{"name": "list", "type": "variable"}, {"name": "truePred", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the FilterListIterator with a true predicate."}, {"name": "testWalkLists", "primary_tested": ["FilterListIterator.next()", "FilterListIterator.previous()"], "external_dependencies": {"modules": ["FilterListIterator"], "class_members": [{"name": "list", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the walkLists method to ensure it works correctly."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/multimap/ArrayListValuedHashMapTest.java", "testclass_name": "ArrayListValuedHashMapTest", "dependencies": ["package org.apache.commons.collections4.multimap;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotSame;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.HashMap;", "import java.util.List;", "import java.util.ListIterator;", "import java.util.Map;", "import org.apache.commons.collections4.ListValuedMap;", "import org.apache.commons.collections4.MultiValuedMap;", "import org.apache.commons.collections4.collection.AbstractCollectionTest;", "import org.junit.jupiter.api.Test;"], "name": "ArrayListValuedHashMapTest", "description": "Unit tests for the ArrayListValuedHashMap class, focusing on its functionality and behavior.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testArrayListValuedHashMap", "primary_tested": ["ArrayListValuedHashMap.get(K)"], "associated_methods": [], "external_dependencies": {"modules": ["ListValuedMap", "HashMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the creation and basic functionality of ArrayListValuedHashMap."}, {"name": "testEqualsHashCodeContract", "primary_tested": ["MultiValuedMap.equals(Object)", "MultiValuedMap.hashCode()"], "associated_methods": [], "external_dependencies": {"modules": ["MultiValuedMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the equals and hashCode contract for MultiValuedMap."}, {"name": "testListValuedMapAdd", "primary_tested": ["ListValuedMap.get(K)", "List.add(V)"], "associated_methods": [], "external_dependencies": {"modules": ["ListValuedMap", "List"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the addition of elements to a ListValuedMap."}, {"name": "testListValuedMapAddViaListIterator", "primary_tested": ["ListValuedMap.get(K)", "ListIterator.add(V)"], "associated_methods": [], "external_dependencies": {"modules": ["ListValuedMap", "ListIterator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the addition of elements to a ListValuedMap via ListIterator."}, {"name": "testListValuedMapEqualsHashCodeContract", "primary_tested": ["ListValuedMap.equals(Object)", "ListValuedMap.hashCode()"], "associated_methods": [], "external_dependencies": {"modules": ["ListValuedMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the equals and hashCode contract for ListValuedMap."}, {"name": "testListValuedMapRemove", "primary_tested": ["ListValuedMap.get(K)", "List.remove(int)"], "associated_methods": [], "external_dependencies": {"modules": ["ListValuedMap", "List"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the removal of elements from a ListValuedMap."}, {"name": "testListValuedMapRemoveViaListIterator", "primary_tested": ["ListValuedMap.get(K)", "ListIterator.remove()"], "associated_methods": [], "external_dependencies": {"modules": ["ListValuedMap", "ListIterator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the removal of elements from a ListValuedMap via ListIterator."}, {"name": "testTrimToSize", "primary_tested": ["ArrayListValuedHashMap.trimToSize()"], "associated_methods": [], "external_dependencies": {"modules": ["ArrayListValuedHashMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the trimToSize method of ArrayListValuedHashMap."}, {"name": "testValuesListIteratorMethods", "primary_tested": ["ListValuedMap.get(K)", "ListIterator.hasNext()", "ListIterator.next()", "ListIterator.hasPrevious()", "ListIterator.previous()", "ListIterator.nextIndex()", "ListIterator.previousIndex()", "ListIterator.set(V)"], "associated_methods": [], "external_dependencies": {"modules": ["ListValuedMap", "ListIterator", "Arrays"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the methods of ListIterator on values in a ListValuedMap."}, {"name": "testWrappedListAdd", "primary_tested": ["ListValuedMap.get(K)", "List.add(int,V)", "List.set(int,V)"], "associated_methods": [], "external_dependencies": {"modules": ["ListValuedMap", "List"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the addition of elements to a wrapped list in a ListValuedMap."}, {"name": "testWrappedListAddAll", "primary_tested": ["ListValuedMap.get(K)", "List.addAll(int,Collection)", "List.get(int)", "List.indexOf(Object)", "List.lastIndexOf(Object)", "List.subList(int,int)"], "associated_methods": [], "external_dependencies": {"modules": ["ListValuedMap", "List", "Arrays"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the addition of multiple elements to a wrapped list in a ListValuedMap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/ShapeTest.java", "testclass_name": "ShapeTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNotEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.Arrays;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.CsvSource;"], "name": "ShapeTest", "description": "Unit tests for the Shape class, which is part of the Bloom filter implementation in Apache Commons Collections.", "class_members": {"variables": [{"name": "shape", "type": "Shape"}]}, "fixtures": [], "test_cases": [{"name": "testBadNumberOfBits", "primary_tested": ["Shape.fromKM(int,int)", "Shape.fromNM(int,int)", "Shape.fromNMK(int,int,int)", "Shape.fromPMK(double,int,int)"], "external_dependencies": {"modules": ["IllegalArgumentException"], "class_members": []}, "category": "unit", "description": "Tests that if the number of bits is less than 1 an exception is thrown."}, {"name": "testBadNumberOfHashFunctions", "primary_tested": ["Shape.fromKM(int,int)", "Shape.fromNMK(int,int,int)", "Shape.fromPMK(double,int,int)", "Shape.fromNM(int,int)"], "external_dependencies": {"modules": ["IllegalArgumentException"], "class_members": []}, "category": "unit", "description": "Tests that if the number of hash functions is less than 1 an exception is thrown."}, {"name": "testBadNumberOfItems", "primary_tested": ["Shape.fromNM(int,int)", "Shape.fromNMK(int,int,int)", "Shape.fromNP(int,double)"], "external_dependencies": {"modules": ["IllegalArgumentException"], "class_members": []}, "category": "unit", "description": "Tests that if the number of items less than 1 an IllegalArgumentException is thrown."}, {"name": "testBadProbability", "primary_tested": ["Shape.fromNMK(int,int,int)", "Shape.fromNP(int,double)"], "external_dependencies": {"modules": ["IllegalArgumentException", "Double"], "class_members": []}, "category": "unit", "description": "Tests that if the calculated probability is greater than or equal to 1 an IllegalArgumentException is thrown."}, {"name": "testEqualsAndHashCode", "primary_tested": ["Shape.fromKM(int,int)"], "associated_methods": ["Shape.hashCode()", "Shape.equals(Object)"], "external_dependencies": {"modules": ["Arrays", "Integer"], "class_members": []}, "category": "unit", "description": "Test equality of shape."}, {"name": "testEstimateN", "primary_tested": ["Shape.estimateN(int)"], "external_dependencies": {"modules": ["Math"], "class_members": [{"name": "shape", "type": "variable"}]}, "category": "unit", "description": "Tests the estimateN method of the Shape class."}, {"name": "testFromKM", "primary_tested": ["Shape.fromKM(int,int)"], "external_dependencies": {"modules": ["IllegalArgumentException"], "class_members": []}, "category": "unit", "description": "Tests that if the number of bits less than 1 an IllegalArgumentException is thrown."}, {"name": "testFromNM", "primary_tested": ["Shape.fromNM(int,int)"], "associated_methods": ["Shape.getNumberOfBits()", "Shape.getNumberOfHashFunctions()", "Shape.getProbability(int)"], "external_dependencies": {"modules": ["IllegalArgumentException"], "class_members": []}, "category": "unit", "description": "Tests that the number of items and number of bits is passed the other values are calculated correctly."}, {"name": "testFromNMK", "primary_tested": ["Shape.fromNMK(int,int,int)"], "associated_methods": ["Shape.getNumberOfBits()", "Shape.getNumberOfHashFunctions()", "Shape.getProbability(int)"], "external_dependencies": {"modules": ["IllegalArgumentException", "Integer"], "class_members": []}, "category": "unit", "description": "Tests that when the number of items, number of bits and number of hash functions is passed the values are calculated correctly."}, {"name": "testFromNP", "primary_tested": ["Shape.fromNP(int,double)"], "associated_methods": ["Shape.getNumberOfBits()", "Shape.getNumberOfHashFunctions()"], "external_dependencies": {"modules": ["IllegalArgumentException", "Math"], "class_members": []}, "category": "unit", "description": "Tests the calculated values of calling the constructor with the probability, number of bits and number of hash functions."}, {"name": "testFromPMK", "primary_tested": ["Shape.fromPMK(double,int,int)"], "associated_methods": ["Shape.getNumberOfBits()", "Shape.getNumberOfHashFunctions()", "Shape.getProbability(int)"], "external_dependencies": {"modules": ["IllegalArgumentException", "Math"], "class_members": []}, "category": "unit", "description": "Tests the calculated values of calling the constructor with the probability, number of bits and number of hash functions."}, {"name": "testGetProbability", "primary_tested": ["Shape.getProbability(int)"], "external_dependencies": {"modules": ["Math", "IllegalArgumentException"], "class_members": [{"name": "shape", "type": "variable"}]}, "category": "unit", "description": "Tests the getProbability method of the Shape class."}, {"name": "testIsSparse", "primary_tested": ["Shape.fromKM(int,int)", "Shape.isSparse(int)"], "external_dependencies": {"modules": ["Long", "Integer"], "class_members": []}, "category": "unit", "description": "Tests the isSparse method of the Shape class."}, {"name": "testProbability", "primary_tested": ["Shape.fromNMK(int,int,int)", "Shape.getNumberOfBits()", "Shape.getNumberOfHashFunctions()", "Shape.getProbability(int)"], "external_dependencies": {"modules": [], "class_members": []}, "category": "unit", "description": "Tests that the probability is calculated correctly."}, {"name": "testToString", "primary_tested": ["Shape.fromKM(int,int)", "Shape.toString()"], "external_dependencies": {"modules": [], "class_members": []}, "category": "unit", "description": "Tests the toString method of the Shape class."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/LayeredBloomFilterTest.java", "testclass_name": "LayeredBloomFilterTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.assertArrayEquals;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.time.Duration;", "import java.time.Instant;", "import java.util.ArrayList;", "import java.util.Deque;", "import java.util.Iterator;", "import java.util.List;", "import java.util.function.Consumer;", "import java.util.function.Predicate;", "import java.util.function.Supplier;", "import org.apache.commons.collections4.bloomfilter.LayerManager.Cleanup;", "import org.apache.commons.collections4.bloomfilter.LayerManager.ExtendCheck;", "import org.junit.jupiter.api.Test;"], "name": "LayeredBloomFilterTest", "description": "Tests for the LayeredBloomFilter class, focusing on layered processing, cleanup, expiration, and various find operations.", "class_members": {"variables": [{"name": "dbgInstrument", "type": "static final List<String>"}], "methods": [{"name": "createEmptyFilter", "signature": "protected LayeredBloomFilter<BloomFilter> createEmptyFilter(Shape shape)"}, {"name": "makeFilter", "signature": "protected BloomFilter makeFilter(Hasher h)"}, {"name": "makeFilter", "signature": "protected BloomFilter makeFilter(IndexExtractor p)"}, {"name": "makeFilter", "signature": "protected BloomFilter makeFilter(int... values)"}, {"name": "setupFindTest", "signature": "private LayeredBloomFilter<BloomFilter> setupFindTest()"}], "nested_classes": [{"name": "AdvanceOnTimeQuanta", "description": "A Predicate that advances after a quantum of time."}, {"name": "CleanByTime", "description": "A Consumer that cleans the list based on how long each filter has been in the list."}, {"name": "NumberedBloomFilter", "description": "A Bloom filter implementation that includes a value and sequence number."}, {"name": "TimestampedBloomFilter", "description": "A Bloom filter implementation that tracks the creation time."}]}, "fixtures": [], "test_cases": [{"name": "testCardinalityAndIsEmpty", "primary_tested": ["LayeredBloomFilter.testCardinalityAndIsEmpty(LayeredBloomFilter)"], "external_dependencies": {"modules": ["LayerManager", "SimpleBloomFilter", "LayeredBloomFilter"], "class_members": [{"name": "createEmptyFilter", "type": "method"}]}, "category": "unit", "description": "Tests the cardinality and emptiness of the LayeredBloomFilter."}, {"name": "testCleanup", "primary_tested": ["LayeredBloomFilter.cleanup()"], "associated_methods": ["NumberedBloomFilter.value--", "LayeredBloomFilter.getDepth()", "LayeredBloomFilter.merge(Hasher)", "LayeredBloomFilter.next()", "LayeredBloomFilter.get(int)"], "external_dependencies": {"modules": ["LayerManager", "NumberedBloomFilter", "LayeredBloomFilter", "TestingHashers"], "class_members": [{"name": "createEmptyFilter", "type": "method"}]}, "category": "unit", "description": "Tests the cleanup functionality of the LayeredBloomFilter."}, {"name": "testEstimateUnionCrossTypes", "primary_tested": ["BloomFilter.estimateUnion(BloomFilter)"], "external_dependencies": {"modules": ["BloomFilter", "DefaultBloomFilterTest.SparseDefaultBloomFilter", "TestingHashers"]}, "category": "unit", "description": "Tests the estimated union calculations between different types of BloomFilters."}, {"name": "testExpiration", "primary_tested": ["LayeredBloomFilter.processBloomFilters(Predicate<BloomFilter>)"], "associated_methods": ["TimestampedBloomFilter.getTimestamp()"], "external_dependencies": {"modules": ["LayeredBloomFilter", "TimestampedBloomFilter", "TestingHashers"], "class_members": [{"name": "dbgInstrument", "type": "variable"}]}, "category": "unit", "description": "Tests the expiration functionality of the LayeredBloomFilter."}, {"name": "testFindBitMapExtractor", "primary_tested": ["LayeredBloomFilter.find(BitMapExtractor)"], "associated_methods": ["BitMapExtractor.fromIndexExtractor(IndexExtractor, int)"], "external_dependencies": {"modules": ["LayeredBloomFilter", "BitMapExtractor", "TestingHashers"], "class_members": [{"name": "setupFindTest", "type": "method"}]}, "category": "unit", "description": "Tests the find functionality of the LayeredBloomFilter using BitMapExtractor."}, {"name": "testFindBloomFilter", "primary_tested": ["LayeredBloomFilter.find(Hasher)"], "external_dependencies": {"modules": ["LayeredBloomFilter", "TestingHashers"], "class_members": [{"name": "setupFindTest", "type": "method"}]}, "category": "unit", "description": "Tests the find functionality of the LayeredBloomFilter using BloomFilter."}, {"name": "testFindIndexExtractor", "primary_tested": ["LayeredBloomFilter.find(IndexExtractor)"], "external_dependencies": {"modules": ["LayeredBloomFilter", "TestingHashers"], "class_members": [{"name": "setupFindTest", "type": "method"}]}, "category": "unit", "description": "Tests the find functionality of the LayeredBloomFilter using IndexExtractor."}, {"name": "testGetLayer", "primary_tested": ["LayeredBloomFilter.get(int)"], "associated_methods": ["BloomFilter.asBitMapArray()"], "external_dependencies": {"modules": ["LayeredBloomFilter", "SimpleBloomFilter", "TestingHashers"], "class_members": [{"name": "setupFindTest", "type": "method"}]}, "category": "unit", "description": "Tests the retrieval of a specific layer from the LayeredBloomFilter."}, {"name": "testMultipleFilters", "primary_tested": ["LayeredBloomFilter.contains(BloomFilter)", "LayeredBloomFilter.copy().contains(BloomFilter)", "LayeredBloomFilter.flatten().contains(BloomFilter)"], "associated_methods": ["LayeredBloomFilter.getDepth()"], "external_dependencies": {"modules": ["LayeredBloomFilter", "TestingHashers"], "class_members": [{"name": "makeFilter", "type": "method"}]}, "category": "unit", "description": "Tests the functionality of the LayeredBloomFilter with multiple filters."}, {"name": "testNext", "primary_tested": ["LayeredBloomFilter.next()"], "associated_methods": ["LayeredBloomFilter.getDepth()", "LayeredBloomFilter.get(int)"], "external_dependencies": {"modules": ["LayeredBloomFilter", "LayerManager", "SimpleBloomFilter", "TestingHashers"]}, "category": "unit", "description": "Tests the next functionality of the LayeredBloomFilter."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/multimap/UnmodifiableMultiValuedMapTest.java", "testclass_name": "UnmodifiableMultiValuedMapTest", "dependencies": ["package org.apache.commons.collections4.multimap;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.HashMap;", "import java.util.Iterator;", "import java.util.List;", "import java.util.Map;", "import java.util.Map.Entry;", "import java.util.Set;", "import org.apache.commons.collections4.MapIterator;", "import org.apache.commons.collections4.MultiSet;", "import org.apache.commons.collections4.MultiValuedMap;", "import org.apache.commons.collections4.Unmodifiable;", "import org.apache.commons.collections4.collection.AbstractCollectionTest;", "import org.junit.jupiter.api.Test;"], "name": "UnmodifiableMultiValuedMapTest", "description": "Tests for the UnmodifiableMultiValuedMap class, focusing on its unmodifiable behavior and exceptions thrown for modification attempts.", "class_members": {"variables": [], "methods": [{"name": "assertMapContainsAllValues", "signature": "void assertMapContainsAllValues(MultiValuedMap<K, V> map)"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testAddException", "primary_tested": ["MultiValuedMap.put(K,V)"], "external_dependencies": {"modules": ["MultiValuedMap", "UnsupportedOperationException"], "class_members": []}, "category": "unit", "description": "Tests that an UnsupportedOperationException is thrown when attempting to add an element to an unmodifiable map."}, {"name": "testClearException", "primary_tested": ["MultiValuedMap.clear()"], "associated_methods": ["UnmodifiableMultiValuedMapTest.assertMapContainsAllValues(MultiValuedMap<K, V>)"], "external_dependencies": {"modules": ["MultiValuedMap", "UnsupportedOperationException"], "class_members": []}, "category": "unit", "description": "Tests that an UnsupportedOperationException is thrown when attempting to clear an unmodifiable map."}, {"name": "testDecorateFactory", "primary_tested": ["UnmodifiableMultiValuedMap.unmodifiableMultiValuedMap(MultiValuedMap<K, V>)"], "external_dependencies": {"modules": ["UnmodifiableMultiValuedMap", "MultiValuedMap"], "class_members": []}, "category": "unit", "description": "Tests that the decorate factory method returns the same map instance."}, {"name": "testDecoratorFactoryNullMap", "primary_tested": ["UnmodifiableMultiValuedMap.unmodifiableMultiValuedMap(MultiValuedMap<K, V>)"], "external_dependencies": {"modules": ["UnmodifiableMultiValuedMap", "NullPointerException"], "class_members": []}, "category": "unit", "description": "Tests that a NullPointerException is thrown when attempting to decorate a null map."}, {"name": "testPutAllException", "primary_tested": ["MultiValuedMap.putAll(MultiValuedMap<K, V>)", "MultiValuedMap.putAll(Map<K, V>)", "MultiValuedMap.putAll(K, Collection<V>)"], "external_dependencies": {"modules": ["MultiValuedMap", "UnsupportedOperationException", "ArrayListValuedHashMap", "HashMap", "Arrays"], "class_members": []}, "category": "unit", "description": "Tests that an UnsupportedOperationException is thrown when attempting to use putAll methods on an unmodifiable map."}, {"name": "testRemoveException", "primary_tested": ["MultiValuedMap.remove(Object)"], "associated_methods": ["UnmodifiableMultiValuedMapTest.assertMapContainsAllValues(MultiValuedMap<K, V>)"], "external_dependencies": {"modules": ["MultiValuedMap", "UnsupportedOperationException"], "class_members": []}, "category": "unit", "description": "Tests that an UnsupportedOperationException is thrown when attempting to remove an element from an unmodifiable map."}, {"name": "testRemoveMappingException", "primary_tested": ["MultiValuedMap.removeMapping(Object, Object)"], "associated_methods": ["UnmodifiableMultiValuedMapTest.assertMapContainsAllValues(MultiValuedMap<K, V>)"], "external_dependencies": {"modules": ["MultiValuedMap", "UnsupportedOperationException"], "class_members": []}, "category": "unit", "description": "Tests that an UnsupportedOperationException is thrown when attempting to remove a mapping from an unmodifiable map."}, {"name": "testUnmodifiable", "primary_tested": ["UnmodifiableMultiValuedMap.makeObject()", "UnmodifiableMultiValuedMap.makeFullMap()"], "external_dependencies": {"modules": ["UnmodifiableMultiValuedMap", "Unmodifiable"], "class_members": []}, "category": "unit", "description": "Tests that the created map instances are indeed unmodifiable."}, {"name": "testUnmodifiableAsMap", "primary_tested": ["MultiValuedMap.asMap()"], "external_dependencies": {"modules": ["MultiValuedMap", "UnsupportedOperationException", "Arrays"], "class_members": []}, "category": "unit", "description": "Tests that the asMap view of the unmodifiable map throws UnsupportedOperationException for modification attempts."}, {"name": "testUnmodifiableEntries", "primary_tested": ["MultiValuedMap.entries()"], "external_dependencies": {"modules": ["MultiValuedMap", "UnsupportedOperationException"], "class_members": []}, "category": "unit", "description": "Tests that the entries collection of the unmodifiable map throws UnsupportedOperationException for modification attempts."}, {"name": "testUnmodifiableKeys", "primary_tested": ["MultiValuedMap.keys()"], "external_dependencies": {"modules": ["MultiValuedMap", "UnsupportedOperationException"], "class_members": []}, "category": "unit", "description": "Tests that the keys collection of the unmodifiable map throws UnsupportedOperationException for modification attempts."}, {"name": "testUnmodifiableKeySet", "primary_tested": ["MultiValuedMap.keySet()"], "external_dependencies": {"modules": ["MultiValuedMap", "UnsupportedOperationException"], "class_members": []}, "category": "unit", "description": "Tests that the keySet of the unmodifiable map throws UnsupportedOperationException for modification attempts."}, {"name": "testUnmodifiableMapIterator", "primary_tested": ["MultiValuedMap.mapIterator()"], "external_dependencies": {"modules": ["MultiValuedMap", "UnsupportedOperationException"], "class_members": []}, "category": "unit", "description": "Tests that the mapIterator of the unmodifiable map throws UnsupportedOperationException for modification attempts."}, {"name": "testUnmodifiableValues", "primary_tested": ["MultiValuedMap.values()"], "external_dependencies": {"modules": ["MultiValuedMap", "UnsupportedOperationException"], "class_members": []}, "category": "unit", "description": "Tests that the values collection of the unmodifiable map throws UnsupportedOperationException for modification attempts."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/SetOperationsTest.java", "testclass_name": "SetOperationsTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import java.util.function.ToDoubleBiFunction;", "import java.util.function.ToIntBiFunction;", "import org.junit.jupiter.api.Test;"], "name": "SetOperationsTest", "description": "Unit tests for various set operations on BloomFilter objects.", "class_members": {"variables": [{"name": "shape", "type": "Shape"}], "methods": [{"name": "assertSymmetricOperation", "signature": "static void assertSymmetricOperation(double, ToDoubleBiFunction<BloomFilter, BloomFilter>, BloomFilter, BloomFilter)"}, {"name": "assertSymmetricOperation", "signature": "static void assertSymmetricOperation(int, ToIntBiFunction<BloomFilter, BloomFilter>, BloomFilter, BloomFilter)"}, {"name": "createFilter", "signature": "BloomFilter createFilter(Shape, Hasher)"}, {"name": "createFilter", "signature": "BloomFilter createFilter(Shape, IndexExtractor)"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testAndCardinality", "primary_tested": ["SetOperations.andCardinality(BloomFilter,BloomFilter)"], "associated_methods": ["SetOperationsTest.assertSymmetricOperation(int,ToIntBiFunction<BloomFilter,BloomFilter>,BloomFilter,BloomFilter)"], "external_dependencies": {"modules": ["Shape", "BloomFilter", "IndexExtractor", "SetOperations"], "class_members": [{"name": "shape", "type": "variable"}, {"name": "createFilter", "type": "method"}]}, "category": "unit", "description": "Tests the AND cardinality operation on BloomFilter objects."}, {"name": "testAndCardinalityWithDifferentLengthFilters", "primary_tested": ["SetOperations.andCardinality(BloomFilter,BloomFilter)"], "associated_methods": ["SetOperationsTest.assertSymmetricOperation(int,ToIntBiFunction<BloomFilter,BloomFilter>,BloomFilter,BloomFilter)"], "external_dependencies": {"modules": ["Shape", "BloomFilter", "IndexExtractor", "SetOperations"], "class_members": [{"name": "shape", "type": "variable"}, {"name": "createFilter", "type": "method"}]}, "category": "unit", "description": "Tests the AND cardinality operation on BloomFilter objects with different lengths."}, {"name": "testCommutativityOnMismatchedSizes", "primary_tested": ["SetOperations.orCardinality(BitMapExtractor,BitMapExtractor)", "SetOperations.xorCardinality(BitMapExtractor,BitMapExtractor)", "SetOperations.andCardinality(BitMapExtractor,BitMapExtractor)", "SetOperations.hammingDistance(BitMapExtractor,BitMapExtractor)", "SetOperations.cosineDistance(BitMapExtractor,BitMapExtractor)", "SetOperations.cosineSimilarity(BitMapExtractor,BitMapExtractor)", "SetOperations.jaccardDistance(BitMapExtractor,BitMapExtractor)", "SetOperations.jaccardSimilarity(BitMapExtractor,BitMapExtractor)"], "external_dependencies": {"modules": ["BitMapExtractor", "SetOperations"], "class_members": []}, "category": "unit", "description": "Tests the commutativity of various set operations on BitMapExtractor objects with mismatched sizes."}, {"name": "testCosineDistance", "primary_tested": ["SetOperations.cosineDistance(BloomFilter,BloomFilter)"], "associated_methods": ["SetOperationsTest.assertSymmetricOperation(double,ToDoubleBiFunction<BloomFilter,BloomFilter>,BloomFilter,BloomFilter)"], "external_dependencies": {"modules": ["Shape", "BloomFilter", "TestingHashers", "SetOperations"], "class_members": [{"name": "shape", "type": "variable"}, {"name": "createFilter", "type": "method"}]}, "category": "unit", "description": "Tests the calculation of Cosine distance on BloomFilter objects."}, {"name": "testCosineSimilarity", "primary_tested": ["SetOperations.cosineSimilarity(BloomFilter,BloomFilter)"], "associated_methods": ["SetOperationsTest.assertSymmetricOperation(double,ToDoubleBiFunction<BloomFilter,BloomFilter>,BloomFilter,BloomFilter)"], "external_dependencies": {"modules": ["Shape", "BloomFilter", "TestingHashers", "SetOperations"], "class_members": [{"name": "shape", "type": "variable"}, {"name": "createFilter", "type": "method"}]}, "category": "unit", "description": "Tests the calculation of Cosine similarity on BloomFilter objects."}, {"name": "testHammingDistance", "primary_tested": ["SetOperations.hammingDistance(BloomFilter,BloomFilter)"], "associated_methods": ["SetOperationsTest.assertSymmetricOperation(int,ToIntBiFunction<BloomFilter,BloomFilter>,BloomFilter,BloomFilter)"], "external_dependencies": {"modules": ["Shape", "BloomFilter", "TestingHashers", "SetOperations"], "class_members": [{"name": "shape", "type": "variable"}, {"name": "createFilter", "type": "method"}]}, "category": "unit", "description": "Tests the calculation of Hamming distance on BloomFilter objects."}, {"name": "testJaccardDistance", "primary_tested": ["SetOperations.jaccardDistance(BloomFilter,BloomFilter)"], "associated_methods": ["SetOperationsTest.assertSymmetricOperation(double,ToDoubleBiFunction<BloomFilter,BloomFilter>,BloomFilter,BloomFilter)"], "external_dependencies": {"modules": ["Shape", "BloomFilter", "TestingHashers", "SetOperations"], "class_members": [{"name": "shape", "type": "variable"}, {"name": "createFilter", "type": "method"}]}, "category": "unit", "description": "Tests the calculation of Jaccard distance on BloomFilter objects."}, {"name": "testJaccardSimilarity", "primary_tested": ["SetOperations.jaccardSimilarity(BloomFilter,BloomFilter)"], "associated_methods": ["SetOperationsTest.assertSymmetricOperation(double,ToDoubleBiFunction<BloomFilter,BloomFilter>,BloomFilter,BloomFilter)"], "external_dependencies": {"modules": ["Shape", "BloomFilter", "TestingHashers", "SetOperations"], "class_members": [{"name": "shape", "type": "variable"}, {"name": "createFilter", "type": "method"}]}, "category": "unit", "description": "Tests the calculation of Jaccard similarity on BloomFilter objects."}, {"name": "testOrCardinality", "primary_tested": ["SetOperations.orCardinality(BloomFilter,BloomFilter)"], "associated_methods": ["SetOperationsTest.assertSymmetricOperation(int,ToIntBiFunction<BloomFilter,BloomFilter>,BloomFilter,BloomFilter)"], "external_dependencies": {"modules": ["Shape", "BloomFilter", "IndexExtractor", "SetOperations"], "class_members": [{"name": "shape", "type": "variable"}, {"name": "createFilter", "type": "method"}]}, "category": "unit", "description": "Tests the OR cardinality operation on BloomFilter objects."}, {"name": "testOrCardinalityWithDifferentLengthFilters", "primary_tested": ["SetOperations.orCardinality(BloomFilter,BloomFilter)"], "associated_methods": ["SetOperationsTest.assertSymmetricOperation(int,ToIntBiFunction<BloomFilter,BloomFilter>,BloomFilter,BloomFilter)"], "external_dependencies": {"modules": ["Shape", "BloomFilter", "IndexExtractor", "SetOperations"], "class_members": [{"name": "shape", "type": "variable"}, {"name": "createFilter", "type": "method"}]}, "category": "unit", "description": "Tests the OR cardinality operation on BloomFilter objects with different lengths."}, {"name": "testXorCardinality", "primary_tested": ["SetOperations.xorCardinality(BloomFilter,BloomFilter)"], "associated_methods": ["SetOperationsTest.assertSymmetricOperation(int,ToIntBiFunction<BloomFilter,BloomFilter>,BloomFilter,BloomFilter)"], "external_dependencies": {"modules": ["Shape", "BloomFilter", "IndexExtractor", "SetOperations"], "class_members": [{"name": "shape", "type": "variable"}, {"name": "createFilter", "type": "method"}]}, "category": "unit", "description": "Tests the XOR cardinality operation on BloomFilter objects."}, {"name": "testXorCardinalityWithDifferentLengthFilters", "primary_tested": ["SetOperations.xorCardinality(BloomFilter,BloomFilter)"], "associated_methods": ["SetOperationsTest.assertSymmetricOperation(int,ToIntBiFunction<BloomFilter,BloomFilter>,BloomFilter,BloomFilter)"], "external_dependencies": {"modules": ["Shape", "BloomFilter", "IndexExtractor", "SetOperations"], "class_members": [{"name": "shape", "type": "variable"}, {"name": "createFilter", "type": "method"}]}, "category": "unit", "description": "Tests the XOR cardinality operation on BloomFilter objects with different lengths."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/keyvalue/MultiKeyTest.java", "testclass_name": "MultiKeyTest", "dependencies": ["package org.apache.commons.collections4.keyvalue;", "import static org.junit.jupiter.api.Assertions.assertArrayEquals;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNotEquals;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertNotSame;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.DynamicTest.dynamicTest;", "import java.io.ByteArrayInputStream;", "import java.io.ByteArrayOutputStream;", "import java.io.IOException;", "import java.io.ObjectInputStream;", "import java.io.ObjectOutputStream;", "import java.io.Serializable;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.HashMap;", "import java.util.Map;", "import org.apache.commons.lang3.StringUtils;", "import org.junit.jupiter.api.DynamicTest;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.api.TestFactory;"], "name": "MultiKeyTest", "description": "Unit tests for the MultiKey class, focusing on constructors, equality, serialization, and hash code.", "class_members": {"variables": [{"name": "ONE", "type": "Integer"}, {"name": "TWO", "type": "Integer"}, {"name": "THREE", "type": "Integer"}, {"name": "FOUR", "type": "Integer"}, {"name": "FIVE", "type": "Integer"}], "nested_classes": [{"name": "DerivedMultiKey", "description": "A derived class extending MultiKey with additional methods to get the first and second keys."}, {"name": "SystemHashCodeSimulatingKey", "description": "A class simulating a system hash code change after deserialization."}]}, "test_cases": [{"name": "testConstructors", "primary_tested": ["MultiKey.MultiKey(Integer,Integer)", "MultiKey.MultiKey(Integer,Integer,Integer)", "MultiKey.MultiKey(Integer,Integer,Integer,Integer)", "MultiKey.MultiKey(Integer,Integer,Integer,Integer,Integer)", "MultiKey.MultiKey(Integer[],boolean)"], "external_dependencies": {"modules": ["MultiKey", "Integer"], "class_members": [{"name": "ONE", "type": "variable"}, {"name": "TWO", "type": "variable"}, {"name": "THREE", "type": "variable"}, {"name": "FOUR", "type": "variable"}, {"name": "FIVE", "type": "variable"}]}, "category": "unit", "description": "Tests the constructors of MultiKey with different numbers of arguments and an array constructor."}, {"name": "testConstructorsByArray", "primary_tested": ["MultiKey.MultiKey(Integer[],boolean)"], "external_dependencies": {"modules": ["MultiKey", "Integer"], "class_members": [{"name": "ONE", "type": "variable"}, {"name": "TWO", "type": "variable"}, {"name": "THREE", "type": "variable"}, {"name": "FOUR", "type": "variable"}, {"name": "FIVE", "type": "variable"}]}, "category": "unit", "description": "Tests the array constructor of MultiKey with different configurations."}, {"name": "testConstructorsByArrayNull", "primary_tested": ["MultiKey.MultiKey(Integer[],boolean)"], "external_dependencies": {"modules": ["MultiKey", "Integer"]}, "category": "unit", "description": "Tests the array constructor of MultiKey with null input, expecting a NullPointerException."}, {"name": "testEquals", "primary_tested": ["MultiKey.equals(Object)"], "external_dependencies": {"modules": ["MultiKey", "Integer", "StringUtils"], "class_members": [{"name": "ONE", "type": "variable"}, {"name": "TWO", "type": "variable"}]}, "category": "unit", "description": "Tests the equality method of MultiKey with different instances."}, {"name": "testEqualsAfterSerialization", "primary_tested": ["MultiKey.equals(Object)"], "external_dependencies": {"modules": ["MultiKey", "Integer", "SystemHashCodeSimulatingKey", "HashMap", "ByteArrayOutputStream", "ObjectOutputStream", "ByteArrayInputStream", "ObjectInputStream"], "class_members": [{"name": "ONE", "type": "variable"}, {"name": "TWO", "type": "variable"}]}, "category": "unit", "description": "Tests the equality of MultiKey after serialization and deserialization, simulating a system hash code change."}, {"name": "testEqualsAfterSerializationOfDerivedClass", "primary_tested": ["DerivedMultiKey.equals(Object)"], "external_dependencies": {"modules": ["DerivedMultiKey", "ByteArrayOutputStream", "ObjectOutputStream", "ByteArrayInputStream", "ObjectInputStream"]}, "category": "unit", "description": "Tests the equality of DerivedMultiKey after serialization and deserialization."}, {"name": "testGetIndexed", "primary_tested": ["MultiKey.getKey(int)"], "external_dependencies": {"modules": ["MultiKey", "Integer"], "class_members": [{"name": "ONE", "type": "variable"}, {"name": "TWO", "type": "variable"}]}, "category": "unit", "description": "Tests the getKey method of MultiKey with different indices."}, {"name": "testGetKeysArrayConstructorCloned", "primary_tested": ["MultiKey.getKeys()"], "external_dependencies": {"modules": ["MultiKey", "Integer"], "class_members": [{"name": "ONE", "type": "variable"}, {"name": "TWO", "type": "variable"}]}, "category": "unit", "description": "Tests the getKeys method of MultiKey with a cloned array constructor."}, {"name": "testGetKeysArrayConstructorNonCloned", "primary_tested": ["MultiKey.getKeys()"], "external_dependencies": {"modules": ["MultiKey", "Integer"], "class_members": [{"name": "ONE", "type": "variable"}, {"name": "TWO", "type": "variable"}]}, "category": "unit", "description": "Tests the getKeys method of MultiKey with a non-cloned array constructor."}, {"name": "testGetKeysSimpleConstructor", "primary_tested": ["MultiKey.getKeys()"], "external_dependencies": {"modules": ["MultiKey", "Integer"], "class_members": [{"name": "ONE", "type": "variable"}, {"name": "TWO", "type": "variable"}]}, "category": "unit", "description": "Tests the getKeys method of MultiKey with a simple constructor."}, {"name": "testHashCode", "primary_tested": ["MultiKey.hashCode()"], "external_dependencies": {"modules": ["MultiKey", "Integer"], "class_members": [{"name": "ONE", "type": "variable"}, {"name": "TWO", "type": "variable"}]}, "category": "unit", "description": "Tests the hash code method of MultiKey with different instances."}, {"name": "testSize", "primary_tested": ["MultiKey.size()"], "external_dependencies": {"modules": ["MultiKey", "Integer"], "class_members": [{"name": "ONE", "type": "variable"}, {"name": "TWO", "type": "variable"}, {"name": "THREE", "type": "variable"}, {"name": "FOUR", "type": "variable"}, {"name": "FIVE", "type": "variable"}]}, "category": "unit", "description": "Tests the size method of MultiKey with different numbers of keys."}, {"name": "testTwoArgCtor", "primary_tested": ["MultiKey.MultiKey(MultiKeyTest,MultiKeyTest)"], "external_dependencies": {"modules": ["MultiKey", "MultiKeyTest"]}, "category": "unit", "description": "Tests the two-argument constructor of MultiKey with instances of MultiKeyTest."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java", "testclass_name": "EmptyPropertiesTest", "dependencies": ["package org.apache.commons.collections4.properties;", "import static org.junit.jupiter.api.Assertions.assertArrayEquals;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.fail;", "import java.io.ByteArrayInputStream;", "import java.io.ByteArrayOutputStream;", "import java.io.IOException;", "import java.io.PrintStream;", "import java.io.PrintWriter;", "import java.io.UnsupportedEncodingException;", "import java.nio.charset.StandardCharsets;", "import java.util.HashMap;", "import java.util.Properties;", "import org.apache.commons.io.input.NullReader;", "import org.apache.commons.lang3.ArrayUtils;", "import org.apache.commons.lang3.StringUtils;", "import org.junit.jupiter.api.Test;"]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/LayerManagerTest.java", "testclass_name": "LayerManagerTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.assertArrayEquals;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotEquals;", "import static org.junit.jupiter.api.Assertions.assertNotSame;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Deque;", "import java.util.LinkedList;", "import java.util.List;", "import java.util.NoSuchElementException;", "import java.util.function.Consumer;", "import java.util.function.Predicate;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.ValueSource;"], "name": "LayerManagerTest", "description": "Unit tests for the LayerManager class, focusing on various functionalities such as advancing layers, building, clearing, copying, and managing BloomFilters.", "class_members": {"variables": [{"name": "shape", "type": "Shape"}], "methods": [{"name": "testingBuilder", "signature": "LayerManager.Builder<BloomFilter> testingBuilder()"}]}, "fixtures": [], "test_cases": [{"name": "testAdvanceOnCount", "primary_tested": ["LayerManager.ExtendCheck.advanceOnCount(int)"], "associated_methods": ["LayerManager.getTarget()", "BloomFilter.merge(Hasher)", "LayerManager.ExtendCheck.advanceOnCount(int)"], "external_dependencies": {"modules": ["LayerManager", "BloomFilter", "TestingHashers", "Predicate"], "class_members": [{"name": "shape", "type": "variable"}]}, "category": "unit", "description": "Tests the advanceOnCount functionality of the LayerManager, ensuring it advances correctly based on the count."}, {"name": "testAdvanceOnCountInvalidArguments", "primary_tested": ["LayerManager.ExtendCheck.advanceOnCount(int)"], "external_dependencies": {"modules": ["LayerManager", "IllegalArgumentException"]}, "category": "unit", "description": "Tests the validation of arguments for the advanceOnCount method, ensuring it throws IllegalArgumentException for invalid values."}, {"name": "testAdvanceOnPopulated", "primary_tested": ["LayerManager.ExtendCheck.advanceOnPopulated()"], "associated_methods": ["LayerManager.getTarget()", "BloomFilter.merge(Hasher)", "LayerManager.ExtendCheck.advanceOnPopulated()"], "external_dependencies": {"modules": ["LayerManager", "BloomFilter", "TestingHashers", "Predicate"], "class_members": [{"name": "shape", "type": "variable"}]}, "category": "unit", "description": "Tests the advanceOnPopulated functionality of the LayerManager, ensuring it advances correctly based on population."}, {"name": "testAdvanceOnSaturation", "primary_tested": ["LayerManager.ExtendCheck.advanceOnSaturation(double)"], "associated_methods": ["LayerManager.getTarget()", "BloomFilter.merge(Hasher)", "LayerManager.ExtendCheck.advanceOnSaturation(double)"], "external_dependencies": {"modules": ["LayerManager", "BloomFilter", "IncrementingHasher", "Shape", "Predicate"], "class_members": [{"name": "shape", "type": "variable"}]}, "category": "unit", "description": "Tests the advanceOnSaturation functionality of the LayerManager, ensuring it advances correctly based on saturation."}, {"name": "testBuilder", "primary_tested": ["LayerManager.builder()"], "associated_methods": ["LayerManager.Builder.get()", "LayerManager.Builder.setSupplier(Supplier)", "LayerManager.Builder.setCleanup(Consumer)", "LayerManager.Builder.setExtendCheck(Predicate)"], "external_dependencies": {"modules": ["LayerManager", "NullPointerException"]}, "category": "unit", "description": "Tests the builder functionality of the LayerManager, ensuring it throws NullPointerException for invalid configurations."}, {"name": "testClear", "primary_tested": ["LayerManager.clear()"], "associated_methods": ["LayerManager.getTarget()", "BloomFilter.merge(Hasher)", "LayerManager.next()", "LayerManager.getDepth()", "BloomFilter.cardinality()"], "external_dependencies": {"modules": ["LayerManager", "BloomFilter", "TestingHashers", "SimpleBloomFilter"], "class_members": [{"name": "shape", "type": "variable"}]}, "category": "unit", "description": "Tests the clear functionality of the LayerManager, ensuring it resets the depth and clears the target BloomFilter."}, {"name": "testCopy", "primary_tested": ["LayerManager.copy()"], "associated_methods": ["LayerManager.getTarget()", "BloomFilter.merge(Hasher)", "LayerManager.next()", "LayerManager.getDepth()", "LayerManager.processBloomFilterPair(LayerManager, BiPredicate)"], "external_dependencies": {"modules": ["LayerManager", "BloomFilter", "TestingHashers", "SimpleBloomFilter", "Arrays"], "class_members": [{"name": "shape", "type": "variable"}]}, "category": "unit", "description": "Tests the copy functionality of the LayerManager, ensuring it creates a deep copy with the same properties."}, {"name": "testForEachBloomFilter", "primary_tested": ["LayerManager.processBloomFilters(Consumer)"], "associated_methods": ["LayerManager.getTarget()", "BloomFilter.merge(BloomFilter)", "LayerManager.processBloomFilters(Consumer)"], "external_dependencies": {"modules": ["LayerManager", "BloomFilter", "SimpleBloomFilter", "TestingHashers", "ArrayList", "Arrays"], "class_members": [{"name": "shape", "type": "variable"}]}, "category": "unit", "description": "Tests the forEachBloomFilter functionality of the LayerManager, ensuring it processes each BloomFilter correctly."}, {"name": "testGet", "primary_tested": ["LayerManager.get(int)"], "associated_methods": ["LayerManager.getDepth()", "LayerManager.get(int)"], "external_dependencies": {"modules": ["LayerManager", "SimpleBloomFilter", "NoSuchElementException"], "class_members": [{"name": "shape", "type": "variable"}]}, "category": "unit", "description": "Tests the get functionality of the LayerManager, ensuring it retrieves the correct BloomFilter and handles invalid indices."}, {"name": "testNeverAdvance", "primary_tested": ["LayerManager.ExtendCheck.neverAdvance()"], "associated_methods": ["LayerManager.getTarget()", "BloomFilter.merge(Hasher)", "LayerManager.ExtendCheck.neverAdvance()"], "external_dependencies": {"modules": ["LayerManager", "BloomFilter", "TestingHashers", "Predicate"], "class_members": [{"name": "shape", "type": "variable"}]}, "category": "unit", "description": "Tests the neverAdvance functionality of the LayerManager, ensuring it never advances regardless of the state."}, {"name": "testNextAndGetDepth", "primary_tested": ["LayerManager.next()", "LayerManager.getDepth()"], "associated_methods": ["LayerManager.getTarget()", "BloomFilter.merge(Hasher)", "LayerManager.next()", "LayerManager.getDepth()"], "external_dependencies": {"modules": ["LayerManager", "BloomFilter", "TestingHashers", "SimpleBloomFilter"], "class_members": [{"name": "shape", "type": "variable"}]}, "category": "unit", "description": "Tests the next and getDepth functionalities of the LayerManager, ensuring it correctly advances and retrieves the depth."}, {"name": "testNoCleanup", "primary_tested": ["LayerManager.Cleanup.noCleanup()"], "associated_methods": ["LayerManager.Cleanup.noCleanup()"], "external_dependencies": {"modules": ["LayerManager", "BloomFilter", "LinkedList", "Consumer"], "class_members": [{"name": "shape", "type": "variable"}]}, "category": "unit", "description": "Tests the noCleanup functionality of the LayerManager, ensuring it does not perform any cleanup."}, {"name": "testOnMaxSize", "primary_tested": ["LayerManager.Cleanup.onMaxSize(int)"], "associated_methods": ["LayerManager.Cleanup.onMaxSize(int)"], "external_dependencies": {"modules": ["LayerManager", "BloomFilter", "LinkedList", "Consumer"], "class_members": [{"name": "shape", "type": "variable"}]}, "category": "unit", "description": "Tests the onMaxSize functionality of the LayerManager, ensuring it cleans up based on the maximum size."}, {"name": "testOnMaxSizeIllegalValues", "primary_tested": ["LayerManager.Cleanup.onMaxSize(int)"], "external_dependencies": {"modules": ["LayerManager", "IllegalArgumentException"]}, "category": "unit", "description": "Tests the validation of arguments for the onMaxSize method, ensuring it throws IllegalArgumentException for invalid values."}, {"name": "testRemoveEmptyTarget", "primary_tested": ["LayerManager.Cleanup.removeEmptyTarget()"], "associated_methods": ["LayerManager.Cleanup.removeEmptyTarget()"], "external_dependencies": {"modules": ["LayerManager", "BloomFilter", "SimpleBloomFilter", "IndexExtractor", "LinkedList", "Consumer"], "class_members": [{"name": "shape", "type": "variable"}]}, "category": "unit", "description": "Tests the removeEmptyTarget functionality of the LayerManager, ensuring it removes empty BloomFilters correctly."}, {"name": "testTarget", "primary_tested": ["LayerManager.getTarget()"], "associated_methods": ["LayerManager.getTarget()", "LayerManager.Builder.setSupplier(Supplier)", "LayerManager.Builder.setExtendCheck(Predicate)", "LayerManager.Builder.setCleanup(Consumer)"], "external_dependencies": {"modules": ["LayerManager", "BloomFilter", "SimpleBloomFilter", "Predicate", "Consumer"], "class_members": [{"name": "shape", "type": "variable"}]}, "category": "unit", "description": "Tests the target functionality of the LayerManager, ensuring it correctly initializes and uses the target BloomFilter."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java", "testclass_name": "CursorableLinkedListTest", "dependencies": ["package org.apache.commons.collections4.list;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotSame;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.ConcurrentModificationException;", "import java.util.HashSet;", "import java.util.Iterator;", "import java.util.LinkedList;", "import java.util.List;", "import java.util.ListIterator;", "import java.util.NoSuchElementException;", "import org.apache.commons.lang3.ArrayUtils;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java", "testclass_name": "SetUniqueListTest", "dependencies": ["package org.apache.commons.collections4.list;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.LinkedList;", "import java.util.List;", "import java.util.ListIterator;", "import java.util.Set;", "import java.util.TreeSet;", "import org.apache.commons.collections4.set.UnmodifiableSet;", "import org.apache.commons.lang3.StringUtils;", "import org.junit.jupiter.api.Test;"], "name": "SetUniqueListTest", "description": "Unit tests for the SetUniqueList class, which ensures that the list contains only unique elements.", "class_members": {"variables": [{"name": "extraVerify", "type": "boolean"}], "methods": [{"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "getFullNonNullElements", "signature": "E[] getFullNonNullElements()"}, {"name": "makeObject", "signature": "List<E> makeObject()"}], "nested_classes": [{"name": "SetUniqueList307", "description": "Internal subclass of SetUniqueList for specific test cases."}]}, "fixtures": [], "test_cases": [{"name": "testAdd", "primary_tested": ["SetUniqueList.add(E)"], "external_dependencies": {"modules": ["SetUniqueList", "ArrayList", "HashSet"], "class_members": [{"name": "extraVerify", "type": "variable"}]}, "category": "unit", "description": "Tests the addition of elements to SetUniqueList, ensuring duplicates are not added."}, {"name": "testAddAll", "primary_tested": ["SetUniqueList.addAll(Collection<? extends E>)"], "external_dependencies": {"modules": ["SetUniqueList", "ArrayList", "HashSet", "Arrays"], "class_members": [{"name": "extraVerify", "type": "variable"}]}, "category": "unit", "description": "Tests the addition of a collection of elements to SetUniqueList, ensuring duplicates are not added."}, {"name": "testCollectionAddAll", "primary_tested": ["SetUniqueList.addAll(Collection<? extends E>)"], "associated_methods": ["AbstractListTest.resetEmpty()", "AbstractListTest.resetFull()", "AbstractListTest.verify()"], "external_dependencies": {"modules": ["SetUniqueList", "ArrayList", "HashSet", "Arrays"], "class_members": [{"name": "extraVerify", "type": "variable"}]}, "category": "unit", "description": "Tests the addition of a collection of elements to SetUniqueList, ensuring duplicates are not added."}, {"name": "testCollectionIteratorRemove", "primary_tested": ["AbstractListTest.testCollectionIteratorRemove()"], "associated_methods": ["AbstractListTest.testCollectionIteratorRemove()"], "external_dependencies": {"modules": ["SetUniqueList", "ArrayList", "HashSet"], "class_members": [{"name": "extraVerify", "type": "variable"}]}, "category": "unit", "description": "Tests the removal of elements using an iterator, ensuring the list remains unique."}, {"name": "testCollections304", "primary_tested": ["SetUniqueList.add(E)", "SetUniqueList.set(int, E)"], "external_dependencies": {"modules": ["SetUniqueList", "LinkedList"], "class_members": [{"name": "extraVerify", "type": "variable"}]}, "category": "unit", "description": "Tests the addition and setting of elements in SetUniqueList, ensuring duplicates are not added."}, {"name": "testCollections307", "primary_tested": ["SetUniqueList.add(E)", "SetUniqueList.subList(int, int)"], "external_dependencies": {"modules": ["SetUniqueList", "ArrayList", "TreeSet"], "class_members": [{"name": "extraVerify", "type": "variable"}]}, "category": "unit", "description": "Tests the addition of elements and sublist functionality in SetUniqueList, ensuring duplicates are not added."}, {"name": "testCollections701", "primary_tested": ["SetUniqueList.add(E)", "SetUniqueList.set(int, E)"], "external_dependencies": {"modules": ["SetUniqueList", "ArrayList", "HashSet", "LinkedList"], "class_members": [{"name": "extraVerify", "type": "variable"}]}, "category": "unit", "description": "Tests the addition and setting of elements in SetUniqueList, ensuring duplicates are not added."}, {"name": "testCreateSetBasedOnList", "primary_tested": ["SetUniqueList.createSetBasedOnList(Set<E>, List<E>)"], "external_dependencies": {"modules": ["SetUniqueList", "ArrayList", "HashSet", "TreeSet", "UnmodifiableSet"], "class_members": [{"name": "extraVerify", "type": "variable"}]}, "category": "unit", "description": "Tests the creation of a set based on a list, ensuring duplicates are not added."}, {"name": "testFactory", "primary_tested": ["SetUniqueList.setUniqueList(List<E>)"], "external_dependencies": {"modules": ["SetUniqueList", "ArrayList", "Arrays"], "class_members": [{"name": "extraVerify", "type": "variable"}]}, "category": "unit", "description": "Tests the factory method for creating a SetUniqueList, ensuring duplicates are not added."}, {"name": "testIntCollectionAddAll", "primary_tested": ["SetUniqueList.addAll(int, Collection<? extends E>)"], "external_dependencies": {"modules": ["SetUniqueList", "ArrayList", "HashSet", "Arrays"], "class_members": [{"name": "extraVerify", "type": "variable"}]}, "category": "unit", "description": "Tests the addition of a collection of elements at a specific index in SetUniqueList, ensuring duplicates are not added."}, {"name": "testListIterator", "primary_tested": ["SetUniqueList.listIterator()"], "external_dependencies": {"modules": ["SetUniqueList", "ArrayList", "HashSet"], "class_members": [{"name": "extraVerify", "type": "variable"}]}, "category": "unit", "description": "Tests the list iterator functionality in SetUniqueList, ensuring duplicates are not added."}, {"name": "testListIteratorAdd", "primary_tested": ["SetUniqueList.listIterator()"], "associated_methods": ["AbstractListTest.resetEmpty()", "AbstractListTest.resetFull()", "AbstractListTest.verify()"], "external_dependencies": {"modules": ["SetUniqueList", "ArrayList", "HashSet"], "class_members": [{"name": "extraVerify", "type": "variable"}]}, "category": "unit", "description": "Tests the addition of elements using a list iterator in SetUniqueList, ensuring duplicates are not added."}, {"name": "testListIteratorSet", "primary_tested": ["SetUniqueList.listIterator()"], "external_dependencies": {"modules": ["SetUniqueList", "ArrayList", "HashSet"], "class_members": [{"name": "extraVerify", "type": "variable"}]}, "category": "unit", "description": "Tests the setting of elements using a list iterator in SetUniqueList, ensuring duplicates are not added."}, {"name": "testListSetByIndex", "primary_tested": ["SetUniqueList.set(int, E)"], "external_dependencies": {"modules": ["SetUniqueList", "ArrayList", "HashSet"], "class_members": [{"name": "extraVerify", "type": "variable"}]}, "category": "unit", "description": "Tests the setting of elements at a specific index in SetUniqueList, ensuring duplicates are not added."}, {"name": "testRetainAll", "primary_tested": ["SetUniqueList.retainAll(Collection<?>)", "SetUniqueList.contains(Object)"], "external_dependencies": {"modules": ["SetUniqueList", "ArrayList", "HashSet"], "class_members": [{"name": "extraVerify", "type": "variable"}]}, "category": "unit", "description": "Tests the retention of elements in SetUniqueList, ensuring only specified elements are retained."}, {"name": "testRetainAllWithInitialList", "primary_tested": ["SetUniqueList.retainAll(Collection<?>)", "SetUniqueList.contains(Object)"], "external_dependencies": {"modules": ["SetUniqueList", "ArrayList", "HashSet"], "class_members": [{"name": "extraVerify", "type": "variable"}]}, "category": "unit", "description": "Tests the retention of elements in SetUniqueList with an initial list, ensuring only specified elements are retained."}, {"name": "testSet", "primary_tested": ["SetUniqueList.set(int, E)"], "external_dependencies": {"modules": ["SetUniqueList", "ArrayList", "HashSet"], "class_members": [{"name": "extraVerify", "type": "variable"}]}, "category": "unit", "description": "Tests the setting of elements at a specific index in SetUniqueList, ensuring duplicates are not added."}, {"name": "testSetCollections444", "primary_tested": ["SetUniqueList.set(int, E)"], "external_dependencies": {"modules": ["SetUniqueList", "ArrayList", "HashSet"], "class_members": [{"name": "extraVerify", "type": "variable"}]}, "category": "unit", "description": "Tests the setting of elements at a specific index in SetUniqueList, ensuring duplicates are not added."}, {"name": "testSetDownwardsInList", "primary_tested": ["SetUniqueList.set(int, E)"], "external_dependencies": {"modules": ["SetUniqueList", "ArrayList", "HashSet"], "class_members": [{"name": "extraVerify", "type": "variable"}]}, "category": "unit", "description": "Tests the setting of elements at a specific index in SetUniqueList, ensuring duplicates are not added."}, {"name": "testSetInBiggerList", "primary_tested": ["SetUniqueList.set(int, E)"], "external_dependencies": {"modules": ["SetUniqueList", "ArrayList", "HashSet"], "class_members": [{"name": "extraVerify", "type": "variable"}]}, "category": "unit", "description": "Tests the setting of elements at a specific index in SetUniqueList, ensuring duplicates are not added."}, {"name": "testSetUpwardsInList", "primary_tested": ["SetUniqueList.set(int, E)"], "external_dependencies": {"modules": ["SetUniqueList", "ArrayList", "HashSet"], "class_members": [{"name": "extraVerify", "type": "variable"}]}, "category": "unit", "description": "Tests the setting of elements at a specific index in SetUniqueList, ensuring duplicates are not added."}, {"name": "testSubListIsUnmodifiable", "primary_tested": ["SetUniqueList.subList(int, int)"], "external_dependencies": {"modules": ["SetUniqueList", "ArrayList", "HashSet"], "class_members": [{"name": "extraVerify", "type": "variable"}]}, "category": "unit", "description": "Tests the sublist functionality in SetUniqueList, ensuring it is unmodifiable."}, {"name": "testUniqueListDoubleInsert", "primary_tested": ["SetUniqueList.set(int, E)", "SetUniqueList.add(int, E)"], "external_dependencies": {"modules": ["SetUniqueList", "LinkedList"], "class_members": [{"name": "extraVerify", "type": "variable"}]}, "category": "unit", "description": "Tests the setting and addition of elements in SetUniqueList, ensuring duplicates are not added."}, {"name": "testUniqueListReInsert", "primary_tested": ["SetUniqueList.set(int, E)", "SetUniqueList.add(int, E)"], "external_dependencies": {"modules": ["SetUniqueList", "LinkedList"], "class_members": [{"name": "extraVerify", "type": "variable"}]}, "category": "unit", "description": "Tests the setting and addition of elements in SetUniqueList, ensuring duplicates are not added."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/SynchronizedQueue_elementTest.java", "testclass_name": "SynchronizedQueue_elementTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import org.junit.jupiter.api.Test;", "import java.util.LinkedList;", "import java.util.Queue;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "SynchronizedQueue_elementTest", "description": "Unit test for the element method of SynchronizedQueue.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testElement", "primary_tested": ["SynchronizedQueue.element()"], "external_dependencies": {"modules": ["Queue", "LinkedList", "SynchronizedQueue"], "class_members": []}, "category": "unit", "description": "Tests the element method of SynchronizedQueue to ensure it retrieves the head element of the queue."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/EnumerationUtils_toListTest.java", "testclass_name": "EnumerationUtils_toListTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.List;", "import java.util.StringTokenizer;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "EnumerationUtils_toListTest", "description": "Unit tests for the EnumerationUtils.toList method.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testToListWithStringTokenizer", "primary_tested": ["EnumerationUtils.toList(StringTokenizer)"], "external_dependencies": {"modules": ["EnumerationUtils", "StringTokenizer", "List"]}, "category": "unit", "description": "Tests the EnumerationUtils.toList method with a StringTokenizer, verifying the conversion of tokens to a list and their correctness."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/SetUtils_isEqualSetTest.java", "testclass_name": "SetUtils_isEqualSetTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.HashSet;", "import java.util.Set;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "SetUtils_isEqualSetTest", "description": "Unit tests for the isEqualSet method in SetUtils.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testIsEqualSet", "primary_tested": ["SetUtils.isEqualSet(Set,Set)"], "external_dependencies": {"modules": ["SetUtils", "HashSet", "Arrays", "Set"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the isEqualSet functionality of the SetUtils. It checks if two sets are equal regardless of order and handles null cases."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/SynchronizedQueue_removeTest.java", "testclass_name": "SynchronizedQueue_removeTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import org.junit.jupiter.api.Test;", "import java.util.LinkedList;", "import java.util.Queue;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "SynchronizedQueue_removeTest", "description": "Unit test for the remove method of SynchronizedQueue.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testRemove", "primary_tested": ["SynchronizedQueue.remove()"], "external_dependencies": {"modules": ["java.util.LinkedList", "java.util.Queue", "org.apache.commons.collections4.queue.SynchronizedQueue"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the remove functionality of the SynchronizedQueue, ensuring the correct element is removed and the queue is empty after removal."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/IteratorUtils_chainedIteratorTest.java", "testclass_name": "IteratorUtils_chainedIteratorTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Iterator;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "IteratorUtils_chainedIteratorTest", "description": "Unit tests for the chainedIterator functionality in IteratorUtils.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testChainedIterator", "primary_tested": ["IteratorUtils.chainedIterator(Iterator,Iterator)"], "external_dependencies": {"modules": ["java.util.Arrays", "java.util.Iterator", "org.apache.commons.collections4.IteratorUtils"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the chainedIterator functionality of IteratorUtils by chaining two iterators and verifying the sequence of elements."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/UnmodifiableBag_uniqueSetTest.java", "testclass_name": "UnmodifiableBag_uniqueSetTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import org.apache.commons.collections4.Bag;", "import org.apache.commons.collections4.set.UnmodifiableSet;", "import org.junit.jupiter.api.Test;", "import java.util.HashSet;", "import java.util.Set;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "UnmodifiableBag_uniqueSetTest", "description": "Test for the uniqueSet method of the UnmodifiableBag class.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testUniqueSet", "primary_tested": ["UnmodifiableBag.uniqueSet()"], "associated_methods": ["UnmodifiableSet.contains(Object)"], "external_dependencies": {"modules": ["Bag", "HashBag", "UnmodifiableBag", "Set", "UnmodifiableSet"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the uniqueSet method of the UnmodifiableBag class to ensure it returns an UnmodifiableSet containing unique elements from the bag."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/IteratorUtils_sizeTest.java", "testclass_name": "IteratorUtils_sizeTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.Iterator;"], "name": "IteratorUtils_sizeTest", "description": "Unit tests for the size method in IteratorUtils.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testSizeWithNonNullIterator", "primary_tested": ["IteratorUtils.size(Iterator)"], "external_dependencies": {"modules": ["IteratorUtils", "Iterator"]}, "category": "unit", "description": "Tests the size method of IteratorUtils with a non-null iterator."}, {"name": "testSizeWithNullIterator", "primary_tested": ["IteratorUtils.size(Iterator)"], "external_dependencies": {"modules": ["IteratorUtils", "Iterator"]}, "category": "unit", "description": "Tests the size method of IteratorUtils with a null iterator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/CollectionBag_addAllTest.java", "testclass_name": "CollectionBag_addAllTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import org.apache.commons.collections4.Bag;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.Arrays;", "import java.util.Collection;"], "name": "CollectionBag_addAllTest", "description": "Unit test for the addAll method of the CollectionBag class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testAddAll", "primary_tested": ["Bag.addAll(Collection)"], "associated_methods": ["Bag.containsAll(Collection)"], "external_dependencies": {"modules": ["org.apache.commons.collections4.Bag", "org.apache.commons.collections4.bag.CollectionBag", "java.util.Arrays", "java.util.Collection"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the addAll functionality of the CollectionBag, ensuring that elements are added and can be verified."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/TransformerUtils_ifTransformerTest.java", "testclass_name": "TransformerUtils_ifTransformerTest", "dependencies": ["package org.apache.commons.collections4;", "import org.apache.commons.collections4.functors.ConstantTransformer;", "import org.apache.commons.collections4.functors.EqualPredicate;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "TransformerUtils_ifTransformerTest", "description": "Unit tests for the ifTransformer method in TransformerUtils.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testIfTransformer", "primary_tested": ["TransformerUtils.ifTransformer(Predicate,Transformer,Transformer)"], "associated_methods": ["ConstantTransformer.constantTransformer(String)", "EqualPredicate.equalPredicate(Integer)"], "external_dependencies": {"modules": ["ConstantTransformer", "EqualPredicate", "TransformerUtils"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the ifTransformer functionality in TransformerUtils, ensuring it returns the correct transformed value based on the predicate."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/TransformerUtils_switchTransformerTest.java", "testclass_name": "TransformerUtils_switchTransformerTest", "dependencies": ["package org.apache.commons.collections4;", "import org.apache.commons.collections4.functors.ConstantTransformer;", "import org.apache.commons.collections4.functors.EqualPredicate;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "TransformerUtils_switchTransformerTest", "description": "Unit tests for the switchTransformer functionality in TransformerUtils.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testSwitchTransformer", "primary_tested": ["TransformerUtils.switchTransformer(Predicate,Transformer,Transformer)"], "associated_methods": ["ConstantTransformer.constantTransformer(String)", "EqualPredicate.equalPredicate(Integer)"], "external_dependencies": {"modules": ["ConstantTransformer", "EqualPredicate", "TransformerUtils"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the switchTransformer functionality of TransformerUtils, ensuring it correctly transforms based on the provided predicate."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/ComparatorUtils_transformedComparatorTest.java", "testclass_name": "ComparatorUtils_transformedComparatorTest", "dependencies": ["package org.apache.commons.collections4;", "import org.apache.commons.collections4.comparators.TransformingComparator;", "import org.junit.jupiter.api.Test;", "import java.util.Comparator;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNotNull;"], "name": "ComparatorUtils_transformedComparatorTest", "description": "Unit tests for the transformedComparator method in ComparatorUtils.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testTransformedComparatorWithNullComparator", "primary_tested": ["ComparatorUtils.transformedComparator(Comparator<String>,Transformer<Integer,String>)"], "external_dependencies": {"modules": ["Comparator", "Transformer", "ComparatorUtils", "TransformingComparator"]}, "category": "unit", "description": "Tests the creation of a TransformingComparator with a null comparator."}, {"name": "testTransformedComparatorWithNonNullComparator", "primary_tested": ["ComparatorUtils.transformedComparator(Comparator<String>,Transformer<Integer,String>)"], "external_dependencies": {"modules": ["Comparator", "Transformer", "ComparatorUtils", "TransformingComparator"]}, "category": "unit", "description": "Tests the creation of a TransformingComparator with a non-null comparator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/IteratorUtils_getTest.java", "testclass_name": "IteratorUtils_getTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Iterator;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "IteratorUtils_getTest", "description": "Unit tests for the IteratorUtils.get method, which retrieves an element at a specific index from an iterator.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testGetElementAtIndex", "primary_tested": ["IteratorUtils.get(Iterator<Integer>,int)"], "external_dependencies": {"modules": ["Arrays", "IteratorUtils", "Iterator"]}, "category": "unit", "description": "Tests the retrieval of an element at a specific index from an iterator."}, {"name": "testGetElementAtIndexOutOfBounds", "primary_tested": ["IteratorUtils.get(Iterator<Integer>,int)"], "external_dependencies": {"modules": ["Arrays", "IteratorUtils", "Iterator", "IndexOutOfBoundsException"]}, "category": "unit", "description": "Tests the behavior of the IteratorUtils.get method when attempting to retrieve an element at an index out of bounds, expecting an IndexOutOfBoundsException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/IteratorUtils_zippingIteratorTest.java", "testclass_name": "IteratorUtils_zippingIteratorTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Iterator;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import org.apache.commons.collections4.iterators.ZippingIterator;"], "name": "IteratorUtils_zippingIteratorTest", "description": "Test for the ZippingIterator functionality in IteratorUtils.", "class_members": {"variables": [{"name": "iterator1", "type": "Iterator<Integer>"}, {"name": "iterator2", "type": "Iterator<Integer>"}, {"name": "iterator3", "type": "Iterator<Integer>"}]}, "test_cases": [{"name": "testZippingIterator", "primary_tested": ["IteratorUtils.zippingIterator(Iterator,Iterator,Iterator)"], "external_dependencies": {"modules": ["Iterator", "Arrays", "ZippingIterator"], "class_members": [{"name": "iterator1", "type": "variable"}, {"name": "iterator2", "type": "variable"}, {"name": "iterator3", "type": "variable"}]}, "category": "unit", "description": "Tests the creation of a ZippingIterator using IteratorUtils."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/SetUtils_hashSetTest.java", "testclass_name": "SetUtils_hashSetTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Arrays;", "import java.util.HashSet;", "import java.util.Set;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SetUtils_hashSetTest", "description": "Unit tests for the SetUtils.hashSet method.", "class_members": {"variables": [{"name": "setA", "type": "Set<Integer>"}, {"name": "setB", "type": "Set<Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testHashSetWithNull", "primary_tested": ["SetUtils.hashSet(Integer[])"], "external_dependencies": {"modules": ["SetUtils"]}, "category": "unit", "fixtures_used": [], "description": "Tests the SetUtils.hashSet method with a null input."}, {"name": "testHashSetWithItems", "primary_tested": ["SetUtils.hashSet(Integer[])"], "external_dependencies": {"modules": ["SetUtils"]}, "category": "unit", "fixtures_used": [], "description": "Tests the SetUtils.hashSet method with valid items."}, {"name": "testHashSetWithEmptyItems", "primary_tested": ["SetUtils.hashSet(Integer[])"], "external_dependencies": {"modules": ["SetUtils"]}, "category": "unit", "fixtures_used": [], "description": "Tests the SetUtils.hashSet method with no items."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/SynchronizedQueue_peekTest.java", "testclass_name": "SynchronizedQueue_peekTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.mockito.Mockito.*;", "import java.util.Queue;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import org.mockito.Mock;", "import org.mockito.MockitoAnnotations;"], "name": "SynchronizedQueue_peekTest", "description": "Unit tests for the peek method of the SynchronizedQueue class.", "class_members": {"variables": [{"name": "mockQueue", "type": "Queue<String>"}, {"name": "synchronizedQueue", "type": "SynchronizedQueue<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPeek", "primary_tested": ["SynchronizedQueue.peek()"], "associated_methods": ["Queue.peek()"], "external_dependencies": {"modules": ["Queue", "SynchronizedQueue", "Mockito"], "class_members": [{"name": "mockQueue", "type": "variable"}, {"name": "synchronizedQueue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the peek functionality of the SynchronizedQueue, ensuring it returns the expected element and verifies the mock queue's peek method is called once."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/SynchronizedQueue_offerTest.java", "testclass_name": "SynchronizedQueue_offerTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.mockito.Mockito.mock;", "import static org.mockito.Mockito.when;", "import java.util.Queue;", "import org.junit.jupiter.api.Test;"], "name": "SynchronizedQueue_offerTest", "description": "Unit test for the offer method of SynchronizedQueue.", "class_members": {"variables": [{"name": "mockQueue", "type": "Queue<String>"}, {"name": "synchronizedQueue", "type": "SynchronizedQueue<String>"}, {"name": "element", "type": "String"}]}, "test_cases": [{"name": "testOffer", "primary_tested": ["SynchronizedQueue.offer(String)"], "associated_methods": ["Queue.offer(String)"], "external_dependencies": {"modules": ["Queue", "SynchronizedQueue", "org.mockito.Mockito"], "class_members": [{"name": "mockQueue", "type": "variable"}, {"name": "synchronizedQueue", "type": "variable"}, {"name": "element", "type": "variable"}]}, "category": "unit", "description": "Tests the offer method of SynchronizedQueue by mocking the underlying Queue and verifying the result."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/UnmodifiableQueue_unmodifiableQueueTest.java", "testclass_name": "UnmodifiableQueue_unmodifiableQueueTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import org.apache.commons.collections4.Unmodifiable;", "import org.junit.jupiter.api.Test;", "import java.util.ArrayDeque;", "import java.util.Queue;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "UnmodifiableQueue_unmodifiableQueueTest", "description": "Tests for the UnmodifiableQueue class, specifically focusing on the unmodifiableQueue method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testUnmodifiableQueueWithUnmodifiableQueue", "primary_tested": ["UnmodifiableQueue.unmodifiableQueue(Queue<String>)"], "external_dependencies": {"modules": ["UnmodifiableQueue", "ArrayDeque", "Queue", "Unmodifiable"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the unmodifiableQueue method when provided with an already unmodifiable queue."}, {"name": "testUnmodifiableQueueWithModifiableQueue", "primary_tested": ["UnmodifiableQueue.unmodifiableQueue(Queue<String>)"], "external_dependencies": {"modules": ["UnmodifiableQueue", "ArrayDeque", "Queue", "Unmodifiable"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the unmodifiableQueue method when provided with a modifiable queue."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/SetUtils_unmodifiableSetTest.java", "testclass_name": "SetUtils_unmodifiableSetTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Set;", "import org.junit.jupiter.api.Test;"], "name": "SetUtils_unmodifiableSetTest", "description": "Unit tests for the unmodifiableSet method in SetUtils.", "test_cases": [{"name": "testUnmodifiableSetWithNullInput", "primary_tested": ["SetUtils.unmodifiableSet(Integer[])"], "external_dependencies": {"modules": ["SetUtils", "Set"]}, "category": "unit", "description": "Tests the unmodifiableSet method with a null input."}, {"name": "testUnmodifiableSetWithEmptyInput", "primary_tested": ["SetUtils.unmodifiableSet()"], "external_dependencies": {"modules": ["SetUtils", "Set"]}, "category": "unit", "description": "Tests the unmodifiableSet method with an empty input."}, {"name": "testUnmodifiableSetWithNonEmptyInput", "primary_tested": ["SetUtils.unmodifiableSet(Integer[])"], "associated_methods": ["Set.size()", "Set.contains(Integer)"], "external_dependencies": {"modules": ["SetUtils", "Set"]}, "category": "unit", "description": "Tests the unmodifiableSet method with a non-empty input."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/IteratorUtils_toListTest.java", "testclass_name": "IteratorUtils_toListTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Iterator;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "IteratorUtils_toListTest", "description": "Unit tests for the IteratorUtils.toList method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testToList_SuccessfulConversion", "primary_tested": ["IteratorUtils.toList(Iterator<String>,int)"], "external_dependencies": {"modules": ["IteratorUtils", "Arrays", "List", "Iterator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the successful conversion of an iterator to a list."}, {"name": "testToList_NullIterator", "primary_tested": ["IteratorUtils.toList(Iterator<String>,int)"], "external_dependencies": {"modules": ["IteratorUtils", "Iterator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of the toList method when a null iterator is provided."}, {"name": "testToList_InvalidEstimatedSize", "primary_tested": ["IteratorUtils.toList(Iterator<String>,int)"], "external_dependencies": {"modules": ["IteratorUtils", "Arrays", "Iterator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of the toList method when an invalid estimated size is provided."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/IteratorUtils_forEachTest.java", "testclass_name": "IteratorUtils_forEachTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.Iterator;", "import java.util.NoSuchElementException;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;"], "name": "IteratorUtils_forEachTest", "description": "Unit tests for the IteratorUtils.forEach method.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testForEachWithNonNullClosureAndNonNullIterator", "primary_tested": ["IteratorUtils.forEach(Iterator<String>,Closure<String>)"], "associated_methods": ["Iterator.hasNext()", "Iterator.next()", "Closure.accept(String)"], "external_dependencies": {"modules": ["Iterator", "Closure", "IteratorUtils"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the forEach method with a non-null closure and a non-null iterator."}, {"name": "testForEachWithNonNullClosureAndNullIterator", "primary_tested": ["IteratorUtils.forEach(Iterator<String>,Closure<String>)"], "associated_methods": ["Closure.accept(String)"], "external_dependencies": {"modules": ["Closure", "IteratorUtils"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the forEach method with a non-null closure and a null iterator."}, {"name": "testForEachWithNullClosure", "primary_tested": ["IteratorUtils.forEach(Iterator<String>,Closure<String>)"], "associated_methods": [], "external_dependencies": {"modules": ["Iterator", "IteratorUtils"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the forEach method with a null closure, expecting a NullPointerException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/MultiMapUtils_getCollectionTest.java", "testclass_name": "MultiMapUtils_getCollectionTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;", "import java.util.ArrayList;", "import java.util.Collection;"], "name": "MultiMapUtils_getCollectionTest", "description": "Unit tests for the MultiMapUtils.getCollection method.", "class_members": {"variables": [{"name": "map", "type": "MultiValuedMap<String, Integer>"}, {"name": "expectedCollection", "type": "Collection<Integer>"}]}, "test_cases": [{"name": "testGetCollection_WithNonNullMap", "primary_tested": ["MultiMapUtils.getCollection(MultiValuedMap<String, Integer>,String)"], "associated_methods": ["MultiValuedMap.get(String)"], "external_dependencies": {"modules": ["MultiValuedMap", "MultiMapUtils", "Collection", "ArrayList"], "class_members": [{"name": "map", "type": "variable"}, {"name": "expectedCollection", "type": "variable"}]}, "category": "unit", "description": "Tests the getCollection method of MultiMapUtils with a non-null map."}, {"name": "testGetCollection_WithNullMap", "primary_tested": ["MultiMapUtils.getCollection(MultiValuedMap<String, Integer>,String)"], "external_dependencies": {"modules": ["MultiMapUtils"]}, "category": "unit", "description": "Tests the getCollection method of MultiMapUtils with a null map."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/IteratorUtils_toStringTest.java", "testclass_name": "IteratorUtils_toStringTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import java.util.Arrays;", "import java.util.Iterator;", "import java.util.List;"], "name": "IteratorUtils_toStringTest", "description": "Unit tests for the IteratorUtils.toString method.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testToStringWithNonEmptyIterator", "primary_tested": ["IteratorUtils.toString(Iterator<String>)"], "external_dependencies": {"modules": ["java.util.Arrays", "java.util.Iterator", "java.util.List", "org.apache.commons.collections4.IteratorUtils"]}, "category": "unit", "description": "Tests the IteratorUtils.toString method with a non-empty iterator."}, {"name": "testToStringWithEmptyIterator", "primary_tested": ["IteratorUtils.toString(Iterator<String>)"], "external_dependencies": {"modules": ["java.util.Arrays", "java.util.Iterator", "java.util.List", "org.apache.commons.collections4.IteratorUtils"]}, "category": "unit", "description": "Tests the IteratorUtils.toString method with an empty iterator."}, {"name": "testToStringWithSingleElementIterator", "primary_tested": ["IteratorUtils.toString(Iterator<String>)"], "external_dependencies": {"modules": ["java.util.Arrays", "java.util.Iterator", "java.util.List", "org.apache.commons.collections4.IteratorUtils"]}, "category": "unit", "description": "Tests the IteratorUtils.toString method with a single-element iterator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/ComparatorUtils_chainedComparatorTest.java", "testclass_name": "ComparatorUtils_chainedComparatorTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.Comparator;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "ComparatorUtils_chainedComparatorTest", "description": "Unit tests for the chainedComparator method in ComparatorUtils.", "class_members": {"variables": [{"name": "comparator1", "type": "Comparator<Integer>"}, {"name": "comparator2", "type": "Comparator<Integer>"}, {"name": "nullComparator", "type": "Comparator<Integer>"}]}, "test_cases": [{"name": "testChainedComparator", "primary_tested": ["ComparatorUtils.chainedComparator(Comparator,Comparator)"], "external_dependencies": {"modules": ["Comparator", "ComparatorUtils"], "class_members": [{"name": "comparator1", "type": "variable"}, {"name": "comparator2", "type": "variable"}]}, "category": "unit", "description": "Tests the chainedComparator method with two valid comparators."}, {"name": "testChainedComparatorWithNull", "primary_tested": ["ComparatorUtils.chainedComparator(Comparator,Comparator)"], "external_dependencies": {"modules": ["Comparator", "ComparatorUtils"], "class_members": [{"name": "comparator1", "type": "variable"}, {"name": "nullComparator", "type": "variable"}]}, "category": "unit", "description": "Tests the chainedComparator method with a null comparator, expecting a NullPointerException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/SynchronizedQueue_pollTest.java", "testclass_name": "SynchronizedQueue_pollTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.mockito.Mockito.*;", "import java.util.Queue;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.api.BeforeEach;", "import org.mockito.Mockito;"], "name": "SynchronizedQueue_pollTest", "description": "Unit tests for the poll method of SynchronizedQueue.", "class_members": {"variables": [{"name": "mockQueue", "type": "Queue<String>"}, {"name": "synchronizedQueue", "type": "SynchronizedQueue<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPoll_WhenQueueHasElements", "primary_tested": ["SynchronizedQueue.poll()"], "external_dependencies": {"modules": ["Queue", "SynchronizedQueue"], "class_members": [{"name": "mockQueue", "type": "variable"}, {"name": "synchronizedQueue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the poll method when the queue has elements."}, {"name": "testPoll_WhenQueueIsEmpty", "primary_tested": ["SynchronizedQueue.poll()"], "external_dependencies": {"modules": ["Queue", "SynchronizedQueue"], "class_members": [{"name": "mockQueue", "type": "variable"}, {"name": "synchronizedQueue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the poll method when the queue is empty."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/SetUtils_hashCodeForSetTest.java", "testclass_name": "SetUtils_hashCodeForSetTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.HashSet;", "import java.util.Set;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "SetUtils_hashCodeForSetTest", "description": "Unit tests for the SetUtils.hashCodeForSet method.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testHashCodeForSet_NullSet", "primary_tested": ["SetUtils.hashCodeForSet(Set)"], "external_dependencies": {"modules": ["SetUtils"]}, "category": "unit", "description": "Tests the hashCodeForSet method with a null set."}, {"name": "testHashCodeForSet_EmptySet", "primary_tested": ["SetUtils.hashCodeForSet(Set)"], "external_dependencies": {"modules": ["SetUtils", "Collections"]}, "category": "unit", "description": "Tests the hashCodeForSet method with an empty set."}, {"name": "testHashCodeForSet_NonEmptySet", "primary_tested": ["SetUtils.hashCodeForSet(Set)"], "external_dependencies": {"modules": ["SetUtils", "HashSet", "Arrays", "Collections"]}, "category": "unit", "description": "Tests the hashCodeForSet method with a non-empty set."}, {"name": "testHashCodeForSet_SetWithNullElements", "primary_tested": ["SetUtils.hashCodeForSet(Set)"], "external_dependencies": {"modules": ["SetUtils", "HashSet", "Arrays", "Collections"]}, "category": "unit", "description": "Tests the hashCodeForSet method with a set containing null elements."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/IteratorUtils_transformedIteratorTest.java", "testclass_name": "IteratorUtils_transformedIteratorTest", "dependencies": ["package org.apache.commons.collections4;", "import org.apache.commons.collections4.functors.ConstantTransformer;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Iterator;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertThrows;"], "name": "IteratorUtils_transformedIteratorTest", "description": "Unit tests for the transformedIterator method in IteratorUtils class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testTransformedIterator_Success", "primary_tested": ["IteratorUtils.transformedIterator(Iterator<String>,Transformer<String,Integer>)"], "external_dependencies": {"modules": ["IteratorUtils", "ConstantTransformer", "Arrays"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the successful transformation of an iterator using a constant transformer."}, {"name": "testTransformedIterator_NullIterator", "primary_tested": ["IteratorUtils.transformedIterator(Iterator<String>,Transformer<String,Integer>)"], "external_dependencies": {"modules": ["IteratorUtils", "ConstantTransformer"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of the transformedIterator method when the input iterator is null, expecting a NullPointerException."}, {"name": "testTransformedIterator_NullTransformer", "primary_tested": ["IteratorUtils.transformedIterator(Iterator<String>,Transformer<String,Integer>)"], "external_dependencies": {"modules": ["IteratorUtils", "Arrays"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of the transformedIterator method when the transformer is null, expecting a NullPointerException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/MultiMapUtils_getValuesAsSetTest.java", "testclass_name": "MultiMapUtils_getValuesAsSetTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.Set;", "import static org.junit.jupiter.api.Assertions.*;", "import org.apache.commons.collections4.multimap.HashSetValuedHashMap;", "import org.apache.commons.collections4.multimap.ArrayListValuedHashMap;"], "name": "MultiMapUtils_getValuesAsSetTest", "description": "Unit tests for the MultiMapUtils.getValuesAsSet method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testGetValuesAsSet", "primary_tested": ["MultiMapUtils.getValuesAsSet(MultiValuedMap<String,String>,String)"], "external_dependencies": {"modules": ["MultiValuedMap", "HashSetValuedHashMap", "Set", "MultiMapUtils"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the getValuesAsSet method with a non-null map and verifies the result contains the expected values."}, {"name": "testGetValuesAsSet_NullMap", "primary_tested": ["MultiMapUtils.getValuesAsSet(MultiValuedMap<String,String>,String)"], "external_dependencies": {"modules": ["MultiValuedMap", "MultiMapUtils"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the getValuesAsSet method with a null map and verifies the result is null."}, {"name": "testGetValuesAsSet_NonSetCollection", "primary_tested": ["MultiMapUtils.getValuesAsSet(MultiValuedMap<String,String>,String)"], "external_dependencies": {"modules": ["MultiValuedMap", "ArrayListValuedHashMap", "Set", "MultiMapUtils"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the getValuesAsSet method with a map that uses a non-set collection and verifies the result contains the expected values."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/CollectionBag_removeAllTest.java", "testclass_name": "CollectionBag_removeAllTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import org.apache.commons.collections4.Bag;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import org.mockito.Mockito;", "import java.util.Arrays;", "import java.util.Collection;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.mockito.Mockito.when;"], "name": "CollectionBag_removeAllTest", "description": "Unit tests for the removeAll method in the CollectionBag class.", "class_members": {"variables": [{"name": "mockBag", "type": "Bag<String>"}, {"name": "collectionBag", "type": "CollectionBag<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveAll_NonEmptyCollection", "primary_tested": ["CollectionBag.removeAll(Collection)"], "associated_methods": ["Bag.remove(String,int)", "Bag.getCount(String)"], "external_dependencies": {"modules": ["Bag", "CollectionBag", "Mockito", "Arrays"], "class_members": [{"name": "mockBag", "type": "variable"}, {"name": "collectionBag", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeAll method with a non-empty collection."}, {"name": "testRemoveAll_NullCollection", "primary_tested": ["CollectionBag.removeAll(Collection)"], "external_dependencies": {"modules": ["Bag", "CollectionBag"], "class_members": [{"name": "collectionBag", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeAll method with a null collection."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/ComparatorUtils_minTest.java", "testclass_name": "ComparatorUtils_minTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.Comparator;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "ComparatorUtils_minTest", "description": "Unit tests for the min method in ComparatorUtils, testing both default and custom comparators.", "class_members": {"variables": [{"name": "o1", "type": "Integer"}, {"name": "o2", "type": "Integer"}, {"name": "reverseComparator", "type": "Comparator<Integer>"}]}, "test_cases": [{"name": "testMinWithDefaultComparator", "primary_tested": ["ComparatorUtils.min(Integer,Integer,Comparator)"], "external_dependencies": {"modules": ["ComparatorUtils", "Integer", "Comparator"], "class_members": [{"name": "o1", "type": "variable"}, {"name": "o2", "type": "variable"}]}, "category": "unit", "description": "Tests the min method of ComparatorUtils with a default comparator."}, {"name": "testMinWithCustomComparator", "primary_tested": ["ComparatorUtils.min(Integer,Integer,Comparator)"], "external_dependencies": {"modules": ["ComparatorUtils", "Integer", "Comparator"], "class_members": [{"name": "o1", "type": "variable"}, {"name": "o2", "type": "variable"}, {"name": "reverseComparator", "type": "variable"}]}, "category": "unit", "description": "Tests the min method of ComparatorUtils with a custom comparator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/UnmodifiableSortedBag_uniqueSetTest.java", "testclass_name": "UnmodifiableSortedBag_uniqueSetTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import org.apache.commons.collections4.SortedBag;", "import org.apache.commons.collections4.set.UnmodifiableSet;", "import org.junit.jupiter.api.Test;", "import java.util.Collections;", "import java.util.Set;", "import java.util.TreeSet;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "UnmodifiableSortedBag_uniqueSetTest", "description": "Unit tests for the uniqueSet method of the UnmodifiableSortedBag class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testUniqueSet", "primary_tested": ["UnmodifiableSortedBag.uniqueSet()"], "associated_methods": ["UnmodifiableSet.contains(Object)", "UnmodifiableSet.contains(Object)"], "external_dependencies": {"modules": ["SortedBag", "TreeBag", "UnmodifiableSortedBag", "Set", "UnmodifiableSet"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the uniqueSet method of the UnmodifiableSortedBag to ensure it returns an unmodifiable set containing unique elements from the bag."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/CollectionBag_addTest.java", "testclass_name": "CollectionBag_addTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import org.apache.commons.collections4.Bag;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;"], "name": "CollectionBag_addTest", "description": "Unit tests for the add method in CollectionBag.", "class_members": {"variables": [{"name": "mockBag", "type": "Bag<String>"}, {"name": "collectionBag", "type": "CollectionBag<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAdd", "primary_tested": ["CollectionBag.add(String,int)"], "associated_methods": ["Bag.add(String,int)"], "external_dependencies": {"modules": ["Bag", "CollectionBag", "Mockito"], "class_members": [{"name": "mockBag", "type": "variable"}, {"name": "collectionBag", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the add functionality of the CollectionBag, verifying that the object is added with the specified count and that the underlying Bag's add method is called."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/CollectionSortedBag_addAllTest.java", "testclass_name": "CollectionSortedBag_addAllTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import org.apache.commons.collections4.SortedBag;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Collection;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;"], "name": "CollectionSortedBag_addAllTest", "description": "Unit tests for the addAll method of CollectionSortedBag.", "class_members": {"variables": [{"name": "mockBag", "type": "SortedBag<String>"}, {"name": "collectionSortedBag", "type": "CollectionSortedBag<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAddAll", "primary_tested": ["CollectionSortedBag.addAll(Collection<String>)"], "associated_methods": ["SortedBag.add(String,int)"], "external_dependencies": {"modules": ["SortedBag", "CollectionSortedBag", "Arrays", "Collection"], "class_members": [{"name": "mockBag", "type": "variable"}, {"name": "collectionSortedBag", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addAll functionality of the CollectionSortedBag, verifying that elements are added to the underlying SortedBag."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/IteratorUtils_forEachButLastTest.java", "testclass_name": "IteratorUtils_forEachButLastTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Iterator;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "IteratorUtils_forEachButLastTest", "description": "Unit tests for the IteratorUtils.forEachButLast method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testForEachButLast_SingleElement", "primary_tested": ["IteratorUtils.forEachButLast(Iterator<String>,Closure<String>)"], "external_dependencies": {"modules": ["IteratorUtils", "Arrays", "Closure"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the forEachButLast method with a single element in the iterator."}, {"name": "testForEachButLast_MultipleElements", "primary_tested": ["IteratorUtils.forEachButLast(Iterator<String>,Closure<String>)"], "external_dependencies": {"modules": ["IteratorUtils", "Arrays", "Closure"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the forEachButLast method with multiple elements in the iterator."}, {"name": "testForEachButLast_NullIterator", "primary_tested": ["IteratorUtils.forEachButLast(Iterator<String>,Closure<String>)"], "external_dependencies": {"modules": ["IteratorUtils", "Closure"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the forEachButLast method with a null iterator."}, {"name": "testForEachButLast_NullClosure", "primary_tested": ["IteratorUtils.forEachButLast(Iterator<String>,Closure<String>)"], "external_dependencies": {"modules": ["IteratorUtils", "Arrays"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the forEachButLast method with a null closure."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/TransformerUtils_switchMapTransformerTest.java", "testclass_name": "TransformerUtils_switchMapTransformerTest", "dependencies": ["package org.apache.commons.collections4;", "import org.apache.commons.collections4.functors.ConstantTransformer;", "import org.apache.commons.collections4.functors.EqualPredicate;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;"], "name": "TransformerUtils_switchMapTransformerTest", "description": "Unit tests for the switchMapTransformer method in TransformerUtils.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testSwitchMapTransformer_WithDefaultTransformer", "primary_tested": ["TransformerUtils.switchMapTransformer(Map<Integer,Transformer<Integer,String>>)"], "associated_methods": ["ConstantTransformer.constantTransformer(String)", "Transformer.transform(Integer)"], "external_dependencies": {"modules": ["org.apache.commons.collections4.functors.ConstantTransformer", "org.apache.commons.collections4.TransformerUtils", "java.util.HashMap", "java.util.Map"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the switchMapTransformer method with a default transformer."}, {"name": "testSwitchMapTransformer_WithoutDefaultTransformer", "primary_tested": ["TransformerUtils.switchMapTransformer(Map<Integer,Transformer<Integer,String>>)"], "associated_methods": ["ConstantTransformer.constantTransformer(String)", "Transformer.transform(Integer)"], "external_dependencies": {"modules": ["org.apache.commons.collections4.functors.ConstantTransformer", "org.apache.commons.collections4.TransformerUtils", "java.util.HashMap", "java.util.Map"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the switchMapTransformer method without a default transformer."}, {"name": "testSwitchMapTransformer_NullMap", "primary_tested": ["TransformerUtils.switchMapTransformer(Map<Integer,Transformer<Integer,String>>)"], "external_dependencies": {"modules": ["org.apache.commons.collections4.TransformerUtils", "java.util.Map"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the switchMapTransformer method with a null map, expecting a NullPointerException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/CollectionSortedBag_addTest.java", "testclass_name": "CollectionSortedBag_addTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import org.apache.commons.collections4.SortedBag;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import org.mockito.Mockito;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.mockito.Mockito.verify;"], "name": "CollectionSortedBag_addTest", "description": "Unit tests for the add method of CollectionSortedBag.", "class_members": {"variables": [{"name": "mockBag", "type": "SortedBag<String>"}, {"name": "collectionSortedBag", "type": "CollectionSortedBag<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAdd", "primary_tested": ["CollectionSortedBag.add(String,int)"], "associated_methods": ["SortedBag.add(String,int)"], "external_dependencies": {"modules": ["SortedBag", "CollectionSortedBag", "Mockito"], "class_members": [{"name": "mockBag", "type": "variable"}, {"name": "collectionSortedBag", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the add functionality of the CollectionSortedBag, verifying that the element is added to the underlying SortedBag."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/CollectionBag_retainAllTest.java", "testclass_name": "CollectionBag_retainAllTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import org.apache.commons.collections4.Bag;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import org.mockito.Mockito;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.Iterator;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.mockito.Mockito.*;"], "name": "CollectionBag_retainAllTest", "description": "Unit tests for the retainAll method in the CollectionBag class.", "class_members": {"variables": [{"name": "bag", "type": "CollectionBag<String>"}, {"name": "decoratedBag", "type": "Bag<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRetainAll_NonEmptyCollection", "primary_tested": ["CollectionBag.retainAll(Collection)"], "associated_methods": ["Bag.iterator()", "Iterator.hasNext()", "Iterator.next()", "Iterator.remove()"], "external_dependencies": {"modules": ["CollectionBag", "Bag", "Iterator", "Arrays", "Mockito"], "class_members": [{"name": "bag", "type": "variable"}, {"name": "decoratedBag", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retainAll method with a non-empty collection, ensuring that elements not in the collection are removed."}, {"name": "testRetainAll_NullCollection", "primary_tested": ["CollectionBag.retainAll(Collection)"], "associated_methods": ["Bag.retainAll(Collection)"], "external_dependencies": {"modules": ["CollectionBag", "Bag", "Mockito"], "class_members": [{"name": "bag", "type": "variable"}, {"name": "decoratedBag", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retainAll method with a null collection, ensuring that the method handles null input correctly."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/ArrayStack_popTest.java", "testclass_name": "ArrayStack_popTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.EmptyStackException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ArrayStack_popTest", "description": "Unit tests for the pop method of the ArrayStack class.", "class_members": {"variables": [{"name": "stack", "type": "ArrayStack<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPopOnNonEmptyStack", "primary_tested": ["ArrayStack.pop()"], "associated_methods": ["ArrayStack.push(String)", "ArrayStack.peek()"], "external_dependencies": {"modules": ["ArrayStack"], "class_members": [{"name": "stack", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the pop method on a non-empty stack, ensuring the correct item is returned and the stack is updated."}, {"name": "testPopOnEmptyStack", "primary_tested": ["ArrayStack.pop()"], "external_dependencies": {"modules": ["ArrayStack", "EmptyStackException"], "class_members": [{"name": "stack", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the pop method on an empty stack, expecting an EmptyStackException to be thrown."}, {"name": "testPopRemovesElement", "primary_tested": ["ArrayStack.pop()"], "associated_methods": ["ArrayStack.push(String)", "ArrayStack.search(String)"], "external_dependencies": {"modules": ["ArrayStack"], "class_members": [{"name": "stack", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the pop method removes the element from the stack."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/IteratorUtils_matchesAllTest.java", "testclass_name": "IteratorUtils_matchesAllTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Iterator;", "import java.util.function.Predicate;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "IteratorUtils_matchesAllTest", "description": "Unit tests for the IteratorUtils.matchesAll method, which checks if all elements in an iterator match a given predicate.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testMatchesAll_AllElementsMatch", "primary_tested": ["IteratorUtils.matchesAll(Iterator<Integer>,Predicate<Integer>)"], "external_dependencies": {"modules": ["IteratorUtils", "Arrays", "Predicate"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that IteratorUtils.matchesAll returns true when all elements in the iterator match the predicate."}, {"name": "testMatchesAll_SomeElementsDoNotMatch", "primary_tested": ["IteratorUtils.matchesAll(Iterator<Integer>,Predicate<Integer>)"], "external_dependencies": {"modules": ["IteratorUtils", "Arrays", "Predicate"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that IteratorUtils.matchesAll returns false when some elements in the iterator do not match the predicate."}, {"name": "testMatchesAll_NullIterator", "primary_tested": ["IteratorUtils.matchesAll(Iterator<Integer>,Predicate<Integer>)"], "external_dependencies": {"modules": ["IteratorUtils", "Predicate"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that IteratorUtils.matchesAll returns true when the iterator is null."}, {"name": "testMatchesAll_NullPredicate", "primary_tested": ["IteratorUtils.matchesAll(Iterator<Integer>,Predicate<Integer>)"], "external_dependencies": {"modules": ["IteratorUtils", "Arrays"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that IteratorUtils.matchesAll throws a NullPointerException when the predicate is null."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/TransformedBag_transformedBagTest.java", "testclass_name": "TransformedBag_transformedBagTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import org.apache.commons.collections4.Bag;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;"], "name": "TransformedBag_transformedBagTest", "description": "Unit tests for the TransformedBag class, specifically focusing on the transformedBag method.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testTransformedBagWithNonEmptyBag", "primary_tested": ["TransformedBag.transformedBag(Bag<String>,Transformer<String,String>)"], "associated_methods": ["Bag.isEmpty()", "Bag.toArray()", "Transformer.apply(String)"], "external_dependencies": {"modules": ["Bag", "Transformer", "TransformedBag"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformedBag method with a non-empty Bag, ensuring the transformer is applied correctly and the Bag is modified as expected."}, {"name": "testTransformedBagWithEmptyBag", "primary_tested": ["TransformedBag.transformedBag(Bag<String>,Transformer<String,String>)"], "associated_methods": ["Bag.isEmpty()"], "external_dependencies": {"modules": ["Bag", "Transformer", "TransformedBag"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformedBag method with an empty Bag, ensuring no modifications are made to the Bag."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_clearTest.java", "testclass_name": "CircularFifoQueue_clearTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CircularFifoQueue_clearTest", "description": "Unit tests for the clear functionality of the CircularFifoQueue class.", "class_members": {"variables": [{"name": "queue", "type": "CircularFifoQueue<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testClear", "primary_tested": ["CircularFifoQueue.clear()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clear functionality of the CircularFifoQueue when the queue is fully filled."}, {"name": "testClearOnEmptyQueue", "primary_tested": ["CircularFifoQueue.clear()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clear functionality of the CircularFifoQueue when the queue is initially empty."}, {"name": "testClearWithPartialFill", "primary_tested": ["CircularFifoQueue.clear()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clear functionality of the CircularFifoQueue when the queue is partially filled."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/MultiMapUtils_getValuesAsBagTest.java", "testclass_name": "MultiMapUtils_getValuesAsBagTest", "dependencies": ["package org.apache.commons.collections4;", "import org.apache.commons.collections4.bag.HashBag;", "import org.apache.commons.collections4.multimap.ArrayListValuedHashMap;", "import org.junit.jupiter.api.Test;", "import java.util.Collection;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;"], "name": "MultiMapUtils_getValuesAsBagTest", "description": "Unit tests for the MultiMapUtils.getValuesAsBag method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testGetValuesAsBag_WithNullMap", "primary_tested": ["MultiMapUtils.getValuesAsBag(MultiValuedMap<String,String>,String)"], "external_dependencies": {"modules": ["MultiValuedMap", "MultiMapUtils", "Bag"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of MultiMapUtils.getValuesAsBag when the input map is null."}, {"name": "testGetValuesAsBag_WithNonBagCollection", "primary_tested": ["MultiMapUtils.getValuesAsBag(MultiValuedMap<String,String>,String)"], "associated_methods": ["ArrayListValuedHashMap.put(String,String)", "Bag.size()", "Bag.getCount(String)"], "external_dependencies": {"modules": ["MultiValuedMap", "MultiMapUtils", "Bag", "ArrayListValuedHashMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of MultiMapUtils.getValuesAsBag when the input map contains non-bag collections."}, {"name": "testGetValuesAsBag_WithBagCollection", "primary_tested": ["MultiMapUtils.getValuesAsBag(MultiValuedMap<String,String>,String)"], "associated_methods": ["HashBag.add(String,int)", "ArrayListValuedHashMap.putAll(String,Collection<? extends String>)", "Bag.size()", "Bag.getCount(String)"], "external_dependencies": {"modules": ["MultiValuedMap", "MultiMapUtils", "Bag", "ArrayListValuedHashMap", "HashBag"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of MultiMapUtils.getValuesAsBag when the input map contains bag collections."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_uniqueIndexedCollectionTest.java", "testclass_name": "IndexedCollection_uniqueIndexedCollectionTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.map.MultiValueMap;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.HashMap;", "import static org.junit.jupiter.api.Assertions.assertNotNull;"], "name": "IndexedCollection_uniqueIndexedCollectionTest", "description": "Test for the uniqueIndexedCollection method of the IndexedCollection class.", "class_members": {"variables": [{"name": "coll", "type": "Collection<String>"}, {"name": "keyTransformer", "type": "Transformer<String, String>"}]}, "test_cases": [{"name": "testUniqueIndexedCollection", "primary_tested": ["IndexedCollection.uniqueIndexedCollection(Collection<String>,Transformer<String,String>)"], "external_dependencies": {"modules": ["IndexedCollection", "Transformer", "Arrays"], "class_members": [{"name": "coll", "type": "variable"}, {"name": "keyTransformer", "type": "variable"}]}, "category": "unit", "description": "Tests the creation of a unique indexed collection using the uniqueIndexedCollection method."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/IteratorUtils_indexOfTest.java", "testclass_name": "IteratorUtils_indexOfTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Iterator;", "import java.util.function.Predicate;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;"], "name": "IteratorUtils_indexOfTest", "description": "Unit tests for the indexOf method in IteratorUtils.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testIndexOf_ElementFound", "primary_tested": ["IteratorUtils.indexOf(Iterator<Integer>,org.apache.commons.collections4.Predicate<Integer>)"], "external_dependencies": {"modules": ["Arrays", "Iterator", "Predicate", "IteratorUtils", "org.apache.commons.collections4.Predicate"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the indexOf method when the element is found in the iterator."}, {"name": "testIndexOf_ElementNotFound", "primary_tested": ["IteratorUtils.indexOf(Iterator<Integer>,org.apache.commons.collections4.Predicate<Integer>)"], "external_dependencies": {"modules": ["Arrays", "Iterator", "Predicate", "IteratorUtils", "org.apache.commons.collections4.Predicate", "CollectionUtils"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the indexOf method when the element is not found in the iterator."}, {"name": "testIndexOf_NullIterator", "primary_tested": ["IteratorUtils.indexOf(Iterator<Integer>,org.apache.commons.collections4.Predicate<Integer>)"], "external_dependencies": {"modules": ["Predicate", "IteratorUtils", "org.apache.commons.collections4.Predicate", "CollectionUtils"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the indexOf method when the iterator is null."}, {"name": "testIndexOf_NullPredicate", "primary_tested": ["IteratorUtils.indexOf(Iterator<Integer>,org.apache.commons.collections4.Predicate<Integer>)"], "external_dependencies": {"modules": ["Arrays", "Iterator", "IteratorUtils"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the indexOf method when the predicate is null, expecting a NullPointerException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/TreeBag_addTest.java", "testclass_name": "TreeBag_addTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import org.junit.jupiter.api.Test;", "import java.util.Comparator;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "TreeBag_addTest", "description": "Unit tests for the add method of the TreeBag class, including scenarios with Comparable and non-Comparable objects, and the use of a custom Comparator.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testAddWithComparableObject", "primary_tested": ["TreeBag.add(String)"], "external_dependencies": {"modules": ["TreeBag", "String"]}, "category": "unit", "description": "Tests the add method of TreeBag with a Comparable object (String)."}, {"name": "testAddWithNonComparableObjectAndNoComparator", "primary_tested": ["TreeBag.add(Object)"], "external_dependencies": {"modules": ["TreeBag", "Object"]}, "category": "unit", "description": "Tests the add method of TreeBag with a non-Comparable object and no custom Comparator, expecting an IllegalArgumentException."}, {"name": "testAddWithNonComparableObjectAndCustomComparator", "primary_tested": ["TreeBag.add(Object)"], "external_dependencies": {"modules": ["TreeBag", "Object", "Comparator"]}, "category": "unit", "description": "Tests the add method of TreeBag with a non-Comparable object and a custom Comparator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/TransformedQueue_transformedQueueTest.java", "testclass_name": "TransformedQueue_transformedQueueTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.Test;", "import java.util.LinkedList;", "import java.util.Queue;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;"], "name": "TransformedQueue_transformedQueueTest", "description": "Unit tests for the TransformedQueue class, focusing on the transformedQueue method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testTransformedQueueWithNonEmptyQueue", "primary_tested": ["TransformedQueue.transformedQueue(Queue<String>,Transformer<String,String>)"], "associated_methods": ["TransformedQueue.size()", "TransformedQueue.poll()"], "external_dependencies": {"modules": ["Queue", "LinkedList", "Transformer", "TransformedQueue"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformation of a non-empty queue using the transformedQueue method."}, {"name": "testTransformedQueueWithEmptyQueue", "primary_tested": ["TransformedQueue.transformedQueue(Queue<String>,Transformer<String,String>)"], "associated_methods": ["TransformedQueue.size()"], "external_dependencies": {"modules": ["Queue", "LinkedList", "Transformer", "TransformedQueue"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformation of an empty queue using the transformedQueue method."}, {"name": "testTransformedQueueWithNullQueue", "primary_tested": ["TransformedQueue.transformedQueue(Queue<String>,Transformer<String,String>)"], "external_dependencies": {"modules": ["Queue", "Transformer", "TransformedQueue"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of the transformedQueue method when provided with a null queue."}, {"name": "testTransformedQueueWithNullTransformer", "primary_tested": ["TransformedQueue.transformedQueue(Queue<String>,Transformer<String,String>)"], "external_dependencies": {"modules": ["Queue", "LinkedList", "Transformer", "TransformedQueue"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of the transformedQueue method when provided with a null transformer."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/ComparatorUtils_maxTest.java", "testclass_name": "ComparatorUtils_maxTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.Comparator;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "ComparatorUtils_maxTest", "description": "Unit tests for the max functionality of ComparatorUtils with different comparators.", "class_members": {"variables": [{"name": "o1", "type": "Integer"}, {"name": "o2", "type": "Integer"}, {"name": "comparator", "type": "Comparator<Integer>"}]}, "test_cases": [{"name": "testMaxWithDefaultComparator", "primary_tested": ["ComparatorUtils.max(Integer,Integer,Comparator<Integer>)"], "external_dependencies": {"modules": ["ComparatorUtils", "Comparator"], "class_members": [{"name": "o1", "type": "variable"}, {"name": "o2", "type": "variable"}, {"name": "comparator", "type": "variable"}]}, "category": "unit", "description": "Tests the max functionality of ComparatorUtils with a null comparator, which should use the default comparator."}, {"name": "testMaxWithCustomComparator", "primary_tested": ["ComparatorUtils.max(Integer,Integer,Comparator<Integer>)"], "external_dependencies": {"modules": ["ComparatorUtils", "Comparator"], "class_members": [{"name": "o1", "type": "variable"}, {"name": "o2", "type": "variable"}, {"name": "comparator", "type": "variable"}]}, "category": "unit", "description": "Tests the max functionality of ComparatorUtils with a custom natural order comparator."}, {"name": "testMaxWithCustomComparatorReversed", "primary_tested": ["ComparatorUtils.max(Integer,Integer,Comparator<Integer>)"], "external_dependencies": {"modules": ["ComparatorUtils", "Comparator"], "class_members": [{"name": "o1", "type": "variable"}, {"name": "o2", "type": "variable"}, {"name": "comparator", "type": "variable"}]}, "category": "unit", "description": "Tests the max functionality of ComparatorUtils with a custom reversed order comparator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_addTest.java", "testclass_name": "IndexedCollection_addTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.Collection;", "import java.util.Collections;", "import java.util.HashMap;", "import java.util.ArrayList;"], "name": "IndexedCollection_addTest", "description": "Unit tests for the add functionality of the IndexedCollection class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testAdd", "primary_tested": ["IndexedCollection.add(String)"], "associated_methods": ["IndexedCollection.contains(String)", "IndexedCollection.get(int)"], "external_dependencies": {"modules": ["IndexedCollection", "Transformer", "ArrayList"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the add functionality of the IndexedCollection, ensuring that the element is added and can be retrieved and checked for existence."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/IteratorUtils_findTest.java", "testclass_name": "IteratorUtils_findTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Iterator;", "import java.util.function.Predicate;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "IteratorUtils_findTest", "description": "Unit tests for the find method in IteratorUtils class.", "class_members": {"variables": [{"name": "iterator", "type": "Iterator<Integer>"}, {"name": "predicate", "type": "Predicate<Integer>"}]}, "test_cases": [{"name": "testFind_ElementFound", "primary_tested": ["IteratorUtils.find(Iterator<Integer>,Predicate<Integer>)"], "external_dependencies": {"modules": ["IteratorUtils", "Arrays", "Predicate"], "class_members": [{"name": "iterator", "type": "variable"}, {"name": "predicate", "type": "variable"}]}, "category": "unit", "description": "Tests the find method when the element is found in the iterator."}, {"name": "testFind_ElementNotFound", "primary_tested": ["IteratorUtils.find(Iterator<Integer>,Predicate<Integer>)"], "external_dependencies": {"modules": ["IteratorUtils", "Arrays", "Predicate"], "class_members": [{"name": "iterator", "type": "variable"}, {"name": "predicate", "type": "variable"}]}, "category": "unit", "description": "Tests the find method when the element is not found in the iterator."}, {"name": "testFind_NullIterator", "primary_tested": ["IteratorUtils.find(Iterator<Integer>,Predicate<Integer>)"], "external_dependencies": {"modules": ["IteratorUtils", "Predicate"], "class_members": [{"name": "predicate", "type": "variable"}]}, "category": "unit", "description": "Tests the find method when the iterator is null."}, {"name": "testFind_NullPredicate", "primary_tested": ["IteratorUtils.find(Iterator<Integer>,Predicate<Integer>)"], "external_dependencies": {"modules": ["IteratorUtils", "Arrays"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "description": "Tests the find method when the predicate is null, expecting a NullPointerException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/ArrayStack_peekTest.java", "testclass_name": "ArrayStack_peekTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.EmptyStackException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ArrayStack_peekTest", "description": "Unit tests for the peek functionality of the ArrayStack class.", "class_members": {"variables": [{"name": "stack", "type": "ArrayStack<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPeekWithEmptyStack", "primary_tested": ["ArrayStack.peek()"], "external_dependencies": {"modules": ["ArrayStack", "EmptyStackException"], "class_members": [{"name": "stack", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the peek method on an empty stack, expecting an EmptyStackException."}, {"name": "testPeekWithNonEmptyStack", "primary_tested": ["ArrayStack.peek()"], "associated_methods": ["ArrayStack.push(String)", "ArrayStack.size()"], "external_dependencies": {"modules": ["ArrayStack"], "class_members": [{"name": "stack", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the peek method on a non-empty stack after pushing an item."}, {"name": "testPeekAfterPushAndPop", "primary_tested": ["ArrayStack.peek()"], "associated_methods": ["ArrayStack.push(String)", "ArrayStack.pop()", "ArrayStack.size()"], "external_dependencies": {"modules": ["ArrayStack"], "class_members": [{"name": "stack", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the peek method after pushing and popping items from the stack."}, {"name": "testPeekAfterMultiplePushes", "primary_tested": ["ArrayStack.peek()"], "associated_methods": ["ArrayStack.push(String)", "ArrayStack.size()"], "external_dependencies": {"modules": ["ArrayStack"], "class_members": [{"name": "stack", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the peek method after multiple pushes to the stack."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_containsAllTest.java", "testclass_name": "IndexedCollection_containsAllTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.Collections;", "import java.util.HashMap;", "import org.apache.commons.collections4.map.MultiValueMap;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "IndexedCollection_containsAllTest", "description": "Unit tests for the containsAll method of the IndexedCollection class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testContainsAll_AllElementsPresent", "primary_tested": ["IndexedCollection.containsAll(Collection)"], "external_dependencies": {"modules": ["IndexedCollection", "MultiValueMap", "HashMap", "Arrays", "Collection"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the containsAll method when all elements are present in the collection."}, {"name": "testContainsAll_SomeElementsMissing", "primary_tested": ["IndexedCollection.containsAll(Collection)"], "external_dependencies": {"modules": ["IndexedCollection", "MultiValueMap", "HashMap", "Arrays", "Collection"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the containsAll method when some elements are missing in the collection."}, {"name": "testContainsAll_EmptyCollection", "primary_tested": ["IndexedCollection.containsAll(Collection)"], "external_dependencies": {"modules": ["IndexedCollection", "MultiValueMap", "HashMap", "Arrays", "Collections", "Collection"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the containsAll method when the collection is empty."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_pollTest.java", "testclass_name": "CircularFifoQueue_pollTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CircularFifoQueue_pollTest", "description": "Unit tests for the poll method of CircularFifoQueue.", "class_members": {"variables": [{"name": "queue", "type": "CircularFifoQueue<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPollWhenQueueIsEmpty", "primary_tested": ["CircularFifoQueue.poll()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the poll method when the queue is empty."}, {"name": "testPollWhenQueueHasElements", "primary_tested": ["CircularFifoQueue.poll()"], "associated_methods": ["CircularFifoQueue.add(String)", "CircularFifoQueue.isEmpty()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the poll method when the queue has elements."}, {"name": "testPollWhenQueueIsFull", "primary_tested": ["CircularFifoQueue.poll()"], "associated_methods": ["CircularFifoQueue.add(String)", "CircularFifoQueue.isEmpty()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the poll method when the queue is full."}, {"name": "testPollAfterAddingAndRemovingElements", "primary_tested": ["CircularFifoQueue.poll()"], "associated_methods": ["CircularFifoQueue.add(String)", "CircularFifoQueue.isEmpty()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the poll method after adding and removing elements from the queue."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/PredicatedCollection_addAllTest.java", "testclass_name": "PredicatedCollection_addAllTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import org.apache.commons.collections4.Predicate;", "import org.apache.commons.collections4.functors.TruePredicate;", "import org.junit.jupiter.api.Test;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "PredicatedCollection_addAllTest", "description": "Unit tests for the addAll method of PredicatedCollection.", "class_members": {"variables": [{"name": "truePredicate", "type": "Predicate<String>"}, {"name": "predicatedCollection", "type": "PredicatedCollection<String>"}, {"name": "initialItems", "type": "Collection<String>"}, {"name": "newItems", "type": "Collection<String>"}]}, "test_cases": [{"name": "testAddAll", "primary_tested": ["PredicatedCollection.addAll(Collection<? extends String>)"], "associated_methods": ["PredicatedCollection.containsAll(Collection<? extends String>)"], "external_dependencies": {"modules": ["Predicate", "TruePredicate", "PredicatedCollection", "ArrayList", "Arrays"], "class_members": [{"name": "truePredicate", "type": "variable"}, {"name": "predicatedCollection", "type": "variable"}, {"name": "initialItems", "type": "variable"}, {"name": "newItems", "type": "variable"}]}, "category": "unit", "description": "Tests the addAll functionality of the PredicatedCollection, ensuring that all items are added and can be verified using containsAll."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_getTest.java", "testclass_name": "CircularFifoQueue_getTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CircularFifoQueue_getTest", "description": "Unit tests for the get method of CircularFifoQueue.", "class_members": {"variables": [{"name": "queue", "type": "CircularFifoQueue<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetValidIndex", "primary_tested": ["CircularFifoQueue.get(int)"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method with valid indices."}, {"name": "testGetInvalidIndex", "primary_tested": ["CircularFifoQueue.get(int)"], "external_dependencies": {"modules": ["CircularFifoQueue", "NoSuchElementException"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method with invalid indices, expecting NoSuchElementException."}, {"name": "testGetAfterWrapAround", "primary_tested": ["CircularFifoQueue.get(int)"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method after the queue has wrapped around."}, {"name": "testGetEmptyQueue", "primary_tested": ["CircularFifoQueue.get(int)"], "external_dependencies": {"modules": ["CircularFifoQueue", "NoSuchElementException"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method on an empty queue, expecting NoSuchElementException."}, {"name": "testGetAfterClear", "primary_tested": ["CircularFifoQueue.get(int)"], "associated_methods": ["CircularFifoQueue.clear()"], "external_dependencies": {"modules": ["CircularFifoQueue", "NoSuchElementException"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method after clearing the queue, expecting NoSuchElementException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/LazySortedMap_headMapTest.java", "testclass_name": "LazySortedMap_headMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.Factory;", "import org.junit.jupiter.api.Test;", "import java.util.SortedMap;", "import java.util.TreeMap;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "LazySortedMap_headMapTest", "description": "Unit tests for the headMap functionality of LazySortedMap.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testHeadMap", "primary_tested": ["LazySortedMap.headMap(Integer)"], "associated_methods": ["SortedMap.size()", "SortedMap.containsKey(Integer)", "SortedMap.get(Integer)"], "external_dependencies": {"modules": ["org.apache.commons.collections4.Factory", "java.util.SortedMap", "java.util.TreeMap", "org.apache.commons.collections4.map.LazySortedMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the headMap functionality of the LazySortedMap, ensuring it returns the correct sub-map."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/CollectionSortedBag_retainAllTest.java", "testclass_name": "CollectionSortedBag_retainAllTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import org.apache.commons.collections4.SortedBag;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import org.mockito.Mockito;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.Iterator;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.mockito.Mockito.*;"], "name": "CollectionSortedBag_retainAllTest", "description": "Unit tests for the retainAll method in CollectionSortedBag.", "class_members": {"variables": [{"name": "bag", "type": "CollectionSortedBag<String>"}, {"name": "mockBag", "type": "SortedBag<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRetainAll_NonEmptyCollection", "primary_tested": ["CollectionSortedBag.retainAll(Collection)"], "associated_methods": ["SortedBag.iterator()", "Iterator.hasNext()", "Iterator.next()", "SortedBag.contains(Object)", "Iterator.remove()"], "external_dependencies": {"modules": ["org.apache.commons.collections4.SortedBag", "org.mockito.Mockito", "java.util.Arrays", "java.util.Collection", "java.util.Iterator"], "class_members": [{"name": "bag", "type": "variable"}, {"name": "mockBag", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retainAll method with a non-empty collection, ensuring that elements not in the collection are removed."}, {"name": "testRetainAll_NullCollection", "primary_tested": ["CollectionSortedBag.retainAll(Collection)"], "associated_methods": ["SortedBag.retainAll(Collection)"], "external_dependencies": {"modules": ["org.apache.commons.collections4.SortedBag", "org.mockito.Mockito", "java.util.Collection"], "class_members": [{"name": "bag", "type": "variable"}, {"name": "mockBag", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retainAll method with a null collection, ensuring that the method handles null input correctly."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/UnmodifiableOrderedMap_valuesTest.java", "testclass_name": "UnmodifiableOrderedMap_valuesTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.OrderedMap;", "import org.apache.commons.collections4.collection.UnmodifiableCollection;", "import org.junit.jupiter.api.Test;", "import java.util.Collection;", "import java.util.HashMap;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "UnmodifiableOrderedMap_valuesTest", "description": "Tests the behavior of the values() method in UnmodifiableOrderedMap to ensure it returns an unmodifiable collection.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testValuesReturnsUnmodifiableCollection", "primary_tested": ["OrderedMap.values()"], "external_dependencies": {"modules": ["OrderedMap", "UnmodifiableCollection", "HashMap", "Map"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the values() method of UnmodifiableOrderedMap returns an instance of UnmodifiableCollection."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_reindexTest.java", "testclass_name": "IndexedCollection_reindexTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import org.apache.commons.collections4.MultiMap;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.map.MultiValueMap;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.Collection;", "import java.util.HashMap;", "import java.util.HashSet;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;"], "name": "IndexedCollection_reindexTest", "description": "Unit tests for the reindex functionality of the IndexedCollection class.", "class_members": {"variables": [{"name": "indexedCollection", "type": "IndexedCollection<String, String>"}, {"name": "mockIndex", "type": "MultiMap<String, String>"}, {"name": "mockKeyTransformer", "type": "Transformer<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testReindex", "primary_tested": ["IndexedCollection.reindex()"], "associated_methods": ["IndexedCollection.get(String)", "IndexedCollection.contains(String)"], "external_dependencies": {"modules": ["IndexedCollection", "MultiMap", "Transformer", "MultiValueMap", "HashMap", "HashSet"], "class_members": [{"name": "indexedCollection", "type": "variable"}, {"name": "mockIndex", "type": "variable"}, {"name": "mockKeyTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the reindex functionality of the IndexedCollection, ensuring that elements are correctly indexed and retrievable."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_elementTest.java", "testclass_name": "CircularFifoQueue_elementTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CircularFifoQueue_elementTest", "description": "Unit tests for the element method of CircularFifoQueue.", "class_members": {"variables": [{"name": "queue", "type": "CircularFifoQueue<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testElementWhenQueueIsEmpty", "primary_tested": ["CircularFifoQueue.element()"], "external_dependencies": {"modules": ["CircularFifoQueue", "NoSuchElementException"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the element method when the queue is empty, expecting a NoSuchElementException."}, {"name": "testElementWhenQueueHasElements", "primary_tested": ["CircularFifoQueue.element()"], "associated_methods": ["CircularFifoQueue.add(String)"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the element method when the queue has elements, expecting the first element added."}, {"name": "testElementAfterAddingAndRemovingElements", "primary_tested": ["CircularFifoQueue.element()"], "associated_methods": ["CircularFifoQueue.add(String)", "CircularFifoQueue.remove()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the element method after adding and removing elements, expecting the new first element."}, {"name": "testElementAfterQueueIsFull", "primary_tested": ["CircularFifoQueue.element()"], "associated_methods": ["CircularFifoQueue.add(String)"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the element method after the queue is full, expecting the first element after the queue has wrapped around."}, {"name": "testElementAfterClearingQueue", "primary_tested": ["CircularFifoQueue.element()"], "associated_methods": ["CircularFifoQueue.add(String)", "CircularFifoQueue.clear()"], "external_dependencies": {"modules": ["CircularFifoQueue", "NoSuchElementException"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the element method after clearing the queue, expecting a NoSuchElementException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_removeIfTest.java", "testclass_name": "CompositeCollection_removeIfTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.List;", "import java.util.function.Predicate;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeCollection_removeIfTest", "description": "Unit tests for the removeIf functionality of the CompositeCollection class.", "class_members": {"variables": [{"name": "c", "type": "CompositeCollection<String>"}, {"name": "one", "type": "Collection<String>"}, {"name": "two", "type": "Collection<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveIf_AllElementsRemoved", "primary_tested": ["CompositeCollection.removeIf(Predicate<String>)"], "external_dependencies": {"modules": ["CompositeCollection", "Predicate"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeIf functionality when all elements are removed."}, {"name": "testRemoveIf_NoElementsRemoved", "primary_tested": ["CompositeCollection.removeIf(Predicate<String>)"], "external_dependencies": {"modules": ["CompositeCollection", "Predicate"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeIf functionality when no elements are removed."}, {"name": "testRemoveIf_SomeElementsRemoved", "primary_tested": ["CompositeCollection.removeIf(Predicate<String>)"], "external_dependencies": {"modules": ["CompositeCollection", "Predicate"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeIf functionality when some elements are removed."}, {"name": "testRemoveIf_NullFilter", "primary_tested": ["CompositeCollection.removeIf(Predicate<String>)"], "external_dependencies": {"modules": ["CompositeCollection"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeIf functionality when the filter is null."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/TransformedCollection_transformedCollectionTest.java", "testclass_name": "TransformedCollection_transformedCollectionTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.Test;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.Collections;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "TransformedCollection_transformedCollectionTest", "description": "Unit tests for the TransformedCollection class, specifically testing the transformedCollection method with different types of collections.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testTransformedCollectionWithNonEmptyCollection", "primary_tested": ["TransformedCollection.transformedCollection(Collection<String>,Transformer<String,String>)"], "associated_methods": ["TransformedCollection.size()", "TransformedCollection.contains(String)"], "external_dependencies": {"modules": ["org.apache.commons.collections4.Transformer", "java.util.ArrayList", "java.util.Arrays", "java.util.Collection", "org.apache.commons.collections4.collection.TransformedCollection"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformedCollection method with a non-empty collection, ensuring the transformation is applied correctly and the transformed collection contains the expected elements."}, {"name": "testTransformedCollectionWithEmptyCollection", "primary_tested": ["TransformedCollection.transformedCollection(Collection<String>,Transformer<String,String>)"], "associated_methods": ["TransformedCollection.isEmpty()"], "external_dependencies": {"modules": ["org.apache.commons.collections4.Transformer", "java.util.Collections", "java.util.Collection", "org.apache.commons.collections4.collection.TransformedCollection"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformedCollection method with an empty collection, ensuring the transformed collection is also empty."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_removeTest.java", "testclass_name": "CircularFifoQueue_removeTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CircularFifoQueue_removeTest", "description": "Unit tests for the remove functionality of the CircularFifoQueue class.", "class_members": {"variables": [{"name": "queue", "type": "CircularFifoQueue<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveWhenQueueIsEmpty", "primary_tested": ["CircularFifoQueue.remove()"], "external_dependencies": {"modules": ["CircularFifoQueue", "NoSuchElementException"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior of the remove method when the queue is empty, expecting a NoSuchElementException."}, {"name": "testRemoveSingleElement", "primary_tested": ["CircularFifoQueue.remove()"], "associated_methods": ["CircularFifoQueue.add(String)", "CircularFifoQueue.size()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of a single element from the queue."}, {"name": "testRemoveMultipleElements", "primary_tested": ["CircularFifoQueue.remove()"], "associated_methods": ["CircularFifoQueue.add(String)", "CircularFifoQueue.peek()", "CircularFifoQueue.size()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of multiple elements from the queue."}, {"name": "testRemoveWithWrapAround", "primary_tested": ["CircularFifoQueue.remove()"], "associated_methods": ["CircularFifoQueue.add(String)", "CircularFifoQueue.peek()", "CircularFifoQueue.size()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of elements from the queue when it wraps around."}, {"name": "testRemoveAllElements", "primary_tested": ["CircularFifoQueue.remove()"], "associated_methods": ["CircularFifoQueue.add(String)", "CircularFifoQueue.size()"], "external_dependencies": {"modules": ["CircularFifoQueue", "NoSuchElementException"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of all elements from the queue, expecting a NoSuchElementException when attempting to remove from an empty queue."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/CompositeMap_entrySetTest.java", "testclass_name": "CompositeMap_entrySetTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.set.CompositeSet;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;", "import java.util.Set;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "CompositeMap_entrySetTest", "description": "Unit tests for the entrySet method of the CompositeMap class.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testEntrySet", "primary_tested": ["CompositeMap.entrySet()"], "associated_methods": ["CompositeSet.containsAll(Collection<?>)", "CompositeSet.size()"], "external_dependencies": {"modules": ["CompositeMap", "HashMap", "Map", "Set"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the entrySet method of the CompositeMap class, ensuring it correctly combines entries from multiple maps."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_addAllTest.java", "testclass_name": "CompositeCollection_addAllTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeCollection_addAllTest", "description": "Unit tests for the addAll functionality of the CompositeCollection class.", "class_members": {"variables": [{"name": "c", "type": "CompositeCollection<String>"}, {"name": "one", "type": "Collection<String>"}, {"name": "two", "type": "Collection<String>"}]}, "fixtures": ["setUpTest"], "test_cases": [{"name": "testAddAllWithMutator", "primary_tested": ["CompositeCollection.addAll(Collection<? extends String>)"], "associated_methods": ["CompositeCollection.setMutator(CompositeCollection.CollectionMutator<String>)", "CompositeCollection.addComposited(Collection<String>)", "CompositeCollection.size()", "CompositeCollection.containsAll(Collection<? extends String>)"], "external_dependencies": {"modules": ["CompositeCollection", "Collection", "ArrayList", "Arrays", "HashSet"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the addAll functionality of the CompositeCollection with a custom mutator."}, {"name": "testAddAllWithoutMutator", "primary_tested": ["CompositeCollection.addAll(Collection<? extends String>)"], "associated_methods": ["CompositeCollection.addComposited(Collection<String>)"], "external_dependencies": {"modules": ["CompositeCollection", "Collection", "ArrayList", "Arrays", "HashSet"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the addAll functionality of the CompositeCollection without a mutator, expecting an UnsupportedOperationException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_removeTest.java", "testclass_name": "PassiveExpiringMap_removeTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;"], "name": "PassiveExpiringMap_removeTest", "description": "Unit tests for the remove functionality of PassiveExpiringMap.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testRemove", "primary_tested": ["PassiveExpiringMap.remove(String)"], "associated_methods": ["PassiveExpiringMap.get(String)"], "external_dependencies": {"modules": ["java.util.HashMap", "java.util.Map", "org.apache.commons.collections4.map.PassiveExpiringMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the remove functionality of the PassiveExpiringMap, ensuring that the value is removed and can no longer be retrieved."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_removeMultiKeyTest.java", "testclass_name": "MultiKeyMap_removeMultiKeyTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.keyvalue.MultiKey;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "MultiKeyMap_removeMultiKeyTest", "description": "Unit tests for the removeMultiKey functionality of the MultiKeyMap class.", "class_members": {"variables": [{"name": "map", "type": "MultiKeyMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveMultiKey_KeyExists", "primary_tested": ["MultiKeyMap.removeMultiKey(String,String)"], "associated_methods": ["MultiKeyMap.put(String,String,String)", "MultiKeyMap.containsKey(String,String)"], "external_dependencies": {"modules": ["MultiKeyMap", "MultiKey"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of a key-value pair from the MultiKeyMap when the key exists."}, {"name": "testRemoveMultiKey_KeyDoesNotExist", "primary_tested": ["MultiKeyMap.removeMultiKey(String,String)"], "external_dependencies": {"modules": ["MultiKeyMap", "MultiKey"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of a key-value pair from the MultiKeyMap when the key does not exist."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_cloneTest.java", "testclass_name": "MultiKeyMap_cloneTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "MultiKeyMap_cloneTest", "description": "Unit tests for the clone functionality of the MultiKeyMap class.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testClone", "primary_tested": ["MultiKeyMap.clone()"], "associated_methods": ["MultiKeyMap.put(String,String,String)", "MultiKeyMap.get(String,String)"], "external_dependencies": {"modules": ["MultiKeyMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the clone functionality of the MultiKeyMap to ensure that the cloned map contains the same values as the original."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_nonUniqueIndexedCollectionTest.java", "testclass_name": "IndexedCollection_nonUniqueIndexedCollectionTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Arrays;", "import java.util.Collection;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "IndexedCollection_nonUniqueIndexedCollectionTest", "description": "Tests for the non-unique indexed collection functionality in the IndexedCollection class.", "class_members": {"variables": [{"name": "keyTransformer", "type": "Transformer<String, Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNonUniqueIndexedCollection", "primary_tested": ["IndexedCollection.nonUniqueIndexedCollection(Collection<String>,Transformer<String,Integer>)"], "associated_methods": ["IndexedCollection.size()", "IndexedCollection.contains(String)"], "external_dependencies": {"modules": ["IndexedCollection", "Transformer", "Arrays"], "class_members": [{"name": "keyTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the creation and basic operations of a non-unique indexed collection with a non-empty collection."}, {"name": "testNonUniqueIndexedCollectionWithEmptyCollection", "primary_tested": ["IndexedCollection.nonUniqueIndexedCollection(Collection<String>,Transformer<String,Integer>)"], "associated_methods": ["IndexedCollection.size()"], "external_dependencies": {"modules": ["IndexedCollection", "Transformer", "Arrays"], "class_members": [{"name": "keyTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the creation and basic operations of a non-unique indexed collection with an empty collection."}, {"name": "testNonUniqueIndexedCollectionWithDuplicateKeys", "primary_tested": ["IndexedCollection.nonUniqueIndexedCollection(Collection<String>,Transformer<String,Integer>)"], "associated_methods": ["IndexedCollection.size()", "IndexedCollection.contains(String)"], "external_dependencies": {"modules": ["IndexedCollection", "Transformer", "Arrays"], "class_members": [{"name": "keyTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the creation and basic operations of a non-unique indexed collection with duplicate keys."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_previousKeyTest.java", "testclass_name": "ListOrderedMap_previousKeyTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ListOrderedMap_previousKeyTest", "description": "Unit tests for the previousKey method in ListOrderedMap.", "class_members": {"variables": [{"name": "listOrderedMap", "type": "ListOrderedMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPreviousKeyWithExistingKey", "primary_tested": ["ListOrderedMap.previousKey(String)"], "external_dependencies": {"modules": ["ListOrderedMap"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the previousKey method with an existing key in the ListOrderedMap."}, {"name": "testPreviousKeyWithFirstKey", "primary_tested": ["ListOrderedMap.previousKey(String)"], "external_dependencies": {"modules": ["ListOrderedMap"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the previousKey method with the first key in the ListOrderedMap."}, {"name": "testPreviousKeyWithNonExistingKey", "primary_tested": ["ListOrderedMap.previousKey(String)"], "external_dependencies": {"modules": ["ListOrderedMap"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the previousKey method with a non-existing key in the ListOrderedMap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_iteratorTest.java", "testclass_name": "CircularFifoQueue_iteratorTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.Iterator;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CircularFifoQueue_iteratorTest", "description": "Unit tests for the iterator functionality of the CircularFifoQueue class.", "class_members": {"variables": [{"name": "queue", "type": "CircularFifoQueue<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testIteratorHasNext", "primary_tested": ["Iterator.hasNext()"], "external_dependencies": {"modules": ["CircularFifoQueue", "Iterator"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method of the iterator for the CircularFifoQueue."}, {"name": "testIteratorNext", "primary_tested": ["Iterator.next()"], "external_dependencies": {"modules": ["CircularFifoQueue", "Iterator", "NoSuchElementException"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method of the iterator for the CircularFifoQueue, including handling of NoSuchElementException."}, {"name": "testIteratorRemove", "primary_tested": ["Iterator.remove()"], "associated_methods": ["CircularFifoQueue.size()", "CircularFifoQueue.get(int)"], "external_dependencies": {"modules": ["CircularFifoQueue", "Iterator"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the remove method of the iterator for the CircularFifoQueue, ensuring elements are correctly removed and queue size is updated."}, {"name": "testIteratorRemoveFirstElement", "primary_tested": ["Iterator.remove()"], "associated_methods": ["CircularFifoQueue.size()", "CircularFifoQueue.get(int)"], "external_dependencies": {"modules": ["CircularFifoQueue", "Iterator"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the remove method of the iterator for the CircularFifoQueue when removing the first element."}, {"name": "testIteratorRemoveWithoutNext", "primary_tested": ["Iterator.remove()"], "external_dependencies": {"modules": ["CircularFifoQueue", "Iterator", "IllegalStateException"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the remove method of the iterator for the CircularFifoQueue without calling next, expecting an IllegalStateException."}, {"name": "testIteratorRemoveFullQueue", "primary_tested": ["Iterator.remove()"], "associated_methods": ["CircularFifoQueue.size()", "CircularFifoQueue.get(int)"], "external_dependencies": {"modules": ["CircularFifoQueue", "Iterator"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the remove method of the iterator for the CircularFifoQueue when the queue is full."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_containsKeyTest.java", "testclass_name": "PassiveExpiringMap_containsKeyTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;"], "name": "PassiveExpiringMap_containsKeyTest", "description": "Unit tests for the containsKey method in PassiveExpiringMap.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testContainsKey_KeyExistsAndNotExpired", "primary_tested": ["PassiveExpiringMap.containsKey(String)"], "external_dependencies": {"modules": ["PassiveExpiringMap", "HashMap", "Map"]}, "category": "unit", "description": "Tests that the containsKey method returns true when the key exists and is not expired."}, {"name": "testContainsKey_KeyExistsButExpired", "primary_tested": ["PassiveExpiringMap.containsKey(String)"], "external_dependencies": {"modules": ["PassiveExpiringMap", "HashMap", "Map"]}, "category": "unit", "description": "Tests that the containsKey method returns false when the key exists but is expired."}, {"name": "testContainsKey_KeyDoesNotExist", "primary_tested": ["PassiveExpiringMap.containsKey(String)"], "external_dependencies": {"modules": ["PassiveExpiringMap", "HashMap", "Map"]}, "category": "unit", "description": "Tests that the containsKey method returns false when the key does not exist."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_isEmptyTest.java", "testclass_name": "CompositeCollection_isEmptyTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Collection;", "import java.util.HashSet;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeCollection_isEmptyTest", "description": "Unit tests for the isEmpty functionality of the CompositeCollection class.", "class_members": {"variables": [{"name": "c", "type": "CompositeCollection<String>"}, {"name": "one", "type": "Collection<String>"}, {"name": "two", "type": "Collection<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testIsEmptyWhenAllCollectionsAreEmpty", "primary_tested": ["CompositeCollection.isEmpty()"], "associated_methods": ["CompositeCollection.addComposited(Collection<String>)"], "external_dependencies": {"modules": ["CompositeCollection", "Collection"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isEmpty method when all collections in the CompositeCollection are empty."}, {"name": "testIsEmptyWhenOneCollectionIsNotEmpty", "primary_tested": ["CompositeCollection.isEmpty()"], "associated_methods": ["CompositeCollection.addComposited(Collection<String>)"], "external_dependencies": {"modules": ["CompositeCollection", "Collection"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isEmpty method when one collection in the CompositeCollection is not empty."}, {"name": "testIsEmptyAfterAddingAndRemovingCollections", "primary_tested": ["CompositeCollection.isEmpty()"], "associated_methods": ["CompositeCollection.addComposited(Collection<String>)", "CompositeCollection.removeComposited(Collection<String>)"], "external_dependencies": {"modules": ["CompositeCollection", "Collection", "ArrayList"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isEmpty method after adding and removing collections from the CompositeCollection."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_containsTest.java", "testclass_name": "IndexedCollection_containsTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static java.util.Arrays.asList;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Collection;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "IndexedCollection_containsTest", "description": "Unit tests for the contains functionality of the IndexedCollection class.", "class_members": {"variables": [{"name": "indexedCollection", "type": "IndexedCollection<Integer, String>"}, {"name": "originalCollection", "type": "Collection<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testContainsReturnsTrueForExistingElement", "primary_tested": ["IndexedCollection.contains(String)"], "external_dependencies": {"modules": ["IndexedCollection", "Collection"], "class_members": [{"name": "indexedCollection", "type": "variable"}, {"name": "originalCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the contains method returns true for elements that exist in the IndexedCollection."}, {"name": "testContainsReturnsFalseForNonExistingElement", "primary_tested": ["IndexedCollection.contains(String)"], "external_dependencies": {"modules": ["IndexedCollection", "Collection"], "class_members": [{"name": "indexedCollection", "type": "variable"}, {"name": "originalCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the contains method returns false for elements that do not exist in the IndexedCollection."}, {"name": "testContainsAfterReindex", "primary_tested": ["IndexedCollection.contains(String)"], "associated_methods": ["IndexedCollection.reindex()"], "external_dependencies": {"modules": ["IndexedCollection", "Collection"], "class_members": [{"name": "indexedCollection", "type": "variable"}, {"name": "originalCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the contains method after reindexing the IndexedCollection."}, {"name": "testContainsAfterElementRemoval", "primary_tested": ["IndexedCollection.contains(String)"], "associated_methods": ["IndexedCollection.reindex()"], "external_dependencies": {"modules": ["IndexedCollection", "Collection"], "class_members": [{"name": "indexedCollection", "type": "variable"}, {"name": "originalCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the contains method after removing an element and reindexing the IndexedCollection."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/SingletonMap_hashCodeTest.java", "testclass_name": "SingletonMap_hashCodeTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import org.junit.jupiter.api.Test;"], "name": "SingletonMap_hashCodeTest", "description": "Unit tests for the hashCode method of the SingletonMap class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testHashCodeWithNonNullKeyAndValue", "primary_tested": ["SingletonMap.hashCode()"], "external_dependencies": {"modules": ["SingletonMap", "String"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the hashCode method of SingletonMap with non-null key and value."}, {"name": "testHashCodeWithNullKeyAndNonNullValue", "primary_tested": ["SingletonMap.hashCode()"], "external_dependencies": {"modules": ["SingletonMap", "String"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the hashCode method of SingletonMap with null key and non-null value."}, {"name": "testHashCodeWithNonNullKeyAndNullValue", "primary_tested": ["SingletonMap.hashCode()"], "external_dependencies": {"modules": ["SingletonMap", "String"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the hashCode method of SingletonMap with non-null key and null value."}, {"name": "testHashCodeWithNullKeyAndNullValue", "primary_tested": ["SingletonMap.hashCode()"], "external_dependencies": {"modules": ["SingletonMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the hashCode method of SingletonMap with null key and null value."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_getTest.java", "testclass_name": "IndexedCollection_getTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static java.util.Arrays.asList;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.ArrayList;", "import java.util.Collection;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "IndexedCollection_getTest", "description": "Unit tests for the get method of the IndexedCollection class.", "class_members": {"variables": [{"name": "indexedCollection", "type": "IndexedCollection<Integer, String>"}, {"name": "originalCollection", "type": "Collection<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetReturnsFirstElementForExistingKey", "primary_tested": ["IndexedCollection.get(Integer)"], "external_dependencies": {"modules": ["IndexedCollection", "Collection"], "class_members": [{"name": "indexedCollection", "type": "variable"}, {"name": "originalCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the get method returns the correct element for existing keys."}, {"name": "testGetReturnsNullForNonExistingKey", "primary_tested": ["IndexedCollection.get(Integer)"], "external_dependencies": {"modules": ["IndexedCollection", "Collection"], "class_members": [{"name": "indexedCollection", "type": "variable"}, {"name": "originalCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the get method returns null for non-existing keys."}, {"name": "testGetReturnsNullForEmptyCollection", "primary_tested": ["IndexedCollection.get(Integer)"], "external_dependencies": {"modules": ["IndexedCollection"], "class_members": [{"name": "indexedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the get method returns null for an empty collection."}, {"name": "testGetReturnsFirstElementAfterReindex", "primary_tested": ["IndexedCollection.get(Integer)"], "associated_methods": ["IndexedCollection.reindex()"], "external_dependencies": {"modules": ["IndexedCollection", "Collection"], "class_members": [{"name": "indexedCollection", "type": "variable"}, {"name": "originalCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the get method returns the correct element after reindexing the collection."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_retainAllTest.java", "testclass_name": "IndexedCollection_retainAllTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static java.util.Arrays.asList;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Collection;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "IndexedCollection_retainAllTest", "description": "Unit tests for the retainAll functionality of the IndexedCollection class.", "class_members": {"variables": [{"name": "indexedCollection", "type": "IndexedCollection<Integer, String>"}, {"name": "originalCollection", "type": "Collection<String>"}], "methods": [{"name": "decorateUniqueCollection", "signature": "IndexedCollection<Integer, String> decorateUniqueCollection(Collection<String> original)"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRetainAllWithMatchingElements", "primary_tested": ["IndexedCollection.retainAll(Collection<String>)"], "external_dependencies": {"modules": ["IndexedCollection", "Collection"], "class_members": [{"name": "indexedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retainAll functionality with matching elements."}, {"name": "testRetainAllWithNoMatchingElements", "primary_tested": ["IndexedCollection.retainAll(Collection<String>)"], "external_dependencies": {"modules": ["IndexedCollection", "Collection"], "class_members": [{"name": "indexedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retainAll functionality with no matching elements."}, {"name": "testRetainAllWithAllMatchingElements", "primary_tested": ["IndexedCollection.retainAll(Collection<String>)"], "external_dependencies": {"modules": ["IndexedCollection", "Collection"], "class_members": [{"name": "indexedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retainAll functionality with all matching elements."}, {"name": "testRetainAllWithEmptyCollection", "primary_tested": ["IndexedCollection.retainAll(Collection<String>)"], "external_dependencies": {"modules": ["IndexedCollection", "Collection"], "class_members": [{"name": "indexedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retainAll functionality with an empty collection."}, {"name": "testRetainAllWithNullCollection", "primary_tested": ["IndexedCollection.retainAll(Collection<String>)"], "external_dependencies": {"modules": ["IndexedCollection", "Collection"], "class_members": [{"name": "indexedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retainAll functionality with a null collection, expecting a NullPointerException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_addTest.java", "testclass_name": "CompositeCollection_addTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeCollection_addTest", "description": "Unit tests for the add functionality of the CompositeCollection class.", "class_members": {"variables": [{"name": "c", "type": "CompositeCollection<String>"}, {"name": "one", "type": "Collection<String>"}, {"name": "two", "type": "Collection<String>"}]}, "fixtures": ["setUpTest"], "test_cases": [{"name": "testAddWithMutator", "primary_tested": ["CompositeCollection.add(String)"], "associated_methods": ["CompositeCollection.setMutator(CompositeCollection.CollectionMutator<String>)", "CompositeCollection.addComposited(Collection<String>)", "Collection.contains(String)"], "external_dependencies": {"modules": ["CompositeCollection", "Collection", "List"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the add functionality of the CompositeCollection with a mutator."}, {"name": "testAddWithoutMutator", "primary_tested": ["CompositeCollection.add(String)"], "external_dependencies": {"modules": ["CompositeCollection"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the add functionality of the CompositeCollection without a mutator, expecting an UnsupportedOperationException."}, {"name": "testAddIncreasesSize", "primary_tested": ["CompositeCollection.add(String)"], "associated_methods": ["CompositeCollection.setMutator(CompositeCollection.CollectionMutator<String>)", "CompositeCollection.addComposited(Collection<String>)", "CompositeCollection.size()"], "external_dependencies": {"modules": ["CompositeCollection", "Collection", "List"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests that adding an element to the CompositeCollection increases its size."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_retainAllTest.java", "testclass_name": "CompositeCollection_retainAllTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeCollection_retainAllTest", "description": "Unit tests for the retainAll method of the CompositeCollection class.", "class_members": {"variables": [{"name": "c", "type": "CompositeCollection<String>"}, {"name": "one", "type": "Collection<String>"}, {"name": "two", "type": "Collection<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRetainAllWithMatchingElements", "primary_tested": ["CompositeCollection.retainAll(Collection<String>)"], "external_dependencies": {"modules": ["CompositeCollection", "Collection", "HashSet", "Arrays"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retainAll method with matching elements."}, {"name": "testRetainAllWithNoMatchingElements", "primary_tested": ["CompositeCollection.retainAll(Collection<String>)"], "external_dependencies": {"modules": ["CompositeCollection", "Collection", "HashSet", "Arrays"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retainAll method with no matching elements."}, {"name": "testRetainAllWithNullCollection", "primary_tested": ["CompositeCollection.retainAll(Collection<String>)"], "external_dependencies": {"modules": ["CompositeCollection"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retainAll method with a null collection."}, {"name": "testRetainAllWithEmptyCollection", "primary_tested": ["CompositeCollection.retainAll(Collection<String>)"], "external_dependencies": {"modules": ["CompositeCollection", "Collection", "ArrayList"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retainAll method with an empty collection."}, {"name": "testRetainAllWithAllElementsMatching", "primary_tested": ["CompositeCollection.retainAll(Collection<String>)"], "external_dependencies": {"modules": ["CompositeCollection", "Collection", "HashSet", "Arrays"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retainAll method with all elements matching."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_lastKeyTest.java", "testclass_name": "ListOrderedMap_lastKeyTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ListOrderedMap_lastKeyTest", "description": "Unit tests for the lastKey method of the ListOrderedMap class.", "class_members": {"variables": [{"name": "listOrderedMap", "type": "ListOrderedMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testLastKey_EmptyMap", "primary_tested": ["ListOrderedMap.lastKey()"], "external_dependencies": {"modules": ["ListOrderedMap", "NoSuchElementException"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the lastKey method when the map is empty, expecting a NoSuchElementException."}, {"name": "testLastKey_NonEmptyMap", "primary_tested": ["ListOrderedMap.lastKey()"], "external_dependencies": {"modules": ["ListOrderedMap"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the lastKey method when the map is non-empty, expecting the last key added."}, {"name": "testLastKey_AfterRemoval", "primary_tested": ["ListOrderedMap.lastKey()"], "associated_methods": ["ListOrderedMap.remove(String)"], "external_dependencies": {"modules": ["ListOrderedMap"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the lastKey method after removing an element, expecting the new last key."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_peekTest.java", "testclass_name": "CircularFifoQueue_peekTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CircularFifoQueue_peekTest", "description": "Unit tests for the peek functionality of the CircularFifoQueue class.", "class_members": {"variables": [{"name": "queue", "type": "CircularFifoQueue<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPeekWhenQueueIsEmpty", "primary_tested": ["CircularFifoQueue.peek()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the peek method when the queue is empty."}, {"name": "testPeekWhenQueueHasOneElement", "primary_tested": ["CircularFifoQueue.peek()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the peek method when the queue has one element."}, {"name": "testPeekWhenQueueIsFull", "primary_tested": ["CircularFifoQueue.peek()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the peek method when the queue is full."}, {"name": "testPeekAfterRemovingElements", "primary_tested": ["CircularFifoQueue.peek()"], "associated_methods": ["CircularFifoQueue.remove()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the peek method after removing elements from the queue."}, {"name": "testPeekAfterAddingMoreThanCapacity", "primary_tested": ["CircularFifoQueue.peek()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the peek method after adding more elements than the queue's capacity."}, {"name": "testPeekAfterClear", "primary_tested": ["CircularFifoQueue.peek()"], "associated_methods": ["CircularFifoQueue.clear()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the peek method after clearing the queue."}, {"name": "testPeekAfterRemovingAllElements", "primary_tested": ["CircularFifoQueue.peek()"], "associated_methods": ["CircularFifoQueue.remove()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the peek method after removing all elements from the queue."}, {"name": "testPeekWithNoSuchElementException", "primary_tested": ["CircularFifoQueue.element()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the element method to ensure it throws NoSuchElementException when the queue is empty."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_iteratorTest.java", "testclass_name": "CompositeCollection_iteratorTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.Iterator;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeCollection_iteratorTest", "description": "Unit tests for the iterator functionality of the CompositeCollection class.", "class_members": {"variables": [{"name": "c", "type": "CompositeCollection<String>"}, {"name": "one", "type": "Collection<String>"}, {"name": "two", "type": "Collection<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testIteratorWithEmptyCompositeCollection", "primary_tested": ["CompositeCollection.iterator()"], "external_dependencies": {"modules": ["CompositeCollection", "Iterator"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the iterator functionality when the CompositeCollection is empty."}, {"name": "testIteratorWithSingleCollection", "primary_tested": ["CompositeCollection.iterator()"], "associated_methods": ["CompositeCollection.addComposited(Collection<String>)"], "external_dependencies": {"modules": ["CompositeCollection", "Iterator", "Collection", "HashSet", "ArrayList"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the iterator functionality when the CompositeCollection contains a single collection."}, {"name": "testIteratorWithMultipleCollections", "primary_tested": ["CompositeCollection.iterator()"], "associated_methods": ["CompositeCollection.addComposited(Collection<String>)"], "external_dependencies": {"modules": ["CompositeCollection", "Iterator", "Collection", "HashSet", "ArrayList"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the iterator functionality when the CompositeCollection contains multiple collections."}, {"name": "testIteratorAfterRemovingCollection", "primary_tested": ["CompositeCollection.iterator()"], "associated_methods": ["CompositeCollection.addComposited(Collection<String>)", "CompositeCollection.removeComposited(Collection<String>)"], "external_dependencies": {"modules": ["CompositeCollection", "Iterator", "Collection", "HashSet", "ArrayList"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the iterator functionality after removing a collection from the CompositeCollection."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/ArrayStack_searchTest.java", "testclass_name": "ArrayStack_searchTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.EmptyStackException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ArrayStack_searchTest", "description": "Unit tests for the search functionality of the ArrayStack class.", "class_members": {"variables": [{"name": "stack", "type": "ArrayStack<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testSearchElementFound", "primary_tested": ["ArrayStack.search(String)"], "associated_methods": ["ArrayStack.push(String)"], "external_dependencies": {"modules": ["ArrayStack"], "class_members": [{"name": "stack", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the search functionality when the element is found in the stack."}, {"name": "testSearchElementNotFound", "primary_tested": ["ArrayStack.search(String)"], "associated_methods": ["ArrayStack.push(String)"], "external_dependencies": {"modules": ["ArrayStack"], "class_members": [{"name": "stack", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the search functionality when the element is not found in the stack."}, {"name": "testSearchNullElement", "primary_tested": ["ArrayStack.search(String)"], "associated_methods": ["ArrayStack.push(String)"], "external_dependencies": {"modules": ["ArrayStack"], "class_members": [{"name": "stack", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the search functionality when the element to search is null."}, {"name": "testSearchEmptyStack", "primary_tested": ["ArrayStack.search(String)"], "external_dependencies": {"modules": ["ArrayStack"], "class_members": [{"name": "stack", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the search functionality when the stack is empty."}, {"name": "testSearchAfterPop", "primary_tested": ["ArrayStack.search(String)"], "associated_methods": ["ArrayStack.push(String)", "ArrayStack.pop()"], "external_dependencies": {"modules": ["ArrayStack"], "class_members": [{"name": "stack", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the search functionality after performing a pop operation."}, {"name": "testSearchAfterPeek", "primary_tested": ["ArrayStack.search(String)"], "associated_methods": ["ArrayStack.push(String)", "ArrayStack.peek()"], "external_dependencies": {"modules": ["ArrayStack"], "class_members": [{"name": "stack", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the search functionality after performing a peek operation."}, {"name": "testSearchAfterPeekWithIndex", "primary_tested": ["ArrayStack.search(String)"], "associated_methods": ["ArrayStack.push(String)", "ArrayStack.peek(int)"], "external_dependencies": {"modules": ["ArrayStack"], "class_members": [{"name": "stack", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the search functionality after performing a peek operation with an index."}, {"name": "testSearchWithEmptyStackException", "primary_tested": ["ArrayStack.peek()", "ArrayStack.pop()"], "external_dependencies": {"modules": ["ArrayStack", "EmptyStackException"], "class_members": [{"name": "stack", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior of peek and pop operations when the stack is empty, expecting an EmptyStackException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_removeAllTest.java", "testclass_name": "CompositeCollection_removeAllTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeCollection_removeAllTest", "description": "Unit tests for the removeAll functionality of the CompositeCollection class.", "class_members": {"variables": [{"name": "c", "type": "CompositeCollection<String>"}, {"name": "one", "type": "Collection<String>"}, {"name": "two", "type": "Collection<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveAllWithEmptyCollection", "primary_tested": ["CompositeCollection.removeAll(Collection<? extends E>)"], "associated_methods": ["CompositeCollection.addComposited(Collection<? extends E>)", "CompositeCollection.contains(Object)"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet", "ArrayList"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeAll functionality with an empty collection."}, {"name": "testRemoveAllWithNonEmptyCollection", "primary_tested": ["CompositeCollection.removeAll(Collection<? extends E>)"], "associated_methods": ["CompositeCollection.addComposited(Collection<? extends E>)", "CompositeCollection.contains(Object)"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeAll functionality with a non-empty collection."}, {"name": "testRemoveAllWithAllElements", "primary_tested": ["CompositeCollection.removeAll(Collection<? extends E>)"], "associated_methods": ["CompositeCollection.addComposited(Collection<? extends E>)", "CompositeCollection.contains(Object)"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeAll functionality with a collection containing all elements."}, {"name": "testRemoveAllWithNoMatchingElements", "primary_tested": ["CompositeCollection.removeAll(Collection<? extends E>)"], "associated_methods": ["CompositeCollection.addComposited(Collection<? extends E>)", "CompositeCollection.contains(Object)"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeAll functionality with a collection containing no matching elements."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/LazySortedMap_tailMapTest.java", "testclass_name": "LazySortedMap_tailMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.Factory;", "import org.junit.jupiter.api.Test;", "import java.util.SortedMap;", "import java.util.TreeMap;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNotNull;"], "name": "LazySortedMap_tailMapTest", "description": "Unit tests for the tailMap functionality of LazySortedMap.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testTailMap", "primary_tested": ["LazySortedMap.tailMap(Integer)"], "associated_methods": ["SortedMap.put(Integer,String)", "SortedMap.size()", "SortedMap.get(Integer)"], "external_dependencies": {"modules": ["org.apache.commons.collections4.Factory", "java.util.SortedMap", "java.util.TreeMap", "org.apache.commons.collections4.map.LazySortedMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the tailMap functionality of the LazySortedMap, ensuring it returns the correct sub-map starting from the specified key."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_containsTest.java", "testclass_name": "CompositeCollection_containsTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeCollection_containsTest", "description": "Unit tests for the contains functionality of the CompositeCollection class.", "class_members": {"variables": [{"name": "c", "type": "CompositeCollection<String>"}, {"name": "one", "type": "Collection<String>"}, {"name": "two", "type": "Collection<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testContainsWithEmptyComposite", "primary_tested": ["CompositeCollection.contains(String)"], "external_dependencies": {"modules": ["CompositeCollection"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the contains method when the CompositeCollection is empty."}, {"name": "testContainsWithSingleCollection", "primary_tested": ["CompositeCollection.contains(String)"], "associated_methods": ["CompositeCollection.addComposited(Collection)"], "external_dependencies": {"modules": ["CompositeCollection"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the contains method when the CompositeCollection contains a single collection."}, {"name": "testContainsWithMultipleCollections", "primary_tested": ["CompositeCollection.contains(String)"], "associated_methods": ["CompositeCollection.addComposited(Collection,Collection)"], "external_dependencies": {"modules": ["CompositeCollection"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the contains method when the CompositeCollection contains multiple collections."}, {"name": "testContainsAfterRemoveComposited", "primary_tested": ["CompositeCollection.contains(String)"], "associated_methods": ["CompositeCollection.addComposited(Collection,Collection)", "CompositeCollection.removeComposited(Collection)"], "external_dependencies": {"modules": ["CompositeCollection"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the contains method after removing a collection from the CompositeCollection."}, {"name": "testContainsWithEmptyCollection", "primary_tested": ["CompositeCollection.contains(String)"], "associated_methods": ["CompositeCollection.addComposited(Collection)", "Collection.clear()"], "external_dependencies": {"modules": ["CompositeCollection"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the contains method when a collection within the CompositeCollection is cleared."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_addTest.java", "testclass_name": "CircularFifoQueue_addTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CircularFifoQueue_addTest", "description": "Unit tests for the add functionality of the CircularFifoQueue class.", "class_members": {"variables": [{"name": "queue", "type": "CircularFifoQueue<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAddElementSuccess", "primary_tested": ["CircularFifoQueue.add(String)"], "associated_methods": ["CircularFifoQueue.size()", "CircularFifoQueue.peek()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful addition of an element to the CircularFifoQueue."}, {"name": "testAddElementWhenFull", "primary_tested": ["CircularFifoQueue.add(String)"], "associated_methods": ["CircularFifoQueue.size()", "CircularFifoQueue.peek()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addition of an element to the CircularFifoQueue when it is full."}, {"name": "testAddNullElement", "primary_tested": ["CircularFifoQueue.add(String)"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addition of a null element to the CircularFifoQueue, expecting a NullPointerException."}, {"name": "testAddElementAndCheckFullCapacity", "primary_tested": ["CircularFifoQueue.add(String)"], "associated_methods": ["CircularFifoQueue.isAtFullCapacity()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addition of elements to the CircularFifoQueue and checks if it reaches full capacity."}, {"name": "testAddElementAndCheckSize", "primary_tested": ["CircularFifoQueue.add(String)"], "associated_methods": ["CircularFifoQueue.size()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addition of elements to the CircularFifoQueue and checks the size after each addition."}, {"name": "testAddElementAndRemove", "primary_tested": ["CircularFifoQueue.add(String)"], "associated_methods": ["CircularFifoQueue.remove()", "CircularFifoQueue.size()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addition of elements to the CircularFifoQueue and checks the removal of elements."}, {"name": "testAddElementAndClear", "primary_tested": ["CircularFifoQueue.add(String)"], "associated_methods": ["CircularFifoQueue.clear()", "CircularFifoQueue.size()", "CircularFifoQueue.isEmpty()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addition of elements to the CircularFifoQueue and checks the clearing of the queue."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/SingletonMap_putTest.java", "testclass_name": "SingletonMap_putTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.Test;"], "name": "SingletonMap_putTest", "description": "Unit tests for the put method of the SingletonMap class.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testPutWithMatchingKey", "primary_tested": ["SingletonMap.put(String,String)"], "associated_methods": ["SingletonMap.get(String)"], "external_dependencies": {"modules": ["SingletonMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the put method of SingletonMap with a matching key, ensuring the old value is returned and the new value is set."}, {"name": "testPutWithNonMatchingKey", "primary_tested": ["SingletonMap.put(String,String)"], "external_dependencies": {"modules": ["SingletonMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the put method of SingletonMap with a non-matching key, ensuring an IllegalArgumentException is thrown."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_removeAllTest.java", "testclass_name": "IndexedCollection_removeAllTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static java.util.Arrays.asList;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Collection;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "IndexedCollection_removeAllTest", "description": "Unit tests for the removeAll functionality of the IndexedCollection class.", "class_members": {"variables": [{"name": "indexedCollection", "type": "IndexedCollection<Integer, String>"}, {"name": "originalCollection", "type": "Collection<String>"}], "methods": [{"name": "decorateUniqueCollection", "signature": "IndexedCollection<Integer, String> decorateUniqueCollection(Collection<String> original)"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveAllRemovesAllElements", "primary_tested": ["IndexedCollection.removeAll(Collection<String>)"], "associated_methods": ["IndexedCollection.containsAll(Collection<String>)", "IndexedCollection.size()"], "external_dependencies": {"modules": ["IndexedCollection", "Collection"], "class_members": [{"name": "indexedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that removeAll removes all specified elements from the collection."}, {"name": "testRemoveAllNoElementsToRemove", "primary_tested": ["IndexedCollection.removeAll(Collection<String>)"], "associated_methods": ["IndexedCollection.size()"], "external_dependencies": {"modules": ["IndexedCollection", "Collection"], "class_members": [{"name": "indexedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that removeAll does nothing when the collection to remove is not present in the indexed collection."}, {"name": "testRemoveAllReindexAfterRemoval", "primary_tested": ["IndexedCollection.removeAll(Collection<String>)"], "associated_methods": ["IndexedCollection.reindex()", "IndexedCollection.get(Integer)"], "external_dependencies": {"modules": ["IndexedCollection", "Collection"], "class_members": [{"name": "indexedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that removeAll removes specified elements and reindexing works correctly after removal."}, {"name": "testRemoveAllWithEmptyCollection", "primary_tested": ["IndexedCollection.removeAll(Collection<String>)"], "associated_methods": ["IndexedCollection.size()"], "external_dependencies": {"modules": ["IndexedCollection", "Collection"], "class_members": [{"name": "indexedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that removeAll does nothing when the collection to remove is empty."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_putAllTest.java", "testclass_name": "ListOrderedMap_putAllTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ListOrderedMap_putAllTest", "description": "Unit tests for the putAll method of ListOrderedMap with different scenarios.", "class_members": {"variables": [{"name": "listOrderedMap", "type": "ListOrderedMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPutAllAtIndexValid", "primary_tested": ["ListOrderedMap.putAll(int,Map)"], "external_dependencies": {"modules": ["ListOrderedMap", "HashMap", "Map"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the putAll method with a valid index, ensuring the map contents are correctly inserted."}, {"name": "testPutAllAtIndexInvalid", "primary_tested": ["ListOrderedMap.putAll(int,Map)"], "external_dependencies": {"modules": ["ListOrderedMap", "HashMap", "Map"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the putAll method with invalid indices, expecting IndexOutOfBoundsException to be thrown."}, {"name": "testPutAllAtIndexWithExistingKeys", "primary_tested": ["ListOrderedMap.putAll(int,Map)"], "associated_methods": ["ListOrderedMap.put(String,String)"], "external_dependencies": {"modules": ["ListOrderedMap", "HashMap", "Map"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the putAll method with a map containing existing keys, ensuring the values are updated and new keys are added."}, {"name": "testPutAllAtIndexEmptyMap", "primary_tested": ["ListOrderedMap.putAll(int,Map)"], "external_dependencies": {"modules": ["ListOrderedMap", "HashMap", "Map"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the putAll method with an empty map, ensuring the ListOrderedMap remains empty."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/SingletonMap_equalsTest.java", "testclass_name": "SingletonMap_equalsTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "SingletonMap_equalsTest", "description": "Unit tests for the equals method of the SingletonMap class.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testEquals_SameInstance", "primary_tested": ["SingletonMap.equals(Object)"], "external_dependencies": {"modules": ["SingletonMap"]}, "category": "unit", "description": "Tests the equals method with the same instance."}, {"name": "testEquals_DifferentType", "primary_tested": ["SingletonMap.equals(Object)"], "external_dependencies": {"modules": ["SingletonMap"]}, "category": "unit", "description": "Tests the equals method with a different type."}, {"name": "testEquals_DifferentSizeMap", "primary_tested": ["SingletonMap.equals(Object)"], "external_dependencies": {"modules": ["SingletonMap", "HashMap"]}, "category": "unit", "description": "Tests the equals method with a map of different size."}, {"name": "testEquals_SameKeyDifferentValue", "primary_tested": ["SingletonMap.equals(Object)"], "external_dependencies": {"modules": ["SingletonMap", "HashMap"]}, "category": "unit", "description": "Tests the equals method with the same key but different value."}, {"name": "testEquals_DifferentKeySameValue", "primary_tested": ["SingletonMap.equals(Object)"], "external_dependencies": {"modules": ["SingletonMap", "HashMap"]}, "category": "unit", "description": "Tests the equals method with different key but same value."}, {"name": "testEquals_SameKeySameValue", "primary_tested": ["SingletonMap.equals(Object)"], "external_dependencies": {"modules": ["SingletonMap", "HashMap"]}, "category": "unit", "description": "Tests the equals method with the same key and same value."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_removeIfTest.java", "testclass_name": "IndexedCollection_removeIfTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static java.util.Arrays.asList;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Collection;", "import java.util.function.Predicate;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "IndexedCollection_removeIfTest", "description": "Unit tests for the removeIf functionality of the IndexedCollection class.", "class_members": {"variables": [{"name": "indexedCollection", "type": "IndexedCollection<Integer, String>"}, {"name": "originalCollection", "type": "Collection<String>"}], "methods": [{"name": "decorateUniqueCollection", "signature": "IndexedCollection<Integer, String> decorateUniqueCollection(Collection<String> original)"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveIfWithNullFilter", "primary_tested": ["IndexedCollection.removeIf(Predicate<String>)"], "external_dependencies": {"modules": ["IndexedCollection"], "class_members": [{"name": "indexedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeIf method with a null filter."}, {"name": "testRemoveIfWithNoMatchingElements", "primary_tested": ["IndexedCollection.removeIf(Predicate<String>)"], "external_dependencies": {"modules": ["IndexedCollection"], "class_members": [{"name": "indexedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeIf method with a filter that does not match any elements."}, {"name": "testRemoveIfWithMatchingElements", "primary_tested": ["IndexedCollection.removeIf(Predicate<String>)"], "external_dependencies": {"modules": ["IndexedCollection"], "class_members": [{"name": "indexedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeIf method with a filter that matches some elements."}, {"name": "testRemoveIfWithAllMatchingElements", "primary_tested": ["IndexedCollection.removeIf(Predicate<String>)"], "external_dependencies": {"modules": ["IndexedCollection"], "class_members": [{"name": "indexedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeIf method with a filter that matches all elements."}, {"name": "testRemoveIfReindexesAfterRemoval", "primary_tested": ["IndexedCollection.removeIf(Predicate<String>)"], "associated_methods": ["IndexedCollection.get(Integer)"], "external_dependencies": {"modules": ["IndexedCollection"], "class_members": [{"name": "indexedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeIf method and verifies that the collection reindexes after removal."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_putAllTest.java", "testclass_name": "MultiKeyMap_putAllTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.keyvalue.MultiKey;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "MultiKeyMap_putAllTest", "description": "Unit tests for the putAll method of the MultiKeyMap class.", "class_members": {"variables": [{"name": "multiKeyMap", "type": "MultiKeyMap<String, String>"}, {"name": "mapToCopy", "type": "Map<MultiKey<? extends String>, String>"}, {"name": "key1", "type": "MultiKey<String>"}, {"name": "key2", "type": "MultiKey<String>"}, {"name": "nullKey", "type": "MultiKey<String>"}]}, "fixtures": [], "test_cases": [{"name": "testPutAll", "primary_tested": ["MultiKeyMap.putAll(Map<MultiKey<? extends String>, String>)"], "associated_methods": ["MultiKeyMap.containsKey(String, String)", "MultiKeyMap.get(MultiKey<String>)"], "external_dependencies": {"modules": ["MultiKeyMap", "MultiKey", "HashMap", "Map"], "class_members": [{"name": "multiKeyMap", "type": "variable"}, {"name": "mapToCopy", "type": "variable"}, {"name": "key1", "type": "variable"}, {"name": "key2", "type": "variable"}]}, "category": "unit", "description": "Tests the putAll method of MultiKeyMap to ensure it correctly adds all entries from a given map."}, {"name": "testPutAllWithNullKey", "primary_tested": ["MultiKeyMap.putAll(Map<MultiKey<? extends String>, String>)"], "associated_methods": [], "external_dependencies": {"modules": ["MultiKeyMap", "MultiKey", "HashMap", "Map"], "class_members": [{"name": "multiKeyMap", "type": "variable"}, {"name": "mapToCopy", "type": "variable"}, {"name": "nullKey", "type": "variable"}]}, "category": "unit", "description": "Tests the putAll method of MultiKeyMap to ensure it throws a NullPointerException when a null key is present in the map to be copied."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_removeTest.java", "testclass_name": "StaticBucketMap_removeTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "StaticBucketMap_removeTest", "description": "Unit tests for the remove functionality of the StaticBucketMap class.", "class_members": {"variables": [{"name": "map", "type": "StaticBucketMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveExistingKey", "primary_tested": ["StaticBucketMap.remove(String)"], "associated_methods": ["StaticBucketMap.put(String,String)", "StaticBucketMap.containsKey(String)", "StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of an existing key from the StaticBucketMap."}, {"name": "testRemoveNonExistingKey", "primary_tested": ["StaticBucketMap.remove(String)"], "associated_methods": ["StaticBucketMap.containsKey(String)", "StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of a non-existing key from the StaticBucketMap."}, {"name": "testRemoveNullKey", "primary_tested": ["StaticBucketMap.remove(String)"], "associated_methods": ["StaticBucketMap.put(String,String)", "StaticBucketMap.containsKey(String)", "StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of a null key from the StaticBucketMap."}, {"name": "testRemoveAndSizeDecrease", "primary_tested": ["StaticBucketMap.remove(String)"], "associated_methods": ["StaticBucketMap.put(String,String)", "StaticBucketMap.size()"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of keys and the decrease in size of the StaticBucketMap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_addAllTest.java", "testclass_name": "IndexedCollection_addAllTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static java.util.Arrays.asList;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Collection;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "IndexedCollection_addAllTest", "description": "Unit tests for the addAll method of the IndexedCollection class.", "class_members": {"variables": [{"name": "indexedCollection", "type": "IndexedCollection<Integer, String>"}, {"name": "originalCollection", "type": "Collection<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAddAllSuccess", "primary_tested": ["IndexedCollection.addAll(Collection<String>)"], "associated_methods": ["IndexedCollection.containsAll(Collection<String>)", "IndexedCollection.get(Integer)"], "external_dependencies": {"modules": ["IndexedCollection", "Collection", "Transformer"], "class_members": [{"name": "indexedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful addition of elements to the IndexedCollection."}, {"name": "testAddAllNoChange", "primary_tested": ["IndexedCollection.addAll(Collection<String>)"], "associated_methods": ["IndexedCollection.isEmpty()"], "external_dependencies": {"modules": ["IndexedCollection", "Collection", "Transformer"], "class_members": [{"name": "indexedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addition of an empty collection to the IndexedCollection, ensuring no change occurs."}, {"name": "testAddAllWithDuplicateKey", "primary_tested": ["IndexedCollection.addAll(Collection<String>)"], "external_dependencies": {"modules": ["IndexedCollection", "Collection", "Transformer"], "class_members": [{"name": "indexedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addition of elements with duplicate keys to the IndexedCollection, expecting an IllegalArgumentException."}, {"name": "testAddAllWithEmptyCollection", "primary_tested": ["IndexedCollection.addAll(Collection<String>)"], "associated_methods": ["IndexedCollection.isEmpty()"], "external_dependencies": {"modules": ["IndexedCollection", "Collection", "Transformer"], "class_members": [{"name": "indexedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addition of an empty collection to the IndexedCollection, ensuring no change occurs."}, {"name": "testAddAllWithNullElement", "primary_tested": ["IndexedCollection.addAll(Collection<String>)"], "external_dependencies": {"modules": ["IndexedCollection", "Collection", "Transformer"], "class_members": [{"name": "indexedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addition of elements containing a null value to the IndexedCollection, expecting a NullPointerException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_getTest.java", "testclass_name": "MultiKeyMap_getTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import org.apache.commons.collections4.keyvalue.MultiKey;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "MultiKeyMap_getTest", "description": "Unit tests for the get functionality of MultiKeyMap.", "class_members": {"variables": [{"name": "map", "type": "MultiKeyMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetExistingKey", "primary_tested": ["MultiKeyMap.get(String,String)"], "external_dependencies": {"modules": ["MultiKeyMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get functionality of MultiKeyMap with an existing key."}, {"name": "testGetNonExistingKey", "primary_tested": ["MultiKeyMap.get(String,String)"], "external_dependencies": {"modules": ["MultiKeyMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get functionality of MultiKeyMap with a non-existing key."}, {"name": "testGetWithNullKey", "primary_tested": ["MultiKeyMap.get(String,String)"], "external_dependencies": {"modules": ["MultiKeyMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get functionality of MultiKeyMap with a null key."}, {"name": "testGetWithBothNullKeys", "primary_tested": ["MultiKeyMap.get(String,String)"], "external_dependencies": {"modules": ["MultiKeyMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get functionality of MultiKeyMap with both keys being null."}, {"name": "testGetAfterRemove", "primary_tested": ["MultiKeyMap.get(String,String)"], "associated_methods": ["MultiKeyMap.removeMultiKey(String,String)"], "external_dependencies": {"modules": ["MultiKeyMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get functionality of MultiKeyMap after removing a key."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/TransformedMap_putTest.java", "testclass_name": "TransformedMap_putTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.mockito.Mockito.*;"], "name": "TransformedMap_putTest", "description": "Unit tests for the put method of TransformedMap with transformers.", "class_members": {"variables": [{"name": "keyTransformer", "type": "Transformer<String, String>"}, {"name": "valueTransformer", "type": "Transformer<String, String>"}, {"name": "originalMap", "type": "Map<String, String>"}, {"name": "transformedMap", "type": "TransformedMap<String, String>"}, {"name": "originalKey", "type": "String"}, {"name": "originalValue", "type": "String"}, {"name": "transformedKey", "type": "String"}, {"name": "transformedValue", "type": "String"}]}, "test_cases": [{"name": "testPutWithTransformers", "primary_tested": ["TransformedMap.put(String,String)"], "associated_methods": ["Transformer.apply(String)", "Map.get(String)"], "external_dependencies": {"modules": ["Transformer", "TransformedMap", "Map", "HashMap"], "class_members": [{"name": "keyTransformer", "type": "variable"}, {"name": "valueTransformer", "type": "variable"}, {"name": "originalMap", "type": "variable"}, {"name": "transformedMap", "type": "variable"}]}, "category": "unit", "description": "Tests the put method of TransformedMap with key and value transformers, verifying that the transformed key and value are correctly inserted into the original map."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/CompositeMap_removeTest.java", "testclass_name": "CompositeMap_removeTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeMap_removeTest", "description": "Unit tests for the remove functionality of the CompositeMap class.", "class_members": {"variables": [{"name": "compositeMap", "type": "CompositeMap<String, String>"}, {"name": "map1", "type": "Map<String, String>"}, {"name": "map2", "type": "Map<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveExistingKey", "primary_tested": ["CompositeMap.remove(String)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of an existing key from the CompositeMap."}, {"name": "testRemoveNonExistingKey", "primary_tested": ["CompositeMap.remove(String)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of a non-existing key from the CompositeMap."}, {"name": "testRemoveFromSecondMap", "primary_tested": ["CompositeMap.remove(String)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of a key from the second map in the CompositeMap."}, {"name": "testRemoveAllKeys", "primary_tested": ["CompositeMap.remove(String)"], "associated_methods": ["CompositeMap.isEmpty()"], "external_dependencies": {"modules": ["CompositeMap", "HashMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of all keys from the CompositeMap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_containsValueTest.java", "testclass_name": "PassiveExpiringMap_containsValueTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "PassiveExpiringMap_containsValueTest", "description": "Unit tests for the containsValue method of PassiveExpiringMap.", "class_members": {"variables": [{"name": "map", "type": "PassiveExpiringMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testContainsValue_ValuePresentAndNotExpired", "primary_tested": ["PassiveExpiringMap.containsValue(String)"], "external_dependencies": {"modules": ["PassiveExpiringMap", "HashMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsValue method when the value is present and not expired."}, {"name": "testContainsValue_ValuePresentButExpired", "primary_tested": ["PassiveExpiringMap.containsValue(String)"], "external_dependencies": {"modules": ["PassiveExpiringMap", "HashMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsValue method when the value is present but expired."}, {"name": "testContainsValue_ValueNotPresent", "primary_tested": ["PassiveExpiringMap.containsValue(String)"], "external_dependencies": {"modules": ["PassiveExpiringMap", "HashMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsValue method when the value is not present."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_sizeTest.java", "testclass_name": "CircularFifoQueue_sizeTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CircularFifoQueue_sizeTest", "description": "Unit tests for the size method of the CircularFifoQueue class.", "class_members": {"variables": [{"name": "queue", "type": "CircularFifoQueue<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testSizeWhenQueueIsEmpty", "primary_tested": ["CircularFifoQueue.size()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method when the queue is empty."}, {"name": "testSizeWhenQueueIsNotFull", "primary_tested": ["CircularFifoQueue.size()"], "associated_methods": ["CircularFifoQueue.add(String)"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method when the queue is not full."}, {"name": "testSizeWhenQueueIsFull", "primary_tested": ["CircularFifoQueue.size()"], "associated_methods": ["CircularFifoQueue.add(String)"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method when the queue is full."}, {"name": "testSizeWhenQueueIsWrapped", "primary_tested": ["CircularFifoQueue.size()"], "associated_methods": ["CircularFifoQueue.add(String)"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method when the queue is wrapped."}, {"name": "testSizeAfterRemove", "primary_tested": ["CircularFifoQueue.size()"], "associated_methods": ["CircularFifoQueue.add(String)", "CircularFifoQueue.remove()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method after removing an element from the queue."}, {"name": "testSizeAfterClear", "primary_tested": ["CircularFifoQueue.size()"], "associated_methods": ["CircularFifoQueue.add(String)", "CircularFifoQueue.clear()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method after clearing the queue."}, {"name": "testSizeWhenQueueIsFullAndWrapped", "primary_tested": ["CircularFifoQueue.size()"], "associated_methods": ["CircularFifoQueue.add(String)", "CircularFifoQueue.remove()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method when the queue is full and wrapped."}, {"name": "testSizeWhenQueueIsFullAndRemovedFromMiddle", "primary_tested": ["CircularFifoQueue.size()"], "associated_methods": ["CircularFifoQueue.add(String)", "CircularFifoQueue.remove(String)"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method when the queue is full and an element is removed from the middle."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_containsKeyTest.java", "testclass_name": "StaticBucketMap_containsKeyTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "StaticBucketMap_containsKeyTest", "description": "Unit tests for the containsKey method of the StaticBucketMap class.", "class_members": {"variables": [{"name": "map", "type": "StaticBucketMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testContainsKey_KeyExists", "primary_tested": ["StaticBucketMap.containsKey(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsKey method when the key exists in the map."}, {"name": "testContainsKey_KeyDoesNotExist", "primary_tested": ["StaticBucketMap.containsKey(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsKey method when the key does not exist in the map."}, {"name": "testContainsKey_NullKey", "primary_tested": ["StaticBucketMap.containsKey(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsKey method when the key is null and exists in the map."}, {"name": "testContainsKey_NullKeyDoesNotExist", "primary_tested": ["StaticBucketMap.containsKey(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsKey method when the key is null and does not exist in the map."}, {"name": "testContainsKey_AfterRemove", "primary_tested": ["StaticBucketMap.containsKey(String)"], "associated_methods": ["StaticBucketMap.remove(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsKey method after removing the key from the map."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_clearTest.java", "testclass_name": "ListOrderedMap_clearTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "ListOrderedMap_clearTest", "description": "Unit test for the clear method of ListOrderedMap.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testClear", "primary_tested": ["ListOrderedMap.clear()"], "associated_methods": ["ListOrderedMap.isEmpty()", "ListOrderedMap.size()"], "external_dependencies": {"modules": ["ListOrderedMap", "HashMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the clear functionality of the ListOrderedMap, ensuring that the map is empty and has a size of 0 after clearing."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_removeTest.java", "testclass_name": "IndexedCollection_removeTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static java.util.Arrays.asList;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Collection;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "IndexedCollection_removeTest", "description": "Unit tests for the remove functionality of the IndexedCollection class.", "class_members": {"variables": [{"name": "indexedCollection", "type": "IndexedCollection<Integer, String>"}, {"name": "originalCollection", "type": "Collection<String>"}], "methods": [{"name": "decorateUniqueCollection", "signature": "IndexedCollection<Integer, String> decorateUniqueCollection(Collection<String> original)"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveSuccess", "primary_tested": ["IndexedCollection.remove(String)"], "associated_methods": ["IndexedCollection.contains(String)", "IndexedCollection.get(int)"], "external_dependencies": {"modules": ["IndexedCollection", "java.util.Collection"], "class_members": [{"name": "indexedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful removal of an element from the IndexedCollection."}, {"name": "testRemoveFailure", "primary_tested": ["IndexedCollection.remove(String)"], "associated_methods": ["IndexedCollection.contains(String)", "IndexedCollection.get(int)"], "external_dependencies": {"modules": ["IndexedCollection", "java.util.Collection"], "class_members": [{"name": "indexedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the failure to remove a non-existent element from the IndexedCollection."}, {"name": "testRemoveAll", "primary_tested": ["IndexedCollection.removeAll(Collection<String>)"], "associated_methods": ["IndexedCollection.contains(String)", "IndexedCollection.get(int)"], "external_dependencies": {"modules": ["IndexedCollection", "java.util.Collection"], "class_members": [{"name": "indexedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of multiple elements from the IndexedCollection."}, {"name": "testReindexAfterRemove", "primary_tested": ["IndexedCollection.remove(String)", "IndexedCollection.reindex()"], "associated_methods": ["IndexedCollection.contains(String)", "IndexedCollection.get(int)"], "external_dependencies": {"modules": ["IndexedCollection", "java.util.Collection"], "class_members": [{"name": "indexedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the reindexing of the IndexedCollection after removing an element."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_clearTest.java", "testclass_name": "CompositeCollection_clearTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeCollection_clearTest", "description": "Unit tests for the clear functionality of the CompositeCollection class.", "class_members": {"variables": [{"name": "c", "type": "CompositeCollection<String>"}, {"name": "one", "type": "Collection<String>"}, {"name": "two", "type": "Collection<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testClear", "primary_tested": ["CompositeCollection.clear()"], "associated_methods": ["CompositeCollection.isEmpty()", "CompositeCollection.size()"], "external_dependencies": {"modules": ["CompositeCollection", "Collection", "HashSet"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clear functionality of the CompositeCollection with multiple collections."}, {"name": "testClearWithEmptyComposite", "primary_tested": ["CompositeCollection.clear()"], "associated_methods": ["CompositeCollection.isEmpty()", "CompositeCollection.size()"], "external_dependencies": {"modules": ["CompositeCollection"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clear functionality of the CompositeCollection with an empty composite collection."}, {"name": "testClearWithSingleCollection", "primary_tested": ["CompositeCollection.clear()"], "associated_methods": ["CompositeCollection.isEmpty()", "CompositeCollection.size()"], "external_dependencies": {"modules": ["CompositeCollection", "Collection", "HashSet"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clear functionality of the CompositeCollection with a single collection."}, {"name": "testClearWithMultipleCollections", "primary_tested": ["CompositeCollection.clear()"], "associated_methods": ["CompositeCollection.isEmpty()", "CompositeCollection.size()"], "external_dependencies": {"modules": ["CompositeCollection", "Collection", "HashSet"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clear functionality of the CompositeCollection with multiple collections."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/UnmodifiableSortedMap_unmodifiableSortedMapTest.java", "testclass_name": "UnmodifiableSortedMap_unmodifiableSortedMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.Unmodifiable;", "import org.junit.jupiter.api.Test;", "import java.util.SortedMap;", "import java.util.TreeMap;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "UnmodifiableSortedMap_unmodifiableSortedMapTest", "description": "Tests for the UnmodifiableSortedMap class, specifically focusing on the unmodifiableSortedMap method.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testUnmodifiableSortedMapWithUnmodifiableMap", "primary_tested": ["UnmodifiableSortedMap.unmodifiableSortedMap(SortedMap)"], "external_dependencies": {"modules": ["SortedMap", "TreeMap", "UnmodifiableSortedMap"]}, "category": "unit", "description": "Tests that passing an unmodifiable map to unmodifiableSortedMap returns the same map."}, {"name": "testUnmodifiableSortedMapWithModifiableMap", "primary_tested": ["UnmodifiableSortedMap.unmodifiableSortedMap(SortedMap)"], "external_dependencies": {"modules": ["SortedMap", "TreeMap", "UnmodifiableSortedMap", "Unmodifiable"]}, "category": "unit", "description": "Tests that passing a modifiable map to unmodifiableSortedMap returns an unmodifiable map."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/LazySortedMap_subMapTest.java", "testclass_name": "LazySortedMap_subMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.apache.commons.collections4.map.LazySortedMap.lazySortedMap;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertInstanceOf;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.Comparator;", "import java.util.SortedMap;", "import java.util.TreeMap;", "import org.apache.commons.collections4.Factory;", "import org.apache.commons.collections4.FactoryUtils;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "LazySortedMap_subMapTest", "description": "Unit tests for the subMap functionality of LazySortedMap.", "class_members": {"variables": [{"name": "oneFactory", "type": "static final Factory<Integer>"}, {"name": "originalMap", "type": "SortedMap<String, Integer>"}, {"name": "lazySortedMap", "type": "LazySortedMap<String, Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testSubMap", "primary_tested": ["LazySortedMap.subMap(String,String)"], "associated_methods": ["LazySortedMap.firstKey()", "LazySortedMap.lastKey()"], "external_dependencies": {"modules": ["LazySortedMap", "SortedMap", "FactoryUtils"], "class_members": [{"name": "lazySortedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the subMap functionality of LazySortedMap with valid keys."}, {"name": "testSubMapWithNonExistentKeys", "primary_tested": ["LazySortedMap.subMap(String,String)"], "associated_methods": ["LazySortedMap.firstKey()", "LazySortedMap.lastKey()"], "external_dependencies": {"modules": ["LazySortedMap", "SortedMap", "FactoryUtils"], "class_members": [{"name": "lazySortedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the subMap functionality of LazySortedMap with non-existent keys."}, {"name": "testSubMapWithInvalidRange", "primary_tested": ["LazySortedMap.subMap(String,String)"], "external_dependencies": {"modules": ["LazySortedMap", "SortedMap", "FactoryUtils"], "class_members": [{"name": "lazySortedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the subMap functionality of LazySortedMap with an invalid range."}, {"name": "testSubMapWithSameKeys", "primary_tested": ["LazySortedMap.subMap(String,String)"], "associated_methods": ["LazySortedMap.firstKey()", "LazySortedMap.lastKey()"], "external_dependencies": {"modules": ["LazySortedMap", "SortedMap", "FactoryUtils"], "class_members": [{"name": "lazySortedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the subMap functionality of LazySortedMap with the same keys."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_containsAllTest.java", "testclass_name": "CompositeCollection_containsAllTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeCollection_containsAllTest", "description": "Unit tests for the containsAll method of the CompositeCollection class.", "class_members": {"variables": [{"name": "c", "type": "CompositeCollection<String>"}, {"name": "one", "type": "Collection<String>"}, {"name": "two", "type": "Collection<String>"}]}, "fixtures": ["setUpTest"], "test_cases": [{"name": "testContainsAllWithEmptyComposite", "primary_tested": ["CompositeCollection.containsAll(Collection<String>)"], "external_dependencies": {"modules": ["CompositeCollection", "ArrayList", "Arrays", "Collection"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the containsAll method with an empty CompositeCollection."}, {"name": "testContainsAllWithNonEmptyComposite", "primary_tested": ["CompositeCollection.containsAll(Collection<String>)"], "associated_methods": ["CompositeCollection.addComposited(Collection<String>,Collection<String>)"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet", "ArrayList", "Arrays", "Collection"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the containsAll method with a non-empty CompositeCollection."}, {"name": "testContainsAllWithPartialMatch", "primary_tested": ["CompositeCollection.containsAll(Collection<String>)"], "associated_methods": ["CompositeCollection.addComposited(Collection<String>)"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet", "ArrayList", "Arrays", "Collection"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the containsAll method with a CompositeCollection that has a partial match."}, {"name": "testContainsAllWithNullCollection", "primary_tested": ["CompositeCollection.containsAll(Collection<String>)"], "external_dependencies": {"modules": ["CompositeCollection"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the containsAll method with a null collection."}, {"name": "testContainsAllWithEmptyCollection", "primary_tested": ["CompositeCollection.containsAll(Collection<String>)"], "external_dependencies": {"modules": ["CompositeCollection", "ArrayList"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the containsAll method with an empty collection."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_putTest.java", "testclass_name": "PassiveExpiringMap_putTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "PassiveExpiringMap_putTest", "description": "Unit test for the put method of PassiveExpiringMap.", "class_members": {"variables": [{"name": "policy", "type": "PassiveExpiringMap.ExpirationPolicy<String, String>"}, {"name": "map", "type": "PassiveExpiringMap<String, String>"}, {"name": "key", "type": "String"}, {"name": "value", "type": "String"}]}, "test_cases": [{"name": "testPut", "primary_tested": ["PassiveExpiringMap.put(String,String)"], "associated_methods": ["PassiveExpiringMap.containsKey(String)", "PassiveExpiringMap.get(String)"], "external_dependencies": {"modules": ["PassiveExpiringMap", "HashMap", "Map"], "class_members": [{"name": "policy", "type": "variable"}, {"name": "map", "type": "variable"}, {"name": "key", "type": "variable"}, {"name": "value", "type": "variable"}]}, "category": "unit", "description": "Tests the put functionality of the PassiveExpiringMap, ensuring that the key-value pair is correctly added and retrievable."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/UnmodifiableMap_valuesTest.java", "testclass_name": "UnmodifiableMap_valuesTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.Unmodifiable;", "import org.apache.commons.collections4.collection.UnmodifiableCollection;", "import org.junit.jupiter.api.Test;", "import java.util.Collection;", "import java.util.HashMap;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "UnmodifiableMap_valuesTest", "description": "Tests the values method of the UnmodifiableMap class to ensure it returns an unmodifiable collection.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testValues", "primary_tested": ["UnmodifiableMap.values()"], "associated_methods": ["UnmodifiableCollection.add(E)", "UnmodifiableCollection.size()", "UnmodifiableCollection.contains(Object)"], "external_dependencies": {"modules": ["UnmodifiableMap", "UnmodifiableCollection", "HashMap", "Map", "Collection"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the values method of UnmodifiableMap returns an unmodifiable collection, checks the size and content of the collection, and ensures that adding to the collection throws an UnsupportedOperationException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_clearTest.java", "testclass_name": "StaticBucketMap_clearTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "StaticBucketMap_clearTest", "description": "Unit test for the clear method of StaticBucketMap.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testClear", "primary_tested": ["StaticBucketMap.clear()"], "associated_methods": ["StaticBucketMap.isEmpty()", "StaticBucketMap.size()"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the clear functionality of the StaticBucketMap, ensuring that the map is empty and has a size of 0 after clearing."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/UnmodifiableOrderedMap_keySetTest.java", "testclass_name": "UnmodifiableOrderedMap_keySetTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.OrderedMap;", "import org.apache.commons.collections4.set.UnmodifiableSet;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;", "import java.util.Set;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "UnmodifiableOrderedMap_keySetTest", "description": "Tests the keySet functionality of the UnmodifiableOrderedMap.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testKeySet", "primary_tested": ["OrderedMap.keySet()"], "associated_methods": ["UnmodifiableSet.unmodifiableSet(Set)"], "external_dependencies": {"modules": ["OrderedMap", "UnmodifiableSet", "HashMap", "Map", "Set"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the keySet method of the UnmodifiableOrderedMap to ensure it returns an unmodifiable set of keys."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/CompositeMap_clearTest.java", "testclass_name": "CompositeMap_clearTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "CompositeMap_clearTest", "description": "Unit test for the clear functionality of the CompositeMap class.", "class_members": {"variables": [{"name": "map1", "type": "Map<String, String>"}, {"name": "map2", "type": "Map<String, String>"}, {"name": "compositeMap", "type": "CompositeMap<String, String>"}]}, "test_cases": [{"name": "testClear", "primary_tested": ["CompositeMap.clear()"], "associated_methods": ["CompositeMap.isEmpty()", "CompositeMap.size()"], "external_dependencies": {"modules": ["HashMap", "CompositeMap"], "class_members": [{"name": "map1", "type": "variable"}, {"name": "map2", "type": "variable"}, {"name": "compositeMap", "type": "variable"}]}, "category": "unit", "description": "Tests the clear functionality of the CompositeMap, ensuring it removes all mappings and the map is empty."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_getTest.java", "testclass_name": "PassiveExpiringMap_getTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;"], "name": "PassiveExpiringMap_getTest", "description": "Unit tests for the get method of PassiveExpiringMap, checking both non-expired and expired entries.", "class_members": {"variables": [{"name": "map", "type": "Map<String, String>"}, {"name": "expiringMap", "type": "PassiveExpiringMap<String, String>"}]}, "test_cases": [{"name": "testGet_EntryNotExpired", "primary_tested": ["PassiveExpiringMap.get(String)"], "external_dependencies": {"modules": ["HashMap", "PassiveExpiringMap"], "class_members": [{"name": "map", "type": "variable"}, {"name": "expiringMap", "type": "variable"}]}, "category": "unit", "description": "Tests the get method of PassiveExpiringMap when the entry is not expired."}, {"name": "testGet_EntryExpired", "primary_tested": ["PassiveExpiringMap.get(String)"], "external_dependencies": {"modules": ["HashMap", "PassiveExpiringMap"], "class_members": [{"name": "map", "type": "variable"}, {"name": "expiringMap", "type": "variable"}]}, "category": "unit", "description": "Tests the get method of PassiveExpiringMap when the entry is expired."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/CompositeMap_hashCodeTest.java", "testclass_name": "CompositeMap_hashCodeTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "CompositeMap_hashCodeTest", "description": "Unit tests for the hashCode method of the CompositeMap class.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testHashCodeWithSingleMap", "primary_tested": ["CompositeMap.hashCode()"], "external_dependencies": {"modules": ["HashMap", "CompositeMap", "Map"]}, "category": "unit", "description": "Tests the hashCode method of CompositeMap with a single map."}, {"name": "testHashCodeWithMultipleMaps", "primary_tested": ["CompositeMap.hashCode()"], "external_dependencies": {"modules": ["HashMap", "CompositeMap", "Map"]}, "category": "unit", "description": "Tests the hashCode method of CompositeMap with multiple maps."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/TransformedMap_putAllTest.java", "testclass_name": "TransformedMap_putAllTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.mockito.Mockito.*;"], "name": "TransformedMap_putAllTest", "description": "Unit tests for the putAll method of the TransformedMap class.", "class_members": {"variables": [{"name": "originalMap", "type": "Map<String, String>"}, {"name": "keyTransformer", "type": "Transformer<String, String>"}, {"name": "valueTransformer", "type": "Transformer<String, String>"}, {"name": "transformedMap", "type": "TransformedMap<String, String>"}, {"name": "expectedMap", "type": "Map<String, String>"}]}, "test_cases": [{"name": "testPutAll", "primary_tested": ["TransformedMap.putAll(Map<String, String>)"], "associated_methods": ["TransformedMap.decorated()"], "external_dependencies": {"modules": ["org.apache.commons.collections4.Transformer", "java.util.HashMap", "java.util.Map", "org.mockito.Mockito"], "class_members": [{"name": "originalMap", "type": "variable"}, {"name": "keyTransformer", "type": "variable"}, {"name": "valueTransformer", "type": "variable"}, {"name": "transformedMap", "type": "variable"}, {"name": "expectedMap", "type": "variable"}], "project_specific_resources": []}, "category": "unit", "description": "Tests the putAll method of the TransformedMap class, ensuring that keys and values are transformed as expected."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/PredicatedCollection_addTest.java", "testclass_name": "PredicatedCollection_addTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.List;", "import java.util.Queue;", "import java.util.Set;", "import org.apache.commons.collections4.Bag;", "import org.apache.commons.collections4.Predicate;", "import org.apache.commons.collections4.functors.NotNullPredicate;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.ArrayList;"], "name": "PredicatedCollection_addTest", "description": "Unit tests for the add functionality of PredicatedCollection with a NotNullPredicate.", "class_members": {"variables": [{"name": "predicatedCollection", "type": "PredicatedCollection<String>"}, {"name": "notNullPredicate", "type": "Predicate<String>"}], "methods": [{"name": "checkPredicatedCollection1", "signature": "void checkPredicatedCollection1(Collection<String> collection)"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAddValidElement", "primary_tested": ["PredicatedCollection.add(String)"], "external_dependencies": {"modules": ["PredicatedCollection", "NotNullPredicate"], "class_members": [{"name": "predicatedCollection", "type": "variable"}, {"name": "notNullPredicate", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests adding a valid element to the PredicatedCollection."}, {"name": "testAddNullElement", "primary_tested": ["PredicatedCollection.add(String)"], "external_dependencies": {"modules": ["PredicatedCollection", "NotNullPredicate"], "class_members": [{"name": "predicatedCollection", "type": "variable"}, {"name": "notNullPredicate", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests adding a null element to the PredicatedCollection, expecting an IllegalArgumentException."}, {"name": "testAddAllValidElements", "primary_tested": ["PredicatedCollection.addAll(Collection<? extends String>)"], "external_dependencies": {"modules": ["PredicatedCollection", "NotNullPredicate"], "class_members": [{"name": "predicatedCollection", "type": "variable"}, {"name": "notNullPredicate", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests adding a collection of valid elements to the PredicatedCollection."}, {"name": "testAddAllWithNullElement", "primary_tested": ["PredicatedCollection.addAll(Collection<? extends String>)"], "external_dependencies": {"modules": ["PredicatedCollection", "NotNullPredicate"], "class_members": [{"name": "predicatedCollection", "type": "variable"}, {"name": "notNullPredicate", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests adding a collection containing a null element to the PredicatedCollection, expecting an IllegalArgumentException."}, {"name": "testCreatePredicatedCollectionWithNotNullPredicate", "primary_tested": ["PredicatedCollection.Builder.createPredicatedList()", "PredicatedCollection.Builder.createPredicatedSet()", "PredicatedCollection.Builder.createPredicatedBag()", "PredicatedCollection.Builder.createPredicatedQueue()"], "associated_methods": ["PredicatedCollection.Builder.add(String)", "PredicatedCollection.Builder.add(String)"], "external_dependencies": {"modules": ["PredicatedCollection", "NotNullPredicate"], "class_members": [{"name": "checkPredicatedCollection1", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests creating different types of PredicatedCollections with a NotNullPredicate and adding elements to them."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_putTest.java", "testclass_name": "ListOrderedMap_putTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "ListOrderedMap_putTest", "description": "Unit tests for the put method in the ListOrderedMap class.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testPut_NewKey", "primary_tested": ["ListOrderedMap.put(int,String,String)"], "associated_methods": ["ListOrderedMap.get(String)", "ListOrderedMap.size()"], "external_dependencies": {"modules": ["ListOrderedMap", "HashMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the put method when adding a new key to the map."}, {"name": "testPut_ExistingKey", "primary_tested": ["ListOrderedMap.put(int,String,String)"], "associated_methods": ["ListOrderedMap.get(String)", "ListOrderedMap.size()"], "external_dependencies": {"modules": ["ListOrderedMap", "HashMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the put method when updating an existing key in the map."}, {"name": "testPut_IndexOutOfBounds", "primary_tested": ["ListOrderedMap.put(int,String,String)"], "external_dependencies": {"modules": ["ListOrderedMap", "HashMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the put method when the index is out of bounds."}, {"name": "testPut_ExistingKeyWithDifferentIndex", "primary_tested": ["ListOrderedMap.put(int,String,String)"], "associated_methods": ["ListOrderedMap.get(String)", "ListOrderedMap.size()"], "external_dependencies": {"modules": ["ListOrderedMap", "HashMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the put method when updating an existing key with a different index."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_sizeTest.java", "testclass_name": "CompositeCollection_sizeTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeCollection_sizeTest", "description": "Unit tests for the size method of the CompositeCollection class.", "class_members": {"variables": [{"name": "c", "type": "CompositeCollection<String>"}, {"name": "one", "type": "Collection<String>"}, {"name": "two", "type": "Collection<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testSizeEmpty", "primary_tested": ["CompositeCollection.size()"], "external_dependencies": {"modules": ["CompositeCollection"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method when the CompositeCollection is empty."}, {"name": "testSizeWithOneCollection", "primary_tested": ["CompositeCollection.size()"], "associated_methods": ["CompositeCollection.addComposited(Collection)"], "external_dependencies": {"modules": ["CompositeCollection"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method when the CompositeCollection contains one collection."}, {"name": "testSizeWithMultipleCollections", "primary_tested": ["CompositeCollection.size()"], "associated_methods": ["CompositeCollection.addComposited(Collection)"], "external_dependencies": {"modules": ["CompositeCollection"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method when the CompositeCollection contains multiple collections."}, {"name": "testSizeAfterRemoveCollection", "primary_tested": ["CompositeCollection.size()"], "associated_methods": ["CompositeCollection.addComposited(Collection)", "CompositeCollection.removeComposited(Collection)"], "external_dependencies": {"modules": ["CompositeCollection"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method after removing a collection from the CompositeCollection."}, {"name": "testSizeAfterClearCollection", "primary_tested": ["CompositeCollection.size()"], "associated_methods": ["CompositeCollection.addComposited(Collection)", "Collection.clear()"], "external_dependencies": {"modules": ["CompositeCollection"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method after clearing a collection within the CompositeCollection."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_hashCodeTest.java", "testclass_name": "StaticBucketMap_hashCodeTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "StaticBucketMap_hashCodeTest", "description": "Unit tests for the hashCode method of the StaticBucketMap class.", "class_members": {"variables": [{"name": "map", "type": "StaticBucketMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testHashCodeWithEmptyMap", "primary_tested": ["StaticBucketMap.hashCode()"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hashCode method of an empty StaticBucketMap."}, {"name": "testHashCodeWithSingleEntry", "primary_tested": ["StaticBucketMap.hashCode()"], "associated_methods": ["StaticBucketMap.put(String,String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hashCode method of a StaticBucketMap with a single entry."}, {"name": "testHashCodeWithMultipleEntries", "primary_tested": ["StaticBucketMap.hashCode()"], "associated_methods": ["StaticBucketMap.put(String,String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hashCode method of a StaticBucketMap with multiple entries."}, {"name": "testHashCodeWithNullKey", "primary_tested": ["StaticBucketMap.hashCode()"], "associated_methods": ["StaticBucketMap.put(String,String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hashCode method of a StaticBucketMap with a null key."}, {"name": "testHashCodeWithNullValue", "primary_tested": ["StaticBucketMap.hashCode()"], "associated_methods": ["StaticBucketMap.put(String,String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hashCode method of a StaticBucketMap with a null value."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/SingletonMap_setValueTest.java", "testclass_name": "SingletonMap_setValueTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SingletonMap_setValueTest", "description": "Unit tests for the setValue method of SingletonMap.", "class_members": {"variables": [{"name": "singletonMap", "type": "SingletonMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testSetValue", "primary_tested": ["SingletonMap.setValue(String)"], "associated_methods": ["SingletonMap.getValue()"], "external_dependencies": {"modules": ["SingletonMap"], "class_members": [{"name": "singletonMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the setValue method of SingletonMap and verifies the old value and new value."}, {"name": "testSetValueWithNull", "primary_tested": ["SingletonMap.setValue(String)"], "associated_methods": ["SingletonMap.getValue()"], "external_dependencies": {"modules": ["SingletonMap"], "class_members": [{"name": "singletonMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the setValue method of SingletonMap with null value and verifies the old value and new value."}, {"name": "testSetValueAndCheckWithGet", "primary_tested": ["SingletonMap.setValue(String)"], "associated_methods": ["SingletonMap.get(String)"], "external_dependencies": {"modules": ["SingletonMap"], "class_members": [{"name": "singletonMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the setValue method of SingletonMap and verifies the new value using the get method."}, {"name": "testSetValueAndCheckWithGetValue", "primary_tested": ["SingletonMap.setValue(String)"], "associated_methods": ["SingletonMap.getValue()"], "external_dependencies": {"modules": ["SingletonMap"], "class_members": [{"name": "singletonMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the setValue method of SingletonMap and verifies the new value using the getValue method."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/TransformedSortedMap_transformedSortedMapTest.java", "testclass_name": "TransformedSortedMap_transformedSortedMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.Test;", "import java.util.SortedMap;", "import java.util.TreeMap;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "TransformedSortedMap_transformedSortedMapTest", "description": "Unit tests for the TransformedSortedMap class, specifically testing the transformedSortedMap method with both non-empty and empty maps.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testTransformedSortedMapWithNonEmptyMap", "primary_tested": ["TransformedSortedMap.transformedSortedMap(SortedMap<String, Integer>, Transformer<String, String>, Transformer<Integer, Integer>)"], "associated_methods": ["TransformedSortedMap.size()", "TransformedSortedMap.containsKey(String)", "TransformedSortedMap.get(String)"], "external_dependencies": {"modules": ["SortedMap", "TreeMap", "Transformer", "TransformedSortedMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformedSortedMap method with a non-empty map, ensuring the key and value transformations are applied correctly."}, {"name": "testTransformedSortedMapWithEmptyMap", "primary_tested": ["TransformedSortedMap.transformedSortedMap(SortedMap<String, Integer>, Transformer<String, String>, Transformer<Integer, Integer>)"], "associated_methods": ["TransformedSortedMap.isEmpty()"], "external_dependencies": {"modules": ["SortedMap", "TreeMap", "Transformer", "TransformedSortedMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformedSortedMap method with an empty map, ensuring the resulting map is also empty."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/SingletonMap_entrySetTest.java", "testclass_name": "SingletonMap_entrySetTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.junit.jupiter.api.Test;", "import java.util.Map;", "import java.util.Set;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "SingletonMap_entrySetTest", "description": "Unit tests for the entrySet method of SingletonMap.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testEntrySet", "primary_tested": ["SingletonMap.entrySet()"], "associated_methods": ["Set.size()", "Set.iterator()", "Iterator.next()", "Map.Entry.getKey()", "Map.Entry.getValue()"], "external_dependencies": {"modules": ["SingletonMap", "Map", "Set", "Map.Entry", "Iterator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the entrySet method of SingletonMap to ensure it returns a set with the correct entry."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/CompositeMap_addCompositedTest.java", "testclass_name": "CompositeMap_addCompositedTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Map;", "import java.util.Collection;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeMap_addCompositedTest", "description": "Tests for the addComposited method of the CompositeMap class.", "class_members": {"variables": [{"name": "compositeMap", "type": "CompositeMap<String, String>"}, {"name": "map1", "type": "Map<String, String>"}, {"name": "map2", "type": "Map<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAddCompositedSuccess", "primary_tested": ["CompositeMap.addComposited(Map<String, String>)"], "associated_methods": ["CompositeMap.size()", "CompositeMap.containsKey(String)"], "external_dependencies": {"modules": ["CompositeMap", "Map", "HashMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful addition of a new map to the CompositeMap without key collisions."}, {"name": "testAddCompositedKeyCollisionWithoutMutator", "primary_tested": ["CompositeMap.addComposited(Map<String, String>)"], "associated_methods": [], "external_dependencies": {"modules": ["CompositeMap", "Map", "HashMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior of adding a new map to the CompositeMap with key collisions when no mutator is set, expecting an IllegalArgumentException."}, {"name": "testAddCompositedKeyCollisionWithMutator", "primary_tested": ["CompositeMap.addComposited(Map<String, String>)"], "associated_methods": ["CompositeMap.size()", "CompositeMap.containsKey(String)"], "external_dependencies": {"modules": ["CompositeMap", "Map", "HashMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior of adding a new map to the CompositeMap with key collisions when a mutator is set to resolve the collisions."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_clearTest.java", "testclass_name": "PassiveExpiringMap_clearTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "PassiveExpiringMap_clearTest", "description": "Unit tests for the clear functionality of the PassiveExpiringMap class.", "class_members": {"variables": [{"name": "expiringMap", "type": "PassiveExpiringMap<Integer, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testClear", "primary_tested": ["PassiveExpiringMap.clear()"], "external_dependencies": {"modules": ["PassiveExpiringMap"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clear functionality of the PassiveExpiringMap when entries do not expire."}, {"name": "testClearWithExpiredEntries", "primary_tested": ["PassiveExpiringMap.clear()"], "external_dependencies": {"modules": ["PassiveExpiringMap"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "description": "Tests the clear functionality of the PassiveExpiringMap when entries expire after 1 millisecond."}, {"name": "testClearWithNonExpiredEntries", "primary_tested": ["PassiveExpiringMap.clear()"], "external_dependencies": {"modules": ["PassiveExpiringMap"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "description": "Tests the clear functionality of the PassiveExpiringMap when entries expire after 1 second."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/TransformedMap_transformedMapTest.java", "testclass_name": "TransformedMap_transformedMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "TransformedMap_transformedMapTest", "description": "Unit tests for the TransformedMap class, specifically testing the transformation of keys and values in a map.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testTransformedMapWithNonEmptyMap", "primary_tested": ["TransformedMap.transformedMap(Map<String,Integer>,Transformer<String,String>,Transformer<Integer,Integer>)"], "associated_methods": ["TransformedMap.decorated()"], "external_dependencies": {"modules": ["TransformedMap", "Transformer", "HashMap", "Map"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformation of keys and values in a non-empty map using TransformedMap."}, {"name": "testTransformedMapWithEmptyMap", "primary_tested": ["TransformedMap.transformedMap(Map<String,Integer>,Transformer<String,String>,Transformer<Integer,Integer>)"], "associated_methods": ["TransformedMap.decorated()"], "external_dependencies": {"modules": ["TransformedMap", "Transformer", "HashMap", "Map"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformation of keys and values in an empty map using TransformedMap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/sequence/SequencesComparator_getScriptTest.java", "testclass_name": "SequencesComparator_getScriptTest", "dependencies": ["package org.apache.commons.collections4.sequence;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "SequencesComparator_getScriptTest", "description": "Unit test for the getScript method of the SequencesComparator class.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testGetScript", "primary_tested": ["SequencesComparator.getScript()"], "external_dependencies": {"modules": ["SequencesComparator", "EditScript", "Arrays", "List"]}, "category": "unit", "description": "Tests the getScript method of the SequencesComparator class, verifying the number of modifications and the length of the longest common subsequence."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_nextKeyTest.java", "testclass_name": "ListOrderedMap_nextKeyTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ListOrderedMap_nextKeyTest", "description": "Unit tests for the nextKey method in ListOrderedMap.", "class_members": {"variables": [{"name": "listOrderedMap", "type": "ListOrderedMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNextKeyWithValidKey", "primary_tested": ["ListOrderedMap.nextKey(String)"], "external_dependencies": {"modules": ["ListOrderedMap"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the nextKey method with valid keys in the ListOrderedMap."}, {"name": "testNextKeyWithLastKey", "primary_tested": ["ListOrderedMap.nextKey(String)"], "external_dependencies": {"modules": ["ListOrderedMap"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the nextKey method with the last key in the ListOrderedMap."}, {"name": "testNextKeyWithInvalidKey", "primary_tested": ["ListOrderedMap.nextKey(String)"], "external_dependencies": {"modules": ["ListOrderedMap"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the nextKey method with an invalid key in the ListOrderedMap."}, {"name": "testNextKeyWithEmptyMap", "primary_tested": ["ListOrderedMap.nextKey(String)"], "associated_methods": ["ListOrderedMap.clear()"], "external_dependencies": {"modules": ["ListOrderedMap"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the nextKey method with an empty ListOrderedMap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/SingletonMap_putAllTest.java", "testclass_name": "SingletonMap_putAllTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "SingletonMap_putAllTest", "description": "Tests for the putAll method of the SingletonMap class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testPutAll_EmptyMap", "primary_tested": ["SingletonMap.putAll(Map)"], "external_dependencies": {"modules": ["SingletonMap", "HashMap", "Map"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the putAll method with an empty map."}, {"name": "testPutAll_SingleEntryMap", "primary_tested": ["SingletonMap.putAll(Map)"], "external_dependencies": {"modules": ["SingletonMap", "HashMap", "Map"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the putAll method with a map containing a single entry."}, {"name": "testPutAll_MultipleEntriesMap", "primary_tested": ["SingletonMap.putAll(Map)"], "external_dependencies": {"modules": ["SingletonMap", "HashMap", "Map"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the putAll method with a map containing multiple entries, expecting an IllegalArgumentException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/PredicatedSortedMap_headMapTest.java", "testclass_name": "PredicatedSortedMap_headMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.Predicate;", "import org.junit.jupiter.api.Test;", "import java.util.SortedMap;", "import java.util.TreeMap;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "PredicatedSortedMap_headMapTest", "description": "Unit tests for the headMap functionality of PredicatedSortedMap.", "class_members": {"variables": [{"name": "originalMap", "type": "SortedMap<Integer, String>"}, {"name": "keyPredicate", "type": "Predicate<Integer>"}, {"name": "valuePredicate", "type": "Predicate<String>"}, {"name": "predicatedMap", "type": "PredicatedSortedMap<Integer, String>"}]}, "test_cases": [{"name": "testHeadMap", "primary_tested": ["PredicatedSortedMap.headMap(Integer)"], "associated_methods": ["SortedMap.put(Integer,String)", "SortedMap.size()", "SortedMap.containsKey(Integer)"], "external_dependencies": {"modules": ["SortedMap", "TreeMap", "Predicate", "PredicatedSortedMap"], "class_members": [{"name": "originalMap", "type": "variable"}, {"name": "keyPredicate", "type": "variable"}, {"name": "valuePredicate", "type": "variable"}, {"name": "predicatedMap", "type": "variable"}]}, "category": "unit", "description": "Tests the headMap functionality of the PredicatedSortedMap, ensuring it returns the correct subset of the map."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/PredicatedSortedMap_tailMapTest.java", "testclass_name": "PredicatedSortedMap_tailMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.Predicate;", "import org.junit.jupiter.api.Test;", "import java.util.SortedMap;", "import java.util.TreeMap;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "PredicatedSortedMap_tailMapTest", "description": "Unit tests for the tailMap functionality of PredicatedSortedMap.", "class_members": {"variables": [{"name": "originalMap", "type": "SortedMap<Integer, String>"}, {"name": "keyPredicate", "type": "Predicate<Integer>"}, {"name": "valuePredicate", "type": "Predicate<String>"}, {"name": "predicatedMap", "type": "PredicatedSortedMap<Integer, String>"}]}, "test_cases": [{"name": "testTailMap", "primary_tested": ["PredicatedSortedMap.tailMap(Integer)"], "associated_methods": ["SortedMap.put(Integer,String)", "SortedMap.size()", "SortedMap.containsKey(Integer)"], "external_dependencies": {"modules": ["SortedMap", "TreeMap", "Predicate", "PredicatedSortedMap"], "class_members": [{"name": "originalMap", "type": "variable"}, {"name": "keyPredicate", "type": "variable"}, {"name": "valuePredicate", "type": "variable"}, {"name": "predicatedMap", "type": "variable"}]}, "category": "unit", "description": "Tests the tailMap functionality of the PredicatedSortedMap, ensuring it returns the correct subset of the map."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_removeTest.java", "testclass_name": "ListOrderedMap_removeTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "ListOrderedMap_removeTest", "description": "Unit tests for the remove functionality of the ListOrderedMap class.", "class_members": {"variables": [{"name": "map", "type": "ListOrderedMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveExistingKey", "primary_tested": ["ListOrderedMap.remove(String)"], "associated_methods": ["ListOrderedMap.containsKey(String)"], "external_dependencies": {"modules": ["ListOrderedMap", "HashMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of an existing key from the ListOrderedMap."}, {"name": "testRemoveNonExistingKey", "primary_tested": ["ListOrderedMap.remove(String)"], "associated_methods": ["ListOrderedMap.containsKey(String)"], "external_dependencies": {"modules": ["ListOrderedMap", "HashMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of a non-existing key from the ListOrderedMap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/CompositeMap_containsValueTest.java", "testclass_name": "CompositeMap_containsValueTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeMap_containsValueTest", "description": "Unit tests for the containsValue method in CompositeMap.", "class_members": {"variables": [{"name": "compositeMap", "type": "CompositeMap<String, String>"}, {"name": "map1", "type": "Map<String, String>"}, {"name": "map2", "type": "Map<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testContainsValue_ValuePresentInFirstMap", "primary_tested": ["CompositeMap.containsValue(String)"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the containsValue method correctly identifies a value present in the first map."}, {"name": "testContainsValue_ValuePresentInSecondMap", "primary_tested": ["CompositeMap.containsValue(String)"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the containsValue method correctly identifies a value present in the second map."}, {"name": "testContainsValue_ValueNotPresent", "primary_tested": ["CompositeMap.containsValue(String)"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the containsValue method correctly identifies a value not present in either map."}, {"name": "testContainsValue_NullValuePresent", "primary_tested": ["CompositeMap.containsValue(String)"], "associated_methods": ["Map.put(String,String)"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}, {"name": "map1", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the containsValue method correctly identifies a null value present in the map."}, {"name": "testContainsValue_NullValueNotPresent", "primary_tested": ["CompositeMap.containsValue(String)"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the containsValue method correctly identifies a null value not present in the map."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/functors/AllPredicate_testTest.java", "testclass_name": "AllPredicate_testTest", "dependencies": ["package org.apache.commons.collections4.functors;", "import org.apache.commons.collections4.Predicate;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;"], "name": "AllPredicate_testTest", "description": "Unit tests for the AllPredicate class in Apache Commons Collections, focusing on the behavior of the predicate when all or some predicates return true or false.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testAllPredicatesTrue", "primary_tested": ["AllPredicate.test(String)"], "associated_methods": ["Predicate.test(String)"], "external_dependencies": {"modules": ["Predicate", "AllPredicate"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the AllPredicate functionality when all predicates return true."}, {"name": "testOnePredicateFalse", "primary_tested": ["AllPredicate.test(String)"], "associated_methods": ["Predicate.test(String)"], "external_dependencies": {"modules": ["Predicate", "AllPredicate"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the AllPredicate functionality when one predicate returns false."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/ComparatorChain_hashCodeTest.java", "testclass_name": "ComparatorChain_hashCodeTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import org.junit.jupiter.api.Test;", "import java.util.ArrayList;", "import java.util.BitSet;", "import java.util.Comparator;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "ComparatorChain_hashCodeTest", "description": "Unit test for the hashCode method of the ComparatorChain class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testHashCode", "primary_tested": ["ComparatorChain.hashCode()"], "external_dependencies": {"modules": ["ArrayList", "BitSet", "Comparator", "ComparatorChain", "List"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the hashCode method of the ComparatorChain class to ensure it returns the expected hash code based on the comparators and bitset."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/functors/EqualPredicate_equalPredicateTest.java", "testclass_name": "EqualPredicate_equalPredicateTest", "dependencies": ["package org.apache.commons.collections4.functors;", "import org.apache.commons.collections4.Predicate;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "EqualPredicate_equalPredicateTest", "description": "Unit tests for the EqualPredicate class, specifically testing the equalPredicate method with non-null and null objects.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testEqualPredicateWithNonNullObject", "primary_tested": ["EqualPredicate.equalPredicate(String)"], "associated_methods": ["Predicate.test(String)"], "external_dependencies": {"modules": ["EqualPredicate", "Predicate"]}, "category": "unit", "description": "Tests the EqualPredicate with a non-null object, ensuring it returns true for the same object and false for a different object."}, {"name": "testEqualPredicateWithNullObject", "primary_tested": ["EqualPredicate.equalPredicate(String)"], "associated_methods": ["Predicate.test(String)"], "external_dependencies": {"modules": ["EqualPredicate", "Predicate"]}, "category": "unit", "description": "Tests the EqualPredicate with a null object, ensuring it returns true for null and false for a non-null object."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/CompositeMap_removeCompositedTest.java", "testclass_name": "CompositeMap_removeCompositedTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeMap_removeCompositedTest", "description": "Unit tests for the removeComposited method of the CompositeMap class.", "class_members": {"variables": [{"name": "compositeMap", "type": "CompositeMap<String, String>"}, {"name": "mapOne", "type": "Map<String, String>"}, {"name": "mapTwo", "type": "Map<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveCompositedExistingMap", "primary_tested": ["CompositeMap.removeComposited(Map<String, String>)"], "associated_methods": ["CompositeMap.containsKey(String)", "CompositeMap.size()"], "external_dependencies": {"modules": ["CompositeMap", "Map", "HashMap"], "class_members": [{"name": "compositeMap", "type": "variable"}, {"name": "mapTwo", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of an existing map from the CompositeMap."}, {"name": "testRemoveCompositedNonExistingMap", "primary_tested": ["CompositeMap.removeComposited(Map<String, String>)"], "associated_methods": ["CompositeMap.size()"], "external_dependencies": {"modules": ["CompositeMap", "Map", "HashMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of a non-existing map from the CompositeMap."}, {"name": "testRemoveCompositedEmptyCompositeMap", "primary_tested": ["CompositeMap.removeComposited(Map<String, String>)"], "associated_methods": ["CompositeMap.isEmpty()"], "external_dependencies": {"modules": ["CompositeMap", "Map", "HashMap"], "class_members": [{"name": "mapOne", "type": "variable"}]}, "category": "unit", "description": "Tests the removal of a map from an empty CompositeMap."}, {"name": "testRemoveCompositedSingleMap", "primary_tested": ["CompositeMap.removeComposited(Map<String, String>)"], "associated_methods": ["CompositeMap.isEmpty()"], "external_dependencies": {"modules": ["CompositeMap", "Map", "HashMap"], "class_members": [{"name": "mapOne", "type": "variable"}]}, "category": "unit", "description": "Tests the removal of a single map from a CompositeMap containing only one map."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/TransformedSortedMap_headMapTest.java", "testclass_name": "TransformedSortedMap_headMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.SortedMap;", "import java.util.TreeMap;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.TransformerUtils;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "TransformedSortedMap_headMapTest", "description": "Unit tests for the headMap functionality of TransformedSortedMap.", "class_members": {"variables": [{"name": "baseMap", "type": "SortedMap<String, String>"}, {"name": "keyTransformer", "type": "Transformer<String, String>"}, {"name": "valueTransformer", "type": "Transformer<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testHeadMap", "primary_tested": ["TransformedSortedMap.headMap(String)"], "external_dependencies": {"modules": ["SortedMap", "TreeMap", "Transformer", "TransformerUtils", "TransformedSortedMap"], "class_members": [{"name": "baseMap", "type": "variable"}, {"name": "keyTransformer", "type": "variable"}, {"name": "valueTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the headMap functionality of TransformedSortedMap with no-operation transformers."}, {"name": "testHeadMapWithTransformers", "primary_tested": ["TransformedSortedMap.headMap(String)"], "external_dependencies": {"modules": ["SortedMap", "TreeMap", "Transformer", "TransformerUtils", "TransformedSortedMap"], "class_members": [{"name": "baseMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the headMap functionality of TransformedSortedMap with string value transformers."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/CompositeMap_valuesTest.java", "testclass_name": "CompositeMap_valuesTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Collection;", "import java.util.HashMap;", "import java.util.Map;", "import org.apache.commons.collections4.collection.CompositeCollection;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeMap_valuesTest", "description": "Unit tests for the values method in CompositeMap class.", "class_members": {"variables": [{"name": "compositeMap", "type": "CompositeMap<String, String>"}, {"name": "map1", "type": "Map<String, String>"}, {"name": "map2", "type": "Map<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testValues", "primary_tested": ["CompositeMap.values()"], "external_dependencies": {"modules": ["CompositeMap", "Collection"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the values method of CompositeMap to ensure it returns the correct collection of values."}, {"name": "testValuesAfterAddComposited", "primary_tested": ["CompositeMap.values()"], "associated_methods": ["CompositeMap.addComposited(Map<String, String>)"], "external_dependencies": {"modules": ["CompositeMap", "Collection", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the values method of CompositeMap after adding a new map to ensure it includes the new values."}, {"name": "testValuesAfterRemoveComposited", "primary_tested": ["CompositeMap.values()"], "associated_methods": ["CompositeMap.removeComposited(Map<String, String>)"], "external_dependencies": {"modules": ["CompositeMap", "Collection", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the values method of CompositeMap after removing a map to ensure it no longer includes the removed values."}, {"name": "testValuesEmptyCompositeMap", "primary_tested": ["CompositeMap.values()"], "external_dependencies": {"modules": ["CompositeMap", "Collection"]}, "category": "unit", "description": "Tests the values method of an empty CompositeMap to ensure it returns an empty collection."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/CompositeMap_putAllTest.java", "testclass_name": "CompositeMap_putAllTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Map;", "import java.util.Collection;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeMap_putAllTest", "description": "Tests for the putAll method in CompositeMap, including scenarios with and without a MapMutator.", "class_members": {"variables": [{"name": "compositeMap", "type": "CompositeMap<String, String>"}, {"name": "mapOne", "type": "Map<String, String>"}, {"name": "mapTwo", "type": "Map<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPutAllWithMutator", "primary_tested": ["CompositeMap.putAll(Map<? extends String, ? extends String>)"], "associated_methods": ["CompositeMap.setMutator(CompositeMap.MapMutator<String, String>)", "CompositeMap.put(String, String)", "CompositeMap.size()", "CompositeMap.containsKey(String)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap", "Map", "Collection"], "class_members": [{"name": "compositeMap", "type": "variable"}, {"name": "mapOne", "type": "variable"}, {"name": "mapTwo", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the putAll method of CompositeMap with a MapMutator, ensuring that the new entries are added and the size and key presence are verified."}, {"name": "testPutAllWithoutMutator", "primary_tested": ["CompositeMap.putAll(Map<? extends String, ? extends String>)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the putAll method of CompositeMap without a MapMutator, expecting an UnsupportedOperationException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/BooleanComparator_hashCodeTest.java", "testclass_name": "BooleanComparator_hashCodeTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "BooleanComparator_hashCodeTest", "description": "Unit tests for the hashCode method of the BooleanComparator class.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testHashCodeTrueFirst", "primary_tested": ["BooleanComparator.hashCode()"], "external_dependencies": {"modules": ["BooleanComparator"]}, "category": "unit", "description": "Tests the hashCode method of BooleanComparator when true is first."}, {"name": "testHashCodeFalseFirst", "primary_tested": ["BooleanComparator.hashCode()"], "external_dependencies": {"modules": ["BooleanComparator"]}, "category": "unit", "description": "Tests the hashCode method of BooleanComparator when false is first."}, {"name": "testHashCodeConsistencyWithEquals", "primary_tested": ["BooleanComparator.hashCode()"], "associated_methods": ["BooleanComparator.equals(Object)"], "external_dependencies": {"modules": ["BooleanComparator"]}, "category": "unit", "description": "Tests the consistency of the hashCode method with the equals method of BooleanComparator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_keySetTest.java", "testclass_name": "PassiveExpiringMap_keySetTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Map;", "import java.util.Set;", "import java.util.concurrent.TimeUnit;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "PassiveExpiringMap_keySetTest", "description": "Unit tests for the keySet functionality of PassiveExpiringMap, focusing on the behavior with expired and non-expired entries.", "class_members": {"variables": [{"name": "expiringMap", "type": "PassiveExpiringMap<Integer, String>"}], "methods": [{"name": "makeTestMap", "signature": "Map<Integer, String> makeTestMap()"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testKeySetWithExpiredEntries", "primary_tested": ["PassiveExpiringMap.keySet()"], "external_dependencies": {"modules": ["PassiveExpiringMap", "Set", "Thread"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the keySet method when all entries have expired."}, {"name": "testKeySetWithoutExpiredEntries", "primary_tested": ["PassiveExpiringMap.keySet()"], "external_dependencies": {"modules": ["PassiveExpiringMap", "Set"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the keySet method when no entries have expired."}, {"name": "testKeySetWithMixedExpiry", "primary_tested": ["PassiveExpiringMap.keySet()"], "external_dependencies": {"modules": ["PassiveExpiringMap", "Set", "Thread"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the keySet method when entries have mixed expiry states."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/LazyMap_getTest.java", "testclass_name": "LazyMap_getTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.Factory;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.mockito.Mockito.*;"], "name": "LazyMap_getTest", "description": "Unit tests for the get method of LazyMap.", "class_members": {"variables": [{"name": "map", "type": "Map<String, String>"}, {"name": "factory", "type": "Factory<String>"}, {"name": "lazyMap", "type": "LazyMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGet_KeyNotInMap", "primary_tested": ["LazyMap.get(String)"], "associated_methods": ["Factory.create()"], "external_dependencies": {"modules": ["LazyMap", "Factory", "Map", "HashMap"], "class_members": [{"name": "lazyMap", "type": "variable"}, {"name": "factory", "type": "variable"}, {"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method of LazyMap when the key is not present in the map."}, {"name": "testGet_KeyInMap", "primary_tested": ["LazyMap.get(String)"], "associated_methods": ["Factory.create()"], "external_dependencies": {"modules": ["LazyMap", "Factory", "Map", "HashMap"], "class_members": [{"name": "lazyMap", "type": "variable"}, {"name": "factory", "type": "variable"}, {"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method of LazyMap when the key is already present in the map."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/functors/AllPredicate_allPredicateTest.java", "testclass_name": "AllPredicate_allPredicateTest", "dependencies": ["package org.apache.commons.collections4.functors;", "import org.apache.commons.collections4.Predicate;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Collection;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.assertSame;"], "name": "AllPredicate_allPredicateTest", "description": "Unit tests for the AllPredicate.allPredicate method in the Apache Commons Collections4 library.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testAllPredicate_EmptyCollection", "primary_tested": ["AllPredicate.allPredicate(Collection<Predicate<Object>>)"], "external_dependencies": {"modules": ["AllPredicate", "Predicate", "Arrays"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of AllPredicate.allPredicate when provided with an empty collection of predicates."}, {"name": "testAllPredicate_SinglePredicate", "primary_tested": ["AllPredicate.allPredicate(Collection<Predicate<Object>>)"], "external_dependencies": {"modules": ["AllPredicate", "Predicate", "Arrays"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of AllPredicate.allPredicate when provided with a single predicate."}, {"name": "testAllPredicate_MultiplePredicates", "primary_tested": ["AllPredicate.allPredicate(Collection<Predicate<Object>>)"], "external_dependencies": {"modules": ["AllPredicate", "Predicate", "Arrays"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of AllPredicate.allPredicate when provided with multiple predicates."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/ComparatorChain_addComparatorTest.java", "testclass_name": "ComparatorChain_addComparatorTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import org.junit.jupiter.api.Test;", "import java.util.ArrayList;", "import java.util.BitSet;", "import java.util.Comparator;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "ComparatorChain_addComparatorTest", "description": "Unit test for the addComparator method of the ComparatorChain class.", "class_members": {"variables": [{"name": "comparators", "type": "List<Comparator<String>>"}, {"name": "bits", "type": "BitSet"}, {"name": "chain", "type": "ComparatorChain<String>"}, {"name": "comparator", "type": "Comparator<String>"}]}, "test_cases": [{"name": "testAddComparator", "primary_tested": ["ComparatorChain.addComparator(Comparator<String>,boolean)"], "associated_methods": ["ComparatorChain.size()", "BitSet.get(int)"], "external_dependencies": {"modules": ["java.util.ArrayList", "java.util.BitSet", "java.util.Comparator", "java.util.List", "org.apache.commons.collections4.comparators.ComparatorChain"], "class_members": [{"name": "comparators", "type": "variable"}, {"name": "bits", "type": "variable"}, {"name": "chain", "type": "variable"}, {"name": "comparator", "type": "variable"}]}, "category": "unit", "description": "Tests the addition of a comparator to the ComparatorChain and verifies the size of the chain and the state of the BitSet."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/functors/ComparatorPredicate_comparatorPredicateTest.java", "testclass_name": "ComparatorPredicate_comparatorPredicateTest", "dependencies": ["package org.apache.commons.collections4.functors;", "import org.apache.commons.collections4.Predicate;", "import org.junit.jupiter.api.Test;", "import java.util.Comparator;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "ComparatorPredicate_comparatorPredicateTest", "description": "Unit tests for the ComparatorPredicate class, focusing on the comparatorPredicate method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testComparatorPredicate_WithNonNullComparatorAndCriterion", "primary_tested": ["ComparatorPredicate.comparatorPredicate(Integer,Comparator<Integer>,ComparatorPredicate.Criterion)"], "external_dependencies": {"modules": ["Comparator", "Predicate", "ComparatorPredicate", "ComparatorPredicate.Criterion"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the comparatorPredicate method with a non-null comparator and criterion."}, {"name": "testComparatorPredicate_WithNullComparator", "primary_tested": ["ComparatorPredicate.comparatorPredicate(Integer,Comparator<Integer>,ComparatorPredicate.Criterion)"], "external_dependencies": {"modules": ["Comparator", "ComparatorPredicate", "ComparatorPredicate.Criterion"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the comparatorPredicate method with a null comparator, expecting a NullPointerException."}, {"name": "testComparatorPredicate_WithNullCriterion", "primary_tested": ["ComparatorPredicate.comparatorPredicate(Integer,Comparator<Integer>,ComparatorPredicate.Criterion)"], "external_dependencies": {"modules": ["Comparator", "ComparatorPredicate", "ComparatorPredicate.Criterion"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the comparatorPredicate method with a null criterion, expecting a NullPointerException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/CompositeMap_equalsTest.java", "testclass_name": "CompositeMap_equalsTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeMap_equalsTest", "description": "Unit tests for the equals method of the CompositeMap class.", "class_members": {"variables": [{"name": "one", "type": "Map<String, String>"}, {"name": "two", "type": "Map<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEqualsWithEqualMaps", "primary_tested": ["CompositeMap.equals(Object)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap", "Map"], "class_members": [{"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with two equal maps."}, {"name": "testEqualsWithDifferentMaps", "primary_tested": ["CompositeMap.equals(Object)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap", "Map"], "class_members": [{"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with two different maps."}, {"name": "testEqualsWithNonMapObject", "primary_tested": ["CompositeMap.equals(Object)"], "external_dependencies": {"modules": ["CompositeMap"], "class_members": [{"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with a non-map object."}, {"name": "testEqualsWithEmptyMap", "primary_tested": ["CompositeMap.equals(Object)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap", "Map"], "class_members": [{"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with an empty map."}, {"name": "testEqualsWithNull", "primary_tested": ["CompositeMap.equals(Object)"], "external_dependencies": {"modules": ["CompositeMap"], "class_members": [{"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with a null object."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/functors/EqualPredicate_testTest.java", "testclass_name": "EqualPredicate_testTest", "dependencies": ["package org.apache.commons.collections4.functors;", "import org.apache.commons.collections4.Equator;", "import org.apache.commons.collections4.Predicate;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;"], "name": "EqualPredicate_testTest", "description": "Unit tests for the EqualPredicate class, focusing on its functionality with and without an Equator.", "class_members": {"variables": [{"name": "expectedValue", "type": "String"}, {"name": "equator", "type": "Equator<String>"}, {"name": "predicate", "type": "Predicate<String>"}]}, "test_cases": [{"name": "testWithEquator", "primary_tested": ["EqualPredicate.equalPredicate(String,Equator<String>)"], "associated_methods": ["Equator.equate(String,String)"], "external_dependencies": {"modules": ["Equator", "Predicate", "EqualPredicate"], "class_members": [{"name": "expectedValue", "type": "variable"}, {"name": "equator", "type": "variable"}, {"name": "predicate", "type": "variable"}]}, "category": "unit", "description": "Tests the EqualPredicate functionality when an Equator is provided."}, {"name": "testWithoutEquator", "primary_tested": ["EqualPredicate.equalPredicate(String)"], "external_dependencies": {"modules": ["Predicate", "EqualPredicate"], "class_members": [{"name": "expectedValue", "type": "variable"}, {"name": "predicate", "type": "variable"}]}, "category": "unit", "description": "Tests the EqualPredicate functionality when no Equator is provided."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/splitmap/TransformedSplitMap_transformingMapTest.java", "testclass_name": "TransformedSplitMap_transformingMapTest", "dependencies": ["package org.apache.commons.collections4.splitmap;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.map.LinkedMap;", "import org.junit.jupiter.api.Test;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.assertNotNull;"], "name": "TransformedSplitMap_transformingMapTest", "description": "Unit tests for the TransformedSplitMap transformingMap functionality.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testTransformingMap", "primary_tested": ["TransformedSplitMap.transformingMap(Map,Transformer,Transformer)"], "external_dependencies": {"modules": ["LinkedMap", "Transformer", "TransformedSplitMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the creation of a TransformedSplitMap using transformingMap method."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/ReverseComparator_equalsTest.java", "testclass_name": "ReverseComparator_equalsTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import org.junit.jupiter.api.Test;", "import java.util.Comparator;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "ReverseComparator_equalsTest", "description": "Unit tests for the equals method of the ReverseComparator class.", "class_members": {"variables": [{"name": "naturalOrder", "type": "Comparator<Integer>"}, {"name": "rc1", "type": "ReverseComparator<Integer>"}, {"name": "rc2", "type": "ReverseComparator<Integer>"}, {"name": "rc3", "type": "ReverseComparator<Integer>"}]}, "test_cases": [{"name": "testEquals", "primary_tested": ["ReverseComparator.equals(Object)"], "external_dependencies": {"modules": ["Comparator", "ReverseComparator"], "class_members": [{"name": "naturalOrder", "type": "variable"}, {"name": "rc1", "type": "variable"}, {"name": "rc2", "type": "variable"}, {"name": "rc3", "type": "variable"}]}, "category": "unit", "description": "Tests the equals method of the ReverseComparator class, including same instance, null comparison, same class with same comparator, same class with different comparator, and different class comparison."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/TransformedSortedMap_tailMapTest.java", "testclass_name": "TransformedSortedMap_tailMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.SortedMap;", "import java.util.TreeMap;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.TransformerUtils;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "TransformedSortedMap_tailMapTest", "description": "Unit tests for the tailMap functionality of TransformedSortedMap.", "class_members": {"variables": [{"name": "baseMap", "type": "SortedMap<String, String>"}, {"name": "keyTransformer", "type": "Transformer<String, String>"}, {"name": "valueTransformer", "type": "Transformer<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testTailMap", "primary_tested": ["TransformedSortedMap.tailMap(String)"], "associated_methods": ["SortedMap.size()", "SortedMap.get(String)"], "external_dependencies": {"modules": ["TransformedSortedMap", "SortedMap", "Transformer", "TransformerUtils"], "class_members": [{"name": "baseMap", "type": "variable"}, {"name": "keyTransformer", "type": "variable"}, {"name": "valueTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the tailMap functionality of TransformedSortedMap, ensuring it returns the correct submap starting from the specified key."}, {"name": "testTailMapWithNullKey", "primary_tested": ["TransformedSortedMap.tailMap(String)"], "external_dependencies": {"modules": ["TransformedSortedMap", "Transformer", "TransformerUtils"], "class_members": [{"name": "baseMap", "type": "variable"}, {"name": "keyTransformer", "type": "variable"}, {"name": "valueTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the tailMap functionality of TransformedSortedMap when a null key is provided, expecting a NullPointerException."}, {"name": "testTailMapWithNonExistentKey", "primary_tested": ["TransformedSortedMap.tailMap(String)"], "associated_methods": ["SortedMap.size()"], "external_dependencies": {"modules": ["TransformedSortedMap", "SortedMap", "Transformer", "TransformerUtils"], "class_members": [{"name": "baseMap", "type": "variable"}, {"name": "keyTransformer", "type": "variable"}, {"name": "valueTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the tailMap functionality of TransformedSortedMap when a non-existent key is provided, ensuring it returns an empty submap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/BooleanComparator_equalsTest.java", "testclass_name": "BooleanComparator_equalsTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.junit.jupiter.api.Test;"], "name": "BooleanComparator_equalsTest", "description": "Unit tests for the equals method of the BooleanComparator class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testEquals_SameInstance", "primary_tested": ["BooleanComparator.equals(Object)"], "external_dependencies": {"modules": ["BooleanComparator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the equals method with the same instance."}, {"name": "testEquals_DifferentInstanceSameState", "primary_tested": ["BooleanComparator.equals(Object)"], "external_dependencies": {"modules": ["BooleanComparator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the equals method with different instances but the same state."}, {"name": "testEquals_DifferentInstanceDifferentState", "primary_tested": ["BooleanComparator.equals(Object)"], "external_dependencies": {"modules": ["BooleanComparator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the equals method with different instances and different states."}, {"name": "testEquals_DifferentClass", "primary_tested": ["BooleanComparator.equals(Object)"], "external_dependencies": {"modules": ["BooleanComparator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the equals method with an instance of a different class."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_containsValueTest.java", "testclass_name": "StaticBucketMap_containsValueTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "StaticBucketMap_containsValueTest", "description": "Unit tests for the containsValue method of the StaticBucketMap class.", "class_members": {"variables": [{"name": "map", "type": "StaticBucketMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testContainsValue_ValuePresent", "primary_tested": ["StaticBucketMap.containsValue(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsValue method when the value is present in the map."}, {"name": "testContainsValue_ValueNotPresent", "primary_tested": ["StaticBucketMap.containsValue(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsValue method when the value is not present in the map."}, {"name": "testContainsValue_NullValuePresent", "primary_tested": ["StaticBucketMap.containsValue(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsValue method when a null value is present in the map."}, {"name": "testContainsValue_NullValueNotPresent", "primary_tested": ["StaticBucketMap.containsValue(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsValue method when a null value is not present in the map."}, {"name": "testContainsValue_EmptyMap", "primary_tested": ["StaticBucketMap.containsValue(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsValue method on an empty map."}, {"name": "testContainsValue_MultipleValues", "primary_tested": ["StaticBucketMap.containsValue(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsValue method with multiple values in the map."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_isEmptyTest.java", "testclass_name": "PassiveExpiringMap_isEmptyTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.HashMap;", "import java.util.Map;", "import java.util.concurrent.TimeUnit;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "PassiveExpiringMap_isEmptyTest", "description": "Unit tests for the isEmpty method of PassiveExpiringMap.", "class_members": {"variables": [{"name": "expiringMap", "type": "PassiveExpiringMap<Integer, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testIsEmpty_WithNoEntries", "primary_tested": ["PassiveExpiringMap.isEmpty()"], "external_dependencies": {"modules": ["PassiveExpiringMap"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isEmpty method when the map has no entries."}, {"name": "testIsEmpty_WithNonExpiredEntries", "primary_tested": ["PassiveExpiringMap.isEmpty()"], "associated_methods": ["PassiveExpiringMap.put(Integer,String)"], "external_dependencies": {"modules": ["PassiveExpiringMap"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isEmpty method when the map has non-expired entries."}, {"name": "testIsEmpty_WithExpiredEntries", "primary_tested": ["PassiveExpiringMap.isEmpty()"], "associated_methods": ["PassiveExpiringMap.put(Integer,String)"], "external_dependencies": {"modules": ["PassiveExpiringMap"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isEmpty method when the map has expired entries."}, {"name": "testIsEmpty_WithMixedExpiry", "primary_tested": ["PassiveExpiringMap.isEmpty()"], "associated_methods": ["PassiveExpiringMap.put(Integer,String)"], "external_dependencies": {"modules": ["PassiveExpiringMap"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isEmpty method when the map has entries with mixed expiry times."}, {"name": "testIsEmpty_AfterClear", "primary_tested": ["PassiveExpiringMap.isEmpty()"], "associated_methods": ["PassiveExpiringMap.put(Integer,String)", "PassiveExpiringMap.clear()"], "external_dependencies": {"modules": ["PassiveExpiringMap"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isEmpty method after clearing the map."}, {"name": "testIsEmpty_AfterRemove", "primary_tested": ["PassiveExpiringMap.isEmpty()"], "associated_methods": ["PassiveExpiringMap.put(Integer,String)", "PassiveExpiringMap.remove(Integer)"], "external_dependencies": {"modules": ["PassiveExpiringMap"], "class_members": [{"name": "expiringMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isEmpty method after removing entries from the map."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/trie/UnmodifiableTrie_unmodifiableTrieTest.java", "testclass_name": "UnmodifiableTrie_unmodifiableTrieTest", "dependencies": ["package org.apache.commons.collections4.trie;", "import org.apache.commons.collections4.Trie;", "import org.apache.commons.collections4.Unmodifiable;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;"], "name": "UnmodifiableTrie_unmodifiableTrieTest", "description": "Tests for the UnmodifiableTrie class, specifically focusing on the unmodifiableTrie method.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testUnmodifiableTrieWithUnmodifiableTrie", "primary_tested": ["UnmodifiableTrie.unmodifiableTrie(Trie)"], "associated_methods": ["Trie.containsKey(String)"], "external_dependencies": {"modules": ["Trie", "UnmodifiableTrie"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the unmodifiableTrie method when the input is already an UnmodifiableTrie."}, {"name": "testUnmodifiableTrieWithModifiableTrie", "primary_tested": ["UnmodifiableTrie.unmodifiableTrie(Trie)"], "associated_methods": ["Trie.containsKey(String)"], "external_dependencies": {"modules": ["Trie", "UnmodifiableTrie"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the unmodifiableTrie method when the input is a modifiable Trie."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/DefaultedMap_getTest.java", "testclass_name": "DefaultedMap_getTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Map;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.functors.ConstantTransformer;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "DefaultedMap_getTest", "description": "Unit tests for the get method of DefaultedMap class in Apache Commons Collections.", "class_members": {"variables": [{"name": "defaultedMap", "type": "DefaultedMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetExistingKey", "primary_tested": ["DefaultedMap.get(String)"], "external_dependencies": {"modules": ["DefaultedMap", "HashMap"], "class_members": [{"name": "defaultedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method of DefaultedMap for an existing key."}, {"name": "testGetNonExistingKey", "primary_tested": ["DefaultedMap.get(String)"], "associated_methods": ["DefaultedMap.containsKey(String)"], "external_dependencies": {"modules": ["DefaultedMap", "HashMap"], "class_members": [{"name": "defaultedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method of DefaultedMap for a non-existing key."}, {"name": "testGetNullKey", "primary_tested": ["DefaultedMap.get(String)"], "associated_methods": ["DefaultedMap.containsKey(String)"], "external_dependencies": {"modules": ["DefaultedMap", "HashMap"], "class_members": [{"name": "defaultedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method of DefaultedMap for a null key."}, {"name": "testGetAfterAddingAndRemovingKey", "primary_tested": ["DefaultedMap.get(String)"], "associated_methods": ["DefaultedMap.containsKey(String)", "DefaultedMap.remove(String)"], "external_dependencies": {"modules": ["DefaultedMap", "HashMap"], "class_members": [{"name": "defaultedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method of DefaultedMap after adding and removing a key."}, {"name": "testGetWithEmptyMap", "primary_tested": ["DefaultedMap.get(String)"], "associated_methods": ["DefaultedMap.containsKey(String)", "DefaultedMap.size()"], "external_dependencies": {"modules": ["DefaultedMap", "HashMap"], "class_members": [{"name": "defaultedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method of DefaultedMap with an empty map."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_containsValueTest.java", "testclass_name": "MultiValueMap_containsValueTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Collection;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "MultiValueMap_containsValueTest", "description": "Unit tests for the containsValue method in the MultiValueMap class.", "class_members": {"variables": [{"name": "multiValueMap", "type": "MultiValueMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testContainsValue_ValuePresentInCollection", "primary_tested": ["MultiValueMap.containsValue(String)"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "multiValueMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the containsValue method correctly identifies a value present in the collection."}, {"name": "testContainsValue_ValueNotPresentInCollection", "primary_tested": ["MultiValueMap.containsValue(String)"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "multiValueMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the containsValue method correctly identifies a value not present in the collection."}, {"name": "testContainsValue_EmptyMap", "primary_tested": ["MultiValueMap.containsValue(String)"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "multiValueMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsValue method on an empty map."}, {"name": "testContainsValue_NullValue", "primary_tested": ["MultiValueMap.containsValue(String)"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "multiValueMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the containsValue method correctly handles a null value."}, {"name": "testContainsValue_MultipleKeysWithSameValue", "primary_tested": ["MultiValueMap.containsValue(String)"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "multiValueMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the containsValue method correctly identifies a value present under multiple keys."}, {"name": "testContainsValue_ValuePresentInDifferentCollections", "primary_tested": ["MultiValueMap.containsValue(String)"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "multiValueMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the containsValue method correctly identifies values present in different collections."}, {"name": "testContainsValue_ValueRemovedFromCollection", "primary_tested": ["MultiValueMap.containsValue(String)"], "associated_methods": ["MultiValueMap.removeMapping(String,String)"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "multiValueMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the containsValue method correctly identifies a value after it has been removed from a collection."}, {"name": "testContainsValue_ValueAddedToNewCollection", "primary_tested": ["MultiValueMap.containsValue(String)"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "multiValueMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the containsValue method correctly identifies a value added to a new collection."}, {"name": "testContainsValue_ValueAddedToExistingCollection", "primary_tested": ["MultiValueMap.containsValue(String)"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "multiValueMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the containsValue method correctly identifies a value added to an existing collection."}, {"name": "testContainsValue_ValueRemovedFromAllCollections", "primary_tested": ["MultiValueMap.containsValue(String)"], "associated_methods": ["MultiValueMap.removeMapping(String,String)"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "multiValueMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the containsValue method correctly identifies a value after it has been removed from all collections."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/CompositeMap_containsKeyTest.java", "testclass_name": "CompositeMap_containsKeyTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeMap_containsKeyTest", "description": "Unit tests for the containsKey method in the CompositeMap class.", "class_members": {"variables": [{"name": "one", "type": "Map<String, String>"}, {"name": "two", "type": "Map<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testContainsKey_KeyPresentInFirstMap", "primary_tested": ["CompositeMap.containsKey(String)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap"], "class_members": [{"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the containsKey method returns true when the key is present in the first map."}, {"name": "testContainsKey_KeyPresentInSecondMap", "primary_tested": ["CompositeMap.containsKey(String)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap"], "class_members": [{"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the containsKey method returns true when the key is present in the second map."}, {"name": "testContainsKey_KeyNotPresent", "primary_tested": ["CompositeMap.containsKey(String)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap"], "class_members": [{"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the containsKey method returns false when the key is not present in any map."}, {"name": "testContainsKey_AfterAddingNewMap", "primary_tested": ["CompositeMap.containsKey(String)"], "associated_methods": ["CompositeMap.addComposited(Map)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap"], "class_members": [{"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the containsKey method returns true after adding a new map with the key."}, {"name": "testContainsKey_AfterRemovingKey", "primary_tested": ["CompositeMap.containsKey(String)"], "associated_methods": ["CompositeMap.remove(Object)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap"], "class_members": [{"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the containsKey method returns false after removing the key from the map."}, {"name": "testContainsKey_AfterRemovingCompositedMap", "primary_tested": ["CompositeMap.containsKey(String)"], "associated_methods": ["CompositeMap.removeComposited(Map)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap"], "class_members": [{"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the containsKey method returns false after removing a composited map containing the key."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_sizeTest.java", "testclass_name": "StaticBucketMap_sizeTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "StaticBucketMap_sizeTest", "description": "Unit tests for the size method of the StaticBucketMap class.", "class_members": {"variables": [{"name": "map", "type": "StaticBucketMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testSizeEmptyMap", "primary_tested": ["StaticBucketMap.size()"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method when the map is empty."}, {"name": "testSizeAfterPut", "primary_tested": ["StaticBucketMap.size()"], "associated_methods": ["StaticBucketMap.put(String,String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method after adding elements to the map."}, {"name": "testSizeAfterRemove", "primary_tested": ["StaticBucketMap.size()"], "associated_methods": ["StaticBucketMap.put(String,String)", "StaticBucketMap.remove(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method after adding and removing elements from the map."}, {"name": "testSizeAfterClear", "primary_tested": ["StaticBucketMap.size()"], "associated_methods": ["StaticBucketMap.put(String,String)", "StaticBucketMap.clear()"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method after adding elements and then clearing the map."}, {"name": "testSizeWithDuplicateKeys", "primary_tested": ["StaticBucketMap.size()"], "associated_methods": ["StaticBucketMap.put(String,String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method when duplicate keys are added to the map."}, {"name": "testSizeWithNullValues", "primary_tested": ["StaticBucketMap.size()"], "associated_methods": ["StaticBucketMap.put(String,String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method when null values are added to the map."}, {"name": "testSizeWithNullKeys", "primary_tested": ["StaticBucketMap.size()"], "associated_methods": ["StaticBucketMap.put(String,String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method when null keys are added to the map."}, {"name": "testSizeWithMultiplePutsAndRemoves", "primary_tested": ["StaticBucketMap.size()"], "associated_methods": ["StaticBucketMap.put(String,String)", "StaticBucketMap.remove(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method after multiple put and remove operations."}, {"name": "testSizeWithConcurrentOperations", "primary_tested": ["StaticBucketMap.size()"], "associated_methods": ["StaticBucketMap.put(String,String)", "StaticBucketMap.remove(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method after concurrent put and remove operations."}, {"name": "testSizeWithEmptyBuckets", "primary_tested": ["StaticBucketMap.size()"], "associated_methods": ["StaticBucketMap.put(String,String)", "StaticBucketMap.remove(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method after adding and removing elements, leaving empty buckets."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_firstKeyTest.java", "testclass_name": "ListOrderedMap_firstKeyTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ListOrderedMap_firstKeyTest", "description": "Unit tests for the firstKey method of the ListOrderedMap class.", "class_members": {"variables": [{"name": "listOrderedMap", "type": "ListOrderedMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testFirstKey_EmptyMap", "primary_tested": ["ListOrderedMap.firstKey()"], "external_dependencies": {"modules": ["ListOrderedMap", "NoSuchElementException"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the firstKey method when the map is empty, expecting a NoSuchElementException."}, {"name": "testFirstKey_NonEmptyMap", "primary_tested": ["ListOrderedMap.firstKey()"], "associated_methods": ["ListOrderedMap.put(String,String)"], "external_dependencies": {"modules": ["ListOrderedMap"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the firstKey method when the map is non-empty, expecting the first key added."}, {"name": "testFirstKey_AfterRemoveFirstKey", "primary_tested": ["ListOrderedMap.firstKey()"], "associated_methods": ["ListOrderedMap.put(String,String)", "ListOrderedMap.remove(String)"], "external_dependencies": {"modules": ["ListOrderedMap"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the firstKey method after removing the first key, expecting the next key in order."}, {"name": "testFirstKey_AfterAddNewKey", "primary_tested": ["ListOrderedMap.firstKey()"], "associated_methods": ["ListOrderedMap.put(String,String)"], "external_dependencies": {"modules": ["ListOrderedMap"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the firstKey method after adding new keys, expecting the first key added."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/BooleanComparator_compareTest.java", "testclass_name": "BooleanComparator_compareTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "BooleanComparator_compareTest", "description": "Unit tests for the BooleanComparator class, focusing on its compare method and related functionalities.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testCompareTrueFirst", "primary_tested": ["BooleanComparator.compare(Boolean,Boolean)"], "external_dependencies": {"modules": ["BooleanComparator", "Boolean"]}, "category": "unit", "description": "Tests the compare method of BooleanComparator when TRUE values are prioritized."}, {"name": "testCompareFalseFirst", "primary_tested": ["BooleanComparator.compare(Boolean,Boolean)"], "external_dependencies": {"modules": ["BooleanComparator", "Boolean"]}, "category": "unit", "description": "Tests the compare method of BooleanComparator when FALSE values are prioritized."}, {"name": "testCompareWithNull", "primary_tested": ["BooleanComparator.compare(Boolean,Boolean)"], "external_dependencies": {"modules": ["BooleanComparator", "Boolean"]}, "category": "unit", "description": "Tests the compare method of BooleanComparator when null values are passed, expecting a NullPointerException."}, {"name": "testSortsTrueFirst", "primary_tested": ["BooleanComparator.sortsTrueFirst()"], "external_dependencies": {"modules": ["BooleanComparator"]}, "category": "unit", "description": "Tests the sortsTrueFirst method of BooleanComparator to ensure it correctly identifies the sorting order."}, {"name": "testEquals", "primary_tested": ["BooleanComparator.equals(Object)"], "external_dependencies": {"modules": ["BooleanComparator"]}, "category": "unit", "description": "Tests the equals method of BooleanComparator to ensure it correctly identifies equality between comparators."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_removeAllTest.java", "testclass_name": "MultiKeyMap_removeAllTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.*;", "import org.apache.commons.collections4.MapIterator;", "import org.apache.commons.collections4.keyvalue.MultiKey;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "MultiKeyMap_removeAllTest", "description": "Unit tests for the removeAll functionality of the MultiKeyMap class.", "class_members": {"variables": [{"name": "multiKeyMap", "type": "MultiKeyMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveAllWithExistingKey", "primary_tested": ["MultiKeyMap.removeAll(String)"], "associated_methods": ["MultiKeyMap.put(String,String,String)", "MultiKeyMap.containsKey(String,String)"], "external_dependencies": {"modules": ["MultiKeyMap", "MultiKey"], "class_members": [{"name": "multiKeyMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeAll functionality with an existing key in the MultiKeyMap."}, {"name": "testRemoveAllWithNonExistingKey", "primary_tested": ["MultiKeyMap.removeAll(String)"], "associated_methods": ["MultiKeyMap.put(String,String,String)", "MultiKeyMap.containsKey(String,String)"], "external_dependencies": {"modules": ["MultiKeyMap", "MultiKey"], "class_members": [{"name": "multiKeyMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeAll functionality with a non-existing key in the MultiKeyMap."}, {"name": "testRemoveAllWithNullKey", "primary_tested": ["MultiKeyMap.removeAll(String)"], "associated_methods": ["MultiKeyMap.put(String,String,String)", "MultiKeyMap.containsKey(String,String)"], "external_dependencies": {"modules": ["MultiKeyMap", "MultiKey"], "class_members": [{"name": "multiKeyMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeAll functionality with a null key in the MultiKeyMap."}, {"name": "testRemoveAllWithEmptyMap", "primary_tested": ["MultiKeyMap.removeAll(String)"], "external_dependencies": {"modules": ["MultiKeyMap", "MultiKey"], "class_members": [{"name": "multiKeyMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeAll functionality with an empty MultiKeyMap."}, {"name": "testRemoveAllWithMultipleKeys", "primary_tested": ["MultiKeyMap.removeAll(String)"], "associated_methods": ["MultiKeyMap.put(String,String,String)", "MultiKeyMap.containsKey(String,String)"], "external_dependencies": {"modules": ["MultiKeyMap", "MultiKey"], "class_members": [{"name": "multiKeyMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeAll functionality with multiple keys in the MultiKeyMap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/TransformedSortedMap_subMapTest.java", "testclass_name": "TransformedSortedMap_subMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.SortedMap;", "import java.util.TreeMap;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.TransformerUtils;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "TransformedSortedMap_subMapTest", "description": "Unit tests for the subMap functionality of TransformedSortedMap.", "class_members": {"variables": [{"name": "originalMap", "type": "SortedMap<String, String>"}, {"name": "keyTransformer", "type": "Transformer<String, String>"}, {"name": "valueTransformer", "type": "Transformer<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testSubMap", "primary_tested": ["TransformedSortedMap.subMap(String,String)"], "external_dependencies": {"modules": ["TransformedSortedMap", "TransformerUtils", "SortedMap", "TreeMap"], "class_members": [{"name": "originalMap", "type": "variable"}, {"name": "keyTransformer", "type": "variable"}, {"name": "valueTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the subMap functionality of TransformedSortedMap with both key and value transformers."}, {"name": "testSubMapWithNoTransformers", "primary_tested": ["TransformedSortedMap.subMap(String,String)"], "external_dependencies": {"modules": ["TransformedSortedMap", "SortedMap", "TreeMap"], "class_members": [{"name": "originalMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the subMap functionality of TransformedSortedMap without any transformers."}, {"name": "testSubMapWithKeyTransformer", "primary_tested": ["TransformedSortedMap.subMap(String,String)"], "external_dependencies": {"modules": ["TransformedSortedMap", "TransformerUtils", "SortedMap", "TreeMap"], "class_members": [{"name": "originalMap", "type": "variable"}, {"name": "keyTransformer", "type": "variable"}, {"name": "valueTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the subMap functionality of TransformedSortedMap with only a key transformer."}, {"name": "testSubMapWithValueTransformer", "primary_tested": ["TransformedSortedMap.subMap(String,String)"], "external_dependencies": {"modules": ["TransformedSortedMap", "TransformerUtils", "SortedMap", "TreeMap"], "class_members": [{"name": "originalMap", "type": "variable"}, {"name": "keyTransformer", "type": "variable"}, {"name": "valueTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the subMap functionality of TransformedSortedMap with only a value transformer."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_putTest.java", "testclass_name": "MultiKeyMap_putTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.keyvalue.MultiKey;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "MultiKeyMap_putTest", "description": "Unit tests for the put method of MultiKeyMap, focusing on adding new entries and updating existing ones.", "class_members": {"variables": [{"name": "map", "type": "MultiKeyMap<String, String>"}, {"name": "key1", "type": "String"}, {"name": "key2", "type": "String"}, {"name": "key3", "type": "String"}, {"name": "key4", "type": "String"}, {"name": "key5", "type": "String"}, {"name": "value", "type": "String"}, {"name": "value1", "type": "String"}, {"name": "value2", "type": "String"}]}, "test_cases": [{"name": "testPutNewEntry", "primary_tested": ["MultiKeyMap.put(String,String,String,String,String,String)"], "external_dependencies": {"modules": ["MultiKeyMap", "String"], "class_members": [{"name": "map", "type": "variable"}, {"name": "key1", "type": "variable"}, {"name": "key2", "type": "variable"}, {"name": "key3", "type": "variable"}, {"name": "key4", "type": "variable"}, {"name": "key5", "type": "variable"}, {"name": "value", "type": "variable"}]}, "category": "unit", "description": "Tests the addition of a new entry to the MultiKeyMap using the put method."}, {"name": "testPutExistingEntry", "primary_tested": ["MultiKeyMap.put(String,String,String,String,String,String)"], "external_dependencies": {"modules": ["MultiKeyMap", "String"], "class_members": [{"name": "map", "type": "variable"}, {"name": "key1", "type": "variable"}, {"name": "key2", "type": "variable"}, {"name": "key3", "type": "variable"}, {"name": "key4", "type": "variable"}, {"name": "key5", "type": "variable"}, {"name": "value1", "type": "variable"}, {"name": "value2", "type": "variable"}]}, "category": "unit", "description": "Tests the update of an existing entry in the MultiKeyMap using the put method."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/TransformingComparator_compareTest.java", "testclass_name": "TransformingComparator_compareTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Comparator;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.TransformerUtils;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "TransformingComparator_compareTest", "description": "Unit tests for the TransformingComparator class, focusing on the compare method and equality checks.", "class_members": {"variables": [{"name": "transformer", "type": "Transformer<String, String>"}, {"name": "comparator", "type": "Comparator<String>"}, {"name": "transformingComparator", "type": "TransformingComparator<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testCompareEqualObjects", "primary_tested": ["TransformingComparator.compare(String,String)"], "external_dependencies": {"modules": ["TransformingComparator", "TransformerUtils"], "class_members": [{"name": "transformingComparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the compare method of TransformingComparator for equal objects."}, {"name": "testCompareLessThan", "primary_tested": ["TransformingComparator.compare(String,String)"], "external_dependencies": {"modules": ["TransformingComparator", "TransformerUtils"], "class_members": [{"name": "transformingComparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the compare method of TransformingComparator for objects where the first is less than the second."}, {"name": "testCompareGreaterThan", "primary_tested": ["TransformingComparator.compare(String,String)"], "external_dependencies": {"modules": ["TransformingComparator", "TransformerUtils"], "class_members": [{"name": "transformingComparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the compare method of TransformingComparator for objects where the first is greater than the second."}, {"name": "testEquals", "primary_tested": ["TransformingComparator.equals(Object)", "TransformingComparator.hashCode()"], "external_dependencies": {"modules": ["TransformingComparator", "TransformerUtils"], "class_members": [{"name": "transformingComparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals and hashCode methods of TransformingComparator to ensure they adhere to the equals-hashCode contract."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_putAllTest.java", "testclass_name": "StaticBucketMap_putAllTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;"], "name": "StaticBucketMap_putAllTest", "description": "Unit tests for the putAll method of StaticBucketMap.", "class_members": {"variables": [{"name": "map", "type": "StaticBucketMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPutAll_SingleEntry", "primary_tested": ["StaticBucketMap.putAll(Map<String,String>)"], "associated_methods": ["StaticBucketMap.size()", "StaticBucketMap.containsKey(String)", "StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap", "HashMap", "Map"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the putAll method with a single entry."}, {"name": "testPutAll_MultipleEntries", "primary_tested": ["StaticBucketMap.putAll(Map<String,String>)"], "associated_methods": ["StaticBucketMap.size()", "StaticBucketMap.containsKey(String)", "StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap", "HashMap", "Map"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the putAll method with multiple entries."}, {"name": "testPutAll_EmptyMap", "primary_tested": ["StaticBucketMap.putAll(Map<String,String>)"], "associated_methods": ["StaticBucketMap.size()"], "external_dependencies": {"modules": ["StaticBucketMap", "HashMap", "Map"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the putAll method with an empty map."}, {"name": "testPutAll_OverwriteExistingEntries", "primary_tested": ["StaticBucketMap.putAll(Map<String,String>)"], "associated_methods": ["StaticBucketMap.put(String,String)", "StaticBucketMap.size()", "StaticBucketMap.containsKey(String)", "StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap", "HashMap", "Map"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the putAll method by overwriting existing entries."}, {"name": "testPutAll_ClearBeforeAdding", "primary_tested": ["StaticBucketMap.putAll(Map<String,String>)"], "associated_methods": ["StaticBucketMap.put(String,String)", "StaticBucketMap.clear()", "StaticBucketMap.size()", "StaticBucketMap.containsKey(String)", "StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap", "HashMap", "Map"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the putAll method after clearing the map."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/SkippingIterator_nextTest.java", "testclass_name": "SkippingIterator_nextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import java.util.Arrays;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SkippingIterator_nextTest", "description": "Unit tests for the next() method of the SkippingIterator class.", "class_members": {"variables": [{"name": "testList", "type": "List<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNextAfterSkipping", "primary_tested": ["SkippingIterator.next()"], "associated_methods": ["SkippingIterator.hasNext()"], "external_dependencies": {"modules": ["SkippingIterator", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next() method of SkippingIterator after skipping elements."}, {"name": "testNextWithoutSkipping", "primary_tested": ["SkippingIterator.next()"], "associated_methods": ["SkippingIterator.hasNext()"], "external_dependencies": {"modules": ["SkippingIterator", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next() method of SkippingIterator without skipping any elements."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_putAllTest.java", "testclass_name": "MultiValueMap_putAllTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "MultiValueMap_putAllTest", "description": "Unit tests for the putAll method of the MultiValueMap class.", "class_members": {"variables": [{"name": "multiValueMap", "type": "MultiValueMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPutAll_Success", "primary_tested": ["MultiValueMap.putAll(String,Collection<String>)"], "associated_methods": ["MultiValueMap.size(String)", "MultiValueMap.totalSize()"], "external_dependencies": {"modules": ["MultiValueMap", "Collection", "Arrays"], "class_members": [{"name": "multiValueMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful addition of multiple values to a key in the MultiValueMap."}, {"name": "testPutAll_NullValues", "primary_tested": ["MultiValueMap.putAll(String,Collection<String>)"], "associated_methods": ["MultiValueMap.getCollection(String)", "MultiValueMap.totalSize()"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "multiValueMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior of the putAll method when null values are provided."}, {"name": "testPutAll_EmptyValues", "primary_tested": ["MultiValueMap.putAll(String,Collection<String>)"], "associated_methods": ["MultiValueMap.getCollection(String)", "MultiValueMap.totalSize()"], "external_dependencies": {"modules": ["MultiValueMap", "Collection", "ArrayList"], "class_members": [{"name": "multiValueMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior of the putAll method when empty values are provided."}, {"name": "testPutAll_ExistingKey", "primary_tested": ["MultiValueMap.putAll(String,Collection<String>)"], "associated_methods": ["MultiValueMap.size(String)", "MultiValueMap.totalSize()"], "external_dependencies": {"modules": ["MultiValueMap", "Collection", "Arrays"], "class_members": [{"name": "multiValueMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior of the putAll method when adding values to an existing key in the MultiValueMap."}, {"name": "testPutAll_MultipleKeys", "primary_tested": ["MultiValueMap.putAll(String,Collection<String>)"], "associated_methods": ["MultiValueMap.size(String)", "MultiValueMap.totalSize()"], "external_dependencies": {"modules": ["MultiValueMap", "Collection", "Arrays"], "class_members": [{"name": "multiValueMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior of the putAll method when adding values to multiple keys in the MultiValueMap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/FilterListIterator_nextTest.java", "testclass_name": "FilterListIterator_nextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.List;", "import java.util.ListIterator;", "import java.util.NoSuchElementException;", "import org.apache.commons.collections4.Predicate;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "FilterListIterator_nextTest", "description": "Unit tests for the next() method of FilterListIterator.", "class_members": {"variables": [{"name": "list", "type": "List<Integer>"}, {"name": "truePred", "type": "Predicate<Integer>"}, {"name": "filterListIterator", "type": "FilterListIterator<Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNextWithValidElement", "primary_tested": ["FilterListIterator.next()"], "external_dependencies": {"modules": ["FilterListIterator", "Predicate"], "class_members": [{"name": "filterListIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next() method of FilterListIterator when there is a valid element to return."}, {"name": "testNextWithNoSuchElementException", "primary_tested": ["FilterListIterator.next()"], "associated_methods": ["FilterListIterator.hasNext()"], "external_dependencies": {"modules": ["FilterListIterator", "Predicate", "NoSuchElementException"], "class_members": [{"name": "filterListIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next() method of FilterListIterator when there are no more elements to return, expecting a NoSuchElementException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/CompositeMap_isEmptyTest.java", "testclass_name": "CompositeMap_isEmptyTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeMap_isEmptyTest", "description": "Unit tests for the isEmpty method of the CompositeMap class.", "class_members": {"variables": [{"name": "compositeMap", "type": "CompositeMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testIsEmpty_WhenNoMapsAdded", "primary_tested": ["CompositeMap.isEmpty()"], "external_dependencies": {"modules": ["CompositeMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isEmpty method when no maps are added to the CompositeMap."}, {"name": "testIsEmpty_WhenMapsAddedButEmpty", "primary_tested": ["CompositeMap.isEmpty()"], "associated_methods": ["CompositeMap.addComposited(Map<String, String>)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isEmpty method when empty maps are added to the CompositeMap."}, {"name": "testIsEmpty_WhenMapsAddedWithEntries", "primary_tested": ["CompositeMap.isEmpty()"], "associated_methods": ["CompositeMap.addComposited(Map<String, String>)", "HashMap.put(String, String)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isEmpty method when maps with entries are added to the CompositeMap."}, {"name": "testIsEmpty_AfterClear", "primary_tested": ["CompositeMap.isEmpty()"], "associated_methods": ["CompositeMap.addComposited(Map<String, String>)", "CompositeMap.clear()", "HashMap.put(String, String)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isEmpty method after clearing the CompositeMap."}, {"name": "testIsEmpty_AfterRemovingMap", "primary_tested": ["CompositeMap.isEmpty()"], "associated_methods": ["CompositeMap.addComposited(Map<String, String>)", "CompositeMap.removeComposited(Map<String, String>)", "HashMap.put(String, String)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isEmpty method after removing a map from the CompositeMap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/NodeListIterator_nextTest.java", "testclass_name": "NodeListIterator_nextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.easymock.EasyMock.createMock;", "import static org.easymock.EasyMock.expect;", "import static org.easymock.EasyMock.replay;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import org.w3c.dom.Element;", "import org.w3c.dom.Node;", "import org.w3c.dom.NodeList;", "import org.w3c.dom.Text;"], "name": "NodeListIterator_nextTest", "description": "Unit tests for the next() method of NodeListIterator.", "class_members": {"variables": [{"name": "nodeListIterator", "type": "NodeListIterator"}, {"name": "nodes", "type": "Node[]"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNextWithElements", "primary_tested": ["NodeListIterator.next()"], "external_dependencies": {"modules": ["NodeListIterator", "Node"], "class_members": [{"name": "nodeListIterator", "type": "variable"}, {"name": "nodes", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next() method of NodeListIterator when there are elements to iterate over."}, {"name": "testNextWithNoMoreElements", "primary_tested": ["NodeListIterator.next()"], "external_dependencies": {"modules": ["NodeListIterator", "NoSuchElementException"], "class_members": [{"name": "nodeListIterator", "type": "variable"}, {"name": "nodes", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next() method of NodeListIterator when there are no more elements to iterate over, expecting a NoSuchElementException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/SingletonMap_getTest.java", "testclass_name": "SingletonMap_getTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SingletonMap_getTest", "description": "Unit tests for the get method of the SingletonMap class.", "class_members": {"variables": [{"name": "singletonMap", "type": "SingletonMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetWithMatchingKey", "primary_tested": ["SingletonMap.get(String)"], "external_dependencies": {"modules": ["SingletonMap"], "class_members": [{"name": "singletonMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method with a matching key."}, {"name": "testGetWithNonMatchingKey", "primary_tested": ["SingletonMap.get(String)"], "external_dependencies": {"modules": ["SingletonMap"], "class_members": [{"name": "singletonMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method with a non-matching key."}, {"name": "testGetWithNullKey", "primary_tested": ["SingletonMap.get(String)"], "external_dependencies": {"modules": ["SingletonMap"]}, "category": "unit", "description": "Tests the get method with a null key."}, {"name": "testGetWithNullValue", "primary_tested": ["SingletonMap.get(String)"], "external_dependencies": {"modules": ["SingletonMap"]}, "category": "unit", "description": "Tests the get method with a null value."}, {"name": "testGetWithNullKeyAndValue", "primary_tested": ["SingletonMap.get(String)"], "external_dependencies": {"modules": ["SingletonMap"]}, "category": "unit", "description": "Tests the get method with both null key and value."}, {"name": "testIsEqualKey", "primary_tested": ["SingletonMap.isEqualKey(String)"], "external_dependencies": {"modules": ["SingletonMap"], "class_members": [{"name": "singletonMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isEqualKey method."}, {"name": "testContainsKey", "primary_tested": ["SingletonMap.containsKey(String)"], "external_dependencies": {"modules": ["SingletonMap"], "class_members": [{"name": "singletonMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsKey method."}, {"name": "testGetValue", "primary_tested": ["SingletonMap.getValue()"], "external_dependencies": {"modules": ["SingletonMap"], "class_members": [{"name": "singletonMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getValue method."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparator_addTest.java", "testclass_name": "FixedOrderComparator_addTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "FixedOrderComparator_addTest", "description": "Unit tests for the add functionality of the FixedOrderComparator class.", "class_members": {"variables": [{"name": "comparator", "type": "FixedOrderComparator<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAddNewObject", "primary_tested": ["FixedOrderComparator.add(String)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests adding a new object to the FixedOrderComparator and ensures it cannot be added again."}, {"name": "testAddAfterLock", "primary_tested": ["FixedOrderComparator.add(String)"], "associated_methods": ["FixedOrderComparator.compare(String,String)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests adding an object to the FixedOrderComparator after it has been locked by invoking compare."}, {"name": "testAddAsEqual", "primary_tested": ["FixedOrderComparator.addAsEqual(String,String)"], "associated_methods": ["FixedOrderComparator.compare(String,String)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests adding an object as equal to another object in the FixedOrderComparator."}, {"name": "testCompareAfterAdd", "primary_tested": ["FixedOrderComparator.compare(String,String)"], "associated_methods": ["FixedOrderComparator.add(String)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the comparison functionality of the FixedOrderComparator after adding objects."}, {"name": "testEqualsAfterAdd", "primary_tested": ["FixedOrderComparator.equals(Object)"], "associated_methods": ["FixedOrderComparator.add(String)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equality of two FixedOrderComparator instances after adding the same objects."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_putTest.java", "testclass_name": "StaticBucketMap_putTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "StaticBucketMap_putTest", "description": "Unit tests for the put method of the StaticBucketMap class.", "class_members": {"variables": [{"name": "map", "type": "StaticBucketMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPutNewKey", "primary_tested": ["StaticBucketMap.put(String,String)"], "associated_methods": ["StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the put method with a new key, ensuring the value is correctly added and retrieved."}, {"name": "testPutExistingKey", "primary_tested": ["StaticBucketMap.put(String,String)"], "associated_methods": ["StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the put method with an existing key, ensuring the value is correctly updated and retrieved."}, {"name": "testPutNullKey", "primary_tested": ["StaticBucketMap.put(String,String)"], "associated_methods": ["StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the put method with a null key, ensuring the value is correctly added and retrieved."}, {"name": "testPutNullValue", "primary_tested": ["StaticBucketMap.put(String,String)"], "associated_methods": ["StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the put method with a null value, ensuring the null value is correctly added and retrieved."}, {"name": "testPutMultipleKeys", "primary_tested": ["StaticBucketMap.put(String,String)"], "associated_methods": ["StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the put method with multiple keys, ensuring each key-value pair is correctly added and retrieved."}, {"name": "testPutAndCheckContainsKey", "primary_tested": ["StaticBucketMap.put(String,String)"], "associated_methods": ["StaticBucketMap.containsKey(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the put method and checks if the key is contained in the map, ensuring the key is correctly added and recognized."}, {"name": "testPutAndRemove", "primary_tested": ["StaticBucketMap.put(String,String)"], "associated_methods": ["StaticBucketMap.remove(String)", "StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the put method and then removes the key, ensuring the key-value pair is correctly added, removed, and not retrievable."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIterator_nextIndexTest.java", "testclass_name": "LoopingListIterator_nextIndexTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.Arrays;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "LoopingListIterator_nextIndexTest", "description": "Unit tests for the nextIndex method of the LoopingListIterator class.", "class_members": {"variables": [{"name": "loopingListIterator", "type": "LoopingListIterator<String>"}, {"name": "list", "type": "List<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNextIndexWithElements", "primary_tested": ["LoopingListIterator.nextIndex()"], "associated_methods": ["LoopingListIterator.next()"], "external_dependencies": {"modules": ["LoopingListIterator", "List"], "class_members": [{"name": "loopingListIterator", "type": "variable"}, {"name": "list", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the nextIndex method when there are elements in the list."}, {"name": "testNextIndexAtEndOfList", "primary_tested": ["LoopingListIterator.nextIndex()"], "associated_methods": ["LoopingListIterator.next()"], "external_dependencies": {"modules": ["LoopingListIterator", "List"], "class_members": [{"name": "loopingListIterator", "type": "variable"}, {"name": "list", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the nextIndex method when the iterator is at the end of the list."}, {"name": "testNextIndexWithEmptyList", "primary_tested": ["LoopingListIterator.nextIndex()"], "external_dependencies": {"modules": ["LoopingListIterator", "List", "NoSuchElementException"], "class_members": [{"name": "loopingListIterator", "type": "variable"}, {"name": "list", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the nextIndex method when the list is empty, expecting a NoSuchElementException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_equalsTest.java", "testclass_name": "StaticBucketMap_equalsTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "StaticBucketMap_equalsTest", "description": "Unit tests for the equals method of the StaticBucketMap class.", "class_members": {"variables": [{"name": "map", "type": "StaticBucketMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEquals_SameInstance", "primary_tested": ["StaticBucketMap.equals(Object)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with the same instance."}, {"name": "testEquals_DifferentType", "primary_tested": ["StaticBucketMap.equals(Object)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with a different type."}, {"name": "testEquals_EmptyMaps", "primary_tested": ["StaticBucketMap.equals(Object)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with two empty maps."}, {"name": "testEquals_NonEmptyMapsWithSameEntries", "primary_tested": ["StaticBucketMap.equals(Object)"], "associated_methods": ["StaticBucketMap.put(String,String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with two non-empty maps having the same entries."}, {"name": "testEquals_NonEmptyMapsWithDifferentEntries", "primary_tested": ["StaticBucketMap.equals(Object)"], "associated_methods": ["StaticBucketMap.put(String,String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with two non-empty maps having different entries."}, {"name": "testEquals_NullValue", "primary_tested": ["StaticBucketMap.equals(Object)"], "associated_methods": ["StaticBucketMap.put(String,String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with null values in the maps."}, {"name": "testEquals_DifferentBucketSize", "primary_tested": ["StaticBucketMap.equals(Object)"], "associated_methods": ["StaticBucketMap.put(String,String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with maps having different bucket sizes."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/ComparatorChain_compareTest.java", "testclass_name": "ComparatorChain_compareTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.ArrayList;", "import java.util.BitSet;", "import java.util.Comparator;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;"], "name": "ComparatorChain_compareTest", "description": "Unit tests for the compare method in ComparatorChain class.", "class_members": {"variables": [{"name": "comparatorChain", "type": "ComparatorChain<String>"}, {"name": "comparators", "type": "List<Comparator<String>>"}, {"name": "orderingBits", "type": "BitSet"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testCompare_SingleComparator_ForwardOrder", "primary_tested": ["ComparatorChain.compare(String,String)"], "external_dependencies": {"modules": ["Comparator", "ComparatorChain"], "class_members": [{"name": "comparatorChain", "type": "variable"}, {"name": "comparators", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the compare method with a single comparator in forward order."}, {"name": "testCompare_SingleComparator_ReverseOrder", "primary_tested": ["ComparatorChain.compare(String,String)"], "external_dependencies": {"modules": ["Comparator", "ComparatorChain"], "class_members": [{"name": "comparatorChain", "type": "variable"}, {"name": "comparators", "type": "variable"}, {"name": "orderingBits", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the compare method with a single comparator in reverse order."}, {"name": "testCompare_MultipleComparators_MixedOrder", "primary_tested": ["ComparatorChain.compare(String,String)"], "external_dependencies": {"modules": ["Comparator", "ComparatorChain"], "class_members": [{"name": "comparatorChain", "type": "variable"}, {"name": "comparators", "type": "variable"}, {"name": "orderingBits", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the compare method with multiple comparators in mixed order."}, {"name": "testCompare_EmptyChain_ThrowsException", "primary_tested": ["ComparatorChain.compare(String,String)"], "external_dependencies": {"modules": ["ComparatorChain"], "class_members": [{"name": "comparatorChain", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the compare method throws an exception when the comparator chain is empty."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/IteratorIterable_iteratorTest.java", "testclass_name": "IteratorIterable_iteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import org.apache.commons.collections4.ResettableIterator;", "import org.junit.jupiter.api.Test;", "import java.util.Iterator;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.mockito.Mockito.*;"], "name": "IteratorIterable_iteratorTest", "description": "Unit tests for the IteratorIterable class, focusing on the iterator method.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testIteratorWithResettableIterator", "primary_tested": ["IteratorIterable.iterator()"], "associated_methods": ["ResettableIterator.reset()"], "external_dependencies": {"modules": ["ResettableIterator", "IteratorIterable", "Iterator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the iterator method of IteratorIterable when using a ResettableIterator, verifying that the reset method is called."}, {"name": "testIteratorWithoutResettableIterator", "primary_tested": ["IteratorIterable.iterator()"], "external_dependencies": {"modules": ["Iterator", "IteratorIterable"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the iterator method of IteratorIterable when using a regular Iterator, verifying that the iterator is correctly instantiated."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/CompositeMap_sizeTest.java", "testclass_name": "CompositeMap_sizeTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeMap_sizeTest", "description": "Unit tests for the size functionality of the CompositeMap class.", "class_members": {"variables": [{"name": "compositeMap", "type": "CompositeMap<String, String>"}, {"name": "mapOne", "type": "Map<String, String>"}, {"name": "mapTwo", "type": "Map<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testSizeWithTwoMaps", "primary_tested": ["CompositeMap.size()"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size of the CompositeMap with two initial maps."}, {"name": "testSizeAfterAddingMap", "primary_tested": ["CompositeMap.addComposited(Map<String, String>)"], "associated_methods": ["CompositeMap.size()"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size of the CompositeMap after adding a new map."}, {"name": "testSizeAfterRemovingMap", "primary_tested": ["CompositeMap.removeComposited(Map<String, String>)"], "associated_methods": ["CompositeMap.size()"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size of the CompositeMap after removing a map."}, {"name": "testSizeWithEmptyCompositeMap", "primary_tested": ["CompositeMap.size()"], "external_dependencies": {"modules": ["CompositeMap"]}, "category": "unit", "description": "Tests the size of an empty CompositeMap."}, {"name": "testSizeWithSingleMap", "primary_tested": ["CompositeMap.size()"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "mapOne", "type": "variable"}]}, "category": "unit", "description": "Tests the size of the CompositeMap with a single initial map."}, {"name": "testSizeAfterClear", "primary_tested": ["CompositeMap.clear()"], "associated_methods": ["CompositeMap.size()"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size of the CompositeMap after clearing all maps."}, {"name": "testSizeAfterPartialClear", "primary_tested": ["Map.clear()"], "associated_methods": ["CompositeMap.size()"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}, {"name": "mapOne", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size of the CompositeMap after partially clearing one of the maps."}, {"name": "testSizeWithDuplicateKeys", "primary_tested": ["CompositeMap.addComposited(Map<String, String>)"], "associated_methods": ["CompositeMap.size()"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size of the CompositeMap after adding a map with non-colliding keys."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparator_addAsEqualTest.java", "testclass_name": "FixedOrderComparator_addAsEqualTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.Arrays;", "import java.util.Comparator;", "import java.util.LinkedList;", "import java.util.List;", "import java.util.Random;", "import org.apache.commons.lang3.ArrayUtils;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "FixedOrderComparator_addAsEqualTest", "description": "Unit tests for the addAsEqual method of the FixedOrderComparator class.", "class_members": {"variables": [{"name": "comparator", "type": "FixedOrderComparator<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAddAsEqual_Success", "primary_tested": ["FixedOrderComparator.addAsEqual(String,String)"], "associated_methods": ["FixedOrderComparator.add(String)", "FixedOrderComparator.compare(String,String)"], "external_dependencies": {"modules": ["FixedOrderComparator", "org.junit.jupiter.api.Assertions"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful addition of new objects as equal to an existing object in the FixedOrderComparator."}, {"name": "testAddAsEqual_ExistingObjNotKnown", "primary_tested": ["FixedOrderComparator.addAsEqual(String,String)"], "external_dependencies": {"modules": ["FixedOrderComparator", "org.junit.jupiter.api.Assertions"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior when trying to add a new object as equal to an unknown existing object in the FixedOrderComparator, expecting an IllegalArgumentException."}, {"name": "testAddAsEqual_AlreadyKnown", "primary_tested": ["FixedOrderComparator.addAsEqual(String,String)"], "associated_methods": ["FixedOrderComparator.add(String)"], "external_dependencies": {"modules": ["FixedOrderComparator", "org.junit.jupiter.api.Assertions"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior when trying to add a new object as equal to an existing object that is already known in the FixedOrderComparator, expecting a false return."}, {"name": "testAddAsEqual_LockedComparator", "primary_tested": ["FixedOrderComparator.addAsEqual(String,String)"], "associated_methods": ["FixedOrderComparator.add(String)", "FixedOrderComparator.compare(String,String)"], "external_dependencies": {"modules": ["FixedOrderComparator", "org.junit.jupiter.api.Assertions"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior when trying to add a new object as equal to an existing object in a locked FixedOrderComparator, expecting an UnsupportedOperationException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/ZippingIterator_nextTest.java", "testclass_name": "ZippingIterator_nextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.ArrayList;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ZippingIterator_nextTest", "description": "Unit tests for the next method of the ZippingIterator class.", "class_members": {"variables": [{"name": "evens", "type": "ArrayList<Integer>"}, {"name": "odds", "type": "ArrayList<Integer>"}, {"name": "fib", "type": "ArrayList<Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNextWithElements", "primary_tested": ["ZippingIterator.next()"], "external_dependencies": {"modules": ["ZippingIterator", "ArrayList", "Integer"], "class_members": [{"name": "evens", "type": "variable"}, {"name": "odds", "type": "variable"}, {"name": "fib", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method of ZippingIterator when there are elements to iterate over."}, {"name": "testNextWithoutElements", "primary_tested": ["ZippingIterator.next()"], "external_dependencies": {"modules": ["ZippingIterator", "ArrayList", "NoSuchElementException"]}, "category": "unit", "fixtures_used": [], "description": "Tests the next method of ZippingIterator when there are no elements to iterate over, expecting a NoSuchElementException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableListIterator_unmodifiableListIteratorTest.java", "testclass_name": "UnmodifiableListIterator_unmodifiableListIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import org.junit.jupiter.api.Test;", "import java.util.ListIterator;", "import java.util.NoSuchElementException;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;"], "name": "UnmodifiableListIterator_unmodifiableListIteratorTest", "description": "Unit tests for the UnmodifiableListIterator class, specifically focusing on the unmodifiableListIterator method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testUnmodifiableListIteratorWithUnmodifiableIterator", "primary_tested": ["UnmodifiableListIterator.unmodifiableListIterator(ListIterator)"], "associated_methods": ["ListIterator.hasNext()", "ListIterator.next()", "ListIterator.hasPrevious()"], "external_dependencies": {"modules": ["ListIterator", "UnmodifiableListIterator"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the unmodifiableListIterator method with an unmodifiable iterator, verifying that the iterator's methods return the expected results."}, {"name": "testUnmodifiableListIteratorWithModifiableIterator", "primary_tested": ["UnmodifiableListIterator.unmodifiableListIterator(ListIterator)"], "associated_methods": ["ListIterator.hasNext()", "ListIterator.next()", "ListIterator.hasPrevious()"], "external_dependencies": {"modules": ["ListIterator", "UnmodifiableListIterator"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the unmodifiableListIterator method with a modifiable iterator, verifying that the iterator's methods return the expected results."}, {"name": "testUnmodifiableListIteratorWithNullIterator", "primary_tested": ["UnmodifiableListIterator.unmodifiableListIterator(ListIterator)"], "external_dependencies": {"modules": ["ListIterator", "UnmodifiableListIterator"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the unmodifiableListIterator method with a null iterator, expecting a NullPointerException to be thrown."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/BoundedIterator_hasNextTest.java", "testclass_name": "BoundedIterator_hasNextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import org.junit.jupiter.api.Test;", "import java.util.Iterator;", "import java.util.NoSuchElementException;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;"], "name": "BoundedIterator_hasNextTest", "description": "Unit tests for the hasNext method of the BoundedIterator class.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testHasNext_WithinBounds", "primary_tested": ["BoundedIterator.hasNext()"], "external_dependencies": {"modules": ["Iterator", "BoundedIterator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the hasNext method when the iterator is within bounds."}, {"name": "testHasNext_OutOfBounds", "primary_tested": ["BoundedIterator.hasNext()"], "external_dependencies": {"modules": ["Iterator", "BoundedIterator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the hasNext method when the iterator is out of bounds."}, {"name": "testHasNext_IteratorExhausted", "primary_tested": ["BoundedIterator.hasNext()"], "external_dependencies": {"modules": ["Iterator", "BoundedIterator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the hasNext method when the underlying iterator is exhausted."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/PushbackIterator_pushbackIteratorTest.java", "testclass_name": "PushbackIterator_pushbackIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.Iterator;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "PushbackIterator_pushbackIteratorTest", "description": "Unit tests for the PushbackIterator class in Apache Commons Collections, focusing on the pushbackIterator method.", "class_members": {"variables": [{"name": "testList", "type": "List<String>"}], "methods": [{"name": "setUp", "signature": "void setUp() throws Exception"}, {"name": "makeObject", "signature": "PushbackIterator<String> makeObject()"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPushbackIteratorWithPushbackIterator", "primary_tested": ["PushbackIterator.pushbackIterator(Iterator<String>)"], "external_dependencies": {"modules": ["PushbackIterator", "Iterator"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the pushbackIterator method when provided with another PushbackIterator instance."}, {"name": "testPushbackIteratorWithRegularIterator", "primary_tested": ["PushbackIterator.pushbackIterator(Iterator<String>)"], "external_dependencies": {"modules": ["PushbackIterator", "Iterator"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the pushbackIterator method when provided with a regular Iterator instance."}, {"name": "testPushbackIteratorWithNullIterator", "primary_tested": ["PushbackIterator.pushbackIterator(Iterator<String>)"], "external_dependencies": {"modules": ["PushbackIterator", "Iterator"]}, "category": "unit", "fixtures_used": [], "description": "Tests the pushbackIterator method when provided with a null Iterator instance, expecting a NullPointerException."}, {"name": "testPushbackIteratorWithEmptyIterator", "primary_tested": ["PushbackIterator.pushbackIterator(Iterator<String>)"], "external_dependencies": {"modules": ["PushbackIterator", "Iterator", "Collections"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the pushbackIterator method when provided with an empty Iterator instance."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableIterator_unmodifiableIteratorTest.java", "testclass_name": "UnmodifiableIterator_unmodifiableIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import org.junit.jupiter.api.Test;", "import java.util.Iterator;", "import java.util.NoSuchElementException;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;"], "name": "UnmodifiableIterator_unmodifiableIteratorTest", "description": "Tests for the UnmodifiableIterator class, specifically focusing on the unmodifiableIterator method.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testUnmodifiableIteratorWithModifiableIterator", "primary_tested": ["UnmodifiableIterator.unmodifiableIterator(Iterator)"], "external_dependencies": {"modules": ["Iterator", "UnmodifiableIterator"]}, "category": "unit", "description": "Tests that the unmodifiableIterator method returns a new UnmodifiableIterator instance when given a modifiable iterator."}, {"name": "testUnmodifiableIteratorWithUnmodifiableIterator", "primary_tested": ["UnmodifiableIterator.unmodifiableIterator(Iterator)"], "external_dependencies": {"modules": ["Iterator", "UnmodifiableIterator"]}, "category": "unit", "description": "Tests that the unmodifiableIterator method returns the same UnmodifiableIterator instance when given an unmodifiable iterator."}, {"name": "testUnmodifiableIteratorWithNullIterator", "primary_tested": ["UnmodifiableIterator.unmodifiableIterator(Iterator)"], "external_dependencies": {"modules": ["Iterator", "UnmodifiableIterator"]}, "category": "unit", "description": "Tests that the unmodifiableIterator method throws a NullPointerException when given a null iterator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/FilterIterator_removeTest.java", "testclass_name": "FilterIterator_removeTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.apache.commons.collections4.functors.TruePredicate.truePredicate;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.apache.commons.collections4.Predicate;", "import org.apache.commons.collections4.functors.NotNullPredicate;", "import org.apache.commons.lang3.ArrayUtils;", "import org.junit.jupiter.api.AfterEach;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "FilterIterator_removeTest", "description": "Unit tests for the remove functionality of the FilterIterator class.", "class_members": {"variables": [{"name": "iterator", "type": "FilterIterator<String>"}, {"name": "list", "type": "List<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveSuccess", "primary_tested": ["FilterIterator.remove()"], "associated_methods": ["FilterIterator.next()"], "external_dependencies": {"modules": ["FilterIterator", "List"], "class_members": [{"name": "iterator", "type": "variable"}, {"name": "list", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful removal of an element from the FilterIterator."}, {"name": "testRemoveWithoutNextCall", "primary_tested": ["FilterIterator.remove()"], "external_dependencies": {"modules": ["FilterIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal operation without calling next() first, expecting an IllegalStateException."}, {"name": "testRemoveAfterHasNextCall", "primary_tested": ["FilterIterator.remove()"], "associated_methods": ["FilterIterator.hasNext()"], "external_dependencies": {"modules": ["FilterIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal operation after calling hasNext(), expecting an IllegalStateException."}, {"name": "testRemoveOnEmptyIterator", "primary_tested": ["FilterIterator.next()"], "external_dependencies": {"modules": ["FilterIterator", "Collections"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "description": "Tests the next() operation on an empty FilterIterator, expecting a NoSuchElementException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_setTest.java", "testclass_name": "SingletonListIterator_setTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SingletonListIterator_setTest", "description": "Unit tests for the set method of SingletonListIterator.", "class_members": {"variables": [{"name": "testValue", "type": "static final Object"}, {"name": "iterator", "type": "SingletonListIterator<Object>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testSetAfterNext", "primary_tested": ["SingletonListIterator.set(Object)"], "associated_methods": ["SingletonListIterator.next()", "SingletonListIterator.previous()"], "external_dependencies": {"modules": ["SingletonListIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the set method works correctly after calling next()."}, {"name": "testSetAfterRemove", "primary_tested": ["SingletonListIterator.set(Object)"], "associated_methods": ["SingletonListIterator.next()", "SingletonListIterator.remove()"], "external_dependencies": {"modules": ["SingletonListIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the set method throws IllegalStateException after calling remove()."}, {"name": "testSetWithoutNext", "primary_tested": ["SingletonListIterator.set(Object)"], "external_dependencies": {"modules": ["SingletonListIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the set method throws IllegalStateException if next() has not been called."}, {"name": "testSetAfterReset", "primary_tested": ["SingletonListIterator.set(Object)"], "associated_methods": ["SingletonListIterator.next()", "SingletonListIterator.reset()"], "external_dependencies": {"modules": ["SingletonListIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the set method throws IllegalStateException after calling reset()."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/TransformingComparator_equalsTest.java", "testclass_name": "TransformingComparator_equalsTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import static org.junit.jupiter.api.Assertions.*;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.TransformerUtils;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "TransformingComparator_equalsTest", "description": "Unit tests for the equals method of the TransformingComparator class.", "class_members": {"variables": [{"name": "transformer", "type": "Transformer<String, String>"}, {"name": "comparator1", "type": "TransformingComparator<String, String>"}, {"name": "comparator2", "type": "TransformingComparator<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEqualsSameInstance", "primary_tested": ["TransformingComparator.equals(Object)"], "external_dependencies": {"modules": ["TransformingComparator"], "class_members": [{"name": "comparator1", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing the same instance."}, {"name": "testEqualsNull", "primary_tested": ["TransformingComparator.equals(Object)"], "external_dependencies": {"modules": ["TransformingComparator"], "class_members": [{"name": "comparator1", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing with null."}, {"name": "testEqualsDifferentClass", "primary_tested": ["TransformingComparator.equals(Object)"], "external_dependencies": {"modules": ["TransformingComparator"], "class_members": [{"name": "comparator1", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing with an object of a different class."}, {"name": "testEqualsSameAttributes", "primary_tested": ["TransformingComparator.equals(Object)"], "external_dependencies": {"modules": ["TransformingComparator"], "class_members": [{"name": "comparator1", "type": "variable"}, {"name": "comparator2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing two instances with the same attributes."}, {"name": "testEqualsDifferentTransformer", "primary_tested": ["TransformingComparator.equals(Object)"], "external_dependencies": {"modules": ["TransformingComparator", "TransformerUtils"], "class_members": [{"name": "comparator1", "type": "variable"}], "project_specific_resources": ["TransformerUtils.constantTransformer(String)"]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing two instances with different transformers."}, {"name": "testEqualsDifferentDecorated", "primary_tested": ["TransformingComparator.equals(Object)"], "external_dependencies": {"modules": ["TransformingComparator"], "class_members": [{"name": "comparator1", "type": "variable"}, {"name": "transformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing two instances with different decorated comparators."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_previousTest.java", "testclass_name": "SingletonListIterator_previousTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SingletonListIterator_previousTest", "description": "Unit tests for the previous method of SingletonListIterator.", "class_members": {"variables": [{"name": "testValue", "type": "static final Object"}, {"name": "iterator", "type": "SingletonListIterator<Object>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPreviousSuccess", "primary_tested": ["SingletonListIterator.previous()"], "associated_methods": ["SingletonListIterator.next()"], "external_dependencies": {"modules": ["SingletonListIterator", "Object"], "class_members": [{"name": "iterator", "type": "variable"}, {"name": "testValue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the previous method returns the correct value after calling next."}, {"name": "testPreviousBeforeFirst", "primary_tested": ["SingletonListIterator.previous()"], "external_dependencies": {"modules": ["SingletonListIterator", "NoSuchElementException"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that NoSuchElementException is thrown when calling previous before the first element."}, {"name": "testPreviousAfterRemove", "primary_tested": ["SingletonListIterator.previous()"], "associated_methods": ["SingletonListIterator.next()", "SingletonListIterator.remove()"], "external_dependencies": {"modules": ["SingletonListIterator", "NoSuchElementException"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that NoSuchElementException is thrown when calling previous after removing an element."}, {"name": "testPreviousAfterReset", "primary_tested": ["SingletonListIterator.previous()"], "associated_methods": ["SingletonListIterator.next()", "SingletonListIterator.reset()"], "external_dependencies": {"modules": ["SingletonListIterator", "NoSuchElementException"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that NoSuchElementException is thrown when calling previous after resetting the iterator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/FilterListIterator_previousTest.java", "testclass_name": "FilterListIterator_previousTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.ArrayList;", "import java.util.List;", "import java.util.ListIterator;", "import java.util.NoSuchElementException;", "import org.apache.commons.collections4.Predicate;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "FilterListIterator_previousTest", "description": "Unit tests for the previous method of FilterListIterator with different predicates.", "class_members": {"variables": [{"name": "list", "type": "List<Integer>"}, {"name": "evenPred", "type": "Predicate<Integer>"}, {"name": "oddPred", "type": "Predicate<Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPreviousWithEvenPredicate", "primary_tested": ["FilterListIterator.previous()"], "external_dependencies": {"modules": ["FilterListIterator", "ListIterator", "Predicate"], "class_members": [{"name": "list", "type": "variable"}, {"name": "evenPred", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the previous method of FilterListIterator with an even predicate."}, {"name": "testPreviousWithOddPredicate", "primary_tested": ["FilterListIterator.previous()"], "external_dependencies": {"modules": ["FilterListIterator", "ListIterator", "Predicate"], "class_members": [{"name": "list", "type": "variable"}, {"name": "oddPred", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the previous method of FilterListIterator with an odd predicate."}, {"name": "testPreviousNoSuchElementException", "primary_tested": ["FilterListIterator.previous()"], "external_dependencies": {"modules": ["FilterListIterator", "ListIterator", "Predicate", "NoSuchElementException"], "class_members": [{"name": "list", "type": "variable"}, {"name": "evenPred", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that NoSuchElementException is thrown when calling previous on an empty iterator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/SingletonIterator_nextTest.java", "testclass_name": "SingletonIterator_nextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SingletonIterator_nextTest", "description": "Unit tests for the next() method of SingletonIterator.", "class_members": {"variables": [{"name": "testValue", "type": "static final Object"}, {"name": "iterator", "type": "SingletonIterator<Object>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNextSuccess", "primary_tested": ["SingletonIterator.next()"], "external_dependencies": {"modules": ["SingletonIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful iteration of the SingletonIterator."}, {"name": "testNextAfterReset", "primary_tested": ["SingletonIterator.next()"], "associated_methods": ["SingletonIterator.reset()"], "external_dependencies": {"modules": ["SingletonIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the iteration of the SingletonIterator after a reset."}, {"name": "testNextAfterRemove", "primary_tested": ["SingletonIterator.next()"], "associated_methods": ["SingletonIterator.remove()"], "external_dependencies": {"modules": ["SingletonIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that NoSuchElementException is thrown after removing the element from the SingletonIterator."}, {"name": "testNextWithoutReset", "primary_tested": ["SingletonIterator.next()"], "external_dependencies": {"modules": ["SingletonIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that NoSuchElementException is thrown when trying to iterate without resetting the SingletonIterator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableMapIterator_unmodifiableMapIteratorTest.java", "testclass_name": "UnmodifiableMapIterator_unmodifiableMapIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import org.apache.commons.collections4.MapIterator;", "import org.apache.commons.collections4.Unmodifiable;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;"], "name": "UnmodifiableMapIterator_unmodifiableMapIteratorTest", "description": "Tests for the UnmodifiableMapIterator class, specifically focusing on the unmodifiableMapIterator method.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testUnmodifiableMapIteratorWithUnmodifiableIterator", "primary_tested": ["UnmodifiableMapIterator.unmodifiableMapIterator(MapIterator)"], "associated_methods": ["MapIterator.getKey()", "MapIterator.getValue()", "MapIterator.hasNext()", "MapIterator.next()"], "external_dependencies": {"modules": ["MapIterator", "UnmodifiableMapIterator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the unmodifiableMapIterator method with an unmodifiable iterator, verifying that the returned iterator is not the same instance and behaves correctly."}, {"name": "testUnmodifiableMapIteratorWithModifiableIterator", "primary_tested": ["UnmodifiableMapIterator.unmodifiableMapIterator(MapIterator)"], "associated_methods": ["MapIterator.getKey()", "MapIterator.getValue()", "MapIterator.hasNext()", "MapIterator.next()"], "external_dependencies": {"modules": ["MapIterator", "UnmodifiableMapIterator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the unmodifiableMapIterator method with a modifiable iterator, verifying that the returned iterator is not the same instance and behaves correctly."}, {"name": "testUnmodifiableMapIteratorWithNullIterator", "primary_tested": ["UnmodifiableMapIterator.unmodifiableMapIterator(MapIterator)"], "external_dependencies": {"modules": ["MapIterator", "UnmodifiableMapIterator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the unmodifiableMapIterator method with a null iterator, expecting a NullPointerException to be thrown."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_removeTest.java", "testclass_name": "PeekingIterator_removeTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Iterator;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "PeekingIterator_removeTest", "description": "Unit tests for the remove functionality of the PeekingIterator class.", "class_members": {"variables": [{"name": "testList", "type": "List<String>"}, {"name": "testArray", "type": "static final String[]"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveWithoutPeekOrElement", "primary_tested": ["PeekingIterator.remove()"], "associated_methods": ["PeekingIterator.next()"], "external_dependencies": {"modules": ["PeekingIterator", "List", "ArrayList", "Arrays"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the remove functionality of the PeekingIterator when called after next() but not after peek() or element()."}, {"name": "testRemoveAfterPeek", "primary_tested": ["PeekingIterator.remove()"], "associated_methods": ["PeekingIterator.peek()"], "external_dependencies": {"modules": ["PeekingIterator", "List", "ArrayList", "Arrays"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the remove functionality of the PeekingIterator when called after peek(), expecting an IllegalStateException."}, {"name": "testRemoveAfterElement", "primary_tested": ["PeekingIterator.remove()"], "associated_methods": ["PeekingIterator.element()"], "external_dependencies": {"modules": ["PeekingIterator", "List", "ArrayList", "Arrays"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the remove functionality of the PeekingIterator when called after element(), expecting an IllegalStateException."}, {"name": "testRemoveOnEmptyIterator", "primary_tested": ["PeekingIterator.remove()"], "external_dependencies": {"modules": ["PeekingIterator", "ArrayList"]}, "category": "unit", "description": "Tests the remove functionality of the PeekingIterator when called on an empty iterator, expecting an IllegalStateException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparator_equalsTest.java", "testclass_name": "FixedOrderComparator_equalsTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.List;"], "name": "FixedOrderComparator_equalsTest", "description": "Unit tests for the equals method of the FixedOrderComparator class.", "class_members": {"variables": [{"name": "comparator", "type": "FixedOrderComparator<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEqualsSameInstance", "primary_tested": ["FixedOrderComparator.equals(Object)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with the same instance."}, {"name": "testEqualsNull", "primary_tested": ["FixedOrderComparator.equals(Object)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with a null object."}, {"name": "testEqualsDifferentClass", "primary_tested": ["FixedOrderComparator.equals(Object)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with an object of a different class."}, {"name": "testEqualsDifferentState", "primary_tested": ["FixedOrderComparator.equals(Object)"], "associated_methods": ["FixedOrderComparator.add(String)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with a comparator having different state."}, {"name": "testEqualsSameState", "primary_tested": ["FixedOrderComparator.equals(Object)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with a comparator having the same state."}, {"name": "testEqualsDifferentLockState", "primary_tested": ["FixedOrderComparator.equals(Object)"], "associated_methods": ["FixedOrderComparator.compare(String,String)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with a comparator having a different lock state."}, {"name": "testEqualsDifferentUnknownObjectBehavior", "primary_tested": ["FixedOrderComparator.equals(Object)"], "associated_methods": ["FixedOrderComparator.setUnknownObjectBehavior(FixedOrderComparator.UnknownObjectBehavior)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with a comparator having different unknown object behavior."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/ObjectGraphIterator_nextTest.java", "testclass_name": "ObjectGraphIterator_nextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ObjectGraphIterator_nextTest", "description": "Unit tests for the next() method of the ObjectGraphIterator class.", "class_members": {"variables": [{"name": "iterator", "type": "ObjectGraphIterator<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNext_Success", "primary_tested": ["ObjectGraphIterator.next()"], "external_dependencies": {"modules": ["ObjectGraphIterator", "ArrayList", "Iterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful iteration over elements using the next() method."}, {"name": "testNext_NoSuchElementException", "primary_tested": ["ObjectGraphIterator.next()"], "external_dependencies": {"modules": ["ObjectGraphIterator", "ArrayList", "Iterator", "NoSuchElementException"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that NoSuchElementException is thrown when calling next() on an exhausted iterator."}, {"name": "testNext_WithTransformer", "primary_tested": ["ObjectGraphIterator.next()"], "external_dependencies": {"modules": ["ObjectGraphIterator", "Transformer"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "description": "Tests the next() method when a transformer is used to transform elements."}, {"name": "testNext_EmptyIterator", "primary_tested": ["ObjectGraphIterator.next()"], "external_dependencies": {"modules": ["ObjectGraphIterator", "ArrayList", "Iterator", "NoSuchElementException"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "description": "Tests that NoSuchElementException is thrown when calling next() on an empty iterator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/SkippingIterator_removeTest.java", "testclass_name": "SkippingIterator_removeTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import org.junit.jupiter.api.Test;", "import java.util.Iterator;", "import java.util.NoSuchElementException;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;"], "name": "SkippingIterator_removeTest", "description": "Unit tests for the remove method of the SkippingIterator class.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testRemoveBeforeNext", "primary_tested": ["SkippingIterator.remove()"], "external_dependencies": {"modules": ["Iterator", "SkippingIterator", "IllegalStateException"], "class_members": []}, "category": "unit", "description": "Tests that an IllegalStateException is thrown when remove() is called before next()."}, {"name": "testRemoveAfterNext", "primary_tested": ["SkippingIterator.remove()"], "associated_methods": ["SkippingIterator.next()"], "external_dependencies": {"modules": ["Iterator", "SkippingIterator", "Mockito"], "class_members": []}, "category": "unit", "description": "Tests that super.remove() is called when remove() is called after next()."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/ObjectArrayIterator_nextTest.java", "testclass_name": "ObjectArrayIterator_nextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ObjectArrayIterator_nextTest", "description": "Unit tests for the next method of ObjectArrayIterator.", "class_members": {"variables": [{"name": "testArray", "type": "String[]"}, {"name": "iterator", "type": "ObjectArrayIterator<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNextWithElements", "primary_tested": ["ObjectArrayIterator.next()"], "external_dependencies": {"modules": ["ObjectArrayIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method of ObjectArrayIterator when there are elements in the array."}, {"name": "testNextThrowsNoSuchElementException", "primary_tested": ["ObjectArrayIterator.next()"], "external_dependencies": {"modules": ["ObjectArrayIterator", "NoSuchElementException"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the next method of ObjectArrayIterator throws NoSuchElementException when there are no more elements."}, {"name": "testNextAfterReset", "primary_tested": ["ObjectArrayIterator.next()"], "associated_methods": ["ObjectArrayIterator.reset()"], "external_dependencies": {"modules": ["ObjectArrayIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method of ObjectArrayIterator after resetting the iterator."}, {"name": "testNextWithCustomStartIndex", "primary_tested": ["ObjectArrayIterator.next()"], "external_dependencies": {"modules": ["ObjectArrayIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method of ObjectArrayIterator with a custom start index."}, {"name": "testNextWithCustomRange", "primary_tested": ["ObjectArrayIterator.next()"], "external_dependencies": {"modules": ["ObjectArrayIterator", "NoSuchElementException"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method of ObjectArrayIterator with a custom range."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_elementTest.java", "testclass_name": "PeekingIterator_elementTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "PeekingIterator_elementTest", "description": "Unit tests for the PeekingIterator's element method.", "class_members": {"variables": [{"name": "testList", "type": "List<String>"}, {"name": "testArray", "type": "static final String[]"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testElementWithValidElement", "primary_tested": ["PeekingIterator.element()"], "external_dependencies": {"modules": ["PeekingIterator", "List", "Iterator"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the element method of PeekingIterator when there is a valid element to peek."}, {"name": "testElementWithExhaustedIterator", "primary_tested": ["PeekingIterator.element()"], "associated_methods": ["PeekingIterator.hasNext()", "PeekingIterator.next()"], "external_dependencies": {"modules": ["PeekingIterator", "List", "Iterator", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the element method of PeekingIterator when the iterator is exhausted, expecting a NoSuchElementException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/PermutationIterator_nextTest.java", "testclass_name": "PermutationIterator_nextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Arrays;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "PermutationIterator_nextTest", "description": "Unit tests for the next method of the PermutationIterator class.", "class_members": {"variables": [{"name": "permutationIterator", "type": "PermutationIterator<Character>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNextPermutationSuccess", "primary_tested": ["PermutationIterator.next()"], "external_dependencies": {"modules": ["PermutationIterator", "Arrays", "List"], "class_members": [{"name": "permutationIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful retrieval of the next permutation."}, {"name": "testNextPermutationNoSuchElementException", "primary_tested": ["PermutationIterator.next()"], "associated_methods": ["PermutationIterator.hasNext()"], "external_dependencies": {"modules": ["PermutationIterator", "NoSuchElementException"], "class_members": [{"name": "permutationIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that NoSuchElementException is thrown when there are no more permutations."}, {"name": "testNextPermutationMultipleCalls", "primary_tested": ["PermutationIterator.next()"], "external_dependencies": {"modules": ["PermutationIterator", "Arrays", "List"], "class_members": [{"name": "permutationIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retrieval of multiple permutations in sequence."}, {"name": "testNextPermutationHasNextValidation", "primary_tested": ["PermutationIterator.hasNext()"], "associated_methods": ["PermutationIterator.next()"], "external_dependencies": {"modules": ["PermutationIterator"], "class_members": [{"name": "permutationIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method to ensure it correctly indicates the presence of more permutations."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/LoopingIterator_nextTest.java", "testclass_name": "LoopingIterator_nextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "LoopingIterator_nextTest", "description": "Unit tests for the next method of the LoopingIterator class.", "class_members": {"variables": [{"name": "loopingIterator", "type": "LoopingIterator<String>"}, {"name": "list", "type": "List<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNextWithElements", "primary_tested": ["LoopingIterator.next()"], "external_dependencies": {"modules": ["LoopingIterator", "List"], "class_members": [{"name": "loopingIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method of LoopingIterator with elements, ensuring it loops correctly."}, {"name": "testNextWithEmptyCollection", "primary_tested": ["LoopingIterator.next()"], "external_dependencies": {"modules": ["LoopingIterator", "List", "NoSuchElementException"], "class_members": [{"name": "loopingIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the next method of LoopingIterator with an empty collection, expecting a NoSuchElementException."}, {"name": "testNextWithReset", "primary_tested": ["LoopingIterator.next()", "LoopingIterator.reset()"], "external_dependencies": {"modules": ["LoopingIterator", "List"], "class_members": [{"name": "loopingIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method of LoopingIterator after resetting the iterator."}, {"name": "testNextWithRemove", "primary_tested": ["LoopingIterator.next()", "LoopingIterator.remove()"], "external_dependencies": {"modules": ["LoopingIterator", "List"], "class_members": [{"name": "loopingIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method of LoopingIterator after removing an element."}, {"name": "testNextWithSize", "primary_tested": ["LoopingIterator.next()", "LoopingIterator.size()"], "external_dependencies": {"modules": ["LoopingIterator", "List"], "class_members": [{"name": "loopingIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method of LoopingIterator and checks the size method."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/CollatingIterator_addIteratorTest.java", "testclass_name": "CollatingIterator_addIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Comparator;", "import java.util.Iterator;", "import org.apache.commons.collections4.comparators.ComparableComparator;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CollatingIterator_addIteratorTest", "description": "Unit tests for the addIterator method of the CollatingIterator class.", "class_members": {"variables": [{"name": "comparator", "type": "Comparator<Integer>"}, {"name": "evens", "type": "ArrayList<Integer>"}, {"name": "odds", "type": "ArrayList<Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAddIteratorValid", "primary_tested": ["CollatingIterator.addIterator(Iterator<Integer>)"], "associated_methods": ["CollatingIterator.getIterators()"], "external_dependencies": {"modules": ["CollatingIterator", "Iterator", "ArrayList"], "class_members": [{"name": "comparator", "type": "variable"}, {"name": "evens", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the valid addition of an iterator to the CollatingIterator."}, {"name": "testAddIteratorNull", "primary_tested": ["CollatingIterator.addIterator(Iterator<Integer>)"], "external_dependencies": {"modules": ["CollatingIterator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior when attempting to add a null iterator to the CollatingIterator."}, {"name": "testAddIteratorAfterIterationStarted", "primary_tested": ["CollatingIterator.addIterator(Iterator<Integer>)"], "associated_methods": ["CollatingIterator.hasNext()"], "external_dependencies": {"modules": ["CollatingIterator", "ArrayList"], "class_members": [{"name": "comparator", "type": "variable"}, {"name": "evens", "type": "variable"}, {"name": "odds", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior when attempting to add an iterator to the CollatingIterator after iteration has started."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/CollatingIterator_nextTest.java", "testclass_name": "CollatingIterator_nextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.*;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;"], "name": "CollatingIterator_nextTest", "description": "Unit tests for the next() method of the CollatingIterator class.", "class_members": {"variables": [{"name": "collatingIterator", "type": "CollatingIterator<Integer>"}, {"name": "comparator", "type": "Comparator<Integer>"}, {"name": "iterators", "type": "List<Iterator<Integer>>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNext_NoSuchElementException", "primary_tested": ["CollatingIterator.next()"], "external_dependencies": {"modules": ["CollatingIterator", "Collections", "NoSuchElementException"], "class_members": [{"name": "collatingIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that NoSuchElementException is thrown when calling next() on an empty iterator."}, {"name": "testNext_Success", "primary_tested": ["CollatingIterator.next()"], "associated_methods": ["CollatingIterator.addIterator(Iterator<Integer>)"], "external_dependencies": {"modules": ["CollatingIterator", "Arrays", "Iterator"], "class_members": [{"name": "collatingIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful retrieval of elements in sorted order from the CollatingIterator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparator_compareTest.java", "testclass_name": "FixedOrderComparator_compareTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.Arrays;", "import java.util.Comparator;", "import java.util.LinkedList;", "import java.util.List;", "import java.util.Random;", "import org.apache.commons.lang3.ArrayUtils;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "FixedOrderComparator_compareTest", "description": "Unit tests for the compare functionality of the FixedOrderComparator class.", "class_members": {"variables": [{"name": "comparator", "type": "FixedOrderComparator<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testCompareKnownObjects", "primary_tested": ["FixedOrderComparator.compare(String,String)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the comparison of known objects in the FixedOrderComparator."}, {"name": "testCompareUnknownObjectsBefore", "primary_tested": ["FixedOrderComparator.compare(String,String)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the comparison of unknown objects with the BEFORE behavior in the FixedOrderComparator."}, {"name": "testCompareUnknownObjectsAfter", "primary_tested": ["FixedOrderComparator.compare(String,String)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the comparison of unknown objects with the AFTER behavior in the FixedOrderComparator."}, {"name": "testCompareUnknownObjectsException", "primary_tested": ["FixedOrderComparator.compare(String,String)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the comparison of unknown objects that throw an exception in the FixedOrderComparator."}, {"name": "testCompareAfterLock", "primary_tested": ["FixedOrderComparator.compare(String,String)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the comparison after the comparator has been locked in the FixedOrderComparator."}, {"name": "testAddAsEqual", "primary_tested": ["FixedOrderComparator.compare(String,String)"], "associated_methods": ["FixedOrderComparator.addAsEqual(String,String)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests adding objects as equal in the FixedOrderComparator."}, {"name": "testAddAsEqualUnknownObject", "primary_tested": ["FixedOrderComparator.addAsEqual(String,String)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests adding an unknown object as equal in the FixedOrderComparator."}, {"name": "testEquals", "primary_tested": ["FixedOrderComparator.equals(Object)"], "external_dependencies": {"modules": ["FixedOrderComparator"]}, "category": "unit", "description": "Tests the equality comparison of two FixedOrderComparator instances."}, {"name": "testHashCode", "primary_tested": ["FixedOrderComparator.hashCode()"], "external_dependencies": {"modules": ["FixedOrderComparator"]}, "category": "unit", "description": "Tests the hash code generation of FixedOrderComparator instances."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/CollatingIterator_getIteratorIndexTest.java", "testclass_name": "CollatingIterator_getIteratorIndexTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.ArrayList;", "import java.util.Comparator;", "import java.util.Iterator;", "import org.apache.commons.collections4.comparators.ComparableComparator;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CollatingIterator_getIteratorIndexTest", "description": "Unit tests for the getIteratorIndex method of the CollatingIterator class.", "class_members": {"variables": [{"name": "comparator", "type": "Comparator<Integer>"}, {"name": "evens", "type": "ArrayList<Integer>"}, {"name": "odds", "type": "ArrayList<Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetIteratorIndexSuccess", "primary_tested": ["CollatingIterator.getIteratorIndex()"], "associated_methods": ["CollatingIterator.next()"], "external_dependencies": {"modules": ["CollatingIterator", "ArrayList", "Iterator", "ComparableComparator"], "class_members": [{"name": "comparator", "type": "variable"}, {"name": "evens", "type": "variable"}, {"name": "odds", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getIteratorIndex method of CollatingIterator when an element has been returned by the iterator."}, {"name": "testGetIteratorIndexNoValueReturnedYet", "primary_tested": ["CollatingIterator.getIteratorIndex()"], "external_dependencies": {"modules": ["CollatingIterator", "ArrayList", "Iterator", "ComparableComparator"], "class_members": [{"name": "comparator", "type": "variable"}, {"name": "evens", "type": "variable"}, {"name": "odds", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getIteratorIndex method of CollatingIterator when no element has been returned by the iterator, expecting an IllegalStateException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_getTest.java", "testclass_name": "StaticBucketMap_getTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "StaticBucketMap_getTest", "description": "Unit tests for the get method of StaticBucketMap.", "class_members": {"variables": [{"name": "map", "type": "StaticBucketMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetExistingKey", "primary_tested": ["StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method for an existing key in the map."}, {"name": "testGetNonExistingKey", "primary_tested": ["StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method for a non-existing key in the map."}, {"name": "testGetNullKey", "primary_tested": ["StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method for a null key in the map."}, {"name": "testGetAfterRemove", "primary_tested": ["StaticBucketMap.get(String)"], "associated_methods": ["StaticBucketMap.remove(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method after removing a key from the map."}, {"name": "testGetWithMultipleEntries", "primary_tested": ["StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method with multiple entries in the map."}, {"name": "testGetWithSameHashDifferentKey", "primary_tested": ["StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method with keys that hash to the same bucket but are different."}, {"name": "testGetWithCollision", "primary_tested": ["StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method with keys that collide and hash to the same bucket."}, {"name": "testGetWithNullValue", "primary_tested": ["StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method with a key that has a null value in the map."}, {"name": "testGetWithNullKeyAndNullValue", "primary_tested": ["StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method with a null key and null value in the map."}, {"name": "testGetWithEmptyMap", "primary_tested": ["StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method with an empty map."}, {"name": "testGetWithConcurrentModification", "primary_tested": ["StaticBucketMap.get(String)"], "associated_methods": ["StaticBucketMap.remove(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method with concurrent modifications in the map."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_peekingIteratorTest.java", "testclass_name": "PeekingIterator_peekingIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Iterator;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "PeekingIterator_peekingIteratorTest", "description": "Unit tests for the PeekingIterator class, focusing on its behavior with different types of iterators.", "class_members": {"variables": [{"name": "testList", "type": "List<String>"}, {"name": "testArray", "type": "static final String[]"}], "methods": [{"name": "validate", "signature": "void validate(Iterator<String> iter, String... items)"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPeekingIteratorWithNonNullIterator", "primary_tested": ["PeekingIterator.peekingIterator(Iterator<String>)"], "associated_methods": ["PeekingIterator.peek()", "PeekingIterator.element()"], "external_dependencies": {"modules": ["PeekingIterator", "Iterator", "List"], "class_members": [{"name": "testList", "type": "variable"}, {"name": "validate", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the creation and behavior of PeekingIterator with a non-null iterator."}, {"name": "testPeekingIteratorWithNullIterator", "primary_tested": ["PeekingIterator.peekingIterator(Iterator<String>)"], "external_dependencies": {"modules": ["PeekingIterator", "Iterator"]}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of PeekingIterator when provided with a null iterator, expecting a NullPointerException."}, {"name": "testPeekingIteratorWithPeekingIterator", "primary_tested": ["PeekingIterator.peekingIterator(Iterator<String>)"], "external_dependencies": {"modules": ["PeekingIterator", "Iterator", "List"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior of PeekingIterator when provided with another PeekingIterator, expecting the same instance to be returned."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableOrderedMapIterator_unmodifiableOrderedMapIteratorTest.java", "testclass_name": "UnmodifiableOrderedMapIterator_unmodifiableOrderedMapIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import org.apache.commons.collections4.OrderedMapIterator;", "import org.apache.commons.collections4.Unmodifiable;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;"], "name": "UnmodifiableOrderedMapIterator_unmodifiableOrderedMapIteratorTest", "description": "Tests for the UnmodifiableOrderedMapIterator class, specifically focusing on the unmodifiableOrderedMapIterator method.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testUnmodifiableOrderedMapIteratorWithUnmodifiableIterator", "primary_tested": ["UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator(OrderedMapIterator)"], "associated_methods": ["OrderedMapIterator.hasNext()", "OrderedMapIterator.next()", "OrderedMapIterator.getKey()", "OrderedMapIterator.getValue()"], "external_dependencies": {"modules": ["OrderedMapIterator", "UnmodifiableOrderedMapIterator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the unmodifiableOrderedMapIterator method with an unmodifiable iterator, verifying that the iterator methods return the expected values."}, {"name": "testUnmodifiableOrderedMapIteratorWithModifiableIterator", "primary_tested": ["UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator(OrderedMapIterator)"], "associated_methods": ["OrderedMapIterator.hasNext()", "OrderedMapIterator.next()", "OrderedMapIterator.getKey()", "OrderedMapIterator.getValue()"], "external_dependencies": {"modules": ["OrderedMapIterator", "UnmodifiableOrderedMapIterator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the unmodifiableOrderedMapIterator method with a modifiable iterator, verifying that the iterator methods return the expected values."}, {"name": "testUnmodifiableOrderedMapIteratorWithNullIterator", "primary_tested": ["UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator(OrderedMapIterator)"], "external_dependencies": {"modules": ["OrderedMapIterator", "UnmodifiableOrderedMapIterator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the unmodifiableOrderedMapIterator method with a null iterator, expecting a NullPointerException to be thrown."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/CollatingIterator_hasNextTest.java", "testclass_name": "CollatingIterator_hasNextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Comparator;", "import java.util.Iterator;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "CollatingIterator_hasNextTest", "description": "Unit tests for the hasNext method of the CollatingIterator class.", "class_members": {"variables": [{"name": "collatingIterator", "type": "CollatingIterator<Integer>"}, {"name": "iterators", "type": "List<Iterator<Integer>>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testHasNext_WithNoIterators", "primary_tested": ["CollatingIterator.hasNext()"], "external_dependencies": {"modules": ["CollatingIterator"], "class_members": [{"name": "collatingIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method when no iterators are added to the CollatingIterator."}, {"name": "testHasNext_WithEmptyIterators", "primary_tested": ["CollatingIterator.hasNext()"], "associated_methods": ["CollatingIterator.addIterator(Iterator<Integer>)"], "external_dependencies": {"modules": ["CollatingIterator", "Arrays", "List"], "class_members": [{"name": "collatingIterator", "type": "variable"}, {"name": "iterators", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method when empty iterators are added to the CollatingIterator."}, {"name": "testHasNext_WithNonEmptyIterators", "primary_tested": ["CollatingIterator.hasNext()"], "associated_methods": ["CollatingIterator.addIterator(Iterator<Integer>)"], "external_dependencies": {"modules": ["CollatingIterator", "Arrays", "List"], "class_members": [{"name": "collatingIterator", "type": "variable"}, {"name": "iterators", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method when non-empty iterators are added to the CollatingIterator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/CollatingIterator_setIteratorTest.java", "testclass_name": "CollatingIterator_setIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Comparator;", "import java.util.Iterator;", "import java.util.List;", "import org.apache.commons.collections4.comparators.ComparableComparator;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CollatingIterator_setIteratorTest", "description": "Unit tests for the setIterator method of the CollatingIterator class.", "class_members": {"variables": [{"name": "comparator", "type": "Comparator<Integer>"}, {"name": "evens", "type": "List<Integer>"}, {"name": "odds", "type": "List<Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testSetIteratorValid", "primary_tested": ["CollatingIterator.setIterator(int,Iterator)"], "associated_methods": ["CollatingIterator.addIterator(Iterator)", "CollatingIterator.getIterators()"], "external_dependencies": {"modules": ["CollatingIterator", "Arrays", "Iterator", "List"], "class_members": [{"name": "comparator", "type": "variable"}, {"name": "evens", "type": "variable"}, {"name": "odds", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the setIterator method with a valid index."}, {"name": "testSetIteratorNull", "primary_tested": ["CollatingIterator.setIterator(int,Iterator)"], "associated_methods": ["CollatingIterator.addIterator(Iterator)"], "external_dependencies": {"modules": ["CollatingIterator", "Iterator"], "class_members": [{"name": "comparator", "type": "variable"}, {"name": "evens", "type": "variable"}, {"name": "odds", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the setIterator method with a null iterator, expecting a NullPointerException."}, {"name": "testSetIteratorIndexOutOfBounds", "primary_tested": ["CollatingIterator.setIterator(int,Iterator)"], "associated_methods": ["CollatingIterator.addIterator(Iterator)"], "external_dependencies": {"modules": ["CollatingIterator", "Arrays", "Iterator"], "class_members": [{"name": "comparator", "type": "variable"}, {"name": "evens", "type": "variable"}, {"name": "odds", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the setIterator method with an index out of bounds, expecting an IndexOutOfBoundsException."}, {"name": "testSetIteratorAfterStart", "primary_tested": ["CollatingIterator.setIterator(int,Iterator)"], "associated_methods": ["CollatingIterator.addIterator(Iterator)", "CollatingIterator.hasNext()"], "external_dependencies": {"modules": ["CollatingIterator", "Arrays", "Iterator"], "class_members": [{"name": "comparator", "type": "variable"}, {"name": "evens", "type": "variable"}, {"name": "odds", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the setIterator method after the iteration has started, expecting an IllegalStateException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_nextTest.java", "testclass_name": "PeekingIterator_nextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "PeekingIterator_nextTest", "description": "Unit tests for the next method of the PeekingIterator class.", "class_members": {"variables": [{"name": "testList", "type": "List<String>"}, {"name": "testArray", "type": "static final String[]"}], "methods": [{"name": "setUp", "signature": "void setUp() throws Exception"}, {"name": "makeObject", "signature": "PeekingIterator<String> makeObject()"}, {"name": "validate", "signature": "void validate(Iterator<String> iter, String... items)"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNextWithPeek", "primary_tested": ["PeekingIterator.next()"], "associated_methods": ["PeekingIterator.peek()"], "external_dependencies": {"modules": ["PeekingIterator", "Iterator"], "class_members": [{"name": "testList", "type": "variable"}, {"name": "makeObject", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method of PeekingIterator when peeking before each next call."}, {"name": "testNextWithoutPeek", "primary_tested": ["PeekingIterator.next()"], "external_dependencies": {"modules": ["PeekingIterator", "Iterator"], "class_members": [{"name": "testList", "type": "variable"}, {"name": "makeObject", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method of PeekingIterator without peeking."}, {"name": "testNextThrowsNoSuchElementException", "primary_tested": ["PeekingIterator.next()"], "external_dependencies": {"modules": ["PeekingIterator", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}, {"name": "makeObject", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the next method of PeekingIterator throws NoSuchElementException when called after the iterator is exhausted."}, {"name": "testNextAfterExhausted", "primary_tested": ["PeekingIterator.next()"], "external_dependencies": {"modules": ["PeekingIterator", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}, {"name": "makeObject", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the next method of PeekingIterator throws NoSuchElementException after the iterator is exhausted."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/SingletonIterator_removeTest.java", "testclass_name": "SingletonIterator_removeTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SingletonIterator_removeTest", "description": "Unit tests for the remove functionality of the SingletonIterator class.", "class_members": {"variables": [{"name": "testValue", "type": "static final Object"}, {"name": "iterator", "type": "SingletonIterator<Object>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveAllowed", "primary_tested": ["SingletonIterator.remove()"], "associated_methods": ["SingletonIterator.next()", "SingletonIterator.hasNext()"], "external_dependencies": {"modules": ["SingletonIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the remove operation is allowed and correctly removes the element from the iterator."}, {"name": "testRemoveNotAllowed", "primary_tested": ["SingletonIterator.remove()"], "associated_methods": ["SingletonIterator.next()"], "external_dependencies": {"modules": ["SingletonIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests that the remove operation throws UnsupportedOperationException when not allowed."}, {"name": "testRemoveBeforeNext", "primary_tested": ["SingletonIterator.remove()"], "external_dependencies": {"modules": ["SingletonIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the remove operation throws IllegalStateException when called before next."}, {"name": "testRemoveAfterReset", "primary_tested": ["SingletonIterator.remove()"], "associated_methods": ["SingletonIterator.next()", "SingletonIterator.reset()"], "external_dependencies": {"modules": ["SingletonIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the remove operation throws IllegalStateException after reset."}, {"name": "testRemoveTwice", "primary_tested": ["SingletonIterator.remove()"], "associated_methods": ["SingletonIterator.next()"], "external_dependencies": {"modules": ["SingletonIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the remove operation throws IllegalStateException when called twice."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIterator_nextTest.java", "testclass_name": "LoopingListIterator_nextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "LoopingListIterator_nextTest", "description": "Unit tests for the next method of LoopingListIterator.", "class_members": {"variables": [{"name": "loopingListIterator", "type": "LoopingListIterator<String>"}, {"name": "list", "type": "List<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNextWithNonEmptyList", "primary_tested": ["LoopingListIterator.next()"], "external_dependencies": {"modules": ["LoopingListIterator"], "class_members": [{"name": "loopingListIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method with a non-empty list, ensuring it loops back to the start."}, {"name": "testNextWithEmptyList", "primary_tested": ["LoopingListIterator.next()"], "external_dependencies": {"modules": ["LoopingListIterator"], "class_members": [{"name": "loopingListIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method with an empty list, expecting a NoSuchElementException."}, {"name": "testNextWithReset", "primary_tested": ["LoopingListIterator.next()"], "associated_methods": ["LoopingListIterator.reset()"], "external_dependencies": {"modules": ["LoopingListIterator"], "class_members": [{"name": "loopingListIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method after resetting the iterator, ensuring it starts from the beginning."}, {"name": "testNextWithRemove", "primary_tested": ["LoopingListIterator.next()"], "associated_methods": ["LoopingListIterator.remove()"], "external_dependencies": {"modules": ["LoopingListIterator"], "class_members": [{"name": "loopingListIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method after removing an element, ensuring it loops correctly."}, {"name": "testNextWithPrevious", "primary_tested": ["LoopingListIterator.next()"], "associated_methods": ["LoopingListIterator.previous()"], "external_dependencies": {"modules": ["LoopingListIterator"], "class_members": [{"name": "loopingListIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method after moving backward using the previous method, ensuring it loops correctly."}, {"name": "testNextWithNextIndex", "primary_tested": ["LoopingListIterator.next()"], "associated_methods": ["LoopingListIterator.nextIndex()"], "external_dependencies": {"modules": ["LoopingListIterator"], "class_members": [{"name": "loopingListIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method and the nextIndex method, ensuring it loops back to the start."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/BoundedIterator_nextTest.java", "testclass_name": "BoundedIterator_nextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.Arrays;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "BoundedIterator_nextTest", "description": "Unit tests for the next() method of the BoundedIterator class.", "class_members": {"variables": [{"name": "testList", "type": "List<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNextWithinBounds", "primary_tested": ["BoundedIterator.next()"], "external_dependencies": {"modules": ["BoundedIterator", "Iterator", "List"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next() method of BoundedIterator within the bounds."}, {"name": "testNextOutOfBounds", "primary_tested": ["BoundedIterator.next()"], "external_dependencies": {"modules": ["BoundedIterator", "Iterator", "List", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next() method of BoundedIterator when out of bounds, expecting a NoSuchElementException."}, {"name": "testNextWithZeroMax", "primary_tested": ["BoundedIterator.next()"], "external_dependencies": {"modules": ["BoundedIterator", "Iterator", "List", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next() method of BoundedIterator with a max of zero, expecting a NoSuchElementException."}, {"name": "testNextWithNegativeOffset", "primary_tested": ["BoundedIterator.BoundedIterator(Iterator<String>,int,int)"], "external_dependencies": {"modules": ["BoundedIterator", "Iterator", "List", "IllegalArgumentException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the BoundedIterator constructor with a negative offset, expecting an IllegalArgumentException."}, {"name": "testNextWithNegativeMax", "primary_tested": ["BoundedIterator.BoundedIterator(Iterator<String>,int,int)"], "external_dependencies": {"modules": ["BoundedIterator", "Iterator", "List", "IllegalArgumentException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the BoundedIterator constructor with a negative max, expecting an IllegalArgumentException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/CompositeMap_getTest.java", "testclass_name": "CompositeMap_getTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Collection;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeMap_getTest", "description": "Unit tests for the get method of the CompositeMap class.", "class_members": {"variables": [{"name": "compositeMap", "type": "CompositeMap<String, String>"}, {"name": "map1", "type": "Map<String, String>"}, {"name": "map2", "type": "Map<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetExistingKey", "primary_tested": ["CompositeMap.get(String)"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method for existing keys in the CompositeMap."}, {"name": "testGetNonExistingKey", "primary_tested": ["CompositeMap.get(String)"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method for a non-existing key in the CompositeMap."}, {"name": "testGetAfterAddingNewMap", "primary_tested": ["CompositeMap.get(String)"], "associated_methods": ["CompositeMap.addComposited(Map)"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method after adding a new map to the CompositeMap."}, {"name": "testGetAfterRemovingKey", "primary_tested": ["CompositeMap.get(String)"], "associated_methods": ["CompositeMap.remove(Object)"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method after removing a key from the CompositeMap."}, {"name": "testGetAfterPuttingNewKey", "primary_tested": ["CompositeMap.get(String)"], "associated_methods": ["CompositeMap.put(String,String)"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method after putting a new key-value pair in the CompositeMap."}, {"name": "testGetAfterPuttingExistingKey", "primary_tested": ["CompositeMap.get(String)"], "associated_methods": ["CompositeMap.put(String,String)"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method after updating an existing key-value pair in the CompositeMap."}, {"name": "testGetWithNullKey", "primary_tested": ["CompositeMap.get(String)"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method with a null key in the CompositeMap."}, {"name": "testGetWithEmptyCompositeMap", "primary_tested": ["CompositeMap.get(String)"], "external_dependencies": {"modules": ["CompositeMap", "Map"]}, "category": "unit", "description": "Tests the get method on an empty CompositeMap."}, {"name": "testGetWithSingleMap", "primary_tested": ["CompositeMap.get(String)"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "map1", "type": "variable"}]}, "category": "unit", "description": "Tests the get method on a CompositeMap with a single map."}, {"name": "testGetWithMultipleMaps", "primary_tested": ["CompositeMap.get(String)"], "associated_methods": ["CompositeMap.addComposited(Map)"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method on a CompositeMap with multiple maps."}, {"name": "testGetWithOverlappingKeys", "primary_tested": ["CompositeMap.get(String)"], "associated_methods": ["CompositeMap.addComposited(Map)"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method on a CompositeMap with overlapping keys."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/ZippingIterator_hasNextTest.java", "testclass_name": "ZippingIterator_hasNextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Iterator;", "import org.apache.commons.collections4.IteratorUtils;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ZippingIterator_hasNextTest", "description": "Unit tests for the hasNext method of the ZippingIterator class.", "class_members": {"variables": [{"name": "evens", "type": "ArrayList<Integer>"}, {"name": "odds", "type": "ArrayList<Integer>"}, {"name": "fib", "type": "ArrayList<Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testHasNextWithElements", "primary_tested": ["ZippingIterator.hasNext()"], "external_dependencies": {"modules": ["ZippingIterator", "ArrayList", "Iterator"], "class_members": [{"name": "fib", "type": "variable"}, {"name": "evens", "type": "variable"}, {"name": "odds", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method when the ZippingIterator contains elements."}, {"name": "testHasNextWithoutElements", "primary_tested": ["ZippingIterator.hasNext()"], "external_dependencies": {"modules": ["ZippingIterator", "IteratorUtils", "Iterator"]}, "category": "unit", "fixtures_used": [], "description": "Tests the hasNext method when the ZippingIterator does not contain elements."}, {"name": "testHasNextWithOneExhaustedIterator", "primary_tested": ["ZippingIterator.hasNext()"], "external_dependencies": {"modules": ["ZippingIterator", "ArrayList", "Iterator"], "class_members": [{"name": "evens", "type": "variable"}, {"name": "odds", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method when one of the iterators in the ZippingIterator is exhausted."}, {"name": "testHasNextWithAllExhaustedIterators", "primary_tested": ["ZippingIterator.hasNext()"], "external_dependencies": {"modules": ["ZippingIterator", "ArrayList", "Iterator"]}, "category": "unit", "fixtures_used": [], "description": "Tests the hasNext method when all iterators in the ZippingIterator are exhausted."}, {"name": "testHasNextWithMultipleCalls", "primary_tested": ["ZippingIterator.hasNext()"], "external_dependencies": {"modules": ["ZippingIterator", "ArrayList", "Iterator"], "class_members": [{"name": "fib", "type": "variable"}, {"name": "evens", "type": "variable"}, {"name": "odds", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method with multiple calls when the ZippingIterator contains elements."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_nextTest.java", "testclass_name": "SingletonListIterator_nextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SingletonListIterator_nextTest", "description": "Unit tests for the next method of SingletonListIterator.", "class_members": {"variables": [{"name": "testValue", "type": "static final Object"}, {"name": "iterator", "type": "SingletonListIterator<Object>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNextSuccess", "primary_tested": ["SingletonListIterator.next()"], "associated_methods": ["SingletonListIterator.hasNext()"], "external_dependencies": {"modules": ["SingletonListIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful retrieval of the next element from the SingletonListIterator."}, {"name": "testNextAfterReset", "primary_tested": ["SingletonListIterator.next()"], "associated_methods": ["SingletonListIterator.reset()", "SingletonListIterator.hasNext()"], "external_dependencies": {"modules": ["SingletonListIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retrieval of the next element after resetting the SingletonListIterator."}, {"name": "testNextAfterRemove", "primary_tested": ["SingletonListIterator.next()"], "associated_methods": ["SingletonListIterator.remove()"], "external_dependencies": {"modules": ["SingletonListIterator", "NoSuchElementException"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior of the next method after removing an element from the SingletonListIterator."}, {"name": "testNextAfterPrevious", "primary_tested": ["SingletonListIterator.next()"], "associated_methods": ["SingletonListIterator.previous()", "SingletonListIterator.hasNext()"], "external_dependencies": {"modules": ["SingletonListIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retrieval of the next element after calling the previous method on the SingletonListIterator."}, {"name": "testNextThrowsNoSuchElementException", "primary_tested": ["SingletonListIterator.next()"], "external_dependencies": {"modules": ["SingletonListIterator", "NoSuchElementException"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the next method throws a NoSuchElementException when called after the iterator has no more elements."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/FilterIterator_nextTest.java", "testclass_name": "FilterIterator_nextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.apache.commons.collections4.functors.TruePredicate.truePredicate;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.apache.commons.collections4.Predicate;", "import org.apache.commons.collections4.functors.NotNullPredicate;", "import org.apache.commons.lang3.ArrayUtils;", "import org.junit.jupiter.api.AfterEach;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "FilterIterator_nextTest", "description": "Unit tests for the next() method of the FilterIterator class.", "class_members": {"variables": [{"name": "iterator", "type": "FilterIterator<String>"}, {"name": "array", "type": "String[]"}], "methods": [{"name": "setUp", "signature": "void setUp()"}, {"name": "initIterator", "signature": "void initIterator()"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNextWithElements", "primary_tested": ["FilterIterator.next()"], "external_dependencies": {"modules": ["FilterIterator", "String"], "class_members": [{"name": "iterator", "type": "variable"}, {"name": "array", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next() method of FilterIterator when there are elements to iterate over."}, {"name": "testNextWithNoElements", "primary_tested": ["FilterIterator.next()"], "external_dependencies": {"modules": ["FilterIterator", "Collections", "NoSuchElementException"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the next() method of FilterIterator when there are no elements to iterate over."}, {"name": "testNextWithPredicate", "primary_tested": ["FilterIterator.next()"], "external_dependencies": {"modules": ["FilterIterator", "NotNullPredicate", "String"], "class_members": [{"name": "iterator", "type": "variable"}, {"name": "array", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the next() method of FilterIterator with a predicate that filters out null elements."}, {"name": "testNextWithNoMatchingPredicate", "primary_tested": ["FilterIterator.next()"], "external_dependencies": {"modules": ["FilterIterator", "NotNullPredicate", "NoSuchElementException", "String"], "class_members": [{"name": "iterator", "type": "variable"}, {"name": "array", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the next() method of FilterIterator with a predicate that does not match any elements, expecting a NoSuchElementException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_removeTest.java", "testclass_name": "SingletonListIterator_removeTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SingletonListIterator_removeTest", "description": "Unit tests for the remove functionality of the SingletonListIterator class.", "class_members": {"variables": [{"name": "testValue", "type": "static final Object"}, {"name": "iterator", "type": "SingletonListIterator<Object>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveSuccess", "primary_tested": ["SingletonListIterator.remove()"], "associated_methods": ["SingletonListIterator.hasNext()", "SingletonListIterator.next()", "SingletonListIterator.hasPrevious()"], "external_dependencies": {"modules": ["SingletonListIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful removal of an element from the SingletonListIterator."}, {"name": "testRemoveWithoutNextCall", "primary_tested": ["SingletonListIterator.remove()"], "external_dependencies": {"modules": ["SingletonListIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that an IllegalStateException is thrown when trying to remove an element without calling next()."}, {"name": "testRemoveTwice", "primary_tested": ["SingletonListIterator.remove()"], "associated_methods": ["SingletonListIterator.next()"], "external_dependencies": {"modules": ["SingletonListIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that an IllegalStateException is thrown when trying to remove an element twice."}, {"name": "testRemoveAfterReset", "primary_tested": ["SingletonListIterator.remove()"], "associated_methods": ["SingletonListIterator.next()", "SingletonListIterator.reset()"], "external_dependencies": {"modules": ["SingletonListIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that an IllegalStateException is thrown when trying to remove an element after resetting the iterator."}, {"name": "testRemoveAfterSet", "primary_tested": ["SingletonListIterator.remove()"], "associated_methods": ["SingletonListIterator.next()", "SingletonListIterator.set(Object)", "SingletonListIterator.hasNext()", "SingletonListIterator.hasPrevious()"], "external_dependencies": {"modules": ["SingletonListIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of an element after setting a new value in the SingletonListIterator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_resetTest.java", "testclass_name": "SingletonListIterator_resetTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SingletonListIterator_resetTest", "description": "Unit tests for the reset functionality of the SingletonListIterator class.", "class_members": {"variables": [{"name": "testValue", "type": "static final Object"}, {"name": "iterator", "type": "SingletonListIterator<Object>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testResetInitialState", "primary_tested": ["SingletonListIterator.reset()"], "associated_methods": ["SingletonListIterator.next()", "SingletonListIterator.previous()", "SingletonListIterator.hasNext()", "SingletonListIterator.hasPrevious()", "SingletonListIterator.nextIndex()", "SingletonListIterator.previousIndex()"], "external_dependencies": {"modules": ["SingletonListIterator", "Object"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the initial state of the iterator after reset."}, {"name": "testResetAfterRemove", "primary_tested": ["SingletonListIterator.reset()"], "associated_methods": ["SingletonListIterator.next()", "SingletonListIterator.remove()", "SingletonListIterator.hasNext()", "SingletonListIterator.hasPrevious()", "SingletonListIterator.nextIndex()", "SingletonListIterator.previousIndex()"], "external_dependencies": {"modules": ["SingletonListIterator", "Object"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the state of the iterator after reset following a remove operation."}, {"name": "testResetAndNext", "primary_tested": ["SingletonListIterator.reset()"], "associated_methods": ["SingletonListIterator.next()"], "external_dependencies": {"modules": ["SingletonListIterator", "Object"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next value after reset."}, {"name": "testResetAndHasNext", "primary_tested": ["SingletonListIterator.reset()"], "associated_methods": ["SingletonListIterator.hasNext()"], "external_dependencies": {"modules": ["SingletonListIterator", "Object"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method after reset."}, {"name": "testResetAndNextThrowsException", "primary_tested": ["SingletonListIterator.reset()"], "associated_methods": ["SingletonListIterator.next()", "SingletonListIterator.remove()"], "external_dependencies": {"modules": ["SingletonListIterator", "Object", "NoSuchElementException"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that NoSuchElementException is thrown after reset and next call following a remove operation."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_hasNextTest.java", "testclass_name": "PeekingIterator_hasNextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "PeekingIterator_hasNextTest", "description": "Unit tests for the hasNext method of the PeekingIterator class.", "class_members": {"variables": [{"name": "testList", "type": "List<String>"}, {"name": "testArray", "type": "static final String[]"}], "methods": [{"name": "setUp", "signature": "void setUp() throws Exception"}, {"name": "makeObject", "signature": "PeekingIterator<String> makeObject()"}, {"name": "validate", "signature": "void validate(Iterator<String> iter, String... items)"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testHasNextWithElements", "primary_tested": ["PeekingIterator.hasNext()"], "associated_methods": ["PeekingIterator.makeObject()", "PeekingIterator.validate(Iterator<String>,String...)"], "external_dependencies": {"modules": ["PeekingIterator", "ArrayList", "Arrays", "Iterator"], "class_members": [{"name": "testList", "type": "variable"}, {"name": "testArray", "type": "variable"}, {"name": "makeObject", "type": "method"}, {"name": "validate", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method when the iterator has elements."}, {"name": "testHasNextWithNoElements", "primary_tested": ["PeekingIterator.hasNext()"], "external_dependencies": {"modules": ["PeekingIterator", "ArrayList", "Iterator"]}, "category": "unit", "description": "Tests the hasNext method when the iterator has no elements."}, {"name": "testHasNextAfterPeek", "primary_tested": ["PeekingIterator.hasNext()"], "associated_methods": ["PeekingIterator.makeObject()", "PeekingIterator.peek()", "PeekingIterator.validate(Iterator<String>,String...)"], "external_dependencies": {"modules": ["PeekingIterator", "ArrayList", "Arrays", "Iterator"], "class_members": [{"name": "testList", "type": "variable"}, {"name": "testArray", "type": "variable"}, {"name": "makeObject", "type": "method"}, {"name": "validate", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method after a peek operation."}, {"name": "testHasNextAfterElement", "primary_tested": ["PeekingIterator.hasNext()"], "associated_methods": ["PeekingIterator.makeObject()", "PeekingIterator.element()", "PeekingIterator.validate(Iterator<String>,String...)"], "external_dependencies": {"modules": ["PeekingIterator", "ArrayList", "Arrays", "Iterator"], "class_members": [{"name": "testList", "type": "variable"}, {"name": "testArray", "type": "variable"}, {"name": "makeObject", "type": "method"}, {"name": "validate", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method after accessing the element."}, {"name": "testHasNextAfterNext", "primary_tested": ["PeekingIterator.hasNext()"], "associated_methods": ["PeekingIterator.makeObject()", "PeekingIterator.next()", "PeekingIterator.validate(Iterator<String>,String...)"], "external_dependencies": {"modules": ["PeekingIterator", "ArrayList", "Arrays", "Iterator"], "class_members": [{"name": "testList", "type": "variable"}, {"name": "testArray", "type": "variable"}, {"name": "makeObject", "type": "method"}, {"name": "validate", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method after a next operation."}, {"name": "testHasNextAfterExhaustion", "primary_tested": ["PeekingIterator.hasNext()"], "associated_methods": ["PeekingIterator.makeObject()", "PeekingIterator.validate(Iterator<String>,String...)"], "external_dependencies": {"modules": ["PeekingIterator", "ArrayList", "Arrays", "Iterator"], "class_members": [{"name": "testList", "type": "variable"}, {"name": "testArray", "type": "variable"}, {"name": "makeObject", "type": "method"}, {"name": "validate", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method after the iterator is exhausted."}]}]