{"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/ShapeTest.java", "testclass_name": "ShapeTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNotEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.Arrays;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.CsvSource;"], "name": "ShapeTest", "description": "Unit tests for the Shape class, which is part of the Bloom filter implementation in Apache Commons Collections.", "class_members": {"variables": [{"name": "shape", "type": "Shape"}]}, "fixtures": [], "test_cases": [{"name": "testBadNumberOfBits", "primary_tested": ["Shape.fromKM(int,int)", "Shape.fromNM(int,int)", "Shape.fromNMK(int,int,int)", "Shape.fromPMK(double,int,int)"], "external_dependencies": {"modules": ["IllegalArgumentException"], "class_members": []}, "category": "unit", "description": "Tests that if the number of bits is less than 1 an exception is thrown."}, {"name": "testBadNumberOfHashFunctions", "primary_tested": ["Shape.fromKM(int,int)", "Shape.fromNMK(int,int,int)", "Shape.fromPMK(double,int,int)", "Shape.fromNM(int,int)"], "external_dependencies": {"modules": ["IllegalArgumentException"], "class_members": []}, "category": "unit", "description": "Tests that if the number of hash functions is less than 1 an exception is thrown."}, {"name": "testBadNumberOfItems", "primary_tested": ["Shape.fromNM(int,int)", "Shape.fromNMK(int,int,int)", "Shape.fromNP(int,double)"], "external_dependencies": {"modules": ["IllegalArgumentException"], "class_members": []}, "category": "unit", "description": "Tests that if the number of items less than 1 an IllegalArgumentException is thrown."}, {"name": "testBadProbability", "primary_tested": ["Shape.fromNMK(int,int,int)", "Shape.fromNP(int,double)"], "external_dependencies": {"modules": ["IllegalArgumentException", "Double"], "class_members": []}, "category": "unit", "description": "Tests that if the calculated probability is greater than or equal to 1 an IllegalArgumentException is thrown."}, {"name": "testEqualsAndHashCode", "primary_tested": ["Shape.fromKM(int,int)"], "associated_methods": ["Shape.hashCode()", "Shape.equals(Object)"], "external_dependencies": {"modules": ["Arrays", "Integer"], "class_members": []}, "category": "unit", "description": "Test equality of shape."}, {"name": "testEstimateN", "primary_tested": ["Shape.estimateN(int)"], "external_dependencies": {"modules": ["Math"], "class_members": [{"name": "shape", "type": "variable"}]}, "category": "unit", "description": "Tests the estimateN method of the Shape class."}, {"name": "testFromKM", "primary_tested": ["Shape.fromKM(int,int)"], "external_dependencies": {"modules": ["IllegalArgumentException"], "class_members": []}, "category": "unit", "description": "Tests that if the number of bits less than 1 an IllegalArgumentException is thrown."}, {"name": "testFromNM", "primary_tested": ["Shape.fromNM(int,int)"], "associated_methods": ["Shape.getNumberOfBits()", "Shape.getNumberOfHashFunctions()", "Shape.getProbability(int)"], "external_dependencies": {"modules": ["IllegalArgumentException"], "class_members": []}, "category": "unit", "description": "Tests that the number of items and number of bits is passed the other values are calculated correctly."}, {"name": "testFromNMK", "primary_tested": ["Shape.fromNMK(int,int,int)"], "associated_methods": ["Shape.getNumberOfBits()", "Shape.getNumberOfHashFunctions()", "Shape.getProbability(int)"], "external_dependencies": {"modules": ["IllegalArgumentException", "Integer"], "class_members": []}, "category": "unit", "description": "Tests that when the number of items, number of bits and number of hash functions is passed the values are calculated correctly."}, {"name": "testFromNP", "primary_tested": ["Shape.fromNP(int,double)"], "associated_methods": ["Shape.getNumberOfBits()", "Shape.getNumberOfHashFunctions()"], "external_dependencies": {"modules": ["IllegalArgumentException", "Math"], "class_members": []}, "category": "unit", "description": "Tests the calculated values of calling the constructor with the probability, number of bits and number of hash functions."}, {"name": "testFromPMK", "primary_tested": ["Shape.fromPMK(double,int,int)"], "associated_methods": ["Shape.getNumberOfBits()", "Shape.getNumberOfHashFunctions()", "Shape.getProbability(int)"], "external_dependencies": {"modules": ["IllegalArgumentException", "Math"], "class_members": []}, "category": "unit", "description": "Tests the calculated values of calling the constructor with the probability, number of bits and number of hash functions."}, {"name": "testGetProbability", "primary_tested": ["Shape.getProbability(int)"], "external_dependencies": {"modules": ["Math", "IllegalArgumentException"], "class_members": [{"name": "shape", "type": "variable"}]}, "category": "unit", "description": "Tests the getProbability method of the Shape class."}, {"name": "testIsSparse", "primary_tested": ["Shape.fromKM(int,int)", "Shape.isSparse(int)"], "external_dependencies": {"modules": ["Long", "Integer"], "class_members": []}, "category": "unit", "description": "Tests the isSparse method of the Shape class."}, {"name": "testProbability", "primary_tested": ["Shape.fromNMK(int,int,int)", "Shape.getNumberOfBits()", "Shape.getNumberOfHashFunctions()", "Shape.getProbability(int)"], "external_dependencies": {"modules": [], "class_members": []}, "category": "unit", "description": "Tests that the probability is calculated correctly."}, {"name": "testToString", "primary_tested": ["Shape.fromKM(int,int)", "Shape.toString()"], "external_dependencies": {"modules": [], "class_members": []}, "category": "unit", "description": "Tests the toString method of the Shape class."}]}