[{"strategy": "retry", "code": "\npackage org.apache.commons.collections4.bag;\n\nimport org.apache.commons.collections4.Bag;\nimport org.apache.commons.collections4.Predicate;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\npublic class PredicatedBag_addTest {\n\n    @Test\n    public void testAddValidObject() {\n        // Given\n        Bag<String> mockBag = mock(Bag.class);\n        Predicate<String> mockPredicate = mock(Predicate.class);\n        when(mockPredicate.evaluate(\"valid\")).thenReturn(true);\n        PredicatedBag<String> predicatedBag = new PredicatedBag<>(mockBag, mockPredicate);\n\n        // When\n        boolean result = predicatedBag.add(\"valid\", 1);\n\n        // Then\n        assertTrue(result);\n        verify(mockBag).add(\"valid\", 1);\n    }\n\n    @Test\n    public void testAddInvalidObject() {\n        // Given\n        Bag<String> mockBag = mock(Bag.class);\n        Predicate<String> mockPredicate = mock(Predicate.class);\n        when(mockPredicate.evaluate(\"invalid\")).thenReturn(false);\n        PredicatedBag<String> predicatedBag = new PredicatedBag<>(mockBag, mockPredicate);\n\n        // When\n        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> {\n            predicatedBag.add(\"invalid\", 1);\n        });\n\n        // Then\n        assertEquals(\"Predicate rejected item: invalid\", exception.getMessage());\n        verify(mockBag, never()).add(any(), anyInt());\n    }\n}\n"}]