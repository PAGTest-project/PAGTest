[{"strategy": "retry", "code": "\npackage org.apache.commons.collections4.map;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNull;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class PassiveExpiringMap_putAllTest {\n\n    private PassiveExpiringMap<Integer, String> expiringMap;\n\n    @BeforeEach\n    public void setUp() {\n        expiringMap = new PassiveExpiringMap<>(-1L); // Entries never expire\n    }\n\n    @Test\n    public void testPutAll() {\n        Map<Integer, String> mapToCopy = new HashMap<>();\n        mapToCopy.put(1, \"One\");\n        mapToCopy.put(2, \"Two\");\n        mapToCopy.put(3, \"Three\");\n\n        expiringMap.putAll(mapToCopy);\n\n        assertEquals(3, expiringMap.size());\n        assertEquals(\"One\", expiringMap.get(1));\n        assertEquals(\"Two\", expiringMap.get(2));\n        assertEquals(\"Three\", expiringMap.get(3));\n    }\n\n    @Test\n    public void testPutAllWithEmptyMap() {\n        Map<Integer, String> mapToCopy = new HashMap<>();\n\n        expiringMap.putAll(mapToCopy);\n\n        assertEquals(0, expiringMap.size());\n    }\n\n    @Test\n    public void testPutAllWithExistingEntries() {\n        expiringMap.put(1, \"OriginalOne\");\n        expiringMap.put(2, \"OriginalTwo\");\n\n        Map<Integer, String> mapToCopy = new HashMap<>();\n        mapToCopy.put(1, \"NewOne\");\n        mapToCopy.put(3, \"Three\");\n\n        expiringMap.putAll(mapToCopy);\n\n        assertEquals(3, expiringMap.size());\n        assertEquals(\"NewOne\", expiringMap.get(1));\n        assertEquals(\"OriginalTwo\", expiringMap.get(2));\n        assertEquals(\"Three\", expiringMap.get(3));\n    }\n\n    @Test\n    public void testPutAllWithExpiredEntries() throws InterruptedException {\n        expiringMap = new PassiveExpiringMap<>(1L); // Entries expire in 1 millisecond\n        expiringMap.put(1, \"One\");\n        expiringMap.put(2, \"Two\");\n\n        Thread.sleep(2); // Ensure entries expire\n\n        Map<Integer, String> mapToCopy = new HashMap<>();\n        mapToCopy.put(3, \"Three\");\n        mapToCopy.put(4, \"Four\");\n\n        expiringMap.putAll(mapToCopy);\n\n        assertEquals(2, expiringMap.size());\n        assertNull(expiringMap.get(1));\n        assertNull(expiringMap.get(2));\n        assertEquals(\"Three\", expiringMap.get(3));\n        assertEquals(\"Four\", expiringMap.get(4));\n    }\n}\n"}]