[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.bag;\n\nimport org.apache.commons.collections4.SortedBag;\nimport org.apache.commons.collections4.Transformer;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\nclass TransformedSortedBag_transformedSortedBagTest {\n\n    @Test\n    void testTransformedSortedBag_NonEmptyBag() {\n        // Given\n        SortedBag<Integer> bag = mock(SortedBag.class);\n        Transformer<Integer, Integer> transformer = mock(Transformer.class);\n        when(bag.isEmpty()).thenReturn(false);\n        Integer[] values = {1, 2, 3};\n        when(bag.toArray()).thenReturn(values);\n        when(transformer.apply(anyInt())).thenAnswer(i -> (int) i.getArguments()[0] * 2);\n\n        // When\n        TransformedSortedBag<Integer> result = TransformedSortedBag.transformedSortedBag(bag, transformer);\n\n        // Then\n        verify(bag).clear();\n        SortedBag<Integer> decoratedBag = result.getSortedBag();\n        assertEquals(6, decoratedBag.size()); // 1*2 + 2*2 + 3*2 = 6\n    }\n\n    @Test\n    void testTransformedSortedBag_EmptyBag() {\n        // Given\n        SortedBag<Integer> bag = mock(SortedBag.class);\n        Transformer<Integer, Integer> transformer = mock(Transformer.class);\n        when(bag.isEmpty()).thenReturn(true);\n\n        // When\n        TransformedSortedBag<Integer> result = TransformedSortedBag.transformedSortedBag(bag, transformer);\n\n        // Then\n        verify(bag, never()).clear();\n        SortedBag<Integer> decoratedBag = result.getSortedBag();\n        assertTrue(decoratedBag.isEmpty());\n    }\n}\n"}]