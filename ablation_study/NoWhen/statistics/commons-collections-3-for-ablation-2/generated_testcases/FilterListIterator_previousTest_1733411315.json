[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.iterators;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.ListIterator;\nimport org.apache.commons.collections4.Predicate;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class FilterListIterator_previousTest {\n\n    private List<Integer> list;\n    private Predicate<Integer> evenPred;\n    private Predicate<Integer> oddPred;\n\n    @BeforeEach\n    public void setUp() {\n        list = new ArrayList<>();\n        for (int i = 0; i < 20; i++) {\n            list.add(Integer.valueOf(i));\n        }\n\n        evenPred = x -> x % 2 == 0;\n        oddPred = x -> x % 2 != 0;\n    }\n\n    @Test\n    public void testPreviousWithEvenPredicate() {\n        final FilterListIterator<Integer> filtered = new FilterListIterator<>(list.listIterator(), evenPred);\n        // Move to the end of the list\n        while (filtered.hasNext()) {\n            filtered.next();\n        }\n        // Test previous\n        assertEquals(18, filtered.previous());\n        assertEquals(16, filtered.previous());\n        assertEquals(14, filtered.previous());\n    }\n\n    @Test\n    public void testPreviousWithOddPredicate() {\n        final FilterListIterator<Integer> filtered = new FilterListIterator<>(list.listIterator(), oddPred);\n        // Move to the end of the list\n        while (filtered.hasNext()) {\n            filtered.next();\n        }\n        // Test previous\n        assertEquals(19, filtered.previous());\n        assertEquals(17, filtered.previous());\n        assertEquals(15, filtered.previous());\n    }\n\n    @Test\n    public void testPreviousNoSuchElementException() {\n        final FilterListIterator<Integer> filtered = new FilterListIterator<>(list.listIterator(), evenPred);\n        // Ensure NoSuchElementException is thrown when no previous element exists\n        assertThrows(NoSuchElementException.class, () -> filtered.previous());\n    }\n}\n"}]