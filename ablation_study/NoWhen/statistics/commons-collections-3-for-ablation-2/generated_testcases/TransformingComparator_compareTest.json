[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.comparators;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport java.util.Comparator;\nimport org.apache.commons.collections4.Transformer;\nimport org.apache.commons.collections4.TransformerUtils;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class TransformingComparator_compareTest {\n\n    private Transformer<String, String> transformer;\n    private Comparator<String> comparator;\n    private TransformingComparator<String, String> transformingComparator;\n\n    @BeforeEach\n    public void setUp() {\n        transformer = TransformerUtils.nopTransformer();\n        comparator = Comparator.naturalOrder();\n        transformingComparator = new TransformingComparator<>(transformer, comparator);\n    }\n\n    @Test\n    public void testCompareEqualObjects() {\n        String obj1 = \"test\";\n        String obj2 = \"test\";\n        assertEquals(0, transformingComparator.compare(obj1, obj2));\n    }\n\n    @Test\n    public void testCompareLessThan() {\n        String obj1 = \"apple\";\n        String obj2 = \"banana\";\n        assertTrue(transformingComparator.compare(obj1, obj2) < 0);\n    }\n\n    @Test\n    public void testCompareGreaterThan() {\n        String obj1 = \"banana\";\n        String obj2 = \"apple\";\n        assertTrue(transformingComparator.compare(obj1, obj2) > 0);\n    }\n\n    @Test\n    public void testEquals() {\n        final Transformer<String, String> t1 = TransformerUtils.nopTransformer();\n        final TransformingComparator<String, String> comp1 = new TransformingComparator<>(t1);\n        final TransformingComparator<String, String> comp2 = new TransformingComparator<>(t1, comp1);\n\n        // Checks the contract: equals-hashCode on comp1 and comp2\n        assertTrue(comp1.equals(comp2) ? comp1.hashCode() == comp2.hashCode() : true,\n                \"Contract failed: equals-hashCode\");\n\n        // Checks the contract: equals-hashCode on comp1 and comp2\n        assertTrue(comp2.equals(comp1) ? comp2.hashCode() == comp1.hashCode() : true,\n                \"Contract failed: equals-hashCode\");\n    }\n}\n"}]