[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.map;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertNull;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class CompositeMap_removeCompositedTest {\n\n    private CompositeMap<String, String> compositeMap;\n    private Map<String, String> mapOne;\n    private Map<String, String> mapTwo;\n\n    @BeforeEach\n    public void setUp() {\n        mapOne = new HashMap<>();\n        mapOne.put(\"1\", \"one\");\n        mapOne.put(\"2\", \"two\");\n\n        mapTwo = new HashMap<>();\n        mapTwo.put(\"3\", \"three\");\n        mapTwo.put(\"4\", \"four\");\n\n        compositeMap = new CompositeMap<>(mapOne, mapTwo);\n    }\n\n    @Test\n    public void testRemoveCompositedExistingMap() {\n        Map<String, String> removedMap = compositeMap.removeComposited(mapTwo);\n        assertEquals(mapTwo, removedMap);\n        assertFalse(compositeMap.containsKey(\"3\"));\n        assertFalse(compositeMap.containsKey(\"4\"));\n        assertEquals(2, compositeMap.size());\n    }\n\n    @Test\n    public void testRemoveCompositedNonExistingMap() {\n        Map<String, String> nonExistingMap = new HashMap<>();\n        nonExistingMap.put(\"5\", \"five\");\n        Map<String, String> removedMap = compositeMap.removeComposited(nonExistingMap);\n        assertNull(removedMap);\n        assertEquals(4, compositeMap.size());\n    }\n\n    @Test\n    public void testRemoveCompositedEmptyCompositeMap() {\n        CompositeMap<String, String> emptyCompositeMap = new CompositeMap<>();\n        Map<String, String> removedMap = emptyCompositeMap.removeComposited(mapOne);\n        assertNull(removedMap);\n        assertTrue(emptyCompositeMap.isEmpty());\n    }\n\n    @Test\n    public void testRemoveCompositedSingleMap() {\n        CompositeMap<String, String> singleMapComposite = new CompositeMap<>(mapOne);\n        Map<String, String> removedMap = singleMapComposite.removeComposited(mapOne);\n        assertEquals(mapOne, removedMap);\n        assertTrue(singleMapComposite.isEmpty());\n    }\n}\n"}]