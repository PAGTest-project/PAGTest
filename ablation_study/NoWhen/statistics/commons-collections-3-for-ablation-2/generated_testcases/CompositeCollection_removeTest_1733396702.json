[{"strategy": "retry", "code": "\npackage org.apache.commons.collections4.collection;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.function.Predicate;\n\nimport org.apache.commons.collections4.CollectionMutator;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class CompositeCollection_removeTest {\n    private CompositeCollection<String> c;\n    private HashSet<String> one;\n    private HashSet<String> two;\n\n    @BeforeEach\n    protected void setUpTest() {\n        c = new CompositeCollection<>();\n        one = new HashSet<>();\n        two = new HashSet<>();\n    }\n\n    @Test\n    public void testRemoveWithMutator() {\n        setUpTest();\n        one.add(\"a\");\n        one.add(\"b\");\n        c.addComposited(one);\n\n        CollectionMutator<String> mutator = new CollectionMutator<String>() {\n            @Override\n            public boolean add(CompositeCollection<String> composite, List<Collection<String>> collections, String obj) {\n                return false;\n            }\n\n            @Override\n            public boolean addAll(CompositeCollection<String> composite, List<Collection<String>> collections, Collection<? extends String> coll) {\n                return false;\n            }\n\n            @Override\n            public boolean remove(CompositeCollection<String> composite, List<Collection<String>> collections, Object obj) {\n                for (Collection<String> collection : collections) {\n                    if (collection.remove(obj)) {\n                        return true;\n                    }\n                }\n                return false;\n            }\n        };\n\n        c.setMutator(mutator);\n        assertTrue(c.remove(\"a\"));\n        assertFalse(c.contains(\"a\"));\n        assertEquals(1, c.size());\n    }\n\n    @Test\n    public void testRemoveWithoutMutator() {\n        setUpTest();\n        one.add(\"a\");\n        one.add(\"b\");\n        c.addComposited(one);\n\n        assertThrows(UnsupportedOperationException.class, () -> c.remove(\"a\"));\n    }\n}\n"}]