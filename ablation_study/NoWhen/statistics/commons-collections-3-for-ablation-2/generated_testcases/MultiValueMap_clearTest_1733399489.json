[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.map;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class MultiValueMap_clearTest {\n\n    private MultiValueMap<String, String> multiValueMap;\n\n    @BeforeEach\n    public void setUp() {\n        multiValueMap = new MultiValueMap<>();\n    }\n\n    @Test\n    public void testClear() {\n        // Given\n        multiValueMap.put(\"key1\", \"value1\");\n        multiValueMap.put(\"key1\", \"value2\");\n        multiValueMap.put(\"key2\", \"value3\");\n\n        // When\n        multiValueMap.clear();\n\n        // Then\n        assertTrue(multiValueMap.isEmpty());\n        assertEquals(0, multiValueMap.size());\n    }\n\n    @Test\n    public void testClearWithEmptyMap() {\n        // Given\n        // Map is already empty\n\n        // When\n        multiValueMap.clear();\n\n        // Then\n        assertTrue(multiValueMap.isEmpty());\n        assertEquals(0, multiValueMap.size());\n    }\n\n    @Test\n    public void testClearWithMultipleKeys() {\n        // Given\n        multiValueMap.put(\"key1\", \"value1\");\n        multiValueMap.put(\"key1\", \"value2\");\n        multiValueMap.put(\"key2\", \"value3\");\n        multiValueMap.put(\"key2\", \"value4\");\n\n        // When\n        multiValueMap.clear();\n\n        // Then\n        assertTrue(multiValueMap.isEmpty());\n        assertEquals(0, multiValueMap.size());\n    }\n\n    @Test\n    public void testClearWithDifferentCollectionTypes() {\n        // Given\n        Map<String, Collection<String>> map = new HashMap<>();\n        map.put(\"key1\", new ArrayList<>(java.util.Arrays.asList(\"value1\", \"value2\")));\n        map.put(\"key2\", new ArrayList<>(java.util.Arrays.asList(\"value3\", \"value4\")));\n        MultiValueMap<String, String> customMap = MultiValueMap.multiValueMap(map, ArrayList.class);\n\n        // When\n        customMap.clear();\n\n        // Then\n        assertTrue(customMap.isEmpty());\n        assertEquals(0, customMap.size());\n    }\n}\n"}]