[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.iterators;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.ArrayList;\nimport java.util.NoSuchElementException;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class ZippingIterator_removeTest {\n\n    private ArrayList<Integer> evens;\n    private ArrayList<Integer> odds;\n    private ArrayList<Integer> fib;\n\n    @BeforeEach\n    public void setUp() throws Exception {\n        evens = new ArrayList<>();\n        odds = new ArrayList<>();\n        for (int i = 0; i < 20; i++) {\n            if (0 == i % 2) {\n                evens.add(i);\n            } else {\n                odds.add(i);\n            }\n        }\n        fib = new ArrayList<>();\n        fib.add(1);\n        fib.add(1);\n        fib.add(2);\n        fib.add(3);\n        fib.add(5);\n        fib.add(8);\n        fib.add(13);\n        fib.add(21);\n    }\n\n    @Test\n    public void testRemoveSuccess() {\n        final ZippingIterator<Integer> iter = new ZippingIterator<>(fib.iterator(), evens.iterator(), odds.iterator());\n\n        assertEquals(Integer.valueOf(1), iter.next());  // fib    1\n        assertEquals(Integer.valueOf(0), iter.next());  // even   0\n        assertEquals(Integer.valueOf(1), iter.next());  // odd    1\n\n        iter.remove(); // Remove the last returned element (odd 1)\n        assertFalse(odds.contains(1));\n    }\n\n    @Test\n    public void testRemoveWithoutNext() {\n        final ZippingIterator<Integer> iter = new ZippingIterator<>(fib.iterator(), evens.iterator(), odds.iterator());\n\n        assertThrows(IllegalStateException.class, iter::remove);\n    }\n\n    @Test\n    public void testRemoveTwice() {\n        final ZippingIterator<Integer> iter = new ZippingIterator<>(fib.iterator(), evens.iterator(), odds.iterator());\n\n        assertEquals(Integer.valueOf(1), iter.next());  // fib    1\n        assertEquals(Integer.valueOf(0), iter.next());  // even   0\n        assertEquals(Integer.valueOf(1), iter.next());  // odd    1\n\n        iter.remove(); // Remove the last returned element (odd 1)\n        assertThrows(IllegalStateException.class, iter::remove);\n    }\n\n    @Test\n    public void testRemoveAfterExhaustedIterator() {\n        final ZippingIterator<Integer> iter = new ZippingIterator<>(fib.iterator(), evens.iterator(), odds.iterator());\n\n        while (iter.hasNext()) {\n            iter.next();\n        }\n\n        assertThrows(IllegalStateException.class, iter::remove);\n    }\n}\n"}]