[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.iterators;\n\nimport static org.apache.commons.collections4.functors.TruePredicate.truePredicate;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.NoSuchElementException;\n\nimport org.apache.commons.collections4.Predicate;\nimport org.apache.commons.collections4.functors.NotNullPredicate;\nimport org.apache.commons.lang3.ArrayUtils;\nimport org.junit.jupiter.api.AfterEach;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class FilterIterator_removeTest {\n\n    private FilterIterator<String> iterator;\n    private List<String> list;\n\n    @BeforeEach\n    public void setUp() {\n        list = new ArrayList<>(Arrays.asList(\"a\", \"b\", \"c\"));\n        iterator = new FilterIterator<>(list.iterator(), truePredicate());\n    }\n\n    @Test\n    public void testRemoveSuccess() {\n        iterator.next(); // Move to the first element\n        iterator.remove(); // Remove the last returned element\n        assertFalse(list.contains(\"a\"));\n    }\n\n    @Test\n    public void testRemoveWithoutNextCall() {\n        assertThrows(IllegalStateException.class, () -> {\n            iterator.remove();\n        });\n    }\n\n    @Test\n    public void testRemoveAfterHasNextCall() {\n        iterator.hasNext(); // Call hasNext to set nextObjectSet to true\n        assertThrows(IllegalStateException.class, () -> {\n            iterator.remove();\n        });\n    }\n\n    @Test\n    public void testRemoveOnEmptyIterator() {\n        iterator = new FilterIterator<>(Collections.emptyIterator(), truePredicate());\n        assertThrows(NoSuchElementException.class, () -> {\n            iterator.next();\n        });\n    }\n}\n"}]