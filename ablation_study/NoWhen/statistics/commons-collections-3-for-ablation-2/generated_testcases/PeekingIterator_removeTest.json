[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.iterators;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Iterator;\nimport java.util.List;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class PeekingIterator_removeTest {\n\n    private List<String> testList;\n    private static final String[] testArray = {\"a\", \"b\", \"c\"};\n\n    @SuppressWarnings(\"unchecked\")\n    @BeforeEach\n    protected void setUp() throws Exception {\n        testList = new ArrayList<>(Arrays.asList((String[]) testArray));\n    }\n\n    @Test\n    public void testRemoveWithoutPeekOrElement() {\n        PeekingIterator<String> it = new PeekingIterator<>(testList.iterator());\n        it.next(); // Move to the first element\n        it.remove(); // Remove the first element\n        assertEquals(2, testList.size());\n        assertEquals(\"b\", testList.get(0));\n        assertEquals(\"c\", testList.get(1));\n    }\n\n    @Test\n    public void testRemoveAfterPeek() {\n        PeekingIterator<String> it = new PeekingIterator<>(testList.iterator());\n        it.peek(); // Peek the first element\n        assertThrows(IllegalStateException.class, () -> it.remove());\n    }\n\n    @Test\n    public void testRemoveAfterElement() {\n        PeekingIterator<String> it = new PeekingIterator<>(testList.iterator());\n        it.element(); // Element the first element\n        assertThrows(IllegalStateException.class, () -> it.remove());\n    }\n\n    @Test\n    public void testRemoveOnEmptyIterator() {\n        PeekingIterator<String> it = new PeekingIterator<>(new ArrayList<String>().iterator());\n        assertThrows(IllegalStateException.class, () -> it.remove());\n    }\n}\n"}]