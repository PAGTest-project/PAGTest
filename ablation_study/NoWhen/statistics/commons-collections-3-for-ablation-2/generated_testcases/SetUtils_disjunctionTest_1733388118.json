[{"strategy": "retry", "code": "\npackage org.apache.commons.collections4;\n\nimport org.junit.jupiter.api.Test;\nimport java.util.Set;\nimport java.util.HashSet;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SetUtils_disjunctionTest {\n\n    @Test\n    public void testDisjunction() {\n        Set<Integer> setA = new HashSet<>(Set.of(1, 2, 3));\n        Set<Integer> setB = new HashSet<>(Set.of(3, 4, 5));\n\n        SetView<Integer> result = SetUtils.disjunction(setA, setB);\n\n        assertTrue(result.contains(1));\n        assertTrue(result.contains(2));\n        assertTrue(result.contains(4));\n        assertTrue(result.contains(5));\n        assertFalse(result.contains(3));\n        assertEquals(4, result.size());\n    }\n\n    @Test\n    public void testDisjunctionWithEmptySets() {\n        Set<Integer> setA = new HashSet<>();\n        Set<Integer> setB = new HashSet<>();\n\n        SetView<Integer> result = SetUtils.disjunction(setA, setB);\n\n        assertTrue(result.isEmpty());\n        assertEquals(0, result.size());\n    }\n\n    @Test\n    public void testDisjunctionWithNullSetA() {\n        Set<Integer> setA = null;\n        Set<Integer> setB = new HashSet<>(Set.of(1, 2, 3));\n\n        assertThrows(NullPointerException.class, () -> SetUtils.disjunction(setA, setB));\n    }\n\n    @Test\n    public void testDisjunctionWithNullSetB() {\n        Set<Integer> setA = new HashSet<>(Set.of(1, 2, 3));\n        Set<Integer> setB = null;\n\n        assertThrows(NullPointerException.class, () -> SetUtils.disjunction(setA, setB));\n    }\n}\n"}]