[{"strategy": "retry", "code": "\npackage org.apache.commons.collections4;\n\nimport org.junit.jupiter.api.Test;\n\nimport java.util.HashSet;\nimport java.util.Set;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass SetUtils_unionTest {\n\n    @Test\n    void testUnion() {\n        Set<Integer> setA = new HashSet<>(Set.of(1, 2, 3));\n        Set<Integer> setB = new HashSet<>(Set.of(3, 4, 5));\n\n        SetView<Integer> unionSet = SetUtils.union(setA, setB);\n\n        assertTrue(unionSet.contains(1));\n        assertTrue(unionSet.contains(2));\n        assertTrue(unionSet.contains(3));\n        assertTrue(unionSet.contains(4));\n        assertTrue(unionSet.contains(5));\n        assertFalse(unionSet.contains(6));\n\n        assertEquals(5, unionSet.size());\n        assertFalse(unionSet.isEmpty());\n    }\n\n    @Test\n    void testUnionWithEmptySets() {\n        Set<Integer> setA = new HashSet<>();\n        Set<Integer> setB = new HashSet<>();\n\n        SetView<Integer> unionSet = SetUtils.union(setA, setB);\n\n        assertTrue(unionSet.isEmpty());\n        assertEquals(0, unionSet.size());\n    }\n\n    @Test\n    void testUnionWithNullSetA() {\n        Set<Integer> setA = null;\n        Set<Integer> setB = new HashSet<>(Set.of(1, 2, 3));\n\n        assertThrows(NullPointerException.class, () -> SetUtils.union(setA, setB));\n    }\n\n    @Test\n    void testUnionWithNullSetB() {\n        Set<Integer> setA = new HashSet<>(Set.of(1, 2, 3));\n        Set<Integer> setB = null;\n\n        assertThrows(NullPointerException.class, () -> SetUtils.union(setA, setB));\n    }\n}\n"}]