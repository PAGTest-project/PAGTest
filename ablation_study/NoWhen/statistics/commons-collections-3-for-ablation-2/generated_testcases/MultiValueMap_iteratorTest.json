[{"strategy": "retry", "code": "\npackage org.apache.commons.collections4.map;\n\nimport org.apache.commons.collections4.MultiMap;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.Map;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MultiValueMap_iteratorTest {\n\n    private MultiValueMap<String, String> multiValueMap;\n\n    @BeforeEach\n    public void setUp() {\n        multiValueMap = new MultiValueMap<>();\n    }\n\n    @Test\n    public void testIteratorWithSingleEntry() {\n        multiValueMap.put(\"key1\", \"value1\");\n\n        Iterator<Map.Entry<String, String>> iterator = multiValueMap.iterator();\n        assertTrue(iterator.hasNext());\n        Map.Entry<String, String> entry = iterator.next();\n        assertEquals(\"key1\", entry.getKey());\n        assertEquals(\"value1\", entry.getValue());\n        assertFalse(iterator.hasNext());\n    }\n\n    @Test\n    public void testIteratorWithMultipleEntries() {\n        multiValueMap.put(\"key1\", \"value1\");\n        multiValueMap.put(\"key1\", \"value2\");\n        multiValueMap.put(\"key2\", \"value3\");\n\n        Iterator<Map.Entry<String, String>> iterator = multiValueMap.iterator();\n        assertTrue(iterator.hasNext());\n        Map.Entry<String, String> entry1 = iterator.next();\n        assertEquals(\"key1\", entry1.getKey());\n        assertEquals(\"value1\", entry1.getValue());\n\n        assertTrue(iterator.hasNext());\n        Map.Entry<String, String> entry2 = iterator.next();\n        assertEquals(\"key1\", entry2.getKey());\n        assertEquals(\"value2\", entry2.getValue());\n\n        assertTrue(iterator.hasNext());\n        Map.Entry<String, String> entry3 = iterator.next();\n        assertEquals(\"key2\", entry3.getKey());\n        assertEquals(\"value3\", entry3.getValue());\n\n        assertFalse(iterator.hasNext());\n    }\n\n    @Test\n    public void testIteratorWithEmptyMap() {\n        Iterator<Map.Entry<String, String>> iterator = multiValueMap.iterator();\n        assertFalse(iterator.hasNext());\n    }\n\n    @Test\n    public void testIteratorAfterModification() {\n        multiValueMap.put(\"key1\", \"value1\");\n        Iterator<Map.Entry<String, String>> iterator = multiValueMap.iterator();\n        assertTrue(iterator.hasNext());\n\n        multiValueMap.put(\"key2\", \"value2\");\n        Map.Entry<String, String> entry1 = iterator.next();\n        assertEquals(\"key1\", entry1.getKey());\n        assertEquals(\"value1\", entry1.getValue());\n\n        assertFalse(iterator.hasNext()); // Fixed assertion\n    }\n\n    @Test\n    public void testIteratorRemoveNotSupported() {\n        multiValueMap.put(\"key1\", \"value1\");\n        Iterator<Map.Entry<String, String>> iterator = multiValueMap.iterator();\n        assertTrue(iterator.hasNext());\n\n        assertThrows(UnsupportedOperationException.class, () -> {\n            iterator.remove();\n        });\n    }\n}\n"}]