[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.collection;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport java.util.Arrays;\nimport java.util.Collection;\nimport org.apache.commons.collections4.Transformer;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class IndexedCollection_nonUniqueIndexedCollectionTest {\n\n    private Transformer<String, Integer> keyTransformer;\n\n    @BeforeEach\n    public void setUp() {\n        keyTransformer = new Transformer<String, Integer>() {\n            @Override\n            public Integer apply(String input) {\n                return Integer.parseInt(input);\n            }\n        };\n    }\n\n    @Test\n    public void testNonUniqueIndexedCollection() {\n        Collection<String> coll = Arrays.asList(\"1\", \"2\", \"3\");\n        IndexedCollection<Integer, String> indexedCollection = IndexedCollection.nonUniqueIndexedCollection(coll, keyTransformer);\n\n        assertNotNull(indexedCollection);\n        assertEquals(3, indexedCollection.size());\n        assertTrue(indexedCollection.contains(\"1\"));\n        assertTrue(indexedCollection.contains(\"2\"));\n        assertTrue(indexedCollection.contains(\"3\"));\n    }\n\n    @Test\n    public void testNonUniqueIndexedCollectionWithEmptyCollection() {\n        Collection<String> coll = Arrays.asList();\n        IndexedCollection<Integer, String> indexedCollection = IndexedCollection.nonUniqueIndexedCollection(coll, keyTransformer);\n\n        assertNotNull(indexedCollection);\n        assertEquals(0, indexedCollection.size());\n    }\n\n    @Test\n    public void testNonUniqueIndexedCollectionWithDuplicateKeys() {\n        Collection<String> coll = Arrays.asList(\"1\", \"1\", \"2\");\n        IndexedCollection<Integer, String> indexedCollection = IndexedCollection.nonUniqueIndexedCollection(coll, keyTransformer);\n\n        assertNotNull(indexedCollection);\n        assertEquals(3, indexedCollection.size());\n        assertTrue(indexedCollection.contains(\"1\"));\n        assertTrue(indexedCollection.contains(\"2\"));\n    }\n}\n"}]