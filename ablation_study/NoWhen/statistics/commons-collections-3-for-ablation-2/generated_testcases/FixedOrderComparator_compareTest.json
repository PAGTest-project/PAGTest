[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.comparators;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Random;\nimport org.apache.commons.lang3.ArrayUtils;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class FixedOrderComparator_compareTest {\n\n    private FixedOrderComparator<String> comparator;\n\n    @BeforeEach\n    public void setUp() {\n        comparator = new FixedOrderComparator<>();\n    }\n\n    @Test\n    public void testCompareKnownObjects() {\n        comparator.add(\"apple\");\n        comparator.add(\"banana\");\n        comparator.add(\"cherry\");\n\n        assertEquals(-1, comparator.compare(\"apple\", \"banana\"));\n        assertEquals(1, comparator.compare(\"banana\", \"apple\"));\n        assertEquals(0, comparator.compare(\"apple\", \"apple\"));\n    }\n\n    @Test\n    public void testCompareUnknownObjectsBefore() {\n        comparator.add(\"apple\");\n        comparator.add(\"banana\");\n        comparator.setUnknownObjectBehavior(FixedOrderComparator.UnknownObjectBehavior.BEFORE);\n\n        assertEquals(-1, comparator.compare(\"unknown\", \"apple\"));\n        assertEquals(1, comparator.compare(\"apple\", \"unknown\"));\n        assertEquals(0, comparator.compare(\"unknown1\", \"unknown2\"));\n    }\n\n    @Test\n    public void testCompareUnknownObjectsAfter() {\n        comparator.add(\"apple\");\n        comparator.add(\"banana\");\n        comparator.setUnknownObjectBehavior(FixedOrderComparator.UnknownObjectBehavior.AFTER);\n\n        assertEquals(1, comparator.compare(\"unknown\", \"apple\"));\n        assertEquals(-1, comparator.compare(\"apple\", \"unknown\"));\n        assertEquals(0, comparator.compare(\"unknown1\", \"unknown2\"));\n    }\n\n    @Test\n    public void testCompareUnknownObjectsException() {\n        comparator.add(\"apple\");\n        comparator.add(\"banana\");\n\n        assertThrows(IllegalArgumentException.class, () -> comparator.compare(\"unknown\", \"apple\"));\n        assertThrows(IllegalArgumentException.class, () -> comparator.compare(\"apple\", \"unknown\"));\n    }\n\n    @Test\n    public void testCompareAfterLock() {\n        comparator.add(\"apple\");\n        comparator.add(\"banana\");\n        comparator.compare(\"apple\", \"banana\"); // This will lock the comparator\n\n        assertThrows(UnsupportedOperationException.class, () -> comparator.add(\"cherry\"));\n    }\n\n    @Test\n    public void testAddAsEqual() {\n        comparator.add(\"apple\");\n        comparator.add(\"banana\");\n        comparator.addAsEqual(\"apple\", \"apricot\");\n\n        assertEquals(0, comparator.compare(\"apple\", \"apricot\"));\n        assertEquals(-1, comparator.compare(\"apple\", \"banana\"));\n    }\n\n    @Test\n    public void testAddAsEqualUnknownObject() {\n        comparator.add(\"apple\");\n\n        assertThrows(IllegalArgumentException.class, () -> comparator.addAsEqual(\"unknown\", \"apricot\"));\n    }\n\n    @Test\n    public void testEquals() {\n        FixedOrderComparator<String> comparator1 = new FixedOrderComparator<>();\n        FixedOrderComparator<String> comparator2 = new FixedOrderComparator<>();\n\n        comparator1.add(\"apple\");\n        comparator1.add(\"banana\");\n        comparator2.add(\"apple\");\n        comparator2.add(\"banana\");\n\n        assertTrue(comparator1.equals(comparator2));\n        comparator2.add(\"cherry\");\n        assertFalse(comparator1.equals(comparator2));\n    }\n\n    @Test\n    public void testHashCode() {\n        FixedOrderComparator<String> comparator1 = new FixedOrderComparator<>();\n        FixedOrderComparator<String> comparator2 = new FixedOrderComparator<>();\n\n        comparator1.add(\"apple\");\n        comparator1.add(\"banana\");\n        comparator2.add(\"apple\");\n        comparator2.add(\"banana\");\n\n        assertEquals(comparator1.hashCode(), comparator2.hashCode());\n        comparator2.add(\"cherry\");\n        assertNotEquals(comparator1.hashCode(), comparator2.hashCode());\n    }\n}\n"}]