[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.iterators;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport java.util.ArrayList;\nimport java.util.NoSuchElementException;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class ZippingIterator_nextTest {\n    private ArrayList<Integer> evens;\n    private ArrayList<Integer> odds;\n    private ArrayList<Integer> fib;\n\n    @BeforeEach\n    public void setUp() throws Exception {\n        evens = new ArrayList<>();\n        odds = new ArrayList<>();\n        for (int i = 0; i < 20; i++) {\n            if (0 == i % 2) {\n                evens.add(i);\n            } else {\n                odds.add(i);\n            }\n        }\n        fib = new ArrayList<>();\n        fib.add(1);\n        fib.add(1);\n        fib.add(2);\n        fib.add(3);\n        fib.add(5);\n        fib.add(8);\n        fib.add(13);\n        fib.add(21);\n    }\n\n    @Test\n    public void testNextWithElements() {\n        final ZippingIterator<Integer> iter = new ZippingIterator<>(fib.iterator(), evens.iterator(), odds.iterator());\n\n        assertEquals(Integer.valueOf(1), iter.next());  // fib    1\n        assertEquals(Integer.valueOf(0), iter.next());  // even   0\n        assertEquals(Integer.valueOf(1), iter.next());  // odd    1\n        assertEquals(Integer.valueOf(1), iter.next());  // fib    1\n        assertEquals(Integer.valueOf(2), iter.next());  // even   2\n        assertEquals(Integer.valueOf(3), iter.next());  // odd    3\n        assertEquals(Integer.valueOf(2), iter.next());  // fib    2\n        assertEquals(Integer.valueOf(4), iter.next());  // even   4\n        assertEquals(Integer.valueOf(5), iter.next());  // odd    5\n        assertEquals(Integer.valueOf(3), iter.next());  // fib    3\n        assertEquals(Integer.valueOf(6), iter.next());  // even   6\n        assertEquals(Integer.valueOf(7), iter.next());  // odd    7\n        assertEquals(Integer.valueOf(5), iter.next());  // fib    5\n        assertEquals(Integer.valueOf(8), iter.next());  // even   8\n        assertEquals(Integer.valueOf(9), iter.next());  // odd    9\n        assertEquals(Integer.valueOf(8), iter.next());  // fib    8\n        assertEquals(Integer.valueOf(10), iter.next()); // even  10\n        assertEquals(Integer.valueOf(11), iter.next()); // odd   11\n        assertEquals(Integer.valueOf(13), iter.next()); // fib   13\n        assertEquals(Integer.valueOf(12), iter.next()); // even  12\n        assertEquals(Integer.valueOf(13), iter.next()); // odd   13\n        assertEquals(Integer.valueOf(21), iter.next()); // fib   21\n        assertEquals(Integer.valueOf(14), iter.next()); // even  14\n        assertEquals(Integer.valueOf(15), iter.next()); // odd   15\n        assertEquals(Integer.valueOf(16), iter.next()); // even  16\n        assertEquals(Integer.valueOf(17), iter.next()); // odd   17\n        assertEquals(Integer.valueOf(18), iter.next()); // even  18\n        assertEquals(Integer.valueOf(19), iter.next()); // odd   19\n    }\n\n    @Test\n    public void testNextWithoutElements() {\n        final ZippingIterator<Integer> iter = new ZippingIterator<>(new ArrayList<Integer>().iterator());\n        assertThrows(NoSuchElementException.class, () -> iter.next());\n    }\n}\n"}]