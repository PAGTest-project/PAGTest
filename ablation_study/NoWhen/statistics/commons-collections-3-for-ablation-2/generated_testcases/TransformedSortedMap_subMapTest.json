[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.map;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport java.util.SortedMap;\nimport java.util.TreeMap;\nimport org.apache.commons.collections4.Transformer;\nimport org.apache.commons.collections4.TransformerUtils;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class TransformedSortedMap_subMapTest {\n\n    private SortedMap<String, String> originalMap;\n    private Transformer<String, String> keyTransformer;\n    private Transformer<String, String> valueTransformer;\n\n    @BeforeEach\n    public void setUp() {\n        originalMap = new TreeMap<>();\n        originalMap.put(\"1\", \"one\");\n        originalMap.put(\"2\", \"two\");\n        originalMap.put(\"3\", \"three\");\n        originalMap.put(\"4\", \"four\");\n        originalMap.put(\"5\", \"five\");\n\n        keyTransformer = TransformerUtils.nopTransformer();\n        valueTransformer = TransformerUtils.nopTransformer();\n    }\n\n    @Test\n    public void testSubMap() {\n        TransformedSortedMap<String, String> transformedMap = TransformedSortedMap.transformingSortedMap(originalMap, keyTransformer, valueTransformer);\n\n        SortedMap<String, String> subMap = transformedMap.subMap(\"2\", \"4\");\n\n        assertEquals(2, subMap.size());\n        assertTrue(subMap.containsKey(\"2\"));\n        assertTrue(subMap.containsKey(\"3\"));\n        assertEquals(\"two\", subMap.get(\"2\"));\n        assertEquals(\"three\", subMap.get(\"3\"));\n    }\n\n    @Test\n    public void testSubMapWithNoTransformers() {\n        TransformedSortedMap<String, String> transformedMap = TransformedSortedMap.transformingSortedMap(originalMap, null, null);\n\n        SortedMap<String, String> subMap = transformedMap.subMap(\"2\", \"4\");\n\n        assertEquals(2, subMap.size());\n        assertTrue(subMap.containsKey(\"2\"));\n        assertTrue(subMap.containsKey(\"3\"));\n        assertEquals(\"two\", subMap.get(\"2\"));\n        assertEquals(\"three\", subMap.get(\"3\"));\n    }\n\n    @Test\n    public void testSubMapWithKeyTransformer() {\n        keyTransformer = TransformerUtils.stringValueTransformer();\n        TransformedSortedMap<String, String> transformedMap = TransformedSortedMap.transformingSortedMap(originalMap, keyTransformer, valueTransformer);\n\n        SortedMap<String, String> subMap = transformedMap.subMap(\"2\", \"4\");\n\n        assertEquals(2, subMap.size());\n        assertTrue(subMap.containsKey(\"2\"));\n        assertTrue(subMap.containsKey(\"3\"));\n        assertEquals(\"two\", subMap.get(\"2\"));\n        assertEquals(\"three\", subMap.get(\"3\"));\n    }\n\n    @Test\n    public void testSubMapWithValueTransformer() {\n        valueTransformer = TransformerUtils.stringValueTransformer();\n        TransformedSortedMap<String, String> transformedMap = TransformedSortedMap.transformingSortedMap(originalMap, keyTransformer, valueTransformer);\n\n        SortedMap<String, String> subMap = transformedMap.subMap(\"2\", \"4\");\n\n        assertEquals(2, subMap.size());\n        assertTrue(subMap.containsKey(\"2\"));\n        assertTrue(subMap.containsKey(\"3\"));\n        assertEquals(\"two\", subMap.get(\"2\"));\n        assertEquals(\"three\", subMap.get(\"3\"));\n    }\n}\n"}]