[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.map;\n\nimport org.apache.commons.collections4.keyvalue.MultiKey;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MultiKeyMap_putTest {\n\n    @Test\n    public void testPutNewEntry() {\n        MultiKeyMap<String, String> map = new MultiKeyMap<>();\n        String key1 = \"key1\";\n        String key2 = \"key2\";\n        String key3 = \"key3\";\n        String key4 = \"key4\";\n        String key5 = \"key5\";\n        String value = \"value\";\n\n        // Given: A new entry to be added\n        // When: put is called with new keys and value\n        String result = map.put(key1, key2, key3, key4, key5, value);\n\n        // Then: The result should be null (indicating a new entry)\n        assertNull(result);\n    }\n\n    @Test\n    public void testPutExistingEntry() {\n        MultiKeyMap<String, String> map = new MultiKeyMap<>();\n        String key1 = \"key1\";\n        String key2 = \"key2\";\n        String key3 = \"key3\";\n        String key4 = \"key4\";\n        String key5 = \"key5\";\n        String value1 = \"value1\";\n        String value2 = \"value2\";\n\n        // Given: An existing entry in the map\n        map.put(key1, key2, key3, key4, key5, value1);\n\n        // When: put is called with the same keys but a different value\n        String result = map.put(key1, key2, key3, key4, key5, value2);\n\n        // Then: The result should be the old value\n        assertEquals(value1, result);\n    }\n}\n"}]