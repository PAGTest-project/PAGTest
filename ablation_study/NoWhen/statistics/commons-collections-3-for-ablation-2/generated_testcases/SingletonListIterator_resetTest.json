[{"strategy": "retry", "code": "\npackage org.apache.commons.collections4.iterators;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\n\nimport java.util.NoSuchElementException;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class SingletonListIterator_resetTest {\n\n    private static final Object testValue = new Object();\n    private SingletonListIterator<Object> iterator;\n\n    @BeforeEach\n    public void setUp() {\n        iterator = new SingletonListIterator<>(testValue);\n    }\n\n    @Test\n    public void testResetInitialState() {\n        // Given\n        iterator.next();\n        iterator.previous();\n        iterator.reset();\n\n        // Then\n        assertTrue(iterator.hasNext(), \"Iterator should have next item after reset\");\n        assertFalse(iterator.hasPrevious(), \"Iterator should have no previous item after reset\");\n        assertEquals(0, iterator.nextIndex(), \"Iteration next index after reset\");\n        assertEquals(-1, iterator.previousIndex(), \"Iteration previous index after reset\");\n    }\n\n    @Test\n    public void testResetAfterRemove() {\n        // Given\n        iterator.next();\n        iterator.remove();\n        iterator.reset();\n\n        // Then\n        assertFalse(iterator.hasNext(), \"Iterator should have no next item after reset and remove\");\n        assertFalse(iterator.hasPrevious(), \"Iterator should have no previous item after reset\");\n        assertEquals(0, iterator.nextIndex(), \"Iteration next index after reset\");\n        assertEquals(-1, iterator.previousIndex(), \"Iteration previous index after reset\");\n    }\n\n    @Test\n    public void testResetAndNext() {\n        // Given\n        iterator.next();\n        iterator.reset();\n\n        // Then\n        assertEquals(testValue, iterator.next(), \"Next value should be correct after reset\");\n    }\n\n    @Test\n    public void testResetAndHasNext() {\n        // Given\n        iterator.next();\n        iterator.reset();\n\n        // Then\n        assertTrue(iterator.hasNext(), \"hasNext should return true after reset\");\n    }\n\n    @Test\n    public void testResetAndNextThrowsException() {\n        // Given\n        iterator.next();\n        iterator.remove();\n        iterator.reset();\n\n        // Then\n        assertThrows(NoSuchElementException.class, () -> {\n            iterator.next();\n        }, \"NoSuchElementException should be thrown after reset and next call\");\n    }\n}\n"}]