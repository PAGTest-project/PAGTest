[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4;\n\nimport org.apache.commons.collections4.functors.ConstantTransformer;\nimport org.apache.commons.collections4.functors.EqualPredicate;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\n\npublic class TransformerUtils_switchMapTransformerTest {\n\n    @Test\n    public void testSwitchMapTransformer_WithDefaultTransformer() {\n        // Given\n        Map<Integer, Transformer<Integer, String>> map = new HashMap<>();\n        map.put(1, ConstantTransformer.constantTransformer(\"One\"));\n        map.put(2, ConstantTransformer.constantTransformer(\"Two\"));\n        map.put(null, ConstantTransformer.constantTransformer(\"Default\"));\n\n        // When\n        Transformer<Integer, String> transformer = TransformerUtils.switchMapTransformer(map);\n\n        // Then\n        assertEquals(\"One\", transformer.transform(1));\n        assertEquals(\"Two\", transformer.transform(2));\n        assertEquals(\"Default\", transformer.transform(3));\n    }\n\n    @Test\n    public void testSwitchMapTransformer_WithoutDefaultTransformer() {\n        // Given\n        Map<Integer, Transformer<Integer, String>> map = new HashMap<>();\n        map.put(1, ConstantTransformer.constantTransformer(\"One\"));\n        map.put(2, ConstantTransformer.constantTransformer(\"Two\"));\n\n        // When\n        Transformer<Integer, String> transformer = TransformerUtils.switchMapTransformer(map);\n\n        // Then\n        assertEquals(\"One\", transformer.transform(1));\n        assertEquals(\"Two\", transformer.transform(2));\n        assertEquals(null, transformer.transform(3));\n    }\n\n    @Test\n    public void testSwitchMapTransformer_NullMap() {\n        // Given\n        Map<Integer, Transformer<Integer, String>> map = null;\n\n        // When & Then\n        assertThrows(NullPointerException.class, () -> {\n            TransformerUtils.switchMapTransformer(map);\n        });\n    }\n}\n"}]