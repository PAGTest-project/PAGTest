[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.map;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class PassiveExpiringMap_clearTest {\n\n    private PassiveExpiringMap<Integer, String> expiringMap;\n\n    @BeforeEach\n    public void setUp() {\n        expiringMap = new PassiveExpiringMap<>(-1L); // Entries never expire\n        expiringMap.put(1, \"One\");\n        expiringMap.put(2, \"Two\");\n        expiringMap.put(3, \"Three\");\n    }\n\n    @Test\n    public void testClear() {\n        expiringMap.clear();\n        assertEquals(0, expiringMap.size());\n        assertTrue(expiringMap.isEmpty());\n    }\n\n    @Test\n    public void testClearWithExpiredEntries() {\n        expiringMap = new PassiveExpiringMap<>(1L); // Entries expire after 1 millisecond\n        expiringMap.put(1, \"One\");\n        expiringMap.put(2, \"Two\");\n        expiringMap.put(3, \"Three\");\n\n        try {\n            Thread.sleep(2); // Wait for entries to expire\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        }\n\n        expiringMap.clear();\n        assertEquals(0, expiringMap.size());\n        assertTrue(expiringMap.isEmpty());\n    }\n\n    @Test\n    public void testClearWithNonExpiredEntries() {\n        expiringMap = new PassiveExpiringMap<>(1000L); // Entries expire after 1 second\n        expiringMap.put(1, \"One\");\n        expiringMap.put(2, \"Two\");\n        expiringMap.put(3, \"Three\");\n\n        expiringMap.clear();\n        assertEquals(0, expiringMap.size());\n        assertTrue(expiringMap.isEmpty());\n    }\n}\n"}]