[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.iterators;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\n\nimport java.util.NoSuchElementException;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class SingletonListIterator_previousTest {\n\n    private static final Object testValue = new Object();\n    private SingletonListIterator<Object> iterator;\n\n    @BeforeEach\n    public void setUp() {\n        iterator = new SingletonListIterator<>(testValue);\n    }\n\n    @Test\n    public void testPreviousSuccess() {\n        iterator.next();\n        assertEquals(testValue, iterator.previous(), \"Previous value should be the same as the initial value\");\n    }\n\n    @Test\n    public void testPreviousBeforeFirst() {\n        assertThrows(NoSuchElementException.class, () -> {\n            iterator.previous();\n        }, \"NoSuchElementException should be thrown if previous is called before first\");\n    }\n\n    @Test\n    public void testPreviousAfterRemove() {\n        iterator.next();\n        iterator.remove();\n        assertThrows(NoSuchElementException.class, () -> {\n            iterator.previous();\n        }, \"NoSuchElementException should be thrown if previous is called after remove\");\n    }\n\n    @Test\n    public void testPreviousAfterReset() {\n        iterator.next();\n        iterator.reset();\n        assertThrows(NoSuchElementException.class, () -> {\n            iterator.previous();\n        }, \"NoSuchElementException should be thrown if previous is called after reset\");\n    }\n}\n"}]