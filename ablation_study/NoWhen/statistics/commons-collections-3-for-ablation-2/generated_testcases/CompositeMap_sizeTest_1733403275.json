[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.map;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class CompositeMap_sizeTest {\n\n    private CompositeMap<String, String> compositeMap;\n    private Map<String, String> mapOne;\n    private Map<String, String> mapTwo;\n\n    @BeforeEach\n    public void setUp() {\n        mapOne = new HashMap<>();\n        mapOne.put(\"1\", \"one\");\n        mapOne.put(\"2\", \"two\");\n\n        mapTwo = new HashMap<>();\n        mapTwo.put(\"3\", \"three\");\n        mapTwo.put(\"4\", \"four\");\n\n        compositeMap = new CompositeMap<>(mapOne, mapTwo);\n    }\n\n    @Test\n    public void testSizeWithTwoMaps() {\n        assertEquals(4, compositeMap.size());\n    }\n\n    @Test\n    public void testSizeAfterAddingMap() {\n        Map<String, String> mapThree = new HashMap<>();\n        mapThree.put(\"5\", \"five\");\n        mapThree.put(\"6\", \"six\");\n\n        compositeMap.addComposited(mapThree);\n        assertEquals(6, compositeMap.size());\n    }\n\n    @Test\n    public void testSizeAfterRemovingMap() {\n        compositeMap.removeComposited(mapTwo);\n        assertEquals(2, compositeMap.size());\n    }\n\n    @Test\n    public void testSizeWithEmptyCompositeMap() {\n        CompositeMap<String, String> emptyCompositeMap = new CompositeMap<>();\n        assertEquals(0, emptyCompositeMap.size());\n    }\n\n    @Test\n    public void testSizeWithSingleMap() {\n        CompositeMap<String, String> singleMapComposite = new CompositeMap<>(mapOne);\n        assertEquals(2, singleMapComposite.size());\n    }\n\n    @Test\n    public void testSizeAfterClear() {\n        compositeMap.clear();\n        assertEquals(0, compositeMap.size());\n    }\n\n    @Test\n    public void testSizeAfterPartialClear() {\n        mapOne.clear();\n        assertEquals(2, compositeMap.size());\n    }\n\n    @Test\n    public void testSizeWithDuplicateKeys() {\n        Map<String, String> duplicateKeyMap = new HashMap<>();\n        duplicateKeyMap.put(\"1\", \"duplicateOne\");\n        compositeMap.addComposited(duplicateKeyMap);\n        assertEquals(4, compositeMap.size()); // Size should remain the same due to key collision\n    }\n}\n"}]