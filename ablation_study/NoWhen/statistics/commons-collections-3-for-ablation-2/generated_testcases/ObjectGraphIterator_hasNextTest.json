[{"strategy": "retry", "code": "\npackage org.apache.commons.collections4.iterators;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.NoSuchElementException;\n\nimport org.apache.commons.collections4.Transformer;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class ObjectGraphIterator_hasNextTest {\n    private List<String> list1;\n    private List<String> list2;\n    private List<String> list3;\n\n    @BeforeEach\n    public void setUp() {\n        list1 = new ArrayList<>();\n        list1.add(\"One\");\n        list1.add(\"Two\");\n        list1.add(\"Three\");\n        list2 = new ArrayList<>();\n        list2.add(\"Four\");\n        list3 = new ArrayList<>();\n        list3.add(\"Five\");\n        list3.add(\"Six\");\n    }\n\n    @Test\n    public void testHasNextWithRootIterator() {\n        final Iterator<String> rootIterator = list1.iterator();\n        final ObjectGraphIterator<String> iterator = new ObjectGraphIterator<>(rootIterator);\n\n        assertTrue(iterator.hasNext());\n        iterator.next();\n        assertTrue(iterator.hasNext());\n        iterator.next();\n        assertTrue(iterator.hasNext());\n        iterator.next();\n        assertFalse(iterator.hasNext());\n    }\n\n    @Test\n    public void testHasNextWithRootObject() {\n        final ObjectGraphIterator<String> iterator = new ObjectGraphIterator<>(list1.iterator());\n\n        assertTrue(iterator.hasNext());\n        iterator.next();\n        assertTrue(iterator.hasNext());\n        iterator.next();\n        assertTrue(iterator.hasNext());\n        iterator.next();\n        assertFalse(iterator.hasNext());\n    }\n\n    @Test\n    public void testHasNextWithEmptyIterator() {\n        final Iterator<String> emptyIterator = list2.iterator();\n        final ObjectGraphIterator<String> iterator = new ObjectGraphIterator<>(emptyIterator);\n\n        assertFalse(iterator.hasNext());\n    }\n\n    @Test\n    public void testHasNextWithNullRoot() {\n        final ObjectGraphIterator<String> iterator = new ObjectGraphIterator<>(null);\n\n        assertFalse(iterator.hasNext());\n    }\n\n    @Test\n    public void testHasNextWithTransformer() {\n        final Transformer<String, String> transformer = input -> input + \" Transformed\";\n        final ObjectGraphIterator<String> iterator = new ObjectGraphIterator<>(list1.iterator(), transformer);\n\n        assertTrue(iterator.hasNext());\n        iterator.next();\n        assertTrue(iterator.hasNext());\n        iterator.next();\n        assertTrue(iterator.hasNext());\n        iterator.next();\n        assertFalse(iterator.hasNext());\n    }\n\n    @Test\n    public void testHasNextWithNestedIterators() {\n        final List<Iterator<String>> iteratorList = new ArrayList<>();\n        iteratorList.add(list1.iterator());\n        iteratorList.add(list2.iterator());\n        iteratorList.add(list3.iterator());\n        final ObjectGraphIterator<String> iterator = new ObjectGraphIterator<>(iteratorList.iterator());\n\n        assertTrue(iterator.hasNext());\n        iterator.next();\n        assertTrue(iterator.hasNext());\n        iterator.next();\n        assertTrue(iterator.hasNext());\n        iterator.next();\n        assertTrue(iterator.hasNext());\n        iterator.next();\n        assertTrue(iterator.hasNext());\n        iterator.next();\n        assertTrue(iterator.hasNext());\n        iterator.next();\n        assertFalse(iterator.hasNext());\n    }\n}\n"}]