[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.iterators;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.NoSuchElementException;\n\nimport org.apache.commons.collections4.Transformer;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class ObjectGraphIterator_removeTest {\n\n    private List<String> list1;\n    private List<String> list2;\n    private List<String> list3;\n    private List<Iterator<String>> iteratorList;\n\n    @BeforeEach\n    public void setUp() {\n        list1 = new ArrayList<>();\n        list1.add(\"One\");\n        list1.add(\"Two\");\n        list1.add(\"Three\");\n        list2 = new ArrayList<>();\n        list2.add(\"Four\");\n        list3 = new ArrayList<>();\n        list3.add(\"Five\");\n        list3.add(\"Six\");\n        iteratorList = new ArrayList<>();\n        iteratorList.add(list1.iterator());\n        iteratorList.add(list2.iterator());\n        iteratorList.add(list3.iterator());\n    }\n\n    @Test\n    public void testRemoveWithoutNext() {\n        final Iterator<Object> it = new ObjectGraphIterator<>(iteratorList.iterator());\n\n        assertThrows(IllegalStateException.class, () -> it.remove());\n    }\n\n    @Test\n    public void testRemoveAfterNext() {\n        final Iterator<Object> it = new ObjectGraphIterator<>(iteratorList.iterator());\n\n        it.next(); // Move to the first element\n        it.remove(); // Remove the first element\n\n        // Verify that the first element is removed\n        assertFalse(list1.contains(\"One\"));\n    }\n\n    @Test\n    public void testRemoveTwice() {\n        final Iterator<Object> it = new ObjectGraphIterator<>(iteratorList.iterator());\n\n        it.next(); // Move to the first element\n        it.remove(); // Remove the first element\n\n        assertThrows(IllegalStateException.class, () -> it.remove());\n    }\n\n    @Test\n    public void testRemoveAfterEndOfIteration() {\n        final Iterator<Object> it = new ObjectGraphIterator<>(iteratorList.iterator());\n\n        // Iterate through all elements\n        while (it.hasNext()) {\n            it.next();\n        }\n\n        assertThrows(IllegalStateException.class, () -> it.remove());\n    }\n}\n"}]