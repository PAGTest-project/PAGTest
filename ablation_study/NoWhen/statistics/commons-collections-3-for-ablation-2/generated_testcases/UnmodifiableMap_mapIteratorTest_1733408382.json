[{"strategy": "retry", "code": "\npackage org.apache.commons.collections4.map;\n\nimport org.apache.commons.collections4.IterableMap;\nimport org.apache.commons.collections4.MapIterator;\nimport org.apache.commons.collections4.iterators.EntrySetMapIterator;\nimport org.apache.commons.collections4.iterators.UnmodifiableMapIterator;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\npublic class UnmodifiableMap_mapIteratorTest {\n\n    @Test\n    public void testMapIteratorWithIterableMap() {\n        // Given\n        Map<String, String> originalMap = new HashMap<>();\n        originalMap.put(\"key1\", \"value1\");\n        IterableMap<String, String> iterableMap = new IterableMap<String, String>() {\n            @Override\n            public MapIterator<String, String> mapIterator() {\n                return new EntrySetMapIterator<>(originalMap);\n            }\n\n            @Override\n            public String get(Object key) {\n                return originalMap.get(key);\n            }\n\n            @Override\n            public String put(String key, String value) {\n                return originalMap.put(key, value);\n            }\n\n            @Override\n            public String remove(Object key) {\n                return originalMap.remove(key);\n            }\n\n            @Override\n            public void putAll(Map<? extends String, ? extends String> m) {\n                originalMap.putAll(m);\n            }\n\n            @Override\n            public void clear() {\n                originalMap.clear();\n            }\n\n            @Override\n            public boolean containsKey(Object key) {\n                return originalMap.containsKey(key);\n            }\n\n            @Override\n            public boolean containsValue(Object value) {\n                return originalMap.containsValue(value);\n            }\n\n            @Override\n            public boolean isEmpty() {\n                return originalMap.isEmpty();\n            }\n\n            @Override\n            public int size() {\n                return originalMap.size();\n            }\n\n            @Override\n            public java.util.Set<String> keySet() {\n                return originalMap.keySet();\n            }\n\n            @Override\n            public java.util.Collection<String> values() {\n                return originalMap.values();\n            }\n\n            @Override\n            public java.util.Set<Entry<String, String>> entrySet() {\n                return originalMap.entrySet();\n            }\n        };\n\n        UnmodifiableMap<String, String> unmodifiableMap = new UnmodifiableMap<>(iterableMap);\n\n        // When\n        MapIterator<String, String> mapIterator = unmodifiableMap.mapIterator();\n\n        // Then\n        assertTrue(mapIterator instanceof UnmodifiableMapIterator);\n    }\n\n    @Test\n    public void testMapIteratorWithoutIterableMap() {\n        // Given\n        Map<String, String> originalMap = new HashMap<>();\n        originalMap.put(\"key1\", \"value1\");\n        UnmodifiableMap<String, String> unmodifiableMap = new UnmodifiableMap<>(originalMap);\n\n        // When\n        MapIterator<String, String> mapIterator = unmodifiableMap.mapIterator();\n\n        // Then\n        assertTrue(mapIterator instanceof UnmodifiableMapIterator);\n    }\n}\n"}]