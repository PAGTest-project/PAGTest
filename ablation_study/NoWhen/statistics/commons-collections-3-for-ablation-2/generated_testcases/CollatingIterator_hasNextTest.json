[{"strategy": "retry", "code": "\npackage org.apache.commons.collections4.iterators;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Iterator;\nimport java.util.List;\n\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\npublic class CollatingIterator_hasNextTest {\n\n    private CollatingIterator<Integer> collatingIterator;\n    private List<Iterator<Integer>> iterators;\n\n    @BeforeEach\n    public void setUp() {\n        collatingIterator = new CollatingIterator<>(Comparator.naturalOrder());\n        iterators = new ArrayList<>();\n    }\n\n    @Test\n    public void testHasNext_WithNoIterators() {\n        assertFalse(collatingIterator.hasNext());\n    }\n\n    @Test\n    public void testHasNext_WithEmptyIterators() {\n        iterators.add(Arrays.<Integer>asList().iterator());\n        iterators.add(Arrays.<Integer>asList().iterator());\n        iterators.forEach(collatingIterator::addIterator);\n        assertFalse(collatingIterator.hasNext());\n    }\n\n    @Test\n    public void testHasNext_WithNonEmptyIterators() {\n        iterators.add(Arrays.asList(1, 2).iterator());\n        iterators.add(Arrays.asList(3, 4).iterator());\n        iterators.forEach(collatingIterator::addIterator);\n        assertTrue(collatingIterator.hasNext());\n    }\n}\n"}]