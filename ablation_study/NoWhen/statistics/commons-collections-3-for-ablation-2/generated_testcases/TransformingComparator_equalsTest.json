[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.comparators;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.apache.commons.collections4.Transformer;\nimport org.apache.commons.collections4.TransformerUtils;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class TransformingComparator_equalsTest {\n\n    private Transformer<String, String> transformer;\n    private TransformingComparator<String, String> comparator1;\n    private TransformingComparator<String, String> comparator2;\n\n    @BeforeEach\n    public void setUp() {\n        transformer = TransformerUtils.nopTransformer();\n        comparator1 = new TransformingComparator<>(transformer);\n        comparator2 = new TransformingComparator<>(transformer);\n    }\n\n    @Test\n    public void testEqualsSameInstance() {\n        assertTrue(comparator1.equals(comparator1));\n    }\n\n    @Test\n    public void testEqualsNull() {\n        assertFalse(comparator1.equals(null));\n    }\n\n    @Test\n    public void testEqualsDifferentClass() {\n        assertFalse(comparator1.equals(\"Not a TransformingComparator\"));\n    }\n\n    @Test\n    public void testEqualsSameAttributes() {\n        assertTrue(comparator1.equals(comparator2));\n    }\n\n    @Test\n    public void testEqualsDifferentTransformer() {\n        Transformer<String, String> differentTransformer = TransformerUtils.constantTransformer(\"Different\");\n        TransformingComparator<String, String> differentComparator = new TransformingComparator<>(differentTransformer);\n        assertFalse(comparator1.equals(differentComparator));\n    }\n\n    @Test\n    public void testEqualsDifferentDecorated() {\n        TransformingComparator<String, String> differentComparator = new TransformingComparator<>(transformer, (o1, o2) -> o1.compareTo(o2));\n        assertFalse(comparator1.equals(differentComparator));\n    }\n}\n"}]