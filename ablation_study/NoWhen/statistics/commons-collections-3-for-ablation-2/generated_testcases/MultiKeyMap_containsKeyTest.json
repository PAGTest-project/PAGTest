[{"strategy": "retry", "code": "\npackage org.apache.commons.collections4.map;\n\nimport org.apache.commons.collections4.map.AbstractHashedMap.HashEntry;\nimport org.apache.commons.collections4.keyvalue.MultiKey;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\nclass MultiKeyMap_containsKeyTest {\n\n    @Test\n    void testContainsKey_KeyExists() {\n        // Given\n        MultiKeyMap<Object, Object> map = new MultiKeyMap<>();\n        Object key1 = new Object();\n        Object key2 = new Object();\n        int hashCode = map.hash(key1, key2);\n        HashEntry<MultiKey<? extends Object>, Object> entry = mock(HashEntry.class);\n        when(entry.hashCode()).thenReturn(hashCode);\n        when(entry.next()).thenReturn(null);\n        when(map.decorated().data).thenReturn(new HashEntry[]{entry});\n        when(map.decorated().hashIndex(hashCode, 1)).thenReturn(0);\n        when(map.isEqualKey(entry, key1, key2)).thenReturn(true);\n\n        // When\n        boolean result = map.containsKey(key1, key2);\n\n        // Then\n        assertTrue(result);\n    }\n\n    @Test\n    void testContainsKey_KeyDoesNotExist() {\n        // Given\n        MultiKeyMap<Object, Object> map = new MultiKeyMap<>();\n        Object key1 = new Object();\n        Object key2 = new Object();\n        int hashCode = map.hash(key1, key2);\n        HashEntry<MultiKey<? extends Object>, Object> entry = mock(HashEntry.class);\n        when(entry.hashCode()).thenReturn(hashCode + 1); // Different hash code\n        when(entry.next()).thenReturn(null);\n        when(map.decorated().data).thenReturn(new HashEntry[]{entry});\n        when(map.decorated().hashIndex(hashCode, 1)).thenReturn(0);\n        when(map.isEqualKey(entry, key1, key2)).thenReturn(false);\n\n        // When\n        boolean result = map.containsKey(key1, key2);\n\n        // Then\n        assertFalse(result);\n    }\n}\n"}]