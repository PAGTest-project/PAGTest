[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.map;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Set;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class CompositeMap_keySetTest {\n\n    private CompositeMap<String, String> compositeMap;\n    private Map<String, String> mapOne;\n    private Map<String, String> mapTwo;\n\n    @BeforeEach\n    public void setUp() {\n        mapOne = new HashMap<>();\n        mapOne.put(\"1\", \"one\");\n        mapOne.put(\"2\", \"two\");\n\n        mapTwo = new HashMap<>();\n        mapTwo.put(\"3\", \"three\");\n        mapTwo.put(\"4\", \"four\");\n\n        compositeMap = new CompositeMap<>(mapOne, mapTwo);\n    }\n\n    @Test\n    public void testKeySet() {\n        Set<String> keySet = compositeMap.keySet();\n\n        // Verify that the keySet contains all keys from both maps\n        assertTrue(keySet.contains(\"1\"));\n        assertTrue(keySet.contains(\"2\"));\n        assertTrue(keySet.contains(\"3\"));\n        assertTrue(keySet.contains(\"4\"));\n\n        // Verify the size of the keySet\n        assertEquals(4, keySet.size());\n    }\n\n    @Test\n    public void testKeySetAfterAddComposited() {\n        Map<String, String> mapThree = new HashMap<>();\n        mapThree.put(\"5\", \"five\");\n        mapThree.put(\"6\", \"six\");\n\n        compositeMap.addComposited(mapThree);\n        Set<String> keySet = compositeMap.keySet();\n\n        // Verify that the keySet contains all keys from all three maps\n        assertTrue(keySet.contains(\"1\"));\n        assertTrue(keySet.contains(\"2\"));\n        assertTrue(keySet.contains(\"3\"));\n        assertTrue(keySet.contains(\"4\"));\n        assertTrue(keySet.contains(\"5\"));\n        assertTrue(keySet.contains(\"6\"));\n\n        // Verify the size of the keySet\n        assertEquals(6, keySet.size());\n    }\n\n    @Test\n    public void testKeySetAfterRemoveComposited() {\n        compositeMap.removeComposited(mapTwo);\n        Set<String> keySet = compositeMap.keySet();\n\n        // Verify that the keySet contains only keys from mapOne\n        assertTrue(keySet.contains(\"1\"));\n        assertTrue(keySet.contains(\"2\"));\n        assertFalse(keySet.contains(\"3\"));\n        assertFalse(keySet.contains(\"4\"));\n\n        // Verify the size of the keySet\n        assertEquals(2, keySet.size());\n    }\n\n    @Test\n    public void testKeySetWithEmptyCompositeMap() {\n        CompositeMap<String, String> emptyMap = new CompositeMap<>();\n        Set<String> keySet = emptyMap.keySet();\n\n        // Verify that the keySet is empty\n        assertTrue(keySet.isEmpty());\n    }\n\n    @Test\n    public void testKeySetWithNullAddComposited() {\n        assertThrows(IllegalArgumentException.class, () -> compositeMap.addComposited(null));\n    }\n}\n"}]