[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.map;\n\nimport static org.junit.jupiter.api.Assertions.assertAll;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class ListOrderedMap_putAllTest {\n\n    private ListOrderedMap<String, String> listOrderedMap;\n\n    @BeforeEach\n    public void setUp() {\n        listOrderedMap = new ListOrderedMap<>();\n    }\n\n    @Test\n    public void testPutAllAtIndexValid() {\n        Map<String, String> map = new HashMap<>();\n        map.put(\"key1\", \"value1\");\n        map.put(\"key2\", \"value2\");\n\n        listOrderedMap.putAll(0, map);\n\n        assertAll(\"Check map contents\",\n            () -> assertEquals(\"value1\", listOrderedMap.get(\"key1\")),\n            () -> assertEquals(\"value2\", listOrderedMap.get(\"key2\")),\n            () -> assertEquals(2, listOrderedMap.size())\n        );\n    }\n\n    @Test\n    public void testPutAllAtIndexInvalid() {\n        Map<String, String> map = new HashMap<>();\n        map.put(\"key1\", \"value1\");\n        map.put(\"key2\", \"value2\");\n\n        assertThrows(IndexOutOfBoundsException.class, () -> listOrderedMap.putAll(-1, map));\n        assertThrows(IndexOutOfBoundsException.class, () -> listOrderedMap.putAll(1, map));\n    }\n\n    @Test\n    public void testPutAllAtIndexWithExistingKeys() {\n        listOrderedMap.put(\"key1\", \"value1\");\n        listOrderedMap.put(\"key2\", \"value2\");\n\n        Map<String, String> map = new HashMap<>();\n        map.put(\"key1\", \"newValue1\");\n        map.put(\"key3\", \"value3\");\n\n        listOrderedMap.putAll(1, map);\n\n        assertAll(\"Check map contents\",\n            () -> assertEquals(\"newValue1\", listOrderedMap.get(\"key1\")),\n            () -> assertEquals(\"value2\", listOrderedMap.get(\"key2\")),\n            () -> assertEquals(\"value3\", listOrderedMap.get(\"key3\")),\n            () -> assertEquals(3, listOrderedMap.size())\n        );\n    }\n\n    @Test\n    public void testPutAllAtIndexEmptyMap() {\n        Map<String, String> map = new HashMap<>();\n\n        listOrderedMap.putAll(0, map);\n\n        assertTrue(listOrderedMap.isEmpty());\n    }\n}\n"}]