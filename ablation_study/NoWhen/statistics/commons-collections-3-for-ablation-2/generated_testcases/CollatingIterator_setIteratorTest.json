[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.iterators;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Iterator;\nimport java.util.List;\n\nimport org.apache.commons.collections4.comparators.ComparableComparator;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class CollatingIterator_setIteratorTest {\n\n    private Comparator<Integer> comparator;\n    private List<Integer> evens;\n    private List<Integer> odds;\n\n    @BeforeEach\n    public void setUp() throws Exception {\n        comparator = new ComparableComparator<>();\n        evens = new ArrayList<>();\n        odds = new ArrayList<>();\n        for (int i = 0; i < 20; i++) {\n            if (0 == i % 2) {\n                evens.add(i);\n            } else {\n                odds.add(i);\n            }\n        }\n    }\n\n    @Test\n    public void testSetIteratorValid() {\n        CollatingIterator<Integer> collatingIterator = new CollatingIterator<>(comparator);\n        collatingIterator.addIterator(odds.iterator());\n        collatingIterator.addIterator(evens.iterator());\n\n        Iterator<Integer> newIterator = Arrays.asList(20, 22, 24).iterator();\n        collatingIterator.setIterator(1, newIterator);\n\n        List<Iterator<? extends Integer>> iterators = collatingIterator.getIterators();\n        assertSame(newIterator, iterators.get(1));\n    }\n\n    @Test\n    public void testSetIteratorNull() {\n        CollatingIterator<Integer> collatingIterator = new CollatingIterator<>(comparator);\n        collatingIterator.addIterator(odds.iterator());\n        collatingIterator.addIterator(evens.iterator());\n\n        assertThrows(NullPointerException.class, () -> {\n            collatingIterator.setIterator(1, null);\n        });\n    }\n\n    @Test\n    public void testSetIteratorIndexOutOfBounds() {\n        CollatingIterator<Integer> collatingIterator = new CollatingIterator<>(comparator);\n        collatingIterator.addIterator(odds.iterator());\n        collatingIterator.addIterator(evens.iterator());\n\n        Iterator<Integer> newIterator = Arrays.asList(20, 22, 24).iterator();\n        assertThrows(IndexOutOfBoundsException.class, () -> {\n            collatingIterator.setIterator(2, newIterator);\n        });\n    }\n\n    @Test\n    public void testSetIteratorAfterStart() {\n        CollatingIterator<Integer> collatingIterator = new CollatingIterator<>(comparator);\n        collatingIterator.addIterator(odds.iterator());\n        collatingIterator.addIterator(evens.iterator());\n\n        collatingIterator.hasNext(); // Start iteration\n\n        Iterator<Integer> newIterator = Arrays.asList(20, 22, 24).iterator();\n        assertThrows(IllegalStateException.class, () -> {\n            collatingIterator.setIterator(1, newIterator);\n        });\n    }\n}\n"}]