[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.iterators;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.NoSuchElementException;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class PeekingIterator_nextTest {\n\n    private List<String> testList;\n    private static final String[] testArray = {\"a\", \"b\", \"c\"};\n\n    @SuppressWarnings(\"unchecked\")\n    @BeforeEach\n    protected void setUp() throws Exception {\n        testList = new ArrayList<>(Arrays.asList((String[]) testArray));\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    private PeekingIterator<String> makeObject() {\n        return new PeekingIterator<>(testList.iterator());\n    }\n\n    private void validate(Iterator<String> iter, String... items) {\n        for (String item : items) {\n            assertTrue(iter.hasNext());\n            assertEquals(item, iter.next());\n        }\n        assertFalse(iter.hasNext());\n    }\n\n    @Test\n    public void testNextWithPeek() {\n        PeekingIterator<String> it = makeObject();\n        assertEquals(\"a\", it.peek());\n        assertEquals(\"a\", it.next());\n        assertEquals(\"b\", it.peek());\n        assertEquals(\"b\", it.next());\n        assertEquals(\"c\", it.peek());\n        assertEquals(\"c\", it.next());\n        assertFalse(it.hasNext());\n    }\n\n    @Test\n    public void testNextWithoutPeek() {\n        PeekingIterator<String> it = makeObject();\n        assertEquals(\"a\", it.next());\n        assertEquals(\"b\", it.next());\n        assertEquals(\"c\", it.next());\n        assertFalse(it.hasNext());\n    }\n\n    @Test\n    public void testNextThrowsNoSuchElementException() {\n        PeekingIterator<String> it = makeObject();\n        it.next();\n        it.next();\n        it.next();\n        assertThrows(NoSuchElementException.class, () -> it.next());\n    }\n\n    @Test\n    public void testNextAfterExhausted() {\n        PeekingIterator<String> it = makeObject();\n        it.next();\n        it.next();\n        it.next();\n        assertFalse(it.hasNext());\n        assertThrows(NoSuchElementException.class, () -> it.next());\n    }\n}\n"}]