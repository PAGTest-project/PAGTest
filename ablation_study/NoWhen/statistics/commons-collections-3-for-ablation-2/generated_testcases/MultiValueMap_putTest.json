[{"strategy": "retry", "code": "\npackage org.apache.commons.collections4.map;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Map;\nimport org.apache.commons.collections4.Factory;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class MultiValueMap_putTest {\n\n    private MultiValueMap<String, String> multiValueMap;\n\n    @BeforeEach\n    public void setUp() {\n        multiValueMap = new MultiValueMap<>();\n    }\n\n    @Test\n    public void testPut_NewKey() {\n        String key = \"key1\";\n        String value = \"value1\";\n\n        Object result = multiValueMap.put(key, value);\n\n        assertEquals(value, result);\n        assertTrue(multiValueMap.containsValue(key, value));\n        assertEquals(1, multiValueMap.size(key));\n    }\n\n    @Test\n    public void testPut_ExistingKey() {\n        String key = \"key1\";\n        String value1 = \"value1\";\n        String value2 = \"value2\";\n\n        multiValueMap.put(key, value1);\n        Object result = multiValueMap.put(key, value2);\n\n        assertEquals(value2, result);\n        assertTrue(multiValueMap.containsValue(key, value1));\n        assertTrue(multiValueMap.containsValue(key, value2));\n        assertEquals(2, multiValueMap.size(key));\n    }\n\n    @Test\n    public void testPut_NullValue() {\n        String key = \"key1\";\n        String value = null;\n\n        Object result = multiValueMap.put(key, value);\n\n        assertNull(result);\n        assertFalse(multiValueMap.containsValue(key, value));\n        assertEquals(0, multiValueMap.size(key));\n    }\n\n    @Test\n    public void testPut_EmptyCollection() {\n        String key = \"key1\";\n        String value = \"value1\";\n\n        // Mocking createCollection to return an empty collection\n        MultiValueMap<String, String> map = new MultiValueMap<String, String>(new HashMap<>(), new Factory<Collection<String>>() {\n            @Override\n            public Collection<String> create() {\n                return new ArrayList<>();\n            }\n        }) {\n            @Override\n            protected Collection<String> createCollection(int size) {\n                return new ArrayList<>();\n            }\n        };\n\n        Object result = map.put(key, value);\n\n        assertNull(result);\n        assertFalse(map.containsValue(key, value));\n        assertEquals(0, map.size(key));\n    }\n\n    @Test\n    public void testPut_MultipleValues() {\n        String key = \"key1\";\n        String value1 = \"value1\";\n        String value2 = \"value2\";\n        String value3 = \"value3\";\n\n        multiValueMap.put(key, value1);\n        multiValueMap.put(key, value2);\n        multiValueMap.put(key, value3);\n\n        assertTrue(multiValueMap.containsValue(key, value1));\n        assertTrue(multiValueMap.containsValue(key, value2));\n        assertTrue(multiValueMap.containsValue(key, value3));\n        assertEquals(3, multiValueMap.size(key));\n    }\n}\n"}]