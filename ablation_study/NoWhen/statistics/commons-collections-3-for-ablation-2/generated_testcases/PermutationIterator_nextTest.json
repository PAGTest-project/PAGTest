[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.iterators;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.NoSuchElementException;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class PermutationIterator_nextTest {\n\n    private PermutationIterator<Character> permutationIterator;\n\n    @BeforeEach\n    public void setUp() {\n        permutationIterator = new PermutationIterator<>(Arrays.asList('A', 'B', 'C'));\n    }\n\n    @Test\n    public void testNextPermutationSuccess() {\n        List<Character> expectedPermutation = Arrays.asList('A', 'B', 'C');\n        assertEquals(expectedPermutation, permutationIterator.next());\n    }\n\n    @Test\n    public void testNextPermutationNoSuchElementException() {\n        // Consume all permutations\n        while (permutationIterator.hasNext()) {\n            permutationIterator.next();\n        }\n        assertThrows(NoSuchElementException.class, () -> {\n            permutationIterator.next();\n        });\n    }\n\n    @Test\n    public void testNextPermutationMultipleCalls() {\n        List<Character> expectedPermutation1 = Arrays.asList('A', 'B', 'C');\n        List<Character> expectedPermutation2 = Arrays.asList('A', 'C', 'B');\n        assertEquals(expectedPermutation1, permutationIterator.next());\n        assertEquals(expectedPermutation2, permutationIterator.next());\n    }\n\n    @Test\n    public void testNextPermutationHasNextValidation() {\n        assertTrue(permutationIterator.hasNext());\n        permutationIterator.next();\n        assertTrue(permutationIterator.hasNext());\n    }\n}\n"}]