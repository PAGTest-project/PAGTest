[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.collection;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.List;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class CompositeCollection_iteratorTest {\n\n    private CompositeCollection<String> c;\n    private Collection<String> one;\n    private Collection<String> two;\n\n    @BeforeEach\n    public void setUp() {\n        c = new CompositeCollection<>();\n        one = new HashSet<>(Arrays.asList(\"a\", \"b\"));\n        two = new HashSet<>(Arrays.asList(\"c\", \"d\"));\n    }\n\n    @Test\n    public void testIteratorWithEmptyCompositeCollection() {\n        Iterator<String> iterator = c.iterator();\n        assertFalse(iterator.hasNext());\n    }\n\n    @Test\n    public void testIteratorWithSingleCollection() {\n        c.addComposited(one);\n        Iterator<String> iterator = c.iterator();\n        List<String> result = new ArrayList<>();\n        iterator.forEachRemaining(result::add);\n        assertEquals(one, new HashSet<>(result));\n    }\n\n    @Test\n    public void testIteratorWithMultipleCollections() {\n        c.addComposited(one);\n        c.addComposited(two);\n        Iterator<String> iterator = c.iterator();\n        List<String> result = new ArrayList<>();\n        iterator.forEachRemaining(result::add);\n        assertEquals(new HashSet<>(Arrays.asList(\"a\", \"b\", \"c\", \"d\")), new HashSet<>(result));\n    }\n\n    @Test\n    public void testIteratorAfterRemovingCollection() {\n        c.addComposited(one);\n        c.addComposited(two);\n        c.removeComposited(two);\n        Iterator<String> iterator = c.iterator();\n        List<String> result = new ArrayList<>();\n        iterator.forEachRemaining(result::add);\n        assertEquals(one, new HashSet<>(result));\n    }\n}\n"}]