[{"strategy": "retry", "code": "\npackage org.apache.commons.collections4.functors;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\nimport java.util.Comparator;\n\npublic class ComparatorPredicate_testTest {\n\n    @Test\n    public void testComparatorPredicate() {\n        // Given\n        Comparator<Integer> comparator = mock(Comparator.class);\n        when(comparator.compare(anyInt(), anyInt())).thenReturn(0);\n\n        ComparatorPredicate<Integer> predicate = new ComparatorPredicate<>(1, comparator, ComparatorPredicate.Criterion.EQUAL);\n\n        // When\n        boolean result = predicate.test(1);\n\n        // Then\n        assertTrue(result);\n    }\n\n    @Test\n    public void testComparatorPredicateGreater() {\n        // Given\n        Comparator<Integer> comparator = mock(Comparator.class);\n        when(comparator.compare(anyInt(), anyInt())).thenReturn(1);\n\n        ComparatorPredicate<Integer> predicate = new ComparatorPredicate<>(1, comparator, ComparatorPredicate.Criterion.GREATER);\n\n        // When\n        boolean result = predicate.test(0);\n\n        // Then\n        assertTrue(result);\n    }\n\n    @Test\n    public void testComparatorPredicateLess() {\n        // Given\n        Comparator<Integer> comparator = mock(Comparator.class);\n        when(comparator.compare(anyInt(), anyInt())).thenReturn(-1);\n\n        ComparatorPredicate<Integer> predicate = new ComparatorPredicate<>(1, comparator, ComparatorPredicate.Criterion.LESS);\n\n        // When\n        boolean result = predicate.test(2);\n\n        // Then\n        assertTrue(result);\n    }\n\n    @Test\n    public void testComparatorPredicateGreaterOrEqual() {\n        // Given\n        Comparator<Integer> comparator = mock(Comparator.class);\n        when(comparator.compare(anyInt(), anyInt())).thenReturn(0);\n\n        ComparatorPredicate<Integer> predicate = new ComparatorPredicate<>(1, comparator, ComparatorPredicate.Criterion.GREATER_OR_EQUAL);\n\n        // When\n        boolean result = predicate.test(1);\n\n        // Then\n        assertTrue(result);\n    }\n\n    @Test\n    public void testComparatorPredicateLessOrEqual() {\n        // Given\n        Comparator<Integer> comparator = mock(Comparator.class);\n        when(comparator.compare(anyInt(), anyInt())).thenReturn(0);\n\n        ComparatorPredicate<Integer> predicate = new ComparatorPredicate<>(1, comparator, ComparatorPredicate.Criterion.LESS_OR_EQUAL);\n\n        // When\n        boolean result = predicate.test(1);\n\n        // Then\n        assertTrue(result);\n    }\n\n    @Test\n    public void testComparatorPredicateInvalidCriterion() {\n        // Given\n        Comparator<Integer> comparator = mock(Comparator.class);\n        when(comparator.compare(anyInt(), anyInt())).thenReturn(0);\n\n        ComparatorPredicate<Integer> predicate = new ComparatorPredicate<>(1, comparator, null);\n\n        // When & Then\n        assertThrows(IllegalStateException.class, () -> predicate.test(1));\n    }\n}\n"}]