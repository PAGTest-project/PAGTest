[{"strategy": "retry", "code": "\npackage org.apache.commons.collections4;\n\nimport org.junit.jupiter.api.Test;\nimport java.util.Arrays;\nimport java.util.Iterator;\nimport java.util.function.Predicate;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class IteratorUtils_filteredIteratorTest {\n\n    @Test\n    public void testFilteredIterator() {\n        // Given\n        Iterator<Integer> iterator = Arrays.asList(1, 2, 3, 4, 5).iterator();\n        Predicate<Integer> predicate = n -> n % 2 == 0;\n\n        // When\n        Iterator<Integer> filteredIterator = IteratorUtils.filteredIterator(iterator, new org.apache.commons.collections4.Predicate<Integer>() {\n            @Override\n            public boolean evaluate(Integer n) {\n                return predicate.test(n);\n            }\n        });\n\n        // Then\n        assertTrue(filteredIterator.hasNext());\n        assertEquals(2, filteredIterator.next());\n        assertTrue(filteredIterator.hasNext());\n        assertEquals(4, filteredIterator.next());\n        assertFalse(filteredIterator.hasNext());\n    }\n\n    @Test\n    public void testFilteredIteratorWithNullIterator() {\n        // Given\n        Iterator<Integer> iterator = null;\n        Predicate<Integer> predicate = n -> n % 2 == 0;\n\n        // When & Then\n        assertThrows(NullPointerException.class, () -> IteratorUtils.filteredIterator(iterator, new org.apache.commons.collections4.Predicate<Integer>() {\n            @Override\n            public boolean evaluate(Integer n) {\n                return predicate.test(n);\n            }\n        }));\n    }\n\n    @Test\n    public void testFilteredIteratorWithNullPredicate() {\n        // Given\n        Iterator<Integer> iterator = Arrays.asList(1, 2, 3, 4, 5).iterator();\n        Predicate<Integer> predicate = null;\n\n        // When & Then\n        assertThrows(NullPointerException.class, () -> IteratorUtils.filteredIterator(iterator, new org.apache.commons.collections4.Predicate<Integer>() {\n            @Override\n            public boolean evaluate(Integer n) {\n                return predicate.test(n);\n            }\n        }));\n    }\n}\n"}]