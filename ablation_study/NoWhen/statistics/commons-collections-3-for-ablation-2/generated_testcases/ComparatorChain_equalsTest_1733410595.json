[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.comparators;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.util.ArrayList;\nimport java.util.BitSet;\nimport java.util.Comparator;\nimport java.util.List;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ComparatorChain_equalsTest {\n\n    private ComparatorChain<Integer> chain1;\n    private ComparatorChain<Integer> chain2;\n    private ComparatorChain<Integer> chain3;\n\n    @BeforeEach\n    public void setUp() {\n        chain1 = new ComparatorChain<>();\n        chain2 = new ComparatorChain<>(new ComparableComparator<>(), false);\n        chain3 = new ComparatorChain<>(new ArrayList<>(), new BitSet());\n    }\n\n    @Test\n    public void testEqualsSameInstance() {\n        assertTrue(chain1.equals(chain1), \"An instance should be equal to itself\");\n    }\n\n    @Test\n    public void testEqualsNull() {\n        assertFalse(chain1.equals(null), \"An instance should not be equal to null\");\n    }\n\n    @Test\n    public void testEqualsDifferentClass() {\n        assertFalse(chain1.equals(\"Not a ComparatorChain\"), \"An instance should not be equal to an object of a different class\");\n    }\n\n    @Test\n    public void testEqualsSameState() {\n        ComparatorChain<Integer> chain4 = new ComparatorChain<>(new ComparableComparator<>(), false);\n        assertTrue(chain2.equals(chain4), \"Two instances with the same state should be equal\");\n    }\n\n    @Test\n    public void testEqualsDifferentState() {\n        ComparatorChain<Integer> chain4 = new ComparatorChain<>(new ComparableComparator<>(), true);\n        assertFalse(chain2.equals(chain4), \"Two instances with different states should not be equal\");\n    }\n\n    @Test\n    public void testEqualsDifferentComparatorChain() {\n        List<Comparator<Integer>> comparators = new ArrayList<>();\n        comparators.add(new ComparableComparator<>());\n        BitSet bits = new BitSet();\n        bits.set(0);\n        ComparatorChain<Integer> chain4 = new ComparatorChain<>(comparators, bits);\n        assertFalse(chain2.equals(chain4), \"Two instances with different comparator chains should not be equal\");\n    }\n\n    @Test\n    public void testEqualsDifferentOrderingBits() {\n        List<Comparator<Integer>> comparators = new ArrayList<>();\n        comparators.add(new ComparableComparator<>());\n        BitSet bits = new BitSet();\n        bits.set(0);\n        ComparatorChain<Integer> chain4 = new ComparatorChain<>(comparators, bits);\n        assertFalse(chain2.equals(chain4), \"Two instances with different ordering bits should not be equal\");\n    }\n}\n"}]