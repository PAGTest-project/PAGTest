[{"file_path": "src/test/java/com/binance/connector/client/utils/ParameterChecker_checkRequiredParameterTest.java", "testclass_name": "ParameterChecker_checkRequiredParameterTest", "dependencies": ["package com.binance.connector.client.utils;", "import static org.junit.Assert.assertThrows;", "import org.junit.Test;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import java.util.HashMap;", "import java.util.Map;"], "name": "ParameterChecker_checkRequiredParameterTest", "description": "Unit tests for the ParameterChecker.checkRequiredParameter method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testCheckRequiredParameterPresent", "primary_tested": ["ParameterChecker.checkRequiredParameter(Map<String,Object>,String)"], "external_dependencies": {"modules": ["ParameterChecker", "HashMap", "Map"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the ParameterChecker.checkRequiredParameter method does not throw an exception when the required parameter is present."}, {"name": "testCheckRequiredParameterMissing", "primary_tested": ["ParameterChecker.checkRequiredParameter(Map<String,Object>,String)"], "external_dependencies": {"modules": ["ParameterChecker", "HashMap", "Map", "BinanceConnectorException"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the ParameterChecker.checkRequiredParameter method throws a BinanceConnectorException when the required parameter is missing."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_setLockedAutoSubscribeTest.java", "testclass_name": "SimpleEarn_setLockedAutoSubscribeTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "SimpleEarn_setLockedAutoSubscribeTest", "description": "Test for setting locked auto-subscribe functionality in the SimpleEarn module.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testSetLockedAutoSubscribe", "primary_tested": ["SimpleEarn.setLockedAutoSubscribe(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.API_KEY", "MockData.SECRET_KEY", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the functionality of setting locked auto-subscribe in the SimpleEarn module."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_setFlexibleAutoSubscribeTest.java", "testclass_name": "SimpleEarn_setFlexibleAutoSubscribeTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "SimpleEarn_setFlexibleAutoSubscribeTest", "description": "Test for setting flexible auto-subscribe functionality in the SimpleEarn module.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testSetFlexibleAutoSubscribe", "primary_tested": ["SimpleEarn.setFlexibleAutoSubscribe(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the functionality of setting flexible auto-subscribe in the SimpleEarn module."}]}, {"file_path": "src/test/java/com/binance/connector/client/utils/JSONParser_sortJSONObjectTest.java", "testclass_name": "JSONParser_sortJSONObjectTest", "dependencies": ["package com.binance.connector.client.utils;", "import org.json.JSONObject;", "import org.junit.Test;", "import java.util.Map;", "import static org.junit.Assert.assertEquals;"], "name": "JSONParser_sortJSONObjectTest", "description": "Unit tests for the JSONParser.sortJSONObject method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testSortJSONObject", "primary_tested": ["JSONParser.sortJSONObject(JSONObject)"], "external_dependencies": {"modules": ["JSONObject", "JSONParser"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the sorting functionality of the JSONParser.sortJSONObject method with multiple keys."}, {"name": "testSortJSONObjectWithEmptyObject", "primary_tested": ["JSONParser.sortJSONObject(JSONObject)"], "external_dependencies": {"modules": ["JSONObject", "JSONParser"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the sorting functionality of the JSONParser.sortJSONObject method with an empty JSONObject."}, {"name": "testSortJSONObjectWithSingleKey", "primary_tested": ["JSONParser.sortJSONObject(JSONObject)"], "external_dependencies": {"modules": ["JSONObject", "JSONParser"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the sorting functionality of the JSONParser.sortJSONObject method with a single key."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Wallet_cloudMiningHistoryTest.java", "testclass_name": "Wallet_cloudMiningHistoryTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Wallet_cloudMiningHistoryTest", "description": "Test suite for the cloud mining history functionality in the Wallet module of the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testCloudMiningHistory", "primary_tested": ["Wallet.cloudMiningHistory(Map<String,Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the cloud mining history functionality of the Wallet module by querying ledger transfers within a specified time range."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_subscribeLockedProductTest.java", "testclass_name": "SimpleEarn_subscribeLockedProductTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "SimpleEarn_subscribeLockedProductTest", "description": "Test suite for subscribing to a locked product using the SimpleEarn API.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "amount", "type": "static final double"}]}, "fixtures": ["init"], "test_cases": [{"name": "testSubscribeLockedProduct", "primary_tested": ["SimpleEarn.subscribeLockedProduct(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "amount", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the subscription to a locked product using the SimpleEarn API."}]}, {"file_path": "src/test/java/com/binance/connector/client/utils/JSONParser_addKeyValueTest.java", "testclass_name": "JSONParser_addKeyValueTest", "dependencies": ["package com.binance.connector.client.utils;", "import org.json.JSONObject;", "import org.junit.Test;", "import static org.junit.Assert.*;"], "name": "JSONParser_addKeyValueTest", "description": "Unit tests for the addKeyValue method in the JSONParser class.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testAddKeyValueWithNullParameters", "primary_tested": ["JSONParser.addKeyValue(JSONObject,String,String)"], "external_dependencies": {"modules": ["JSONParser", "JSONObject"]}, "category": "unit", "description": "Tests the addKeyValue method with null parameters."}, {"name": "testAddKeyValueWithExistingParameters", "primary_tested": ["JSONParser.addKeyValue(JSONObject,String,String)"], "external_dependencies": {"modules": ["JSONParser", "JSONObject"]}, "category": "unit", "description": "Tests the addKeyValue method with existing parameters."}, {"name": "testAddKeyValueWithNullValue", "primary_tested": ["JSONParser.addKeyValue(JSONObject,String,String)"], "external_dependencies": {"modules": ["JSONParser", "JSONObject"]}, "category": "unit", "description": "Tests the addKeyValue method with a null value."}, {"name": "testAddKeyValueWithExistingKey", "primary_tested": ["JSONParser.addKeyValue(JSONObject,String,String)"], "external_dependencies": {"modules": ["JSONParser", "JSONObject"]}, "category": "unit", "description": "Tests the addKeyValue method with an existing key."}]}, {"file_path": "src/test/java/com/binance/connector/client/utils/ParameterChecker_checkOnlyOneOfParametersTest.java", "testclass_name": "ParameterChecker_checkOnlyOneOfParametersTest", "dependencies": ["package com.binance.connector.client.utils;", "import static org.junit.Assert.assertThrows;", "import org.json.JSONObject;", "import org.junit.Test;", "import com.binance.connector.client.exceptions.BinanceConnectorException;"], "name": "ParameterChecker_checkOnlyOneOfParametersTest", "description": "Unit tests for the ParameterChecker.checkOnlyOneOfParameters method.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testCheckOnlyOneOfParameters_SingleParameter", "primary_tested": ["ParameterChecker.checkOnlyOneOfParameters(JSONObject,String,String)"], "external_dependencies": {"modules": ["JSONObject", "ParameterChecker"]}, "category": "unit", "description": "Tests the checkOnlyOneOfParameters method with a single parameter."}, {"name": "testCheckOnlyOneOfParameters_MultipleParameters", "primary_tested": ["ParameterChecker.checkOnlyOneOfParameters(JSONObject,String,String)"], "external_dependencies": {"modules": ["JSONObject", "ParameterChecker", "BinanceConnectorException"]}, "category": "unit", "description": "Tests the checkOnlyOneOfParameters method with multiple parameters, expecting a BinanceConnectorException."}, {"name": "testCheckOnlyOneOfParameters_NoParameters", "primary_tested": ["ParameterChecker.checkOnlyOneOfParameters(JSONObject,String,String)"], "external_dependencies": {"modules": ["JSONObject", "ParameterChecker"]}, "category": "unit", "description": "Tests the checkOnlyOneOfParameters method with no parameters."}, {"name": "testCheckOnlyOneOfParameters_NullParams", "primary_tested": ["ParameterChecker.checkOnlyOneOfParameters(JSONObject,String,String)"], "external_dependencies": {"modules": ["JSONObject", "ParameterChecker"]}, "category": "unit", "description": "Tests the checkOnlyOneOfParameters method with null parameters."}]}, {"file_path": "src/test/java/com/binance/connector/client/utils/UrlBuilder_buildStreamUrlTest.java", "testclass_name": "UrlBuilder_buildStreamUrlTest", "dependencies": ["package com.binance.connector.client.utils;", "import org.junit.Test;", "import static org.junit.Assert.*;", "import java.util.ArrayList;"], "name": "UrlBuilder_buildStreamUrlTest", "description": "Unit tests for the buildStreamUrl method in the UrlBuilder class.", "class_members": {"variables": [{"name": "baseUrl", "type": "String"}, {"name": "streams", "type": "ArrayList<String>"}]}, "test_cases": [{"name": "testBuildStreamUrlWithoutStreams", "primary_tested": ["UrlBuilder.buildStreamUrl(String,ArrayList<String>)"], "external_dependencies": {"modules": ["UrlBuilder"], "class_members": [{"name": "baseUrl", "type": "variable"}]}, "category": "unit", "description": "Tests the buildStreamUrl method when no streams are provided."}, {"name": "testBuildStreamUrlWithStreams", "primary_tested": ["UrlBuilder.buildStreamUrl(String,ArrayList<String>)"], "external_dependencies": {"modules": ["UrlBuilder", "ArrayList"], "class_members": [{"name": "baseUrl", "type": "variable"}, {"name": "streams", "type": "variable"}]}, "category": "unit", "description": "Tests the buildStreamUrl method when streams are provided."}, {"name": "testBuildStreamUrlWithEmptyStreams", "primary_tested": ["UrlBuilder.buildStreamUrl(String,ArrayList<String>)"], "external_dependencies": {"modules": ["UrlBuilder", "ArrayList"], "class_members": [{"name": "baseUrl", "type": "variable"}, {"name": "streams", "type": "variable"}]}, "category": "unit", "description": "Tests the buildStreamUrl method when empty streams are provided."}]}, {"file_path": "src/test/java/com/binance/connector/client/utils/JSONParser_pullValueTest.java", "testclass_name": "JSONParser_pullValueTest", "dependencies": ["package com.binance.connector.client.utils;", "import org.json.JSONObject;", "import org.junit.Test;", "import static org.junit.Assert.*;"], "name": "JSONParser_pullValueTest", "description": "Unit tests for the JSONParser.pullValue method.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testPullValueWithExistingKey", "primary_tested": ["JSONParser.pullValue(JSONObject,String)"], "external_dependencies": {"modules": ["JSONObject", "JSONParser"]}, "category": "unit", "description": "Tests the pullValue method with an existing key in the JSONObject."}, {"name": "testPullValueWithNonExistingKey", "primary_tested": ["JSONParser.pullValue(JSONObject,String)"], "external_dependencies": {"modules": ["JSONObject", "JSONParser"]}, "category": "unit", "description": "Tests the pullValue method with a non-existing key in the JSONObject."}, {"name": "testPullValueWithNullParameters", "primary_tested": ["JSONParser.pullValue(JSONObject,String)"], "external_dependencies": {"modules": ["JSONObject", "JSONParser"]}, "category": "unit", "description": "Tests the pullValue method with null parameters."}, {"name": "testPullValueWithEmptyJSONObject", "primary_tested": ["JSONParser.pullValue(JSONObject,String)"], "external_dependencies": {"modules": ["JSONObject", "JSONParser"]}, "category": "unit", "description": "Tests the pullValue method with an empty JSONObject."}, {"name": "testPullValueWithMultipleKeys", "primary_tested": ["JSONParser.pullValue(JSONObject,String)"], "external_dependencies": {"modules": ["JSONObject", "JSONParser"]}, "category": "unit", "description": "Tests the pullValue method with multiple keys in the JSONObject."}]}, {"file_path": "src/test/java/com/binance/connector/client/utils/JSONParser_getJSONIntValueTest.java", "testclass_name": "JSONParser_getJSONIntValueTest", "dependencies": ["package com.binance.connector.client.utils;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import org.json.JSONException;", "import org.junit.Test;"], "name": "JSONParser_getJSONIntValueTest", "description": "Unit tests for the JSONParser.getJSONIntValue method, which retrieves integer values from JSON strings.", "class_members": {"variables": [{"name": "mockJson", "type": "String"}]}, "test_cases": [{"name": "testGetJSONIntValueSuccess", "primary_tested": ["JSONParser.getJSONIntValue(String,String)"], "external_dependencies": {"modules": ["JSONParser"], "class_members": [{"name": "mockJson", "type": "variable"}]}, "category": "unit", "description": "Tests the successful retrieval of an integer value from a valid JSON string."}, {"name": "testGetJSONIntValueThrowException", "primary_tested": ["JSONParser.getJSONIntValue(String,String)"], "external_dependencies": {"modules": ["JSONParser"], "class_members": [{"name": "mockJson", "type": "variable"}]}, "category": "unit", "description": "Tests that the method throws a JSONException when attempting to retrieve an integer value using an invalid key."}, {"name": "testGetJSONIntValueWithInvalidJson", "primary_tested": ["JSONParser.getJSONIntValue(String,String)"], "external_dependencies": {"modules": ["JSONParser"]}, "category": "unit", "description": "Tests that the method throws a JSONException when provided with an invalid JSON string."}, {"name": "testGetJSONIntValueWithNonIntValue", "primary_tested": ["JSONParser.getJSONIntValue(String,String)"], "external_dependencies": {"modules": ["JSONParser"]}, "category": "unit", "description": "Tests that the method throws a JSONException when attempting to retrieve an integer value from a JSON string where the value is not an integer."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Mining_hashrateResaleRequestTest.java", "testclass_name": "Mining_hashrateResaleRequestTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Mining_hashrateResaleRequestTest", "description": "Tests for the hashrate resale request functionality in the Binance Spot Client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}], "methods": [], "nested_classes": []}, "fixtures": ["init"], "test_cases": [{"name": "testHashrateResaleRequestWithoutParameters", "primary_tested": ["Mining.hashrateResaleRequest(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the hashrate resale request functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testHashrateResaleRequestWithValidParameters", "primary_tested": ["Mining.hashrateResaleRequest(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the hashrate resale request functionality with valid parameters, expecting a successful response."}]}, {"file_path": "src/test/java/com/binance/connector/client/utils/UrlBuilder_joinStreamUrlsTest.java", "testclass_name": "UrlBuilder_joinStreamUrlsTest", "dependencies": ["package com.binance.connector.client.utils;", "import org.junit.Test;", "import static org.junit.Assert.*;", "import java.util.ArrayList;"], "name": "UrlBuilder_joinStreamUrlsTest", "description": "Unit tests for the joinStreamUrls method in the UrlBuilder class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testJoinStreamUrlsWithEmptyStreams", "primary_tested": ["UrlBuilder.joinStreamUrls(StringBuilder,ArrayList<String>)"], "external_dependencies": {"modules": ["UrlBuilder", "StringBuilder", "ArrayList"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the joinStreamUrls method with an empty list of streams."}, {"name": "testJoinStreamUrlsWithSingleStream", "primary_tested": ["UrlBuilder.joinStreamUrls(StringBuilder,ArrayList<String>)"], "external_dependencies": {"modules": ["UrlBuilder", "StringBuilder", "ArrayList"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the joinStreamUrls method with a single stream in the list."}, {"name": "testJoinStreamUrlsWithMultipleStreams", "primary_tested": ["UrlBuilder.joinStreamUrls(StringBuilder,ArrayList<String>)"], "external_dependencies": {"modules": ["UrlBuilder", "StringBuilder", "ArrayList"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the joinStreamUrls method with multiple streams in the list."}, {"name": "testJoinStreamUrlsWithNullStreams", "primary_tested": ["UrlBuilder.joinStreamUrls(StringBuilder,ArrayList<String>)"], "external_dependencies": {"modules": ["UrlBuilder", "StringBuilder"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the joinStreamUrls method with a null list of streams."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_futuresTransferTest.java", "testclass_name": "SubAccount_futuresTransferTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.UrlBuilder;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "SubAccount_futuresTransferTest", "description": "Tests for the futures transfer functionality of the SubAccount in the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testFuturesTransfer", "primary_tested": ["SubAccount.futuresTransfer(Map<String,Object>)"], "associated_methods": ["UrlBuilder.urlEncode(String)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "UrlBuilder", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the futures transfer functionality of the SubAccount with valid parameters."}, {"name": "testFuturesTransferMissingParameters", "primary_tested": ["SubAccount.futuresTransfer(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "BinanceConnectorException"], "class_members": [{"name": "baseUrl", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the behavior of the futures transfer functionality when required parameters are missing, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Trade_testNewOrderTest.java", "testclass_name": "Trade_testNewOrderTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.RequestHandler;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Trade_testNewOrderTest", "description": "Unit tests for the Trade class's testNewOrder method.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "trade", "type": "Trade"}]}, "fixtures": ["init"], "test_cases": [{"name": "testTestNewOrder", "primary_tested": ["Trade.testNewOrder(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["MockWebServer", "LinkedHashMap", "Map", "Dispatcher", "HttpMethod", "Trade", "MockData"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "trade", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the testNewOrder method of the Trade class with valid parameters."}, {"name": "testTestNewOrderWithoutParameters", "primary_tested": ["Trade.testNewOrder(Map<String,Object>)"], "external_dependencies": {"modules": ["LinkedHashMap", "Map", "BinanceConnectorException", "Trade"], "class_members": [{"name": "trade", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the testNewOrder method of the Trade class without parameters, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/com/binance/connector/client/utils/ParameterChecker_checkOneOfParametersRequiredTest.java", "testclass_name": "ParameterChecker_checkOneOfParametersRequiredTest", "dependencies": ["package com.binance.connector.client.utils;", "import static org.junit.Assert.assertThrows;", "import org.json.JSONObject;", "import org.junit.Test;", "import com.binance.connector.client.exceptions.BinanceConnectorException;"], "name": "ParameterChecker_checkOneOfParametersRequiredTest", "description": "Unit tests for the ParameterChecker.checkOneOfParametersRequired method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testCheckOneOfParametersRequired_AllParametersMissing", "primary_tested": ["ParameterChecker.checkOneOfParametersRequired(JSONObject,String[])"], "external_dependencies": {"modules": ["JSONObject", "BinanceConnectorException", "ParameterChecker"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that a BinanceConnectorException is thrown when all parameters are missing."}, {"name": "testCheckOneOfParametersRequired_OneParameterPresent", "primary_tested": ["ParameterChecker.checkOneOfParametersRequired(JSONObject,String[])"], "external_dependencies": {"modules": ["JSONObject", "ParameterChecker"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that no exception is thrown when one of the required parameters is present."}, {"name": "testCheckOneOfParametersRequired_AllParametersPresent", "primary_tested": ["ParameterChecker.checkOneOfParametersRequired(JSONObject,String[])"], "external_dependencies": {"modules": ["JSONObject", "ParameterChecker"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that no exception is thrown when all required parameters are present."}, {"name": "testCheckOneOfParametersRequired_NullParams", "primary_tested": ["ParameterChecker.checkOneOfParametersRequired(JSONObject,String[])"], "external_dependencies": {"modules": ["BinanceConnectorException", "ParameterChecker"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that a BinanceConnectorException is thrown when the params object is null."}]}, {"file_path": "src/test/java/com/binance/connector/client/utils/ParameterChecker_checkParameterTypeTest.java", "testclass_name": "ParameterChecker_checkParameterTypeTest", "dependencies": ["package com.binance.connector.client.utils;", "import org.junit.Test;", "import static org.junit.Assert.*;", "import com.binance.connector.client.exceptions.BinanceConnectorException;"], "name": "ParameterChecker_checkParameterTypeTest", "description": "Unit tests for the ParameterChecker.checkParameterType method, which validates the type and content of parameters.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testCheckParameterTypeValidString", "primary_tested": ["ParameterChecker.checkParameterType(Object,Class,String)"], "external_dependencies": {"modules": ["ParameterChecker", "String"]}, "category": "unit", "description": "Tests the validation of a valid String parameter."}, {"name": "testCheckParameterTypeInvalidType", "primary_tested": ["ParameterChecker.checkParameterType(Object,Class,String)"], "external_dependencies": {"modules": ["ParameterChecker", "Integer", "BinanceConnectorException"]}, "category": "unit", "description": "Tests the validation of an invalid parameter type (Integer instead of String), expecting a BinanceConnectorException."}, {"name": "testCheckParameterTypeEmptyString", "primary_tested": ["ParameterChecker.checkParameterType(Object,Class,String)"], "external_dependencies": {"modules": ["ParameterChecker", "String", "BinanceConnectorException"]}, "category": "unit", "description": "Tests the validation of an empty String parameter, expecting a BinanceConnectorException."}, {"name": "testCheckParameterTypeValidInteger", "primary_tested": ["ParameterChecker.checkParameterType(Object,Class,String)"], "external_dependencies": {"modules": ["ParameterChecker", "Integer"]}, "category": "unit", "description": "Tests the validation of a valid Integer parameter."}, {"name": "testCheckParameterTypeInvalidStringType", "primary_tested": ["ParameterChecker.checkParameterType(Object,Class,String)"], "external_dependencies": {"modules": ["ParameterChecker", "Integer", "BinanceConnectorException"]}, "category": "unit", "description": "Tests the validation of an invalid parameter type (Integer instead of String), expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_lockedSubscriptionPreviewTest.java", "testclass_name": "SimpleEarn_lockedSubscriptionPreviewTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.ProxyAuth;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "SimpleEarn_lockedSubscriptionPreviewTest", "description": "Tests for the locked subscription preview functionality in the SimpleEarn module of the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testLockedSubscriptionPreviewWithoutParameters", "primary_tested": ["SimpleEarn.lockedSubscriptionPreview(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "BinanceConnectorException", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the locked subscription preview functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testLockedSubscriptionPreviewWithParameters", "primary_tested": ["SimpleEarn.lockedSubscriptionPreview(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the locked subscription preview functionality with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/com/binance/connector/client/utils/ParameterChecker_processIdTest.java", "testclass_name": "ParameterChecker_processIdTest", "dependencies": ["package com.binance.connector.client.utils;", "import org.junit.Test;", "import static org.junit.Assert.*;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import java.util.UUID;"], "name": "ParameterChecker_processIdTest", "description": "Unit tests for the ParameterChecker.processId method, covering various input scenarios.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testProcessIdWithValidInteger", "primary_tested": ["ParameterChecker.processId(Integer,String)"], "external_dependencies": {"modules": ["ParameterChecker"]}, "category": "unit", "description": "Tests the processId method with a valid Integer input."}, {"name": "testProcessIdWithValidString", "primary_tested": ["ParameterChecker.processId(String,String)"], "external_dependencies": {"modules": ["ParameterChecker"]}, "category": "unit", "description": "Tests the processId method with a valid String input."}, {"name": "testProcessIdWithNull", "primary_tested": ["ParameterChecker.processId(Object,String)"], "associated_methods": ["UUID.fromString(String)"], "external_dependencies": {"modules": ["ParameterChecker", "UUID"]}, "category": "unit", "description": "Tests the processId method with a null input, ensuring a valid UUID is generated."}, {"name": "testProcessIdWithEmptyString", "primary_tested": ["ParameterChecker.processId(String,String)"], "associated_methods": ["UUID.fromString(String)"], "external_dependencies": {"modules": ["ParameterChecker", "UUID"]}, "category": "unit", "description": "Tests the processId method with an empty String input, ensuring a valid UUID is generated."}, {"name": "testProcessIdWithInvalidType", "primary_tested": ["ParameterChecker.processId(Object,String)"], "external_dependencies": {"modules": ["ParameterChecker", "BinanceConnectorException"]}, "category": "unit", "description": "Tests the processId method with an invalid type input, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_subAccountToMasterTest.java", "testclass_name": "SubAccount_subAccountToMasterTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.UrlBuilder;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "SubAccount_subAccountToMasterTest", "description": "Tests for the sub-account to master transfer functionality in the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testSubAccountToMasterWithoutParameters", "primary_tested": ["SubAccount.subAccountToMaster(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "HttpMethod", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the sub-account to master transfer functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testSubAccountToMaster", "primary_tested": ["SubAccount.subAccountToMaster(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "HttpMethod", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the sub-account to master transfer functionality with parameters, expecting a successful response."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Trade_testSorOrderTest.java", "testclass_name": "Trade_testSorOrderTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.RequestHandler;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Trade_testSorOrderTest", "description": "Unit tests for the Trade class's testSorOrder method, including scenarios with and without required parameters.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "trade", "type": "Trade"}]}, "fixtures": ["init"], "test_cases": [{"name": "testTestSorOrder", "primary_tested": ["Trade.testSorOrder(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["MockWebServer", "MockData", "HttpMethod", "Trade", "LinkedHashMap", "Dispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "trade", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the testSorOrder method of the Trade class with all required parameters provided."}, {"name": "testTestSorOrderMissingQuantity", "primary_tested": ["Trade.testSorOrder(Map<String,Object>)"], "external_dependencies": {"modules": ["Trade", "LinkedHashMap", "BinanceConnectorException"], "class_members": [{"name": "trade", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the testSorOrder method of the Trade class when the required 'quantity' parameter is missing, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_managedSubWithdrawTest.java", "testclass_name": "SubAccount_managedSubWithdrawTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.UrlBuilder;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "SubAccount_managedSubWithdrawTest", "description": "Tests for the managed sub-account withdrawal functionality in the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "amount", "type": "double"}], "methods": [], "nested_classes": []}, "fixtures": ["init"], "test_cases": [{"name": "testManagedSubWithdrawSuccess", "primary_tested": ["SubAccount.managedSubWithdraw(Map<String,Object>)"], "associated_methods": ["UrlBuilder.urlEncode(String)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "UrlBuilder", "LinkedHashMap", "Dispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "amount", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful withdrawal from a managed sub-account."}, {"name": "testManagedSubWithdrawMissingRequiredParameter", "primary_tested": ["SubAccount.managedSubWithdraw(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "BinanceConnectorException", "LinkedHashMap"], "class_members": [{"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the handling of missing required parameters in a managed sub-account withdrawal."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/VIPLoans_borrowTest.java", "testclass_name": "VIPLoans_borrowTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "VIPLoans_borrowTest", "description": "Unit tests for the VIPLoans borrow functionality.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "vipLoans", "type": "VIPLoans"}]}, "fixtures": ["init"], "test_cases": [{"name": "testBorrowSuccess", "primary_tested": ["VIPLoans.borrow(Map<String,Object>)"], "external_dependencies": {"modules": ["VIPLoans", "MockWebServer", "MockWebServerDispatcher", "HttpMethod", "MockData"], "class_members": [{"name": "vipLoans", "type": "variable"}, {"name": "mockWebServer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful borrowing functionality of the VIPLoans."}, {"name": "testBorrowMissingLoanAmount", "primary_tested": ["VIPLoans.borrow(Map<String,Object>)"], "external_dependencies": {"modules": ["VIPLoans", "BinanceConnectorException"], "class_members": [{"name": "vipLoans", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the handling of missing loan amount in the borrowing functionality of the VIPLoans."}, {"name": "testBorrowInvalidLoanAccountId", "primary_tested": ["VIPLoans.borrow(Map<String,Object>)"], "external_dependencies": {"modules": ["VIPLoans", "BinanceConnectorException"], "class_members": [{"name": "vipLoans", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the handling of invalid loan account ID in the borrowing functionality of the VIPLoans."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_managedSubAccountSnapshotTest.java", "testclass_name": "SubAccount_managedSubAccountSnapshotTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.UrlBuilder;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "SubAccount_managedSubAccountSnapshotTest", "description": "Tests for the managed sub-account snapshot functionality in the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testManagedSubAccountSnapshot", "primary_tested": ["SubAccount.managedSubAccountSnapshot(Map<String,Object>)"], "associated_methods": ["UrlBuilder.urlEncode(String)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "UrlBuilder", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the managed sub-account snapshot functionality with valid parameters."}, {"name": "testManagedSubAccountSnapshotWithoutParameters", "primary_tested": ["SubAccount.managedSubAccountSnapshot(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "BinanceConnectorException"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the managed sub-account snapshot functionality without parameters, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_managedSubDepositTest.java", "testclass_name": "SubAccount_managedSubDepositTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.UrlBuilder;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "SubAccount_managedSubDepositTest", "description": "Tests for the managed sub-account deposit functionality in the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}], "methods": [], "nested_classes": []}, "fixtures": ["init"], "test_cases": [{"name": "testManagedSubDeposit", "primary_tested": ["SubAccount.managedSubDeposit(Map<String,Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "UrlBuilder", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "UrlBuilder.urlEncode(String)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the managed sub-account deposit functionality with valid parameters."}, {"name": "testManagedSubDepositWithoutParameters", "primary_tested": ["SubAccount.managedSubDeposit(Map<String,Object>)"], "associated_methods": [], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "BinanceConnectorException"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the managed sub-account deposit functionality without providing parameters, expecting an exception."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_getFuturesInternalTransferTest.java", "testclass_name": "SubAccount_getFuturesInternalTransferTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.UrlBuilder;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "SubAccount_getFuturesInternalTransferTest", "description": "Tests for the internal transfer functionality of futures for sub-accounts in the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testGetFuturesInternalTransfer", "primary_tested": ["SubAccount.getFuturesInternalTransfer(Map<String,Object>)"], "associated_methods": ["UrlBuilder.urlEncode(String)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "UrlBuilder", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the internal transfer functionality of futures for sub-accounts with valid parameters."}, {"name": "testGetFuturesInternalTransferWithoutParameters", "primary_tested": ["SubAccount.getFuturesInternalTransfer(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "BinanceConnectorException"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the internal transfer functionality of futures for sub-accounts without parameters, expecting an exception."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Blvt_subscribeTest.java", "testclass_name": "Blvt_subscribeTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Blvt_subscribeTest", "description": "Unit tests for the Blvt subscribe functionality.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "blvt", "type": "Blvt"}]}, "fixtures": ["init"], "test_cases": [{"name": "testSubscribeSuccess", "primary_tested": ["Blvt.subscribe(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["MockWebServer", "MockData", "HttpMethod", "Dispatcher", "LinkedHashMap", "BinanceConnectorException"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "blvt", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.API_KEY", "MockData.SECRET_KEY", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful subscription to a BLVT with valid parameters."}, {"name": "testSubscribeWithoutTokenName", "primary_tested": ["Blvt.subscribe(Map<String,Object>)"], "external_dependencies": {"modules": ["LinkedHashMap", "BinanceConnectorException"], "class_members": [{"name": "blvt", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the subscription to a BLVT without providing the tokenName parameter, expecting a BinanceConnectorException."}, {"name": "testSubscribeWithoutCost", "primary_tested": ["Blvt.subscribe(Map<String,Object>)"], "external_dependencies": {"modules": ["LinkedHashMap", "BinanceConnectorException"], "class_members": [{"name": "blvt", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the subscription to a BLVT without providing the cost parameter, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_loanAdjustLTVTest.java", "testclass_name": "CryptoLoans_loanAdjustLTVTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "CryptoLoans_loanAdjustLTVTest", "description": "Unit tests for the loanAdjustLTV method in the CryptoLoans service of the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testLoanAdjustLTVWithoutParameters", "primary_tested": ["CryptoLoans.loanAdjustLTV(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the loanAdjustLTV method without parameters, expecting a BinanceConnectorException."}, {"name": "testLoanAdjustLTVWithValidParameters", "primary_tested": ["CryptoLoans.loanAdjustLTV(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the loanAdjustLTV method with valid parameters, expecting a successful response."}, {"name": "testLoanAdjustLTVWithMissingAmount", "primary_tested": ["CryptoLoans.loanAdjustLTV(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the loanAdjustLTV method with missing 'amount' parameter, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Trade_sorOrderTest.java", "testclass_name": "Trade_sorOrderTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.RequestHandler;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Trade_sorOrderTest", "description": "Unit tests for the sorOrder method in the Trade class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "trade", "type": "Trade"}]}, "fixtures": ["init"], "test_cases": [{"name": "testSorOrderSuccess", "primary_tested": ["Trade.sorOrder(Map<String,Object>)"], "external_dependencies": {"modules": ["MockWebServer", "MockWebServerDispatcher", "HttpMethod", "Trade", "LinkedHashMap", "Dispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "trade", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful execution of the sorOrder method with all required parameters."}, {"name": "testSorOrderMissingQuantity", "primary_tested": ["Trade.sorOrder(Map<String,Object>)"], "external_dependencies": {"modules": ["Trade", "LinkedHashMap", "BinanceConnectorException"], "class_members": [{"name": "trade", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the handling of a BinanceConnectorException when the 'quantity' parameter is missing."}, {"name": "testSorOrderInvalidSymbol", "primary_tested": ["Trade.sorOrder(Map<String,Object>)"], "external_dependencies": {"modules": ["Trade", "LinkedHashMap", "BinanceConnectorException"], "class_members": [{"name": "trade", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the handling of a BinanceConnectorException when an invalid 'symbol' is provided."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Margin_smallLiabilityExchangeHistoryTest.java", "testclass_name": "Margin_smallLiabilityExchangeHistoryTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Margin_smallLiabilityExchangeHistoryTest", "description": "Test suite for the small liability exchange history functionality in the Binance Spot Client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testSmallLiabilityExchangeHistory", "primary_tested": ["Margin.smallLiabilityExchangeHistory(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.API_KEY", "MockData.SECRET_KEY", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the small liability exchange history functionality with valid parameters."}, {"name": "testSmallLiabilityExchangeHistoryMissingCurrent", "primary_tested": ["Margin.smallLiabilityExchangeHistory(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockData", "Map", "LinkedHashMap"], "class_members": [{"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the small liability exchange history functionality when the 'current' parameter is missing, expecting a BinanceConnectorException."}, {"name": "testSmallLiabilityExchangeHistoryMissingSize", "primary_tested": ["Margin.smallLiabilityExchangeHistory(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockData", "Map", "LinkedHashMap"], "class_members": [{"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the small liability exchange history functionality when the 'size' parameter is missing, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Market_klinesTest.java", "testclass_name": "Market_klinesTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Market_klinesTest", "description": "Tests for the klines functionality in the Binance Spot Client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testKlines", "primary_tested": ["Market.klines(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the klines functionality with valid parameters."}, {"name": "testKlinesWithoutSymbol", "primary_tested": ["Market.klines(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "BinanceConnectorException"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the klines functionality without the symbol parameter, expecting a BinanceConnectorException."}, {"name": "testKlinesWithoutInterval", "primary_tested": ["Market.klines(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "BinanceConnectorException"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the klines functionality without the interval parameter, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_enableLeverageTokenTest.java", "testclass_name": "SubAccount_enableLeverageTokenTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.UrlBuilder;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "SubAccount_enableLeverageTokenTest", "description": "Tests for enabling leverage token for sub-accounts in the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}], "methods": []}, "fixtures": ["init"], "test_cases": [{"name": "testEnableLeverageTokenWithoutEmail", "primary_tested": ["SubAccount.enableLeverageToken(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the exception thrown when enabling leverage token without providing an email."}, {"name": "testEnableLeverageTokenWithoutEnableBlvt", "primary_tested": ["SubAccount.enableLeverageToken(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the exception thrown when enabling leverage token without providing the enableBlvt parameter."}, {"name": "testEnableLeverageTokenSuccess", "primary_tested": ["SubAccount.enableLeverageToken(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServerDispatcher", "MockData", "HttpMethod", "UrlBuilder"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "UrlBuilder.urlEncode(String)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful enabling of leverage token for a sub-account."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_marginTransferTest.java", "testclass_name": "SubAccount_marginTransferTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.UrlBuilder;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "SubAccount_marginTransferTest", "description": "Tests for the margin transfer functionality of the SubAccount in the Binance Connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testMarginTransferWithoutParameters", "primary_tested": ["SubAccount.marginTransfer(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the margin transfer functionality without providing any parameters, expecting a BinanceConnectorException."}, {"name": "testMarginTransferWithValidParameters", "primary_tested": ["SubAccount.marginTransfer(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "UrlBuilder"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "UrlBuilder.urlEncode(String)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the margin transfer functionality with valid parameters, expecting a successful response."}, {"name": "testMarginTransferWithoutRequiredAmount", "primary_tested": ["SubAccount.marginTransfer(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "UrlBuilder"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "UrlBuilder.urlEncode(String)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the margin transfer functionality without providing the required 'amount' parameter, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_loanBorrowTest.java", "testclass_name": "CryptoLoans_loanBorrowTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.ParameterChecker;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "CryptoLoans_loanBorrowTest", "description": "Unit tests for the loan borrow functionality in the CryptoLoans service.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testLoanBorrow", "primary_tested": ["CryptoLoans.loanBorrow(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "Dispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the loan borrow functionality with all required parameters."}, {"name": "testLoanBorrowMissingLoanCoin", "primary_tested": ["CryptoLoans.loanBorrow(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "BinanceConnectorException"], "class_members": [{"name": "baseUrl", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the loan borrow functionality when the loanCoin parameter is missing, expecting a BinanceConnectorException."}, {"name": "testLoanBorrowMissingCollateralCoin", "primary_tested": ["CryptoLoans.loanBorrow(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "BinanceConnectorException"], "class_members": [{"name": "baseUrl", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the loan borrow functionality when the collateralCoin parameter is missing, expecting a BinanceConnectorException."}, {"name": "testLoanBorrowMissingLoanTerm", "primary_tested": ["CryptoLoans.loanBorrow(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "BinanceConnectorException"], "class_members": [{"name": "baseUrl", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the loan borrow functionality when the loanTerm parameter is missing, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_subscribeFlexibleProductTest.java", "testclass_name": "SimpleEarn_subscribeFlexibleProductTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "SimpleEarn_subscribeFlexibleProductTest", "description": "Unit tests for subscribing to a flexible product in the SimpleEarn module of the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "client", "type": "SpotClient"}]}, "fixtures": ["init"], "test_cases": [{"name": "testSubscribeFlexibleProductSuccess", "primary_tested": ["SimpleEarn.subscribeFlexibleProduct(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "HttpMethod", "MockData"], "class_members": [{"name": "client", "type": "variable"}, {"name": "mockWebServer", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful subscription to a flexible product in the SimpleEarn module."}, {"name": "testSubscribeFlexibleProductMissingProductId", "primary_tested": ["SimpleEarn.subscribeFlexibleProduct(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "HttpMethod", "MockData", "BinanceConnectorException"], "class_members": [{"name": "client", "type": "variable"}, {"name": "mockWebServer", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the scenario where the productId is missing during the subscription to a flexible product in the SimpleEarn module, expecting a BinanceConnectorException."}, {"name": "testSubscribeFlexibleProductMissingAmount", "primary_tested": ["SimpleEarn.subscribeFlexibleProduct(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "HttpMethod", "MockData", "BinanceConnectorException"], "class_members": [{"name": "client", "type": "variable"}, {"name": "mockWebServer", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the scenario where the amount is missing during the subscription to a flexible product in the SimpleEarn module, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Market_tickerSymbolTest.java", "testclass_name": "Market_tickerSymbolTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.ArrayList;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.UrlBuilder;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Market_tickerSymbolTest", "description": "Unit tests for the tickerSymbol method in the Market class, covering various scenarios including without symbol, with single symbol, with multiple symbols, and with both symbol and symbols.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testTickerSymbolWithoutSymbol", "primary_tested": ["Market.tickerSymbol(Map<String,Object>)"], "external_dependencies": {"modules": ["Market", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the tickerSymbol method without providing a symbol."}, {"name": "testTickerSymbolWithSymbol", "primary_tested": ["Market.tickerSymbol(Map<String,Object>)"], "external_dependencies": {"modules": ["Market", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the tickerSymbol method with a single symbol."}, {"name": "testTickerSymbolWithSymbols", "primary_tested": ["Market.tickerSymbol(Map<String,Object>)"], "external_dependencies": {"modules": ["Market", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "UrlBuilder"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["UrlBuilder.urlEncode(String)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the tickerSymbol method with multiple symbols."}, {"name": "testTickerSymbolWithBothSymbolAndSymbols", "primary_tested": ["Market.tickerSymbol(Map<String,Object>)"], "external_dependencies": {"modules": ["Market", "BinanceConnectorException"], "class_members": [{"name": "baseUrl", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the tickerSymbol method with both a single symbol and multiple symbols, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Market_ticker24HTest.java", "testclass_name": "Market_ticker24HTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.ArrayList;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.UrlBuilder;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Market_ticker24HTest", "description": "Test suite for the 24-hour ticker functionality in the Market class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testTicker24HWithSymbol", "primary_tested": ["Market.ticker24H(Map<String,Object>)"], "external_dependencies": {"modules": ["Market", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "UrlBuilder"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "UrlBuilder.urlEncode(String)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the 24-hour ticker functionality with a single symbol."}, {"name": "testTicker24HWithSymbols", "primary_tested": ["Market.ticker24H(Map<String,Object>)"], "external_dependencies": {"modules": ["Market", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "UrlBuilder"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "UrlBuilder.urlEncode(String)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the 24-hour ticker functionality with multiple symbols."}, {"name": "testTicker24HWithSymbolAndSymbols", "primary_tested": ["Market.ticker24H(Map<String,Object>)"], "external_dependencies": {"modules": ["Market", "BinanceConnectorException"], "class_members": [{"name": "baseUrl", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the 24-hour ticker functionality with both a single symbol and multiple symbols, expecting an exception."}, {"name": "testTicker24HWithInvalidSymbolsType", "primary_tested": ["Market.ticker24H(Map<String,Object>)"], "external_dependencies": {"modules": ["Market", "BinanceConnectorException"], "class_members": [{"name": "baseUrl", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the 24-hour ticker functionality with an invalid type for symbols, expecting an exception."}]}, {"file_path": "src/test/java/com/binance/connector/client/utils/RequestBuilder_buildPublicRequestTest.java", "testclass_name": "RequestBuilder_buildPublicRequestTest", "dependencies": ["package com.binance.connector.client.utils;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import okhttp3.Request;"], "name": "RequestBuilder_buildPublicRequestTest", "description": "Unit tests for the buildPublicRequest method in the RequestBuilder class, covering various HTTP methods and error scenarios.", "class_members": {"variables": [{"name": "VALID_URL", "type": "static final String"}, {"name": "INVALID_URL", "type": "static final String"}]}, "test_cases": [{"name": "testBuildPublicRequestGetMethod", "primary_tested": ["RequestBuilder.buildPublicRequest(String,HttpMethod)"], "external_dependencies": {"modules": ["RequestBuilder", "HttpMethod", "Request"], "class_members": [{"name": "VALID_URL", "type": "variable"}]}, "category": "unit", "description": "Tests the buildPublicRequest method with GET HTTP method."}, {"name": "testBuildPublicRequestPostMethod", "primary_tested": ["RequestBuilder.buildPublicRequest(String,HttpMethod)"], "external_dependencies": {"modules": ["RequestBuilder", "HttpMethod", "Request"], "class_members": [{"name": "VALID_URL", "type": "variable"}]}, "category": "unit", "description": "Tests the buildPublicRequest method with POST HTTP method."}, {"name": "testBuildPublicRequestPutMethod", "primary_tested": ["RequestBuilder.buildPublicRequest(String,HttpMethod)"], "external_dependencies": {"modules": ["RequestBuilder", "HttpMethod", "Request"], "class_members": [{"name": "VALID_URL", "type": "variable"}]}, "category": "unit", "description": "Tests the buildPublicRequest method with PUT HTTP method."}, {"name": "testBuildPublicRequestDeleteMethod", "primary_tested": ["RequestBuilder.buildPublicRequest(String,HttpMethod)"], "external_dependencies": {"modules": ["RequestBuilder", "HttpMethod", "Request"], "class_members": [{"name": "VALID_URL", "type": "variable"}]}, "category": "unit", "description": "Tests the buildPublicRequest method with DELETE HTTP method."}, {"name": "testBuildPublicRequestInvalidHttpMethod", "primary_tested": ["RequestBuilder.buildPublicRequest(String,HttpMethod)"], "external_dependencies": {"modules": ["RequestBuilder", "HttpMethod", "BinanceConnectorException"], "class_members": [{"name": "VALID_URL", "type": "variable"}]}, "category": "unit", "description": "Tests the buildPublicRequest method with an invalid HTTP method, expecting a BinanceConnectorException."}, {"name": "testBuildPublicRequestInvalidUrl", "primary_tested": ["RequestBuilder.buildPublicRequest(String,HttpMethod)"], "external_dependencies": {"modules": ["RequestBuilder", "HttpMethod", "BinanceConnectorException"], "class_members": [{"name": "INVALID_URL", "type": "variable"}]}, "category": "unit", "description": "Tests the buildPublicRequest method with an invalid URL, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Market_bookTickerTest.java", "testclass_name": "Market_bookTickerTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.ArrayList;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.UrlBuilder;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Market_bookTickerTest", "description": "Unit tests for the bookTicker functionality in the Market class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}], "methods": []}, "fixtures": ["init"], "test_cases": [{"name": "testBookTickerWithoutSymbol", "primary_tested": ["Market.bookTicker(Map<String,Object>)"], "external_dependencies": {"modules": ["MockWebServer", "MockWebServerDispatcher", "Market", "UrlBuilder"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the bookTicker method without a symbol parameter."}, {"name": "testBookTickerWithSymbol", "primary_tested": ["Market.bookTicker(Map<String,Object>)"], "external_dependencies": {"modules": ["MockWebServer", "MockWebServerDispatcher", "Market", "UrlBuilder"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the bookTicker method with a symbol parameter."}, {"name": "testBookTickerWithSymbols", "primary_tested": ["Market.bookTicker(Map<String,Object>)"], "external_dependencies": {"modules": ["MockWebServer", "MockWebServerDispatcher", "Market", "UrlBuilder"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the bookTicker method with multiple symbols parameter."}, {"name": "testBookTickerWithSymbolAndSymbols", "primary_tested": ["Market.bookTicker(Map<String,Object>)"], "external_dependencies": {"modules": ["Market", "BinanceConnectorException"], "class_members": [{"name": "baseUrl", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the bookTicker method with both symbol and symbols parameters, expecting an exception."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Market_tickerTest.java", "testclass_name": "Market_tickerTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.ArrayList;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.UrlBuilder;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Market_tickerTest", "description": "Unit tests for the Market ticker functionality in the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testTickerWithSymbol", "primary_tested": ["Market.ticker(Map<String,Object>)"], "external_dependencies": {"modules": ["MockWebServer", "Market", "LinkedHashMap", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "UrlBuilder"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "UrlBuilder.urlEncode(String)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the ticker functionality with a single symbol."}, {"name": "testTickerWithSymbols", "primary_tested": ["Market.ticker(Map<String,Object>)"], "external_dependencies": {"modules": ["MockWebServer", "Market", "LinkedHashMap", "ArrayList", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "UrlBuilder"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "UrlBuilder.urlEncode(String)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the ticker functionality with multiple symbols."}, {"name": "testTickerWithBothSymbolAndSymbols", "primary_tested": ["Market.ticker(Map<String,Object>)"], "external_dependencies": {"modules": ["Market", "LinkedHashMap", "ArrayList", "BinanceConnectorException"], "class_members": [{"name": "baseUrl", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the ticker functionality when both symbol and symbols are provided, expecting an exception."}, {"name": "testTickerWithInvalidSymbolsType", "primary_tested": ["Market.ticker(Map<String,Object>)"], "external_dependencies": {"modules": ["Market", "LinkedHashMap", "BinanceConnectorException"], "class_members": [{"name": "baseUrl", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the ticker functionality with an invalid type for symbols, expecting an exception."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_futuresPositionRiskV2Test.java", "testclass_name": "SubAccount_futuresPositionRiskV2Test", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.UrlBuilder;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "SubAccount_futuresPositionRiskV2Test", "description": "Tests for the futures position risk V2 functionality of the SubAccount in the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testFuturesPositionRiskV2", "primary_tested": ["SubAccount.futuresPositionRiskV2(Map<String,Object>)"], "associated_methods": ["UrlBuilder.urlEncode(String)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "UrlBuilder", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the futures position risk V2 functionality with valid parameters."}, {"name": "testFuturesPositionRiskV2WithoutEmail", "primary_tested": ["SubAccount.futuresPositionRiskV2(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "BinanceConnectorException", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the futures position risk V2 functionality without providing the email parameter, expecting a BinanceConnectorException."}, {"name": "testFuturesPositionRiskV2WithoutFuturesType", "primary_tested": ["SubAccount.futuresPositionRiskV2(Map<String,Object>)"], "associated_methods": ["UrlBuilder.urlEncode(String)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "BinanceConnectorException", "UrlBuilder", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the futures position risk V2 functionality without providing the futuresType parameter, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_futuresAccountV2Test.java", "testclass_name": "SubAccount_futuresAccountV2Test", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.UrlBuilder;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "SubAccount_futuresAccountV2Test", "description": "Tests for the futures account V2 functionality of the SubAccount service in the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testFuturesAccountV2", "primary_tested": ["SubAccount.futuresAccountV2(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "UrlBuilder", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the futures account V2 functionality with valid parameters."}, {"name": "testFuturesAccountV2WithoutEmail", "primary_tested": ["SubAccount.futuresAccountV2(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "UrlBuilder", "MockWebServerDispatcher", "MockData", "HttpMethod", "BinanceConnectorException"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the futures account V2 functionality without providing the email parameter, expecting a BinanceConnectorException."}, {"name": "testFuturesAccountV2WithoutFuturesType", "primary_tested": ["SubAccount.futuresAccountV2(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "UrlBuilder", "MockWebServerDispatcher", "MockData", "HttpMethod", "BinanceConnectorException"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the futures account V2 functionality without providing the futuresType parameter, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/UserData_closeIsolatedMarginListenKeyTest.java", "testclass_name": "UserData_closeIsolatedMarginListenKeyTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "UserData_closeIsolatedMarginListenKeyTest", "description": "Unit tests for closing isolated margin listen key functionality in the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testCloseIsolatedMarginListenKey", "primary_tested": ["SpotClient.createUserData().closeIsolatedMarginListenKey(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "LinkedHashMap", "Map"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the functionality of closing an isolated margin listen key with both symbol and listenKey parameters provided."}, {"name": "testCloseIsolatedMarginListenKeyWithoutSymbol", "primary_tested": ["SpotClient.createUserData().closeIsolatedMarginListenKey(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "LinkedHashMap", "Map", "BinanceConnectorException"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the behavior when attempting to close an isolated margin listen key without providing the symbol parameter, expecting a BinanceConnectorException."}, {"name": "testCloseIsolatedMarginListenKeyWithoutListenKey", "primary_tested": ["SpotClient.createUserData().closeIsolatedMarginListenKey(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "LinkedHashMap", "Map", "BinanceConnectorException"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the behavior when attempting to close an isolated margin listen key without providing the listenKey parameter, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/GiftCard_createDualTokensCodeTest.java", "testclass_name": "GiftCard_createDualTokensCodeTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.ProxyAuth;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "GiftCard_createDualTokensCodeTest", "description": "Unit tests for the creation of dual tokens code in the GiftCard service using the Binance connector.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testCreateDualTokensCode", "primary_tested": ["GiftCard.createDualTokensCode(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "BinanceConnectorException"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the creation of dual tokens code with all required parameters."}, {"name": "testCreateDualTokensCodeWithoutBaseToken", "primary_tested": ["GiftCard.createDualTokensCode(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "BinanceConnectorException"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the creation of dual tokens code without the base token parameter, expecting an exception."}, {"name": "testCreateDualTokensCodeWithoutFaceToken", "primary_tested": ["GiftCard.createDualTokensCode(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "BinanceConnectorException"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the creation of dual tokens code without the face token parameter, expecting an exception."}, {"name": "testCreateDualTokensCodeWithoutBaseTokenAmount", "primary_tested": ["GiftCard.createDualTokensCode(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "BinanceConnectorException"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the creation of dual tokens code without the base token amount parameter, expecting an exception."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_depositAddressTest.java", "testclass_name": "SubAccount_depositAddressTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.UrlBuilder;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "SubAccount_depositAddressTest", "description": "Tests for the deposit address functionality of the SubAccount service in the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testDepositAddress", "primary_tested": ["SubAccount.depositAddress(Map<String,Object>)"], "associated_methods": ["UrlBuilder.urlEncode(String)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "UrlBuilder", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the deposit address functionality with valid parameters."}, {"name": "testDepositAddressMissingEmail", "primary_tested": ["SubAccount.depositAddress(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "BinanceConnectorException"], "class_members": [{"name": "baseUrl", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the deposit address functionality when the email parameter is missing, expecting a BinanceConnectorException."}, {"name": "testDepositAddressMissingCoin", "primary_tested": ["SubAccount.depositAddress(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "BinanceConnectorException"], "class_members": [{"name": "baseUrl", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the deposit address functionality when the coin parameter is missing, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_flexibleSubscriptionPreviewTest.java", "testclass_name": "SimpleEarn_flexibleSubscriptionPreviewTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.ParameterChecker;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "SimpleEarn_flexibleSubscriptionPreviewTest", "description": "Unit tests for the flexible subscription preview functionality in the SimpleEarn module of the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testFlexibleSubscriptionPreview", "primary_tested": ["SimpleEarn.flexibleSubscriptionPreview(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the flexible subscription preview functionality with valid parameters."}, {"name": "testFlexibleSubscriptionPreviewWithoutProductId", "primary_tested": ["SimpleEarn.flexibleSubscriptionPreview(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "Map", "LinkedHashMap", "BinanceConnectorException"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the flexible subscription preview functionality without the required 'productId' parameter, expecting a BinanceConnectorException."}, {"name": "testFlexibleSubscriptionPreviewWithoutAmount", "primary_tested": ["SimpleEarn.flexibleSubscriptionPreview(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "Map", "LinkedHashMap", "BinanceConnectorException"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the flexible subscription preview functionality without the required 'amount' parameter, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Wallet_switchBusdAutoConversionTest.java", "testclass_name": "Wallet_switchBusdAutoConversionTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.ParameterChecker;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Wallet_switchBusdAutoConversionTest", "description": "Tests for the BUSD auto-conversion switch functionality in the Wallet module of the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testSwitchBusdAutoConversionSuccess", "primary_tested": ["Wallet.switchBusdAutoConversion(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "BinanceConnectorException"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful switching of BUSD auto-conversion with all required parameters provided."}, {"name": "testSwitchBusdAutoConversionMissingCoin", "primary_tested": ["Wallet.switchBusdAutoConversion(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "BinanceConnectorException"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the scenario where the 'coin' parameter is missing, expecting a BinanceConnectorException."}, {"name": "testSwitchBusdAutoConversionMissingEnable", "primary_tested": ["Wallet.switchBusdAutoConversion(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "BinanceConnectorException"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the scenario where the 'enable' parameter is missing, expecting a BinanceConnectorException."}, {"name": "testSwitchBusdAutoConversionWrongParamType", "primary_tested": ["Wallet.switchBusdAutoConversion(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "BinanceConnectorException"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the scenario where the 'enable' parameter is of the wrong type, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/com/binance/connector/client/utils/RequestBuilder_buildApiKeyRequestTest.java", "testclass_name": "RequestBuilder_buildApiKeyRequestTest", "dependencies": ["package com.binance.connector.client.utils;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import static org.junit.Assert.assertTrue;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import okhttp3.Request;"], "name": "RequestBuilder_buildApiKeyRequestTest", "description": "Unit tests for the buildApiKeyRequest method in the RequestBuilder class.", "class_members": {"variables": [{"name": "VALID_URL", "type": "static final String"}, {"name": "INVALID_URL", "type": "static final String"}, {"name": "API_KEY", "type": "static final String"}]}, "test_cases": [{"name": "testBuildApiKeyRequestPost", "primary_tested": ["RequestBuilder.buildApiKeyRequest(String,HttpMethod,String)"], "external_dependencies": {"modules": ["RequestBuilder", "HttpMethod", "Request"], "class_members": [{"name": "VALID_URL", "type": "variable"}, {"name": "API_KEY", "type": "variable"}]}, "category": "unit", "description": "Tests the buildApiKeyRequest method with POST HTTP method."}, {"name": "testBuildApiKeyRequestGet", "primary_tested": ["RequestBuilder.buildApiKeyRequest(String,HttpMethod,String)"], "external_dependencies": {"modules": ["RequestBuilder", "HttpMethod", "Request"], "class_members": [{"name": "VALID_URL", "type": "variable"}, {"name": "API_KEY", "type": "variable"}]}, "category": "unit", "description": "Tests the buildApiKeyRequest method with GET HTTP method."}, {"name": "testBuildApiKeyRequestPut", "primary_tested": ["RequestBuilder.buildApiKeyRequest(String,HttpMethod,String)"], "external_dependencies": {"modules": ["RequestBuilder", "HttpMethod", "Request"], "class_members": [{"name": "VALID_URL", "type": "variable"}, {"name": "API_KEY", "type": "variable"}]}, "category": "unit", "description": "Tests the buildApiKeyRequest method with PUT HTTP method."}, {"name": "testBuildApiKeyRequestDelete", "primary_tested": ["RequestBuilder.buildApiKeyRequest(String,HttpMethod,String)"], "external_dependencies": {"modules": ["RequestBuilder", "HttpMethod", "Request"], "class_members": [{"name": "VALID_URL", "type": "variable"}, {"name": "API_KEY", "type": "variable"}]}, "category": "unit", "description": "Tests the buildApiKeyRequest method with DELETE HTTP method."}, {"name": "testBuildApiKeyRequestInvalidMethod", "primary_tested": ["RequestBuilder.buildApiKeyRequest(String,HttpMethod,String)"], "external_dependencies": {"modules": ["RequestBuilder", "HttpMethod", "BinanceConnectorException"], "class_members": [{"name": "VALID_URL", "type": "variable"}, {"name": "API_KEY", "type": "variable"}]}, "category": "unit", "description": "Tests the buildApiKeyRequest method with an invalid HTTP method, expecting an exception."}, {"name": "testBuildApiKeyRequestInvalidUrl", "primary_tested": ["RequestBuilder.buildApiKeyRequest(String,HttpMethod,String)"], "external_dependencies": {"modules": ["RequestBuilder", "HttpMethod", "BinanceConnectorException"], "class_members": [{"name": "INVALID_URL", "type": "variable"}, {"name": "API_KEY", "type": "variable"}]}, "category": "unit", "description": "Tests the buildApiKeyRequest method with an invalid URL, expecting an exception."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_flexibleLoanBorrowTest.java", "testclass_name": "CryptoLoans_flexibleLoanBorrowTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.ParameterChecker;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "CryptoLoans_flexibleLoanBorrowTest", "description": "Unit tests for the flexible loan borrow functionality in the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testFlexibleLoanBorrowWithoutParameters", "primary_tested": ["CryptoLoans.flexibleLoanBorrow(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the flexible loan borrow functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testFlexibleLoanBorrowWithValidParameters", "primary_tested": ["CryptoLoans.flexibleLoanBorrow(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the flexible loan borrow functionality with valid parameters, expecting a successful response."}, {"name": "testFlexibleLoanBorrowWithMissingLoanCoin", "primary_tested": ["CryptoLoans.flexibleLoanBorrow(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the flexible loan borrow functionality with missing loan coin parameter, expecting a BinanceConnectorException."}, {"name": "testFlexibleLoanBorrowWithMissingCollateralCoin", "primary_tested": ["CryptoLoans.flexibleLoanBorrow(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the flexible loan borrow functionality with missing collateral coin parameter, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Market_exchangeInfoTest.java", "testclass_name": "Market_exchangeInfoTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.ArrayList;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.UrlBuilder;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Market_exchangeInfoTest", "description": "Unit tests for the exchangeInfo method in the Market class, covering various parameter combinations.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testExchangeInfoWithSymbol", "primary_tested": ["Market.exchangeInfo(Map<String,Object>)"], "external_dependencies": {"modules": ["MockWebServer", "Market", "UrlBuilder", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "UrlBuilder.urlEncode(String)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the exchangeInfo method with a single symbol parameter."}, {"name": "testExchangeInfoWithSymbols", "primary_tested": ["Market.exchangeInfo(Map<String,Object>)"], "external_dependencies": {"modules": ["MockWebServer", "Market", "UrlBuilder", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "UrlBuilder.urlEncode(String)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the exchangeInfo method with multiple symbols parameter."}, {"name": "testExchangeInfoWithPermissions", "primary_tested": ["Market.exchangeInfo(Map<String,Object>)"], "external_dependencies": {"modules": ["MockWebServer", "Market", "UrlBuilder", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "UrlBuilder.urlEncode(String)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the exchangeInfo method with permissions parameter."}, {"name": "testExchangeInfoWithSymbolAndSymbols", "primary_tested": ["Market.exchangeInfo(Map<String,Object>)"], "external_dependencies": {"modules": ["Market", "BinanceConnectorException"], "class_members": [{"name": "baseUrl", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the exchangeInfo method with both symbol and symbols parameters, expecting an exception."}, {"name": "testExchangeInfoWithSymbolAndPermissions", "primary_tested": ["Market.exchangeInfo(Map<String,Object>)"], "external_dependencies": {"modules": ["Market", "BinanceConnectorException"], "class_members": [{"name": "baseUrl", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the exchangeInfo method with both symbol and permissions parameters, expecting an exception."}, {"name": "testExchangeInfoWithSymbolsAndPermissions", "primary_tested": ["Market.exchangeInfo(Map<String,Object>)"], "external_dependencies": {"modules": ["Market", "BinanceConnectorException"], "class_members": [{"name": "baseUrl", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the exchangeInfo method with both symbols and permissions parameters, expecting an exception."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Futures_futuresOrderBookHistoryTest.java", "testclass_name": "Futures_futuresOrderBookHistoryTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.RequestHandler;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Futures_futuresOrderBookHistoryTest", "description": "Unit tests for the Futures class's futuresOrderBookHistory method, focusing on various parameter scenarios.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "futures", "type": "Futures"}], "methods": []}, "fixtures": ["init"], "test_cases": [{"name": "testFuturesOrderBookHistoryWithoutParameters", "primary_tested": ["Futures.futuresOrderBookHistory(Map<String,Object>)"], "external_dependencies": {"modules": ["BinanceConnectorException", "MockWebServerDispatcher", "HttpMethod", "MockWebServer"], "class_members": [{"name": "futures", "type": "variable"}, {"name": "mockWebServer", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the behavior of the futuresOrderBookHistory method when no parameters are provided, expecting a BinanceConnectorException."}, {"name": "testFuturesOrderBookHistoryWithValidParameters", "primary_tested": ["Futures.futuresOrderBookHistory(Map<String,Object>)"], "external_dependencies": {"modules": ["MockWebServerDispatcher", "HttpMethod", "MockWebServer"], "class_members": [{"name": "futures", "type": "variable"}, {"name": "mockWebServer", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the behavior of the futuresOrderBookHistory method with valid parameters, expecting a successful response."}, {"name": "testFuturesOrderBookHistoryWithMissingSymbol", "primary_tested": ["Futures.futuresOrderBookHistory(Map<String,Object>)"], "external_dependencies": {"modules": ["BinanceConnectorException", "MockWebServerDispatcher", "HttpMethod", "MockWebServer"], "class_members": [{"name": "futures", "type": "variable"}, {"name": "mockWebServer", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the behavior of the futuresOrderBookHistory method when the 'symbol' parameter is missing, expecting a BinanceConnectorException."}, {"name": "testFuturesOrderBookHistoryWithMissingDataType", "primary_tested": ["Futures.futuresOrderBookHistory(Map<String,Object>)"], "external_dependencies": {"modules": ["BinanceConnectorException", "MockWebServerDispatcher", "HttpMethod", "MockWebServer"], "class_members": [{"name": "futures", "type": "variable"}, {"name": "mockWebServer", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the behavior of the futuresOrderBookHistory method when the 'dataType' parameter is missing, expecting a BinanceConnectorException."}, {"name": "testFuturesOrderBookHistoryWithMissingStartTime", "primary_tested": ["Futures.futuresOrderBookHistory(Map<String,Object>)"], "external_dependencies": {"modules": ["BinanceConnectorException", "MockWebServerDispatcher", "HttpMethod", "MockWebServer"], "class_members": [{"name": "futures", "type": "variable"}, {"name": "mockWebServer", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the behavior of the futuresOrderBookHistory method when the 'startTime' parameter is missing, expecting a BinanceConnectorException."}, {"name": "testFuturesOrderBookHistoryWithMissingEndTime", "primary_tested": ["Futures.futuresOrderBookHistory(Map<String,Object>)"], "external_dependencies": {"modules": ["BinanceConnectorException", "MockWebServerDispatcher", "HttpMethod", "MockWebServer"], "class_members": [{"name": "futures", "type": "variable"}, {"name": "mockWebServer", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the behavior of the futuresOrderBookHistory method when the 'endTime' parameter is missing, expecting a BinanceConnectorException."}]}]