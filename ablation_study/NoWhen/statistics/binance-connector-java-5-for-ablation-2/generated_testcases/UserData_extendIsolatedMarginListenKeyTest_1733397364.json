[{"strategy": "generate", "code": "\npackage com.binance.connector.client.impl.spot;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertThrows;\n\nimport java.util.LinkedHashMap;\nimport java.util.Map;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport com.binance.connector.client.enums.HttpMethod;\nimport com.binance.connector.client.exceptions.BinanceConnectorException;\nimport com.binance.connector.client.utils.ProxyAuth;\nimport com.binance.connector.client.utils.RequestHandler;\n\nimport okhttp3.mockwebserver.Dispatcher;\nimport okhttp3.mockwebserver.MockWebServer;\nimport unit.MockData;\nimport unit.MockWebServerDispatcher;\n\npublic class UserData_extendIsolatedMarginListenKeyTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private static final String MOCK_RESPONSE = \"{\\\"success\\\":true}\";\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testExtendIsolatedMarginListenKey() {\n        String path = \"/sapi/v1/userDataStream/isolated?symbol=BNBUSDT&listenKey=test\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"listenKey\", \"test\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MOCK_RESPONSE, HttpMethod.PUT, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        UserData userData = new UserData(baseUrl, MockData.API_KEY, true, null);\n        String result = userData.extendIsolatedMarginListenKey(parameters);\n        assertEquals(MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testExtendIsolatedMarginListenKeyWithoutSymbol() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"listenKey\", \"test\");\n\n        UserData userData = new UserData(baseUrl, MockData.API_KEY, true, null);\n        assertThrows(BinanceConnectorException.class, () -> userData.extendIsolatedMarginListenKey(parameters));\n    }\n\n    @Test\n    public void testExtendIsolatedMarginListenKeyWithoutListenKey() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        UserData userData = new UserData(baseUrl, MockData.API_KEY, true, null);\n        assertThrows(BinanceConnectorException.class, () -> userData.extendIsolatedMarginListenKey(parameters));\n    }\n}\n"}]