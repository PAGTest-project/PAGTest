[{"strategy": "generate", "code": "\npackage com.binance.connector.client.impl.spot;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertThrows;\n\nimport java.util.LinkedHashMap;\nimport java.util.Map;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport com.binance.connector.client.enums.HttpMethod;\nimport com.binance.connector.client.exceptions.BinanceConnectorException;\nimport com.binance.connector.client.utils.RequestHandler;\n\nimport okhttp3.mockwebserver.Dispatcher;\nimport okhttp3.mockwebserver.MockWebServer;\nimport unit.MockData;\nimport unit.MockWebServerDispatcher;\n\npublic class Trade_testSorOrderTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private Trade trade;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.trade = new Trade(baseUrl, MockData.API_KEY, MockData.SECRET_KEY, false, null);\n    }\n\n    @Test\n    public void testTestSorOrder() {\n        String path = \"/api/v3/sor/order/test?symbol=BNBUSDT&side=SELL&type=LIMIT&quantity=1\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"side\", \"SELL\");\n        parameters.put(\"type\", \"LIMIT\");\n        parameters.put(\"quantity\", 1.0);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = trade.testSorOrder(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testTestSorOrderMissingQuantity() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"side\", \"SELL\");\n        parameters.put(\"type\", \"LIMIT\");\n\n        assertThrows(BinanceConnectorException.class, () -> trade.testSorOrder(parameters));\n    }\n}\n"}]