[{"strategy": "generate", "code": "\npackage com.binance.connector.client.utils.signaturegenerator;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.Mock;\nimport org.mockito.junit.MockitoJUnitRunner;\n\nimport java.security.Signature;\nimport java.security.interfaces.RSAPrivateKey;\nimport java.util.Base64;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.mockito.Mockito.*;\n\n@RunWith(MockitoJUnitRunner.class)\npublic class RsaSignatureGenerator_getSignatureTest {\n\n    private RsaSignatureGenerator rsaSignatureGenerator;\n\n    @Mock\n    private RSAPrivateKey mockPrivateKey;\n\n    @Mock\n    private Signature mockSignature;\n\n    @Before\n    public void setUp() throws Exception {\n        rsaSignatureGenerator = new RsaSignatureGenerator(\"dummyPrivateKey\") {\n            @Override\n            protected RSAPrivateKey parsePrivateKey(String privateKeyPem, String password) throws Exception {\n                return mockPrivateKey;\n            }\n        };\n    }\n\n    @Test\n    public void testGetSignature_Success() throws Exception {\n        String data = \"testData\";\n        byte[] signatureBytes = \"signature\".getBytes();\n        String expectedSignature = Base64.getEncoder().encodeToString(signatureBytes);\n\n        when(Signature.getInstance(RsaSignatureGenerator.RSA_SHA256)).thenReturn(mockSignature);\n        when(mockSignature.sign()).thenReturn(signatureBytes);\n\n        String result = rsaSignatureGenerator.getSignature(data);\n\n        verify(mockSignature).initSign(mockPrivateKey);\n        verify(mockSignature).update(data.getBytes());\n        assertEquals(expectedSignature, result);\n    }\n\n    @Test(expected = RuntimeException.class)\n    public void testGetSignature_Exception() throws Exception {\n        String data = \"testData\";\n\n        when(Signature.getInstance(RsaSignatureGenerator.RSA_SHA256)).thenReturn(mockSignature);\n        doThrow(new Exception(\"Mock Exception\")).when(mockSignature).initSign(mockPrivateKey);\n\n        rsaSignatureGenerator.getSignature(data);\n    }\n}\n"}]