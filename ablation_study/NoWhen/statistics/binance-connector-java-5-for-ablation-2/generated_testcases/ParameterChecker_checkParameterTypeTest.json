[{"strategy": "generate", "code": "\npackage com.binance.connector.client.utils;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport com.binance.connector.client.exceptions.BinanceConnectorException;\n\npublic class ParameterChecker_checkParameterTypeTest {\n\n    @Test\n    public void testCheckParameterTypeValidString() {\n        String parameter = \"validString\";\n        ParameterChecker.checkParameterType(parameter, String.class, \"testParameter\");\n    }\n\n    @Test\n    public void testCheckParameterTypeInvalidType() {\n        Integer parameter = 123;\n        BinanceConnectorException exception = assertThrows(BinanceConnectorException.class, () -> {\n            ParameterChecker.checkParameterType(parameter, String.class, \"testParameter\");\n        });\n        assertEquals(\"\\\"testParameter\\\" must be of class java.lang.String type.\", exception.getMessage());\n    }\n\n    @Test\n    public void testCheckParameterTypeEmptyString() {\n        String parameter = \"\";\n        BinanceConnectorException exception = assertThrows(BinanceConnectorException.class, () -> {\n            ParameterChecker.checkParameterType(parameter, String.class, \"testParameter\");\n        });\n        assertEquals(\"\\\"testParameter\\\" must not be empty.\", exception.getMessage());\n    }\n\n    @Test\n    public void testCheckParameterTypeValidInteger() {\n        Integer parameter = 123;\n        ParameterChecker.checkParameterType(parameter, Integer.class, \"testParameter\");\n    }\n\n    @Test\n    public void testCheckParameterTypeInvalidStringType() {\n        Integer parameter = 123;\n        BinanceConnectorException exception = assertThrows(BinanceConnectorException.class, () -> {\n            ParameterChecker.checkParameterType(parameter, String.class, \"testParameter\");\n        });\n        assertEquals(\"\\\"testParameter\\\" must be of class java.lang.String type.\", exception.getMessage());\n    }\n}\n"}]