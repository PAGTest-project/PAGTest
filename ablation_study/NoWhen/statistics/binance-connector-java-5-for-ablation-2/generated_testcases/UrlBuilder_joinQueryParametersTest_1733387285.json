[{"strategy": "retry", "code": "\npackage com.binance.connector.client.utils;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport java.util.LinkedHashMap;\nimport java.util.Map;\n\npublic class UrlBuilder_joinQueryParametersTest {\n\n    @Test\n    public void testJoinQueryParametersWithEmptyParams() {\n        StringBuilder sb = new StringBuilder();\n        Map<String, Object> params = new LinkedHashMap<>();\n        assertEquals(sb.toString(), UrlBuilder.joinQueryParameters(sb, params).toString());\n    }\n\n    @Test\n    public void testJoinQueryParametersWithSingleParam() {\n        StringBuilder sb = new StringBuilder();\n        Map<String, Object> params = new LinkedHashMap<>();\n        params.put(\"key1\", \"value1\");\n        String expected = \"key1=value1\";\n        assertEquals(expected, UrlBuilder.joinQueryParameters(sb, params).toString());\n    }\n\n    @Test\n    public void testJoinQueryParametersWithMultipleParams() {\n        StringBuilder sb = new StringBuilder();\n        Map<String, Object> params = new LinkedHashMap<>();\n        params.put(\"key1\", \"value1\");\n        params.put(\"key2\", 123);\n        params.put(\"key3\", 123.456);\n        String expected = \"key1=value1&key2=123&key3=123.456\";\n        assertEquals(expected, UrlBuilder.joinQueryParameters(sb, params).toString());\n    }\n\n    @Test\n    public void testJoinQueryParametersWithNullParams() {\n        StringBuilder sb = new StringBuilder();\n        assertEquals(sb.toString(), UrlBuilder.joinQueryParameters(sb, null).toString());\n    }\n\n    @Test\n    public void testJoinQueryParametersWithSpecialCharacters() {\n        StringBuilder sb = new StringBuilder();\n        Map<String, Object> params = new LinkedHashMap<>();\n        params.put(\"key1\", \"value with spaces\");\n        params.put(\"key2\", \"value&with&special&chars\");\n        String expected = \"key1=value%20with%20spaces&key2=value%26with%26special%26chars\";\n        assertEquals(expected, UrlBuilder.joinQueryParameters(sb, params).toString());\n    }\n\n    @Test\n    public void testJoinQueryParametersWithDoubleValue() {\n        StringBuilder sb = new StringBuilder();\n        Map<String, Object> params = new LinkedHashMap<>();\n        params.put(\"key1\", 123.456);\n        String expected = \"key1=123.456\";\n        assertEquals(expected, UrlBuilder.joinQueryParameters(sb, params).toString());\n    }\n}\n"}]