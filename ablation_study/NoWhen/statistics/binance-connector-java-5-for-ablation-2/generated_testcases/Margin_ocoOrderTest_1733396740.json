[{"strategy": "retry", "code": "\npackage com.binance.connector.client.impl.spot;\n\nimport static org.junit.Assert.assertEquals;\nimport java.util.LinkedHashMap;\nimport java.util.Map;\nimport org.junit.Before;\nimport org.junit.Test;\nimport com.binance.connector.client.SpotClient;\nimport com.binance.connector.client.enums.HttpMethod;\nimport com.binance.connector.client.exceptions.BinanceConnectorException;\nimport com.binance.connector.client.impl.SpotClientImpl;\nimport okhttp3.mockwebserver.Dispatcher;\nimport okhttp3.mockwebserver.MockWebServer;\nimport unit.MockData;\nimport unit.MockWebServerDispatcher;\n\npublic class Margin_ocoOrderTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testOcoOrderSuccess() {\n        String path = \"/sapi/v1/margin/order/oco?symbol=BNBUSDT&side=BUY&quantity=1&price=50000&stopPrice=49000\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"side\", \"BUY\");\n        parameters.put(\"quantity\", 1);\n        parameters.put(\"price\", 50000);\n        parameters.put(\"stopPrice\", 49000);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        Margin margin = new Margin(baseUrl, MockData.API_KEY, MockData.SECRET_KEY, true, null);\n        String result = margin.ocoOrder(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testOcoOrderMissingParameter() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"side\", \"BUY\");\n        parameters.put(\"quantity\", 1);\n        parameters.put(\"price\", 50000);\n\n        Margin margin = new Margin(baseUrl, MockData.API_KEY, MockData.SECRET_KEY, true, null);\n        try {\n            margin.ocoOrder(parameters);\n        } catch (BinanceConnectorException e) {\n            assertEquals(\"Missing mandatory parameter: stopPrice\", e.getMessage());\n        }\n    }\n}\n"}]