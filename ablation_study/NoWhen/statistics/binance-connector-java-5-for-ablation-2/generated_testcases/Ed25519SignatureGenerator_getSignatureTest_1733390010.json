[{"strategy": "retry", "code": "\npackage com.binance.connector.client.utils.signaturegenerator;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.bouncycastle.crypto.params.Ed25519PrivateKeyParameters;\nimport org.bouncycastle.crypto.signers.Ed25519Signer;\nimport org.mockito.Mockito;\n\nimport java.nio.charset.StandardCharsets;\nimport java.util.Base64;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.mockito.Mockito.*;\n\npublic class Ed25519SignatureGenerator_getSignatureTest {\n\n    private Ed25519SignatureGenerator signatureGenerator;\n    private Ed25519PrivateKeyParameters mockPrivateKey;\n\n    @Before\n    public void setUp() throws Exception {\n        mockPrivateKey = mock(Ed25519PrivateKeyParameters.class);\n        signatureGenerator = Mockito.spy(new Ed25519SignatureGenerator(\"dummyPrivateKeyPath\"));\n        doReturn(mockPrivateKey).when(signatureGenerator).getPrivateKey();\n    }\n\n    @Test\n    public void testGetSignature() {\n        String data = \"testData\";\n        byte[] dataBytes = data.getBytes(StandardCharsets.UTF_8);\n\n        Ed25519Signer mockSigner = mock(Ed25519Signer.class);\n        byte[] mockSignatureBytes = \"mockSignature\".getBytes(StandardCharsets.UTF_8);\n        when(mockSigner.generateSignature()).thenReturn(mockSignatureBytes);\n\n        doAnswer(invocation -> {\n            Ed25519Signer signer = invocation.getArgument(0);\n            signer.init(true, mockPrivateKey);\n            signer.update(dataBytes, 0, dataBytes.length);\n            return null;\n        }).when(signatureGenerator).signData(any(Ed25519Signer.class), eq(dataBytes));\n\n        String expectedSignature = Base64.getEncoder().encodeToString(mockSignatureBytes);\n\n        String actualSignature = signatureGenerator.getSignature(data);\n\n        assertEquals(expectedSignature, actualSignature);\n    }\n}\n"}]