[{"strategy": "generate", "code": "\npackage com.binance.connector.client.impl.spot;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertThrows;\n\nimport java.util.ArrayList;\nimport java.util.LinkedHashMap;\nimport java.util.Map;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport com.binance.connector.client.enums.HttpMethod;\nimport com.binance.connector.client.exceptions.BinanceConnectorException;\nimport com.binance.connector.client.utils.UrlBuilder;\n\nimport okhttp3.mockwebserver.Dispatcher;\nimport okhttp3.mockwebserver.MockWebServer;\nimport unit.MockData;\nimport unit.MockWebServerDispatcher;\n\npublic class Market_exchangeInfoTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testExchangeInfoWithSymbol() {\n        String path = \"/api/v3/exchangeInfo?symbol=BNBUSDT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        Market market = new Market(baseUrl, null, false, null);\n        String result = market.exchangeInfo(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testExchangeInfoWithSymbols() {\n        String path = String.format(\"/api/v3/exchangeInfo?symbols=%s\",\n                UrlBuilder.urlEncode(\"[\\\"BNBUSDT\\\",\\\"BTCUSDT\\\"]\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        ArrayList<String> symbols = new ArrayList<>();\n        symbols.add(\"BNBUSDT\");\n        symbols.add(\"BTCUSDT\");\n        parameters.put(\"symbols\", symbols);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        Market market = new Market(baseUrl, null, false, null);\n        String result = market.exchangeInfo(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testExchangeInfoWithPermissions() {\n        String path = String.format(\"/api/v3/exchangeInfo?permissions=%s\",\n                UrlBuilder.urlEncode(\"[\\\"SPOT\\\",\\\"MARGIN\\\"]\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        ArrayList<String> permissions = new ArrayList<>();\n        permissions.add(\"SPOT\");\n        permissions.add(\"MARGIN\");\n        parameters.put(\"permissions\", permissions);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        Market market = new Market(baseUrl, null, false, null);\n        String result = market.exchangeInfo(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testExchangeInfoWithSymbolAndSymbols() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"symbols\", new ArrayList<String>());\n\n        Market market = new Market(baseUrl, null, false, null);\n        assertThrows(BinanceConnectorException.class, () -> market.exchangeInfo(parameters));\n    }\n\n    @Test\n    public void testExchangeInfoWithSymbolAndPermissions() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"permissions\", new ArrayList<String>());\n\n        Market market = new Market(baseUrl, null, false, null);\n        assertThrows(BinanceConnectorException.class, () -> market.exchangeInfo(parameters));\n    }\n\n    @Test\n    public void testExchangeInfoWithSymbolsAndPermissions() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbols\", new ArrayList<String>());\n        parameters.put(\"permissions\", new ArrayList<String>());\n\n        Market market = new Market(baseUrl, null, false, null);\n        assertThrows(BinanceConnectorException.class, () -> market.exchangeInfo(parameters));\n    }\n}\n"}]