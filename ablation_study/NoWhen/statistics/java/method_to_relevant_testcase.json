{"match(String)": [{"class_name": "TreeRegexp", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ArgumentTest.java", "testclass_name": "ArgumentTest", "testcase_name": "exposes_parameter_type"}], "lookupByTypeName(String)": [{"class_name": "ParameterTypeRegistry", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ArgumentTest.java", "testclass_name": "ArgumentTest", "testcase_name": "exposes_parameter_type"}], "getParameterType()": [{"class_name": "Argument", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ArgumentTest.java", "testclass_name": "ArgumentTest", "testcase_name": "exposes_parameter_type"}], ")": [{"class_name": "CaptureGroupTransformer", "file_path": "src/test/java/io/cucumber/cucumberexpressions/GenericParameterTypeTest.java", "testclass_name": "GenericParameterTypeTest", "testcase_name": "transforms_to_a_list_of_string"}], "getDefaultParameterTransformer()": [{"class_name": "ParameterTypeRegistry", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ParameterTypeRegistry_setDefaultParameterTransformerTest.java", "testclass_name": "ParameterTypeRegistry_setDefaultParameterTransformerTest", "testcase_name": "testSetDefaultParameterTransformer"}], "getName()": [{"class_name": "ParameterType", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ParameterTypeComparatorTest.java", "testclass_name": "ParameterTypeComparatorTest", "testcase_name": "sorts_parameter_types_by_preferential_then_name"}], "getSource()": [{"class_name": "GeneratedExpression", "file_path": "src/test/java/io/cucumber/cucumberexpressions/CombinatorialGeneratedExpressionFactoryTest.java", "testclass_name": "CombinatorialGeneratedExpressionFactoryTest", "testcase_name": "generates_multiple_expressions"}, {"class_name": "GroupBuilder", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "exposes_group_source"}], "toNode()": [{"class_name": "YamlableNode", "file_path": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionParserTest.java", "testclass_name": "CucumberExpressionParserTest", "testcase_name": "acceptance_tests_pass"}], "toToken()": [{"class_name": "YamlableToken", "file_path": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionTokenizerTest.java", "testclass_name": "CucumberExpressionTokenizerTest", "testcase_name": "acceptance_tests_pass"}], "getTestCompiler()": [{"class_name": "PatternCompilerProviderTest", "file_path": "src/test/java/io/cucumber/cucumberexpressions/PatternCompilerProviderTest.java", "testclass_name": "PatternCompilerProviderTest", "testcase_name": "use_found_pattern_compiler_if_one_provided"}, {"class_name": "PatternCompilerProviderTest", "file_path": "src/test/java/io/cucumber/cucumberexpressions/PatternCompilerProviderTest.java", "testclass_name": "PatternCompilerProviderTest", "testcase_name": "throws_error_if_more_than_one_pattern_compiler"}], "getAvailableLocalesAsStream()": [{"class_name": "getAvailableLocalesAsStream()", "file_path": "src/test/java/io/cucumber/cucumberexpressions/KeyboardFriendlyDecimalFormatSymbolsTest.java", "testclass_name": "KeyboardFriendlyDecimalFormatSymbolsTest", "testcase_name": "listMinusSigns"}, {"class_name": "getAvailableLocalesAsStream()", "file_path": "src/test/java/io/cucumber/cucumberexpressions/KeyboardFriendlyDecimalFormatSymbolsTest.java", "testclass_name": "KeyboardFriendlyDecimalFormatSymbolsTest", "testcase_name": "listDecimalAndGroupingSeparators"}, {"class_name": "getAvailableLocalesAsStream()", "file_path": "src/test/java/io/cucumber/cucumberexpressions/KeyboardFriendlyDecimalFormatSymbolsTest.java", "testclass_name": "KeyboardFriendlyDecimalFormatSymbolsTest", "testcase_name": "listExponentSigns"}], "render(Character)": [{"class_name": "render(Character)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/KeyboardFriendlyDecimalFormatSymbolsTest.java", "testclass_name": "KeyboardFriendlyDecimalFormatSymbolsTest", "testcase_name": "listMinusSigns"}, {"class_name": "render(Character)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/KeyboardFriendlyDecimalFormatSymbolsTest.java", "testclass_name": "KeyboardFriendlyDecimalFormatSymbolsTest", "testcase_name": "listDecimalAndGroupingSeparators"}, {"class_name": "render(Character)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/KeyboardFriendlyDecimalFormatSymbolsTest.java", "testclass_name": "KeyboardFriendlyDecimalFormatSymbolsTest", "testcase_name": "listExponentSigns"}], "render(List<Locale>)": [{"class_name": "render(List<Locale>)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/KeyboardFriendlyDecimalFormatSymbolsTest.java", "testclass_name": "KeyboardFriendlyDecimalFormatSymbolsTest", "testcase_name": "listMinusSigns"}, {"class_name": "render(List<Locale>)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/KeyboardFriendlyDecimalFormatSymbolsTest.java", "testclass_name": "KeyboardFriendlyDecimalFormatSymbolsTest", "testcase_name": "listDecimalAndGroupingSeparators"}, {"class_name": "render(List<Locale>)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/KeyboardFriendlyDecimalFormatSymbolsTest.java", "testclass_name": "KeyboardFriendlyDecimalFormatSymbolsTest", "testcase_name": "listExponentSigns"}], "equalOrCloseTo(List<?>)": [{"class_name": "CustomMatchers", "file_path": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionTest.java", "testclass_name": "CucumberExpressionTest", "testcase_name": "acceptance_tests_pass"}], "<init>(String)": [{"class_name": "Color", "file_path": "src/test/java/io/cucumber/cucumberexpressions/CustomParameterTypeTest.java", "testclass_name": "CustomParameterTypeTest", "testcase_name": "matches_CucumberExpression_parameters_with_custom_parameter_type"}, {"class_name": "Color", "file_path": "src/test/java/io/cucumber/cucumberexpressions/CustomParameterTypeTest.java", "testclass_name": "CustomParameterTypeTest", "testcase_name": "matches_CucumberExpression_parameters_with_custom_parameter_type_using_optional_group"}, {"class_name": "CssColor", "file_path": "src/test/java/io/cucumber/cucumberexpressions/CustomParameterTypeTest.java", "testclass_name": "CustomParameterTypeTest", "testcase_name": "conflicting_parameter_type_is_not_detected_for_regexp"}, {"class_name": "Color", "file_path": "src/test/java/io/cucumber/cucumberexpressions/CustomParameterTypeTest.java", "testclass_name": "CustomParameterTypeTest", "testcase_name": "conflicting_parameter_type_is_not_detected_for_regexp"}, {"class_name": "Color", "file_path": "src/test/java/io/cucumber/cucumberexpressions/CustomParameterTypeTest.java", "testclass_name": "CustomParameterTypeTest", "testcase_name": "matches_RegularExpression_arguments_with_custom_parameter_type_without_name"}], "<init>(int,int,int)": [{"class_name": "Coordinate", "file_path": "src/test/java/io/cucumber/cucumberexpressions/CustomParameterTypeTest.java", "testclass_name": "CustomParameterTypeTest", "testcase_name": "matches_CucumberExpression_parameters_with_multiple_capture_groups"}], "transform(String)": [{"class_name": "Transformer", "file_path": "src/test/java/io/cucumber/cucumberexpressions/CustomParameterTypeTest.java", "testclass_name": "CustomParameterTypeTest", "testcase_name": "warns_when_CucumberExpression_parameters_with_multiple_capture_groups_has_a_transformer"}, {"class_name": "Transformer", "file_path": "src/test/java/io/cucumber/cucumberexpressions/CustomParameterTypeTest.java", "testclass_name": "CustomParameterTypeTest", "testcase_name": "defers_transformation_until_queried_from_argument"}], "assertCucumberExpression(String)": [{"class_name": "ExpressionFactoryTest", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactoryTest.java", "testclass_name": "ExpressionFactoryTest", "testcase_name": "creates_cucumber_expression_for_empty"}, {"class_name": "ExpressionFactoryTest", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactoryTest.java", "testclass_name": "ExpressionFactoryTest", "testcase_name": "creates_cucumber_expression_by_default"}, {"class_name": "ExpressionFactoryTest", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactoryTest.java", "testclass_name": "ExpressionFactoryTest", "testcase_name": "creates_cucumber_expression_for_parenthesis_with_alpha"}, {"class_name": "ExpressionFactoryTest", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactoryTest.java", "testclass_name": "ExpressionFactoryTest", "testcase_name": "creates_cucumber_expression_for_escaped_parenthesis_with_regex_symbols"}, {"class_name": "ExpressionFactoryTest", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactoryTest.java", "testclass_name": "ExpressionFactoryTest", "testcase_name": "creates_cucumber_expression_for_escaped_parenthesis_with_alpha"}, {"class_name": "ExpressionFactoryTest", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactoryTest.java", "testclass_name": "ExpressionFactoryTest", "testcase_name": "creates_cucumber_expression_for_parenthesis_with_regex_symbols"}], "assertRegularExpression(String)": [{"class_name": "ExpressionFactoryTest", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactoryTest.java", "testclass_name": "ExpressionFactoryTest", "testcase_name": "creates_regular_expression_for_anchors"}, {"class_name": "ExpressionFactoryTest", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactoryTest.java", "testclass_name": "ExpressionFactoryTest", "testcase_name": "creates_cucumber_expression_for_only_begin_anchor"}, {"class_name": "ExpressionFactoryTest", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactoryTest.java", "testclass_name": "ExpressionFactoryTest", "testcase_name": "creates_cucumber_expression_for_only_end_anchor"}], "assertRegularExpression(String,String)": [{"class_name": "ExpressionFactoryTest", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactoryTest.java", "testclass_name": "ExpressionFactoryTest", "testcase_name": "creates_regular_expression_for_slashes"}, {"class_name": "ExpressionFactoryTest", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactoryTest.java", "testclass_name": "ExpressionFactoryTest", "testcase_name": "creates_regular_expression_for_slashed_anchors"}], "assertThrows(Class<T>,Executable)": [{"class_name": "ExpressionFactoryTest", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactoryTest.java", "testclass_name": "ExpressionFactoryTest", "testcase_name": "explains_cukexp_regexp_mix"}], "getChildren()": [{"class_name": "Group", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "builds_tree"}, {"class_name": "Group", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "ignores_question_mark_colon_non_capturing_group"}, {"class_name": "Group", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "ignores_question_mark_exclamation_mark_non_capturing_group"}, {"class_name": "Group", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "ignores_question_mark_equal_sign_non_capturing_group"}, {"class_name": "Group", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "ignores_question_mark_less_than_equal_sign_non_capturing_group"}, {"class_name": "Group", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "ignores_question_mark_less_than_exclamation_mark_non_capturing_group"}, {"class_name": "Group", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "ignores_question_mark_greater_then_non_capturing_group"}, {"class_name": "Group", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "matches_named_capturing_group"}, {"class_name": "Group", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "matches_optional_group"}, {"class_name": "Group", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "matches_nested_groups"}, {"class_name": "Group", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "captures_non_capturing_groups_with_capturing_groups_inside"}, {"class_name": "Group", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "detects_multiple_non_capturing_groups"}, {"class_name": "Group", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "works_with_escaped_backslash"}, {"class_name": "Group", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "works_with_slash_which_doesnt_need_escaping_in_java"}, {"class_name": "Group", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "works_digit_and_word"}, {"class_name": "Group", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "captures_start_and_end"}, {"class_name": "Group", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "doesnt_consider_parenthesis_in_character_class_as_group"}, {"class_name": "Group", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "works_with_inline_flags"}, {"class_name": "Group", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "works_with_non_capturing_inline_flags"}, {"class_name": "Group", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "empty_capturing_group"}, {"class_name": "Group", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "empty_non_capturing_group"}, {"class_name": "Group", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "empty_look_ahead"}], "getValue()": [{"class_name": "Group", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "builds_tree"}, {"class_name": "Group", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "ignores_question_mark_colon_non_capturing_group"}, {"class_name": "Group", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "ignores_question_mark_exclamation_mark_non_capturing_group"}, {"class_name": "Group", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "ignores_question_mark_equal_sign_non_capturing_group"}, {"class_name": "Group", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "ignores_question_mark_less_than_equal_sign_non_capturing_group"}, {"class_name": "Group", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "ignores_question_mark_less_than_exclamation_mark_non_capturing_group"}, {"class_name": "Group", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "ignores_question_mark_greater_then_non_capturing_group"}, {"class_name": "Group", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "matches_named_capturing_group"}, {"class_name": "Group", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "matches_optional_group"}, {"class_name": "Group", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "matches_nested_groups"}, {"class_name": "Group", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "captures_non_capturing_groups_with_capturing_groups_inside"}, {"class_name": "Group", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "doesnt_consider_parenthesis_in_character_class_as_group"}, {"class_name": "Group", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "works_with_flags"}, {"class_name": "Group", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "works_with_inline_flags"}, {"class_name": "Group", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "works_with_non_capturing_inline_flags"}, {"class_name": "Group", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "empty_capturing_group"}, {"class_name": "Group", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "empty_non_capturing_group"}, {"class_name": "Group", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "empty_look_ahead"}, {"class_name": "Group", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "uses_loaded_pattern_compiler_service"}], "getStart()": [{"class_name": "Group", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "captures_start_and_end"}], "getEnd()": [{"class_name": "Group", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "captures_start_and_end"}]}