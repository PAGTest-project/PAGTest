[{"file_path": "src/test/java/io/cucumber/cucumberexpressions/ParameterType_getNameTest.java", "testclass_name": "ParameterType_getNameTest", "dependencies": ["package io.cucumber.cucumberexpressions;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "ParameterType_getNameTest", "description": "Unit test for the getName method of the ParameterType class.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testGetName", "primary_tested": ["ParameterType.getName()"], "external_dependencies": {"modules": ["ParameterType"]}, "category": "unit", "description": "Tests the getName method of the ParameterType class to ensure it returns the correct name."}]}, {"file_path": "src/test/java/io/cucumber/cucumberexpressions/RegularExpression_getSourceTest.java", "testclass_name": "RegularExpression_getSourceTest", "dependencies": ["package io.cucumber.cucumberexpressions;", "import org.junit.jupiter.api.Test;", "import java.util.regex.Pattern;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "RegularExpression_getSourceTest", "description": "Unit test for the getSource method of the RegularExpression class.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testGetSource", "primary_tested": ["RegularExpression.getSource()"], "external_dependencies": {"modules": ["Pattern", "ParameterTypeRegistry", "RegularExpression"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the getSource method of the RegularExpression class to ensure it returns the correct source string."}]}, {"file_path": "src/test/java/io/cucumber/cucumberexpressions/RegularExpression_getRegexpTest.java", "testclass_name": "RegularExpression_getRegexpTest", "dependencies": ["package io.cucumber.cucumberexpressions;", "import org.junit.jupiter.api.Test;", "import java.util.regex.Pattern;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "RegularExpression_getRegexpTest", "description": "Unit test for the getRegexp method of the RegularExpression class.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testGetRegexp", "primary_tested": ["RegularExpression.getRegexp()"], "external_dependencies": {"modules": ["Pattern", "ParameterTypeRegistry", "RegularExpression"]}, "category": "unit", "description": "Tests the getRegexp method of the RegularExpression class to ensure it returns the expected Pattern."}]}, {"file_path": "src/test/java/io/cucumber/cucumberexpressions/ParameterType_getRegexpsTest.java", "testclass_name": "ParameterType_getRegexpsTest", "dependencies": ["package io.cucumber.cucumberexpressions;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "ParameterType_getRegexpsTest", "description": "Unit test for the getRegexps method of the ParameterType class.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testGetRegexps", "primary_tested": ["ParameterType.getRegexps()"], "external_dependencies": {"modules": ["ParameterType", "Arrays", "List"]}, "category": "unit", "description": "Tests the getRegexps method of the ParameterType class to ensure it returns the correct list of regex patterns."}]}, {"file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexp_getGroupBuilderTest.java", "testclass_name": "TreeRegexp_getGroupBuilderTest", "dependencies": ["package io.cucumber.cucumberexpressions;", "import org.junit.jupiter.api.Test;", "import java.util.regex.Pattern;", "import static org.junit.jupiter.api.Assertions.assertNotNull;"], "name": "TreeRegexp_getGroupBuilderTest", "description": "Unit test for the getGroupBuilder method of the TreeRegexp class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testGetGroupBuilder", "primary_tested": ["TreeRegexp.getGroupBuilder()"], "external_dependencies": {"modules": ["Pattern", "TreeRegexp", "GroupBuilder"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the getGroupBuilder method of the TreeRegexp class to ensure it returns a non-null GroupBuilder instance."}]}, {"file_path": "src/test/java/io/cucumber/cucumberexpressions/ArgumentTest.java", "testclass_name": "ArgumentTest", "dependencies": ["package io.cucumber.cucumberexpressions;", "import org.junit.jupiter.api.Test;", "import java.util.List;", "import java.util.Locale;", "import static java.util.Collections.singletonList;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "ArgumentTest", "description": "Tests for the Argument class, focusing on parameter type exposure.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "exposes_parameter_type", "primary_tested": ["Argument.build(List<Group>,List<ParameterType<?>>)"], "associated_methods": ["TreeRegexp.match(String)", "ParameterTypeRegistry.lookupByTypeName(String)", "Argument.getParameterType()"], "external_dependencies": {"modules": ["TreeRegexp", "ParameterTypeRegistry", "Argument", "Locale"], "project_specific_resources": ["Collections.singletonList(ParameterTypeRegistry)"]}, "category": "unit", "description": "Tests if the Argument class correctly exposes the parameter type."}]}, {"file_path": "src/test/java/io/cucumber/cucumberexpressions/ParameterType_weightTest.java", "testclass_name": "ParameterType_weightTest", "dependencies": ["package io.cucumber.cucumberexpressions;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "ParameterType_weightTest", "description": "Unit tests for the weight method of the ParameterType class.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testWeightForIntegerClass", "primary_tested": ["ParameterType.weight()"], "external_dependencies": {"modules": ["ParameterType", "Integer"]}, "category": "unit", "description": "Tests the weight method of ParameterType for Integer class."}, {"name": "testWeightForNonIntegerType", "primary_tested": ["ParameterType.weight()"], "external_dependencies": {"modules": ["ParameterType", "String"]}, "category": "unit", "description": "Tests the weight method of ParameterType for non-Integer types."}]}, {"file_path": "src/test/java/io/cucumber/cucumberexpressions/ParameterType_getTypeTest.java", "testclass_name": "ParameterType_getTypeTest", "dependencies": ["package io.cucumber.cucumberexpressions;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.lang.reflect.Type;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "ParameterType_getTypeTest", "description": "Unit tests for the getType method of the ParameterType class.", "class_members": {"variables": [{"name": "parameterType", "type": "ParameterType<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "getType_returnsCorrectType", "primary_tested": ["ParameterType.getType()"], "external_dependencies": {"modules": ["ParameterType", "Type"], "class_members": [{"name": "parameterType", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the getType method of ParameterType returns the correct type."}]}, {"file_path": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpression_getSourceTest.java", "testclass_name": "CucumberExpression_getSourceTest", "dependencies": ["package io.cucumber.cucumberexpressions;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import java.util.Locale;"], "name": "CucumberExpression_getSourceTest", "description": "Unit tests for the getSource method of the CucumberExpression class.", "class_members": {"variables": [{"name": "parameterTypeRegistry", "type": "ParameterTypeRegistry"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetSource", "primary_tested": ["CucumberExpression.getSource()"], "external_dependencies": {"modules": ["ParameterTypeRegistry", "CucumberExpression"], "class_members": [{"name": "parameterTypeRegistry", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getSource method of the CucumberExpression class to ensure it returns the correct expression string."}]}, {"file_path": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpression_getRegexpTest.java", "testclass_name": "CucumberExpression_getRegexpTest", "dependencies": ["package io.cucumber.cucumberexpressions;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.Locale;", "import java.util.regex.Pattern;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "CucumberExpression_getRegexpTest", "description": "Unit tests for the getRegexp method of the CucumberExpression class.", "class_members": {"variables": [{"name": "parameterTypeRegistry", "type": "ParameterTypeRegistry"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetRegexp", "primary_tested": ["CucumberExpression.getRegexp()"], "external_dependencies": {"modules": ["ParameterTypeRegistry", "CucumberExpression", "Pattern"], "class_members": [{"name": "parameterTypeRegistry", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getRegexp method of the CucumberExpression class to ensure it returns the correct pattern."}]}, {"file_path": "src/test/java/io/cucumber/cucumberexpressions/EnumParameterTypeTest.java", "testclass_name": "EnumParameterTypeTest", "dependencies": ["package io.cucumber.cucumberexpressions;", "import org.junit.jupiter.api.Test;", "import java.util.List;", "import java.util.Locale;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "EnumParameterTypeTest", "description": "Tests the conversion of strings to enum values using Cucumber expressions.", "class_members": {"variables": [], "methods": [], "nested_classes": [{"name": "Mood", "description": "Enum representing different moods"}]}, "fixtures": [], "test_cases": [{"name": "converts_to_enum", "primary_tested": ["ParameterTypeRegistry.defineParameterType(ParameterType)", "CucumberExpression.match(String)"], "associated_methods": [], "external_dependencies": {"modules": ["ParameterTypeRegistry", "ParameterType", "CucumberExpression", "Argument", "Locale"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the conversion of a string 'happy' to the enum value Mood.happy using a Cucumber expression."}]}, {"file_path": "src/test/java/io/cucumber/cucumberexpressions/GenericParameterTypeTest.java", "testclass_name": "GenericParameterTypeTest", "dependencies": ["package io.cucumber.cucumberexpressions;", "import org.junit.jupiter.api.Test;", "import java.util.List;", "import java.util.Locale;", "import static java.util.Arrays.asList;", "import static java.util.Collections.singletonList;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "GenericParameterTypeTest", "description": "Tests the transformation of a parameter type to a list of strings using Cucumber Expressions.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "transforms_to_a_list_of_string", "primary_tested": ["ParameterTypeRegistry.defineParameterType(ParameterType)", "CucumberExpression.match(String)"], "associated_methods": ["CaptureGroupTransformer.transform(String...)"], "external_dependencies": {"modules": ["ParameterTypeRegistry", "ParameterType", "TypeReference", "CaptureGroupTransformer", "CucumberExpression", "Argument", "List", "Locale", "java.util.Arrays", "java.util.Collections"], "project_specific_resources": ["java.util.Arrays.asList(Object[])", "java.util.Collections.singletonList(Object)"]}, "category": "unit", "description": "Tests the transformation of a parameter type to a list of strings using Cucumber Expressions."}]}, {"file_path": "src/test/java/io/cucumber/cucumberexpressions/ParameterType_preferForRegexpMatchTest.java", "testclass_name": "ParameterType_preferForRegexpMatchTest", "dependencies": ["package io.cucumber.cucumberexpressions;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static java.util.Collections.singletonList;"], "name": "ParameterType_preferForRegexpMatchTest", "description": "Tests for the preferForRegexpMatch method in the ParameterType class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testPreferForRegexpMatch_True", "primary_tested": ["ParameterType.preferForRegexpMatch()"], "external_dependencies": {"modules": ["ParameterType", "CaptureGroupTransformer"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the preferForRegexpMatch method returns true when configured to do so."}, {"name": "testPreferForRegexpMatch_False", "primary_tested": ["ParameterType.preferForRegexpMatch()"], "external_dependencies": {"modules": ["ParameterType", "CaptureGroupTransformer"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the preferForRegexpMatch method returns false when configured to do so."}]}, {"file_path": "src/test/java/io/cucumber/cucumberexpressions/ParameterType_useRegexpMatchAsStrongTypeHintTest.java", "testclass_name": "ParameterType_useRegexpMatchAsStrongTypeHintTest", "dependencies": ["package io.cucumber.cucumberexpressions;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static java.util.Collections.singletonList;"], "name": "ParameterType_useRegexpMatchAsStrongTypeHintTest", "description": "Tests for the useRegexpMatchAsStrongTypeHint method in the ParameterType class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testUseRegexpMatchAsStrongTypeHintTrue", "primary_tested": ["ParameterType.useRegexpMatchAsStrongTypeHint()"], "external_dependencies": {"modules": ["ParameterType", "CaptureGroupTransformer", "Object"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the useRegexpMatchAsStrongTypeHint method returns true when the flag is set to true."}, {"name": "testUseRegexpMatchAsStrongTypeHintFalse", "primary_tested": ["ParameterType.useRegexpMatchAsStrongTypeHint()"], "external_dependencies": {"modules": ["ParameterType", "CaptureGroupTransformer", "Object"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the useRegexpMatchAsStrongTypeHint method returns false when the flag is set to false."}]}, {"file_path": "src/test/java/io/cucumber/cucumberexpressions/ParameterTypeRegistry_setDefaultParameterTransformerTest.java", "testclass_name": "ParameterTypeRegistry_setDefaultParameterTransformerTest", "dependencies": ["package io.cucumber.cucumberexpressions;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import java.util.Locale;", "import java.lang.reflect.Type;"], "name": "ParameterTypeRegistry_setDefaultParameterTransformerTest", "description": "Unit tests for setting the default parameter transformer in ParameterTypeRegistry.", "class_members": {"variables": [{"name": "parameterTypeRegistry", "type": "ParameterTypeRegistry"}, {"name": "mockTransformer", "type": "ParameterByTypeTransformer"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testSetDefaultParameterTransformer", "primary_tested": ["ParameterTypeRegistry.setDefaultParameterTransformer(ParameterByTypeTransformer)"], "associated_methods": ["ParameterTypeRegistry.getDefaultParameterTransformer()"], "external_dependencies": {"modules": ["ParameterTypeRegistry", "ParameterByTypeTransformer"], "class_members": [{"name": "parameterTypeRegistry", "type": "variable"}, {"name": "mockTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the functionality of setting the default parameter transformer in ParameterTypeRegistry and verifies that the transformer is correctly set."}]}, {"file_path": "src/test/java/io/cucumber/cucumberexpressions/RegexpUtils_escapeRegexTest.java", "testclass_name": "RegexpUtils_escapeRegexTest", "dependencies": ["package io.cucumber.cucumberexpressions;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "RegexpUtils_escapeRegexTest", "description": "Unit tests for the RegexpUtils.escapeRegex method, which escapes special characters in a string for use in a regular expression.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testEscapeRegex_NoSpecialChars", "primary_tested": ["RegexpUtils.escapeRegex(String)"], "external_dependencies": {"modules": ["RegexpUtils"]}, "category": "unit", "description": "Tests the escapeRegex method with a string containing no special characters."}, {"name": "testEscapeRegex_WithSpecialChars", "primary_tested": ["RegexpUtils.escapeRegex(String)"], "external_dependencies": {"modules": ["RegexpUtils"]}, "category": "unit", "description": "Tests the escapeRegex method with a string containing special characters that need to be escaped."}, {"name": "testEscapeRegex_AllSpecialChars", "primary_tested": ["RegexpUtils.escapeRegex(String)"], "external_dependencies": {"modules": ["RegexpUtils"]}, "category": "unit", "description": "Tests the escapeRegex method with a string containing all special characters that need to be escaped."}]}, {"file_path": "src/test/java/io/cucumber/cucumberexpressions/ParameterType_useForSnippetsTest.java", "testclass_name": "ParameterType_useForSnippetsTest", "dependencies": ["package io.cucumber.cucumberexpressions;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "ParameterType_useForSnippetsTest", "description": "Tests for the useForSnippets functionality of the ParameterType class.", "class_members": {"variables": [{"name": "parameterType", "type": "ParameterType<?>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testUseForSnippetsTrue", "primary_tested": ["ParameterType.useForSnippets()"], "external_dependencies": {"modules": ["ParameterType"], "class_members": [{"name": "parameterType", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the useForSnippets method returns true when configured to do so."}, {"name": "testUseForSnippetsFalse", "primary_tested": ["ParameterType.useForSnippets()"], "external_dependencies": {"modules": ["ParameterType"], "class_members": [{"name": "parameterTypeFalse", "type": "variable"}]}, "category": "unit", "description": "Tests that the useForSnippets method returns false when configured to do so."}]}, {"file_path": "src/test/java/io/cucumber/cucumberexpressions/ParameterTypeComparatorTest.java", "testclass_name": "ParameterTypeComparatorTest", "dependencies": ["package io.cucumber.cucumberexpressions;", "import org.junit.jupiter.api.Test;", "import java.util.ArrayList;", "import java.util.List;", "import java.util.SortedSet;", "import java.util.TreeSet;", "import static java.util.Arrays.asList;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNotNull;"], "name": "ParameterTypeComparatorTest", "description": "Tests the sorting of parameter types by preferential order and name.", "class_members": {"nested_classes": [{"name": "A", "description": "Internal class with a constructor that asserts the non-nullity of a string parameter."}, {"name": "B", "description": "Internal class with a constructor that asserts the non-nullity of a string parameter."}, {"name": "C", "description": "Internal class with a constructor that asserts the non-nullity of a string parameter."}, {"name": "D", "description": "Internal class with a constructor that asserts the non-nullity of a string parameter."}]}, "test_cases": [{"name": "sorts_parameter_types_by_preferential_then_name", "primary_tested": ["TreeSet.add(ParameterType)", "TreeSet.iterator()"], "associated_methods": ["ParameterType.getName()"], "external_dependencies": {"modules": ["java.util.SortedSet", "java.util.TreeSet", "java.util.ArrayList", "java.util.List", "java.util.Arrays", "org.junit.jupiter.api.Assertions"], "project_specific_resources": ["ParameterType"]}, "category": "unit", "description": "Tests the sorting of parameter types in a TreeSet by their preferential order and name."}]}, {"file_path": "src/test/java/io/cucumber/cucumberexpressions/CombinatorialGeneratedExpressionFactoryTest.java", "testclass_name": "CombinatorialGeneratedExpressionFactoryTest", "dependencies": ["package io.cucumber.cucumberexpressions;", "import org.junit.jupiter.api.Test;", "import java.util.ArrayList;", "import java.util.List;", "import static java.util.Arrays.asList;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNotNull;"], "name": "CombinatorialGeneratedExpressionFactoryTest", "description": "Tests the generation of multiple expressions using CombinatorialGeneratedExpressionFactory.", "class_members": {"variables": [{"name": "WORD", "type": "static final String"}], "nested_classes": [{"name": "Color", "description": "Internal class representing a color"}, {"name": "CssColor", "description": "Internal class representing a CSS color"}, {"name": "Date", "description": "Internal class representing a date"}, {"name": "DateTime", "description": "Internal class representing a date and time"}, {"name": "Timestamp", "description": "Internal class representing a timestamp"}]}, "test_cases": [{"name": "generates_multiple_expressions", "primary_tested": ["CombinatorialGeneratedExpressionFactory.generateExpressions()"], "associated_methods": ["GeneratedExpression.getSource()"], "external_dependencies": {"modules": ["ParameterType", "Color", "CssColor", "Date", "DateTime", "Timestamp", "CombinatorialGeneratedExpressionFactory", "GeneratedExpression"], "class_members": [{"name": "WORD", "type": "variable"}], "project_specific_resources": ["Arrays.asList(List,List)"]}, "category": "unit", "description": "Tests the generation of multiple expressions by CombinatorialGeneratedExpressionFactory."}]}, {"file_path": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionTransformationTest.java", "testclass_name": "CucumberExpressionTransformationTest", "dependencies": ["package io.cucumber.cucumberexpressions;", "import org.junit.jupiter.api.extension.ParameterContext;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.converter.ArgumentConversionException;", "import org.junit.jupiter.params.converter.ArgumentConverter;", "import org.junit.jupiter.params.converter.ConvertWith;", "import org.junit.jupiter.params.provider.MethodSource;", "import org.yaml.snakeyaml.Yaml;", "import java.io.IOException;", "import java.io.InputStream;", "import java.nio.file.Path;", "import java.nio.file.Paths;", "import java.util.ArrayList;", "import java.util.Comparator;", "import java.util.List;", "import java.util.Locale;", "import static java.nio.file.Files.newDirectoryStream;", "import static java.nio.file.Files.newInputStream;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "CucumberExpressionTransformationTest", "description": "Tests for the transformation functionality of Cucumber expressions.", "class_members": {"variables": [{"name": "parameterTypeRegistry", "type": "ParameterTypeRegistry"}], "methods": [{"name": "acceptance_tests_pass", "signature": "List<Path> acceptance_tests_pass() throws IOException"}], "nested_classes": [{"name": "Expectation", "description": "Internal class representing the expected outcome of a Cucumber expression test."}, {"name": "Converter", "description": "Internal class responsible for converting test data into Expectation objects."}]}, "fixtures": [], "test_cases": [{"name": "acceptance_tests_pass", "primary_tested": ["CucumberExpression.getRegexp()"], "associated_methods": [], "external_dependencies": {"modules": ["ParameterTypeRegistry", "CucumberExpression", "Expectation", "Converter", "Yaml", "Path", "Paths", "InputStream", "Comparator", "Locale"], "class_members": [{"name": "parameterTypeRegistry", "type": "variable"}, {"name": "acceptance_tests_pass", "type": "method"}], "project_specific_resources": ["Converter.convert(Object,ParameterContext)"]}, "category": "unit", "fixtures_used": [], "description": "Tests the transformation of Cucumber expressions by comparing the generated regex with the expected regex."}]}, {"file_path": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionParserTest.java", "testclass_name": "CucumberExpressionParserTest", "dependencies": ["package io.cucumber.cucumberexpressions;", "import io.cucumber.cucumberexpressions.Ast.Node;", "import org.junit.jupiter.api.extension.ParameterContext;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.converter.ArgumentConversionException;", "import org.junit.jupiter.params.converter.ArgumentConverter;", "import org.junit.jupiter.params.converter.ConvertWith;", "import org.junit.jupiter.params.provider.MethodSource;", "import org.yaml.snakeyaml.Yaml;", "import java.io.IOException;", "import java.io.InputStream;", "import java.nio.file.Path;", "import java.nio.file.Paths;", "import java.util.ArrayList;", "import java.util.Comparator;", "import java.util.List;", "import java.util.stream.Collectors;", "import static java.nio.file.Files.newDirectoryStream;", "import static java.nio.file.Files.newInputStream;", "import static org.hamcrest.MatcherAssert.assertThat;", "import static org.hamcrest.Matchers.is;", "import static org.junit.jupiter.api.Assertions.assertThrows;"], "name": "CucumberExpressionParserTest", "description": "Tests for the CucumberExpressionParser class, focusing on parsing Cucumber expressions and handling exceptions.", "class_members": {"variables": [{"name": "parser", "type": "CucumberExpressionParser"}], "methods": [{"name": "acceptance_tests_pass", "signature": "List<Path> acceptance_tests_pass() throws IOException"}], "nested_classes": [{"name": "Expectation", "description": "Class representing the expected outcome of a Cucumber expression parsing test."}, {"name": "Converter", "description": "Class responsible for converting test data into Expectation objects."}, {"name": "YamlableNode", "description": "Class representing a node in the AST that can be converted to a Node object."}]}, "fixtures": [], "test_cases": [{"name": "acceptance_tests_pass", "primary_tested": ["CucumberExpressionParser.parse(String)"], "associated_methods": ["YamlableNode.toNode()"], "external_dependencies": {"modules": ["CucumberExpressionParser", "Expectation", "YamlableNode", "CucumberExpressionException"], "class_members": [{"name": "parser", "type": "variable"}], "project_specific_resources": ["Converter.convert(Object,ParameterContext)"]}, "category": "unit", "fixtures_used": [], "description": "Tests the parsing of Cucumber expressions and verifies the resulting AST or expected exceptions."}]}, {"file_path": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionTokenizerTest.java", "testclass_name": "CucumberExpressionTokenizerTest", "dependencies": ["package io.cucumber.cucumberexpressions;", "import io.cucumber.cucumberexpressions.Ast.Token;", "import org.junit.jupiter.api.extension.ParameterContext;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.converter.ArgumentConversionException;", "import org.junit.jupiter.params.converter.ArgumentConverter;", "import org.junit.jupiter.params.converter.ConvertWith;", "import org.junit.jupiter.params.provider.MethodSource;", "import org.yaml.snakeyaml.Yaml;", "import java.io.IOException;", "import java.io.InputStream;", "import java.nio.file.Path;", "import java.nio.file.Paths;", "import java.util.ArrayList;", "import java.util.Comparator;", "import java.util.List;", "import java.util.stream.Collectors;", "import static java.nio.file.Files.newDirectoryStream;", "import static java.nio.file.Files.newInputStream;", "import static org.hamcrest.MatcherAssert.assertThat;", "import static org.hamcrest.Matchers.is;", "import static org.junit.jupiter.api.Assertions.assertThrows;"], "name": "CucumberExpressionTokenizerTest", "description": "Tests for the CucumberExpressionTokenizer class, focusing on tokenization of Cucumber expressions.", "class_members": {"variables": [{"name": "tokenizer", "type": "CucumberExpressionTokenizer"}], "methods": [{"name": "acceptance_tests_pass", "signature": "List<Path> acceptance_tests_pass() throws IOException"}], "nested_classes": [{"name": "Expectation", "description": "Class representing the expected outcome of a tokenization test."}, {"name": "Converter", "description": "Class responsible for converting test data into Expectation objects."}, {"name": "YamlableToken", "description": "Class representing a token that can be converted to a Token object."}]}, "fixtures": [], "test_cases": [{"name": "acceptance_tests_pass", "primary_tested": ["CucumberExpressionTokenizer.tokenize(String)"], "associated_methods": ["YamlableToken.toToken()"], "external_dependencies": {"modules": ["CucumberExpressionTokenizer", "CucumberExpressionException", "Yaml", "Path", "Paths", "InputStream", "Comparator", "Collectors"], "class_members": [{"name": "tokenizer", "type": "variable"}, {"name": "acceptance_tests_pass", "type": "method"}], "project_specific_resources": ["Converter.convert(Object,ParameterContext)"]}, "category": "unit", "fixtures_used": [], "description": "Tests the tokenization functionality of the CucumberExpressionTokenizer, comparing the actual tokens with the expected tokens from YAML files."}]}, {"file_path": "src/test/java/io/cucumber/cucumberexpressions/RegexpUtilsTest.java", "testclass_name": "RegexpUtilsTest", "dependencies": ["package io.cucumber.cucumberexpressions;", "import org.junit.jupiter.api.Test;", "import static io.cucumber.cucumberexpressions.RegexpUtils.escapeRegex;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "RegexpUtilsTest", "description": "Unit tests for the RegexpUtils class, specifically focusing on the escapeRegex method.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "escape_regex_characters", "primary_tested": ["RegexpUtils.escapeRegex(String)"], "external_dependencies": {"modules": ["RegexpUtils"]}, "category": "unit", "description": "Tests the escapeRegex method with a string containing a single regex character ($) to ensure it is escaped correctly."}, {"name": "escape_all_regexp_characters", "primary_tested": ["RegexpUtils.escapeRegex(String)"], "external_dependencies": {"modules": ["RegexpUtils"]}, "category": "unit", "description": "Tests the escapeRegex method with a string containing all regex characters to ensure they are all escaped correctly."}, {"name": "escape_escaped_regexp_characters", "primary_tested": ["RegexpUtils.escapeRegex(String)"], "external_dependencies": {"modules": ["RegexpUtils"]}, "category": "unit", "description": "Tests the escapeRegex method with a string containing already escaped regex characters to ensure they are handled correctly."}, {"name": "do_not_escape_when_there_is_nothing_to_escape", "primary_tested": ["RegexpUtils.escapeRegex(String)"], "external_dependencies": {"modules": ["RegexpUtils"]}, "category": "unit", "description": "Tests the escapeRegex method with a string containing no regex characters to ensure it is returned unchanged."}, {"name": "gives_no_error_for_unicode_characters", "primary_tested": ["RegexpUtils.escapeRegex(String)"], "external_dependencies": {"modules": ["RegexpUtils"]}, "category": "unit", "description": "Tests the escapeRegex method with a string containing Unicode characters to ensure they are returned unchanged."}]}, {"file_path": "src/test/java/io/cucumber/cucumberexpressions/PatternCompilerProviderTest.java", "testclass_name": "PatternCompilerProviderTest", "dependencies": ["package io.cucumber.cucumberexpressions;", "import org.junit.jupiter.api.AfterEach;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.api.function.Executable;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.regex.Pattern;", "import static org.hamcrest.CoreMatchers.is;", "import static org.hamcrest.MatcherAssert.assertThat;", "import static org.hamcrest.core.IsEqual.equalTo;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;"], "name": "PatternCompilerProviderTest", "description": "Tests for the PatternCompilerProvider class, ensuring it correctly selects and uses a PatternCompiler.", "class_members": {"methods": [{"name": "getTestCompiler", "signature": "PatternCompiler getTestCompiler()"}]}, "fixtures": ["setUp", "tearDown"], "test_cases": [{"name": "use_default_compiler_if_none_registered", "primary_tested": ["PatternCompilerProvider.findPatternCompiler(Iterator<PatternCompiler>)"], "external_dependencies": {"modules": ["PatternCompilerProvider", "DefaultPatternCompiler"], "class_members": [{"name": "PatternCompilerProvider.service", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the default compiler is used if no compiler is registered."}, {"name": "use_found_pattern_compiler_if_one_provided", "primary_tested": ["PatternCompilerProvider.findPatternCompiler(Iterator<PatternCompiler>)"], "associated_methods": ["PatternCompilerProviderTest.getTestCompiler()"], "external_dependencies": {"modules": ["PatternCompilerProvider", "PatternCompiler"], "class_members": [{"name": "PatternCompilerProvider.service", "type": "variable"}, {"name": "getTestCompiler", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the found compiler is used if one is provided."}, {"name": "throws_error_if_more_than_one_pattern_compiler", "primary_tested": ["PatternCompilerProvider.findPatternCompiler(Iterator<PatternCompiler>)"], "associated_methods": ["PatternCompilerProviderTest.getTestCompiler()"], "external_dependencies": {"modules": ["PatternCompilerProvider", "DefaultPatternCompiler", "IllegalStateException"], "class_members": [{"name": "getTestCompiler", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that an error is thrown if more than one pattern compiler is provided."}]}, {"file_path": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactory_createExpressionTest.java", "testclass_name": "ExpressionFactory_createExpressionTest", "dependencies": ["package io.cucumber.cucumberexpressions;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.Locale;"], "name": "ExpressionFactory_createExpressionTest", "description": "Unit tests for the ExpressionFactory's createExpression method.", "class_members": {"variables": [{"name": "parameterTypeRegistry", "type": "ParameterTypeRegistry"}, {"name": "expressionFactory", "type": "ExpressionFactory"}]}, "test_cases": [{"name": "testCreateExpression_EmptyString", "primary_tested": ["ExpressionFactory.createExpression(String)"], "external_dependencies": {"modules": ["ExpressionFactory", "CucumberExpression"], "class_members": [{"name": "expressionFactory", "type": "variable"}]}, "category": "unit", "description": "Tests the creation of an Expression from an empty string, expecting a CucumberExpression."}, {"name": "testCreateExpression_RegularExpressionWithAnchors", "primary_tested": ["ExpressionFactory.createExpression(String)"], "external_dependencies": {"modules": ["ExpressionFactory", "RegularExpression"], "class_members": [{"name": "expressionFactory", "type": "variable"}]}, "category": "unit", "description": "Tests the creation of an Expression from a regular expression string with anchors, expecting a RegularExpression."}, {"name": "testCreateExpression_RegularExpressionWithSlashes", "primary_tested": ["ExpressionFactory.createExpression(String)"], "external_dependencies": {"modules": ["ExpressionFactory", "RegularExpression"], "class_members": [{"name": "expressionFactory", "type": "variable"}]}, "category": "unit", "description": "Tests the creation of an Expression from a regular expression string with slashes, expecting a RegularExpression."}, {"name": "testCreateExpression_CucumberExpression", "primary_tested": ["ExpressionFactory.createExpression(String)"], "external_dependencies": {"modules": ["ExpressionFactory", "CucumberExpression"], "class_members": [{"name": "expressionFactory", "type": "variable"}]}, "category": "unit", "description": "Tests the creation of an Expression from a regular text string, expecting a CucumberExpression."}]}, {"file_path": "src/test/java/io/cucumber/cucumberexpressions/BuiltInParameterTransformer_transformTest.java", "testclass_name": "BuiltInParameterTransformer_transformTest", "dependencies": ["package io.cucumber.cucumberexpressions;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.lang.reflect.Type;", "import java.math.BigDecimal;", "import java.math.BigInteger;", "import java.util.Locale;", "import java.util.Optional;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "BuiltInParameterTransformer_transformTest", "description": "Unit tests for the BuiltInParameterTransformer's transform method.", "class_members": {"variables": [{"name": "transformer", "type": "BuiltInParameterTransformer"}], "methods": [], "nested_classes": [{"name": "TestEnum", "description": "Internal enum for testing purposes"}, {"name": "ParameterizedTypeImpl", "description": "Internal class implementing ParameterizedType for testing purposes"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testTransformStringToBigDecimal", "primary_tested": ["BuiltInParameterTransformer.transform(String,Type)"], "external_dependencies": {"modules": ["BuiltInParameterTransformer", "BigDecimal"], "class_members": [{"name": "transformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the transformation of a string to a BigDecimal."}, {"name": "testTransformStringToOptionalBigDecimal", "primary_tested": ["BuiltInParameterTransformer.transform(String,Type)"], "external_dependencies": {"modules": ["BuiltInParameterTransformer", "Optional", "BigDecimal"], "class_members": [{"name": "transformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the transformation of a string to an Optional<BigDecimal>."}, {"name": "testTransformStringToUnsupportedType", "primary_tested": ["BuiltInParameterTransformer.transform(String,Type)"], "external_dependencies": {"modules": ["BuiltInParameterTransformer"], "class_members": [{"name": "transformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the transformation of a string to an unsupported type, expecting an IllegalArgumentException."}, {"name": "testTransformNullValue", "primary_tested": ["BuiltInParameterTransformer.transform(String,Type)"], "external_dependencies": {"modules": ["BuiltInParameterTransformer", "BigDecimal"], "class_members": [{"name": "transformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the transformation of a null value to a BigDecimal, expecting a null result."}, {"name": "testTransformStringToEnum", "primary_tested": ["BuiltInParameterTransformer.transform(String,Type)"], "external_dependencies": {"modules": ["BuiltInParameterTransformer", "TestEnum"], "class_members": [{"name": "transformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the transformation of a string to an enum."}]}, {"file_path": "src/test/java/io/cucumber/cucumberexpressions/NumberParserTest.java", "testclass_name": "NumberParserTest", "dependencies": ["package io.cucumber.cucumberexpressions;", "import org.junit.jupiter.api.Test;", "import java.math.BigDecimal;", "import java.util.Locale;", "import static java.util.Locale.forLanguageTag;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "NumberParserTest", "description": "Unit tests for parsing numbers in different locales using NumberParser.", "class_members": {"variables": [{"name": "english", "type": "NumberParser"}, {"name": "german", "type": "NumberParser"}, {"name": "canadianFrench", "type": "NumberParser"}, {"name": "norwegian", "type": "NumberParser"}, {"name": "canadian", "type": "NumberParser"}]}, "test_cases": [{"name": "can_parse_float", "primary_tested": ["NumberParser.parseFloat(String)"], "external_dependencies": {"modules": ["NumberParser", "Locale"], "class_members": [{"name": "english", "type": "variable"}, {"name": "canadian", "type": "variable"}, {"name": "german", "type": "variable"}, {"name": "canadianFrench", "type": "variable"}, {"name": "norwegian", "type": "variable"}]}, "category": "unit", "description": "Tests the parsing of float numbers in different locales."}, {"name": "can_parse_double", "primary_tested": ["NumberParser.parseDouble(String)"], "external_dependencies": {"modules": ["NumberParser", "Locale"], "class_members": [{"name": "english", "type": "variable"}, {"name": "canadian", "type": "variable"}, {"name": "german", "type": "variable"}, {"name": "canadianFrench", "type": "variable"}, {"name": "norwegian", "type": "variable"}]}, "category": "unit", "description": "Tests the parsing of double numbers in different locales."}, {"name": "can_parse_big_decimals", "primary_tested": ["NumberParser.parseBigDecimal(String)"], "external_dependencies": {"modules": ["NumberParser", "Locale", "BigDecimal"], "class_members": [{"name": "english", "type": "variable"}, {"name": "canadian", "type": "variable"}, {"name": "german", "type": "variable"}, {"name": "canadianFrench", "type": "variable"}, {"name": "norwegian", "type": "variable"}]}, "category": "unit", "description": "Tests the parsing of BigDecimal numbers in different locales."}, {"name": "can_parse_negative", "primary_tested": ["NumberParser.parseFloat(String)"], "external_dependencies": {"modules": ["NumberParser", "Locale"], "class_members": [{"name": "english", "type": "variable"}, {"name": "canadian", "type": "variable"}, {"name": "german", "type": "variable"}, {"name": "canadianFrench", "type": "variable"}, {"name": "norwegian", "type": "variable"}]}, "category": "unit", "description": "Tests the parsing of negative float numbers in different locales."}]}, {"file_path": "src/test/java/io/cucumber/cucumberexpressions/KeyboardFriendlyDecimalFormatSymbolsTest.java", "testclass_name": "KeyboardFriendlyDecimalFormatSymbolsTest", "dependencies": ["package io.cucumber.cucumberexpressions;", "import org.junit.jupiter.api.Test;", "import java.text.DecimalFormatSymbols;", "import java.util.AbstractMap.SimpleEntry;", "import java.util.Arrays;", "import java.util.List;", "import java.util.Locale;", "import java.util.function.Function;", "import java.util.stream.Stream;", "import static java.util.Comparator.comparing;", "import static java.util.stream.Collectors.groupingBy;", "import static java.util.stream.Collectors.toList;"], "name": "KeyboardFriendlyDecimalFormatSymbolsTest", "description": "Tests for comparing original and friendly decimal format symbols across different locales.", "class_members": {"methods": [{"name": "listMinusSigns", "signature": "void listMinusSigns(Function<Locale, DecimalFormatSymbols>)"}, {"name": "listDecimalAndGroupingSeparators", "signature": "void listDecimalAndGroupingSeparators(Function<Locale, DecimalFormatSymbols>)"}, {"name": "listExponentSigns", "signature": "void listExponentSigns(Function<Locale, DecimalFormatSymbols>)"}, {"name": "getAvailableLocalesAsStream", "signature": "Stream<Locale> getAvailableLocalesAsStream()"}, {"name": "render", "signature": "String render(Character)"}, {"name": "render", "signature": "String render(List<Locale>)"}]}, "test_cases": [{"name": "listMinusSigns", "primary_tested": ["DecimalFormatSymbols.getMinusSign()", "KeyboardFriendlyDecimalFormatSymbols.getMinusSign()"], "associated_methods": ["getAvailableLocalesAsStream()", "render(Character)", "render(List<Locale>)"], "external_dependencies": {"modules": ["DecimalFormatSymbols", "KeyboardFriendlyDecimalFormatSymbols", "Locale", "Function", "Stream", "Arrays", "AbstractMap.SimpleEntry", "List"], "class_members": [{"name": "listMinusSigns", "type": "method"}, {"name": "getAvailableLocalesAsStream", "type": "method"}, {"name": "render", "type": "method"}]}, "category": "unit", "description": "Tests the minus signs of decimal format symbols across different locales."}, {"name": "listDecimalAndGroupingSeparators", "primary_tested": ["DecimalFormatSymbols.getDecimalSeparator()", "DecimalFormatSymbols.getGroupingSeparator()", "KeyboardFriendlyDecimalFormatSymbols.getDecimalSeparator()", "KeyboardFriendlyDecimalFormatSymbols.getGroupingSeparator()"], "associated_methods": ["getAvailableLocalesAsStream()", "render(Character)", "render(List<Locale>)"], "external_dependencies": {"modules": ["DecimalFormatSymbols", "KeyboardFriendlyDecimalFormatSymbols", "Locale", "Function", "Stream", "Arrays", "AbstractMap.SimpleEntry", "List"], "class_members": [{"name": "listDecimalAndGroupingSeparators", "type": "method"}, {"name": "getAvailableLocalesAsStream", "type": "method"}, {"name": "render", "type": "method"}]}, "category": "unit", "description": "Tests the decimal and grouping separators of decimal format symbols across different locales."}, {"name": "listExponentSigns", "primary_tested": ["DecimalFormatSymbols.getExponentSeparator()", "KeyboardFriendlyDecimalFormatSymbols.getExponentSeparator()"], "associated_methods": ["getAvailableLocalesAsStream()", "render(Character)", "render(List<Locale>)"], "external_dependencies": {"modules": ["DecimalFormatSymbols", "KeyboardFriendlyDecimalFormatSymbols", "Locale", "Function", "Stream", "Arrays", "AbstractMap.SimpleEntry", "List"], "class_members": [{"name": "listExponentSigns", "type": "method"}, {"name": "getAvailableLocalesAsStream", "type": "method"}, {"name": "render", "type": "method"}]}, "category": "unit", "description": "Tests the exponent signs of decimal format symbols across different locales."}]}, {"file_path": "src/test/java/io/cucumber/cucumberexpressions/ParameterTypeRegistryTest.java", "testclass_name": "ParameterTypeRegistryTest", "dependencies": ["package io.cucumber.cucumberexpressions;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.api.function.Executable;", "import java.math.BigDecimal;", "import java.util.Locale;", "import java.util.regex.Pattern;", "import static org.hamcrest.CoreMatchers.is;", "import static org.hamcrest.CoreMatchers.nullValue;", "import static org.hamcrest.MatcherAssert.assertThat;", "import static org.hamcrest.core.IsEqual.equalTo;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;"], "name": "ParameterTypeRegistryTest", "description": "Tests for the ParameterTypeRegistry class, focusing on parameter type definitions and lookups.", "class_members": {"variables": [{"name": "CAPITALISED_WORD", "type": "static final String"}, {"name": "registry", "type": "ParameterTypeRegistry"}], "methods": [], "nested_classes": [{"name": "Name", "description": "Internal class representing a name"}, {"name": "Person", "description": "Internal class representing a person"}, {"name": "Place", "description": "Internal class representing a place"}]}, "fixtures": [], "test_cases": [{"name": "does_not_allow_more_than_one_preferential_parameter_type_for_each_regexp", "primary_tested": ["ParameterTypeRegistry.defineParameterType(ParameterType)"], "associated_methods": [], "external_dependencies": {"modules": ["ParameterType", "CucumberExpressionException"], "class_members": [{"name": "registry", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests that the registry does not allow more than one preferential parameter type for the same regular expression."}, {"name": "looks_up_preferential_parameter_type_by_regexp", "primary_tested": ["ParameterTypeRegistry.lookupByRegexp(String,Pattern,String)"], "associated_methods": [], "external_dependencies": {"modules": ["ParameterType", "Pattern"], "class_members": [{"name": "registry", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the lookup of a preferential parameter type by regular expression."}, {"name": "throws_ambiguous_exception_on_lookup_when_no_parameter_types_are_preferential", "primary_tested": ["ParameterTypeRegistry.lookupByRegexp(String,Pattern,String)"], "associated_methods": [], "external_dependencies": {"modules": ["ParameterType", "Pattern", "AmbiguousParameterTypeException"], "class_members": [{"name": "registry", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests that an ambiguous exception is thrown when no parameter types are preferential during lookup."}, {"name": "does_not_allow_anonymous_parameter_type_to_be_registered", "primary_tested": ["ParameterTypeRegistry.defineParameterType(ParameterType)"], "associated_methods": [], "external_dependencies": {"modules": ["ParameterType", "DuplicateTypeNameException"], "class_members": [{"name": "registry", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests that the registry does not allow an anonymous parameter type to be registered."}, {"name": "parse_decimal_numbers_in_english", "primary_tested": ["Expression.match(String)"], "associated_methods": [], "external_dependencies": {"modules": ["ExpressionFactory", "Expression", "ParameterTypeRegistry", "BigDecimal"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the parsing of decimal numbers in English locale."}, {"name": "parse_decimal_numbers_in_german", "primary_tested": ["Expression.match(String)"], "associated_methods": [], "external_dependencies": {"modules": ["ExpressionFactory", "Expression", "ParameterTypeRegistry", "BigDecimal"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the parsing of decimal numbers in German locale."}, {"name": "parse_decimal_numbers_in_canadian_french", "primary_tested": ["Expression.match(String)"], "associated_methods": [], "external_dependencies": {"modules": ["ExpressionFactory", "Expression", "ParameterTypeRegistry", "BigDecimal"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the parsing of decimal numbers in Canadian French locale."}, {"name": "parse_decimal_numbers_in_norwegian", "primary_tested": ["Expression.match(String)"], "associated_methods": [], "external_dependencies": {"modules": ["ExpressionFactory", "Expression", "ParameterTypeRegistry", "BigDecimal"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the parsing of decimal numbers in Norwegian locale."}]}, {"file_path": "src/test/java/io/cucumber/cucumberexpressions/BuiltInParameterTransformerTest.java", "testclass_name": "BuiltInParameterTransformerTest", "dependencies": ["package io.cucumber.cucumberexpressions;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.api.function.Executable;", "import java.lang.reflect.Type;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Date;", "import java.util.Optional;", "import java.util.function.Supplier;", "import static java.util.Locale.ENGLISH;", "import static org.hamcrest.MatcherAssert.assertThat;", "import static org.hamcrest.core.Is.is;", "import static org.hamcrest.core.IsEqual.equalTo;", "import static org.junit.jupiter.api.Assertions.assertThrows;"], "name": "BuiltInParameterTransformerTest", "description": "Unit tests for the BuiltInParameterTransformer class, focusing on its transformation capabilities and limitations.", "class_members": {"variables": [{"name": "objectMapper", "type": "BuiltInParameterTransformer"}], "methods": [], "nested_classes": [{"name": "TestEnum", "description": "Internal enum used for testing purposes"}]}, "fixtures": [], "test_cases": [{"name": "simple_object_mapper_only_supports_class_types", "primary_tested": ["BuiltInParameterTransformer.transform(String,Type)"], "external_dependencies": {"modules": ["ArrayList", "Executable", "IllegalArgumentException", "Type"], "class_members": [{"name": "objectMapper", "type": "variable"}]}, "category": "unit", "description": "Tests that the BuiltInParameterTransformer throws an exception when trying to transform a string to an unsupported generic type."}, {"name": "simple_object_mapper_only_supports_some_class_types", "primary_tested": ["BuiltInParameterTransformer.transform(String,Class)"], "external_dependencies": {"modules": ["Executable", "IllegalArgumentException", "Date"], "class_members": [{"name": "objectMapper", "type": "variable"}]}, "category": "unit", "description": "Tests that the BuiltInParameterTransformer throws an exception when trying to transform a string to an unsupported class type."}, {"name": "simple_object_mapper_only_supports_some_optional_types", "primary_tested": ["BuiltInParameterTransformer.transform(String,Type)"], "external_dependencies": {"modules": ["Executable", "IllegalArgumentException", "Optional", "Date", "TypeReference"], "class_members": [{"name": "objectMapper", "type": "variable"}]}, "category": "unit", "description": "Tests that the BuiltInParameterTransformer throws an exception when trying to transform a string to an unsupported optional type."}, {"name": "simple_object_mapper_only_supports_some_generic_types", "primary_tested": ["BuiltInParameterTransformer.transform(String,Type)"], "external_dependencies": {"modules": ["Executable", "IllegalArgumentException", "Supplier", "String", "TypeReference"], "class_members": [{"name": "objectMapper", "type": "variable"}]}, "category": "unit", "description": "Tests that the BuiltInParameterTransformer throws an exception when trying to transform a string to an unsupported generic type."}, {"name": "should_throw_exception_for_unknown_enum_values", "primary_tested": ["BuiltInParameterTransformer.transform(String,Class)"], "external_dependencies": {"modules": ["Executable", "CucumberExpressionException", "TestEnum"], "class_members": [{"name": "objectMapper", "type": "variable"}]}, "category": "unit", "description": "Tests that the BuiltInParameterTransformer throws an exception when trying to transform a string to an unknown enum value."}, {"name": "should_transform_boolean", "primary_tested": ["BuiltInParameterTransformer.transform(String,Class)"], "external_dependencies": {"modules": ["Arrays", "Boolean"], "class_members": [{"name": "objectMapper", "type": "variable"}]}, "category": "unit", "description": "Tests that the BuiltInParameterTransformer can transform various string representations of boolean values to Boolean objects."}, {"name": "should_transform_char", "primary_tested": ["BuiltInParameterTransformer.transform(String,Class)"], "external_dependencies": {"modules": ["Character"], "class_members": [{"name": "objectMapper", "type": "variable"}]}, "category": "unit", "description": "Tests that the BuiltInParameterTransformer can transform single-character strings to Character objects."}, {"name": "should_throw_exception_for_empty_string_with_type_char", "primary_tested": ["BuiltInParameterTransformer.transform(String,Class)"], "external_dependencies": {"modules": ["Executable", "IllegalArgumentException", "Character"], "class_members": [{"name": "objectMapper", "type": "variable"}]}, "category": "unit", "description": "Tests that the BuiltInParameterTransformer throws an exception when trying to transform an empty string to a Character object."}, {"name": "should_throw_exception_for_nonsingelchar_string_with_type_char", "primary_tested": ["BuiltInParameterTransformer.transform(String,Class)"], "external_dependencies": {"modules": ["Executable", "IllegalArgumentException", "Character"], "class_members": [{"name": "objectMapper", "type": "variable"}]}, "category": "unit", "description": "Tests that the BuiltInParameterTransformer throws an exception when trying to transform a multi-character string to a Character object."}, {"name": "should_transform_optional", "primary_tested": ["BuiltInParameterTransformer.transform(String,Class)"], "external_dependencies": {"modules": ["Optional"], "class_members": [{"name": "objectMapper", "type": "variable"}]}, "category": "unit", "description": "Tests that the BuiltInParameterTransformer can transform strings to Optional objects."}, {"name": "should_transform_optional_generic_string", "primary_tested": ["BuiltInParameterTransformer.transform(String,Type)"], "external_dependencies": {"modules": ["Optional", "String", "TypeReference"], "class_members": [{"name": "objectMapper", "type": "variable"}]}, "category": "unit", "description": "Tests that the BuiltInParameterTransformer can transform strings to Optional<String> objects."}, {"name": "should_transform_optional_generic_integer", "primary_tested": ["BuiltInParameterTransformer.transform(String,Type)"], "external_dependencies": {"modules": ["Optional", "Integer", "TypeReference"], "class_members": [{"name": "objectMapper", "type": "variable"}]}, "category": "unit", "description": "Tests that the BuiltInParameterTransformer can transform strings to Optional<Integer> objects."}]}, {"file_path": "src/test/java/io/cucumber/cucumberexpressions/ParameterByTypeTransformerTest.java", "testclass_name": "ParameterByTypeTransformerTest", "dependencies": ["package io.cucumber.cucumberexpressions;", "import com.fasterxml.jackson.databind.ObjectMapper;", "import com.fasterxml.jackson.databind.type.TypeFactory;", "import com.fasterxml.jackson.datatype.jdk8.Jdk8Module;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.MethodSource;", "import java.lang.reflect.Type;", "import java.math.BigDecimal;", "import java.math.BigInteger;", "import java.util.Optional;", "import java.util.stream.Stream;", "import static java.util.Locale.ENGLISH;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;"], "name": "ParameterByTypeTransformerTest", "description": "Tests for the ParameterByTypeTransformer class, focusing on various type conversions.", "class_members": {"variables": [], "methods": [], "nested_classes": [{"name": "TestJacksonDefaultTransformer", "description": "Internal class implementing ParameterByTypeTransformer using Jackson ObjectMapper."}, {"name": "TestEnum", "description": "Internal enum used for testing enum conversion."}]}, "fixtures": [], "test_cases": [{"name": "should_convert_null_to_null", "primary_tested": ["ParameterByTypeTransformer.transform(String,Class)"], "external_dependencies": {"modules": ["ParameterByTypeTransformer", "Object"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformation of null to null."}, {"name": "should_convert_null_to_optional", "primary_tested": ["ParameterByTypeTransformer.transform(String,Class)"], "external_dependencies": {"modules": ["ParameterByTypeTransformer", "Optional"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformation of null to an empty Optional."}, {"name": "should_convert_null_to_optional_generic", "primary_tested": ["ParameterByTypeTransformer.transform(String,Type)"], "external_dependencies": {"modules": ["ParameterByTypeTransformer", "Optional", "TypeReference"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformation of null to an empty Optional with a generic type."}, {"name": "should_convert_to_string", "primary_tested": ["ParameterByTypeTransformer.transform(String,Class)"], "external_dependencies": {"modules": ["ParameterByTypeTransformer", "String"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformation of a string to a string."}, {"name": "should_convert_to_optional_string", "primary_tested": ["ParameterByTypeTransformer.transform(String,Type)"], "external_dependencies": {"modules": ["ParameterByTypeTransformer", "Optional", "TypeReference"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformation of a string to an Optional string."}, {"name": "should_convert_to_object", "primary_tested": ["ParameterByTypeTransformer.transform(String,Class)"], "external_dependencies": {"modules": ["ParameterByTypeTransformer", "Object"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformation of a string to an Object."}, {"name": "should_convert_to_big_integer", "primary_tested": ["ParameterByTypeTransformer.transform(String,Class)"], "external_dependencies": {"modules": ["ParameterByTypeTransformer", "BigInteger"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformation of a string to a BigInteger."}, {"name": "should_convert_to_big_decimal", "primary_tested": ["ParameterByTypeTransformer.transform(String,Class)"], "external_dependencies": {"modules": ["ParameterByTypeTransformer", "BigDecimal"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformation of a string to a BigDecimal."}, {"name": "should_convert_to_byte", "primary_tested": ["ParameterByTypeTransformer.transform(String,Class)"], "external_dependencies": {"modules": ["ParameterByTypeTransformer", "Byte"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformation of a string to a Byte."}, {"name": "should_convert_to_short", "primary_tested": ["ParameterByTypeTransformer.transform(String,Class)"], "external_dependencies": {"modules": ["ParameterByTypeTransformer", "Short"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformation of a string to a Short."}, {"name": "should_convert_to_integer", "primary_tested": ["ParameterByTypeTransformer.transform(String,Class)"], "external_dependencies": {"modules": ["ParameterByTypeTransformer", "Integer"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformation of a string to an Integer."}, {"name": "should_convert_to_optional_integer", "primary_tested": ["ParameterByTypeTransformer.transform(String,Type)"], "external_dependencies": {"modules": ["ParameterByTypeTransformer", "Optional", "TypeReference"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformation of a string to an Optional Integer."}, {"name": "should_convert_to_long", "primary_tested": ["ParameterByTypeTransformer.transform(String,Class)"], "external_dependencies": {"modules": ["ParameterByTypeTransformer", "Long"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformation of a string to a Long."}, {"name": "should_convert_to_float", "primary_tested": ["ParameterByTypeTransformer.transform(String,Class)"], "external_dependencies": {"modules": ["ParameterByTypeTransformer", "Float"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformation of a string to a Float."}, {"name": "should_convert_to_double", "primary_tested": ["ParameterByTypeTransformer.transform(String,Class)"], "external_dependencies": {"modules": ["ParameterByTypeTransformer", "Double"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformation of a string to a Double."}, {"name": "should_convert_to_enum", "primary_tested": ["ParameterByTypeTransformer.transform(String,Class)"], "external_dependencies": {"modules": ["ParameterByTypeTransformer", "TestEnum"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformation of a string to an Enum."}]}, {"file_path": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionTest.java", "testclass_name": "CucumberExpressionTest", "dependencies": ["package io.cucumber.cucumberexpressions;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.api.extension.ParameterContext;", "import org.junit.jupiter.api.function.Executable;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.converter.ArgumentConversionException;", "import org.junit.jupiter.params.converter.ArgumentConverter;", "import org.junit.jupiter.params.converter.ConvertWith;", "import org.junit.jupiter.params.provider.MethodSource;", "import org.yaml.snakeyaml.Yaml;", "import java.io.IOException;", "import java.io.InputStream;", "import java.lang.reflect.Type;", "import java.math.BigDecimal;", "import java.math.BigInteger;", "import java.nio.file.Path;", "import java.nio.file.Paths;", "import java.util.ArrayList;", "import java.util.Comparator;", "import java.util.List;", "import java.util.Locale;", "import java.util.stream.Collectors;", "import static java.nio.file.Files.newDirectoryStream;", "import static java.nio.file.Files.newInputStream;", "import static java.util.Arrays.asList;", "import static java.util.Collections.singletonList;", "import static org.hamcrest.MatcherAssert.assertThat;", "import static org.hamcrest.Matchers.equalTo;", "import static org.hamcrest.core.Is.is;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;"], "name": "CucumberExpressionTest", "description": "Test suite for CucumberExpression functionality, including acceptance tests and various type matching tests.", "class_members": {"variables": [{"name": "parameterTypeRegistry", "type": "ParameterTypeRegistry"}], "methods": [{"name": "acceptance_tests_pass", "signature": "static List<Path> acceptance_tests_pass() throws IOException"}, {"name": "match", "signature": "private List<?> match(String expr, String text, Type... typeHints)"}, {"name": "match", "signature": "private List<?> match(String expr, String text, Locale locale, Type... typeHints)"}, {"name": "match", "signature": "private List<?> match(String expr, String text, ParameterTypeRegistry parameterTypeRegistry, Type... typeHints)"}], "nested_classes": [{"name": "Expectation", "description": "Class representing the expected outcome for a test case"}, {"name": "Converter", "description": "Class implementing ArgumentConverter to convert test data from YAML files"}]}, "fixtures": [], "test_cases": [{"name": "acceptance_tests_pass", "primary_tested": ["CucumberExpression.match(String)"], "associated_methods": ["CustomMatchers.equalOrCloseTo(List<?>)"], "external_dependencies": {"modules": ["CucumberExpression", "ParameterTypeRegistry", "Argument", "CustomMatchers", "CucumberExpressionException"], "class_members": [{"name": "parameterTypeRegistry", "type": "variable"}], "project_specific_resources": ["Converter.convert(Object, ParameterContext)"]}, "category": "acceptance", "description": "Tests the matching functionality of CucumberExpression against various acceptance test cases."}, {"name": "exposes_source", "primary_tested": ["CucumberExpression.getSource()"], "external_dependencies": {"modules": ["CucumberExpression", "ParameterTypeRegistry"], "class_members": [{"name": "parameterTypeRegistry", "type": "variable"}]}, "category": "unit", "description": "Tests that the CucumberExpression exposes its source correctly."}, {"name": "matches_anonymous_parameter_type_with_hint", "primary_tested": ["CucumberExpression.match(String, Type...)"], "external_dependencies": {"modules": ["CucumberExpression", "ParameterTypeRegistry"], "class_members": [{"name": "parameterTypeRegistry", "type": "variable"}]}, "category": "unit", "description": "Tests the matching of an anonymous parameter type with a type hint."}, {"name": "documents_match_arguments", "primary_tested": ["CucumberExpression.match(String, Type...)"], "external_dependencies": {"modules": ["CucumberExpression", "ParameterTypeRegistry", "Argument"], "class_members": [{"name": "parameterTypeRegistry", "type": "variable"}]}, "category": "unit", "description": "Tests the documentation of match arguments in CucumberExpression."}, {"name": "matches_byte", "primary_tested": ["CucumberExpression.match(String, Type...)"], "external_dependencies": {"modules": ["CucumberExpression", "ParameterTypeRegistry"], "class_members": [{"name": "parameterTypeRegistry", "type": "variable"}]}, "category": "unit", "description": "Tests the matching of a byte type in CucumberExpression."}, {"name": "matches_short", "primary_tested": ["CucumberExpression.match(String, Type...)"], "external_dependencies": {"modules": ["CucumberExpression", "ParameterTypeRegistry"], "class_members": [{"name": "parameterTypeRegistry", "type": "variable"}]}, "category": "unit", "description": "Tests the matching of a short type in CucumberExpression."}, {"name": "matches_long", "primary_tested": ["CucumberExpression.match(String, Type...)"], "external_dependencies": {"modules": ["CucumberExpression", "ParameterTypeRegistry"], "class_members": [{"name": "parameterTypeRegistry", "type": "variable"}]}, "category": "unit", "description": "Tests the matching of a long type in CucumberExpression."}, {"name": "matches_biginteger", "primary_tested": ["CucumberExpression.match(String, Type...)"], "external_dependencies": {"modules": ["CucumberExpression", "ParameterTypeRegistry", "BigInteger"], "class_members": [{"name": "parameterTypeRegistry", "type": "variable"}]}, "category": "unit", "description": "Tests the matching of a BigInteger type in CucumberExpression."}, {"name": "matches_bigdecimal", "primary_tested": ["CucumberExpression.match(String, Type...)"], "external_dependencies": {"modules": ["CucumberExpression", "ParameterTypeRegistry", "BigDecimal"], "class_members": [{"name": "parameterTypeRegistry", "type": "variable"}]}, "category": "unit", "description": "Tests the matching of a BigDecimal type in CucumberExpression."}, {"name": "matches_double_with_comma_for_locale_using_comma", "primary_tested": ["CucumberExpression.match(String, Locale, Type...)"], "external_dependencies": {"modules": ["CucumberExpression", "ParameterTypeRegistry", "Locale"], "class_members": [{"name": "parameterTypeRegistry", "type": "variable"}]}, "category": "unit", "description": "Tests the matching of a double type with a comma for a locale using a comma as a decimal separator."}, {"name": "matches_float_with_zero", "primary_tested": ["CucumberExpression.match(String, Type...)"], "external_dependencies": {"modules": ["CucumberExpression", "ParameterTypeRegistry"], "class_members": [{"name": "parameterTypeRegistry", "type": "variable"}]}, "category": "unit", "description": "Tests the matching of a float type with zero value in CucumberExpression."}, {"name": "unmatched_optional_groups_have_null_values", "primary_tested": ["CucumberExpression.match(String, Type...)"], "external_dependencies": {"modules": ["CucumberExpression", "ParameterTypeRegistry", "ParameterType", "TypeReference", "CaptureGroupTransformer"], "class_members": [{"name": "parameterTypeRegistry", "type": "variable"}]}, "category": "unit", "description": "Tests that unmatched optional groups in CucumberExpression have null values."}]}, {"file_path": "src/test/java/io/cucumber/cucumberexpressions/CustomParameterTypeTest.java", "testclass_name": "CustomParameterTypeTest", "dependencies": ["package io.cucumber.cucumberexpressions;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.api.function.Executable;", "import java.util.List;", "import java.util.Locale;", "import java.util.regex.Pattern;", "import static java.lang.Integer.parseInt;", "import static java.util.Arrays.asList;", "import static java.util.regex.Pattern.compile;", "import static org.hamcrest.CoreMatchers.is;", "import static org.hamcrest.MatcherAssert.assertThat;", "import static org.hamcrest.core.IsEqual.equalTo;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.fail;"], "name": "CustomParameterTypeTest", "description": "Tests for custom parameter types in Cucumber expressions and regular expressions.", "class_members": {"variables": [{"name": "parameterTypeRegistry", "type": "ParameterTypeRegistry"}], "methods": [], "nested_classes": [{"name": "Coordinate", "description": "Internal class representing a coordinate with x, y, and z values."}, {"name": "Color", "description": "Internal class representing a color with a name."}, {"name": "CssColor", "description": "Internal class representing a CSS color with a name."}]}, "fixtures": ["create_parameter"], "test_cases": [{"name": "throws_exception_for_illegal_character_in_parameter_name", "primary_tested": ["ParameterType.<init>(String,String,Class,Transformer,boolean,boolean)"], "external_dependencies": {"modules": ["CucumberExpressionException", "Executable", "Transformer"], "class_members": [{"name": "parameterTypeRegistry", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests that an exception is thrown for an illegal character in the parameter name."}, {"name": "matches_CucumberExpression_parameters_with_custom_parameter_type", "primary_tested": ["CucumberExpression.match(String)"], "associated_methods": ["Color.<init>(String)"], "external_dependencies": {"modules": ["CucumberExpression", "Expression", "Color"], "class_members": [{"name": "parameterTypeRegistry", "type": "variable"}]}, "category": "unit", "fixtures_used": ["create_parameter"], "description": "Tests matching CucumberExpression parameters with a custom parameter type."}, {"name": "matches_CucumberExpression_parameters_with_multiple_capture_groups", "primary_tested": ["CucumberExpression.match(String)"], "associated_methods": ["Coordinate.<init>(int,int,int)"], "external_dependencies": {"modules": ["CucumberExpression", "Expression", "Coordinate", "CaptureGroupTransformer"], "class_members": [{"name": "parameterTypeRegistry", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests matching CucumberExpression parameters with multiple capture groups."}, {"name": "warns_when_CucumberExpression_parameters_with_multiple_capture_groups_has_a_transformer", "primary_tested": ["CucumberExpression.match(String)"], "associated_methods": ["Transformer.transform(String)"], "external_dependencies": {"modules": ["CucumberExpression", "Expression", "Coordinate", "Transformer"], "class_members": [{"name": "parameterTypeRegistry", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests warning when CucumberExpression parameters with multiple capture groups have a transformer."}, {"name": "warns_when_anonymous_parameter_has_multiple_capture_groups", "primary_tested": ["RegularExpression.match(String,Class,Class,Class)"], "external_dependencies": {"modules": ["RegularExpression", "Expression", "Coordinate"], "class_members": [{"name": "parameterTypeRegistry", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests warning when an anonymous parameter has multiple capture groups."}, {"name": "matches_CucumberExpression_parameters_with_custom_parameter_type_using_optional_group", "primary_tested": ["CucumberExpression.match(String)"], "associated_methods": ["Color.<init>(String)"], "external_dependencies": {"modules": ["CucumberExpression", "Expression", "Color"], "class_members": [{"name": "parameterTypeRegistry", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests matching CucumberExpression parameters with a custom parameter type using an optional group."}, {"name": "defers_transformation_until_queried_from_argument", "primary_tested": ["CucumberExpression.match(String)"], "associated_methods": ["Transformer.transform(String)"], "external_dependencies": {"modules": ["CucumberExpression", "Expression", "CssColor", "Transformer"], "class_members": [{"name": "parameterTypeRegistry", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests deferring transformation until queried from the argument."}, {"name": "conflicting_parameter_type_is_detected_for_type_name", "primary_tested": ["ParameterTypeRegistry.defineParameterType(ParameterType)"], "external_dependencies": {"modules": ["ParameterTypeRegistry", "ParameterType", "CssColor"], "class_members": [{"name": "parameterTypeRegistry", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests detecting a conflicting parameter type for the type name."}, {"name": "conflicting_parameter_type_is_not_detected_for_type", "primary_tested": ["ParameterTypeRegistry.defineParameterType(ParameterType)"], "external_dependencies": {"modules": ["ParameterTypeRegistry", "ParameterType", "Color"], "class_members": [{"name": "parameterTypeRegistry", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests that a conflicting parameter type is not detected for the type."}, {"name": "conflicting_parameter_type_is_not_detected_for_regexp", "primary_tested": ["CucumberExpression.match(String)"], "associated_methods": ["CssColor.<init>(String)", "Color.<init>(String)"], "external_dependencies": {"modules": ["CucumberExpression", "Expression", "CssColor", "Color"], "class_members": [{"name": "parameterTypeRegistry", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests that a conflicting parameter type is not detected for the regexp."}, {"name": "matches_RegularExpression_arguments_with_custom_parameter_type_without_name", "primary_tested": ["RegularExpression.match(String)"], "associated_methods": ["Color.<init>(String)"], "external_dependencies": {"modules": ["RegularExpression", "Expression", "Color"], "class_members": [{"name": "parameterTypeRegistry", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests matching RegularExpression arguments with a custom parameter type without a name."}]}, {"file_path": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactoryTest.java", "testclass_name": "ExpressionFactoryTest", "dependencies": ["package io.cucumber.cucumberexpressions;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.api.function.Executable;", "import java.util.Locale;", "import static java.util.Collections.singleton;", "import static org.hamcrest.CoreMatchers.is;", "import static org.hamcrest.MatcherAssert.assertThat;", "import static org.hamcrest.core.IsEqual.equalTo;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;"], "name": "ExpressionFactoryTest", "description": "Unit tests for the ExpressionFactory class, which creates different types of expressions based on input strings.", "class_members": {"methods": [{"name": "assertRegularExpression", "signature": "void assertRegularExpression(String expressionString)"}, {"name": "assertRegularExpression", "signature": "void assertRegularExpression(String expectedSource, String expressionString)"}, {"name": "assertCucumberExpression", "signature": "void assertCucumberExpression(String expressionString)"}, {"name": "assertExpression", "signature": "void assertExpression(Class<? extends Expression> expectedClass, String expectedSource, String expressionString)"}, {"name": "createExpression", "signature": "Expression createExpression(String expressionString)"}]}, "test_cases": [{"name": "creates_cucumber_expression_for_empty", "primary_tested": ["ExpressionFactory.createExpression(String)"], "associated_methods": ["ExpressionFactoryTest.assertCucumberExpression(String)"], "external_dependencies": {"modules": ["ExpressionFactory", "CucumberExpression"], "class_members": [{"name": "assertCucumberExpression", "type": "method"}]}, "category": "unit", "description": "Tests the creation of a Cucumber expression from an empty string."}, {"name": "creates_cucumber_expression_by_default", "primary_tested": ["ExpressionFactory.createExpression(String)"], "associated_methods": ["ExpressionFactoryTest.assertCucumberExpression(String)"], "external_dependencies": {"modules": ["ExpressionFactory", "CucumberExpression"], "class_members": [{"name": "assertCucumberExpression", "type": "method"}]}, "category": "unit", "description": "Tests the default creation of a Cucumber expression from a string."}, {"name": "creates_regular_expression_for_anchors", "primary_tested": ["ExpressionFactory.createExpression(String)"], "associated_methods": ["ExpressionFactoryTest.assertRegularExpression(String)"], "external_dependencies": {"modules": ["ExpressionFactory", "RegularExpression"], "class_members": [{"name": "assertRegularExpression", "type": "method"}]}, "category": "unit", "description": "Tests the creation of a Regular expression from a string with anchors."}, {"name": "creates_regular_expression_for_slashes", "primary_tested": ["ExpressionFactory.createExpression(String)"], "associated_methods": ["ExpressionFactoryTest.assertRegularExpression(String,String)"], "external_dependencies": {"modules": ["ExpressionFactory", "RegularExpression"], "class_members": [{"name": "assertRegularExpression", "type": "method"}]}, "category": "unit", "description": "Tests the creation of a Regular expression from a string with slashes."}, {"name": "creates_cucumber_expression_for_parenthesis_with_alpha", "primary_tested": ["ExpressionFactory.createExpression(String)"], "associated_methods": ["ExpressionFactoryTest.assertCucumberExpression(String)"], "external_dependencies": {"modules": ["ExpressionFactory", "CucumberExpression"], "class_members": [{"name": "assertCucumberExpression", "type": "method"}]}, "category": "unit", "description": "Tests the creation of a Cucumber expression from a string with alphabetic characters inside parentheses."}, {"name": "creates_cucumber_expression_for_escaped_parenthesis_with_regex_symbols", "primary_tested": ["ExpressionFactory.createExpression(String)"], "associated_methods": ["ExpressionFactoryTest.assertCucumberExpression(String)"], "external_dependencies": {"modules": ["ExpressionFactory", "CucumberExpression"], "class_members": [{"name": "assertCucumberExpression", "type": "method"}]}, "category": "unit", "description": "Tests the creation of a Cucumber expression from a string with escaped parentheses and regex symbols."}, {"name": "creates_cucumber_expression_for_escaped_parenthesis_with_alpha", "primary_tested": ["ExpressionFactory.createExpression(String)"], "associated_methods": ["ExpressionFactoryTest.assertCucumberExpression(String)"], "external_dependencies": {"modules": ["ExpressionFactory", "CucumberExpression"], "class_members": [{"name": "assertCucumberExpression", "type": "method"}]}, "category": "unit", "description": "Tests the creation of a Cucumber expression from a string with escaped parentheses and alphabetic characters."}, {"name": "creates_cucumber_expression_for_parenthesis_with_regex_symbols", "primary_tested": ["ExpressionFactory.createExpression(String)"], "associated_methods": ["ExpressionFactoryTest.assertCucumberExpression(String)"], "external_dependencies": {"modules": ["ExpressionFactory", "CucumberExpression"], "class_members": [{"name": "assertCucumberExpression", "type": "method"}]}, "category": "unit", "description": "Tests the creation of a Cucumber expression from a string with regex symbols inside parentheses."}, {"name": "creates_cucumber_expression_for_only_begin_anchor", "primary_tested": ["ExpressionFactory.createExpression(String)"], "associated_methods": ["ExpressionFactoryTest.assertRegularExpression(String)"], "external_dependencies": {"modules": ["ExpressionFactory", "RegularExpression"], "class_members": [{"name": "assertRegularExpression", "type": "method"}]}, "category": "unit", "description": "Tests the creation of a Regular expression from a string with only a begin anchor."}, {"name": "creates_cucumber_expression_for_only_end_anchor", "primary_tested": ["ExpressionFactory.createExpression(String)"], "associated_methods": ["ExpressionFactoryTest.assertRegularExpression(String)"], "external_dependencies": {"modules": ["ExpressionFactory", "RegularExpression"], "class_members": [{"name": "assertRegularExpression", "type": "method"}]}, "category": "unit", "description": "Tests the creation of a Regular expression from a string with only an end anchor."}, {"name": "creates_regular_expression_for_slashed_anchors", "primary_tested": ["ExpressionFactory.createExpression(String)"], "associated_methods": ["ExpressionFactoryTest.assertRegularExpression(String,String)"], "external_dependencies": {"modules": ["ExpressionFactory", "RegularExpression"], "class_members": [{"name": "assertRegularExpression", "type": "method"}]}, "category": "unit", "description": "Tests the creation of a Regular expression from a string with slashed anchors."}, {"name": "explains_cukexp_regexp_mix", "primary_tested": ["ExpressionFactory.createExpression(String)"], "associated_methods": ["ExpressionFactoryTest.assertThrows(Class<T>,Executable)"], "external_dependencies": {"modules": ["ExpressionFactory", "CucumberExpressionException"], "class_members": [{"name": "assertThrows", "type": "method"}]}, "category": "unit", "description": "Tests the handling of a mix of Cucumber expression and regular expression syntax, expecting an exception."}]}, {"file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "dependencies": ["package io.cucumber.cucumberexpressions;", "import org.junit.jupiter.api.Test;", "import java.util.ArrayList;", "import java.util.List;", "import java.util.regex.Pattern;", "import static java.util.Arrays.asList;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;"], "name": "TreeRegexpTest", "description": "Unit tests for the TreeRegexp class, which handles regular expressions and their groups.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "exposes_group_source", "primary_tested": ["TreeRegexp.getGroupBuilder()"], "associated_methods": ["GroupBuilder.getSource()"], "external_dependencies": {"modules": ["TreeRegexp", "GroupBuilder"], "class_members": []}, "category": "unit", "description": "Tests if the TreeRegexp class correctly exposes the source of its groups."}, {"name": "builds_tree", "primary_tested": ["TreeRegexp.match(String)"], "associated_methods": ["Group.getChildren()", "Group.getValue()"], "external_dependencies": {"modules": ["TreeRegexp", "Group"], "class_members": []}, "category": "unit", "description": "Tests if the TreeRegexp class correctly builds a tree of groups from a given input string."}, {"name": "ignores_question_mark_colon_non_capturing_group", "primary_tested": ["TreeRegexp.match(String)"], "associated_methods": ["Group.getValue()", "Group.getChildren()"], "external_dependencies": {"modules": ["TreeRegexp", "Group"], "class_members": []}, "category": "unit", "description": "Tests if the TreeRegexp class correctly ignores non-capturing groups denoted by '(?:...)'."}, {"name": "ignores_question_mark_exclamation_mark_non_capturing_group", "primary_tested": ["TreeRegexp.match(String)"], "associated_methods": ["Group.getValue()", "Group.getChildren()"], "external_dependencies": {"modules": ["TreeRegexp", "Group"], "class_members": []}, "category": "unit", "description": "Tests if the TreeRegexp class correctly ignores non-capturing groups denoted by '(?!...)'."}, {"name": "ignores_question_mark_equal_sign_non_capturing_group", "primary_tested": ["TreeRegexp.match(String)"], "associated_methods": ["Group.getValue()", "Group.getChildren()"], "external_dependencies": {"modules": ["TreeRegexp", "Group"], "class_members": []}, "category": "unit", "description": "Tests if the TreeRegexp class correctly ignores non-capturing groups denoted by '(?=...)'."}, {"name": "ignores_question_mark_less_than_equal_sign_non_capturing_group", "primary_tested": ["TreeRegexp.match(String)"], "associated_methods": ["Group.getValue()", "Group.getChildren()"], "external_dependencies": {"modules": ["TreeRegexp", "Group"], "class_members": []}, "category": "unit", "description": "Tests if the TreeRegexp class correctly ignores non-capturing groups denoted by '(?<=...)'."}, {"name": "ignores_question_mark_less_than_exclamation_mark_non_capturing_group", "primary_tested": ["TreeRegexp.match(String)"], "associated_methods": ["Group.getValue()", "Group.getChildren()"], "external_dependencies": {"modules": ["TreeRegexp", "Group"], "class_members": []}, "category": "unit", "description": "Tests if the TreeRegexp class correctly ignores non-capturing groups denoted by '(?<!...)'."}, {"name": "ignores_question_mark_greater_then_non_capturing_group", "primary_tested": ["TreeRegexp.match(String)"], "associated_methods": ["Group.getValue()", "Group.getChildren()"], "external_dependencies": {"modules": ["TreeRegexp", "Group"], "class_members": []}, "category": "unit", "description": "Tests if the TreeRegexp class correctly ignores non-capturing groups denoted by '(?>...)'."}, {"name": "matches_named_capturing_group", "primary_tested": ["TreeRegexp.match(String)"], "associated_methods": ["Group.getValue()", "Group.getChildren()"], "external_dependencies": {"modules": ["TreeRegexp", "Group"], "class_members": []}, "category": "unit", "description": "Tests if the TreeRegexp class correctly matches named capturing groups denoted by '(?<name>...)'."}, {"name": "matches_optional_group", "primary_tested": ["TreeRegexp.match(String)"], "associated_methods": ["Group.getValue()", "Group.getChildren()"], "external_dependencies": {"modules": ["TreeRegexp", "Group"], "class_members": []}, "category": "unit", "description": "Tests if the TreeRegexp class correctly matches optional groups denoted by '(...)?'."}, {"name": "matches_nested_groups", "primary_tested": ["TreeRegexp.match(String)"], "associated_methods": ["Group.getValue()", "Group.getChildren()"], "external_dependencies": {"modules": ["TreeRegexp", "Group"], "class_members": []}, "category": "unit", "description": "Tests if the TreeRegexp class correctly matches nested groups."}, {"name": "captures_non_capturing_groups_with_capturing_groups_inside", "primary_tested": ["TreeRegexp.match(String)"], "associated_methods": ["Group.getValue()", "Group.getChildren()"], "external_dependencies": {"modules": ["TreeRegexp", "Group"], "class_members": []}, "category": "unit", "description": "Tests if the TreeRegexp class correctly captures non-capturing groups that contain capturing groups inside."}, {"name": "detects_multiple_non_capturing_groups", "primary_tested": ["TreeRegexp.match(String)"], "associated_methods": ["Group.getChildren()"], "external_dependencies": {"modules": ["TreeRegexp", "Group"], "class_members": []}, "category": "unit", "description": "Tests if the TreeRegexp class correctly detects multiple non-capturing groups."}, {"name": "works_with_escaped_backslash", "primary_tested": ["TreeRegexp.match(String)"], "associated_methods": ["Group.getChildren()"], "external_dependencies": {"modules": ["TreeRegexp", "Group"], "class_members": []}, "category": "unit", "description": "Tests if the TreeRegexp class correctly handles escaped backslashes in the regular expression."}, {"name": "works_with_slash_which_doesnt_need_escaping_in_java", "primary_tested": ["TreeRegexp.match(String)"], "associated_methods": ["Group.getChildren()"], "external_dependencies": {"modules": ["TreeRegexp", "Group"], "class_members": []}, "category": "unit", "description": "Tests if the TreeRegexp class correctly handles slashes in the regular expression, which do not need escaping in Java."}, {"name": "works_digit_and_word", "primary_tested": ["TreeRegexp.match(String)"], "associated_methods": ["Group.getChildren()"], "external_dependencies": {"modules": ["TreeRegexp", "Group"], "class_members": []}, "category": "unit", "description": "Tests if the TreeRegexp class correctly matches digits and words in the regular expression."}, {"name": "captures_start_and_end", "primary_tested": ["TreeRegexp.match(String)"], "associated_methods": ["Group.getChildren()", "Group.getStart()", "Group.getEnd()"], "external_dependencies": {"modules": ["TreeRegexp", "Group"], "class_members": []}, "category": "unit", "description": "Tests if the TreeRegexp class correctly captures the start and end positions of groups in the input string."}, {"name": "doesnt_consider_parenthesis_in_character_class_as_group", "primary_tested": ["TreeRegexp.match(String)"], "associated_methods": ["Group.getValue()", "Group.getChildren()"], "external_dependencies": {"modules": ["TreeRegexp", "Group"], "class_members": []}, "category": "unit", "description": "Tests if the TreeRegexp class correctly handles parentheses within character classes without considering them as groups."}, {"name": "works_with_flags", "primary_tested": ["TreeRegexp.match(String)"], "associated_methods": ["Group.getValue()"], "external_dependencies": {"modules": ["TreeRegexp", "Group", "Pattern"], "class_members": []}, "category": "unit", "description": "Tests if the TreeRegexp class correctly handles regular expressions with flags."}, {"name": "works_with_inline_flags", "primary_tested": ["TreeRegexp.match(String)"], "associated_methods": ["Group.getValue()", "Group.getChildren()"], "external_dependencies": {"modules": ["TreeRegexp", "Group", "Pattern"], "class_members": []}, "category": "unit", "description": "Tests if the TreeRegexp class correctly handles regular expressions with inline flags."}, {"name": "works_with_non_capturing_inline_flags", "primary_tested": ["TreeRegexp.match(String)"], "associated_methods": ["Group.getValue()", "Group.getChildren()"], "external_dependencies": {"modules": ["TreeRegexp", "Group", "Pattern"], "class_members": []}, "category": "unit", "description": "Tests if the TreeRegexp class correctly handles regular expressions with non-capturing inline flags."}, {"name": "empty_capturing_group", "primary_tested": ["TreeRegexp.match(String)"], "associated_methods": ["Group.getValue()", "Group.getChildren()"], "external_dependencies": {"modules": ["TreeRegexp", "Group", "Pattern"], "class_members": []}, "category": "unit", "description": "Tests if the TreeRegexp class correctly handles empty capturing groups."}, {"name": "empty_non_capturing_group", "primary_tested": ["TreeRegexp.match(String)"], "associated_methods": ["Group.getValue()", "Group.getChildren()"], "external_dependencies": {"modules": ["TreeRegexp", "Group", "Pattern"], "class_members": []}, "category": "unit", "description": "Tests if the TreeRegexp class correctly handles empty non-capturing groups."}, {"name": "empty_look_ahead", "primary_tested": ["TreeRegexp.match(String)"], "associated_methods": ["Group.getValue()", "Group.getChildren()"], "external_dependencies": {"modules": ["TreeRegexp", "Group", "Pattern"], "class_members": []}, "category": "unit", "description": "Tests if the TreeRegexp class correctly handles empty look-ahead groups."}, {"name": "uses_loaded_pattern_compiler_service", "primary_tested": ["TreeRegexp.match(String)"], "associated_methods": ["Group.getValue()"], "external_dependencies": {"modules": ["TreeRegexp", "Group", "PatternCompilerProvider", "Pattern"], "class_members": []}, "category": "unit", "description": "Tests if the TreeRegexp class correctly uses a loaded pattern compiler service."}]}, {"file_path": "src/test/java/io/cucumber/cucumberexpressions/RegularExpressionTest.java", "testclass_name": "RegularExpressionTest", "dependencies": ["package io.cucumber.cucumberexpressions;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.api.extension.ParameterContext;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.converter.ArgumentConversionException;", "import org.junit.jupiter.params.converter.ArgumentConverter;", "import org.junit.jupiter.params.converter.ConvertWith;", "import org.junit.jupiter.params.provider.MethodSource;", "import org.yaml.snakeyaml.Yaml;", "import java.io.IOException;", "import java.io.InputStream;", "import java.lang.reflect.Type;", "import java.nio.file.Path;", "import java.nio.file.Paths;", "import java.util.ArrayList;", "import java.util.Comparator;", "import java.util.List;", "import java.util.Locale;", "import java.util.regex.Pattern;", "import java.util.stream.Collectors;", "import static java.nio.file.Files.newDirectoryStream;", "import static java.nio.file.Files.newInputStream;", "import static java.util.Arrays.asList;", "import static java.util.Collections.emptyList;", "import static java.util.Collections.singletonList;", "import static java.util.regex.Pattern.compile;", "import static org.hamcrest.MatcherAssert.assertThat;", "import static org.junit.jupiter.api.Assertions.assertEquals;"]}, {"file_path": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionGeneratorTest.java", "testclass_name": "CucumberExpressionGeneratorTest", "dependencies": ["package io.cucumber.cucumberexpressions;", "import org.junit.jupiter.api.Test;", "import java.text.DateFormat;", "import java.text.ParseException;", "import java.util.ArrayList;", "import java.util.Collections;", "import java.util.Currency;", "import java.util.Date;", "import java.util.List;", "import java.util.Locale;", "import static java.util.Arrays.asList;", "import static java.util.Collections.singletonList;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.fail;"]}]