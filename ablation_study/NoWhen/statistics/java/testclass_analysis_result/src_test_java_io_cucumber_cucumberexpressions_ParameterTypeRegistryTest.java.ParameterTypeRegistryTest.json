{"file_path": "src/test/java/io/cucumber/cucumberexpressions/ParameterTypeRegistryTest.java", "testclass_name": "ParameterTypeRegistryTest", "dependencies": ["package io.cucumber.cucumberexpressions;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.api.function.Executable;", "import java.math.BigDecimal;", "import java.util.Locale;", "import java.util.regex.Pattern;", "import static org.hamcrest.CoreMatchers.is;", "import static org.hamcrest.CoreMatchers.nullValue;", "import static org.hamcrest.MatcherAssert.assertThat;", "import static org.hamcrest.core.IsEqual.equalTo;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;"], "name": "ParameterTypeRegistryTest", "description": "Tests for the ParameterTypeRegistry class, focusing on parameter type definitions and lookups.", "class_members": {"variables": [{"name": "CAPITALISED_WORD", "type": "static final String"}, {"name": "registry", "type": "ParameterTypeRegistry"}], "methods": [], "nested_classes": [{"name": "Name", "description": "Internal class representing a name"}, {"name": "Person", "description": "Internal class representing a person"}, {"name": "Place", "description": "Internal class representing a place"}]}, "fixtures": [], "test_cases": [{"name": "does_not_allow_more_than_one_preferential_parameter_type_for_each_regexp", "primary_tested": ["ParameterTypeRegistry.defineParameterType(ParameterType)"], "associated_methods": [], "external_dependencies": {"modules": ["ParameterType", "CucumberExpressionException"], "class_members": [{"name": "registry", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests that the registry does not allow more than one preferential parameter type for the same regular expression."}, {"name": "looks_up_preferential_parameter_type_by_regexp", "primary_tested": ["ParameterTypeRegistry.lookupByRegexp(String,Pattern,String)"], "associated_methods": [], "external_dependencies": {"modules": ["ParameterType", "Pattern"], "class_members": [{"name": "registry", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the lookup of a preferential parameter type by regular expression."}, {"name": "throws_ambiguous_exception_on_lookup_when_no_parameter_types_are_preferential", "primary_tested": ["ParameterTypeRegistry.lookupByRegexp(String,Pattern,String)"], "associated_methods": [], "external_dependencies": {"modules": ["ParameterType", "Pattern", "AmbiguousParameterTypeException"], "class_members": [{"name": "registry", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests that an ambiguous exception is thrown when no parameter types are preferential during lookup."}, {"name": "does_not_allow_anonymous_parameter_type_to_be_registered", "primary_tested": ["ParameterTypeRegistry.defineParameterType(ParameterType)"], "associated_methods": [], "external_dependencies": {"modules": ["ParameterType", "DuplicateTypeNameException"], "class_members": [{"name": "registry", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests that the registry does not allow an anonymous parameter type to be registered."}, {"name": "parse_decimal_numbers_in_english", "primary_tested": ["Expression.match(String)"], "associated_methods": [], "external_dependencies": {"modules": ["ExpressionFactory", "Expression", "ParameterTypeRegistry", "BigDecimal"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the parsing of decimal numbers in English locale."}, {"name": "parse_decimal_numbers_in_german", "primary_tested": ["Expression.match(String)"], "associated_methods": [], "external_dependencies": {"modules": ["ExpressionFactory", "Expression", "ParameterTypeRegistry", "BigDecimal"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the parsing of decimal numbers in German locale."}, {"name": "parse_decimal_numbers_in_canadian_french", "primary_tested": ["Expression.match(String)"], "associated_methods": [], "external_dependencies": {"modules": ["ExpressionFactory", "Expression", "ParameterTypeRegistry", "BigDecimal"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the parsing of decimal numbers in Canadian French locale."}, {"name": "parse_decimal_numbers_in_norwegian", "primary_tested": ["Expression.match(String)"], "associated_methods": [], "external_dependencies": {"modules": ["ExpressionFactory", "Expression", "ParameterTypeRegistry", "BigDecimal"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the parsing of decimal numbers in Norwegian locale."}]}