[{"strategy": "generate", "code": "\npackage io.cucumber.cucumberexpressions;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.util.Locale;\nimport java.util.regex.Pattern;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ParameterTypeRegistry_defineParameterTypeTest {\n    private ParameterTypeRegistry registry;\n\n    @BeforeEach\n    public void setUp() {\n        registry = new ParameterTypeRegistry(Locale.ENGLISH);\n    }\n\n    @Test\n    public void testDefineParameterTypeWithUniqueName() {\n        ParameterType<String> parameterType = new ParameterType<>(\"uniqueName\", \"uniqueRegex\", String.class, (String s) -> s, false, false);\n        registry.defineParameterType(parameterType);\n        assertNotNull(registry.lookupByTypeName(\"uniqueName\"));\n    }\n\n    @Test\n    public void testDefineParameterTypeWithDuplicateName() {\n        ParameterType<String> parameterType1 = new ParameterType<>(\"duplicateName\", \"duplicateRegex1\", String.class, (String s) -> s, false, false);\n        ParameterType<String> parameterType2 = new ParameterType<>(\"duplicateName\", \"duplicateRegex2\", String.class, (String s) -> s, false, false);\n        registry.defineParameterType(parameterType1);\n        assertThrows(DuplicateTypeNameException.class, () -> registry.defineParameterType(parameterType2));\n    }\n\n    @Test\n    public void testDefineParameterTypeWithAnonymousName() {\n        ParameterType<String> parameterType = new ParameterType<>(\"\", \"anonymousRegex\", String.class, (String s) -> s, false, false);\n        registry.defineParameterType(parameterType);\n        assertNull(registry.lookupByTypeName(\"\"));\n    }\n\n    @Test\n    public void testDefineParameterTypeWithPreferentialRegexpMatch() {\n        ParameterType<String> parameterType1 = new ParameterType<>(\"name1\", \"preferentialRegex\", String.class, (String s) -> s, false, true);\n        ParameterType<String> parameterType2 = new ParameterType<>(\"name2\", \"preferentialRegex\", String.class, (String s) -> s, false, true);\n        registry.defineParameterType(parameterType1);\n        assertThrows(CucumberExpressionException.class, () -> registry.defineParameterType(parameterType2));\n    }\n\n    @Test\n    public void testDefineParameterTypeWithNonPreferentialRegexpMatch() {\n        ParameterType<String> parameterType1 = new ParameterType<>(\"name1\", \"nonPreferentialRegex\", String.class, (String s) -> s, false, false);\n        ParameterType<String> parameterType2 = new ParameterType<>(\"name2\", \"nonPreferentialRegex\", String.class, (String s) -> s, false, false);\n        registry.defineParameterType(parameterType1);\n        registry.defineParameterType(parameterType2);\n        assertNotNull(registry.lookupByRegexp(\"nonPreferentialRegex\", Pattern.compile(\"nonPreferentialRegex\"), \"test\"));\n    }\n}\n"}]