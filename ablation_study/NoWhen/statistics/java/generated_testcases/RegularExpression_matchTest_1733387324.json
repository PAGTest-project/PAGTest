[{"strategy": "retry", "code": "\npackage io.cucumber.cucumberexpressions;\n\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.mockito.Mockito;\n\nimport java.lang.reflect.Type;\nimport java.util.List;\nimport java.util.regex.Pattern;\n\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\nimport static org.junit.jupiter.api.Assertions.assertNull;\nimport static org.mockito.Mockito.when;\n\npublic class RegularExpression_matchTest {\n\n    private RegularExpression regularExpression;\n    private ParameterTypeRegistry parameterTypeRegistry;\n    private TreeRegexp treeRegexp;\n    private Group group;\n    private GroupBuilder groupBuilder;\n    private ParameterType<?> parameterType;\n\n    @BeforeEach\n    public void setUp() {\n        parameterTypeRegistry = Mockito.mock(ParameterTypeRegistry.class);\n        treeRegexp = Mockito.mock(TreeRegexp.class);\n        group = Mockito.mock(Group.class);\n        groupBuilder = Mockito.mock(GroupBuilder.class);\n        parameterType = Mockito.mock(ParameterType.class);\n\n        when(treeRegexp.match(\"validText\")).thenReturn(group);\n        when(treeRegexp.getGroupBuilder()).thenReturn(groupBuilder);\n        when(groupBuilder.getChildren()).thenReturn(List.of(groupBuilder));\n        when(groupBuilder.getSource()).thenReturn(\"parameterTypeRegexp\");\n        when(parameterTypeRegistry.lookupByRegexp(\"parameterTypeRegexp\", Pattern.compile(\".*\"), \"validText\")).thenReturn(parameterType);\n        when(parameterType.isAnonymous()).thenReturn(false);\n\n        regularExpression = new RegularExpression(Pattern.compile(\".*\"), parameterTypeRegistry);\n    }\n\n    @Test\n    public void testMatch_ValidText() {\n        List<Argument<?>> result = regularExpression.match(\"validText\", String.class);\n        assertNotNull(result);\n    }\n\n    @Test\n    public void testMatch_NullGroup() {\n        when(treeRegexp.match(\"invalidText\")).thenReturn(null);\n        regularExpression = new RegularExpression(Pattern.compile(\".*\"), parameterTypeRegistry);\n        List<Argument<?>> result = regularExpression.match(\"invalidText\", String.class);\n        assertNull(result);\n    }\n}\n"}]