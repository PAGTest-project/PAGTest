[{"uris": "src/test/java/org/openapitools/openapidiff/core/RequestDiffTest.java.RequestDiffTest", "name": "RequestDiffTest", "file_path": "src/test/java/org/openapitools/openapidiff/core/RequestDiffTest.java", "superclasses": "", "methods": ["[void]testDiffDifferent()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class RequestDiffTest {\n  private final String OPENAPI_DOC1 = \"request_diff_1.yaml\";\n  private final String OPENAPI_DOC2 = \"request_diff_2.yaml\";\n\n  @Test\n  public void testDiffDifferent() {\n    assertOpenApiChangedEndpoints(OPENAPI_DOC1, OPENAPI_DOC2);\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final String OPENAPI_DOC1 = \"request_diff_1.yaml\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "OPENAPI_DOC1 = \"request_diff_1.yaml\"", "syntax_pass": true}, {"attribute_expression": "private final String OPENAPI_DOC2 = \"request_diff_2.yaml\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "OPENAPI_DOC2 = \"request_diff_2.yaml\"", "syntax_pass": true}]}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ReferenceDiffCacheTest.java.ReferenceDiffCacheTest", "name": "ReferenceDiffCacheTest", "file_path": "src/test/java/org/openapitools/openapidiff/core/ReferenceDiffCacheTest.java", "superclasses": "", "methods": ["[void]testDiffSame()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class ReferenceDiffCacheTest {\n\n  private final String OPENAPI_DOC1 = \"schema_diff_cache_1.yaml\";\n\n  @Test\n  public void testDiffSame() {\n    assertOpenApiAreEquals(OPENAPI_DOC1, OPENAPI_DOC1);\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final String OPENAPI_DOC1 = \"schema_diff_cache_1.yaml\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "OPENAPI_DOC1 = \"schema_diff_cache_1.yaml\"", "syntax_pass": true}]}, {"uris": "src/test/java/org/openapitools/openapidiff/core/SecurityDiffTest.java.SecurityDiffTest", "name": "SecurityDiffTest", "file_path": "src/test/java/org/openapitools/openapidiff/core/SecurityDiffTest.java", "superclasses": "", "methods": ["[void]testDiffDifferent()", "[void]testWithUnknownSecurityScheme()", "[void]testMissingSecurityDefinition()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class SecurityDiffTest {\n  private final String OPENAPI_DOC1 = \"security_diff_1.yaml\";\n  private final String OPENAPI_DOC2 = \"security_diff_2.yaml\";\n  private final String OPENAPI_DOC3 = \"security_diff_3.yaml\";\n  private final String OPENAPI_DOC4 = \"security_diff_4.yaml\";\n  private final String OPENAPI_DOC5 = \"security_diff_5.yaml\";\n\n  @Test\n  public void testDiffDifferent() {\n    ChangedOpenApi changedOpenApi = OpenApiCompare.fromLocations(OPENAPI_DOC1, OPENAPI_DOC2);\n\n    assertThat(changedOpenApi.getChangedOperations()).hasSize(3);\n\n    ChangedOperation changedOperation1 =\n        changedOpenApi.getChangedOperations().stream()\n            .filter(x -> x.getPathUrl().equals(\"/pet/{petId}\"))\n            .findFirst()\n            .get();\n    assertThat(changedOperation1).isNotNull();\n    assertThat(changedOperation1.isCompatible()).isFalse();\n    ChangedSecurityRequirements changedSecurityRequirements1 =\n        changedOperation1.getSecurityRequirements();\n    assertThat(changedSecurityRequirements1).isNotNull();\n    assertThat(changedSecurityRequirements1.isCompatible()).isFalse();\n    assertThat(changedSecurityRequirements1.getIncreased()).hasSize(1);\n    assertThat(changedSecurityRequirements1.getChanged()).hasSize(1);\n    ChangedSecurityRequirement changedSecurityRequirement1 =\n        changedSecurityRequirements1.getChanged().get(0);\n    assertThat(changedSecurityRequirement1.getChanged()).hasSize(1);\n    ChangedSecuritySchemeScopes changedScopes1 =\n        changedSecurityRequirement1.getChanged().get(0).getChangedScopes();\n    assertThat(changedScopes1)\n        .isNotNull()\n        .satisfies(\n            stringListDiff ->\n                assertThat(stringListDiff.getIncreased())\n                    .hasSize(1)\n                    .first()\n                    .asString()\n                    .isEqualTo(\"read:pets\"));\n\n    ChangedOperation changedOperation2 =\n        changedOpenApi.getChangedOperations().stream()\n            .filter(x -> x.getPathUrl().equals(\"/pet3\"))\n            .findFirst()\n            .get();\n    assertThat(changedOperation2).isNotNull();\n    assertThat(changedOperation2.isCompatible()).isFalse();\n    ChangedSecurityRequirements changedSecurityRequirements2 =\n        changedOperation2.getSecurityRequirements();\n    assertThat(changedSecurityRequirements2).isNotNull();\n    assertThat(changedSecurityRequirements2.isCompatible()).isFalse();\n    assertThat(changedSecurityRequirements2.getChanged()).hasSize(1);\n    ChangedSecurityRequirement changedSecurityRequirement2 =\n        changedSecurityRequirements2.getChanged().get(0);\n    assertThat(changedSecurityRequirement2.getChanged()).hasSize(1);\n    ChangedOAuthFlow changedImplicitOAuthFlow2 =\n        changedSecurityRequirement2.getChanged().get(0).getOAuthFlows().getImplicitOAuthFlow();\n    assertThat(changedImplicitOAuthFlow2).isNotNull();\n    assertThat(changedImplicitOAuthFlow2.isAuthorizationUrl()).isTrue();\n\n    ChangedOperation changedOperation3 =\n        changedOpenApi.getChangedOperations().stream()\n            .filter(x -> x.getPathUrl().equals(\"/pet/findByStatus2\"))\n            .findFirst()\n            .get();\n    assertThat(changedOperation3).isNotNull();\n    assertThat(changedOperation3.isCompatible()).isTrue();\n    ChangedSecurityRequirements changedSecurityRequirements3 =\n        changedOperation3.getSecurityRequirements();\n    assertThat(changedSecurityRequirements3).isNotNull();\n    assertThat(changedSecurityRequirements3.getIncreased()).hasSize(1);\n    SecurityRequirement securityRequirement3 = changedSecurityRequirements3.getIncreased().get(0);\n    assertThat(securityRequirement3)\n        .hasSize(1)\n        .hasEntrySatisfying(\"petstore_auth\", values -> assertThat(values).hasSize(2));\n  }\n\n  @Test\n  public void testWithUnknownSecurityScheme() {\n    assertThrows(\n        IllegalArgumentException.class,\n        () -> OpenApiCompare.fromLocations(OPENAPI_DOC3, OPENAPI_DOC3));\n    assertThrows(\n        IllegalArgumentException.class,\n        () -> OpenApiCompare.fromLocations(OPENAPI_DOC4, OPENAPI_DOC4));\n  }\n\n  @Test\n  public void testMissingSecurityDefinition() {\n    assertThrows(\n        IllegalArgumentException.class,\n        () -> OpenApiCompare.fromLocations(OPENAPI_DOC5, OPENAPI_DOC5));\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final String OPENAPI_DOC1 = \"security_diff_1.yaml\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "OPENAPI_DOC1 = \"security_diff_1.yaml\"", "syntax_pass": true}, {"attribute_expression": "private final String OPENAPI_DOC2 = \"security_diff_2.yaml\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "OPENAPI_DOC2 = \"security_diff_2.yaml\"", "syntax_pass": true}, {"attribute_expression": "private final String OPENAPI_DOC3 = \"security_diff_3.yaml\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "OPENAPI_DOC3 = \"security_diff_3.yaml\"", "syntax_pass": true}, {"attribute_expression": "private final String OPENAPI_DOC4 = \"security_diff_4.yaml\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "OPENAPI_DOC4 = \"security_diff_4.yaml\"", "syntax_pass": true}, {"attribute_expression": "private final String OPENAPI_DOC5 = \"security_diff_5.yaml\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "OPENAPI_DOC5 = \"security_diff_5.yaml\"", "syntax_pass": true}]}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java.ParameterDiffTest", "name": "ParameterDiffTest", "file_path": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java", "superclasses": "", "methods": ["[void]testDiffDifferent()", "[void]issue458MaximumDecreased()", "[void]issue458MaximumIncreased()", "[void]issue458MinimumDecreased()", "[void]issue458MinimumIncreased()", "[void]issue458IntegerFormatChanged()", "[void]issue458ExclusiveMinimumChanged()", "[void]issue458ExclusiveMaximumChanged()", "[void]issue458ExclusiveMinimumRemoved()", "[void]issue458ExclusiveMaximumRemoved()", "[void]issue458ExclusiveMaximumTrueToFalse()", "[void]issue458ExclusiveMinimumTrueToFalse()", "[void]issue458ExclusiveMaximumTrueRemoved()", "[void]issue458ExclusiveMinimumTrueRemoved()", "[void]issue488RenameParameterAddAndRemoveParameterReturnFalse()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class ParameterDiffTest {\n\n  @Test\n  public void testDiffDifferent() {\n    assertOpenApiChangedEndpoints(\"parameters_diff_1.yaml\", \"parameters_diff_2.yaml\");\n  }\n\n  @Test\n  public void issue458MaximumDecreased() {\n    assertOpenApiChangedEndpoints(\n        \"issue-458-integer-limits_1.yaml\", \"issue-458-integer-limits_2.yaml\");\n  }\n\n  @Test\n  public void issue458MaximumIncreased() {\n    assertOpenApiChangedEndpoints(\n        \"issue-458-integer-limits_1.yaml\", \"issue-458-integer-limits_3.yaml\");\n  }\n\n  @Test\n  public void issue458MinimumDecreased() {\n    assertOpenApiChangedEndpoints(\n        \"issue-458-integer-limits_1.yaml\", \"issue-458-integer-limits_4.yaml\");\n  }\n\n  @Test\n  public void issue458MinimumIncreased() {\n    assertOpenApiChangedEndpoints(\n        \"issue-458-integer-limits_1.yaml\", \"issue-458-integer-limits_5.yaml\");\n  }\n\n  @Test\n  public void issue458IntegerFormatChanged() {\n    assertOpenApiChangedEndpoints(\n        \"issue-458-integer-limits_1.yaml\", \"issue-458-integer-limits_6.yaml\");\n  }\n\n  @Test\n  public void issue458ExclusiveMinimumChanged() {\n    assertOpenApiChangedEndpoints(\n        \"issue-458-integer-limits_1.yaml\", \"issue-458-integer-limits_7.yaml\");\n  }\n\n  @Test\n  public void issue458ExclusiveMaximumChanged() {\n    assertOpenApiChangedEndpoints(\n        \"issue-458-integer-limits_1.yaml\", \"issue-458-integer-limits_8.yaml\");\n  }\n\n  @Test\n  public void issue458ExclusiveMinimumRemoved() {\n    assertOpenApiChangedEndpoints(\n        \"issue-458-integer-limits_1.yaml\", \"issue-458-integer-limits_9.yaml\");\n  }\n\n  @Test\n  public void issue458ExclusiveMaximumRemoved() {\n    assertOpenApiChangedEndpoints(\n        \"issue-458-integer-limits_1.yaml\", \"issue-458-integer-limits_10.yaml\");\n  }\n\n  @Test\n  public void issue458ExclusiveMaximumTrueToFalse() {\n    assertOpenApiChangedEndpoints(\n        \"issue-458-integer-limits_11.yaml\", \"issue-458-integer-limits_12.yaml\");\n  }\n\n  @Test\n  public void issue458ExclusiveMinimumTrueToFalse() {\n    assertOpenApiChangedEndpoints(\n        \"issue-458-integer-limits_11.yaml\", \"issue-458-integer-limits_13.yaml\");\n  }\n\n  @Test\n  public void issue458ExclusiveMaximumTrueRemoved() {\n    assertOpenApiChangedEndpoints(\n        \"issue-458-integer-limits_11.yaml\", \"issue-458-integer-limits_12.yaml\");\n  }\n\n  @Test\n  public void issue458ExclusiveMinimumTrueRemoved() {\n    assertOpenApiChangedEndpoints(\n        \"issue-458-integer-limits_11.yaml\", \"issue-458-integer-limits_13.yaml\");\n  }\n\n  @Test\n  public void issue488RenameParameterAddAndRemoveParameterReturnFalse() {\n    assertOpenApiChangedEndpoints(\"issue-488-1.json\", \"issue-488-2.json\");\n  }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/org/openapitools/openapidiff/core/LargeSchemaTest.java.LargeSchemaTest", "name": "LargeSchemaTest", "file_path": "src/test/java/org/openapitools/openapidiff/core/LargeSchemaTest.java", "superclasses": "", "methods": ["[void]testGeneratedApiSame()", "[void]testGeneratedApiDifferent()"], "method_uris": ["src/test/java/org/openapitools/openapidiff/core/LargeSchemaTest.java.LargeSchemaTest.[void]assertOpenApiAreEquals(OpenAPI,OpenAPI)", "src/test/java/org/openapitools/openapidiff/core/LargeSchemaTest.java.LargeSchemaTest.[void]assertOpenApiBackwardIncompatible(OpenAPI,OpenAPI)", "src/test/java/org/openapitools/openapidiff/core/LargeSchemaTest.java.LargeSchemaTest.[OpenAPI]largeGeneratedApi()", "src/test/java/org/openapitools/openapidiff/core/LargeSchemaTest.java.LargeSchemaTest.[Schema]refSchema(int)", "src/test/java/org/openapitools/openapidiff/core/LargeSchemaTest.java.LargeSchemaTest.[String]modelName(int)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class LargeSchemaTest {\n  public static final Logger LOG = getLogger(LargeSchemaTest.class);\n\n  @Test\n  public void testGeneratedApiSame() {\n    OpenAPI generated = largeGeneratedApi();\n    assertOpenApiAreEquals(generated, generated);\n  }\n\n  @Test\n  public void testGeneratedApiDifferent() {\n    OpenAPI generated = largeGeneratedApi();\n    OpenAPI generated2 = largeGeneratedApi();\n    assertOpenApiBackwardIncompatible(generated, generated2);\n  }\n\n  public static void assertOpenApiAreEquals(OpenAPI oldSpec, OpenAPI newSpec) {\n    ChangedOpenApi changedOpenApi = OpenApiCompare.fromSpecifications(oldSpec, newSpec);\n    LOG.info(\"Result: {}\", changedOpenApi.isChanged().getValue());\n    assertThat(changedOpenApi.getNewEndpoints()).isEmpty();\n    assertThat(changedOpenApi.getMissingEndpoints()).isEmpty();\n    assertThat(changedOpenApi.getChangedOperations()).isEmpty();\n  }\n\n  public static void assertOpenApiBackwardIncompatible(OpenAPI oldSpec, OpenAPI newSpec) {\n    ChangedOpenApi changedOpenApi = OpenApiCompare.fromSpecifications(oldSpec, newSpec);\n    LOG.info(\"Result: {}\", changedOpenApi.isChanged().getValue());\n    assertThat(changedOpenApi.isDifferent()).isTrue();\n    assertThat(changedOpenApi.isIncompatible()).isTrue();\n  }\n\n  public OpenAPI largeGeneratedApi() {\n    final int modelCount = 200;\n    final int arrayCount = 50;\n    final int refPerModelCount = 5;\n    final int endpointCount = 20;\n\n    Random random = new Random();\n\n    OpenAPI api = new OpenAPI();\n    api.setPaths(new Paths());\n    api.setComponents(new Components());\n\n    // create 200 model schemas\n    Map<String, Schema> schemas = new LinkedHashMap<>();\n    api.getComponents().setSchemas(schemas);\n    for (int i = 0; i < modelCount; i++) {\n      ObjectSchema schema = new ObjectSchema();\n      schema.setProperties(new LinkedHashMap<>());\n      schema.getProperties().put(\"name\", new StringSchema());\n      schema.getProperties().put(\"description\", new StringSchema());\n      List<String> required = new ArrayList<>();\n      required.add(\"name\");\n      schema.setRequired(required);\n      schemas.put(modelName(i), schema);\n    }\n\n    // create 50 array schemas\n    for (int i = modelCount; i < modelCount + arrayCount; i++) {\n      ArraySchema arraySchema = new ArraySchema();\n      arraySchema.setItems(refSchema(i));\n      schemas.put(modelName(i), arraySchema);\n    }\n\n    // list of schema names\n\n    // Create cyclic properties on schemas, make the refs required\n    schemas.values().stream()\n        .filter(schema -> schema instanceof ObjectSchema)\n        .map(schema -> (ObjectSchema) schema)\n        .forEach(\n            schema -> {\n              for (int i = 0; i < refPerModelCount; i++) {\n                int schemaNumber = random.nextInt(modelCount + arrayCount);\n                String propertyName = \"refTo\" + schemaNumber;\n                schema.getProperties().put(propertyName, refSchema(schemaNumber));\n                schema.getRequired().add(propertyName);\n              }\n            });\n\n    // generated endpoints\n    for (int i = 0; i < endpointCount; i++) {\n      String path = \"/endpoint\" + i;\n      PathItem pathItem = new PathItem();\n      Operation operation = new Operation();\n      pathItem.post(operation);\n\n      operation.setRequestBody(\n          new RequestBody()\n              .content(\n                  new Content()\n                      .addMediaType(\n                          \"application/json\", new MediaType().schema(refSchema(i % modelCount)))));\n      ApiResponse responseOk =\n          new ApiResponses()\n              .put(\n                  \"200\",\n                  new ApiResponse()\n                      .content(\n                          new Content()\n                              .addMediaType(\n                                  \"application/json\",\n                                  new MediaType().schema(refSchema(i % modelCount)))));\n      ApiResponses responses = new ApiResponses();\n      responses.put(\"200\", responseOk);\n      operation.setResponses(responses);\n      api.getPaths().put(path, pathItem);\n    }\n\n    try {\n      LOG.info(\"Printing schema to target/large-api.yaml\");\n      Yaml.pretty().writeValue(new File(\"target/large-api.yaml\"), api);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    return api;\n  }\n\n  private Schema refSchema(final int i) {\n    String itemModelName = modelName(i);\n    Schema refSchema = new Schema();\n    refSchema.set$ref(\"#/components/schemas/\" + itemModelName);\n    return refSchema;\n  }\n\n  private String modelName(final int i) {\n    return String.format(\"Model%03d\", i);\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "public static final Logger LOG = getLogger(LargeSchemaTest.class);", "docstring": "", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "Logger", "name": "LOG = getLogger(LargeSchemaTest.class)", "syntax_pass": true}]}, {"uris": "src/test/java/org/openapitools/openapidiff/core/AddPropDiffTest.java.AddPropDiffTest", "name": "AddPropDiffTest", "file_path": "src/test/java/org/openapitools/openapidiff/core/AddPropDiffTest.java", "superclasses": "", "methods": ["[void]testDiffSame()", "[void]testDiffDifferent()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class AddPropDiffTest {\n  private final String OPENAPI_DOC1 = \"add-prop-1.yaml\";\n  private final String OPENAPI_DOC2 = \"add-prop-2.yaml\";\n\n  @Test\n  public void testDiffSame() {\n    assertOpenApiAreEquals(OPENAPI_DOC1, OPENAPI_DOC1);\n  }\n\n  @Test\n  public void testDiffDifferent() {\n    assertOpenApiBackwardCompatible(OPENAPI_DOC1, OPENAPI_DOC2, true);\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final String OPENAPI_DOC1 = \"add-prop-1.yaml\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "OPENAPI_DOC1 = \"add-prop-1.yaml\"", "syntax_pass": true}, {"attribute_expression": "private final String OPENAPI_DOC2 = \"add-prop-2.yaml\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "OPENAPI_DOC2 = \"add-prop-2.yaml\"", "syntax_pass": true}]}, {"uris": "src/test/java/org/openapitools/openapidiff/core/RecursiveSchemaTest.java.RecursiveSchemaTest", "name": "RecursiveSchemaTest", "file_path": "src/test/java/org/openapitools/openapidiff/core/RecursiveSchemaTest.java", "superclasses": "", "methods": ["[void]testDiffSame()", "[void]testDiffDifferentCyclic()", "[void]testDiffDifferent()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class RecursiveSchemaTest {\n\n  private final String OPENAPI_DOC1 = \"recursive_model_1.yaml\";\n  private final String OPENAPI_DOC2 = \"recursive_model_2.yaml\";\n  private final String OPENAPI_DOC3 = \"recursive_model_3.yaml\";\n\n  @Test\n  public void testDiffSame() {\n    assertOpenApiAreEquals(OPENAPI_DOC1, OPENAPI_DOC1);\n  }\n\n  @Test\n  public void testDiffDifferentCyclic() {\n    assertOpenApiBackwardIncompatible(OPENAPI_DOC1, OPENAPI_DOC3);\n  }\n\n  @Test\n  public void testDiffDifferent() {\n    assertOpenApiBackwardIncompatible(OPENAPI_DOC1, OPENAPI_DOC2);\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final String OPENAPI_DOC1 = \"recursive_model_1.yaml\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "OPENAPI_DOC1 = \"recursive_model_1.yaml\"", "syntax_pass": true}, {"attribute_expression": "private final String OPENAPI_DOC2 = \"recursive_model_2.yaml\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "OPENAPI_DOC2 = \"recursive_model_2.yaml\"", "syntax_pass": true}, {"attribute_expression": "private final String OPENAPI_DOC3 = \"recursive_model_3.yaml\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "OPENAPI_DOC3 = \"recursive_model_3.yaml\"", "syntax_pass": true}]}, {"uris": "src/test/java/org/openapitools/openapidiff/core/JsonRenderTest.java.JsonRenderTest", "name": "JsonRenderTest", "file_path": "src/test/java/org/openapitools/openapidiff/core/JsonRenderTest.java", "superclasses": "", "methods": ["[void]renderDoesNotFailWhenPropertyHasBeenRemoved()", "[void]renderDoesNotFailForJsr310Types()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class JsonRenderTest {\n  @Test\n  public void renderDoesNotFailWhenPropertyHasBeenRemoved() {\n    JsonRender render = new JsonRender();\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream);\n    ChangedOpenApi diff =\n        OpenApiCompare.fromLocations(\"missing_property_1.yaml\", \"missing_property_2.yaml\");\n    render.render(diff, outputStreamWriter);\n    assertThat(outputStream.toString()).isNotBlank();\n  }\n\n  @Test\n  public void renderDoesNotFailForJsr310Types() {\n    JsonRender render = new JsonRender();\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream);\n    ChangedOpenApi diff =\n        OpenApiCompare.fromLocations(\"jsr310_property_1.yaml\", \"jsr310_property_2.yaml\");\n    render.render(diff, outputStreamWriter);\n    assertThat(outputStream.toString()).isNotBlank();\n  }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ConsoleRenderTest.java.ConsoleRenderTest", "name": "ConsoleRenderTest", "file_path": "src/test/java/org/openapitools/openapidiff/core/ConsoleRenderTest.java", "superclasses": "", "methods": ["[void]renderDoesNotFailWhenPropertyHasBeenRemoved()", "[void]renderDoesNotFailWhenHTTPStatusCodeIsRange()", "[void]renderShowsWhatsDeletedSectionWhenEndpointIsDeleted()", "[void]renderShowsWhatsNewSectionWhenEndpointIsAdded()", "[void]renderShowsWhatsDeprecatedSectionWhenEndpointIsDeprecated()", "[void]renderShowsWhatsChangedSectionWithCorrectFormattingWhenEndpointIsChanged()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class ConsoleRenderTest {\n  @Test\n  public void renderDoesNotFailWhenPropertyHasBeenRemoved() {\n    ConsoleRender render = new ConsoleRender();\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream);\n    ChangedOpenApi diff =\n        OpenApiCompare.fromLocations(\"missing_property_1.yaml\", \"missing_property_2.yaml\");\n    render.render(diff, outputStreamWriter);\n    assertThat(outputStream.toString()).isNotBlank();\n  }\n\n  @Test\n  public void renderDoesNotFailWhenHTTPStatusCodeIsRange() {\n    ConsoleRender render = new ConsoleRender();\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream);\n    ChangedOpenApi diff =\n        OpenApiCompare.fromLocations(\"range_statuscode_1.yaml\", \"range_statuscode_2.yaml\");\n    render.render(diff, outputStreamWriter);\n    assertThat(outputStream.toString()).isNotBlank();\n  }\n\n  @Test\n  public void renderShowsWhatsDeletedSectionWhenEndpointIsDeleted() {\n    ConsoleRender render = new ConsoleRender();\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream);\n    ChangedOpenApi diff =\n        OpenApiCompare.fromLocations(\"delete_endpoint_1.yaml\", \"delete_endpoint_2.yaml\");\n    render.render(diff, outputStreamWriter);\n    assertThat(outputStream.toString()).contains(\"What's Deleted\");\n  }\n\n  @Test\n  public void renderShowsWhatsNewSectionWhenEndpointIsAdded() {\n    ConsoleRender render = new ConsoleRender();\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream);\n    ChangedOpenApi diff =\n        OpenApiCompare.fromLocations(\"add_endpoint_1.yaml\", \"add_endpoint_2.yaml\");\n    render.render(diff, outputStreamWriter);\n    assertThat(outputStream.toString()).contains(\"What's New\");\n  }\n\n  @Test\n  public void renderShowsWhatsDeprecatedSectionWhenEndpointIsDeprecated() {\n    ConsoleRender render = new ConsoleRender();\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream);\n    ChangedOpenApi diff =\n        OpenApiCompare.fromLocations(\"deprecate_endpoint_1.yaml\", \"deprecate_endpoint_2.yaml\");\n    render.render(diff, outputStreamWriter);\n    assertThat(outputStream.toString()).contains(\"What's Deprecated\");\n  }\n\n  @Test\n  public void renderShowsWhatsChangedSectionWithCorrectFormattingWhenEndpointIsChanged() {\n    ConsoleRender render = new ConsoleRender();\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream);\n    ChangedOpenApi diff =\n        OpenApiCompare.fromLocations(\"change_endpoint_1.yaml\", \"change_endpoint_2.yaml\");\n    render.render(diff, outputStreamWriter);\n    assertThat(outputStream.toString())\n        .contains(\"What's Changed\")\n        .containsSubsequence(\"- GET    /widgets\", \"Parameter:\", \"- Changed query-param-1 in query\");\n  }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ResponseHeaderDiffTest.java.ResponseHeaderDiffTest", "name": "ResponseHeaderDiffTest", "file_path": "src/test/java/org/openapitools/openapidiff/core/ResponseHeaderDiffTest.java", "superclasses": "", "methods": ["[void]testDiffDifferent()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class ResponseHeaderDiffTest {\n\n  private final String OPENAPI_DOC1 = \"header_1.yaml\";\n  private final String OPENAPI_DOC2 = \"header_2.yaml\";\n\n  @Test\n  public void testDiffDifferent() {\n    ChangedOpenApi changedOpenApi = OpenApiCompare.fromLocations(OPENAPI_DOC1, OPENAPI_DOC2);\n\n    assertThat(changedOpenApi.getNewEndpoints()).isEmpty();\n    assertThat(changedOpenApi.getMissingEndpoints()).isEmpty();\n    assertThat(changedOpenApi.getChangedOperations()).isNotEmpty();\n\n    Map<String, ChangedResponse> changedResponses =\n        changedOpenApi.getChangedOperations().get(0).getApiResponses().getChanged();\n    assertThat(changedResponses).isNotEmpty();\n    assertThat(changedResponses).containsKey(\"200\");\n    ChangedHeaders changedHeaders = changedResponses.get(\"200\").getHeaders();\n    assertThat(changedHeaders.isDifferent()).isTrue();\n    assertThat(changedHeaders.getChanged()).hasSize(1);\n    assertThat(changedHeaders.getIncreased()).hasSize(1);\n    assertThat(changedHeaders.getMissing()).hasSize(1);\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final String OPENAPI_DOC1 = \"header_1.yaml\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "OPENAPI_DOC1 = \"header_1.yaml\"", "syntax_pass": true}, {"attribute_expression": "private final String OPENAPI_DOC2 = \"header_2.yaml\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "OPENAPI_DOC2 = \"header_2.yaml\"", "syntax_pass": true}]}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ResponseAddedContentSchemaTest.java.ResponseAddedContentSchemaTest", "name": "ResponseAddedContentSchemaTest", "file_path": "src/test/java/org/openapitools/openapidiff/core/ResponseAddedContentSchemaTest.java", "superclasses": "", "methods": ["[void]testDiffDifferent()", "[void]testDiffCanBeRendered()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class ResponseAddedContentSchemaTest {\n\n  private final String OPENAPI_DOC1 = \"response_schema_added_1.yaml\";\n  private final String OPENAPI_DOC2 = \"response_schema_added_2.yaml\";\n\n  @Test\n  public void testDiffDifferent() {\n    ChangedOpenApi changedOpenApi = OpenApiCompare.fromLocations(OPENAPI_DOC1, OPENAPI_DOC2);\n\n    assertThat(changedOpenApi.getNewEndpoints()).isEmpty();\n    assertThat(changedOpenApi.getMissingEndpoints()).isEmpty();\n    assertThat(changedOpenApi.getChangedOperations()).isNotEmpty();\n\n    Map<String, ChangedResponse> changedResponses =\n        changedOpenApi.getChangedOperations().get(0).getApiResponses().getChanged();\n    assertThat(changedResponses).containsKey(\"200\");\n\n    ChangedResponse changedResponse = changedResponses.get(\"200\");\n    Content oldContent = changedResponse.getOldApiResponse().getContent();\n    Content newContent = changedResponse.getNewApiResponse().getContent();\n    assertThat(oldContent.get(\"application/json\").getSchema()).isNull();\n    assertThat(newContent.get(\"application/json\").getSchema()).isNotNull();\n  }\n\n  @Test\n  public void testDiffCanBeRendered() {\n    ChangedOpenApi changedOpenApi = OpenApiCompare.fromLocations(OPENAPI_DOC1, OPENAPI_DOC2);\n\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream);\n    Render render = new ConsoleRender();\n    render.render(changedOpenApi, outputStreamWriter);\n    assertThat(outputStream.toString()).isNotBlank();\n\n    outputStream = new ByteArrayOutputStream();\n    outputStreamWriter = new OutputStreamWriter(outputStream);\n    render = new HtmlRender();\n    render.render(changedOpenApi, outputStreamWriter);\n    assertThat(outputStream.toString()).isNotBlank();\n\n    outputStream = new ByteArrayOutputStream();\n    outputStreamWriter = new OutputStreamWriter(outputStream);\n    render = new MarkdownRender();\n    render.render(changedOpenApi, outputStreamWriter);\n    assertThat(outputStream.toString()).isNotBlank();\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final String OPENAPI_DOC1 = \"response_schema_added_1.yaml\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "OPENAPI_DOC1 = \"response_schema_added_1.yaml\"", "syntax_pass": true}, {"attribute_expression": "private final String OPENAPI_DOC2 = \"response_schema_added_2.yaml\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "OPENAPI_DOC2 = \"response_schema_added_2.yaml\"", "syntax_pass": true}]}, {"uris": "src/test/java/org/openapitools/openapidiff/core/HtmlRenderTest.java.HtmlRenderTest", "name": "HtmlRenderTest", "file_path": "src/test/java/org/openapitools/openapidiff/core/HtmlRenderTest.java", "superclasses": "", "methods": ["[void]renderDoesNotFailWhenPropertyHasBeenRemoved()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class HtmlRenderTest {\n  @Test\n  public void renderDoesNotFailWhenPropertyHasBeenRemoved() {\n    HtmlRender render = new HtmlRender();\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream);\n    ChangedOpenApi diff =\n        OpenApiCompare.fromLocations(\"missing_property_1.yaml\", \"missing_property_2.yaml\");\n    render.render(diff, outputStreamWriter);\n    assertThat(outputStream.toString()).isNotBlank();\n  }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/org/openapitools/openapidiff/core/AllOfOneOfDiffTest.java.AllOfOneOfDiffTest", "name": "AllOfOneOfDiffTest", "file_path": "src/test/java/org/openapitools/openapidiff/core/AllOfOneOfDiffTest.java", "superclasses": "", "methods": ["[void]allOfReferringToOneOfSchemasAreSupported()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class AllOfOneOfDiffTest {\n  @Test\n  void allOfReferringToOneOfSchemasAreSupported() {\n    ChangedOpenApi diff = OpenApiCompare.fromLocations(\"issue-317_1.json\", \"issue-317_2.json\");\n    assertThat(diff.isCoreChanged().isUnchanged());\n  }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ParametersOverloadingTest.java.ParametersOverloadingTest", "name": "ParametersOverloadingTest", "file_path": "src/test/java/org/openapitools/openapidiff/core/ParametersOverloadingTest.java", "superclasses": "", "methods": ["[void]testDiffWithOverloadedParameterTypes()", "[void]testDiffWithDuplicatedParameterTypes()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class ParametersOverloadingTest {\n\n  private final String OVERLOADED_PARAMETERS = \"parameters_overloading.yaml\";\n  private final String DUPLICATED_PARAMETER_TYPES = \"parameters_overloading_2.yaml\";\n\n  @Test\n  void testDiffWithOverloadedParameterTypes() {\n    assertDoesNotThrow(\n        () -> OpenApiCompare.fromLocations(OVERLOADED_PARAMETERS, OVERLOADED_PARAMETERS));\n    assertOpenApiAreEquals(OVERLOADED_PARAMETERS, OVERLOADED_PARAMETERS);\n  }\n\n  @Test\n  void testDiffWithDuplicatedParameterTypes() {\n    assertThrows(\n        IllegalArgumentException.class,\n        () -> OpenApiCompare.fromLocations(DUPLICATED_PARAMETER_TYPES, DUPLICATED_PARAMETER_TYPES),\n        \"Two path items have the same signature: /projects/{}\");\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final String OVERLOADED_PARAMETERS = \"parameters_overloading.yaml\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "OVERLOADED_PARAMETERS = \"parameters_overloading.yaml\"", "syntax_pass": true}, {"attribute_expression": "private final String DUPLICATED_PARAMETER_TYPES = \"parameters_overloading_2.yaml\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "DUPLICATED_PARAMETER_TYPES = \"parameters_overloading_2.yaml\"", "syntax_pass": true}]}, {"uris": "src/test/java/org/openapitools/openapidiff/core/AddPropPutDiffTest.java.AddPropPutDiffTest", "name": "AddPropPutDiffTest", "file_path": "src/test/java/org/openapitools/openapidiff/core/AddPropPutDiffTest.java", "superclasses": "", "methods": ["[void]testDiffSame()", "[void]testFieldAdditionalInPutApiIsCompatible()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class AddPropPutDiffTest {\n  private final String OPENAPI_DOC1 = \"add-prop-put-1.yaml\";\n  private final String OPENAPI_DOC2 = \"add-prop-put-2.yaml\";\n\n  @Test\n  public void testDiffSame() {\n    assertOpenApiAreEquals(OPENAPI_DOC1, OPENAPI_DOC1);\n  }\n\n  @Test\n  public void testFieldAdditionalInPutApiIsCompatible() {\n    // See https://github.com/OpenAPITools/openapi-diff/pull/537\n    ChangedOpenApi changedOpenApi = OpenApiCompare.fromLocations(OPENAPI_DOC1, OPENAPI_DOC2);\n    assertThat(changedOpenApi.isDifferent()).isTrue();\n    assertThat(changedOpenApi.isCompatible()).isTrue();\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final String OPENAPI_DOC1 = \"add-prop-put-1.yaml\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "OPENAPI_DOC1 = \"add-prop-put-1.yaml\"", "syntax_pass": true}, {"attribute_expression": "private final String OPENAPI_DOC2 = \"add-prop-put-2.yaml\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "OPENAPI_DOC2 = \"add-prop-put-2.yaml\"", "syntax_pass": true}]}, {"uris": "src/test/java/org/openapitools/openapidiff/core/PathDiffTest.java.PathDiffTest", "name": "PathDiffTest", "file_path": "src/test/java/org/openapitools/openapidiff/core/PathDiffTest.java", "superclasses": "", "methods": ["[void]testEqual()", "[void]testMultiplePathWithSameSignature()", "[void]testSameTemplateDifferentMethods()", "[void]testDiffWithSimilarBeginningPaths()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class PathDiffTest {\n\n  private final String OPENAPI_PATH1 = \"path_1.yaml\";\n  private final String OPENAPI_PATH2 = \"path_2.yaml\";\n  private final String OPENAPI_PATH3 = \"path_3.yaml\";\n  private final String OPENAPI_PATH4 = \"path_4.yaml\";\n  private final String OPENAPI_PATH5 = \"path_5.yaml\";\n  private final String OPENAPI_PATH6 = \"path_6.yaml\";\n\n  @Test\n  public void testEqual() {\n    assertOpenApiAreEquals(OPENAPI_PATH1, OPENAPI_PATH2);\n  }\n\n  @Test\n  public void testMultiplePathWithSameSignature() {\n    assertThrows(\n        IllegalArgumentException.class, () -> assertOpenApiAreEquals(OPENAPI_PATH3, OPENAPI_PATH3));\n  }\n\n  @Test\n  public void testSameTemplateDifferentMethods() {\n    ChangedOpenApi changedOpenApi = OpenApiCompare.fromLocations(OPENAPI_PATH1, OPENAPI_PATH4);\n    assertThat(changedOpenApi.getNewEndpoints())\n        .hasSize(1)\n        .satisfiesExactly(\n            endpoint ->\n                assertThat(endpoint.getOperation().getOperationId()).isEqualTo(\"deletePet\"));\n    assertThat(changedOpenApi.isCompatible()).isTrue();\n  }\n\n  @Test\n  public void testDiffWithSimilarBeginningPaths() {\n    ChangedOpenApi changedOpenApi = OpenApiCompare.fromLocations(OPENAPI_PATH5, OPENAPI_PATH6);\n    ChangedOpenApi diff =\n        OpenApiCompare.fromSpecifications(\n            changedOpenApi.getOldSpecOpenApi(), changedOpenApi.getNewSpecOpenApi());\n    assertThat(diff.getChangedOperations()).isEmpty();\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final String OPENAPI_PATH1 = \"path_1.yaml\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "OPENAPI_PATH1 = \"path_1.yaml\"", "syntax_pass": true}, {"attribute_expression": "private final String OPENAPI_PATH2 = \"path_2.yaml\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "OPENAPI_PATH2 = \"path_2.yaml\"", "syntax_pass": true}, {"attribute_expression": "private final String OPENAPI_PATH3 = \"path_3.yaml\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "OPENAPI_PATH3 = \"path_3.yaml\"", "syntax_pass": true}, {"attribute_expression": "private final String OPENAPI_PATH4 = \"path_4.yaml\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "OPENAPI_PATH4 = \"path_4.yaml\"", "syntax_pass": true}, {"attribute_expression": "private final String OPENAPI_PATH5 = \"path_5.yaml\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "OPENAPI_PATH5 = \"path_5.yaml\"", "syntax_pass": true}, {"attribute_expression": "private final String OPENAPI_PATH6 = \"path_6.yaml\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "OPENAPI_PATH6 = \"path_6.yaml\"", "syntax_pass": true}]}, {"uris": "src/test/java/org/openapitools/openapidiff/core/OperationDiffTest.java.OperationDiffTest", "name": "OperationDiffTest", "file_path": "src/test/java/org/openapitools/openapidiff/core/OperationDiffTest.java", "superclasses": "", "methods": ["[void]testContentDiffWithOneEmptyMediaType()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class OperationDiffTest {\n\n  private final String OPENAPI_DOC1 = \"operation_diff_1.yaml\";\n  private final String OPENAPI_DOC2 = \"operation_diff_2.yaml\";\n\n  @Test\n  public void testContentDiffWithOneEmptyMediaType() {\n    ChangedOpenApi changedOpenApi = OpenApiCompare.fromLocations(OPENAPI_DOC1, OPENAPI_DOC2);\n    assertThat(changedOpenApi.isChanged()).isEqualTo(DiffResult.METADATA);\n    assertThat(changedOpenApi.isDifferent()).isTrue();\n    assertThat(changedOpenApi.getChangedOperations().size()).isEqualTo(1);\n    assertThat(changedOpenApi.getChangedOperations().get(0).getOperationId().isDifferent())\n        .isTrue();\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final String OPENAPI_DOC1 = \"operation_diff_1.yaml\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "OPENAPI_DOC1 = \"operation_diff_1.yaml\"", "syntax_pass": true}, {"attribute_expression": "private final String OPENAPI_DOC2 = \"operation_diff_2.yaml\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "OPENAPI_DOC2 = \"operation_diff_2.yaml\"", "syntax_pass": true}]}, {"uris": "src/test/java/org/openapitools/openapidiff/core/OpenApiDiffTest.java.OpenApiDiffTest", "name": "OpenApiDiffTest", "file_path": "src/test/java/org/openapitools/openapidiff/core/OpenApiDiffTest.java", "superclasses": "", "methods": ["[void]testEqual()", "[void]testNewApi()", "[void]testDeprecatedApi()", "[void]testDiff()", "[void]testDiffAndMarkdown()", "[void]testDiffAndJson()", "[void]testComparisonConsistency()", "[void]testSpecObjectsAreNotChangesAfterComparison()"], "method_uris": ["src/test/java/org/openapitools/openapidiff/core/OpenApiDiffTest.java.OpenApiDiffTest.[OpenAPI]loadSpecFromFile(String)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class OpenApiDiffTest {\n\n  private final String OPENAPI_DOC1 = \"petstore_v2_1.yaml\";\n  private final String OPENAPI_DOC2 = \"petstore_v2_2.yaml\";\n  private final String OPENAPI_EMPTY_DOC = \"petstore_v2_empty.yaml\";\n  private final String OPENAPI_DOC3 = \"petstore_openapi3.yaml\";\n\n  private static final OpenAPIParser PARSER = new OpenAPIParser();\n\n  @Test\n  public void testEqual() {\n    assertOpenApiAreEquals(OPENAPI_DOC2, OPENAPI_DOC2);\n  }\n\n  @Test\n  public void testNewApi() {\n    ChangedOpenApi changedOpenApi = OpenApiCompare.fromLocations(OPENAPI_EMPTY_DOC, OPENAPI_DOC2);\n    List<Endpoint> newEndpoints = changedOpenApi.getNewEndpoints();\n    List<Endpoint> missingEndpoints = changedOpenApi.getMissingEndpoints();\n    List<ChangedOperation> changedEndPoints = changedOpenApi.getChangedOperations();\n    assertThat(newEndpoints).isNotEmpty();\n    assertThat(missingEndpoints).isEmpty();\n    assertThat(changedEndPoints).isEmpty();\n\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream);\n    Render render =\n        new HtmlRender(\"Changelog\", \"http://deepoove.com/swagger-diff/stylesheets/demo.css\");\n    render.render(changedOpenApi, outputStreamWriter);\n    assertThat(outputStream.toString()).isNotBlank();\n  }\n\n  @Test\n  public void testDeprecatedApi() {\n    ChangedOpenApi changedOpenApi = OpenApiCompare.fromLocations(OPENAPI_DOC1, OPENAPI_EMPTY_DOC);\n    List<Endpoint> newEndpoints = changedOpenApi.getNewEndpoints();\n    List<Endpoint> missingEndpoints = changedOpenApi.getMissingEndpoints();\n    List<ChangedOperation> changedEndPoints = changedOpenApi.getChangedOperations();\n    assertThat(newEndpoints).isEmpty();\n    assertThat(missingEndpoints).isNotEmpty();\n    assertThat(changedEndPoints).isEmpty();\n\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream);\n    Render render =\n        new HtmlRender(\"Changelog\", \"http://deepoove.com/swagger-diff/stylesheets/demo.css\");\n    render.render(changedOpenApi, outputStreamWriter);\n    assertThat(outputStream.toString()).isNotBlank();\n  }\n\n  @Test\n  public void testDiff() {\n    ChangedOpenApi changedOpenApi = OpenApiCompare.fromLocations(OPENAPI_DOC1, OPENAPI_DOC2);\n    List<ChangedOperation> changedEndPoints = changedOpenApi.getChangedOperations();\n    assertThat(changedEndPoints).isNotEmpty();\n\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream);\n    Render render =\n        new HtmlRender(\"Changelog\", \"http://deepoove.com/swagger-diff/stylesheets/demo.css\");\n    render.render(changedOpenApi, outputStreamWriter);\n    assertThat(outputStream.toString()).isNotBlank();\n  }\n\n  @Test\n  public void testDiffAndMarkdown() {\n    ChangedOpenApi diff = OpenApiCompare.fromLocations(OPENAPI_DOC1, OPENAPI_DOC2);\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream);\n    Render render = new MarkdownRender();\n    render.render(diff, outputStreamWriter);\n    assertThat(outputStream.toString()).isNotBlank();\n  }\n\n  @Test\n  public void testDiffAndJson() {\n    ChangedOpenApi diff = OpenApiCompare.fromLocations(OPENAPI_DOC1, OPENAPI_DOC2);\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream);\n    Render render = new JsonRender();\n    render.render(diff, outputStreamWriter);\n    assertThat(outputStream.toString()).isNotBlank();\n  }\n\n  /** Testing that repetitive specs comparisons has to produce consistent result. */\n  @Test\n  public void testComparisonConsistency() {\n    final OpenAPI oldSpec = loadSpecFromFile(OPENAPI_DOC3);\n    final OpenAPI newSpec = loadSpecFromFile(OPENAPI_DOC3);\n\n    final ChangedOpenApi diff1 = OpenApiCompare.fromSpecifications(oldSpec, newSpec);\n    assertThat(diff1.isChanged()).isEqualTo(DiffResult.NO_CHANGES);\n    assertThat(diff1.getNewEndpoints()).isEmpty();\n    assertThat(diff1.getMissingEndpoints()).isEmpty();\n    assertThat(diff1.getChangedOperations()).isEmpty();\n\n    final ChangedOpenApi diff2 = OpenApiCompare.fromSpecifications(oldSpec, newSpec);\n    assertThat(diff2.isChanged()).isEqualTo(DiffResult.NO_CHANGES);\n    assertThat(diff2.getNewEndpoints()).isEmpty();\n    assertThat(diff2.getMissingEndpoints()).isEmpty();\n    assertThat(diff2.getChangedOperations()).isEmpty();\n  }\n\n  @Test\n  public void testSpecObjectsAreNotChangesAfterComparison() {\n    final OpenAPI oldSpec = loadSpecFromFile(OPENAPI_DOC3);\n    final OpenAPI newSpec = loadSpecFromFile(OPENAPI_DOC3);\n\n    OpenApiCompare.fromSpecifications(oldSpec, newSpec);\n    OpenApiCompare.fromSpecifications(oldSpec, newSpec);\n\n    final OpenAPI expectedOldSpec = loadSpecFromFile(OPENAPI_DOC3);\n    final OpenAPI expectedNewSpec = loadSpecFromFile(OPENAPI_DOC3);\n    assertThat(oldSpec).isEqualTo(expectedOldSpec);\n    assertThat(newSpec).isEqualTo(expectedNewSpec);\n  }\n\n  private static OpenAPI loadSpecFromFile(String specFile) {\n    return PARSER.readLocation(specFile, null, new ParseOptions()).getOpenAPI();\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final String OPENAPI_DOC1 = \"petstore_v2_1.yaml\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "OPENAPI_DOC1 = \"petstore_v2_1.yaml\"", "syntax_pass": true}, {"attribute_expression": "private final String OPENAPI_DOC2 = \"petstore_v2_2.yaml\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "OPENAPI_DOC2 = \"petstore_v2_2.yaml\"", "syntax_pass": true}, {"attribute_expression": "private final String OPENAPI_EMPTY_DOC = \"petstore_v2_empty.yaml\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "OPENAPI_EMPTY_DOC = \"petstore_v2_empty.yaml\"", "syntax_pass": true}, {"attribute_expression": "private final String OPENAPI_DOC3 = \"petstore_openapi3.yaml\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "OPENAPI_DOC3 = \"petstore_openapi3.yaml\"", "syntax_pass": true}, {"attribute_expression": "private static final OpenAPIParser PARSER = new OpenAPIParser();", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "OpenAPIParser", "name": "PARSER = new OpenAPIParser()", "syntax_pass": true}]}, {"uris": "src/test/java/org/openapitools/openapidiff/core/AsciidocRenderTest.java.AsciidocRenderTest", "name": "AsciidocRenderTest", "file_path": "src/test/java/org/openapitools/openapidiff/core/AsciidocRenderTest.java", "superclasses": "", "methods": ["[void]renderDoesNotFailWhenPropertyHasBeenRemoved()", "[void]renderDoesNotCauseStackOverflowWithRecursiveDefinitions()", "[void]renderDoesNotFailWhenHTTPStatusCodeIsRange()", "[void]validateAsciiDocChangeFile()", "[void]validateAsciiDocRangeStatus()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class AsciidocRenderTest {\n  @Test\n  public void renderDoesNotFailWhenPropertyHasBeenRemoved() {\n    AsciidocRender render = new AsciidocRender();\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream);\n    ChangedOpenApi diff =\n        OpenApiCompare.fromLocations(\"missing_property_1.yaml\", \"missing_property_2.yaml\");\n    render.render(diff, outputStreamWriter);\n    assertThat(outputStream.toString()).isNotBlank();\n  }\n\n  @Test\n  public void renderDoesNotCauseStackOverflowWithRecursiveDefinitions() {\n    AsciidocRender render = new AsciidocRender();\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream);\n    ChangedOpenApi diff = OpenApiCompare.fromLocations(\"recursive_old.yaml\", \"recursive_new.yaml\");\n    render.render(diff, outputStreamWriter);\n    assertThat(outputStream.toString()).isNotBlank();\n  }\n\n  @Test\n  public void renderDoesNotFailWhenHTTPStatusCodeIsRange() {\n    AsciidocRender render = new AsciidocRender();\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream);\n    ChangedOpenApi diff =\n        OpenApiCompare.fromLocations(\"range_statuscode_1.yaml\", \"range_statuscode_2.yaml\");\n    render.render(diff, outputStreamWriter);\n    assertThat(outputStream.toString()).isNotBlank();\n  }\n\n  @Test\n  public void validateAsciiDocChangeFile() {\n    AsciidocRender render = new AsciidocRender();\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream);\n    ChangedOpenApi diff =\n        OpenApiCompare.fromLocations(\"missing_property_1.yaml\", \"missing_property_2.yaml\");\n    render.render(diff, outputStreamWriter);\n    assertThat(outputStream.toString())\n        .isEqualTo(\n            \"= TITLE (v 1.0.0)\\n\"\n                + \":reproducible:\\n\"\n                + \":sectlinks:\\n\"\n                + \":toc:\\n\"\n                + \"\\n\"\n                + \"== What's Changed\\n\"\n                + \"=== GET   /\\n\"\n                + \"* Return Type:\\n\"\n                + \"** Changed default \\n\"\n                + \"** Media types:\\n\"\n                + \"*** Changed application/json\\n\"\n                + \"*** Schema:\\n\"\n                + \"Backward compatible\\n\"\n                + \"\\n\"\n                + \"\\n\"\n                + \"NOTE: API changes are backward compatible\\n\");\n  }\n\n  @Test\n  public void validateAsciiDocRangeStatus() {\n    AsciidocRender render = new AsciidocRender();\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream);\n    ChangedOpenApi diff =\n        OpenApiCompare.fromLocations(\"range_statuscode_1.yaml\", \"range_statuscode_2.yaml\");\n    render.render(diff, outputStreamWriter);\n    assertThat(outputStream.toString())\n        .isEqualTo(\n            \"= PROJECTS API (v 1.0.0)\\n\"\n                + \":reproducible:\\n\"\n                + \":sectlinks:\\n\"\n                + \":toc:\\n\"\n                + \"\\n\"\n                + \"== What's Changed\\n\"\n                + \"=== GET   /pet/\\n\"\n                + \"* Return Type:\\n\"\n                + \"** Add 4XX \\n\"\n                + \"** Deleted 405 Method Not Allowed\\n\"\n                + \"\\n\"\n                + \"\\n\"\n                + \"WARNING: API changes broke backward compatibility\\n\");\n  }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/org/openapitools/openapidiff/core/AdditionalPropertiesTest.java.AdditionalPropertiesTest", "name": "AdditionalPropertiesTest", "file_path": "src/test/java/org/openapitools/openapidiff/core/AdditionalPropertiesTest.java", "superclasses": "", "methods": ["[void]booleanAdditionalPropertiesAreSupported()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class AdditionalPropertiesTest {\n  @Test\n  void booleanAdditionalPropertiesAreSupported() {\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream);\n    ChangedOpenApi diff = OpenApiCompare.fromLocations(\"issue-256_1.json\", \"issue-256_2.json\");\n    ConsoleRender render = new ConsoleRender();\n    render.render(diff, outputStreamWriter);\n    assertThat(outputStream.toString()).isNotBlank();\n  }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/org/openapitools/openapidiff/core/AllOfDiffTest.java.AllOfDiffTest", "name": "AllOfDiffTest", "file_path": "src/test/java/org/openapitools/openapidiff/core/AllOfDiffTest.java", "superclasses": "", "methods": ["[void]testDiffSame()", "[void]testDiffSameWithAllOf()", "[void]testDiffDifferent1()", "[void]testDiffDifferent2()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class AllOfDiffTest {\n\n  private final String OPENAPI_DOC1 = \"allOf_diff_1.yaml\";\n  private final String OPENAPI_DOC2 = \"allOf_diff_2.yaml\";\n  private final String OPENAPI_DOC3 = \"allOf_diff_3.yaml\";\n  private final String OPENAPI_DOC4 = \"allOf_diff_4.yaml\";\n\n  @Test\n  public void testDiffSame() {\n    assertOpenApiAreEquals(OPENAPI_DOC1, OPENAPI_DOC1);\n  }\n\n  @Test\n  public void testDiffSameWithAllOf() {\n    assertOpenApiAreEquals(OPENAPI_DOC1, OPENAPI_DOC2);\n  }\n\n  @Test\n  public void testDiffDifferent1() {\n    assertOpenApiChangedEndpoints(OPENAPI_DOC1, OPENAPI_DOC3);\n  }\n\n  @Test\n  public void testDiffDifferent2() {\n    assertOpenApiChangedEndpoints(OPENAPI_DOC1, OPENAPI_DOC4);\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final String OPENAPI_DOC1 = \"allOf_diff_1.yaml\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "OPENAPI_DOC1 = \"allOf_diff_1.yaml\"", "syntax_pass": true}, {"attribute_expression": "private final String OPENAPI_DOC2 = \"allOf_diff_2.yaml\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "OPENAPI_DOC2 = \"allOf_diff_2.yaml\"", "syntax_pass": true}, {"attribute_expression": "private final String OPENAPI_DOC3 = \"allOf_diff_3.yaml\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "OPENAPI_DOC3 = \"allOf_diff_3.yaml\"", "syntax_pass": true}, {"attribute_expression": "private final String OPENAPI_DOC4 = \"allOf_diff_4.yaml\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "OPENAPI_DOC4 = \"allOf_diff_4.yaml\"", "syntax_pass": true}]}, {"uris": "src/test/java/org/openapitools/openapidiff/core/OneOfDiffTest.java.OneOfDiffTest", "name": "OneOfDiffTest", "file_path": "src/test/java/org/openapitools/openapidiff/core/OneOfDiffTest.java", "superclasses": "", "methods": ["[void]testDiffSame()", "[void]testDiffDifferentMapping()", "[void]testDiffSameWithOneOf()", "[void]testComposedSchema()", "[void]testComposedSchemaDiff()", "[void]testOneOfDiscrimitatorChanged()", "[void]testOneOfDiscrimitatorMissingSameOrder()", "[void]testOneOfDiscrimitatorMissingDifferentOrder()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class OneOfDiffTest {\n\n  private final String OPENAPI_DOC1 = \"oneOf_diff_1.yaml\";\n  private final String OPENAPI_DOC2 = \"oneOf_diff_2.yaml\";\n  private final String OPENAPI_DOC3 = \"oneOf_diff_3.yaml\";\n  private final String OPENAPI_DOC4 = \"composed_schema_1.yaml\";\n  private final String OPENAPI_DOC5 = \"composed_schema_2.yaml\";\n  private final String OPENAPI_DOC6 = \"oneOf_discriminator-changed_1.yaml\";\n  private final String OPENAPI_DOC7 = \"oneOf_discriminator-changed_2.yaml\";\n  private final String OPENAPI_DOC8 = \"oneOf_discriminator-missing_1.yaml\";\n  private final String OPENAPI_DOC9 = \"oneOf_discriminator-missing_2.yaml\";\n  private final String OPENAPI_DOC10 = \"unnamed_oneof_schema_1.yaml\";\n\n  @Test\n  public void testDiffSame() {\n    assertOpenApiAreEquals(OPENAPI_DOC1, OPENAPI_DOC1);\n  }\n\n  @Test\n  public void testDiffDifferentMapping() {\n    assertOpenApiChangedEndpoints(OPENAPI_DOC1, OPENAPI_DOC2);\n  }\n\n  @Test\n  public void testDiffSameWithOneOf() {\n    assertOpenApiAreEquals(OPENAPI_DOC2, OPENAPI_DOC3);\n  }\n\n  @Test\n  public void testComposedSchema() {\n    assertOpenApiBackwardIncompatible(OPENAPI_DOC4, OPENAPI_DOC5);\n  }\n\n  @Test\n  public void testComposedSchemaDiff() {\n    assertOpenApiAreEquals(OPENAPI_DOC10, OPENAPI_DOC10);\n  }\n\n  @Test\n  public void testOneOfDiscrimitatorChanged() {\n    // The oneOf 'discriminator' changed: 'realtype' -> 'othertype':\n    assertOpenApiBackwardIncompatible(OPENAPI_DOC6, OPENAPI_DOC7);\n  }\n\n  @Test\n  public void testOneOfDiscrimitatorMissingSameOrder() {\n    assertOpenApiAreEquals(OPENAPI_DOC8, OPENAPI_DOC8);\n  }\n\n  @Test\n  public void testOneOfDiscrimitatorMissingDifferentOrder() {\n    assertOpenApiAreEquals(OPENAPI_DOC8, OPENAPI_DOC9);\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final String OPENAPI_DOC1 = \"oneOf_diff_1.yaml\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "OPENAPI_DOC1 = \"oneOf_diff_1.yaml\"", "syntax_pass": true}, {"attribute_expression": "private final String OPENAPI_DOC2 = \"oneOf_diff_2.yaml\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "OPENAPI_DOC2 = \"oneOf_diff_2.yaml\"", "syntax_pass": true}, {"attribute_expression": "private final String OPENAPI_DOC3 = \"oneOf_diff_3.yaml\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "OPENAPI_DOC3 = \"oneOf_diff_3.yaml\"", "syntax_pass": true}, {"attribute_expression": "private final String OPENAPI_DOC4 = \"composed_schema_1.yaml\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "OPENAPI_DOC4 = \"composed_schema_1.yaml\"", "syntax_pass": true}, {"attribute_expression": "private final String OPENAPI_DOC5 = \"composed_schema_2.yaml\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "OPENAPI_DOC5 = \"composed_schema_2.yaml\"", "syntax_pass": true}, {"attribute_expression": "private final String OPENAPI_DOC6 = \"oneOf_discriminator-changed_1.yaml\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "OPENAPI_DOC6 = \"oneOf_discriminator-changed_1.yaml\"", "syntax_pass": true}, {"attribute_expression": "private final String OPENAPI_DOC7 = \"oneOf_discriminator-changed_2.yaml\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "OPENAPI_DOC7 = \"oneOf_discriminator-changed_2.yaml\"", "syntax_pass": true}, {"attribute_expression": "private final String OPENAPI_DOC8 = \"oneOf_discriminator-missing_1.yaml\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "OPENAPI_DOC8 = \"oneOf_discriminator-missing_1.yaml\"", "syntax_pass": true}, {"attribute_expression": "private final String OPENAPI_DOC9 = \"oneOf_discriminator-missing_2.yaml\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "OPENAPI_DOC9 = \"oneOf_discriminator-missing_2.yaml\"", "syntax_pass": true}, {"attribute_expression": "private final String OPENAPI_DOC10 = \"unnamed_oneof_schema_1.yaml\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "OPENAPI_DOC10 = \"unnamed_oneof_schema_1.yaml\"", "syntax_pass": true}]}, {"uris": "src/test/java/org/openapitools/openapidiff/core/PathParameterSchemaDiffTest.java.PathParameterSchemaDiffTest", "name": "PathParameterSchemaDiffTest", "file_path": "src/test/java/org/openapitools/openapidiff/core/PathParameterSchemaDiffTest.java", "superclasses": "", "methods": ["[void]pathSamePathParamsDiffParamSameAsInPathButSchemaDiff()", "[void]pathSamePathParamsDiffParamNameDiffSchemaSame()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class PathParameterSchemaDiffTest {\n  final String TEST_MSG_1 =\n      \"Testing: \\n\"\n          + \"1. Same path but different pathParameters\\n\"\n          + \"2. different parameters in the parameters: section\\n\"\n          + \"3. Parameters have different schema\\n\"\n          + \"eg:\\n\"\n          + \"old path   -- students/{id}\\n\"\n          + \"old schema -- id: integer\\n\"\n          + \"new path   -- students/{username}\\n\"\n          + \"new schema -- username: string\";\n\n  final String TEST_MSG_2 =\n      \"Testing: \\n\"\n          + \"1. Same path but different pathParameters\\n\"\n          + \"2. different parameters in the parameters: section\\n\"\n          + \"3. Parameters have same schema\\n\";\n\n  @Test\n  @DisplayName(\n      \"Same Path, different PathParams, Params in the `Parameters`: match pathParam, Different Schema\")\n  public void pathSamePathParamsDiffParamSameAsInPathButSchemaDiff() {\n    final Logger logger = LoggerFactory.getLogger(PathParameterSchemaDiffTest.class);\n    logger.info(TEST_MSG_1);\n    String OPENAPI_DOC1 = \"path_parameter_diff_param_schema_diff_old.yaml\";\n    String OPENAPI_DOC2 = \"path_parameter_diff_param_schema_diff_new.yaml\";\n    ChangedOpenApi diff = OpenApiCompare.fromLocations(OPENAPI_DOC1, OPENAPI_DOC2);\n    Assertions.assertTrue(diff.isDifferent());\n    Assertions.assertFalse(diff.isCompatible());\n  }\n\n  @Test\n  @DisplayName(\n      \"Same Path, different PathParams, Params in the `Parameters`: match pathParam, same Schema\")\n  public void pathSamePathParamsDiffParamNameDiffSchemaSame() {\n    final Logger logger = LoggerFactory.getLogger(PathParameterSchemaDiffTest.class);\n    logger.info(TEST_MSG_2);\n    String OPENAPI_DOC1 = \"path_parameter_diff_param_name_diff_old.yaml\";\n    String OPENAPI_DOC2 = \"path_parameter_diff_param_name_diff_new.yaml\";\n    ChangedOpenApi diff = OpenApiCompare.fromLocations(OPENAPI_DOC1, OPENAPI_DOC2);\n    Assertions.assertFalse(diff.isDifferent());\n    Assertions.assertTrue(diff.isCompatible());\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "final String TEST_MSG_1 =\n      \"Testing: \\n\"\n          + \"1. Same path but different pathParameters\\n\"\n          + \"2. different parameters in the parameters: section\\n\"\n          + \"3. Parameters have different schema\\n\"\n          + \"eg:\\n\"\n          + \"old path   -- students/{id}\\n\"\n          + \"old schema -- id: integer\\n\"\n          + \"new path   -- students/{username}\\n\"\n          + \"new schema -- username: string\";", "docstring": "", "modifiers": "final", "marker_annotations": [], "non_marker_annotations": ["final"], "comments": [], "type": "String", "name": "TEST_MSG_1 =\n      \"Testing: \\n\"\n          + \"1. Same path but different pathParameters\\n\"\n          + \"2. different parameters in the parameters: section\\n\"\n          + \"3. Parameters have different schema\\n\"\n          + \"eg:\\n\"\n          + \"old path   -- students/{id}\\n\"\n          + \"old schema -- id: integer\\n\"\n          + \"new path   -- students/{username}\\n\"\n          + \"new schema -- username: string\"", "syntax_pass": true}, {"attribute_expression": "final String TEST_MSG_2 =\n      \"Testing: \\n\"\n          + \"1. Same path but different pathParameters\\n\"\n          + \"2. different parameters in the parameters: section\\n\"\n          + \"3. Parameters have same schema\\n\";", "docstring": "", "modifiers": "final", "marker_annotations": [], "non_marker_annotations": ["final"], "comments": [], "type": "String", "name": "TEST_MSG_2 =\n      \"Testing: \\n\"\n          + \"1. Same path but different pathParameters\\n\"\n          + \"2. different parameters in the parameters: section\\n\"\n          + \"3. Parameters have same schema\\n\"", "syntax_pass": true}]}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ArrayDiffTest.java.ArrayDiffTest", "name": "ArrayDiffTest", "file_path": "src/test/java/org/openapitools/openapidiff/core/ArrayDiffTest.java", "superclasses": "", "methods": ["[void]testArrayDiffDifferent()", "[void]testArrayDiffSame()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class ArrayDiffTest {\n\n  private final String OPENAPI_DOC31 = \"array_diff_1.yaml\";\n  private final String OPENAPI_DOC32 = \"array_diff_2.yaml\";\n\n  @Test\n  public void testArrayDiffDifferent() {\n    assertOpenApiChangedEndpoints(OPENAPI_DOC31, OPENAPI_DOC32);\n  }\n\n  @Test\n  public void testArrayDiffSame() {\n    assertOpenApiAreEquals(OPENAPI_DOC31, OPENAPI_DOC31);\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final String OPENAPI_DOC31 = \"array_diff_1.yaml\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "OPENAPI_DOC31 = \"array_diff_1.yaml\"", "syntax_pass": true}, {"attribute_expression": "private final String OPENAPI_DOC32 = \"array_diff_2.yaml\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "OPENAPI_DOC32 = \"array_diff_2.yaml\"", "syntax_pass": true}]}, {"uris": "src/test/java/org/openapitools/openapidiff/core/MarkdownRenderTest.java.MarkdownRenderTest", "name": "MarkdownRenderTest", "file_path": "src/test/java/org/openapitools/openapidiff/core/MarkdownRenderTest.java", "superclasses": "", "methods": ["[void]renderDoesNotFailWhenPropertyHasBeenRemoved()", "[void]renderDoesNotCauseStackOverflowWithRecursiveDefinitions()", "[void]renderDoesNotFailWhenHTTPStatusCodeIsRange()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class MarkdownRenderTest {\n  @Test\n  public void renderDoesNotFailWhenPropertyHasBeenRemoved() {\n    MarkdownRender render = new MarkdownRender();\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream);\n    ChangedOpenApi diff =\n        OpenApiCompare.fromLocations(\"missing_property_1.yaml\", \"missing_property_2.yaml\");\n    render.render(diff, outputStreamWriter);\n    assertThat(outputStream.toString()).isNotBlank();\n  }\n\n  @Test\n  public void renderDoesNotCauseStackOverflowWithRecursiveDefinitions() {\n    MarkdownRender render = new MarkdownRender();\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream);\n    ChangedOpenApi diff = OpenApiCompare.fromLocations(\"recursive_old.yaml\", \"recursive_new.yaml\");\n    render.render(diff, outputStreamWriter);\n    assertThat(outputStream.toString()).isNotBlank();\n  }\n\n  @Test\n  public void renderDoesNotFailWhenHTTPStatusCodeIsRange() {\n    MarkdownRender render = new MarkdownRender();\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream);\n    ChangedOpenApi diff =\n        OpenApiCompare.fromLocations(\"range_statuscode_1.yaml\", \"range_statuscode_2.yaml\");\n    render.render(diff, outputStreamWriter);\n    assertThat(outputStream.toString()).isNotBlank();\n  }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ContentDiffTest.java.ContentDiffTest", "name": "ContentDiffTest", "file_path": "src/test/java/org/openapitools/openapidiff/core/ContentDiffTest.java", "superclasses": "", "methods": ["[void]testContentDiffWithOneEmptyMediaType()", "[void]testContentDiffWithEmptyMediaTypes()", "[void]testSameContentDiff()", "[void]testAddedResponseContentTypeDiff()", "[void]testRemovedResponseContentTypeDiff()", "[void]testAddedRequestContentTypeDiff()", "[void]testRemovedRequestContentTypeDiff()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class ContentDiffTest {\n\n  private final String OPENAPI_DOC1 = \"content_diff_1.yaml\";\n  private final String OPENAPI_DOC2 = \"content_diff_2.yaml\";\n\n  @Test\n  public void testContentDiffWithOneEmptyMediaType() {\n    ChangedOpenApi changedOpenApi = OpenApiCompare.fromLocations(OPENAPI_DOC1, OPENAPI_DOC2);\n    assertThat(changedOpenApi.isIncompatible()).isTrue();\n  }\n\n  @Test\n  public void testContentDiffWithEmptyMediaTypes() {\n    ChangedOpenApi changedOpenApi = OpenApiCompare.fromLocations(OPENAPI_DOC1, OPENAPI_DOC1);\n    assertThat(changedOpenApi.isUnchanged()).isTrue();\n  }\n\n  @Test\n  public void testSameContentDiff() {\n    ChangedOpenApi changedOpenApi = OpenApiCompare.fromLocations(OPENAPI_DOC2, OPENAPI_DOC2);\n    assertThat(changedOpenApi.isUnchanged()).isTrue();\n  }\n\n  @Test\n  public void testAddedResponseContentTypeDiff() {\n    ChangedOpenApi changedOpenApi =\n        OpenApiCompare.fromLocations(\n            \"content_type_response_add_1.yaml\", \"content_type_response_add_2.yaml\");\n    assertThat(changedOpenApi.isCompatible()).isTrue();\n  }\n\n  @Test\n  public void testRemovedResponseContentTypeDiff() {\n    ChangedOpenApi changedOpenApi =\n        OpenApiCompare.fromLocations(\n            \"content_type_response_add_2.yaml\", \"content_type_response_add_1.yaml\");\n    assertThat(changedOpenApi.isCompatible()).isFalse();\n  }\n\n  @Test\n  public void testAddedRequestContentTypeDiff() {\n    ChangedOpenApi changedOpenApi =\n        OpenApiCompare.fromLocations(\n            \"content_type_request_add_1.yaml\", \"content_type_request_add_2.yaml\");\n    assertThat(changedOpenApi.isCompatible()).isTrue();\n  }\n\n  @Test\n  public void testRemovedRequestContentTypeDiff() {\n    ChangedOpenApi changedOpenApi =\n        OpenApiCompare.fromLocations(\n            \"content_type_request_add_2.yaml\", \"content_type_request_add_1.yaml\");\n    assertThat(changedOpenApi.isCompatible()).isFalse();\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final String OPENAPI_DOC1 = \"content_diff_1.yaml\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "OPENAPI_DOC1 = \"content_diff_1.yaml\"", "syntax_pass": true}, {"attribute_expression": "private final String OPENAPI_DOC2 = \"content_diff_2.yaml\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "OPENAPI_DOC2 = \"content_diff_2.yaml\"", "syntax_pass": true}]}, {"uris": "src/test/java/org/openapitools/openapidiff/core/Swagger2CompatibilityTest.java.Swagger2CompatibilityTest", "name": "Swagger2CompatibilityTest", "file_path": "src/test/java/org/openapitools/openapidiff/core/Swagger2CompatibilityTest.java", "superclasses": "", "methods": ["[void]testEqual()", "[void]testSwagger2ToOpenapi3()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "@Disabled\npublic class Swagger2CompatibilityTest {\n  private final String SWAGGER_DOC1 = \"petstore_swagger2.yaml\";\n  private final String OPENAPI_DOC2 = \"petstore_openapi3.yaml\";\n\n  @Test\n  public void testEqual() {\n    assertOpenApiAreEquals(SWAGGER_DOC1, SWAGGER_DOC1);\n  }\n\n  @Test\n  public void testSwagger2ToOpenapi3() {\n    assertOpenApiAreEquals(SWAGGER_DOC1, OPENAPI_DOC2);\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final String SWAGGER_DOC1 = \"petstore_swagger2.yaml\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "SWAGGER_DOC1 = \"petstore_swagger2.yaml\"", "syntax_pass": true}, {"attribute_expression": "private final String OPENAPI_DOC2 = \"petstore_openapi3.yaml\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "OPENAPI_DOC2 = \"petstore_openapi3.yaml\"", "syntax_pass": true}]}, {"uris": "src/test/java/org/openapitools/openapidiff/core/output/ConsoleRender_titleTest.java.ConsoleRender_titleTest", "name": "ConsoleRender_titleTest", "file_path": "src/test/java/org/openapitools/openapidiff/core/output/ConsoleRender_titleTest.java", "superclasses": "", "methods": ["[void]testTitle()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class ConsoleRender_titleTest {\n\n  @Test\n  public void testTitle() {\n    ConsoleRender consoleRender = new ConsoleRender();\n    String expected =\n        \"==========================================================================\\n\"\n            + \"==                                Title                                 ==\\n\"\n            + \"==========================================================================\\n\";\n    String actual = consoleRender.title(\"Title\", '=');\n    assertEquals(expected, actual);\n  }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/org/openapitools/openapidiff/core/output/AsciidocRender_bigTitleTest.java.AsciidocRender_bigTitleTest", "name": "AsciidocRender_bigTitleTest", "file_path": "src/test/java/org/openapitools/openapidiff/core/output/AsciidocRender_bigTitleTest.java", "superclasses": "", "methods": ["[void]testBigTitle()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class AsciidocRender_bigTitleTest {\n\n  @Test\n  public void testBigTitle() {\n    AsciidocRender render = new AsciidocRender();\n    String result = render.bigTitle(\"OpenAPI Diff\", \"1.0.0\");\n    assertEquals(\"= OPENAPI DIFF (v 1.0.0)\", result);\n  }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/org/openapitools/openapidiff/core/utils/FileUtilsTest.java.FileUtilsTest", "name": "FileUtilsTest", "file_path": "src/test/java/org/openapitools/openapidiff/core/utils/FileUtilsTest.java", "superclasses": "", "methods": ["[void]writeToFile_filenameIsNull_doesNothing()", "[void]writeToFile_filenameIsEmpty_doesNothing()", "[void]writeToFile_fileExists_overwrites_file(Path)", "[void]writeToFile_fileDoesNotExist_createsFile(Path)"], "method_uris": ["src/test/java/org/openapitools/openapidiff/core/utils/FileUtilsTest.java.FileUtilsTest.[void]setup()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class FileUtilsTest {\n  private ChangedOpenApi changedOpenApi;\n\n  @BeforeEach\n  void setup() {\n    changedOpenApi = new ChangedOpenApi(OpenApiDiffOptions.builder().build());\n    changedOpenApi.setChangedSchemas(Collections.emptyList());\n    changedOpenApi.setChangedOperations(Collections.emptyList());\n    changedOpenApi.setNewEndpoints(Collections.emptyList());\n    changedOpenApi.setMissingEndpoints(Collections.emptyList());\n  }\n\n  @Test\n  void writeToFile_filenameIsNull_doesNothing() {\n    assertDoesNotThrow(() -> FileUtils.writeToFile(new ConsoleRender(), changedOpenApi, null));\n  }\n\n  @Test\n  void writeToFile_filenameIsEmpty_doesNothing() {\n    assertDoesNotThrow(\n        () -> FileUtils.writeToFile(new ConsoleRender(), changedOpenApi, StringUtils.EMPTY));\n  }\n\n  @Test\n  void writeToFile_fileExists_overwrites_file(@TempDir Path tempDir) throws IOException {\n    final Path path = tempDir.resolve(\"output.txt\");\n    Files.write(path, \"Test\".getBytes(StandardCharsets.UTF_8));\n\n    assertDoesNotThrow(\n        () -> FileUtils.writeToFile(new ConsoleRender(), changedOpenApi, path.toString()));\n    assertThat(path).exists().content().isNotEqualTo(\"Test\");\n  }\n\n  @Test\n  void writeToFile_fileDoesNotExist_createsFile(@TempDir Path tempDir) {\n    final Path path = tempDir.resolve(\"output.txt\");\n    assertDoesNotThrow(\n        () -> FileUtils.writeToFile(new ConsoleRender(), changedOpenApi, path.toString()));\n    assertThat(path).exists().content().isNotBlank();\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private ChangedOpenApi changedOpenApi;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "ChangedOpenApi", "name": "changedOpenApi", "syntax_pass": true}]}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedHeaders_equalsTest.java.ChangedHeaders_equalsTest", "name": "ChangedHeaders_equalsTest", "file_path": "src/test/java/org/openapitools/openapidiff/core/model/ChangedHeaders_equalsTest.java", "superclasses": "", "methods": ["[void]testEquals_SameInstance()", "[void]testEquals_DifferentClass()", "[void]testEquals_NullObject()", "[void]testEquals_DifferentFields()", "[void]testEquals_SameFields()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class ChangedHeaders_equalsTest {\n\n  @Test\n  public void testEquals_SameInstance() {\n    Map<String, Header> oldHeaders = new HashMap<>();\n    Map<String, Header> newHeaders = new HashMap<>();\n    DiffContext context = new DiffContext(null);\n    ChangedHeaders headers = new ChangedHeaders(oldHeaders, newHeaders, context);\n\n    assertTrue(headers.equals(headers));\n  }\n\n  @Test\n  public void testEquals_DifferentClass() {\n    Map<String, Header> oldHeaders = new HashMap<>();\n    Map<String, Header> newHeaders = new HashMap<>();\n    DiffContext context = new DiffContext(null);\n    ChangedHeaders headers = new ChangedHeaders(oldHeaders, newHeaders, context);\n\n    assertFalse(headers.equals(new Object()));\n  }\n\n  @Test\n  public void testEquals_NullObject() {\n    Map<String, Header> oldHeaders = new HashMap<>();\n    Map<String, Header> newHeaders = new HashMap<>();\n    DiffContext context = new DiffContext(null);\n    ChangedHeaders headers = new ChangedHeaders(oldHeaders, newHeaders, context);\n\n    assertFalse(headers.equals(null));\n  }\n\n  @Test\n  public void testEquals_DifferentFields() {\n    Map<String, Header> oldHeaders1 = new HashMap<>();\n    Map<String, Header> newHeaders1 = new HashMap<>();\n    DiffContext context1 = new DiffContext(null);\n    ChangedHeaders headers1 = new ChangedHeaders(oldHeaders1, newHeaders1, context1);\n\n    Map<String, Header> oldHeaders2 = new HashMap<>();\n    Map<String, Header> newHeaders2 = new HashMap<>();\n    DiffContext context2 = new DiffContext(null);\n    ChangedHeaders headers2 = new ChangedHeaders(oldHeaders2, newHeaders2, context2);\n\n    // Initialize the fields that are not initialized in the constructor\n    headers1.setIncreased(new HashMap<>()).setMissing(new HashMap<>()).setChanged(new HashMap<>());\n    headers2.setIncreased(new HashMap<>()).setMissing(new HashMap<>()).setChanged(new HashMap<>());\n\n    // Ensure the fields are different\n    headers1.getIncreased().put(\"key1\", new Header());\n    headers2.getIncreased().put(\"key2\", new Header());\n\n    assertFalse(headers1.equals(headers2));\n  }\n\n  @Test\n  public void testEquals_SameFields() {\n    Map<String, Header> oldHeaders = new HashMap<>();\n    Map<String, Header> newHeaders = new HashMap<>();\n    DiffContext context = new DiffContext(null);\n    ChangedHeaders headers1 = new ChangedHeaders(oldHeaders, newHeaders, context);\n    ChangedHeaders headers2 = new ChangedHeaders(oldHeaders, newHeaders, context);\n\n    // Initialize the fields that are not initialized in the constructor\n    headers1.setIncreased(new HashMap<>()).setMissing(new HashMap<>()).setChanged(new HashMap<>());\n    headers2.setIncreased(new HashMap<>()).setMissing(new HashMap<>()).setChanged(new HashMap<>());\n\n    assertTrue(headers1.equals(headers2));\n  }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedResponse_hashCodeTest.java.ChangedResponse_hashCodeTest", "name": "ChangedResponse_hashCodeTest", "file_path": "src/test/java/org/openapitools/openapidiff/core/model/ChangedResponse_hashCodeTest.java", "superclasses": "", "methods": ["[void]testHashCode()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class ChangedResponse_hashCodeTest {\n\n  @Test\n  public void testHashCode() {\n    ApiResponse oldApiResponse = new ApiResponse().description(\"Old Response\");\n    ApiResponse newApiResponse = new ApiResponse().description(\"New Response\");\n    DiffContext context = new DiffContext(null);\n    ChangedResponse response1 = new ChangedResponse(oldApiResponse, newApiResponse, context);\n    ChangedResponse response2 = new ChangedResponse(oldApiResponse, newApiResponse, context);\n\n    assertEquals(response1.hashCode(), response2.hashCode());\n  }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOpenApi_isCoreChangedTest.java.ChangedOpenApi_isCoreChangedTest", "name": "ChangedOpenApi_isCoreChangedTest", "file_path": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOpenApi_isCoreChangedTest.java", "superclasses": "", "methods": ["[void]testIsCoreChangedNoChanges()", "[void]testIsCoreChangedCompatible()", "[void]testIsCoreChangedIncompatible()", "[void]testIsCoreChangedIncompatibleWithConfig()"], "method_uris": ["src/test/java/org/openapitools/openapidiff/core/model/ChangedOpenApi_isCoreChangedTest.java.ChangedOpenApi_isCoreChangedTest.[void]setUp()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class ChangedOpenApi_isCoreChangedTest {\n\n  private ChangedOpenApi changedOpenApi;\n  private OpenApiDiffOptions options;\n\n  @BeforeEach\n  public void setUp() {\n    options = OpenApiDiffOptions.builder().build();\n    changedOpenApi = new ChangedOpenApi(options);\n  }\n\n  @Test\n  public void testIsCoreChangedNoChanges() {\n    changedOpenApi.setNewEndpoints(Collections.emptyList());\n    changedOpenApi.setMissingEndpoints(Collections.emptyList());\n    assertEquals(DiffResult.NO_CHANGES, changedOpenApi.isCoreChanged());\n  }\n\n  @Test\n  public void testIsCoreChangedCompatible() {\n    List<Endpoint> newEndpoints = Collections.singletonList(new Endpoint());\n    changedOpenApi.setNewEndpoints(newEndpoints);\n    changedOpenApi.setMissingEndpoints(Collections.emptyList());\n    assertEquals(DiffResult.COMPATIBLE, changedOpenApi.isCoreChanged());\n  }\n\n  @Test\n  public void testIsCoreChangedIncompatible() {\n    List<Endpoint> missingEndpoints = Collections.singletonList(new Endpoint());\n    changedOpenApi.setNewEndpoints(Collections.emptyList());\n    changedOpenApi.setMissingEndpoints(missingEndpoints);\n    assertEquals(DiffResult.INCOMPATIBLE, changedOpenApi.isCoreChanged());\n  }\n\n  @Test\n  public void testIsCoreChangedIncompatibleWithConfig() {\n    List<Endpoint> missingEndpoints = Collections.singletonList(new Endpoint());\n    changedOpenApi.setNewEndpoints(Collections.emptyList());\n    changedOpenApi.setMissingEndpoints(missingEndpoints);\n    options.getConfig().setProperty(OPENAPI_ENDPOINTS_DECREASED.name(), \"true\");\n    assertEquals(DiffResult.INCOMPATIBLE, changedOpenApi.isCoreChanged());\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private ChangedOpenApi changedOpenApi;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "ChangedOpenApi", "name": "changedOpenApi", "syntax_pass": true}, {"attribute_expression": "private OpenApiDiffOptions options;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "OpenApiDiffOptions", "name": "options", "syntax_pass": true}]}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/deferred/PendingChanged_setValueTest.java.PendingChanged_setValueTest", "name": "PendingChanged_setValueTest", "file_path": "src/test/java/org/openapitools/openapidiff/core/model/deferred/PendingChanged_setValueTest.java", "superclasses": "", "methods": ["[void]testSetValue_FirstTime()", "[void]testSetValue_SecondTime()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class PendingChanged_setValueTest {\n\n  @Test\n  public void testSetValue_FirstTime() {\n    PendingChanged<String> pendingChanged = new PendingChanged<>();\n    Optional<String> value = Optional.of(\"testValue\");\n\n    pendingChanged.setValue(value);\n\n    assertTrue(pendingChanged.isValueSet());\n    assertTrue(pendingChanged.isPresent());\n    assertEquals(\"testValue\", pendingChanged.get());\n  }\n\n  @Test\n  public void testSetValue_SecondTime() {\n    PendingChanged<String> pendingChanged = new PendingChanged<>();\n    Optional<String> value = Optional.of(\"testValue\");\n    pendingChanged.setValue(value);\n\n    IllegalStateException exception =\n        assertThrows(\n            IllegalStateException.class,\n            () -> {\n              pendingChanged.setValue(value);\n            });\n\n    assertEquals(\n        \"PendingChanged may not be set more than once. Value was already set.\",\n        exception.getMessage());\n  }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilderChangedTest.java.DeferredBuilderChangedTest", "name": "DeferredBuilderChangedTest", "file_path": "src/test/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilderChangedTest.java", "superclasses": "", "methods": ["[void]testPendingChangedValueSetBeforeListeners()", "[void]testPendingChangedValueSetAfterListeners()", "[void]testPendingChangedValueEMpty()", "[void]testRealizedChange()", "[void]testRealizedChangeEmpty()", "[void]testFlatMap()", "[void]testDeferredBuilderEmpty()", "[void]testDeferredBuilderAllRealized()", "[void]testDeferredBuilderPending()"], "method_uris": ["src/test/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilderChangedTest.java.DeferredBuilderChangedTest.[void]beforeEach()"], "overrides": null, "attributes": [{"original_string": "  private static class ChangedAssertion {\n    AtomicBoolean map = new AtomicBoolean(false);\n    AtomicBoolean flatMap = new AtomicBoolean(false);\n    AtomicBoolean mapOptional = new AtomicBoolean(false);\n    AtomicBoolean whenSet = new AtomicBoolean(false);\n    AtomicBoolean ifPresent = new AtomicBoolean(false);\n\n    public ChangedAssertion(DeferredChanged<?> changed) {\n      changed.mapOptional(\n          (value) -> {\n            mapOptional.set(true);\n            return Optional.empty();\n          });\n      changed.map(\n          (value) -> {\n            map.set(true);\n            return Optional.empty();\n          });\n      changed.flatMap(\n          (value) -> {\n            flatMap.set(true);\n            return DeferredChanged.empty();\n          });\n      changed.whenSet((value) -> whenSet.set(true));\n      changed.ifPresent((value) -> ifPresent.set(true));\n    }\n\n    public void assertSet(boolean expectedIfPresent) {\n      Assertions.assertTrue(mapOptional.get(), \"mapOptional\");\n      Assertions.assertTrue(map.get(), \"map\");\n      Assertions.assertTrue(flatMap.get(), \"flatMap\");\n      Assertions.assertTrue(whenSet.get(), \"whenSet\");\n      Assertions.assertEquals(expectedIfPresent, ifPresent.get(), \"ifPresent\");\n    }\n\n    public void assertNotSet() {\n      Assertions.assertFalse(mapOptional.get(), \"mapOptional\");\n      Assertions.assertFalse(map.get(), \"map\");\n      Assertions.assertFalse(flatMap.get(), \"flatMap\");\n      Assertions.assertFalse(whenSet.get(), \"whenSet\");\n      Assertions.assertFalse(ifPresent.get(), \"ifPresent\");\n    }\n  }", "definition": "  private static class ChangedAssertion", "class_docstring": "", "name": "ChangedAssertion", "super_interfaces": [], "superclasses": "", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "fields": [{"attribute_expression": "AtomicBoolean map = new AtomicBoolean(false);", "docstring": "", "modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "type": "AtomicBoolean", "name": "map = new AtomicBoolean(false)", "syntax_pass": true}, {"attribute_expression": "AtomicBoolean flatMap = new AtomicBoolean(false);", "docstring": "", "modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "type": "AtomicBoolean", "name": "flatMap = new AtomicBoolean(false)", "syntax_pass": true}, {"attribute_expression": "AtomicBoolean mapOptional = new AtomicBoolean(false);", "docstring": "", "modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "type": "AtomicBoolean", "name": "mapOptional = new AtomicBoolean(false)", "syntax_pass": true}, {"attribute_expression": "AtomicBoolean whenSet = new AtomicBoolean(false);", "docstring": "", "modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "type": "AtomicBoolean", "name": "whenSet = new AtomicBoolean(false)", "syntax_pass": true}, {"attribute_expression": "AtomicBoolean ifPresent = new AtomicBoolean(false);", "docstring": "", "modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "type": "AtomicBoolean", "name": "ifPresent = new AtomicBoolean(false)", "syntax_pass": true}], "classes": []}, "syntax_pass": true, "methods": [{"syntax_pass": true, "original_string": "    public ChangedAssertion(DeferredChanged<?> changed) {\n      changed.mapOptional(\n          (value) -> {\n            mapOptional.set(true);\n            return Optional.empty();\n          });\n      changed.map(\n          (value) -> {\n            map.set(true);\n            return Optional.empty();\n          });\n      changed.flatMap(\n          (value) -> {\n            flatMap.set(true);\n            return DeferredChanged.empty();\n          });\n      changed.whenSet((value) -> whenSet.set(true));\n      changed.ifPresent((value) -> ifPresent.set(true));\n    }", "docstring": "", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "name": "ChangedAssertion", "params": [{"name": "changed", "type": "DeferredChanged<?>"}], "body": "                                                        {\n      changed.mapOptional(\n          (value) -> {\n            mapOptional.set(true);\n            return Optional.empty();\n          });\n      changed.map(\n          (value) -> {\n            map.set(true);\n            return Optional.empty();\n          });\n      changed.flatMap(\n          (value) -> {\n            flatMap.set(true);\n            return DeferredChanged.empty();\n          });\n      changed.whenSet((value) -> whenSet.set(true));\n      changed.ifPresent((value) -> ifPresent.set(true));\n    }", "signature": "public ChangedAssertion(DeferredChanged<?> changed)"}, {"syntax_pass": true, "original_string": "    public void assertSet(boolean expectedIfPresent) {\n      Assertions.assertTrue(mapOptional.get(), \"mapOptional\");\n      Assertions.assertTrue(map.get(), \"map\");\n      Assertions.assertTrue(flatMap.get(), \"flatMap\");\n      Assertions.assertTrue(whenSet.get(), \"whenSet\");\n      Assertions.assertEquals(expectedIfPresent, ifPresent.get(), \"ifPresent\");\n    }", "docstring": "", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "name": "assertSet", "params": [{"name": "expectedIfPresent", "type": "boolean"}], "body": "                                                     {\n      Assertions.assertTrue(mapOptional.get(), \"mapOptional\");\n      Assertions.assertTrue(map.get(), \"map\");\n      Assertions.assertTrue(flatMap.get(), \"flatMap\");\n      Assertions.assertTrue(whenSet.get(), \"whenSet\");\n      Assertions.assertEquals(expectedIfPresent, ifPresent.get(), \"ifPresent\");\n    }", "signature": "public void assertSet(boolean expectedIfPresent)"}, {"syntax_pass": true, "original_string": "    public void assertNotSet() {\n      Assertions.assertFalse(mapOptional.get(), \"mapOptional\");\n      Assertions.assertFalse(map.get(), \"map\");\n      Assertions.assertFalse(flatMap.get(), \"flatMap\");\n      Assertions.assertFalse(whenSet.get(), \"whenSet\");\n      Assertions.assertFalse(ifPresent.get(), \"ifPresent\");\n    }", "docstring": "", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "name": "assertNotSet", "params": [], "body": "                               {\n      Assertions.assertFalse(mapOptional.get(), \"mapOptional\");\n      Assertions.assertFalse(map.get(), \"map\");\n      Assertions.assertFalse(flatMap.get(), \"flatMap\");\n      Assertions.assertFalse(whenSet.get(), \"whenSet\");\n      Assertions.assertFalse(ifPresent.get(), \"ifPresent\");\n    }", "signature": "public void assertNotSet()"}]}], "class_docstring": "", "original_string": "public class DeferredBuilderChangedTest {\n\n  private PendingChanged<ChangedReadOnly> changed;\n  private Optional<ChangedReadOnly> whenSet;\n  private ChangedWriteOnly mappedValue;\n  private Optional<?> chainedValue;\n\n  @BeforeEach\n  public void beforeEach() {\n    whenSet = Optional.empty();\n    mappedValue = null;\n    chainedValue = Optional.empty();\n    changed = new PendingChanged<>();\n  }\n\n  @Test\n  public void testPendingChangedValueSetBeforeListeners() {\n    PendingChanged<String> changed = new PendingChanged<>();\n    changed.setValue(Optional.of(\"Hello\"));\n    ChangedAssertion assertion = new ChangedAssertion(changed);\n    assertion.assertSet(true);\n  }\n\n  @Test\n  public void testPendingChangedValueSetAfterListeners() {\n    PendingChanged<String> changed = new PendingChanged<>();\n    ChangedAssertion assertion = new ChangedAssertion(changed);\n    changed.setValue(Optional.of(\"Hello\"));\n    assertion.assertSet(true);\n  }\n\n  @Test\n  public void testPendingChangedValueEMpty() {\n    PendingChanged<String> changed = new PendingChanged<>();\n    ChangedAssertion assertion = new ChangedAssertion(changed);\n    changed.setValue(Optional.empty());\n    assertion.assertSet(false);\n  }\n\n  @Test\n  public void testRealizedChange() {\n    RealizedChanged<String> changed = new RealizedChanged<>(\"hello\");\n    ChangedAssertion assertion = new ChangedAssertion(changed);\n    assertion.assertSet(true);\n  }\n\n  @Test\n  public void testRealizedChangeEmpty() {\n    RealizedChanged<String> changed = new RealizedChanged<>(Optional.empty());\n    ChangedAssertion assertion = new ChangedAssertion(changed);\n    assertion.assertSet(false);\n  }\n\n  private static class ChangedAssertion {\n    AtomicBoolean map = new AtomicBoolean(false);\n    AtomicBoolean flatMap = new AtomicBoolean(false);\n    AtomicBoolean mapOptional = new AtomicBoolean(false);\n    AtomicBoolean whenSet = new AtomicBoolean(false);\n    AtomicBoolean ifPresent = new AtomicBoolean(false);\n\n    public ChangedAssertion(DeferredChanged<?> changed) {\n      changed.mapOptional(\n          (value) -> {\n            mapOptional.set(true);\n            return Optional.empty();\n          });\n      changed.map(\n          (value) -> {\n            map.set(true);\n            return Optional.empty();\n          });\n      changed.flatMap(\n          (value) -> {\n            flatMap.set(true);\n            return DeferredChanged.empty();\n          });\n      changed.whenSet((value) -> whenSet.set(true));\n      changed.ifPresent((value) -> ifPresent.set(true));\n    }\n\n    public void assertSet(boolean expectedIfPresent) {\n      Assertions.assertTrue(mapOptional.get(), \"mapOptional\");\n      Assertions.assertTrue(map.get(), \"map\");\n      Assertions.assertTrue(flatMap.get(), \"flatMap\");\n      Assertions.assertTrue(whenSet.get(), \"whenSet\");\n      Assertions.assertEquals(expectedIfPresent, ifPresent.get(), \"ifPresent\");\n    }\n\n    public void assertNotSet() {\n      Assertions.assertFalse(mapOptional.get(), \"mapOptional\");\n      Assertions.assertFalse(map.get(), \"map\");\n      Assertions.assertFalse(flatMap.get(), \"flatMap\");\n      Assertions.assertFalse(whenSet.get(), \"whenSet\");\n      Assertions.assertFalse(ifPresent.get(), \"ifPresent\");\n    }\n  }\n\n  @Test\n  public void testFlatMap() {\n    PendingChanged<ChangedWriteOnly> flatMapPending = new PendingChanged<>();\n\n    changed.whenSet((value) -> this.whenSet = value);\n\n    DeferredChanged<ChangedWriteOnly> chainedChanged =\n        changed.flatMap(\n            (value) -> {\n              System.out.println(\"Flatmap called\");\n              return flatMapPending;\n            });\n    chainedChanged.whenSet(value -> chainedValue = value);\n\n    DeferredChanged<ChangedWriteOnly> mappedDeferred =\n        changed.map(value -> new ChangedWriteOnly(false, true, null));\n    mappedDeferred.ifPresent(v -> mappedValue = v);\n\n    Assertions.assertFalse(whenSet.isPresent());\n    Assertions.assertFalse(chainedValue.isPresent());\n    Assertions.assertNull(mappedValue);\n\n    changed.setValue(Optional.of(new ChangedReadOnly(false, true, null)));\n    Assertions.assertTrue(whenSet.isPresent());\n    Assertions.assertNotNull(mappedValue);\n    Assertions.assertFalse(chainedValue.isPresent());\n\n    flatMapPending.setValue(Optional.of(new ChangedWriteOnly(false, true, null)));\n    Assertions.assertTrue(whenSet.isPresent());\n    Assertions.assertTrue(chainedValue.isPresent());\n  }\n\n  @Test\n  public void testDeferredBuilderEmpty() {\n    DeferredBuilder<String> builder = new DeferredBuilder<>();\n    ChangedAssertion builderAssertion = new ChangedAssertion(builder.build());\n    builderAssertion.assertSet(false);\n  }\n\n  @Test\n  public void testDeferredBuilderAllRealized() {\n    DeferredBuilder<String> builder = new DeferredBuilder<>();\n    builder.add(new RealizedChanged<>(\"hello\"));\n    builder.add(new RealizedChanged<>(\"bye\"));\n    ChangedAssertion builderAssertion = new ChangedAssertion(builder.build());\n    builderAssertion.assertSet(true);\n  }\n\n  @Test\n  public void testDeferredBuilderPending() {\n    PendingChanged<String> changed = new PendingChanged<>();\n\n    DeferredBuilder<String> builder = new DeferredBuilder<>();\n    builder.add(new RealizedChanged<>(\"hello\"));\n    builder.add(changed);\n    ChangedAssertion builderAssertion = new ChangedAssertion(builder.build());\n    builderAssertion.assertNotSet();\n\n    changed.setValue(Optional.of(\"hello\"));\n    builderAssertion.assertSet(true);\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private PendingChanged<ChangedReadOnly> changed;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "PendingChanged<ChangedReadOnly>", "name": "changed", "syntax_pass": true}, {"attribute_expression": "private Optional<ChangedReadOnly> whenSet;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Optional<ChangedReadOnly>", "name": "whenSet", "syntax_pass": true}, {"attribute_expression": "private ChangedWriteOnly mappedValue;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "ChangedWriteOnly", "name": "mappedValue", "syntax_pass": true}, {"attribute_expression": "private Optional<?> chainedValue;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Optional<?>", "name": "chainedValue", "syntax_pass": true}]}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/deferred/PendingChanged_whenSetTest.java.PendingChanged_whenSetTest", "name": "PendingChanged_whenSetTest", "file_path": "src/test/java/org/openapitools/openapidiff/core/model/deferred/PendingChanged_whenSetTest.java", "superclasses": "", "methods": ["[void]testWhenSet_ValueNotSet()", "[void]testWhenSet_ValueAlreadySet()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class PendingChanged_whenSetTest {\n\n  @Test\n  public void testWhenSet_ValueNotSet() {\n    PendingChanged<String> pendingChanged = new PendingChanged<>();\n    Consumer<Optional<String>> consumer = Optional::isPresent;\n\n    pendingChanged.whenSet(consumer);\n\n    // Accessing private field directly is not allowed, use a method to check the state\n    assertFalse(pendingChanged.isValueSet());\n  }\n\n  @Test\n  public void testWhenSet_ValueAlreadySet() {\n    PendingChanged<String> pendingChanged = new PendingChanged<>();\n    pendingChanged.setValue(Optional.of(\"test\"));\n    Consumer<Optional<String>> consumer = opt -> assertEquals(\"test\", opt.orElse(null));\n\n    pendingChanged.whenSet(consumer);\n  }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilder_buildTest.java.DeferredBuilder_buildTest", "name": "DeferredBuilder_buildTest", "file_path": "src/test/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilder_buildTest.java", "superclasses": "", "methods": ["[void]testBuildWithEmptyDeferredValues()", "[void]testBuildWithNonEmptyDeferredValues()"], "method_uris": ["src/test/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilder_buildTest.java.DeferredBuilder_buildTest.[void]setUp()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "@ExtendWith(MockitoExtension.class)\npublic class DeferredBuilder_buildTest {\n\n  private DeferredBuilder<String> builder;\n\n  @Mock private DeferredChanged<String> deferred1;\n\n  @Mock private DeferredChanged<String> deferred2;\n\n  @Mock private PendingChanged<List<Optional<? super String>>> pendingChanged;\n\n  @BeforeEach\n  public void setUp() {\n    builder = new DeferredBuilder<>();\n  }\n\n  @Test\n  public void testBuildWithEmptyDeferredValues() {\n    DeferredChanged<List<Optional<? super String>>> result = builder.build();\n    assertEquals(DeferredChanged.empty(), result);\n  }\n\n  @Test\n  public void testBuildWithNonEmptyDeferredValues() {\n    builder.add(deferred1);\n    builder.add(deferred2);\n\n    DeferredChanged<List<Optional<? super String>>> result = builder.build();\n\n    verify(deferred1).whenSet(any());\n    verify(deferred2).whenSet(any());\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private DeferredBuilder<String> builder;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "DeferredBuilder<String>", "name": "builder", "syntax_pass": true}, {"attribute_expression": "@Mock private DeferredChanged<String> deferred1;", "docstring": "", "modifiers": "@Mock private", "marker_annotations": ["@Mock"], "non_marker_annotations": ["private"], "comments": [], "type": "DeferredChanged<String>", "name": "deferred1", "syntax_pass": true}, {"attribute_expression": "@Mock private DeferredChanged<String> deferred2;", "docstring": "", "modifiers": "@Mock private", "marker_annotations": ["@Mock"], "non_marker_annotations": ["private"], "comments": [], "type": "DeferredChanged<String>", "name": "deferred2", "syntax_pass": true}, {"attribute_expression": "@Mock private PendingChanged<List<Optional<? super String>>> pendingChanged;", "docstring": "", "modifiers": "@Mock private", "marker_annotations": ["@Mock"], "non_marker_annotations": ["private"], "comments": [], "type": "PendingChanged<List<Optional<? super String>>>", "name": "pendingChanged", "syntax_pass": true}]}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/deferred/PendingChanged_ifPresentTest.java.PendingChanged_ifPresentTest", "name": "PendingChanged_ifPresentTest", "file_path": "src/test/java/org/openapitools/openapidiff/core/model/deferred/PendingChanged_ifPresentTest.java", "superclasses": "", "methods": ["[void]testIfPresent_ValueSetAndPresent()", "[void]testIfPresent_ValueNotSet()", "[void]testIfPresent_ValueSetButNotPresent()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class PendingChanged_ifPresentTest {\n\n  @Test\n  public void testIfPresent_ValueSetAndPresent() {\n    // Given\n    PendingChanged<String> pendingChanged = new PendingChanged<>();\n    pendingChanged.setValue(Optional.of(\"testValue\"));\n    StringBuilder result = new StringBuilder();\n    Consumer<String> consumer = result::append;\n\n    // When\n    pendingChanged.ifPresent(consumer);\n\n    // Then\n    assertTrue(pendingChanged.isPresent());\n    assertEquals(\"testValue\", result.toString());\n  }\n\n  @Test\n  public void testIfPresent_ValueNotSet() {\n    // Given\n    PendingChanged<String> pendingChanged = new PendingChanged<>();\n    StringBuilder result = new StringBuilder();\n    Consumer<String> consumer = result::append;\n\n    // When\n    pendingChanged.ifPresent(consumer);\n\n    // Then\n    assertFalse(pendingChanged.isPresent());\n    assertEquals(0, result.length());\n  }\n\n  @Test\n  public void testIfPresent_ValueSetButNotPresent() {\n    // Given\n    PendingChanged<String> pendingChanged = new PendingChanged<>();\n    pendingChanged.setValue(Optional.empty());\n    StringBuilder result = new StringBuilder();\n    Consumer<String> consumer = result::append;\n\n    // When\n    pendingChanged.ifPresent(consumer);\n\n    // Then\n    assertFalse(pendingChanged.isPresent());\n    assertEquals(0, result.length());\n  }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java.NumericRangeBCTest", "name": "NumericRangeBCTest", "file_path": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java", "superclasses": "", "methods": ["[void]unchanged()", "[void]changedButCompatible()", "[void]requestExclusiveMaxCreated()", "[void]requestExclusiveMaxSet()", "[void]requestExclusiveMinCreated()", "[void]requestExclusiveMinSet()", "[void]requestMaxAdded()", "[void]requestMaxDecreased()", "[void]requestMinAdded()", "[void]requestMinIncreased()", "[void]responseExclusiveMaxDeleted()", "[void]responseExclusiveMaxUnset()", "[void]responseExclusiveMinDeleted()", "[void]responseExclusiveMinUnset()", "[void]responseMaxDeleted()", "[void]responseMaxIncreased()", "[void]responseMinDecreased()", "[void]responseMinDeleted()"], "method_uris": ["src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java.NumericRangeBCTest.[void]assertIncompatibleRequest(String)", "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java.NumericRangeBCTest.[void]assertIncompatibleResponse(String)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class NumericRangeBCTest {\n  private final String BASE = \"bc_numericrange_base.yaml\";\n\n  @Test\n  public void unchanged() {\n    assertSpecUnchanged(BASE, BASE);\n  }\n\n  @Test\n  public void changedButCompatible() {\n    assertSpecChangedButCompatible(BASE, \"bc_numericrange_changed_but_compatible.yaml\");\n  }\n\n  @Test\n  public void requestExclusiveMaxCreated() {\n    assertIncompatibleRequest(\"bc_request_numericrange_exclusive_max_created.yaml\");\n  }\n\n  @Test\n  public void requestExclusiveMaxSet() {\n    assertIncompatibleRequest(\"bc_request_numericrange_exclusive_max_set.yaml\");\n  }\n\n  @Test\n  public void requestExclusiveMinCreated() {\n    assertIncompatibleRequest(\"bc_request_numericrange_exclusive_min_created.yaml\");\n  }\n\n  @Test\n  public void requestExclusiveMinSet() {\n    assertIncompatibleRequest(\"bc_request_numericrange_exclusive_min_set.yaml\");\n  }\n\n  @Test\n  public void requestMaxAdded() {\n    assertIncompatibleRequest(\"bc_request_numericrange_max_added.yaml\");\n  }\n\n  @Test\n  public void requestMaxDecreased() {\n    assertIncompatibleRequest(\"bc_request_numericrange_max_decreased.yaml\");\n  }\n\n  @Test\n  public void requestMinAdded() {\n    assertIncompatibleRequest(\"bc_request_numericrange_min_added.yaml\");\n  }\n\n  @Test\n  public void requestMinIncreased() {\n    assertIncompatibleRequest(\"bc_request_numericrange_min_increased.yaml\");\n  }\n\n  @Test\n  public void responseExclusiveMaxDeleted() {\n    assertIncompatibleResponse(\"bc_response_numericrange_exclusive_max_deleted.yaml\");\n  }\n\n  @Test\n  public void responseExclusiveMaxUnset() {\n    assertIncompatibleResponse(\"bc_response_numericrange_exclusive_max_unset.yaml\");\n  }\n\n  @Test\n  public void responseExclusiveMinDeleted() {\n    assertIncompatibleResponse(\"bc_response_numericrange_exclusive_min_deleted.yaml\");\n  }\n\n  @Test\n  public void responseExclusiveMinUnset() {\n    assertIncompatibleResponse(\"bc_response_numericrange_exclusive_min_unset.yaml\");\n  }\n\n  @Test\n  public void responseMaxDeleted() {\n    assertIncompatibleResponse(\"bc_response_numericrange_max_deleted.yaml\");\n  }\n\n  @Test\n  public void responseMaxIncreased() {\n    assertIncompatibleResponse(\"bc_response_numericrange_max_increased.yaml\");\n  }\n\n  @Test\n  public void responseMinDecreased() {\n    assertIncompatibleResponse(\"bc_response_numericrange_min_decreased.yaml\");\n  }\n\n  @Test\n  public void responseMinDeleted() {\n    assertIncompatibleResponse(\"bc_response_numericrange_min_deleted.yaml\");\n  }\n\n  private void assertIncompatibleRequest(String newSpec) {\n    assertSpecIncompatible(BASE, newSpec, REQUEST_NUMERIC_RANGE_DECREASED);\n  }\n\n  private void assertIncompatibleResponse(String newSpec) {\n    assertSpecIncompatible(BASE, newSpec, RESPONSE_NUMERIC_RANGE_INCREASED);\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final String BASE = \"bc_numericrange_base.yaml\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "BASE = \"bc_numericrange_base.yaml\"", "syntax_pass": true}]}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecuritySchemeBCTest.java.SecuritySchemeBCTest", "name": "SecuritySchemeBCTest", "file_path": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecuritySchemeBCTest.java", "superclasses": "", "methods": ["[void]unchanged()", "[void]changedButCompatible()", "[void]bearerFormatChanged()", "[void]inChanged()", "[void]openIdConnectUrlChanged()", "[void]schemeChanged()", "[void]typeChanged()", "[void]scopesIncreased()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class SecuritySchemeBCTest {\n  private final String BASE = \"bc_security_scheme_base.yaml\";\n\n  @Test\n  public void unchanged() {\n    assertSpecUnchanged(BASE, BASE);\n  }\n\n  @Test\n  public void changedButCompatible() {\n    assertSpecChangedButCompatible(BASE, \"bc_security_scheme_changed_but_compatible.yaml\");\n  }\n\n  @Test\n  public void bearerFormatChanged() {\n    BackwardIncompatibleProp prop = SECURITY_SCHEME_BEARER_FORMAT_CHANGED;\n    assertSpecIncompatible(BASE, \"bc_security_scheme_bearer_format_changed.yaml\", prop);\n  }\n\n  @Test\n  public void inChanged() {\n    assertOpenApiBackwardIncompatible(BASE, \"bc_security_scheme_in_changed.yaml\");\n  }\n\n  @Test\n  public void openIdConnectUrlChanged() {\n    BackwardIncompatibleProp prop = SECURITY_SCHEME_OPENIDCONNECT_URL_CHANGED;\n    assertSpecIncompatible(BASE, \"bc_security_scheme_open_id_connect_url_changed.yaml\", prop);\n  }\n\n  @Test\n  public void schemeChanged() {\n    BackwardIncompatibleProp prop = SECURITY_SCHEME_SCHEME_CHANGED;\n    assertSpecIncompatible(BASE, \"bc_security_scheme_scheme_changed.yaml\", prop);\n  }\n\n  @Test\n  public void typeChanged() {\n    assertOpenApiBackwardIncompatible(BASE, \"bc_security_scheme_type_changed.yaml\");\n  }\n\n  @Test\n  public void scopesIncreased() {\n    BackwardIncompatibleProp prop = SECURITY_SCHEME_SCOPES_INCREASED;\n    assertSpecIncompatible(BASE, \"bc_security_scheme_scopes_increased.yaml\", prop);\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final String BASE = \"bc_security_scheme_base.yaml\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "BASE = \"bc_security_scheme_base.yaml\"", "syntax_pass": true}]}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/ReadOnlyBCTest.java.ReadOnlyBCTest", "name": "ReadOnlyBCTest", "file_path": "src/test/java/org/openapitools/openapidiff/core/backcompat/ReadOnlyBCTest.java", "superclasses": "", "methods": ["[void]unchanged()", "[void]changedButCompatible()", "[void]requestReadOnlyIncreased()", "[void]requestReadOnlyRequiredDecreased()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class ReadOnlyBCTest {\n  private final String BASE = \"bc_readonly_base.yaml\";\n\n  @Test\n  public void unchanged() {\n    assertSpecUnchanged(BASE, BASE);\n  }\n\n  @Test\n  public void changedButCompatible() {\n    assertSpecChangedButCompatible(BASE, \"bc_readonly_changed_but_compatible.yaml\");\n  }\n\n  @Test\n  public void requestReadOnlyIncreased() {\n    BackwardIncompatibleProp prop = REQUEST_READONLY_INCREASED;\n    assertSpecIncompatible(BASE, \"bc_request_readonly_increased.yaml\", prop);\n  }\n\n  @Test\n  public void requestReadOnlyRequiredDecreased() {\n    // Incompatible because a prev RO prop (invalid) is now not RO and required\n    BackwardIncompatibleProp prop = REQUEST_READONLY_REQUIRED_DECREASED;\n    assertSpecIncompatible(BASE, \"bc_request_readonly_required_decreased.yaml\", prop);\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final String BASE = \"bc_readonly_base.yaml\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "BASE = \"bc_readonly_base.yaml\"", "syntax_pass": true}]}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/PathsBCTest.java.PathsBCTest", "name": "PathsBCTest", "file_path": "src/test/java/org/openapitools/openapidiff/core/backcompat/PathsBCTest.java", "superclasses": "", "methods": ["[void]unchanged()", "[void]changedButCompatible()", "[void]decreased()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class PathsBCTest {\n  private final String BASE = \"bc_paths_base.yaml\";\n\n  @Test\n  public void unchanged() {\n    assertSpecUnchanged(BASE, BASE);\n  }\n\n  @Test\n  public void changedButCompatible() {\n    assertSpecChangedButCompatible(BASE, \"bc_paths_changed_but_compatible.yaml\");\n  }\n\n  @Test\n  public void decreased() {\n    BackwardIncompatibleProp prop = OPENAPI_ENDPOINTS_DECREASED;\n    assertSpecIncompatible(BASE, \"bc_paths_decreased.yaml\", prop);\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final String BASE = \"bc_paths_base.yaml\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "BASE = \"bc_paths_base.yaml\"", "syntax_pass": true}]}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/ApiResponseBCTest.java.ApiResponseBCTest", "name": "ApiResponseBCTest", "file_path": "src/test/java/org/openapitools/openapidiff/core/backcompat/ApiResponseBCTest.java", "superclasses": "", "methods": ["[void]unchanged()", "[void]changedButCompatible()", "[void]decreased()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class ApiResponseBCTest {\n  private final String BASE = \"bc_response_apiresponse_base.yaml\";\n\n  @Test\n  public void unchanged() {\n    assertSpecUnchanged(BASE, BASE);\n  }\n\n  @Test\n  public void changedButCompatible() {\n    assertSpecChangedButCompatible(BASE, \"bc_response_apiresponse_changed_but_compatible.yaml\");\n  }\n\n  @Test\n  public void decreased() {\n    BackwardIncompatibleProp prop = RESPONSE_RESPONSES_DECREASED;\n    assertSpecIncompatible(BASE, \"bc_response_apiresponse_decreased.yaml\", prop);\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final String BASE = \"bc_response_apiresponse_base.yaml\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "BASE = \"bc_response_apiresponse_base.yaml\"", "syntax_pass": true}]}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/SchemaBCTest.java.SchemaBCTest", "name": "SchemaBCTest", "file_path": "src/test/java/org/openapitools/openapidiff/core/backcompat/SchemaBCTest.java", "superclasses": "", "methods": ["[void]unchanged()", "[void]changedButCompatible()", "[void]discriminatorChanged()", "[void]requestFormatDecreased()", "[void]requestFormatIncreased()", "[void]requestPropsPutIncreased()", "[void]responseFormatDecreased()", "[void]responseFormatIncreased()", "[void]responsePropsRequiredDecreased()", "[void]typeChanged()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class SchemaBCTest {\n  private final String BASE = \"bc_schema_base.yaml\";\n\n  @Test\n  public void unchanged() {\n    assertSpecUnchanged(BASE, BASE);\n  }\n\n  @Test\n  public void changedButCompatible() {\n    assertSpecChangedButCompatible(BASE, \"bc_schema_changed_but_compatible.yaml\");\n  }\n\n  @Test\n  public void discriminatorChanged() {\n    BackwardIncompatibleProp prop = SCHEMA_DISCRIMINATOR_CHANGED;\n    assertSpecIncompatible(BASE, \"bc_schema_discriminator_changed.yaml\", prop);\n  }\n\n  @Test\n  public void requestFormatDecreased() {\n    assertOpenApiBackwardIncompatible(BASE, \"bc_request_schema_format_decreased.yaml\");\n  }\n\n  @Test\n  public void requestFormatIncreased() {\n    // TODO: Document why desired or remove support (test added to avoid unintentional regression)\n    assertOpenApiBackwardIncompatible(BASE, \"bc_request_schema_format_increased.yaml\");\n  }\n\n  @Test\n  public void requestPropsPutIncreased() {\n    // See https://github.com/OpenAPITools/openapi-diff/issues/537\n    assertSpecChangedButCompatible(BASE, \"bc_request_schema_props_put_increased.yaml\");\n  }\n\n  @Test\n  public void responseFormatDecreased() {\n    // TODO: Document why desired or remove support (test added to avoid unintentional regression)\n    assertOpenApiBackwardIncompatible(BASE, \"bc_response_schema_format_decreased.yaml\");\n  }\n\n  @Test\n  public void responseFormatIncreased() {\n    assertOpenApiBackwardIncompatible(BASE, \"bc_response_schema_format_increased.yaml\");\n  }\n\n  @Test\n  public void responsePropsRequiredDecreased() {\n    BackwardIncompatibleProp prop = RESPONSE_REQUIRED_DECREASED;\n    assertSpecIncompatible(BASE, \"bc_response_schema_props_required_decreased.yaml\", prop);\n  }\n\n  @Test\n  public void typeChanged() {\n    BackwardIncompatibleProp prop = SCHEMA_TYPE_CHANGED;\n    assertSpecIncompatible(BASE, \"bc_schema_type_changed.yaml\", prop);\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final String BASE = \"bc_schema_base.yaml\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "BASE = \"bc_schema_base.yaml\"", "syntax_pass": true}]}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/ContentBCTest.java.ContentBCTest", "name": "ContentBCTest", "file_path": "src/test/java/org/openapitools/openapidiff/core/backcompat/ContentBCTest.java", "superclasses": "", "methods": ["[void]unchanged()", "[void]changedButCompatible()", "[void]requestDecreased()", "[void]responseDecreased()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class ContentBCTest {\n  private final String BASE = \"bc_content_base.yaml\";\n\n  @Test\n  public void unchanged() {\n    assertSpecUnchanged(BASE, BASE);\n  }\n\n  @Test\n  public void changedButCompatible() {\n    assertSpecChangedButCompatible(BASE, \"bc_content_changed_but_compatible.yaml\");\n  }\n\n  @Test\n  public void requestDecreased() {\n    BackwardIncompatibleProp prop = REQUEST_CONTENT_DECREASED;\n    assertSpecIncompatible(BASE, \"bc_request_content_decreased.yaml\", prop);\n  }\n\n  @Test\n  public void responseDecreased() {\n    BackwardIncompatibleProp prop = RESPONSE_CONTENT_DECREASED;\n    assertSpecIncompatible(BASE, \"bc_response_content_decreased.yaml\", prop);\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final String BASE = \"bc_content_base.yaml\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "BASE = \"bc_content_base.yaml\"", "syntax_pass": true}]}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/MaxLengthBCTest.java.MaxLengthBCTest", "name": "MaxLengthBCTest", "file_path": "src/test/java/org/openapitools/openapidiff/core/backcompat/MaxLengthBCTest.java", "superclasses": "", "methods": ["[void]maxLengthUnchanged()", "[void]requestMaxLengthDecreased()", "[void]responseMaxLengthIncreased()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class MaxLengthBCTest {\n  private final String BASE = \"bc_maxlength_base.yaml\";\n\n  @Test\n  public void maxLengthUnchanged() {\n    assertSpecUnchanged(BASE, BASE);\n  }\n\n  @Test\n  public void requestMaxLengthDecreased() {\n    BackwardIncompatibleProp prop = REQUEST_MAX_LENGTH_DECREASED;\n    assertSpecIncompatible(BASE, \"bc_request_maxlength_decreased.yaml\", prop);\n  }\n\n  @Test\n  public void responseMaxLengthIncreased() {\n    BackwardIncompatibleProp prop = RESPONSE_MAX_LENGTH_INCREASED;\n    assertSpecIncompatible(BASE, \"bc_response_maxlength_increased.yaml\", prop);\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final String BASE = \"bc_maxlength_base.yaml\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "BASE = \"bc_maxlength_base.yaml\"", "syntax_pass": true}]}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/HeadersBCTest.java.HeadersBCTest", "name": "HeadersBCTest", "file_path": "src/test/java/org/openapitools/openapidiff/core/backcompat/HeadersBCTest.java", "superclasses": "", "methods": ["[void]unchanged()", "[void]changedButCompatible()", "[void]responseDecreased()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class HeadersBCTest {\n  private final String BASE = \"bc_response_headers_base.yaml\";\n\n  @Test\n  public void unchanged() {\n    assertSpecUnchanged(BASE, BASE);\n  }\n\n  @Test\n  public void changedButCompatible() {\n    assertSpecChangedButCompatible(BASE, \"bc_response_headers_changed_but_compatible.yaml\");\n  }\n\n  @Test\n  public void responseDecreased() {\n    BackwardIncompatibleProp prop = RESPONSE_HEADERS_DECREASED;\n    assertSpecIncompatible(BASE, \"bc_response_headers_decreased.yaml\", prop);\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final String BASE = \"bc_response_headers_base.yaml\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "BASE = \"bc_response_headers_base.yaml\"", "syntax_pass": true}]}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/OperationBCTest.java.OperationBCTest", "name": "OperationBCTest", "file_path": "src/test/java/org/openapitools/openapidiff/core/backcompat/OperationBCTest.java", "superclasses": "", "methods": ["[void]unchanged()", "[void]changedButCompatible()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class OperationBCTest {\n  private final String BASE = \"bc_operation_base.yaml\";\n\n  @Test\n  public void unchanged() {\n    assertSpecUnchanged(BASE, BASE);\n  }\n\n  @Test\n  public void changedButCompatible() {\n    assertSpecChangedButCompatible(BASE, \"bc_operation_changed_but_compatible.yaml\");\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final String BASE = \"bc_operation_base.yaml\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "BASE = \"bc_operation_base.yaml\"", "syntax_pass": true}]}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/ParametersBCTest.java.ParametersBCTest", "name": "ParametersBCTest", "file_path": "src/test/java/org/openapitools/openapidiff/core/backcompat/ParametersBCTest.java", "superclasses": "", "methods": ["[void]unchanged()", "[void]changedButCompatible()", "[void]decreased()", "[void]requiredIncreased()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class ParametersBCTest {\n  private final String BASE = \"bc_request_params_base.yaml\";\n\n  @Test\n  public void unchanged() {\n    assertSpecUnchanged(BASE, BASE);\n  }\n\n  @Test\n  public void changedButCompatible() {\n    assertSpecChangedButCompatible(BASE, \"bc_request_params_changed_but_compatible.yaml\");\n  }\n\n  @Test\n  public void decreased() {\n    BackwardIncompatibleProp prop = REQUEST_PARAMS_DECREASED;\n    assertSpecIncompatible(BASE, \"bc_request_params_decreased.yaml\", prop);\n  }\n\n  @Test\n  public void requiredIncreased() {\n    BackwardIncompatibleProp prop = REQUEST_PARAMS_REQUIRED_INCREASED;\n    assertSpecIncompatible(BASE, \"bc_request_params_required_increased.yaml\", prop);\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final String BASE = \"bc_request_params_base.yaml\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "BASE = \"bc_request_params_base.yaml\"", "syntax_pass": true}]}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/RequestBodyBCTest.java.RequestBodyBCTest", "name": "RequestBodyBCTest", "file_path": "src/test/java/org/openapitools/openapidiff/core/backcompat/RequestBodyBCTest.java", "superclasses": "", "methods": ["[void]unchanged()", "[void]requiredChanged()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class RequestBodyBCTest {\n  private final String BASE = \"bc_request_body_base.yaml\";\n\n  @Test\n  public void unchanged() {\n    assertSpecUnchanged(BASE, BASE);\n  }\n\n  @Test\n  public void requiredChanged() {\n    BackwardIncompatibleProp prop = OPENAPI_ENDPOINTS_DECREASED;\n    assertSpecIncompatible(BASE, \"bc_request_body_required_changed.yaml\", prop);\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final String BASE = \"bc_request_body_base.yaml\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "BASE = \"bc_request_body_base.yaml\"", "syntax_pass": true}]}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/OneOfBCTest.java.OneOfBCTest", "name": "OneOfBCTest", "file_path": "src/test/java/org/openapitools/openapidiff/core/backcompat/OneOfBCTest.java", "superclasses": "", "methods": ["[void]unchanged()", "[void]changedButCompatible()", "[void]requestDecreased()", "[void]responseIncreased()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class OneOfBCTest {\n  private final String BASE = \"bc_oneof_base.yaml\";\n\n  @Test\n  public void unchanged() {\n    assertSpecUnchanged(BASE, BASE);\n  }\n\n  @Test\n  public void changedButCompatible() {\n    assertSpecChangedButCompatible(BASE, \"bc_oneof_changed_but_compatible.yaml\");\n  }\n\n  @Test\n  public void requestDecreased() {\n    BackwardIncompatibleProp prop = REQUEST_ONEOF_DECREASED;\n    assertSpecIncompatible(BASE, \"bc_request_oneof_decreased.yaml\", prop);\n  }\n\n  @Test\n  public void responseIncreased() {\n    BackwardIncompatibleProp prop = RESPONSE_ONEOF_INCREASED;\n    assertSpecIncompatible(BASE, \"bc_response_oneof_increased.yaml\", prop);\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final String BASE = \"bc_oneof_base.yaml\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "BASE = \"bc_oneof_base.yaml\"", "syntax_pass": true}]}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecurityRequirementBCTest.java.SecurityRequirementBCTest", "name": "SecurityRequirementBCTest", "file_path": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecurityRequirementBCTest.java", "superclasses": "", "methods": ["[void]unchanged()", "[void]changedButCompatible()", "[void]schemesIncreased()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class SecurityRequirementBCTest {\n  private final String BASE = \"bc_security_requirement_base.yaml\";\n\n  @Test\n  public void unchanged() {\n    assertSpecUnchanged(BASE, BASE);\n  }\n\n  @Test\n  public void changedButCompatible() {\n    assertSpecChangedButCompatible(BASE, \"bc_security_requirement_changed_but_compatible.yaml\");\n  }\n\n  @Test\n  public void schemesIncreased() {\n    BackwardIncompatibleProp prop = SECURITY_REQUIREMENT_SCHEMES_INCREASED;\n    assertSpecIncompatible(BASE, \"bc_security_requirement_schemes_increased.yaml\", prop);\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final String BASE = \"bc_security_requirement_base.yaml\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "BASE = \"bc_security_requirement_base.yaml\"", "syntax_pass": true}]}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/HeaderBCTest.java.HeaderBCTest", "name": "HeaderBCTest", "file_path": "src/test/java/org/openapitools/openapidiff/core/backcompat/HeaderBCTest.java", "superclasses": "", "methods": ["[void]unchanged()", "[void]changedButCompatible()", "[void]responseExplodeChanged()", "[void]responseRequiredDecreased()", "[void]responseRequiredIncreased()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class HeaderBCTest {\n  private final String BASE = \"bc_response_header_base.yaml\";\n\n  @Test\n  public void unchanged() {\n    assertSpecUnchanged(BASE, BASE);\n  }\n\n  @Test\n  public void changedButCompatible() {\n    assertSpecChangedButCompatible(BASE, \"bc_response_header_changed_but_compatible.yaml\");\n  }\n\n  @Test\n  public void responseExplodeChanged() {\n    BackwardIncompatibleProp prop = RESPONSE_HEADER_EXPLODE_CHANGED;\n    assertSpecIncompatible(BASE, \"bc_response_header_explode_changed.yaml\", prop);\n  }\n\n  @Test\n  public void responseRequiredDecreased() {\n    BackwardIncompatibleProp prop = RESPONSE_HEADER_REQUIRED_DECREASED;\n    assertSpecIncompatible(BASE, \"bc_response_header_required_decreased.yaml\", prop);\n  }\n\n  @Test\n  public void responseRequiredIncreased() {\n    // TODO: Document why desired or remove support (test added to avoid unintentional regression)\n    BackwardIncompatibleProp prop = RESPONSE_HEADER_REQUIRED_INCREASED;\n    assertSpecIncompatible(BASE, \"bc_response_header_required_increased.yaml\", prop);\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final String BASE = \"bc_response_header_base.yaml\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "BASE = \"bc_response_header_base.yaml\"", "syntax_pass": true}]}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/EnumBCTest.java.EnumBCTest", "name": "EnumBCTest", "file_path": "src/test/java/org/openapitools/openapidiff/core/backcompat/EnumBCTest.java", "superclasses": "", "methods": ["[void]unchanged()", "[void]changedButCompatible()", "[void]requestDecreased()", "[void]responseIncreased()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class EnumBCTest {\n  private final String BASE = \"bc_enum_base.yaml\";\n\n  @Test\n  public void unchanged() {\n    assertSpecUnchanged(BASE, BASE);\n  }\n\n  @Test\n  public void changedButCompatible() {\n    assertSpecChangedButCompatible(BASE, \"bc_enum_changed_but_compatible.yaml\");\n  }\n\n  @Test\n  public void requestDecreased() {\n    BackwardIncompatibleProp prop = REQUEST_ENUM_DECREASED;\n    assertSpecIncompatible(BASE, \"bc_request_enum_decreased.yaml\", prop);\n  }\n\n  @Test\n  public void responseIncreased() {\n    BackwardIncompatibleProp prop = RESPONSE_ENUM_INCREASED;\n    assertSpecIncompatible(BASE, \"bc_response_enum_increased.yaml\", prop);\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final String BASE = \"bc_enum_base.yaml\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "BASE = \"bc_enum_base.yaml\"", "syntax_pass": true}]}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/OAuthFlowBCTest.java.OAuthFlowBCTest", "name": "OAuthFlowBCTest", "file_path": "src/test/java/org/openapitools/openapidiff/core/backcompat/OAuthFlowBCTest.java", "superclasses": "", "methods": ["[void]unchanged()", "[void]authorizationUrlChanged()", "[void]refreshUrlChanged()", "[void]tokenUrlChanged()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class OAuthFlowBCTest {\n  private final String BASE = \"bc_oauthflow_base.yaml\";\n\n  @Test\n  public void unchanged() {\n    assertSpecUnchanged(BASE, BASE);\n  }\n\n  @Test\n  public void authorizationUrlChanged() {\n    BackwardIncompatibleProp prop = SECURITY_SCHEME_OAUTH2_AUTH_URL_CHANGED;\n    assertSpecIncompatible(BASE, \"bc_oauthflow_authorization_url_changed.yaml\", prop);\n  }\n\n  @Test\n  public void refreshUrlChanged() {\n    BackwardIncompatibleProp prop = SECURITY_SCHEME_OAUTH2_REFRESH_URL_CHANGED;\n    assertSpecIncompatible(BASE, \"bc_oauthflow_refresh_url_changed.yaml\", prop);\n  }\n\n  @Test\n  public void tokenUrlChanged() {\n    BackwardIncompatibleProp prop = SECURITY_SCHEME_OAUTH2_TOKEN_URL_CHANGED;\n    assertSpecIncompatible(BASE, \"bc_oauthflow_token_url_changed.yaml\", prop);\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final String BASE = \"bc_oauthflow_base.yaml\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "BASE = \"bc_oauthflow_base.yaml\"", "syntax_pass": true}]}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/WriteOnlyBCTest.java.WriteOnlyBCTest", "name": "WriteOnlyBCTest", "file_path": "src/test/java/org/openapitools/openapidiff/core/backcompat/WriteOnlyBCTest.java", "superclasses": "", "methods": ["[void]unchanged()", "[void]changedButCompatible()", "[void]responseWriteOnlyIncreased()", "[void]responseWriteOnlyRequiredDecreased()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class WriteOnlyBCTest {\n  private final String BASE = \"bc_writeonly_base.yaml\";\n\n  @Test\n  public void unchanged() {\n    assertSpecUnchanged(BASE, BASE);\n  }\n\n  @Test\n  public void changedButCompatible() {\n    assertSpecChangedButCompatible(BASE, \"bc_writeonly_changed_but_compatible.yaml\");\n  }\n\n  @Test\n  public void responseWriteOnlyIncreased() {\n    BackwardIncompatibleProp prop = RESPONSE_WRITEONLY_INCREASED;\n    assertSpecIncompatible(BASE, \"bc_response_writeonly_increased.yaml\", prop);\n  }\n\n  @Test\n  public void responseWriteOnlyRequiredDecreased() {\n    BackwardIncompatibleProp prop = RESPONSE_WRITEONLY_REQUIRED_DECREASED;\n    // TODO: Document why desired or remove support (test added to avoid unintentional regression)\n    assertSpecIncompatible(BASE, \"bc_response_writeonly_required_decreased.yaml\", prop);\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final String BASE = \"bc_writeonly_base.yaml\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "BASE = \"bc_writeonly_base.yaml\"", "syntax_pass": true}]}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/OpenApiBCTest.java.OpenApiBCTest", "name": "OpenApiBCTest", "file_path": "src/test/java/org/openapitools/openapidiff/core/backcompat/OpenApiBCTest.java", "superclasses": "", "methods": ["[void]unchanged()", "[void]changedButCompatible()", "[void]endpointsDecreased()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class OpenApiBCTest {\n  private final String BASE = \"bc_openapi_base.yaml\";\n\n  @Test\n  public void unchanged() {\n    assertSpecUnchanged(BASE, BASE);\n  }\n\n  @Test\n  public void changedButCompatible() {\n    assertSpecChangedButCompatible(BASE, \"bc_openapi_changed_but_compatible.yaml\");\n  }\n\n  @Test\n  public void endpointsDecreased() {\n    BackwardIncompatibleProp prop = OPENAPI_ENDPOINTS_DECREASED;\n    assertSpecIncompatible(BASE, \"bc_openapi_endpoints_decreased.yaml\", prop);\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final String BASE = \"bc_openapi_base.yaml\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "BASE = \"bc_openapi_base.yaml\"", "syntax_pass": true}]}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/ParameterBCTest.java.ParameterBCTest", "name": "ParameterBCTest", "file_path": "src/test/java/org/openapitools/openapidiff/core/backcompat/ParameterBCTest.java", "superclasses": "", "methods": ["[void]unchanged()", "[void]changedButCompatible()", "[void]allowEmptyValueDecreased()", "[void]explodeChanged()", "[void]requiredIncreased()", "[void]styleChanged()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class ParameterBCTest {\n  private final String BASE = \"bc_request_param_base.yaml\";\n\n  @Test\n  public void unchanged() {\n    assertSpecUnchanged(BASE, BASE);\n  }\n\n  @Test\n  public void changedButCompatible() {\n    assertSpecChangedButCompatible(BASE, \"bc_request_param_changed_but_compatible.yaml\");\n  }\n\n  @Test\n  public void allowEmptyValueDecreased() {\n    BackwardIncompatibleProp prop = REQUEST_PARAM_ALLOWEMPTY_DECREASED;\n    assertSpecIncompatible(BASE, \"bc_request_param_allowemptyvalue_decreased.yaml\", prop);\n  }\n\n  @Test\n  public void explodeChanged() {\n    BackwardIncompatibleProp prop = REQUEST_PARAM_EXPLODE_CHANGED;\n    assertSpecIncompatible(BASE, \"bc_request_param_explode_changed.yaml\", prop);\n  }\n\n  @Test\n  public void requiredIncreased() {\n    BackwardIncompatibleProp prop = REQUEST_PARAMS_REQUIRED_INCREASED;\n    assertSpecIncompatible(BASE, \"bc_request_param_required_increased.yaml\", prop);\n  }\n\n  @Test\n  public void styleChanged() {\n    BackwardIncompatibleProp prop = REQUEST_PARAM_STYLE_CHANGED;\n    assertSpecIncompatible(BASE, \"bc_request_param_style_changed.yaml\", prop);\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final String BASE = \"bc_request_param_base.yaml\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "BASE = \"bc_request_param_base.yaml\"", "syntax_pass": true}]}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecurityRequirementsBCTest.java.SecurityRequirementsBCTest", "name": "SecurityRequirementsBCTest", "file_path": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecurityRequirementsBCTest.java", "superclasses": "", "methods": ["[void]unchanged()", "[void]changedButCompatible()", "[void]decreased()", "[void]schemeTypeChanged()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class SecurityRequirementsBCTest {\n  private final String BASE = \"bc_security_requirements_base.yaml\";\n\n  @Test\n  public void unchanged() {\n    assertSpecUnchanged(BASE, BASE);\n  }\n\n  @Test\n  public void changedButCompatible() {\n    assertSpecChangedButCompatible(BASE, \"bc_security_requirements_changed_but_compatible.yaml\");\n  }\n\n  // TODO: Dropping *all* security requirements should be compatible. Refactor or document\n  // reasoning. Context: OAS spec is clear that only one of the security requirement objects\n  // need to be satisfied so it makes sense why dropping one could break a client that may\n  // not yet support one of the remaining referenced security schemes. But dropping all\n  // requirements should be compatible.\n  @Test\n  public void decreased() {\n    BackwardIncompatibleProp prop = SECURITY_REQUIREMENTS_DECREASED;\n    assertSpecIncompatible(BASE, \"bc_security_requirements_decreased.yaml\", prop);\n  }\n\n  // TODO: A missing incompatible check seems to be if requirements increase from zero to 1 or more\n\n  @Test\n  public void schemeTypeChanged() {\n    assertOpenApiBackwardIncompatible(BASE, \"bc_security_requirements_scheme_type_changed.yaml\");\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final String BASE = \"bc_security_requirements_base.yaml\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "BASE = \"bc_security_requirements_base.yaml\"", "syntax_pass": true}]}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/RequiredBCTest.java.RequiredBCTest", "name": "RequiredBCTest", "file_path": "src/test/java/org/openapitools/openapidiff/core/backcompat/RequiredBCTest.java", "superclasses": "", "methods": ["[void]unchanged()", "[void]changedButCompatible()", "[void]requestRequiredIncreased()", "[void]responseRequiredDecreased()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class RequiredBCTest {\n\n  private final String BASE = \"bc_required_base.yaml\";\n\n  @Test\n  public void unchanged() {\n    assertSpecUnchanged(BASE, BASE);\n  }\n\n  @Test\n  public void changedButCompatible() {\n    assertSpecChangedButCompatible(BASE, \"bc_required_changed_but_compatible.yaml\");\n  }\n\n  @Test\n  public void requestRequiredIncreased() {\n    BackwardIncompatibleProp prop = REQUEST_REQUIRED_INCREASED;\n    assertSpecIncompatible(BASE, \"bc_request_required_increased.yaml\", prop);\n  }\n\n  @Test\n  public void responseRequiredDecreased() {\n    BackwardIncompatibleProp prop = RESPONSE_REQUIRED_DECREASED;\n    assertSpecIncompatible(BASE, \"bc_response_required_decreased.yaml\", prop);\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final String BASE = \"bc_required_base.yaml\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "BASE = \"bc_required_base.yaml\"", "syntax_pass": true}]}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/PathBCTest.java.PathBCTest", "name": "PathBCTest", "file_path": "src/test/java/org/openapitools/openapidiff/core/backcompat/PathBCTest.java", "superclasses": "", "methods": ["[void]unchanged()", "[void]changedButCompatible()", "[void]opsDecreased()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class PathBCTest {\n  private final String BASE = \"bc_path_base.yaml\";\n\n  @Test\n  public void unchanged() {\n    assertSpecUnchanged(BASE, BASE);\n  }\n\n  @Test\n  public void changedButCompatible() {\n    assertSpecChangedButCompatible(BASE, \"bc_path_changed_but_compatible.yaml\");\n  }\n\n  @Test\n  public void opsDecreased() {\n    BackwardIncompatibleProp prop = OPENAPI_ENDPOINTS_DECREASED;\n    assertSpecIncompatible(BASE, \"bc_path_ops_decreased.yaml\", prop);\n  }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final String BASE = \"bc_path_base.yaml\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "BASE = \"bc_path_base.yaml\"", "syntax_pass": true}]}]