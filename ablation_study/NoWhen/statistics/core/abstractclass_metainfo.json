[{"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedList.java.ChangedList", "name": "ChangedList", "file_path": "src/main/java/org/openapitools/openapidiff/core/model/ChangedList.java", "superclasses": "", "methods": ["[]ChangedList(List<T>,List<T>,DiffContext)", "[DiffResult]isChanged()", "[DiffResult]isItemsChanged()", "[DiffContext]getContext()", "[List<T>]getOldValue()", "[List<T>]getNewValue()", "[List<T>]getIncreased()", "[List<T>]getMissing()", "[List<T>]getShared()", "[ChangedList<T>]setContext(DiffContext)", "[ChangedList<T>]setOldValue(List<T>)", "[ChangedList<T>]setNewValue(List<T>)", "[ChangedList<T>]setIncreased(List<T>)", "[ChangedList<T>]setMissing(List<T>)", "[ChangedList<T>]setShared(List<T>)", "[boolean]equals(Object)", "[int]hashCode()", "[java.lang.String]toString()"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/model/ChangedList.java.ChangedList.[]ChangedList(List<T>,List<T>,DiffContext)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedList.java.ChangedList.[DiffResult]isChanged()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedList.java.ChangedList.[DiffResult]isItemsChanged()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedList.java.ChangedList.[DiffContext]getContext()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedList.java.ChangedList.[List<T>]getOldValue()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedList.java.ChangedList.[List<T>]getNewValue()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedList.java.ChangedList.[List<T>]getIncreased()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedList.java.ChangedList.[List<T>]getMissing()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedList.java.ChangedList.[List<T>]getShared()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedList.java.ChangedList.[ChangedList<T>]setContext(DiffContext)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedList.java.ChangedList.[ChangedList<T>]setOldValue(List<T>)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedList.java.ChangedList.[ChangedList<T>]setNewValue(List<T>)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedList.java.ChangedList.[ChangedList<T>]setIncreased(List<T>)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedList.java.ChangedList.[ChangedList<T>]setMissing(List<T>)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedList.java.ChangedList.[ChangedList<T>]setShared(List<T>)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedList.java.ChangedList.[boolean]equals(Object)", "src/main/java/org/openapitools/openapidiff/core/model/ChangedList.java.ChangedList.[int]hashCode()", "src/main/java/org/openapitools/openapidiff/core/model/ChangedList.java.ChangedList.[java.lang.String]toString()"], "overrides": null, "attributes": [{"original_string": "  public static class SimpleChangedList<T> extends ChangedList<T> {\n    public SimpleChangedList(List<T> oldValue, List<T> newValue) {\n      super(oldValue, newValue, null);\n    }\n\n    @Override\n    public DiffResult isItemsChanged() {\n      return DiffResult.UNKNOWN;\n    }\n  }", "definition": "  public static class SimpleChangedList<T> extends ChangedList<T>", "class_docstring": "", "name": "SimpleChangedList", "super_interfaces": [], "superclasses": "", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "fields": [], "classes": []}, "syntax_pass": true, "methods": [{"syntax_pass": true, "original_string": "    public SimpleChangedList(List<T> oldValue, List<T> newValue) {\n      super(oldValue, newValue, null);\n    }", "docstring": "", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "name": "SimpleChangedList", "params": [{"name": "oldValue", "type": "List<T>"}, {"name": "newValue", "type": "List<T>"}], "body": "                                                                 {\n      super(oldValue, newValue, null);\n    }", "signature": "public SimpleChangedList(List<T> oldValue, List<T> newValue)"}, {"syntax_pass": true, "original_string": "    @Override\n    public DiffResult isItemsChanged() {\n      return DiffResult.UNKNOWN;\n    }", "docstring": "", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "DiffResult", "classes": []}, "name": "isItemsChanged", "params": [], "body": "                                       {\n      return DiffResult.UNKNOWN;\n    }", "signature": "@Override\n    public DiffResult isItemsChanged()"}]}], "class_docstring": "", "original_string": "public abstract class ChangedList<T> implements Changed {\n  protected DiffContext context;\n  protected List<T> oldValue;\n  protected List<T> newValue;\n  private List<T> increased;\n  private List<T> missing;\n  private List<T> shared;\n\n  protected ChangedList(List<T> oldValue, List<T> newValue, DiffContext context) {\n    this.oldValue = Optional.ofNullable(oldValue).orElse(new ArrayList<>());\n    this.newValue = Optional.ofNullable(newValue).orElse(new ArrayList<>());\n    this.context = context;\n    this.shared = new ArrayList<>();\n    this.increased = new ArrayList<>();\n    this.missing = new ArrayList<>();\n  }\n\n  @Override\n  public DiffResult isChanged() {\n    if (missing.isEmpty() && increased.isEmpty()) {\n      return DiffResult.NO_CHANGES;\n    }\n    return isItemsChanged();\n  }\n\n  public abstract DiffResult isItemsChanged();\n\n  public static class SimpleChangedList<T> extends ChangedList<T> {\n    public SimpleChangedList(List<T> oldValue, List<T> newValue) {\n      super(oldValue, newValue, null);\n    }\n\n    @Override\n    public DiffResult isItemsChanged() {\n      return DiffResult.UNKNOWN;\n    }\n  }\n\n  public DiffContext getContext() {\n    return this.context;\n  }\n\n  public List<T> getOldValue() {\n    return this.oldValue;\n  }\n\n  public List<T> getNewValue() {\n    return this.newValue;\n  }\n\n  public List<T> getIncreased() {\n    return this.increased;\n  }\n\n  public List<T> getMissing() {\n    return this.missing;\n  }\n\n  public List<T> getShared() {\n    return this.shared;\n  }\n\n  public ChangedList<T> setContext(final DiffContext context) {\n    this.context = context;\n    return this;\n  }\n\n  public ChangedList<T> setOldValue(final List<T> oldValue) {\n    this.oldValue = oldValue;\n    return this;\n  }\n\n  public ChangedList<T> setNewValue(final List<T> newValue) {\n    this.newValue = newValue;\n    return this;\n  }\n\n  public ChangedList<T> setIncreased(final List<T> increased) {\n    this.increased = increased;\n    return this;\n  }\n\n  public ChangedList<T> setMissing(final List<T> missing) {\n    this.missing = missing;\n    return this;\n  }\n\n  public ChangedList<T> setShared(final List<T> shared) {\n    this.shared = shared;\n    return this;\n  }\n\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    ChangedList<?> that = (ChangedList<?>) o;\n    return Objects.equals(context, that.context)\n        && Objects.equals(oldValue, that.oldValue)\n        && Objects.equals(newValue, that.newValue)\n        && Objects.equals(increased, that.increased)\n        && Objects.equals(missing, that.missing)\n        && Objects.equals(shared, that.shared);\n  }\n\n  @Override\n  public int hashCode() {\n    return Objects.hash(context, oldValue, newValue, increased, missing, shared);\n  }\n\n  @java.lang.Override\n  public java.lang.String toString() {\n    return \"ChangedList(context=\"\n        + this.getContext()\n        + \", oldValue=\"\n        + this.getOldValue()\n        + \", newValue=\"\n        + this.getNewValue()\n        + \", increased=\"\n        + this.getIncreased()\n        + \", missing=\"\n        + this.getMissing()\n        + \", shared=\"\n        + this.getShared()\n        + \")\";\n  }\n}", "super_interfaces": ["Changed"], "fields": [{"attribute_expression": "protected DiffContext context;", "docstring": "", "modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "type": "DiffContext", "name": "context", "syntax_pass": true}, {"attribute_expression": "protected List<T> oldValue;", "docstring": "", "modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "type": "List<T>", "name": "oldValue", "syntax_pass": true}, {"attribute_expression": "protected List<T> newValue;", "docstring": "", "modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "type": "List<T>", "name": "newValue", "syntax_pass": true}, {"attribute_expression": "private List<T> increased;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "List<T>", "name": "increased", "syntax_pass": true}, {"attribute_expression": "private List<T> missing;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "List<T>", "name": "missing", "syntax_pass": true}, {"attribute_expression": "private List<T> shared;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "List<T>", "name": "shared", "syntax_pass": true}]}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/ReferenceDiffCache.java.ReferenceDiffCache", "name": "ReferenceDiffCache", "file_path": "src/main/java/org/openapitools/openapidiff/core/compare/ReferenceDiffCache.java", "superclasses": "", "methods": ["[]ReferenceDiffCache()", "[DeferredChanged<D>]getFromCache(CacheKey)", "[void]addToCache(CacheKey,DeferredChanged<D>)", "[DeferredChanged<D>]cachedDiff(HashSet<String>,C,C,String,String,DiffContext)", "[String]getRefKey(String,String)", "[DeferredChanged<D>]computeDiff(HashSet<String>,C,C,DiffContext)"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/compare/ReferenceDiffCache.java.ReferenceDiffCache.[]ReferenceDiffCache()", "src/main/java/org/openapitools/openapidiff/core/compare/ReferenceDiffCache.java.ReferenceDiffCache.[DeferredChanged<D>]getFromCache(CacheKey)", "src/main/java/org/openapitools/openapidiff/core/compare/ReferenceDiffCache.java.ReferenceDiffCache.[void]addToCache(CacheKey,DeferredChanged<D>)", "src/main/java/org/openapitools/openapidiff/core/compare/ReferenceDiffCache.java.ReferenceDiffCache.[DeferredChanged<D>]cachedDiff(HashSet<String>,C,C,String,String,DiffContext)", "src/main/java/org/openapitools/openapidiff/core/compare/ReferenceDiffCache.java.ReferenceDiffCache.[String]getRefKey(String,String)", "src/main/java/org/openapitools/openapidiff/core/compare/ReferenceDiffCache.java.ReferenceDiffCache.[DeferredChanged<D>]computeDiff(HashSet<String>,C,C,DiffContext)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public abstract class ReferenceDiffCache<C, D extends Changed> {\n  private final Map<CacheKey, DeferredChanged<D>> refDiffMap;\n\n  public ReferenceDiffCache() {\n    this.refDiffMap = new HashMap<>();\n  }\n\n  private DeferredChanged<D> getFromCache(CacheKey cacheKey) {\n    return refDiffMap.get(cacheKey);\n  }\n\n  private void addToCache(CacheKey cacheKey, DeferredChanged<D> changed) {\n    refDiffMap.put(cacheKey, changed);\n  }\n\n  public DeferredChanged<D> cachedDiff(\n      HashSet<String> refSet,\n      C left,\n      C right,\n      String leftRef,\n      String rightRef,\n      DiffContext context) {\n    boolean areBothRefParameters = leftRef != null && rightRef != null;\n    if (areBothRefParameters) {\n      CacheKey key = new CacheKey(leftRef, rightRef, context);\n      DeferredChanged<D> changedFromRef = getFromCache(key);\n      if (changedFromRef != null) {\n        return changedFromRef;\n      } else {\n        String refKey = getRefKey(leftRef, rightRef);\n        if (refSet.contains(refKey)) {\n          return RealizedChanged.empty();\n        } else {\n          refSet.add(refKey);\n          DeferredChanged<D> changed = computeDiff(refSet, left, right, context);\n          addToCache(key, changed);\n          refSet.remove(refKey);\n          return changed;\n        }\n      }\n    } else {\n      return computeDiff(refSet, left, right, context);\n    }\n  }\n\n  protected String getRefKey(String leftRef, String rightRef) {\n    return leftRef + \":\" + rightRef;\n  }\n\n  protected abstract DeferredChanged<D> computeDiff(\n      HashSet<String> refSet, C left, C right, DiffContext context);\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final Map<CacheKey, DeferredChanged<D>> refDiffMap;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Map<CacheKey, DeferredChanged<D>>", "name": "refDiffMap", "syntax_pass": true}]}]