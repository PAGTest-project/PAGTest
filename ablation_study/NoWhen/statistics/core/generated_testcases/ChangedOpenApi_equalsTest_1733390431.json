[{"strategy": "generate", "code": "\npackage org.openapitools.openapidiff.core.model;\n\nimport io.swagger.v3.oas.models.OpenAPI;\nimport org.junit.jupiter.api.Test;\nimport java.util.Collections;\nimport java.util.List;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\npublic class ChangedOpenApi_equalsTest {\n\n    @Test\n    public void testEquals_SameInstance() {\n        ChangedOpenApi changedOpenApi = new ChangedOpenApi(new OpenApiDiffOptions());\n        assertTrue(changedOpenApi.equals(changedOpenApi));\n    }\n\n    @Test\n    public void testEquals_NullObject() {\n        ChangedOpenApi changedOpenApi = new ChangedOpenApi(new OpenApiDiffOptions());\n        assertFalse(changedOpenApi.equals(null));\n    }\n\n    @Test\n    public void testEquals_DifferentClass() {\n        ChangedOpenApi changedOpenApi = new ChangedOpenApi(new OpenApiDiffOptions());\n        assertFalse(changedOpenApi.equals(new Object()));\n    }\n\n    @Test\n    public void testEquals_DifferentFields() {\n        OpenAPI oldSpec = new OpenAPI();\n        OpenAPI newSpec = new OpenAPI();\n        List<Endpoint> newEndpoints = Collections.emptyList();\n        List<Endpoint> missingEndpoints = Collections.emptyList();\n        List<ChangedOperation> changedOperations = Collections.emptyList();\n        ChangedExtensions changedExtensions = new ChangedExtensions(Collections.emptyMap(), Collections.emptyMap(), null);\n\n        ChangedOpenApi changedOpenApi1 = new ChangedOpenApi(new OpenApiDiffOptions())\n                .setOldSpecOpenApi(oldSpec)\n                .setNewSpecOpenApi(newSpec)\n                .setNewEndpoints(newEndpoints)\n                .setMissingEndpoints(missingEndpoints)\n                .setChangedOperations(changedOperations)\n                .setChangedExtensions(changedExtensions);\n\n        ChangedOpenApi changedOpenApi2 = new ChangedOpenApi(new OpenApiDiffOptions())\n                .setOldSpecOpenApi(oldSpec)\n                .setNewSpecOpenApi(newSpec)\n                .setNewEndpoints(newEndpoints)\n                .setMissingEndpoints(missingEndpoints)\n                .setChangedOperations(changedOperations)\n                .setChangedExtensions(changedExtensions);\n\n        assertTrue(changedOpenApi1.equals(changedOpenApi2));\n    }\n\n    @Test\n    public void testEquals_DifferentOldSpecOpenApi() {\n        OpenAPI oldSpec1 = new OpenAPI();\n        OpenAPI oldSpec2 = new OpenAPI();\n        OpenAPI newSpec = new OpenAPI();\n        List<Endpoint> newEndpoints = Collections.emptyList();\n        List<Endpoint> missingEndpoints = Collections.emptyList();\n        List<ChangedOperation> changedOperations = Collections.emptyList();\n        ChangedExtensions changedExtensions = new ChangedExtensions(Collections.emptyMap(), Collections.emptyMap(), null);\n\n        ChangedOpenApi changedOpenApi1 = new ChangedOpenApi(new OpenApiDiffOptions())\n                .setOldSpecOpenApi(oldSpec1)\n                .setNewSpecOpenApi(newSpec)\n                .setNewEndpoints(newEndpoints)\n                .setMissingEndpoints(missingEndpoints)\n                .setChangedOperations(changedOperations)\n                .setChangedExtensions(changedExtensions);\n\n        ChangedOpenApi changedOpenApi2 = new ChangedOpenApi(new OpenApiDiffOptions())\n                .setOldSpecOpenApi(oldSpec2)\n                .setNewSpecOpenApi(newSpec)\n                .setNewEndpoints(newEndpoints)\n                .setMissingEndpoints(missingEndpoints)\n                .setChangedOperations(changedOperations)\n                .setChangedExtensions(changedExtensions);\n\n        assertFalse(changedOpenApi1.equals(changedOpenApi2));\n    }\n}\n"}]