[{"strategy": "retry", "code": "\npackage org.openapitools.openapidiff.core.output;\n\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport java.io.OutputStreamWriter;\nimport java.io.IOException;\nimport org.openapitools.openapidiff.core.model.ChangedOpenApi;\nimport org.openapitools.openapidiff.core.model.Endpoint;\nimport org.openapitools.openapidiff.core.model.ChangedOperation;\nimport org.openapitools.openapidiff.core.exception.RendererException;\n\nimport java.util.List;\n\npublic class ConsoleRender_renderTest {\n\n    @Mock\n    private ChangedOpenApi diff;\n\n    @Mock\n    private OutputStreamWriter outputStreamWriter;\n\n    private ConsoleRender consoleRender;\n\n    @BeforeEach\n    public void setUp() {\n        MockitoAnnotations.openMocks(this);\n        consoleRender = new ConsoleRender();\n    }\n\n    @Test\n    public void testRenderUnchanged() throws IOException {\n        when(diff.isUnchanged()).thenReturn(true);\n\n        consoleRender.render(diff, outputStreamWriter);\n\n        verify(outputStreamWriter).append(\"No differences. Specifications are equivalents\");\n        verify(outputStreamWriter).close();\n    }\n\n    @Test\n    public void testRenderChanged() throws IOException {\n        when(diff.isUnchanged()).thenReturn(false);\n        when(diff.getNewSpecOpenApi()).thenReturn(mock(ChangedOpenApi.NewSpecOpenApi.class));\n        when(diff.getNewSpecOpenApi().getInfo()).thenReturn(mock(ChangedOpenApi.Info.class));\n        when(diff.getNewSpecOpenApi().getInfo().getTitle()).thenReturn(\"Test API\");\n        when(diff.getNewEndpoints()).thenReturn(mock(List.class));\n        when(diff.getMissingEndpoints()).thenReturn(mock(List.class));\n        when(diff.getDeprecatedEndpoints()).thenReturn(mock(List.class));\n        when(diff.getChangedOperations()).thenReturn(mock(List.class));\n        when(diff.isCompatible()).thenReturn(true);\n\n        consoleRender.render(diff, outputStreamWriter);\n\n        verify(outputStreamWriter).append(startsWith(\"Api Change Log\"));\n        verify(outputStreamWriter).append(contains(\"Test API\"));\n        verify(outputStreamWriter).append(contains(\"API changes are backward compatible\"));\n        verify(outputStreamWriter).close();\n    }\n\n    @Test\n    public void testRenderIOException() throws IOException {\n        when(diff.isUnchanged()).thenReturn(true);\n        doThrow(new IOException()).when(outputStreamWriter).close();\n\n        assertThrows(RendererException.class, () -> {\n            consoleRender.render(diff, outputStreamWriter);\n        });\n    }\n}\n"}]