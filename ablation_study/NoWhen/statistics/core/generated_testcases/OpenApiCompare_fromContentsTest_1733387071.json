[{"strategy": "retry", "code": "\npackage org.openapitools.openapidiff.core;\n\nimport io.swagger.v3.oas.models.OpenAPI;\nimport io.swagger.v3.parser.core.models.AuthorizationValue;\nimport org.junit.jupiter.api.Test;\nimport org.openapitools.openapidiff.core.compare.OpenApiDiffOptions;\nimport org.openapitools.openapidiff.core.model.ChangedOpenApi;\n\nimport java.util.Collections;\nimport java.util.List;\n\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\npublic class OpenApiCompare_fromContentsTest {\n\n    @Test\n    public void testFromContents() {\n        // Given\n        String oldContent = \"oldContent\";\n        String newContent = \"newContent\";\n        List<AuthorizationValue> auths = Collections.emptyList();\n        OpenApiDiffOptions options = OpenApiDiffOptions.builder().build();\n\n        OpenAPI mockOldSpec = mock(OpenAPI.class);\n        OpenAPI mockNewSpec = mock(OpenAPI.class);\n\n        when(OpenApiCompare.readContent(oldContent, auths)).thenReturn(mockOldSpec);\n        when(OpenApiCompare.readContent(newContent, auths)).thenReturn(mockNewSpec);\n\n        // When\n        ChangedOpenApi result = OpenApiCompare.fromContents(oldContent, newContent, auths, options);\n\n        // Then\n        assertNotNull(result);\n    }\n}\n"}]