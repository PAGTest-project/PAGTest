[{"strategy": "retry", "code": "\npackage org.openapitools.openapidiff.core.utils;\n\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\nimport org.openapitools.openapidiff.core.model.ChangedOpenApi;\nimport org.openapitools.openapidiff.core.output.Render;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.OutputStreamWriter;\nimport java.nio.file.Paths;\n\nimport static org.mockito.Mockito.*;\n\nclass FileUtils_writeToFileTest {\n\n    private static final Logger logger = LoggerFactory.getLogger(FileUtils_writeToFileTest.class);\n\n    @Test\n    void testWriteToFile_fileNameIsNull() {\n        FileUtils.writeToFile(mock(Render.class), mock(ChangedOpenApi.class), null);\n        // No exception should be thrown, and the method should return early\n    }\n\n    @Test\n    void testWriteToFile_fileNameIsEmpty() {\n        FileUtils.writeToFile(mock(Render.class), mock(ChangedOpenApi.class), \"\");\n        // No exception should be thrown, and the method should return early\n    }\n\n    @Test\n    void testWriteToFile_successfulWrite() throws IOException {\n        Render render = mock(Render.class);\n        ChangedOpenApi diff = mock(ChangedOpenApi.class);\n        String fileName = \"testFile.txt\";\n\n        FileOutputStream fileOutputStream = mock(FileOutputStream.class);\n        OutputStreamWriter outputStreamWriter = mock(OutputStreamWriter.class);\n\n        when(fileOutputStream.getChannel()).thenReturn(null); // Mocking to avoid actual file creation\n        whenNew(FileOutputStream.class).withArguments(Paths.get(fileName).toFile()).thenReturn(fileOutputStream);\n        whenNew(OutputStreamWriter.class).withArguments(fileOutputStream).thenReturn(outputStreamWriter);\n\n        FileUtils.writeToFile(render, diff, fileName);\n\n        verify(render).render(diff, outputStreamWriter);\n    }\n\n    @Test\n    void testWriteToFile_IOException() throws IOException {\n        Render render = mock(Render.class);\n        ChangedOpenApi diff = mock(ChangedOpenApi.class);\n        String fileName = \"testFile.txt\";\n\n        FileOutputStream fileOutputStream = mock(FileOutputStream.class);\n        OutputStreamWriter outputStreamWriter = mock(OutputStreamWriter.class);\n\n        when(fileOutputStream.getChannel()).thenReturn(null); // Mocking to avoid actual file creation\n        whenNew(FileOutputStream.class).withArguments(Paths.get(fileName).toFile()).thenReturn(fileOutputStream);\n        whenNew(OutputStreamWriter.class).withArguments(fileOutputStream).thenReturn(outputStreamWriter);\n\n        doThrow(new IOException(\"Mocked IOException\")).when(outputStreamWriter).close();\n\n        FileUtils.writeToFile(render, diff, fileName);\n\n        // Verify that the logger error method was called\n        verify(logger).error(anyString(), eq(fileName), any(IOException.class));\n    }\n}\n"}]