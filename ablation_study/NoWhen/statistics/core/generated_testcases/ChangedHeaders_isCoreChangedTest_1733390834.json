[{"strategy": "generate", "code": "\npackage org.openapitools.openapidiff.core.model;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport org.junit.jupiter.api.Test;\nimport io.swagger.v3.oas.models.headers.Header;\n\npublic class ChangedHeaders_isCoreChangedTest {\n\n    @Test\n    public void testIsCoreChanged_NoChanges() {\n        // Given\n        Map<String, Header> oldHeaders = new HashMap<>();\n        Map<String, Header> newHeaders = new HashMap<>();\n        DiffContext context = mock(DiffContext.class);\n        ChangedHeaders changedHeaders = new ChangedHeaders(oldHeaders, newHeaders, context);\n        changedHeaders.setIncreased(new HashMap<>()).setMissing(new HashMap<>());\n\n        // When\n        DiffResult result = changedHeaders.isCoreChanged();\n\n        // Then\n        assertEquals(DiffResult.NO_CHANGES, result);\n    }\n\n    @Test\n    public void testIsCoreChanged_Compatible() {\n        // Given\n        Map<String, Header> oldHeaders = new HashMap<>();\n        Map<String, Header> newHeaders = new HashMap<>();\n        DiffContext context = mock(DiffContext.class);\n        ChangedHeaders changedHeaders = new ChangedHeaders(oldHeaders, newHeaders, context);\n        Map<String, Header> increased = new HashMap<>();\n        increased.put(\"header1\", new Header());\n        changedHeaders.setIncreased(increased).setMissing(new HashMap<>());\n\n        // When\n        DiffResult result = changedHeaders.isCoreChanged();\n\n        // Then\n        assertEquals(DiffResult.COMPATIBLE, result);\n    }\n\n    @Test\n    public void testIsCoreChanged_Incompatible() {\n        // Given\n        Map<String, Header> oldHeaders = new HashMap<>();\n        Map<String, Header> newHeaders = new HashMap<>();\n        DiffContext context = mock(DiffContext.class);\n        when(RESPONSE_HEADERS_DECREASED.enabled(context)).thenReturn(true);\n        ChangedHeaders changedHeaders = new ChangedHeaders(oldHeaders, newHeaders, context);\n        Map<String, Header> missing = new HashMap<>();\n        missing.put(\"header1\", new Header());\n        changedHeaders.setIncreased(new HashMap<>()).setMissing(missing);\n\n        // When\n        DiffResult result = changedHeaders.isCoreChanged();\n\n        // Then\n        assertEquals(DiffResult.INCOMPATIBLE, result);\n    }\n}\n"}]