[{"uris": "src/test/java/org/openapitools/openapidiff/core/LargeSchemaTest.java.LargeSchemaTest.[void]assertOpenApiAreEquals(OpenAPI,OpenAPI)", "name": "assertOpenApiAreEquals", "arg_nums": 2, "params": [{"name": "oldSpec", "type": "OpenAPI"}, {"name": "newSpec", "type": "OpenAPI"}], "return_type": "void", "signature": "public static void assertOpenApiAreEquals(OpenAPI oldSpec, OpenAPI newSpec)", "original_string": "  public static void assertOpenApiAreEquals(OpenAPI oldSpec, OpenAPI newSpec) {\n    ChangedOpenApi changedOpenApi = OpenApiCompare.fromSpecifications(oldSpec, newSpec);\n    LOG.info(\"Result: {}\", changedOpenApi.isChanged().getValue());\n    assertThat(changedOpenApi.getNewEndpoints()).isEmpty();\n    assertThat(changedOpenApi.getMissingEndpoints()).isEmpty();\n    assertThat(changedOpenApi.getChangedOperations()).isEmpty();\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/LargeSchemaTest.java", "class_name": "LargeSchemaTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/LargeSchemaTest.java.LargeSchemaTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/LargeSchemaTest.java.LargeSchemaTest.[void]assertOpenApiBackwardIncompatible(OpenAPI,OpenAPI)", "name": "assertOpenApiBackwardIncompatible", "arg_nums": 2, "params": [{"name": "oldSpec", "type": "OpenAPI"}, {"name": "newSpec", "type": "OpenAPI"}], "return_type": "void", "signature": "public static void assertOpenApiBackwardIncompatible(OpenAPI oldSpec, OpenAPI newSpec)", "original_string": "  public static void assertOpenApiBackwardIncompatible(OpenAPI oldSpec, OpenAPI newSpec) {\n    ChangedOpenApi changedOpenApi = OpenApiCompare.fromSpecifications(oldSpec, newSpec);\n    LOG.info(\"Result: {}\", changedOpenApi.isChanged().getValue());\n    assertThat(changedOpenApi.isDifferent()).isTrue();\n    assertThat(changedOpenApi.isIncompatible()).isTrue();\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/LargeSchemaTest.java", "class_name": "LargeSchemaTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/LargeSchemaTest.java.LargeSchemaTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/LargeSchemaTest.java.LargeSchemaTest.[OpenAPI]largeGeneratedApi()", "name": "largeGeneratedApi", "arg_nums": 0, "params": [], "return_type": "OpenAPI", "signature": "public OpenAPI largeGeneratedApi()", "original_string": "  public OpenAPI largeGeneratedApi() {\n    final int modelCount = 200;\n    final int arrayCount = 50;\n    final int refPerModelCount = 5;\n    final int endpointCount = 20;\n\n    Random random = new Random();\n\n    OpenAPI api = new OpenAPI();\n    api.setPaths(new Paths());\n    api.setComponents(new Components());\n\n    // create 200 model schemas\n    Map<String, Schema> schemas = new LinkedHashMap<>();\n    api.getComponents().setSchemas(schemas);\n    for (int i = 0; i < modelCount; i++) {\n      ObjectSchema schema = new ObjectSchema();\n      schema.setProperties(new LinkedHashMap<>());\n      schema.getProperties().put(\"name\", new StringSchema());\n      schema.getProperties().put(\"description\", new StringSchema());\n      List<String> required = new ArrayList<>();\n      required.add(\"name\");\n      schema.setRequired(required);\n      schemas.put(modelName(i), schema);\n    }\n\n    // create 50 array schemas\n    for (int i = modelCount; i < modelCount + arrayCount; i++) {\n      ArraySchema arraySchema = new ArraySchema();\n      arraySchema.setItems(refSchema(i));\n      schemas.put(modelName(i), arraySchema);\n    }\n\n    // list of schema names\n\n    // Create cyclic properties on schemas, make the refs required\n    schemas.values().stream()\n        .filter(schema -> schema instanceof ObjectSchema)\n        .map(schema -> (ObjectSchema) schema)\n        .forEach(\n            schema -> {\n              for (int i = 0; i < refPerModelCount; i++) {\n                int schemaNumber = random.nextInt(modelCount + arrayCount);\n                String propertyName = \"refTo\" + schemaNumber;\n                schema.getProperties().put(propertyName, refSchema(schemaNumber));\n                schema.getRequired().add(propertyName);\n              }\n            });\n\n    // generated endpoints\n    for (int i = 0; i < endpointCount; i++) {\n      String path = \"/endpoint\" + i;\n      PathItem pathItem = new PathItem();\n      Operation operation = new Operation();\n      pathItem.post(operation);\n\n      operation.setRequestBody(\n          new RequestBody()\n              .content(\n                  new Content()\n                      .addMediaType(\n                          \"application/json\", new MediaType().schema(refSchema(i % modelCount)))));\n      ApiResponse responseOk =\n          new ApiResponses()\n              .put(\n                  \"200\",\n                  new ApiResponse()\n                      .content(\n                          new Content()\n                              .addMediaType(\n                                  \"application/json\",\n                                  new MediaType().schema(refSchema(i % modelCount)))));\n      ApiResponses responses = new ApiResponses();\n      responses.put(\"200\", responseOk);\n      operation.setResponses(responses);\n      api.getPaths().put(path, pathItem);\n    }\n\n    try {\n      LOG.info(\"Printing schema to target/large-api.yaml\");\n      Yaml.pretty().writeValue(new File(\"target/large-api.yaml\"), api);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    return api;\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/LargeSchemaTest.java", "class_name": "LargeSchemaTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/LargeSchemaTest.java.LargeSchemaTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "OpenAPI", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/LargeSchemaTest.java.LargeSchemaTest.[Schema]refSchema(int)", "name": "refSchema", "arg_nums": 1, "params": [{"name": "i", "type": "int"}], "return_type": "Schema", "signature": "private Schema refSchema(final int i)", "original_string": "  private Schema refSchema(final int i) {\n    String itemModelName = modelName(i);\n    Schema refSchema = new Schema();\n    refSchema.set$ref(\"#/components/schemas/\" + itemModelName);\n    return refSchema;\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/LargeSchemaTest.java", "class_name": "LargeSchemaTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/LargeSchemaTest.java.LargeSchemaTest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "Schema", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/LargeSchemaTest.java.LargeSchemaTest.[String]modelName(int)", "name": "modelName", "arg_nums": 1, "params": [{"name": "i", "type": "int"}], "return_type": "String", "signature": "private String modelName(final int i)", "original_string": "  private String modelName(final int i) {\n    return String.format(\"Model%03d\", i);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/LargeSchemaTest.java", "class_name": "LargeSchemaTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/LargeSchemaTest.java.LargeSchemaTest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/OpenApiDiffTest.java.OpenApiDiffTest.[OpenAPI]loadSpecFromFile(String)", "name": "loadSpecFromFile", "arg_nums": 1, "params": [{"name": "specFile", "type": "String"}], "return_type": "OpenAPI", "signature": "private static OpenAPI loadSpecFromFile(String specFile)", "original_string": "  private static OpenAPI loadSpecFromFile(String specFile) {\n    return PARSER.readLocation(specFile, null, new ParseOptions()).getOpenAPI();\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/OpenApiDiffTest.java", "class_name": "OpenApiDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/OpenApiDiffTest.java.OpenApiDiffTest", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "OpenAPI", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/TestUtils.java.TestUtils.[void]assertOpenApiAreEquals(String,String)", "name": "assertOpenApiAreEquals", "arg_nums": 2, "params": [{"name": "oldSpec", "type": "String"}, {"name": "newSpec", "type": "String"}], "return_type": "void", "signature": "public static void assertOpenApiAreEquals(String oldSpec, String newSpec)", "original_string": "  public static void assertOpenApiAreEquals(String oldSpec, String newSpec) {\n    ChangedOpenApi changedOpenApi = OpenApiCompare.fromLocations(oldSpec, newSpec);\n    LOG.info(\"Result: {}\", changedOpenApi.isChanged().getValue());\n    assertThat(changedOpenApi.getNewEndpoints()).isEmpty();\n    assertThat(changedOpenApi.getMissingEndpoints()).isEmpty();\n    assertThat(changedOpenApi.getChangedOperations()).isEmpty();\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/TestUtils.java", "class_name": "TestUtils", "class_uri": "src/test/java/org/openapitools/openapidiff/core/TestUtils.java.TestUtils", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/TestUtils.java.TestUtils.[void]assertOpenApiChangedEndpoints(String,String)", "name": "assertOpenApiChangedEndpoints", "arg_nums": 2, "params": [{"name": "oldSpec", "type": "String"}, {"name": "newSpec", "type": "String"}], "return_type": "void", "signature": "public static void assertOpenApiChangedEndpoints(String oldSpec, String newSpec)", "original_string": "  public static void assertOpenApiChangedEndpoints(String oldSpec, String newSpec) {\n    ChangedOpenApi changedOpenApi = OpenApiCompare.fromLocations(oldSpec, newSpec);\n    LOG.info(\"Result: {}\", changedOpenApi.isChanged().getValue());\n    assertThat(changedOpenApi.getNewEndpoints()).isEmpty();\n    assertThat(changedOpenApi.getMissingEndpoints()).isEmpty();\n    assertThat(changedOpenApi.getChangedOperations()).isNotEmpty();\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/TestUtils.java", "class_name": "TestUtils", "class_uri": "src/test/java/org/openapitools/openapidiff/core/TestUtils.java.TestUtils", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/TestUtils.java.TestUtils.[void]assertSpecUnchanged(String,String)", "name": "assertSpecUnchanged", "arg_nums": 2, "params": [{"name": "oldSpec", "type": "String"}, {"name": "newSpec", "type": "String"}], "return_type": "void", "signature": "public static void assertSpecUnchanged(String oldSpec, String newSpec)", "original_string": "  public static void assertSpecUnchanged(String oldSpec, String newSpec) {\n    ChangedOpenApi changedOpenApi = OpenApiCompare.fromLocations(oldSpec, newSpec);\n    LOG.info(\"Result: {}\", changedOpenApi.isChanged().getValue());\n    assertThat(changedOpenApi.isUnchanged()).isTrue();\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/TestUtils.java", "class_name": "TestUtils", "class_uri": "src/test/java/org/openapitools/openapidiff/core/TestUtils.java.TestUtils", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/TestUtils.java.TestUtils.[void]assertSpecChangedButCompatible(String,String)", "name": "assertSpecChangedButCompatible", "arg_nums": 2, "params": [{"name": "oldSpec", "type": "String"}, {"name": "newSpec", "type": "String"}], "return_type": "void", "signature": "public static void assertSpecChangedButCompatible(String oldSpec, String newSpec)", "original_string": "  public static void assertSpecChangedButCompatible(String oldSpec, String newSpec) {\n    ChangedOpenApi changedOpenApi = OpenApiCompare.fromLocations(oldSpec, newSpec);\n    DiffResult diffResult = changedOpenApi.isChanged();\n    LOG.info(\"Result: {}\", diffResult.getValue());\n    assertThat(diffResult.isDifferent()).isTrue();\n    assertThat(diffResult.isCompatible()).isTrue();\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/TestUtils.java", "class_name": "TestUtils", "class_uri": "src/test/java/org/openapitools/openapidiff/core/TestUtils.java.TestUtils", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/TestUtils.java.TestUtils.[void]assertSpecIncompatible(String,String,BackwardIncompatibleProp)", "name": "assertSpecIncompatible", "arg_nums": 3, "params": [{"name": "oldSpec", "type": "String"}, {"name": "newSpec", "type": "String"}, {"name": "prop", "type": "BackwardIncompatibleProp"}], "return_type": "void", "signature": "public static void assertSpecIncompatible(\n      String oldSpec, String newSpec, BackwardIncompatibleProp prop)", "original_string": "  public static void assertSpecIncompatible(\n      String oldSpec, String newSpec, BackwardIncompatibleProp prop) {\n    OpenApiDiffOptions.Builder builder = OpenApiDiffOptions.builder();\n    // Expect incompatible when BackwardIncompatibleProp enabled\n    builder.configProperty(prop.getPropertyName(), \"true\");\n    OpenApiDiffOptions optsIncompat = builder.build();\n    ChangedOpenApi apiIncompat = OpenApiCompare.fromLocations(oldSpec, newSpec, null, optsIncompat);\n    LOG.info(\"Result: {}\", apiIncompat.isChanged().getValue());\n    assertThat(apiIncompat.isIncompatible()).isTrue();\n    // Expect changed but compatible when BackwardIncompatibleProp disabled\n    builder.configProperty(prop.getPropertyName(), \"false\");\n    OpenApiDiffOptions optsCompat = builder.build();\n    ChangedOpenApi apiCompat = OpenApiCompare.fromLocations(oldSpec, newSpec, null, optsCompat);\n    LOG.info(\"Result: {}\", apiCompat.isChanged().getValue());\n    assertThat(apiCompat.isDifferent()).isTrue();\n    assertThat(apiCompat.isCompatible()).isTrue();\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/TestUtils.java", "class_name": "TestUtils", "class_uri": "src/test/java/org/openapitools/openapidiff/core/TestUtils.java.TestUtils", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/TestUtils.java.TestUtils.[void]assertOpenApiBackwardCompatible(String,String,boolean)", "name": "assertOpenApiBackwardCompatible", "arg_nums": 3, "params": [{"name": "oldSpec", "type": "String"}, {"name": "newSpec", "type": "String"}, {"name": "isDiff", "type": "boolean"}], "return_type": "void", "signature": "public static void assertOpenApiBackwardCompatible(\n      String oldSpec, String newSpec, boolean isDiff)", "original_string": "  public static void assertOpenApiBackwardCompatible(\n      String oldSpec, String newSpec, boolean isDiff) {\n    ChangedOpenApi changedOpenApi = OpenApiCompare.fromLocations(oldSpec, newSpec);\n    LOG.info(\"Result: {}\", changedOpenApi.isChanged().getValue());\n    assertThat(changedOpenApi.isCompatible()).isTrue();\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/TestUtils.java", "class_name": "TestUtils", "class_uri": "src/test/java/org/openapitools/openapidiff/core/TestUtils.java.TestUtils", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/TestUtils.java.TestUtils.[void]assertOpenApiBackwardIncompatible(String,String)", "name": "assertOpenApiBackwardIncompatible", "arg_nums": 2, "params": [{"name": "oldSpec", "type": "String"}, {"name": "newSpec", "type": "String"}], "return_type": "void", "signature": "public static void assertOpenApiBackwardIncompatible(String oldSpec, String newSpec)", "original_string": "  public static void assertOpenApiBackwardIncompatible(String oldSpec, String newSpec) {\n    ChangedOpenApi changedOpenApi = OpenApiCompare.fromLocations(oldSpec, newSpec);\n    LOG.info(\"Result: {}\", changedOpenApi.isChanged().getValue());\n    assertThat(changedOpenApi.isIncompatible()).isTrue();\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/TestUtils.java", "class_name": "TestUtils", "class_uri": "src/test/java/org/openapitools/openapidiff/core/TestUtils.java.TestUtils", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/utils/FileUtilsTest.java.FileUtilsTest.[void]setup()", "name": "setup", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n  void setup()", "original_string": "  @BeforeEach\n  void setup() {\n    changedOpenApi = new ChangedOpenApi(OpenApiDiffOptions.builder().build());\n    changedOpenApi.setChangedSchemas(Collections.emptyList());\n    changedOpenApi.setChangedOperations(Collections.emptyList());\n    changedOpenApi.setNewEndpoints(Collections.emptyList());\n    changedOpenApi.setMissingEndpoints(Collections.emptyList());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/utils/FileUtilsTest.java", "class_name": "FileUtilsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/utils/FileUtilsTest.java.FileUtilsTest", "attributes": {"modifiers": "@BeforeEach", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOpenApi_isCoreChangedTest.java.ChangedOpenApi_isCoreChangedTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n  public void setUp()", "original_string": "  @BeforeEach\n  public void setUp() {\n    options = OpenApiDiffOptions.builder().build();\n    changedOpenApi = new ChangedOpenApi(options);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOpenApi_isCoreChangedTest.java", "class_name": "ChangedOpenApi_isCoreChangedTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOpenApi_isCoreChangedTest.java.ChangedOpenApi_isCoreChangedTest", "attributes": {"modifiers": "@BeforeEach\n  public", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilderChangedTest.java.DeferredBuilderChangedTest.[void]beforeEach()", "name": "beforeEach", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n  public void beforeEach()", "original_string": "  @BeforeEach\n  public void beforeEach() {\n    whenSet = Optional.empty();\n    mappedValue = null;\n    chainedValue = Optional.empty();\n    changed = new PendingChanged<>();\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilderChangedTest.java", "class_name": "DeferredBuilderChangedTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilderChangedTest.java.DeferredBuilderChangedTest", "attributes": {"modifiers": "@BeforeEach\n  public", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilder_buildTest.java.DeferredBuilder_buildTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n  public void setUp()", "original_string": "  @BeforeEach\n  public void setUp() {\n    builder = new DeferredBuilder<>();\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilder_buildTest.java", "class_name": "DeferredBuilder_buildTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilder_buildTest.java.DeferredBuilder_buildTest", "attributes": {"modifiers": "@BeforeEach\n  public", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java.NumericRangeBCTest.[void]assertIncompatibleRequest(String)", "name": "assertIncompatibleRequest", "arg_nums": 1, "params": [{"name": "newSpec", "type": "String"}], "return_type": "void", "signature": "private void assertIncompatibleRequest(String newSpec)", "original_string": "  private void assertIncompatibleRequest(String newSpec) {\n    assertSpecIncompatible(BASE, newSpec, REQUEST_NUMERIC_RANGE_DECREASED);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java", "class_name": "NumericRangeBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java.NumericRangeBCTest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java.NumericRangeBCTest.[void]assertIncompatibleResponse(String)", "name": "assertIncompatibleResponse", "arg_nums": 1, "params": [{"name": "newSpec", "type": "String"}], "return_type": "void", "signature": "private void assertIncompatibleResponse(String newSpec)", "original_string": "  private void assertIncompatibleResponse(String newSpec) {\n    assertSpecIncompatible(BASE, newSpec, RESPONSE_NUMERIC_RANGE_INCREASED);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java", "class_name": "NumericRangeBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java.NumericRangeBCTest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/OpenApiCompare.java.OpenApiCompare.[]OpenApiCompare()", "name": "OpenApiCompare", "arg_nums": 0, "params": [], "return_type": "", "signature": "private OpenApiCompare()", "original_string": "  private OpenApiCompare() {}", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/OpenApiCompare.java", "class_name": "OpenApiCompare", "class_uri": "src/main/java/org/openapitools/openapidiff/core/OpenApiCompare.java.OpenApiCompare", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/OpenApiCompare.java.OpenApiCompare.[ChangedOpenApi]fromContents(String,String)", "name": "fromContents", "arg_nums": 2, "params": [{"name": "oldContent", "type": "String"}, {"name": "newContent", "type": "String"}], "return_type": "ChangedOpenApi", "signature": "public static ChangedOpenApi fromContents(String oldContent, String newContent)", "original_string": "  public static ChangedOpenApi fromContents(String oldContent, String newContent) {\n    return fromContents(oldContent, newContent, null);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/OpenApiCompare.java", "class_name": "OpenApiCompare", "class_uri": "src/main/java/org/openapitools/openapidiff/core/OpenApiCompare.java.OpenApiCompare", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "ChangedOpenApi", "classes": []}, "docstring": "\ncompare two openapi doc\n\n@param oldContent old api-doc location:Json or Http\n@param newContent new api-doc location:Json or Http\n@return Comparison result\n"}, {"uris": "src/main/java/org/openapitools/openapidiff/core/OpenApiCompare.java.OpenApiCompare.[ChangedOpenApi]fromContents(String,String,List<AuthorizationValue>)", "name": "fromContents", "arg_nums": 3, "params": [{"name": "oldContent", "type": "String"}, {"name": "newContent", "type": "String"}, {"name": "auths", "type": "List<AuthorizationValue>"}], "return_type": "ChangedOpenApi", "signature": "public static ChangedOpenApi fromContents(\n      String oldContent, String newContent, List<AuthorizationValue> auths)", "original_string": "  public static ChangedOpenApi fromContents(\n      String oldContent, String newContent, List<AuthorizationValue> auths) {\n    return fromContents(oldContent, newContent, auths, OpenApiDiffOptions.builder().build());\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/OpenApiCompare.java", "class_name": "OpenApiCompare", "class_uri": "src/main/java/org/openapitools/openapidiff/core/OpenApiCompare.java.OpenApiCompare", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "ChangedOpenApi", "classes": []}, "docstring": "\ncompare two openapi doc\n\n@param oldContent old api-doc location:Json or Http\n@param newContent new api-doc location:Json or Http\n@param auths\n@return Comparison result\n"}, {"uris": "src/main/java/org/openapitools/openapidiff/core/OpenApiCompare.java.OpenApiCompare.[ChangedOpenApi]fromContents(String,String,List<AuthorizationValue>,OpenApiDiffOptions)", "name": "fromContents", "arg_nums": 4, "params": [{"name": "oldContent", "type": "String"}, {"name": "newContent", "type": "String"}, {"name": "auths", "type": "List<AuthorizationValue>"}, {"name": "options", "type": "OpenApiDiffOptions"}], "return_type": "ChangedOpenApi", "signature": "public static ChangedOpenApi fromContents(\n      String oldContent,\n      String newContent,\n      List<AuthorizationValue> auths,\n      OpenApiDiffOptions options)", "original_string": "  public static ChangedOpenApi fromContents(\n      String oldContent,\n      String newContent,\n      List<AuthorizationValue> auths,\n      OpenApiDiffOptions options) {\n    return fromSpecifications(\n        readContent(oldContent, auths), readContent(newContent, auths), options);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/OpenApiCompare.java", "class_name": "OpenApiCompare", "class_uri": "src/main/java/org/openapitools/openapidiff/core/OpenApiCompare.java.OpenApiCompare", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "ChangedOpenApi", "classes": []}, "docstring": "\ncompare two openapi doc\n\n@param oldContent old api-doc location:Json or Http\n@param newContent new api-doc location:Json or Http\n@param auths\n@param options\n@return Comparison result\n"}, {"uris": "src/main/java/org/openapitools/openapidiff/core/OpenApiCompare.java.OpenApiCompare.[ChangedOpenApi]fromFiles(File,File)", "name": "fromFiles", "arg_nums": 2, "params": [{"name": "oldFile", "type": "File"}, {"name": "newFile", "type": "File"}], "return_type": "ChangedOpenApi", "signature": "public static ChangedOpenApi fromFiles(File oldFile, File newFile)", "original_string": "  public static ChangedOpenApi fromFiles(File oldFile, File newFile) {\n    return fromFiles(oldFile, newFile, null);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/OpenApiCompare.java", "class_name": "OpenApiCompare", "class_uri": "src/main/java/org/openapitools/openapidiff/core/OpenApiCompare.java.OpenApiCompare", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "ChangedOpenApi", "classes": []}, "docstring": "\ncompare two openapi doc\n\n@param oldFile old api-doc file\n@param newFile new api-doc file\n@return Comparison result\n"}, {"uris": "src/main/java/org/openapitools/openapidiff/core/OpenApiCompare.java.OpenApiCompare.[ChangedOpenApi]fromFiles(File,File,List<AuthorizationValue>)", "name": "fromFiles", "arg_nums": 3, "params": [{"name": "oldFile", "type": "File"}, {"name": "newFile", "type": "File"}, {"name": "auths", "type": "List<AuthorizationValue>"}], "return_type": "ChangedOpenApi", "signature": "public static ChangedOpenApi fromFiles(\n      File oldFile, File newFile, List<AuthorizationValue> auths)", "original_string": "  public static ChangedOpenApi fromFiles(\n      File oldFile, File newFile, List<AuthorizationValue> auths) {\n    return fromFiles(oldFile, newFile, auths, OpenApiDiffOptions.builder().build());\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/OpenApiCompare.java", "class_name": "OpenApiCompare", "class_uri": "src/main/java/org/openapitools/openapidiff/core/OpenApiCompare.java.OpenApiCompare", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "ChangedOpenApi", "classes": []}, "docstring": "\ncompare two openapi doc\n\n@param oldFile old api-doc file\n@param newFile new api-doc file\n@param auths\n@return Comparison result\n"}, {"uris": "src/main/java/org/openapitools/openapidiff/core/OpenApiCompare.java.OpenApiCompare.[ChangedOpenApi]fromFiles(File,File,List<AuthorizationValue>,OpenApiDiffOptions)", "name": "fromFiles", "arg_nums": 4, "params": [{"name": "oldFile", "type": "File"}, {"name": "newFile", "type": "File"}, {"name": "auths", "type": "List<AuthorizationValue>"}, {"name": "options", "type": "OpenApiDiffOptions"}], "return_type": "ChangedOpenApi", "signature": "public static ChangedOpenApi fromFiles(\n      File oldFile, File newFile, List<AuthorizationValue> auths, OpenApiDiffOptions options)", "original_string": "  public static ChangedOpenApi fromFiles(\n      File oldFile, File newFile, List<AuthorizationValue> auths, OpenApiDiffOptions options) {\n    return fromLocations(oldFile.getAbsolutePath(), newFile.getAbsolutePath(), auths, options);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/OpenApiCompare.java", "class_name": "OpenApiCompare", "class_uri": "src/main/java/org/openapitools/openapidiff/core/OpenApiCompare.java.OpenApiCompare", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "ChangedOpenApi", "classes": []}, "docstring": "\ncompare two openapi doc\n\n@param oldFile old api-doc file\n@param newFile new api-doc file\n@param auths\n@param options\n@return Comparison result\n"}, {"uris": "src/main/java/org/openapitools/openapidiff/core/OpenApiCompare.java.OpenApiCompare.[ChangedOpenApi]fromLocations(String,String)", "name": "fromLocations", "arg_nums": 2, "params": [{"name": "oldLocation", "type": "String"}, {"name": "newLocation", "type": "String"}], "return_type": "ChangedOpenApi", "signature": "public static ChangedOpenApi fromLocations(String oldLocation, String newLocation)", "original_string": "  public static ChangedOpenApi fromLocations(String oldLocation, String newLocation) {\n    return fromLocations(oldLocation, newLocation, null);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/OpenApiCompare.java", "class_name": "OpenApiCompare", "class_uri": "src/main/java/org/openapitools/openapidiff/core/OpenApiCompare.java.OpenApiCompare", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "ChangedOpenApi", "classes": []}, "docstring": "\ncompare two openapi doc\n\n@param oldLocation old api-doc location (local or http)\n@param newLocation new api-doc location (local or http)\n@return Comparison result\n"}, {"uris": "src/main/java/org/openapitools/openapidiff/core/OpenApiCompare.java.OpenApiCompare.[ChangedOpenApi]fromLocations(String,String,List<AuthorizationValue>)", "name": "fromLocations", "arg_nums": 3, "params": [{"name": "oldLocation", "type": "String"}, {"name": "newLocation", "type": "String"}, {"name": "auths", "type": "List<AuthorizationValue>"}], "return_type": "ChangedOpenApi", "signature": "public static ChangedOpenApi fromLocations(\n      String oldLocation, String newLocation, List<AuthorizationValue> auths)", "original_string": "  public static ChangedOpenApi fromLocations(\n      String oldLocation, String newLocation, List<AuthorizationValue> auths) {\n    return fromLocations(oldLocation, newLocation, auths, OpenApiDiffOptions.builder().build());\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/OpenApiCompare.java", "class_name": "OpenApiCompare", "class_uri": "src/main/java/org/openapitools/openapidiff/core/OpenApiCompare.java.OpenApiCompare", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "ChangedOpenApi", "classes": []}, "docstring": "\ncompare two openapi doc\n\n@param oldLocation old api-doc location (local or http)\n@param newLocation new api-doc location (local or http)\n@param auths\n@return Comparison result\n"}, {"uris": "src/main/java/org/openapitools/openapidiff/core/OpenApiCompare.java.OpenApiCompare.[ChangedOpenApi]fromLocations(String,String,List<AuthorizationValue>,OpenApiDiffOptions)", "name": "fromLocations", "arg_nums": 4, "params": [{"name": "oldLocation", "type": "String"}, {"name": "newLocation", "type": "String"}, {"name": "auths", "type": "List<AuthorizationValue>"}, {"name": "options", "type": "OpenApiDiffOptions"}], "return_type": "ChangedOpenApi", "signature": "public static ChangedOpenApi fromLocations(\n      String oldLocation,\n      String newLocation,\n      List<AuthorizationValue> auths,\n      OpenApiDiffOptions options)", "original_string": "  public static ChangedOpenApi fromLocations(\n      String oldLocation,\n      String newLocation,\n      List<AuthorizationValue> auths,\n      OpenApiDiffOptions options) {\n    return fromSpecifications(\n        readLocation(oldLocation, auths), readLocation(newLocation, auths), options);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/OpenApiCompare.java", "class_name": "OpenApiCompare", "class_uri": "src/main/java/org/openapitools/openapidiff/core/OpenApiCompare.java.OpenApiCompare", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "ChangedOpenApi", "classes": []}, "docstring": "\ncompare two openapi doc\n\n@param oldLocation old api-doc location (local or http)\n@param newLocation new api-doc location (local or http)\n@param auths\n@param options\n@return Comparison result\n"}, {"uris": "src/main/java/org/openapitools/openapidiff/core/OpenApiCompare.java.OpenApiCompare.[ChangedOpenApi]fromSpecifications(OpenAPI,OpenAPI)", "name": "fromSpecifications", "arg_nums": 2, "params": [{"name": "oldSpec", "type": "OpenAPI"}, {"name": "newSpec", "type": "OpenAPI"}], "return_type": "ChangedOpenApi", "signature": "public static ChangedOpenApi fromSpecifications(OpenAPI oldSpec, OpenAPI newSpec)", "original_string": "  public static ChangedOpenApi fromSpecifications(OpenAPI oldSpec, OpenAPI newSpec) {\n    return fromSpecifications(oldSpec, newSpec, OpenApiDiffOptions.builder().build());\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/OpenApiCompare.java", "class_name": "OpenApiCompare", "class_uri": "src/main/java/org/openapitools/openapidiff/core/OpenApiCompare.java.OpenApiCompare", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "ChangedOpenApi", "classes": []}, "docstring": "\ncompare two openapi doc\n\n@param oldSpec old api-doc specification\n@param newSpec new api-doc specification\n@return Comparison result\n"}, {"uris": "src/main/java/org/openapitools/openapidiff/core/OpenApiCompare.java.OpenApiCompare.[ChangedOpenApi]fromSpecifications(OpenAPI,OpenAPI,OpenApiDiffOptions)", "name": "fromSpecifications", "arg_nums": 3, "params": [{"name": "oldSpec", "type": "OpenAPI"}, {"name": "newSpec", "type": "OpenAPI"}, {"name": "options", "type": "OpenApiDiffOptions"}], "return_type": "ChangedOpenApi", "signature": "public static ChangedOpenApi fromSpecifications(\n      OpenAPI oldSpec, OpenAPI newSpec, OpenApiDiffOptions options)", "original_string": "  public static ChangedOpenApi fromSpecifications(\n      OpenAPI oldSpec, OpenAPI newSpec, OpenApiDiffOptions options) {\n    return OpenApiDiff.compare(notNull(oldSpec, \"old\"), notNull(newSpec, \"new\"), options);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/OpenApiCompare.java", "class_name": "OpenApiCompare", "class_uri": "src/main/java/org/openapitools/openapidiff/core/OpenApiCompare.java.OpenApiCompare", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "ChangedOpenApi", "classes": []}, "docstring": "\ncompare two openapi doc\n\n@param oldSpec old api-doc specification\n@param newSpec new api-doc specification\n@param options\n@return Comparison result\n"}, {"uris": "src/main/java/org/openapitools/openapidiff/core/OpenApiCompare.java.OpenApiCompare.[OpenAPI]notNull(OpenAPI,String)", "name": "notNull", "arg_nums": 2, "params": [{"name": "spec", "type": "OpenAPI"}, {"name": "type", "type": "String"}], "return_type": "OpenAPI", "signature": "private static OpenAPI notNull(OpenAPI spec, String type)", "original_string": "  private static OpenAPI notNull(OpenAPI spec, String type) {\n    if (spec == null) {\n      throw new RuntimeException(String.format(\"Cannot read %s OpenAPI spec\", type));\n    }\n    return spec;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/OpenApiCompare.java", "class_name": "OpenApiCompare", "class_uri": "src/main/java/org/openapitools/openapidiff/core/OpenApiCompare.java.OpenApiCompare", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "OpenAPI", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/OpenApiCompare.java.OpenApiCompare.[OpenAPI]readContent(String,List<AuthorizationValue>)", "name": "readContent", "arg_nums": 2, "params": [{"name": "content", "type": "String"}, {"name": "auths", "type": "List<AuthorizationValue>"}], "return_type": "OpenAPI", "signature": "private static OpenAPI readContent(String content, List<AuthorizationValue> auths)", "original_string": "  private static OpenAPI readContent(String content, List<AuthorizationValue> auths) {\n    return PARSER.readContents(content, auths, OPTIONS).getOpenAPI();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/OpenApiCompare.java", "class_name": "OpenApiCompare", "class_uri": "src/main/java/org/openapitools/openapidiff/core/OpenApiCompare.java.OpenApiCompare", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "OpenAPI", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/OpenApiCompare.java.OpenApiCompare.[OpenAPI]readLocation(String,List<AuthorizationValue>)", "name": "readLocation", "arg_nums": 2, "params": [{"name": "location", "type": "String"}, {"name": "auths", "type": "List<AuthorizationValue>"}], "return_type": "OpenAPI", "signature": "private static OpenAPI readLocation(String location, List<AuthorizationValue> auths)", "original_string": "  private static OpenAPI readLocation(String location, List<AuthorizationValue> auths) {\n    return PARSER.readLocation(location, auths, OPTIONS).getOpenAPI();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/OpenApiCompare.java", "class_name": "OpenApiCompare", "class_uri": "src/main/java/org/openapitools/openapidiff/core/OpenApiCompare.java.OpenApiCompare", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "OpenAPI", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[void]render(ChangedOpenApi,OutputStreamWriter)", "name": "render", "arg_nums": 2, "params": [{"name": "diff", "type": "ChangedOpenApi"}, {"name": "outputStreamWriter", "type": "OutputStreamWriter"}], "return_type": "void", "signature": "public void render(ChangedOpenApi diff, OutputStreamWriter outputStreamWriter)", "original_string": "  public void render(ChangedOpenApi diff, OutputStreamWriter outputStreamWriter) {\n    this.diff = diff;\n    this.handledSchemas.clear();\n    listEndpoints(\"What's New\", diff.getNewEndpoints(), outputStreamWriter);\n    listEndpoints(\"What's Deleted\", diff.getMissingEndpoints(), outputStreamWriter);\n    listEndpoints(\"What's Deprecated\", diff.getDeprecatedEndpoints(), outputStreamWriter);\n    listEndpoints(diff.getChangedOperations(), outputStreamWriter);\n    try {\n      outputStreamWriter.close();\n    } catch (IOException e) {\n      throw new RendererException(e);\n    }\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java", "class_name": "MarkdownRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]sectionTitle(String)", "name": "sectionTitle", "arg_nums": 1, "params": [{"name": "title", "type": "String"}], "return_type": "String", "signature": "protected String sectionTitle(String title)", "original_string": "  protected String sectionTitle(String title) {\n    return H4 + title + '\\n' + HR + '\\n';\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java", "class_name": "MarkdownRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[void]listEndpoints(String,List<Endpoint>,OutputStreamWriter)", "name": "listEndpoints", "arg_nums": 3, "params": [{"name": "title", "type": "String"}, {"name": "endpoints", "type": "List<Endpoint>"}, {"name": "outputStreamWriter", "type": "OutputStreamWriter"}], "return_type": "void", "signature": "protected void listEndpoints(\n      String title, List<Endpoint> endpoints, OutputStreamWriter outputStreamWriter)", "original_string": "  protected void listEndpoints(\n      String title, List<Endpoint> endpoints, OutputStreamWriter outputStreamWriter) {\n    if (null == endpoints || endpoints.isEmpty()) {\n      return;\n    }\n    safelyAppend(outputStreamWriter, sectionTitle(title));\n    endpoints.stream()\n        .map(e -> itemEndpoint(e.getMethod().toString(), e.getPathUrl(), e.getSummary()))\n        .forEach(csq -> safelyAppend(outputStreamWriter, csq));\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java", "class_name": "MarkdownRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]itemEndpoint(String,String,String)", "name": "itemEndpoint", "arg_nums": 3, "params": [{"name": "method", "type": "String"}, {"name": "path", "type": "String"}, {"name": "summary", "type": "String"}], "return_type": "String", "signature": "protected String itemEndpoint(String method, String path, String summary)", "original_string": "  protected String itemEndpoint(String method, String path, String summary) {\n    return H5 + CODE + method + CODE + \" \" + path + \"\\n\\n\" + metadata(summary) + \"\\n\";\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java", "class_name": "MarkdownRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]itemEndpoint(String,String,ChangedMetadata)", "name": "itemEndpoint", "arg_nums": 3, "params": [{"name": "method", "type": "String"}, {"name": "path", "type": "String"}, {"name": "summary", "type": "ChangedMetadata"}], "return_type": "String", "signature": "protected String itemEndpoint(String method, String path, ChangedMetadata summary)", "original_string": "  protected String itemEndpoint(String method, String path, ChangedMetadata summary) {\n    return H5 + CODE + method + CODE + \" \" + path + \"\\n\\n\" + metadata(\"summary\", summary) + \"\\n\";\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java", "class_name": "MarkdownRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]titleH5(String)", "name": "titleH5", "arg_nums": 1, "params": [{"name": "title", "type": "String"}], "return_type": "String", "signature": "protected String titleH5(String title)", "original_string": "  protected String titleH5(String title) {\n    return H6 + title + '\\n';\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java", "class_name": "MarkdownRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[void]listEndpoints(List<ChangedOperation>,OutputStreamWriter)", "name": "listEndpoints", "arg_nums": 2, "params": [{"name": "changedOperations", "type": "List<ChangedOperation>"}, {"name": "outputStreamWriter", "type": "OutputStreamWriter"}], "return_type": "void", "signature": "protected void listEndpoints(\n      List<ChangedOperation> changedOperations, OutputStreamWriter outputStreamWriter)", "original_string": "  protected void listEndpoints(\n      List<ChangedOperation> changedOperations, OutputStreamWriter outputStreamWriter) {\n    if (null == changedOperations || changedOperations.isEmpty()) {\n      return;\n    }\n    safelyAppend(outputStreamWriter, sectionTitle(\"What's Changed\"));\n    changedOperations.forEach(\n        operation -> {\n          safelyAppend(\n              outputStreamWriter,\n              itemEndpoint(\n                  operation.getHttpMethod().toString(),\n                  operation.getPathUrl(),\n                  operation.getSummary()));\n          if (result(operation.getParameters()).isDifferent()) {\n            safelyAppend(outputStreamWriter, titleH5(\"Parameters:\"));\n            safelyAppend(outputStreamWriter, parameters(operation.getParameters()));\n          }\n          if (operation.resultRequestBody().isDifferent()) {\n            safelyAppend(outputStreamWriter, titleH5(\"Request:\"));\n            safelyAppend(\n                outputStreamWriter,\n                metadata(\"Description\", operation.getRequestBody().getDescription()));\n            safelyAppend(outputStreamWriter, bodyContent(operation.getRequestBody().getContent()));\n          }\n          if (operation.resultApiResponses().isDifferent()) {\n            safelyAppend(outputStreamWriter, titleH5(\"Return Type:\"));\n            safelyAppend(outputStreamWriter, responses(operation.getApiResponses()));\n          }\n        });\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java", "class_name": "MarkdownRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]responses(ChangedApiResponse)", "name": "responses", "arg_nums": 1, "params": [{"name": "changedApiResponse", "type": "ChangedApiResponse"}], "return_type": "String", "signature": "protected String responses(ChangedApiResponse changedApiResponse)", "original_string": "  protected String responses(ChangedApiResponse changedApiResponse) {\n    StringBuilder sb = new StringBuilder(\"\\n\");\n    sb.append(listResponse(\"New response\", changedApiResponse.getIncreased()));\n    sb.append(listResponse(\"Deleted response\", changedApiResponse.getMissing()));\n    changedApiResponse.getChanged().entrySet().stream()\n        .map(e -> this.itemResponse(e.getKey(), e.getValue()))\n        .forEach(sb::append);\n    return sb.toString();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java", "class_name": "MarkdownRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]listResponse(String,Map<String, ApiResponse>)", "name": "listResponse", "arg_nums": 2, "params": [{"name": "title", "type": "String"}, {"name": "responses", "type": "Map<String, ApiResponse>"}], "return_type": "String", "signature": "protected String listResponse(String title, Map<String, ApiResponse> responses)", "original_string": "  protected String listResponse(String title, Map<String, ApiResponse> responses) {\n    StringBuilder sb = new StringBuilder();\n    responses.entrySet().stream()\n        .map(e -> this.itemResponse(title, e.getKey(), e.getValue()))\n        .forEach(sb::append);\n    return sb.toString();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java", "class_name": "MarkdownRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]itemResponse(String,String,ApiResponse)", "name": "itemResponse", "arg_nums": 3, "params": [{"name": "title", "type": "String"}, {"name": "code", "type": "String"}, {"name": "response", "type": "ApiResponse"}], "return_type": "String", "signature": "protected String itemResponse(String title, String code, ApiResponse response)", "original_string": "  protected String itemResponse(String title, String code, ApiResponse response) {\n    return this.itemResponse(title, code, response.getDescription());\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java", "class_name": "MarkdownRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]itemResponse(String,ChangedResponse)", "name": "itemResponse", "arg_nums": 2, "params": [{"name": "code", "type": "String"}, {"name": "response", "type": "ChangedResponse"}], "return_type": "String", "signature": "protected String itemResponse(String code, ChangedResponse response)", "original_string": "  protected String itemResponse(String code, ChangedResponse response) {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\n        this.itemResponse(\n            \"Changed response\",\n            code,\n            null == response.getNewApiResponse()\n                ? \"\"\n                : response.getNewApiResponse().getDescription()));\n    sb.append(headers(response.getHeaders()));\n    if (response.getContent() != null) {\n      sb.append(this.bodyContent(LI, response.getContent()));\n    }\n    return sb.toString();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java", "class_name": "MarkdownRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]itemResponse(String,String,String)", "name": "itemResponse", "arg_nums": 3, "params": [{"name": "title", "type": "String"}, {"name": "code", "type": "String"}, {"name": "description", "type": "String"}], "return_type": "String", "signature": "protected String itemResponse(String title, String code, String description)", "original_string": "  protected String itemResponse(String title, String code, String description) {\n    StringBuilder sb = new StringBuilder();\n    String status = \"\";\n    if (!code.equals(\"default\") && !code.matches(\"[1-5]XX\")) {\n      status = HttpStatus.getReasonPhrase(Integer.parseInt(code));\n    }\n    sb.append(format(\"%s : **%s %s**\\n\", title, code, status));\n    sb.append(metadata(description));\n    return sb.toString();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java", "class_name": "MarkdownRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]headers(ChangedHeaders)", "name": "headers", "arg_nums": 1, "params": [{"name": "headers", "type": "ChangedHeaders"}], "return_type": "String", "signature": "protected String headers(ChangedHeaders headers)", "original_string": "  protected String headers(ChangedHeaders headers) {\n    StringBuilder sb = new StringBuilder();\n    if (headers != null) {\n      sb.append(listHeader(\"New header\", headers.getIncreased()))\n          .append(listHeader(\"Deleted header\", headers.getMissing()));\n      headers.getChanged().entrySet().stream()\n          .map(e -> this.itemHeader(e.getKey(), e.getValue()))\n          .forEach(sb::append);\n    }\n    return sb.toString();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java", "class_name": "MarkdownRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]listHeader(String,Map<String, Header>)", "name": "listHeader", "arg_nums": 2, "params": [{"name": "title", "type": "String"}, {"name": "headers", "type": "Map<String, Header>"}], "return_type": "String", "signature": "protected String listHeader(String title, Map<String, Header> headers)", "original_string": "  protected String listHeader(String title, Map<String, Header> headers) {\n    StringBuilder sb = new StringBuilder();\n    headers.entrySet().stream()\n        .map(e -> this.itemHeader(title, e.getKey(), e.getValue()))\n        .forEach(sb::append);\n    return sb.toString();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java", "class_name": "MarkdownRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]itemHeader(String,String,Header)", "name": "itemHeader", "arg_nums": 3, "params": [{"name": "title", "type": "String"}, {"name": "name", "type": "String"}, {"name": "header", "type": "Header"}], "return_type": "String", "signature": "protected String itemHeader(String title, String name, Header header)", "original_string": "  protected String itemHeader(String title, String name, Header header) {\n    return this.itemHeader(title, name, header.getDescription());\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java", "class_name": "MarkdownRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]itemHeader(String,ChangedHeader)", "name": "itemHeader", "arg_nums": 2, "params": [{"name": "code", "type": "String"}, {"name": "header", "type": "ChangedHeader"}], "return_type": "String", "signature": "protected String itemHeader(String code, ChangedHeader header)", "original_string": "  protected String itemHeader(String code, ChangedHeader header) {\n    return this.itemHeader(\n        \"Changed header\",\n        code,\n        null == header.getNewHeader() ? \"\" : header.getNewHeader().getDescription());\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java", "class_name": "MarkdownRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]itemHeader(String,String,String)", "name": "itemHeader", "arg_nums": 3, "params": [{"name": "title", "type": "String"}, {"name": "mediaType", "type": "String"}, {"name": "description", "type": "String"}], "return_type": "String", "signature": "protected String itemHeader(String title, String mediaType, String description)", "original_string": "  protected String itemHeader(String title, String mediaType, String description) {\n    return format(\"%s : `%s`\\n\\n\", title, mediaType) + metadata(description) + '\\n';\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java", "class_name": "MarkdownRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]bodyContent(String,ChangedContent)", "name": "bodyContent", "arg_nums": 2, "params": [{"name": "prefix", "type": "String"}, {"name": "changedContent", "type": "ChangedContent"}], "return_type": "String", "signature": "protected String bodyContent(String prefix, ChangedContent changedContent)", "original_string": "  protected String bodyContent(String prefix, ChangedContent changedContent) {\n    if (changedContent == null) {\n      return \"\";\n    }\n    StringBuilder sb = new StringBuilder(\"\\n\");\n    sb.append(listContent(prefix, \"New content type\", changedContent.getIncreased()));\n    sb.append(listContent(prefix, \"Deleted content type\", changedContent.getMissing()));\n    final int deepness;\n    if (StringUtils.isNotBlank(prefix)) {\n      deepness = 1;\n    } else {\n      deepness = 0;\n    }\n    changedContent.getChanged().entrySet().stream()\n        .map(e -> this.itemContent(deepness, e.getKey(), e.getValue()))\n        .forEach(e -> sb.append(prefix).append(e));\n    return sb.toString();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java", "class_name": "MarkdownRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]bodyContent(ChangedContent)", "name": "bodyContent", "arg_nums": 1, "params": [{"name": "changedContent", "type": "ChangedContent"}], "return_type": "String", "signature": "protected String bodyContent(ChangedContent changedContent)", "original_string": "  protected String bodyContent(ChangedContent changedContent) {\n    return bodyContent(\"\", changedContent);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java", "class_name": "MarkdownRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]listContent(String,String,Map<String, MediaType>)", "name": "listContent", "arg_nums": 3, "params": [{"name": "prefix", "type": "String"}, {"name": "title", "type": "String"}, {"name": "mediaTypes", "type": "Map<String, MediaType>"}], "return_type": "String", "signature": "protected String listContent(String prefix, String title, Map<String, MediaType> mediaTypes)", "original_string": "  protected String listContent(String prefix, String title, Map<String, MediaType> mediaTypes) {\n    StringBuilder sb = new StringBuilder();\n    mediaTypes.entrySet().stream()\n        .map(e -> this.itemContent(title, e.getKey(), e.getValue()))\n        .forEach(e -> sb.append(prefix).append(e));\n    return sb.toString();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java", "class_name": "MarkdownRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]itemContent(String,String)", "name": "itemContent", "arg_nums": 2, "params": [{"name": "title", "type": "String"}, {"name": "mediaType", "type": "String"}], "return_type": "String", "signature": "protected String itemContent(String title, String mediaType)", "original_string": "  protected String itemContent(String title, String mediaType) {\n    return format(\"%s : `%s`\\n\\n\", title, mediaType);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java", "class_name": "MarkdownRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]itemContent(String,String,MediaType)", "name": "itemContent", "arg_nums": 3, "params": [{"name": "title", "type": "String"}, {"name": "mediaType", "type": "String"}, {"name": "content", "type": "MediaType"}], "return_type": "String", "signature": "protected String itemContent(String title, String mediaType, MediaType content)", "original_string": "  protected String itemContent(String title, String mediaType, MediaType content) {\n    return itemContent(title, mediaType);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java", "class_name": "MarkdownRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]itemContent(int,String,ChangedMediaType)", "name": "itemContent", "arg_nums": 3, "params": [{"name": "deepness", "type": "int"}, {"name": "mediaType", "type": "String"}, {"name": "content", "type": "ChangedMediaType"}], "return_type": "String", "signature": "protected String itemContent(int deepness, String mediaType, ChangedMediaType content)", "original_string": "  protected String itemContent(int deepness, String mediaType, ChangedMediaType content) {\n    return itemContent(\"Changed content type\", mediaType) + schema(deepness, content.getSchema());\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java", "class_name": "MarkdownRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]schema(ChangedSchema)", "name": "schema", "arg_nums": 1, "params": [{"name": "schema", "type": "ChangedSchema"}], "return_type": "String", "signature": "protected String schema(ChangedSchema schema)", "original_string": "  protected String schema(ChangedSchema schema) {\n    return schema(1, schema);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java", "class_name": "MarkdownRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]oneOfSchema(int,ChangedOneOfSchema,String)", "name": "oneOfSchema", "arg_nums": 3, "params": [{"name": "deepness", "type": "int"}, {"name": "schema", "type": "ChangedOneOfSchema"}, {"name": "discriminator", "type": "String"}], "return_type": "String", "signature": "protected String oneOfSchema(int deepness, ChangedOneOfSchema schema, String discriminator)", "original_string": "  protected String oneOfSchema(int deepness, ChangedOneOfSchema schema, String discriminator) {\n    StringBuilder sb = new StringBuilder();\n    schema\n        .getMissing()\n        .keySet()\n        .forEach(\n            key -> sb.append(format(\"%sDeleted '%s' %s\\n\", indent(deepness), key, discriminator)));\n    schema\n        .getIncreased()\n        .forEach(\n            (key, sub) ->\n                sb.append(format(\"%sAdded '%s' %s:\\n\", indent(deepness), key, discriminator))\n                    .append(schema(deepness, sub, schema.getContext())));\n    schema\n        .getChanged()\n        .forEach(\n            (key, sub) ->\n                sb.append(format(\"%sUpdated `%s` %s:\\n\", indent(deepness), key, discriminator))\n                    .append(schema(deepness, sub)));\n    return sb.toString();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java", "class_name": "MarkdownRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]required(int,String,List<String>)", "name": "required", "arg_nums": 3, "params": [{"name": "deepness", "type": "int"}, {"name": "title", "type": "String"}, {"name": "required", "type": "List<String>"}], "return_type": "String", "signature": "protected String required(int deepness, String title, List<String> required)", "original_string": "  protected String required(int deepness, String title, List<String> required) {\n    StringBuilder sb = new StringBuilder();\n    if (!required.isEmpty()) {\n      sb.append(format(\"%s%s:\\n\", indent(deepness), title));\n      required.forEach(s -> sb.append(format(\"%s- `%s`\\n\", indent(deepness), s)));\n      sb.append(\"\\n\");\n    }\n    return sb.toString();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java", "class_name": "MarkdownRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]schema(int,ChangedSchema)", "name": "schema", "arg_nums": 2, "params": [{"name": "deepness", "type": "int"}, {"name": "schema", "type": "ChangedSchema"}], "return_type": "String", "signature": "protected String schema(int deepness, ChangedSchema schema)", "original_string": "  protected String schema(int deepness, ChangedSchema schema) {\n    StringBuilder sb = new StringBuilder();\n    if (schema.isDiscriminatorPropertyChanged()) {\n      LOGGER.debug(\"Discriminator property changed\");\n    }\n    if (schema.getOneOfSchema() != null) {\n      String discriminator =\n          schema.getNewSchema().getDiscriminator() != null\n              ? schema.getNewSchema().getDiscriminator().getPropertyName()\n              : \"\";\n      sb.append(oneOfSchema(deepness, schema.getOneOfSchema(), discriminator));\n    }\n    if (schema.getRequired() != null) {\n      sb.append(required(deepness, \"New required properties\", schema.getRequired().getIncreased()));\n      sb.append(required(deepness, \"New optional properties\", schema.getRequired().getMissing()));\n    }\n    if (schema.getItems() != null) {\n      sb.append(items(deepness, schema.getItems()));\n    }\n    sb.append(listDiff(deepness, \"enum\", schema.getEnumeration()));\n    sb.append(\n        properties(\n            deepness,\n            \"Added property\",\n            schema.getIncreasedProperties(),\n            true,\n            schema.getContext()));\n    sb.append(\n        properties(\n            deepness,\n            \"Deleted property\",\n            schema.getMissingProperties(),\n            false,\n            schema.getContext()));\n    schema\n        .getChangedProperties()\n        .forEach((name, property) -> sb.append(property(deepness, name, property)));\n    return sb.toString();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java", "class_name": "MarkdownRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]schema(int,ComposedSchema,DiffContext)", "name": "schema", "arg_nums": 3, "params": [{"name": "deepness", "type": "int"}, {"name": "schema", "type": "ComposedSchema"}, {"name": "context", "type": "DiffContext"}], "return_type": "String", "signature": "protected String schema(int deepness, ComposedSchema schema, DiffContext context)", "original_string": "  protected String schema(int deepness, ComposedSchema schema, DiffContext context) {\n    StringBuilder sb = new StringBuilder();\n    if (schema.getAllOf() != null) {\n      LOGGER.debug(\"All of schema\");\n      schema.getAllOf().stream()\n          .map(this::resolve)\n          .forEach(composedChild -> sb.append(schema(deepness, composedChild, context)));\n    }\n    if (schema.getOneOf() != null) {\n      LOGGER.debug(\"One of schema\");\n      sb.append(format(\"%sOne of:\\n\\n\", indent(deepness)));\n      schema.getOneOf().stream()\n          .map(this::resolve)\n          .forEach(composedChild -> sb.append(schema(deepness + 1, composedChild, context)));\n    }\n    return sb.toString();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java", "class_name": "MarkdownRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]schema(int,Schema,DiffContext)", "name": "schema", "arg_nums": 3, "params": [{"name": "deepness", "type": "int"}, {"name": "schema", "type": "Schema"}, {"name": "context", "type": "DiffContext"}], "return_type": "String", "signature": "protected String schema(int deepness, Schema schema, DiffContext context)", "original_string": "  protected String schema(int deepness, Schema schema, DiffContext context) {\n    if (handledSchemas.contains(schema)) return \"\";\n    handledSchemas.add(schema);\n    StringBuilder sb = new StringBuilder();\n    sb.append(listItem(deepness, \"Enum\", schema.getEnum()));\n    sb.append(properties(deepness, \"Property\", schema.getProperties(), true, context));\n    if (schema instanceof ComposedSchema) {\n      sb.append(schema(deepness, (ComposedSchema) schema, context));\n    } else if (schema instanceof ArraySchema) {\n      sb.append(items(deepness, resolve(((ArraySchema) schema).getItems()), context));\n    }\n    return sb.toString();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java", "class_name": "MarkdownRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]items(int,ChangedSchema)", "name": "items", "arg_nums": 2, "params": [{"name": "deepness", "type": "int"}, {"name": "schema", "type": "ChangedSchema"}], "return_type": "String", "signature": "protected String items(int deepness, ChangedSchema schema)", "original_string": "  protected String items(int deepness, ChangedSchema schema) {\n    StringBuilder sb = new StringBuilder();\n    String type = type(schema.getNewSchema());\n    if (schema.isChangedType()) {\n      type = type(schema.getOldSchema()) + \" -> \" + type(schema.getNewSchema());\n    }\n    sb.append(items(deepness, \"Changed items\", type, schema.getNewSchema().getDescription()));\n    sb.append(schema(deepness, schema));\n    return sb.toString();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java", "class_name": "MarkdownRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]items(int,Schema<?>,DiffContext)", "name": "items", "arg_nums": 3, "params": [{"name": "deepness", "type": "int"}, {"name": "schema", "type": "Schema<?>"}, {"name": "context", "type": "DiffContext"}], "return_type": "String", "signature": "protected String items(int deepness, Schema<?> schema, DiffContext context)", "original_string": "  protected String items(int deepness, Schema<?> schema, DiffContext context) {\n    return items(deepness, \"Items\", type(schema), schema.getDescription())\n        + schema(deepness, schema, context);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java", "class_name": "MarkdownRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]items(int,String,String,String)", "name": "items", "arg_nums": 4, "params": [{"name": "deepness", "type": "int"}, {"name": "title", "type": "String"}, {"name": "type", "type": "String"}, {"name": "description", "type": "String"}], "return_type": "String", "signature": "protected String items(int deepness, String title, String type, String description)", "original_string": "  protected String items(int deepness, String title, String type, String description) {\n    return format(\n        \"%s%s (%s):\" + \"\\n%s\\n\",\n        indent(deepness), title, type, metadata(indent(deepness + 1), description));\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java", "class_name": "MarkdownRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]properties(int,String,Map<String, Schema<?>>,boolean,DiffContext)", "name": "properties", "arg_nums": 5, "params": [{"name": "deepness", "type": "int"}, {"name": "title", "type": "String"}, {"name": "properties", "type": "Map<String, Schema<?>>"}, {"name": "showContent", "type": "boolean"}, {"name": "context", "type": "DiffContext"}], "return_type": "String", "signature": "protected String properties(\n      final int deepness,\n      String title,\n      Map<String, Schema<?>> properties,\n      boolean showContent,\n      DiffContext context)", "original_string": "  protected String properties(\n      final int deepness,\n      String title,\n      Map<String, Schema<?>> properties,\n      boolean showContent,\n      DiffContext context) {\n    StringBuilder sb = new StringBuilder();\n    if (properties != null) {\n      properties.forEach(\n          (key, value) -> {\n            sb.append(resolveProperty(deepness, value, key, title));\n            if (showContent) {\n              sb.append(schema(deepness + 1, resolve(value), context));\n            }\n          });\n    }\n    return sb.toString();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java", "class_name": "MarkdownRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]resolveProperty(int,Schema<?>,String,String)", "name": "resolveProperty", "arg_nums": 4, "params": [{"name": "deepness", "type": "int"}, {"name": "value", "type": "Schema<?>"}, {"name": "key", "type": "String"}, {"name": "title", "type": "String"}], "return_type": "String", "signature": "private String resolveProperty(int deepness, Schema<?> value, String key, String title)", "original_string": "  private String resolveProperty(int deepness, Schema<?> value, String key, String title) {\n    try {\n      return property(deepness, title, key, resolve(value));\n    } catch (Exception e) {\n      return property(deepness, title, key, type(value), \"\");\n    }\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java", "class_name": "MarkdownRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]property(int,String,ChangedSchema)", "name": "property", "arg_nums": 3, "params": [{"name": "deepness", "type": "int"}, {"name": "name", "type": "String"}, {"name": "schema", "type": "ChangedSchema"}], "return_type": "String", "signature": "protected String property(int deepness, String name, ChangedSchema schema)", "original_string": "  protected String property(int deepness, String name, ChangedSchema schema) {\n    StringBuilder sb = new StringBuilder();\n    String type = type(schema.getNewSchema());\n    if (schema.isChangedType()) {\n      type = type(schema.getOldSchema()) + \" -> \" + type(schema.getNewSchema());\n    }\n    sb.append(\n        property(deepness, \"Changed property\", name, type, schema.getNewSchema().getDescription()));\n    sb.append(schema(++deepness, schema));\n    return sb.toString();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java", "class_name": "MarkdownRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]property(int,String,String,Schema<?>)", "name": "property", "arg_nums": 4, "params": [{"name": "deepness", "type": "int"}, {"name": "title", "type": "String"}, {"name": "name", "type": "String"}, {"name": "schema", "type": "Schema<?>"}], "return_type": "String", "signature": "protected String property(int deepness, String title, String name, Schema<?> schema)", "original_string": "  protected String property(int deepness, String title, String name, Schema<?> schema) {\n    return property(deepness, title, name, type(schema), schema.getDescription());\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java", "class_name": "MarkdownRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]property(int,String,String,String,String)", "name": "property", "arg_nums": 5, "params": [{"name": "deepness", "type": "int"}, {"name": "title", "type": "String"}, {"name": "name", "type": "String"}, {"name": "type", "type": "String"}, {"name": "description", "type": "String"}], "return_type": "String", "signature": "protected String property(\n      int deepness, String title, String name, String type, String description)", "original_string": "  protected String property(\n      int deepness, String title, String name, String type, String description) {\n    return format(\n        \"%s* %s `%s` (%s)\\n%s\\n\",\n        indent(deepness), title, name, type, metadata(indent(deepness + 1), description));\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java", "class_name": "MarkdownRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]listDiff(int,String,ChangedList<?>)", "name": "listDiff", "arg_nums": 3, "params": [{"name": "deepness", "type": "int"}, {"name": "name", "type": "String"}, {"name": "listDiff", "type": "ChangedList<?>"}], "return_type": "String", "signature": "protected String listDiff(int deepness, String name, ChangedList<?> listDiff)", "original_string": "  protected String listDiff(int deepness, String name, ChangedList<?> listDiff) {\n    if (listDiff == null) {\n      return \"\";\n    }\n    return listItem(deepness, \"Added \" + name, listDiff.getIncreased())\n        + listItem(deepness, \"Removed \" + name, listDiff.getMissing());\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java", "class_name": "MarkdownRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]listItem(int,String,List<T>)", "name": "listItem", "arg_nums": 3, "params": [{"name": "deepness", "type": "int"}, {"name": "name", "type": "String"}, {"name": "list", "type": "List<T>"}], "return_type": "String", "signature": "protected <T> String listItem(int deepness, String name, List<T> list)", "original_string": "  protected <T> String listItem(int deepness, String name, List<T> list) {\n    StringBuilder sb = new StringBuilder();\n    if (list != null && !list.isEmpty()) {\n      sb.append(format(\"%s%s value%s:\\n\\n\", indent(deepness), name, list.size() > 1 ? \"s\" : \"\"));\n      list.forEach(p -> sb.append(format(\"%s* `%s`\\n\", indent(deepness), p)));\n    }\n    return sb.toString();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java", "class_name": "MarkdownRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]parameters(ChangedParameters)", "name": "parameters", "arg_nums": 1, "params": [{"name": "changedParameters", "type": "ChangedParameters"}], "return_type": "String", "signature": "protected String parameters(ChangedParameters changedParameters)", "original_string": "  protected String parameters(ChangedParameters changedParameters) {\n    List<ChangedParameter> changed = changedParameters.getChanged();\n    StringBuilder sb = new StringBuilder(\"\\n\");\n    sb.append(listParameter(\"Added\", changedParameters.getIncreased()))\n        .append(listParameter(\"Deleted\", changedParameters.getMissing()));\n    changed.stream().map(this::itemParameter).forEach(sb::append);\n    return sb.toString();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java", "class_name": "MarkdownRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]listParameter(String,List<Parameter>)", "name": "listParameter", "arg_nums": 2, "params": [{"name": "title", "type": "String"}, {"name": "parameters", "type": "List<Parameter>"}], "return_type": "String", "signature": "protected String listParameter(String title, List<Parameter> parameters)", "original_string": "  protected String listParameter(String title, List<Parameter> parameters) {\n    StringBuilder sb = new StringBuilder();\n    parameters.stream().map(p -> itemParameter(title, p)).forEach(sb::append);\n    return sb.toString();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java", "class_name": "MarkdownRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]itemParameter(String,Parameter)", "name": "itemParameter", "arg_nums": 2, "params": [{"name": "title", "type": "String"}, {"name": "parameter", "type": "Parameter"}], "return_type": "String", "signature": "protected String itemParameter(String title, Parameter parameter)", "original_string": "  protected String itemParameter(String title, Parameter parameter) {\n    return this.itemParameter(\n        title, parameter.getName(), parameter.getIn(), parameter.getDescription());\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java", "class_name": "MarkdownRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]itemParameter(String,String,String,String)", "name": "itemParameter", "arg_nums": 4, "params": [{"name": "title", "type": "String"}, {"name": "name", "type": "String"}, {"name": "in", "type": "String"}, {"name": "description", "type": "String"}], "return_type": "String", "signature": "protected String itemParameter(String title, String name, String in, String description)", "original_string": "  protected String itemParameter(String title, String name, String in, String description) {\n    return format(\"%s: \", title)\n        + code(name)\n        + \" in \"\n        + code(in)\n        + '\\n'\n        + metadata(description)\n        + '\\n';\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java", "class_name": "MarkdownRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]itemParameter(ChangedParameter)", "name": "itemParameter", "arg_nums": 1, "params": [{"name": "param", "type": "ChangedParameter"}], "return_type": "String", "signature": "protected String itemParameter(ChangedParameter param)", "original_string": "  protected String itemParameter(ChangedParameter param) {\n    Parameter rightParam = param.getNewParameter();\n    if (param.isDeprecated()) {\n      return itemParameter(\n          \"Deprecated\", rightParam.getName(), rightParam.getIn(), rightParam.getDescription());\n    }\n    return itemParameter(\n        \"Changed\", rightParam.getName(), rightParam.getIn(), rightParam.getDescription());\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java", "class_name": "MarkdownRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]code(String)", "name": "code", "arg_nums": 1, "params": [{"name": "string", "type": "String"}], "return_type": "String", "signature": "protected String code(String string)", "original_string": "  protected String code(String string) {\n    return CODE + string + CODE;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java", "class_name": "MarkdownRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]metadata(String,ChangedMetadata)", "name": "metadata", "arg_nums": 2, "params": [{"name": "name", "type": "String"}, {"name": "changedMetadata", "type": "ChangedMetadata"}], "return_type": "String", "signature": "protected String metadata(String name, ChangedMetadata changedMetadata)", "original_string": "  protected String metadata(String name, ChangedMetadata changedMetadata) {\n    return metadata(\"\", name, changedMetadata);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java", "class_name": "MarkdownRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]metadata(String,String,ChangedMetadata)", "name": "metadata", "arg_nums": 3, "params": [{"name": "beginning", "type": "String"}, {"name": "name", "type": "String"}, {"name": "changedMetadata", "type": "ChangedMetadata"}], "return_type": "String", "signature": "protected String metadata(String beginning, String name, ChangedMetadata changedMetadata)", "original_string": "  protected String metadata(String beginning, String name, ChangedMetadata changedMetadata) {\n    if (changedMetadata == null) {\n      return \"\";\n    }\n    if (!isUnchanged(changedMetadata) && showChangedMetadata) {\n      return format(\n          \"Changed %s:\\n%s\\nto:\\n%s\\n\\n\",\n          name,\n          metadata(beginning, changedMetadata.getLeft()),\n          metadata(beginning, changedMetadata.getRight()));\n    } else {\n      return metadata(beginning, name, changedMetadata.getRight());\n    }\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java", "class_name": "MarkdownRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]metadata(String)", "name": "metadata", "arg_nums": 1, "params": [{"name": "metadata", "type": "String"}], "return_type": "String", "signature": "protected String metadata(String metadata)", "original_string": "  protected String metadata(String metadata) {\n    return metadata(\"\", metadata);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java", "class_name": "MarkdownRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]metadata(String,String,String)", "name": "metadata", "arg_nums": 3, "params": [{"name": "beginning", "type": "String"}, {"name": "name", "type": "String"}, {"name": "metadata", "type": "String"}], "return_type": "String", "signature": "protected String metadata(String beginning, String name, String metadata)", "original_string": "  protected String metadata(String beginning, String name, String metadata) {\n    if (StringUtils.isBlank(metadata)) {\n      return \"\";\n    }\n    return blockquote(beginning, metadata);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java", "class_name": "MarkdownRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]metadata(String,String)", "name": "metadata", "arg_nums": 2, "params": [{"name": "beginning", "type": "String"}, {"name": "metadata", "type": "String"}], "return_type": "String", "signature": "protected String metadata(String beginning, String metadata)", "original_string": "  protected String metadata(String beginning, String metadata) {\n    if (StringUtils.isBlank(metadata)) {\n      return \"\";\n    }\n    return blockquote(beginning, metadata);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java", "class_name": "MarkdownRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]blockquote(String)", "name": "blockquote", "arg_nums": 1, "params": [{"name": "beginning", "type": "String"}], "return_type": "String", "signature": "protected String blockquote(String beginning)", "original_string": "  protected String blockquote(String beginning) {\n    return beginning + BLOCKQUOTE;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java", "class_name": "MarkdownRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]blockquote(String,String)", "name": "blockquote", "arg_nums": 2, "params": [{"name": "beginning", "type": "String"}, {"name": "text", "type": "String"}], "return_type": "String", "signature": "protected String blockquote(String beginning, String text)", "original_string": "  protected String blockquote(String beginning, String text) {\n    String blockquote = blockquote(beginning);\n    return blockquote + text.trim().replace(\"\\n\", \"\\n\" + blockquote) + \"\\n\\n\";\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java", "class_name": "MarkdownRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]type(Schema<?>)", "name": "type", "arg_nums": 1, "params": [{"name": "schema", "type": "Schema<?>"}], "return_type": "String", "signature": "protected String type(Schema<?> schema)", "original_string": "  protected String type(Schema<?> schema) {\n    String result = \"object\";\n    if (schema instanceof ArraySchema) {\n      result = \"array\";\n    } else if (schema.getType() != null) {\n      result = schema.getType();\n    }\n    return result;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java", "class_name": "MarkdownRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[String]indent(int)", "name": "indent", "arg_nums": 1, "params": [{"name": "deepness", "type": "int"}], "return_type": "String", "signature": "protected String indent(int deepness)", "original_string": "  protected String indent(int deepness) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < deepness; i++) {\n      sb.append(PRE_LI);\n    }\n    return sb.toString();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java", "class_name": "MarkdownRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[Schema<?>]resolve(Schema<?>)", "name": "resolve", "arg_nums": 1, "params": [{"name": "schema", "type": "Schema<?>"}], "return_type": "Schema<?>", "signature": "protected Schema<?> resolve(Schema<?> schema)", "original_string": "  protected Schema<?> resolve(Schema<?> schema) {\n    return refPointer.resolveRef(\n        diff.getNewSpecOpenApi().getComponents(), schema, schema.get$ref());\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java", "class_name": "MarkdownRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Schema<?>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[boolean]isShowChangedMetadata()", "name": "isShowChangedMetadata", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "public boolean isShowChangedMetadata()", "original_string": "  public boolean isShowChangedMetadata() {\n    return this.showChangedMetadata;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java", "class_name": "MarkdownRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nA parameter which indicates whether or not metadata (summary and metadata) changes should be\nlogged in the changelog file.\n"}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender.[void]setShowChangedMetadata(boolean)", "name": "setShowChangedMetadata", "arg_nums": 1, "params": [{"name": "showChangedMetadata", "type": "boolean"}], "return_type": "void", "signature": "public void setShowChangedMetadata(final boolean showChangedMetadata)", "original_string": "  public void setShowChangedMetadata(final boolean showChangedMetadata) {\n    this.showChangedMetadata = showChangedMetadata;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java", "class_name": "MarkdownRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/MarkdownRender.java.MarkdownRender", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nA parameter which indicates whether or not metadata (summary and metadata) changes should be\nlogged in the changelog file.\n"}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/Render.java.Render.[void]render(ChangedOpenApi,OutputStreamWriter)", "name": "render", "arg_nums": 2, "params": [{"name": "diff", "type": "ChangedOpenApi"}, {"name": "outputStreamWriter", "type": "OutputStreamWriter"}], "return_type": "void", "signature": "void render(ChangedOpenApi diff, OutputStreamWriter outputStreamWriter)", "original_string": "  void render(ChangedOpenApi diff, OutputStreamWriter outputStreamWriter);", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/Render.java", "class_name": "Render", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/Render.java.Render", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/Render.java.Render.[void]safelyAppend(OutputStreamWriter,String)", "name": "safelyAppend", "arg_nums": 2, "params": [{"name": "outputStreamWriter", "type": "OutputStreamWriter"}, {"name": "csq", "type": "String"}], "return_type": "void", "signature": "default void safelyAppend(OutputStreamWriter outputStreamWriter, String csq)", "original_string": "  default void safelyAppend(OutputStreamWriter outputStreamWriter, String csq) {\n    try {\n      outputStreamWriter.append(csq);\n    } catch (IOException ex) {\n      throw new RendererException(ex);\n    }\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/Render.java", "class_name": "Render", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/Render.java.Render", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/HttpStatus.java.HttpStatus.[String]getReasonPhrase(int)", "name": "getReasonPhrase", "arg_nums": 1, "params": [{"name": "statusCode", "type": "int"}], "return_type": "String", "signature": "public static String getReasonPhrase(int statusCode)", "original_string": "  public static String getReasonPhrase(int statusCode) {\n    if (statusCode < 0) {\n      throw new IllegalArgumentException(\"status code may not be negative\");\n    }\n    return REASON_PHRASES.get(statusCode);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/HttpStatus.java", "class_name": "HttpStatus", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/HttpStatus.java.HttpStatus", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGet the reason phrase for a particular status code.\n\n<p>This method always returns the English text as specified in the relevant RFCs and is not\ninternationalized.\n\n@param statusCode the numeric status code\n@return the reason phrase associated with the given status code or null if the status code is\n    not recognized.\n"}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/HttpStatus.java.HttpStatus.[]HttpStatus()", "name": "HttpStatus", "arg_nums": 0, "params": [], "return_type": "", "signature": "private HttpStatus()", "original_string": "  private HttpStatus() {}", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/HttpStatus.java", "class_name": "HttpStatus", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/HttpStatus.java.HttpStatus", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[]HtmlRender()", "name": "HtmlRender", "arg_nums": 0, "params": [], "return_type": "", "signature": "public HtmlRender()", "original_string": "  public HtmlRender() {\n    this(\"Api Change Log\", \"http://deepoove.com/swagger-diff/stylesheets/demo.css\");\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java", "class_name": "HtmlRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[]HtmlRender(boolean)", "name": "HtmlRender", "arg_nums": 1, "params": [{"name": "showAllChanges", "type": "boolean"}], "return_type": "", "signature": "public HtmlRender(boolean showAllChanges)", "original_string": "  public HtmlRender(boolean showAllChanges) {\n    this(\"Api Change Log\", \"http://deepoove.com/swagger-diff/stylesheets/demo.css\", showAllChanges);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java", "class_name": "HtmlRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[]HtmlRender(String,String)", "name": "HtmlRender", "arg_nums": 2, "params": [{"name": "title", "type": "String"}, {"name": "linkCss", "type": "String"}], "return_type": "", "signature": "public HtmlRender(String title, String linkCss)", "original_string": "  public HtmlRender(String title, String linkCss) {\n    this.title = title;\n    this.linkCss = linkCss;\n    this.showAllChanges = false;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java", "class_name": "HtmlRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[]HtmlRender(String,String,boolean)", "name": "HtmlRender", "arg_nums": 3, "params": [{"name": "title", "type": "String"}, {"name": "linkCss", "type": "String"}, {"name": "showAllChanges", "type": "boolean"}], "return_type": "", "signature": "public HtmlRender(String title, String linkCss, boolean showAllChanges)", "original_string": "  public HtmlRender(String title, String linkCss, boolean showAllChanges) {\n    this.title = title;\n    this.linkCss = linkCss;\n    this.showAllChanges = showAllChanges;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java", "class_name": "HtmlRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[void]render(ChangedOpenApi,OutputStreamWriter)", "name": "render", "arg_nums": 2, "params": [{"name": "diff", "type": "ChangedOpenApi"}, {"name": "outputStreamWriter", "type": "OutputStreamWriter"}], "return_type": "void", "signature": "public void render(ChangedOpenApi diff, OutputStreamWriter outputStreamWriter)", "original_string": "  public void render(ChangedOpenApi diff, OutputStreamWriter outputStreamWriter) {\n    this.diff = diff;\n\n    List<Endpoint> newEndpoints = diff.getNewEndpoints();\n    OlTag ol_newEndpoint = ol_newEndpoint(newEndpoints);\n\n    List<Endpoint> missingEndpoints = diff.getMissingEndpoints();\n    OlTag ol_missingEndpoint = ol_missingEndpoint(missingEndpoints);\n\n    List<Endpoint> deprecatedEndpoints = diff.getDeprecatedEndpoints();\n    OlTag ol_deprecatedEndpoint = ol_deprecatedEndpoint(deprecatedEndpoints);\n\n    List<ChangedOperation> changedOperations = diff.getChangedOperations();\n    OlTag ol_changed = ol_changed(changedOperations);\n\n    renderHtml(\n        ol_newEndpoint, ol_missingEndpoint, ol_deprecatedEndpoint, ol_changed, outputStreamWriter);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java", "class_name": "HtmlRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[void]renderHtml(OlTag,OlTag,OlTag,OlTag,OutputStreamWriter)", "name": "renderHtml", "arg_nums": 5, "params": [{"name": "ol_new", "type": "OlTag"}, {"name": "ol_miss", "type": "OlTag"}, {"name": "ol_deprec", "type": "OlTag"}, {"name": "ol_changed", "type": "OlTag"}, {"name": "outputStreamWriter", "type": "OutputStreamWriter"}], "return_type": "void", "signature": "public void renderHtml(\n      OlTag ol_new,\n      OlTag ol_miss,\n      OlTag ol_deprec,\n      OlTag ol_changed,\n      OutputStreamWriter outputStreamWriter)", "original_string": "  public void renderHtml(\n      OlTag ol_new,\n      OlTag ol_miss,\n      OlTag ol_deprec,\n      OlTag ol_changed,\n      OutputStreamWriter outputStreamWriter) {\n    HtmlTag html =\n        html()\n            .attr(\"lang\", \"en\")\n            .with(\n                head()\n                    .with(\n                        meta().withCharset(\"utf-8\"),\n                        title(title),\n                        link().withRel(\"stylesheet\").withHref(linkCss)),\n                body()\n                    .with(\n                        header().with(h1(title)),\n                        div()\n                            .withClass(\"article\")\n                            .with(\n                                div().with(h2(\"What's New\"), hr(), ol_new),\n                                div().with(h2(\"What's Deleted\"), hr(), ol_miss),\n                                div().with(h2(\"What's Deprecated\"), hr(), ol_deprec),\n                                div().with(h2(\"What's Changed\"), hr(), ol_changed))));\n\n    try {\n      FlatHtml<OutputStreamWriter> flatHtml = FlatHtml.into(outputStreamWriter);\n      document().render(flatHtml);\n      html.render(flatHtml);\n      outputStreamWriter.close();\n    } catch (IOException e) {\n      throw new RendererException(\"Problem rendering html document.\", e);\n    }\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java", "class_name": "HtmlRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[OlTag]ol_newEndpoint(List<Endpoint>)", "name": "ol_newEndpoint", "arg_nums": 1, "params": [{"name": "endpoints", "type": "List<Endpoint>"}], "return_type": "OlTag", "signature": "private OlTag ol_newEndpoint(List<Endpoint> endpoints)", "original_string": "  private OlTag ol_newEndpoint(List<Endpoint> endpoints) {\n    if (null == endpoints) return ol();\n    OlTag ol = ol();\n    for (Endpoint endpoint : endpoints) {\n      ol.with(\n          li_newEndpoint(\n              endpoint.getMethod().toString(), endpoint.getPathUrl(), endpoint.getSummary()));\n    }\n    return ol;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java", "class_name": "HtmlRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "OlTag", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[LiTag]li_newEndpoint(String,String,String)", "name": "li_newEndpoint", "arg_nums": 3, "params": [{"name": "method", "type": "String"}, {"name": "path", "type": "String"}, {"name": "desc", "type": "String"}], "return_type": "LiTag", "signature": "private LiTag li_newEndpoint(String method, String path, String desc)", "original_string": "  private LiTag li_newEndpoint(String method, String path, String desc) {\n    return li().with(span(method).withClass(method)).withText(path + \" \").with(span(desc));\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java", "class_name": "HtmlRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "LiTag", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[OlTag]ol_missingEndpoint(List<Endpoint>)", "name": "ol_missingEndpoint", "arg_nums": 1, "params": [{"name": "endpoints", "type": "List<Endpoint>"}], "return_type": "OlTag", "signature": "private OlTag ol_missingEndpoint(List<Endpoint> endpoints)", "original_string": "  private OlTag ol_missingEndpoint(List<Endpoint> endpoints) {\n    if (null == endpoints) return ol();\n    OlTag ol = ol();\n    for (Endpoint endpoint : endpoints) {\n      ol.with(\n          li_missingEndpoint(\n              endpoint.getMethod().toString(), endpoint.getPathUrl(), endpoint.getSummary()));\n    }\n    return ol;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java", "class_name": "HtmlRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "OlTag", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[LiTag]li_missingEndpoint(String,String,String)", "name": "li_missingEndpoint", "arg_nums": 3, "params": [{"name": "method", "type": "String"}, {"name": "path", "type": "String"}, {"name": "desc", "type": "String"}], "return_type": "LiTag", "signature": "private LiTag li_missingEndpoint(String method, String path, String desc)", "original_string": "  private LiTag li_missingEndpoint(String method, String path, String desc) {\n    return li().with(span(method).withClass(method), del().withText(path)).with(span(\" \" + desc));\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java", "class_name": "HtmlRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "LiTag", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[OlTag]ol_deprecatedEndpoint(List<Endpoint>)", "name": "ol_deprecatedEndpoint", "arg_nums": 1, "params": [{"name": "endpoints", "type": "List<Endpoint>"}], "return_type": "OlTag", "signature": "private OlTag ol_deprecatedEndpoint(List<Endpoint> endpoints)", "original_string": "  private OlTag ol_deprecatedEndpoint(List<Endpoint> endpoints) {\n    if (null == endpoints) return ol();\n    OlTag ol = ol();\n    for (Endpoint endpoint : endpoints) {\n      ol.with(\n          li_deprecatedEndpoint(\n              endpoint.getMethod().toString(), endpoint.getPathUrl(), endpoint.getSummary()));\n    }\n    return ol;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java", "class_name": "HtmlRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "OlTag", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[LiTag]li_deprecatedEndpoint(String,String,String)", "name": "li_deprecatedEndpoint", "arg_nums": 3, "params": [{"name": "method", "type": "String"}, {"name": "path", "type": "String"}, {"name": "desc", "type": "String"}], "return_type": "LiTag", "signature": "private LiTag li_deprecatedEndpoint(String method, String path, String desc)", "original_string": "  private LiTag li_deprecatedEndpoint(String method, String path, String desc) {\n    return li().with(span(method).withClass(method), del().withText(path)).with(span(\" \" + desc));\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java", "class_name": "HtmlRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "LiTag", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[OlTag]ol_changed(List<ChangedOperation>)", "name": "ol_changed", "arg_nums": 1, "params": [{"name": "changedOperations", "type": "List<ChangedOperation>"}], "return_type": "OlTag", "signature": "private OlTag ol_changed(List<ChangedOperation> changedOperations)", "original_string": "  private OlTag ol_changed(List<ChangedOperation> changedOperations) {\n    if (null == changedOperations) return ol();\n    OlTag ol = ol();\n    for (ChangedOperation changedOperation : changedOperations) {\n      String pathUrl = changedOperation.getPathUrl();\n      String method = changedOperation.getHttpMethod().toString();\n      String desc =\n          Optional.ofNullable(changedOperation.getSummary())\n              .map(ChangedMetadata::getRight)\n              .orElse(\"\");\n\n      UlTag ul_detail = ul().withClass(\"detail\");\n      if (result(changedOperation.getParameters()).isDifferent()) {\n        ul_detail.with(\n            li().with(h3(\"Parameters\")).with(ul_param(changedOperation.getParameters())));\n      }\n      if (changedOperation.resultRequestBody().isDifferent()) {\n        ul_detail.with(\n            li().with(h3(\"Request\"))\n                .with(ul_request(changedOperation.getRequestBody().getContent())));\n      }\n      if (changedOperation.resultApiResponses().isDifferent()) {\n        ul_detail.with(\n            li().with(h3(\"Response\")).with(ul_response(changedOperation.getApiResponses())));\n      }\n      if (showAllChanges && changedOperation.resultSecurityRequirements().isDifferent()) {\n        ul_detail.with(\n            li().with(h3(\"Security Requirements\"))\n                .with(ul_securityRequirements(changedOperation.getSecurityRequirements())));\n      }\n      ol.with(\n          li().with(span(method).withClass(method))\n              .withText(pathUrl + \" \")\n              .with(span(desc))\n              .with(ul_detail));\n    }\n    return ol;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java", "class_name": "HtmlRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "OlTag", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[UlTag]ul_securityRequirements(ChangedSecurityRequirements)", "name": "ul_securityRequirements", "arg_nums": 1, "params": [{"name": "changedSecurityRequirements", "type": "ChangedSecurityRequirements"}], "return_type": "UlTag", "signature": "private UlTag ul_securityRequirements(ChangedSecurityRequirements changedSecurityRequirements)", "original_string": "  private UlTag ul_securityRequirements(ChangedSecurityRequirements changedSecurityRequirements) {\n    List<SecurityRequirement> addRequirements = changedSecurityRequirements.getIncreased();\n    List<SecurityRequirement> delRequirements = changedSecurityRequirements.getMissing();\n    List<ChangedSecurityRequirement> changedRequirements = changedSecurityRequirements.getChanged();\n    UlTag ul = ul().withClass(\"change security requirements\");\n    if (addRequirements != null) {\n      for (SecurityRequirement addRequirement : addRequirements) {\n        ul.with(li_addSecurityRequirement(addRequirement));\n      }\n    }\n    if (delRequirements != null) {\n      for (SecurityRequirement delRequirement : delRequirements) {\n        ul.with(li_missingSecurityRequirement(delRequirement));\n      }\n    }\n    if (changedRequirements != null) {\n      for (ChangedSecurityRequirement changedRequirement : changedRequirements) {\n        ul.with(li_changedSecurityRequirement(changedRequirement));\n      }\n    }\n\n    return ul;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java", "class_name": "HtmlRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "UlTag", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[LiTag]li_addSecurityRequirement(SecurityRequirement)", "name": "li_addSecurityRequirement", "arg_nums": 1, "params": [{"name": "securityRequirement", "type": "SecurityRequirement"}], "return_type": "LiTag", "signature": "private LiTag li_addSecurityRequirement(SecurityRequirement securityRequirement)", "original_string": "  private LiTag li_addSecurityRequirement(SecurityRequirement securityRequirement) {\n    return li().withText(\"New security requirement : \")\n        .with(span(null == securityRequirement.toString() ? \"\" : (securityRequirement.toString())));\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java", "class_name": "HtmlRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "LiTag", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[LiTag]li_missingSecurityRequirement(SecurityRequirement)", "name": "li_missingSecurityRequirement", "arg_nums": 1, "params": [{"name": "securityRequirement", "type": "SecurityRequirement"}], "return_type": "LiTag", "signature": "private LiTag li_missingSecurityRequirement(SecurityRequirement securityRequirement)", "original_string": "  private LiTag li_missingSecurityRequirement(SecurityRequirement securityRequirement) {\n    return li().withText(\"Deleted security requirement : \")\n        .with(span(null == securityRequirement.toString() ? \"\" : (securityRequirement.toString())));\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java", "class_name": "HtmlRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "LiTag", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[LiTag]li_changedSecurityRequirement(ChangedSecurityRequirement)", "name": "li_changedSecurityRequirement", "arg_nums": 1, "params": [{"name": "changedSecurityRequirement", "type": "ChangedSecurityRequirement"}], "return_type": "LiTag", "signature": "private LiTag li_changedSecurityRequirement(\n      ChangedSecurityRequirement changedSecurityRequirement)", "original_string": "  private LiTag li_changedSecurityRequirement(\n      ChangedSecurityRequirement changedSecurityRequirement) {\n    return li().withText(String.format(\"Changed security requirement : \"))\n        .with(\n            span(\n                (null == changedSecurityRequirement.getNewSecurityRequirement()\n                        || null\n                            == changedSecurityRequirement.getNewSecurityRequirement().toString())\n                    ? \"\"\n                    : (changedSecurityRequirement.getNewSecurityRequirement().toString())));\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java", "class_name": "HtmlRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "LiTag", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[UlTag]ul_response(ChangedApiResponse)", "name": "ul_response", "arg_nums": 1, "params": [{"name": "changedApiResponse", "type": "ChangedApiResponse"}], "return_type": "UlTag", "signature": "private UlTag ul_response(ChangedApiResponse changedApiResponse)", "original_string": "  private UlTag ul_response(ChangedApiResponse changedApiResponse) {\n    Map<String, ApiResponse> addResponses = changedApiResponse.getIncreased();\n    Map<String, ApiResponse> delResponses = changedApiResponse.getMissing();\n    Map<String, ChangedResponse> changedResponses = changedApiResponse.getChanged();\n    UlTag ul = ul().withClass(\"change response\");\n    for (Entry<String, ApiResponse> prop : addResponses.entrySet()) {\n      ul.with(li_addResponse(prop.getKey(), prop.getValue()));\n    }\n    for (Entry<String, ApiResponse> prop : delResponses.entrySet()) {\n      ul.with(li_missingResponse(prop.getKey(), prop.getValue()));\n    }\n    for (Entry<String, ChangedResponse> prop : changedResponses.entrySet()) {\n      ul.with(li_changedResponse(prop.getKey(), prop.getValue()));\n    }\n    return ul;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java", "class_name": "HtmlRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "UlTag", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[LiTag]li_addResponse(String,ApiResponse)", "name": "li_addResponse", "arg_nums": 2, "params": [{"name": "name", "type": "String"}, {"name": "response", "type": "ApiResponse"}], "return_type": "LiTag", "signature": "private LiTag li_addResponse(String name, ApiResponse response)", "original_string": "  private LiTag li_addResponse(String name, ApiResponse response) {\n    return li().withText(String.format(\"New response : [%s]\", name))\n        .with(\n            span(null == response.getDescription() ? \"\" : (\"//\" + response.getDescription()))\n                .withClass(COMMENT));\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java", "class_name": "HtmlRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "LiTag", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[LiTag]li_missingResponse(String,ApiResponse)", "name": "li_missingResponse", "arg_nums": 2, "params": [{"name": "name", "type": "String"}, {"name": "response", "type": "ApiResponse"}], "return_type": "LiTag", "signature": "private LiTag li_missingResponse(String name, ApiResponse response)", "original_string": "  private LiTag li_missingResponse(String name, ApiResponse response) {\n    return li().withText(String.format(\"Deleted response : [%s]\", name))\n        .with(\n            span(null == response.getDescription() ? \"\" : (\"//\" + response.getDescription()))\n                .withClass(COMMENT));\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java", "class_name": "HtmlRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "LiTag", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[LiTag]li_changedResponse(String,ChangedResponse)", "name": "li_changedResponse", "arg_nums": 2, "params": [{"name": "name", "type": "String"}, {"name": "response", "type": "ChangedResponse"}], "return_type": "LiTag", "signature": "private LiTag li_changedResponse(String name, ChangedResponse response)", "original_string": "  private LiTag li_changedResponse(String name, ChangedResponse response) {\n    return li().withText(String.format(\"Changed response : [%s]\", name))\n        .with(\n            span((null == response.getNewApiResponse()\n                        || null == response.getNewApiResponse().getDescription())\n                    ? \"\"\n                    : (\"//\" + response.getNewApiResponse().getDescription()))\n                .withClass(COMMENT))\n        .with(ul_request(response.getContent()));\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java", "class_name": "HtmlRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "LiTag", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[UlTag]ul_request(ChangedContent)", "name": "ul_request", "arg_nums": 1, "params": [{"name": "changedContent", "type": "ChangedContent"}], "return_type": "UlTag", "signature": "private UlTag ul_request(ChangedContent changedContent)", "original_string": "  private UlTag ul_request(ChangedContent changedContent) {\n    UlTag ul = ul().withClass(\"change request-body\");\n    if (changedContent != null) {\n      for (String propName : changedContent.getIncreased().keySet()) {\n        ul.with(li_addRequest(propName, changedContent.getIncreased().get(propName)));\n      }\n      for (String propName : changedContent.getMissing().keySet()) {\n        ul.with(li_missingRequest(propName, changedContent.getMissing().get(propName)));\n      }\n      for (String propName : changedContent.getChanged().keySet()) {\n        ul.with(li_changedRequest(propName, changedContent.getChanged().get(propName)));\n      }\n    }\n    return ul;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java", "class_name": "HtmlRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "UlTag", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[LiTag]li_addRequest(String,MediaType)", "name": "li_addRequest", "arg_nums": 2, "params": [{"name": "name", "type": "String"}, {"name": "request", "type": "MediaType"}], "return_type": "LiTag", "signature": "private LiTag li_addRequest(String name, MediaType request)", "original_string": "  private LiTag li_addRequest(String name, MediaType request) {\n    return li().withText(String.format(\"New body: '%s'\", name));\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java", "class_name": "HtmlRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "LiTag", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[LiTag]li_missingRequest(String,MediaType)", "name": "li_missingRequest", "arg_nums": 2, "params": [{"name": "name", "type": "String"}, {"name": "request", "type": "MediaType"}], "return_type": "LiTag", "signature": "private LiTag li_missingRequest(String name, MediaType request)", "original_string": "  private LiTag li_missingRequest(String name, MediaType request) {\n    return li().withText(String.format(\"Deleted body: '%s'\", name));\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java", "class_name": "HtmlRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "LiTag", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[LiTag]li_changedRequest(String,ChangedMediaType)", "name": "li_changedRequest", "arg_nums": 2, "params": [{"name": "name", "type": "String"}, {"name": "request", "type": "ChangedMediaType"}], "return_type": "LiTag", "signature": "private LiTag li_changedRequest(String name, ChangedMediaType request)", "original_string": "  private LiTag li_changedRequest(String name, ChangedMediaType request) {\n    LiTag li =\n        li().with(div_changedSchema(request.getSchema()))\n            .withText(String.format(\"Changed body: '%s'\", name));\n    if (request.isIncompatible() && !showAllChanges) {\n      incompatibilities(li, request.getSchema());\n    } else if (showAllChanges) {\n      allChanges(li, request.getSchema());\n    }\n    return li;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java", "class_name": "HtmlRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "LiTag", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[DivTag]div_changedSchema(ChangedSchema)", "name": "div_changedSchema", "arg_nums": 1, "params": [{"name": "schema", "type": "ChangedSchema"}], "return_type": "DivTag", "signature": "private DivTag div_changedSchema(ChangedSchema schema)", "original_string": "  private DivTag div_changedSchema(ChangedSchema schema) {\n    DivTag div = div();\n    div.with(h3(\"Schema\" + (schema.isIncompatible() ? \" incompatible\" : \"\")));\n    return div;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java", "class_name": "HtmlRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "DivTag", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[void]allChanges(LiTag,ChangedSchema)", "name": "allChanges", "arg_nums": 2, "params": [{"name": "output", "type": "LiTag"}, {"name": "schema", "type": "ChangedSchema"}], "return_type": "void", "signature": "private void allChanges(final LiTag output, final ChangedSchema schema)", "original_string": "  private void allChanges(final LiTag output, final ChangedSchema schema) {\n    allChanges(output, \"\", schema);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java", "class_name": "HtmlRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[void]allChanges(ContainerTag<?>,String,ChangedSchema)", "name": "allChanges", "arg_nums": 3, "params": [{"name": "output", "type": "ContainerTag<?>"}, {"name": "propName", "type": "String"}, {"name": "schema", "type": "ChangedSchema"}], "return_type": "void", "signature": "private void allChanges(\n      final ContainerTag<?> output, String propName, final ChangedSchema schema)", "original_string": "  private void allChanges(\n      final ContainerTag<?> output, String propName, final ChangedSchema schema) {\n    String prefix = propName.isEmpty() ? \"\" : propName + \".\";\n    properties(\n        output, prefix, \"Missing property\", schema.getMissingProperties(), schema.getContext());\n    properties(\n        output, prefix, \"Added property\", schema.getIncreasedProperties(), schema.getContext());\n\n    propertiesChanged(\n        output, prefix, \"Changed property\", schema.getChangedProperties(), schema.getContext());\n    if (schema.getItems() != null) {\n      itemsAllChanges(output, propName, schema.getItems());\n    }\n    schema\n        .getChangedProperties()\n        .forEach((name, property) -> allChanges(output, prefix + name, property));\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java", "class_name": "HtmlRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[void]incompatibilities(LiTag,ChangedSchema)", "name": "incompatibilities", "arg_nums": 2, "params": [{"name": "output", "type": "LiTag"}, {"name": "schema", "type": "ChangedSchema"}], "return_type": "void", "signature": "private void incompatibilities(final LiTag output, final ChangedSchema schema)", "original_string": "  private void incompatibilities(final LiTag output, final ChangedSchema schema) {\n    incompatibilities(output, \"\", schema);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java", "class_name": "HtmlRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[void]incompatibilities(ContainerTag<?>,String,ChangedSchema)", "name": "incompatibilities", "arg_nums": 3, "params": [{"name": "output", "type": "ContainerTag<?>"}, {"name": "propName", "type": "String"}, {"name": "schema", "type": "ChangedSchema"}], "return_type": "void", "signature": "private void incompatibilities(\n      final ContainerTag<?> output, String propName, final ChangedSchema schema)", "original_string": "  private void incompatibilities(\n      final ContainerTag<?> output, String propName, final ChangedSchema schema) {\n    if (schema.getItems() != null) {\n      items(output, propName, schema.getItems());\n    }\n    if (schema.isCoreChanged() == DiffResult.INCOMPATIBLE && schema.isChangedType()) {\n      String type = type(schema.getOldSchema()) + \" -> \" + type(schema.getNewSchema());\n      property(output, propName, \"Changed property type\", type);\n    }\n    String prefix = propName.isEmpty() ? \"\" : propName + \".\";\n    properties(\n        output, prefix, \"Missing property\", schema.getMissingProperties(), schema.getContext());\n    schema\n        .getChangedProperties()\n        .forEach((name, property) -> incompatibilities(output, prefix + name, property));\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java", "class_name": "HtmlRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[void]items(ContainerTag<?>,String,ChangedSchema)", "name": "items", "arg_nums": 3, "params": [{"name": "output", "type": "ContainerTag<?>"}, {"name": "propName", "type": "String"}, {"name": "schema", "type": "ChangedSchema"}], "return_type": "void", "signature": "private void items(ContainerTag<?> output, String propName, ChangedSchema schema)", "original_string": "  private void items(ContainerTag<?> output, String propName, ChangedSchema schema) {\n    incompatibilities(output, propName + \"[n]\", schema);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java", "class_name": "HtmlRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[void]itemsAllChanges(ContainerTag<?>,String,ChangedSchema)", "name": "itemsAllChanges", "arg_nums": 3, "params": [{"name": "output", "type": "ContainerTag<?>"}, {"name": "propName", "type": "String"}, {"name": "schema", "type": "ChangedSchema"}], "return_type": "void", "signature": "private void itemsAllChanges(ContainerTag<?> output, String propName, ChangedSchema schema)", "original_string": "  private void itemsAllChanges(ContainerTag<?> output, String propName, ChangedSchema schema) {\n    allChanges(output, propName + \"[n]\", schema);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java", "class_name": "HtmlRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[void]properties(ContainerTag<?>,String,String,Map<String, Schema<?>>,DiffContext)", "name": "properties", "arg_nums": 5, "params": [{"name": "output", "type": "ContainerTag<?>"}, {"name": "propPrefix", "type": "String"}, {"name": "title", "type": "String"}, {"name": "properties", "type": "Map<String, Schema<?>>"}, {"name": "context", "type": "DiffContext"}], "return_type": "void", "signature": "private void properties(\n      ContainerTag<?> output,\n      String propPrefix,\n      String title,\n      Map<String, Schema<?>> properties,\n      DiffContext context)", "original_string": "  private void properties(\n      ContainerTag<?> output,\n      String propPrefix,\n      String title,\n      Map<String, Schema<?>> properties,\n      DiffContext context) {\n    if (properties != null) {\n      properties.forEach((key, value) -> resolveProperty(output, propPrefix, key, value, title));\n    }\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java", "class_name": "HtmlRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[void]propertiesChanged(ContainerTag<?>,String,String,Map<String, ChangedSchema>,DiffContext)", "name": "propertiesChanged", "arg_nums": 5, "params": [{"name": "output", "type": "ContainerTag<?>"}, {"name": "propPrefix", "type": "String"}, {"name": "title", "type": "String"}, {"name": "properties", "type": "Map<String, ChangedSchema>"}, {"name": "context", "type": "DiffContext"}], "return_type": "void", "signature": "private void propertiesChanged(\n      ContainerTag<?> output,\n      String propPrefix,\n      String title,\n      Map<String, ChangedSchema> properties,\n      DiffContext context)", "original_string": "  private void propertiesChanged(\n      ContainerTag<?> output,\n      String propPrefix,\n      String title,\n      Map<String, ChangedSchema> properties,\n      DiffContext context) {\n    if (properties != null) {\n      properties.forEach((key, value) -> resolveProperty(output, propPrefix, key, value, title));\n    }\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java", "class_name": "HtmlRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[void]resolveProperty(ContainerTag<?>,String,String,Schema<?>,String)", "name": "resolveProperty", "arg_nums": 5, "params": [{"name": "output", "type": "ContainerTag<?>"}, {"name": "propPrefix", "type": "String"}, {"name": "key", "type": "String"}, {"name": "value", "type": "Schema<?>"}, {"name": "title", "type": "String"}], "return_type": "void", "signature": "private void resolveProperty(\n      ContainerTag<?> output, String propPrefix, String key, Schema<?> value, String title)", "original_string": "  private void resolveProperty(\n      ContainerTag<?> output, String propPrefix, String key, Schema<?> value, String title) {\n    try {\n      property(output, propPrefix + key, title, resolve(value));\n    } catch (Exception e) {\n      property(output, propPrefix + key, title, type(value));\n    }\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java", "class_name": "HtmlRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[void]resolveProperty(ContainerTag<?>,String,String,ChangedSchema,String)", "name": "resolveProperty", "arg_nums": 5, "params": [{"name": "output", "type": "ContainerTag<?>"}, {"name": "propPrefix", "type": "String"}, {"name": "key", "type": "String"}, {"name": "value", "type": "ChangedSchema"}, {"name": "title", "type": "String"}], "return_type": "void", "signature": "private void resolveProperty(\n      ContainerTag<?> output, String propPrefix, String key, ChangedSchema value, String title)", "original_string": "  private void resolveProperty(\n      ContainerTag<?> output, String propPrefix, String key, ChangedSchema value, String title) {\n    try {\n      property(output, propPrefix + key, title, resolve(value));\n    } catch (Exception e) {\n      property(output, propPrefix + key, title, type(value));\n    }\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java", "class_name": "HtmlRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[void]property(ContainerTag<?>,String,String,Schema<?>)", "name": "property", "arg_nums": 4, "params": [{"name": "output", "type": "ContainerTag<?>"}, {"name": "name", "type": "String"}, {"name": "title", "type": "String"}, {"name": "schema", "type": "Schema<?>"}], "return_type": "void", "signature": "protected void property(ContainerTag<?> output, String name, String title, Schema<?> schema)", "original_string": "  protected void property(ContainerTag<?> output, String name, String title, Schema<?> schema) {\n    property(output, name, title, type(schema));\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java", "class_name": "HtmlRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[void]property(ContainerTag<?>,String,String,String)", "name": "property", "arg_nums": 4, "params": [{"name": "output", "type": "ContainerTag<?>"}, {"name": "name", "type": "String"}, {"name": "title", "type": "String"}, {"name": "type", "type": "String"}], "return_type": "void", "signature": "protected void property(ContainerTag<?> output, String name, String title, String type)", "original_string": "  protected void property(ContainerTag<?> output, String name, String title, String type) {\n    output.with(p(String.format(\"%s: %s (%s)\", title, name, type)).withClass(MISSING));\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java", "class_name": "HtmlRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[Schema<?>]resolve(Schema<?>)", "name": "resolve", "arg_nums": 1, "params": [{"name": "schema", "type": "Schema<?>"}], "return_type": "Schema<?>", "signature": "protected Schema<?> resolve(Schema<?> schema)", "original_string": "  protected Schema<?> resolve(Schema<?> schema) {\n    return refPointer.resolveRef(\n        diff.getNewSpecOpenApi().getComponents(), schema, schema.get$ref());\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java", "class_name": "HtmlRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Schema<?>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[Schema<?>]resolve(ChangedSchema)", "name": "resolve", "arg_nums": 1, "params": [{"name": "schema", "type": "ChangedSchema"}], "return_type": "Schema<?>", "signature": "protected Schema<?> resolve(ChangedSchema schema)", "original_string": "  protected Schema<?> resolve(ChangedSchema schema) {\n    return refPointer.resolveRef(\n        diff.getNewSpecOpenApi().getComponents(),\n        schema.getNewSchema(),\n        schema.getNewSchema().get$ref());\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java", "class_name": "HtmlRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Schema<?>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[String]type(Schema<?>)", "name": "type", "arg_nums": 1, "params": [{"name": "schema", "type": "Schema<?>"}], "return_type": "String", "signature": "protected String type(Schema<?> schema)", "original_string": "  protected String type(Schema<?> schema) {\n    String result = \"object\";\n    if (schema == null) {\n      result = \"no schema\";\n    } else if (schema instanceof ArraySchema) {\n      result = \"array\";\n    } else if (schema.getType() != null) {\n      result = schema.getType();\n    }\n    return result;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java", "class_name": "HtmlRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[String]type(ChangedSchema)", "name": "type", "arg_nums": 1, "params": [{"name": "schema", "type": "ChangedSchema"}], "return_type": "String", "signature": "protected String type(ChangedSchema schema)", "original_string": "  protected String type(ChangedSchema schema) {\n    return type(schema.getNewSchema());\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java", "class_name": "HtmlRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[UlTag]ul_param(ChangedParameters)", "name": "ul_param", "arg_nums": 1, "params": [{"name": "changedParameters", "type": "ChangedParameters"}], "return_type": "UlTag", "signature": "private UlTag ul_param(ChangedParameters changedParameters)", "original_string": "  private UlTag ul_param(ChangedParameters changedParameters) {\n    List<Parameter> addParameters = changedParameters.getIncreased();\n    List<Parameter> delParameters = changedParameters.getMissing();\n    List<ChangedParameter> changed = changedParameters.getChanged();\n    UlTag ul = ul().withClass(\"change param\");\n    for (Parameter param : addParameters) {\n      ul.with(li_addParam(param));\n    }\n    for (ChangedParameter param : changed) {\n      ul.with(li_changedParam(param));\n    }\n    for (Parameter param : delParameters) {\n      ul.with(li_missingParam(param));\n    }\n    return ul;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java", "class_name": "HtmlRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "UlTag", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[LiTag]li_addParam(Parameter)", "name": "li_addParam", "arg_nums": 1, "params": [{"name": "param", "type": "Parameter"}], "return_type": "LiTag", "signature": "private LiTag li_addParam(Parameter param)", "original_string": "  private LiTag li_addParam(Parameter param) {\n    return li().withText(\"Add \" + param.getName() + \" in \" + param.getIn())\n        .with(\n            span(null == param.getDescription() ? \"\" : (\"//\" + param.getDescription()))\n                .withClass(COMMENT));\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java", "class_name": "HtmlRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "LiTag", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[LiTag]li_missingParam(Parameter)", "name": "li_missingParam", "arg_nums": 1, "params": [{"name": "param", "type": "Parameter"}], "return_type": "LiTag", "signature": "private LiTag li_missingParam(Parameter param)", "original_string": "  private LiTag li_missingParam(Parameter param) {\n    return li().withClass(MISSING)\n        .with(span(\"Delete\"))\n        .with(del(param.getName()))\n        .with(span(\"in \").withText(param.getIn()))\n        .with(\n            span(null == param.getDescription() ? \"\" : (\"//\" + param.getDescription()))\n                .withClass(COMMENT));\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java", "class_name": "HtmlRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "LiTag", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[LiTag]li_deprecatedParam(ChangedParameter)", "name": "li_deprecatedParam", "arg_nums": 1, "params": [{"name": "param", "type": "ChangedParameter"}], "return_type": "LiTag", "signature": "private LiTag li_deprecatedParam(ChangedParameter param)", "original_string": "  private LiTag li_deprecatedParam(ChangedParameter param) {\n    return li().withClass(MISSING)\n        .with(span(\"Deprecated\"))\n        .with(del(param.getName()))\n        .with(span(\"in \").withText(param.getIn()))\n        .with(\n            span(null == param.getNewParameter().getDescription()\n                    ? \"\"\n                    : (\"//\" + param.getNewParameter().getDescription()))\n                .withClass(COMMENT));\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java", "class_name": "HtmlRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "LiTag", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender.[LiTag]li_changedParam(ChangedParameter)", "name": "li_changedParam", "arg_nums": 1, "params": [{"name": "changeParam", "type": "ChangedParameter"}], "return_type": "LiTag", "signature": "private LiTag li_changedParam(ChangedParameter changeParam)", "original_string": "  private LiTag li_changedParam(ChangedParameter changeParam) {\n    if (changeParam.isDeprecated()) {\n      return li_deprecatedParam(changeParam);\n    }\n    boolean changeRequired = changeParam.isChangeRequired();\n    boolean changeDescription =\n        Optional.ofNullable(changeParam.getDescription())\n            .map(ChangedMetadata::isDifferent)\n            .orElse(false);\n    Parameter rightParam = changeParam.getNewParameter();\n    Parameter leftParam = changeParam.getOldParameter();\n    LiTag li = li().withText(changeParam.getName() + \" in \" + changeParam.getIn());\n    if (changeRequired) {\n      li.withText(\n          \" change into \"\n              + (rightParam.getRequired() != null && rightParam.getRequired()\n                  ? \"required\"\n                  : \"not required\"));\n    }\n    if (changeDescription) {\n      li.withText(\" Notes \")\n          .with(del(leftParam.getDescription()).withClass(COMMENT))\n          .withText(\" change into \")\n          .with(span(rightParam.getDescription()).withClass(COMMENT));\n    }\n    return li;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java", "class_name": "HtmlRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/HtmlRender.java.HtmlRender", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "LiTag", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender.[void]render(ChangedOpenApi,OutputStreamWriter)", "name": "render", "arg_nums": 2, "params": [{"name": "diff", "type": "ChangedOpenApi"}, {"name": "outputStreamWriter", "type": "OutputStreamWriter"}], "return_type": "void", "signature": "@Override\n  public void render(ChangedOpenApi diff, OutputStreamWriter outputStreamWriter)", "original_string": "  @Override\n  public void render(ChangedOpenApi diff, OutputStreamWriter outputStreamWriter) {\n    this.diff = diff;\n    if (diff.isUnchanged()) {\n      safelyAppend(outputStreamWriter, \"No differences. Specifications are equivalents\");\n    } else {\n      safelyAppend(outputStreamWriter, bigTitle(\"Api Change Log\"));\n      safelyAppend(\n          outputStreamWriter,\n          StringUtils.center(diff.getNewSpecOpenApi().getInfo().getTitle(), LINE_LENGTH));\n      safelyAppend(outputStreamWriter, System.lineSeparator());\n\n      List<Endpoint> newEndpoints = diff.getNewEndpoints();\n      listEndpoints(newEndpoints, \"What's New\", outputStreamWriter);\n\n      List<Endpoint> missingEndpoints = diff.getMissingEndpoints();\n      listEndpoints(missingEndpoints, \"What's Deleted\", outputStreamWriter);\n\n      List<Endpoint> deprecatedEndpoints = diff.getDeprecatedEndpoints();\n      listEndpoints(deprecatedEndpoints, \"What's Deprecated\", outputStreamWriter);\n\n      List<ChangedOperation> changedOperations = diff.getChangedOperations();\n      ol_changed(changedOperations, outputStreamWriter);\n\n      safelyAppend(outputStreamWriter, title(\"Result\"));\n      safelyAppend(\n          outputStreamWriter,\n          StringUtils.center(\n              diff.isCompatible()\n                  ? \"API changes are backward compatible\"\n                  : \"API changes broke backward compatibility\",\n              LINE_LENGTH));\n      safelyAppend(outputStreamWriter, System.lineSeparator());\n      safelyAppend(outputStreamWriter, separator('-'));\n    }\n    try {\n      outputStreamWriter.close();\n    } catch (IOException e) {\n      throw new RendererException(e);\n    }\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java", "class_name": "ConsoleRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender.[void]ol_changed(List<ChangedOperation>,OutputStreamWriter)", "name": "ol_changed", "arg_nums": 2, "params": [{"name": "operations", "type": "List<ChangedOperation>"}, {"name": "outputStreamWriter", "type": "OutputStreamWriter"}], "return_type": "void", "signature": "private void ol_changed(\n      List<ChangedOperation> operations, OutputStreamWriter outputStreamWriter)", "original_string": "  private void ol_changed(\n      List<ChangedOperation> operations, OutputStreamWriter outputStreamWriter) {\n    if (null == operations || operations.isEmpty()) {\n      return;\n    }\n    safelyAppend(outputStreamWriter, title(\"What's Changed\"));\n    for (ChangedOperation operation : operations) {\n      String pathUrl = operation.getPathUrl();\n      String method = operation.getHttpMethod().toString();\n      String desc =\n          Optional.ofNullable(operation.getSummary()).map(ChangedMetadata::getRight).orElse(\"\");\n\n      safelyAppend(outputStreamWriter, itemEndpoint(method, pathUrl, desc));\n\n      if (result(operation.getParameters()).isDifferent()) {\n        safelyAppend(outputStreamWriter, StringUtils.repeat(' ', 2));\n        safelyAppend(outputStreamWriter, \"Parameter:\");\n        safelyAppend(outputStreamWriter, System.lineSeparator());\n        safelyAppend(outputStreamWriter, ul_param(operation.getParameters()));\n      }\n      if (operation.resultRequestBody().isDifferent()) {\n        safelyAppend(outputStreamWriter, StringUtils.repeat(' ', 2));\n        safelyAppend(outputStreamWriter, \"Request:\");\n        safelyAppend(outputStreamWriter, System.lineSeparator());\n        safelyAppend(outputStreamWriter, ul_content(operation.getRequestBody().getContent(), true));\n      }\n      if (operation.resultApiResponses().isDifferent()) {\n        safelyAppend(outputStreamWriter, StringUtils.repeat(' ', 2));\n        safelyAppend(outputStreamWriter, \"Return Type:\");\n        safelyAppend(outputStreamWriter, System.lineSeparator());\n        safelyAppend(outputStreamWriter, ul_response(operation.getApiResponses()));\n      }\n    }\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java", "class_name": "ConsoleRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender.[String]ul_response(ChangedApiResponse)", "name": "ul_response", "arg_nums": 1, "params": [{"name": "changedApiResponse", "type": "ChangedApiResponse"}], "return_type": "String", "signature": "private String ul_response(ChangedApiResponse changedApiResponse)", "original_string": "  private String ul_response(ChangedApiResponse changedApiResponse) {\n    Map<String, ApiResponse> addResponses = changedApiResponse.getIncreased();\n    Map<String, ApiResponse> delResponses = changedApiResponse.getMissing();\n    Map<String, ChangedResponse> changedResponses = changedApiResponse.getChanged();\n    StringBuilder sb = new StringBuilder();\n    for (String propName : addResponses.keySet()) {\n      sb.append(itemResponse(\"Add \", propName));\n    }\n    for (String propName : delResponses.keySet()) {\n      sb.append(itemResponse(\"Deleted \", propName));\n    }\n    for (Entry<String, ChangedResponse> entry : changedResponses.entrySet()) {\n      sb.append(itemChangedResponse(\"Changed \", entry.getKey(), entry.getValue()));\n    }\n    return sb.toString();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java", "class_name": "ConsoleRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender.[String]itemResponse(String,String)", "name": "itemResponse", "arg_nums": 2, "params": [{"name": "title", "type": "String"}, {"name": "code", "type": "String"}], "return_type": "String", "signature": "private String itemResponse(String title, String code)", "original_string": "  private String itemResponse(String title, String code) {\n    StringBuilder sb = new StringBuilder();\n    String status = \"\";\n    if (!code.equals(\"default\") && !code.matches(\"[1-5]XX\")) {\n      status = HttpStatus.getReasonPhrase(Integer.parseInt(code));\n    }\n    sb.append(StringUtils.repeat(' ', 4))\n        .append(\"- \")\n        .append(title)\n        .append(code)\n        .append(' ')\n        .append(status)\n        .append(System.lineSeparator());\n    return sb.toString();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java", "class_name": "ConsoleRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender.[String]itemChangedResponse(String,String,ChangedResponse)", "name": "itemChangedResponse", "arg_nums": 3, "params": [{"name": "title", "type": "String"}, {"name": "contentType", "type": "String"}, {"name": "response", "type": "ChangedResponse"}], "return_type": "String", "signature": "private String itemChangedResponse(String title, String contentType, ChangedResponse response)", "original_string": "  private String itemChangedResponse(String title, String contentType, ChangedResponse response) {\n    return itemResponse(title, contentType)\n        + StringUtils.repeat(' ', 6)\n        + \"Media types:\"\n        + System.lineSeparator()\n        + ul_content(response.getContent(), false);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java", "class_name": "ConsoleRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender.[String]ul_content(ChangedContent,boolean)", "name": "ul_content", "arg_nums": 2, "params": [{"name": "changedContent", "type": "ChangedContent"}, {"name": "isRequest", "type": "boolean"}], "return_type": "String", "signature": "private String ul_content(ChangedContent changedContent, boolean isRequest)", "original_string": "  private String ul_content(ChangedContent changedContent, boolean isRequest) {\n    StringBuilder sb = new StringBuilder();\n    if (changedContent == null) {\n      return sb.toString();\n    }\n    for (String propName : changedContent.getIncreased().keySet()) {\n      sb.append(itemContent(\"Added \", propName));\n    }\n    for (String propName : changedContent.getMissing().keySet()) {\n      sb.append(itemContent(\"Deleted \", propName));\n    }\n    for (String propName : changedContent.getChanged().keySet()) {\n      sb.append(\n          itemContent(\"Changed \", propName, changedContent.getChanged().get(propName), isRequest));\n    }\n    return sb.toString();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java", "class_name": "ConsoleRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender.[String]itemContent(String,String)", "name": "itemContent", "arg_nums": 2, "params": [{"name": "title", "type": "String"}, {"name": "contentType", "type": "String"}], "return_type": "String", "signature": "private String itemContent(String title, String contentType)", "original_string": "  private String itemContent(String title, String contentType) {\n    return StringUtils.repeat(' ', 8) + \"- \" + title + contentType + System.lineSeparator();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java", "class_name": "ConsoleRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender.[String]itemContent(String,String,ChangedMediaType,boolean)", "name": "itemContent", "arg_nums": 4, "params": [{"name": "title", "type": "String"}, {"name": "contentType", "type": "String"}, {"name": "changedMediaType", "type": "ChangedMediaType"}, {"name": "isRequest", "type": "boolean"}], "return_type": "String", "signature": "private String itemContent(\n      String title, String contentType, ChangedMediaType changedMediaType, boolean isRequest)", "original_string": "  private String itemContent(\n      String title, String contentType, ChangedMediaType changedMediaType, boolean isRequest) {\n    StringBuilder sb = new StringBuilder();\n    sb.append(itemContent(title, contentType))\n        .append(StringUtils.repeat(' ', 10))\n        .append(\"Schema: \")\n        .append(changedMediaType.isCompatible() ? \"Backward compatible\" : \"Broken compatibility\")\n        .append(System.lineSeparator());\n    if (!changedMediaType.isCompatible()) {\n      sb.append(incompatibilities(changedMediaType.getSchema()));\n    }\n    return sb.toString();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java", "class_name": "ConsoleRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender.[String]incompatibilities(ChangedSchema)", "name": "incompatibilities", "arg_nums": 1, "params": [{"name": "schema", "type": "ChangedSchema"}], "return_type": "String", "signature": "private String incompatibilities(final ChangedSchema schema)", "original_string": "  private String incompatibilities(final ChangedSchema schema) {\n    return incompatibilities(\"\", schema);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java", "class_name": "ConsoleRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender.[String]incompatibilities(String,ChangedSchema)", "name": "incompatibilities", "arg_nums": 2, "params": [{"name": "propName", "type": "String"}, {"name": "schema", "type": "ChangedSchema"}], "return_type": "String", "signature": "private String incompatibilities(String propName, final ChangedSchema schema)", "original_string": "  private String incompatibilities(String propName, final ChangedSchema schema) {\n    StringBuilder sb = new StringBuilder();\n    if (schema.getItems() != null) {\n      sb.append(items(propName, schema.getItems()));\n    }\n    if (schema.isCoreChanged() == DiffResult.INCOMPATIBLE && schema.isChangedType()) {\n      String type = type(schema.getOldSchema()) + \" -> \" + type(schema.getNewSchema());\n      sb.append(property(propName, \"Changed property type\", type));\n    }\n    String prefix = propName.isEmpty() ? \"\" : propName + \".\";\n    sb.append(\n        properties(prefix, \"Missing property\", schema.getMissingProperties(), schema.getContext()));\n    schema\n        .getChangedProperties()\n        .forEach((name, property) -> sb.append(incompatibilities(prefix + name, property)));\n    return sb.toString();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java", "class_name": "ConsoleRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender.[String]items(String,ChangedSchema)", "name": "items", "arg_nums": 2, "params": [{"name": "propName", "type": "String"}, {"name": "schema", "type": "ChangedSchema"}], "return_type": "String", "signature": "private String items(String propName, ChangedSchema schema)", "original_string": "  private String items(String propName, ChangedSchema schema) {\n    return incompatibilities(propName + \"[n]\", schema);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java", "class_name": "ConsoleRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender.[String]properties(String,String,Map<String, Schema<?>>,DiffContext)", "name": "properties", "arg_nums": 4, "params": [{"name": "propPrefix", "type": "String"}, {"name": "title", "type": "String"}, {"name": "properties", "type": "Map<String, Schema<?>>"}, {"name": "context", "type": "DiffContext"}], "return_type": "String", "signature": "private String properties(\n      String propPrefix, String title, Map<String, Schema<?>> properties, DiffContext context)", "original_string": "  private String properties(\n      String propPrefix, String title, Map<String, Schema<?>> properties, DiffContext context) {\n    StringBuilder sb = new StringBuilder();\n    if (properties != null) {\n      properties.forEach((key, value) -> sb.append(resolveProperty(propPrefix, value, key, title)));\n    }\n    return sb.toString();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java", "class_name": "ConsoleRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender.[String]resolveProperty(String,Schema<?>,String,String)", "name": "resolveProperty", "arg_nums": 4, "params": [{"name": "propPrefix", "type": "String"}, {"name": "value", "type": "Schema<?>"}, {"name": "key", "type": "String"}, {"name": "title", "type": "String"}], "return_type": "String", "signature": "private String resolveProperty(String propPrefix, Schema<?> value, String key, String title)", "original_string": "  private String resolveProperty(String propPrefix, Schema<?> value, String key, String title) {\n    try {\n      return property(propPrefix + key, title, resolve(value));\n    } catch (Exception e) {\n      return property(propPrefix + key, title, type(value));\n    }\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java", "class_name": "ConsoleRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender.[String]property(String,String,Schema<?>)", "name": "property", "arg_nums": 3, "params": [{"name": "name", "type": "String"}, {"name": "title", "type": "String"}, {"name": "schema", "type": "Schema<?>"}], "return_type": "String", "signature": "protected String property(String name, String title, Schema<?> schema)", "original_string": "  protected String property(String name, String title, Schema<?> schema) {\n    return property(name, title, type(schema));\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java", "class_name": "ConsoleRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender.[String]property(String,String,String)", "name": "property", "arg_nums": 3, "params": [{"name": "name", "type": "String"}, {"name": "title", "type": "String"}, {"name": "type", "type": "String"}], "return_type": "String", "signature": "protected String property(String name, String title, String type)", "original_string": "  protected String property(String name, String title, String type) {\n    return String.format(\"%s%s: %s (%s)%n\", StringUtils.repeat(' ', 10), title, name, type);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java", "class_name": "ConsoleRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender.[Schema<?>]resolve(Schema<?>)", "name": "resolve", "arg_nums": 1, "params": [{"name": "schema", "type": "Schema<?>"}], "return_type": "Schema<?>", "signature": "protected Schema<?> resolve(Schema<?> schema)", "original_string": "  protected Schema<?> resolve(Schema<?> schema) {\n    return refPointer.resolveRef(\n        diff.getNewSpecOpenApi().getComponents(), schema, schema.get$ref());\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java", "class_name": "ConsoleRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Schema<?>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender.[String]type(Schema<?>)", "name": "type", "arg_nums": 1, "params": [{"name": "schema", "type": "Schema<?>"}], "return_type": "String", "signature": "protected String type(Schema<?> schema)", "original_string": "  protected String type(Schema<?> schema) {\n    String result = \"object\";\n    if (schema == null) {\n      result = \"no schema\";\n    } else if (schema instanceof ArraySchema) {\n      result = \"array\";\n    } else if (schema.getType() != null) {\n      result = schema.getType();\n    }\n    return result;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java", "class_name": "ConsoleRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender.[String]ul_param(ChangedParameters)", "name": "ul_param", "arg_nums": 1, "params": [{"name": "changedParameters", "type": "ChangedParameters"}], "return_type": "String", "signature": "private String ul_param(ChangedParameters changedParameters)", "original_string": "  private String ul_param(ChangedParameters changedParameters) {\n    List<Parameter> addParameters = changedParameters.getIncreased();\n    List<Parameter> delParameters = changedParameters.getMissing();\n    List<ChangedParameter> changed = changedParameters.getChanged();\n    StringBuilder sb = new StringBuilder();\n    for (Parameter param : addParameters) {\n      sb.append(itemParam(\"Add \", param));\n    }\n    for (ChangedParameter param : changed) {\n      sb.append(li_changedParam(param));\n    }\n    for (Parameter param : delParameters) {\n      sb.append(itemParam(\"Delete \", param));\n    }\n    return sb.toString();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java", "class_name": "ConsoleRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender.[String]itemParam(String,Parameter)", "name": "itemParam", "arg_nums": 2, "params": [{"name": "title", "type": "String"}, {"name": "param", "type": "Parameter"}], "return_type": "String", "signature": "private String itemParam(String title, Parameter param)", "original_string": "  private String itemParam(String title, Parameter param) {\n    return \"\"\n        + StringUtils.repeat(' ', 4)\n        + \"- \"\n        + title\n        + param.getName()\n        + \" in \"\n        + param.getIn()\n        + System.lineSeparator();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java", "class_name": "ConsoleRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender.[String]li_changedParam(ChangedParameter)", "name": "li_changedParam", "arg_nums": 1, "params": [{"name": "changeParam", "type": "ChangedParameter"}], "return_type": "String", "signature": "private String li_changedParam(ChangedParameter changeParam)", "original_string": "  private String li_changedParam(ChangedParameter changeParam) {\n    if (changeParam.isDeprecated()) {\n      return itemParam(\"Deprecated \", changeParam.getNewParameter());\n    } else {\n      return itemParam(\"Changed \", changeParam.getNewParameter());\n    }\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java", "class_name": "ConsoleRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender.[void]listEndpoints(List<Endpoint>,String,OutputStreamWriter)", "name": "listEndpoints", "arg_nums": 3, "params": [{"name": "endpoints", "type": "List<Endpoint>"}, {"name": "title", "type": "String"}, {"name": "outputStreamWriter", "type": "OutputStreamWriter"}], "return_type": "void", "signature": "private void listEndpoints(\n      List<Endpoint> endpoints, String title, OutputStreamWriter outputStreamWriter)", "original_string": "  private void listEndpoints(\n      List<Endpoint> endpoints, String title, OutputStreamWriter outputStreamWriter) {\n    if (null == endpoints || endpoints.isEmpty()) {\n      return;\n    }\n    StringBuilder sb = new StringBuilder();\n    sb.append(title(title));\n    for (Endpoint endpoint : endpoints) {\n      sb.append(\n          itemEndpoint(\n              endpoint.getMethod().toString(), endpoint.getPathUrl(), endpoint.getSummary()));\n    }\n\n    safelyAppend(outputStreamWriter, sb.append(System.lineSeparator()).toString());\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java", "class_name": "ConsoleRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender.[String]itemEndpoint(String,String,String)", "name": "itemEndpoint", "arg_nums": 3, "params": [{"name": "method", "type": "String"}, {"name": "path", "type": "String"}, {"name": "desc", "type": "String"}], "return_type": "String", "signature": "private String itemEndpoint(String method, String path, String desc)", "original_string": "  private String itemEndpoint(String method, String path, String desc) {\n    return String.format(\"- %s %s%n\", StringUtils.rightPad(method, 6), path);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java", "class_name": "ConsoleRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender.[String]renderBody(String,String,String,String)", "name": "renderBody", "arg_nums": 4, "params": [{"name": "ol_new", "type": "String"}, {"name": "ol_miss", "type": "String"}, {"name": "ol_deprec", "type": "String"}, {"name": "ol_changed", "type": "String"}], "return_type": "String", "signature": "public String renderBody(String ol_new, String ol_miss, String ol_deprec, String ol_changed)", "original_string": "  public String renderBody(String ol_new, String ol_miss, String ol_deprec, String ol_changed) {\n    return ol_new + ol_miss + ol_deprec + ol_changed;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java", "class_name": "ConsoleRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender.[String]bigTitle(String)", "name": "bigTitle", "arg_nums": 1, "params": [{"name": "title", "type": "String"}], "return_type": "String", "signature": "public String bigTitle(String title)", "original_string": "  public String bigTitle(String title) {\n    char ch = '=';\n    return this.title(title.toUpperCase(), ch);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java", "class_name": "ConsoleRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender.[String]title(String)", "name": "title", "arg_nums": 1, "params": [{"name": "title", "type": "String"}], "return_type": "String", "signature": "public String title(String title)", "original_string": "  public String title(String title) {\n    return this.title(title, '-');\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java", "class_name": "ConsoleRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender.[String]title(String,char)", "name": "title", "arg_nums": 2, "params": [{"name": "title", "type": "String"}, {"name": "ch", "type": "char"}], "return_type": "String", "signature": "public String title(String title, char ch)", "original_string": "  public String title(String title, char ch) {\n    String little = StringUtils.repeat(ch, 2);\n    return String.format(\n        \"%s%s%s%s%n%s\",\n        separator(ch), little, StringUtils.center(title, LINE_LENGTH - 4), little, separator(ch));\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java", "class_name": "ConsoleRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender.[String]separator(char)", "name": "separator", "arg_nums": 1, "params": [{"name": "ch", "type": "char"}], "return_type": "String", "signature": "public String separator(char ch)", "original_string": "  public String separator(char ch) {\n    return StringUtils.repeat(ch, LINE_LENGTH) + System.lineSeparator();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java", "class_name": "ConsoleRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/ConsoleRender.java.ConsoleRender", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/JsonRender.java.JsonRender.[]JsonRender()", "name": "JsonRender", "arg_nums": 0, "params": [], "return_type": "", "signature": "public JsonRender()", "original_string": "  public JsonRender() {\n    objectMapper = new ObjectMapper();\n    objectMapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);\n    objectMapper.findAndRegisterModules();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/JsonRender.java", "class_name": "JsonRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/JsonRender.java.JsonRender", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/JsonRender.java.JsonRender.[void]render(ChangedOpenApi,OutputStreamWriter)", "name": "render", "arg_nums": 2, "params": [{"name": "diff", "type": "ChangedOpenApi"}, {"name": "outputStreamWriter", "type": "OutputStreamWriter"}], "return_type": "void", "signature": "@Override\n  public void render(ChangedOpenApi diff, OutputStreamWriter outputStreamWriter)", "original_string": "  @Override\n  public void render(ChangedOpenApi diff, OutputStreamWriter outputStreamWriter) {\n    try {\n      objectMapper.writeValue(outputStreamWriter, diff);\n      outputStreamWriter.close();\n    } catch (JsonProcessingException e) {\n      throw new RendererException(\"Could not serialize diff as JSON\", e);\n    } catch (IOException e) {\n      throw new RendererException(e);\n    }\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/JsonRender.java", "class_name": "JsonRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/JsonRender.java.JsonRender", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java.AsciidocRender.[void]render(ChangedOpenApi,OutputStreamWriter)", "name": "render", "arg_nums": 2, "params": [{"name": "diff", "type": "ChangedOpenApi"}, {"name": "outputStreamWriter", "type": "OutputStreamWriter"}], "return_type": "void", "signature": "@Override\n  public void render(ChangedOpenApi diff, OutputStreamWriter outputStreamWriter)", "original_string": "  @Override\n  public void render(ChangedOpenApi diff, OutputStreamWriter outputStreamWriter) {\n    this.diff = diff;\n    if (diff.isUnchanged()) {\n      safelyAppend(\n          outputStreamWriter,\n          bigTitle(\n              diff.getNewSpecOpenApi().getInfo().getTitle(),\n              diff.getNewSpecOpenApi().getInfo().getVersion()));\n      safelyAppend(outputStreamWriter, System.lineSeparator());\n      safelyAppend(outputStreamWriter, System.lineSeparator());\n      safelyAppend(outputStreamWriter, \"NOTE: No differences. Specifications are equivalents\");\n    } else {\n      safelyAppend(\n          outputStreamWriter,\n          bigTitle(\n              diff.getNewSpecOpenApi().getInfo().getTitle(),\n              diff.getNewSpecOpenApi().getInfo().getVersion()));\n      safelyAppend(outputStreamWriter, System.lineSeparator());\n      safelyAppend(outputStreamWriter, \":reproducible:\\n:sectlinks:\\n:toc:\\n\");\n      safelyAppend(outputStreamWriter, System.lineSeparator());\n\n      List<Endpoint> newEndpoints = diff.getNewEndpoints();\n      listEndpoints(newEndpoints, \"What's New\", outputStreamWriter);\n\n      List<Endpoint> missingEndpoints = diff.getMissingEndpoints();\n      listEndpoints(missingEndpoints, \"What's Deleted\", outputStreamWriter);\n\n      List<Endpoint> deprecatedEndpoints = diff.getDeprecatedEndpoints();\n      listEndpoints(deprecatedEndpoints, \"What's Deprecated\", outputStreamWriter);\n\n      List<ChangedOperation> changedOperations = diff.getChangedOperations();\n      ol_changed(changedOperations, outputStreamWriter);\n\n      safelyAppend(outputStreamWriter, System.lineSeparator());\n      safelyAppend(\n          outputStreamWriter,\n          diff.isCompatible()\n              ? \"NOTE: API changes are backward compatible\"\n              : \"WARNING: API changes broke backward compatibility\");\n      safelyAppend(outputStreamWriter, System.lineSeparator());\n    }\n    try {\n      outputStreamWriter.close();\n    } catch (IOException e) {\n      throw new RendererException(e);\n    }\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java", "class_name": "AsciidocRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java.AsciidocRender", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java.AsciidocRender.[void]ol_changed(List<ChangedOperation>,OutputStreamWriter)", "name": "ol_changed", "arg_nums": 2, "params": [{"name": "operations", "type": "List<ChangedOperation>"}, {"name": "outputStreamWriter", "type": "OutputStreamWriter"}], "return_type": "void", "signature": "private void ol_changed(\n      List<ChangedOperation> operations, OutputStreamWriter outputStreamWriter)", "original_string": "  private void ol_changed(\n      List<ChangedOperation> operations, OutputStreamWriter outputStreamWriter) {\n    if (null == operations || operations.isEmpty()) {\n      return;\n    }\n    safelyAppend(outputStreamWriter, title(\"What's Changed\", 2));\n    safelyAppend(outputStreamWriter, System.lineSeparator());\n    for (ChangedOperation operation : operations) {\n      String pathUrl = operation.getPathUrl();\n      String method = operation.getHttpMethod().toString();\n      String desc =\n          Optional.ofNullable(operation.getSummary()).map(ChangedMetadata::getRight).orElse(\"\");\n\n      safelyAppend(outputStreamWriter, itemEndpoint(method, pathUrl, desc));\n      if (result(operation.getParameters()).isDifferent()) {\n        safelyAppend(outputStreamWriter, \"* Parameter:\\n\");\n        safelyAppend(outputStreamWriter, ul_param(operation.getParameters()));\n        safelyAppend(outputStreamWriter, System.lineSeparator());\n      }\n      if (operation.resultRequestBody().isDifferent()) {\n        safelyAppend(outputStreamWriter, \"* Request:\\n\");\n        safelyAppend(\n            outputStreamWriter, ul_content(operation.getRequestBody().getContent(), true, 2));\n        safelyAppend(outputStreamWriter, System.lineSeparator());\n      }\n      if (operation.resultApiResponses().isDifferent()) {\n        safelyAppend(outputStreamWriter, \"* Return Type:\\n\");\n        safelyAppend(outputStreamWriter, ul_response(operation.getApiResponses()));\n        safelyAppend(outputStreamWriter, System.lineSeparator());\n      }\n    }\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java", "class_name": "AsciidocRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java.AsciidocRender", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java.AsciidocRender.[String]ul_response(ChangedApiResponse)", "name": "ul_response", "arg_nums": 1, "params": [{"name": "changedApiResponse", "type": "ChangedApiResponse"}], "return_type": "String", "signature": "private String ul_response(ChangedApiResponse changedApiResponse)", "original_string": "  private String ul_response(ChangedApiResponse changedApiResponse) {\n    Map<String, ApiResponse> addResponses = changedApiResponse.getIncreased();\n    Map<String, ApiResponse> delResponses = changedApiResponse.getMissing();\n    Map<String, ChangedResponse> changedResponses = changedApiResponse.getChanged();\n    StringBuilder sb = new StringBuilder();\n    for (String propName : addResponses.keySet()) {\n      sb.append(itemResponse(\"** Add \", propName));\n    }\n    for (String propName : delResponses.keySet()) {\n      sb.append(itemResponse(\"** Deleted \", propName));\n    }\n    for (Entry<String, ChangedResponse> entry : changedResponses.entrySet()) {\n      sb.append(itemChangedResponse(\"** Changed \", entry.getKey(), entry.getValue()));\n    }\n    return sb.toString();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java", "class_name": "AsciidocRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java.AsciidocRender", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java.AsciidocRender.[String]itemResponse(String,String)", "name": "itemResponse", "arg_nums": 2, "params": [{"name": "title", "type": "String"}, {"name": "code", "type": "String"}], "return_type": "String", "signature": "private String itemResponse(String title, String code)", "original_string": "  private String itemResponse(String title, String code) {\n    StringBuilder sb = new StringBuilder();\n    String status = \"\";\n    if (!code.equals(\"default\") && !code.matches(\"[1-5]XX\")) {\n      status = HttpStatus.getReasonPhrase(Integer.parseInt(code));\n    }\n    sb.append(title).append(code).append(' ').append(status).append(\"\\n\");\n    return sb.toString();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java", "class_name": "AsciidocRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java.AsciidocRender", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java.AsciidocRender.[String]itemChangedResponse(String,String,ChangedResponse)", "name": "itemChangedResponse", "arg_nums": 3, "params": [{"name": "title", "type": "String"}, {"name": "contentType", "type": "String"}, {"name": "response", "type": "ChangedResponse"}], "return_type": "String", "signature": "private String itemChangedResponse(String title, String contentType, ChangedResponse response)", "original_string": "  private String itemChangedResponse(String title, String contentType, ChangedResponse response) {\n    return itemResponse(title, contentType)\n        + \"** Media types:\\n\"\n        + ul_content(response.getContent(), false, 3);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java", "class_name": "AsciidocRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java.AsciidocRender", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java.AsciidocRender.[String]ul_content(ChangedContent,boolean,int)", "name": "ul_content", "arg_nums": 3, "params": [{"name": "changedContent", "type": "ChangedContent"}, {"name": "isRequest", "type": "boolean"}, {"name": "indent", "type": "int"}], "return_type": "String", "signature": "private String ul_content(ChangedContent changedContent, boolean isRequest, int indent)", "original_string": "  private String ul_content(ChangedContent changedContent, boolean isRequest, int indent) {\n    StringBuilder sb = new StringBuilder();\n    if (changedContent == null) {\n      return sb.toString();\n    }\n    for (String propName : changedContent.getIncreased().keySet()) {\n      sb.append(itemContent(\"Added \", propName, indent));\n    }\n    for (String propName : changedContent.getMissing().keySet()) {\n      sb.append(itemContent(\"Deleted \", propName, indent));\n    }\n    for (String propName : changedContent.getChanged().keySet()) {\n      sb.append(\n          itemContent(\n              \"Changed \", propName, indent, changedContent.getChanged().get(propName), isRequest));\n    }\n    return sb.toString();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java", "class_name": "AsciidocRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java.AsciidocRender", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java.AsciidocRender.[String]itemContent(String,String,int)", "name": "itemContent", "arg_nums": 3, "params": [{"name": "title", "type": "String"}, {"name": "contentType", "type": "String"}, {"name": "indent", "type": "int"}], "return_type": "String", "signature": "private String itemContent(String title, String contentType, int indent)", "original_string": "  private String itemContent(String title, String contentType, int indent) {\n    return StringUtils.repeat('*', indent) + \" \" + title + contentType + \"\\n\";\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java", "class_name": "AsciidocRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java.AsciidocRender", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java.AsciidocRender.[String]itemContent(String,String,int,ChangedMediaType,boolean)", "name": "itemContent", "arg_nums": 5, "params": [{"name": "title", "type": "String"}, {"name": "contentType", "type": "String"}, {"name": "indent", "type": "int"}, {"name": "changedMediaType", "type": "ChangedMediaType"}, {"name": "isRequest", "type": "boolean"}], "return_type": "String", "signature": "private String itemContent(\n      String title,\n      String contentType,\n      int indent,\n      ChangedMediaType changedMediaType,\n      boolean isRequest)", "original_string": "  private String itemContent(\n      String title,\n      String contentType,\n      int indent,\n      ChangedMediaType changedMediaType,\n      boolean isRequest) {\n    StringBuilder sb = new StringBuilder();\n    sb.append(itemContent(title, contentType, indent))\n        .append(itemContent(\"Schema:\", \"\", indent))\n        .append(changedMediaType.isCompatible() ? \"Backward compatible\" : \"Broken compatibility\")\n        .append(\"\\n\");\n    if (!changedMediaType.isCompatible()) {\n      sb.append(incompatibilities(changedMediaType.getSchema()));\n    }\n    return sb.toString();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java", "class_name": "AsciidocRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java.AsciidocRender", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java.AsciidocRender.[String]incompatibilities(ChangedSchema)", "name": "incompatibilities", "arg_nums": 1, "params": [{"name": "schema", "type": "ChangedSchema"}], "return_type": "String", "signature": "private String incompatibilities(final ChangedSchema schema)", "original_string": "  private String incompatibilities(final ChangedSchema schema) {\n    return incompatibilities(\"\", schema);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java", "class_name": "AsciidocRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java.AsciidocRender", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java.AsciidocRender.[String]incompatibilities(String,ChangedSchema)", "name": "incompatibilities", "arg_nums": 2, "params": [{"name": "propName", "type": "String"}, {"name": "schema", "type": "ChangedSchema"}], "return_type": "String", "signature": "private String incompatibilities(String propName, final ChangedSchema schema)", "original_string": "  private String incompatibilities(String propName, final ChangedSchema schema) {\n    StringBuilder sb = new StringBuilder();\n    if (schema.getItems() != null) {\n      sb.append(items(propName, schema.getItems()));\n    }\n    if (schema.isCoreChanged() == DiffResult.INCOMPATIBLE && schema.isChangedType()) {\n      String type = type(schema.getOldSchema()) + \" -> \" + type(schema.getNewSchema());\n      sb.append(property(propName, \"Changed property type\", type));\n    }\n    String prefix = propName.isEmpty() ? \"\" : propName + \".\";\n    sb.append(\n        properties(prefix, \"Missing property\", schema.getMissingProperties(), schema.getContext()));\n    schema\n        .getChangedProperties()\n        .forEach((name, property) -> sb.append(incompatibilities(prefix + name, property)));\n    return sb.toString();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java", "class_name": "AsciidocRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java.AsciidocRender", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java.AsciidocRender.[String]items(String,ChangedSchema)", "name": "items", "arg_nums": 2, "params": [{"name": "propName", "type": "String"}, {"name": "schema", "type": "ChangedSchema"}], "return_type": "String", "signature": "private String items(String propName, ChangedSchema schema)", "original_string": "  private String items(String propName, ChangedSchema schema) {\n    return incompatibilities(propName + \"[n]\", schema);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java", "class_name": "AsciidocRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java.AsciidocRender", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java.AsciidocRender.[String]properties(String,String,Map<String, Schema<?>>,DiffContext)", "name": "properties", "arg_nums": 4, "params": [{"name": "propPrefix", "type": "String"}, {"name": "title", "type": "String"}, {"name": "properties", "type": "Map<String, Schema<?>>"}, {"name": "context", "type": "DiffContext"}], "return_type": "String", "signature": "private String properties(\n      String propPrefix, String title, Map<String, Schema<?>> properties, DiffContext context)", "original_string": "  private String properties(\n      String propPrefix, String title, Map<String, Schema<?>> properties, DiffContext context) {\n    StringBuilder sb = new StringBuilder();\n    if (properties != null) {\n      properties.forEach((key, value) -> sb.append(resolveProperty(propPrefix, value, key, title)));\n    }\n    return sb.toString();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java", "class_name": "AsciidocRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java.AsciidocRender", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java.AsciidocRender.[String]resolveProperty(String,Schema<?>,String,String)", "name": "resolveProperty", "arg_nums": 4, "params": [{"name": "propPrefix", "type": "String"}, {"name": "value", "type": "Schema<?>"}, {"name": "key", "type": "String"}, {"name": "title", "type": "String"}], "return_type": "String", "signature": "private String resolveProperty(String propPrefix, Schema<?> value, String key, String title)", "original_string": "  private String resolveProperty(String propPrefix, Schema<?> value, String key, String title) {\n    try {\n      return property(propPrefix + key, title, resolve(value));\n    } catch (Exception e) {\n      return property(propPrefix + key, title, type(value));\n    }\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java", "class_name": "AsciidocRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java.AsciidocRender", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java.AsciidocRender.[String]property(String,String,Schema<?>)", "name": "property", "arg_nums": 3, "params": [{"name": "name", "type": "String"}, {"name": "title", "type": "String"}, {"name": "schema", "type": "Schema<?>"}], "return_type": "String", "signature": "protected String property(String name, String title, Schema<?> schema)", "original_string": "  protected String property(String name, String title, Schema<?> schema) {\n    return property(name, title, type(schema));\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java", "class_name": "AsciidocRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java.AsciidocRender", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java.AsciidocRender.[String]property(String,String,String)", "name": "property", "arg_nums": 3, "params": [{"name": "name", "type": "String"}, {"name": "title", "type": "String"}, {"name": "type", "type": "String"}], "return_type": "String", "signature": "protected String property(String name, String title, String type)", "original_string": "  protected String property(String name, String title, String type) {\n    return String.format(\"*** %s: %s (%s)%n\\n\", title, name, type);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java", "class_name": "AsciidocRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java.AsciidocRender", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java.AsciidocRender.[Schema<?>]resolve(Schema<?>)", "name": "resolve", "arg_nums": 1, "params": [{"name": "schema", "type": "Schema<?>"}], "return_type": "Schema<?>", "signature": "protected Schema<?> resolve(Schema<?> schema)", "original_string": "  protected Schema<?> resolve(Schema<?> schema) {\n    return refPointer.resolveRef(\n        diff.getNewSpecOpenApi().getComponents(), schema, schema.get$ref());\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java", "class_name": "AsciidocRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java.AsciidocRender", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Schema<?>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java.AsciidocRender.[String]type(Schema<?>)", "name": "type", "arg_nums": 1, "params": [{"name": "schema", "type": "Schema<?>"}], "return_type": "String", "signature": "protected String type(Schema<?> schema)", "original_string": "  protected String type(Schema<?> schema) {\n    String result = \"object\";\n    if (schema == null) {\n      result = \"no schema\";\n    } else if (schema instanceof ArraySchema) {\n      result = \"array\";\n    } else if (schema.getType() != null) {\n      result = schema.getType();\n    }\n    return result;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java", "class_name": "AsciidocRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java.AsciidocRender", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java.AsciidocRender.[String]ul_param(ChangedParameters)", "name": "ul_param", "arg_nums": 1, "params": [{"name": "changedParameters", "type": "ChangedParameters"}], "return_type": "String", "signature": "private String ul_param(ChangedParameters changedParameters)", "original_string": "  private String ul_param(ChangedParameters changedParameters) {\n    List<Parameter> addParameters = changedParameters.getIncreased();\n    List<Parameter> delParameters = changedParameters.getMissing();\n    List<ChangedParameter> changed = changedParameters.getChanged();\n    StringBuilder sb = new StringBuilder();\n    for (Parameter param : addParameters) {\n      sb.append(itemParam(\"** Add \", param));\n    }\n    for (ChangedParameter param : changed) {\n      sb.append(li_changedParam(param));\n    }\n    for (Parameter param : delParameters) {\n      sb.append(itemParam(\"** Delete \", param));\n    }\n    return sb.toString();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java", "class_name": "AsciidocRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java.AsciidocRender", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java.AsciidocRender.[String]itemParam(String,Parameter)", "name": "itemParam", "arg_nums": 2, "params": [{"name": "title", "type": "String"}, {"name": "param", "type": "Parameter"}], "return_type": "String", "signature": "private String itemParam(String title, Parameter param)", "original_string": "  private String itemParam(String title, Parameter param) {\n    return title + param.getName() + \" in \" + param.getIn() + System.lineSeparator();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java", "class_name": "AsciidocRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java.AsciidocRender", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java.AsciidocRender.[String]li_changedParam(ChangedParameter)", "name": "li_changedParam", "arg_nums": 1, "params": [{"name": "changeParam", "type": "ChangedParameter"}], "return_type": "String", "signature": "private String li_changedParam(ChangedParameter changeParam)", "original_string": "  private String li_changedParam(ChangedParameter changeParam) {\n    if (changeParam.isDeprecated()) {\n      return itemParam(\"** Deprecated \", changeParam.getNewParameter());\n    } else {\n      return itemParam(\"** Changed \", changeParam.getNewParameter());\n    }\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java", "class_name": "AsciidocRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java.AsciidocRender", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java.AsciidocRender.[String]listEndpoints(List<Endpoint>,String,OutputStreamWriter)", "name": "listEndpoints", "arg_nums": 3, "params": [{"name": "endpoints", "type": "List<Endpoint>"}, {"name": "title", "type": "String"}, {"name": "outputStreamWriter", "type": "OutputStreamWriter"}], "return_type": "String", "signature": "private String listEndpoints(\n      List<Endpoint> endpoints, String title, OutputStreamWriter outputStreamWriter)", "original_string": "  private String listEndpoints(\n      List<Endpoint> endpoints, String title, OutputStreamWriter outputStreamWriter) {\n    if (null == endpoints || endpoints.isEmpty()) {\n      return \"\";\n    }\n    StringBuilder sb = new StringBuilder();\n    sb.append(title(title));\n    for (Endpoint endpoint : endpoints) {\n      sb.append(\n          itemEndpoint(\n              endpoint.getMethod().toString(), endpoint.getPathUrl(), endpoint.getSummary()));\n    }\n    return sb.append(System.lineSeparator()).toString();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java", "class_name": "AsciidocRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java.AsciidocRender", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java.AsciidocRender.[String]itemEndpoint(String,String,String)", "name": "itemEndpoint", "arg_nums": 3, "params": [{"name": "method", "type": "String"}, {"name": "path", "type": "String"}, {"name": "desc", "type": "String"}], "return_type": "String", "signature": "private String itemEndpoint(String method, String path, String desc)", "original_string": "  private String itemEndpoint(String method, String path, String desc) {\n    return String.format(\"=== %s%s%n\", StringUtils.rightPad(method, 6), path);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java", "class_name": "AsciidocRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java.AsciidocRender", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java.AsciidocRender.[String]bigTitle(String,String)", "name": "bigTitle", "arg_nums": 2, "params": [{"name": "title", "type": "String"}, {"name": "version", "type": "String"}], "return_type": "String", "signature": "public String bigTitle(String title, String version)", "original_string": "  public String bigTitle(String title, String version) {\n    char ch = '=';\n\n    return String.format(\"= %s (v %s)\", title.toUpperCase(), version);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java", "class_name": "AsciidocRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java.AsciidocRender", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java.AsciidocRender.[String]title(String)", "name": "title", "arg_nums": 1, "params": [{"name": "title", "type": "String"}], "return_type": "String", "signature": "public String title(String title)", "original_string": "  public String title(String title) {\n    return this.title(title, '-');\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java", "class_name": "AsciidocRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java.AsciidocRender", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java.AsciidocRender.[String]title(String,int)", "name": "title", "arg_nums": 2, "params": [{"name": "title", "type": "String"}, {"name": "level", "type": "int"}], "return_type": "String", "signature": "public String title(String title, int level)", "original_string": "  public String title(String title, int level) {\n    String little = StringUtils.repeat(\"=\", level);\n    return String.format(\"%s %s\", little, title);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java", "class_name": "AsciidocRender", "class_uri": "src/main/java/org/openapitools/openapidiff/core/output/AsciidocRender.java.AsciidocRender", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/utils/Copy.java.Copy.[]Copy()", "name": "Copy", "arg_nums": 0, "params": [], "return_type": "", "signature": "private Copy()", "original_string": "  private Copy() {\n    throw new UnsupportedOperationException(\"Utility class. Do not instantiate\");\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/utils/Copy.java", "class_name": "Copy", "class_uri": "src/main/java/org/openapitools/openapidiff/core/utils/Copy.java.Copy", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/utils/Copy.java.Copy.[Map<K, V>]copyMap(Map<K, V>)", "name": "copyMap", "arg_nums": 1, "params": [{"name": "map", "type": "Map<K, V>"}], "return_type": "Map<K, V>", "signature": "public static <K, V> Map<K, V> copyMap(Map<K, V> map)", "original_string": "  public static <K, V> Map<K, V> copyMap(Map<K, V> map) {\n    if (map == null) {\n      return new LinkedHashMap<>();\n    } else {\n      return new LinkedHashMap<>(map);\n    }\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/utils/Copy.java", "class_name": "Copy", "class_uri": "src/main/java/org/openapitools/openapidiff/core/utils/Copy.java.Copy", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Map<K, V>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/utils/EndpointUtils.java.EndpointUtils.[]EndpointUtils()", "name": "EndpointUtils", "arg_nums": 0, "params": [], "return_type": "", "signature": "private EndpointUtils()", "original_string": "  private EndpointUtils() {\n    throw new UnsupportedOperationException(\"Utility class. Do not instantiate\");\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/utils/EndpointUtils.java", "class_name": "EndpointUtils", "class_uri": "src/main/java/org/openapitools/openapidiff/core/utils/EndpointUtils.java.EndpointUtils", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/utils/EndpointUtils.java.EndpointUtils.[Collection<Endpoint>]convert2Endpoints(String,Map<PathItem.HttpMethod, Operation>)", "name": "convert2Endpoints", "arg_nums": 2, "params": [{"name": "pathUrl", "type": "String"}, {"name": "map", "type": "Map<PathItem.HttpMethod, Operation>"}], "return_type": "Collection<Endpoint>", "signature": "public static Collection<Endpoint> convert2Endpoints(\n      String pathUrl, Map<PathItem.HttpMethod, Operation> map)", "original_string": "  public static Collection<Endpoint> convert2Endpoints(\n      String pathUrl, Map<PathItem.HttpMethod, Operation> map) {\n    List<Endpoint> endpoints = new ArrayList<>();\n    if (null == map) {\n      return endpoints;\n    }\n    for (Map.Entry<PathItem.HttpMethod, Operation> entry : map.entrySet()) {\n      PathItem.HttpMethod httpMethod = entry.getKey();\n      Operation operation = entry.getValue();\n      Endpoint endpoint = convert2Endpoint(pathUrl, httpMethod, operation);\n      endpoints.add(endpoint);\n    }\n    return endpoints;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/utils/EndpointUtils.java", "class_name": "EndpointUtils", "class_uri": "src/main/java/org/openapitools/openapidiff/core/utils/EndpointUtils.java.EndpointUtils", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Collection<Endpoint>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/utils/EndpointUtils.java.EndpointUtils.[Endpoint]convert2Endpoint(String,PathItem.HttpMethod,Operation)", "name": "convert2Endpoint", "arg_nums": 3, "params": [{"name": "pathUrl", "type": "String"}, {"name": "httpMethod", "type": "PathItem.HttpMethod"}, {"name": "operation", "type": "Operation"}], "return_type": "Endpoint", "signature": "public static Endpoint convert2Endpoint(\n      String pathUrl, PathItem.HttpMethod httpMethod, Operation operation)", "original_string": "  public static Endpoint convert2Endpoint(\n      String pathUrl, PathItem.HttpMethod httpMethod, Operation operation) {\n    Endpoint endpoint = new Endpoint();\n    endpoint.setPathUrl(pathUrl);\n    endpoint.setMethod(httpMethod);\n    endpoint.setSummary(operation.getSummary());\n    endpoint.setOperation(operation);\n    return endpoint;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/utils/EndpointUtils.java", "class_name": "EndpointUtils", "class_uri": "src/main/java/org/openapitools/openapidiff/core/utils/EndpointUtils.java.EndpointUtils", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Endpoint", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/utils/EndpointUtils.java.EndpointUtils.[List<Endpoint>]convert2EndpointList(Map<String, PathItem>)", "name": "convert2EndpointList", "arg_nums": 1, "params": [{"name": "map", "type": "Map<String, PathItem>"}], "return_type": "List<Endpoint>", "signature": "public static List<Endpoint> convert2EndpointList(Map<String, PathItem> map)", "original_string": "  public static List<Endpoint> convert2EndpointList(Map<String, PathItem> map) {\n    List<Endpoint> endpoints = new ArrayList<>();\n    if (null == map) {\n      return endpoints;\n    }\n    for (Map.Entry<String, PathItem> entry : map.entrySet()) {\n      String url = entry.getKey();\n      PathItem path = entry.getValue();\n\n      Map<PathItem.HttpMethod, Operation> operationMap = path.readOperationsMap();\n      for (Map.Entry<PathItem.HttpMethod, Operation> entryOper : operationMap.entrySet()) {\n        PathItem.HttpMethod httpMethod = entryOper.getKey();\n        Operation operation = entryOper.getValue();\n\n        Endpoint endpoint = new Endpoint();\n        endpoint.setPathUrl(url);\n        endpoint.setMethod(httpMethod);\n        endpoint.setSummary(operation.getSummary());\n        endpoint.setPath(path);\n        endpoint.setOperation(operation);\n        endpoints.add(endpoint);\n      }\n    }\n    return endpoints;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/utils/EndpointUtils.java", "class_name": "EndpointUtils", "class_uri": "src/main/java/org/openapitools/openapidiff/core/utils/EndpointUtils.java.EndpointUtils", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "List<Endpoint>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/utils/ChangedUtils.java.ChangedUtils.[]ChangedUtils()", "name": "ChangedUtils", "arg_nums": 0, "params": [], "return_type": "", "signature": "private ChangedUtils()", "original_string": "  private ChangedUtils() {\n    throw new UnsupportedOperationException(\"Utility class. Do not instantiate\");\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/utils/ChangedUtils.java", "class_name": "ChangedUtils", "class_uri": "src/main/java/org/openapitools/openapidiff/core/utils/ChangedUtils.java.ChangedUtils", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/utils/ChangedUtils.java.ChangedUtils.[boolean]isUnchanged(Changed)", "name": "isUnchanged", "arg_nums": 1, "params": [{"name": "changed", "type": "Changed"}], "return_type": "boolean", "signature": "public static boolean isUnchanged(Changed changed)", "original_string": "  public static boolean isUnchanged(Changed changed) {\n    return changed == null || changed.isUnchanged();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/utils/ChangedUtils.java", "class_name": "ChangedUtils", "class_uri": "src/main/java/org/openapitools/openapidiff/core/utils/ChangedUtils.java.ChangedUtils", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/utils/ChangedUtils.java.ChangedUtils.[boolean]isCompatible(Changed)", "name": "isCompatible", "arg_nums": 1, "params": [{"name": "changed", "type": "Changed"}], "return_type": "boolean", "signature": "public static boolean isCompatible(Changed changed)", "original_string": "  public static boolean isCompatible(Changed changed) {\n    return changed == null || changed.isCompatible();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/utils/ChangedUtils.java", "class_name": "ChangedUtils", "class_uri": "src/main/java/org/openapitools/openapidiff/core/utils/ChangedUtils.java.ChangedUtils", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/utils/ChangedUtils.java.ChangedUtils.[Optional<T>]isChanged(T)", "name": "isChanged", "arg_nums": 1, "params": [{"name": "changed", "type": "T"}], "return_type": "Optional<T>", "signature": "public static <T extends Changed> Optional<T> isChanged(T changed)", "original_string": "  public static <T extends Changed> Optional<T> isChanged(T changed) {\n    if (isUnchanged(changed)) {\n      return Optional.empty();\n    }\n    return Optional.of(changed);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/utils/ChangedUtils.java", "class_name": "ChangedUtils", "class_uri": "src/main/java/org/openapitools/openapidiff/core/utils/ChangedUtils.java.ChangedUtils", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Optional<T>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/utils/FileUtils.java.FileUtils.[]FileUtils()", "name": "FileUtils", "arg_nums": 0, "params": [], "return_type": "", "signature": "private FileUtils()", "original_string": "  private FileUtils() {\n    throw new UnsupportedOperationException(\"Utility class. Do not instantiate\");\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/utils/FileUtils.java", "class_name": "FileUtils", "class_uri": "src/main/java/org/openapitools/openapidiff/core/utils/FileUtils.java.FileUtils", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/utils/FileUtils.java.FileUtils.[void]writeToFile(Render,ChangedOpenApi,String)", "name": "writeToFile", "arg_nums": 3, "params": [{"name": "render", "type": "Render"}, {"name": "diff", "type": "ChangedOpenApi"}, {"name": "fileName", "type": "String"}], "return_type": "void", "signature": "public static void writeToFile(\n      final Render render, final ChangedOpenApi diff, final String fileName)", "original_string": "  public static void writeToFile(\n      final Render render, final ChangedOpenApi diff, final String fileName) {\n    if (fileName == null || fileName.isEmpty()) {\n      logger.debug(\"File name cannot be null or empty.\");\n      return;\n    }\n\n    final Path filePath = Paths.get(fileName);\n    try (final FileOutputStream outputStream = new FileOutputStream(filePath.toFile());\n        final OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream)) {\n      render.render(diff, outputStreamWriter);\n    } catch (final IOException e) {\n      logger.error(\"Exception while writing to file {}\", fileName, e);\n    }\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/utils/FileUtils.java", "class_name": "FileUtils", "class_uri": "src/main/java/org/openapitools/openapidiff/core/utils/FileUtils.java.FileUtils", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/utils/RefPointer.java.RefPointer.[]RefPointer(RefType)", "name": "RefPointer", "arg_nums": 1, "params": [{"name": "refType", "type": "RefType"}], "return_type": "", "signature": "public RefPointer(RefType refType)", "original_string": "  public RefPointer(RefType refType) {\n    this.refType = refType;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/utils/RefPointer.java", "class_name": "RefPointer", "class_uri": "src/main/java/org/openapitools/openapidiff/core/utils/RefPointer.java.RefPointer", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/utils/RefPointer.java.RefPointer.[T]resolveRef(Components,T,String)", "name": "resolveRef", "arg_nums": 3, "params": [{"name": "components", "type": "Components"}, {"name": "t", "type": "T"}, {"name": "ref", "type": "String"}], "return_type": "T", "signature": "public T resolveRef(Components components, T t, String ref)", "original_string": "  public T resolveRef(Components components, T t, String ref) {\n    if (ref != null) {\n      String refName = getRefName(ref);\n      T result = getMap(components).get(refName);\n      if (result == null) {\n        throw new IllegalArgumentException(String.format(\"ref '%s' doesn't exist.\", ref));\n      }\n      return result;\n    }\n    return t;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/utils/RefPointer.java", "class_name": "RefPointer", "class_uri": "src/main/java/org/openapitools/openapidiff/core/utils/RefPointer.java.RefPointer", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "T", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/utils/RefPointer.java.RefPointer.[Map<String, T>]getMap(Components)", "name": "getMap", "arg_nums": 1, "params": [{"name": "components", "type": "Components"}], "return_type": "Map<String, T>", "signature": "@SuppressWarnings(\"unchecked\")\n  private Map<String, T> getMap(Components components)", "original_string": "  @SuppressWarnings(\"unchecked\")\n  private Map<String, T> getMap(Components components) {\n    switch (refType) {\n      case REQUEST_BODIES:\n        return (Map<String, T>) components.getRequestBodies();\n      case RESPONSES:\n        return (Map<String, T>) components.getResponses();\n      case PARAMETERS:\n        return (Map<String, T>) components.getParameters();\n      case SCHEMAS:\n        return (Map<String, T>) components.getSchemas();\n      case HEADERS:\n        return (Map<String, T>) components.getHeaders();\n      case SECURITY_SCHEMES:\n        return (Map<String, T>) components.getSecuritySchemes();\n      default:\n        throw new IllegalArgumentException(\"Not mapped for refType: \" + refType);\n    }\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/utils/RefPointer.java", "class_name": "RefPointer", "class_uri": "src/main/java/org/openapitools/openapidiff/core/utils/RefPointer.java.RefPointer", "attributes": {"modifiers": "@SuppressWarnings(\"unchecked\")\n  private", "marker_annotations": [], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "private"], "comments": [], "return_type": "Map<String, T>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/utils/RefPointer.java.RefPointer.[String]getBaseRefForType(String)", "name": "getBaseRefForType", "arg_nums": 1, "params": [{"name": "type", "type": "String"}], "return_type": "String", "signature": "private String getBaseRefForType(String type)", "original_string": "  private String getBaseRefForType(String type) {\n    return String.format(\"%s%s/\", BASE_REF, type);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/utils/RefPointer.java", "class_name": "RefPointer", "class_uri": "src/main/java/org/openapitools/openapidiff/core/utils/RefPointer.java.RefPointer", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/utils/RefPointer.java.RefPointer.[String]getRefName(String)", "name": "getRefName", "arg_nums": 1, "params": [{"name": "ref", "type": "String"}], "return_type": "String", "signature": "public String getRefName(String ref)", "original_string": "  public String getRefName(String ref) {\n    if (ref == null) {\n      return null;\n    }\n    if (refType == RefType.SECURITY_SCHEMES) {\n      return ref;\n    }\n\n    final String baseRef = getBaseRefForType(refType.getName());\n    if (!ref.startsWith(baseRef)) {\n      throw new IllegalArgumentException(\"Invalid ref: \" + ref);\n    }\n    return ref.substring(baseRef.length());\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/utils/RefPointer.java", "class_name": "RefPointer", "class_uri": "src/main/java/org/openapitools/openapidiff/core/utils/RefPointer.java.RefPointer", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedMediaType.java.ChangedMediaType.[]ChangedMediaType(Schema,Schema,DiffContext)", "name": "ChangedMediaType", "arg_nums": 3, "params": [{"name": "oldSchema", "type": "Schema"}, {"name": "newSchema", "type": "Schema"}, {"name": "context", "type": "DiffContext"}], "return_type": "", "signature": "public ChangedMediaType(Schema oldSchema, Schema newSchema, DiffContext context)", "original_string": "  public ChangedMediaType(Schema oldSchema, Schema newSchema, DiffContext context) {\n    this.oldSchema = oldSchema;\n    this.newSchema = newSchema;\n    this.context = context;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedMediaType.java", "class_name": "ChangedMediaType", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedMediaType.java.ChangedMediaType", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedMediaType.java.ChangedMediaType.[List<Changed>]getChangedElements()", "name": "getChangedElements", "arg_nums": 0, "params": [], "return_type": "List<Changed>", "signature": "@Override\n  public List<Changed> getChangedElements()", "original_string": "  @Override\n  public List<Changed> getChangedElements() {\n    return Collections.singletonList(schema);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedMediaType.java", "class_name": "ChangedMediaType", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedMediaType.java.ChangedMediaType", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<Changed>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedMediaType.java.ChangedMediaType.[DiffResult]isCoreChanged()", "name": "isCoreChanged", "arg_nums": 0, "params": [], "return_type": "DiffResult", "signature": "@Override\n  public DiffResult isCoreChanged()", "original_string": "  @Override\n  public DiffResult isCoreChanged() {\n    return DiffResult.NO_CHANGES;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedMediaType.java", "class_name": "ChangedMediaType", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedMediaType.java.ChangedMediaType", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "DiffResult", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedMediaType.java.ChangedMediaType.[Schema]getOldSchema()", "name": "getOldSchema", "arg_nums": 0, "params": [], "return_type": "Schema", "signature": "public Schema getOldSchema()", "original_string": "  public Schema getOldSchema() {\n    return this.oldSchema;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedMediaType.java", "class_name": "ChangedMediaType", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedMediaType.java.ChangedMediaType", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Schema", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedMediaType.java.ChangedMediaType.[Schema]getNewSchema()", "name": "getNewSchema", "arg_nums": 0, "params": [], "return_type": "Schema", "signature": "public Schema getNewSchema()", "original_string": "  public Schema getNewSchema() {\n    return this.newSchema;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedMediaType.java", "class_name": "ChangedMediaType", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedMediaType.java.ChangedMediaType", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Schema", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedMediaType.java.ChangedMediaType.[DiffContext]getContext()", "name": "getContext", "arg_nums": 0, "params": [], "return_type": "DiffContext", "signature": "public DiffContext getContext()", "original_string": "  public DiffContext getContext() {\n    return this.context;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedMediaType.java", "class_name": "ChangedMediaType", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedMediaType.java.ChangedMediaType", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "DiffContext", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedMediaType.java.ChangedMediaType.[ChangedSchema]getSchema()", "name": "getSchema", "arg_nums": 0, "params": [], "return_type": "ChangedSchema", "signature": "public ChangedSchema getSchema()", "original_string": "  public ChangedSchema getSchema() {\n    return this.schema;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedMediaType.java", "class_name": "ChangedMediaType", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedMediaType.java.ChangedMediaType", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedSchema", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedMediaType.java.ChangedMediaType.[ChangedMediaType]setSchema(ChangedSchema)", "name": "setSchema", "arg_nums": 1, "params": [{"name": "schema", "type": "ChangedSchema"}], "return_type": "ChangedMediaType", "signature": "public ChangedMediaType setSchema(final ChangedSchema schema)", "original_string": "  public ChangedMediaType setSchema(final ChangedSchema schema) {\n    this.schema = schema;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedMediaType.java", "class_name": "ChangedMediaType", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedMediaType.java.ChangedMediaType", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedMediaType", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedMediaType.java.ChangedMediaType.[boolean]equals(Object)", "name": "equals", "arg_nums": 1, "params": [{"name": "o", "type": "Object"}], "return_type": "boolean", "signature": "@Override\n  public boolean equals(Object o)", "original_string": "  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    ChangedMediaType that = (ChangedMediaType) o;\n    return Objects.equals(oldSchema, that.oldSchema)\n        && Objects.equals(newSchema, that.newSchema)\n        && Objects.equals(context, that.context)\n        && Objects.equals(schema, that.schema);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedMediaType.java", "class_name": "ChangedMediaType", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedMediaType.java.ChangedMediaType", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedMediaType.java.ChangedMediaType.[int]hashCode()", "name": "hashCode", "arg_nums": 0, "params": [], "return_type": "int", "signature": "@Override\n  public int hashCode()", "original_string": "  @Override\n  public int hashCode() {\n    return Objects.hash(oldSchema, newSchema, context, schema);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedMediaType.java", "class_name": "ChangedMediaType", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedMediaType.java.ChangedMediaType", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedMediaType.java.ChangedMediaType.[java.lang.String]toString()", "name": "toString", "arg_nums": 0, "params": [], "return_type": "java.lang.String", "signature": "@java.lang.Override\n  public java.lang.String toString()", "original_string": "  @java.lang.Override\n  public java.lang.String toString() {\n    return \"ChangedMediaType(oldSchema=\"\n        + this.getOldSchema()\n        + \", newSchema=\"\n        + this.getNewSchema()\n        + \", context=\"\n        + this.getContext()\n        + \", schema=\"\n        + this.getSchema()\n        + \")\";\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedMediaType.java", "class_name": "ChangedMediaType", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedMediaType.java.ChangedMediaType", "attributes": {"modifiers": "@java.lang.Override\n  public", "marker_annotations": ["@java.lang.Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "java.lang.String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements.java.ChangedSecurityRequirements.[]ChangedSecurityRequirements(List<SecurityRequirement>,List<SecurityRequirement>,DiffContext)", "name": "ChangedSecurityRequirements", "arg_nums": 3, "params": [{"name": "oldSecurityRequirements", "type": "List<SecurityRequirement>"}, {"name": "newSecurityRequirements", "type": "List<SecurityRequirement>"}, {"name": "context", "type": "DiffContext"}], "return_type": "", "signature": "public ChangedSecurityRequirements(\n      List<SecurityRequirement> oldSecurityRequirements,\n      List<SecurityRequirement> newSecurityRequirements,\n      DiffContext context)", "original_string": "  public ChangedSecurityRequirements(\n      List<SecurityRequirement> oldSecurityRequirements,\n      List<SecurityRequirement> newSecurityRequirements,\n      DiffContext context) {\n    this.oldSecurityRequirements = oldSecurityRequirements;\n    this.newSecurityRequirements = newSecurityRequirements;\n    this.context = context;\n    this.changed = new ArrayList<>();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements.java", "class_name": "ChangedSecurityRequirements", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements.java.ChangedSecurityRequirements", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements.java.ChangedSecurityRequirements.[List<Changed>]getChangedElements()", "name": "getChangedElements", "arg_nums": 0, "params": [], "return_type": "List<Changed>", "signature": "@Override\n  public List<Changed> getChangedElements()", "original_string": "  @Override\n  public List<Changed> getChangedElements() {\n    return new ArrayList<>(changed);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements.java", "class_name": "ChangedSecurityRequirements", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements.java.ChangedSecurityRequirements", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<Changed>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements.java.ChangedSecurityRequirements.[DiffResult]isCoreChanged()", "name": "isCoreChanged", "arg_nums": 0, "params": [], "return_type": "DiffResult", "signature": "@Override\n  public DiffResult isCoreChanged()", "original_string": "  @Override\n  public DiffResult isCoreChanged() {\n    if (CollectionUtils.isEmpty(missing) && CollectionUtils.isEmpty(increased)) {\n      return DiffResult.NO_CHANGES;\n    }\n    if (CollectionUtils.isNotEmpty(missing)) {\n      if (SECURITY_REQUIREMENTS_DECREASED.enabled(context)) {\n        return DiffResult.INCOMPATIBLE;\n      }\n    }\n    return DiffResult.COMPATIBLE;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements.java", "class_name": "ChangedSecurityRequirements", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements.java.ChangedSecurityRequirements", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "DiffResult", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements.java.ChangedSecurityRequirements.[void]addMissing(SecurityRequirement)", "name": "addMissing", "arg_nums": 1, "params": [{"name": "securityRequirement", "type": "SecurityRequirement"}], "return_type": "void", "signature": "public void addMissing(SecurityRequirement securityRequirement)", "original_string": "  public void addMissing(SecurityRequirement securityRequirement) {\n    if (this.missing == null) {\n      this.missing = new ArrayList<>();\n    }\n    this.missing.add(securityRequirement);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements.java", "class_name": "ChangedSecurityRequirements", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements.java.ChangedSecurityRequirements", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements.java.ChangedSecurityRequirements.[void]addIncreased(SecurityRequirement)", "name": "addIncreased", "arg_nums": 1, "params": [{"name": "securityRequirement", "type": "SecurityRequirement"}], "return_type": "void", "signature": "public void addIncreased(SecurityRequirement securityRequirement)", "original_string": "  public void addIncreased(SecurityRequirement securityRequirement) {\n    if (this.increased == null) {\n      this.increased = new ArrayList<>();\n    }\n    this.increased.add(securityRequirement);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements.java", "class_name": "ChangedSecurityRequirements", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements.java.ChangedSecurityRequirements", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements.java.ChangedSecurityRequirements.[void]addChanged(ChangedSecurityRequirement)", "name": "addChanged", "arg_nums": 1, "params": [{"name": "changedSecurityRequirement", "type": "ChangedSecurityRequirement"}], "return_type": "void", "signature": "public void addChanged(ChangedSecurityRequirement changedSecurityRequirement)", "original_string": "  public void addChanged(ChangedSecurityRequirement changedSecurityRequirement) {\n    if (this.changed == null) {\n      this.changed = new ArrayList<>();\n    }\n    this.changed.add(changedSecurityRequirement);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements.java", "class_name": "ChangedSecurityRequirements", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements.java.ChangedSecurityRequirements", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements.java.ChangedSecurityRequirements.[List<SecurityRequirement>]getOldSecurityRequirements()", "name": "getOldSecurityRequirements", "arg_nums": 0, "params": [], "return_type": "List<SecurityRequirement>", "signature": "public List<SecurityRequirement> getOldSecurityRequirements()", "original_string": "  public List<SecurityRequirement> getOldSecurityRequirements() {\n    return this.oldSecurityRequirements;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements.java", "class_name": "ChangedSecurityRequirements", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements.java.ChangedSecurityRequirements", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<SecurityRequirement>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements.java.ChangedSecurityRequirements.[List<SecurityRequirement>]getNewSecurityRequirements()", "name": "getNewSecurityRequirements", "arg_nums": 0, "params": [], "return_type": "List<SecurityRequirement>", "signature": "public List<SecurityRequirement> getNewSecurityRequirements()", "original_string": "  public List<SecurityRequirement> getNewSecurityRequirements() {\n    return this.newSecurityRequirements;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements.java", "class_name": "ChangedSecurityRequirements", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements.java.ChangedSecurityRequirements", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<SecurityRequirement>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements.java.ChangedSecurityRequirements.[List<SecurityRequirement>]getMissing()", "name": "getMissing", "arg_nums": 0, "params": [], "return_type": "List<SecurityRequirement>", "signature": "public List<SecurityRequirement> getMissing()", "original_string": "  public List<SecurityRequirement> getMissing() {\n    return this.missing;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements.java", "class_name": "ChangedSecurityRequirements", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements.java.ChangedSecurityRequirements", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<SecurityRequirement>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements.java.ChangedSecurityRequirements.[List<SecurityRequirement>]getIncreased()", "name": "getIncreased", "arg_nums": 0, "params": [], "return_type": "List<SecurityRequirement>", "signature": "public List<SecurityRequirement> getIncreased()", "original_string": "  public List<SecurityRequirement> getIncreased() {\n    return this.increased;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements.java", "class_name": "ChangedSecurityRequirements", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements.java.ChangedSecurityRequirements", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<SecurityRequirement>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements.java.ChangedSecurityRequirements.[List<ChangedSecurityRequirement>]getChanged()", "name": "getChanged", "arg_nums": 0, "params": [], "return_type": "List<ChangedSecurityRequirement>", "signature": "public List<ChangedSecurityRequirement> getChanged()", "original_string": "  public List<ChangedSecurityRequirement> getChanged() {\n    return this.changed;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements.java", "class_name": "ChangedSecurityRequirements", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements.java.ChangedSecurityRequirements", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<ChangedSecurityRequirement>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements.java.ChangedSecurityRequirements.[ChangedSecurityRequirements]setOldSecurityRequirements(List<SecurityRequirement>)", "name": "setOldSecurityRequirements", "arg_nums": 1, "params": [{"name": "oldSecurityRequirements", "type": "List<SecurityRequirement>"}], "return_type": "ChangedSecurityRequirements", "signature": "public ChangedSecurityRequirements setOldSecurityRequirements(\n      final List<SecurityRequirement> oldSecurityRequirements)", "original_string": "  public ChangedSecurityRequirements setOldSecurityRequirements(\n      final List<SecurityRequirement> oldSecurityRequirements) {\n    this.oldSecurityRequirements = oldSecurityRequirements;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements.java", "class_name": "ChangedSecurityRequirements", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements.java.ChangedSecurityRequirements", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedSecurityRequirements", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements.java.ChangedSecurityRequirements.[ChangedSecurityRequirements]setNewSecurityRequirements(List<SecurityRequirement>)", "name": "setNewSecurityRequirements", "arg_nums": 1, "params": [{"name": "newSecurityRequirements", "type": "List<SecurityRequirement>"}], "return_type": "ChangedSecurityRequirements", "signature": "public ChangedSecurityRequirements setNewSecurityRequirements(\n      final List<SecurityRequirement> newSecurityRequirements)", "original_string": "  public ChangedSecurityRequirements setNewSecurityRequirements(\n      final List<SecurityRequirement> newSecurityRequirements) {\n    this.newSecurityRequirements = newSecurityRequirements;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements.java", "class_name": "ChangedSecurityRequirements", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements.java.ChangedSecurityRequirements", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedSecurityRequirements", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements.java.ChangedSecurityRequirements.[ChangedSecurityRequirements]setMissing(List<SecurityRequirement>)", "name": "setMissing", "arg_nums": 1, "params": [{"name": "missing", "type": "List<SecurityRequirement>"}], "return_type": "ChangedSecurityRequirements", "signature": "public ChangedSecurityRequirements setMissing(final List<SecurityRequirement> missing)", "original_string": "  public ChangedSecurityRequirements setMissing(final List<SecurityRequirement> missing) {\n    this.missing = missing;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements.java", "class_name": "ChangedSecurityRequirements", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements.java.ChangedSecurityRequirements", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedSecurityRequirements", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements.java.ChangedSecurityRequirements.[ChangedSecurityRequirements]setIncreased(List<SecurityRequirement>)", "name": "setIncreased", "arg_nums": 1, "params": [{"name": "increased", "type": "List<SecurityRequirement>"}], "return_type": "ChangedSecurityRequirements", "signature": "public ChangedSecurityRequirements setIncreased(final List<SecurityRequirement> increased)", "original_string": "  public ChangedSecurityRequirements setIncreased(final List<SecurityRequirement> increased) {\n    this.increased = increased;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements.java", "class_name": "ChangedSecurityRequirements", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements.java.ChangedSecurityRequirements", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedSecurityRequirements", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements.java.ChangedSecurityRequirements.[ChangedSecurityRequirements]setChanged(List<ChangedSecurityRequirement>)", "name": "setChanged", "arg_nums": 1, "params": [{"name": "changed", "type": "List<ChangedSecurityRequirement>"}], "return_type": "ChangedSecurityRequirements", "signature": "public ChangedSecurityRequirements setChanged(final List<ChangedSecurityRequirement> changed)", "original_string": "  public ChangedSecurityRequirements setChanged(final List<ChangedSecurityRequirement> changed) {\n    this.changed = changed;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements.java", "class_name": "ChangedSecurityRequirements", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements.java.ChangedSecurityRequirements", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedSecurityRequirements", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements.java.ChangedSecurityRequirements.[boolean]equals(Object)", "name": "equals", "arg_nums": 1, "params": [{"name": "o", "type": "Object"}], "return_type": "boolean", "signature": "@Override\n  public boolean equals(Object o)", "original_string": "  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    ChangedSecurityRequirements that = (ChangedSecurityRequirements) o;\n    return Objects.equals(oldSecurityRequirements, that.oldSecurityRequirements)\n        && Objects.equals(newSecurityRequirements, that.newSecurityRequirements)\n        && Objects.equals(missing, that.missing)\n        && Objects.equals(increased, that.increased)\n        && Objects.equals(changed, that.changed);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements.java", "class_name": "ChangedSecurityRequirements", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements.java.ChangedSecurityRequirements", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements.java.ChangedSecurityRequirements.[int]hashCode()", "name": "hashCode", "arg_nums": 0, "params": [], "return_type": "int", "signature": "@Override\n  public int hashCode()", "original_string": "  @Override\n  public int hashCode() {\n    return Objects.hash(\n        oldSecurityRequirements, newSecurityRequirements, missing, increased, changed);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements.java", "class_name": "ChangedSecurityRequirements", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements.java.ChangedSecurityRequirements", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements.java.ChangedSecurityRequirements.[java.lang.String]toString()", "name": "toString", "arg_nums": 0, "params": [], "return_type": "java.lang.String", "signature": "@java.lang.Override\n  public java.lang.String toString()", "original_string": "  @java.lang.Override\n  public java.lang.String toString() {\n    return \"ChangedSecurityRequirements(oldSecurityRequirements=\"\n        + this.getOldSecurityRequirements()\n        + \", newSecurityRequirements=\"\n        + this.getNewSecurityRequirements()\n        + \", missing=\"\n        + this.getMissing()\n        + \", increased=\"\n        + this.getIncreased()\n        + \", changed=\"\n        + this.getChanged()\n        + \")\";\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements.java", "class_name": "ChangedSecurityRequirements", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements.java.ChangedSecurityRequirements", "attributes": {"modifiers": "@java.lang.Override\n  public", "marker_annotations": ["@java.lang.Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "java.lang.String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPaths.java.ChangedPaths.[]ChangedPaths(Map<String, PathItem>,Map<String, PathItem>,OpenApiDiffOptions)", "name": "ChangedPaths", "arg_nums": 3, "params": [{"name": "oldPathMap", "type": "Map<String, PathItem>"}, {"name": "newPathMap", "type": "Map<String, PathItem>"}, {"name": "options", "type": "OpenApiDiffOptions"}], "return_type": "", "signature": "public ChangedPaths(\n      Map<String, PathItem> oldPathMap,\n      Map<String, PathItem> newPathMap,\n      OpenApiDiffOptions options)", "original_string": "  public ChangedPaths(\n      Map<String, PathItem> oldPathMap,\n      Map<String, PathItem> newPathMap,\n      OpenApiDiffOptions options) {\n    this.options = options;\n    this.oldPathMap = oldPathMap;\n    this.newPathMap = newPathMap;\n    this.increased = new LinkedHashMap<>();\n    this.missing = new LinkedHashMap<>();\n    this.changed = new LinkedHashMap<>();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPaths.java", "class_name": "ChangedPaths", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPaths.java.ChangedPaths", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPaths.java.ChangedPaths.[List<Changed>]getChangedElements()", "name": "getChangedElements", "arg_nums": 0, "params": [], "return_type": "List<Changed>", "signature": "@Override\n  public List<Changed> getChangedElements()", "original_string": "  @Override\n  public List<Changed> getChangedElements() {\n    return new ArrayList<>(changed.values());\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPaths.java", "class_name": "ChangedPaths", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPaths.java.ChangedPaths", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<Changed>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPaths.java.ChangedPaths.[DiffResult]isCoreChanged()", "name": "isCoreChanged", "arg_nums": 0, "params": [], "return_type": "DiffResult", "signature": "@Override\n  public DiffResult isCoreChanged()", "original_string": "  @Override\n  public DiffResult isCoreChanged() {\n    if (increased.isEmpty() && missing.isEmpty()) {\n      return DiffResult.NO_CHANGES;\n    }\n    if (!missing.isEmpty()) {\n      if (OPENAPI_ENDPOINTS_DECREASED.enabled(options.getConfig())) {\n        return DiffResult.INCOMPATIBLE;\n      }\n    }\n    return DiffResult.COMPATIBLE;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPaths.java", "class_name": "ChangedPaths", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPaths.java.ChangedPaths", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "DiffResult", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPaths.java.ChangedPaths.[Map<String, PathItem>]getOldPathMap()", "name": "getOldPathMap", "arg_nums": 0, "params": [], "return_type": "Map<String, PathItem>", "signature": "public Map<String, PathItem> getOldPathMap()", "original_string": "  public Map<String, PathItem> getOldPathMap() {\n    return this.oldPathMap;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPaths.java", "class_name": "ChangedPaths", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPaths.java.ChangedPaths", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Map<String, PathItem>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPaths.java.ChangedPaths.[Map<String, PathItem>]getNewPathMap()", "name": "getNewPathMap", "arg_nums": 0, "params": [], "return_type": "Map<String, PathItem>", "signature": "public Map<String, PathItem> getNewPathMap()", "original_string": "  public Map<String, PathItem> getNewPathMap() {\n    return this.newPathMap;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPaths.java", "class_name": "ChangedPaths", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPaths.java.ChangedPaths", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Map<String, PathItem>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPaths.java.ChangedPaths.[Map<String, PathItem>]getIncreased()", "name": "getIncreased", "arg_nums": 0, "params": [], "return_type": "Map<String, PathItem>", "signature": "public Map<String, PathItem> getIncreased()", "original_string": "  public Map<String, PathItem> getIncreased() {\n    return this.increased;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPaths.java", "class_name": "ChangedPaths", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPaths.java.ChangedPaths", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Map<String, PathItem>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPaths.java.ChangedPaths.[Map<String, PathItem>]getMissing()", "name": "getMissing", "arg_nums": 0, "params": [], "return_type": "Map<String, PathItem>", "signature": "public Map<String, PathItem> getMissing()", "original_string": "  public Map<String, PathItem> getMissing() {\n    return this.missing;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPaths.java", "class_name": "ChangedPaths", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPaths.java.ChangedPaths", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Map<String, PathItem>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPaths.java.ChangedPaths.[Map<String, ChangedPath>]getChanged()", "name": "getChanged", "arg_nums": 0, "params": [], "return_type": "Map<String, ChangedPath>", "signature": "public Map<String, ChangedPath> getChanged()", "original_string": "  public Map<String, ChangedPath> getChanged() {\n    return this.changed;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPaths.java", "class_name": "ChangedPaths", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPaths.java.ChangedPaths", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Map<String, ChangedPath>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPaths.java.ChangedPaths.[void]setIncreased(Map<String, PathItem>)", "name": "setIncreased", "arg_nums": 1, "params": [{"name": "increased", "type": "Map<String, PathItem>"}], "return_type": "void", "signature": "public void setIncreased(final Map<String, PathItem> increased)", "original_string": "  public void setIncreased(final Map<String, PathItem> increased) {\n    this.increased = increased;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPaths.java", "class_name": "ChangedPaths", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPaths.java.ChangedPaths", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPaths.java.ChangedPaths.[void]setMissing(Map<String, PathItem>)", "name": "setMissing", "arg_nums": 1, "params": [{"name": "missing", "type": "Map<String, PathItem>"}], "return_type": "void", "signature": "public void setMissing(final Map<String, PathItem> missing)", "original_string": "  public void setMissing(final Map<String, PathItem> missing) {\n    this.missing = missing;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPaths.java", "class_name": "ChangedPaths", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPaths.java.ChangedPaths", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPaths.java.ChangedPaths.[void]setChanged(Map<String, ChangedPath>)", "name": "setChanged", "arg_nums": 1, "params": [{"name": "changed", "type": "Map<String, ChangedPath>"}], "return_type": "void", "signature": "public void setChanged(final Map<String, ChangedPath> changed)", "original_string": "  public void setChanged(final Map<String, ChangedPath> changed) {\n    this.changed = changed;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPaths.java", "class_name": "ChangedPaths", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPaths.java.ChangedPaths", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPaths.java.ChangedPaths.[boolean]equals(Object)", "name": "equals", "arg_nums": 1, "params": [{"name": "o", "type": "Object"}], "return_type": "boolean", "signature": "@Override\n  public boolean equals(Object o)", "original_string": "  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    ChangedPaths that = (ChangedPaths) o;\n    return Objects.equals(oldPathMap, that.oldPathMap)\n        && Objects.equals(newPathMap, that.newPathMap)\n        && Objects.equals(increased, that.increased)\n        && Objects.equals(missing, that.missing)\n        && Objects.equals(changed, that.changed);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPaths.java", "class_name": "ChangedPaths", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPaths.java.ChangedPaths", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPaths.java.ChangedPaths.[int]hashCode()", "name": "hashCode", "arg_nums": 0, "params": [], "return_type": "int", "signature": "@Override\n  public int hashCode()", "original_string": "  @Override\n  public int hashCode() {\n    return Objects.hash(oldPathMap, newPathMap, increased, missing, changed);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPaths.java", "class_name": "ChangedPaths", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPaths.java.ChangedPaths", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPaths.java.ChangedPaths.[java.lang.String]toString()", "name": "toString", "arg_nums": 0, "params": [], "return_type": "java.lang.String", "signature": "@java.lang.Override\n  public java.lang.String toString()", "original_string": "  @java.lang.Override\n  public java.lang.String toString() {\n    return \"ChangedPaths(oldPathMap=\"\n        + this.getOldPathMap()\n        + \", newPathMap=\"\n        + this.getNewPathMap()\n        + \", increased=\"\n        + this.getIncreased()\n        + \", missing=\"\n        + this.getMissing()\n        + \", changed=\"\n        + this.getChanged()\n        + \")\";\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPaths.java", "class_name": "ChangedPaths", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPaths.java.ChangedPaths", "attributes": {"modifiers": "@java.lang.Override\n  public", "marker_annotations": ["@java.lang.Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "java.lang.String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedResponse.java.ChangedResponse.[]ChangedResponse(ApiResponse,ApiResponse,DiffContext)", "name": "ChangedResponse", "arg_nums": 3, "params": [{"name": "oldApiResponse", "type": "ApiResponse"}, {"name": "newApiResponse", "type": "ApiResponse"}, {"name": "context", "type": "DiffContext"}], "return_type": "", "signature": "public ChangedResponse(\n      ApiResponse oldApiResponse, ApiResponse newApiResponse, DiffContext context)", "original_string": "  public ChangedResponse(\n      ApiResponse oldApiResponse, ApiResponse newApiResponse, DiffContext context) {\n    this.oldApiResponse = oldApiResponse;\n    this.newApiResponse = newApiResponse;\n    this.context = context;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedResponse.java", "class_name": "ChangedResponse", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedResponse.java.ChangedResponse", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedResponse.java.ChangedResponse.[List<Changed>]getChangedElements()", "name": "getChangedElements", "arg_nums": 0, "params": [], "return_type": "List<Changed>", "signature": "@Override\n  public List<Changed> getChangedElements()", "original_string": "  @Override\n  public List<Changed> getChangedElements() {\n    return Arrays.asList(description, headers, content, extensions);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedResponse.java", "class_name": "ChangedResponse", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedResponse.java.ChangedResponse", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<Changed>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedResponse.java.ChangedResponse.[DiffResult]isCoreChanged()", "name": "isCoreChanged", "arg_nums": 0, "params": [], "return_type": "DiffResult", "signature": "@Override\n  public DiffResult isCoreChanged()", "original_string": "  @Override\n  public DiffResult isCoreChanged() {\n    return DiffResult.NO_CHANGES;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedResponse.java", "class_name": "ChangedResponse", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedResponse.java.ChangedResponse", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "DiffResult", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedResponse.java.ChangedResponse.[ApiResponse]getOldApiResponse()", "name": "getOldApiResponse", "arg_nums": 0, "params": [], "return_type": "ApiResponse", "signature": "public ApiResponse getOldApiResponse()", "original_string": "  public ApiResponse getOldApiResponse() {\n    return this.oldApiResponse;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedResponse.java", "class_name": "ChangedResponse", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedResponse.java.ChangedResponse", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ApiResponse", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedResponse.java.ChangedResponse.[ApiResponse]getNewApiResponse()", "name": "getNewApiResponse", "arg_nums": 0, "params": [], "return_type": "ApiResponse", "signature": "public ApiResponse getNewApiResponse()", "original_string": "  public ApiResponse getNewApiResponse() {\n    return this.newApiResponse;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedResponse.java", "class_name": "ChangedResponse", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedResponse.java.ChangedResponse", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ApiResponse", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedResponse.java.ChangedResponse.[DiffContext]getContext()", "name": "getContext", "arg_nums": 0, "params": [], "return_type": "DiffContext", "signature": "public DiffContext getContext()", "original_string": "  public DiffContext getContext() {\n    return this.context;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedResponse.java", "class_name": "ChangedResponse", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedResponse.java.ChangedResponse", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "DiffContext", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedResponse.java.ChangedResponse.[ChangedMetadata]getDescription()", "name": "getDescription", "arg_nums": 0, "params": [], "return_type": "ChangedMetadata", "signature": "public ChangedMetadata getDescription()", "original_string": "  public ChangedMetadata getDescription() {\n    return this.description;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedResponse.java", "class_name": "ChangedResponse", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedResponse.java.ChangedResponse", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedMetadata", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedResponse.java.ChangedResponse.[ChangedHeaders]getHeaders()", "name": "getHeaders", "arg_nums": 0, "params": [], "return_type": "ChangedHeaders", "signature": "public ChangedHeaders getHeaders()", "original_string": "  public ChangedHeaders getHeaders() {\n    return this.headers;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedResponse.java", "class_name": "ChangedResponse", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedResponse.java.ChangedResponse", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedHeaders", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedResponse.java.ChangedResponse.[ChangedContent]getContent()", "name": "getContent", "arg_nums": 0, "params": [], "return_type": "ChangedContent", "signature": "public ChangedContent getContent()", "original_string": "  public ChangedContent getContent() {\n    return this.content;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedResponse.java", "class_name": "ChangedResponse", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedResponse.java.ChangedResponse", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedContent", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedResponse.java.ChangedResponse.[ChangedExtensions]getExtensions()", "name": "getExtensions", "arg_nums": 0, "params": [], "return_type": "ChangedExtensions", "signature": "public ChangedExtensions getExtensions()", "original_string": "  public ChangedExtensions getExtensions() {\n    return this.extensions;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedResponse.java", "class_name": "ChangedResponse", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedResponse.java.ChangedResponse", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedExtensions", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedResponse.java.ChangedResponse.[ChangedResponse]setDescription(ChangedMetadata)", "name": "setDescription", "arg_nums": 1, "params": [{"name": "description", "type": "ChangedMetadata"}], "return_type": "ChangedResponse", "signature": "public ChangedResponse setDescription(final ChangedMetadata description)", "original_string": "  public ChangedResponse setDescription(final ChangedMetadata description) {\n    this.description = description;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedResponse.java", "class_name": "ChangedResponse", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedResponse.java.ChangedResponse", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedResponse", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedResponse.java.ChangedResponse.[ChangedResponse]setHeaders(ChangedHeaders)", "name": "setHeaders", "arg_nums": 1, "params": [{"name": "headers", "type": "ChangedHeaders"}], "return_type": "ChangedResponse", "signature": "public ChangedResponse setHeaders(final ChangedHeaders headers)", "original_string": "  public ChangedResponse setHeaders(final ChangedHeaders headers) {\n    this.headers = headers;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedResponse.java", "class_name": "ChangedResponse", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedResponse.java.ChangedResponse", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedResponse", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedResponse.java.ChangedResponse.[ChangedResponse]setContent(ChangedContent)", "name": "setContent", "arg_nums": 1, "params": [{"name": "content", "type": "ChangedContent"}], "return_type": "ChangedResponse", "signature": "public ChangedResponse setContent(final ChangedContent content)", "original_string": "  public ChangedResponse setContent(final ChangedContent content) {\n    this.content = content;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedResponse.java", "class_name": "ChangedResponse", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedResponse.java.ChangedResponse", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedResponse", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedResponse.java.ChangedResponse.[ChangedResponse]setExtensions(ChangedExtensions)", "name": "setExtensions", "arg_nums": 1, "params": [{"name": "extensions", "type": "ChangedExtensions"}], "return_type": "ChangedResponse", "signature": "public ChangedResponse setExtensions(final ChangedExtensions extensions)", "original_string": "  public ChangedResponse setExtensions(final ChangedExtensions extensions) {\n    this.extensions = extensions;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedResponse.java", "class_name": "ChangedResponse", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedResponse.java.ChangedResponse", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedResponse", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedResponse.java.ChangedResponse.[boolean]equals(Object)", "name": "equals", "arg_nums": 1, "params": [{"name": "o", "type": "Object"}], "return_type": "boolean", "signature": "@Override\n  public boolean equals(Object o)", "original_string": "  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    ChangedResponse that = (ChangedResponse) o;\n    return Objects.equals(oldApiResponse, that.oldApiResponse)\n        && Objects.equals(newApiResponse, that.newApiResponse)\n        && Objects.equals(context, that.context)\n        && Objects.equals(description, that.description)\n        && Objects.equals(headers, that.headers)\n        && Objects.equals(content, that.content)\n        && Objects.equals(extensions, that.extensions);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedResponse.java", "class_name": "ChangedResponse", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedResponse.java.ChangedResponse", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedResponse.java.ChangedResponse.[int]hashCode()", "name": "hashCode", "arg_nums": 0, "params": [], "return_type": "int", "signature": "@Override\n  public int hashCode()", "original_string": "  @Override\n  public int hashCode() {\n    return Objects.hash(\n        oldApiResponse, newApiResponse, context, description, headers, content, extensions);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedResponse.java", "class_name": "ChangedResponse", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedResponse.java.ChangedResponse", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedResponse.java.ChangedResponse.[java.lang.String]toString()", "name": "toString", "arg_nums": 0, "params": [], "return_type": "java.lang.String", "signature": "@java.lang.Override\n  public java.lang.String toString()", "original_string": "  @java.lang.Override\n  public java.lang.String toString() {\n    return \"ChangedResponse(oldApiResponse=\"\n        + this.getOldApiResponse()\n        + \", newApiResponse=\"\n        + this.getNewApiResponse()\n        + \", context=\"\n        + this.getContext()\n        + \", description=\"\n        + this.getDescription()\n        + \", headers=\"\n        + this.getHeaders()\n        + \", content=\"\n        + this.getContent()\n        + \", extensions=\"\n        + this.getExtensions()\n        + \")\";\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedResponse.java", "class_name": "ChangedResponse", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedResponse.java.ChangedResponse", "attributes": {"modifiers": "@java.lang.Override\n  public", "marker_annotations": ["@java.lang.Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "java.lang.String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/Endpoint.java.Endpoint.[String]toString()", "name": "toString", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Override\n  public String toString()", "original_string": "  @Override\n  public String toString() {\n    return method + \" \" + pathUrl;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/Endpoint.java", "class_name": "Endpoint", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/Endpoint.java.Endpoint", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/Endpoint.java.Endpoint.[String]getPathUrl()", "name": "getPathUrl", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getPathUrl()", "original_string": "  public String getPathUrl() {\n    return this.pathUrl;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/Endpoint.java", "class_name": "Endpoint", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/Endpoint.java.Endpoint", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/Endpoint.java.Endpoint.[PathItem.HttpMethod]getMethod()", "name": "getMethod", "arg_nums": 0, "params": [], "return_type": "PathItem.HttpMethod", "signature": "public PathItem.HttpMethod getMethod()", "original_string": "  public PathItem.HttpMethod getMethod() {\n    return this.method;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/Endpoint.java", "class_name": "Endpoint", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/Endpoint.java.Endpoint", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "PathItem.HttpMethod", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/Endpoint.java.Endpoint.[String]getSummary()", "name": "getSummary", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getSummary()", "original_string": "  public String getSummary() {\n    return this.summary;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/Endpoint.java", "class_name": "Endpoint", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/Endpoint.java.Endpoint", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/Endpoint.java.Endpoint.[PathItem]getPath()", "name": "getPath", "arg_nums": 0, "params": [], "return_type": "PathItem", "signature": "public PathItem getPath()", "original_string": "  public PathItem getPath() {\n    return this.path;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/Endpoint.java", "class_name": "Endpoint", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/Endpoint.java.Endpoint", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "PathItem", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/Endpoint.java.Endpoint.[Operation]getOperation()", "name": "getOperation", "arg_nums": 0, "params": [], "return_type": "Operation", "signature": "public Operation getOperation()", "original_string": "  public Operation getOperation() {\n    return this.operation;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/Endpoint.java", "class_name": "Endpoint", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/Endpoint.java.Endpoint", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Operation", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/Endpoint.java.Endpoint.[void]setPathUrl(String)", "name": "setPathUrl", "arg_nums": 1, "params": [{"name": "pathUrl", "type": "String"}], "return_type": "void", "signature": "public void setPathUrl(final String pathUrl)", "original_string": "  public void setPathUrl(final String pathUrl) {\n    this.pathUrl = pathUrl;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/Endpoint.java", "class_name": "Endpoint", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/Endpoint.java.Endpoint", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/Endpoint.java.Endpoint.[void]setMethod(PathItem.HttpMethod)", "name": "setMethod", "arg_nums": 1, "params": [{"name": "method", "type": "PathItem.HttpMethod"}], "return_type": "void", "signature": "public void setMethod(final PathItem.HttpMethod method)", "original_string": "  public void setMethod(final PathItem.HttpMethod method) {\n    this.method = method;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/Endpoint.java", "class_name": "Endpoint", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/Endpoint.java.Endpoint", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/Endpoint.java.Endpoint.[void]setSummary(String)", "name": "setSummary", "arg_nums": 1, "params": [{"name": "summary", "type": "String"}], "return_type": "void", "signature": "public void setSummary(final String summary)", "original_string": "  public void setSummary(final String summary) {\n    this.summary = summary;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/Endpoint.java", "class_name": "Endpoint", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/Endpoint.java.Endpoint", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/Endpoint.java.Endpoint.[void]setPath(PathItem)", "name": "setPath", "arg_nums": 1, "params": [{"name": "path", "type": "PathItem"}], "return_type": "void", "signature": "public void setPath(final PathItem path)", "original_string": "  public void setPath(final PathItem path) {\n    this.path = path;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/Endpoint.java", "class_name": "Endpoint", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/Endpoint.java.Endpoint", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/Endpoint.java.Endpoint.[void]setOperation(Operation)", "name": "setOperation", "arg_nums": 1, "params": [{"name": "operation", "type": "Operation"}], "return_type": "void", "signature": "public void setOperation(final Operation operation)", "original_string": "  public void setOperation(final Operation operation) {\n    this.operation = operation;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/Endpoint.java", "class_name": "Endpoint", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/Endpoint.java.Endpoint", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/Endpoint.java.Endpoint.[boolean]equals(Object)", "name": "equals", "arg_nums": 1, "params": [{"name": "o", "type": "Object"}], "return_type": "boolean", "signature": "@Override\n  public boolean equals(Object o)", "original_string": "  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    Endpoint endpoint = (Endpoint) o;\n    return Objects.equals(pathUrl, endpoint.pathUrl)\n        && method == endpoint.method\n        && Objects.equals(summary, endpoint.summary)\n        && Objects.equals(path, endpoint.path)\n        && Objects.equals(operation, endpoint.operation);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/Endpoint.java", "class_name": "Endpoint", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/Endpoint.java.Endpoint", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/Endpoint.java.Endpoint.[int]hashCode()", "name": "hashCode", "arg_nums": 0, "params": [], "return_type": "int", "signature": "@Override\n  public int hashCode()", "original_string": "  @Override\n  public int hashCode() {\n    return Objects.hash(pathUrl, method, summary, path, operation);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/Endpoint.java", "class_name": "Endpoint", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/Endpoint.java.Endpoint", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedExtensions.java.ChangedExtensions.[]ChangedExtensions(Map<String, Object>,Map<String, Object>,DiffContext)", "name": "ChangedExtensions", "arg_nums": 3, "params": [{"name": "oldExtensions", "type": "Map<String, Object>"}, {"name": "newExtensions", "type": "Map<String, Object>"}, {"name": "context", "type": "DiffContext"}], "return_type": "", "signature": "public ChangedExtensions(\n      Map<String, Object> oldExtensions, Map<String, Object> newExtensions, DiffContext context)", "original_string": "  public ChangedExtensions(\n      Map<String, Object> oldExtensions, Map<String, Object> newExtensions, DiffContext context) {\n    this.oldExtensions = oldExtensions;\n    this.newExtensions = newExtensions;\n    this.context = context;\n    this.increased = new LinkedHashMap<>();\n    this.missing = new LinkedHashMap<>();\n    this.changed = new LinkedHashMap<>();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedExtensions.java", "class_name": "ChangedExtensions", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedExtensions.java.ChangedExtensions", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedExtensions.java.ChangedExtensions.[List<Changed>]getChangedElements()", "name": "getChangedElements", "arg_nums": 0, "params": [], "return_type": "List<Changed>", "signature": "@Override\n  public List<Changed> getChangedElements()", "original_string": "  @Override\n  public List<Changed> getChangedElements() {\n    return Stream.of(increased, missing, changed)\n        .map(Map::values)\n        .flatMap(Collection::stream)\n        .collect(Collectors.toList());\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedExtensions.java", "class_name": "ChangedExtensions", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedExtensions.java.ChangedExtensions", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<Changed>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedExtensions.java.ChangedExtensions.[DiffResult]isCoreChanged()", "name": "isCoreChanged", "arg_nums": 0, "params": [], "return_type": "DiffResult", "signature": "@Override\n  public DiffResult isCoreChanged()", "original_string": "  @Override\n  public DiffResult isCoreChanged() {\n    if (increased.isEmpty() && missing.isEmpty()) {\n      return DiffResult.NO_CHANGES;\n    }\n    if (!missing.isEmpty()) {\n      if (EXTENSION_CONTENT_TYPES_DECREASED.enabled(context)) {\n        return DiffResult.INCOMPATIBLE;\n      }\n      for (String key : missing.keySet()) {\n        if (EXTENSION_CONTENT_TYPE_DELETED.enabled(context, key)) {\n          return DiffResult.INCOMPATIBLE;\n        }\n      }\n    }\n    return DiffResult.COMPATIBLE;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedExtensions.java", "class_name": "ChangedExtensions", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedExtensions.java.ChangedExtensions", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "DiffResult", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedExtensions.java.ChangedExtensions.[Map<String, Object>]getOldExtensions()", "name": "getOldExtensions", "arg_nums": 0, "params": [], "return_type": "Map<String, Object>", "signature": "public Map<String, Object> getOldExtensions()", "original_string": "  public Map<String, Object> getOldExtensions() {\n    return this.oldExtensions;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedExtensions.java", "class_name": "ChangedExtensions", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedExtensions.java.ChangedExtensions", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Map<String, Object>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedExtensions.java.ChangedExtensions.[Map<String, Object>]getNewExtensions()", "name": "getNewExtensions", "arg_nums": 0, "params": [], "return_type": "Map<String, Object>", "signature": "public Map<String, Object> getNewExtensions()", "original_string": "  public Map<String, Object> getNewExtensions() {\n    return this.newExtensions;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedExtensions.java", "class_name": "ChangedExtensions", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedExtensions.java.ChangedExtensions", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Map<String, Object>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedExtensions.java.ChangedExtensions.[DiffContext]getContext()", "name": "getContext", "arg_nums": 0, "params": [], "return_type": "DiffContext", "signature": "public DiffContext getContext()", "original_string": "  public DiffContext getContext() {\n    return this.context;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedExtensions.java", "class_name": "ChangedExtensions", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedExtensions.java.ChangedExtensions", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "DiffContext", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedExtensions.java.ChangedExtensions.[Map<String, Changed>]getIncreased()", "name": "getIncreased", "arg_nums": 0, "params": [], "return_type": "Map<String, Changed>", "signature": "public Map<String, Changed> getIncreased()", "original_string": "  public Map<String, Changed> getIncreased() {\n    return this.increased;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedExtensions.java", "class_name": "ChangedExtensions", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedExtensions.java.ChangedExtensions", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Map<String, Changed>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedExtensions.java.ChangedExtensions.[Map<String, Changed>]getMissing()", "name": "getMissing", "arg_nums": 0, "params": [], "return_type": "Map<String, Changed>", "signature": "public Map<String, Changed> getMissing()", "original_string": "  public Map<String, Changed> getMissing() {\n    return this.missing;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedExtensions.java", "class_name": "ChangedExtensions", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedExtensions.java.ChangedExtensions", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Map<String, Changed>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedExtensions.java.ChangedExtensions.[Map<String, Changed>]getChanged()", "name": "getChanged", "arg_nums": 0, "params": [], "return_type": "Map<String, Changed>", "signature": "public Map<String, Changed> getChanged()", "original_string": "  public Map<String, Changed> getChanged() {\n    return this.changed;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedExtensions.java", "class_name": "ChangedExtensions", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedExtensions.java.ChangedExtensions", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Map<String, Changed>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedExtensions.java.ChangedExtensions.[void]setIncreased(Map<String, Changed>)", "name": "setIncreased", "arg_nums": 1, "params": [{"name": "increased", "type": "Map<String, Changed>"}], "return_type": "void", "signature": "public void setIncreased(final Map<String, Changed> increased)", "original_string": "  public void setIncreased(final Map<String, Changed> increased) {\n    this.increased = increased;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedExtensions.java", "class_name": "ChangedExtensions", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedExtensions.java.ChangedExtensions", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedExtensions.java.ChangedExtensions.[void]setMissing(Map<String, Changed>)", "name": "setMissing", "arg_nums": 1, "params": [{"name": "missing", "type": "Map<String, Changed>"}], "return_type": "void", "signature": "public void setMissing(final Map<String, Changed> missing)", "original_string": "  public void setMissing(final Map<String, Changed> missing) {\n    this.missing = missing;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedExtensions.java", "class_name": "ChangedExtensions", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedExtensions.java.ChangedExtensions", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedExtensions.java.ChangedExtensions.[void]setChanged(Map<String, Changed>)", "name": "setChanged", "arg_nums": 1, "params": [{"name": "changed", "type": "Map<String, Changed>"}], "return_type": "void", "signature": "public void setChanged(final Map<String, Changed> changed)", "original_string": "  public void setChanged(final Map<String, Changed> changed) {\n    this.changed = changed;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedExtensions.java", "class_name": "ChangedExtensions", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedExtensions.java.ChangedExtensions", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedExtensions.java.ChangedExtensions.[boolean]equals(Object)", "name": "equals", "arg_nums": 1, "params": [{"name": "o", "type": "Object"}], "return_type": "boolean", "signature": "@Override\n  public boolean equals(Object o)", "original_string": "  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    ChangedExtensions that = (ChangedExtensions) o;\n    return Objects.equals(oldExtensions, that.oldExtensions)\n        && Objects.equals(newExtensions, that.newExtensions)\n        && Objects.equals(context, that.context)\n        && Objects.equals(increased, that.increased)\n        && Objects.equals(missing, that.missing)\n        && Objects.equals(changed, that.changed);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedExtensions.java", "class_name": "ChangedExtensions", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedExtensions.java.ChangedExtensions", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedExtensions.java.ChangedExtensions.[int]hashCode()", "name": "hashCode", "arg_nums": 0, "params": [], "return_type": "int", "signature": "@Override\n  public int hashCode()", "original_string": "  @Override\n  public int hashCode() {\n    return Objects.hash(oldExtensions, newExtensions, context, increased, missing, changed);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedExtensions.java", "class_name": "ChangedExtensions", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedExtensions.java.ChangedExtensions", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedExtensions.java.ChangedExtensions.[java.lang.String]toString()", "name": "toString", "arg_nums": 0, "params": [], "return_type": "java.lang.String", "signature": "@java.lang.Override\n  public java.lang.String toString()", "original_string": "  @java.lang.Override\n  public java.lang.String toString() {\n    return \"ChangedExtensions(oldExtensions=\"\n        + this.getOldExtensions()\n        + \", newExtensions=\"\n        + this.getNewExtensions()\n        + \", context=\"\n        + this.getContext()\n        + \", increased=\"\n        + this.getIncreased()\n        + \", missing=\"\n        + this.getMissing()\n        + \", changed=\"\n        + this.getChanged()\n        + \")\";\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedExtensions.java", "class_name": "ChangedExtensions", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedExtensions.java.ChangedExtensions", "attributes": {"modifiers": "@java.lang.Override\n  public", "marker_annotations": ["@java.lang.Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "java.lang.String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java.DiffContext.[]DiffContext(OpenApiDiffOptions)", "name": "DiffContext", "arg_nums": 1, "params": [{"name": "options", "type": "OpenApiDiffOptions"}], "return_type": "", "signature": "public DiffContext(OpenApiDiffOptions options)", "original_string": "  public DiffContext(OpenApiDiffOptions options) {\n    this.options = options;\n    parameters = new HashMap<>();\n    response = false;\n    request = true;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java", "class_name": "DiffContext", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java.DiffContext", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java.DiffContext.[DiffContext]copyWithMethod(PathItem.HttpMethod)", "name": "copyWithMethod", "arg_nums": 1, "params": [{"name": "method", "type": "PathItem.HttpMethod"}], "return_type": "DiffContext", "signature": "public DiffContext copyWithMethod(PathItem.HttpMethod method)", "original_string": "  public DiffContext copyWithMethod(PathItem.HttpMethod method) {\n    return copy().setMethod(method);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java", "class_name": "DiffContext", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java.DiffContext", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "DiffContext", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java.DiffContext.[DiffContext]copyWithRequired(boolean)", "name": "copyWithRequired", "arg_nums": 1, "params": [{"name": "required", "type": "boolean"}], "return_type": "DiffContext", "signature": "public DiffContext copyWithRequired(boolean required)", "original_string": "  public DiffContext copyWithRequired(boolean required) {\n    return copy().setRequired(required);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java", "class_name": "DiffContext", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java.DiffContext", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "DiffContext", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java.DiffContext.[DiffContext]copyAsRequest()", "name": "copyAsRequest", "arg_nums": 0, "params": [], "return_type": "DiffContext", "signature": "public DiffContext copyAsRequest()", "original_string": "  public DiffContext copyAsRequest() {\n    return copy().setRequest();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java", "class_name": "DiffContext", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java.DiffContext", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "DiffContext", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java.DiffContext.[DiffContext]copyAsResponse()", "name": "copyAsResponse", "arg_nums": 0, "params": [], "return_type": "DiffContext", "signature": "public DiffContext copyAsResponse()", "original_string": "  public DiffContext copyAsResponse() {\n    return copy().setResponse();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java", "class_name": "DiffContext", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java.DiffContext", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "DiffContext", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java.DiffContext.[DiffContext]copyWithLeftRightUrls(String,String)", "name": "copyWithLeftRightUrls", "arg_nums": 2, "params": [{"name": "leftUrl", "type": "String"}, {"name": "rightUrl", "type": "String"}], "return_type": "DiffContext", "signature": "public DiffContext copyWithLeftRightUrls(String leftUrl, String rightUrl)", "original_string": "  public DiffContext copyWithLeftRightUrls(String leftUrl, String rightUrl) {\n    return copy().setLeftAndRightUrls(leftUrl, rightUrl);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java", "class_name": "DiffContext", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java.DiffContext", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "DiffContext", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java.DiffContext.[OpenApiDiffOptions]getOptions()", "name": "getOptions", "arg_nums": 0, "params": [], "return_type": "OpenApiDiffOptions", "signature": "@JsonIgnore\n  public OpenApiDiffOptions getOptions()", "original_string": "  @JsonIgnore\n  public OpenApiDiffOptions getOptions() {\n    return options;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java", "class_name": "DiffContext", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java.DiffContext", "attributes": {"modifiers": "@JsonIgnore\n  public", "marker_annotations": ["@JsonIgnore"], "non_marker_annotations": ["public"], "comments": [], "return_type": "OpenApiDiffOptions", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java.DiffContext.[Configuration]getConfig()", "name": "getConfig", "arg_nums": 0, "params": [], "return_type": "Configuration", "signature": "@JsonIgnore\n  public Configuration getConfig()", "original_string": "  @JsonIgnore\n  public Configuration getConfig() {\n    return options.getConfig();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java", "class_name": "DiffContext", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java.DiffContext", "attributes": {"modifiers": "@JsonIgnore\n  public", "marker_annotations": ["@JsonIgnore"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Configuration", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java.DiffContext.[DiffContext]setRequest()", "name": "setRequest", "arg_nums": 0, "params": [], "return_type": "DiffContext", "signature": "private DiffContext setRequest()", "original_string": "  private DiffContext setRequest() {\n    this.request = true;\n    this.response = false;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java", "class_name": "DiffContext", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java.DiffContext", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "DiffContext", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java.DiffContext.[DiffContext]setResponse()", "name": "setResponse", "arg_nums": 0, "params": [], "return_type": "DiffContext", "signature": "private DiffContext setResponse()", "original_string": "  private DiffContext setResponse() {\n    this.response = true;\n    this.request = false;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java", "class_name": "DiffContext", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java.DiffContext", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "DiffContext", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java.DiffContext.[boolean]isResponse()", "name": "isResponse", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "public boolean isResponse()", "original_string": "  public boolean isResponse() {\n    return this.response;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java", "class_name": "DiffContext", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java.DiffContext", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java.DiffContext.[boolean]isRequest()", "name": "isRequest", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "public boolean isRequest()", "original_string": "  public boolean isRequest() {\n    return this.request;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java", "class_name": "DiffContext", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java.DiffContext", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java.DiffContext.[String]getUrl()", "name": "getUrl", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getUrl()", "original_string": "  public String getUrl() {\n    return url;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java", "class_name": "DiffContext", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java.DiffContext", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java.DiffContext.[DiffContext]setUrl(String)", "name": "setUrl", "arg_nums": 1, "params": [{"name": "url", "type": "String"}], "return_type": "DiffContext", "signature": "public DiffContext setUrl(String url)", "original_string": "  public DiffContext setUrl(String url) {\n    this.url = url;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java", "class_name": "DiffContext", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java.DiffContext", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "DiffContext", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java.DiffContext.[PathItem.HttpMethod]getMethod()", "name": "getMethod", "arg_nums": 0, "params": [], "return_type": "PathItem.HttpMethod", "signature": "public PathItem.HttpMethod getMethod()", "original_string": "  public PathItem.HttpMethod getMethod() {\n    return method;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java", "class_name": "DiffContext", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java.DiffContext", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "PathItem.HttpMethod", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java.DiffContext.[DiffContext]setMethod(PathItem.HttpMethod)", "name": "setMethod", "arg_nums": 1, "params": [{"name": "method", "type": "PathItem.HttpMethod"}], "return_type": "DiffContext", "signature": "private DiffContext setMethod(PathItem.HttpMethod method)", "original_string": "  private DiffContext setMethod(PathItem.HttpMethod method) {\n    this.method = method;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java", "class_name": "DiffContext", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java.DiffContext", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "DiffContext", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java.DiffContext.[DiffContext]copy()", "name": "copy", "arg_nums": 0, "params": [], "return_type": "DiffContext", "signature": "private DiffContext copy()", "original_string": "  private DiffContext copy() {\n    DiffContext context = new DiffContext(options);\n    context.url = this.url;\n    context.parameters = this.parameters;\n    context.method = this.method;\n    context.response = this.response;\n    context.request = this.request;\n    context.required = this.required;\n    return context;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java", "class_name": "DiffContext", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java.DiffContext", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "DiffContext", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java.DiffContext.[Map<String, String>]getParameters()", "name": "getParameters", "arg_nums": 0, "params": [], "return_type": "Map<String, String>", "signature": "public Map<String, String> getParameters()", "original_string": "  public Map<String, String> getParameters() {\n    return parameters;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java", "class_name": "DiffContext", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java.DiffContext", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Map<String, String>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java.DiffContext.[DiffContext]setParameters(Map<String, String>)", "name": "setParameters", "arg_nums": 1, "params": [{"name": "parameters", "type": "Map<String, String>"}], "return_type": "DiffContext", "signature": "public DiffContext setParameters(Map<String, String> parameters)", "original_string": "  public DiffContext setParameters(Map<String, String> parameters) {\n    this.parameters = parameters;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java", "class_name": "DiffContext", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java.DiffContext", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "DiffContext", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java.DiffContext.[Boolean]isRequired()", "name": "isRequired", "arg_nums": 0, "params": [], "return_type": "Boolean", "signature": "public Boolean isRequired()", "original_string": "  public Boolean isRequired() {\n    return required;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java", "class_name": "DiffContext", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java.DiffContext", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java.DiffContext.[DiffContext]setRequired(boolean)", "name": "setRequired", "arg_nums": 1, "params": [{"name": "required", "type": "boolean"}], "return_type": "DiffContext", "signature": "private DiffContext setRequired(boolean required)", "original_string": "  private DiffContext setRequired(boolean required) {\n    this.required = required;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java", "class_name": "DiffContext", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java.DiffContext", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "DiffContext", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java.DiffContext.[DiffContext]setLeftAndRightUrls(String,String)", "name": "setLeftAndRightUrls", "arg_nums": 2, "params": [{"name": "leftUrl", "type": "String"}, {"name": "rightUrl", "type": "String"}], "return_type": "DiffContext", "signature": "public DiffContext setLeftAndRightUrls(String leftUrl, String rightUrl)", "original_string": "  public DiffContext setLeftAndRightUrls(String leftUrl, String rightUrl) {\n    this.leftUrl = leftUrl;\n    this.rightUrl = rightUrl;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java", "class_name": "DiffContext", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java.DiffContext", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "DiffContext", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java.DiffContext.[String]getLeftUrl()", "name": "getLeftUrl", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getLeftUrl()", "original_string": "  public String getLeftUrl() {\n    return this.leftUrl;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java", "class_name": "DiffContext", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java.DiffContext", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java.DiffContext.[String]getRightUrl()", "name": "getRightUrl", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getRightUrl()", "original_string": "  public String getRightUrl() {\n    return this.rightUrl;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java", "class_name": "DiffContext", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java.DiffContext", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java.DiffContext.[boolean]equals(Object)", "name": "equals", "arg_nums": 1, "params": [{"name": "o", "type": "Object"}], "return_type": "boolean", "signature": "@Override\n  public boolean equals(Object o)", "original_string": "  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n\n    if (o == null || getClass() != o.getClass()) return false;\n\n    DiffContext that = (DiffContext) o;\n\n    return new EqualsBuilder()\n        .append(response, that.response)\n        .append(request, that.request)\n        .append(url, that.url)\n        .append(parameters, that.parameters)\n        .append(method, that.method)\n        .append(required, that.required)\n        .isEquals();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java", "class_name": "DiffContext", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java.DiffContext", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java.DiffContext.[int]hashCode()", "name": "hashCode", "arg_nums": 0, "params": [], "return_type": "int", "signature": "@Override\n  public int hashCode()", "original_string": "  @Override\n  public int hashCode() {\n    return new HashCodeBuilder(17, 37)\n        .append(url)\n        .append(parameters)\n        .append(method)\n        .append(response)\n        .append(request)\n        .append(required)\n        .append(leftUrl)\n        .append(rightUrl)\n        .toHashCode();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java", "class_name": "DiffContext", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/DiffContext.java.DiffContext", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow.java.ChangedOAuthFlow.[]ChangedOAuthFlow(OAuthFlow,OAuthFlow,DiffContext)", "name": "ChangedOAuthFlow", "arg_nums": 3, "params": [{"name": "oldOAuthFlow", "type": "OAuthFlow"}, {"name": "newOAuthFlow", "type": "OAuthFlow"}, {"name": "context", "type": "DiffContext"}], "return_type": "", "signature": "public ChangedOAuthFlow(OAuthFlow oldOAuthFlow, OAuthFlow newOAuthFlow, DiffContext context)", "original_string": "  public ChangedOAuthFlow(OAuthFlow oldOAuthFlow, OAuthFlow newOAuthFlow, DiffContext context) {\n    this.oldOAuthFlow = oldOAuthFlow;\n    this.newOAuthFlow = newOAuthFlow;\n    this.context = context;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow.java", "class_name": "ChangedOAuthFlow", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow.java.ChangedOAuthFlow", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow.java.ChangedOAuthFlow.[List<Changed>]getChangedElements()", "name": "getChangedElements", "arg_nums": 0, "params": [], "return_type": "List<Changed>", "signature": "@Override\n  public List<Changed> getChangedElements()", "original_string": "  @Override\n  public List<Changed> getChangedElements() {\n    return Collections.singletonList(extensions);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow.java", "class_name": "ChangedOAuthFlow", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow.java.ChangedOAuthFlow", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<Changed>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow.java.ChangedOAuthFlow.[DiffResult]isCoreChanged()", "name": "isCoreChanged", "arg_nums": 0, "params": [], "return_type": "DiffResult", "signature": "@Override\n  public DiffResult isCoreChanged()", "original_string": "  @Override\n  public DiffResult isCoreChanged() {\n    if (!authorizationUrl && !tokenUrl && !refreshUrl) {\n      return DiffResult.NO_CHANGES;\n    }\n    if (authorizationUrl) {\n      if (SECURITY_SCHEME_OAUTH2_AUTH_URL_CHANGED.enabled(context)) {\n        return DiffResult.INCOMPATIBLE;\n      }\n    }\n    if (refreshUrl) {\n      if (SECURITY_SCHEME_OAUTH2_REFRESH_URL_CHANGED.enabled(context)) {\n        return DiffResult.INCOMPATIBLE;\n      }\n    }\n    if (tokenUrl) {\n      if (SECURITY_SCHEME_OAUTH2_TOKEN_URL_CHANGED.enabled(context)) {\n        return DiffResult.INCOMPATIBLE;\n      }\n    }\n    return DiffResult.COMPATIBLE;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow.java", "class_name": "ChangedOAuthFlow", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow.java.ChangedOAuthFlow", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "DiffResult", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow.java.ChangedOAuthFlow.[OAuthFlow]getOldOAuthFlow()", "name": "getOldOAuthFlow", "arg_nums": 0, "params": [], "return_type": "OAuthFlow", "signature": "public OAuthFlow getOldOAuthFlow()", "original_string": "  public OAuthFlow getOldOAuthFlow() {\n    return this.oldOAuthFlow;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow.java", "class_name": "ChangedOAuthFlow", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow.java.ChangedOAuthFlow", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "OAuthFlow", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow.java.ChangedOAuthFlow.[OAuthFlow]getNewOAuthFlow()", "name": "getNewOAuthFlow", "arg_nums": 0, "params": [], "return_type": "OAuthFlow", "signature": "public OAuthFlow getNewOAuthFlow()", "original_string": "  public OAuthFlow getNewOAuthFlow() {\n    return this.newOAuthFlow;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow.java", "class_name": "ChangedOAuthFlow", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow.java.ChangedOAuthFlow", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "OAuthFlow", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow.java.ChangedOAuthFlow.[boolean]isAuthorizationUrl()", "name": "isAuthorizationUrl", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "public boolean isAuthorizationUrl()", "original_string": "  public boolean isAuthorizationUrl() {\n    return this.authorizationUrl;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow.java", "class_name": "ChangedOAuthFlow", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow.java.ChangedOAuthFlow", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow.java.ChangedOAuthFlow.[boolean]isTokenUrl()", "name": "isTokenUrl", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "public boolean isTokenUrl()", "original_string": "  public boolean isTokenUrl() {\n    return this.tokenUrl;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow.java", "class_name": "ChangedOAuthFlow", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow.java.ChangedOAuthFlow", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow.java.ChangedOAuthFlow.[boolean]isRefreshUrl()", "name": "isRefreshUrl", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "public boolean isRefreshUrl()", "original_string": "  public boolean isRefreshUrl() {\n    return this.refreshUrl;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow.java", "class_name": "ChangedOAuthFlow", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow.java.ChangedOAuthFlow", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow.java.ChangedOAuthFlow.[ChangedExtensions]getExtensions()", "name": "getExtensions", "arg_nums": 0, "params": [], "return_type": "ChangedExtensions", "signature": "public ChangedExtensions getExtensions()", "original_string": "  public ChangedExtensions getExtensions() {\n    return this.extensions;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow.java", "class_name": "ChangedOAuthFlow", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow.java.ChangedOAuthFlow", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedExtensions", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow.java.ChangedOAuthFlow.[ChangedOAuthFlow]setOldOAuthFlow(OAuthFlow)", "name": "setOldOAuthFlow", "arg_nums": 1, "params": [{"name": "oldOAuthFlow", "type": "OAuthFlow"}], "return_type": "ChangedOAuthFlow", "signature": "public ChangedOAuthFlow setOldOAuthFlow(final OAuthFlow oldOAuthFlow)", "original_string": "  public ChangedOAuthFlow setOldOAuthFlow(final OAuthFlow oldOAuthFlow) {\n    this.oldOAuthFlow = oldOAuthFlow;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow.java", "class_name": "ChangedOAuthFlow", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow.java.ChangedOAuthFlow", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedOAuthFlow", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow.java.ChangedOAuthFlow.[ChangedOAuthFlow]setNewOAuthFlow(OAuthFlow)", "name": "setNewOAuthFlow", "arg_nums": 1, "params": [{"name": "newOAuthFlow", "type": "OAuthFlow"}], "return_type": "ChangedOAuthFlow", "signature": "public ChangedOAuthFlow setNewOAuthFlow(final OAuthFlow newOAuthFlow)", "original_string": "  public ChangedOAuthFlow setNewOAuthFlow(final OAuthFlow newOAuthFlow) {\n    this.newOAuthFlow = newOAuthFlow;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow.java", "class_name": "ChangedOAuthFlow", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow.java.ChangedOAuthFlow", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedOAuthFlow", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow.java.ChangedOAuthFlow.[ChangedOAuthFlow]setAuthorizationUrl(boolean)", "name": "setAuthorizationUrl", "arg_nums": 1, "params": [{"name": "authorizationUrl", "type": "boolean"}], "return_type": "ChangedOAuthFlow", "signature": "public ChangedOAuthFlow setAuthorizationUrl(final boolean authorizationUrl)", "original_string": "  public ChangedOAuthFlow setAuthorizationUrl(final boolean authorizationUrl) {\n    this.authorizationUrl = authorizationUrl;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow.java", "class_name": "ChangedOAuthFlow", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow.java.ChangedOAuthFlow", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedOAuthFlow", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow.java.ChangedOAuthFlow.[ChangedOAuthFlow]setTokenUrl(boolean)", "name": "setTokenUrl", "arg_nums": 1, "params": [{"name": "tokenUrl", "type": "boolean"}], "return_type": "ChangedOAuthFlow", "signature": "public ChangedOAuthFlow setTokenUrl(final boolean tokenUrl)", "original_string": "  public ChangedOAuthFlow setTokenUrl(final boolean tokenUrl) {\n    this.tokenUrl = tokenUrl;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow.java", "class_name": "ChangedOAuthFlow", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow.java.ChangedOAuthFlow", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedOAuthFlow", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow.java.ChangedOAuthFlow.[ChangedOAuthFlow]setRefreshUrl(boolean)", "name": "setRefreshUrl", "arg_nums": 1, "params": [{"name": "refreshUrl", "type": "boolean"}], "return_type": "ChangedOAuthFlow", "signature": "public ChangedOAuthFlow setRefreshUrl(final boolean refreshUrl)", "original_string": "  public ChangedOAuthFlow setRefreshUrl(final boolean refreshUrl) {\n    this.refreshUrl = refreshUrl;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow.java", "class_name": "ChangedOAuthFlow", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow.java.ChangedOAuthFlow", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedOAuthFlow", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow.java.ChangedOAuthFlow.[ChangedOAuthFlow]setExtensions(ChangedExtensions)", "name": "setExtensions", "arg_nums": 1, "params": [{"name": "extensions", "type": "ChangedExtensions"}], "return_type": "ChangedOAuthFlow", "signature": "public ChangedOAuthFlow setExtensions(final ChangedExtensions extensions)", "original_string": "  public ChangedOAuthFlow setExtensions(final ChangedExtensions extensions) {\n    this.extensions = extensions;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow.java", "class_name": "ChangedOAuthFlow", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow.java.ChangedOAuthFlow", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedOAuthFlow", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow.java.ChangedOAuthFlow.[boolean]equals(Object)", "name": "equals", "arg_nums": 1, "params": [{"name": "o", "type": "Object"}], "return_type": "boolean", "signature": "@Override\n  public boolean equals(Object o)", "original_string": "  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    ChangedOAuthFlow that = (ChangedOAuthFlow) o;\n    return authorizationUrl == that.authorizationUrl\n        && tokenUrl == that.tokenUrl\n        && refreshUrl == that.refreshUrl\n        && Objects.equals(oldOAuthFlow, that.oldOAuthFlow)\n        && Objects.equals(newOAuthFlow, that.newOAuthFlow)\n        && Objects.equals(extensions, that.extensions);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow.java", "class_name": "ChangedOAuthFlow", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow.java.ChangedOAuthFlow", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow.java.ChangedOAuthFlow.[int]hashCode()", "name": "hashCode", "arg_nums": 0, "params": [], "return_type": "int", "signature": "@Override\n  public int hashCode()", "original_string": "  @Override\n  public int hashCode() {\n    return Objects.hash(\n        oldOAuthFlow, newOAuthFlow, authorizationUrl, tokenUrl, refreshUrl, extensions);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow.java", "class_name": "ChangedOAuthFlow", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow.java.ChangedOAuthFlow", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow.java.ChangedOAuthFlow.[java.lang.String]toString()", "name": "toString", "arg_nums": 0, "params": [], "return_type": "java.lang.String", "signature": "@java.lang.Override\n  public java.lang.String toString()", "original_string": "  @java.lang.Override\n  public java.lang.String toString() {\n    return \"ChangedOAuthFlow(oldOAuthFlow=\"\n        + this.getOldOAuthFlow()\n        + \", newOAuthFlow=\"\n        + this.getNewOAuthFlow()\n        + \", authorizationUrl=\"\n        + this.isAuthorizationUrl()\n        + \", tokenUrl=\"\n        + this.isTokenUrl()\n        + \", refreshUrl=\"\n        + this.isRefreshUrl()\n        + \", extensions=\"\n        + this.getExtensions()\n        + \")\";\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow.java", "class_name": "ChangedOAuthFlow", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow.java.ChangedOAuthFlow", "attributes": {"modifiers": "@java.lang.Override\n  public", "marker_annotations": ["@java.lang.Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "java.lang.String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java.ChangedOpenApi.[]ChangedOpenApi(OpenApiDiffOptions)", "name": "ChangedOpenApi", "arg_nums": 1, "params": [{"name": "options", "type": "OpenApiDiffOptions"}], "return_type": "", "signature": "public ChangedOpenApi(OpenApiDiffOptions options)", "original_string": "  public ChangedOpenApi(OpenApiDiffOptions options) {\n    this.options = options;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java", "class_name": "ChangedOpenApi", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java.ChangedOpenApi", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java.ChangedOpenApi.[List<Endpoint>]getDeprecatedEndpoints()", "name": "getDeprecatedEndpoints", "arg_nums": 0, "params": [], "return_type": "List<Endpoint>", "signature": "public List<Endpoint> getDeprecatedEndpoints()", "original_string": "  public List<Endpoint> getDeprecatedEndpoints() {\n    return changedOperations.stream()\n        .filter(ChangedOperation::isDeprecated)\n        .map(\n            c ->\n                EndpointUtils.convert2Endpoint(\n                    c.getPathUrl(), c.getHttpMethod(), c.getNewOperation()))\n        .collect(Collectors.toList());\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java", "class_name": "ChangedOpenApi", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java.ChangedOpenApi", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<Endpoint>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java.ChangedOpenApi.[List<Changed>]getChangedElements()", "name": "getChangedElements", "arg_nums": 0, "params": [], "return_type": "List<Changed>", "signature": "@Override\n  public List<Changed> getChangedElements()", "original_string": "  @Override\n  public List<Changed> getChangedElements() {\n    return Stream.concat(\n            Stream.concat(changedOperations.stream(), Stream.of(changedExtensions)),\n            changedSchemas.stream())\n        .collect(Collectors.toList());\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java", "class_name": "ChangedOpenApi", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java.ChangedOpenApi", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<Changed>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java.ChangedOpenApi.[DiffResult]isCoreChanged()", "name": "isCoreChanged", "arg_nums": 0, "params": [], "return_type": "DiffResult", "signature": "@Override\n  public DiffResult isCoreChanged()", "original_string": "  @Override\n  public DiffResult isCoreChanged() {\n    if (newEndpoints.isEmpty() && missingEndpoints.isEmpty()) {\n      return DiffResult.NO_CHANGES;\n    }\n    if (!missingEndpoints.isEmpty()) {\n      if (OPENAPI_ENDPOINTS_DECREASED.enabled(options.getConfig())) {\n        return DiffResult.INCOMPATIBLE;\n      }\n    }\n    return DiffResult.COMPATIBLE;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java", "class_name": "ChangedOpenApi", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java.ChangedOpenApi", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "DiffResult", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java.ChangedOpenApi.[OpenAPI]getOldSpecOpenApi()", "name": "getOldSpecOpenApi", "arg_nums": 0, "params": [], "return_type": "OpenAPI", "signature": "public OpenAPI getOldSpecOpenApi()", "original_string": "  public OpenAPI getOldSpecOpenApi() {\n    return this.oldSpecOpenApi;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java", "class_name": "ChangedOpenApi", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java.ChangedOpenApi", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "OpenAPI", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java.ChangedOpenApi.[OpenAPI]getNewSpecOpenApi()", "name": "getNewSpecOpenApi", "arg_nums": 0, "params": [], "return_type": "OpenAPI", "signature": "public OpenAPI getNewSpecOpenApi()", "original_string": "  public OpenAPI getNewSpecOpenApi() {\n    return this.newSpecOpenApi;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java", "class_name": "ChangedOpenApi", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java.ChangedOpenApi", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "OpenAPI", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java.ChangedOpenApi.[List<Endpoint>]getNewEndpoints()", "name": "getNewEndpoints", "arg_nums": 0, "params": [], "return_type": "List<Endpoint>", "signature": "public List<Endpoint> getNewEndpoints()", "original_string": "  public List<Endpoint> getNewEndpoints() {\n    return this.newEndpoints;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java", "class_name": "ChangedOpenApi", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java.ChangedOpenApi", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<Endpoint>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java.ChangedOpenApi.[List<Endpoint>]getMissingEndpoints()", "name": "getMissingEndpoints", "arg_nums": 0, "params": [], "return_type": "List<Endpoint>", "signature": "public List<Endpoint> getMissingEndpoints()", "original_string": "  public List<Endpoint> getMissingEndpoints() {\n    return this.missingEndpoints;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java", "class_name": "ChangedOpenApi", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java.ChangedOpenApi", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<Endpoint>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java.ChangedOpenApi.[List<ChangedOperation>]getChangedOperations()", "name": "getChangedOperations", "arg_nums": 0, "params": [], "return_type": "List<ChangedOperation>", "signature": "public List<ChangedOperation> getChangedOperations()", "original_string": "  public List<ChangedOperation> getChangedOperations() {\n    return this.changedOperations;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java", "class_name": "ChangedOpenApi", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java.ChangedOpenApi", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<ChangedOperation>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java.ChangedOpenApi.[ChangedExtensions]getChangedExtensions()", "name": "getChangedExtensions", "arg_nums": 0, "params": [], "return_type": "ChangedExtensions", "signature": "public ChangedExtensions getChangedExtensions()", "original_string": "  public ChangedExtensions getChangedExtensions() {\n    return this.changedExtensions;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java", "class_name": "ChangedOpenApi", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java.ChangedOpenApi", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedExtensions", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java.ChangedOpenApi.[List<ChangedSchema>]getChangedSchemas()", "name": "getChangedSchemas", "arg_nums": 0, "params": [], "return_type": "List<ChangedSchema>", "signature": "public List<ChangedSchema> getChangedSchemas()", "original_string": "  public List<ChangedSchema> getChangedSchemas() {\n    return changedSchemas;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java", "class_name": "ChangedOpenApi", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java.ChangedOpenApi", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<ChangedSchema>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java.ChangedOpenApi.[ChangedOpenApi]setOldSpecOpenApi(OpenAPI)", "name": "setOldSpecOpenApi", "arg_nums": 1, "params": [{"name": "oldSpecOpenApi", "type": "OpenAPI"}], "return_type": "ChangedOpenApi", "signature": "public ChangedOpenApi setOldSpecOpenApi(final OpenAPI oldSpecOpenApi)", "original_string": "  public ChangedOpenApi setOldSpecOpenApi(final OpenAPI oldSpecOpenApi) {\n    this.oldSpecOpenApi = oldSpecOpenApi;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java", "class_name": "ChangedOpenApi", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java.ChangedOpenApi", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedOpenApi", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java.ChangedOpenApi.[ChangedOpenApi]setNewSpecOpenApi(OpenAPI)", "name": "setNewSpecOpenApi", "arg_nums": 1, "params": [{"name": "newSpecOpenApi", "type": "OpenAPI"}], "return_type": "ChangedOpenApi", "signature": "public ChangedOpenApi setNewSpecOpenApi(final OpenAPI newSpecOpenApi)", "original_string": "  public ChangedOpenApi setNewSpecOpenApi(final OpenAPI newSpecOpenApi) {\n    this.newSpecOpenApi = newSpecOpenApi;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java", "class_name": "ChangedOpenApi", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java.ChangedOpenApi", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedOpenApi", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java.ChangedOpenApi.[ChangedOpenApi]setNewEndpoints(List<Endpoint>)", "name": "setNewEndpoints", "arg_nums": 1, "params": [{"name": "newEndpoints", "type": "List<Endpoint>"}], "return_type": "ChangedOpenApi", "signature": "public ChangedOpenApi setNewEndpoints(final List<Endpoint> newEndpoints)", "original_string": "  public ChangedOpenApi setNewEndpoints(final List<Endpoint> newEndpoints) {\n    this.newEndpoints = newEndpoints;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java", "class_name": "ChangedOpenApi", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java.ChangedOpenApi", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedOpenApi", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java.ChangedOpenApi.[ChangedOpenApi]setMissingEndpoints(List<Endpoint>)", "name": "setMissingEndpoints", "arg_nums": 1, "params": [{"name": "missingEndpoints", "type": "List<Endpoint>"}], "return_type": "ChangedOpenApi", "signature": "public ChangedOpenApi setMissingEndpoints(final List<Endpoint> missingEndpoints)", "original_string": "  public ChangedOpenApi setMissingEndpoints(final List<Endpoint> missingEndpoints) {\n    this.missingEndpoints = missingEndpoints;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java", "class_name": "ChangedOpenApi", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java.ChangedOpenApi", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedOpenApi", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java.ChangedOpenApi.[ChangedOpenApi]setChangedOperations(List<ChangedOperation>)", "name": "setChangedOperations", "arg_nums": 1, "params": [{"name": "changedOperations", "type": "List<ChangedOperation>"}], "return_type": "ChangedOpenApi", "signature": "public ChangedOpenApi setChangedOperations(final List<ChangedOperation> changedOperations)", "original_string": "  public ChangedOpenApi setChangedOperations(final List<ChangedOperation> changedOperations) {\n    this.changedOperations = changedOperations;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java", "class_name": "ChangedOpenApi", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java.ChangedOpenApi", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedOpenApi", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java.ChangedOpenApi.[ChangedOpenApi]setChangedExtensions(ChangedExtensions)", "name": "setChangedExtensions", "arg_nums": 1, "params": [{"name": "changedExtensions", "type": "ChangedExtensions"}], "return_type": "ChangedOpenApi", "signature": "public ChangedOpenApi setChangedExtensions(final ChangedExtensions changedExtensions)", "original_string": "  public ChangedOpenApi setChangedExtensions(final ChangedExtensions changedExtensions) {\n    this.changedExtensions = changedExtensions;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java", "class_name": "ChangedOpenApi", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java.ChangedOpenApi", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedOpenApi", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java.ChangedOpenApi.[ChangedOpenApi]setChangedSchemas(List<ChangedSchema>)", "name": "setChangedSchemas", "arg_nums": 1, "params": [{"name": "changedSchemas", "type": "List<ChangedSchema>"}], "return_type": "ChangedOpenApi", "signature": "public ChangedOpenApi setChangedSchemas(final List<ChangedSchema> changedSchemas)", "original_string": "  public ChangedOpenApi setChangedSchemas(final List<ChangedSchema> changedSchemas) {\n    this.changedSchemas = changedSchemas;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java", "class_name": "ChangedOpenApi", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java.ChangedOpenApi", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedOpenApi", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java.ChangedOpenApi.[boolean]equals(Object)", "name": "equals", "arg_nums": 1, "params": [{"name": "o", "type": "Object"}], "return_type": "boolean", "signature": "@Override\n  public boolean equals(Object o)", "original_string": "  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    ChangedOpenApi that = (ChangedOpenApi) o;\n    return Objects.equals(oldSpecOpenApi, that.oldSpecOpenApi)\n        && Objects.equals(newSpecOpenApi, that.newSpecOpenApi)\n        && Objects.equals(newEndpoints, that.newEndpoints)\n        && Objects.equals(missingEndpoints, that.missingEndpoints)\n        && Objects.equals(changedOperations, that.changedOperations)\n        && Objects.equals(changedExtensions, that.changedExtensions);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java", "class_name": "ChangedOpenApi", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java.ChangedOpenApi", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java.ChangedOpenApi.[int]hashCode()", "name": "hashCode", "arg_nums": 0, "params": [], "return_type": "int", "signature": "@Override\n  public int hashCode()", "original_string": "  @Override\n  public int hashCode() {\n    return Objects.hash(\n        oldSpecOpenApi,\n        newSpecOpenApi,\n        newEndpoints,\n        missingEndpoints,\n        changedOperations,\n        changedExtensions);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java", "class_name": "ChangedOpenApi", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java.ChangedOpenApi", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java.ChangedOpenApi.[java.lang.String]toString()", "name": "toString", "arg_nums": 0, "params": [], "return_type": "java.lang.String", "signature": "@java.lang.Override\n  public java.lang.String toString()", "original_string": "  @java.lang.Override\n  public java.lang.String toString() {\n    return \"ChangedOpenApi(oldSpecOpenApi=\"\n        + this.getOldSpecOpenApi()\n        + \", newSpecOpenApi=\"\n        + this.getNewSpecOpenApi()\n        + \", newEndpoints=\"\n        + this.getNewEndpoints()\n        + \", missingEndpoints=\"\n        + this.getMissingEndpoints()\n        + \", changedOperations=\"\n        + this.getChangedOperations()\n        + \", changedExtensions=\"\n        + this.getChangedExtensions()\n        + \")\";\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java", "class_name": "ChangedOpenApi", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOpenApi.java.ChangedOpenApi", "attributes": {"modifiers": "@java.lang.Override\n  public", "marker_annotations": ["@java.lang.Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "java.lang.String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedRequestBody.java.ChangedRequestBody.[]ChangedRequestBody(RequestBody,RequestBody,DiffContext)", "name": "ChangedRequestBody", "arg_nums": 3, "params": [{"name": "oldRequestBody", "type": "RequestBody"}, {"name": "newRequestBody", "type": "RequestBody"}, {"name": "context", "type": "DiffContext"}], "return_type": "", "signature": "public ChangedRequestBody(\n      RequestBody oldRequestBody, RequestBody newRequestBody, DiffContext context)", "original_string": "  public ChangedRequestBody(\n      RequestBody oldRequestBody, RequestBody newRequestBody, DiffContext context) {\n    this.oldRequestBody = oldRequestBody;\n    this.newRequestBody = newRequestBody;\n    this.context = context;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedRequestBody.java", "class_name": "ChangedRequestBody", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedRequestBody.java.ChangedRequestBody", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedRequestBody.java.ChangedRequestBody.[List<Changed>]getChangedElements()", "name": "getChangedElements", "arg_nums": 0, "params": [], "return_type": "List<Changed>", "signature": "@Override\n  public List<Changed> getChangedElements()", "original_string": "  @Override\n  public List<Changed> getChangedElements() {\n    return Arrays.asList(description, content, extensions);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedRequestBody.java", "class_name": "ChangedRequestBody", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedRequestBody.java.ChangedRequestBody", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<Changed>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedRequestBody.java.ChangedRequestBody.[DiffResult]isCoreChanged()", "name": "isCoreChanged", "arg_nums": 0, "params": [], "return_type": "DiffResult", "signature": "@Override\n  public DiffResult isCoreChanged()", "original_string": "  @Override\n  public DiffResult isCoreChanged() {\n    if (!changeRequired) {\n      return DiffResult.NO_CHANGES;\n    }\n    if (OPENAPI_ENDPOINTS_DECREASED.enabled(context)) {\n      return DiffResult.INCOMPATIBLE;\n    }\n    return DiffResult.COMPATIBLE;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedRequestBody.java", "class_name": "ChangedRequestBody", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedRequestBody.java.ChangedRequestBody", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "DiffResult", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedRequestBody.java.ChangedRequestBody.[RequestBody]getOldRequestBody()", "name": "getOldRequestBody", "arg_nums": 0, "params": [], "return_type": "RequestBody", "signature": "public RequestBody getOldRequestBody()", "original_string": "  public RequestBody getOldRequestBody() {\n    return this.oldRequestBody;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedRequestBody.java", "class_name": "ChangedRequestBody", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedRequestBody.java.ChangedRequestBody", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "RequestBody", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedRequestBody.java.ChangedRequestBody.[RequestBody]getNewRequestBody()", "name": "getNewRequestBody", "arg_nums": 0, "params": [], "return_type": "RequestBody", "signature": "public RequestBody getNewRequestBody()", "original_string": "  public RequestBody getNewRequestBody() {\n    return this.newRequestBody;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedRequestBody.java", "class_name": "ChangedRequestBody", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedRequestBody.java.ChangedRequestBody", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "RequestBody", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedRequestBody.java.ChangedRequestBody.[DiffContext]getContext()", "name": "getContext", "arg_nums": 0, "params": [], "return_type": "DiffContext", "signature": "public DiffContext getContext()", "original_string": "  public DiffContext getContext() {\n    return this.context;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedRequestBody.java", "class_name": "ChangedRequestBody", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedRequestBody.java.ChangedRequestBody", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "DiffContext", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedRequestBody.java.ChangedRequestBody.[boolean]isChangeRequired()", "name": "isChangeRequired", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "public boolean isChangeRequired()", "original_string": "  public boolean isChangeRequired() {\n    return this.changeRequired;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedRequestBody.java", "class_name": "ChangedRequestBody", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedRequestBody.java.ChangedRequestBody", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedRequestBody.java.ChangedRequestBody.[ChangedMetadata]getDescription()", "name": "getDescription", "arg_nums": 0, "params": [], "return_type": "ChangedMetadata", "signature": "public ChangedMetadata getDescription()", "original_string": "  public ChangedMetadata getDescription() {\n    return this.description;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedRequestBody.java", "class_name": "ChangedRequestBody", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedRequestBody.java.ChangedRequestBody", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedMetadata", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedRequestBody.java.ChangedRequestBody.[ChangedContent]getContent()", "name": "getContent", "arg_nums": 0, "params": [], "return_type": "ChangedContent", "signature": "public ChangedContent getContent()", "original_string": "  public ChangedContent getContent() {\n    return this.content;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedRequestBody.java", "class_name": "ChangedRequestBody", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedRequestBody.java.ChangedRequestBody", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedContent", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedRequestBody.java.ChangedRequestBody.[ChangedExtensions]getExtensions()", "name": "getExtensions", "arg_nums": 0, "params": [], "return_type": "ChangedExtensions", "signature": "public ChangedExtensions getExtensions()", "original_string": "  public ChangedExtensions getExtensions() {\n    return this.extensions;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedRequestBody.java", "class_name": "ChangedRequestBody", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedRequestBody.java.ChangedRequestBody", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedExtensions", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedRequestBody.java.ChangedRequestBody.[ChangedRequestBody]setChangeRequired(boolean)", "name": "setChangeRequired", "arg_nums": 1, "params": [{"name": "changeRequired", "type": "boolean"}], "return_type": "ChangedRequestBody", "signature": "public ChangedRequestBody setChangeRequired(final boolean changeRequired)", "original_string": "  public ChangedRequestBody setChangeRequired(final boolean changeRequired) {\n    this.changeRequired = changeRequired;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedRequestBody.java", "class_name": "ChangedRequestBody", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedRequestBody.java.ChangedRequestBody", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedRequestBody", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedRequestBody.java.ChangedRequestBody.[ChangedRequestBody]setDescription(ChangedMetadata)", "name": "setDescription", "arg_nums": 1, "params": [{"name": "description", "type": "ChangedMetadata"}], "return_type": "ChangedRequestBody", "signature": "public ChangedRequestBody setDescription(final ChangedMetadata description)", "original_string": "  public ChangedRequestBody setDescription(final ChangedMetadata description) {\n    this.description = description;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedRequestBody.java", "class_name": "ChangedRequestBody", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedRequestBody.java.ChangedRequestBody", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedRequestBody", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedRequestBody.java.ChangedRequestBody.[ChangedRequestBody]setContent(ChangedContent)", "name": "setContent", "arg_nums": 1, "params": [{"name": "content", "type": "ChangedContent"}], "return_type": "ChangedRequestBody", "signature": "public ChangedRequestBody setContent(final ChangedContent content)", "original_string": "  public ChangedRequestBody setContent(final ChangedContent content) {\n    this.content = content;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedRequestBody.java", "class_name": "ChangedRequestBody", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedRequestBody.java.ChangedRequestBody", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedRequestBody", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedRequestBody.java.ChangedRequestBody.[ChangedRequestBody]setExtensions(ChangedExtensions)", "name": "setExtensions", "arg_nums": 1, "params": [{"name": "extensions", "type": "ChangedExtensions"}], "return_type": "ChangedRequestBody", "signature": "public ChangedRequestBody setExtensions(final ChangedExtensions extensions)", "original_string": "  public ChangedRequestBody setExtensions(final ChangedExtensions extensions) {\n    this.extensions = extensions;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedRequestBody.java", "class_name": "ChangedRequestBody", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedRequestBody.java.ChangedRequestBody", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedRequestBody", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedRequestBody.java.ChangedRequestBody.[boolean]equals(Object)", "name": "equals", "arg_nums": 1, "params": [{"name": "o", "type": "Object"}], "return_type": "boolean", "signature": "@Override\n  public boolean equals(Object o)", "original_string": "  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    ChangedRequestBody that = (ChangedRequestBody) o;\n    return changeRequired == that.changeRequired\n        && Objects.equals(oldRequestBody, that.oldRequestBody)\n        && Objects.equals(newRequestBody, that.newRequestBody)\n        && Objects.equals(context, that.context)\n        && Objects.equals(description, that.description)\n        && Objects.equals(content, that.content)\n        && Objects.equals(extensions, that.extensions);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedRequestBody.java", "class_name": "ChangedRequestBody", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedRequestBody.java.ChangedRequestBody", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedRequestBody.java.ChangedRequestBody.[int]hashCode()", "name": "hashCode", "arg_nums": 0, "params": [], "return_type": "int", "signature": "@Override\n  public int hashCode()", "original_string": "  @Override\n  public int hashCode() {\n    return Objects.hash(\n        oldRequestBody, newRequestBody, context, changeRequired, description, content, extensions);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedRequestBody.java", "class_name": "ChangedRequestBody", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedRequestBody.java.ChangedRequestBody", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedRequestBody.java.ChangedRequestBody.[java.lang.String]toString()", "name": "toString", "arg_nums": 0, "params": [], "return_type": "java.lang.String", "signature": "@java.lang.Override\n  public java.lang.String toString()", "original_string": "  @java.lang.Override\n  public java.lang.String toString() {\n    return \"ChangedRequestBody(oldRequestBody=\"\n        + this.getOldRequestBody()\n        + \", newRequestBody=\"\n        + this.getNewRequestBody()\n        + \", context=\"\n        + this.getContext()\n        + \", changeRequired=\"\n        + this.isChangeRequired()\n        + \", description=\"\n        + this.getDescription()\n        + \", content=\"\n        + this.getContent()\n        + \", extensions=\"\n        + this.getExtensions()\n        + \")\";\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedRequestBody.java", "class_name": "ChangedRequestBody", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedRequestBody.java.ChangedRequestBody", "attributes": {"modifiers": "@java.lang.Override\n  public", "marker_annotations": ["@java.lang.Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "java.lang.String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/Changed.java.Changed.[DiffResult]result(Changed)", "name": "result", "arg_nums": 1, "params": [{"name": "changed", "type": "Changed"}], "return_type": "DiffResult", "signature": "static DiffResult result(Changed changed)", "original_string": "  static DiffResult result(Changed changed) {\n    return Optional.ofNullable(changed).map(Changed::isChanged).orElse(DiffResult.NO_CHANGES);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/Changed.java", "class_name": "Changed", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/Changed.java.Changed", "attributes": {"modifiers": "static", "marker_annotations": [], "non_marker_annotations": ["static"], "comments": [], "return_type": "DiffResult", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/Changed.java.Changed.[DiffResult]isChanged()", "name": "isChanged", "arg_nums": 0, "params": [], "return_type": "DiffResult", "signature": "DiffResult isChanged()", "original_string": "  DiffResult isChanged();", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/Changed.java", "class_name": "Changed", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/Changed.java.Changed", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "DiffResult", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/Changed.java.Changed.[boolean]isCompatible()", "name": "isCompatible", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "default boolean isCompatible()", "original_string": "  default boolean isCompatible() {\n    return isChanged().isCompatible();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/Changed.java", "class_name": "Changed", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/Changed.java.Changed", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/Changed.java.Changed.[boolean]isIncompatible()", "name": "isIncompatible", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "default boolean isIncompatible()", "original_string": "  default boolean isIncompatible() {\n    return isChanged().isIncompatible();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/Changed.java", "class_name": "Changed", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/Changed.java.Changed", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/Changed.java.Changed.[boolean]isUnchanged()", "name": "isUnchanged", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "default boolean isUnchanged()", "original_string": "  default boolean isUnchanged() {\n    return isChanged().isUnchanged();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/Changed.java", "class_name": "Changed", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/Changed.java.Changed", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/Changed.java.Changed.[boolean]isDifferent()", "name": "isDifferent", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "default boolean isDifferent()", "original_string": "  default boolean isDifferent() {\n    return isChanged().isDifferent();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/Changed.java", "class_name": "Changed", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/Changed.java.Changed", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter.[]ChangedParameter(String,String,DiffContext)", "name": "ChangedParameter", "arg_nums": 3, "params": [{"name": "name", "type": "String"}, {"name": "in", "type": "String"}, {"name": "context", "type": "DiffContext"}], "return_type": "", "signature": "public ChangedParameter(String name, String in, DiffContext context)", "original_string": "  public ChangedParameter(String name, String in, DiffContext context) {\n    this.name = name;\n    this.in = in;\n    this.context = context;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java", "class_name": "ChangedParameter", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter.[List<Changed>]getChangedElements()", "name": "getChangedElements", "arg_nums": 0, "params": [], "return_type": "List<Changed>", "signature": "@Override\n  public List<Changed> getChangedElements()", "original_string": "  @Override\n  public List<Changed> getChangedElements() {\n    return Arrays.asList(description, schema, content, extensions);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java", "class_name": "ChangedParameter", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<Changed>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter.[DiffResult]isCoreChanged()", "name": "isCoreChanged", "arg_nums": 0, "params": [], "return_type": "DiffResult", "signature": "@Override\n  public DiffResult isCoreChanged()", "original_string": "  @Override\n  public DiffResult isCoreChanged() {\n    if (!changeRequired\n        && !deprecated\n        && !changeAllowEmptyValue\n        && !changeStyle\n        && !changeExplode) {\n      return DiffResult.NO_CHANGES;\n    }\n    if (changeAllowEmptyValue && !Boolean.TRUE.equals(newParameter.getAllowEmptyValue())) {\n      if (REQUEST_PARAM_ALLOWEMPTY_DECREASED.enabled(context)) {\n        return DiffResult.INCOMPATIBLE;\n      }\n    }\n    if (changeExplode) {\n      if (REQUEST_PARAM_EXPLODE_CHANGED.enabled(context)) {\n        return DiffResult.INCOMPATIBLE;\n      }\n    }\n    if (changeRequired && !Boolean.TRUE.equals(oldParameter.getRequired())) {\n      if (REQUEST_PARAMS_REQUIRED_INCREASED.enabled(context)) {\n        return DiffResult.INCOMPATIBLE;\n      }\n    }\n    if (changeStyle) {\n      if (REQUEST_PARAM_STYLE_CHANGED.enabled(context)) {\n        return DiffResult.INCOMPATIBLE;\n      }\n    }\n    return DiffResult.COMPATIBLE;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java", "class_name": "ChangedParameter", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "DiffResult", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter.[DiffContext]getContext()", "name": "getContext", "arg_nums": 0, "params": [], "return_type": "DiffContext", "signature": "public DiffContext getContext()", "original_string": "  public DiffContext getContext() {\n    return this.context;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java", "class_name": "ChangedParameter", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "DiffContext", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter.[Parameter]getOldParameter()", "name": "getOldParameter", "arg_nums": 0, "params": [], "return_type": "Parameter", "signature": "public Parameter getOldParameter()", "original_string": "  public Parameter getOldParameter() {\n    return this.oldParameter;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java", "class_name": "ChangedParameter", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Parameter", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter.[Parameter]getNewParameter()", "name": "getNewParameter", "arg_nums": 0, "params": [], "return_type": "Parameter", "signature": "public Parameter getNewParameter()", "original_string": "  public Parameter getNewParameter() {\n    return this.newParameter;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java", "class_name": "ChangedParameter", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Parameter", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter.[String]getName()", "name": "getName", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getName()", "original_string": "  public String getName() {\n    return this.name;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java", "class_name": "ChangedParameter", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter.[String]getIn()", "name": "getIn", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getIn()", "original_string": "  public String getIn() {\n    return this.in;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java", "class_name": "ChangedParameter", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter.[boolean]isChangeRequired()", "name": "isChangeRequired", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "public boolean isChangeRequired()", "original_string": "  public boolean isChangeRequired() {\n    return this.changeRequired;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java", "class_name": "ChangedParameter", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter.[boolean]isDeprecated()", "name": "isDeprecated", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "public boolean isDeprecated()", "original_string": "  public boolean isDeprecated() {\n    return this.deprecated;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java", "class_name": "ChangedParameter", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter.[boolean]isChangeStyle()", "name": "isChangeStyle", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "public boolean isChangeStyle()", "original_string": "  public boolean isChangeStyle() {\n    return this.changeStyle;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java", "class_name": "ChangedParameter", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter.[boolean]isChangeExplode()", "name": "isChangeExplode", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "public boolean isChangeExplode()", "original_string": "  public boolean isChangeExplode() {\n    return this.changeExplode;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java", "class_name": "ChangedParameter", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter.[boolean]isChangeAllowEmptyValue()", "name": "isChangeAllowEmptyValue", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "public boolean isChangeAllowEmptyValue()", "original_string": "  public boolean isChangeAllowEmptyValue() {\n    return this.changeAllowEmptyValue;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java", "class_name": "ChangedParameter", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter.[ChangedMetadata]getDescription()", "name": "getDescription", "arg_nums": 0, "params": [], "return_type": "ChangedMetadata", "signature": "public ChangedMetadata getDescription()", "original_string": "  public ChangedMetadata getDescription() {\n    return this.description;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java", "class_name": "ChangedParameter", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedMetadata", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter.[ChangedSchema]getSchema()", "name": "getSchema", "arg_nums": 0, "params": [], "return_type": "ChangedSchema", "signature": "public ChangedSchema getSchema()", "original_string": "  public ChangedSchema getSchema() {\n    return this.schema;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java", "class_name": "ChangedParameter", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedSchema", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter.[ChangedContent]getContent()", "name": "getContent", "arg_nums": 0, "params": [], "return_type": "ChangedContent", "signature": "public ChangedContent getContent()", "original_string": "  public ChangedContent getContent() {\n    return this.content;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java", "class_name": "ChangedParameter", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedContent", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter.[ChangedExtensions]getExtensions()", "name": "getExtensions", "arg_nums": 0, "params": [], "return_type": "ChangedExtensions", "signature": "public ChangedExtensions getExtensions()", "original_string": "  public ChangedExtensions getExtensions() {\n    return this.extensions;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java", "class_name": "ChangedParameter", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedExtensions", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter.[ChangedParameter]setOldParameter(Parameter)", "name": "setOldParameter", "arg_nums": 1, "params": [{"name": "oldParameter", "type": "Parameter"}], "return_type": "ChangedParameter", "signature": "public ChangedParameter setOldParameter(final Parameter oldParameter)", "original_string": "  public ChangedParameter setOldParameter(final Parameter oldParameter) {\n    this.oldParameter = oldParameter;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java", "class_name": "ChangedParameter", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedParameter", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter.[ChangedParameter]setNewParameter(Parameter)", "name": "setNewParameter", "arg_nums": 1, "params": [{"name": "newParameter", "type": "Parameter"}], "return_type": "ChangedParameter", "signature": "public ChangedParameter setNewParameter(final Parameter newParameter)", "original_string": "  public ChangedParameter setNewParameter(final Parameter newParameter) {\n    this.newParameter = newParameter;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java", "class_name": "ChangedParameter", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedParameter", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter.[ChangedParameter]setName(String)", "name": "setName", "arg_nums": 1, "params": [{"name": "name", "type": "String"}], "return_type": "ChangedParameter", "signature": "public ChangedParameter setName(final String name)", "original_string": "  public ChangedParameter setName(final String name) {\n    this.name = name;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java", "class_name": "ChangedParameter", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedParameter", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter.[ChangedParameter]setIn(String)", "name": "setIn", "arg_nums": 1, "params": [{"name": "in", "type": "String"}], "return_type": "ChangedParameter", "signature": "public ChangedParameter setIn(final String in)", "original_string": "  public ChangedParameter setIn(final String in) {\n    this.in = in;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java", "class_name": "ChangedParameter", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedParameter", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter.[ChangedParameter]setChangeRequired(boolean)", "name": "setChangeRequired", "arg_nums": 1, "params": [{"name": "changeRequired", "type": "boolean"}], "return_type": "ChangedParameter", "signature": "public ChangedParameter setChangeRequired(final boolean changeRequired)", "original_string": "  public ChangedParameter setChangeRequired(final boolean changeRequired) {\n    this.changeRequired = changeRequired;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java", "class_name": "ChangedParameter", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedParameter", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter.[ChangedParameter]setDeprecated(boolean)", "name": "setDeprecated", "arg_nums": 1, "params": [{"name": "deprecated", "type": "boolean"}], "return_type": "ChangedParameter", "signature": "public ChangedParameter setDeprecated(final boolean deprecated)", "original_string": "  public ChangedParameter setDeprecated(final boolean deprecated) {\n    this.deprecated = deprecated;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java", "class_name": "ChangedParameter", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedParameter", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter.[ChangedParameter]setChangeStyle(boolean)", "name": "setChangeStyle", "arg_nums": 1, "params": [{"name": "changeStyle", "type": "boolean"}], "return_type": "ChangedParameter", "signature": "public ChangedParameter setChangeStyle(final boolean changeStyle)", "original_string": "  public ChangedParameter setChangeStyle(final boolean changeStyle) {\n    this.changeStyle = changeStyle;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java", "class_name": "ChangedParameter", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedParameter", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter.[ChangedParameter]setChangeExplode(boolean)", "name": "setChangeExplode", "arg_nums": 1, "params": [{"name": "changeExplode", "type": "boolean"}], "return_type": "ChangedParameter", "signature": "public ChangedParameter setChangeExplode(final boolean changeExplode)", "original_string": "  public ChangedParameter setChangeExplode(final boolean changeExplode) {\n    this.changeExplode = changeExplode;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java", "class_name": "ChangedParameter", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedParameter", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter.[ChangedParameter]setChangeAllowEmptyValue(boolean)", "name": "setChangeAllowEmptyValue", "arg_nums": 1, "params": [{"name": "changeAllowEmptyValue", "type": "boolean"}], "return_type": "ChangedParameter", "signature": "public ChangedParameter setChangeAllowEmptyValue(final boolean changeAllowEmptyValue)", "original_string": "  public ChangedParameter setChangeAllowEmptyValue(final boolean changeAllowEmptyValue) {\n    this.changeAllowEmptyValue = changeAllowEmptyValue;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java", "class_name": "ChangedParameter", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedParameter", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter.[ChangedParameter]setDescription(ChangedMetadata)", "name": "setDescription", "arg_nums": 1, "params": [{"name": "description", "type": "ChangedMetadata"}], "return_type": "ChangedParameter", "signature": "public ChangedParameter setDescription(final ChangedMetadata description)", "original_string": "  public ChangedParameter setDescription(final ChangedMetadata description) {\n    this.description = description;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java", "class_name": "ChangedParameter", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedParameter", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter.[ChangedParameter]setSchema(ChangedSchema)", "name": "setSchema", "arg_nums": 1, "params": [{"name": "schema", "type": "ChangedSchema"}], "return_type": "ChangedParameter", "signature": "public ChangedParameter setSchema(final ChangedSchema schema)", "original_string": "  public ChangedParameter setSchema(final ChangedSchema schema) {\n    this.schema = schema;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java", "class_name": "ChangedParameter", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedParameter", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter.[ChangedParameter]setContent(ChangedContent)", "name": "setContent", "arg_nums": 1, "params": [{"name": "content", "type": "ChangedContent"}], "return_type": "ChangedParameter", "signature": "public ChangedParameter setContent(final ChangedContent content)", "original_string": "  public ChangedParameter setContent(final ChangedContent content) {\n    this.content = content;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java", "class_name": "ChangedParameter", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedParameter", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter.[ChangedParameter]setExtensions(ChangedExtensions)", "name": "setExtensions", "arg_nums": 1, "params": [{"name": "extensions", "type": "ChangedExtensions"}], "return_type": "ChangedParameter", "signature": "public ChangedParameter setExtensions(final ChangedExtensions extensions)", "original_string": "  public ChangedParameter setExtensions(final ChangedExtensions extensions) {\n    this.extensions = extensions;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java", "class_name": "ChangedParameter", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedParameter", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter.[boolean]equals(Object)", "name": "equals", "arg_nums": 1, "params": [{"name": "o", "type": "Object"}], "return_type": "boolean", "signature": "@Override\n  public boolean equals(Object o)", "original_string": "  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    ChangedParameter that = (ChangedParameter) o;\n    return changeRequired == that.changeRequired\n        && deprecated == that.deprecated\n        && changeStyle == that.changeStyle\n        && changeExplode == that.changeExplode\n        && changeAllowEmptyValue == that.changeAllowEmptyValue\n        && Objects.equals(context, that.context)\n        && Objects.equals(oldParameter, that.oldParameter)\n        && Objects.equals(newParameter, that.newParameter)\n        && Objects.equals(name, that.name)\n        && Objects.equals(in, that.in)\n        && Objects.equals(description, that.description)\n        && Objects.equals(schema, that.schema)\n        && Objects.equals(content, that.content)\n        && Objects.equals(extensions, that.extensions);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java", "class_name": "ChangedParameter", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter.[int]hashCode()", "name": "hashCode", "arg_nums": 0, "params": [], "return_type": "int", "signature": "@Override\n  public int hashCode()", "original_string": "  @Override\n  public int hashCode() {\n    return Objects.hash(\n        context,\n        oldParameter,\n        newParameter,\n        name,\n        in,\n        changeRequired,\n        deprecated,\n        changeStyle,\n        changeExplode,\n        changeAllowEmptyValue,\n        description,\n        schema,\n        content,\n        extensions);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java", "class_name": "ChangedParameter", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter.[java.lang.String]toString()", "name": "toString", "arg_nums": 0, "params": [], "return_type": "java.lang.String", "signature": "@java.lang.Override\n  public java.lang.String toString()", "original_string": "  @java.lang.Override\n  public java.lang.String toString() {\n    return \"ChangedParameter(context=\"\n        + this.getContext()\n        + \", oldParameter=\"\n        + this.getOldParameter()\n        + \", newParameter=\"\n        + this.getNewParameter()\n        + \", name=\"\n        + this.getName()\n        + \", in=\"\n        + this.getIn()\n        + \", changeRequired=\"\n        + this.isChangeRequired()\n        + \", deprecated=\"\n        + this.isDeprecated()\n        + \", changeStyle=\"\n        + this.isChangeStyle()\n        + \", changeExplode=\"\n        + this.isChangeExplode()\n        + \", changeAllowEmptyValue=\"\n        + this.isChangeAllowEmptyValue()\n        + \", description=\"\n        + this.getDescription()\n        + \", schema=\"\n        + this.getSchema()\n        + \", content=\"\n        + this.getContent()\n        + \", extensions=\"\n        + this.getExtensions()\n        + \")\";\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java", "class_name": "ChangedParameter", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameter.java.ChangedParameter", "attributes": {"modifiers": "@java.lang.Override\n  public", "marker_annotations": ["@java.lang.Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "java.lang.String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/Change.java.Change.[Change<T>]changed(T,T)", "name": "changed", "arg_nums": 2, "params": [{"name": "oldValue", "type": "T"}, {"name": "newValue", "type": "T"}], "return_type": "Change<T>", "signature": "public static <T> Change<T> changed(T oldValue, T newValue)", "original_string": "  public static <T> Change<T> changed(T oldValue, T newValue) {\n    return new Change<>(oldValue, newValue, Type.CHANGED);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/Change.java", "class_name": "Change", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/Change.java.Change", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Change<T>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/Change.java.Change.[Change<T>]added(T)", "name": "added", "arg_nums": 1, "params": [{"name": "newValue", "type": "T"}], "return_type": "Change<T>", "signature": "public static <T> Change<T> added(T newValue)", "original_string": "  public static <T> Change<T> added(T newValue) {\n    return new Change<>(null, newValue, Type.ADDED);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/Change.java", "class_name": "Change", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/Change.java.Change", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Change<T>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/Change.java.Change.[Change<T>]removed(T)", "name": "removed", "arg_nums": 1, "params": [{"name": "oldValue", "type": "T"}], "return_type": "Change<T>", "signature": "public static <T> Change<T> removed(T oldValue)", "original_string": "  public static <T> Change<T> removed(T oldValue) {\n    return new Change<>(oldValue, null, Type.REMOVED);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/Change.java", "class_name": "Change", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/Change.java.Change", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Change<T>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/Change.java.Change.[]Change(T,T,Type)", "name": "Change", "arg_nums": 3, "params": [{"name": "oldValue", "type": "T"}, {"name": "newValue", "type": "T"}, {"name": "type", "type": "Type"}], "return_type": "", "signature": "public Change(final T oldValue, final T newValue, final Type type)", "original_string": "  public Change(final T oldValue, final T newValue, final Type type) {\n    this.oldValue = oldValue;\n    this.newValue = newValue;\n    this.type = type;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/Change.java", "class_name": "Change", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/Change.java.Change", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/Change.java.Change.[T]getOldValue()", "name": "getOldValue", "arg_nums": 0, "params": [], "return_type": "T", "signature": "public T getOldValue()", "original_string": "  public T getOldValue() {\n    return this.oldValue;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/Change.java", "class_name": "Change", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/Change.java.Change", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "T", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/Change.java.Change.[T]getNewValue()", "name": "getNewValue", "arg_nums": 0, "params": [], "return_type": "T", "signature": "public T getNewValue()", "original_string": "  public T getNewValue() {\n    return this.newValue;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/Change.java", "class_name": "Change", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/Change.java.Change", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "T", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/Change.java.Change.[Type]getType()", "name": "getType", "arg_nums": 0, "params": [], "return_type": "Type", "signature": "public Type getType()", "original_string": "  public Type getType() {\n    return this.type;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/Change.java", "class_name": "Change", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/Change.java.Change", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Type", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/Change.java.Change.[boolean]equals(Object)", "name": "equals", "arg_nums": 1, "params": [{"name": "o", "type": "Object"}], "return_type": "boolean", "signature": "@Override\n  public boolean equals(Object o)", "original_string": "  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    Change<?> change = (Change<?>) o;\n    return Objects.equals(oldValue, change.oldValue)\n        && Objects.equals(newValue, change.newValue)\n        && type == change.type;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/Change.java", "class_name": "Change", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/Change.java.Change", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/Change.java.Change.[int]hashCode()", "name": "hashCode", "arg_nums": 0, "params": [], "return_type": "int", "signature": "@Override\n  public int hashCode()", "original_string": "  @Override\n  public int hashCode() {\n    return Objects.hash(oldValue, newValue, type);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/Change.java", "class_name": "Change", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/Change.java.Change", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/Change.java.Change.[java.lang.String]toString()", "name": "toString", "arg_nums": 0, "params": [], "return_type": "java.lang.String", "signature": "@java.lang.Override\n  public java.lang.String toString()", "original_string": "  @java.lang.Override\n  public java.lang.String toString() {\n    return \"Change(oldValue=\"\n        + this.getOldValue()\n        + \", newValue=\"\n        + this.getNewValue()\n        + \", type=\"\n        + this.getType()\n        + \")\";\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/Change.java", "class_name": "Change", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/Change.java.Change", "attributes": {"modifiers": "@java.lang.Override\n  public", "marker_annotations": ["@java.lang.Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "java.lang.String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement.java.ChangedSecurityRequirement.[]ChangedSecurityRequirement(SecurityRequirement,SecurityRequirement,DiffContext)", "name": "ChangedSecurityRequirement", "arg_nums": 3, "params": [{"name": "oldSecurityRequirement", "type": "SecurityRequirement"}, {"name": "newSecurityRequirement", "type": "SecurityRequirement"}, {"name": "context", "type": "DiffContext"}], "return_type": "", "signature": "public ChangedSecurityRequirement(\n      SecurityRequirement oldSecurityRequirement,\n      SecurityRequirement newSecurityRequirement,\n      DiffContext context)", "original_string": "  public ChangedSecurityRequirement(\n      SecurityRequirement oldSecurityRequirement,\n      SecurityRequirement newSecurityRequirement,\n      DiffContext context) {\n    this.oldSecurityRequirement = oldSecurityRequirement;\n    this.newSecurityRequirement = newSecurityRequirement;\n    this.context = context;\n    this.changed = new ArrayList<>();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement.java", "class_name": "ChangedSecurityRequirement", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement.java.ChangedSecurityRequirement", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement.java.ChangedSecurityRequirement.[List<Changed>]getChangedElements()", "name": "getChangedElements", "arg_nums": 0, "params": [], "return_type": "List<Changed>", "signature": "@Override\n  public List<Changed> getChangedElements()", "original_string": "  @Override\n  public List<Changed> getChangedElements() {\n    return new ArrayList<>(changed);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement.java", "class_name": "ChangedSecurityRequirement", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement.java.ChangedSecurityRequirement", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<Changed>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement.java.ChangedSecurityRequirement.[DiffResult]isCoreChanged()", "name": "isCoreChanged", "arg_nums": 0, "params": [], "return_type": "DiffResult", "signature": "@Override\n  public DiffResult isCoreChanged()", "original_string": "  @Override\n  public DiffResult isCoreChanged() {\n    if (increased == null && missing == null) {\n      return DiffResult.NO_CHANGES;\n    }\n    if (increased != null) {\n      if (SECURITY_REQUIREMENT_SCHEMES_INCREASED.enabled(context)) {\n        return DiffResult.INCOMPATIBLE;\n      }\n    }\n    return DiffResult.COMPATIBLE;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement.java", "class_name": "ChangedSecurityRequirement", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement.java.ChangedSecurityRequirement", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "DiffResult", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement.java.ChangedSecurityRequirement.[void]addMissing(String,List<String>)", "name": "addMissing", "arg_nums": 2, "params": [{"name": "key", "type": "String"}, {"name": "scopes", "type": "List<String>"}], "return_type": "void", "signature": "public void addMissing(String key, List<String> scopes)", "original_string": "  public void addMissing(String key, List<String> scopes) {\n    if (missing == null) {\n      missing = new SecurityRequirement();\n    }\n    missing.put(key, scopes);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement.java", "class_name": "ChangedSecurityRequirement", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement.java.ChangedSecurityRequirement", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement.java.ChangedSecurityRequirement.[void]addIncreased(String,List<String>)", "name": "addIncreased", "arg_nums": 2, "params": [{"name": "key", "type": "String"}, {"name": "scopes", "type": "List<String>"}], "return_type": "void", "signature": "public void addIncreased(String key, List<String> scopes)", "original_string": "  public void addIncreased(String key, List<String> scopes) {\n    if (increased == null) {\n      increased = new SecurityRequirement();\n    }\n    increased.put(key, scopes);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement.java", "class_name": "ChangedSecurityRequirement", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement.java.ChangedSecurityRequirement", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement.java.ChangedSecurityRequirement.[void]addChanged(ChangedSecurityScheme)", "name": "addChanged", "arg_nums": 1, "params": [{"name": "changedSecurityScheme", "type": "ChangedSecurityScheme"}], "return_type": "void", "signature": "public void addChanged(ChangedSecurityScheme changedSecurityScheme)", "original_string": "  public void addChanged(ChangedSecurityScheme changedSecurityScheme) {\n    changed.add(changedSecurityScheme);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement.java", "class_name": "ChangedSecurityRequirement", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement.java.ChangedSecurityRequirement", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement.java.ChangedSecurityRequirement.[SecurityRequirement]getOldSecurityRequirement()", "name": "getOldSecurityRequirement", "arg_nums": 0, "params": [], "return_type": "SecurityRequirement", "signature": "public SecurityRequirement getOldSecurityRequirement()", "original_string": "  public SecurityRequirement getOldSecurityRequirement() {\n    return this.oldSecurityRequirement;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement.java", "class_name": "ChangedSecurityRequirement", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement.java.ChangedSecurityRequirement", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "SecurityRequirement", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement.java.ChangedSecurityRequirement.[SecurityRequirement]getNewSecurityRequirement()", "name": "getNewSecurityRequirement", "arg_nums": 0, "params": [], "return_type": "SecurityRequirement", "signature": "public SecurityRequirement getNewSecurityRequirement()", "original_string": "  public SecurityRequirement getNewSecurityRequirement() {\n    return this.newSecurityRequirement;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement.java", "class_name": "ChangedSecurityRequirement", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement.java.ChangedSecurityRequirement", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "SecurityRequirement", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement.java.ChangedSecurityRequirement.[SecurityRequirement]getMissing()", "name": "getMissing", "arg_nums": 0, "params": [], "return_type": "SecurityRequirement", "signature": "public SecurityRequirement getMissing()", "original_string": "  public SecurityRequirement getMissing() {\n    return this.missing;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement.java", "class_name": "ChangedSecurityRequirement", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement.java.ChangedSecurityRequirement", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "SecurityRequirement", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement.java.ChangedSecurityRequirement.[SecurityRequirement]getIncreased()", "name": "getIncreased", "arg_nums": 0, "params": [], "return_type": "SecurityRequirement", "signature": "public SecurityRequirement getIncreased()", "original_string": "  public SecurityRequirement getIncreased() {\n    return this.increased;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement.java", "class_name": "ChangedSecurityRequirement", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement.java.ChangedSecurityRequirement", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "SecurityRequirement", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement.java.ChangedSecurityRequirement.[List<ChangedSecurityScheme>]getChanged()", "name": "getChanged", "arg_nums": 0, "params": [], "return_type": "List<ChangedSecurityScheme>", "signature": "public List<ChangedSecurityScheme> getChanged()", "original_string": "  public List<ChangedSecurityScheme> getChanged() {\n    return this.changed;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement.java", "class_name": "ChangedSecurityRequirement", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement.java.ChangedSecurityRequirement", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<ChangedSecurityScheme>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement.java.ChangedSecurityRequirement.[ChangedSecurityRequirement]setOldSecurityRequirement(SecurityRequirement)", "name": "setOldSecurityRequirement", "arg_nums": 1, "params": [{"name": "oldSecurityRequirement", "type": "SecurityRequirement"}], "return_type": "ChangedSecurityRequirement", "signature": "public ChangedSecurityRequirement setOldSecurityRequirement(\n      final SecurityRequirement oldSecurityRequirement)", "original_string": "  public ChangedSecurityRequirement setOldSecurityRequirement(\n      final SecurityRequirement oldSecurityRequirement) {\n    this.oldSecurityRequirement = oldSecurityRequirement;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement.java", "class_name": "ChangedSecurityRequirement", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement.java.ChangedSecurityRequirement", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedSecurityRequirement", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement.java.ChangedSecurityRequirement.[ChangedSecurityRequirement]setNewSecurityRequirement(SecurityRequirement)", "name": "setNewSecurityRequirement", "arg_nums": 1, "params": [{"name": "newSecurityRequirement", "type": "SecurityRequirement"}], "return_type": "ChangedSecurityRequirement", "signature": "public ChangedSecurityRequirement setNewSecurityRequirement(\n      final SecurityRequirement newSecurityRequirement)", "original_string": "  public ChangedSecurityRequirement setNewSecurityRequirement(\n      final SecurityRequirement newSecurityRequirement) {\n    this.newSecurityRequirement = newSecurityRequirement;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement.java", "class_name": "ChangedSecurityRequirement", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement.java.ChangedSecurityRequirement", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedSecurityRequirement", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement.java.ChangedSecurityRequirement.[ChangedSecurityRequirement]setMissing(SecurityRequirement)", "name": "setMissing", "arg_nums": 1, "params": [{"name": "missing", "type": "SecurityRequirement"}], "return_type": "ChangedSecurityRequirement", "signature": "public ChangedSecurityRequirement setMissing(final SecurityRequirement missing)", "original_string": "  public ChangedSecurityRequirement setMissing(final SecurityRequirement missing) {\n    this.missing = missing;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement.java", "class_name": "ChangedSecurityRequirement", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement.java.ChangedSecurityRequirement", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedSecurityRequirement", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement.java.ChangedSecurityRequirement.[ChangedSecurityRequirement]setIncreased(SecurityRequirement)", "name": "setIncreased", "arg_nums": 1, "params": [{"name": "increased", "type": "SecurityRequirement"}], "return_type": "ChangedSecurityRequirement", "signature": "public ChangedSecurityRequirement setIncreased(final SecurityRequirement increased)", "original_string": "  public ChangedSecurityRequirement setIncreased(final SecurityRequirement increased) {\n    this.increased = increased;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement.java", "class_name": "ChangedSecurityRequirement", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement.java.ChangedSecurityRequirement", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedSecurityRequirement", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement.java.ChangedSecurityRequirement.[ChangedSecurityRequirement]setChanged(List<ChangedSecurityScheme>)", "name": "setChanged", "arg_nums": 1, "params": [{"name": "changed", "type": "List<ChangedSecurityScheme>"}], "return_type": "ChangedSecurityRequirement", "signature": "public ChangedSecurityRequirement setChanged(final List<ChangedSecurityScheme> changed)", "original_string": "  public ChangedSecurityRequirement setChanged(final List<ChangedSecurityScheme> changed) {\n    this.changed = changed;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement.java", "class_name": "ChangedSecurityRequirement", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement.java.ChangedSecurityRequirement", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedSecurityRequirement", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement.java.ChangedSecurityRequirement.[boolean]equals(Object)", "name": "equals", "arg_nums": 1, "params": [{"name": "o", "type": "Object"}], "return_type": "boolean", "signature": "@Override\n  public boolean equals(Object o)", "original_string": "  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    ChangedSecurityRequirement that = (ChangedSecurityRequirement) o;\n    return Objects.equals(oldSecurityRequirement, that.oldSecurityRequirement)\n        && Objects.equals(newSecurityRequirement, that.newSecurityRequirement)\n        && Objects.equals(missing, that.missing)\n        && Objects.equals(increased, that.increased)\n        && Objects.equals(changed, that.changed);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement.java", "class_name": "ChangedSecurityRequirement", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement.java.ChangedSecurityRequirement", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement.java.ChangedSecurityRequirement.[int]hashCode()", "name": "hashCode", "arg_nums": 0, "params": [], "return_type": "int", "signature": "@Override\n  public int hashCode()", "original_string": "  @Override\n  public int hashCode() {\n    return Objects.hash(\n        oldSecurityRequirement, newSecurityRequirement, missing, increased, changed);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement.java", "class_name": "ChangedSecurityRequirement", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement.java.ChangedSecurityRequirement", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement.java.ChangedSecurityRequirement.[java.lang.String]toString()", "name": "toString", "arg_nums": 0, "params": [], "return_type": "java.lang.String", "signature": "@java.lang.Override\n  public java.lang.String toString()", "original_string": "  @java.lang.Override\n  public java.lang.String toString() {\n    return \"ChangedSecurityRequirement(oldSecurityRequirement=\"\n        + this.getOldSecurityRequirement()\n        + \", newSecurityRequirement=\"\n        + this.getNewSecurityRequirement()\n        + \", missing=\"\n        + this.getMissing()\n        + \", increased=\"\n        + this.getIncreased()\n        + \", changed=\"\n        + this.getChanged()\n        + \")\";\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement.java", "class_name": "ChangedSecurityRequirement", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement.java.ChangedSecurityRequirement", "attributes": {"modifiers": "@java.lang.Override\n  public", "marker_annotations": ["@java.lang.Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "java.lang.String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java.ChangedHeader.[]ChangedHeader(Header,Header,DiffContext)", "name": "ChangedHeader", "arg_nums": 3, "params": [{"name": "oldHeader", "type": "Header"}, {"name": "newHeader", "type": "Header"}, {"name": "context", "type": "DiffContext"}], "return_type": "", "signature": "public ChangedHeader(Header oldHeader, Header newHeader, DiffContext context)", "original_string": "  public ChangedHeader(Header oldHeader, Header newHeader, DiffContext context) {\n    this.oldHeader = oldHeader;\n    this.newHeader = newHeader;\n    this.context = context;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java", "class_name": "ChangedHeader", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java.ChangedHeader", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java.ChangedHeader.[List<Changed>]getChangedElements()", "name": "getChangedElements", "arg_nums": 0, "params": [], "return_type": "List<Changed>", "signature": "@Override\n  public List<Changed> getChangedElements()", "original_string": "  @Override\n  public List<Changed> getChangedElements() {\n    return Arrays.asList(description, schema, content, extensions);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java", "class_name": "ChangedHeader", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java.ChangedHeader", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<Changed>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java.ChangedHeader.[DiffResult]isCoreChanged()", "name": "isCoreChanged", "arg_nums": 0, "params": [], "return_type": "DiffResult", "signature": "@Override\n  public DiffResult isCoreChanged()", "original_string": "  @Override\n  public DiffResult isCoreChanged() {\n    if (!required && !deprecated && !style && !explode) {\n      return DiffResult.NO_CHANGES;\n    }\n    if (explode) {\n      if (RESPONSE_HEADER_EXPLODE_CHANGED.enabled(context)) {\n        return DiffResult.INCOMPATIBLE;\n      }\n    }\n    if (required) {\n      boolean requiredOld = oldHeader.getRequired() != null ? oldHeader.getRequired() : false;\n      boolean requiredNew = newHeader.getRequired() != null ? newHeader.getRequired() : false;\n      if (requiredOld && !requiredNew) {\n        if (RESPONSE_HEADER_REQUIRED_DECREASED.enabled(context)) {\n          return DiffResult.INCOMPATIBLE;\n        }\n      }\n      if (!requiredOld && requiredNew) {\n        // TODO: Document why desired or remove support. Client will just ignore new header?\n        if (RESPONSE_HEADER_REQUIRED_INCREASED.enabled(context)) {\n          return DiffResult.INCOMPATIBLE;\n        }\n      }\n    }\n    if (style) {\n      return DiffResult.INCOMPATIBLE;\n    }\n    return DiffResult.COMPATIBLE;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java", "class_name": "ChangedHeader", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java.ChangedHeader", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "DiffResult", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java.ChangedHeader.[Header]getOldHeader()", "name": "getOldHeader", "arg_nums": 0, "params": [], "return_type": "Header", "signature": "public Header getOldHeader()", "original_string": "  public Header getOldHeader() {\n    return this.oldHeader;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java", "class_name": "ChangedHeader", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java.ChangedHeader", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Header", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java.ChangedHeader.[Header]getNewHeader()", "name": "getNewHeader", "arg_nums": 0, "params": [], "return_type": "Header", "signature": "public Header getNewHeader()", "original_string": "  public Header getNewHeader() {\n    return this.newHeader;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java", "class_name": "ChangedHeader", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java.ChangedHeader", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Header", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java.ChangedHeader.[DiffContext]getContext()", "name": "getContext", "arg_nums": 0, "params": [], "return_type": "DiffContext", "signature": "public DiffContext getContext()", "original_string": "  public DiffContext getContext() {\n    return this.context;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java", "class_name": "ChangedHeader", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java.ChangedHeader", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "DiffContext", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java.ChangedHeader.[boolean]isRequired()", "name": "isRequired", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "public boolean isRequired()", "original_string": "  public boolean isRequired() {\n    return this.required;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java", "class_name": "ChangedHeader", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java.ChangedHeader", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java.ChangedHeader.[boolean]isDeprecated()", "name": "isDeprecated", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "public boolean isDeprecated()", "original_string": "  public boolean isDeprecated() {\n    return this.deprecated;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java", "class_name": "ChangedHeader", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java.ChangedHeader", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java.ChangedHeader.[boolean]isStyle()", "name": "isStyle", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "public boolean isStyle()", "original_string": "  public boolean isStyle() {\n    return this.style;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java", "class_name": "ChangedHeader", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java.ChangedHeader", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java.ChangedHeader.[boolean]isExplode()", "name": "isExplode", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "public boolean isExplode()", "original_string": "  public boolean isExplode() {\n    return this.explode;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java", "class_name": "ChangedHeader", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java.ChangedHeader", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java.ChangedHeader.[ChangedMetadata]getDescription()", "name": "getDescription", "arg_nums": 0, "params": [], "return_type": "ChangedMetadata", "signature": "public ChangedMetadata getDescription()", "original_string": "  public ChangedMetadata getDescription() {\n    return this.description;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java", "class_name": "ChangedHeader", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java.ChangedHeader", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedMetadata", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java.ChangedHeader.[ChangedSchema]getSchema()", "name": "getSchema", "arg_nums": 0, "params": [], "return_type": "ChangedSchema", "signature": "public ChangedSchema getSchema()", "original_string": "  public ChangedSchema getSchema() {\n    return this.schema;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java", "class_name": "ChangedHeader", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java.ChangedHeader", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedSchema", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java.ChangedHeader.[ChangedContent]getContent()", "name": "getContent", "arg_nums": 0, "params": [], "return_type": "ChangedContent", "signature": "public ChangedContent getContent()", "original_string": "  public ChangedContent getContent() {\n    return this.content;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java", "class_name": "ChangedHeader", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java.ChangedHeader", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedContent", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java.ChangedHeader.[ChangedExtensions]getExtensions()", "name": "getExtensions", "arg_nums": 0, "params": [], "return_type": "ChangedExtensions", "signature": "public ChangedExtensions getExtensions()", "original_string": "  public ChangedExtensions getExtensions() {\n    return this.extensions;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java", "class_name": "ChangedHeader", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java.ChangedHeader", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedExtensions", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java.ChangedHeader.[ChangedHeader]setRequired(boolean)", "name": "setRequired", "arg_nums": 1, "params": [{"name": "required", "type": "boolean"}], "return_type": "ChangedHeader", "signature": "public ChangedHeader setRequired(final boolean required)", "original_string": "  public ChangedHeader setRequired(final boolean required) {\n    this.required = required;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java", "class_name": "ChangedHeader", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java.ChangedHeader", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedHeader", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java.ChangedHeader.[ChangedHeader]setDeprecated(boolean)", "name": "setDeprecated", "arg_nums": 1, "params": [{"name": "deprecated", "type": "boolean"}], "return_type": "ChangedHeader", "signature": "public ChangedHeader setDeprecated(final boolean deprecated)", "original_string": "  public ChangedHeader setDeprecated(final boolean deprecated) {\n    this.deprecated = deprecated;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java", "class_name": "ChangedHeader", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java.ChangedHeader", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedHeader", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java.ChangedHeader.[ChangedHeader]setStyle(boolean)", "name": "setStyle", "arg_nums": 1, "params": [{"name": "style", "type": "boolean"}], "return_type": "ChangedHeader", "signature": "public ChangedHeader setStyle(final boolean style)", "original_string": "  public ChangedHeader setStyle(final boolean style) {\n    this.style = style;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java", "class_name": "ChangedHeader", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java.ChangedHeader", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedHeader", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java.ChangedHeader.[ChangedHeader]setExplode(boolean)", "name": "setExplode", "arg_nums": 1, "params": [{"name": "explode", "type": "boolean"}], "return_type": "ChangedHeader", "signature": "public ChangedHeader setExplode(final boolean explode)", "original_string": "  public ChangedHeader setExplode(final boolean explode) {\n    this.explode = explode;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java", "class_name": "ChangedHeader", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java.ChangedHeader", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedHeader", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java.ChangedHeader.[ChangedHeader]setDescription(ChangedMetadata)", "name": "setDescription", "arg_nums": 1, "params": [{"name": "description", "type": "ChangedMetadata"}], "return_type": "ChangedHeader", "signature": "public ChangedHeader setDescription(final ChangedMetadata description)", "original_string": "  public ChangedHeader setDescription(final ChangedMetadata description) {\n    this.description = description;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java", "class_name": "ChangedHeader", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java.ChangedHeader", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedHeader", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java.ChangedHeader.[ChangedHeader]setSchema(ChangedSchema)", "name": "setSchema", "arg_nums": 1, "params": [{"name": "schema", "type": "ChangedSchema"}], "return_type": "ChangedHeader", "signature": "public ChangedHeader setSchema(final ChangedSchema schema)", "original_string": "  public ChangedHeader setSchema(final ChangedSchema schema) {\n    this.schema = schema;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java", "class_name": "ChangedHeader", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java.ChangedHeader", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedHeader", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java.ChangedHeader.[ChangedHeader]setContent(ChangedContent)", "name": "setContent", "arg_nums": 1, "params": [{"name": "content", "type": "ChangedContent"}], "return_type": "ChangedHeader", "signature": "public ChangedHeader setContent(final ChangedContent content)", "original_string": "  public ChangedHeader setContent(final ChangedContent content) {\n    this.content = content;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java", "class_name": "ChangedHeader", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java.ChangedHeader", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedHeader", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java.ChangedHeader.[ChangedHeader]setExtensions(ChangedExtensions)", "name": "setExtensions", "arg_nums": 1, "params": [{"name": "extensions", "type": "ChangedExtensions"}], "return_type": "ChangedHeader", "signature": "public ChangedHeader setExtensions(final ChangedExtensions extensions)", "original_string": "  public ChangedHeader setExtensions(final ChangedExtensions extensions) {\n    this.extensions = extensions;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java", "class_name": "ChangedHeader", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java.ChangedHeader", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedHeader", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java.ChangedHeader.[boolean]equals(Object)", "name": "equals", "arg_nums": 1, "params": [{"name": "o", "type": "Object"}], "return_type": "boolean", "signature": "@Override\n  public boolean equals(Object o)", "original_string": "  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    ChangedHeader that = (ChangedHeader) o;\n    return required == that.required\n        && deprecated == that.deprecated\n        && style == that.style\n        && explode == that.explode\n        && Objects.equals(oldHeader, that.oldHeader)\n        && Objects.equals(newHeader, that.newHeader)\n        && Objects.equals(context, that.context)\n        && Objects.equals(description, that.description)\n        && Objects.equals(schema, that.schema)\n        && Objects.equals(content, that.content)\n        && Objects.equals(extensions, that.extensions);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java", "class_name": "ChangedHeader", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java.ChangedHeader", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java.ChangedHeader.[int]hashCode()", "name": "hashCode", "arg_nums": 0, "params": [], "return_type": "int", "signature": "@Override\n  public int hashCode()", "original_string": "  @Override\n  public int hashCode() {\n    return Objects.hash(\n        oldHeader,\n        newHeader,\n        context,\n        required,\n        deprecated,\n        style,\n        explode,\n        description,\n        schema,\n        content,\n        extensions);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java", "class_name": "ChangedHeader", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java.ChangedHeader", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java.ChangedHeader.[java.lang.String]toString()", "name": "toString", "arg_nums": 0, "params": [], "return_type": "java.lang.String", "signature": "@java.lang.Override\n  public java.lang.String toString()", "original_string": "  @java.lang.Override\n  public java.lang.String toString() {\n    return \"ChangedHeader(oldHeader=\"\n        + this.getOldHeader()\n        + \", newHeader=\"\n        + this.getNewHeader()\n        + \", context=\"\n        + this.getContext()\n        + \", required=\"\n        + this.isRequired()\n        + \", deprecated=\"\n        + this.isDeprecated()\n        + \", style=\"\n        + this.isStyle()\n        + \", explode=\"\n        + this.isExplode()\n        + \", description=\"\n        + this.getDescription()\n        + \", schema=\"\n        + this.getSchema()\n        + \", content=\"\n        + this.getContent()\n        + \", extensions=\"\n        + this.getExtensions()\n        + \")\";\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java", "class_name": "ChangedHeader", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeader.java.ChangedHeader", "attributes": {"modifiers": "@java.lang.Override\n  public", "marker_annotations": ["@java.lang.Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "java.lang.String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameters.java.ChangedParameters.[]ChangedParameters(List<Parameter>,List<Parameter>,DiffContext)", "name": "ChangedParameters", "arg_nums": 3, "params": [{"name": "oldParameterList", "type": "List<Parameter>"}, {"name": "newParameterList", "type": "List<Parameter>"}, {"name": "context", "type": "DiffContext"}], "return_type": "", "signature": "public ChangedParameters(\n      List<Parameter> oldParameterList, List<Parameter> newParameterList, DiffContext context)", "original_string": "  public ChangedParameters(\n      List<Parameter> oldParameterList, List<Parameter> newParameterList, DiffContext context) {\n    this.oldParameterList = oldParameterList;\n    this.newParameterList = newParameterList;\n    this.context = context;\n    this.increased = new ArrayList<>();\n    this.missing = new ArrayList<>();\n    this.changed = new ArrayList<>();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameters.java", "class_name": "ChangedParameters", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameters.java.ChangedParameters", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameters.java.ChangedParameters.[List<Changed>]getChangedElements()", "name": "getChangedElements", "arg_nums": 0, "params": [], "return_type": "List<Changed>", "signature": "@Override\n  public List<Changed> getChangedElements()", "original_string": "  @Override\n  public List<Changed> getChangedElements() {\n    return new ArrayList<>(changed);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameters.java", "class_name": "ChangedParameters", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameters.java.ChangedParameters", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<Changed>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameters.java.ChangedParameters.[DiffResult]isCoreChanged()", "name": "isCoreChanged", "arg_nums": 0, "params": [], "return_type": "DiffResult", "signature": "@Override\n  public DiffResult isCoreChanged()", "original_string": "  @Override\n  public DiffResult isCoreChanged() {\n    if (increased.isEmpty() && missing.isEmpty()) {\n      return DiffResult.NO_CHANGES;\n    }\n    if (!missing.isEmpty()) {\n      if (REQUEST_PARAMS_DECREASED.enabled(context)) {\n        return DiffResult.INCOMPATIBLE;\n      }\n    }\n    if (increased.stream().anyMatch(p -> p.getRequired() != null && p.getRequired())) {\n      if (REQUEST_PARAMS_REQUIRED_INCREASED.enabled(context)) {\n        return DiffResult.INCOMPATIBLE;\n      }\n    }\n    return DiffResult.COMPATIBLE;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameters.java", "class_name": "ChangedParameters", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameters.java.ChangedParameters", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "DiffResult", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameters.java.ChangedParameters.[List<Parameter>]getOldParameterList()", "name": "getOldParameterList", "arg_nums": 0, "params": [], "return_type": "List<Parameter>", "signature": "public List<Parameter> getOldParameterList()", "original_string": "  public List<Parameter> getOldParameterList() {\n    return this.oldParameterList;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameters.java", "class_name": "ChangedParameters", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameters.java.ChangedParameters", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<Parameter>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameters.java.ChangedParameters.[List<Parameter>]getNewParameterList()", "name": "getNewParameterList", "arg_nums": 0, "params": [], "return_type": "List<Parameter>", "signature": "public List<Parameter> getNewParameterList()", "original_string": "  public List<Parameter> getNewParameterList() {\n    return this.newParameterList;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameters.java", "class_name": "ChangedParameters", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameters.java.ChangedParameters", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<Parameter>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameters.java.ChangedParameters.[DiffContext]getContext()", "name": "getContext", "arg_nums": 0, "params": [], "return_type": "DiffContext", "signature": "public DiffContext getContext()", "original_string": "  public DiffContext getContext() {\n    return this.context;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameters.java", "class_name": "ChangedParameters", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameters.java.ChangedParameters", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "DiffContext", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameters.java.ChangedParameters.[List<Parameter>]getIncreased()", "name": "getIncreased", "arg_nums": 0, "params": [], "return_type": "List<Parameter>", "signature": "public List<Parameter> getIncreased()", "original_string": "  public List<Parameter> getIncreased() {\n    return this.increased;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameters.java", "class_name": "ChangedParameters", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameters.java.ChangedParameters", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<Parameter>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameters.java.ChangedParameters.[List<Parameter>]getMissing()", "name": "getMissing", "arg_nums": 0, "params": [], "return_type": "List<Parameter>", "signature": "public List<Parameter> getMissing()", "original_string": "  public List<Parameter> getMissing() {\n    return this.missing;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameters.java", "class_name": "ChangedParameters", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameters.java.ChangedParameters", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<Parameter>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameters.java.ChangedParameters.[List<ChangedParameter>]getChanged()", "name": "getChanged", "arg_nums": 0, "params": [], "return_type": "List<ChangedParameter>", "signature": "public List<ChangedParameter> getChanged()", "original_string": "  public List<ChangedParameter> getChanged() {\n    return this.changed;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameters.java", "class_name": "ChangedParameters", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameters.java.ChangedParameters", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<ChangedParameter>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameters.java.ChangedParameters.[ChangedParameters]setIncreased(List<Parameter>)", "name": "setIncreased", "arg_nums": 1, "params": [{"name": "increased", "type": "List<Parameter>"}], "return_type": "ChangedParameters", "signature": "public ChangedParameters setIncreased(final List<Parameter> increased)", "original_string": "  public ChangedParameters setIncreased(final List<Parameter> increased) {\n    this.increased = increased;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameters.java", "class_name": "ChangedParameters", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameters.java.ChangedParameters", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedParameters", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameters.java.ChangedParameters.[ChangedParameters]setMissing(List<Parameter>)", "name": "setMissing", "arg_nums": 1, "params": [{"name": "missing", "type": "List<Parameter>"}], "return_type": "ChangedParameters", "signature": "public ChangedParameters setMissing(final List<Parameter> missing)", "original_string": "  public ChangedParameters setMissing(final List<Parameter> missing) {\n    this.missing = missing;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameters.java", "class_name": "ChangedParameters", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameters.java.ChangedParameters", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedParameters", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameters.java.ChangedParameters.[ChangedParameters]setChanged(List<ChangedParameter>)", "name": "setChanged", "arg_nums": 1, "params": [{"name": "changed", "type": "List<ChangedParameter>"}], "return_type": "ChangedParameters", "signature": "public ChangedParameters setChanged(final List<ChangedParameter> changed)", "original_string": "  public ChangedParameters setChanged(final List<ChangedParameter> changed) {\n    this.changed = changed;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameters.java", "class_name": "ChangedParameters", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameters.java.ChangedParameters", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedParameters", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameters.java.ChangedParameters.[boolean]equals(Object)", "name": "equals", "arg_nums": 1, "params": [{"name": "o", "type": "Object"}], "return_type": "boolean", "signature": "@Override\n  public boolean equals(Object o)", "original_string": "  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    ChangedParameters that = (ChangedParameters) o;\n    return Objects.equals(oldParameterList, that.oldParameterList)\n        && Objects.equals(newParameterList, that.newParameterList)\n        && Objects.equals(context, that.context)\n        && Objects.equals(increased, that.increased)\n        && Objects.equals(missing, that.missing)\n        && Objects.equals(changed, that.changed);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameters.java", "class_name": "ChangedParameters", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameters.java.ChangedParameters", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameters.java.ChangedParameters.[int]hashCode()", "name": "hashCode", "arg_nums": 0, "params": [], "return_type": "int", "signature": "@Override\n  public int hashCode()", "original_string": "  @Override\n  public int hashCode() {\n    return Objects.hash(oldParameterList, newParameterList, context, increased, missing, changed);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameters.java", "class_name": "ChangedParameters", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameters.java.ChangedParameters", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameters.java.ChangedParameters.[java.lang.String]toString()", "name": "toString", "arg_nums": 0, "params": [], "return_type": "java.lang.String", "signature": "@java.lang.Override\n  public java.lang.String toString()", "original_string": "  @java.lang.Override\n  public java.lang.String toString() {\n    return \"ChangedParameters(oldParameterList=\"\n        + this.getOldParameterList()\n        + \", newParameterList=\"\n        + this.getNewParameterList()\n        + \", context=\"\n        + this.getContext()\n        + \", increased=\"\n        + this.getIncreased()\n        + \", missing=\"\n        + this.getMissing()\n        + \", changed=\"\n        + this.getChanged()\n        + \")\";\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameters.java", "class_name": "ChangedParameters", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedParameters.java.ChangedParameters", "attributes": {"modifiers": "@java.lang.Override\n  public", "marker_annotations": ["@java.lang.Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "java.lang.String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedApiResponse.java.ChangedApiResponse.[]ChangedApiResponse(ApiResponses,ApiResponses,DiffContext)", "name": "ChangedApiResponse", "arg_nums": 3, "params": [{"name": "oldApiResponses", "type": "ApiResponses"}, {"name": "newApiResponses", "type": "ApiResponses"}, {"name": "context", "type": "DiffContext"}], "return_type": "", "signature": "public ChangedApiResponse(\n      ApiResponses oldApiResponses, ApiResponses newApiResponses, DiffContext context)", "original_string": "  public ChangedApiResponse(\n      ApiResponses oldApiResponses, ApiResponses newApiResponses, DiffContext context) {\n    this.oldApiResponses = oldApiResponses;\n    this.newApiResponses = newApiResponses;\n    this.context = context;\n    this.missing = new LinkedHashMap<>();\n    this.increased = new LinkedHashMap<>();\n    this.changed = new LinkedHashMap<>();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedApiResponse.java", "class_name": "ChangedApiResponse", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedApiResponse.java.ChangedApiResponse", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedApiResponse.java.ChangedApiResponse.[List<Changed>]getChangedElements()", "name": "getChangedElements", "arg_nums": 0, "params": [], "return_type": "List<Changed>", "signature": "@Override\n  public List<Changed> getChangedElements()", "original_string": "  @Override\n  public List<Changed> getChangedElements() {\n    return Stream.concat(changed.values().stream(), Stream.of(extensions))\n        .collect(Collectors.toList());\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedApiResponse.java", "class_name": "ChangedApiResponse", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedApiResponse.java.ChangedApiResponse", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<Changed>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedApiResponse.java.ChangedApiResponse.[DiffResult]isCoreChanged()", "name": "isCoreChanged", "arg_nums": 0, "params": [], "return_type": "DiffResult", "signature": "@Override\n  public DiffResult isCoreChanged()", "original_string": "  @Override\n  public DiffResult isCoreChanged() {\n    if (increased.isEmpty() && missing.isEmpty()) {\n      return DiffResult.NO_CHANGES;\n    }\n    if (!missing.isEmpty()) {\n      if (RESPONSE_RESPONSES_DECREASED.enabled(context)) {\n        return DiffResult.INCOMPATIBLE;\n      }\n    }\n    return DiffResult.COMPATIBLE;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedApiResponse.java", "class_name": "ChangedApiResponse", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedApiResponse.java.ChangedApiResponse", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "DiffResult", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedApiResponse.java.ChangedApiResponse.[ApiResponses]getOldApiResponses()", "name": "getOldApiResponses", "arg_nums": 0, "params": [], "return_type": "ApiResponses", "signature": "public ApiResponses getOldApiResponses()", "original_string": "  public ApiResponses getOldApiResponses() {\n    return this.oldApiResponses;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedApiResponse.java", "class_name": "ChangedApiResponse", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedApiResponse.java.ChangedApiResponse", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ApiResponses", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedApiResponse.java.ChangedApiResponse.[ApiResponses]getNewApiResponses()", "name": "getNewApiResponses", "arg_nums": 0, "params": [], "return_type": "ApiResponses", "signature": "public ApiResponses getNewApiResponses()", "original_string": "  public ApiResponses getNewApiResponses() {\n    return this.newApiResponses;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedApiResponse.java", "class_name": "ChangedApiResponse", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedApiResponse.java.ChangedApiResponse", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ApiResponses", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedApiResponse.java.ChangedApiResponse.[DiffContext]getContext()", "name": "getContext", "arg_nums": 0, "params": [], "return_type": "DiffContext", "signature": "public DiffContext getContext()", "original_string": "  public DiffContext getContext() {\n    return this.context;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedApiResponse.java", "class_name": "ChangedApiResponse", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedApiResponse.java.ChangedApiResponse", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "DiffContext", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedApiResponse.java.ChangedApiResponse.[Map<String, ApiResponse>]getIncreased()", "name": "getIncreased", "arg_nums": 0, "params": [], "return_type": "Map<String, ApiResponse>", "signature": "public Map<String, ApiResponse> getIncreased()", "original_string": "  public Map<String, ApiResponse> getIncreased() {\n    return this.increased;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedApiResponse.java", "class_name": "ChangedApiResponse", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedApiResponse.java.ChangedApiResponse", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Map<String, ApiResponse>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedApiResponse.java.ChangedApiResponse.[Map<String, ApiResponse>]getMissing()", "name": "getMissing", "arg_nums": 0, "params": [], "return_type": "Map<String, ApiResponse>", "signature": "public Map<String, ApiResponse> getMissing()", "original_string": "  public Map<String, ApiResponse> getMissing() {\n    return this.missing;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedApiResponse.java", "class_name": "ChangedApiResponse", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedApiResponse.java.ChangedApiResponse", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Map<String, ApiResponse>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedApiResponse.java.ChangedApiResponse.[Map<String, ChangedResponse>]getChanged()", "name": "getChanged", "arg_nums": 0, "params": [], "return_type": "Map<String, ChangedResponse>", "signature": "public Map<String, ChangedResponse> getChanged()", "original_string": "  public Map<String, ChangedResponse> getChanged() {\n    return this.changed;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedApiResponse.java", "class_name": "ChangedApiResponse", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedApiResponse.java.ChangedApiResponse", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Map<String, ChangedResponse>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedApiResponse.java.ChangedApiResponse.[ChangedExtensions]getExtensions()", "name": "getExtensions", "arg_nums": 0, "params": [], "return_type": "ChangedExtensions", "signature": "public ChangedExtensions getExtensions()", "original_string": "  public ChangedExtensions getExtensions() {\n    return this.extensions;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedApiResponse.java", "class_name": "ChangedApiResponse", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedApiResponse.java.ChangedApiResponse", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedExtensions", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedApiResponse.java.ChangedApiResponse.[ChangedApiResponse]setIncreased(Map<String, ApiResponse>)", "name": "setIncreased", "arg_nums": 1, "params": [{"name": "increased", "type": "Map<String, ApiResponse>"}], "return_type": "ChangedApiResponse", "signature": "public ChangedApiResponse setIncreased(final Map<String, ApiResponse> increased)", "original_string": "  public ChangedApiResponse setIncreased(final Map<String, ApiResponse> increased) {\n    this.increased = increased;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedApiResponse.java", "class_name": "ChangedApiResponse", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedApiResponse.java.ChangedApiResponse", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedApiResponse", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedApiResponse.java.ChangedApiResponse.[ChangedApiResponse]setMissing(Map<String, ApiResponse>)", "name": "setMissing", "arg_nums": 1, "params": [{"name": "missing", "type": "Map<String, ApiResponse>"}], "return_type": "ChangedApiResponse", "signature": "public ChangedApiResponse setMissing(final Map<String, ApiResponse> missing)", "original_string": "  public ChangedApiResponse setMissing(final Map<String, ApiResponse> missing) {\n    this.missing = missing;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedApiResponse.java", "class_name": "ChangedApiResponse", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedApiResponse.java.ChangedApiResponse", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedApiResponse", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedApiResponse.java.ChangedApiResponse.[ChangedApiResponse]setChanged(Map<String, ChangedResponse>)", "name": "setChanged", "arg_nums": 1, "params": [{"name": "changed", "type": "Map<String, ChangedResponse>"}], "return_type": "ChangedApiResponse", "signature": "public ChangedApiResponse setChanged(final Map<String, ChangedResponse> changed)", "original_string": "  public ChangedApiResponse setChanged(final Map<String, ChangedResponse> changed) {\n    this.changed = changed;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedApiResponse.java", "class_name": "ChangedApiResponse", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedApiResponse.java.ChangedApiResponse", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedApiResponse", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedApiResponse.java.ChangedApiResponse.[ChangedApiResponse]setExtensions(ChangedExtensions)", "name": "setExtensions", "arg_nums": 1, "params": [{"name": "extensions", "type": "ChangedExtensions"}], "return_type": "ChangedApiResponse", "signature": "public ChangedApiResponse setExtensions(final ChangedExtensions extensions)", "original_string": "  public ChangedApiResponse setExtensions(final ChangedExtensions extensions) {\n    this.extensions = extensions;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedApiResponse.java", "class_name": "ChangedApiResponse", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedApiResponse.java.ChangedApiResponse", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedApiResponse", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedApiResponse.java.ChangedApiResponse.[boolean]equals(Object)", "name": "equals", "arg_nums": 1, "params": [{"name": "o", "type": "Object"}], "return_type": "boolean", "signature": "@Override\n  public boolean equals(Object o)", "original_string": "  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    ChangedApiResponse that = (ChangedApiResponse) o;\n    return Objects.equals(oldApiResponses, that.oldApiResponses)\n        && Objects.equals(newApiResponses, that.newApiResponses)\n        && Objects.equals(context, that.context)\n        && Objects.equals(increased, that.increased)\n        && Objects.equals(missing, that.missing)\n        && Objects.equals(changed, that.changed)\n        && Objects.equals(extensions, that.extensions);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedApiResponse.java", "class_name": "ChangedApiResponse", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedApiResponse.java.ChangedApiResponse", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedApiResponse.java.ChangedApiResponse.[int]hashCode()", "name": "hashCode", "arg_nums": 0, "params": [], "return_type": "int", "signature": "@Override\n  public int hashCode()", "original_string": "  @Override\n  public int hashCode() {\n    return Objects.hash(\n        oldApiResponses, newApiResponses, context, increased, missing, changed, extensions);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedApiResponse.java", "class_name": "ChangedApiResponse", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedApiResponse.java.ChangedApiResponse", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedApiResponse.java.ChangedApiResponse.[java.lang.String]toString()", "name": "toString", "arg_nums": 0, "params": [], "return_type": "java.lang.String", "signature": "@java.lang.Override\n  public java.lang.String toString()", "original_string": "  @java.lang.Override\n  public java.lang.String toString() {\n    return \"ChangedApiResponse(oldApiResponses=\"\n        + this.getOldApiResponses()\n        + \", newApiResponses=\"\n        + this.getNewApiResponses()\n        + \", context=\"\n        + this.getContext()\n        + \", increased=\"\n        + this.getIncreased()\n        + \", missing=\"\n        + this.getMissing()\n        + \", changed=\"\n        + this.getChanged()\n        + \", extensions=\"\n        + this.getExtensions()\n        + \")\";\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedApiResponse.java", "class_name": "ChangedApiResponse", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedApiResponse.java.ChangedApiResponse", "attributes": {"modifiers": "@java.lang.Override\n  public", "marker_annotations": ["@java.lang.Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "java.lang.String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeaders.java.ChangedHeaders.[]ChangedHeaders(Map<String, Header>,Map<String, Header>,DiffContext)", "name": "ChangedHeaders", "arg_nums": 3, "params": [{"name": "oldHeaders", "type": "Map<String, Header>"}, {"name": "newHeaders", "type": "Map<String, Header>"}, {"name": "context", "type": "DiffContext"}], "return_type": "", "signature": "public ChangedHeaders(\n      Map<String, Header> oldHeaders, Map<String, Header> newHeaders, DiffContext context)", "original_string": "  public ChangedHeaders(\n      Map<String, Header> oldHeaders, Map<String, Header> newHeaders, DiffContext context) {\n    this.oldHeaders = oldHeaders;\n    this.newHeaders = newHeaders;\n    this.context = context;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeaders.java", "class_name": "ChangedHeaders", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeaders.java.ChangedHeaders", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeaders.java.ChangedHeaders.[List<Changed>]getChangedElements()", "name": "getChangedElements", "arg_nums": 0, "params": [], "return_type": "List<Changed>", "signature": "@Override\n  public List<Changed> getChangedElements()", "original_string": "  @Override\n  public List<Changed> getChangedElements() {\n    return new ArrayList<>(changed.values());\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeaders.java", "class_name": "ChangedHeaders", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeaders.java.ChangedHeaders", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<Changed>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeaders.java.ChangedHeaders.[DiffResult]isCoreChanged()", "name": "isCoreChanged", "arg_nums": 0, "params": [], "return_type": "DiffResult", "signature": "@Override\n  public DiffResult isCoreChanged()", "original_string": "  @Override\n  public DiffResult isCoreChanged() {\n    if (increased.isEmpty() && missing.isEmpty()) {\n      return DiffResult.NO_CHANGES;\n    }\n    if (!missing.isEmpty()) {\n      if (RESPONSE_HEADERS_DECREASED.enabled(context)) {\n        return DiffResult.INCOMPATIBLE;\n      }\n    }\n    return DiffResult.COMPATIBLE;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeaders.java", "class_name": "ChangedHeaders", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeaders.java.ChangedHeaders", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "DiffResult", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeaders.java.ChangedHeaders.[Map<String, Header>]getOldHeaders()", "name": "getOldHeaders", "arg_nums": 0, "params": [], "return_type": "Map<String, Header>", "signature": "public Map<String, Header> getOldHeaders()", "original_string": "  public Map<String, Header> getOldHeaders() {\n    return this.oldHeaders;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeaders.java", "class_name": "ChangedHeaders", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeaders.java.ChangedHeaders", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Map<String, Header>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeaders.java.ChangedHeaders.[Map<String, Header>]getNewHeaders()", "name": "getNewHeaders", "arg_nums": 0, "params": [], "return_type": "Map<String, Header>", "signature": "public Map<String, Header> getNewHeaders()", "original_string": "  public Map<String, Header> getNewHeaders() {\n    return this.newHeaders;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeaders.java", "class_name": "ChangedHeaders", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeaders.java.ChangedHeaders", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Map<String, Header>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeaders.java.ChangedHeaders.[DiffContext]getContext()", "name": "getContext", "arg_nums": 0, "params": [], "return_type": "DiffContext", "signature": "public DiffContext getContext()", "original_string": "  public DiffContext getContext() {\n    return this.context;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeaders.java", "class_name": "ChangedHeaders", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeaders.java.ChangedHeaders", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "DiffContext", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeaders.java.ChangedHeaders.[Map<String, Header>]getIncreased()", "name": "getIncreased", "arg_nums": 0, "params": [], "return_type": "Map<String, Header>", "signature": "public Map<String, Header> getIncreased()", "original_string": "  public Map<String, Header> getIncreased() {\n    return this.increased;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeaders.java", "class_name": "ChangedHeaders", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeaders.java.ChangedHeaders", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Map<String, Header>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeaders.java.ChangedHeaders.[Map<String, Header>]getMissing()", "name": "getMissing", "arg_nums": 0, "params": [], "return_type": "Map<String, Header>", "signature": "public Map<String, Header> getMissing()", "original_string": "  public Map<String, Header> getMissing() {\n    return this.missing;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeaders.java", "class_name": "ChangedHeaders", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeaders.java.ChangedHeaders", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Map<String, Header>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeaders.java.ChangedHeaders.[Map<String, ChangedHeader>]getChanged()", "name": "getChanged", "arg_nums": 0, "params": [], "return_type": "Map<String, ChangedHeader>", "signature": "public Map<String, ChangedHeader> getChanged()", "original_string": "  public Map<String, ChangedHeader> getChanged() {\n    return this.changed;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeaders.java", "class_name": "ChangedHeaders", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeaders.java.ChangedHeaders", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Map<String, ChangedHeader>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeaders.java.ChangedHeaders.[ChangedHeaders]setIncreased(Map<String, Header>)", "name": "setIncreased", "arg_nums": 1, "params": [{"name": "increased", "type": "Map<String, Header>"}], "return_type": "ChangedHeaders", "signature": "public ChangedHeaders setIncreased(final Map<String, Header> increased)", "original_string": "  public ChangedHeaders setIncreased(final Map<String, Header> increased) {\n    this.increased = increased;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeaders.java", "class_name": "ChangedHeaders", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeaders.java.ChangedHeaders", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedHeaders", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeaders.java.ChangedHeaders.[ChangedHeaders]setMissing(Map<String, Header>)", "name": "setMissing", "arg_nums": 1, "params": [{"name": "missing", "type": "Map<String, Header>"}], "return_type": "ChangedHeaders", "signature": "public ChangedHeaders setMissing(final Map<String, Header> missing)", "original_string": "  public ChangedHeaders setMissing(final Map<String, Header> missing) {\n    this.missing = missing;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeaders.java", "class_name": "ChangedHeaders", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeaders.java.ChangedHeaders", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedHeaders", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeaders.java.ChangedHeaders.[ChangedHeaders]setChanged(Map<String, ChangedHeader>)", "name": "setChanged", "arg_nums": 1, "params": [{"name": "changed", "type": "Map<String, ChangedHeader>"}], "return_type": "ChangedHeaders", "signature": "public ChangedHeaders setChanged(final Map<String, ChangedHeader> changed)", "original_string": "  public ChangedHeaders setChanged(final Map<String, ChangedHeader> changed) {\n    this.changed = changed;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeaders.java", "class_name": "ChangedHeaders", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeaders.java.ChangedHeaders", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedHeaders", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeaders.java.ChangedHeaders.[boolean]equals(Object)", "name": "equals", "arg_nums": 1, "params": [{"name": "o", "type": "Object"}], "return_type": "boolean", "signature": "@Override\n  public boolean equals(Object o)", "original_string": "  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    ChangedHeaders that = (ChangedHeaders) o;\n    return Objects.equals(oldHeaders, that.oldHeaders)\n        && Objects.equals(newHeaders, that.newHeaders)\n        && Objects.equals(context, that.context)\n        && Objects.equals(increased, that.increased)\n        && Objects.equals(missing, that.missing)\n        && Objects.equals(changed, that.changed);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeaders.java", "class_name": "ChangedHeaders", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeaders.java.ChangedHeaders", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeaders.java.ChangedHeaders.[int]hashCode()", "name": "hashCode", "arg_nums": 0, "params": [], "return_type": "int", "signature": "@Override\n  public int hashCode()", "original_string": "  @Override\n  public int hashCode() {\n    return Objects.hash(oldHeaders, newHeaders, context, increased, missing, changed);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeaders.java", "class_name": "ChangedHeaders", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeaders.java.ChangedHeaders", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeaders.java.ChangedHeaders.[java.lang.String]toString()", "name": "toString", "arg_nums": 0, "params": [], "return_type": "java.lang.String", "signature": "@java.lang.Override\n  public java.lang.String toString()", "original_string": "  @java.lang.Override\n  public java.lang.String toString() {\n    return \"ChangedHeaders(oldHeaders=\"\n        + this.getOldHeaders()\n        + \", newHeaders=\"\n        + this.getNewHeaders()\n        + \", context=\"\n        + this.getContext()\n        + \", increased=\"\n        + this.getIncreased()\n        + \", missing=\"\n        + this.getMissing()\n        + \", changed=\"\n        + this.getChanged()\n        + \")\";\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeaders.java", "class_name": "ChangedHeaders", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedHeaders.java.ChangedHeaders", "attributes": {"modifiers": "@java.lang.Override\n  public", "marker_annotations": ["@java.lang.Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "java.lang.String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows.java.ChangedOAuthFlows.[]ChangedOAuthFlows(OAuthFlows,OAuthFlows)", "name": "ChangedOAuthFlows", "arg_nums": 2, "params": [{"name": "oldOAuthFlows", "type": "OAuthFlows"}, {"name": "newOAuthFlows", "type": "OAuthFlows"}], "return_type": "", "signature": "public ChangedOAuthFlows(OAuthFlows oldOAuthFlows, OAuthFlows newOAuthFlows)", "original_string": "  public ChangedOAuthFlows(OAuthFlows oldOAuthFlows, OAuthFlows newOAuthFlows) {\n    this.oldOAuthFlows = oldOAuthFlows;\n    this.newOAuthFlows = newOAuthFlows;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows.java", "class_name": "ChangedOAuthFlows", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows.java.ChangedOAuthFlows", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows.java.ChangedOAuthFlows.[List<Changed>]getChangedElements()", "name": "getChangedElements", "arg_nums": 0, "params": [], "return_type": "List<Changed>", "signature": "@Override\n  public List<Changed> getChangedElements()", "original_string": "  @Override\n  public List<Changed> getChangedElements() {\n    return Arrays.asList(\n        implicitOAuthFlow,\n        passwordOAuthFlow,\n        clientCredentialOAuthFlow,\n        authorizationCodeOAuthFlow,\n        extensions);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows.java", "class_name": "ChangedOAuthFlows", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows.java.ChangedOAuthFlows", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<Changed>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows.java.ChangedOAuthFlows.[DiffResult]isCoreChanged()", "name": "isCoreChanged", "arg_nums": 0, "params": [], "return_type": "DiffResult", "signature": "@Override\n  public DiffResult isCoreChanged()", "original_string": "  @Override\n  public DiffResult isCoreChanged() {\n    return DiffResult.NO_CHANGES;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows.java", "class_name": "ChangedOAuthFlows", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows.java.ChangedOAuthFlows", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "DiffResult", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows.java.ChangedOAuthFlows.[OAuthFlows]getOldOAuthFlows()", "name": "getOldOAuthFlows", "arg_nums": 0, "params": [], "return_type": "OAuthFlows", "signature": "public OAuthFlows getOldOAuthFlows()", "original_string": "  public OAuthFlows getOldOAuthFlows() {\n    return this.oldOAuthFlows;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows.java", "class_name": "ChangedOAuthFlows", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows.java.ChangedOAuthFlows", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "OAuthFlows", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows.java.ChangedOAuthFlows.[OAuthFlows]getNewOAuthFlows()", "name": "getNewOAuthFlows", "arg_nums": 0, "params": [], "return_type": "OAuthFlows", "signature": "public OAuthFlows getNewOAuthFlows()", "original_string": "  public OAuthFlows getNewOAuthFlows() {\n    return this.newOAuthFlows;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows.java", "class_name": "ChangedOAuthFlows", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows.java.ChangedOAuthFlows", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "OAuthFlows", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows.java.ChangedOAuthFlows.[ChangedOAuthFlow]getImplicitOAuthFlow()", "name": "getImplicitOAuthFlow", "arg_nums": 0, "params": [], "return_type": "ChangedOAuthFlow", "signature": "public ChangedOAuthFlow getImplicitOAuthFlow()", "original_string": "  public ChangedOAuthFlow getImplicitOAuthFlow() {\n    return this.implicitOAuthFlow;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows.java", "class_name": "ChangedOAuthFlows", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows.java.ChangedOAuthFlows", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedOAuthFlow", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows.java.ChangedOAuthFlows.[ChangedOAuthFlow]getPasswordOAuthFlow()", "name": "getPasswordOAuthFlow", "arg_nums": 0, "params": [], "return_type": "ChangedOAuthFlow", "signature": "public ChangedOAuthFlow getPasswordOAuthFlow()", "original_string": "  public ChangedOAuthFlow getPasswordOAuthFlow() {\n    return this.passwordOAuthFlow;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows.java", "class_name": "ChangedOAuthFlows", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows.java.ChangedOAuthFlows", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedOAuthFlow", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows.java.ChangedOAuthFlows.[ChangedOAuthFlow]getClientCredentialOAuthFlow()", "name": "getClientCredentialOAuthFlow", "arg_nums": 0, "params": [], "return_type": "ChangedOAuthFlow", "signature": "public ChangedOAuthFlow getClientCredentialOAuthFlow()", "original_string": "  public ChangedOAuthFlow getClientCredentialOAuthFlow() {\n    return this.clientCredentialOAuthFlow;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows.java", "class_name": "ChangedOAuthFlows", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows.java.ChangedOAuthFlows", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedOAuthFlow", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows.java.ChangedOAuthFlows.[ChangedOAuthFlow]getAuthorizationCodeOAuthFlow()", "name": "getAuthorizationCodeOAuthFlow", "arg_nums": 0, "params": [], "return_type": "ChangedOAuthFlow", "signature": "public ChangedOAuthFlow getAuthorizationCodeOAuthFlow()", "original_string": "  public ChangedOAuthFlow getAuthorizationCodeOAuthFlow() {\n    return this.authorizationCodeOAuthFlow;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows.java", "class_name": "ChangedOAuthFlows", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows.java.ChangedOAuthFlows", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedOAuthFlow", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows.java.ChangedOAuthFlows.[ChangedExtensions]getExtensions()", "name": "getExtensions", "arg_nums": 0, "params": [], "return_type": "ChangedExtensions", "signature": "public ChangedExtensions getExtensions()", "original_string": "  public ChangedExtensions getExtensions() {\n    return this.extensions;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows.java", "class_name": "ChangedOAuthFlows", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows.java.ChangedOAuthFlows", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedExtensions", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows.java.ChangedOAuthFlows.[ChangedOAuthFlows]setImplicitOAuthFlow(ChangedOAuthFlow)", "name": "setImplicitOAuthFlow", "arg_nums": 1, "params": [{"name": "implicitOAuthFlow", "type": "ChangedOAuthFlow"}], "return_type": "ChangedOAuthFlows", "signature": "public ChangedOAuthFlows setImplicitOAuthFlow(final ChangedOAuthFlow implicitOAuthFlow)", "original_string": "  public ChangedOAuthFlows setImplicitOAuthFlow(final ChangedOAuthFlow implicitOAuthFlow) {\n    this.implicitOAuthFlow = implicitOAuthFlow;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows.java", "class_name": "ChangedOAuthFlows", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows.java.ChangedOAuthFlows", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedOAuthFlows", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows.java.ChangedOAuthFlows.[ChangedOAuthFlows]setPasswordOAuthFlow(ChangedOAuthFlow)", "name": "setPasswordOAuthFlow", "arg_nums": 1, "params": [{"name": "passwordOAuthFlow", "type": "ChangedOAuthFlow"}], "return_type": "ChangedOAuthFlows", "signature": "public ChangedOAuthFlows setPasswordOAuthFlow(final ChangedOAuthFlow passwordOAuthFlow)", "original_string": "  public ChangedOAuthFlows setPasswordOAuthFlow(final ChangedOAuthFlow passwordOAuthFlow) {\n    this.passwordOAuthFlow = passwordOAuthFlow;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows.java", "class_name": "ChangedOAuthFlows", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows.java.ChangedOAuthFlows", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedOAuthFlows", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows.java.ChangedOAuthFlows.[ChangedOAuthFlows]setClientCredentialOAuthFlow(ChangedOAuthFlow)", "name": "setClientCredentialOAuthFlow", "arg_nums": 1, "params": [{"name": "clientCredentialOAuthFlow", "type": "ChangedOAuthFlow"}], "return_type": "ChangedOAuthFlows", "signature": "public ChangedOAuthFlows setClientCredentialOAuthFlow(\n      final ChangedOAuthFlow clientCredentialOAuthFlow)", "original_string": "  public ChangedOAuthFlows setClientCredentialOAuthFlow(\n      final ChangedOAuthFlow clientCredentialOAuthFlow) {\n    this.clientCredentialOAuthFlow = clientCredentialOAuthFlow;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows.java", "class_name": "ChangedOAuthFlows", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows.java.ChangedOAuthFlows", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedOAuthFlows", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows.java.ChangedOAuthFlows.[ChangedOAuthFlows]setAuthorizationCodeOAuthFlow(ChangedOAuthFlow)", "name": "setAuthorizationCodeOAuthFlow", "arg_nums": 1, "params": [{"name": "authorizationCodeOAuthFlow", "type": "ChangedOAuthFlow"}], "return_type": "ChangedOAuthFlows", "signature": "public ChangedOAuthFlows setAuthorizationCodeOAuthFlow(\n      final ChangedOAuthFlow authorizationCodeOAuthFlow)", "original_string": "  public ChangedOAuthFlows setAuthorizationCodeOAuthFlow(\n      final ChangedOAuthFlow authorizationCodeOAuthFlow) {\n    this.authorizationCodeOAuthFlow = authorizationCodeOAuthFlow;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows.java", "class_name": "ChangedOAuthFlows", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows.java.ChangedOAuthFlows", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedOAuthFlows", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows.java.ChangedOAuthFlows.[ChangedOAuthFlows]setExtensions(ChangedExtensions)", "name": "setExtensions", "arg_nums": 1, "params": [{"name": "extensions", "type": "ChangedExtensions"}], "return_type": "ChangedOAuthFlows", "signature": "public ChangedOAuthFlows setExtensions(final ChangedExtensions extensions)", "original_string": "  public ChangedOAuthFlows setExtensions(final ChangedExtensions extensions) {\n    this.extensions = extensions;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows.java", "class_name": "ChangedOAuthFlows", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows.java.ChangedOAuthFlows", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedOAuthFlows", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows.java.ChangedOAuthFlows.[boolean]equals(Object)", "name": "equals", "arg_nums": 1, "params": [{"name": "o", "type": "Object"}], "return_type": "boolean", "signature": "@Override\n  public boolean equals(Object o)", "original_string": "  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    ChangedOAuthFlows that = (ChangedOAuthFlows) o;\n    return Objects.equals(oldOAuthFlows, that.oldOAuthFlows)\n        && Objects.equals(newOAuthFlows, that.newOAuthFlows)\n        && Objects.equals(implicitOAuthFlow, that.implicitOAuthFlow)\n        && Objects.equals(passwordOAuthFlow, that.passwordOAuthFlow)\n        && Objects.equals(clientCredentialOAuthFlow, that.clientCredentialOAuthFlow)\n        && Objects.equals(authorizationCodeOAuthFlow, that.authorizationCodeOAuthFlow)\n        && Objects.equals(extensions, that.extensions);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows.java", "class_name": "ChangedOAuthFlows", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows.java.ChangedOAuthFlows", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows.java.ChangedOAuthFlows.[int]hashCode()", "name": "hashCode", "arg_nums": 0, "params": [], "return_type": "int", "signature": "@Override\n  public int hashCode()", "original_string": "  @Override\n  public int hashCode() {\n    return Objects.hash(\n        oldOAuthFlows,\n        newOAuthFlows,\n        implicitOAuthFlow,\n        passwordOAuthFlow,\n        clientCredentialOAuthFlow,\n        authorizationCodeOAuthFlow,\n        extensions);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows.java", "class_name": "ChangedOAuthFlows", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows.java.ChangedOAuthFlows", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows.java.ChangedOAuthFlows.[java.lang.String]toString()", "name": "toString", "arg_nums": 0, "params": [], "return_type": "java.lang.String", "signature": "@java.lang.Override\n  public java.lang.String toString()", "original_string": "  @java.lang.Override\n  public java.lang.String toString() {\n    return \"ChangedOAuthFlows(oldOAuthFlows=\"\n        + this.getOldOAuthFlows()\n        + \", newOAuthFlows=\"\n        + this.getNewOAuthFlows()\n        + \", implicitOAuthFlow=\"\n        + this.getImplicitOAuthFlow()\n        + \", passwordOAuthFlow=\"\n        + this.getPasswordOAuthFlow()\n        + \", clientCredentialOAuthFlow=\"\n        + this.getClientCredentialOAuthFlow()\n        + \", authorizationCodeOAuthFlow=\"\n        + this.getAuthorizationCodeOAuthFlow()\n        + \", extensions=\"\n        + this.getExtensions()\n        + \")\";\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows.java", "class_name": "ChangedOAuthFlows", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows.java.ChangedOAuthFlows", "attributes": {"modifiers": "@java.lang.Override\n  public", "marker_annotations": ["@java.lang.Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "java.lang.String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecuritySchemeScopes.java.ChangedSecuritySchemeScopes.[]ChangedSecuritySchemeScopes(List<String>,List<String>)", "name": "ChangedSecuritySchemeScopes", "arg_nums": 2, "params": [{"name": "oldValue", "type": "List<String>"}, {"name": "newValue", "type": "List<String>"}], "return_type": "", "signature": "public ChangedSecuritySchemeScopes(List<String> oldValue, List<String> newValue)", "original_string": "  public ChangedSecuritySchemeScopes(List<String> oldValue, List<String> newValue) {\n    super(oldValue, newValue, null);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecuritySchemeScopes.java", "class_name": "ChangedSecuritySchemeScopes", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecuritySchemeScopes.java.ChangedSecuritySchemeScopes", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecuritySchemeScopes.java.ChangedSecuritySchemeScopes.[DiffResult]isItemsChanged()", "name": "isItemsChanged", "arg_nums": 0, "params": [], "return_type": "DiffResult", "signature": "@Override\n  public DiffResult isItemsChanged()", "original_string": "  @Override\n  public DiffResult isItemsChanged() {\n    return DiffResult.INCOMPATIBLE;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecuritySchemeScopes.java", "class_name": "ChangedSecuritySchemeScopes", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecuritySchemeScopes.java.ChangedSecuritySchemeScopes", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "DiffResult", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation.[]ChangedOperation(String,PathItem.HttpMethod,Operation,Operation)", "name": "ChangedOperation", "arg_nums": 4, "params": [{"name": "pathUrl", "type": "String"}, {"name": "httpMethod", "type": "PathItem.HttpMethod"}, {"name": "oldOperation", "type": "Operation"}, {"name": "newOperation", "type": "Operation"}], "return_type": "", "signature": "public ChangedOperation(\n      String pathUrl,\n      PathItem.HttpMethod httpMethod,\n      Operation oldOperation,\n      Operation newOperation)", "original_string": "  public ChangedOperation(\n      String pathUrl,\n      PathItem.HttpMethod httpMethod,\n      Operation oldOperation,\n      Operation newOperation) {\n    this.httpMethod = httpMethod;\n    this.pathUrl = pathUrl;\n    this.oldOperation = oldOperation;\n    this.newOperation = newOperation;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java", "class_name": "ChangedOperation", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation.[List<Changed>]getChangedElements()", "name": "getChangedElements", "arg_nums": 0, "params": [], "return_type": "List<Changed>", "signature": "@Override\n  public List<Changed> getChangedElements()", "original_string": "  @Override\n  public List<Changed> getChangedElements() {\n    return Arrays.asList(\n        summary,\n        description,\n        operationId,\n        parameters,\n        requestBody,\n        apiResponses,\n        securityRequirements,\n        extensions);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java", "class_name": "ChangedOperation", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<Changed>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation.[DiffResult]isCoreChanged()", "name": "isCoreChanged", "arg_nums": 0, "params": [], "return_type": "DiffResult", "signature": "@Override\n  public DiffResult isCoreChanged()", "original_string": "  @Override\n  public DiffResult isCoreChanged() {\n    // TODO BETTER HANDLING FOR DEPRECIATION\n    if (deprecated) {\n      return DiffResult.COMPATIBLE;\n    }\n    return DiffResult.NO_CHANGES;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java", "class_name": "ChangedOperation", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "DiffResult", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation.[DiffResult]resultApiResponses()", "name": "resultApiResponses", "arg_nums": 0, "params": [], "return_type": "DiffResult", "signature": "public DiffResult resultApiResponses()", "original_string": "  public DiffResult resultApiResponses() {\n    return result(apiResponses);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java", "class_name": "ChangedOperation", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "DiffResult", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation.[DiffResult]resultRequestBody()", "name": "resultRequestBody", "arg_nums": 0, "params": [], "return_type": "DiffResult", "signature": "public DiffResult resultRequestBody()", "original_string": "  public DiffResult resultRequestBody() {\n    return requestBody == null ? DiffResult.NO_CHANGES : requestBody.isChanged();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java", "class_name": "ChangedOperation", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "DiffResult", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation.[DiffResult]resultSecurityRequirements()", "name": "resultSecurityRequirements", "arg_nums": 0, "params": [], "return_type": "DiffResult", "signature": "public DiffResult resultSecurityRequirements()", "original_string": "  public DiffResult resultSecurityRequirements() {\n    return securityRequirements == null ? DiffResult.NO_CHANGES : securityRequirements.isChanged();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java", "class_name": "ChangedOperation", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "DiffResult", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation.[Operation]getOldOperation()", "name": "getOldOperation", "arg_nums": 0, "params": [], "return_type": "Operation", "signature": "public Operation getOldOperation()", "original_string": "  public Operation getOldOperation() {\n    return this.oldOperation;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java", "class_name": "ChangedOperation", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Operation", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation.[Operation]getNewOperation()", "name": "getNewOperation", "arg_nums": 0, "params": [], "return_type": "Operation", "signature": "public Operation getNewOperation()", "original_string": "  public Operation getNewOperation() {\n    return this.newOperation;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java", "class_name": "ChangedOperation", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Operation", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation.[String]getPathUrl()", "name": "getPathUrl", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getPathUrl()", "original_string": "  public String getPathUrl() {\n    return this.pathUrl;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java", "class_name": "ChangedOperation", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation.[PathItem.HttpMethod]getHttpMethod()", "name": "getHttpMethod", "arg_nums": 0, "params": [], "return_type": "PathItem.HttpMethod", "signature": "public PathItem.HttpMethod getHttpMethod()", "original_string": "  public PathItem.HttpMethod getHttpMethod() {\n    return this.httpMethod;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java", "class_name": "ChangedOperation", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "PathItem.HttpMethod", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation.[ChangedMetadata]getSummary()", "name": "getSummary", "arg_nums": 0, "params": [], "return_type": "ChangedMetadata", "signature": "public ChangedMetadata getSummary()", "original_string": "  public ChangedMetadata getSummary() {\n    return this.summary;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java", "class_name": "ChangedOperation", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedMetadata", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation.[ChangedMetadata]getDescription()", "name": "getDescription", "arg_nums": 0, "params": [], "return_type": "ChangedMetadata", "signature": "public ChangedMetadata getDescription()", "original_string": "  public ChangedMetadata getDescription() {\n    return this.description;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java", "class_name": "ChangedOperation", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedMetadata", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation.[ChangedMetadata]getOperationId()", "name": "getOperationId", "arg_nums": 0, "params": [], "return_type": "ChangedMetadata", "signature": "public ChangedMetadata getOperationId()", "original_string": "  public ChangedMetadata getOperationId() {\n    return this.operationId;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java", "class_name": "ChangedOperation", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedMetadata", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation.[boolean]isDeprecated()", "name": "isDeprecated", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "public boolean isDeprecated()", "original_string": "  public boolean isDeprecated() {\n    return this.deprecated;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java", "class_name": "ChangedOperation", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation.[ChangedParameters]getParameters()", "name": "getParameters", "arg_nums": 0, "params": [], "return_type": "ChangedParameters", "signature": "public ChangedParameters getParameters()", "original_string": "  public ChangedParameters getParameters() {\n    return this.parameters;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java", "class_name": "ChangedOperation", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedParameters", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation.[ChangedRequestBody]getRequestBody()", "name": "getRequestBody", "arg_nums": 0, "params": [], "return_type": "ChangedRequestBody", "signature": "public ChangedRequestBody getRequestBody()", "original_string": "  public ChangedRequestBody getRequestBody() {\n    return this.requestBody;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java", "class_name": "ChangedOperation", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedRequestBody", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation.[ChangedApiResponse]getApiResponses()", "name": "getApiResponses", "arg_nums": 0, "params": [], "return_type": "ChangedApiResponse", "signature": "public ChangedApiResponse getApiResponses()", "original_string": "  public ChangedApiResponse getApiResponses() {\n    return this.apiResponses;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java", "class_name": "ChangedOperation", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedApiResponse", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation.[ChangedSecurityRequirements]getSecurityRequirements()", "name": "getSecurityRequirements", "arg_nums": 0, "params": [], "return_type": "ChangedSecurityRequirements", "signature": "public ChangedSecurityRequirements getSecurityRequirements()", "original_string": "  public ChangedSecurityRequirements getSecurityRequirements() {\n    return this.securityRequirements;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java", "class_name": "ChangedOperation", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedSecurityRequirements", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation.[ChangedExtensions]getExtensions()", "name": "getExtensions", "arg_nums": 0, "params": [], "return_type": "ChangedExtensions", "signature": "public ChangedExtensions getExtensions()", "original_string": "  public ChangedExtensions getExtensions() {\n    return this.extensions;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java", "class_name": "ChangedOperation", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedExtensions", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation.[ChangedOperation]setOldOperation(Operation)", "name": "setOldOperation", "arg_nums": 1, "params": [{"name": "oldOperation", "type": "Operation"}], "return_type": "ChangedOperation", "signature": "public ChangedOperation setOldOperation(final Operation oldOperation)", "original_string": "  public ChangedOperation setOldOperation(final Operation oldOperation) {\n    this.oldOperation = oldOperation;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java", "class_name": "ChangedOperation", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedOperation", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation.[ChangedOperation]setNewOperation(Operation)", "name": "setNewOperation", "arg_nums": 1, "params": [{"name": "newOperation", "type": "Operation"}], "return_type": "ChangedOperation", "signature": "public ChangedOperation setNewOperation(final Operation newOperation)", "original_string": "  public ChangedOperation setNewOperation(final Operation newOperation) {\n    this.newOperation = newOperation;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java", "class_name": "ChangedOperation", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedOperation", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation.[ChangedOperation]setPathUrl(String)", "name": "setPathUrl", "arg_nums": 1, "params": [{"name": "pathUrl", "type": "String"}], "return_type": "ChangedOperation", "signature": "public ChangedOperation setPathUrl(final String pathUrl)", "original_string": "  public ChangedOperation setPathUrl(final String pathUrl) {\n    this.pathUrl = pathUrl;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java", "class_name": "ChangedOperation", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedOperation", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation.[ChangedOperation]setHttpMethod(PathItem.HttpMethod)", "name": "setHttpMethod", "arg_nums": 1, "params": [{"name": "httpMethod", "type": "PathItem.HttpMethod"}], "return_type": "ChangedOperation", "signature": "public ChangedOperation setHttpMethod(final PathItem.HttpMethod httpMethod)", "original_string": "  public ChangedOperation setHttpMethod(final PathItem.HttpMethod httpMethod) {\n    this.httpMethod = httpMethod;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java", "class_name": "ChangedOperation", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedOperation", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation.[ChangedOperation]setSummary(ChangedMetadata)", "name": "setSummary", "arg_nums": 1, "params": [{"name": "summary", "type": "ChangedMetadata"}], "return_type": "ChangedOperation", "signature": "public ChangedOperation setSummary(final ChangedMetadata summary)", "original_string": "  public ChangedOperation setSummary(final ChangedMetadata summary) {\n    this.summary = summary;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java", "class_name": "ChangedOperation", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedOperation", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation.[ChangedOperation]setDescription(ChangedMetadata)", "name": "setDescription", "arg_nums": 1, "params": [{"name": "description", "type": "ChangedMetadata"}], "return_type": "ChangedOperation", "signature": "public ChangedOperation setDescription(final ChangedMetadata description)", "original_string": "  public ChangedOperation setDescription(final ChangedMetadata description) {\n    this.description = description;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java", "class_name": "ChangedOperation", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedOperation", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation.[ChangedOperation]setOperationId(ChangedMetadata)", "name": "setOperationId", "arg_nums": 1, "params": [{"name": "operationId", "type": "ChangedMetadata"}], "return_type": "ChangedOperation", "signature": "public ChangedOperation setOperationId(final ChangedMetadata operationId)", "original_string": "  public ChangedOperation setOperationId(final ChangedMetadata operationId) {\n    this.operationId = operationId;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java", "class_name": "ChangedOperation", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedOperation", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation.[ChangedOperation]setDeprecated(boolean)", "name": "setDeprecated", "arg_nums": 1, "params": [{"name": "deprecated", "type": "boolean"}], "return_type": "ChangedOperation", "signature": "public ChangedOperation setDeprecated(final boolean deprecated)", "original_string": "  public ChangedOperation setDeprecated(final boolean deprecated) {\n    this.deprecated = deprecated;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java", "class_name": "ChangedOperation", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedOperation", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation.[ChangedOperation]setParameters(ChangedParameters)", "name": "setParameters", "arg_nums": 1, "params": [{"name": "parameters", "type": "ChangedParameters"}], "return_type": "ChangedOperation", "signature": "public ChangedOperation setParameters(final ChangedParameters parameters)", "original_string": "  public ChangedOperation setParameters(final ChangedParameters parameters) {\n    this.parameters = parameters;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java", "class_name": "ChangedOperation", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedOperation", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation.[ChangedOperation]setRequestBody(ChangedRequestBody)", "name": "setRequestBody", "arg_nums": 1, "params": [{"name": "requestBody", "type": "ChangedRequestBody"}], "return_type": "ChangedOperation", "signature": "public ChangedOperation setRequestBody(final ChangedRequestBody requestBody)", "original_string": "  public ChangedOperation setRequestBody(final ChangedRequestBody requestBody) {\n    this.requestBody = requestBody;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java", "class_name": "ChangedOperation", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedOperation", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation.[ChangedOperation]setApiResponses(ChangedApiResponse)", "name": "setApiResponses", "arg_nums": 1, "params": [{"name": "apiResponses", "type": "ChangedApiResponse"}], "return_type": "ChangedOperation", "signature": "public ChangedOperation setApiResponses(final ChangedApiResponse apiResponses)", "original_string": "  public ChangedOperation setApiResponses(final ChangedApiResponse apiResponses) {\n    this.apiResponses = apiResponses;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java", "class_name": "ChangedOperation", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedOperation", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation.[ChangedOperation]setSecurityRequirements(ChangedSecurityRequirements)", "name": "setSecurityRequirements", "arg_nums": 1, "params": [{"name": "securityRequirements", "type": "ChangedSecurityRequirements"}], "return_type": "ChangedOperation", "signature": "public ChangedOperation setSecurityRequirements(\n      final ChangedSecurityRequirements securityRequirements)", "original_string": "  public ChangedOperation setSecurityRequirements(\n      final ChangedSecurityRequirements securityRequirements) {\n    this.securityRequirements = securityRequirements;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java", "class_name": "ChangedOperation", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedOperation", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation.[ChangedOperation]setExtensions(ChangedExtensions)", "name": "setExtensions", "arg_nums": 1, "params": [{"name": "extensions", "type": "ChangedExtensions"}], "return_type": "ChangedOperation", "signature": "public ChangedOperation setExtensions(final ChangedExtensions extensions)", "original_string": "  public ChangedOperation setExtensions(final ChangedExtensions extensions) {\n    this.extensions = extensions;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java", "class_name": "ChangedOperation", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedOperation", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation.[boolean]equals(Object)", "name": "equals", "arg_nums": 1, "params": [{"name": "o", "type": "Object"}], "return_type": "boolean", "signature": "@Override\n  public boolean equals(Object o)", "original_string": "  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    ChangedOperation that = (ChangedOperation) o;\n    return deprecated == that.deprecated\n        && Objects.equals(oldOperation, that.oldOperation)\n        && Objects.equals(newOperation, that.newOperation)\n        && Objects.equals(pathUrl, that.pathUrl)\n        && httpMethod == that.httpMethod\n        && Objects.equals(summary, that.summary)\n        && Objects.equals(description, that.description)\n        && Objects.equals(operationId, that.operationId)\n        && Objects.equals(parameters, that.parameters)\n        && Objects.equals(requestBody, that.requestBody)\n        && Objects.equals(apiResponses, that.apiResponses)\n        && Objects.equals(securityRequirements, that.securityRequirements)\n        && Objects.equals(extensions, that.extensions);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java", "class_name": "ChangedOperation", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation.[int]hashCode()", "name": "hashCode", "arg_nums": 0, "params": [], "return_type": "int", "signature": "@Override\n  public int hashCode()", "original_string": "  @Override\n  public int hashCode() {\n    return Objects.hash(\n        oldOperation,\n        newOperation,\n        pathUrl,\n        httpMethod,\n        summary,\n        description,\n        operationId,\n        deprecated,\n        parameters,\n        requestBody,\n        apiResponses,\n        securityRequirements,\n        extensions);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java", "class_name": "ChangedOperation", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation.[java.lang.String]toString()", "name": "toString", "arg_nums": 0, "params": [], "return_type": "java.lang.String", "signature": "@java.lang.Override\n  public java.lang.String toString()", "original_string": "  @java.lang.Override\n  public java.lang.String toString() {\n    return \"ChangedOperation(oldOperation=\"\n        + this.getOldOperation()\n        + \", newOperation=\"\n        + this.getNewOperation()\n        + \", pathUrl=\"\n        + this.getPathUrl()\n        + \", httpMethod=\"\n        + this.getHttpMethod()\n        + \", summary=\"\n        + this.getSummary()\n        + \", description=\"\n        + this.getDescription()\n        + \", operationId=\"\n        + this.getOperationId()\n        + \", deprecated=\"\n        + this.isDeprecated()\n        + \", parameters=\"\n        + this.getParameters()\n        + \", requestBody=\"\n        + this.getRequestBody()\n        + \", apiResponses=\"\n        + this.getApiResponses()\n        + \", securityRequirements=\"\n        + this.getSecurityRequirements()\n        + \", extensions=\"\n        + this.getExtensions()\n        + \")\";\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java", "class_name": "ChangedOperation", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOperation.java.ChangedOperation", "attributes": {"modifiers": "@java.lang.Override\n  public", "marker_annotations": ["@java.lang.Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "java.lang.String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedList.java.ChangedList.[]ChangedList(List<T>,List<T>,DiffContext)", "name": "ChangedList", "arg_nums": 3, "params": [{"name": "oldValue", "type": "List<T>"}, {"name": "newValue", "type": "List<T>"}, {"name": "context", "type": "DiffContext"}], "return_type": "", "signature": "protected ChangedList(List<T> oldValue, List<T> newValue, DiffContext context)", "original_string": "  protected ChangedList(List<T> oldValue, List<T> newValue, DiffContext context) {\n    this.oldValue = Optional.ofNullable(oldValue).orElse(new ArrayList<>());\n    this.newValue = Optional.ofNullable(newValue).orElse(new ArrayList<>());\n    this.context = context;\n    this.shared = new ArrayList<>();\n    this.increased = new ArrayList<>();\n    this.missing = new ArrayList<>();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedList.java", "class_name": "ChangedList", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedList.java.ChangedList", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedList.java.ChangedList.[DiffResult]isChanged()", "name": "isChanged", "arg_nums": 0, "params": [], "return_type": "DiffResult", "signature": "@Override\n  public DiffResult isChanged()", "original_string": "  @Override\n  public DiffResult isChanged() {\n    if (missing.isEmpty() && increased.isEmpty()) {\n      return DiffResult.NO_CHANGES;\n    }\n    return isItemsChanged();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedList.java", "class_name": "ChangedList", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedList.java.ChangedList", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "DiffResult", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedList.java.ChangedList.[DiffResult]isItemsChanged()", "name": "isItemsChanged", "arg_nums": 0, "params": [], "return_type": "DiffResult", "signature": "public abstract DiffResult isItemsChanged()", "original_string": "  public abstract DiffResult isItemsChanged();", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedList.java", "class_name": "ChangedList", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedList.java.ChangedList", "attributes": {"modifiers": "public abstract", "marker_annotations": [], "non_marker_annotations": ["public", "abstract"], "comments": [], "return_type": "DiffResult", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedList.java.ChangedList.[DiffContext]getContext()", "name": "getContext", "arg_nums": 0, "params": [], "return_type": "DiffContext", "signature": "public DiffContext getContext()", "original_string": "  public DiffContext getContext() {\n    return this.context;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedList.java", "class_name": "ChangedList", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedList.java.ChangedList", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "DiffContext", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedList.java.ChangedList.[List<T>]getOldValue()", "name": "getOldValue", "arg_nums": 0, "params": [], "return_type": "List<T>", "signature": "public List<T> getOldValue()", "original_string": "  public List<T> getOldValue() {\n    return this.oldValue;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedList.java", "class_name": "ChangedList", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedList.java.ChangedList", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<T>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedList.java.ChangedList.[List<T>]getNewValue()", "name": "getNewValue", "arg_nums": 0, "params": [], "return_type": "List<T>", "signature": "public List<T> getNewValue()", "original_string": "  public List<T> getNewValue() {\n    return this.newValue;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedList.java", "class_name": "ChangedList", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedList.java.ChangedList", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<T>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedList.java.ChangedList.[List<T>]getIncreased()", "name": "getIncreased", "arg_nums": 0, "params": [], "return_type": "List<T>", "signature": "public List<T> getIncreased()", "original_string": "  public List<T> getIncreased() {\n    return this.increased;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedList.java", "class_name": "ChangedList", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedList.java.ChangedList", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<T>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedList.java.ChangedList.[List<T>]getMissing()", "name": "getMissing", "arg_nums": 0, "params": [], "return_type": "List<T>", "signature": "public List<T> getMissing()", "original_string": "  public List<T> getMissing() {\n    return this.missing;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedList.java", "class_name": "ChangedList", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedList.java.ChangedList", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<T>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedList.java.ChangedList.[List<T>]getShared()", "name": "getShared", "arg_nums": 0, "params": [], "return_type": "List<T>", "signature": "public List<T> getShared()", "original_string": "  public List<T> getShared() {\n    return this.shared;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedList.java", "class_name": "ChangedList", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedList.java.ChangedList", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<T>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedList.java.ChangedList.[ChangedList<T>]setContext(DiffContext)", "name": "setContext", "arg_nums": 1, "params": [{"name": "context", "type": "DiffContext"}], "return_type": "ChangedList<T>", "signature": "public ChangedList<T> setContext(final DiffContext context)", "original_string": "  public ChangedList<T> setContext(final DiffContext context) {\n    this.context = context;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedList.java", "class_name": "ChangedList", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedList.java.ChangedList", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedList<T>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedList.java.ChangedList.[ChangedList<T>]setOldValue(List<T>)", "name": "setOldValue", "arg_nums": 1, "params": [{"name": "oldValue", "type": "List<T>"}], "return_type": "ChangedList<T>", "signature": "public ChangedList<T> setOldValue(final List<T> oldValue)", "original_string": "  public ChangedList<T> setOldValue(final List<T> oldValue) {\n    this.oldValue = oldValue;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedList.java", "class_name": "ChangedList", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedList.java.ChangedList", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedList<T>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedList.java.ChangedList.[ChangedList<T>]setNewValue(List<T>)", "name": "setNewValue", "arg_nums": 1, "params": [{"name": "newValue", "type": "List<T>"}], "return_type": "ChangedList<T>", "signature": "public ChangedList<T> setNewValue(final List<T> newValue)", "original_string": "  public ChangedList<T> setNewValue(final List<T> newValue) {\n    this.newValue = newValue;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedList.java", "class_name": "ChangedList", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedList.java.ChangedList", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedList<T>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedList.java.ChangedList.[ChangedList<T>]setIncreased(List<T>)", "name": "setIncreased", "arg_nums": 1, "params": [{"name": "increased", "type": "List<T>"}], "return_type": "ChangedList<T>", "signature": "public ChangedList<T> setIncreased(final List<T> increased)", "original_string": "  public ChangedList<T> setIncreased(final List<T> increased) {\n    this.increased = increased;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedList.java", "class_name": "ChangedList", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedList.java.ChangedList", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedList<T>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedList.java.ChangedList.[ChangedList<T>]setMissing(List<T>)", "name": "setMissing", "arg_nums": 1, "params": [{"name": "missing", "type": "List<T>"}], "return_type": "ChangedList<T>", "signature": "public ChangedList<T> setMissing(final List<T> missing)", "original_string": "  public ChangedList<T> setMissing(final List<T> missing) {\n    this.missing = missing;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedList.java", "class_name": "ChangedList", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedList.java.ChangedList", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedList<T>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedList.java.ChangedList.[ChangedList<T>]setShared(List<T>)", "name": "setShared", "arg_nums": 1, "params": [{"name": "shared", "type": "List<T>"}], "return_type": "ChangedList<T>", "signature": "public ChangedList<T> setShared(final List<T> shared)", "original_string": "  public ChangedList<T> setShared(final List<T> shared) {\n    this.shared = shared;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedList.java", "class_name": "ChangedList", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedList.java.ChangedList", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedList<T>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedList.java.ChangedList.[boolean]equals(Object)", "name": "equals", "arg_nums": 1, "params": [{"name": "o", "type": "Object"}], "return_type": "boolean", "signature": "@Override\n  public boolean equals(Object o)", "original_string": "  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    ChangedList<?> that = (ChangedList<?>) o;\n    return Objects.equals(context, that.context)\n        && Objects.equals(oldValue, that.oldValue)\n        && Objects.equals(newValue, that.newValue)\n        && Objects.equals(increased, that.increased)\n        && Objects.equals(missing, that.missing)\n        && Objects.equals(shared, that.shared);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedList.java", "class_name": "ChangedList", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedList.java.ChangedList", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedList.java.ChangedList.[int]hashCode()", "name": "hashCode", "arg_nums": 0, "params": [], "return_type": "int", "signature": "@Override\n  public int hashCode()", "original_string": "  @Override\n  public int hashCode() {\n    return Objects.hash(context, oldValue, newValue, increased, missing, shared);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedList.java", "class_name": "ChangedList", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedList.java.ChangedList", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedList.java.ChangedList.[java.lang.String]toString()", "name": "toString", "arg_nums": 0, "params": [], "return_type": "java.lang.String", "signature": "@java.lang.Override\n  public java.lang.String toString()", "original_string": "  @java.lang.Override\n  public java.lang.String toString() {\n    return \"ChangedList(context=\"\n        + this.getContext()\n        + \", oldValue=\"\n        + this.getOldValue()\n        + \", newValue=\"\n        + this.getNewValue()\n        + \", increased=\"\n        + this.getIncreased()\n        + \", missing=\"\n        + this.getMissing()\n        + \", shared=\"\n        + this.getShared()\n        + \")\";\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedList.java", "class_name": "ChangedList", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedList.java.ChangedList", "attributes": {"modifiers": "@java.lang.Override\n  public", "marker_annotations": ["@java.lang.Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "java.lang.String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedMetadata.java.ChangedMetadata.[DiffResult]isChanged()", "name": "isChanged", "arg_nums": 0, "params": [], "return_type": "DiffResult", "signature": "@Override\n  public DiffResult isChanged()", "original_string": "  @Override\n  public DiffResult isChanged() {\n    if (Objects.equals(left, right)) {\n      return DiffResult.NO_CHANGES;\n    }\n    return DiffResult.METADATA;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedMetadata.java", "class_name": "ChangedMetadata", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedMetadata.java.ChangedMetadata", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "DiffResult", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedMetadata.java.ChangedMetadata.[String]getLeft()", "name": "getLeft", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getLeft()", "original_string": "  public String getLeft() {\n    return this.left;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedMetadata.java", "class_name": "ChangedMetadata", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedMetadata.java.ChangedMetadata", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedMetadata.java.ChangedMetadata.[String]getRight()", "name": "getRight", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getRight()", "original_string": "  public String getRight() {\n    return this.right;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedMetadata.java", "class_name": "ChangedMetadata", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedMetadata.java.ChangedMetadata", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedMetadata.java.ChangedMetadata.[ChangedMetadata]setLeft(String)", "name": "setLeft", "arg_nums": 1, "params": [{"name": "left", "type": "String"}], "return_type": "ChangedMetadata", "signature": "public ChangedMetadata setLeft(final String left)", "original_string": "  public ChangedMetadata setLeft(final String left) {\n    this.left = left;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedMetadata.java", "class_name": "ChangedMetadata", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedMetadata.java.ChangedMetadata", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedMetadata", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedMetadata.java.ChangedMetadata.[ChangedMetadata]setRight(String)", "name": "setRight", "arg_nums": 1, "params": [{"name": "right", "type": "String"}], "return_type": "ChangedMetadata", "signature": "public ChangedMetadata setRight(final String right)", "original_string": "  public ChangedMetadata setRight(final String right) {\n    this.right = right;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedMetadata.java", "class_name": "ChangedMetadata", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedMetadata.java.ChangedMetadata", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedMetadata", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedMetadata.java.ChangedMetadata.[boolean]equals(Object)", "name": "equals", "arg_nums": 1, "params": [{"name": "o", "type": "Object"}], "return_type": "boolean", "signature": "@Override\n  public boolean equals(Object o)", "original_string": "  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    ChangedMetadata that = (ChangedMetadata) o;\n    return Objects.equals(left, that.left) && Objects.equals(right, that.right);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedMetadata.java", "class_name": "ChangedMetadata", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedMetadata.java.ChangedMetadata", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedMetadata.java.ChangedMetadata.[int]hashCode()", "name": "hashCode", "arg_nums": 0, "params": [], "return_type": "int", "signature": "@Override\n  public int hashCode()", "original_string": "  @Override\n  public int hashCode() {\n    return Objects.hash(left, right);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedMetadata.java", "class_name": "ChangedMetadata", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedMetadata.java.ChangedMetadata", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedMetadata.java.ChangedMetadata.[java.lang.String]toString()", "name": "toString", "arg_nums": 0, "params": [], "return_type": "java.lang.String", "signature": "@java.lang.Override\n  public java.lang.String toString()", "original_string": "  @java.lang.Override\n  public java.lang.String toString() {\n    return \"ChangedMetadata(left=\" + this.getLeft() + \", right=\" + this.getRight() + \")\";\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedMetadata.java", "class_name": "ChangedMetadata", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedMetadata.java.ChangedMetadata", "attributes": {"modifiers": "@java.lang.Override\n  public", "marker_annotations": ["@java.lang.Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "java.lang.String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme.[]ChangedSecurityScheme(SecurityScheme,SecurityScheme,DiffContext)", "name": "ChangedSecurityScheme", "arg_nums": 3, "params": [{"name": "oldSecurityScheme", "type": "SecurityScheme"}, {"name": "newSecurityScheme", "type": "SecurityScheme"}, {"name": "context", "type": "DiffContext"}], "return_type": "", "signature": "public ChangedSecurityScheme(\n      SecurityScheme oldSecurityScheme, SecurityScheme newSecurityScheme, DiffContext context)", "original_string": "  public ChangedSecurityScheme(\n      SecurityScheme oldSecurityScheme, SecurityScheme newSecurityScheme, DiffContext context) {\n    this.oldSecurityScheme = oldSecurityScheme;\n    this.newSecurityScheme = newSecurityScheme;\n    this.context = context;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java", "class_name": "ChangedSecurityScheme", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme.[List<Changed>]getChangedElements()", "name": "getChangedElements", "arg_nums": 0, "params": [], "return_type": "List<Changed>", "signature": "@Override\n  public List<Changed> getChangedElements()", "original_string": "  @Override\n  public List<Changed> getChangedElements() {\n    return Arrays.asList(description, oAuthFlows, extensions);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java", "class_name": "ChangedSecurityScheme", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<Changed>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme.[DiffResult]isCoreChanged()", "name": "isCoreChanged", "arg_nums": 0, "params": [], "return_type": "DiffResult", "signature": "@Override\n  public DiffResult isCoreChanged()", "original_string": "  @Override\n  public DiffResult isCoreChanged() {\n    if (!changedType\n        && !changedIn\n        && !changedScheme\n        && !changedBearerFormat\n        && !changedOpenIdConnectUrl\n        && (changedScopes == null || changedScopes.isUnchanged())) {\n      return DiffResult.NO_CHANGES;\n    }\n\n    if (changedBearerFormat) {\n      if (SECURITY_SCHEME_BEARER_FORMAT_CHANGED.enabled(context)) {\n        return DiffResult.INCOMPATIBLE;\n      }\n    }\n    if (changedOpenIdConnectUrl) {\n      if (SECURITY_SCHEME_OPENIDCONNECT_URL_CHANGED.enabled(context)) {\n        return DiffResult.INCOMPATIBLE;\n      }\n    }\n    if (changedScheme) {\n      if (SECURITY_SCHEME_SCHEME_CHANGED.enabled(context)) {\n        return DiffResult.INCOMPATIBLE;\n      }\n    }\n    if (changedScopes != null && !changedScopes.getIncreased().isEmpty()) {\n      if (SECURITY_SCHEME_SCOPES_INCREASED.enabled(context)) {\n        return DiffResult.INCOMPATIBLE;\n      }\n    }\n    if (changedIn || changedType) {\n      // TODO: Dead code removal opportunity for changedType and changedIn. It appears that\n      // SecuritySchemaDiff will never be given the chance to detect differences TYPE and\n      // IN differences because that case has already been detected and filtered out by\n      // SecurityRequirementsDiff and recorded as a dropped requirement in\n      // ChangedSecurityRequirements.\n      return DiffResult.INCOMPATIBLE;\n    }\n    return DiffResult.COMPATIBLE;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java", "class_name": "ChangedSecurityScheme", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "DiffResult", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme.[SecurityScheme]getOldSecurityScheme()", "name": "getOldSecurityScheme", "arg_nums": 0, "params": [], "return_type": "SecurityScheme", "signature": "public SecurityScheme getOldSecurityScheme()", "original_string": "  public SecurityScheme getOldSecurityScheme() {\n    return this.oldSecurityScheme;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java", "class_name": "ChangedSecurityScheme", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "SecurityScheme", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme.[SecurityScheme]getNewSecurityScheme()", "name": "getNewSecurityScheme", "arg_nums": 0, "params": [], "return_type": "SecurityScheme", "signature": "public SecurityScheme getNewSecurityScheme()", "original_string": "  public SecurityScheme getNewSecurityScheme() {\n    return this.newSecurityScheme;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java", "class_name": "ChangedSecurityScheme", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "SecurityScheme", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme.[boolean]isChangedType()", "name": "isChangedType", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "public boolean isChangedType()", "original_string": "  public boolean isChangedType() {\n    return this.changedType;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java", "class_name": "ChangedSecurityScheme", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme.[boolean]isChangedIn()", "name": "isChangedIn", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "public boolean isChangedIn()", "original_string": "  public boolean isChangedIn() {\n    return this.changedIn;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java", "class_name": "ChangedSecurityScheme", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme.[boolean]isChangedScheme()", "name": "isChangedScheme", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "public boolean isChangedScheme()", "original_string": "  public boolean isChangedScheme() {\n    return this.changedScheme;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java", "class_name": "ChangedSecurityScheme", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme.[boolean]isChangedBearerFormat()", "name": "isChangedBearerFormat", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "public boolean isChangedBearerFormat()", "original_string": "  public boolean isChangedBearerFormat() {\n    return this.changedBearerFormat;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java", "class_name": "ChangedSecurityScheme", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme.[boolean]isChangedOpenIdConnectUrl()", "name": "isChangedOpenIdConnectUrl", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "public boolean isChangedOpenIdConnectUrl()", "original_string": "  public boolean isChangedOpenIdConnectUrl() {\n    return this.changedOpenIdConnectUrl;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java", "class_name": "ChangedSecurityScheme", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme.[ChangedSecuritySchemeScopes]getChangedScopes()", "name": "getChangedScopes", "arg_nums": 0, "params": [], "return_type": "ChangedSecuritySchemeScopes", "signature": "public ChangedSecuritySchemeScopes getChangedScopes()", "original_string": "  public ChangedSecuritySchemeScopes getChangedScopes() {\n    return this.changedScopes;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java", "class_name": "ChangedSecurityScheme", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedSecuritySchemeScopes", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme.[ChangedMetadata]getDescription()", "name": "getDescription", "arg_nums": 0, "params": [], "return_type": "ChangedMetadata", "signature": "public ChangedMetadata getDescription()", "original_string": "  public ChangedMetadata getDescription() {\n    return this.description;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java", "class_name": "ChangedSecurityScheme", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedMetadata", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme.[ChangedOAuthFlows]getOAuthFlows()", "name": "getOAuthFlows", "arg_nums": 0, "params": [], "return_type": "ChangedOAuthFlows", "signature": "public ChangedOAuthFlows getOAuthFlows()", "original_string": "  public ChangedOAuthFlows getOAuthFlows() {\n    return this.oAuthFlows;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java", "class_name": "ChangedSecurityScheme", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedOAuthFlows", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme.[ChangedExtensions]getExtensions()", "name": "getExtensions", "arg_nums": 0, "params": [], "return_type": "ChangedExtensions", "signature": "public ChangedExtensions getExtensions()", "original_string": "  public ChangedExtensions getExtensions() {\n    return this.extensions;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java", "class_name": "ChangedSecurityScheme", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedExtensions", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme.[ChangedSecurityScheme]setOldSecurityScheme(SecurityScheme)", "name": "setOldSecurityScheme", "arg_nums": 1, "params": [{"name": "oldSecurityScheme", "type": "SecurityScheme"}], "return_type": "ChangedSecurityScheme", "signature": "public ChangedSecurityScheme setOldSecurityScheme(final SecurityScheme oldSecurityScheme)", "original_string": "  public ChangedSecurityScheme setOldSecurityScheme(final SecurityScheme oldSecurityScheme) {\n    this.oldSecurityScheme = oldSecurityScheme;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java", "class_name": "ChangedSecurityScheme", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedSecurityScheme", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme.[ChangedSecurityScheme]setNewSecurityScheme(SecurityScheme)", "name": "setNewSecurityScheme", "arg_nums": 1, "params": [{"name": "newSecurityScheme", "type": "SecurityScheme"}], "return_type": "ChangedSecurityScheme", "signature": "public ChangedSecurityScheme setNewSecurityScheme(final SecurityScheme newSecurityScheme)", "original_string": "  public ChangedSecurityScheme setNewSecurityScheme(final SecurityScheme newSecurityScheme) {\n    this.newSecurityScheme = newSecurityScheme;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java", "class_name": "ChangedSecurityScheme", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedSecurityScheme", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme.[ChangedSecurityScheme]setChangedType(boolean)", "name": "setChangedType", "arg_nums": 1, "params": [{"name": "changedType", "type": "boolean"}], "return_type": "ChangedSecurityScheme", "signature": "public ChangedSecurityScheme setChangedType(final boolean changedType)", "original_string": "  public ChangedSecurityScheme setChangedType(final boolean changedType) {\n    this.changedType = changedType;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java", "class_name": "ChangedSecurityScheme", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedSecurityScheme", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme.[ChangedSecurityScheme]setChangedIn(boolean)", "name": "setChangedIn", "arg_nums": 1, "params": [{"name": "changedIn", "type": "boolean"}], "return_type": "ChangedSecurityScheme", "signature": "public ChangedSecurityScheme setChangedIn(final boolean changedIn)", "original_string": "  public ChangedSecurityScheme setChangedIn(final boolean changedIn) {\n    this.changedIn = changedIn;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java", "class_name": "ChangedSecurityScheme", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedSecurityScheme", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme.[ChangedSecurityScheme]setChangedScheme(boolean)", "name": "setChangedScheme", "arg_nums": 1, "params": [{"name": "changedScheme", "type": "boolean"}], "return_type": "ChangedSecurityScheme", "signature": "public ChangedSecurityScheme setChangedScheme(final boolean changedScheme)", "original_string": "  public ChangedSecurityScheme setChangedScheme(final boolean changedScheme) {\n    this.changedScheme = changedScheme;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java", "class_name": "ChangedSecurityScheme", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedSecurityScheme", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme.[ChangedSecurityScheme]setChangedBearerFormat(boolean)", "name": "setChangedBearerFormat", "arg_nums": 1, "params": [{"name": "changedBearerFormat", "type": "boolean"}], "return_type": "ChangedSecurityScheme", "signature": "public ChangedSecurityScheme setChangedBearerFormat(final boolean changedBearerFormat)", "original_string": "  public ChangedSecurityScheme setChangedBearerFormat(final boolean changedBearerFormat) {\n    this.changedBearerFormat = changedBearerFormat;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java", "class_name": "ChangedSecurityScheme", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedSecurityScheme", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme.[ChangedSecurityScheme]setChangedOpenIdConnectUrl(boolean)", "name": "setChangedOpenIdConnectUrl", "arg_nums": 1, "params": [{"name": "changedOpenIdConnectUrl", "type": "boolean"}], "return_type": "ChangedSecurityScheme", "signature": "public ChangedSecurityScheme setChangedOpenIdConnectUrl(final boolean changedOpenIdConnectUrl)", "original_string": "  public ChangedSecurityScheme setChangedOpenIdConnectUrl(final boolean changedOpenIdConnectUrl) {\n    this.changedOpenIdConnectUrl = changedOpenIdConnectUrl;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java", "class_name": "ChangedSecurityScheme", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedSecurityScheme", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme.[ChangedSecurityScheme]setChangedScopes(ChangedSecuritySchemeScopes)", "name": "setChangedScopes", "arg_nums": 1, "params": [{"name": "changedScopes", "type": "ChangedSecuritySchemeScopes"}], "return_type": "ChangedSecurityScheme", "signature": "public ChangedSecurityScheme setChangedScopes(final ChangedSecuritySchemeScopes changedScopes)", "original_string": "  public ChangedSecurityScheme setChangedScopes(final ChangedSecuritySchemeScopes changedScopes) {\n    this.changedScopes = changedScopes;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java", "class_name": "ChangedSecurityScheme", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedSecurityScheme", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme.[ChangedSecurityScheme]setDescription(ChangedMetadata)", "name": "setDescription", "arg_nums": 1, "params": [{"name": "description", "type": "ChangedMetadata"}], "return_type": "ChangedSecurityScheme", "signature": "public ChangedSecurityScheme setDescription(final ChangedMetadata description)", "original_string": "  public ChangedSecurityScheme setDescription(final ChangedMetadata description) {\n    this.description = description;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java", "class_name": "ChangedSecurityScheme", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedSecurityScheme", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme.[ChangedSecurityScheme]setOAuthFlows(ChangedOAuthFlows)", "name": "setOAuthFlows", "arg_nums": 1, "params": [{"name": "oAuthFlows", "type": "ChangedOAuthFlows"}], "return_type": "ChangedSecurityScheme", "signature": "public ChangedSecurityScheme setOAuthFlows(final ChangedOAuthFlows oAuthFlows)", "original_string": "  public ChangedSecurityScheme setOAuthFlows(final ChangedOAuthFlows oAuthFlows) {\n    this.oAuthFlows = oAuthFlows;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java", "class_name": "ChangedSecurityScheme", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedSecurityScheme", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme.[ChangedSecurityScheme]setExtensions(ChangedExtensions)", "name": "setExtensions", "arg_nums": 1, "params": [{"name": "extensions", "type": "ChangedExtensions"}], "return_type": "ChangedSecurityScheme", "signature": "public ChangedSecurityScheme setExtensions(final ChangedExtensions extensions)", "original_string": "  public ChangedSecurityScheme setExtensions(final ChangedExtensions extensions) {\n    this.extensions = extensions;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java", "class_name": "ChangedSecurityScheme", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedSecurityScheme", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme.[boolean]equals(Object)", "name": "equals", "arg_nums": 1, "params": [{"name": "o", "type": "Object"}], "return_type": "boolean", "signature": "@Override\n  public boolean equals(Object o)", "original_string": "  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    ChangedSecurityScheme that = (ChangedSecurityScheme) o;\n    return changedType == that.changedType\n        && changedIn == that.changedIn\n        && changedScheme == that.changedScheme\n        && changedBearerFormat == that.changedBearerFormat\n        && changedOpenIdConnectUrl == that.changedOpenIdConnectUrl\n        && Objects.equals(oldSecurityScheme, that.oldSecurityScheme)\n        && Objects.equals(newSecurityScheme, that.newSecurityScheme)\n        && Objects.equals(changedScopes, that.changedScopes)\n        && Objects.equals(description, that.description)\n        && Objects.equals(oAuthFlows, that.oAuthFlows)\n        && Objects.equals(extensions, that.extensions);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java", "class_name": "ChangedSecurityScheme", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme.[int]hashCode()", "name": "hashCode", "arg_nums": 0, "params": [], "return_type": "int", "signature": "@Override\n  public int hashCode()", "original_string": "  @Override\n  public int hashCode() {\n    return Objects.hash(\n        oldSecurityScheme,\n        newSecurityScheme,\n        changedType,\n        changedIn,\n        changedScheme,\n        changedBearerFormat,\n        changedOpenIdConnectUrl,\n        changedScopes,\n        description,\n        oAuthFlows,\n        extensions);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java", "class_name": "ChangedSecurityScheme", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme.[java.lang.String]toString()", "name": "toString", "arg_nums": 0, "params": [], "return_type": "java.lang.String", "signature": "@java.lang.Override\n  public java.lang.String toString()", "original_string": "  @java.lang.Override\n  public java.lang.String toString() {\n    return \"ChangedSecurityScheme(oldSecurityScheme=\"\n        + this.getOldSecurityScheme()\n        + \", newSecurityScheme=\"\n        + this.getNewSecurityScheme()\n        + \", changedType=\"\n        + this.isChangedType()\n        + \", changedIn=\"\n        + this.isChangedIn()\n        + \", changedScheme=\"\n        + this.isChangedScheme()\n        + \", changedBearerFormat=\"\n        + this.isChangedBearerFormat()\n        + \", changedOpenIdConnectUrl=\"\n        + this.isChangedOpenIdConnectUrl()\n        + \", changedScopes=\"\n        + this.getChangedScopes()\n        + \", description=\"\n        + this.getDescription()\n        + \", oAuthFlows=\"\n        + this.getOAuthFlows()\n        + \", extensions=\"\n        + this.getExtensions()\n        + \")\";\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java", "class_name": "ChangedSecurityScheme", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme.java.ChangedSecurityScheme", "attributes": {"modifiers": "@java.lang.Override\n  public", "marker_annotations": ["@java.lang.Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "java.lang.String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ComposedChanged.java.ComposedChanged.[List<Changed>]getChangedElements()", "name": "getChangedElements", "arg_nums": 0, "params": [], "return_type": "List<Changed>", "signature": "@NotNull\n  List<Changed> getChangedElements()", "original_string": "  @NotNull\n  List<Changed> getChangedElements();", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ComposedChanged.java", "class_name": "ComposedChanged", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ComposedChanged.java.ComposedChanged", "attributes": {"modifiers": "@NotNull", "marker_annotations": ["@NotNull"], "non_marker_annotations": [], "comments": [], "return_type": "List<Changed>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ComposedChanged.java.ComposedChanged.[DiffResult]isCoreChanged()", "name": "isCoreChanged", "arg_nums": 0, "params": [], "return_type": "DiffResult", "signature": "@NotNull\n  DiffResult isCoreChanged()", "original_string": "  @NotNull\n  DiffResult isCoreChanged();", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ComposedChanged.java", "class_name": "ComposedChanged", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ComposedChanged.java.ComposedChanged", "attributes": {"modifiers": "@NotNull", "marker_annotations": ["@NotNull"], "non_marker_annotations": [], "comments": [], "return_type": "DiffResult", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ComposedChanged.java.ComposedChanged.[DiffResult]isChanged()", "name": "isChanged", "arg_nums": 0, "params": [], "return_type": "DiffResult", "signature": "@Override\n  default DiffResult isChanged()", "original_string": "  @Override\n  default DiffResult isChanged() {\n    DiffResult elementsResult =\n        DiffResult.fromWeight(\n            getChangedElements().stream()\n                .filter(Objects::nonNull)\n                .map(Changed::isChanged)\n                .mapToInt(DiffResult::getWeight)\n                .max()\n                .orElse(0));\n    if (isCoreChanged().getWeight() > elementsResult.getWeight()) {\n      return isCoreChanged();\n    } else {\n      return elementsResult;\n    }\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ComposedChanged.java", "class_name": "ComposedChanged", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ComposedChanged.java.ComposedChanged", "attributes": {"modifiers": "@Override\n  default", "marker_annotations": ["@Override"], "non_marker_annotations": ["default"], "comments": [], "return_type": "DiffResult", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPath.java.ChangedPath.[]ChangedPath(String,PathItem,PathItem,DiffContext)", "name": "ChangedPath", "arg_nums": 4, "params": [{"name": "pathUrl", "type": "String"}, {"name": "oldPath", "type": "PathItem"}, {"name": "newPath", "type": "PathItem"}, {"name": "context", "type": "DiffContext"}], "return_type": "", "signature": "public ChangedPath(String pathUrl, PathItem oldPath, PathItem newPath, DiffContext context)", "original_string": "  public ChangedPath(String pathUrl, PathItem oldPath, PathItem newPath, DiffContext context) {\n    this.pathUrl = pathUrl;\n    this.oldPath = oldPath;\n    this.newPath = newPath;\n    this.context = context;\n    this.increased = new LinkedHashMap<>();\n    this.missing = new LinkedHashMap<>();\n    this.changed = new ArrayList<>();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPath.java", "class_name": "ChangedPath", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPath.java.ChangedPath", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPath.java.ChangedPath.[List<Changed>]getChangedElements()", "name": "getChangedElements", "arg_nums": 0, "params": [], "return_type": "List<Changed>", "signature": "@Override\n  public List<Changed> getChangedElements()", "original_string": "  @Override\n  public List<Changed> getChangedElements() {\n    return Stream.concat(changed.stream(), Stream.of(extensions)).collect(Collectors.toList());\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPath.java", "class_name": "ChangedPath", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPath.java.ChangedPath", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<Changed>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPath.java.ChangedPath.[DiffResult]isCoreChanged()", "name": "isCoreChanged", "arg_nums": 0, "params": [], "return_type": "DiffResult", "signature": "@Override\n  public DiffResult isCoreChanged()", "original_string": "  @Override\n  public DiffResult isCoreChanged() {\n    if (increased.isEmpty() && missing.isEmpty()) {\n      return DiffResult.NO_CHANGES;\n    }\n    if (!missing.isEmpty()) {\n      if (OPENAPI_ENDPOINTS_DECREASED.enabled(context)) {\n        return DiffResult.INCOMPATIBLE;\n      }\n    }\n    return DiffResult.COMPATIBLE;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPath.java", "class_name": "ChangedPath", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPath.java.ChangedPath", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "DiffResult", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPath.java.ChangedPath.[String]getPathUrl()", "name": "getPathUrl", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getPathUrl()", "original_string": "  public String getPathUrl() {\n    return this.pathUrl;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPath.java", "class_name": "ChangedPath", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPath.java.ChangedPath", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPath.java.ChangedPath.[PathItem]getOldPath()", "name": "getOldPath", "arg_nums": 0, "params": [], "return_type": "PathItem", "signature": "public PathItem getOldPath()", "original_string": "  public PathItem getOldPath() {\n    return this.oldPath;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPath.java", "class_name": "ChangedPath", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPath.java.ChangedPath", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "PathItem", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPath.java.ChangedPath.[PathItem]getNewPath()", "name": "getNewPath", "arg_nums": 0, "params": [], "return_type": "PathItem", "signature": "public PathItem getNewPath()", "original_string": "  public PathItem getNewPath() {\n    return this.newPath;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPath.java", "class_name": "ChangedPath", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPath.java.ChangedPath", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "PathItem", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPath.java.ChangedPath.[DiffContext]getContext()", "name": "getContext", "arg_nums": 0, "params": [], "return_type": "DiffContext", "signature": "public DiffContext getContext()", "original_string": "  public DiffContext getContext() {\n    return this.context;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPath.java", "class_name": "ChangedPath", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPath.java.ChangedPath", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "DiffContext", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPath.java.ChangedPath.[Map<PathItem.HttpMethod, Operation>]getIncreased()", "name": "getIncreased", "arg_nums": 0, "params": [], "return_type": "Map<PathItem.HttpMethod, Operation>", "signature": "public Map<PathItem.HttpMethod, Operation> getIncreased()", "original_string": "  public Map<PathItem.HttpMethod, Operation> getIncreased() {\n    return this.increased;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPath.java", "class_name": "ChangedPath", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPath.java.ChangedPath", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Map<PathItem.HttpMethod, Operation>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPath.java.ChangedPath.[Map<PathItem.HttpMethod, Operation>]getMissing()", "name": "getMissing", "arg_nums": 0, "params": [], "return_type": "Map<PathItem.HttpMethod, Operation>", "signature": "public Map<PathItem.HttpMethod, Operation> getMissing()", "original_string": "  public Map<PathItem.HttpMethod, Operation> getMissing() {\n    return this.missing;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPath.java", "class_name": "ChangedPath", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPath.java.ChangedPath", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Map<PathItem.HttpMethod, Operation>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPath.java.ChangedPath.[List<ChangedOperation>]getChanged()", "name": "getChanged", "arg_nums": 0, "params": [], "return_type": "List<ChangedOperation>", "signature": "public List<ChangedOperation> getChanged()", "original_string": "  public List<ChangedOperation> getChanged() {\n    return this.changed;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPath.java", "class_name": "ChangedPath", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPath.java.ChangedPath", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<ChangedOperation>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPath.java.ChangedPath.[ChangedExtensions]getExtensions()", "name": "getExtensions", "arg_nums": 0, "params": [], "return_type": "ChangedExtensions", "signature": "public ChangedExtensions getExtensions()", "original_string": "  public ChangedExtensions getExtensions() {\n    return this.extensions;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPath.java", "class_name": "ChangedPath", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPath.java.ChangedPath", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedExtensions", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPath.java.ChangedPath.[ChangedPath]setIncreased(Map<PathItem.HttpMethod, Operation>)", "name": "setIncreased", "arg_nums": 1, "params": [{"name": "increased", "type": "Map<PathItem.HttpMethod, Operation>"}], "return_type": "ChangedPath", "signature": "public ChangedPath setIncreased(final Map<PathItem.HttpMethod, Operation> increased)", "original_string": "  public ChangedPath setIncreased(final Map<PathItem.HttpMethod, Operation> increased) {\n    this.increased = increased;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPath.java", "class_name": "ChangedPath", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPath.java.ChangedPath", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedPath", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPath.java.ChangedPath.[ChangedPath]setMissing(Map<PathItem.HttpMethod, Operation>)", "name": "setMissing", "arg_nums": 1, "params": [{"name": "missing", "type": "Map<PathItem.HttpMethod, Operation>"}], "return_type": "ChangedPath", "signature": "public ChangedPath setMissing(final Map<PathItem.HttpMethod, Operation> missing)", "original_string": "  public ChangedPath setMissing(final Map<PathItem.HttpMethod, Operation> missing) {\n    this.missing = missing;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPath.java", "class_name": "ChangedPath", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPath.java.ChangedPath", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedPath", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPath.java.ChangedPath.[ChangedPath]setChanged(List<ChangedOperation>)", "name": "setChanged", "arg_nums": 1, "params": [{"name": "changed", "type": "List<ChangedOperation>"}], "return_type": "ChangedPath", "signature": "public ChangedPath setChanged(final List<ChangedOperation> changed)", "original_string": "  public ChangedPath setChanged(final List<ChangedOperation> changed) {\n    this.changed = changed;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPath.java", "class_name": "ChangedPath", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPath.java.ChangedPath", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedPath", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPath.java.ChangedPath.[ChangedPath]setExtensions(ChangedExtensions)", "name": "setExtensions", "arg_nums": 1, "params": [{"name": "extensions", "type": "ChangedExtensions"}], "return_type": "ChangedPath", "signature": "public ChangedPath setExtensions(final ChangedExtensions extensions)", "original_string": "  public ChangedPath setExtensions(final ChangedExtensions extensions) {\n    this.extensions = extensions;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPath.java", "class_name": "ChangedPath", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPath.java.ChangedPath", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedPath", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPath.java.ChangedPath.[boolean]equals(Object)", "name": "equals", "arg_nums": 1, "params": [{"name": "o", "type": "Object"}], "return_type": "boolean", "signature": "@Override\n  public boolean equals(Object o)", "original_string": "  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    ChangedPath that = (ChangedPath) o;\n    return Objects.equals(pathUrl, that.pathUrl)\n        && Objects.equals(oldPath, that.oldPath)\n        && Objects.equals(newPath, that.newPath)\n        && Objects.equals(context, that.context)\n        && Objects.equals(increased, that.increased)\n        && Objects.equals(missing, that.missing)\n        && Objects.equals(changed, that.changed)\n        && Objects.equals(extensions, that.extensions);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPath.java", "class_name": "ChangedPath", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPath.java.ChangedPath", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPath.java.ChangedPath.[int]hashCode()", "name": "hashCode", "arg_nums": 0, "params": [], "return_type": "int", "signature": "@Override\n  public int hashCode()", "original_string": "  @Override\n  public int hashCode() {\n    return Objects.hash(\n        pathUrl, oldPath, newPath, context, increased, missing, changed, extensions);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPath.java", "class_name": "ChangedPath", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPath.java.ChangedPath", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPath.java.ChangedPath.[java.lang.String]toString()", "name": "toString", "arg_nums": 0, "params": [], "return_type": "java.lang.String", "signature": "@java.lang.Override\n  public java.lang.String toString()", "original_string": "  @java.lang.Override\n  public java.lang.String toString() {\n    return \"ChangedPath(pathUrl=\"\n        + this.getPathUrl()\n        + \", oldPath=\"\n        + this.getOldPath()\n        + \", newPath=\"\n        + this.getNewPath()\n        + \", context=\"\n        + this.getContext()\n        + \", increased=\"\n        + this.getIncreased()\n        + \", missing=\"\n        + this.getMissing()\n        + \", changed=\"\n        + this.getChanged()\n        + \", extensions=\"\n        + this.getExtensions()\n        + \")\";\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPath.java", "class_name": "ChangedPath", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedPath.java.ChangedPath", "attributes": {"modifiers": "@java.lang.Override\n  public", "marker_annotations": ["@java.lang.Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "java.lang.String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[]ChangedSchema()", "name": "ChangedSchema", "arg_nums": 0, "params": [], "return_type": "", "signature": "public ChangedSchema()", "original_string": "  public ChangedSchema() {\n    increasedProperties = new LinkedHashMap<>();\n    missingProperties = new LinkedHashMap<>();\n    changedProperties = new LinkedHashMap<>();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java", "class_name": "ChangedSchema", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[void]clearChangedCache()", "name": "clearChangedCache", "arg_nums": 0, "params": [], "return_type": "void", "signature": "private void clearChangedCache()", "original_string": "  private void clearChangedCache() {\n    this.changed = null;\n    this.coreChanged = null;\n    this.changedElements = null;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java", "class_name": "ChangedSchema", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[DiffResult]isChanged()", "name": "isChanged", "arg_nums": 0, "params": [], "return_type": "DiffResult", "signature": "@Override\n  public DiffResult isChanged()", "original_string": "  @Override\n  public DiffResult isChanged() {\n    if (gettingIsChanged) {\n      return DiffResult.NO_CHANGES;\n    }\n\n    gettingIsChanged = true;\n    if (this.changed == null) {\n      DiffResult elementsResult =\n          DiffResult.fromWeight(\n              getChangedElements().stream()\n                  .filter(Objects::nonNull)\n                  .map(Changed::isChanged)\n                  .mapToInt(DiffResult::getWeight)\n                  .max()\n                  .orElse(0));\n      DiffResult result;\n      if (isCoreChanged().getWeight() > elementsResult.getWeight()) {\n        result = isCoreChanged();\n      } else {\n        result = elementsResult;\n      }\n      this.changed = result;\n    }\n    gettingIsChanged = false;\n\n    return this.changed;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java", "class_name": "ChangedSchema", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "DiffResult", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[List<Changed>]getChangedElements()", "name": "getChangedElements", "arg_nums": 0, "params": [], "return_type": "List<Changed>", "signature": "@Override\n  public List<Changed> getChangedElements()", "original_string": "  @Override\n  public List<Changed> getChangedElements() {\n    if (gettingChangedElements) {\n      return Collections.emptyList();\n    }\n\n    gettingChangedElements = true;\n    if (changedElements == null) {\n      this.changedElements =\n          Stream.concat(\n                  changedProperties.values().stream(),\n                  Stream.of(\n                      description,\n                      readOnly,\n                      writeOnly,\n                      items,\n                      oneOfSchema,\n                      addProp,\n                      enumeration,\n                      required,\n                      maxLength,\n                      numericRange,\n                      extensions))\n              .collect(Collectors.toList());\n    }\n    gettingChangedElements = false;\n\n    return this.changedElements;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java", "class_name": "ChangedSchema", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<Changed>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[DiffResult]isCoreChanged()", "name": "isCoreChanged", "arg_nums": 0, "params": [], "return_type": "DiffResult", "signature": "@Override\n  public DiffResult isCoreChanged()", "original_string": "  @Override\n  public DiffResult isCoreChanged() {\n    if (this.coreChanged == null) {\n      this.coreChanged = calculateCoreChanged();\n    }\n\n    return this.coreChanged;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java", "class_name": "ChangedSchema", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "DiffResult", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[DiffResult]calculateCoreChanged()", "name": "calculateCoreChanged", "arg_nums": 0, "params": [], "return_type": "DiffResult", "signature": "private DiffResult calculateCoreChanged()", "original_string": "  private DiffResult calculateCoreChanged() {\n    if (!changedType\n        && (oldSchema == null && newSchema == null || oldSchema != null && newSchema != null)\n        && !changeFormat\n        && increasedProperties.isEmpty()\n        && missingProperties.isEmpty()\n        && changedProperties.values().isEmpty()\n        && !changeDeprecated\n        && !discriminatorPropertyChanged) {\n      return DiffResult.NO_CHANGES;\n    }\n    if (changedType) {\n      if (SCHEMA_TYPE_CHANGED.enabled(context)) {\n        return DiffResult.INCOMPATIBLE;\n      }\n    }\n    if (discriminatorPropertyChanged) {\n      if (SCHEMA_DISCRIMINATOR_CHANGED.enabled(context)) {\n        return DiffResult.INCOMPATIBLE;\n      }\n    }\n\n    if (!compatibleForRequest() || !compatibleForResponse()) {\n      return DiffResult.INCOMPATIBLE;\n    }\n    return DiffResult.COMPATIBLE;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java", "class_name": "ChangedSchema", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "DiffResult", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[boolean]compatibleForRequest()", "name": "compatibleForRequest", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "private boolean compatibleForRequest()", "original_string": "  private boolean compatibleForRequest() {\n    if (context.isRequest()) {\n      if (oldSchema == null && newSchema != null) {\n        // TODO: dead code? If not, create test.\n        return false;\n      }\n    }\n    return true;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java", "class_name": "ChangedSchema", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[boolean]compatibleForResponse()", "name": "compatibleForResponse", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "private boolean compatibleForResponse()", "original_string": "  private boolean compatibleForResponse() {\n    if (context.isResponse()) {\n      if (oldSchema != null) {\n        if (newSchema == null) {\n          // TODO: dead code? If not, create test.\n          return false;\n        }\n        if (oldSchema.getRequired() != null\n            && missingProperties.keySet().stream()\n                .anyMatch(prop -> oldSchema.getRequired().contains(prop))) {\n          if (RESPONSE_REQUIRED_DECREASED.enabled(context)) {\n            return false;\n          }\n        }\n      }\n    }\n    return true;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java", "class_name": "ChangedSchema", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[DiffContext]getContext()", "name": "getContext", "arg_nums": 0, "params": [], "return_type": "DiffContext", "signature": "public DiffContext getContext()", "original_string": "  public DiffContext getContext() {\n    return this.context;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java", "class_name": "ChangedSchema", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "DiffContext", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[Schema<?>]getOldSchema()", "name": "getOldSchema", "arg_nums": 0, "params": [], "return_type": "Schema<?>", "signature": "public Schema<?> getOldSchema()", "original_string": "  public Schema<?> getOldSchema() {\n    return this.oldSchema;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java", "class_name": "ChangedSchema", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Schema<?>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[Schema<?>]getNewSchema()", "name": "getNewSchema", "arg_nums": 0, "params": [], "return_type": "Schema<?>", "signature": "public Schema<?> getNewSchema()", "original_string": "  public Schema<?> getNewSchema() {\n    return this.newSchema;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java", "class_name": "ChangedSchema", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Schema<?>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[String]getType()", "name": "getType", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getType()", "original_string": "  public String getType() {\n    return this.type;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java", "class_name": "ChangedSchema", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[Map<String, ChangedSchema>]getChangedProperties()", "name": "getChangedProperties", "arg_nums": 0, "params": [], "return_type": "Map<String, ChangedSchema>", "signature": "public Map<String, ChangedSchema> getChangedProperties()", "original_string": "  public Map<String, ChangedSchema> getChangedProperties() {\n    return this.changedProperties;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java", "class_name": "ChangedSchema", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Map<String, ChangedSchema>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[Map<String, Schema<?>>]getIncreasedProperties()", "name": "getIncreasedProperties", "arg_nums": 0, "params": [], "return_type": "Map<String, Schema<?>>", "signature": "public Map<String, Schema<?>> getIncreasedProperties()", "original_string": "  public Map<String, Schema<?>> getIncreasedProperties() {\n    return this.increasedProperties;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java", "class_name": "ChangedSchema", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Map<String, Schema<?>>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[Map<String, Schema<?>>]getMissingProperties()", "name": "getMissingProperties", "arg_nums": 0, "params": [], "return_type": "Map<String, Schema<?>>", "signature": "public Map<String, Schema<?>> getMissingProperties()", "original_string": "  public Map<String, Schema<?>> getMissingProperties() {\n    return this.missingProperties;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java", "class_name": "ChangedSchema", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Map<String, Schema<?>>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[boolean]isChangeDeprecated()", "name": "isChangeDeprecated", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "public boolean isChangeDeprecated()", "original_string": "  public boolean isChangeDeprecated() {\n    return this.changeDeprecated;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java", "class_name": "ChangedSchema", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[ChangedMetadata]getDescription()", "name": "getDescription", "arg_nums": 0, "params": [], "return_type": "ChangedMetadata", "signature": "public ChangedMetadata getDescription()", "original_string": "  public ChangedMetadata getDescription() {\n    return this.description;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java", "class_name": "ChangedSchema", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedMetadata", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[boolean]isChangeTitle()", "name": "isChangeTitle", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "public boolean isChangeTitle()", "original_string": "  public boolean isChangeTitle() {\n    return this.changeTitle;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java", "class_name": "ChangedSchema", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[ChangedRequired]getRequired()", "name": "getRequired", "arg_nums": 0, "params": [], "return_type": "ChangedRequired", "signature": "public ChangedRequired getRequired()", "original_string": "  public ChangedRequired getRequired() {\n    return this.required;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java", "class_name": "ChangedSchema", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedRequired", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[boolean]isChangeDefault()", "name": "isChangeDefault", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "public boolean isChangeDefault()", "original_string": "  public boolean isChangeDefault() {\n    return this.changeDefault;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java", "class_name": "ChangedSchema", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[ChangedEnum<?>]getEnumeration()", "name": "getEnumeration", "arg_nums": 0, "params": [], "return_type": "ChangedEnum<?>", "signature": "public ChangedEnum<?> getEnumeration()", "original_string": "  public ChangedEnum<?> getEnumeration() {\n    return this.enumeration;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java", "class_name": "ChangedSchema", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedEnum<?>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[boolean]isChangeFormat()", "name": "isChangeFormat", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "public boolean isChangeFormat()", "original_string": "  public boolean isChangeFormat() {\n    return this.changeFormat;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java", "class_name": "ChangedSchema", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[ChangedReadOnly]getReadOnly()", "name": "getReadOnly", "arg_nums": 0, "params": [], "return_type": "ChangedReadOnly", "signature": "public ChangedReadOnly getReadOnly()", "original_string": "  public ChangedReadOnly getReadOnly() {\n    return this.readOnly;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java", "class_name": "ChangedSchema", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedReadOnly", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[ChangedWriteOnly]getWriteOnly()", "name": "getWriteOnly", "arg_nums": 0, "params": [], "return_type": "ChangedWriteOnly", "signature": "public ChangedWriteOnly getWriteOnly()", "original_string": "  public ChangedWriteOnly getWriteOnly() {\n    return this.writeOnly;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java", "class_name": "ChangedSchema", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedWriteOnly", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[boolean]isChangedType()", "name": "isChangedType", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "public boolean isChangedType()", "original_string": "  public boolean isChangedType() {\n    return this.changedType;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java", "class_name": "ChangedSchema", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[ChangedMaxLength]getMaxLength()", "name": "getMaxLength", "arg_nums": 0, "params": [], "return_type": "ChangedMaxLength", "signature": "public ChangedMaxLength getMaxLength()", "original_string": "  public ChangedMaxLength getMaxLength() {\n    return this.maxLength;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java", "class_name": "ChangedSchema", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedMaxLength", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[boolean]isDiscriminatorPropertyChanged()", "name": "isDiscriminatorPropertyChanged", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "public boolean isDiscriminatorPropertyChanged()", "original_string": "  public boolean isDiscriminatorPropertyChanged() {\n    return this.discriminatorPropertyChanged;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java", "class_name": "ChangedSchema", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[ChangedSchema]getItems()", "name": "getItems", "arg_nums": 0, "params": [], "return_type": "ChangedSchema", "signature": "public ChangedSchema getItems()", "original_string": "  public ChangedSchema getItems() {\n    return this.items;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java", "class_name": "ChangedSchema", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedSchema", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[ChangedOneOfSchema]getOneOfSchema()", "name": "getOneOfSchema", "arg_nums": 0, "params": [], "return_type": "ChangedOneOfSchema", "signature": "public ChangedOneOfSchema getOneOfSchema()", "original_string": "  public ChangedOneOfSchema getOneOfSchema() {\n    return this.oneOfSchema;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java", "class_name": "ChangedSchema", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedOneOfSchema", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[ChangedSchema]getAddProp()", "name": "getAddProp", "arg_nums": 0, "params": [], "return_type": "ChangedSchema", "signature": "public ChangedSchema getAddProp()", "original_string": "  public ChangedSchema getAddProp() {\n    return this.addProp;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java", "class_name": "ChangedSchema", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedSchema", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[ChangedExtensions]getExtensions()", "name": "getExtensions", "arg_nums": 0, "params": [], "return_type": "ChangedExtensions", "signature": "public ChangedExtensions getExtensions()", "original_string": "  public ChangedExtensions getExtensions() {\n    return this.extensions;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java", "class_name": "ChangedSchema", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedExtensions", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[ChangedSchema]setContext(DiffContext)", "name": "setContext", "arg_nums": 1, "params": [{"name": "context", "type": "DiffContext"}], "return_type": "ChangedSchema", "signature": "public ChangedSchema setContext(final DiffContext context)", "original_string": "  public ChangedSchema setContext(final DiffContext context) {\n    this.context = context;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java", "class_name": "ChangedSchema", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedSchema", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[ChangedSchema]setOldSchema(Schema<?>)", "name": "setOldSchema", "arg_nums": 1, "params": [{"name": "oldSchema", "type": "Schema<?>"}], "return_type": "ChangedSchema", "signature": "public ChangedSchema setOldSchema(final Schema<?> oldSchema)", "original_string": "  public ChangedSchema setOldSchema(final Schema<?> oldSchema) {\n    this.oldSchema = oldSchema;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java", "class_name": "ChangedSchema", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedSchema", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[ChangedSchema]setNewSchema(Schema<?>)", "name": "setNewSchema", "arg_nums": 1, "params": [{"name": "newSchema", "type": "Schema<?>"}], "return_type": "ChangedSchema", "signature": "public ChangedSchema setNewSchema(final Schema<?> newSchema)", "original_string": "  public ChangedSchema setNewSchema(final Schema<?> newSchema) {\n    this.newSchema = newSchema;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java", "class_name": "ChangedSchema", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedSchema", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[ChangedSchema]setType(String)", "name": "setType", "arg_nums": 1, "params": [{"name": "type", "type": "String"}], "return_type": "ChangedSchema", "signature": "public ChangedSchema setType(final String type)", "original_string": "  public ChangedSchema setType(final String type) {\n    this.type = type;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java", "class_name": "ChangedSchema", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedSchema", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[ChangedSchema]setChangedProperties(Map<String, ChangedSchema>)", "name": "setChangedProperties", "arg_nums": 1, "params": [{"name": "changedProperties", "type": "Map<String, ChangedSchema>"}], "return_type": "ChangedSchema", "signature": "public ChangedSchema setChangedProperties(final Map<String, ChangedSchema> changedProperties)", "original_string": "  public ChangedSchema setChangedProperties(final Map<String, ChangedSchema> changedProperties) {\n    clearChangedCache();\n    this.changedProperties = changedProperties;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java", "class_name": "ChangedSchema", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedSchema", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[ChangedSchema]setIncreasedProperties(Map<String, Schema<?>>)", "name": "setIncreasedProperties", "arg_nums": 1, "params": [{"name": "increasedProperties", "type": "Map<String, Schema<?>>"}], "return_type": "ChangedSchema", "signature": "public ChangedSchema setIncreasedProperties(final Map<String, Schema<?>> increasedProperties)", "original_string": "  public ChangedSchema setIncreasedProperties(final Map<String, Schema<?>> increasedProperties) {\n    clearChangedCache();\n    this.increasedProperties = increasedProperties;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java", "class_name": "ChangedSchema", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedSchema", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[ChangedSchema]setMissingProperties(Map<String, Schema<?>>)", "name": "setMissingProperties", "arg_nums": 1, "params": [{"name": "missingProperties", "type": "Map<String, Schema<?>>"}], "return_type": "ChangedSchema", "signature": "public ChangedSchema setMissingProperties(final Map<String, Schema<?>> missingProperties)", "original_string": "  public ChangedSchema setMissingProperties(final Map<String, Schema<?>> missingProperties) {\n    clearChangedCache();\n    this.missingProperties = missingProperties;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java", "class_name": "ChangedSchema", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedSchema", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[ChangedSchema]setChangeDeprecated(boolean)", "name": "setChangeDeprecated", "arg_nums": 1, "params": [{"name": "changeDeprecated", "type": "boolean"}], "return_type": "ChangedSchema", "signature": "public ChangedSchema setChangeDeprecated(final boolean changeDeprecated)", "original_string": "  public ChangedSchema setChangeDeprecated(final boolean changeDeprecated) {\n    clearChangedCache();\n    this.changeDeprecated = changeDeprecated;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java", "class_name": "ChangedSchema", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedSchema", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[ChangedSchema]setDescription(ChangedMetadata)", "name": "setDescription", "arg_nums": 1, "params": [{"name": "description", "type": "ChangedMetadata"}], "return_type": "ChangedSchema", "signature": "public ChangedSchema setDescription(final ChangedMetadata description)", "original_string": "  public ChangedSchema setDescription(final ChangedMetadata description) {\n    clearChangedCache();\n    this.description = description;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java", "class_name": "ChangedSchema", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedSchema", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[ChangedSchema]setChangeTitle(boolean)", "name": "setChangeTitle", "arg_nums": 1, "params": [{"name": "changeTitle", "type": "boolean"}], "return_type": "ChangedSchema", "signature": "public ChangedSchema setChangeTitle(final boolean changeTitle)", "original_string": "  public ChangedSchema setChangeTitle(final boolean changeTitle) {\n    clearChangedCache();\n    this.changeTitle = changeTitle;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java", "class_name": "ChangedSchema", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedSchema", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[ChangedSchema]setRequired(ChangedRequired)", "name": "setRequired", "arg_nums": 1, "params": [{"name": "required", "type": "ChangedRequired"}], "return_type": "ChangedSchema", "signature": "public ChangedSchema setRequired(final ChangedRequired required)", "original_string": "  public ChangedSchema setRequired(final ChangedRequired required) {\n    clearChangedCache();\n    this.required = required;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java", "class_name": "ChangedSchema", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedSchema", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[ChangedSchema]setChangeDefault(boolean)", "name": "setChangeDefault", "arg_nums": 1, "params": [{"name": "changeDefault", "type": "boolean"}], "return_type": "ChangedSchema", "signature": "public ChangedSchema setChangeDefault(final boolean changeDefault)", "original_string": "  public ChangedSchema setChangeDefault(final boolean changeDefault) {\n    clearChangedCache();\n    this.changeDefault = changeDefault;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java", "class_name": "ChangedSchema", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedSchema", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[ChangedSchema]setEnumeration(ChangedEnum<?>)", "name": "setEnumeration", "arg_nums": 1, "params": [{"name": "enumeration", "type": "ChangedEnum<?>"}], "return_type": "ChangedSchema", "signature": "public ChangedSchema setEnumeration(final ChangedEnum<?> enumeration)", "original_string": "  public ChangedSchema setEnumeration(final ChangedEnum<?> enumeration) {\n    clearChangedCache();\n    this.enumeration = enumeration;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java", "class_name": "ChangedSchema", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedSchema", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[ChangedSchema]setChangeFormat(boolean)", "name": "setChangeFormat", "arg_nums": 1, "params": [{"name": "changeFormat", "type": "boolean"}], "return_type": "ChangedSchema", "signature": "public ChangedSchema setChangeFormat(final boolean changeFormat)", "original_string": "  public ChangedSchema setChangeFormat(final boolean changeFormat) {\n    clearChangedCache();\n    this.changeFormat = changeFormat;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java", "class_name": "ChangedSchema", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedSchema", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[ChangedSchema]setReadOnly(ChangedReadOnly)", "name": "setReadOnly", "arg_nums": 1, "params": [{"name": "readOnly", "type": "ChangedReadOnly"}], "return_type": "ChangedSchema", "signature": "public ChangedSchema setReadOnly(final ChangedReadOnly readOnly)", "original_string": "  public ChangedSchema setReadOnly(final ChangedReadOnly readOnly) {\n    clearChangedCache();\n    this.readOnly = readOnly;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java", "class_name": "ChangedSchema", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedSchema", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[ChangedSchema]setWriteOnly(ChangedWriteOnly)", "name": "setWriteOnly", "arg_nums": 1, "params": [{"name": "writeOnly", "type": "ChangedWriteOnly"}], "return_type": "ChangedSchema", "signature": "public ChangedSchema setWriteOnly(final ChangedWriteOnly writeOnly)", "original_string": "  public ChangedSchema setWriteOnly(final ChangedWriteOnly writeOnly) {\n    clearChangedCache();\n    this.writeOnly = writeOnly;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java", "class_name": "ChangedSchema", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedSchema", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[ChangedSchema]setChangedType(boolean)", "name": "setChangedType", "arg_nums": 1, "params": [{"name": "changedType", "type": "boolean"}], "return_type": "ChangedSchema", "signature": "public ChangedSchema setChangedType(final boolean changedType)", "original_string": "  public ChangedSchema setChangedType(final boolean changedType) {\n    clearChangedCache();\n    this.changedType = changedType;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java", "class_name": "ChangedSchema", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedSchema", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[ChangedSchema]setMaxLength(ChangedMaxLength)", "name": "setMaxLength", "arg_nums": 1, "params": [{"name": "maxLength", "type": "ChangedMaxLength"}], "return_type": "ChangedSchema", "signature": "public ChangedSchema setMaxLength(final ChangedMaxLength maxLength)", "original_string": "  public ChangedSchema setMaxLength(final ChangedMaxLength maxLength) {\n    clearChangedCache();\n    this.maxLength = maxLength;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java", "class_name": "ChangedSchema", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedSchema", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[ChangedSchema]setNumericRange(ChangedNumericRange)", "name": "setNumericRange", "arg_nums": 1, "params": [{"name": "numericRange", "type": "ChangedNumericRange"}], "return_type": "ChangedSchema", "signature": "public ChangedSchema setNumericRange(final ChangedNumericRange numericRange)", "original_string": "  public ChangedSchema setNumericRange(final ChangedNumericRange numericRange) {\n    clearChangedCache();\n    this.numericRange = numericRange;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java", "class_name": "ChangedSchema", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedSchema", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[ChangedSchema]setDiscriminatorPropertyChanged(boolean)", "name": "setDiscriminatorPropertyChanged", "arg_nums": 1, "params": [{"name": "discriminatorPropertyChanged", "type": "boolean"}], "return_type": "ChangedSchema", "signature": "public ChangedSchema setDiscriminatorPropertyChanged(final boolean discriminatorPropertyChanged)", "original_string": "  public ChangedSchema setDiscriminatorPropertyChanged(final boolean discriminatorPropertyChanged) {\n    clearChangedCache();\n    this.discriminatorPropertyChanged = discriminatorPropertyChanged;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java", "class_name": "ChangedSchema", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedSchema", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[ChangedSchema]setItems(ChangedSchema)", "name": "setItems", "arg_nums": 1, "params": [{"name": "items", "type": "ChangedSchema"}], "return_type": "ChangedSchema", "signature": "public ChangedSchema setItems(final ChangedSchema items)", "original_string": "  public ChangedSchema setItems(final ChangedSchema items) {\n    clearChangedCache();\n    this.items = items;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java", "class_name": "ChangedSchema", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedSchema", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[ChangedSchema]setOneOfSchema(ChangedOneOfSchema)", "name": "setOneOfSchema", "arg_nums": 1, "params": [{"name": "oneOfSchema", "type": "ChangedOneOfSchema"}], "return_type": "ChangedSchema", "signature": "public ChangedSchema setOneOfSchema(final ChangedOneOfSchema oneOfSchema)", "original_string": "  public ChangedSchema setOneOfSchema(final ChangedOneOfSchema oneOfSchema) {\n    clearChangedCache();\n    this.oneOfSchema = oneOfSchema;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java", "class_name": "ChangedSchema", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedSchema", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[ChangedSchema]setAddProp(ChangedSchema)", "name": "setAddProp", "arg_nums": 1, "params": [{"name": "addProp", "type": "ChangedSchema"}], "return_type": "ChangedSchema", "signature": "public ChangedSchema setAddProp(final ChangedSchema addProp)", "original_string": "  public ChangedSchema setAddProp(final ChangedSchema addProp) {\n    clearChangedCache();\n    this.addProp = addProp;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java", "class_name": "ChangedSchema", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedSchema", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[ChangedSchema]setExtensions(ChangedExtensions)", "name": "setExtensions", "arg_nums": 1, "params": [{"name": "extensions", "type": "ChangedExtensions"}], "return_type": "ChangedSchema", "signature": "public ChangedSchema setExtensions(final ChangedExtensions extensions)", "original_string": "  public ChangedSchema setExtensions(final ChangedExtensions extensions) {\n    clearChangedCache();\n    this.extensions = extensions;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java", "class_name": "ChangedSchema", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedSchema", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[boolean]equals(Object)", "name": "equals", "arg_nums": 1, "params": [{"name": "o", "type": "Object"}], "return_type": "boolean", "signature": "@Override\n  public boolean equals(Object o)", "original_string": "  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    ChangedSchema that = (ChangedSchema) o;\n    return changeDeprecated == that.changeDeprecated\n        && changeTitle == that.changeTitle\n        && changeDefault == that.changeDefault\n        && changeFormat == that.changeFormat\n        && changedType == that.changedType\n        && discriminatorPropertyChanged == that.discriminatorPropertyChanged\n        && Objects.equals(context, that.context)\n        && Objects.equals(oldSchema, that.oldSchema)\n        && Objects.equals(newSchema, that.newSchema)\n        && Objects.equals(type, that.type)\n        && Objects.equals(changedProperties, that.changedProperties)\n        && Objects.equals(increasedProperties, that.increasedProperties)\n        && Objects.equals(missingProperties, that.missingProperties)\n        && Objects.equals(description, that.description)\n        && Objects.equals(required, that.required)\n        && Objects.equals(enumeration, that.enumeration)\n        && Objects.equals(readOnly, that.readOnly)\n        && Objects.equals(writeOnly, that.writeOnly)\n        && Objects.equals(maxLength, that.maxLength)\n        && Objects.equals(numericRange, that.numericRange)\n        && Objects.equals(items, that.items)\n        && Objects.equals(oneOfSchema, that.oneOfSchema)\n        && Objects.equals(addProp, that.addProp)\n        && Objects.equals(extensions, that.extensions);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java", "class_name": "ChangedSchema", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[int]hashCode()", "name": "hashCode", "arg_nums": 0, "params": [], "return_type": "int", "signature": "@Override\n  public int hashCode()", "original_string": "  @Override\n  public int hashCode() {\n    return Objects.hash(\n        context,\n        oldSchema,\n        newSchema,\n        type,\n        changedProperties,\n        increasedProperties,\n        missingProperties,\n        changeDeprecated,\n        description,\n        changeTitle,\n        required,\n        changeDefault,\n        enumeration,\n        changeFormat,\n        readOnly,\n        writeOnly,\n        changedType,\n        maxLength,\n        numericRange,\n        discriminatorPropertyChanged,\n        items,\n        oneOfSchema,\n        addProp,\n        extensions);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java", "class_name": "ChangedSchema", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema.[java.lang.String]toString()", "name": "toString", "arg_nums": 0, "params": [], "return_type": "java.lang.String", "signature": "@java.lang.Override\n  public java.lang.String toString()", "original_string": "  @java.lang.Override\n  public java.lang.String toString() {\n    return \"ChangedSchema(context=\"\n        + this.getContext()\n        + \", oldSchema=\"\n        + this.getOldSchema()\n        + \", newSchema=\"\n        + this.getNewSchema()\n        + \", type=\"\n        + this.getType()\n        + \", changedProperties=\"\n        + this.getChangedProperties()\n        + \", increasedProperties=\"\n        + this.getIncreasedProperties()\n        + \", missingProperties=\"\n        + this.getMissingProperties()\n        + \", changeDeprecated=\"\n        + this.isChangeDeprecated()\n        + \", description=\"\n        + this.getDescription()\n        + \", changeTitle=\"\n        + this.isChangeTitle()\n        + \", required=\"\n        + this.getRequired()\n        + \", changeDefault=\"\n        + this.isChangeDefault()\n        + \", enumeration=\"\n        + this.getEnumeration()\n        + \", changeFormat=\"\n        + this.isChangeFormat()\n        + \", readOnly=\"\n        + this.getReadOnly()\n        + \", writeOnly=\"\n        + this.getWriteOnly()\n        + \", changedType=\"\n        + this.isChangedType()\n        + \", maxLength=\"\n        + this.getMaxLength()\n        + \", discriminatorPropertyChanged=\"\n        + this.isDiscriminatorPropertyChanged()\n        + \", items=\"\n        + this.getItems()\n        + \", oneOfSchema=\"\n        + this.getOneOfSchema()\n        + \", addProp=\"\n        + this.getAddProp()\n        + \", extensions=\"\n        + this.getExtensions()\n        + \")\";\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java", "class_name": "ChangedSchema", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedSchema.java.ChangedSchema", "attributes": {"modifiers": "@java.lang.Override\n  public", "marker_annotations": ["@java.lang.Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "java.lang.String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOneOfSchema.java.ChangedOneOfSchema.[]ChangedOneOfSchema(Map<String, String>,Map<String, String>,DiffContext)", "name": "ChangedOneOfSchema", "arg_nums": 3, "params": [{"name": "oldMapping", "type": "Map<String, String>"}, {"name": "newMapping", "type": "Map<String, String>"}, {"name": "context", "type": "DiffContext"}], "return_type": "", "signature": "public ChangedOneOfSchema(\n      Map<String, String> oldMapping, Map<String, String> newMapping, DiffContext context)", "original_string": "  public ChangedOneOfSchema(\n      Map<String, String> oldMapping, Map<String, String> newMapping, DiffContext context) {\n    this.oldMapping = oldMapping;\n    this.newMapping = newMapping;\n    this.context = context;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOneOfSchema.java", "class_name": "ChangedOneOfSchema", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOneOfSchema.java.ChangedOneOfSchema", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOneOfSchema.java.ChangedOneOfSchema.[List<Changed>]getChangedElements()", "name": "getChangedElements", "arg_nums": 0, "params": [], "return_type": "List<Changed>", "signature": "@Override\n  public List<Changed> getChangedElements()", "original_string": "  @Override\n  public List<Changed> getChangedElements() {\n    return new ArrayList<>(changed.values());\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOneOfSchema.java", "class_name": "ChangedOneOfSchema", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOneOfSchema.java.ChangedOneOfSchema", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<Changed>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOneOfSchema.java.ChangedOneOfSchema.[DiffResult]isCoreChanged()", "name": "isCoreChanged", "arg_nums": 0, "params": [], "return_type": "DiffResult", "signature": "@Override\n  public DiffResult isCoreChanged()", "original_string": "  @Override\n  public DiffResult isCoreChanged() {\n    if (increased.isEmpty() && missing.isEmpty()) {\n      return DiffResult.NO_CHANGES;\n    }\n    if (context.isRequest() && !missing.isEmpty()) {\n      if (REQUEST_ONEOF_DECREASED.enabled(context)) {\n        return DiffResult.INCOMPATIBLE;\n      }\n    }\n    if (context.isResponse() && !increased.isEmpty()) {\n      if (RESPONSE_ONEOF_INCREASED.enabled(context)) {\n        return DiffResult.INCOMPATIBLE;\n      }\n    }\n    return DiffResult.COMPATIBLE;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOneOfSchema.java", "class_name": "ChangedOneOfSchema", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOneOfSchema.java.ChangedOneOfSchema", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "DiffResult", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOneOfSchema.java.ChangedOneOfSchema.[Map<String, String>]getOldMapping()", "name": "getOldMapping", "arg_nums": 0, "params": [], "return_type": "Map<String, String>", "signature": "public Map<String, String> getOldMapping()", "original_string": "  public Map<String, String> getOldMapping() {\n    return this.oldMapping;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOneOfSchema.java", "class_name": "ChangedOneOfSchema", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOneOfSchema.java.ChangedOneOfSchema", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Map<String, String>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOneOfSchema.java.ChangedOneOfSchema.[Map<String, String>]getNewMapping()", "name": "getNewMapping", "arg_nums": 0, "params": [], "return_type": "Map<String, String>", "signature": "public Map<String, String> getNewMapping()", "original_string": "  public Map<String, String> getNewMapping() {\n    return this.newMapping;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOneOfSchema.java", "class_name": "ChangedOneOfSchema", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOneOfSchema.java.ChangedOneOfSchema", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Map<String, String>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOneOfSchema.java.ChangedOneOfSchema.[DiffContext]getContext()", "name": "getContext", "arg_nums": 0, "params": [], "return_type": "DiffContext", "signature": "public DiffContext getContext()", "original_string": "  public DiffContext getContext() {\n    return this.context;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOneOfSchema.java", "class_name": "ChangedOneOfSchema", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOneOfSchema.java.ChangedOneOfSchema", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "DiffContext", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOneOfSchema.java.ChangedOneOfSchema.[Map<String, Schema>]getIncreased()", "name": "getIncreased", "arg_nums": 0, "params": [], "return_type": "Map<String, Schema>", "signature": "public Map<String, Schema> getIncreased()", "original_string": "  public Map<String, Schema> getIncreased() {\n    return this.increased;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOneOfSchema.java", "class_name": "ChangedOneOfSchema", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOneOfSchema.java.ChangedOneOfSchema", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Map<String, Schema>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOneOfSchema.java.ChangedOneOfSchema.[Map<String, Schema>]getMissing()", "name": "getMissing", "arg_nums": 0, "params": [], "return_type": "Map<String, Schema>", "signature": "public Map<String, Schema> getMissing()", "original_string": "  public Map<String, Schema> getMissing() {\n    return this.missing;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOneOfSchema.java", "class_name": "ChangedOneOfSchema", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOneOfSchema.java.ChangedOneOfSchema", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Map<String, Schema>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOneOfSchema.java.ChangedOneOfSchema.[Map<String, ChangedSchema>]getChanged()", "name": "getChanged", "arg_nums": 0, "params": [], "return_type": "Map<String, ChangedSchema>", "signature": "public Map<String, ChangedSchema> getChanged()", "original_string": "  public Map<String, ChangedSchema> getChanged() {\n    return this.changed;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOneOfSchema.java", "class_name": "ChangedOneOfSchema", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOneOfSchema.java.ChangedOneOfSchema", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Map<String, ChangedSchema>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOneOfSchema.java.ChangedOneOfSchema.[ChangedOneOfSchema]setIncreased(Map<String, Schema>)", "name": "setIncreased", "arg_nums": 1, "params": [{"name": "increased", "type": "Map<String, Schema>"}], "return_type": "ChangedOneOfSchema", "signature": "public ChangedOneOfSchema setIncreased(final Map<String, Schema> increased)", "original_string": "  public ChangedOneOfSchema setIncreased(final Map<String, Schema> increased) {\n    this.increased = increased;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOneOfSchema.java", "class_name": "ChangedOneOfSchema", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOneOfSchema.java.ChangedOneOfSchema", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedOneOfSchema", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOneOfSchema.java.ChangedOneOfSchema.[ChangedOneOfSchema]setMissing(Map<String, Schema>)", "name": "setMissing", "arg_nums": 1, "params": [{"name": "missing", "type": "Map<String, Schema>"}], "return_type": "ChangedOneOfSchema", "signature": "public ChangedOneOfSchema setMissing(final Map<String, Schema> missing)", "original_string": "  public ChangedOneOfSchema setMissing(final Map<String, Schema> missing) {\n    this.missing = missing;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOneOfSchema.java", "class_name": "ChangedOneOfSchema", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOneOfSchema.java.ChangedOneOfSchema", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedOneOfSchema", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOneOfSchema.java.ChangedOneOfSchema.[ChangedOneOfSchema]setChanged(Map<String, ChangedSchema>)", "name": "setChanged", "arg_nums": 1, "params": [{"name": "changed", "type": "Map<String, ChangedSchema>"}], "return_type": "ChangedOneOfSchema", "signature": "public ChangedOneOfSchema setChanged(final Map<String, ChangedSchema> changed)", "original_string": "  public ChangedOneOfSchema setChanged(final Map<String, ChangedSchema> changed) {\n    this.changed = changed;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOneOfSchema.java", "class_name": "ChangedOneOfSchema", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOneOfSchema.java.ChangedOneOfSchema", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedOneOfSchema", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOneOfSchema.java.ChangedOneOfSchema.[boolean]equals(Object)", "name": "equals", "arg_nums": 1, "params": [{"name": "o", "type": "Object"}], "return_type": "boolean", "signature": "@Override\n  public boolean equals(Object o)", "original_string": "  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    ChangedOneOfSchema that = (ChangedOneOfSchema) o;\n    return Objects.equals(oldMapping, that.oldMapping)\n        && Objects.equals(newMapping, that.newMapping)\n        && Objects.equals(context, that.context)\n        && Objects.equals(increased, that.increased)\n        && Objects.equals(missing, that.missing)\n        && Objects.equals(changed, that.changed);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOneOfSchema.java", "class_name": "ChangedOneOfSchema", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOneOfSchema.java.ChangedOneOfSchema", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOneOfSchema.java.ChangedOneOfSchema.[int]hashCode()", "name": "hashCode", "arg_nums": 0, "params": [], "return_type": "int", "signature": "@Override\n  public int hashCode()", "original_string": "  @Override\n  public int hashCode() {\n    return Objects.hash(oldMapping, newMapping, context, increased, missing, changed);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOneOfSchema.java", "class_name": "ChangedOneOfSchema", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOneOfSchema.java.ChangedOneOfSchema", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOneOfSchema.java.ChangedOneOfSchema.[java.lang.String]toString()", "name": "toString", "arg_nums": 0, "params": [], "return_type": "java.lang.String", "signature": "@java.lang.Override\n  public java.lang.String toString()", "original_string": "  @java.lang.Override\n  public java.lang.String toString() {\n    return \"ChangedOneOfSchema(oldMapping=\"\n        + this.getOldMapping()\n        + \", newMapping=\"\n        + this.getNewMapping()\n        + \", context=\"\n        + this.getContext()\n        + \", increased=\"\n        + this.getIncreased()\n        + \", missing=\"\n        + this.getMissing()\n        + \", changed=\"\n        + this.getChanged()\n        + \")\";\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOneOfSchema.java", "class_name": "ChangedOneOfSchema", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedOneOfSchema.java.ChangedOneOfSchema", "attributes": {"modifiers": "@java.lang.Override\n  public", "marker_annotations": ["@java.lang.Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "java.lang.String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedContent.java.ChangedContent.[]ChangedContent(Content,Content,DiffContext)", "name": "ChangedContent", "arg_nums": 3, "params": [{"name": "oldContent", "type": "Content"}, {"name": "newContent", "type": "Content"}, {"name": "context", "type": "DiffContext"}], "return_type": "", "signature": "public ChangedContent(Content oldContent, Content newContent, DiffContext context)", "original_string": "  public ChangedContent(Content oldContent, Content newContent, DiffContext context) {\n    this.oldContent = oldContent;\n    this.newContent = newContent;\n    this.context = context;\n    this.increased = new LinkedHashMap<>();\n    this.missing = new LinkedHashMap<>();\n    this.changed = new LinkedHashMap<>();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedContent.java", "class_name": "ChangedContent", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedContent.java.ChangedContent", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedContent.java.ChangedContent.[List<Changed>]getChangedElements()", "name": "getChangedElements", "arg_nums": 0, "params": [], "return_type": "List<Changed>", "signature": "@Override\n  public List<Changed> getChangedElements()", "original_string": "  @Override\n  public List<Changed> getChangedElements() {\n    return new ArrayList<>(changed.values());\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedContent.java", "class_name": "ChangedContent", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedContent.java.ChangedContent", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<Changed>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedContent.java.ChangedContent.[DiffResult]isCoreChanged()", "name": "isCoreChanged", "arg_nums": 0, "params": [], "return_type": "DiffResult", "signature": "@Override\n  public DiffResult isCoreChanged()", "original_string": "  @Override\n  public DiffResult isCoreChanged() {\n    if (increased.isEmpty() && missing.isEmpty()) {\n      return DiffResult.NO_CHANGES;\n    }\n    if (!missing.isEmpty()) {\n      if (context.isRequest() && REQUEST_CONTENT_DECREASED.enabled(context)) {\n        return DiffResult.INCOMPATIBLE;\n      }\n      if (context.isResponse() && RESPONSE_CONTENT_DECREASED.enabled(context)) {\n        return DiffResult.INCOMPATIBLE;\n      }\n    }\n    return DiffResult.COMPATIBLE;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedContent.java", "class_name": "ChangedContent", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedContent.java.ChangedContent", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "DiffResult", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedContent.java.ChangedContent.[Content]getOldContent()", "name": "getOldContent", "arg_nums": 0, "params": [], "return_type": "Content", "signature": "public Content getOldContent()", "original_string": "  public Content getOldContent() {\n    return this.oldContent;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedContent.java", "class_name": "ChangedContent", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedContent.java.ChangedContent", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Content", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedContent.java.ChangedContent.[Content]getNewContent()", "name": "getNewContent", "arg_nums": 0, "params": [], "return_type": "Content", "signature": "public Content getNewContent()", "original_string": "  public Content getNewContent() {\n    return this.newContent;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedContent.java", "class_name": "ChangedContent", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedContent.java.ChangedContent", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Content", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedContent.java.ChangedContent.[DiffContext]getContext()", "name": "getContext", "arg_nums": 0, "params": [], "return_type": "DiffContext", "signature": "public DiffContext getContext()", "original_string": "  public DiffContext getContext() {\n    return this.context;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedContent.java", "class_name": "ChangedContent", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedContent.java.ChangedContent", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "DiffContext", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedContent.java.ChangedContent.[Map<String, MediaType>]getIncreased()", "name": "getIncreased", "arg_nums": 0, "params": [], "return_type": "Map<String, MediaType>", "signature": "public Map<String, MediaType> getIncreased()", "original_string": "  public Map<String, MediaType> getIncreased() {\n    return this.increased;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedContent.java", "class_name": "ChangedContent", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedContent.java.ChangedContent", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Map<String, MediaType>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedContent.java.ChangedContent.[Map<String, MediaType>]getMissing()", "name": "getMissing", "arg_nums": 0, "params": [], "return_type": "Map<String, MediaType>", "signature": "public Map<String, MediaType> getMissing()", "original_string": "  public Map<String, MediaType> getMissing() {\n    return this.missing;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedContent.java", "class_name": "ChangedContent", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedContent.java.ChangedContent", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Map<String, MediaType>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedContent.java.ChangedContent.[Map<String, ChangedMediaType>]getChanged()", "name": "getChanged", "arg_nums": 0, "params": [], "return_type": "Map<String, ChangedMediaType>", "signature": "public Map<String, ChangedMediaType> getChanged()", "original_string": "  public Map<String, ChangedMediaType> getChanged() {\n    return this.changed;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedContent.java", "class_name": "ChangedContent", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedContent.java.ChangedContent", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Map<String, ChangedMediaType>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedContent.java.ChangedContent.[ChangedContent]setIncreased(Map<String, MediaType>)", "name": "setIncreased", "arg_nums": 1, "params": [{"name": "increased", "type": "Map<String, MediaType>"}], "return_type": "ChangedContent", "signature": "public ChangedContent setIncreased(final Map<String, MediaType> increased)", "original_string": "  public ChangedContent setIncreased(final Map<String, MediaType> increased) {\n    this.increased = increased;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedContent.java", "class_name": "ChangedContent", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedContent.java.ChangedContent", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedContent", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedContent.java.ChangedContent.[ChangedContent]setMissing(Map<String, MediaType>)", "name": "setMissing", "arg_nums": 1, "params": [{"name": "missing", "type": "Map<String, MediaType>"}], "return_type": "ChangedContent", "signature": "public ChangedContent setMissing(final Map<String, MediaType> missing)", "original_string": "  public ChangedContent setMissing(final Map<String, MediaType> missing) {\n    this.missing = missing;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedContent.java", "class_name": "ChangedContent", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedContent.java.ChangedContent", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedContent", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedContent.java.ChangedContent.[ChangedContent]setChanged(Map<String, ChangedMediaType>)", "name": "setChanged", "arg_nums": 1, "params": [{"name": "changed", "type": "Map<String, ChangedMediaType>"}], "return_type": "ChangedContent", "signature": "public ChangedContent setChanged(final Map<String, ChangedMediaType> changed)", "original_string": "  public ChangedContent setChanged(final Map<String, ChangedMediaType> changed) {\n    this.changed = changed;\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedContent.java", "class_name": "ChangedContent", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedContent.java.ChangedContent", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedContent", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedContent.java.ChangedContent.[boolean]equals(Object)", "name": "equals", "arg_nums": 1, "params": [{"name": "o", "type": "Object"}], "return_type": "boolean", "signature": "@Override\n  public boolean equals(Object o)", "original_string": "  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    ChangedContent that = (ChangedContent) o;\n    return Objects.equals(oldContent, that.oldContent)\n        && Objects.equals(newContent, that.newContent)\n        && Objects.equals(context, that.context)\n        && Objects.equals(increased, that.increased)\n        && Objects.equals(missing, that.missing)\n        && Objects.equals(changed, that.changed);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedContent.java", "class_name": "ChangedContent", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedContent.java.ChangedContent", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedContent.java.ChangedContent.[int]hashCode()", "name": "hashCode", "arg_nums": 0, "params": [], "return_type": "int", "signature": "@Override\n  public int hashCode()", "original_string": "  @Override\n  public int hashCode() {\n    return Objects.hash(oldContent, newContent, context, increased, missing, changed);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedContent.java", "class_name": "ChangedContent", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedContent.java.ChangedContent", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ChangedContent.java.ChangedContent.[java.lang.String]toString()", "name": "toString", "arg_nums": 0, "params": [], "return_type": "java.lang.String", "signature": "@java.lang.Override\n  public java.lang.String toString()", "original_string": "  @java.lang.Override\n  public java.lang.String toString() {\n    return \"ChangedContent(oldContent=\"\n        + this.getOldContent()\n        + \", newContent=\"\n        + this.getNewContent()\n        + \", context=\"\n        + this.getContext()\n        + \", increased=\"\n        + this.getIncreased()\n        + \", missing=\"\n        + this.getMissing()\n        + \", changed=\"\n        + this.getChanged()\n        + \")\";\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/ChangedContent.java", "class_name": "ChangedContent", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/ChangedContent.java.ChangedContent", "attributes": {"modifiers": "@java.lang.Override\n  public", "marker_annotations": ["@java.lang.Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "java.lang.String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/deferred/PendingChanged.java.PendingChanged.[void]ifPresent(Consumer<T>)", "name": "ifPresent", "arg_nums": 1, "params": [{"name": "consumer", "type": "Consumer<T>"}], "return_type": "void", "signature": "@Override\n  public void ifPresent(Consumer<T> consumer)", "original_string": "  @Override\n  public void ifPresent(Consumer<T> consumer) {\n    if (valueSet) {\n      if (valueIsPresent) {\n        consumer.accept(value);\n      }\n    } else {\n      ifPresentConsumers.add(consumer);\n    }\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/deferred/PendingChanged.java", "class_name": "PendingChanged", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/deferred/PendingChanged.java.PendingChanged", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/deferred/PendingChanged.java.PendingChanged.[void]setValue(Optional<T>)", "name": "setValue", "arg_nums": 1, "params": [{"name": "value", "type": "Optional<T>"}], "return_type": "void", "signature": "public void setValue(Optional<T> value)", "original_string": "  public void setValue(Optional<T> value) {\n    if (!valueSet) {\n      this.valueSet = true;\n      this.valueIsPresent = value.isPresent();\n      this.value = value.orElse(null);\n      this.valueOptional = value;\n\n      log.debug(\"set {}\", DeferredLogger.logValue(this.value));\n\n      if (this.valueIsPresent) {\n        ifPresentConsumers.forEach(c -> c.accept(this.value));\n      }\n\n      whenSetConsumers.forEach(c -> c.accept(this.valueOptional));\n\n    } else {\n      throw new IllegalStateException(\n          \"PendingChanged may not be set more than once. Value was already set.\");\n    }\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/deferred/PendingChanged.java", "class_name": "PendingChanged", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/deferred/PendingChanged.java.PendingChanged", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/deferred/PendingChanged.java.PendingChanged.[boolean]isPresent()", "name": "isPresent", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "public boolean isPresent()", "original_string": "  public boolean isPresent() {\n    return valueSet && valueIsPresent;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/deferred/PendingChanged.java", "class_name": "PendingChanged", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/deferred/PendingChanged.java.PendingChanged", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/deferred/PendingChanged.java.PendingChanged.[T]get()", "name": "get", "arg_nums": 0, "params": [], "return_type": "T", "signature": "public T get()", "original_string": "  public T get() {\n    return valueOptional.get();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/deferred/PendingChanged.java", "class_name": "PendingChanged", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/deferred/PendingChanged.java.PendingChanged", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "T", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/deferred/PendingChanged.java.PendingChanged.[boolean]isValueSet()", "name": "isValueSet", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "public boolean isValueSet()", "original_string": "  public boolean isValueSet() {\n    return valueSet;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/deferred/PendingChanged.java", "class_name": "PendingChanged", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/deferred/PendingChanged.java.PendingChanged", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/deferred/PendingChanged.java.PendingChanged.[void]whenSet(Consumer<Optional<T>>)", "name": "whenSet", "arg_nums": 1, "params": [{"name": "consumer", "type": "Consumer<Optional<T>>"}], "return_type": "void", "signature": "public void whenSet(Consumer<Optional<T>> consumer)", "original_string": "  public void whenSet(Consumer<Optional<T>> consumer) {\n    if (valueSet) {\n      consumer.accept(valueOptional);\n    } else {\n      whenSetConsumers.add(consumer);\n    }\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/deferred/PendingChanged.java", "class_name": "PendingChanged", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/deferred/PendingChanged.java.PendingChanged", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/deferred/PendingChanged.java.PendingChanged.[DeferredChanged<Q>]map(Function<Optional<T>, Q>)", "name": "map", "arg_nums": 1, "params": [{"name": "function", "type": "Function<Optional<T>, Q>"}], "return_type": "DeferredChanged<Q>", "signature": "public <Q> DeferredChanged<Q> map(Function<Optional<T>, Q> function)", "original_string": "  public <Q> DeferredChanged<Q> map(Function<Optional<T>, Q> function) {\n    return mapOptional(v -> Optional.ofNullable(function.apply(v)));\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/deferred/PendingChanged.java", "class_name": "PendingChanged", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/deferred/PendingChanged.java.PendingChanged", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "DeferredChanged<Q>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/deferred/PendingChanged.java.PendingChanged.[DeferredChanged<Q>]mapOptional(Function<Optional<T>, Optional<Q>>)", "name": "mapOptional", "arg_nums": 1, "params": [{"name": "function", "type": "Function<Optional<T>, Optional<Q>>"}], "return_type": "DeferredChanged<Q>", "signature": "public <Q> DeferredChanged<Q> mapOptional(Function<Optional<T>, Optional<Q>> function)", "original_string": "  public <Q> DeferredChanged<Q> mapOptional(Function<Optional<T>, Optional<Q>> function) {\n    if (valueSet) {\n      Optional<Q> result = function.apply(this.valueOptional);\n      log.debug(\n          \"map resolved {} {} -> {}\",\n          function,\n          DeferredLogger.logValue(this.value),\n          DeferredLogger.logValue(result));\n      return new RealizedChanged<>(result);\n    } else {\n      final PendingChanged<Q> mappedChanged = new PendingChanged<>();\n      log.debug(\"map deferred {} ? -> ?\", function);\n      deferredCounter.incrementAndGet();\n      whenSet(\n          value -> {\n            Optional<Q> result = function.apply(this.valueOptional);\n            log.debug(\n                \"map resolved {} {} -> {}\",\n                function,\n                DeferredLogger.logValue(this.value),\n                DeferredLogger.logValue(result));\n            resolvedCounter.incrementAndGet();\n            mappedChanged.setValue(result);\n          });\n      return mappedChanged;\n    }\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/deferred/PendingChanged.java", "class_name": "PendingChanged", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/deferred/PendingChanged.java.PendingChanged", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "DeferredChanged<Q>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/deferred/PendingChanged.java.PendingChanged.[DeferredChanged<Q>]flatMap(Function<Optional<T>, DeferredChanged<Q>>)", "name": "flatMap", "arg_nums": 1, "params": [{"name": "function", "type": "Function<Optional<T>, DeferredChanged<Q>>"}], "return_type": "DeferredChanged<Q>", "signature": "public <Q> DeferredChanged<Q> flatMap(Function<Optional<T>, DeferredChanged<Q>> function)", "original_string": "  public <Q> DeferredChanged<Q> flatMap(Function<Optional<T>, DeferredChanged<Q>> function) {\n    if (valueSet) {\n      DeferredChanged<Q> nextDeferred = function.apply(this.valueOptional);\n      log.debug(\"flat map deferred {} {} -> ?\", function, DeferredLogger.logValue(this.value));\n      deferredCounter.incrementAndGet();\n      nextDeferred.whenSet(\n          nextValue -> {\n            log.debug(\n                \"flat map resolved {} {} -> {}\",\n                function,\n                DeferredLogger.logValue(this.value),\n                DeferredLogger.logValue(nextValue));\n            resolvedCounter.incrementAndGet();\n          });\n      return nextDeferred;\n    } else {\n      final PendingChanged<Q> mappedChanged = new PendingChanged<>();\n      log.debug(\"flat map deferred {} ? -> ?\", function);\n      deferredCounter.incrementAndGet();\n      whenSet(\n          value -> {\n            DeferredChanged<Q> nextDeferred = function.apply(value);\n            nextDeferred.whenSet(\n                nextValue -> {\n                  log.debug(\n                      \"flat map deferred {} {} -> {}\",\n                      function,\n                      DeferredLogger.logValue(this.value),\n                      DeferredLogger.logValue(nextValue));\n                  resolvedCounter.incrementAndGet();\n                  mappedChanged.setValue(nextValue);\n                });\n            log.debug(\"flat map resolved {} {} -> ?\", function, DeferredLogger.logValue(value));\n          });\n      return mappedChanged;\n    }\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/deferred/PendingChanged.java", "class_name": "PendingChanged", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/deferred/PendingChanged.java.PendingChanged", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "DeferredChanged<Q>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/deferred/PendingChanged.java.PendingChanged.[String]toString()", "name": "toString", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Override\n  public String toString()", "original_string": "  @Override\n  public String toString() {\n    return \"PendingChanged{\"\n        + \"value=\"\n        + DeferredLogger.logValue(value)\n        + \", valueSet=\"\n        + valueSet\n        + \", ifPresentConsumers.size=\"\n        + ifPresentConsumers.size()\n        + \", whenSetConsumers.size=\"\n        + whenSetConsumers.size()\n        + '}';\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/deferred/PendingChanged.java", "class_name": "PendingChanged", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/deferred/PendingChanged.java.PendingChanged", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/deferred/PendingChanged.java.PendingChanged.[void]logResolved()", "name": "logResolved", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public static void logResolved()", "original_string": "  public static void logResolved() {\n    int deferred = deferredCounter.get();\n    int resolved = resolvedCounter.get();\n    log.debug(\n        \"Outstanding: {}  Deferred: {}  Resolved {}\", deferred - resolved, deferred, resolved);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/deferred/PendingChanged.java", "class_name": "PendingChanged", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/deferred/PendingChanged.java.PendingChanged", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/deferred/SchemaDiffOperation.java.SchemaDiffOperation.[]SchemaDiffOperation(OpenApiDiff,RecursiveSchemaSet,CacheKey,Schema,Schema)", "name": "SchemaDiffOperation", "arg_nums": 5, "params": [{"name": "openApiDiff", "type": "OpenApiDiff"}, {"name": "refSet", "type": "RecursiveSchemaSet"}, {"name": "key", "type": "CacheKey"}, {"name": "left", "type": "Schema"}, {"name": "right", "type": "Schema"}], "return_type": "", "signature": "SchemaDiffOperation(\n      OpenApiDiff openApiDiff, RecursiveSchemaSet refSet, CacheKey key, Schema left, Schema right)", "original_string": "  SchemaDiffOperation(\n      OpenApiDiff openApiDiff, RecursiveSchemaSet refSet, CacheKey key, Schema left, Schema right) {\n    this.openApiDiff = openApiDiff;\n    this.refSet = refSet;\n    this.key = key;\n    this.left = left;\n    this.right = right;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/deferred/SchemaDiffOperation.java", "class_name": "SchemaDiffOperation", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/deferred/SchemaDiffOperation.java.SchemaDiffOperation", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/deferred/RealizedChanged.java.RealizedChanged.[]RealizedChanged(T)", "name": "RealizedChanged", "arg_nums": 1, "params": [{"name": "value", "type": "T"}], "return_type": "", "signature": "public RealizedChanged(T value)", "original_string": "  public RealizedChanged(T value) {\n    this.value = Optional.ofNullable(value);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/deferred/RealizedChanged.java", "class_name": "RealizedChanged", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/deferred/RealizedChanged.java.RealizedChanged", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/deferred/RealizedChanged.java.RealizedChanged.[]RealizedChanged(Optional<T>)", "name": "RealizedChanged", "arg_nums": 1, "params": [{"name": "value", "type": "Optional<T>"}], "return_type": "", "signature": "public RealizedChanged(Optional<T> value)", "original_string": "  public RealizedChanged(Optional<T> value) {\n    this.value = value;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/deferred/RealizedChanged.java", "class_name": "RealizedChanged", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/deferred/RealizedChanged.java.RealizedChanged", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/deferred/RealizedChanged.java.RealizedChanged.[void]ifPresent(Consumer<T>)", "name": "ifPresent", "arg_nums": 1, "params": [{"name": "consumer", "type": "Consumer<T>"}], "return_type": "void", "signature": "@Override\n  public void ifPresent(Consumer<T> consumer)", "original_string": "  @Override\n  public void ifPresent(Consumer<T> consumer) {\n    value.ifPresent(consumer);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/deferred/RealizedChanged.java", "class_name": "RealizedChanged", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/deferred/RealizedChanged.java.RealizedChanged", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/deferred/RealizedChanged.java.RealizedChanged.[void]whenSet(Consumer<Optional<T>>)", "name": "whenSet", "arg_nums": 1, "params": [{"name": "consumer", "type": "Consumer<Optional<T>>"}], "return_type": "void", "signature": "@Override\n  public void whenSet(Consumer<Optional<T>> consumer)", "original_string": "  @Override\n  public void whenSet(Consumer<Optional<T>> consumer) {\n    consumer.accept(value);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/deferred/RealizedChanged.java", "class_name": "RealizedChanged", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/deferred/RealizedChanged.java.RealizedChanged", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/deferred/RealizedChanged.java.RealizedChanged.[RealizedChanged<T>]empty()", "name": "empty", "arg_nums": 0, "params": [], "return_type": "RealizedChanged<T>", "signature": "public static <T> RealizedChanged<T> empty()", "original_string": "  public static <T> RealizedChanged<T> empty() {\n    return new RealizedChanged<>(Optional.empty());\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/deferred/RealizedChanged.java", "class_name": "RealizedChanged", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/deferred/RealizedChanged.java.RealizedChanged", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "RealizedChanged<T>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/deferred/RealizedChanged.java.RealizedChanged.[boolean]isPresent()", "name": "isPresent", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "@Override\n  public boolean isPresent()", "original_string": "  @Override\n  public boolean isPresent() {\n    return value.isPresent();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/deferred/RealizedChanged.java", "class_name": "RealizedChanged", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/deferred/RealizedChanged.java.RealizedChanged", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/deferred/RealizedChanged.java.RealizedChanged.[boolean]isValueSet()", "name": "isValueSet", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "@Override\n  public boolean isValueSet()", "original_string": "  @Override\n  public boolean isValueSet() {\n    return true;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/deferred/RealizedChanged.java", "class_name": "RealizedChanged", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/deferred/RealizedChanged.java.RealizedChanged", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/deferred/RealizedChanged.java.RealizedChanged.[T]get()", "name": "get", "arg_nums": 0, "params": [], "return_type": "T", "signature": "@Override\n  public T get()", "original_string": "  @Override\n  public T get() {\n    return value.get();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/deferred/RealizedChanged.java", "class_name": "RealizedChanged", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/deferred/RealizedChanged.java.RealizedChanged", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "T", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/deferred/RealizedChanged.java.RealizedChanged.[DeferredChanged<Q>]map(Function<Optional<T>, Q>)", "name": "map", "arg_nums": 1, "params": [{"name": "function", "type": "Function<Optional<T>, Q>"}], "return_type": "DeferredChanged<Q>", "signature": "public <Q> DeferredChanged<Q> map(Function<Optional<T>, Q> function)", "original_string": "  public <Q> DeferredChanged<Q> map(Function<Optional<T>, Q> function) {\n    return new RealizedChanged<>(function.apply(this.value));\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/deferred/RealizedChanged.java", "class_name": "RealizedChanged", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/deferred/RealizedChanged.java.RealizedChanged", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "DeferredChanged<Q>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/deferred/RealizedChanged.java.RealizedChanged.[DeferredChanged<Q>]mapOptional(Function<Optional<T>, Optional<Q>>)", "name": "mapOptional", "arg_nums": 1, "params": [{"name": "consumer", "type": "Function<Optional<T>, Optional<Q>>"}], "return_type": "DeferredChanged<Q>", "signature": "@Override\n  public <Q> DeferredChanged<Q> mapOptional(Function<Optional<T>, Optional<Q>> consumer)", "original_string": "  @Override\n  public <Q> DeferredChanged<Q> mapOptional(Function<Optional<T>, Optional<Q>> consumer) {\n    return new RealizedChanged<>(consumer.apply(this.value));\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/deferred/RealizedChanged.java", "class_name": "RealizedChanged", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/deferred/RealizedChanged.java.RealizedChanged", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "DeferredChanged<Q>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/deferred/RealizedChanged.java.RealizedChanged.[DeferredChanged<Q>]flatMap(Function<Optional<T>, DeferredChanged<Q>>)", "name": "flatMap", "arg_nums": 1, "params": [{"name": "function", "type": "Function<Optional<T>, DeferredChanged<Q>>"}], "return_type": "DeferredChanged<Q>", "signature": "public <Q> DeferredChanged<Q> flatMap(Function<Optional<T>, DeferredChanged<Q>> function)", "original_string": "  public <Q> DeferredChanged<Q> flatMap(Function<Optional<T>, DeferredChanged<Q>> function) {\n    return function.apply(this.value);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/deferred/RealizedChanged.java", "class_name": "RealizedChanged", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/deferred/RealizedChanged.java.RealizedChanged", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "DeferredChanged<Q>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/deferred/RealizedChanged.java.RealizedChanged.[String]toString()", "name": "toString", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Override\n  public String toString()", "original_string": "  @Override\n  public String toString() {\n    return \"RealizedChanged{\" + \"value=\" + value + '}';\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/deferred/RealizedChanged.java", "class_name": "RealizedChanged", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/deferred/RealizedChanged.java.RealizedChanged", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredChanged.java.DeferredChanged.[void]ifPresent(Consumer<T>)", "name": "ifPresent", "arg_nums": 1, "params": [{"name": "consumer", "type": "Consumer<T>"}], "return_type": "void", "signature": "void ifPresent(Consumer<T> consumer)", "original_string": "  void ifPresent(Consumer<T> consumer);", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredChanged.java", "class_name": "DeferredChanged", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredChanged.java.DeferredChanged", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredChanged.java.DeferredChanged.[void]whenSet(Consumer<Optional<T>>)", "name": "whenSet", "arg_nums": 1, "params": [{"name": "consumer", "type": "Consumer<Optional<T>>"}], "return_type": "void", "signature": "void whenSet(Consumer<Optional<T>> consumer)", "original_string": "  void whenSet(Consumer<Optional<T>> consumer);", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredChanged.java", "class_name": "DeferredChanged", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredChanged.java.DeferredChanged", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredChanged.java.DeferredChanged.[DeferredChanged<Q>]map(Function<Optional<T>, Q>)", "name": "map", "arg_nums": 1, "params": [{"name": "consumer", "type": "Function<Optional<T>, Q>"}], "return_type": "DeferredChanged<Q>", "signature": "<Q> DeferredChanged<Q> map(Function<Optional<T>, Q> consumer)", "original_string": "  <Q> DeferredChanged<Q> map(Function<Optional<T>, Q> consumer);", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredChanged.java", "class_name": "DeferredChanged", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredChanged.java.DeferredChanged", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "DeferredChanged<Q>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredChanged.java.DeferredChanged.[DeferredChanged<Q>]mapOptional(Function<Optional<T>, Optional<Q>>)", "name": "mapOptional", "arg_nums": 1, "params": [{"name": "consumer", "type": "Function<Optional<T>, Optional<Q>>"}], "return_type": "DeferredChanged<Q>", "signature": "<Q> DeferredChanged<Q> mapOptional(Function<Optional<T>, Optional<Q>> consumer)", "original_string": "  <Q> DeferredChanged<Q> mapOptional(Function<Optional<T>, Optional<Q>> consumer);", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredChanged.java", "class_name": "DeferredChanged", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredChanged.java.DeferredChanged", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "DeferredChanged<Q>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredChanged.java.DeferredChanged.[DeferredChanged<Q>]flatMap(Function<Optional<T>, DeferredChanged<Q>>)", "name": "flatMap", "arg_nums": 1, "params": [{"name": "consumer", "type": "Function<Optional<T>, DeferredChanged<Q>>"}], "return_type": "DeferredChanged<Q>", "signature": "<Q> DeferredChanged<Q> flatMap(Function<Optional<T>, DeferredChanged<Q>> consumer)", "original_string": "  <Q> DeferredChanged<Q> flatMap(Function<Optional<T>, DeferredChanged<Q>> consumer);", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredChanged.java", "class_name": "DeferredChanged", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredChanged.java.DeferredChanged", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "DeferredChanged<Q>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredChanged.java.DeferredChanged.[DeferredChanged<T>]empty()", "name": "empty", "arg_nums": 0, "params": [], "return_type": "DeferredChanged<T>", "signature": "static <T> DeferredChanged<T> empty()", "original_string": "  static <T> DeferredChanged<T> empty() {\n    return RealizedChanged.empty();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredChanged.java", "class_name": "DeferredChanged", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredChanged.java.DeferredChanged", "attributes": {"modifiers": "static", "marker_annotations": [], "non_marker_annotations": ["static"], "comments": [], "return_type": "DeferredChanged<T>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredChanged.java.DeferredChanged.[DeferredChanged<T>]ofNullable(T)", "name": "ofNullable", "arg_nums": 1, "params": [{"name": "value", "type": "T"}], "return_type": "DeferredChanged<T>", "signature": "static <T> DeferredChanged<T> ofNullable(@Nullable T value)", "original_string": "  static <T> DeferredChanged<T> ofNullable(@Nullable T value) {\n    return new RealizedChanged<>(value);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredChanged.java", "class_name": "DeferredChanged", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredChanged.java.DeferredChanged", "attributes": {"modifiers": "static", "marker_annotations": [], "non_marker_annotations": ["static"], "comments": [], "return_type": "DeferredChanged<T>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredChanged.java.DeferredChanged.[DeferredChanged<ChangedResponse>]of(Optional<T>)", "name": "of", "arg_nums": 1, "params": [{"name": "changed", "type": "Optional<T>"}], "return_type": "DeferredChanged<ChangedResponse>", "signature": "static <T extends Changed> DeferredChanged<ChangedResponse> of(Optional<T> changed)", "original_string": "  static <T extends Changed> DeferredChanged<ChangedResponse> of(Optional<T> changed) {\n    return new RealizedChanged(changed);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredChanged.java", "class_name": "DeferredChanged", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredChanged.java.DeferredChanged", "attributes": {"modifiers": "static", "marker_annotations": [], "non_marker_annotations": ["static"], "comments": [], "return_type": "DeferredChanged<ChangedResponse>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredChanged.java.DeferredChanged.[boolean]isPresent()", "name": "isPresent", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "boolean isPresent()", "original_string": "  boolean isPresent();", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredChanged.java", "class_name": "DeferredChanged", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredChanged.java.DeferredChanged", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredChanged.java.DeferredChanged.[boolean]isValueSet()", "name": "isValueSet", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "boolean isValueSet()", "original_string": "  boolean isValueSet();", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredChanged.java", "class_name": "DeferredChanged", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredChanged.java.DeferredChanged", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredChanged.java.DeferredChanged.[T]get()", "name": "get", "arg_nums": 0, "params": [], "return_type": "T", "signature": "T get()", "original_string": "  T get();", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredChanged.java", "class_name": "DeferredChanged", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredChanged.java.DeferredChanged", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "T", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredLogger.java.DeferredLogger.[]DeferredLogger()", "name": "DeferredLogger", "arg_nums": 0, "params": [], "return_type": "", "signature": "private DeferredLogger()", "original_string": "  private DeferredLogger() {}", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredLogger.java", "class_name": "DeferredLogger", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredLogger.java.DeferredLogger", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredLogger.java.DeferredLogger.[Object]logValue(Object)", "name": "logValue", "arg_nums": 1, "params": [{"name": "value", "type": "Object"}], "return_type": "Object", "signature": "public static Object logValue(Object value)", "original_string": "  public static Object logValue(Object value) {\n    return new Object() {\n      public String toString() {\n        return valueToString(value);\n      }\n    };\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredLogger.java", "class_name": "DeferredLogger", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredLogger.java.DeferredLogger", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Object", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredLogger.java.DeferredLogger.[String]optionalToString(Optional<?>)", "name": "optionalToString", "arg_nums": 1, "params": [{"name": "value", "type": "Optional<?>"}], "return_type": "String", "signature": "public static String optionalToString(Optional<?> value)", "original_string": "  public static String optionalToString(Optional<?> value) {\n    return value.map(v -> \"Optional[\" + valueToString(v) + \"]\").orElse(\"Optional[empty]\");\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredLogger.java", "class_name": "DeferredLogger", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredLogger.java.DeferredLogger", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredLogger.java.DeferredLogger.[String]changedToString(Changed)", "name": "changedToString", "arg_nums": 1, "params": [{"name": "value", "type": "Changed"}], "return_type": "String", "signature": "public static String changedToString(Changed value)", "original_string": "  public static String changedToString(Changed value) {\n    if (value instanceof ComposedChanged) {\n      return \"Changed: \" + value.getClass() + \" (composed) \";\n    } else {\n      return \"Changed: \" + value.getClass() + \" \" + value.isChanged();\n    }\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredLogger.java", "class_name": "DeferredLogger", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredLogger.java.DeferredLogger", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredLogger.java.DeferredLogger.[String]streamToString(Stream<?>)", "name": "streamToString", "arg_nums": 1, "params": [{"name": "values", "type": "Stream<?>"}], "return_type": "String", "signature": "public static String streamToString(Stream<?> values)", "original_string": "  public static String streamToString(Stream<?> values) {\n    return \"[\" + values.map(DeferredLogger::valueToString).collect(Collectors.joining(\", \")) + \"]\";\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredLogger.java", "class_name": "DeferredLogger", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredLogger.java.DeferredLogger", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredLogger.java.DeferredLogger.[String]deferredChangeToString(DeferredChanged<?>)", "name": "deferredChangeToString", "arg_nums": 1, "params": [{"name": "deferredChanged", "type": "DeferredChanged<?>"}], "return_type": "String", "signature": "public static String deferredChangeToString(DeferredChanged<?> deferredChanged)", "original_string": "  public static String deferredChangeToString(DeferredChanged<?> deferredChanged) {\n    if (deferredChanged.isValueSet()) {\n      if (deferredChanged.isPresent()) {\n        Object value = deferredChanged.get();\n        return valueToString(value);\n      } else {\n        return deferredChanged.toString();\n      }\n    } else {\n      return deferredChanged.toString();\n    }\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredLogger.java", "class_name": "DeferredLogger", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredLogger.java.DeferredLogger", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredLogger.java.DeferredLogger.[String]valueToString(Object)", "name": "valueToString", "arg_nums": 1, "params": [{"name": "value", "type": "Object"}], "return_type": "String", "signature": "public static String valueToString(Object value)", "original_string": "  public static String valueToString(Object value) {\n    if (value == null) {\n      return \"null\";\n    } else if (value instanceof Changed) {\n      return changedToString((Changed) value);\n    } else if (value instanceof Optional) {\n      return optionalToString((Optional<?>) value);\n    } else if (value instanceof DeferredChanged) {\n      return deferredChangeToString((DeferredChanged<?>) value);\n    } else if (value.getClass().isArray()) {\n      return streamToString(Arrays.stream((Object[]) value));\n    } else if (value instanceof Collection) {\n      return streamToString(((Collection<?>) value).stream());\n    } else {\n      return value.toString();\n    }\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredLogger.java", "class_name": "DeferredLogger", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredLogger.java.DeferredLogger", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilder.java.DeferredBuilder.[Optional<V>]with(Optional<V>)", "name": "with", "arg_nums": 1, "params": [{"name": "value", "type": "Optional<V>"}], "return_type": "Optional<V>", "signature": "public <V extends T> Optional<V> with(Optional<V> value)", "original_string": "  public <V extends T> Optional<V> with(Optional<V> value) {\n    return value;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilder.java", "class_name": "DeferredBuilder", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilder.java.DeferredBuilder", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Optional<V>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilder.java.DeferredBuilder.[DeferredChanged<V>]with(DeferredChanged<V>)", "name": "with", "arg_nums": 1, "params": [{"name": "value", "type": "DeferredChanged<V>"}], "return_type": "DeferredChanged<V>", "signature": "public <V extends T> DeferredChanged<V> with(DeferredChanged<V> value)", "original_string": "  public <V extends T> DeferredChanged<V> with(DeferredChanged<V> value) {\n    deferredValues.add(value);\n    return value;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilder.java", "class_name": "DeferredBuilder", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilder.java.DeferredBuilder", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "DeferredChanged<V>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilder.java.DeferredBuilder.[DeferredBuilder<T>]add(DeferredChanged<V>)", "name": "add", "arg_nums": 1, "params": [{"name": "value", "type": "DeferredChanged<V>"}], "return_type": "DeferredBuilder<T>", "signature": "public <V extends T> DeferredBuilder<T> add(DeferredChanged<V> value)", "original_string": "  public <V extends T> DeferredBuilder<T> add(DeferredChanged<V> value) {\n    deferredValues.add(value);\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilder.java", "class_name": "DeferredBuilder", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilder.java.DeferredBuilder", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "DeferredBuilder<T>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilder.java.DeferredBuilder.[DeferredBuilder<T>]addAll(List<DeferredChanged<V>>)", "name": "addAll", "arg_nums": 1, "params": [{"name": "values", "type": "List<DeferredChanged<V>>"}], "return_type": "DeferredBuilder<T>", "signature": "public <V extends T> DeferredBuilder<T> addAll(List<DeferredChanged<V>> values)", "original_string": "  public <V extends T> DeferredBuilder<T> addAll(List<DeferredChanged<V>> values) {\n    deferredValues.addAll(values);\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilder.java", "class_name": "DeferredBuilder", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilder.java.DeferredBuilder", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "DeferredBuilder<T>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilder.java.DeferredBuilder.[DeferredBuilder<T>]addAll(Stream<DeferredChanged<V>>)", "name": "addAll", "arg_nums": 1, "params": [{"name": "values", "type": "Stream<DeferredChanged<V>>"}], "return_type": "DeferredBuilder<T>", "signature": "public <V extends T> DeferredBuilder<T> addAll(Stream<DeferredChanged<V>> values)", "original_string": "  public <V extends T> DeferredBuilder<T> addAll(Stream<DeferredChanged<V>> values) {\n    deferredValues.addAll(values.collect(Collectors.toList()));\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilder.java", "class_name": "DeferredBuilder", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilder.java.DeferredBuilder", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "DeferredBuilder<T>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilder.java.DeferredBuilder.[DeferredBuilder<T>]whenSet(Consumer<Optional<List<Optional<? super T>>>>)", "name": "whenSet", "arg_nums": 1, "params": [{"name": "consumer", "type": "Consumer<Optional<List<Optional<? super T>>>>"}], "return_type": "DeferredBuilder<T>", "signature": "public DeferredBuilder<T> whenSet(Consumer<Optional<List<Optional<? super T>>>> consumer)", "original_string": "  public DeferredBuilder<T> whenSet(Consumer<Optional<List<Optional<? super T>>>> consumer) {\n    whenSet.add(consumer);\n    return this;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilder.java", "class_name": "DeferredBuilder", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilder.java.DeferredBuilder", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "DeferredBuilder<T>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilder.java.DeferredBuilder.[void]accept(DeferredChanged<T>)", "name": "accept", "arg_nums": 1, "params": [{"name": "value", "type": "DeferredChanged<T>"}], "return_type": "void", "signature": "@Override\n  public void accept(DeferredChanged<T> value)", "original_string": "  @Override\n  public void accept(DeferredChanged<T> value) {\n    deferredValues.add(value);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilder.java", "class_name": "DeferredBuilder", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilder.java.DeferredBuilder", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilder.java.DeferredBuilder.[DeferredChanged<List<Optional<? super T>>>]build()", "name": "build", "arg_nums": 0, "params": [], "return_type": "DeferredChanged<List<Optional<? super T>>>", "signature": "public DeferredChanged<List<Optional<? super T>>> build()", "original_string": "  public DeferredChanged<List<Optional<? super T>>> build() {\n    if (deferredValues.isEmpty()) {\n      return DeferredChanged.empty();\n    }\n\n    log.debug(\"Building collected deferred {}\", DeferredLogger.logValue(deferredValues));\n\n    final PendingChanged<List<Optional<? super T>>> changed = new PendingChanged<>();\n    whenSet.forEach(changed::whenSet);\n\n    Optional[] values = new Optional[deferredValues.size()];\n\n    IntStream.range(0, deferredValues.size())\n        .forEach(\n            i -> {\n              DeferredChanged<? extends T> deferredItem = deferredValues.get(i);\n              deferredItem.whenSet(\n                  value -> {\n                    values[i] = value;\n                    log.debug(\n                        \"Collected deferred item set this={}, item={}, values = {}\",\n                        this,\n                        DeferredLogger.logValue(value),\n                        DeferredLogger.logValue(values));\n                    if (isFull(values)) {\n                      log.debug(\n                          \"Collected deferred triggering complete this={}, values = {}\",\n                          this,\n                          DeferredLogger.logValue(values));\n                      changed.setValue(Optional.of(Arrays.asList(values)));\n                    }\n                  });\n            });\n\n    return changed;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilder.java", "class_name": "DeferredBuilder", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilder.java.DeferredBuilder", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "DeferredChanged<List<Optional<? super T>>>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilder.java.DeferredBuilder.[DeferredChanged<V>]buildIsChanged(V)", "name": "buildIsChanged", "arg_nums": 1, "params": [{"name": "changed", "type": "V"}], "return_type": "DeferredChanged<V>", "signature": "public <V extends Changed> DeferredChanged<V> buildIsChanged(V changed)", "original_string": "  public <V extends Changed> DeferredChanged<V> buildIsChanged(V changed) {\n    return build().flatMap(values -> (DeferredChanged<V>) DeferredChanged.of(isChanged(changed)));\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilder.java", "class_name": "DeferredBuilder", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilder.java.DeferredBuilder", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "DeferredChanged<V>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilder.java.DeferredBuilder.[boolean]isFull(Object[])", "name": "isFull", "arg_nums": 1, "params": [{"name": "values", "type": "Object[]"}], "return_type": "boolean", "signature": "private static boolean isFull(Object[] values)", "original_string": "  private static boolean isFull(Object[] values) {\n    for (Object value : values) {\n      if (value == null) {\n        return false;\n      }\n    }\n    return true;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilder.java", "class_name": "DeferredBuilder", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilder.java.DeferredBuilder", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/deferred/RecursiveSchemaSet.java.RecursiveSchemaSet.[boolean]contains(CacheKey)", "name": "contains", "arg_nums": 1, "params": [{"name": "key", "type": "CacheKey"}], "return_type": "boolean", "signature": "public boolean contains(CacheKey key)", "original_string": "  public boolean contains(CacheKey key) {\n    return leftKeys.contains(key.getLeft()) || rightKeys.contains(key.getRight());\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/deferred/RecursiveSchemaSet.java", "class_name": "RecursiveSchemaSet", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/deferred/RecursiveSchemaSet.java.RecursiveSchemaSet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/deferred/RecursiveSchemaSet.java.RecursiveSchemaSet.[void]put(CacheKey)", "name": "put", "arg_nums": 1, "params": [{"name": "key", "type": "CacheKey"}], "return_type": "void", "signature": "public void put(CacheKey key)", "original_string": "  public void put(CacheKey key) {\n    leftKeys.add(key.getLeft());\n    leftKeys.add(key.getRight());\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/deferred/RecursiveSchemaSet.java", "class_name": "RecursiveSchemaSet", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/deferred/RecursiveSchemaSet.java.RecursiveSchemaSet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredSchemaCache.java.DeferredSchemaCache.[]DeferredSchemaCache(OpenApiDiff)", "name": "DeferredSchemaCache", "arg_nums": 1, "params": [{"name": "openApiDiff", "type": "OpenApiDiff"}], "return_type": "", "signature": "public DeferredSchemaCache(OpenApiDiff openApiDiff)", "original_string": "  public DeferredSchemaCache(OpenApiDiff openApiDiff) {\n    this.openApiDiff = openApiDiff;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredSchemaCache.java", "class_name": "DeferredSchemaCache", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredSchemaCache.java.DeferredSchemaCache", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredSchemaCache.java.DeferredSchemaCache.[SchemaDiffOperation]addSchema(RecursiveSchemaSet,CacheKey,Schema,Schema)", "name": "addSchema", "arg_nums": 4, "params": [{"name": "refSet", "type": "RecursiveSchemaSet"}, {"name": "key", "type": "CacheKey"}, {"name": "left", "type": "Schema"}, {"name": "right", "type": "Schema"}], "return_type": "SchemaDiffOperation", "signature": "public SchemaDiffOperation addSchema(\n      RecursiveSchemaSet refSet, CacheKey key, Schema left, Schema right)", "original_string": "  public SchemaDiffOperation addSchema(\n      RecursiveSchemaSet refSet, CacheKey key, Schema left, Schema right) {\n    if (!cache.containsKey(key)) {\n      log.debug(\"Added schema cache {}\", key);\n      SchemaDiffOperation operation =\n          new SchemaDiffOperation(openApiDiff, refSet, key, left, right);\n      cache.put(key, operation);\n      processingQueue.add(key);\n      return operation;\n    } else {\n      return cache.get(key);\n    }\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredSchemaCache.java", "class_name": "DeferredSchemaCache", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredSchemaCache.java.DeferredSchemaCache", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "SchemaDiffOperation", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredSchemaCache.java.DeferredSchemaCache.[DeferredChanged<ChangedSchema>]getOrAddSchema(RecursiveSchemaSet,CacheKey,Schema,Schema)", "name": "getOrAddSchema", "arg_nums": 4, "params": [{"name": "refSet", "type": "RecursiveSchemaSet"}, {"name": "key", "type": "CacheKey"}, {"name": "left", "type": "Schema"}, {"name": "right", "type": "Schema"}], "return_type": "DeferredChanged<ChangedSchema>", "signature": "public DeferredChanged<ChangedSchema> getOrAddSchema(\n      RecursiveSchemaSet refSet, CacheKey key, Schema left, Schema right)", "original_string": "  public DeferredChanged<ChangedSchema> getOrAddSchema(\n      RecursiveSchemaSet refSet, CacheKey key, Schema left, Schema right) {\n    // don't allow recursive references to schemas\n    if (refSet.contains(key)) {\n      log.debug(\"getOrAddSchema recursive call aborted {} \", key);\n      return DeferredChanged.empty();\n    }\n\n    refSet.put(key);\n    SchemaDiffOperation operation;\n    if (cache.containsKey(key)) {\n      operation = cache.get(key);\n      log.debug(\"getOrAddSchema cached {} {}\", key, operation.diffResult);\n    } else {\n      operation = addSchema(refSet, key, left, right);\n      log.debug(\"getOrAddSchema added {} {}\", key, operation.diffResult);\n    }\n    return operation.diffResult;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredSchemaCache.java", "class_name": "DeferredSchemaCache", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredSchemaCache.java.DeferredSchemaCache", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "DeferredChanged<ChangedSchema>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredSchemaCache.java.DeferredSchemaCache.[void]process()", "name": "process", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void process()", "original_string": "  public void process() {\n    processSchemaQueue();\n    //        while(! deferredOperations.isEmpty()) {\n    //            processSchemaQueue();\n    //            DeferredOperation op = deferredOperations.poll();\n    //            if(op != null) {\n    //                log.debug(\"Processing deferred {}\", op);\n    //                op.process();\n    //            }\n    //        }\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredSchemaCache.java", "class_name": "DeferredSchemaCache", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredSchemaCache.java.DeferredSchemaCache", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredSchemaCache.java.DeferredSchemaCache.[void]processSchemaQueue()", "name": "processSchemaQueue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void processSchemaQueue()", "original_string": "  public void processSchemaQueue() {\n    PendingChanged.logResolved();\n    while (!processingQueue.isEmpty()) {\n      CacheKey key = processingQueue.poll();\n      if (key != null) {\n        log.debug(\"Processing schema {}\", key);\n        SchemaDiffOperation operation = cache.get(key);\n        DeferredChanged<ChangedSchema> realValue =\n            operation\n                .openApiDiff\n                .getSchemaDiff()\n                .computeDiffForReal(\n                    operation.refSet, operation.left, operation.right, key.getContext());\n        operation.processed = true;\n        realValue.whenSet(\n            value -> {\n              log.debug(\"Schema processed {} {}\", key, DeferredLogger.logValue(value));\n              operation.diffResult.setValue(value);\n            });\n        log.debug(\"Processing schema started {}\", key);\n      }\n      PendingChanged.logResolved();\n    }\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredSchemaCache.java", "class_name": "DeferredSchemaCache", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredSchemaCache.java.DeferredSchemaCache", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredSchemaCache.java.DeferredSchemaCache.[Collection<SchemaDiffOperation>]getOperations()", "name": "getOperations", "arg_nums": 0, "params": [], "return_type": "Collection<SchemaDiffOperation>", "signature": "public Collection<SchemaDiffOperation> getOperations()", "original_string": "  public Collection<SchemaDiffOperation> getOperations() {\n    return cache.values();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredSchemaCache.java", "class_name": "DeferredSchemaCache", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredSchemaCache.java.DeferredSchemaCache", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Collection<SchemaDiffOperation>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredSchemaCache.java.DeferredSchemaCache.[List<ChangedSchema>]getChangedSchemas()", "name": "getChangedSchemas", "arg_nums": 0, "params": [], "return_type": "List<ChangedSchema>", "signature": "public List<ChangedSchema> getChangedSchemas()", "original_string": "  public List<ChangedSchema> getChangedSchemas() {\n    return cache.values().stream()\n        .filter(op -> op.processed && op.diffResult.isPresent())\n        .map(op -> op.diffResult.get())\n        .collect(Collectors.toList());\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredSchemaCache.java", "class_name": "DeferredSchemaCache", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredSchemaCache.java.DeferredSchemaCache", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<ChangedSchema>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedReadOnly.java.ChangedReadOnly.[]ChangedReadOnly(Boolean,Boolean,DiffContext)", "name": "ChangedReadOnly", "arg_nums": 3, "params": [{"name": "oldValue", "type": "Boolean"}, {"name": "newValue", "type": "Boolean"}, {"name": "context", "type": "DiffContext"}], "return_type": "", "signature": "public ChangedReadOnly(Boolean oldValue, Boolean newValue, DiffContext context)", "original_string": "  public ChangedReadOnly(Boolean oldValue, Boolean newValue, DiffContext context) {\n    this.context = context;\n    this.oldValue = Optional.ofNullable(oldValue).orElse(false);\n    this.newValue = Optional.ofNullable(newValue).orElse(false);\n    //        this.required = required;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedReadOnly.java", "class_name": "ChangedReadOnly", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedReadOnly.java.ChangedReadOnly", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "    private final boolean required;"}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedReadOnly.java.ChangedReadOnly.[DiffResult]isChanged()", "name": "isChanged", "arg_nums": 0, "params": [], "return_type": "DiffResult", "signature": "@Override\n  public DiffResult isChanged()", "original_string": "  @Override\n  public DiffResult isChanged() {\n    if (Objects.equals(oldValue, newValue)) {\n      return DiffResult.NO_CHANGES;\n    }\n    if (context.isResponse()) {\n      return DiffResult.COMPATIBLE;\n    }\n    if (context.isRequest()) {\n      if (Boolean.TRUE.equals(newValue)) {\n        if (REQUEST_READONLY_INCREASED.enabled(context)) {\n          return DiffResult.INCOMPATIBLE;\n        }\n      } else if (context.isRequired()) {\n        // Incompatible because a prev RO prop (invalid) is now not RO and required\n        if (REQUEST_READONLY_REQUIRED_DECREASED.enabled(context)) {\n          return DiffResult.INCOMPATIBLE;\n        }\n      }\n      return DiffResult.COMPATIBLE;\n    }\n    return DiffResult.UNKNOWN;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedReadOnly.java", "class_name": "ChangedReadOnly", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedReadOnly.java.ChangedReadOnly", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "DiffResult", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedWriteOnly.java.ChangedWriteOnly.[]ChangedWriteOnly(Boolean,Boolean,DiffContext)", "name": "ChangedWriteOnly", "arg_nums": 3, "params": [{"name": "oldValue", "type": "Boolean"}, {"name": "newValue", "type": "Boolean"}, {"name": "context", "type": "DiffContext"}], "return_type": "", "signature": "public ChangedWriteOnly(Boolean oldValue, Boolean newValue, DiffContext context)", "original_string": "  public ChangedWriteOnly(Boolean oldValue, Boolean newValue, DiffContext context) {\n    this.context = context;\n    this.oldValue = Optional.ofNullable(oldValue).orElse(false);\n    this.newValue = Optional.ofNullable(newValue).orElse(false);\n    //        this.required = required;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedWriteOnly.java", "class_name": "ChangedWriteOnly", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedWriteOnly.java.ChangedWriteOnly", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "    private final boolean required;"}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedWriteOnly.java.ChangedWriteOnly.[DiffResult]isChanged()", "name": "isChanged", "arg_nums": 0, "params": [], "return_type": "DiffResult", "signature": "@Override\n  public DiffResult isChanged()", "original_string": "  @Override\n  public DiffResult isChanged() {\n    if (Objects.equals(oldValue, newValue)) {\n      return DiffResult.NO_CHANGES;\n    }\n    if (context.isRequest()) {\n      return DiffResult.COMPATIBLE;\n    }\n    if (context.isResponse()) {\n      if (Boolean.TRUE.equals(newValue)) {\n        if (RESPONSE_WRITEONLY_INCREASED.enabled(context)) {\n          return DiffResult.INCOMPATIBLE;\n        }\n      } else if (context.isRequired()) {\n        if (RESPONSE_WRITEONLY_REQUIRED_DECREASED.enabled(context)) {\n          return DiffResult.INCOMPATIBLE;\n        }\n      }\n      return DiffResult.COMPATIBLE;\n    }\n    return DiffResult.UNKNOWN;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedWriteOnly.java", "class_name": "ChangedWriteOnly", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedWriteOnly.java.ChangedWriteOnly", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "DiffResult", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedNumericRange.java.ChangedNumericRange.[DiffResult]isChanged()", "name": "isChanged", "arg_nums": 0, "params": [], "return_type": "DiffResult", "signature": "@Override\n  public DiffResult isChanged()", "original_string": "  @Override\n  public DiffResult isChanged() {\n    if (Objects.equals(oldMinimumValue, newMinimumValue)\n        && Objects.equals(oldMaximumValue, newMaximumValue)\n        && Objects.equals(oldMinimumExclusiveValue, newMinimumExclusiveValue)\n        && Objects.equals(oldMaximumExclusiveValue, newMaximumExclusiveValue)) {\n      return DiffResult.NO_CHANGES;\n    }\n\n    if ((context.isRequest() && !REQUEST_NUMERIC_RANGE_DECREASED.enabled(context))\n        || (context.isResponse() && !RESPONSE_NUMERIC_RANGE_INCREASED.enabled(context))) {\n      return DiffResult.COMPATIBLE;\n    }\n\n    boolean exclusiveMaxOld = oldMaximumExclusiveValue != null && oldMaximumExclusiveValue;\n    boolean exclusiveMinOld = oldMinimumExclusiveValue != null && oldMinimumExclusiveValue;\n    boolean exclusiveMaxNew = newMaximumExclusiveValue != null && newMaximumExclusiveValue;\n    boolean exclusiveMinNew = newMinimumExclusiveValue != null && newMinimumExclusiveValue;\n    int diffMax = compare(oldMaximumValue, newMaximumValue, false);\n    int diffMin = compare(oldMinimumValue, newMinimumValue, true);\n\n    if (context.isRequest()) {\n      if (diffMax > 0 || (diffMax == 0 && !exclusiveMaxOld && exclusiveMaxNew)) {\n        return DiffResult.INCOMPATIBLE;\n      }\n      if (diffMin < 0 || (diffMin == 0 && !exclusiveMinOld && exclusiveMinNew)) {\n        return DiffResult.INCOMPATIBLE;\n      }\n    } else if (context.isResponse()) {\n      if (diffMax < 0 || (diffMax == 0 && exclusiveMaxOld && !exclusiveMaxNew)) {\n        return DiffResult.INCOMPATIBLE;\n      }\n      if (diffMin > 0 || (diffMin == 0 && exclusiveMinOld && !exclusiveMinNew)) {\n        return DiffResult.INCOMPATIBLE;\n      }\n    }\n    return DiffResult.COMPATIBLE;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedNumericRange.java", "class_name": "ChangedNumericRange", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedNumericRange.java.ChangedNumericRange", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "DiffResult", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedNumericRange.java.ChangedNumericRange.[int]compare(BigDecimal,BigDecimal,boolean)", "name": "compare", "arg_nums": 3, "params": [{"name": "left", "type": "BigDecimal"}, {"name": "right", "type": "BigDecimal"}, {"name": "nullMeansLessThan", "type": "boolean"}], "return_type": "int", "signature": "private int compare(BigDecimal left, BigDecimal right, boolean nullMeansLessThan)", "original_string": "  private int compare(BigDecimal left, BigDecimal right, boolean nullMeansLessThan) {\n    if (left == null && right == null) {\n      return 0;\n    }\n    if (left == null) {\n      return nullMeansLessThan ? -1 : 1;\n    }\n    if (right == null) {\n      return nullMeansLessThan ? 1 : -1;\n    }\n    return left.unscaledValue().compareTo(right.unscaledValue());\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedNumericRange.java", "class_name": "ChangedNumericRange", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedNumericRange.java.ChangedNumericRange", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedNumericRange.java.ChangedNumericRange.[]ChangedNumericRange(BigDecimal,BigDecimal,BigDecimal,BigDecimal,Boolean,Boolean,Boolean,Boolean,DiffContext)", "name": "ChangedNumericRange", "arg_nums": 9, "params": [{"name": "oldMinimumValue", "type": "BigDecimal"}, {"name": "newMinimumValue", "type": "BigDecimal"}, {"name": "oldMaximumValue", "type": "BigDecimal"}, {"name": "newMaximumValue", "type": "BigDecimal"}, {"name": "oldMinimumExclusiveValue", "type": "Boolean"}, {"name": "newMinimumExclusiveValue", "type": "Boolean"}, {"name": "oldMaximumExclusiveValue", "type": "Boolean"}, {"name": "newMaximumExclusiveValue", "type": "Boolean"}, {"name": "context", "type": "DiffContext"}], "return_type": "", "signature": "public ChangedNumericRange(\n      final BigDecimal oldMinimumValue,\n      final BigDecimal newMinimumValue,\n      final BigDecimal oldMaximumValue,\n      final BigDecimal newMaximumValue,\n      final Boolean oldMinimumExclusiveValue,\n      final Boolean newMinimumExclusiveValue,\n      final Boolean oldMaximumExclusiveValue,\n      final Boolean newMaximumExclusiveValue,\n      final DiffContext context)", "original_string": "  public ChangedNumericRange(\n      final BigDecimal oldMinimumValue,\n      final BigDecimal newMinimumValue,\n      final BigDecimal oldMaximumValue,\n      final BigDecimal newMaximumValue,\n      final Boolean oldMinimumExclusiveValue,\n      final Boolean newMinimumExclusiveValue,\n      final Boolean oldMaximumExclusiveValue,\n      final Boolean newMaximumExclusiveValue,\n      final DiffContext context) {\n    this.oldMinimumValue = oldMinimumValue;\n    this.newMinimumValue = newMinimumValue;\n    this.oldMaximumValue = oldMaximumValue;\n    this.newMaximumValue = newMaximumValue;\n    this.oldMinimumExclusiveValue = oldMinimumExclusiveValue;\n    this.newMinimumExclusiveValue = newMinimumExclusiveValue;\n    this.oldMaximumExclusiveValue = oldMaximumExclusiveValue;\n    this.newMaximumExclusiveValue = newMaximumExclusiveValue;\n    this.context = context;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedNumericRange.java", "class_name": "ChangedNumericRange", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedNumericRange.java.ChangedNumericRange", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedNumericRange.java.ChangedNumericRange.[BigDecimal]getOldMinimumValue()", "name": "getOldMinimumValue", "arg_nums": 0, "params": [], "return_type": "BigDecimal", "signature": "public BigDecimal getOldMinimumValue()", "original_string": "  public BigDecimal getOldMinimumValue() {\n    return oldMinimumValue;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedNumericRange.java", "class_name": "ChangedNumericRange", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedNumericRange.java.ChangedNumericRange", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BigDecimal", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedNumericRange.java.ChangedNumericRange.[BigDecimal]getNewMinimumValue()", "name": "getNewMinimumValue", "arg_nums": 0, "params": [], "return_type": "BigDecimal", "signature": "public BigDecimal getNewMinimumValue()", "original_string": "  public BigDecimal getNewMinimumValue() {\n    return newMinimumValue;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedNumericRange.java", "class_name": "ChangedNumericRange", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedNumericRange.java.ChangedNumericRange", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BigDecimal", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedNumericRange.java.ChangedNumericRange.[BigDecimal]getOldMaximumValue()", "name": "getOldMaximumValue", "arg_nums": 0, "params": [], "return_type": "BigDecimal", "signature": "public BigDecimal getOldMaximumValue()", "original_string": "  public BigDecimal getOldMaximumValue() {\n    return oldMaximumValue;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedNumericRange.java", "class_name": "ChangedNumericRange", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedNumericRange.java.ChangedNumericRange", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BigDecimal", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedNumericRange.java.ChangedNumericRange.[BigDecimal]getNewMaximumValue()", "name": "getNewMaximumValue", "arg_nums": 0, "params": [], "return_type": "BigDecimal", "signature": "public BigDecimal getNewMaximumValue()", "original_string": "  public BigDecimal getNewMaximumValue() {\n    return newMaximumValue;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedNumericRange.java", "class_name": "ChangedNumericRange", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedNumericRange.java.ChangedNumericRange", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BigDecimal", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedNumericRange.java.ChangedNumericRange.[Boolean]getOldMinimumExclusiveValue()", "name": "getOldMinimumExclusiveValue", "arg_nums": 0, "params": [], "return_type": "Boolean", "signature": "public Boolean getOldMinimumExclusiveValue()", "original_string": "  public Boolean getOldMinimumExclusiveValue() {\n    return oldMinimumExclusiveValue;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedNumericRange.java", "class_name": "ChangedNumericRange", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedNumericRange.java.ChangedNumericRange", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedNumericRange.java.ChangedNumericRange.[Boolean]getNewMinimumExclusiveValue()", "name": "getNewMinimumExclusiveValue", "arg_nums": 0, "params": [], "return_type": "Boolean", "signature": "public Boolean getNewMinimumExclusiveValue()", "original_string": "  public Boolean getNewMinimumExclusiveValue() {\n    return newMinimumExclusiveValue;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedNumericRange.java", "class_name": "ChangedNumericRange", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedNumericRange.java.ChangedNumericRange", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedNumericRange.java.ChangedNumericRange.[Boolean]getOldMaximumExclusiveValue()", "name": "getOldMaximumExclusiveValue", "arg_nums": 0, "params": [], "return_type": "Boolean", "signature": "public Boolean getOldMaximumExclusiveValue()", "original_string": "  public Boolean getOldMaximumExclusiveValue() {\n    return oldMaximumExclusiveValue;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedNumericRange.java", "class_name": "ChangedNumericRange", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedNumericRange.java.ChangedNumericRange", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedNumericRange.java.ChangedNumericRange.[Boolean]getNewMaximumExclusiveValue()", "name": "getNewMaximumExclusiveValue", "arg_nums": 0, "params": [], "return_type": "Boolean", "signature": "public Boolean getNewMaximumExclusiveValue()", "original_string": "  public Boolean getNewMaximumExclusiveValue() {\n    return newMaximumExclusiveValue;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedNumericRange.java", "class_name": "ChangedNumericRange", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedNumericRange.java.ChangedNumericRange", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedNumericRange.java.ChangedNumericRange.[DiffContext]getContext()", "name": "getContext", "arg_nums": 0, "params": [], "return_type": "DiffContext", "signature": "public DiffContext getContext()", "original_string": "  public DiffContext getContext() {\n    return this.context;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedNumericRange.java", "class_name": "ChangedNumericRange", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedNumericRange.java.ChangedNumericRange", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "DiffContext", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedNumericRange.java.ChangedNumericRange.[boolean]equals(Object)", "name": "equals", "arg_nums": 1, "params": [{"name": "o", "type": "Object"}], "return_type": "boolean", "signature": "@Override\n  public boolean equals(Object o)", "original_string": "  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    ChangedNumericRange that = (ChangedNumericRange) o;\n    return Objects.equals(oldMinimumValue, newMinimumValue)\n        && Objects.equals(oldMaximumValue, newMaximumValue)\n        && Objects.equals(oldMinimumExclusiveValue, newMinimumExclusiveValue)\n        && Objects.equals(oldMaximumExclusiveValue, newMaximumExclusiveValue)\n        && Objects.equals(context, that.context);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedNumericRange.java", "class_name": "ChangedNumericRange", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedNumericRange.java.ChangedNumericRange", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedNumericRange.java.ChangedNumericRange.[int]hashCode()", "name": "hashCode", "arg_nums": 0, "params": [], "return_type": "int", "signature": "@Override\n  public int hashCode()", "original_string": "  @Override\n  public int hashCode() {\n    return Objects.hash(\n        oldMinimumValue,\n        newMinimumValue,\n        oldMaximumValue,\n        newMaximumValue,\n        oldMinimumExclusiveValue,\n        newMinimumExclusiveValue,\n        oldMaximumExclusiveValue,\n        newMaximumExclusiveValue,\n        context);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedNumericRange.java", "class_name": "ChangedNumericRange", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedNumericRange.java.ChangedNumericRange", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedNumericRange.java.ChangedNumericRange.[String]toString()", "name": "toString", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Override\n  public String toString()", "original_string": "  @Override\n  public String toString() {\n    return \"ChangedNumericRange(\"\n        + \"oldMinimumValue=\"\n        + oldMinimumValue\n        + \", newMinimumValue=\"\n        + newMinimumValue\n        + \", oldMaximumValue=\"\n        + oldMaximumValue\n        + \", newMaximumValue=\"\n        + newMaximumValue\n        + \", oldMinimumExclusiveValue=\"\n        + oldMinimumExclusiveValue\n        + \", newMinimumExclusiveValue=\"\n        + newMinimumExclusiveValue\n        + \", oldMaximumExclusiveValue=\"\n        + oldMaximumExclusiveValue\n        + \", newMaximumExclusiveValue=\"\n        + newMaximumExclusiveValue\n        + \", context=\"\n        + context\n        + ')';\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedNumericRange.java", "class_name": "ChangedNumericRange", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedNumericRange.java.ChangedNumericRange", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedEnum.java.ChangedEnum.[]ChangedEnum(List<T>,List<T>,DiffContext)", "name": "ChangedEnum", "arg_nums": 3, "params": [{"name": "oldValue", "type": "List<T>"}, {"name": "newValue", "type": "List<T>"}, {"name": "context", "type": "DiffContext"}], "return_type": "", "signature": "public ChangedEnum(List<T> oldValue, List<T> newValue, DiffContext context)", "original_string": "  public ChangedEnum(List<T> oldValue, List<T> newValue, DiffContext context) {\n    super(oldValue, newValue, context);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedEnum.java", "class_name": "ChangedEnum", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedEnum.java.ChangedEnum", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedEnum.java.ChangedEnum.[DiffResult]isItemsChanged()", "name": "isItemsChanged", "arg_nums": 0, "params": [], "return_type": "DiffResult", "signature": "@Override\n  public DiffResult isItemsChanged()", "original_string": "  @Override\n  public DiffResult isItemsChanged() {\n    if (context.isRequest() && !getMissing().isEmpty()) {\n      if (REQUEST_ENUM_DECREASED.enabled(context)) {\n        return DiffResult.INCOMPATIBLE;\n      }\n    }\n    if (context.isResponse() && !getIncreased().isEmpty()) {\n      if (RESPONSE_ENUM_INCREASED.enabled(context)) {\n        return DiffResult.INCOMPATIBLE;\n      }\n    }\n    return DiffResult.COMPATIBLE;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedEnum.java", "class_name": "ChangedEnum", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedEnum.java.ChangedEnum", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "DiffResult", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedRequired.java.ChangedRequired.[]ChangedRequired(List<String>,List<String>,DiffContext)", "name": "ChangedRequired", "arg_nums": 3, "params": [{"name": "oldValue", "type": "List<String>"}, {"name": "newValue", "type": "List<String>"}, {"name": "context", "type": "DiffContext"}], "return_type": "", "signature": "public ChangedRequired(List<String> oldValue, List<String> newValue, DiffContext context)", "original_string": "  public ChangedRequired(List<String> oldValue, List<String> newValue, DiffContext context) {\n    super(oldValue, newValue, context);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedRequired.java", "class_name": "ChangedRequired", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedRequired.java.ChangedRequired", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedRequired.java.ChangedRequired.[DiffResult]isItemsChanged()", "name": "isItemsChanged", "arg_nums": 0, "params": [], "return_type": "DiffResult", "signature": "@Override\n  public DiffResult isItemsChanged()", "original_string": "  @Override\n  public DiffResult isItemsChanged() {\n    if (context.isRequest() && !getIncreased().isEmpty()) {\n      if (REQUEST_REQUIRED_INCREASED.enabled(context)) {\n        return DiffResult.INCOMPATIBLE;\n      }\n    }\n    if (context.isResponse() && !getMissing().isEmpty()) {\n      if (RESPONSE_REQUIRED_DECREASED.enabled(context)) {\n        return DiffResult.INCOMPATIBLE;\n      }\n    }\n    return DiffResult.COMPATIBLE;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedRequired.java", "class_name": "ChangedRequired", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedRequired.java.ChangedRequired", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "DiffResult", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedMaxLength.java.ChangedMaxLength.[DiffResult]isChanged()", "name": "isChanged", "arg_nums": 0, "params": [], "return_type": "DiffResult", "signature": "@Override\n  public DiffResult isChanged()", "original_string": "  @Override\n  public DiffResult isChanged() {\n    if (Objects.equals(oldValue, newValue)) {\n      return DiffResult.NO_CHANGES;\n    }\n    if (context.isRequest() && (oldValue == null || newValue != null && newValue < oldValue)) {\n      if (REQUEST_MAX_LENGTH_DECREASED.enabled(context)) {\n        return DiffResult.INCOMPATIBLE;\n      }\n    }\n    if (context.isResponse() && (newValue == null || oldValue != null && newValue > oldValue)) {\n      if (RESPONSE_MAX_LENGTH_INCREASED.enabled(context)) {\n        return DiffResult.INCOMPATIBLE;\n      }\n    }\n    return DiffResult.COMPATIBLE;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedMaxLength.java", "class_name": "ChangedMaxLength", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedMaxLength.java.ChangedMaxLength", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "DiffResult", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedMaxLength.java.ChangedMaxLength.[]ChangedMaxLength(Integer,Integer,DiffContext)", "name": "ChangedMaxLength", "arg_nums": 3, "params": [{"name": "oldValue", "type": "Integer"}, {"name": "newValue", "type": "Integer"}, {"name": "context", "type": "DiffContext"}], "return_type": "", "signature": "public ChangedMaxLength(\n      final Integer oldValue, final Integer newValue, final DiffContext context)", "original_string": "  public ChangedMaxLength(\n      final Integer oldValue, final Integer newValue, final DiffContext context) {\n    this.oldValue = oldValue;\n    this.newValue = newValue;\n    this.context = context;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedMaxLength.java", "class_name": "ChangedMaxLength", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedMaxLength.java.ChangedMaxLength", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedMaxLength.java.ChangedMaxLength.[Integer]getOldValue()", "name": "getOldValue", "arg_nums": 0, "params": [], "return_type": "Integer", "signature": "public Integer getOldValue()", "original_string": "  public Integer getOldValue() {\n    return this.oldValue;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedMaxLength.java", "class_name": "ChangedMaxLength", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedMaxLength.java.ChangedMaxLength", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Integer", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedMaxLength.java.ChangedMaxLength.[Integer]getNewValue()", "name": "getNewValue", "arg_nums": 0, "params": [], "return_type": "Integer", "signature": "public Integer getNewValue()", "original_string": "  public Integer getNewValue() {\n    return this.newValue;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedMaxLength.java", "class_name": "ChangedMaxLength", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedMaxLength.java.ChangedMaxLength", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Integer", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedMaxLength.java.ChangedMaxLength.[DiffContext]getContext()", "name": "getContext", "arg_nums": 0, "params": [], "return_type": "DiffContext", "signature": "public DiffContext getContext()", "original_string": "  public DiffContext getContext() {\n    return this.context;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedMaxLength.java", "class_name": "ChangedMaxLength", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedMaxLength.java.ChangedMaxLength", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "DiffContext", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedMaxLength.java.ChangedMaxLength.[boolean]equals(Object)", "name": "equals", "arg_nums": 1, "params": [{"name": "o", "type": "Object"}], "return_type": "boolean", "signature": "@Override\n  public boolean equals(Object o)", "original_string": "  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    ChangedMaxLength that = (ChangedMaxLength) o;\n    return Objects.equals(oldValue, that.oldValue)\n        && Objects.equals(newValue, that.newValue)\n        && Objects.equals(context, that.context);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedMaxLength.java", "class_name": "ChangedMaxLength", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedMaxLength.java.ChangedMaxLength", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedMaxLength.java.ChangedMaxLength.[int]hashCode()", "name": "hashCode", "arg_nums": 0, "params": [], "return_type": "int", "signature": "@Override\n  public int hashCode()", "original_string": "  @Override\n  public int hashCode() {\n    return Objects.hash(oldValue, newValue, context);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedMaxLength.java", "class_name": "ChangedMaxLength", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedMaxLength.java.ChangedMaxLength", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedMaxLength.java.ChangedMaxLength.[java.lang.String]toString()", "name": "toString", "arg_nums": 0, "params": [], "return_type": "java.lang.String", "signature": "@java.lang.Override\n  public java.lang.String toString()", "original_string": "  @java.lang.Override\n  public java.lang.String toString() {\n    return \"ChangedMaxLength(oldValue=\"\n        + this.getOldValue()\n        + \", newValue=\"\n        + this.getNewValue()\n        + \", context=\"\n        + this.getContext()\n        + \")\";\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedMaxLength.java", "class_name": "ChangedMaxLength", "class_uri": "src/main/java/org/openapitools/openapidiff/core/model/schema/ChangedMaxLength.java.ChangedMaxLength", "attributes": {"modifiers": "@java.lang.Override\n  public", "marker_annotations": ["@java.lang.Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "java.lang.String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo.java.SecurityDiffInfo.[]SecurityDiffInfo(String,SecurityScheme,List<String>)", "name": "SecurityDiffInfo", "arg_nums": 3, "params": [{"name": "ref", "type": "String"}, {"name": "securityScheme", "type": "SecurityScheme"}, {"name": "scopes", "type": "List<String>"}], "return_type": "", "signature": "public SecurityDiffInfo(\n      final String ref, final SecurityScheme securityScheme, final List<String> scopes)", "original_string": "  public SecurityDiffInfo(\n      final String ref, final SecurityScheme securityScheme, final List<String> scopes) {\n    this.ref = ref;\n    this.securityScheme = securityScheme;\n    this.scopes = scopes;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo.java", "class_name": "SecurityDiffInfo", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo.java.SecurityDiffInfo", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo.java.SecurityDiffInfo.[SecurityRequirement]getSecurityRequirement(List<SecurityDiffInfo>)", "name": "getSecurityRequirement", "arg_nums": 1, "params": [{"name": "securityDiffInfoList", "type": "List<SecurityDiffInfo>"}], "return_type": "SecurityRequirement", "signature": "public static SecurityRequirement getSecurityRequirement(\n      List<SecurityDiffInfo> securityDiffInfoList)", "original_string": "  public static SecurityRequirement getSecurityRequirement(\n      List<SecurityDiffInfo> securityDiffInfoList) {\n    SecurityRequirement securityRequirement = new SecurityRequirement();\n    for (SecurityDiffInfo securityDiffInfo : securityDiffInfoList) {\n      securityRequirement.put(securityDiffInfo.getRef(), securityDiffInfo.getScopes());\n    }\n    return securityRequirement;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo.java", "class_name": "SecurityDiffInfo", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo.java.SecurityDiffInfo", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "SecurityRequirement", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo.java.SecurityDiffInfo.[Optional<List<SecurityDiffInfo>>]containsList(List<List<SecurityDiffInfo>>,List<SecurityDiffInfo>)", "name": "containsList", "arg_nums": 2, "params": [{"name": "securityRequirements", "type": "List<List<SecurityDiffInfo>>"}, {"name": "leftSecurities", "type": "List<SecurityDiffInfo>"}], "return_type": "Optional<List<SecurityDiffInfo>>", "signature": "public static Optional<List<SecurityDiffInfo>> containsList(\n      List<List<SecurityDiffInfo>> securityRequirements, List<SecurityDiffInfo> leftSecurities)", "original_string": "  public static Optional<List<SecurityDiffInfo>> containsList(\n      List<List<SecurityDiffInfo>> securityRequirements, List<SecurityDiffInfo> leftSecurities) {\n    return securityRequirements.stream()\n        .filter(rightSecurities -> sameList(leftSecurities, rightSecurities))\n        .findFirst();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo.java", "class_name": "SecurityDiffInfo", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo.java.SecurityDiffInfo", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Optional<List<SecurityDiffInfo>>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo.java.SecurityDiffInfo.[boolean]sameList(List<SecurityDiffInfo>,List<SecurityDiffInfo>)", "name": "sameList", "arg_nums": 2, "params": [{"name": "leftSecurities", "type": "List<SecurityDiffInfo>"}, {"name": "rightSecurities", "type": "List<SecurityDiffInfo>"}], "return_type": "boolean", "signature": "public static boolean sameList(\n      List<SecurityDiffInfo> leftSecurities, List<SecurityDiffInfo> rightSecurities)", "original_string": "  public static boolean sameList(\n      List<SecurityDiffInfo> leftSecurities, List<SecurityDiffInfo> rightSecurities) {\n    return ListDiff.diff(new ChangedList.SimpleChangedList<>(leftSecurities, rightSecurities))\n        .isUnchanged();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo.java", "class_name": "SecurityDiffInfo", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo.java.SecurityDiffInfo", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo.java.SecurityDiffInfo.[boolean]equals(Object)", "name": "equals", "arg_nums": 1, "params": [{"name": "o", "type": "Object"}], "return_type": "boolean", "signature": "@Override\n  public boolean equals(Object o)", "original_string": "  @Override\n  public boolean equals(Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    SecurityDiffInfo that = (SecurityDiffInfo) o;\n    if (securityScheme != null\n        ? !securityScheme.equals(that.securityScheme)\n        : that.securityScheme != null) {\n      return false;\n    }\n    return scopes != null ? scopes.equals(that.scopes) : that.scopes == null;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo.java", "class_name": "SecurityDiffInfo", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo.java.SecurityDiffInfo", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo.java.SecurityDiffInfo.[int]hashCode()", "name": "hashCode", "arg_nums": 0, "params": [], "return_type": "int", "signature": "@Override\n  public int hashCode()", "original_string": "  @Override\n  public int hashCode() {\n    int result = securityScheme != null ? securityScheme.hashCode() : 0;\n    result = 31 * result + (scopes != null ? scopes.hashCode() : 0);\n    return result;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo.java", "class_name": "SecurityDiffInfo", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo.java.SecurityDiffInfo", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo.java.SecurityDiffInfo.[String]getRef()", "name": "getRef", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getRef()", "original_string": "  public String getRef() {\n    return this.ref;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo.java", "class_name": "SecurityDiffInfo", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo.java.SecurityDiffInfo", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo.java.SecurityDiffInfo.[SecurityScheme]getSecurityScheme()", "name": "getSecurityScheme", "arg_nums": 0, "params": [], "return_type": "SecurityScheme", "signature": "public SecurityScheme getSecurityScheme()", "original_string": "  public SecurityScheme getSecurityScheme() {\n    return this.securityScheme;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo.java", "class_name": "SecurityDiffInfo", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo.java.SecurityDiffInfo", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "SecurityScheme", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo.java.SecurityDiffInfo.[List<String>]getScopes()", "name": "getScopes", "arg_nums": 0, "params": [], "return_type": "List<String>", "signature": "public List<String> getScopes()", "original_string": "  public List<String> getScopes() {\n    return this.scopes;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo.java", "class_name": "SecurityDiffInfo", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo.java.SecurityDiffInfo", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<String>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo.java.SecurityDiffInfo.[void]setRef(String)", "name": "setRef", "arg_nums": 1, "params": [{"name": "ref", "type": "String"}], "return_type": "void", "signature": "public void setRef(final String ref)", "original_string": "  public void setRef(final String ref) {\n    this.ref = ref;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo.java", "class_name": "SecurityDiffInfo", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo.java.SecurityDiffInfo", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo.java.SecurityDiffInfo.[void]setSecurityScheme(SecurityScheme)", "name": "setSecurityScheme", "arg_nums": 1, "params": [{"name": "securityScheme", "type": "SecurityScheme"}], "return_type": "void", "signature": "public void setSecurityScheme(final SecurityScheme securityScheme)", "original_string": "  public void setSecurityScheme(final SecurityScheme securityScheme) {\n    this.securityScheme = securityScheme;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo.java", "class_name": "SecurityDiffInfo", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo.java.SecurityDiffInfo", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo.java.SecurityDiffInfo.[void]setScopes(List<String>)", "name": "setScopes", "arg_nums": 1, "params": [{"name": "scopes", "type": "List<String>"}], "return_type": "void", "signature": "public void setScopes(final List<String> scopes)", "original_string": "  public void setScopes(final List<String> scopes) {\n    this.scopes = scopes;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo.java", "class_name": "SecurityDiffInfo", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo.java.SecurityDiffInfo", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo.java.SecurityDiffInfo.[java.lang.String]toString()", "name": "toString", "arg_nums": 0, "params": [], "return_type": "java.lang.String", "signature": "@java.lang.Override\n  public java.lang.String toString()", "original_string": "  @java.lang.Override\n  public java.lang.String toString() {\n    return \"SecurityDiffInfo(ref=\"\n        + this.getRef()\n        + \", securityScheme=\"\n        + this.getSecurityScheme()\n        + \", scopes=\"\n        + this.getScopes()\n        + \")\";\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo.java", "class_name": "SecurityDiffInfo", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo.java.SecurityDiffInfo", "attributes": {"modifiers": "@java.lang.Override\n  public", "marker_annotations": ["@java.lang.Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "java.lang.String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/OAuthFlowsDiff.java.OAuthFlowsDiff.[]OAuthFlowsDiff(OpenApiDiff)", "name": "OAuthFlowsDiff", "arg_nums": 1, "params": [{"name": "openApiDiff", "type": "OpenApiDiff"}], "return_type": "", "signature": "public OAuthFlowsDiff(OpenApiDiff openApiDiff)", "original_string": "  public OAuthFlowsDiff(OpenApiDiff openApiDiff) {\n    this.openApiDiff = openApiDiff;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/OAuthFlowsDiff.java", "class_name": "OAuthFlowsDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/OAuthFlowsDiff.java.OAuthFlowsDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/OAuthFlowsDiff.java.OAuthFlowsDiff.[Map<String, Object>]getExtensions(OAuthFlows)", "name": "getExtensions", "arg_nums": 1, "params": [{"name": "oAuthFlow", "type": "OAuthFlows"}], "return_type": "Map<String, Object>", "signature": "private static Map<String, Object> getExtensions(OAuthFlows oAuthFlow)", "original_string": "  private static Map<String, Object> getExtensions(OAuthFlows oAuthFlow) {\n    return ofNullable(oAuthFlow).map(OAuthFlows::getExtensions).orElse(null);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/OAuthFlowsDiff.java", "class_name": "OAuthFlowsDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/OAuthFlowsDiff.java.OAuthFlowsDiff", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "Map<String, Object>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/OAuthFlowsDiff.java.OAuthFlowsDiff.[Optional<ChangedOAuthFlows>]diff(OAuthFlows,OAuthFlows,DiffContext)", "name": "diff", "arg_nums": 3, "params": [{"name": "left", "type": "OAuthFlows"}, {"name": "right", "type": "OAuthFlows"}, {"name": "context", "type": "DiffContext"}], "return_type": "Optional<ChangedOAuthFlows>", "signature": "public Optional<ChangedOAuthFlows> diff(OAuthFlows left, OAuthFlows right, DiffContext context)", "original_string": "  public Optional<ChangedOAuthFlows> diff(OAuthFlows left, OAuthFlows right, DiffContext context) {\n    ChangedOAuthFlows changedOAuthFlows = new ChangedOAuthFlows(left, right);\n    if (left != null && right != null) {\n      openApiDiff\n          .getOAuthFlowDiff()\n          .diff(left.getImplicit(), right.getImplicit(), context)\n          .ifPresent(changedOAuthFlows::setImplicitOAuthFlow);\n      openApiDiff\n          .getOAuthFlowDiff()\n          .diff(left.getPassword(), right.getPassword(), context)\n          .ifPresent(changedOAuthFlows::setPasswordOAuthFlow);\n      openApiDiff\n          .getOAuthFlowDiff()\n          .diff(left.getClientCredentials(), right.getClientCredentials(), context)\n          .ifPresent(changedOAuthFlows::setClientCredentialOAuthFlow);\n      openApiDiff\n          .getOAuthFlowDiff()\n          .diff(left.getAuthorizationCode(), right.getAuthorizationCode(), context)\n          .ifPresent(changedOAuthFlows::setAuthorizationCodeOAuthFlow);\n    }\n    openApiDiff\n        .getExtensionsDiff()\n        .diff(getExtensions(left), getExtensions(right))\n        .ifPresent(changedOAuthFlows::setExtensions);\n    return isChanged(changedOAuthFlows);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/OAuthFlowsDiff.java", "class_name": "OAuthFlowsDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/OAuthFlowsDiff.java.OAuthFlowsDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Optional<ChangedOAuthFlows>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/MapKeyDiff.java.MapKeyDiff.[]MapKeyDiff()", "name": "MapKeyDiff", "arg_nums": 0, "params": [], "return_type": "", "signature": "private MapKeyDiff()", "original_string": "  private MapKeyDiff() {\n    this.sharedKey = new ArrayList<>();\n    this.increased = new LinkedHashMap<>();\n    this.missing = new LinkedHashMap<>();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/MapKeyDiff.java", "class_name": "MapKeyDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/MapKeyDiff.java.MapKeyDiff", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/MapKeyDiff.java.MapKeyDiff.[MapKeyDiff<K, V>]diff(Map<K, V>,Map<K, V>)", "name": "diff", "arg_nums": 2, "params": [{"name": "mapLeft", "type": "Map<K, V>"}, {"name": "mapRight", "type": "Map<K, V>"}], "return_type": "MapKeyDiff<K, V>", "signature": "public static <K, V> MapKeyDiff<K, V> diff(Map<K, V> mapLeft, Map<K, V> mapRight)", "original_string": "  public static <K, V> MapKeyDiff<K, V> diff(Map<K, V> mapLeft, Map<K, V> mapRight) {\n    MapKeyDiff<K, V> instance = new MapKeyDiff<>();\n    if (null == mapLeft && null == mapRight) return instance;\n    if (null == mapLeft) {\n      instance.increased = mapRight;\n      return instance;\n    }\n    if (null == mapRight) {\n      instance.missing = mapLeft;\n      return instance;\n    }\n    instance.increased = new LinkedHashMap<>(mapRight);\n    instance.missing = new LinkedHashMap<>();\n    for (Entry<K, V> entry : mapLeft.entrySet()) {\n      K leftKey = entry.getKey();\n      V leftValue = entry.getValue();\n      if (mapRight.containsKey(leftKey)) {\n        instance.increased.remove(leftKey);\n        instance.sharedKey.add(leftKey);\n\n      } else {\n        instance.missing.put(leftKey, leftValue);\n      }\n    }\n    return instance;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/MapKeyDiff.java", "class_name": "MapKeyDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/MapKeyDiff.java.MapKeyDiff", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "MapKeyDiff<K, V>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/MapKeyDiff.java.MapKeyDiff.[Map<K, V>]getIncreased()", "name": "getIncreased", "arg_nums": 0, "params": [], "return_type": "Map<K, V>", "signature": "public Map<K, V> getIncreased()", "original_string": "  public Map<K, V> getIncreased() {\n    return increased;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/MapKeyDiff.java", "class_name": "MapKeyDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/MapKeyDiff.java.MapKeyDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Map<K, V>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/MapKeyDiff.java.MapKeyDiff.[Map<K, V>]getMissing()", "name": "getMissing", "arg_nums": 0, "params": [], "return_type": "Map<K, V>", "signature": "public Map<K, V> getMissing()", "original_string": "  public Map<K, V> getMissing() {\n    return missing;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/MapKeyDiff.java", "class_name": "MapKeyDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/MapKeyDiff.java.MapKeyDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Map<K, V>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/MapKeyDiff.java.MapKeyDiff.[List<K>]getSharedKey()", "name": "getSharedKey", "arg_nums": 0, "params": [], "return_type": "List<K>", "signature": "public List<K> getSharedKey()", "original_string": "  public List<K> getSharedKey() {\n    return sharedKey;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/MapKeyDiff.java", "class_name": "MapKeyDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/MapKeyDiff.java.MapKeyDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<K>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/SchemaDiff.java.SchemaDiff.[]SchemaDiff(OpenApiDiff)", "name": "SchemaDiff", "arg_nums": 1, "params": [{"name": "openApiDiff", "type": "OpenApiDiff"}], "return_type": "", "signature": "public SchemaDiff(OpenApiDiff openApiDiff)", "original_string": "  public SchemaDiff(OpenApiDiff openApiDiff) {\n    this.openApiDiff = openApiDiff;\n    this.leftComponents =\n        openApiDiff.getOldSpecOpenApi() != null\n            ? openApiDiff.getOldSpecOpenApi().getComponents()\n            : null;\n    this.rightComponents =\n        openApiDiff.getNewSpecOpenApi() != null\n            ? openApiDiff.getNewSpecOpenApi().getComponents()\n            : null;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/SchemaDiff.java", "class_name": "SchemaDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/SchemaDiff.java.SchemaDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/SchemaDiff.java.SchemaDiff.[SchemaDiffResult]getSchemaDiffResult(OpenApiDiff)", "name": "getSchemaDiffResult", "arg_nums": 1, "params": [{"name": "openApiDiff", "type": "OpenApiDiff"}], "return_type": "SchemaDiffResult", "signature": "public static SchemaDiffResult getSchemaDiffResult(OpenApiDiff openApiDiff)", "original_string": "  public static SchemaDiffResult getSchemaDiffResult(OpenApiDiff openApiDiff) {\n    return getSchemaDiffResult(null, openApiDiff);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/SchemaDiff.java", "class_name": "SchemaDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/SchemaDiff.java.SchemaDiff", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "SchemaDiffResult", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/SchemaDiff.java.SchemaDiff.[SchemaDiffResult]getSchemaDiffResult(Class<? extends Schema>,OpenApiDiff)", "name": "getSchemaDiffResult", "arg_nums": 2, "params": [{"name": "classType", "type": "Class<? extends Schema>"}, {"name": "openApiDiff", "type": "OpenApiDiff"}], "return_type": "SchemaDiffResult", "signature": "public static SchemaDiffResult getSchemaDiffResult(\n      Class<? extends Schema> classType, OpenApiDiff openApiDiff)", "original_string": "  public static SchemaDiffResult getSchemaDiffResult(\n      Class<? extends Schema> classType, OpenApiDiff openApiDiff) {\n    if (classType == null) {\n      classType = Schema.class;\n    }\n\n    Class<? extends SchemaDiffResult> aClass = schemaDiffResultClassMap.get(classType);\n    try {\n      if (aClass == null) {\n        aClass = schemaDiffResultClassMap.get(Schema.class);\n      }\n      if (aClass != null) {\n        return aClass.getConstructor(OpenApiDiff.class).newInstance(openApiDiff);\n      } else {\n        throw new IllegalArgumentException(\"invalid classType\");\n      }\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"type \" + classType + \" is illegal\");\n    }\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/SchemaDiff.java", "class_name": "SchemaDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/SchemaDiff.java.SchemaDiff", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "SchemaDiffResult", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/SchemaDiff.java.SchemaDiff.[Schema<?>]resolveComposedSchema(Components,Schema<?>,Set<String>)", "name": "resolveComposedSchema", "arg_nums": 3, "params": [{"name": "components", "type": "Components"}, {"name": "schema", "type": "Schema<?>"}, {"name": "visitedRefs", "type": "Set<String>"}], "return_type": "Schema<?>", "signature": "protected static Schema<?> resolveComposedSchema(\n      Components components, Schema<?> schema, Set<String> visitedRefs)", "original_string": "  protected static Schema<?> resolveComposedSchema(\n      Components components, Schema<?> schema, Set<String> visitedRefs) {\n    if (schema instanceof ComposedSchema) {\n      ComposedSchema composedSchema = (ComposedSchema) schema;\n      List<Schema> composedSchemas = new ArrayList<>();\n      Optional.ofNullable(composedSchema.getAllOf()).ifPresent(composedSchemas::addAll);\n      Optional.ofNullable(composedSchema.getAnyOf()).ifPresent(composedSchemas::addAll);\n\n      if (!composedSchemas.isEmpty()) {\n        for (Schema<?> composed : composedSchemas) {\n          if (composed.get$ref() == null || !visitedRefs.contains(composed.get$ref())) {\n            Set<String> updatedVisitedRefs = new HashSet<>(visitedRefs);\n            updatedVisitedRefs.add(composed.get$ref());\n            composed = refPointer.resolveRef(components, composed, composed.get$ref());\n            composed = resolveComposedSchema(components, composed, updatedVisitedRefs);\n            schema = addSchema(schema, composed);\n          }\n        }\n        composedSchema.setAllOf(null);\n        composedSchema.setAnyOf(null);\n      }\n    }\n    return schema;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/SchemaDiff.java", "class_name": "SchemaDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/SchemaDiff.java.SchemaDiff", "attributes": {"modifiers": "protected static", "marker_annotations": [], "non_marker_annotations": ["protected", "static"], "comments": [], "return_type": "Schema<?>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/SchemaDiff.java.SchemaDiff.[Schema<?>]addSchema(Schema<?>,Schema<?>)", "name": "addSchema", "arg_nums": 2, "params": [{"name": "schema", "type": "Schema<?>"}, {"name": "fromSchema", "type": "Schema<?>"}], "return_type": "Schema<?>", "signature": "protected static Schema<?> addSchema(Schema<?> schema, Schema<?> fromSchema)", "original_string": "  protected static Schema<?> addSchema(Schema<?> schema, Schema<?> fromSchema) {\n    if (fromSchema.getProperties() != null) {\n      if (schema.getProperties() == null) {\n        schema.setProperties(new LinkedHashMap<>());\n      }\n      schema.getProperties().putAll(fromSchema.getProperties());\n    }\n\n    if (fromSchema.getRequired() != null) {\n      if (schema.getRequired() == null) {\n        schema.setRequired(fromSchema.getRequired());\n      } else {\n        schema.getRequired().addAll(fromSchema.getRequired());\n      }\n    }\n\n    if (fromSchema.getReadOnly() != null) {\n      schema.setReadOnly(fromSchema.getReadOnly());\n    }\n    if (fromSchema.getWriteOnly() != null) {\n      schema.setWriteOnly(fromSchema.getWriteOnly());\n    }\n    if (fromSchema.getDeprecated() != null) {\n      schema.setDeprecated(fromSchema.getDeprecated());\n    }\n    if (fromSchema.getExclusiveMaximum() != null) {\n      schema.setExclusiveMaximum(fromSchema.getExclusiveMaximum());\n    }\n    if (fromSchema.getExclusiveMinimum() != null) {\n      schema.setExclusiveMinimum(fromSchema.getExclusiveMinimum());\n    }\n    if (fromSchema.getNullable() != null) {\n      schema.setNullable(fromSchema.getNullable());\n    }\n    if (fromSchema.getUniqueItems() != null) {\n      schema.setUniqueItems(fromSchema.getUniqueItems());\n    }\n    if (fromSchema.getDescription() != null) {\n      schema.setDescription(fromSchema.getDescription());\n    }\n    if (fromSchema.getFormat() != null) {\n      schema.setFormat(fromSchema.getFormat());\n    }\n    if (fromSchema.getType() != null) {\n      schema.setType(fromSchema.getType());\n    }\n    if (fromSchema.getEnum() != null) {\n      if (schema.getEnum() == null) {\n        schema.setEnum(new ArrayList<>());\n      }\n      //noinspection unchecked\n      schema.getEnum().addAll((List) fromSchema.getEnum());\n    }\n    if (fromSchema.getExtensions() != null) {\n      if (schema.getExtensions() == null) {\n        schema.setExtensions(new LinkedHashMap<>());\n      }\n      schema.getExtensions().putAll(fromSchema.getExtensions());\n    }\n    if (fromSchema instanceof ComposedSchema && schema instanceof ComposedSchema) {\n      ComposedSchema composedFromSchema = (ComposedSchema) fromSchema;\n      ComposedSchema composedSchema = (ComposedSchema) schema;\n      if (composedFromSchema.getOneOf() != null) {\n        if (composedSchema.getOneOf() == null) {\n          composedSchema.setOneOf(new ArrayList<>());\n        }\n        composedSchema.getOneOf().addAll(composedFromSchema.getOneOf());\n      }\n    }\n    if (fromSchema.getDiscriminator() != null) {\n      if (schema.getDiscriminator() == null) {\n        schema.setDiscriminator(new Discriminator());\n      }\n      final Discriminator discriminator = schema.getDiscriminator();\n      final Discriminator fromDiscriminator = fromSchema.getDiscriminator();\n      if (fromDiscriminator.getPropertyName() != null) {\n        discriminator.setPropertyName(fromDiscriminator.getPropertyName());\n      }\n      if (fromDiscriminator.getMapping() != null) {\n        if (discriminator.getMapping() == null) {\n          discriminator.setMapping(new LinkedHashMap<>());\n        }\n        discriminator.getMapping().putAll(fromDiscriminator.getMapping());\n      }\n    }\n    if (fromSchema.getTitle() != null) {\n      schema.setTitle(fromSchema.getTitle());\n    }\n    if (fromSchema.getName() != null) {\n      schema.setName(fromSchema.getName());\n    }\n    if (fromSchema.getAdditionalProperties() != null) {\n      schema.setAdditionalProperties(fromSchema.getAdditionalProperties());\n    }\n    if (fromSchema.getDefault() != null) {\n      schema.setDefault(fromSchema.getDefault());\n    }\n    if (fromSchema.getExample() != null) {\n      schema.setExample(fromSchema.getExample());\n    }\n    if (fromSchema.getExternalDocs() != null) {\n      if (schema.getExternalDocs() == null) {\n        schema.setExternalDocs(new ExternalDocumentation());\n      }\n      final ExternalDocumentation externalDocs = schema.getExternalDocs();\n      final ExternalDocumentation fromExternalDocs = fromSchema.getExternalDocs();\n      if (fromExternalDocs.getDescription() != null) {\n        externalDocs.setDescription(fromExternalDocs.getDescription());\n      }\n      if (fromExternalDocs.getExtensions() != null) {\n        if (externalDocs.getExtensions() == null) {\n          externalDocs.setExtensions(new LinkedHashMap<>());\n        }\n        externalDocs.getExtensions().putAll(fromExternalDocs.getExtensions());\n      }\n      if (fromExternalDocs.getUrl() != null) {\n        externalDocs.setUrl(fromExternalDocs.getUrl());\n      }\n    }\n    if (fromSchema.getMaximum() != null) {\n      schema.setMaximum(fromSchema.getMaximum());\n    }\n    if (fromSchema.getMinimum() != null) {\n      schema.setMinimum(fromSchema.getMinimum());\n    }\n    if (fromSchema.getMaxItems() != null) {\n      schema.setMaxItems(fromSchema.getMaxItems());\n    }\n    if (fromSchema.getMinItems() != null) {\n      schema.setMinItems(fromSchema.getMinItems());\n    }\n    if (fromSchema.getMaxProperties() != null) {\n      schema.setMaxProperties(fromSchema.getMaxProperties());\n    }\n    if (fromSchema.getMinProperties() != null) {\n      schema.setMinProperties(fromSchema.getMinProperties());\n    }\n    if (fromSchema.getMaxLength() != null) {\n      schema.setMaxLength(fromSchema.getMaxLength());\n    }\n    if (fromSchema.getMinLength() != null) {\n      schema.setMinLength(fromSchema.getMinLength());\n    }\n    if (fromSchema.getMultipleOf() != null) {\n      schema.setMultipleOf(fromSchema.getMultipleOf());\n    }\n    if (fromSchema.getNot() != null) {\n      if (schema.getNot() == null) {\n        schema.setNot(addSchema(new Schema<>(), fromSchema.getNot()));\n      } else {\n        addSchema(schema.getNot(), fromSchema.getNot());\n      }\n    }\n    if (fromSchema.getPattern() != null) {\n      schema.setPattern(fromSchema.getPattern());\n    }\n    if (fromSchema.getXml() != null) {\n      if (schema.getXml() == null) {\n        schema.setXml(new XML());\n      }\n      final XML xml = schema.getXml();\n      final XML fromXml = fromSchema.getXml();\n      if (fromXml.getAttribute() != null) {\n        xml.setAttribute(fromXml.getAttribute());\n      }\n      if (fromXml.getName() != null) {\n        xml.setName(fromXml.getName());\n      }\n      if (fromXml.getNamespace() != null) {\n        xml.setNamespace(fromXml.getNamespace());\n      }\n      if (fromXml.getExtensions() != null) {\n        if (xml.getExtensions() == null) {\n          xml.setExtensions(new LinkedHashMap<>());\n        }\n        xml.getExtensions().putAll(fromXml.getExtensions());\n      }\n      if (fromXml.getPrefix() != null) {\n        xml.setPrefix(fromXml.getPrefix());\n      }\n      if (fromXml.getWrapped() != null) {\n        xml.setWrapped(fromXml.getWrapped());\n      }\n    }\n    return schema;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/SchemaDiff.java", "class_name": "SchemaDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/SchemaDiff.java.SchemaDiff", "attributes": {"modifiers": "protected static", "marker_annotations": [], "non_marker_annotations": ["protected", "static"], "comments": [], "return_type": "Schema<?>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/SchemaDiff.java.SchemaDiff.[String]getSchemaRef(Schema<?>)", "name": "getSchemaRef", "arg_nums": 1, "params": [{"name": "schema", "type": "Schema<?>"}], "return_type": "String", "signature": "private static String getSchemaRef(Schema<?> schema)", "original_string": "  private static String getSchemaRef(Schema<?> schema) {\n    return ofNullable(schema).map(Schema::get$ref).orElse(null);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/SchemaDiff.java", "class_name": "SchemaDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/SchemaDiff.java.SchemaDiff", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/SchemaDiff.java.SchemaDiff.[DeferredChanged<ChangedSchema>]diff(Schema,Schema,DiffContext)", "name": "diff", "arg_nums": 3, "params": [{"name": "left", "type": "Schema"}, {"name": "right", "type": "Schema"}, {"name": "context", "type": "DiffContext"}], "return_type": "DeferredChanged<ChangedSchema>", "signature": "public DeferredChanged<ChangedSchema> diff(Schema left, Schema right, DiffContext context)", "original_string": "  public DeferredChanged<ChangedSchema> diff(Schema left, Schema right, DiffContext context) {\n    return this.diff(new RecursiveSchemaSet(), left, right, context);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/SchemaDiff.java", "class_name": "SchemaDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/SchemaDiff.java.SchemaDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "DeferredChanged<ChangedSchema>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/SchemaDiff.java.SchemaDiff.[DeferredChanged<ChangedSchema>]diff(RecursiveSchemaSet,Schema,Schema,DiffContext)", "name": "diff", "arg_nums": 4, "params": [{"name": "refSet", "type": "RecursiveSchemaSet"}, {"name": "left", "type": "Schema"}, {"name": "right", "type": "Schema"}, {"name": "context", "type": "DiffContext"}], "return_type": "DeferredChanged<ChangedSchema>", "signature": "public DeferredChanged<ChangedSchema> diff(\n      RecursiveSchemaSet refSet, Schema left, Schema right, DiffContext context)", "original_string": "  public DeferredChanged<ChangedSchema> diff(\n      RecursiveSchemaSet refSet, Schema left, Schema right, DiffContext context) {\n    if (left == null && right == null) {\n      return new RealizedChanged<>(Optional.empty());\n    }\n    return computeDeferredDiff(refSet, left, right, context);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/SchemaDiff.java", "class_name": "SchemaDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/SchemaDiff.java.SchemaDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "DeferredChanged<ChangedSchema>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/SchemaDiff.java.SchemaDiff.[DeferredChanged<ChangedSchema>]getTypeChangedSchema(Schema,Schema,DiffContext)", "name": "getTypeChangedSchema", "arg_nums": 3, "params": [{"name": "left", "type": "Schema"}, {"name": "right", "type": "Schema"}, {"name": "context", "type": "DiffContext"}], "return_type": "DeferredChanged<ChangedSchema>", "signature": "public DeferredChanged<ChangedSchema> getTypeChangedSchema(\n      Schema left, Schema right, DiffContext context)", "original_string": "  public DeferredChanged<ChangedSchema> getTypeChangedSchema(\n      Schema left, Schema right, DiffContext context) {\n    return new RealizedChanged(\n        SchemaDiff.getSchemaDiffResult(openApiDiff)\n            .getChangedSchema()\n            .setOldSchema(left)\n            .setNewSchema(right)\n            .setChangedType(true)\n            .setContext(context));\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/SchemaDiff.java", "class_name": "SchemaDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/SchemaDiff.java.SchemaDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "DeferredChanged<ChangedSchema>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/SchemaDiff.java.SchemaDiff.[DeferredChanged<ChangedSchema>]computeDeferredDiff(RecursiveSchemaSet,Schema<?>,Schema<?>,DiffContext)", "name": "computeDeferredDiff", "arg_nums": 4, "params": [{"name": "refSet", "type": "RecursiveSchemaSet"}, {"name": "left", "type": "Schema<?>"}, {"name": "right", "type": "Schema<?>"}, {"name": "context", "type": "DiffContext"}], "return_type": "DeferredChanged<ChangedSchema>", "signature": "protected DeferredChanged<ChangedSchema> computeDeferredDiff(\n      RecursiveSchemaSet refSet, Schema<?> left, Schema<?> right, DiffContext context)", "original_string": "  protected DeferredChanged<ChangedSchema> computeDeferredDiff(\n      RecursiveSchemaSet refSet, Schema<?> left, Schema<?> right, DiffContext context) {\n\n    CacheKey key = new CacheKey(getSchemaRef(left), getSchemaRef(right), context);\n    if (key.getLeft() != null && key.getRight() != null) {\n      return openApiDiff.getDeferredSchemaCache().getOrAddSchema(refSet, key, left, right);\n    } else {\n      return computeDiffForReal(refSet, left, right, context);\n    }\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/SchemaDiff.java", "class_name": "SchemaDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/SchemaDiff.java.SchemaDiff", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "DeferredChanged<ChangedSchema>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/SchemaDiff.java.SchemaDiff.[DeferredChanged<ChangedSchema>]computeDiffForReal(RecursiveSchemaSet,Schema,Schema,DiffContext)", "name": "computeDiffForReal", "arg_nums": 4, "params": [{"name": "refSet", "type": "RecursiveSchemaSet"}, {"name": "left", "type": "Schema"}, {"name": "right", "type": "Schema"}, {"name": "context", "type": "DiffContext"}], "return_type": "DeferredChanged<ChangedSchema>", "signature": "public DeferredChanged<ChangedSchema> computeDiffForReal(\n      RecursiveSchemaSet refSet, Schema left, Schema right, DiffContext context)", "original_string": "  public DeferredChanged<ChangedSchema> computeDiffForReal(\n      RecursiveSchemaSet refSet, Schema left, Schema right, DiffContext context) {\n\n    left = refPointer.resolveRef(this.leftComponents, left, getSchemaRef(left));\n    right = refPointer.resolveRef(this.rightComponents, right, getSchemaRef(right));\n\n    left = resolveComposedSchema(leftComponents, left, new HashSet<>());\n    right = resolveComposedSchema(rightComponents, right, new HashSet<>());\n\n    // If type of schemas are different, just set old & new schema, set changedType to true in\n    // SchemaDiffResult and\n    // return the object\n    if ((left == null || right == null)\n        || !Objects.equals(left.getType(), right.getType())\n        || !Objects.equals(left.getFormat(), right.getFormat())) {\n      return getTypeChangedSchema(left, right, context);\n    }\n\n    // If schema type is same then get specific SchemaDiffResult and compare the properties\n    SchemaDiffResult result = SchemaDiff.getSchemaDiffResult(right.getClass(), openApiDiff);\n    return result.diff(refSet, leftComponents, rightComponents, left, right, context);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/SchemaDiff.java", "class_name": "SchemaDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/SchemaDiff.java.SchemaDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "DeferredChanged<ChangedSchema>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/ListDiff.java.ListDiff.[]ListDiff()", "name": "ListDiff", "arg_nums": 0, "params": [], "return_type": "", "signature": "private ListDiff()", "original_string": "  private ListDiff() {}", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/ListDiff.java", "class_name": "ListDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/ListDiff.java.ListDiff", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/ListDiff.java.ListDiff.[K]diff(K)", "name": "diff", "arg_nums": 1, "params": [{"name": "instance", "type": "K"}], "return_type": "K", "signature": "public static <K extends ChangedList<X>, X> K diff(K instance)", "original_string": "  public static <K extends ChangedList<X>, X> K diff(K instance) {\n    if (instance.getOldValue() == null && instance.getNewValue() == null) {\n      return instance;\n    }\n    if (instance.getOldValue() == null) {\n      instance.setIncreased(instance.getNewValue());\n      return instance;\n    }\n    if (instance.getNewValue() == null) {\n      instance.setMissing(instance.getOldValue());\n      return instance;\n    }\n    instance.getIncreased().addAll(instance.getNewValue());\n    for (X leftItem : instance.getOldValue()) {\n      if (instance.getNewValue().contains(leftItem)) {\n        instance.getIncreased().remove(leftItem);\n        instance.getShared().add(leftItem);\n      } else {\n        instance.getMissing().add(leftItem);\n      }\n    }\n    return instance;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/ListDiff.java", "class_name": "ListDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/ListDiff.java.ListDiff", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "K", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/HeadersDiff.java.HeadersDiff.[]HeadersDiff(OpenApiDiff)", "name": "HeadersDiff", "arg_nums": 1, "params": [{"name": "openApiDiff", "type": "OpenApiDiff"}], "return_type": "", "signature": "public HeadersDiff(OpenApiDiff openApiDiff)", "original_string": "  public HeadersDiff(OpenApiDiff openApiDiff) {\n    this.openApiDiff = openApiDiff;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/HeadersDiff.java", "class_name": "HeadersDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/HeadersDiff.java.HeadersDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/HeadersDiff.java.HeadersDiff.[DeferredChanged<ChangedHeaders>]diff(Map<String, Header>,Map<String, Header>,DiffContext)", "name": "diff", "arg_nums": 3, "params": [{"name": "left", "type": "Map<String, Header>"}, {"name": "right", "type": "Map<String, Header>"}, {"name": "context", "type": "DiffContext"}], "return_type": "DeferredChanged<ChangedHeaders>", "signature": "public DeferredChanged<ChangedHeaders> diff(\n      Map<String, Header> left, Map<String, Header> right, DiffContext context)", "original_string": "  public DeferredChanged<ChangedHeaders> diff(\n      Map<String, Header> left, Map<String, Header> right, DiffContext context) {\n    MapKeyDiff<String, Header> headerMapDiff = MapKeyDiff.diff(left, right);\n    List<String> sharedHeaderKeys = headerMapDiff.getSharedKey();\n\n    Map<String, ChangedHeader> changed = new LinkedHashMap<>();\n    DeferredBuilder<ChangedHeader> builder = new DeferredBuilder<>();\n    for (String headerKey : sharedHeaderKeys) {\n      Header oldHeader = left.get(headerKey);\n      Header newHeader = right.get(headerKey);\n      builder\n          .with(openApiDiff.getHeaderDiff().diff(oldHeader, newHeader, context))\n          .ifPresent(changedHeader -> changed.put(headerKey, changedHeader));\n    }\n    return builder\n        .build()\n        .mapOptional(\n            value ->\n                isChanged(\n                    new ChangedHeaders(left, right, context)\n                        .setIncreased(headerMapDiff.getIncreased())\n                        .setMissing(headerMapDiff.getMissing())\n                        .setChanged(changed)));\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/HeadersDiff.java", "class_name": "HeadersDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/HeadersDiff.java.HeadersDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "DeferredChanged<ChangedHeaders>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/OperationDiff.java.OperationDiff.[]OperationDiff(OpenApiDiff)", "name": "OperationDiff", "arg_nums": 1, "params": [{"name": "openApiDiff", "type": "OpenApiDiff"}], "return_type": "", "signature": "public OperationDiff(OpenApiDiff openApiDiff)", "original_string": "  public OperationDiff(OpenApiDiff openApiDiff) {\n    this.openApiDiff = openApiDiff;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/OperationDiff.java", "class_name": "OperationDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/OperationDiff.java.OperationDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/OperationDiff.java.OperationDiff.[DeferredChanged<ChangedOperation>]diff(Operation,Operation,DiffContext)", "name": "diff", "arg_nums": 3, "params": [{"name": "oldOperation", "type": "Operation"}, {"name": "newOperation", "type": "Operation"}, {"name": "context", "type": "DiffContext"}], "return_type": "DeferredChanged<ChangedOperation>", "signature": "public DeferredChanged<ChangedOperation> diff(\n      Operation oldOperation, Operation newOperation, DiffContext context)", "original_string": "  public DeferredChanged<ChangedOperation> diff(\n      Operation oldOperation, Operation newOperation, DiffContext context) {\n\n    DeferredBuilder<Changed> builder = new DeferredBuilder<>();\n    ChangedOperation changedOperation =\n        new ChangedOperation(context.getUrl(), context.getMethod(), oldOperation, newOperation);\n\n    log.debug(\n        \"Diff operation {} {}\", changedOperation.getPathUrl(), changedOperation.getHttpMethod());\n\n    builder\n        .with(\n            openApiDiff\n                .getMetadataDiff()\n                .diff(oldOperation.getSummary(), newOperation.getSummary(), context))\n        .ifPresent(changedOperation::setSummary);\n    builder\n        .with(\n            openApiDiff\n                .getMetadataDiff()\n                .diff(oldOperation.getDescription(), newOperation.getDescription(), context))\n        .ifPresent(changedOperation::setDescription);\n    builder\n        .with(\n            openApiDiff\n                .getMetadataDiff()\n                .diff(oldOperation.getOperationId(), newOperation.getOperationId(), context))\n        .ifPresent(changedOperation::setOperationId);\n    changedOperation.setDeprecated(\n        !Boolean.TRUE.equals(oldOperation.getDeprecated())\n            && Boolean.TRUE.equals(newOperation.getDeprecated()));\n\n    if (oldOperation.getRequestBody() != null || newOperation.getRequestBody() != null) {\n      builder\n          .with(\n              openApiDiff\n                  .getRequestBodyDiff()\n                  .diff(\n                      oldOperation.getRequestBody(),\n                      newOperation.getRequestBody(),\n                      context.copyAsRequest()))\n          .ifPresent(changedOperation::setRequestBody);\n    }\n\n    ParametersDiffResult parametersDiffResult =\n        openApiDiff\n            .getParametersDiff()\n            .diff(oldOperation.getParameters(), newOperation.getParameters(), context);\n    builder\n        .with(parametersDiffResult.deferredChanged)\n        .ifPresent(\n            params -> {\n              if (!parametersDiffResult.sameOperationsDiffSchema) {\n                removePathParameters(context.getParameters(), params);\n              }\n              changedOperation.setParameters(params);\n            });\n\n    if (oldOperation.getResponses() != null || newOperation.getResponses() != null) {\n      builder\n          .with(\n              openApiDiff\n                  .getApiResponseDiff()\n                  .diff(\n                      oldOperation.getResponses(),\n                      newOperation.getResponses(),\n                      context.copyAsResponse()))\n          .ifPresent(\n              responses -> {\n                log.debug(\n                    \"operation \"\n                        + changedOperation.getPathUrl()\n                        + \" \"\n                        + changedOperation.getHttpMethod()\n                        + \" setting api responses \"\n                        + responses.getChangedElements().stream()\n                            .filter(Objects::nonNull)\n                            .map(Changed::isChanged)\n                            .filter(Objects::nonNull)\n                            .map(Enum::toString)\n                            .collect(Collectors.joining(\",\")));\n                changedOperation.setApiResponses(responses);\n              });\n    }\n\n    if (oldOperation.getSecurity() != null || newOperation.getSecurity() != null) {\n      builder\n          .with(\n              openApiDiff\n                  .getSecurityRequirementsDiff()\n                  .diff(oldOperation.getSecurity(), newOperation.getSecurity(), context))\n          .ifPresent(changedOperation::setSecurityRequirements);\n    }\n\n    builder\n        .with(\n            openApiDiff\n                .getExtensionsDiff()\n                .diff(oldOperation.getExtensions(), newOperation.getExtensions(), context))\n        .ifPresent(changedOperation::setExtensions);\n\n    return builder\n        .build()\n        .mapOptional(\n            value -> {\n              Optional<ChangedOperation> changed = isChanged(changedOperation);\n              log.debug(\n                  \"Is changed operation \"\n                      + changedOperation.getPathUrl()\n                      + \" \"\n                      + changedOperation.getHttpMethod()\n                      + \" changed: \"\n                      + changed.map(ComposedChanged::isChanged).orElse(null));\n              return changed;\n            });\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/OperationDiff.java", "class_name": "OperationDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/OperationDiff.java.OperationDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "DeferredChanged<ChangedOperation>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/OperationDiff.java.OperationDiff.[void]removePathParameters(Map<String, String>,ChangedParameters)", "name": "removePathParameters", "arg_nums": 2, "params": [{"name": "pathParameters", "type": "Map<String, String>"}, {"name": "params", "type": "ChangedParameters"}], "return_type": "void", "signature": "public void removePathParameters(Map<String, String> pathParameters, ChangedParameters params)", "original_string": "  public void removePathParameters(Map<String, String> pathParameters, ChangedParameters params) {\n    pathParameters.forEach(\n        (oldParam, newParam) -> {\n          removePathParameter(oldParam, params.getMissing());\n          removePathParameter(newParam, params.getIncreased());\n        });\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/OperationDiff.java", "class_name": "OperationDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/OperationDiff.java.OperationDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/OperationDiff.java.OperationDiff.[void]removePathParameter(String,List<Parameter>)", "name": "removePathParameter", "arg_nums": 2, "params": [{"name": "name", "type": "String"}, {"name": "parameters", "type": "List<Parameter>"}], "return_type": "void", "signature": "public void removePathParameter(String name, List<Parameter> parameters)", "original_string": "  public void removePathParameter(String name, List<Parameter> parameters) {\n    parameters.stream()\n        .filter(p -> \"path\".equals(p.getIn()) && name.equals(p.getName()))\n        .findFirst()\n        .ifPresent(parameters::remove);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/OperationDiff.java", "class_name": "OperationDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/OperationDiff.java.OperationDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/RequestBodyDiff.java.RequestBodyDiff.[]RequestBodyDiff(OpenApiDiff)", "name": "RequestBodyDiff", "arg_nums": 1, "params": [{"name": "openApiDiff", "type": "OpenApiDiff"}], "return_type": "", "signature": "public RequestBodyDiff(OpenApiDiff openApiDiff)", "original_string": "  public RequestBodyDiff(OpenApiDiff openApiDiff) {\n    this.openApiDiff = openApiDiff;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/RequestBodyDiff.java", "class_name": "RequestBodyDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/RequestBodyDiff.java.RequestBodyDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/RequestBodyDiff.java.RequestBodyDiff.[Map<String, Object>]getExtensions(RequestBody)", "name": "getExtensions", "arg_nums": 1, "params": [{"name": "body", "type": "RequestBody"}], "return_type": "Map<String, Object>", "signature": "private static Map<String, Object> getExtensions(RequestBody body)", "original_string": "  private static Map<String, Object> getExtensions(RequestBody body) {\n    return ofNullable(body).map(RequestBody::getExtensions).orElse(null);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/RequestBodyDiff.java", "class_name": "RequestBodyDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/RequestBodyDiff.java.RequestBodyDiff", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "Map<String, Object>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/RequestBodyDiff.java.RequestBodyDiff.[DeferredChanged<ChangedRequestBody>]diff(RequestBody,RequestBody,DiffContext)", "name": "diff", "arg_nums": 3, "params": [{"name": "left", "type": "RequestBody"}, {"name": "right", "type": "RequestBody"}, {"name": "context", "type": "DiffContext"}], "return_type": "DeferredChanged<ChangedRequestBody>", "signature": "public DeferredChanged<ChangedRequestBody> diff(\n      RequestBody left, RequestBody right, DiffContext context)", "original_string": "  public DeferredChanged<ChangedRequestBody> diff(\n      RequestBody left, RequestBody right, DiffContext context) {\n    String leftRef = left != null ? left.get$ref() : null;\n    String rightRef = right != null ? right.get$ref() : null;\n    return cachedDiff(new HashSet<>(), left, right, leftRef, rightRef, context);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/RequestBodyDiff.java", "class_name": "RequestBodyDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/RequestBodyDiff.java.RequestBodyDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "DeferredChanged<ChangedRequestBody>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/RequestBodyDiff.java.RequestBodyDiff.[DeferredChanged<ChangedRequestBody>]computeDiff(HashSet<String>,RequestBody,RequestBody,DiffContext)", "name": "computeDiff", "arg_nums": 4, "params": [{"name": "refSet", "type": "HashSet<String>"}, {"name": "left", "type": "RequestBody"}, {"name": "right", "type": "RequestBody"}, {"name": "context", "type": "DiffContext"}], "return_type": "DeferredChanged<ChangedRequestBody>", "signature": "@Override\n  protected DeferredChanged<ChangedRequestBody> computeDiff(\n      HashSet<String> refSet, RequestBody left, RequestBody right, DiffContext context)", "original_string": "  @Override\n  protected DeferredChanged<ChangedRequestBody> computeDiff(\n      HashSet<String> refSet, RequestBody left, RequestBody right, DiffContext context) {\n    DeferredBuilder<Changed> builder = new DeferredBuilder<>();\n\n    Content oldRequestContent = new Content();\n    Content newRequestContent = new Content();\n    RequestBody oldRequestBody = null;\n    RequestBody newRequestBody = null;\n    if (left != null) {\n      oldRequestBody =\n          refPointer.resolveRef(\n              openApiDiff.getOldSpecOpenApi().getComponents(), left, left.get$ref());\n      if (oldRequestBody.getContent() != null) {\n        oldRequestContent = oldRequestBody.getContent();\n      }\n    }\n    if (right != null) {\n      newRequestBody =\n          refPointer.resolveRef(\n              openApiDiff.getNewSpecOpenApi().getComponents(), right, right.get$ref());\n      if (newRequestBody.getContent() != null) {\n        newRequestContent = newRequestBody.getContent();\n      }\n    }\n    boolean leftRequired =\n        oldRequestBody != null && Boolean.TRUE.equals(oldRequestBody.getRequired());\n    boolean rightRequired =\n        newRequestBody != null && Boolean.TRUE.equals(newRequestBody.getRequired());\n\n    ChangedRequestBody changedRequestBody =\n        new ChangedRequestBody(oldRequestBody, newRequestBody, context)\n            .setChangeRequired(leftRequired != rightRequired);\n    builder\n        .with(\n            openApiDiff\n                .getMetadataDiff()\n                .diff(\n                    oldRequestBody != null ? oldRequestBody.getDescription() : null,\n                    newRequestBody != null ? newRequestBody.getDescription() : null,\n                    context))\n        .ifPresent(changedRequestBody::setDescription);\n    builder\n        .with(openApiDiff.getContentDiff().diff(oldRequestContent, newRequestContent, context))\n        .ifPresent(changedRequestBody::setContent);\n    builder\n        .with(\n            openApiDiff\n                .getExtensionsDiff()\n                .diff(getExtensions(left), getExtensions(right), context))\n        .ifPresent(changedRequestBody::setExtensions);\n\n    return builder.buildIsChanged(changedRequestBody);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/RequestBodyDiff.java", "class_name": "RequestBodyDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/RequestBodyDiff.java.RequestBodyDiff", "attributes": {"modifiers": "@Override\n  protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "DeferredChanged<ChangedRequestBody>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/SecurityRequirementsDiff.java.SecurityRequirementsDiff.[]SecurityRequirementsDiff(OpenApiDiff)", "name": "SecurityRequirementsDiff", "arg_nums": 1, "params": [{"name": "openApiDiff", "type": "OpenApiDiff"}], "return_type": "", "signature": "public SecurityRequirementsDiff(OpenApiDiff openApiDiff)", "original_string": "  public SecurityRequirementsDiff(OpenApiDiff openApiDiff) {\n    this.openApiDiff = openApiDiff;\n    this.leftComponents =\n        openApiDiff.getOldSpecOpenApi() != null\n            ? openApiDiff.getOldSpecOpenApi().getComponents()\n            : null;\n    this.rightComponents =\n        openApiDiff.getNewSpecOpenApi() != null\n            ? openApiDiff.getNewSpecOpenApi().getComponents()\n            : null;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/SecurityRequirementsDiff.java", "class_name": "SecurityRequirementsDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/SecurityRequirementsDiff.java.SecurityRequirementsDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/SecurityRequirementsDiff.java.SecurityRequirementsDiff.[Optional<SecurityRequirement>]contains(List<SecurityRequirement>,SecurityRequirement)", "name": "contains", "arg_nums": 2, "params": [{"name": "securityRequirements", "type": "List<SecurityRequirement>"}, {"name": "left", "type": "SecurityRequirement"}], "return_type": "Optional<SecurityRequirement>", "signature": "public Optional<SecurityRequirement> contains(\n      List<SecurityRequirement> securityRequirements, SecurityRequirement left)", "original_string": "  public Optional<SecurityRequirement> contains(\n      List<SecurityRequirement> securityRequirements, SecurityRequirement left) {\n    return securityRequirements.stream()\n        .filter(rightSecurities -> same(left, rightSecurities))\n        .findFirst();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/SecurityRequirementsDiff.java", "class_name": "SecurityRequirementsDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/SecurityRequirementsDiff.java.SecurityRequirementsDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Optional<SecurityRequirement>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/SecurityRequirementsDiff.java.SecurityRequirementsDiff.[boolean]same(SecurityRequirement,SecurityRequirement)", "name": "same", "arg_nums": 2, "params": [{"name": "left", "type": "SecurityRequirement"}, {"name": "right", "type": "SecurityRequirement"}], "return_type": "boolean", "signature": "public boolean same(SecurityRequirement left, SecurityRequirement right)", "original_string": "  public boolean same(SecurityRequirement left, SecurityRequirement right) {\n    List<Pair<SecurityScheme.Type, SecurityScheme.In>> leftTypes =\n        getListOfSecuritySchemes(leftComponents, left);\n    List<Pair<SecurityScheme.Type, SecurityScheme.In>> rightTypes =\n        getListOfSecuritySchemes(rightComponents, right);\n\n    return CollectionUtils.isEqualCollection(leftTypes, rightTypes);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/SecurityRequirementsDiff.java", "class_name": "SecurityRequirementsDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/SecurityRequirementsDiff.java.SecurityRequirementsDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/SecurityRequirementsDiff.java.SecurityRequirementsDiff.[List<Pair<SecurityScheme.Type, SecurityScheme.In>>]getListOfSecuritySchemes(Components,SecurityRequirement)", "name": "getListOfSecuritySchemes", "arg_nums": 2, "params": [{"name": "components", "type": "Components"}, {"name": "securityRequirement", "type": "SecurityRequirement"}], "return_type": "List<Pair<SecurityScheme.Type, SecurityScheme.In>>", "signature": "private List<Pair<SecurityScheme.Type, SecurityScheme.In>> getListOfSecuritySchemes(\n      Components components, SecurityRequirement securityRequirement)", "original_string": "  private List<Pair<SecurityScheme.Type, SecurityScheme.In>> getListOfSecuritySchemes(\n      Components components, SecurityRequirement securityRequirement) {\n    return securityRequirement.keySet().stream()\n        .map(\n            x -> {\n              if (components == null) {\n                throw new IllegalArgumentException(\"Missing securitySchemes component definition.\");\n              }\n              Map<String, SecurityScheme> securitySchemes = components.getSecuritySchemes();\n              if (securitySchemes == null) {\n                throw new IllegalArgumentException(\"Missing securitySchemes component definition.\");\n              }\n\n              SecurityScheme result = securitySchemes.get(x);\n              if (result == null) {\n                throw new IllegalArgumentException(\"Impossible to find security scheme: \" + x);\n              }\n\n              return result;\n            })\n        .map(this::getPair)\n        .distinct()\n        .collect(Collectors.toList());\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/SecurityRequirementsDiff.java", "class_name": "SecurityRequirementsDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/SecurityRequirementsDiff.java.SecurityRequirementsDiff", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "List<Pair<SecurityScheme.Type, SecurityScheme.In>>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/SecurityRequirementsDiff.java.SecurityRequirementsDiff.[Pair<SecurityScheme.Type, SecurityScheme.In>]getPair(SecurityScheme)", "name": "getPair", "arg_nums": 1, "params": [{"name": "securityScheme", "type": "SecurityScheme"}], "return_type": "Pair<SecurityScheme.Type, SecurityScheme.In>", "signature": "private Pair<SecurityScheme.Type, SecurityScheme.In> getPair(SecurityScheme securityScheme)", "original_string": "  private Pair<SecurityScheme.Type, SecurityScheme.In> getPair(SecurityScheme securityScheme) {\n    return new ImmutablePair<>(securityScheme.getType(), securityScheme.getIn());\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/SecurityRequirementsDiff.java", "class_name": "SecurityRequirementsDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/SecurityRequirementsDiff.java.SecurityRequirementsDiff", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "Pair<SecurityScheme.Type, SecurityScheme.In>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/SecurityRequirementsDiff.java.SecurityRequirementsDiff.[DeferredChanged<ChangedSecurityRequirements>]diff(List<SecurityRequirement>,List<SecurityRequirement>,DiffContext)", "name": "diff", "arg_nums": 3, "params": [{"name": "left", "type": "List<SecurityRequirement>"}, {"name": "right", "type": "List<SecurityRequirement>"}, {"name": "context", "type": "DiffContext"}], "return_type": "DeferredChanged<ChangedSecurityRequirements>", "signature": "protected DeferredChanged<ChangedSecurityRequirements> diff(\n      List<SecurityRequirement> left, List<SecurityRequirement> right, DiffContext context)", "original_string": "  protected DeferredChanged<ChangedSecurityRequirements> diff(\n      List<SecurityRequirement> left, List<SecurityRequirement> right, DiffContext context) {\n\n    DeferredBuilder<Changed> builder = new DeferredBuilder<>();\n\n    left = left == null ? new ArrayList<>() : left;\n    right = right == null ? new ArrayList<>() : getCopy(right);\n\n    ChangedSecurityRequirements changedSecurityRequirements =\n        new ChangedSecurityRequirements(left, right, context);\n\n    for (SecurityRequirement leftSecurity : left) {\n      Optional<SecurityRequirement> rightSecOpt = contains(right, leftSecurity);\n      if (!rightSecOpt.isPresent()) {\n        changedSecurityRequirements.addMissing(leftSecurity);\n      } else {\n        SecurityRequirement rightSec = rightSecOpt.get();\n        right.remove(rightSec);\n        builder\n            .with(openApiDiff.getSecurityRequirementDiff().diff(leftSecurity, rightSec, context))\n            .ifPresent(changedSecurityRequirements::addChanged);\n      }\n    }\n    right.forEach(changedSecurityRequirements::addIncreased);\n\n    return builder.buildIsChanged(changedSecurityRequirements);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/SecurityRequirementsDiff.java", "class_name": "SecurityRequirementsDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/SecurityRequirementsDiff.java.SecurityRequirementsDiff", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "DeferredChanged<ChangedSecurityRequirements>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/SecurityRequirementsDiff.java.SecurityRequirementsDiff.[List<SecurityRequirement>]getCopy(List<SecurityRequirement>)", "name": "getCopy", "arg_nums": 1, "params": [{"name": "right", "type": "List<SecurityRequirement>"}], "return_type": "List<SecurityRequirement>", "signature": "private List<SecurityRequirement> getCopy(List<SecurityRequirement> right)", "original_string": "  private List<SecurityRequirement> getCopy(List<SecurityRequirement> right) {\n    return right.stream().map(SecurityRequirementDiff::getCopy).collect(Collectors.toList());\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/SecurityRequirementsDiff.java", "class_name": "SecurityRequirementsDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/SecurityRequirementsDiff.java.SecurityRequirementsDiff", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "List<SecurityRequirement>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/ApiResponseDiff.java.ApiResponseDiff.[]ApiResponseDiff(OpenApiDiff)", "name": "ApiResponseDiff", "arg_nums": 1, "params": [{"name": "openApiDiff", "type": "OpenApiDiff"}], "return_type": "", "signature": "public ApiResponseDiff(OpenApiDiff openApiDiff)", "original_string": "  public ApiResponseDiff(OpenApiDiff openApiDiff) {\n    this.openApiDiff = openApiDiff;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/ApiResponseDiff.java", "class_name": "ApiResponseDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/ApiResponseDiff.java.ApiResponseDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/ApiResponseDiff.java.ApiResponseDiff.[DeferredChanged<ChangedApiResponse>]diff(ApiResponses,ApiResponses,DiffContext)", "name": "diff", "arg_nums": 3, "params": [{"name": "left", "type": "ApiResponses"}, {"name": "right", "type": "ApiResponses"}, {"name": "context", "type": "DiffContext"}], "return_type": "DeferredChanged<ChangedApiResponse>", "signature": "public DeferredChanged<ChangedApiResponse> diff(\n      @Nullable ApiResponses left, @Nullable ApiResponses right, DiffContext context)", "original_string": "  public DeferredChanged<ChangedApiResponse> diff(\n      @Nullable ApiResponses left, @Nullable ApiResponses right, DiffContext context) {\n    MapKeyDiff<String, ApiResponse> responseMapKeyDiff = MapKeyDiff.diff(left, right);\n    List<String> sharedResponseCodes = responseMapKeyDiff.getSharedKey();\n    Map<String, ChangedResponse> resps = new LinkedHashMap<>();\n    DeferredBuilder<Changed> builder = new DeferredBuilder<>();\n\n    for (String responseCode : sharedResponseCodes) {\n      builder\n          .with(\n              openApiDiff\n                  .getResponseDiff()\n                  .diff(\n                      left != null ? left.get(responseCode) : null,\n                      right != null ? right.get(responseCode) : null,\n                      context))\n          .ifPresent(changedResponse -> resps.put(responseCode, changedResponse));\n    }\n    ChangedApiResponse changedApiResponse =\n        new ChangedApiResponse(left, right, context)\n            .setIncreased(responseMapKeyDiff.getIncreased())\n            .setMissing(responseMapKeyDiff.getMissing())\n            .setChanged(resps);\n    builder\n        .with(\n            openApiDiff\n                .getExtensionsDiff()\n                .diff(\n                    left != null ? left.getExtensions() : null,\n                    right != null ? right.getExtensions() : null,\n                    context))\n        .ifPresent(changedApiResponse::setExtensions);\n    return builder.buildIsChanged(changedApiResponse);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/ApiResponseDiff.java", "class_name": "ApiResponseDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/ApiResponseDiff.java.ApiResponseDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "DeferredChanged<ChangedApiResponse>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/ParametersDiff.java.ParametersDiffResult.[]ParametersDiffResult(DeferredChanged<ChangedParameters>,boolean)", "name": "ParametersDiffResult", "arg_nums": 2, "params": [{"name": "deferredChanged", "type": "DeferredChanged<ChangedParameters>"}, {"name": "sameOperationsDiffSchema", "type": "boolean"}], "return_type": "", "signature": "public ParametersDiffResult(\n      DeferredChanged<ChangedParameters> deferredChanged, boolean sameOperationsDiffSchema)", "original_string": "  public ParametersDiffResult(\n      DeferredChanged<ChangedParameters> deferredChanged, boolean sameOperationsDiffSchema) {\n    this.deferredChanged = deferredChanged;\n    this.sameOperationsDiffSchema = sameOperationsDiffSchema;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/ParametersDiff.java", "class_name": "ParametersDiffResult", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/ParametersDiff.java.ParametersDiffResult", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/ParametersDiff.java.ParametersDiff.[]ParametersDiff(OpenApiDiff)", "name": "ParametersDiff", "arg_nums": 1, "params": [{"name": "openApiDiff", "type": "OpenApiDiff"}], "return_type": "", "signature": "public ParametersDiff(OpenApiDiff openApiDiff)", "original_string": "  public ParametersDiff(OpenApiDiff openApiDiff) {\n    this.openApiDiff = openApiDiff;\n    this.leftComponents =\n        openApiDiff.getOldSpecOpenApi() != null\n            ? openApiDiff.getOldSpecOpenApi().getComponents()\n            : null;\n    this.rightComponents =\n        openApiDiff.getNewSpecOpenApi() != null\n            ? openApiDiff.getNewSpecOpenApi().getComponents()\n            : null;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/ParametersDiff.java", "class_name": "ParametersDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/ParametersDiff.java.ParametersDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/ParametersDiff.java.ParametersDiff.[Optional<Parameter>]contains(Components,List<Parameter>,Parameter)", "name": "contains", "arg_nums": 3, "params": [{"name": "components", "type": "Components"}, {"name": "parameters", "type": "List<Parameter>"}, {"name": "parameter", "type": "Parameter"}], "return_type": "Optional<Parameter>", "signature": "public static Optional<Parameter> contains(\n      Components components, List<Parameter> parameters, Parameter parameter)", "original_string": "  public static Optional<Parameter> contains(\n      Components components, List<Parameter> parameters, Parameter parameter) {\n    return parameters.stream()\n        .filter(param -> same(refPointer.resolveRef(components, param, param.get$ref()), parameter))\n        .findFirst();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/ParametersDiff.java", "class_name": "ParametersDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/ParametersDiff.java.ParametersDiff", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Optional<Parameter>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/ParametersDiff.java.ParametersDiff.[boolean]same(Parameter,Parameter)", "name": "same", "arg_nums": 2, "params": [{"name": "left", "type": "Parameter"}, {"name": "right", "type": "Parameter"}], "return_type": "boolean", "signature": "public static boolean same(Parameter left, Parameter right)", "original_string": "  public static boolean same(Parameter left, Parameter right) {\n    return Objects.equals(left.getName(), right.getName())\n        && Objects.equals(left.getIn(), right.getIn());\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/ParametersDiff.java", "class_name": "ParametersDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/ParametersDiff.java.ParametersDiff", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/ParametersDiff.java.ParametersDiff.[ParametersDiffResult]diff(List<Parameter>,List<Parameter>,DiffContext)", "name": "diff", "arg_nums": 3, "params": [{"name": "left", "type": "List<Parameter>"}, {"name": "right", "type": "List<Parameter>"}, {"name": "context", "type": "DiffContext"}], "return_type": "ParametersDiffResult", "signature": "public ParametersDiffResult diff(\n      final List<Parameter> left, final List<Parameter> right, final DiffContext context)", "original_string": "  public ParametersDiffResult diff(\n      final List<Parameter> left, final List<Parameter> right, final DiffContext context) {\n    final DeferredBuilder<Changed> builder = new DeferredBuilder<>();\n    final List<Parameter> wLeft = Optional.ofNullable(left).orElseGet(Collections::emptyList);\n    final List<Parameter> wRight =\n        Optional.ofNullable(right).map(ArrayList::new).orElseGet(ArrayList::new);\n\n    final ChangedParameters changedParameters = new ChangedParameters(wLeft, wRight, context);\n\n    for (Parameter leftParam : wLeft) {\n      leftParam = refPointer.resolveRef(leftComponents, leftParam, leftParam.get$ref());\n      Optional<Parameter> rightParamOpt = contains(rightComponents, wRight, leftParam);\n      if (!rightParamOpt.isPresent()) {\n        changedParameters.getMissing().add(leftParam);\n      } else {\n        Parameter rightParam = rightParamOpt.get();\n        wRight.remove(rightParam);\n        builder\n            .with(openApiDiff.getParameterDiff().diff(leftParam, rightParam, context))\n            .ifPresent(changedParameters.getChanged()::add);\n      }\n    }\n    changedParameters.getIncreased().addAll(wRight);\n    return new ParametersDiffResult(\n        builder.buildIsChanged(changedParameters),\n        pathUnchangedParametersChanged(changedParameters, context));\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/ParametersDiff.java", "class_name": "ParametersDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/ParametersDiff.java.ParametersDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ParametersDiffResult", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/ParametersDiff.java.ParametersDiff.[boolean]pathUnchangedParametersChanged(ChangedParameters,DiffContext)", "name": "pathUnchangedParametersChanged", "arg_nums": 2, "params": [{"name": "changedParameters", "type": "ChangedParameters"}, {"name": "context", "type": "DiffContext"}], "return_type": "boolean", "signature": "public boolean pathUnchangedParametersChanged(\n      ChangedParameters changedParameters, DiffContext context)", "original_string": "  public boolean pathUnchangedParametersChanged(\n      ChangedParameters changedParameters, DiffContext context) {\n    if (!pathUnchanged(changedParameters, context)) return false;\n    // If missing and increased parameter count is different, it's a new endpoint\n    if (changedParameters.getMissing().size() != changedParameters.getIncreased().size())\n      return false;\n    // Go through each missing Parameter and compare it to newly added Parameters\n    for (Parameter parameter : changedParameters.getMissing()) {\n      // Speedy Check. Use the map already created in changedParameters to check if missing param is\n      // linked to newParam\n      String newParameterName = context.getParameters().get(parameter.getName());\n      if (StringUtils.isBlank(newParameterName)) return false;\n\n      Optional<Parameter> newParameter =\n          changedParameters.getIncreased().stream()\n              .filter(p -> p.getName().equals(newParameterName))\n              .findFirst();\n      if (!newParameter.isPresent()) return false;\n\n      // Check if  the old and new Parameters match . IF so, return TRUE\n      Parameter newParameterRealized = newParameter.get();\n      newParameterRealized.setName(parameter.getName()); // Make names similar\n      boolean samePathDifferentParameter = !newParameterRealized.equals(parameter);\n      newParameterRealized.setName(\n          newParameterName); // Important:: MUST Reset the name as this is not a copy\n      return samePathDifferentParameter;\n    }\n    return false;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/ParametersDiff.java", "class_name": "ParametersDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/ParametersDiff.java.ParametersDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/ParametersDiff.java.ParametersDiff.[boolean]pathUnchanged(ChangedParameters,DiffContext)", "name": "pathUnchanged", "arg_nums": 2, "params": [{"name": "changedParameters", "type": "ChangedParameters"}, {"name": "context", "type": "DiffContext"}], "return_type": "boolean", "signature": "public boolean pathUnchanged(ChangedParameters changedParameters, DiffContext context)", "original_string": "  public boolean pathUnchanged(ChangedParameters changedParameters, DiffContext context) {\n    final String REGEX_PATH = \"\\\\{([^/]+)}\";\n    String oldUrl = context.getLeftUrl();\n    String newUrl = context.getRightUrl();\n    ArrayList<String> oldUrlPathParams = matchedItems(oldUrl, REGEX_PATH);\n    ArrayList<String> newUrlPathParams = matchedItems(newUrl, REGEX_PATH);\n    // Path Param count doesn't match or param-less path doesn't match or param is changed --> It's\n    // a new endpoint\n    return oldUrlPathParams.size() == newUrlPathParams.size()\n        && changedParameters.getChanged().isEmpty()\n        && oldUrl.replaceAll(REGEX_PATH, \"\").equals(newUrl.replaceAll(REGEX_PATH, \"\"));\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/ParametersDiff.java", "class_name": "ParametersDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/ParametersDiff.java.ParametersDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/ParametersDiff.java.ParametersDiff.[ArrayList<String>]matchedItems(String,String)", "name": "matchedItems", "arg_nums": 2, "params": [{"name": "string", "type": "String"}, {"name": "regex", "type": "String"}], "return_type": "ArrayList<String>", "signature": "public ArrayList<String> matchedItems(String string, String regex)", "original_string": "  public ArrayList<String> matchedItems(String string, String regex) {\n    Matcher matcher = Pattern.compile(regex).matcher(string);\n    ArrayList<String> matchedItems = new ArrayList<>();\n    while (matcher.find()) {\n      String item = matcher.group();\n      matchedItems.add(item.substring(0, matcher.group().length() - 1).replaceFirst(\"\\\\{\", \"\"));\n    }\n    return matchedItems;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/ParametersDiff.java", "class_name": "ParametersDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/ParametersDiff.java.ParametersDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ArrayList<String>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/PathsDiff.java.PathsDiff.[]PathsDiff(OpenApiDiff)", "name": "PathsDiff", "arg_nums": 1, "params": [{"name": "openApiDiff", "type": "OpenApiDiff"}], "return_type": "", "signature": "public PathsDiff(OpenApiDiff openApiDiff)", "original_string": "  public PathsDiff(OpenApiDiff openApiDiff) {\n    this.openApiDiff = openApiDiff;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/PathsDiff.java", "class_name": "PathsDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/PathsDiff.java.PathsDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/PathsDiff.java.PathsDiff.[String]normalizePath(String)", "name": "normalizePath", "arg_nums": 1, "params": [{"name": "path", "type": "String"}], "return_type": "String", "signature": "private static String normalizePath(String path)", "original_string": "  private static String normalizePath(String path) {\n    return path.replaceAll(REGEX_PATH, \"{}\");\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/PathsDiff.java", "class_name": "PathsDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/PathsDiff.java.PathsDiff", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/PathsDiff.java.PathsDiff.[List<String>]extractParameters(String)", "name": "extractParameters", "arg_nums": 1, "params": [{"name": "path", "type": "String"}], "return_type": "List<String>", "signature": "private static List<String> extractParameters(String path)", "original_string": "  private static List<String> extractParameters(String path) {\n    ArrayList<String> params = new ArrayList<>();\n    Pattern pattern = Pattern.compile(REGEX_PATH);\n    Matcher matcher = pattern.matcher(path);\n    while (matcher.find()) {\n      params.add(matcher.group(1));\n    }\n    return params;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/PathsDiff.java", "class_name": "PathsDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/PathsDiff.java.PathsDiff", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "List<String>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/PathsDiff.java.PathsDiff.[DeferredChanged<ChangedPaths>]diff(Map<String, PathItem>,Map<String, PathItem>)", "name": "diff", "arg_nums": 2, "params": [{"name": "left", "type": "Map<String, PathItem>"}, {"name": "right", "type": "Map<String, PathItem>"}], "return_type": "DeferredChanged<ChangedPaths>", "signature": "public DeferredChanged<ChangedPaths> diff(\n      final Map<String, PathItem> left, final Map<String, PathItem> right)", "original_string": "  public DeferredChanged<ChangedPaths> diff(\n      final Map<String, PathItem> left, final Map<String, PathItem> right) {\n    DeferredBuilder<Changed> builder = new DeferredBuilder<>();\n\n    ChangedPaths changedPaths = new ChangedPaths(left, right, openApiDiff.getOptions());\n    changedPaths.getIncreased().putAll(right);\n\n    left.keySet()\n        .forEach(\n            (String url) -> {\n              PathItem leftPath = left.get(url);\n              String template = normalizePath(url);\n              Optional<Map.Entry<String, PathItem>> result =\n                  changedPaths.getIncreased().entrySet().stream()\n                      .filter(item -> normalizePath(item.getKey()).equals(template))\n                      .min(\n                          (a, b) -> {\n                            if (methodsAndParametersIntersect(a.getValue(), b.getValue())) {\n                              throw new IllegalArgumentException(\n                                  \"Two path items have the same signature: \" + template);\n                            }\n                            if (a.getKey().equals(url)) {\n                              return -1;\n                            } else if (b.getKey().equals((url))) {\n                              return 1;\n                            } else {\n                              HashSet<PathItem.HttpMethod> methodsA =\n                                  new HashSet<>(a.getValue().readOperationsMap().keySet());\n                              methodsA.retainAll(leftPath.readOperationsMap().keySet());\n                              HashSet<PathItem.HttpMethod> methodsB =\n                                  new HashSet<>(b.getValue().readOperationsMap().keySet());\n                              methodsB.retainAll(leftPath.readOperationsMap().keySet());\n                              return Integer.compare(methodsB.size(), methodsA.size());\n                            }\n                          });\n              if (result.isPresent()) {\n                String rightUrl = result.get().getKey();\n                PathItem rightPath = changedPaths.getIncreased().remove(rightUrl);\n                Map<String, String> params = new LinkedHashMap<>();\n                if (!url.equals(rightUrl)) {\n                  List<String> oldParams = extractParameters(url);\n                  List<String> newParams = extractParameters(rightUrl);\n                  for (int i = 0; i < oldParams.size(); i++) {\n                    params.put(oldParams.get(i), newParams.get(i));\n                  }\n                }\n                DiffContext context = new DiffContext(openApiDiff.getOptions());\n                context.setUrl(url);\n                context.setParameters(params);\n                context.setLeftAndRightUrls(url, rightUrl);\n                builder\n                    .with(openApiDiff.getPathDiff().diff(leftPath, rightPath, context))\n                    .ifPresent(path -> changedPaths.getChanged().put(rightUrl, path));\n              } else {\n                changedPaths.getMissing().put(url, leftPath);\n              }\n            });\n    return builder.buildIsChanged(changedPaths);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/PathsDiff.java", "class_name": "PathsDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/PathsDiff.java.PathsDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "DeferredChanged<ChangedPaths>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/PathsDiff.java.PathsDiff.[Paths]valOrEmpty(Paths)", "name": "valOrEmpty", "arg_nums": 1, "params": [{"name": "path", "type": "Paths"}], "return_type": "Paths", "signature": "public static Paths valOrEmpty(Paths path)", "original_string": "  public static Paths valOrEmpty(Paths path) {\n    if (path == null) {\n      path = new Paths();\n    }\n    return path;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/PathsDiff.java", "class_name": "PathsDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/PathsDiff.java.PathsDiff", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Paths", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/PathsDiff.java.PathsDiff.[boolean]methodsAndParametersIntersect(PathItem,PathItem)", "name": "methodsAndParametersIntersect", "arg_nums": 2, "params": [{"name": "a", "type": "PathItem"}, {"name": "b", "type": "PathItem"}], "return_type": "boolean", "signature": "private static boolean methodsAndParametersIntersect(PathItem a, PathItem b)", "original_string": "  private static boolean methodsAndParametersIntersect(PathItem a, PathItem b) {\n    Set<PathItem.HttpMethod> methodsA = a.readOperationsMap().keySet();\n    for (PathItem.HttpMethod method : b.readOperationsMap().keySet()) {\n      if (methodsA.contains(method)) {\n        Operation left = a.readOperationsMap().get(method);\n        Operation right = b.readOperationsMap().get(method);\n        if (left.getParameters().size() == right.getParameters().size()) {\n          return parametersIntersect(left.getParameters(), right.getParameters());\n        }\n        return false;\n      }\n    }\n    return false;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/PathsDiff.java", "class_name": "PathsDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/PathsDiff.java.PathsDiff", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\n@param a a path form the open api spec\n@param b another path from the same open api spec\n@return <code>true</code> in case both paths are of the same method AND their templated\n    parameters are of the same type; <code>false</code> otherwise\n"}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/PathsDiff.java.PathsDiff.[boolean]parametersIntersect(List<Parameter>,List<Parameter>)", "name": "parametersIntersect", "arg_nums": 2, "params": [{"name": "left", "type": "List<Parameter>"}, {"name": "right", "type": "List<Parameter>"}], "return_type": "boolean", "signature": "private static boolean parametersIntersect(List<Parameter> left, List<Parameter> right)", "original_string": "  private static boolean parametersIntersect(List<Parameter> left, List<Parameter> right) {\n    int parametersSize = left.size();\n    long intersectedParameters =\n        IntStream.range(0, left.size())\n            .filter(\n                i -> left.get(i).getSchema().getType().equals(right.get(i).getSchema().getType()))\n            .count();\n    return parametersSize == intersectedParameters;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/PathsDiff.java", "class_name": "PathsDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/PathsDiff.java.PathsDiff", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\n@param left parameters from the first compared method\n@param right parameters from the second compared method\n@return <code>true</code> in case each parameter pair is of the same type; <code>false</code>\n    otherwise\n"}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/ResponseDiff.java.ResponseDiff.[]ResponseDiff(OpenApiDiff)", "name": "ResponseDiff", "arg_nums": 1, "params": [{"name": "openApiDiff", "type": "OpenApiDiff"}], "return_type": "", "signature": "public ResponseDiff(OpenApiDiff openApiDiff)", "original_string": "  public ResponseDiff(OpenApiDiff openApiDiff) {\n    this.openApiDiff = openApiDiff;\n    this.leftComponents =\n        openApiDiff.getOldSpecOpenApi() != null\n            ? openApiDiff.getOldSpecOpenApi().getComponents()\n            : null;\n    this.rightComponents =\n        openApiDiff.getNewSpecOpenApi() != null\n            ? openApiDiff.getNewSpecOpenApi().getComponents()\n            : null;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/ResponseDiff.java", "class_name": "ResponseDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/ResponseDiff.java.ResponseDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/ResponseDiff.java.ResponseDiff.[DeferredChanged<ChangedResponse>]diff(ApiResponse,ApiResponse,DiffContext)", "name": "diff", "arg_nums": 3, "params": [{"name": "left", "type": "ApiResponse"}, {"name": "right", "type": "ApiResponse"}, {"name": "context", "type": "DiffContext"}], "return_type": "DeferredChanged<ChangedResponse>", "signature": "public DeferredChanged<ChangedResponse> diff(\n      ApiResponse left, ApiResponse right, DiffContext context)", "original_string": "  public DeferredChanged<ChangedResponse> diff(\n      ApiResponse left, ApiResponse right, DiffContext context) {\n    if (left == null && right == null) {\n      return new RealizedChanged<>(Optional.empty());\n    }\n    if ((left == null && right != null) || (left != null && right == null)) {\n      return new RealizedChanged<>(Optional.of(new ChangedResponse(left, right, context)));\n    }\n    return cachedDiff(new HashSet<>(), left, right, left.get$ref(), right.get$ref(), context);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/ResponseDiff.java", "class_name": "ResponseDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/ResponseDiff.java.ResponseDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "DeferredChanged<ChangedResponse>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/ResponseDiff.java.ResponseDiff.[DeferredChanged<ChangedResponse>]computeDiff(HashSet<String>,ApiResponse,ApiResponse,DiffContext)", "name": "computeDiff", "arg_nums": 4, "params": [{"name": "refSet", "type": "HashSet<String>"}, {"name": "left", "type": "ApiResponse"}, {"name": "right", "type": "ApiResponse"}, {"name": "context", "type": "DiffContext"}], "return_type": "DeferredChanged<ChangedResponse>", "signature": "@Override\n  protected DeferredChanged<ChangedResponse> computeDiff(\n      HashSet<String> refSet, ApiResponse left, ApiResponse right, DiffContext context)", "original_string": "  @Override\n  protected DeferredChanged<ChangedResponse> computeDiff(\n      HashSet<String> refSet, ApiResponse left, ApiResponse right, DiffContext context) {\n    left = refPointer.resolveRef(leftComponents, left, left.get$ref());\n    right = refPointer.resolveRef(rightComponents, right, right.get$ref());\n\n    DeferredBuilder<Changed> builder = new DeferredBuilder<>();\n    ChangedResponse changedResponse = new ChangedResponse(left, right, context);\n    builder\n        .with(\n            openApiDiff\n                .getMetadataDiff()\n                .diff(left.getDescription(), right.getDescription(), context))\n        .ifPresent(changedResponse::setDescription);\n    builder\n        .with(openApiDiff.getContentDiff().diff(left.getContent(), right.getContent(), context))\n        .ifPresent(changedResponse::setContent);\n    builder\n        .with(openApiDiff.getHeadersDiff().diff(left.getHeaders(), right.getHeaders(), context))\n        .ifPresent(changedResponse::setHeaders);\n    builder\n        .with(\n            openApiDiff\n                .getExtensionsDiff()\n                .diff(left.getExtensions(), right.getExtensions(), context))\n        .ifPresent(changedResponse::setExtensions);\n\n    return builder.buildIsChanged(changedResponse);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/ResponseDiff.java", "class_name": "ResponseDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/ResponseDiff.java.ResponseDiff", "attributes": {"modifiers": "@Override\n  protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "DeferredChanged<ChangedResponse>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/HeaderDiff.java.HeaderDiff.[]HeaderDiff(OpenApiDiff)", "name": "HeaderDiff", "arg_nums": 1, "params": [{"name": "openApiDiff", "type": "OpenApiDiff"}], "return_type": "", "signature": "public HeaderDiff(OpenApiDiff openApiDiff)", "original_string": "  public HeaderDiff(OpenApiDiff openApiDiff) {\n    this.openApiDiff = openApiDiff;\n    this.leftComponents =\n        openApiDiff.getOldSpecOpenApi() != null\n            ? openApiDiff.getOldSpecOpenApi().getComponents()\n            : null;\n    this.rightComponents =\n        openApiDiff.getNewSpecOpenApi() != null\n            ? openApiDiff.getNewSpecOpenApi().getComponents()\n            : null;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/HeaderDiff.java", "class_name": "HeaderDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/HeaderDiff.java.HeaderDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/HeaderDiff.java.HeaderDiff.[DeferredChanged<ChangedHeader>]diff(Header,Header,DiffContext)", "name": "diff", "arg_nums": 3, "params": [{"name": "left", "type": "Header"}, {"name": "right", "type": "Header"}, {"name": "context", "type": "DiffContext"}], "return_type": "DeferredChanged<ChangedHeader>", "signature": "public DeferredChanged<ChangedHeader> diff(Header left, Header right, DiffContext context)", "original_string": "  public DeferredChanged<ChangedHeader> diff(Header left, Header right, DiffContext context) {\n    return cachedDiff(new HashSet<>(), left, right, left.get$ref(), right.get$ref(), context);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/HeaderDiff.java", "class_name": "HeaderDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/HeaderDiff.java.HeaderDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "DeferredChanged<ChangedHeader>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/HeaderDiff.java.HeaderDiff.[DeferredChanged<ChangedHeader>]computeDiff(HashSet<String>,Header,Header,DiffContext)", "name": "computeDiff", "arg_nums": 4, "params": [{"name": "refSet", "type": "HashSet<String>"}, {"name": "left", "type": "Header"}, {"name": "right", "type": "Header"}, {"name": "context", "type": "DiffContext"}], "return_type": "DeferredChanged<ChangedHeader>", "signature": "@Override\n  protected DeferredChanged<ChangedHeader> computeDiff(\n      HashSet<String> refSet, Header left, Header right, DiffContext context)", "original_string": "  @Override\n  protected DeferredChanged<ChangedHeader> computeDiff(\n      HashSet<String> refSet, Header left, Header right, DiffContext context) {\n    left = refPointer.resolveRef(leftComponents, left, left.get$ref());\n    right = refPointer.resolveRef(rightComponents, right, right.get$ref());\n\n    DeferredBuilder<Changed> builder = new DeferredBuilder<>();\n    ChangedHeader changedHeader =\n        new ChangedHeader(left, right, context)\n            .setRequired(getBooleanDiff(left.getRequired(), right.getRequired()))\n            .setDeprecated(\n                !Boolean.TRUE.equals(left.getDeprecated())\n                    && Boolean.TRUE.equals(right.getDeprecated()))\n            .setStyle(!Objects.equals(left.getStyle(), right.getStyle()))\n            .setExplode(getBooleanDiff(left.getExplode(), right.getExplode()));\n    builder\n        .with(\n            openApiDiff\n                .getMetadataDiff()\n                .diff(left.getDescription(), right.getDescription(), context))\n        .ifPresent(changedHeader::setDescription);\n    builder\n        .with(\n            openApiDiff\n                .getSchemaDiff()\n                .diff(left.getSchema(), right.getSchema(), context.copyWithRequired(true)))\n        .ifPresent(changedHeader::setSchema);\n    builder\n        .with(openApiDiff.getContentDiff().diff(left.getContent(), right.getContent(), context))\n        .ifPresent(changedHeader::setContent);\n    builder\n        .with(\n            openApiDiff\n                .getExtensionsDiff()\n                .diff(left.getExtensions(), right.getExtensions(), context))\n        .ifPresent(changedHeader::setExtensions);\n    return builder.buildIsChanged(changedHeader);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/HeaderDiff.java", "class_name": "HeaderDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/HeaderDiff.java.HeaderDiff", "attributes": {"modifiers": "@Override\n  protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "DeferredChanged<ChangedHeader>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/HeaderDiff.java.HeaderDiff.[boolean]getBooleanDiff(Boolean,Boolean)", "name": "getBooleanDiff", "arg_nums": 2, "params": [{"name": "left", "type": "Boolean"}, {"name": "right", "type": "Boolean"}], "return_type": "boolean", "signature": "private boolean getBooleanDiff(Boolean left, Boolean right)", "original_string": "  private boolean getBooleanDiff(Boolean left, Boolean right) {\n    boolean leftRequired = Optional.ofNullable(left).orElse(Boolean.FALSE);\n    boolean rightRequired = Optional.ofNullable(right).orElse(Boolean.FALSE);\n    return leftRequired != rightRequired;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/HeaderDiff.java", "class_name": "HeaderDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/HeaderDiff.java.HeaderDiff", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/ContentDiff.java.ContentDiff.[]ContentDiff(OpenApiDiff)", "name": "ContentDiff", "arg_nums": 1, "params": [{"name": "openApiDiff", "type": "OpenApiDiff"}], "return_type": "", "signature": "public ContentDiff(OpenApiDiff openApiDiff)", "original_string": "  public ContentDiff(OpenApiDiff openApiDiff) {\n    this.openApiDiff = openApiDiff;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/ContentDiff.java", "class_name": "ContentDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/ContentDiff.java.ContentDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/ContentDiff.java.ContentDiff.[DeferredChanged<ChangedContent>]diff(Content,Content,DiffContext)", "name": "diff", "arg_nums": 3, "params": [{"name": "left", "type": "Content"}, {"name": "right", "type": "Content"}, {"name": "context", "type": "DiffContext"}], "return_type": "DeferredChanged<ChangedContent>", "signature": "public DeferredChanged<ChangedContent> diff(Content left, Content right, DiffContext context)", "original_string": "  public DeferredChanged<ChangedContent> diff(Content left, Content right, DiffContext context) {\n    DeferredBuilder<Changed> builder = new DeferredBuilder<>();\n\n    MapKeyDiff<String, MediaType> mediaTypeDiff = MapKeyDiff.diff(left, right);\n    List<String> sharedMediaTypes = mediaTypeDiff.getSharedKey();\n    Map<String, ChangedMediaType> changedMediaTypes = new LinkedHashMap<>();\n\n    sharedMediaTypes.stream()\n        .forEach(\n            mediaTypeKey -> {\n              MediaType oldMediaType = left.get(mediaTypeKey);\n              MediaType newMediaType = right.get(mediaTypeKey);\n\n              ChangedMediaType changedMediaType =\n                  new ChangedMediaType(oldMediaType.getSchema(), newMediaType.getSchema(), context);\n\n              builder\n                  .with(\n                      openApiDiff\n                          .getSchemaDiff()\n                          .diff(\n                              oldMediaType.getSchema(),\n                              newMediaType.getSchema(),\n                              context.copyWithRequired(true)))\n                  .ifPresent(\n                      value -> {\n                        changedMediaType.setSchema(value);\n                        if (!isUnchanged(changedMediaType)) {\n                          changedMediaTypes.put(mediaTypeKey, changedMediaType);\n                        }\n                      });\n            });\n\n    return builder\n        .build()\n        .mapOptional(\n            value ->\n                isChanged(\n                    new ChangedContent(left, right, context)\n                        .setIncreased(mediaTypeDiff.getIncreased())\n                        .setMissing(mediaTypeDiff.getMissing())\n                        .setChanged(changedMediaTypes)));\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/ContentDiff.java", "class_name": "ContentDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/ContentDiff.java.ContentDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "DeferredChanged<ChangedContent>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/ParameterDiff.java.ParameterDiff.[]ParameterDiff(OpenApiDiff)", "name": "ParameterDiff", "arg_nums": 1, "params": [{"name": "openApiDiff", "type": "OpenApiDiff"}], "return_type": "", "signature": "public ParameterDiff(OpenApiDiff openApiDiff)", "original_string": "  public ParameterDiff(OpenApiDiff openApiDiff) {\n    this.openApiDiff = openApiDiff;\n    this.leftComponents =\n        openApiDiff.getOldSpecOpenApi() != null\n            ? openApiDiff.getOldSpecOpenApi().getComponents()\n            : null;\n    this.rightComponents =\n        openApiDiff.getNewSpecOpenApi() != null\n            ? openApiDiff.getNewSpecOpenApi().getComponents()\n            : null;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/ParameterDiff.java", "class_name": "ParameterDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/ParameterDiff.java.ParameterDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/ParameterDiff.java.ParameterDiff.[DeferredChanged<ChangedParameter>]diff(Parameter,Parameter,DiffContext)", "name": "diff", "arg_nums": 3, "params": [{"name": "left", "type": "Parameter"}, {"name": "right", "type": "Parameter"}, {"name": "context", "type": "DiffContext"}], "return_type": "DeferredChanged<ChangedParameter>", "signature": "public DeferredChanged<ChangedParameter> diff(\n      Parameter left, Parameter right, DiffContext context)", "original_string": "  public DeferredChanged<ChangedParameter> diff(\n      Parameter left, Parameter right, DiffContext context) {\n    return cachedDiff(new HashSet<>(), left, right, left.get$ref(), right.get$ref(), context);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/ParameterDiff.java", "class_name": "ParameterDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/ParameterDiff.java.ParameterDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "DeferredChanged<ChangedParameter>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/ParameterDiff.java.ParameterDiff.[DeferredChanged<ChangedParameter>]computeDiff(HashSet<String>,Parameter,Parameter,DiffContext)", "name": "computeDiff", "arg_nums": 4, "params": [{"name": "refSet", "type": "HashSet<String>"}, {"name": "left", "type": "Parameter"}, {"name": "right", "type": "Parameter"}, {"name": "context", "type": "DiffContext"}], "return_type": "DeferredChanged<ChangedParameter>", "signature": "@Override\n  protected DeferredChanged<ChangedParameter> computeDiff(\n      HashSet<String> refSet, Parameter left, Parameter right, DiffContext context)", "original_string": "  @Override\n  protected DeferredChanged<ChangedParameter> computeDiff(\n      HashSet<String> refSet, Parameter left, Parameter right, DiffContext context) {\n    left = refPointer.resolveRef(this.leftComponents, left, left.get$ref());\n    right = refPointer.resolveRef(this.rightComponents, right, right.get$ref());\n\n    DeferredBuilder<Changed> builder = new DeferredBuilder<>();\n\n    ChangedParameter changedParameter =\n        new ChangedParameter(right.getName(), right.getIn(), context)\n            .setOldParameter(left)\n            .setNewParameter(right)\n            .setChangeRequired(getBooleanDiff(left.getRequired(), right.getRequired()))\n            .setDeprecated(\n                !Boolean.TRUE.equals(left.getDeprecated())\n                    && Boolean.TRUE.equals(right.getDeprecated()))\n            .setChangeAllowEmptyValue(\n                getBooleanDiff(left.getAllowEmptyValue(), right.getAllowEmptyValue()))\n            .setChangeStyle(!Objects.equals(left.getStyle(), right.getStyle()))\n            .setChangeExplode(getBooleanDiff(left.getExplode(), right.getExplode()));\n    builder\n        .with(\n            openApiDiff\n                .getSchemaDiff()\n                .diff(left.getSchema(), right.getSchema(), context.copyWithRequired(true)))\n        .ifPresent(changedParameter::setSchema);\n    builder\n        .with(\n            openApiDiff\n                .getMetadataDiff()\n                .diff(left.getDescription(), right.getDescription(), context))\n        .ifPresent(changedParameter::setDescription);\n    builder\n        .with(openApiDiff.getContentDiff().diff(left.getContent(), right.getContent(), context))\n        .ifPresent(changedParameter::setContent);\n    builder\n        .with(\n            openApiDiff\n                .getExtensionsDiff()\n                .diff(left.getExtensions(), right.getExtensions(), context))\n        .ifPresent(changedParameter::setExtensions);\n    return builder.buildIsChanged(changedParameter);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/ParameterDiff.java", "class_name": "ParameterDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/ParameterDiff.java.ParameterDiff", "attributes": {"modifiers": "@Override\n  protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "DeferredChanged<ChangedParameter>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/ParameterDiff.java.ParameterDiff.[boolean]getBooleanDiff(Boolean,Boolean)", "name": "getBooleanDiff", "arg_nums": 2, "params": [{"name": "left", "type": "Boolean"}, {"name": "right", "type": "Boolean"}], "return_type": "boolean", "signature": "private boolean getBooleanDiff(Boolean left, Boolean right)", "original_string": "  private boolean getBooleanDiff(Boolean left, Boolean right) {\n    boolean leftRequired = Optional.ofNullable(left).orElse(Boolean.FALSE);\n    boolean rightRequired = Optional.ofNullable(right).orElse(Boolean.FALSE);\n    return leftRequired != rightRequired;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/ParameterDiff.java", "class_name": "ParameterDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/ParameterDiff.java.ParameterDiff", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/ReferenceDiffCache.java.ReferenceDiffCache.[]ReferenceDiffCache()", "name": "ReferenceDiffCache", "arg_nums": 0, "params": [], "return_type": "", "signature": "public ReferenceDiffCache()", "original_string": "  public ReferenceDiffCache() {\n    this.refDiffMap = new HashMap<>();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/ReferenceDiffCache.java", "class_name": "ReferenceDiffCache", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/ReferenceDiffCache.java.ReferenceDiffCache", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/ReferenceDiffCache.java.ReferenceDiffCache.[DeferredChanged<D>]getFromCache(CacheKey)", "name": "getFromCache", "arg_nums": 1, "params": [{"name": "cacheKey", "type": "CacheKey"}], "return_type": "DeferredChanged<D>", "signature": "private DeferredChanged<D> getFromCache(CacheKey cacheKey)", "original_string": "  private DeferredChanged<D> getFromCache(CacheKey cacheKey) {\n    return refDiffMap.get(cacheKey);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/ReferenceDiffCache.java", "class_name": "ReferenceDiffCache", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/ReferenceDiffCache.java.ReferenceDiffCache", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "DeferredChanged<D>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/ReferenceDiffCache.java.ReferenceDiffCache.[void]addToCache(CacheKey,DeferredChanged<D>)", "name": "addToCache", "arg_nums": 2, "params": [{"name": "cacheKey", "type": "CacheKey"}, {"name": "changed", "type": "DeferredChanged<D>"}], "return_type": "void", "signature": "private void addToCache(CacheKey cacheKey, DeferredChanged<D> changed)", "original_string": "  private void addToCache(CacheKey cacheKey, DeferredChanged<D> changed) {\n    refDiffMap.put(cacheKey, changed);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/ReferenceDiffCache.java", "class_name": "ReferenceDiffCache", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/ReferenceDiffCache.java.ReferenceDiffCache", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/ReferenceDiffCache.java.ReferenceDiffCache.[DeferredChanged<D>]cachedDiff(HashSet<String>,C,C,String,String,DiffContext)", "name": "cachedDiff", "arg_nums": 6, "params": [{"name": "refSet", "type": "HashSet<String>"}, {"name": "left", "type": "C"}, {"name": "right", "type": "C"}, {"name": "leftRef", "type": "String"}, {"name": "rightRef", "type": "String"}, {"name": "context", "type": "DiffContext"}], "return_type": "DeferredChanged<D>", "signature": "public DeferredChanged<D> cachedDiff(\n      HashSet<String> refSet,\n      C left,\n      C right,\n      String leftRef,\n      String rightRef,\n      DiffContext context)", "original_string": "  public DeferredChanged<D> cachedDiff(\n      HashSet<String> refSet,\n      C left,\n      C right,\n      String leftRef,\n      String rightRef,\n      DiffContext context) {\n    boolean areBothRefParameters = leftRef != null && rightRef != null;\n    if (areBothRefParameters) {\n      CacheKey key = new CacheKey(leftRef, rightRef, context);\n      DeferredChanged<D> changedFromRef = getFromCache(key);\n      if (changedFromRef != null) {\n        return changedFromRef;\n      } else {\n        String refKey = getRefKey(leftRef, rightRef);\n        if (refSet.contains(refKey)) {\n          return RealizedChanged.empty();\n        } else {\n          refSet.add(refKey);\n          DeferredChanged<D> changed = computeDiff(refSet, left, right, context);\n          addToCache(key, changed);\n          refSet.remove(refKey);\n          return changed;\n        }\n      }\n    } else {\n      return computeDiff(refSet, left, right, context);\n    }\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/ReferenceDiffCache.java", "class_name": "ReferenceDiffCache", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/ReferenceDiffCache.java.ReferenceDiffCache", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "DeferredChanged<D>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/ReferenceDiffCache.java.ReferenceDiffCache.[String]getRefKey(String,String)", "name": "getRefKey", "arg_nums": 2, "params": [{"name": "leftRef", "type": "String"}, {"name": "rightRef", "type": "String"}], "return_type": "String", "signature": "protected String getRefKey(String leftRef, String rightRef)", "original_string": "  protected String getRefKey(String leftRef, String rightRef) {\n    return leftRef + \":\" + rightRef;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/ReferenceDiffCache.java", "class_name": "ReferenceDiffCache", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/ReferenceDiffCache.java.ReferenceDiffCache", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/ReferenceDiffCache.java.ReferenceDiffCache.[DeferredChanged<D>]computeDiff(HashSet<String>,C,C,DiffContext)", "name": "computeDiff", "arg_nums": 4, "params": [{"name": "refSet", "type": "HashSet<String>"}, {"name": "left", "type": "C"}, {"name": "right", "type": "C"}, {"name": "context", "type": "DiffContext"}], "return_type": "DeferredChanged<D>", "signature": "protected abstract DeferredChanged<D> computeDiff(\n      HashSet<String> refSet, C left, C right, DiffContext context)", "original_string": "  protected abstract DeferredChanged<D> computeDiff(\n      HashSet<String> refSet, C left, C right, DiffContext context);", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/ReferenceDiffCache.java", "class_name": "ReferenceDiffCache", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/ReferenceDiffCache.java.ReferenceDiffCache", "attributes": {"modifiers": "protected abstract", "marker_annotations": [], "non_marker_annotations": ["protected", "abstract"], "comments": [], "return_type": "DeferredChanged<D>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/OAuthFlowDiff.java.OAuthFlowDiff.[]OAuthFlowDiff(OpenApiDiff)", "name": "OAuthFlowDiff", "arg_nums": 1, "params": [{"name": "openApiDiff", "type": "OpenApiDiff"}], "return_type": "", "signature": "public OAuthFlowDiff(OpenApiDiff openApiDiff)", "original_string": "  public OAuthFlowDiff(OpenApiDiff openApiDiff) {\n    this.openApiDiff = openApiDiff;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/OAuthFlowDiff.java", "class_name": "OAuthFlowDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/OAuthFlowDiff.java.OAuthFlowDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/OAuthFlowDiff.java.OAuthFlowDiff.[Map<String, Object>]getExtensions(OAuthFlow)", "name": "getExtensions", "arg_nums": 1, "params": [{"name": "oAuthFlow", "type": "OAuthFlow"}], "return_type": "Map<String, Object>", "signature": "private static Map<String, Object> getExtensions(OAuthFlow oAuthFlow)", "original_string": "  private static Map<String, Object> getExtensions(OAuthFlow oAuthFlow) {\n    return ofNullable(oAuthFlow).map(OAuthFlow::getExtensions).orElse(null);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/OAuthFlowDiff.java", "class_name": "OAuthFlowDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/OAuthFlowDiff.java.OAuthFlowDiff", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "Map<String, Object>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/OAuthFlowDiff.java.OAuthFlowDiff.[Optional<ChangedOAuthFlow>]diff(OAuthFlow,OAuthFlow,DiffContext)", "name": "diff", "arg_nums": 3, "params": [{"name": "left", "type": "OAuthFlow"}, {"name": "right", "type": "OAuthFlow"}, {"name": "context", "type": "DiffContext"}], "return_type": "Optional<ChangedOAuthFlow>", "signature": "public Optional<ChangedOAuthFlow> diff(OAuthFlow left, OAuthFlow right, DiffContext context)", "original_string": "  public Optional<ChangedOAuthFlow> diff(OAuthFlow left, OAuthFlow right, DiffContext context) {\n    ChangedOAuthFlow changedOAuthFlow = new ChangedOAuthFlow(left, right, context);\n    if (left != null && right != null) {\n      changedOAuthFlow\n          .setAuthorizationUrl(\n              !Objects.equals(left.getAuthorizationUrl(), right.getAuthorizationUrl()))\n          .setTokenUrl(!Objects.equals(left.getTokenUrl(), right.getTokenUrl()))\n          .setRefreshUrl(!Objects.equals(left.getRefreshUrl(), right.getRefreshUrl()));\n    }\n    openApiDiff\n        .getExtensionsDiff()\n        .diff(getExtensions(left), getExtensions(right))\n        .ifPresent(changedOAuthFlow::setExtensions);\n    return isChanged(changedOAuthFlow);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/OAuthFlowDiff.java", "class_name": "OAuthFlowDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/OAuthFlowDiff.java.OAuthFlowDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Optional<ChangedOAuthFlow>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/MetadataDiff.java.MetadataDiff.[]MetadataDiff(OpenApiDiff)", "name": "MetadataDiff", "arg_nums": 1, "params": [{"name": "openApiDiff", "type": "OpenApiDiff"}], "return_type": "", "signature": "public MetadataDiff(OpenApiDiff openApiDiff)", "original_string": "  public MetadataDiff(OpenApiDiff openApiDiff) {}", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/MetadataDiff.java", "class_name": "MetadataDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/MetadataDiff.java.MetadataDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/MetadataDiff.java.MetadataDiff.[Optional<ChangedMetadata>]diff(String,String,DiffContext)", "name": "diff", "arg_nums": 3, "params": [{"name": "left", "type": "String"}, {"name": "right", "type": "String"}, {"name": "context", "type": "DiffContext"}], "return_type": "Optional<ChangedMetadata>", "signature": "public Optional<ChangedMetadata> diff(String left, String right, DiffContext context)", "original_string": "  public Optional<ChangedMetadata> diff(String left, String right, DiffContext context) {\n    return isChanged(new ChangedMetadata().setLeft(left).setRight(right));\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/MetadataDiff.java", "class_name": "MetadataDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/MetadataDiff.java.MetadataDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Optional<ChangedMetadata>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/SecurityRequirementDiff.java.SecurityRequirementDiff.[]SecurityRequirementDiff(OpenApiDiff)", "name": "SecurityRequirementDiff", "arg_nums": 1, "params": [{"name": "openApiDiff", "type": "OpenApiDiff"}], "return_type": "", "signature": "public SecurityRequirementDiff(OpenApiDiff openApiDiff)", "original_string": "  public SecurityRequirementDiff(OpenApiDiff openApiDiff) {\n    this.openApiDiff = openApiDiff;\n    this.leftComponents =\n        openApiDiff.getOldSpecOpenApi() != null\n            ? openApiDiff.getOldSpecOpenApi().getComponents()\n            : null;\n    this.rightComponents =\n        openApiDiff.getNewSpecOpenApi() != null\n            ? openApiDiff.getNewSpecOpenApi().getComponents()\n            : null;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/SecurityRequirementDiff.java", "class_name": "SecurityRequirementDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/SecurityRequirementDiff.java.SecurityRequirementDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/SecurityRequirementDiff.java.SecurityRequirementDiff.[SecurityRequirement]getCopy(LinkedHashMap<String, List<String>>)", "name": "getCopy", "arg_nums": 1, "params": [{"name": "right", "type": "LinkedHashMap<String, List<String>>"}], "return_type": "SecurityRequirement", "signature": "public static SecurityRequirement getCopy(LinkedHashMap<String, List<String>> right)", "original_string": "  public static SecurityRequirement getCopy(LinkedHashMap<String, List<String>> right) {\n    SecurityRequirement newSecurityRequirement = new SecurityRequirement();\n    right.forEach((key, value) -> newSecurityRequirement.put(key, new ArrayList<>(value)));\n    return newSecurityRequirement;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/SecurityRequirementDiff.java", "class_name": "SecurityRequirementDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/SecurityRequirementDiff.java.SecurityRequirementDiff", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "SecurityRequirement", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/SecurityRequirementDiff.java.SecurityRequirementDiff.[LinkedHashMap<String, List<String>>]contains(SecurityRequirement,String)", "name": "contains", "arg_nums": 2, "params": [{"name": "right", "type": "SecurityRequirement"}, {"name": "schemeRef", "type": "String"}], "return_type": "LinkedHashMap<String, List<String>>", "signature": "private LinkedHashMap<String, List<String>> contains(\n      SecurityRequirement right, String schemeRef)", "original_string": "  private LinkedHashMap<String, List<String>> contains(\n      SecurityRequirement right, String schemeRef) {\n    SecurityScheme leftSecurityScheme = leftComponents.getSecuritySchemes().get(schemeRef);\n    LinkedHashMap<String, List<String>> found = new LinkedHashMap<>();\n\n    for (Map.Entry<String, List<String>> entry : right.entrySet()) {\n      SecurityScheme rightSecurityScheme = rightComponents.getSecuritySchemes().get(entry.getKey());\n      if (leftSecurityScheme.getType() == rightSecurityScheme.getType()) {\n        switch (leftSecurityScheme.getType()) {\n          case APIKEY:\n            if (leftSecurityScheme.getName().equals(rightSecurityScheme.getName())) {\n              found.put(entry.getKey(), entry.getValue());\n              return found;\n            }\n            break;\n\n          case OAUTH2:\n          case HTTP:\n          case OPENIDCONNECT:\n            found.put(entry.getKey(), entry.getValue());\n            return found;\n        }\n      }\n    }\n\n    return found;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/SecurityRequirementDiff.java", "class_name": "SecurityRequirementDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/SecurityRequirementDiff.java.SecurityRequirementDiff", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "LinkedHashMap<String, List<String>>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/SecurityRequirementDiff.java.SecurityRequirementDiff.[DeferredChanged<ChangedSecurityRequirement>]diff(SecurityRequirement,SecurityRequirement,DiffContext)", "name": "diff", "arg_nums": 3, "params": [{"name": "left", "type": "SecurityRequirement"}, {"name": "right", "type": "SecurityRequirement"}, {"name": "context", "type": "DiffContext"}], "return_type": "DeferredChanged<ChangedSecurityRequirement>", "signature": "public DeferredChanged<ChangedSecurityRequirement> diff(\n      SecurityRequirement left, SecurityRequirement right, DiffContext context)", "original_string": "  public DeferredChanged<ChangedSecurityRequirement> diff(\n      SecurityRequirement left, SecurityRequirement right, DiffContext context) {\n    DeferredBuilder<Changed> builder = new DeferredBuilder<>();\n\n    ChangedSecurityRequirement changedSecurityRequirement =\n        new ChangedSecurityRequirement(left, right != null ? getCopy(right) : null, context);\n\n    SecurityRequirement leftRequirement = left == null ? new SecurityRequirement() : left;\n    SecurityRequirement rightRequirement = right == null ? new SecurityRequirement() : right;\n\n    for (Map.Entry<String, List<String>> leftEntry : leftRequirement.entrySet()) {\n      LinkedHashMap<String, List<String>> rightSec = contains(rightRequirement, leftEntry.getKey());\n      if (rightSec.isEmpty()) {\n        changedSecurityRequirement.addMissing(leftEntry.getKey(), leftEntry.getValue());\n      } else {\n        Optional<String> rightSchemeRef = rightSec.keySet().stream().findFirst();\n        rightSchemeRef.ifPresent(rightRequirement::remove);\n        rightSchemeRef.ifPresent(\n            rightScheme ->\n                builder\n                    .with(\n                        openApiDiff\n                            .getSecuritySchemeDiff()\n                            .diff(\n                                leftEntry.getKey(),\n                                leftEntry.getValue(),\n                                rightScheme,\n                                rightSec.get(rightScheme),\n                                context))\n                    .ifPresent(changedSecurityRequirement::addChanged));\n      }\n    }\n    rightRequirement.forEach(changedSecurityRequirement::addIncreased);\n\n    return builder.buildIsChanged(changedSecurityRequirement);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/SecurityRequirementDiff.java", "class_name": "SecurityRequirementDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/SecurityRequirementDiff.java.SecurityRequirementDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "DeferredChanged<ChangedSecurityRequirement>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/PathDiff.java.PathDiff.[]PathDiff(OpenApiDiff)", "name": "PathDiff", "arg_nums": 1, "params": [{"name": "openApiDiff", "type": "OpenApiDiff"}], "return_type": "", "signature": "public PathDiff(OpenApiDiff openApiDiff)", "original_string": "  public PathDiff(OpenApiDiff openApiDiff) {\n    this.openApiDiff = openApiDiff;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/PathDiff.java", "class_name": "PathDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/PathDiff.java.PathDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/PathDiff.java.PathDiff.[DeferredChanged<ChangedPath>]diff(PathItem,PathItem,DiffContext)", "name": "diff", "arg_nums": 3, "params": [{"name": "left", "type": "PathItem"}, {"name": "right", "type": "PathItem"}, {"name": "context", "type": "DiffContext"}], "return_type": "DeferredChanged<ChangedPath>", "signature": "public DeferredChanged<ChangedPath> diff(PathItem left, PathItem right, DiffContext context)", "original_string": "  public DeferredChanged<ChangedPath> diff(PathItem left, PathItem right, DiffContext context) {\n    Map<PathItem.HttpMethod, Operation> oldOperationMap = left.readOperationsMap();\n    Map<PathItem.HttpMethod, Operation> newOperationMap = right.readOperationsMap();\n    MapKeyDiff<PathItem.HttpMethod, Operation> operationsDiff =\n        MapKeyDiff.diff(oldOperationMap, newOperationMap);\n    List<PathItem.HttpMethod> sharedMethods = operationsDiff.getSharedKey();\n    DeferredBuilder<Changed> builder = new DeferredBuilder<>();\n\n    ChangedPath changedPath =\n        new ChangedPath(context.getUrl(), left, right, context)\n            .setIncreased(operationsDiff.getIncreased())\n            .setMissing(operationsDiff.getMissing());\n    for (PathItem.HttpMethod method : sharedMethods) {\n      Operation oldOperation = oldOperationMap.get(method);\n      Operation newOperation = newOperationMap.get(method);\n      builder\n          .with(\n              openApiDiff\n                  .getOperationDiff()\n                  .diff(\n                      oldOperation,\n                      newOperation,\n                      context\n                          .copyWithMethod(method)\n                          .copyWithLeftRightUrls(context.getLeftUrl(), context.getRightUrl())))\n          .ifPresent(changedPath.getChanged()::add);\n    }\n    builder\n        .with(\n            openApiDiff\n                .getExtensionsDiff()\n                .diff(left.getExtensions(), right.getExtensions(), context))\n        .ifPresent(changedPath::setExtensions);\n\n    return builder.buildIsChanged(changedPath);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/PathDiff.java", "class_name": "PathDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/PathDiff.java.PathDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "DeferredChanged<ChangedPath>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/SecuritySchemeDiff.java.SecuritySchemeDiff.[]SecuritySchemeDiff(OpenApiDiff)", "name": "SecuritySchemeDiff", "arg_nums": 1, "params": [{"name": "openApiDiff", "type": "OpenApiDiff"}], "return_type": "", "signature": "public SecuritySchemeDiff(OpenApiDiff openApiDiff)", "original_string": "  public SecuritySchemeDiff(OpenApiDiff openApiDiff) {\n    this.openApiDiff = openApiDiff;\n    this.leftComponents =\n        openApiDiff.getOldSpecOpenApi() != null\n            ? openApiDiff.getOldSpecOpenApi().getComponents()\n            : null;\n    this.rightComponents =\n        openApiDiff.getNewSpecOpenApi() != null\n            ? openApiDiff.getNewSpecOpenApi().getComponents()\n            : null;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/SecuritySchemeDiff.java", "class_name": "SecuritySchemeDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/SecuritySchemeDiff.java.SecuritySchemeDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/SecuritySchemeDiff.java.SecuritySchemeDiff.[DeferredChanged<ChangedSecurityScheme>]diff(String,List<String>,String,List<String>,DiffContext)", "name": "diff", "arg_nums": 5, "params": [{"name": "leftSchemeRef", "type": "String"}, {"name": "leftScopes", "type": "List<String>"}, {"name": "rightSchemeRef", "type": "String"}, {"name": "rightScopes", "type": "List<String>"}, {"name": "context", "type": "DiffContext"}], "return_type": "DeferredChanged<ChangedSecurityScheme>", "signature": "public DeferredChanged<ChangedSecurityScheme> diff(\n      String leftSchemeRef,\n      List<String> leftScopes,\n      String rightSchemeRef,\n      List<String> rightScopes,\n      DiffContext context)", "original_string": "  public DeferredChanged<ChangedSecurityScheme> diff(\n      String leftSchemeRef,\n      List<String> leftScopes,\n      String rightSchemeRef,\n      List<String> rightScopes,\n      DiffContext context) {\n    SecurityScheme leftSecurityScheme = leftComponents.getSecuritySchemes().get(leftSchemeRef);\n    SecurityScheme rightSecurityScheme = rightComponents.getSecuritySchemes().get(rightSchemeRef);\n    DeferredChanged<ChangedSecurityScheme> changedSecuritySchemeOpt =\n        cachedDiff(\n            new HashSet<>(),\n            leftSecurityScheme,\n            rightSecurityScheme,\n            leftSchemeRef,\n            rightSchemeRef,\n            context);\n\n    return changedSecuritySchemeOpt.map(\n        changedSecuritySchemeOptional -> {\n          ChangedSecurityScheme changedSecurityScheme =\n              changedSecuritySchemeOptional.orElse(\n                  new ChangedSecurityScheme(leftSecurityScheme, rightSecurityScheme, context));\n          changedSecurityScheme = getCopyWithoutScopes(changedSecurityScheme, context);\n\n          if (changedSecurityScheme != null\n              && leftSecurityScheme.getType() == SecurityScheme.Type.OAUTH2) {\n            isChanged(ListDiff.diff(new ChangedSecuritySchemeScopes(leftScopes, rightScopes)))\n                .ifPresent(changedSecurityScheme::setChangedScopes);\n          }\n\n          return changedSecurityScheme;\n        });\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/SecuritySchemeDiff.java", "class_name": "SecuritySchemeDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/SecuritySchemeDiff.java.SecuritySchemeDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "DeferredChanged<ChangedSecurityScheme>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/SecuritySchemeDiff.java.SecuritySchemeDiff.[DeferredChanged<ChangedSecurityScheme>]computeDiff(HashSet<String>,SecurityScheme,SecurityScheme,DiffContext)", "name": "computeDiff", "arg_nums": 4, "params": [{"name": "refSet", "type": "HashSet<String>"}, {"name": "leftSecurityScheme", "type": "SecurityScheme"}, {"name": "rightSecurityScheme", "type": "SecurityScheme"}, {"name": "context", "type": "DiffContext"}], "return_type": "DeferredChanged<ChangedSecurityScheme>", "signature": "@Override\n  protected DeferredChanged<ChangedSecurityScheme> computeDiff(\n      HashSet<String> refSet,\n      SecurityScheme leftSecurityScheme,\n      SecurityScheme rightSecurityScheme,\n      DiffContext context)", "original_string": "  @Override\n  protected DeferredChanged<ChangedSecurityScheme> computeDiff(\n      HashSet<String> refSet,\n      SecurityScheme leftSecurityScheme,\n      SecurityScheme rightSecurityScheme,\n      DiffContext context) {\n    ChangedSecurityScheme changedSecurityScheme =\n        new ChangedSecurityScheme(leftSecurityScheme, rightSecurityScheme, context);\n\n    openApiDiff\n        .getMetadataDiff()\n        .diff(leftSecurityScheme.getDescription(), rightSecurityScheme.getDescription(), context)\n        .ifPresent(changedSecurityScheme::setDescription);\n\n    switch (leftSecurityScheme.getType()) {\n      case APIKEY:\n        changedSecurityScheme.setChangedIn(\n            !Objects.equals(leftSecurityScheme.getIn(), rightSecurityScheme.getIn()));\n        break;\n\n      case OAUTH2:\n        openApiDiff\n            .getOAuthFlowsDiff()\n            .diff(leftSecurityScheme.getFlows(), rightSecurityScheme.getFlows(), context)\n            .ifPresent(changedSecurityScheme::setOAuthFlows);\n        break;\n\n      case HTTP:\n        changedSecurityScheme.setChangedScheme(\n            !Objects.equals(leftSecurityScheme.getScheme(), rightSecurityScheme.getScheme()));\n        changedSecurityScheme.setChangedBearerFormat(\n            !Objects.equals(\n                leftSecurityScheme.getBearerFormat(), rightSecurityScheme.getBearerFormat()));\n        break;\n\n      case OPENIDCONNECT:\n        changedSecurityScheme.setChangedOpenIdConnectUrl(\n            !Objects.equals(\n                leftSecurityScheme.getOpenIdConnectUrl(),\n                rightSecurityScheme.getOpenIdConnectUrl()));\n        break;\n    }\n    openApiDiff\n        .getExtensionsDiff()\n        .diff(leftSecurityScheme.getExtensions(), rightSecurityScheme.getExtensions(), context)\n        .ifPresent(changedSecurityScheme::setExtensions);\n\n    return new RealizedChanged<>(changedSecurityScheme);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/SecuritySchemeDiff.java", "class_name": "SecuritySchemeDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/SecuritySchemeDiff.java.SecuritySchemeDiff", "attributes": {"modifiers": "@Override\n  protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "DeferredChanged<ChangedSecurityScheme>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/SecuritySchemeDiff.java.SecuritySchemeDiff.[ChangedSecurityScheme]getCopyWithoutScopes(ChangedSecurityScheme,DiffContext)", "name": "getCopyWithoutScopes", "arg_nums": 2, "params": [{"name": "original", "type": "ChangedSecurityScheme"}, {"name": "context", "type": "DiffContext"}], "return_type": "ChangedSecurityScheme", "signature": "private ChangedSecurityScheme getCopyWithoutScopes(\n      ChangedSecurityScheme original, DiffContext context)", "original_string": "  private ChangedSecurityScheme getCopyWithoutScopes(\n      ChangedSecurityScheme original, DiffContext context) {\n    return new ChangedSecurityScheme(\n            original.getOldSecurityScheme(), original.getNewSecurityScheme(), context)\n        .setChangedType(original.isChangedType())\n        .setChangedIn(original.isChangedIn())\n        .setChangedScheme(original.isChangedScheme())\n        .setChangedBearerFormat(original.isChangedBearerFormat())\n        .setDescription(original.getDescription())\n        .setOAuthFlows(original.getOAuthFlows())\n        .setChangedOpenIdConnectUrl(original.isChangedOpenIdConnectUrl());\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/SecuritySchemeDiff.java", "class_name": "SecuritySchemeDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/SecuritySchemeDiff.java.SecuritySchemeDiff", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "ChangedSecurityScheme", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff.[]OpenApiDiff(OpenAPI,OpenAPI,OpenApiDiffOptions)", "name": "OpenApiDiff", "arg_nums": 3, "params": [{"name": "oldSpecOpenApi", "type": "OpenAPI"}, {"name": "newSpecOpenApi", "type": "OpenAPI"}, {"name": "options", "type": "OpenApiDiffOptions"}], "return_type": "", "signature": "private OpenApiDiff(OpenAPI oldSpecOpenApi, OpenAPI newSpecOpenApi, OpenApiDiffOptions options)", "original_string": "  private OpenApiDiff(OpenAPI oldSpecOpenApi, OpenAPI newSpecOpenApi, OpenApiDiffOptions options) {\n    this.oldSpecOpenApi = oldSpecOpenApi;\n    this.newSpecOpenApi = newSpecOpenApi;\n    this.options = options;\n    if (null == oldSpecOpenApi || null == newSpecOpenApi) {\n      throw new RuntimeException(\"one of the old or new object is null\");\n    }\n    if (null == options) {\n      throw new IllegalArgumentException(\"options parameter is null but is required\");\n    }\n    initializeFields();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java", "class_name": "OpenApiDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": "\n@param oldSpecOpenApi\n@param newSpecOpenApi\n@param diffOptions\n"}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff.[ChangedOpenApi]compare(OpenAPI,OpenAPI,OpenApiDiffOptions)", "name": "compare", "arg_nums": 3, "params": [{"name": "oldSpec", "type": "OpenAPI"}, {"name": "newSpec", "type": "OpenAPI"}, {"name": "diffOptions", "type": "OpenApiDiffOptions"}], "return_type": "ChangedOpenApi", "signature": "public static ChangedOpenApi compare(\n      OpenAPI oldSpec, OpenAPI newSpec, OpenApiDiffOptions diffOptions)", "original_string": "  public static ChangedOpenApi compare(\n      OpenAPI oldSpec, OpenAPI newSpec, OpenApiDiffOptions diffOptions) {\n    return new OpenApiDiff(oldSpec, newSpec, diffOptions).compare();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java", "class_name": "OpenApiDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "ChangedOpenApi", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff.[void]initializeFields()", "name": "initializeFields", "arg_nums": 0, "params": [], "return_type": "void", "signature": "private void initializeFields()", "original_string": "  private void initializeFields() {\n    this.pathsDiff = new PathsDiff(this);\n    this.pathDiff = new PathDiff(this);\n    this.schemaDiff = new SchemaDiff(this);\n    this.contentDiff = new ContentDiff(this);\n    this.parametersDiff = new ParametersDiff(this);\n    this.parameterDiff = new ParameterDiff(this);\n    this.requestBodyDiff = new RequestBodyDiff(this);\n    this.responseDiff = new ResponseDiff(this);\n    this.headersDiff = new HeadersDiff(this);\n    this.headerDiff = new HeaderDiff(this);\n    this.apiResponseDiff = new ApiResponseDiff(this);\n    this.operationDiff = new OperationDiff(this);\n    this.securityRequirementsDiff = new SecurityRequirementsDiff(this);\n    this.securityRequirementDiff = new SecurityRequirementDiff(this);\n    this.securitySchemeDiff = new SecuritySchemeDiff(this);\n    this.oAuthFlowsDiff = new OAuthFlowsDiff(this);\n    this.oAuthFlowDiff = new OAuthFlowDiff(this);\n    this.extensionsDiff = new ExtensionsDiff(this);\n    this.metadataDiff = new MetadataDiff(this);\n    this.deferredSchemaCache = new DeferredSchemaCache(this);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java", "class_name": "OpenApiDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff.[OpenApiDiffOptions]getOptions()", "name": "getOptions", "arg_nums": 0, "params": [], "return_type": "OpenApiDiffOptions", "signature": "public OpenApiDiffOptions getOptions()", "original_string": "  public OpenApiDiffOptions getOptions() {\n    return options;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java", "class_name": "OpenApiDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "OpenApiDiffOptions", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff.[ChangedOpenApi]compare()", "name": "compare", "arg_nums": 0, "params": [], "return_type": "ChangedOpenApi", "signature": "private ChangedOpenApi compare()", "original_string": "  private ChangedOpenApi compare() {\n    preProcess(oldSpecOpenApi);\n    preProcess(newSpecOpenApi);\n\n    // 1st pass scans paths to collect all schemas\n    DeferredChanged<ChangedPaths> paths =\n        this.pathsDiff.diff(\n            valOrEmpty(oldSpecOpenApi.getPaths()), valOrEmpty(newSpecOpenApi.getPaths()));\n\n    // 2nd pass processes deferred schemas\n    deferredSchemaCache.process();\n\n    this.newEndpoints = new ArrayList<>();\n    this.missingEndpoints = new ArrayList<>();\n    this.changedOperations = new ArrayList<>();\n\n    paths.ifPresent(\n        changedPaths -> {\n          this.newEndpoints = EndpointUtils.convert2EndpointList(changedPaths.getIncreased());\n          this.missingEndpoints = EndpointUtils.convert2EndpointList(changedPaths.getMissing());\n          changedPaths\n              .getChanged()\n              .keySet()\n              .forEach(\n                  path -> {\n                    ChangedPath changedPath = changedPaths.getChanged().get(path);\n                    this.newEndpoints.addAll(\n                        EndpointUtils.convert2Endpoints(path, changedPath.getIncreased()));\n                    this.missingEndpoints.addAll(\n                        EndpointUtils.convert2Endpoints(path, changedPath.getMissing()));\n                    changedOperations.addAll(changedPath.getChanged());\n                  });\n        });\n    getExtensionsDiff()\n        .diff(oldSpecOpenApi.getExtensions(), newSpecOpenApi.getExtensions())\n        .ifPresent(this::setChangedExtension);\n\n    return getChangedOpenApi();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java", "class_name": "OpenApiDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "ChangedOpenApi", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff.[void]setChangedExtension(ChangedExtensions)", "name": "setChangedExtension", "arg_nums": 1, "params": [{"name": "changedExtension", "type": "ChangedExtensions"}], "return_type": "void", "signature": "private void setChangedExtension(ChangedExtensions changedExtension)", "original_string": "  private void setChangedExtension(ChangedExtensions changedExtension) {\n    this.changedExtensions = changedExtension;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java", "class_name": "OpenApiDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff.[void]preProcess(OpenAPI)", "name": "preProcess", "arg_nums": 1, "params": [{"name": "openApi", "type": "OpenAPI"}], "return_type": "void", "signature": "private void preProcess(OpenAPI openApi)", "original_string": "  private void preProcess(OpenAPI openApi) {\n    List<SecurityRequirement> securityRequirements = openApi.getSecurity();\n    if (securityRequirements != null) {\n      List<SecurityRequirement> distinctSecurityRequirements =\n          securityRequirements.stream().distinct().collect(Collectors.toList());\n      Map<String, PathItem> paths = openApi.getPaths();\n      if (paths != null) {\n        paths\n            .values()\n            .forEach(\n                pathItem ->\n                    pathItem.readOperationsMap().values().stream()\n                        .filter(operation -> operation.getSecurity() != null)\n                        .forEach(\n                            operation ->\n                                operation.setSecurity(\n                                    operation.getSecurity().stream()\n                                        .distinct()\n                                        .collect(Collectors.toList()))));\n        paths\n            .values()\n            .forEach(\n                pathItem ->\n                    pathItem.readOperationsMap().values().stream()\n                        .filter(operation -> operation.getSecurity() == null)\n                        .forEach(operation -> operation.setSecurity(distinctSecurityRequirements)));\n      }\n      openApi.setSecurity(null);\n    }\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java", "class_name": "OpenApiDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff.[ChangedOpenApi]getChangedOpenApi()", "name": "getChangedOpenApi", "arg_nums": 0, "params": [], "return_type": "ChangedOpenApi", "signature": "private ChangedOpenApi getChangedOpenApi()", "original_string": "  private ChangedOpenApi getChangedOpenApi() {\n    return new ChangedOpenApi(options)\n        .setMissingEndpoints(missingEndpoints)\n        .setNewEndpoints(newEndpoints)\n        .setNewSpecOpenApi(newSpecOpenApi)\n        .setOldSpecOpenApi(oldSpecOpenApi)\n        .setChangedOperations(changedOperations)\n        .setChangedExtensions(changedExtensions)\n        .setChangedSchemas(deferredSchemaCache.getChangedSchemas());\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java", "class_name": "OpenApiDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "ChangedOpenApi", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff.[DeferredSchemaCache]getDeferredSchemaCache()", "name": "getDeferredSchemaCache", "arg_nums": 0, "params": [], "return_type": "DeferredSchemaCache", "signature": "public DeferredSchemaCache getDeferredSchemaCache()", "original_string": "  public DeferredSchemaCache getDeferredSchemaCache() {\n    return deferredSchemaCache;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java", "class_name": "OpenApiDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "DeferredSchemaCache", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff.[PathsDiff]getPathsDiff()", "name": "getPathsDiff", "arg_nums": 0, "params": [], "return_type": "PathsDiff", "signature": "public PathsDiff getPathsDiff()", "original_string": "  public PathsDiff getPathsDiff() {\n    return this.pathsDiff;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java", "class_name": "OpenApiDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "PathsDiff", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff.[PathDiff]getPathDiff()", "name": "getPathDiff", "arg_nums": 0, "params": [], "return_type": "PathDiff", "signature": "public PathDiff getPathDiff()", "original_string": "  public PathDiff getPathDiff() {\n    return this.pathDiff;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java", "class_name": "OpenApiDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "PathDiff", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff.[SchemaDiff]getSchemaDiff()", "name": "getSchemaDiff", "arg_nums": 0, "params": [], "return_type": "SchemaDiff", "signature": "public SchemaDiff getSchemaDiff()", "original_string": "  public SchemaDiff getSchemaDiff() {\n    return this.schemaDiff;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java", "class_name": "OpenApiDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "SchemaDiff", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff.[ContentDiff]getContentDiff()", "name": "getContentDiff", "arg_nums": 0, "params": [], "return_type": "ContentDiff", "signature": "public ContentDiff getContentDiff()", "original_string": "  public ContentDiff getContentDiff() {\n    return this.contentDiff;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java", "class_name": "OpenApiDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ContentDiff", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff.[ParametersDiff]getParametersDiff()", "name": "getParametersDiff", "arg_nums": 0, "params": [], "return_type": "ParametersDiff", "signature": "public ParametersDiff getParametersDiff()", "original_string": "  public ParametersDiff getParametersDiff() {\n    return this.parametersDiff;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java", "class_name": "OpenApiDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ParametersDiff", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff.[ParameterDiff]getParameterDiff()", "name": "getParameterDiff", "arg_nums": 0, "params": [], "return_type": "ParameterDiff", "signature": "public ParameterDiff getParameterDiff()", "original_string": "  public ParameterDiff getParameterDiff() {\n    return this.parameterDiff;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java", "class_name": "OpenApiDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ParameterDiff", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff.[RequestBodyDiff]getRequestBodyDiff()", "name": "getRequestBodyDiff", "arg_nums": 0, "params": [], "return_type": "RequestBodyDiff", "signature": "public RequestBodyDiff getRequestBodyDiff()", "original_string": "  public RequestBodyDiff getRequestBodyDiff() {\n    return this.requestBodyDiff;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java", "class_name": "OpenApiDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "RequestBodyDiff", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff.[ResponseDiff]getResponseDiff()", "name": "getResponseDiff", "arg_nums": 0, "params": [], "return_type": "ResponseDiff", "signature": "public ResponseDiff getResponseDiff()", "original_string": "  public ResponseDiff getResponseDiff() {\n    return this.responseDiff;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java", "class_name": "OpenApiDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ResponseDiff", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff.[HeadersDiff]getHeadersDiff()", "name": "getHeadersDiff", "arg_nums": 0, "params": [], "return_type": "HeadersDiff", "signature": "public HeadersDiff getHeadersDiff()", "original_string": "  public HeadersDiff getHeadersDiff() {\n    return this.headersDiff;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java", "class_name": "OpenApiDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "HeadersDiff", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff.[HeaderDiff]getHeaderDiff()", "name": "getHeaderDiff", "arg_nums": 0, "params": [], "return_type": "HeaderDiff", "signature": "public HeaderDiff getHeaderDiff()", "original_string": "  public HeaderDiff getHeaderDiff() {\n    return this.headerDiff;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java", "class_name": "OpenApiDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "HeaderDiff", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff.[ApiResponseDiff]getApiResponseDiff()", "name": "getApiResponseDiff", "arg_nums": 0, "params": [], "return_type": "ApiResponseDiff", "signature": "public ApiResponseDiff getApiResponseDiff()", "original_string": "  public ApiResponseDiff getApiResponseDiff() {\n    return this.apiResponseDiff;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java", "class_name": "OpenApiDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ApiResponseDiff", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff.[OperationDiff]getOperationDiff()", "name": "getOperationDiff", "arg_nums": 0, "params": [], "return_type": "OperationDiff", "signature": "public OperationDiff getOperationDiff()", "original_string": "  public OperationDiff getOperationDiff() {\n    return this.operationDiff;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java", "class_name": "OpenApiDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "OperationDiff", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff.[SecurityRequirementsDiff]getSecurityRequirementsDiff()", "name": "getSecurityRequirementsDiff", "arg_nums": 0, "params": [], "return_type": "SecurityRequirementsDiff", "signature": "public SecurityRequirementsDiff getSecurityRequirementsDiff()", "original_string": "  public SecurityRequirementsDiff getSecurityRequirementsDiff() {\n    return this.securityRequirementsDiff;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java", "class_name": "OpenApiDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "SecurityRequirementsDiff", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff.[SecurityRequirementDiff]getSecurityRequirementDiff()", "name": "getSecurityRequirementDiff", "arg_nums": 0, "params": [], "return_type": "SecurityRequirementDiff", "signature": "public SecurityRequirementDiff getSecurityRequirementDiff()", "original_string": "  public SecurityRequirementDiff getSecurityRequirementDiff() {\n    return this.securityRequirementDiff;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java", "class_name": "OpenApiDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "SecurityRequirementDiff", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff.[SecuritySchemeDiff]getSecuritySchemeDiff()", "name": "getSecuritySchemeDiff", "arg_nums": 0, "params": [], "return_type": "SecuritySchemeDiff", "signature": "public SecuritySchemeDiff getSecuritySchemeDiff()", "original_string": "  public SecuritySchemeDiff getSecuritySchemeDiff() {\n    return this.securitySchemeDiff;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java", "class_name": "OpenApiDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "SecuritySchemeDiff", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff.[OAuthFlowsDiff]getOAuthFlowsDiff()", "name": "getOAuthFlowsDiff", "arg_nums": 0, "params": [], "return_type": "OAuthFlowsDiff", "signature": "public OAuthFlowsDiff getOAuthFlowsDiff()", "original_string": "  public OAuthFlowsDiff getOAuthFlowsDiff() {\n    return this.oAuthFlowsDiff;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java", "class_name": "OpenApiDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "OAuthFlowsDiff", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff.[OAuthFlowDiff]getOAuthFlowDiff()", "name": "getOAuthFlowDiff", "arg_nums": 0, "params": [], "return_type": "OAuthFlowDiff", "signature": "public OAuthFlowDiff getOAuthFlowDiff()", "original_string": "  public OAuthFlowDiff getOAuthFlowDiff() {\n    return this.oAuthFlowDiff;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java", "class_name": "OpenApiDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "OAuthFlowDiff", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff.[ExtensionsDiff]getExtensionsDiff()", "name": "getExtensionsDiff", "arg_nums": 0, "params": [], "return_type": "ExtensionsDiff", "signature": "public ExtensionsDiff getExtensionsDiff()", "original_string": "  public ExtensionsDiff getExtensionsDiff() {\n    return this.extensionsDiff;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java", "class_name": "OpenApiDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ExtensionsDiff", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff.[MetadataDiff]getMetadataDiff()", "name": "getMetadataDiff", "arg_nums": 0, "params": [], "return_type": "MetadataDiff", "signature": "public MetadataDiff getMetadataDiff()", "original_string": "  public MetadataDiff getMetadataDiff() {\n    return this.metadataDiff;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java", "class_name": "OpenApiDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "MetadataDiff", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff.[OpenAPI]getOldSpecOpenApi()", "name": "getOldSpecOpenApi", "arg_nums": 0, "params": [], "return_type": "OpenAPI", "signature": "public OpenAPI getOldSpecOpenApi()", "original_string": "  public OpenAPI getOldSpecOpenApi() {\n    return this.oldSpecOpenApi;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java", "class_name": "OpenApiDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "OpenAPI", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff.[OpenAPI]getNewSpecOpenApi()", "name": "getNewSpecOpenApi", "arg_nums": 0, "params": [], "return_type": "OpenAPI", "signature": "public OpenAPI getNewSpecOpenApi()", "original_string": "  public OpenAPI getNewSpecOpenApi() {\n    return this.newSpecOpenApi;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java", "class_name": "OpenApiDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "OpenAPI", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff.[List<Endpoint>]getNewEndpoints()", "name": "getNewEndpoints", "arg_nums": 0, "params": [], "return_type": "List<Endpoint>", "signature": "public List<Endpoint> getNewEndpoints()", "original_string": "  public List<Endpoint> getNewEndpoints() {\n    return this.newEndpoints;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java", "class_name": "OpenApiDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<Endpoint>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff.[List<Endpoint>]getMissingEndpoints()", "name": "getMissingEndpoints", "arg_nums": 0, "params": [], "return_type": "List<Endpoint>", "signature": "public List<Endpoint> getMissingEndpoints()", "original_string": "  public List<Endpoint> getMissingEndpoints() {\n    return this.missingEndpoints;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java", "class_name": "OpenApiDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<Endpoint>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff.[List<ChangedOperation>]getChangedOperations()", "name": "getChangedOperations", "arg_nums": 0, "params": [], "return_type": "List<ChangedOperation>", "signature": "public List<ChangedOperation> getChangedOperations()", "original_string": "  public List<ChangedOperation> getChangedOperations() {\n    return this.changedOperations;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java", "class_name": "OpenApiDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<ChangedOperation>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff.[ChangedExtensions]getChangedExtensions()", "name": "getChangedExtensions", "arg_nums": 0, "params": [], "return_type": "ChangedExtensions", "signature": "public ChangedExtensions getChangedExtensions()", "original_string": "  public ChangedExtensions getChangedExtensions() {\n    return this.changedExtensions;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java", "class_name": "OpenApiDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiff.java.OpenApiDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedExtensions", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiffOptions.java.OpenApiDiffOptions.[]OpenApiDiffOptions(CompositeConfiguration)", "name": "OpenApiDiffOptions", "arg_nums": 1, "params": [{"name": "config", "type": "CompositeConfiguration"}], "return_type": "", "signature": "private OpenApiDiffOptions(CompositeConfiguration config)", "original_string": "  private OpenApiDiffOptions(CompositeConfiguration config) {\n    this.config = config;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiffOptions.java", "class_name": "OpenApiDiffOptions", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiffOptions.java.OpenApiDiffOptions", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiffOptions.java.OpenApiDiffOptions.[CompositeConfiguration]getConfig()", "name": "getConfig", "arg_nums": 0, "params": [], "return_type": "CompositeConfiguration", "signature": "public CompositeConfiguration getConfig()", "original_string": "  public CompositeConfiguration getConfig() {\n    return config;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiffOptions.java", "class_name": "OpenApiDiffOptions", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiffOptions.java.OpenApiDiffOptions", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "CompositeConfiguration", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiffOptions.java.OpenApiDiffOptions.[Builder]builder()", "name": "builder", "arg_nums": 0, "params": [], "return_type": "Builder", "signature": "public static Builder builder()", "original_string": "  public static Builder builder() {\n    return new Builder();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiffOptions.java", "class_name": "OpenApiDiffOptions", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/OpenApiDiffOptions.java.OpenApiDiffOptions", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Builder", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/CacheKey.java.CacheKey.[]CacheKey(String,String,DiffContext)", "name": "CacheKey", "arg_nums": 3, "params": [{"name": "left", "type": "String"}, {"name": "right", "type": "String"}, {"name": "context", "type": "DiffContext"}], "return_type": "", "signature": "public CacheKey(final String left, final String right, final DiffContext context)", "original_string": "  public CacheKey(final String left, final String right, final DiffContext context) {\n    this.left = left;\n    this.right = right;\n    this.context = context;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/CacheKey.java", "class_name": "CacheKey", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/CacheKey.java.CacheKey", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/CacheKey.java.CacheKey.[String]getLeft()", "name": "getLeft", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getLeft()", "original_string": "  public String getLeft() {\n    return this.left;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/CacheKey.java", "class_name": "CacheKey", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/CacheKey.java.CacheKey", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/CacheKey.java.CacheKey.[String]getRight()", "name": "getRight", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getRight()", "original_string": "  public String getRight() {\n    return this.right;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/CacheKey.java", "class_name": "CacheKey", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/CacheKey.java.CacheKey", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/CacheKey.java.CacheKey.[DiffContext]getContext()", "name": "getContext", "arg_nums": 0, "params": [], "return_type": "DiffContext", "signature": "public DiffContext getContext()", "original_string": "  public DiffContext getContext() {\n    return this.context;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/CacheKey.java", "class_name": "CacheKey", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/CacheKey.java.CacheKey", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "DiffContext", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/CacheKey.java.CacheKey.[boolean]equals(Object)", "name": "equals", "arg_nums": 1, "params": [{"name": "o", "type": "Object"}], "return_type": "boolean", "signature": "@Override\n  public boolean equals(Object o)", "original_string": "  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    CacheKey cacheKey = (CacheKey) o;\n    return Objects.equals(left, cacheKey.left)\n        && Objects.equals(right, cacheKey.right)\n        && Objects.equals(context, cacheKey.context);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/CacheKey.java", "class_name": "CacheKey", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/CacheKey.java.CacheKey", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/CacheKey.java.CacheKey.[int]hashCode()", "name": "hashCode", "arg_nums": 0, "params": [], "return_type": "int", "signature": "@Override\n  public int hashCode()", "original_string": "  @Override\n  public int hashCode() {\n    return Objects.hash(left, right, context);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/CacheKey.java", "class_name": "CacheKey", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/CacheKey.java.CacheKey", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/CacheKey.java.CacheKey.[java.lang.String]toString()", "name": "toString", "arg_nums": 0, "params": [], "return_type": "java.lang.String", "signature": "@java.lang.Override\n  public java.lang.String toString()", "original_string": "  @java.lang.Override\n  public java.lang.String toString() {\n    return \"CacheKey(left=\"\n        + this.getLeft()\n        + \", right=\"\n        + this.getRight()\n        + \", context=\"\n        + this.getContext()\n        + \")\";\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/CacheKey.java", "class_name": "CacheKey", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/CacheKey.java.CacheKey", "attributes": {"modifiers": "@java.lang.Override\n  public", "marker_annotations": ["@java.lang.Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "java.lang.String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/ExtensionDiff.java.ExtensionDiff.[ExtensionDiff]setOpenApiDiff(OpenApiDiff)", "name": "setOpenApiDiff", "arg_nums": 1, "params": [{"name": "openApiDiff", "type": "OpenApiDiff"}], "return_type": "ExtensionDiff", "signature": "ExtensionDiff setOpenApiDiff(OpenApiDiff openApiDiff)", "original_string": "  ExtensionDiff setOpenApiDiff(OpenApiDiff openApiDiff);", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/ExtensionDiff.java", "class_name": "ExtensionDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/ExtensionDiff.java.ExtensionDiff", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "ExtensionDiff", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/ExtensionDiff.java.ExtensionDiff.[String]getName()", "name": "getName", "arg_nums": 0, "params": [], "return_type": "String", "signature": "String getName()", "original_string": "  String getName();", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/ExtensionDiff.java", "class_name": "ExtensionDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/ExtensionDiff.java.ExtensionDiff", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/ExtensionDiff.java.ExtensionDiff.[Changed]diff(Change<?>,DiffContext)", "name": "diff", "arg_nums": 2, "params": [{"name": "extension", "type": "Change<?>"}, {"name": "context", "type": "DiffContext"}], "return_type": "Changed", "signature": "Changed diff(Change<?> extension, DiffContext context)", "original_string": "  Changed diff(Change<?> extension, DiffContext context);", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/ExtensionDiff.java", "class_name": "ExtensionDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/ExtensionDiff.java.ExtensionDiff", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "Changed", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/ExtensionDiff.java.ExtensionDiff.[boolean]isParentApplicable(Change.Type,Object,Object,DiffContext)", "name": "isParentApplicable", "arg_nums": 4, "params": [{"name": "type", "type": "Change.Type"}, {"name": "object", "type": "Object"}, {"name": "extension", "type": "Object"}, {"name": "context", "type": "DiffContext"}], "return_type": "boolean", "signature": "default boolean isParentApplicable(\n      Change.Type type, Object object, Object extension, DiffContext context)", "original_string": "  default boolean isParentApplicable(\n      Change.Type type, Object object, Object extension, DiffContext context) {\n    return true;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/ExtensionDiff.java", "class_name": "ExtensionDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/ExtensionDiff.java.ExtensionDiff", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/ExtensionsDiff.java.ExtensionsDiff.[]ExtensionsDiff(OpenApiDiff)", "name": "ExtensionsDiff", "arg_nums": 1, "params": [{"name": "openApiDiff", "type": "OpenApiDiff"}], "return_type": "", "signature": "public ExtensionsDiff(OpenApiDiff openApiDiff)", "original_string": "  public ExtensionsDiff(OpenApiDiff openApiDiff) {\n    this.openApiDiff = openApiDiff;\n    ServiceLoader<ExtensionDiff> extensionsLoader = ServiceLoader.load(ExtensionDiff.class);\n    extensionsLoader.reload();\n    for (ExtensionDiff anExtensionsLoader : extensionsLoader) {\n      extensionDiffs.add(anExtensionsLoader);\n    }\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/ExtensionsDiff.java", "class_name": "ExtensionsDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/ExtensionsDiff.java.ExtensionsDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/ExtensionsDiff.java.ExtensionsDiff.[boolean]isParentApplicable(Change.Type,Object,Map<String, Object>,DiffContext)", "name": "isParentApplicable", "arg_nums": 4, "params": [{"name": "type", "type": "Change.Type"}, {"name": "parent", "type": "Object"}, {"name": "extensions", "type": "Map<String, Object>"}, {"name": "context", "type": "DiffContext"}], "return_type": "boolean", "signature": "public boolean isParentApplicable(\n      Change.Type type, Object parent, Map<String, Object> extensions, DiffContext context)", "original_string": "  public boolean isParentApplicable(\n      Change.Type type, Object parent, Map<String, Object> extensions, DiffContext context) {\n    if (extensions.isEmpty()) {\n      return true;\n    }\n    return extensions.entrySet().stream()\n        .map(\n            entry ->\n                executeExtension(\n                    entry.getKey(),\n                    extensionDiff ->\n                        extensionDiff.isParentApplicable(type, parent, entry.getValue(), context)))\n        .allMatch(aBoolean -> aBoolean.orElse(true));\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/ExtensionsDiff.java", "class_name": "ExtensionsDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/ExtensionsDiff.java.ExtensionsDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/ExtensionsDiff.java.ExtensionsDiff.[Optional<ExtensionDiff>]getExtensionDiff(String)", "name": "getExtensionDiff", "arg_nums": 1, "params": [{"name": "name", "type": "String"}], "return_type": "Optional<ExtensionDiff>", "signature": "public Optional<ExtensionDiff> getExtensionDiff(String name)", "original_string": "  public Optional<ExtensionDiff> getExtensionDiff(String name) {\n    return extensionDiffs.stream().filter(diff -> (\"x-\" + diff.getName()).equals(name)).findFirst();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/ExtensionsDiff.java", "class_name": "ExtensionsDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/ExtensionsDiff.java.ExtensionsDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Optional<ExtensionDiff>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/ExtensionsDiff.java.ExtensionsDiff.[Optional<T>]executeExtension(String,Function<ExtensionDiff, T>)", "name": "executeExtension", "arg_nums": 2, "params": [{"name": "name", "type": "String"}, {"name": "predicate", "type": "Function<ExtensionDiff, T>"}], "return_type": "Optional<T>", "signature": "public <T> Optional<T> executeExtension(String name, Function<ExtensionDiff, T> predicate)", "original_string": "  public <T> Optional<T> executeExtension(String name, Function<ExtensionDiff, T> predicate) {\n    return getExtensionDiff(name)\n        .map(extensionDiff -> extensionDiff.setOpenApiDiff(openApiDiff))\n        .map(predicate);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/ExtensionsDiff.java", "class_name": "ExtensionsDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/ExtensionsDiff.java.ExtensionsDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Optional<T>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/ExtensionsDiff.java.ExtensionsDiff.[Optional<ChangedExtensions>]diff(Map<String, Object>,Map<String, Object>)", "name": "diff", "arg_nums": 2, "params": [{"name": "left", "type": "Map<String, Object>"}, {"name": "right", "type": "Map<String, Object>"}], "return_type": "Optional<ChangedExtensions>", "signature": "public Optional<ChangedExtensions> diff(Map<String, Object> left, Map<String, Object> right)", "original_string": "  public Optional<ChangedExtensions> diff(Map<String, Object> left, Map<String, Object> right) {\n    return this.diff(left, right, null);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/ExtensionsDiff.java", "class_name": "ExtensionsDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/ExtensionsDiff.java.ExtensionsDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Optional<ChangedExtensions>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/ExtensionsDiff.java.ExtensionsDiff.[Optional<ChangedExtensions>]diff(Map<String, Object>,Map<String, Object>,DiffContext)", "name": "diff", "arg_nums": 3, "params": [{"name": "left", "type": "Map<String, Object>"}, {"name": "right", "type": "Map<String, Object>"}, {"name": "context", "type": "DiffContext"}], "return_type": "Optional<ChangedExtensions>", "signature": "public Optional<ChangedExtensions> diff(\n      Map<String, Object> left, Map<String, Object> right, DiffContext context)", "original_string": "  public Optional<ChangedExtensions> diff(\n      Map<String, Object> left, Map<String, Object> right, DiffContext context) {\n    left = copyMap(left);\n    right = copyMap(right);\n    ChangedExtensions changedExtensions = new ChangedExtensions(left, copyMap(right), context);\n    for (Map.Entry<String, Object> entry : left.entrySet()) {\n      if (right.containsKey(entry.getKey())) {\n        Object rightValue = right.remove(entry.getKey());\n        executeExtensionDiff(entry.getKey(), Change.changed(entry.getValue(), rightValue), context)\n            .filter(Changed::isDifferent)\n            .ifPresent(changed -> changedExtensions.getChanged().put(entry.getKey(), changed));\n      } else {\n        executeExtensionDiff(entry.getKey(), Change.removed(entry.getValue()), context)\n            .filter(Changed::isDifferent)\n            .ifPresent(changed -> changedExtensions.getMissing().put(entry.getKey(), changed));\n      }\n    }\n    right.forEach(\n        (key, value) ->\n            executeExtensionDiff(key, Change.added(value), context)\n                .filter(Changed::isDifferent)\n                .ifPresent(changed -> changedExtensions.getIncreased().put(key, changed)));\n    return isChanged(changedExtensions);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/ExtensionsDiff.java", "class_name": "ExtensionsDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/ExtensionsDiff.java.ExtensionsDiff", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Optional<ChangedExtensions>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/ExtensionsDiff.java.ExtensionsDiff.[Optional<Changed>]executeExtensionDiff(String,Change<?>,DiffContext)", "name": "executeExtensionDiff", "arg_nums": 3, "params": [{"name": "name", "type": "String"}, {"name": "change", "type": "Change<?>"}, {"name": "context", "type": "DiffContext"}], "return_type": "Optional<Changed>", "signature": "private Optional<Changed> executeExtensionDiff(\n      String name, Change<?> change, DiffContext context)", "original_string": "  private Optional<Changed> executeExtensionDiff(\n      String name, Change<?> change, DiffContext context) {\n    return executeExtension(name, diff -> diff.setOpenApiDiff(openApiDiff).diff(change, context));\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/ExtensionsDiff.java", "class_name": "ExtensionsDiff", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/ExtensionsDiff.java.ExtensionsDiff", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "Optional<Changed>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/schemadiffresult/ArraySchemaDiffResult.java.ArraySchemaDiffResult.[]ArraySchemaDiffResult(OpenApiDiff)", "name": "ArraySchemaDiffResult", "arg_nums": 1, "params": [{"name": "openApiDiff", "type": "OpenApiDiff"}], "return_type": "", "signature": "public ArraySchemaDiffResult(OpenApiDiff openApiDiff)", "original_string": "  public ArraySchemaDiffResult(OpenApiDiff openApiDiff) {\n    super(\"array\", openApiDiff);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/schemadiffresult/ArraySchemaDiffResult.java", "class_name": "ArraySchemaDiffResult", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/schemadiffresult/ArraySchemaDiffResult.java.ArraySchemaDiffResult", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/schemadiffresult/ArraySchemaDiffResult.java.ArraySchemaDiffResult.[DeferredChanged<ChangedSchema>]diff(RecursiveSchemaSet,Components,Components,T,T,DiffContext)", "name": "diff", "arg_nums": 6, "params": [{"name": "refSet", "type": "RecursiveSchemaSet"}, {"name": "leftComponents", "type": "Components"}, {"name": "rightComponents", "type": "Components"}, {"name": "left", "type": "T"}, {"name": "right", "type": "T"}, {"name": "context", "type": "DiffContext"}], "return_type": "DeferredChanged<ChangedSchema>", "signature": "@Override\n  public <T extends Schema<X>, X> DeferredChanged<ChangedSchema> diff(\n      RecursiveSchemaSet refSet,\n      Components leftComponents,\n      Components rightComponents,\n      T left,\n      T right,\n      DiffContext context)", "original_string": "  @Override\n  public <T extends Schema<X>, X> DeferredChanged<ChangedSchema> diff(\n      RecursiveSchemaSet refSet,\n      Components leftComponents,\n      Components rightComponents,\n      T left,\n      T right,\n      DiffContext context) {\n    ArraySchema leftArraySchema = (ArraySchema) left;\n    ArraySchema rightArraySchema = (ArraySchema) right;\n\n    DeferredChanged<ChangedSchema> superSchemaDiff =\n        super.diff(refSet, leftComponents, rightComponents, left, right, context)\n            .flatMap(\n                changeSchemaOptional -> {\n                  DeferredChanged<ChangedSchema> itemsDiff =\n                      openApiDiff\n                          .getSchemaDiff()\n                          .diff(\n                              refSet,\n                              leftArraySchema.getItems(),\n                              rightArraySchema.getItems(),\n                              context.copyWithRequired(true));\n                  itemsDiff.ifPresent(changedSchema::setItems);\n                  return itemsDiff;\n                });\n\n    return superSchemaDiff.mapOptional(schemaOptional -> isApplicable(context));\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/schemadiffresult/ArraySchemaDiffResult.java", "class_name": "ArraySchemaDiffResult", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/schemadiffresult/ArraySchemaDiffResult.java.ArraySchemaDiffResult", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "DeferredChanged<ChangedSchema>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/schemadiffresult/ComposedSchemaDiffResult.java.ComposedSchemaDiffResult.[]ComposedSchemaDiffResult(OpenApiDiff)", "name": "ComposedSchemaDiffResult", "arg_nums": 1, "params": [{"name": "openApiDiff", "type": "OpenApiDiff"}], "return_type": "", "signature": "public ComposedSchemaDiffResult(OpenApiDiff openApiDiff)", "original_string": "  public ComposedSchemaDiffResult(OpenApiDiff openApiDiff) {\n    super(openApiDiff);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/schemadiffresult/ComposedSchemaDiffResult.java", "class_name": "ComposedSchemaDiffResult", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/schemadiffresult/ComposedSchemaDiffResult.java.ComposedSchemaDiffResult", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/schemadiffresult/ComposedSchemaDiffResult.java.ComposedSchemaDiffResult.[DeferredChanged<ChangedSchema>]diff(RecursiveSchemaSet,Components,Components,T,T,DiffContext)", "name": "diff", "arg_nums": 6, "params": [{"name": "refSet", "type": "RecursiveSchemaSet"}, {"name": "leftComponents", "type": "Components"}, {"name": "rightComponents", "type": "Components"}, {"name": "left", "type": "T"}, {"name": "right", "type": "T"}, {"name": "context", "type": "DiffContext"}], "return_type": "DeferredChanged<ChangedSchema>", "signature": "@Override\n  public <T extends Schema<X>, X> DeferredChanged<ChangedSchema> diff(\n      RecursiveSchemaSet refSet,\n      Components leftComponents,\n      Components rightComponents,\n      T left,\n      T right,\n      DiffContext context)", "original_string": "  @Override\n  public <T extends Schema<X>, X> DeferredChanged<ChangedSchema> diff(\n      RecursiveSchemaSet refSet,\n      Components leftComponents,\n      Components rightComponents,\n      T left,\n      T right,\n      DiffContext context) {\n\n    if (left instanceof ComposedSchema) {\n      ComposedSchema leftComposedSchema = (ComposedSchema) left;\n      ComposedSchema rightComposedSchema = (ComposedSchema) right;\n      DeferredBuilder<ChangedSchema> discriminatorChangedBuilder = new DeferredBuilder<>();\n\n      if (CollectionUtils.isNotEmpty(leftComposedSchema.getOneOf())\n          || CollectionUtils.isNotEmpty(rightComposedSchema.getOneOf())) {\n\n        Discriminator leftDis = leftComposedSchema.getDiscriminator();\n        Discriminator rightDis = rightComposedSchema.getDiscriminator();\n        if ((leftDis == null && rightDis != null)\n            || (leftDis != null && rightDis == null)\n            || (leftDis != null\n                && rightDis != null\n                && ((leftDis.getPropertyName() == null && rightDis.getPropertyName() != null)\n                    || (leftDis.getPropertyName() != null && rightDis.getPropertyName() == null)\n                    || (leftDis.getPropertyName() != null\n                        && rightDis.getPropertyName() != null\n                        && !leftDis.getPropertyName().equals(rightDis.getPropertyName()))))) {\n          changedSchema.setOldSchema(left);\n          changedSchema.setNewSchema(right);\n          changedSchema.setDiscriminatorPropertyChanged(true);\n          changedSchema.setContext(context);\n          return new RealizedChanged<>(Optional.of(changedSchema));\n        }\n\n        Map<String, String> leftMapping = getMapping(leftComposedSchema);\n        Map<String, String> rightMapping = getMapping(rightComposedSchema);\n\n        MapKeyDiff<String, Schema> mappingDiff =\n            MapKeyDiff.diff(\n                getSchema(leftComponents, leftMapping, leftComposedSchema),\n                getSchema(rightComponents, rightMapping, rightComposedSchema));\n        Map<String, ChangedSchema> changedMapping = new LinkedHashMap<>();\n        for (String key : mappingDiff.getSharedKey()) {\n          Schema<?> leftSchema = new Schema<>();\n          leftSchema.set$ref(leftMapping.get(key));\n          Schema<?> rightSchema = new Schema<>();\n          rightSchema.set$ref(rightMapping.get(key));\n          discriminatorChangedBuilder\n              .with(\n                  openApiDiff\n                      .getSchemaDiff()\n                      .diff(refSet, leftSchema, rightSchema, context.copyWithRequired(true)))\n              .ifPresent(schema -> changedMapping.put(key, schema));\n        }\n\n        discriminatorChangedBuilder.whenSet(\n            composedSchemas ->\n                changedSchema.setOneOfSchema(\n                    new ChangedOneOfSchema(leftMapping, rightMapping, context)\n                        .setIncreased(mappingDiff.getIncreased())\n                        .setMissing(mappingDiff.getMissing())\n                        .setChanged(changedMapping)));\n      }\n\n      return discriminatorChangedBuilder\n          .build()\n          .flatMap(\n              values -> super.diff(refSet, leftComponents, rightComponents, left, right, context));\n    } else {\n      return openApiDiff.getSchemaDiff().getTypeChangedSchema(left, right, context);\n    }\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/schemadiffresult/ComposedSchemaDiffResult.java", "class_name": "ComposedSchemaDiffResult", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/schemadiffresult/ComposedSchemaDiffResult.java.ComposedSchemaDiffResult", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "DeferredChanged<ChangedSchema>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/schemadiffresult/ComposedSchemaDiffResult.java.ComposedSchemaDiffResult.[Map<String, Schema>]getSchema(Components,Map<String, String>,ComposedSchema)", "name": "getSchema", "arg_nums": 3, "params": [{"name": "components", "type": "Components"}, {"name": "mapping", "type": "Map<String, String>"}, {"name": "composedSchema", "type": "ComposedSchema"}], "return_type": "Map<String, Schema>", "signature": "private Map<String, Schema> getSchema(\n      Components components, Map<String, String> mapping, ComposedSchema composedSchema)", "original_string": "  private Map<String, Schema> getSchema(\n      Components components, Map<String, String> mapping, ComposedSchema composedSchema) {\n    Map<String, Schema> result = new LinkedHashMap<>();\n    mapping.forEach(\n        (key, value) -> result.put(key, refPointer.resolveRef(components, new Schema<>(), value)));\n\n    result.putAll(getUnnamedSchemas(composedSchema.getAllOf(), \"all-of\"));\n    result.putAll(getUnnamedSchemas(composedSchema.getOneOf(), \"one-of\"));\n    result.putAll(getUnnamedSchemas(composedSchema.getAnyOf(), \"any-of\"));\n    return result;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/schemadiffresult/ComposedSchemaDiffResult.java", "class_name": "ComposedSchemaDiffResult", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/schemadiffresult/ComposedSchemaDiffResult.java.ComposedSchemaDiffResult", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "Map<String, Schema>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/schemadiffresult/ComposedSchemaDiffResult.java.ComposedSchemaDiffResult.[Map<String, String>]getMapping(ComposedSchema)", "name": "getMapping", "arg_nums": 1, "params": [{"name": "composedSchema", "type": "ComposedSchema"}], "return_type": "Map<String, String>", "signature": "private Map<String, String> getMapping(ComposedSchema composedSchema)", "original_string": "  private Map<String, String> getMapping(ComposedSchema composedSchema) {\n    Map<String, String> reverseMapping = new LinkedHashMap<>();\n    for (Schema<?> schema : composedSchema.getOneOf()) {\n      String ref = schema.get$ref();\n      if (ref == null) {\n        continue;\n      }\n      String schemaName = refPointer.getRefName(ref);\n      if (schemaName == null) {\n        throw new IllegalArgumentException(\"invalid schema: \" + ref);\n      }\n      reverseMapping.put(ref, schemaName);\n    }\n\n    if (composedSchema.getDiscriminator() != null\n        && composedSchema.getDiscriminator().getMapping() != null) {\n      for (String ref : composedSchema.getDiscriminator().getMapping().keySet()) {\n        reverseMapping.put(composedSchema.getDiscriminator().getMapping().get(ref), ref);\n      }\n    }\n\n    return reverseMapping.entrySet().stream()\n        .collect(Collectors.toMap(Map.Entry::getValue, Map.Entry::getKey));\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/schemadiffresult/ComposedSchemaDiffResult.java", "class_name": "ComposedSchemaDiffResult", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/schemadiffresult/ComposedSchemaDiffResult.java.ComposedSchemaDiffResult", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "Map<String, String>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/schemadiffresult/ComposedSchemaDiffResult.java.ComposedSchemaDiffResult.[Map<String, Schema>]getUnnamedSchemas(List<Schema>,String)", "name": "getUnnamedSchemas", "arg_nums": 2, "params": [{"name": "schemas", "type": "List<Schema>"}, {"name": "name", "type": "String"}], "return_type": "Map<String, Schema>", "signature": "private Map<String, Schema> getUnnamedSchemas(List<Schema> schemas, String name)", "original_string": "  private Map<String, Schema> getUnnamedSchemas(List<Schema> schemas, String name) {\n    Map<String, Schema> result = new LinkedHashMap<>();\n\n    if (schemas == null) {\n      return result;\n    }\n\n    for (int i = 0; i < schemas.size(); i++) {\n      Schema<?> schema = schemas.get(i);\n\n      // If the ref is named, then we ignore it since getMapping will handle it.\n      if (schema.get$ref() != null) {\n        continue;\n      }\n\n      result.put(String.format(\"%s-%s\", name, i), schema);\n    }\n\n    return result;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/schemadiffresult/ComposedSchemaDiffResult.java", "class_name": "ComposedSchemaDiffResult", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/schemadiffresult/ComposedSchemaDiffResult.java.ComposedSchemaDiffResult", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "Map<String, Schema>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/schemadiffresult/SchemaDiffResult.java.SchemaDiffResult.[]SchemaDiffResult(OpenApiDiff)", "name": "SchemaDiffResult", "arg_nums": 1, "params": [{"name": "openApiDiff", "type": "OpenApiDiff"}], "return_type": "", "signature": "public SchemaDiffResult(OpenApiDiff openApiDiff)", "original_string": "  public SchemaDiffResult(OpenApiDiff openApiDiff) {\n    this.openApiDiff = openApiDiff;\n    this.changedSchema = new ChangedSchema();\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/schemadiffresult/SchemaDiffResult.java", "class_name": "SchemaDiffResult", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/schemadiffresult/SchemaDiffResult.java.SchemaDiffResult", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/schemadiffresult/SchemaDiffResult.java.SchemaDiffResult.[]SchemaDiffResult(String,OpenApiDiff)", "name": "SchemaDiffResult", "arg_nums": 2, "params": [{"name": "type", "type": "String"}, {"name": "openApiDiff", "type": "OpenApiDiff"}], "return_type": "", "signature": "public SchemaDiffResult(String type, OpenApiDiff openApiDiff)", "original_string": "  public SchemaDiffResult(String type, OpenApiDiff openApiDiff) {\n    this(openApiDiff);\n    this.changedSchema.setType(type);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/schemadiffresult/SchemaDiffResult.java", "class_name": "SchemaDiffResult", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/schemadiffresult/SchemaDiffResult.java.SchemaDiffResult", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/schemadiffresult/SchemaDiffResult.java.SchemaDiffResult.[DeferredChanged<ChangedSchema>]diff(RecursiveSchemaSet,Components,Components,V,V,DiffContext)", "name": "diff", "arg_nums": 6, "params": [{"name": "refSet", "type": "RecursiveSchemaSet"}, {"name": "leftComponents", "type": "Components"}, {"name": "rightComponents", "type": "Components"}, {"name": "left", "type": "V"}, {"name": "right", "type": "V"}, {"name": "context", "type": "DiffContext"}], "return_type": "DeferredChanged<ChangedSchema>", "signature": "public <V extends Schema<X>, X> DeferredChanged<ChangedSchema> diff(\n      RecursiveSchemaSet refSet,\n      Components leftComponents,\n      Components rightComponents,\n      V left,\n      V right,\n      DiffContext context)", "original_string": "  public <V extends Schema<X>, X> DeferredChanged<ChangedSchema> diff(\n      RecursiveSchemaSet refSet,\n      Components leftComponents,\n      Components rightComponents,\n      V left,\n      V right,\n      DiffContext context) {\n\n    DeferredBuilder<Changed> builder = new DeferredBuilder<>();\n\n    ChangedEnum<X> changedEnum =\n        ListDiff.diff(new ChangedEnum<>(left.getEnum(), right.getEnum(), context));\n    changedSchema\n        .setContext(context)\n        .setOldSchema(left)\n        .setNewSchema(right)\n        .setChangeDeprecated(\n            !Boolean.TRUE.equals(left.getDeprecated())\n                && Boolean.TRUE.equals(right.getDeprecated()))\n        .setChangeTitle(!Objects.equals(left.getTitle(), right.getTitle()))\n        .setRequired(\n            ListDiff.diff(new ChangedRequired(left.getRequired(), right.getRequired(), context)))\n        .setChangeDefault(!Objects.equals(left.getDefault(), right.getDefault()))\n        .setEnumeration(changedEnum)\n        .setChangeFormat(!Objects.equals(left.getFormat(), right.getFormat()))\n        .setReadOnly(new ChangedReadOnly(left.getReadOnly(), right.getReadOnly(), context))\n        .setWriteOnly(new ChangedWriteOnly(left.getWriteOnly(), right.getWriteOnly(), context))\n        .setMaxLength(new ChangedMaxLength(left.getMaxLength(), right.getMaxLength(), context))\n        .setNumericRange(\n            new ChangedNumericRange(\n                left.getMinimum(),\n                right.getMinimum(),\n                left.getMaximum(),\n                right.getMaximum(),\n                left.getExclusiveMinimum(),\n                right.getExclusiveMinimum(),\n                left.getExclusiveMaximum(),\n                right.getExclusiveMaximum(),\n                context));\n    builder\n        .with(\n            openApiDiff\n                .getExtensionsDiff()\n                .diff(left.getExtensions(), right.getExtensions(), context))\n        .ifPresent(changedSchema::setExtensions);\n    builder\n        .with(\n            openApiDiff\n                .getMetadataDiff()\n                .diff(left.getDescription(), right.getDescription(), context))\n        .ifPresent(changedSchema::setDescription);\n    Map<String, Schema> leftProperties = left.getProperties();\n    Map<String, Schema> rightProperties = right.getProperties();\n    MapKeyDiff<String, Schema> propertyDiff = MapKeyDiff.diff(leftProperties, rightProperties);\n    for (String key : propertyDiff.getSharedKey()) {\n      builder\n          .with(\n              openApiDiff\n                  .getSchemaDiff()\n                  .diff(\n                      refSet,\n                      leftProperties.get(key),\n                      rightProperties.get(key),\n                      required(context, key, right.getRequired())))\n          .ifPresent(\n              changedSchema1 -> changedSchema.getChangedProperties().put(key, changedSchema1));\n    }\n    compareAdditionalProperties(refSet, left, right, context, builder);\n    changedSchema\n        .getIncreasedProperties()\n        .putAll(filterProperties(Change.Type.ADDED, propertyDiff.getIncreased(), context));\n    changedSchema\n        .getMissingProperties()\n        .putAll(filterProperties(Change.Type.REMOVED, propertyDiff.getMissing(), context));\n    return builder.build().mapOptional(values -> isApplicable(context));\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/schemadiffresult/SchemaDiffResult.java", "class_name": "SchemaDiffResult", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/schemadiffresult/SchemaDiffResult.java.SchemaDiffResult", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "DeferredChanged<ChangedSchema>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/schemadiffresult/SchemaDiffResult.java.SchemaDiffResult.[Optional<ChangedSchema>]isApplicable(DiffContext)", "name": "isApplicable", "arg_nums": 1, "params": [{"name": "context", "type": "DiffContext"}], "return_type": "Optional<ChangedSchema>", "signature": "protected Optional<ChangedSchema> isApplicable(DiffContext context)", "original_string": "  protected Optional<ChangedSchema> isApplicable(DiffContext context) {\n    if (changedSchema.getReadOnly().isUnchanged()\n        && changedSchema.getWriteOnly().isUnchanged()\n        && !isPropertyApplicable(changedSchema.getNewSchema(), context)) {\n      return Optional.empty();\n    }\n    return isChanged(changedSchema);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/schemadiffresult/SchemaDiffResult.java", "class_name": "SchemaDiffResult", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/schemadiffresult/SchemaDiffResult.java.SchemaDiffResult", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Optional<ChangedSchema>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/schemadiffresult/SchemaDiffResult.java.SchemaDiffResult.[Map<String, Schema<?>>]filterProperties(Change.Type,Map<String, Schema>,DiffContext)", "name": "filterProperties", "arg_nums": 3, "params": [{"name": "type", "type": "Change.Type"}, {"name": "properties", "type": "Map<String, Schema>"}, {"name": "context", "type": "DiffContext"}], "return_type": "Map<String, Schema<?>>", "signature": "private Map<String, Schema<?>> filterProperties(\n      Change.Type type, Map<String, Schema> properties, DiffContext context)", "original_string": "  private Map<String, Schema<?>> filterProperties(\n      Change.Type type, Map<String, Schema> properties, DiffContext context) {\n    Map<String, Schema<?>> result = new LinkedHashMap<>();\n    for (Map.Entry<String, Schema> entry : properties.entrySet()) {\n      if (isPropertyApplicable(entry.getValue(), context)\n          && openApiDiff\n              .getExtensionsDiff()\n              .isParentApplicable(\n                  type,\n                  entry.getValue(),\n                  ofNullable(entry.getValue().getExtensions()).orElse(new LinkedHashMap<>()),\n                  context)) {\n        result.put(entry.getKey(), entry.getValue());\n      } else {\n        // Child property is not applicable, so required cannot be applied\n        changedSchema.getRequired().getIncreased().remove(entry.getKey());\n      }\n    }\n    return result;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/schemadiffresult/SchemaDiffResult.java", "class_name": "SchemaDiffResult", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/schemadiffresult/SchemaDiffResult.java.SchemaDiffResult", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "Map<String, Schema<?>>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/schemadiffresult/SchemaDiffResult.java.SchemaDiffResult.[boolean]isPropertyApplicable(Schema<?>,DiffContext)", "name": "isPropertyApplicable", "arg_nums": 2, "params": [{"name": "schema", "type": "Schema<?>"}, {"name": "context", "type": "DiffContext"}], "return_type": "boolean", "signature": "private boolean isPropertyApplicable(Schema<?> schema, DiffContext context)", "original_string": "  private boolean isPropertyApplicable(Schema<?> schema, DiffContext context) {\n    return !(context.isResponse() && Boolean.TRUE.equals(schema.getWriteOnly()))\n        && !(context.isRequest() && Boolean.TRUE.equals(schema.getReadOnly()));\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/schemadiffresult/SchemaDiffResult.java", "class_name": "SchemaDiffResult", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/schemadiffresult/SchemaDiffResult.java.SchemaDiffResult", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/schemadiffresult/SchemaDiffResult.java.SchemaDiffResult.[DiffContext]required(DiffContext,String,List<String>)", "name": "required", "arg_nums": 3, "params": [{"name": "context", "type": "DiffContext"}, {"name": "key", "type": "String"}, {"name": "required", "type": "List<String>"}], "return_type": "DiffContext", "signature": "private DiffContext required(DiffContext context, String key, List<String> required)", "original_string": "  private DiffContext required(DiffContext context, String key, List<String> required) {\n    return context.copyWithRequired(required != null && required.contains(key));\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/schemadiffresult/SchemaDiffResult.java", "class_name": "SchemaDiffResult", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/schemadiffresult/SchemaDiffResult.java.SchemaDiffResult", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "DiffContext", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/schemadiffresult/SchemaDiffResult.java.SchemaDiffResult.[void]compareAdditionalProperties(RecursiveSchemaSet,Schema<?>,Schema<?>,DiffContext,DeferredBuilder<Changed>)", "name": "compareAdditionalProperties", "arg_nums": 5, "params": [{"name": "refSet", "type": "RecursiveSchemaSet"}, {"name": "leftSchema", "type": "Schema<?>"}, {"name": "rightSchema", "type": "Schema<?>"}, {"name": "context", "type": "DiffContext"}, {"name": "builder", "type": "DeferredBuilder<Changed>"}], "return_type": "void", "signature": "private void compareAdditionalProperties(\n      RecursiveSchemaSet refSet,\n      Schema<?> leftSchema,\n      Schema<?> rightSchema,\n      DiffContext context,\n      DeferredBuilder<Changed> builder)", "original_string": "  private void compareAdditionalProperties(\n      RecursiveSchemaSet refSet,\n      Schema<?> leftSchema,\n      Schema<?> rightSchema,\n      DiffContext context,\n      DeferredBuilder<Changed> builder) {\n    Object left = leftSchema.getAdditionalProperties();\n    Object right = rightSchema.getAdditionalProperties();\n    if (left instanceof Schema || right instanceof Schema) {\n      Schema<?> leftAdditionalSchema = left instanceof Schema ? (Schema<?>) left : null;\n      Schema<?> rightAdditionalSchema = right instanceof Schema ? (Schema<?>) right : null;\n      ChangedSchema apChangedSchema =\n          new ChangedSchema()\n              .setContext(context)\n              .setOldSchema(leftAdditionalSchema)\n              .setNewSchema(rightAdditionalSchema);\n      if (left != null && right != null) {\n        DeferredChanged<ChangedSchema> addPropChangedSchemaOP =\n            openApiDiff\n                .getSchemaDiff()\n                .diff(\n                    refSet,\n                    leftAdditionalSchema,\n                    rightAdditionalSchema,\n                    context.copyWithRequired(false));\n        builder\n            .with(addPropChangedSchemaOP)\n            .whenSet(\n                optional -> {\n                  ChangedSchema apc = optional.orElse(apChangedSchema);\n                  isChanged(apc).ifPresent(changedSchema::setAddProp);\n                });\n      } else {\n        isChanged(apChangedSchema).ifPresent(changedSchema::setAddProp);\n      }\n    }\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/schemadiffresult/SchemaDiffResult.java", "class_name": "SchemaDiffResult", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/schemadiffresult/SchemaDiffResult.java.SchemaDiffResult", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/schemadiffresult/SchemaDiffResult.java.SchemaDiffResult.[ChangedSchema]getChangedSchema()", "name": "getChangedSchema", "arg_nums": 0, "params": [], "return_type": "ChangedSchema", "signature": "public ChangedSchema getChangedSchema()", "original_string": "  public ChangedSchema getChangedSchema() {\n    return this.changedSchema;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/schemadiffresult/SchemaDiffResult.java", "class_name": "SchemaDiffResult", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/schemadiffresult/SchemaDiffResult.java.SchemaDiffResult", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ChangedSchema", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/schemadiffresult/SchemaDiffResult.java.SchemaDiffResult.[OpenApiDiff]getOpenApiDiff()", "name": "getOpenApiDiff", "arg_nums": 0, "params": [], "return_type": "OpenApiDiff", "signature": "public OpenApiDiff getOpenApiDiff()", "original_string": "  public OpenApiDiff getOpenApiDiff() {\n    return this.openApiDiff;\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/compare/schemadiffresult/SchemaDiffResult.java", "class_name": "SchemaDiffResult", "class_uri": "src/main/java/org/openapitools/openapidiff/core/compare/schemadiffresult/SchemaDiffResult.java.SchemaDiffResult", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "OpenApiDiff", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/exception/RendererException.java.RendererException.[]RendererException(Throwable)", "name": "RendererException", "arg_nums": 1, "params": [{"name": "cause", "type": "Throwable"}], "return_type": "", "signature": "public RendererException(Throwable cause)", "original_string": "  public RendererException(Throwable cause) {\n    super(cause);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/exception/RendererException.java", "class_name": "RendererException", "class_uri": "src/main/java/org/openapitools/openapidiff/core/exception/RendererException.java.RendererException", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/openapitools/openapidiff/core/exception/RendererException.java.RendererException.[]RendererException(String,Throwable)", "name": "RendererException", "arg_nums": 2, "params": [{"name": "message", "type": "String"}, {"name": "cause", "type": "Throwable"}], "return_type": "", "signature": "public RendererException(String message, Throwable cause)", "original_string": "  public RendererException(String message, Throwable cause) {\n    super(message, cause);\n  }", "default_arguments": null, "file": "src/main/java/org/openapitools/openapidiff/core/exception/RendererException.java", "class_name": "RendererException", "class_uri": "src/main/java/org/openapitools/openapidiff/core/exception/RendererException.java.RendererException", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}]