[{"file_path": "src/test/java/org/openapitools/openapidiff/core/ReferenceDiffCacheTest.java", "testclass_name": "ReferenceDiffCacheTest", "dependencies": ["package org.openapitools.openapidiff.core;", "import static org.openapitools.openapidiff.core.TestUtils.assertOpenApiAreEquals;", "import org.junit.jupiter.api.Test;"], "name": "ReferenceDiffCacheTest", "description": "Test class for verifying the behavior of the ReferenceDiffCache.", "class_members": {"variables": [{"name": "OPENAPI_DOC1", "type": "final String"}]}, "test_cases": [{"name": "testDiffSame", "primary_tested": [], "external_dependencies": {"modules": ["TestUtils"], "class_members": [{"name": "OPENAPI_DOC1", "type": "variable"}], "project_specific_resources": ["TestUtils.assertOpenApiAreEquals(String,String)"]}, "category": "unit", "description": "Tests that the OpenAPI documents are the same."}]}, {"file_path": "src/test/java/org/openapitools/openapidiff/core/AllOfOneOfDiffTest.java", "testclass_name": "AllOfOneOfDiffTest", "dependencies": ["package org.openapitools.openapidiff.core;", "import static org.assertj.core.api.Assertions.assertThat;", "import org.junit.jupiter.api.Test;", "import org.openapitools.openapidiff.core.model.ChangedOpenApi;"], "name": "AllOfOneOfDiffTest", "description": "Test for checking if allOf referring to oneOf schemas are supported.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "allOfReferringToOneOfSchemasAreSupported", "primary_tested": ["ChangedOpenApi.isCoreChanged()"], "external_dependencies": {"modules": ["ChangedOpenApi", "OpenApiCompare"]}, "category": "unit", "description": "Tests if allOf referring to oneOf schemas are supported by comparing two OpenAPI specifications."}]}, {"file_path": "src/test/java/org/openapitools/openapidiff/core/HtmlRenderTest.java", "testclass_name": "HtmlRenderTest", "dependencies": ["package org.openapitools.openapidiff.core;", "import static org.assertj.core.api.Assertions.assertThat;", "import java.io.ByteArrayOutputStream;", "import java.io.OutputStreamWriter;", "import org.junit.jupiter.api.Test;", "import org.openapitools.openapidiff.core.model.ChangedOpenApi;", "import org.openapitools.openapidiff.core.output.HtmlRender;"], "name": "HtmlRenderTest", "description": "Tests for the HtmlRender class to ensure it handles rendering without failures when properties are removed.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "renderDoesNotFailWhenPropertyHasBeenRemoved", "primary_tested": ["HtmlRender.render(ChangedOpenApi,OutputStreamWriter)"], "associated_methods": [], "external_dependencies": {"modules": ["HtmlRender", "ByteArrayOutputStream", "OutputStreamWriter", "ChangedOpenApi", "OpenApiCompare"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the HtmlRender does not fail when rendering a diff where a property has been removed."}]}, {"file_path": "src/test/java/org/openapitools/openapidiff/core/AdditionalPropertiesTest.java", "testclass_name": "AdditionalPropertiesTest", "dependencies": ["package org.openapitools.openapidiff.core;", "import static org.assertj.core.api.Assertions.assertThat;", "import java.io.ByteArrayOutputStream;", "import java.io.OutputStreamWriter;", "import org.junit.jupiter.api.Test;", "import org.openapitools.openapidiff.core.model.ChangedOpenApi;", "import org.openapitools.openapidiff.core.output.ConsoleRender;"], "name": "AdditionalPropertiesTest", "description": "Tests for additional properties support in OpenAPI diff.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "booleanAdditionalPropertiesAreSupported", "primary_tested": ["ConsoleRender.render(ChangedOpenApi,OutputStreamWriter)"], "associated_methods": ["OpenApiCompare.fromLocations(String,String)"], "external_dependencies": {"modules": ["ByteArrayOutputStream", "OutputStreamWriter", "ChangedOpenApi", "ConsoleRender", "OpenApiCompare"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the rendering of additional properties in OpenAPI diff to ensure the output is not blank."}]}, {"file_path": "src/test/java/org/openapitools/openapidiff/core/RequestDiffTest.java", "testclass_name": "RequestDiffTest", "dependencies": ["package org.openapitools.openapidiff.core;", "import static org.openapitools.openapidiff.core.TestUtils.assertOpenApiChangedEndpoints;", "import org.junit.jupiter.api.Test;"], "name": "RequestDiffTest", "description": "Test class for comparing differences in OpenAPI request definitions.", "class_members": {"variables": [{"name": "OPENAPI_DOC1", "type": "final String"}, {"name": "OPENAPI_DOC2", "type": "final String"}]}, "test_cases": [{"name": "testDiffDifferent", "primary_tested": ["TestUtils.assertOpenApiChangedEndpoints(String,String)"], "external_dependencies": {"modules": ["TestUtils"], "class_members": [{"name": "OPENAPI_DOC1", "type": "variable"}, {"name": "OPENAPI_DOC2", "type": "variable"}]}, "category": "unit", "description": "Tests the comparison of OpenAPI endpoints between two different documents."}]}, {"file_path": "src/test/java/org/openapitools/openapidiff/core/JsonRenderTest.java", "testclass_name": "JsonRenderTest", "dependencies": ["package org.openapitools.openapidiff.core;", "import static org.assertj.core.api.Assertions.assertThat;", "import java.io.ByteArrayOutputStream;", "import java.io.OutputStreamWriter;", "import org.junit.jupiter.api.Test;", "import org.openapitools.openapidiff.core.model.ChangedOpenApi;", "import org.openapitools.openapidiff.core.output.JsonRender;"], "name": "JsonRenderTest", "description": "Unit tests for the JsonRender class, ensuring that rendering does not fail under specific conditions.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "renderDoesNotFailWhenPropertyHasBeenRemoved", "primary_tested": ["JsonRender.render(ChangedOpenApi,OutputStreamWriter)"], "external_dependencies": {"modules": ["JsonRender", "ByteArrayOutputStream", "OutputStreamWriter", "ChangedOpenApi", "OpenApiCompare"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that rendering does not fail when a property has been removed from the OpenAPI specification."}, {"name": "renderDoesNotFailForJsr310Types", "primary_tested": ["JsonRender.render(ChangedOpenApi,OutputStreamWriter)"], "external_dependencies": {"modules": ["JsonRender", "ByteArrayOutputStream", "OutputStreamWriter", "ChangedOpenApi", "OpenApiCompare"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that rendering does not fail when dealing with JSR310 types in the OpenAPI specification."}]}, {"file_path": "src/test/java/org/openapitools/openapidiff/core/OperationDiffTest.java", "testclass_name": "OperationDiffTest", "dependencies": ["package org.openapitools.openapidiff.core;", "import static org.assertj.core.api.Assertions.assertThat;", "import org.junit.jupiter.api.Test;", "import org.openapitools.openapidiff.core.model.ChangedOpenApi;", "import org.openapitools.openapidiff.core.model.DiffResult;"], "name": "OperationDiffTest", "description": "Tests for the OperationDiff functionality in OpenApiDiff.", "class_members": {"variables": [{"name": "OPENAPI_DOC1", "type": "static final String"}, {"name": "OPENAPI_DOC2", "type": "static final String"}]}, "test_cases": [{"name": "testContentDiffWithOneEmptyMediaType", "primary_tested": ["ChangedOpenApi.isChanged()"], "associated_methods": ["ChangedOpenApi.isDifferent()", "ChangedOpenApi.getChangedOperations()", "ChangedOperation.getOperationId()", "OperationId.isDifferent()"], "external_dependencies": {"modules": ["OpenApiCompare", "ChangedOpenApi", "DiffResult", "ChangedOperation", "OperationId"], "class_members": [{"name": "OPENAPI_DOC1", "type": "variable"}, {"name": "OPENAPI_DOC2", "type": "variable"}]}, "category": "unit", "description": "Tests the content difference with one empty media type in the OpenAPI documents."}]}, {"file_path": "src/test/java/org/openapitools/openapidiff/core/ResponseHeaderDiffTest.java", "testclass_name": "ResponseHeaderDiffTest", "dependencies": ["package org.openapitools.openapidiff.core;", "import static org.assertj.core.api.Assertions.assertThat;", "import java.util.Map;", "import org.junit.jupiter.api.Test;", "import org.openapitools.openapidiff.core.model.ChangedHeaders;", "import org.openapitools.openapidiff.core.model.ChangedOpenApi;", "import org.openapitools.openapidiff.core.model.ChangedResponse;"], "name": "ResponseHeaderDiffTest", "description": "Tests for differences in response headers between two OpenAPI documents.", "class_members": {"variables": [{"name": "OPENAPI_DOC1", "type": "static final String"}, {"name": "OPENAPI_DOC2", "type": "static final String"}]}, "fixtures": [], "test_cases": [{"name": "testDiffDifferent", "primary_tested": ["ChangedOpenApi.getNewEndpoints()", "ChangedOpenApi.getMissingEndpoints()", "ChangedOpenApi.getChangedOperations()", "ChangedResponse.getHeaders()", "ChangedHeaders.isDifferent()", "ChangedHeaders.getChanged()", "ChangedHeaders.getIncreased()", "ChangedHeaders.getMissing()"], "external_dependencies": {"modules": ["OpenApiCompare", "ChangedOpenApi", "ChangedResponse", "ChangedHeaders"], "class_members": [{"name": "OPENAPI_DOC1", "type": "variable"}, {"name": "OPENAPI_DOC2", "type": "variable"}]}, "category": "unit", "description": "Tests the difference in response headers between two OpenAPI documents, ensuring that the changed, increased, and missing headers are correctly identified."}]}, {"file_path": "src/test/java/org/openapitools/openapidiff/core/AddPropDiffTest.java", "testclass_name": "AddPropDiffTest", "dependencies": ["package org.openapitools.openapidiff.core;", "import static org.openapitools.openapidiff.core.TestUtils.assertOpenApiAreEquals;", "import static org.openapitools.openapidiff.core.TestUtils.assertOpenApiBackwardCompatible;", "import org.junit.jupiter.api.Test;"], "name": "AddPropDiffTest", "description": "Tests for comparing OpenAPI documents to check if they are the same or backward compatible.", "class_members": {"variables": [{"name": "OPENAPI_DOC1", "type": "final String"}, {"name": "OPENAPI_DOC2", "type": "final String"}]}, "test_cases": [{"name": "testDiffSame", "primary_tested": ["TestUtils.assertOpenApiAreEquals(String,String)"], "external_dependencies": {"modules": ["TestUtils"], "class_members": [{"name": "OPENAPI_DOC1", "type": "variable"}]}, "category": "unit", "description": "Tests if two identical OpenAPI documents are considered equal."}, {"name": "testDiffDifferent", "primary_tested": ["TestUtils.assertOpenApiBackwardCompatible(String,String,boolean)"], "external_dependencies": {"modules": ["TestUtils"], "class_members": [{"name": "OPENAPI_DOC1", "type": "variable"}, {"name": "OPENAPI_DOC2", "type": "variable"}]}, "category": "unit", "description": "Tests if an OpenAPI document is backward compatible with another."}]}, {"file_path": "src/test/java/org/openapitools/openapidiff/core/ArrayDiffTest.java", "testclass_name": "ArrayDiffTest", "dependencies": ["package org.openapitools.openapidiff.core;", "import static org.openapitools.openapidiff.core.TestUtils.assertOpenApiAreEquals;", "import static org.openapitools.openapidiff.core.TestUtils.assertOpenApiChangedEndpoints;", "import org.junit.jupiter.api.Test;"], "name": "ArrayDiffTest", "description": "Tests for comparing differences in OpenAPI array structures.", "class_members": {"variables": [{"name": "OPENAPI_DOC31", "type": "final String"}, {"name": "OPENAPI_DOC32", "type": "final String"}]}, "test_cases": [{"name": "testArrayDiffDifferent", "primary_tested": ["TestUtils.assertOpenApiChangedEndpoints(String,String)"], "external_dependencies": {"modules": ["TestUtils"], "class_members": [{"name": "OPENAPI_DOC31", "type": "variable"}, {"name": "OPENAPI_DOC32", "type": "variable"}]}, "category": "unit", "description": "Tests the functionality to detect changes in endpoints between two OpenAPI documents."}, {"name": "testArrayDiffSame", "primary_tested": ["TestUtils.assertOpenApiAreEquals(String,String)"], "external_dependencies": {"modules": ["TestUtils"], "class_members": [{"name": "OPENAPI_DOC31", "type": "variable"}]}, "category": "unit", "description": "Tests the functionality to assert that two OpenAPI documents are identical."}]}, {"file_path": "src/test/java/org/openapitools/openapidiff/core/backcompat/OperationBCTest.java", "testclass_name": "OperationBCTest", "dependencies": ["package org.openapitools.openapidiff.core.backcompat;", "import static org.openapitools.openapidiff.core.TestUtils.assertSpecChangedButCompatible;", "import static org.openapitools.openapidiff.core.TestUtils.assertSpecUnchanged;", "import org.junit.jupiter.api.Test;"], "name": "OperationBCTest", "description": "Tests to verify the backward compatibility of operations in OpenAPI specifications.", "class_members": {"variables": [{"name": "BASE", "type": "final String"}]}, "test_cases": [{"name": "unchanged", "primary_tested": ["TestUtils.assertSpecUnchanged(String,String)"], "external_dependencies": {"modules": ["TestUtils"], "class_members": [{"name": "BASE", "type": "variable"}], "project_specific_resources": ["TestUtils.assertSpecUnchanged(String,String)"]}, "category": "unit", "description": "Tests that the specification remains unchanged."}, {"name": "changedButCompatible", "primary_tested": ["TestUtils.assertSpecChangedButCompatible(String,String)"], "external_dependencies": {"modules": ["TestUtils"], "class_members": [{"name": "BASE", "type": "variable"}], "project_specific_resources": ["TestUtils.assertSpecChangedButCompatible(String,String)"]}, "category": "unit", "description": "Tests that the specification has changed but remains compatible."}]}, {"file_path": "src/test/java/org/openapitools/openapidiff/core/backcompat/RequestBodyBCTest.java", "testclass_name": "RequestBodyBCTest", "dependencies": ["package org.openapitools.openapidiff.core.backcompat;", "import static org.openapitools.openapidiff.core.TestUtils.assertSpecIncompatible;", "import static org.openapitools.openapidiff.core.TestUtils.assertSpecUnchanged;", "import static org.openapitools.openapidiff.core.model.BackwardIncompatibleProp.OPENAPI_ENDPOINTS_DECREASED;", "import org.junit.jupiter.api.Test;", "import org.openapitools.openapidiff.core.model.BackwardIncompatibleProp;"], "name": "RequestBodyBCTest", "description": "Tests for backward compatibility of request bodies in OpenAPI specifications.", "class_members": {"variables": [{"name": "BASE", "type": "final String"}]}, "fixtures": [], "test_cases": [{"name": "unchanged", "primary_tested": ["TestUtils.assertSpecUnchanged(String,String)"], "external_dependencies": {"modules": ["TestUtils"], "class_members": [{"name": "BASE", "type": "variable"}]}, "category": "unit", "description": "Tests that the specification remains unchanged when compared to itself."}, {"name": "requiredChanged", "primary_tested": ["TestUtils.assertSpecIncompatible(String,String,BackwardIncompatibleProp)"], "external_dependencies": {"modules": ["TestUtils", "BackwardIncompatibleProp"], "class_members": [{"name": "BASE", "type": "variable"}], "project_specific_resources": ["BackwardIncompatibleProp.OPENAPI_ENDPOINTS_DECREASED"]}, "category": "unit", "description": "Tests that the specification is incompatible when the required property of a request body is changed."}]}, {"file_path": "src/test/java/org/openapitools/openapidiff/core/Swagger2CompatibilityTest.java", "testclass_name": "Swagger2CompatibilityTest", "dependencies": ["package org.openapitools.openapidiff.core;", "import static org.openapitools.openapidiff.core.TestUtils.assertOpenApiAreEquals;", "import org.junit.jupiter.api.Disabled;", "import org.junit.jupiter.api.Test;"], "name": "Swagger2CompatibilityTest", "description": "Tests for compatibility between Swagger 2 and OpenAPI 3 documents.", "class_members": {"variables": [{"name": "SWAGGER_DOC1", "type": "static final String"}, {"name": "OPENAPI_DOC2", "type": "static final String"}]}, "test_cases": [{"name": "testEqual", "primary_tested": ["TestUtils.assertOpenApiAreEquals(String,String)"], "external_dependencies": {"modules": ["TestUtils"], "class_members": [{"name": "SWAGGER_DOC1", "type": "variable"}], "project_specific_resources": ["TestUtils.assertOpenApiAreEquals(String,String)"]}, "category": "unit", "description": "Tests the equality of the same Swagger 2 document."}, {"name": "testSwagger2ToOpenapi3", "primary_tested": ["TestUtils.assertOpenApiAreEquals(String,String)"], "external_dependencies": {"modules": ["TestUtils"], "class_members": [{"name": "SWAGGER_DOC1", "type": "variable"}, {"name": "OPENAPI_DOC2", "type": "variable"}], "project_specific_resources": ["TestUtils.assertOpenApiAreEquals(String,String)"]}, "category": "unit", "description": "Tests the compatibility between a Swagger 2 document and an OpenAPI 3 document."}]}, {"file_path": "src/test/java/org/openapitools/openapidiff/core/AddPropPutDiffTest.java", "testclass_name": "AddPropPutDiffTest", "dependencies": ["package org.openapitools.openapidiff.core;", "import static org.assertj.core.api.Assertions.assertThat;", "import static org.openapitools.openapidiff.core.TestUtils.assertOpenApiAreEquals;", "import org.junit.jupiter.api.Test;", "import org.openapitools.openapidiff.core.model.ChangedOpenApi;"], "name": "AddPropPutDiffTest", "description": "Tests for the OpenAPI diff functionality, specifically focusing on the compatibility of additional properties in PUT operations.", "class_members": {"variables": [{"name": "OPENAPI_DOC1", "type": "final String"}, {"name": "OPENAPI_DOC2", "type": "final String"}]}, "test_cases": [{"name": "testDiffSame", "primary_tested": ["TestUtils.assertOpenApiAreEquals(String,String)"], "external_dependencies": {"modules": ["TestUtils"], "class_members": [{"name": "OPENAPI_DOC1", "type": "variable"}], "project_specific_resources": ["TestUtils.assertOpenApiAreEquals(String,String)"]}, "category": "unit", "description": "Tests that the OpenAPI documents are the same."}, {"name": "testFieldAdditionalInPutApiIsCompatible", "primary_tested": ["OpenApiCompare.fromLocations(String,String)"], "associated_methods": ["ChangedOpenApi.isDifferent()", "ChangedOpenApi.isCompatible()"], "external_dependencies": {"modules": ["OpenApiCompare", "ChangedOpenApi"], "class_members": [{"name": "OPENAPI_DOC1", "type": "variable"}, {"name": "OPENAPI_DOC2", "type": "variable"}]}, "category": "unit", "description": "Tests the compatibility of additional properties in PUT operations by comparing two OpenAPI documents."}]}, {"file_path": "src/test/java/org/openapitools/openapidiff/core/ParametersOverloadingTest.java", "testclass_name": "ParametersOverloadingTest", "dependencies": ["package org.openapitools.openapidiff.core;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.openapitools.openapidiff.core.TestUtils.assertOpenApiAreEquals;", "import org.junit.jupiter.api.Test;"], "name": "ParametersOverloadingTest", "description": "Tests for handling overloaded and duplicated parameter types in OpenAPI specifications.", "class_members": {"variables": [{"name": "OVERLOADED_PARAMETERS", "type": "final String"}, {"name": "DUPLICATED_PARAMETER_TYPES", "type": "final String"}]}, "fixtures": [], "test_cases": [{"name": "testDiffWithOverloadedParameterTypes", "primary_tested": ["OpenApiCompare.fromLocations(String,String)"], "associated_methods": ["TestUtils.assertOpenApiAreEquals(String,String)"], "external_dependencies": {"modules": ["OpenApiCompare", "TestUtils"], "class_members": [{"name": "OVERLOADED_PARAMETERS", "type": "variable"}], "project_specific_resources": ["TestUtils.assertOpenApiAreEquals(String,String)"]}, "category": "unit", "description": "Tests the comparison of OpenAPI specifications with overloaded parameter types."}, {"name": "testDiffWithDuplicatedParameterTypes", "primary_tested": ["OpenApiCompare.fromLocations(String,String)"], "external_dependencies": {"modules": ["OpenApiCompare"], "class_members": [{"name": "DUPLICATED_PARAMETER_TYPES", "type": "variable"}]}, "category": "unit", "description": "Tests the comparison of OpenAPI specifications with duplicated parameter types, expecting an IllegalArgumentException."}]}, {"file_path": "src/test/java/org/openapitools/openapidiff/core/backcompat/PathsBCTest.java", "testclass_name": "PathsBCTest", "dependencies": ["package org.openapitools.openapidiff.core.backcompat;", "import static org.openapitools.openapidiff.core.TestUtils.assertSpecChangedButCompatible;", "import static org.openapitools.openapidiff.core.TestUtils.assertSpecIncompatible;", "import static org.openapitools.openapidiff.core.TestUtils.assertSpecUnchanged;", "import static org.openapitools.openapidiff.core.model.BackwardIncompatibleProp.OPENAPI_ENDPOINTS_DECREASED;", "import org.junit.jupiter.api.Test;", "import org.openapitools.openapidiff.core.model.BackwardIncompatibleProp;"], "name": "PathsBCTest", "description": "Tests for backward compatibility of API paths.", "class_members": {"variables": [{"name": "BASE", "type": "final String"}]}, "fixtures": [], "test_cases": [{"name": "unchanged", "primary_tested": ["TestUtils.assertSpecUnchanged(String,String)"], "external_dependencies": {"modules": ["TestUtils"], "class_members": [{"name": "BASE", "type": "variable"}]}, "category": "unit", "description": "Tests that the specification remains unchanged."}, {"name": "changedButCompatible", "primary_tested": ["TestUtils.assertSpecChangedButCompatible(String,String)"], "external_dependencies": {"modules": ["TestUtils"], "class_members": [{"name": "BASE", "type": "variable"}]}, "category": "unit", "description": "Tests that the specification changes but remains compatible."}, {"name": "decreased", "primary_tested": ["TestUtils.assertSpecIncompatible(String,String,BackwardIncompatibleProp)"], "external_dependencies": {"modules": ["TestUtils", "BackwardIncompatibleProp"], "class_members": [{"name": "BASE", "type": "variable"}], "project_specific_resources": ["BackwardIncompatibleProp.OPENAPI_ENDPOINTS_DECREASED"]}, "category": "unit", "description": "Tests that the specification decreases in compatibility."}]}, {"file_path": "src/test/java/org/openapitools/openapidiff/core/PathParameterSchemaDiffTest.java", "testclass_name": "PathParameterSchemaDiffTest", "dependencies": ["package org.openapitools.openapidiff.core;", "import org.junit.jupiter.api.Assertions;", "import org.junit.jupiter.api.DisplayName;", "import org.junit.jupiter.api.Test;", "import org.openapitools.openapidiff.core.model.ChangedOpenApi;", "import org.slf4j.Logger;", "import org.slf4j.LoggerFactory;"], "name": "PathParameterSchemaDiffTest", "description": "Tests for differences in path parameters and schemas in OpenAPI documents.", "class_members": {"variables": [{"name": "TEST_MSG_1", "type": "final String"}, {"name": "TEST_MSG_2", "type": "final String"}]}, "test_cases": [{"name": "pathSamePathParamsDiffParamSameAsInPathButSchemaDiff", "primary_tested": ["ChangedOpenApi.isDifferent()"], "associated_methods": ["ChangedOpenApi.isCompatible()"], "external_dependencies": {"modules": ["Logger", "LoggerFactory", "OpenApiCompare", "ChangedOpenApi"], "class_members": [{"name": "TEST_MSG_1", "type": "variable"}]}, "category": "unit", "description": "Tests the scenario where the path is the same but the path parameters are different, parameters in the `Parameters` section match the path parameter, but the schema is different."}, {"name": "pathSamePathParamsDiffParamNameDiffSchemaSame", "primary_tested": ["ChangedOpenApi.isDifferent()"], "associated_methods": ["ChangedOpenApi.isCompatible()"], "external_dependencies": {"modules": ["Logger", "LoggerFactory", "OpenApiCompare", "ChangedOpenApi"], "class_members": [{"name": "TEST_MSG_2", "type": "variable"}]}, "category": "unit", "description": "Tests the scenario where the path is the same but the path parameters are different, parameters in the `Parameters` section match the path parameter, and the schema is the same."}]}, {"file_path": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecurityRequirementBCTest.java", "testclass_name": "SecurityRequirementBCTest", "dependencies": ["package org.openapitools.openapidiff.core.backcompat;", "import static org.openapitools.openapidiff.core.TestUtils.*;", "import static org.openapitools.openapidiff.core.model.BackwardIncompatibleProp.SECURITY_REQUIREMENT_SCHEMES_INCREASED;", "import org.junit.jupiter.api.Test;", "import org.openapitools.openapidiff.core.model.BackwardIncompatibleProp;"], "name": "SecurityRequirementBCTest", "description": "Tests for backward compatibility of security requirements in OpenAPI specifications.", "class_members": {"variables": [{"name": "BASE", "type": "final String"}]}, "test_cases": [{"name": "unchanged", "primary_tested": ["TestUtils.assertSpecUnchanged(String,String)"], "external_dependencies": {"modules": ["TestUtils"], "class_members": [{"name": "BASE", "type": "variable"}]}, "category": "unit", "description": "Tests that the specification remains unchanged."}, {"name": "changedButCompatible", "primary_tested": ["TestUtils.assertSpecChangedButCompatible(String,String)"], "external_dependencies": {"modules": ["TestUtils"], "class_members": [{"name": "BASE", "type": "variable"}]}, "category": "unit", "description": "Tests that the specification changes but remains compatible."}, {"name": "schemesIncreased", "primary_tested": ["TestUtils.assertSpecIncompatible(String,String,BackwardIncompatibleProp)"], "external_dependencies": {"modules": ["TestUtils", "BackwardIncompatibleProp"], "class_members": [{"name": "BASE", "type": "variable"}], "project_specific_resources": ["BackwardIncompatibleProp.SECURITY_REQUIREMENT_SCHEMES_INCREASED"]}, "category": "unit", "description": "Tests that an increase in security requirement schemes makes the specification incompatible."}]}, {"file_path": "src/test/java/org/openapitools/openapidiff/core/LargeSchemaTest.java", "testclass_name": "LargeSchemaTest", "dependencies": ["package org.openapitools.openapidiff.core;", "import static org.assertj.core.api.Assertions.assertThat;", "import static org.openapitools.openapidiff.core.TestUtils.assertOpenApiAreEquals;", "import static org.openapitools.openapidiff.core.TestUtils.assertOpenApiBackwardIncompatible;", "import static org.slf4j.LoggerFactory.getLogger;", "import io.swagger.v3.core.util.Yaml;", "import io.swagger.v3.oas.models.Components;", "import io.swagger.v3.oas.models.OpenAPI;", "import io.swagger.v3.oas.models.Operation;", "import io.swagger.v3.oas.models.PathItem;", "import io.swagger.v3.oas.models.Paths;", "import io.swagger.v3.oas.models.media.ArraySchema;", "import io.swagger.v3.oas.models.media.Content;", "import io.swagger.v3.oas.models.media.MediaType;", "import io.swagger.v3.oas.models.media.ObjectSchema;", "import io.swagger.v3.oas.models.media.Schema;", "import io.swagger.v3.oas.models.media.StringSchema;", "import io.swagger.v3.oas.models.parameters.RequestBody;", "import io.swagger.v3.oas.models.responses.ApiResponse;", "import io.swagger.v3.oas.models.responses.ApiResponses;", "import java.io.File;", "import java.io.IOException;", "import java.util.ArrayList;", "import java.util.LinkedHashMap;", "import java.util.List;", "import java.util.Map;", "import java.util.Random;", "import org.junit.jupiter.api.Test;", "import org.openapitools.openapidiff.core.model.ChangedOpenApi;", "import org.slf4j.Logger;"], "name": "LargeSchemaTest", "description": "Test suite for comparing large generated OpenAPI specifications.", "class_members": {"variables": [{"name": "LOG", "type": "Logger"}], "methods": [{"name": "assertOpenApiAreEquals", "signature": "void assertOpenApiAreEquals(OpenAPI oldSpec, OpenAPI newSpec)"}, {"name": "assertOpenApiBackwardIncompatible", "signature": "void assertOpenApiBackwardIncompatible(OpenAPI oldSpec, OpenAPI newSpec)"}, {"name": "largeGeneratedApi", "signature": "OpenAPI largeGeneratedApi()"}, {"name": "refSchema", "signature": "Schema refSchema(int i)"}, {"name": "modelName", "signature": "String modelName(int i)"}]}, "fixtures": [], "test_cases": [{"name": "testGeneratedApiSame", "primary_tested": ["TestUtils.assertOpenApiAreEquals(OpenAPI,OpenAPI)"], "external_dependencies": {"modules": ["OpenAPI", "TestUtils"], "class_members": [{"name": "largeGeneratedApi", "type": "method"}]}, "category": "unit", "description": "Tests if the generated OpenAPI specification is the same as itself."}, {"name": "testGeneratedApiDifferent", "primary_tested": ["TestUtils.assertOpenApiBackwardIncompatible(OpenAPI,OpenAPI)"], "external_dependencies": {"modules": ["OpenAPI", "TestUtils"], "class_members": [{"name": "largeGeneratedApi", "type": "method"}]}, "category": "unit", "description": "Tests if the generated OpenAPI specification is different from another generated one."}]}, {"file_path": "src/test/java/org/openapitools/openapidiff/core/backcompat/OpenApiBCTest.java", "testclass_name": "OpenApiBCTest", "dependencies": ["package org.openapitools.openapidiff.core.backcompat;", "import static org.openapitools.openapidiff.core.TestUtils.assertSpecChangedButCompatible;", "import static org.openapitools.openapidiff.core.TestUtils.assertSpecIncompatible;", "import static org.openapitools.openapidiff.core.TestUtils.assertSpecUnchanged;", "import static org.openapitools.openapidiff.core.model.BackwardIncompatibleProp.OPENAPI_ENDPOINTS_DECREASED;", "import org.junit.jupiter.api.Test;", "import org.openapitools.openapidiff.core.model.BackwardIncompatibleProp;"], "name": "OpenApiBCTest", "description": "Tests for backward compatibility of OpenAPI specifications.", "class_members": {"variables": [{"name": "BASE", "type": "final String"}]}, "test_cases": [{"name": "unchanged", "primary_tested": [], "external_dependencies": {"modules": ["org.openapitools.openapidiff.core.TestUtils"], "project_specific_resources": ["TestUtils.assertSpecUnchanged(String,String)"]}, "category": "unit", "description": "Tests that the specification remains unchanged."}, {"name": "changedButCompatible", "primary_tested": [], "external_dependencies": {"modules": ["org.openapitools.openapidiff.core.TestUtils"], "project_specific_resources": ["TestUtils.assertSpecChangedButCompatible(String,String)"]}, "category": "unit", "description": "Tests that the specification has changed but remains compatible."}, {"name": "endpointsDecreased", "primary_tested": [], "associated_methods": ["BackwardIncompatibleProp.OPENAPI_ENDPOINTS_DECREASED"], "external_dependencies": {"modules": ["org.openapitools.openapidiff.core.TestUtils", "org.openapitools.openapidiff.core.model.BackwardIncompatibleProp"], "class_members": [{"name": "BASE", "type": "variable"}], "project_specific_resources": ["TestUtils.assertSpecIncompatible(String,String,BackwardIncompatibleProp)"]}, "category": "unit", "description": "Tests that the specification has decreased endpoints, making it incompatible."}]}, {"file_path": "src/test/java/org/openapitools/openapidiff/core/backcompat/HeadersBCTest.java", "testclass_name": "HeadersBCTest", "dependencies": ["package org.openapitools.openapidiff.core.backcompat;", "import static org.openapitools.openapidiff.core.TestUtils.assertSpecChangedButCompatible;", "import static org.openapitools.openapidiff.core.TestUtils.assertSpecIncompatible;", "import static org.openapitools.openapidiff.core.TestUtils.assertSpecUnchanged;", "import static org.openapitools.openapidiff.core.model.BackwardIncompatibleProp.RESPONSE_HEADERS_DECREASED;", "import org.junit.jupiter.api.Test;", "import org.openapitools.openapidiff.core.model.BackwardIncompatibleProp;"], "name": "HeadersBCTest", "description": "Tests for backward compatibility of response headers in OpenAPI specifications.", "class_members": {"variables": [{"name": "BASE", "type": "final String"}]}, "test_cases": [{"name": "unchanged", "primary_tested": [], "external_dependencies": {"modules": ["org.openapitools.openapidiff.core.TestUtils"], "project_specific_resources": ["TestUtils.assertSpecUnchanged(String,String)"]}, "category": "unit", "description": "Tests that the specification remains unchanged."}, {"name": "changedButCompatible", "primary_tested": [], "external_dependencies": {"modules": ["org.openapitools.openapidiff.core.TestUtils"], "project_specific_resources": ["TestUtils.assertSpecChangedButCompatible(String,String)"]}, "category": "unit", "description": "Tests that the specification changes but remains compatible."}, {"name": "responseDecreased", "primary_tested": [], "associated_methods": ["BackwardIncompatibleProp.RESPONSE_HEADERS_DECREASED"], "external_dependencies": {"modules": ["org.openapitools.openapidiff.core.TestUtils", "org.openapitools.openapidiff.core.model.BackwardIncompatibleProp"], "class_members": [{"name": "RESPONSE_HEADERS_DECREASED", "type": "variable"}], "project_specific_resources": ["TestUtils.assertSpecIncompatible(String,String,BackwardIncompatibleProp)"]}, "category": "unit", "description": "Tests that the specification becomes incompatible due to a decrease in response headers."}]}, {"file_path": "src/test/java/org/openapitools/openapidiff/core/backcompat/ApiResponseBCTest.java", "testclass_name": "ApiResponseBCTest", "dependencies": ["package org.openapitools.openapidiff.core.backcompat;", "import static org.openapitools.openapidiff.core.TestUtils.assertSpecChangedButCompatible;", "import static org.openapitools.openapidiff.core.TestUtils.assertSpecIncompatible;", "import static org.openapitools.openapidiff.core.TestUtils.assertSpecUnchanged;", "import static org.openapitools.openapidiff.core.model.BackwardIncompatibleProp.RESPONSE_RESPONSES_DECREASED;", "import org.junit.jupiter.api.Test;", "import org.openapitools.openapidiff.core.model.BackwardIncompatibleProp;"], "name": "ApiResponseBCTest", "description": "Tests for backward compatibility of API responses.", "class_members": {"variables": [{"name": "BASE", "type": "final String"}]}, "test_cases": [{"name": "unchanged", "primary_tested": [], "external_dependencies": {"modules": ["org.openapitools.openapidiff.core.TestUtils"], "project_specific_resources": ["TestUtils.assertSpecUnchanged(String,String)"]}, "category": "unit", "description": "Tests that the specification remains unchanged."}, {"name": "changedButCompatible", "primary_tested": [], "external_dependencies": {"modules": ["org.openapitools.openapidiff.core.TestUtils"], "project_specific_resources": ["TestUtils.assertSpecChangedButCompatible(String,String)"]}, "category": "unit", "description": "Tests that the specification changes but remains compatible."}, {"name": "decreased", "primary_tested": [], "associated_methods": ["BackwardIncompatibleProp.RESPONSE_RESPONSES_DECREASED"], "external_dependencies": {"modules": ["org.openapitools.openapidiff.core.TestUtils", "org.openapitools.openapidiff.core.model.BackwardIncompatibleProp"], "class_members": [{"name": "RESPONSE_RESPONSES_DECREASED", "type": "variable"}], "project_specific_resources": ["TestUtils.assertSpecIncompatible(String,String,BackwardIncompatibleProp)"]}, "category": "unit", "description": "Tests that the specification has decreased responses, making it incompatible."}]}, {"file_path": "src/test/java/org/openapitools/openapidiff/core/MarkdownRenderTest.java", "testclass_name": "MarkdownRenderTest", "dependencies": ["package org.openapitools.openapidiff.core;", "import static org.assertj.core.api.Assertions.assertThat;", "import java.io.ByteArrayOutputStream;", "import java.io.OutputStreamWriter;", "import org.junit.jupiter.api.Test;", "import org.openapitools.openapidiff.core.model.ChangedOpenApi;", "import org.openapitools.openapidiff.core.output.MarkdownRender;"], "name": "MarkdownRenderTest", "description": "Unit tests for the MarkdownRender class, ensuring that various scenarios do not cause failures or stack overflows.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "renderDoesNotFailWhenPropertyHasBeenRemoved", "primary_tested": ["MarkdownRender.render(ChangedOpenApi,OutputStreamWriter)"], "associated_methods": [], "external_dependencies": {"modules": ["MarkdownRender", "ByteArrayOutputStream", "OutputStreamWriter", "ChangedOpenApi", "OpenApiCompare"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests that rendering does not fail when a property has been removed from the OpenAPI specification."}, {"name": "renderDoesNotCauseStackOverflowWithRecursiveDefinitions", "primary_tested": ["MarkdownRender.render(ChangedOpenApi,OutputStreamWriter)"], "associated_methods": [], "external_dependencies": {"modules": ["MarkdownRender", "ByteArrayOutputStream", "OutputStreamWriter", "ChangedOpenApi", "OpenApiCompare"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests that rendering does not cause a stack overflow with recursive definitions in the OpenAPI specification."}, {"name": "renderDoesNotFailWhenHTTPStatusCodeIsRange", "primary_tested": ["MarkdownRender.render(ChangedOpenApi,OutputStreamWriter)"], "associated_methods": [], "external_dependencies": {"modules": ["MarkdownRender", "ByteArrayOutputStream", "OutputStreamWriter", "ChangedOpenApi", "OpenApiCompare"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests that rendering does not fail when an HTTP status code is a range in the OpenAPI specification."}]}, {"file_path": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecurityRequirementsBCTest.java", "testclass_name": "SecurityRequirementsBCTest", "dependencies": ["package org.openapitools.openapidiff.core.backcompat;", "import static org.openapitools.openapidiff.core.TestUtils.*;", "import static org.openapitools.openapidiff.core.model.BackwardIncompatibleProp.SECURITY_REQUIREMENTS_DECREASED;", "import org.junit.jupiter.api.Test;", "import org.openapitools.openapidiff.core.model.BackwardIncompatibleProp;"], "name": "SecurityRequirementsBCTest", "description": "Tests for backward compatibility of security requirements in OpenAPI specifications.", "class_members": {"variables": [{"name": "BASE", "type": "final String"}]}, "fixtures": [], "test_cases": [{"name": "unchanged", "primary_tested": ["TestUtils.assertSpecUnchanged(String,String)"], "external_dependencies": {"modules": ["TestUtils"], "class_members": [{"name": "BASE", "type": "variable"}]}, "category": "unit", "description": "Tests that the specification remains unchanged."}, {"name": "changedButCompatible", "primary_tested": ["TestUtils.assertSpecChangedButCompatible(String,String)"], "external_dependencies": {"modules": ["TestUtils"], "class_members": [{"name": "BASE", "type": "variable"}]}, "category": "unit", "description": "Tests that the specification changes but remains compatible."}, {"name": "decreased", "primary_tested": ["TestUtils.assertSpecIncompatible(String,String,BackwardIncompatibleProp)"], "external_dependencies": {"modules": ["TestUtils", "BackwardIncompatibleProp"], "class_members": [{"name": "BASE", "type": "variable"}], "project_specific_resources": ["BackwardIncompatibleProp.SECURITY_REQUIREMENTS_DECREASED"]}, "category": "unit", "description": "Tests that decreasing security requirements makes the specification incompatible."}, {"name": "schemeTypeChanged", "primary_tested": ["TestUtils.assertOpenApiBackwardIncompatible(String,String)"], "external_dependencies": {"modules": ["TestUtils"], "class_members": [{"name": "BASE", "type": "variable"}]}, "category": "unit", "description": "Tests that changing the scheme type makes the specification backward incompatible."}]}, {"file_path": "src/test/java/org/openapitools/openapidiff/core/ResponseAddedContentSchemaTest.java", "testclass_name": "ResponseAddedContentSchemaTest", "dependencies": ["package org.openapitools.openapidiff.core;", "import static org.assertj.core.api.Assertions.assertThat;", "import io.swagger.v3.oas.models.media.Content;", "import java.io.ByteArrayOutputStream;", "import java.io.OutputStreamWriter;", "import java.util.Map;", "import org.junit.jupiter.api.Test;", "import org.openapitools.openapidiff.core.model.ChangedOpenApi;", "import org.openapitools.openapidiff.core.model.ChangedResponse;", "import org.openapitools.openapidiff.core.output.ConsoleRender;", "import org.openapitools.openapidiff.core.output.HtmlRender;", "import org.openapitools.openapidiff.core.output.MarkdownRender;", "import org.openapitools.openapidiff.core.output.Render;"], "name": "ResponseAddedContentSchemaTest", "description": "Tests for the addition of content schema in API responses.", "class_members": {"variables": [{"name": "OPENAPI_DOC1", "type": "static final String"}, {"name": "OPENAPI_DOC2", "type": "static final String"}]}, "fixtures": [], "test_cases": [{"name": "testDiffDifferent", "primary_tested": ["ChangedOpenApi.getNewEndpoints()", "ChangedOpenApi.getMissingEndpoints()", "ChangedOpenApi.getChangedOperations()", "ChangedResponse.getOldApiResponse()", "ChangedResponse.getNewApiResponse()"], "associated_methods": ["ChangedOpenApi.getChangedOperations().get(0).getApiResponses().getChanged()"], "external_dependencies": {"modules": ["ChangedOpenApi", "ChangedResponse", "Content", "OpenApiCompare"], "class_members": [{"name": "OPENAPI_DOC1", "type": "variable"}, {"name": "OPENAPI_DOC2", "type": "variable"}]}, "category": "unit", "description": "Tests the difference in API responses when content schema is added."}, {"name": "testDiffCanBeRendered", "primary_tested": ["ConsoleRender.render(ChangedOpenApi,OutputStreamWriter)", "HtmlRender.render(ChangedOpenApi,OutputStreamWriter)", "MarkdownRender.render(ChangedOpenApi,OutputStreamWriter)"], "associated_methods": [], "external_dependencies": {"modules": ["ChangedOpenApi", "ConsoleRender", "HtmlRender", "MarkdownRender", "OpenApiCompare", "OutputStreamWriter"], "class_members": [{"name": "OPENAPI_DOC1", "type": "variable"}, {"name": "OPENAPI_DOC2", "type": "variable"}]}, "category": "unit", "description": "Tests if the difference in API responses can be rendered using different renderers."}]}, {"file_path": "src/test/java/org/openapitools/openapidiff/core/backcompat/MaxLengthBCTest.java", "testclass_name": "MaxLengthBCTest", "dependencies": ["package org.openapitools.openapidiff.core.backcompat;", "import static org.openapitools.openapidiff.core.TestUtils.assertSpecIncompatible;", "import static org.openapitools.openapidiff.core.TestUtils.assertSpecUnchanged;", "import static org.openapitools.openapidiff.core.model.BackwardIncompatibleProp.REQUEST_MAX_LENGTH_DECREASED;", "import static org.openapitools.openapidiff.core.model.BackwardIncompatibleProp.RESPONSE_MAX_LENGTH_INCREASED;", "import org.junit.jupiter.api.Test;", "import org.openapitools.openapidiff.core.model.BackwardIncompatibleProp;"], "name": "MaxLengthBCTest", "description": "Tests for backward compatibility checks related to max length properties in API specifications.", "class_members": {"variables": [{"name": "BASE", "type": "final String"}]}, "fixtures": [], "test_cases": [{"name": "maxLengthUnchanged", "primary_tested": [], "external_dependencies": {"modules": ["org.openapitools.openapidiff.core.TestUtils"], "project_specific_resources": ["TestUtils.assertSpecUnchanged(String,String)"]}, "category": "unit", "description": "Asserts that the API specification remains unchanged when the max length is not modified."}, {"name": "requestMaxLengthDecreased", "primary_tested": [], "associated_methods": ["BackwardIncompatibleProp.REQUEST_MAX_LENGTH_DECREASED"], "external_dependencies": {"modules": ["org.openapitools.openapidiff.core.TestUtils", "org.openapitools.openapidiff.core.model.BackwardIncompatibleProp"], "class_members": [{"name": "BASE", "type": "variable"}], "project_specific_resources": ["TestUtils.assertSpecIncompatible(String,String,BackwardIncompatibleProp)"]}, "category": "unit", "description": "Asserts that the API specification is incompatible when the request max length is decreased."}, {"name": "responseMaxLengthIncreased", "primary_tested": [], "associated_methods": ["BackwardIncompatibleProp.RESPONSE_MAX_LENGTH_INCREASED"], "external_dependencies": {"modules": ["org.openapitools.openapidiff.core.TestUtils", "org.openapitools.openapidiff.core.model.BackwardIncompatibleProp"], "class_members": [{"name": "BASE", "type": "variable"}], "project_specific_resources": ["TestUtils.assertSpecIncompatible(String,String,BackwardIncompatibleProp)"]}, "category": "unit", "description": "Asserts that the API specification is incompatible when the response max length is increased."}]}, {"file_path": "src/test/java/org/openapitools/openapidiff/core/backcompat/ContentBCTest.java", "testclass_name": "ContentBCTest", "dependencies": ["package org.openapitools.openapidiff.core.backcompat;", "import static org.openapitools.openapidiff.core.TestUtils.assertSpecChangedButCompatible;", "import static org.openapitools.openapidiff.core.TestUtils.assertSpecIncompatible;", "import static org.openapitools.openapidiff.core.TestUtils.assertSpecUnchanged;", "import static org.openapitools.openapidiff.core.model.BackwardIncompatibleProp.REQUEST_CONTENT_DECREASED;", "import static org.openapitools.openapidiff.core.model.BackwardIncompatibleProp.RESPONSE_CONTENT_DECREASED;", "import org.junit.jupiter.api.Test;", "import org.openapitools.openapidiff.core.model.BackwardIncompatibleProp;"], "name": "ContentBCTest", "description": "Tests for backward compatibility of content changes in API specifications.", "class_members": {"variables": [{"name": "BASE", "type": "final String"}]}, "test_cases": [{"name": "unchanged", "primary_tested": [], "external_dependencies": {"modules": ["org.openapitools.openapidiff.core.TestUtils"], "project_specific_resources": ["TestUtils.assertSpecUnchanged(String,String)"]}, "category": "unit", "description": "Asserts that the specification remains unchanged."}, {"name": "changedButCompatible", "primary_tested": [], "external_dependencies": {"modules": ["org.openapitools.openapidiff.core.TestUtils"], "project_specific_resources": ["TestUtils.assertSpecChangedButCompatible(String,String)"]}, "category": "unit", "description": "Asserts that the specification has changed but remains compatible."}, {"name": "requestDecreased", "primary_tested": [], "external_dependencies": {"modules": ["org.openapitools.openapidiff.core.TestUtils", "org.openapitools.openapidiff.core.model.BackwardIncompatibleProp"], "class_members": [{"name": "REQUEST_CONTENT_DECREASED", "type": "variable"}], "project_specific_resources": ["TestUtils.assertSpecIncompatible(String,String,BackwardIncompatibleProp)"]}, "category": "unit", "description": "Asserts that the request content has decreased, making the specification incompatible."}, {"name": "responseDecreased", "primary_tested": [], "external_dependencies": {"modules": ["org.openapitools.openapidiff.core.TestUtils", "org.openapitools.openapidiff.core.model.BackwardIncompatibleProp"], "class_members": [{"name": "RESPONSE_CONTENT_DECREASED", "type": "variable"}], "project_specific_resources": ["TestUtils.assertSpecIncompatible(String,String,BackwardIncompatibleProp)"]}, "category": "unit", "description": "Asserts that the response content has decreased, making the specification incompatible."}]}, {"file_path": "src/test/java/org/openapitools/openapidiff/core/RecursiveSchemaTest.java", "testclass_name": "RecursiveSchemaTest", "dependencies": ["package org.openapitools.openapidiff.core;", "import static org.openapitools.openapidiff.core.TestUtils.assertOpenApiAreEquals;", "import static org.openapitools.openapidiff.core.TestUtils.assertOpenApiBackwardIncompatible;", "import org.junit.jupiter.api.Test;"], "name": "RecursiveSchemaTest", "description": "Tests for comparing OpenAPI documents with recursive schemas.", "class_members": {"variables": [{"name": "OPENAPI_DOC1", "type": "final String"}, {"name": "OPENAPI_DOC2", "type": "final String"}, {"name": "OPENAPI_DOC3", "type": "final String"}]}, "test_cases": [{"name": "testDiffSame", "primary_tested": ["TestUtils.assertOpenApiAreEquals(String,String)"], "external_dependencies": {"modules": ["TestUtils"], "class_members": [{"name": "OPENAPI_DOC1", "type": "variable"}], "project_specific_resources": ["TestUtils.assertOpenApiAreEquals(String,String)"]}, "category": "unit", "description": "Tests that two identical OpenAPI documents are considered equal."}, {"name": "testDiffDifferentCyclic", "primary_tested": ["TestUtils.assertOpenApiBackwardIncompatible(String,String)"], "external_dependencies": {"modules": ["TestUtils"], "class_members": [{"name": "OPENAPI_DOC1", "type": "variable"}, {"name": "OPENAPI_DOC3", "type": "variable"}], "project_specific_resources": ["TestUtils.assertOpenApiBackwardIncompatible(String,String)"]}, "category": "unit", "description": "Tests that two different OpenAPI documents with cyclic references are considered backward incompatible."}, {"name": "testDiffDifferent", "primary_tested": ["TestUtils.assertOpenApiBackwardIncompatible(String,String)"], "external_dependencies": {"modules": ["TestUtils"], "class_members": [{"name": "OPENAPI_DOC1", "type": "variable"}, {"name": "OPENAPI_DOC2", "type": "variable"}], "project_specific_resources": ["TestUtils.assertOpenApiBackwardIncompatible(String,String)"]}, "category": "unit", "description": "Tests that two different OpenAPI documents are considered backward incompatible."}]}, {"file_path": "src/test/java/org/openapitools/openapidiff/core/backcompat/ParametersBCTest.java", "testclass_name": "ParametersBCTest", "dependencies": ["package org.openapitools.openapidiff.core.backcompat;", "import static org.openapitools.openapidiff.core.TestUtils.assertSpecChangedButCompatible;", "import static org.openapitools.openapidiff.core.TestUtils.assertSpecIncompatible;", "import static org.openapitools.openapidiff.core.TestUtils.assertSpecUnchanged;", "import static org.openapitools.openapidiff.core.model.BackwardIncompatibleProp.REQUEST_PARAMS_DECREASED;", "import static org.openapitools.openapidiff.core.model.BackwardIncompatibleProp.REQUEST_PARAMS_REQUIRED_INCREASED;", "import org.junit.jupiter.api.Test;", "import org.openapitools.openapidiff.core.model.BackwardIncompatibleProp;"], "name": "ParametersBCTest", "description": "Tests for backward compatibility of request parameters in OpenAPI specifications.", "class_members": {"variables": [{"name": "BASE", "type": "final String"}]}, "fixtures": [], "test_cases": [{"name": "unchanged", "primary_tested": ["TestUtils.assertSpecUnchanged(String,String)"], "external_dependencies": {"modules": ["TestUtils"], "class_members": [{"name": "BASE", "type": "variable"}]}, "category": "unit", "description": "Tests that the specification remains unchanged."}, {"name": "changedButCompatible", "primary_tested": ["TestUtils.assertSpecChangedButCompatible(String,String)"], "external_dependencies": {"modules": ["TestUtils"], "class_members": [{"name": "BASE", "type": "variable"}]}, "category": "unit", "description": "Tests that the specification changes but remains compatible."}, {"name": "decreased", "primary_tested": ["TestUtils.assertSpecIncompatible(String,String,BackwardIncompatibleProp)"], "associated_methods": ["BackwardIncompatibleProp.REQUEST_PARAMS_DECREASED"], "external_dependencies": {"modules": ["TestUtils", "BackwardIncompatibleProp"], "class_members": [{"name": "BASE", "type": "variable"}]}, "category": "unit", "description": "Tests that the specification becomes incompatible due to decreased request parameters."}, {"name": "requiredIncreased", "primary_tested": ["TestUtils.assertSpecIncompatible(String,String,BackwardIncompatibleProp)"], "associated_methods": ["BackwardIncompatibleProp.REQUEST_PARAMS_REQUIRED_INCREASED"], "external_dependencies": {"modules": ["TestUtils", "BackwardIncompatibleProp"], "class_members": [{"name": "BASE", "type": "variable"}]}, "category": "unit", "description": "Tests that the specification becomes incompatible due to increased required request parameters."}]}, {"file_path": "src/test/java/org/openapitools/openapidiff/core/backcompat/OneOfBCTest.java", "testclass_name": "OneOfBCTest", "dependencies": ["package org.openapitools.openapidiff.core.backcompat;", "import static org.openapitools.openapidiff.core.TestUtils.assertSpecChangedButCompatible;", "import static org.openapitools.openapidiff.core.TestUtils.assertSpecIncompatible;", "import static org.openapitools.openapidiff.core.TestUtils.assertSpecUnchanged;", "import static org.openapitools.openapidiff.core.model.BackwardIncompatibleProp.REQUEST_ONEOF_DECREASED;", "import static org.openapitools.openapidiff.core.model.BackwardIncompatibleProp.RESPONSE_ONEOF_INCREASED;", "import org.junit.jupiter.api.Test;", "import org.openapitools.openapidiff.core.model.BackwardIncompatibleProp;"], "name": "OneOfBCTest", "description": "Tests for backward compatibility of OneOf properties in OpenAPI specifications.", "class_members": {"variables": [{"name": "BASE", "type": "final String"}]}, "test_cases": [{"name": "unchanged", "primary_tested": ["TestUtils.assertSpecUnchanged(String,String)"], "external_dependencies": {"modules": ["TestUtils"], "class_members": [{"name": "BASE", "type": "variable"}]}, "category": "unit", "description": "Tests that the specification remains unchanged."}, {"name": "changedButCompatible", "primary_tested": ["TestUtils.assertSpecChangedButCompatible(String,String)"], "external_dependencies": {"modules": ["TestUtils"], "class_members": [{"name": "BASE", "type": "variable"}]}, "category": "unit", "description": "Tests that the specification changes but remains compatible."}, {"name": "requestDecreased", "primary_tested": ["TestUtils.assertSpecIncompatible(String,String,BackwardIncompatibleProp)"], "associated_methods": ["BackwardIncompatibleProp.REQUEST_ONEOF_DECREASED"], "external_dependencies": {"modules": ["TestUtils", "BackwardIncompatibleProp"], "class_members": [{"name": "BASE", "type": "variable"}]}, "category": "unit", "description": "Tests that the specification becomes incompatible due to a decrease in request oneOf properties."}, {"name": "responseIncreased", "primary_tested": ["TestUtils.assertSpecIncompatible(String,String,BackwardIncompatibleProp)"], "associated_methods": ["BackwardIncompatibleProp.RESPONSE_ONEOF_INCREASED"], "external_dependencies": {"modules": ["TestUtils", "BackwardIncompatibleProp"], "class_members": [{"name": "BASE", "type": "variable"}]}, "category": "unit", "description": "Tests that the specification becomes incompatible due to an increase in response oneOf properties."}]}, {"file_path": "src/test/java/org/openapitools/openapidiff/core/backcompat/ReadOnlyBCTest.java", "testclass_name": "ReadOnlyBCTest", "dependencies": ["package org.openapitools.openapidiff.core.backcompat;", "import static org.openapitools.openapidiff.core.TestUtils.assertSpecChangedButCompatible;", "import static org.openapitools.openapidiff.core.TestUtils.assertSpecIncompatible;", "import static org.openapitools.openapidiff.core.TestUtils.assertSpecUnchanged;", "import static org.openapitools.openapidiff.core.model.BackwardIncompatibleProp.REQUEST_READONLY_INCREASED;", "import static org.openapitools.openapidiff.core.model.BackwardIncompatibleProp.REQUEST_READONLY_REQUIRED_DECREASED;", "import org.junit.jupiter.api.Test;", "import org.openapitools.openapidiff.core.model.BackwardIncompatibleProp;"], "name": "ReadOnlyBCTest", "description": "Tests for backward compatibility of read-only properties in OpenAPI specifications.", "class_members": {"variables": [{"name": "BASE", "type": "final String"}]}, "fixtures": [], "test_cases": [{"name": "unchanged", "primary_tested": ["TestUtils.assertSpecUnchanged(String,String)"], "external_dependencies": {"modules": ["TestUtils"], "class_members": [{"name": "BASE", "type": "variable"}]}, "category": "unit", "description": "Tests that the specification remains unchanged."}, {"name": "changedButCompatible", "primary_tested": ["TestUtils.assertSpecChangedButCompatible(String,String)"], "external_dependencies": {"modules": ["TestUtils"], "class_members": [{"name": "BASE", "type": "variable"}]}, "category": "unit", "description": "Tests that the specification changes but remains compatible."}, {"name": "requestReadOnlyIncreased", "primary_tested": ["TestUtils.assertSpecIncompatible(String,String,BackwardIncompatibleProp)"], "associated_methods": ["BackwardIncompatibleProp.REQUEST_READONLY_INCREASED"], "external_dependencies": {"modules": ["TestUtils", "BackwardIncompatibleProp"], "class_members": [{"name": "BASE", "type": "variable"}]}, "category": "unit", "description": "Tests that an increase in request read-only properties makes the specification incompatible."}, {"name": "requestReadOnlyRequiredDecreased", "primary_tested": ["TestUtils.assertSpecIncompatible(String,String,BackwardIncompatibleProp)"], "associated_methods": ["BackwardIncompatibleProp.REQUEST_READONLY_REQUIRED_DECREASED"], "external_dependencies": {"modules": ["TestUtils", "BackwardIncompatibleProp"], "class_members": [{"name": "BASE", "type": "variable"}]}, "category": "unit", "description": "Tests that a decrease in request read-only properties, making them required, makes the specification incompatible."}]}, {"file_path": "src/test/java/org/openapitools/openapidiff/core/backcompat/PathBCTest.java", "testclass_name": "PathBCTest", "dependencies": ["package org.openapitools.openapidiff.core.backcompat;", "import static org.openapitools.openapidiff.core.TestUtils.assertSpecChangedButCompatible;", "import static org.openapitools.openapidiff.core.TestUtils.assertSpecIncompatible;", "import static org.openapitools.openapidiff.core.TestUtils.assertSpecUnchanged;", "import static org.openapitools.openapidiff.core.model.BackwardIncompatibleProp.OPENAPI_ENDPOINTS_DECREASED;", "import org.junit.jupiter.api.Test;", "import org.openapitools.openapidiff.core.model.BackwardIncompatibleProp;"], "name": "PathBCTest", "description": "Tests for backward compatibility of API paths.", "class_members": {"variables": [{"name": "BASE", "type": "final String"}]}, "test_cases": [{"name": "unchanged", "primary_tested": ["TestUtils.assertSpecUnchanged(String,String)"], "external_dependencies": {"modules": ["TestUtils"], "class_members": [{"name": "BASE", "type": "variable"}]}, "category": "unit", "description": "Tests that the specification remains unchanged."}, {"name": "changedButCompatible", "primary_tested": ["TestUtils.assertSpecChangedButCompatible(String,String)"], "external_dependencies": {"modules": ["TestUtils"], "class_members": [{"name": "BASE", "type": "variable"}]}, "category": "unit", "description": "Tests that the specification changes but remains compatible."}, {"name": "opsDecreased", "primary_tested": ["TestUtils.assertSpecIncompatible(String,String,BackwardIncompatibleProp)"], "external_dependencies": {"modules": ["TestUtils", "BackwardIncompatibleProp"], "class_members": [{"name": "BASE", "type": "variable"}], "project_specific_resources": ["BackwardIncompatibleProp.OPENAPI_ENDPOINTS_DECREASED"]}, "category": "unit", "description": "Tests that the specification becomes incompatible due to a decrease in operations."}]}, {"file_path": "src/test/java/org/openapitools/openapidiff/core/backcompat/WriteOnlyBCTest.java", "testclass_name": "WriteOnlyBCTest", "dependencies": ["package org.openapitools.openapidiff.core.backcompat;", "import static org.openapitools.openapidiff.core.TestUtils.assertSpecChangedButCompatible;", "import static org.openapitools.openapidiff.core.TestUtils.assertSpecIncompatible;", "import static org.openapitools.openapidiff.core.TestUtils.assertSpecUnchanged;", "import static org.openapitools.openapidiff.core.model.BackwardIncompatibleProp.RESPONSE_WRITEONLY_INCREASED;", "import static org.openapitools.openapidiff.core.model.BackwardIncompatibleProp.RESPONSE_WRITEONLY_REQUIRED_DECREASED;", "import org.junit.jupiter.api.Test;", "import org.openapitools.openapidiff.core.model.BackwardIncompatibleProp;"], "name": "WriteOnlyBCTest", "description": "Tests for backward compatibility of write-only properties in OpenAPI specifications.", "class_members": {"variables": [{"name": "BASE", "type": "final String"}]}, "test_cases": [{"name": "unchanged", "primary_tested": ["TestUtils.assertSpecUnchanged(String,String)"], "external_dependencies": {"modules": ["TestUtils"], "class_members": [{"name": "BASE", "type": "variable"}]}, "category": "unit", "description": "Asserts that the specification remains unchanged."}, {"name": "changedButCompatible", "primary_tested": ["TestUtils.assertSpecChangedButCompatible(String,String)"], "external_dependencies": {"modules": ["TestUtils"], "class_members": [{"name": "BASE", "type": "variable"}]}, "category": "unit", "description": "Asserts that the specification has changed but remains compatible."}, {"name": "responseWriteOnlyIncreased", "primary_tested": ["TestUtils.assertSpecIncompatible(String,String,BackwardIncompatibleProp)"], "external_dependencies": {"modules": ["TestUtils", "BackwardIncompatibleProp"], "class_members": [{"name": "BASE", "type": "variable"}], "project_specific_resources": ["BackwardIncompatibleProp.RESPONSE_WRITEONLY_INCREASED"]}, "category": "unit", "description": "Asserts that the specification is incompatible due to an increase in write-only properties."}, {"name": "responseWriteOnlyRequiredDecreased", "primary_tested": ["TestUtils.assertSpecIncompatible(String,String,BackwardIncompatibleProp)"], "external_dependencies": {"modules": ["TestUtils", "BackwardIncompatibleProp"], "class_members": [{"name": "BASE", "type": "variable"}], "project_specific_resources": ["BackwardIncompatibleProp.RESPONSE_WRITEONLY_REQUIRED_DECREASED"]}, "category": "unit", "description": "Asserts that the specification is incompatible due to a decrease in required write-only properties."}]}, {"file_path": "src/test/java/org/openapitools/openapidiff/core/SecurityDiffTest.java", "testclass_name": "SecurityDiffTest", "dependencies": ["package org.openapitools.openapidiff.core;", "import static org.assertj.core.api.Assertions.assertThat;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import io.swagger.v3.oas.models.security.SecurityRequirement;", "import org.junit.jupiter.api.Test;", "import org.openapitools.openapidiff.core.model.*;"], "name": "SecurityDiffTest", "description": "Tests for comparing security differences in OpenAPI documents.", "class_members": {"variables": [{"name": "OPENAPI_DOC1", "type": "final String"}, {"name": "OPENAPI_DOC2", "type": "final String"}, {"name": "OPENAPI_DOC3", "type": "final String"}, {"name": "OPENAPI_DOC4", "type": "final String"}, {"name": "OPENAPI_DOC5", "type": "final String"}]}, "test_cases": [{"name": "testDiffDifferent", "primary_tested": ["OpenApiCompare.fromLocations(String,String)"], "associated_methods": ["ChangedOpenApi.getChangedOperations()", "ChangedOperation.getPathUrl()", "ChangedOperation.isCompatible()", "ChangedSecurityRequirements.isCompatible()", "ChangedSecurityRequirements.getIncreased()", "ChangedSecurityRequirements.getChanged()", "ChangedSecurityRequirement.getChanged()", "ChangedSecuritySchemeScopes.getIncreased()", "ChangedOAuthFlow.isAuthorizationUrl()"], "external_dependencies": {"modules": ["ChangedOpenApi", "ChangedOperation", "ChangedSecurityRequirements", "ChangedSecurityRequirement", "ChangedSecuritySchemeScopes", "ChangedOAuthFlow", "SecurityRequirement"], "class_members": [{"name": "OPENAPI_DOC1", "type": "variable"}, {"name": "OPENAPI_DOC2", "type": "variable"}]}, "category": "unit", "description": "Tests the comparison of security differences between two OpenAPI documents."}, {"name": "testWithUnknownSecurityScheme", "primary_tested": ["OpenApiCompare.fromLocations(String,String)"], "external_dependencies": {"modules": ["IllegalArgumentException"], "class_members": [{"name": "OPENAPI_DOC3", "type": "variable"}, {"name": "OPENAPI_DOC4", "type": "variable"}]}, "category": "unit", "description": "Tests the handling of unknown security schemes in OpenAPI documents."}, {"name": "testMissingSecurityDefinition", "primary_tested": ["OpenApiCompare.fromLocations(String,String)"], "external_dependencies": {"modules": ["IllegalArgumentException"], "class_members": [{"name": "OPENAPI_DOC5", "type": "variable"}]}, "category": "unit", "description": "Tests the handling of missing security definitions in OpenAPI documents."}]}, {"file_path": "src/test/java/org/openapitools/openapidiff/core/backcompat/OAuthFlowBCTest.java", "testclass_name": "OAuthFlowBCTest", "dependencies": ["package org.openapitools.openapidiff.core.backcompat;", "import static org.openapitools.openapidiff.core.TestUtils.assertSpecIncompatible;", "import static org.openapitools.openapidiff.core.TestUtils.assertSpecUnchanged;", "import static org.openapitools.openapidiff.core.model.BackwardIncompatibleProp.SECURITY_SCHEME_OAUTH2_AUTH_URL_CHANGED;", "import static org.openapitools.openapidiff.core.model.BackwardIncompatibleProp.SECURITY_SCHEME_OAUTH2_REFRESH_URL_CHANGED;", "import static org.openapitools.openapidiff.core.model.BackwardIncompatibleProp.SECURITY_SCHEME_OAUTH2_TOKEN_URL_CHANGED;", "import org.junit.jupiter.api.Test;", "import org.openapitools.openapidiff.core.model.BackwardIncompatibleProp;"], "name": "OAuthFlowBCTest", "description": "Tests for backward compatibility of OAuth flow changes in OpenAPI specifications.", "class_members": {"variables": [{"name": "BASE", "type": "final String"}]}, "test_cases": [{"name": "unchanged", "primary_tested": ["TestUtils.assertSpecUnchanged(String,String)"], "external_dependencies": {"modules": ["TestUtils"], "class_members": [{"name": "BASE", "type": "variable"}]}, "category": "unit", "description": "Tests that the specification remains unchanged."}, {"name": "authorizationUrlChanged", "primary_tested": ["TestUtils.assertSpecIncompatible(String,String,BackwardIncompatibleProp)"], "associated_methods": ["BackwardIncompatibleProp.SECURITY_SCHEME_OAUTH2_AUTH_URL_CHANGED"], "external_dependencies": {"modules": ["TestUtils", "BackwardIncompatibleProp"], "class_members": [{"name": "BASE", "type": "variable"}]}, "category": "unit", "description": "Tests that changing the authorization URL in the OAuth flow results in an incompatible specification."}, {"name": "refreshUrlChanged", "primary_tested": ["TestUtils.assertSpecIncompatible(String,String,BackwardIncompatibleProp)"], "associated_methods": ["BackwardIncompatibleProp.SECURITY_SCHEME_OAUTH2_REFRESH_URL_CHANGED"], "external_dependencies": {"modules": ["TestUtils", "BackwardIncompatibleProp"], "class_members": [{"name": "BASE", "type": "variable"}]}, "category": "unit", "description": "Tests that changing the refresh URL in the OAuth flow results in an incompatible specification."}, {"name": "tokenUrlChanged", "primary_tested": ["TestUtils.assertSpecIncompatible(String,String,BackwardIncompatibleProp)"], "associated_methods": ["BackwardIncompatibleProp.SECURITY_SCHEME_OAUTH2_TOKEN_URL_CHANGED"], "external_dependencies": {"modules": ["TestUtils", "BackwardIncompatibleProp"], "class_members": [{"name": "BASE", "type": "variable"}]}, "category": "unit", "description": "Tests that changing the token URL in the OAuth flow results in an incompatible specification."}]}, {"file_path": "src/test/java/org/openapitools/openapidiff/core/backcompat/HeaderBCTest.java", "testclass_name": "HeaderBCTest", "dependencies": ["package org.openapitools.openapidiff.core.backcompat;", "import static org.openapitools.openapidiff.core.TestUtils.assertSpecChangedButCompatible;", "import static org.openapitools.openapidiff.core.TestUtils.assertSpecIncompatible;", "import static org.openapitools.openapidiff.core.TestUtils.assertSpecUnchanged;", "import static org.openapitools.openapidiff.core.model.BackwardIncompatibleProp.RESPONSE_HEADER_EXPLODE_CHANGED;", "import static org.openapitools.openapidiff.core.model.BackwardIncompatibleProp.RESPONSE_HEADER_REQUIRED_DECREASED;", "import static org.openapitools.openapidiff.core.model.BackwardIncompatibleProp.RESPONSE_HEADER_REQUIRED_INCREASED;", "import org.junit.jupiter.api.Test;", "import org.openapitools.openapidiff.core.model.BackwardIncompatibleProp;"], "name": "HeaderBCTest", "description": "Tests for backward compatibility of response headers in OpenAPI specifications.", "class_members": {"variables": [{"name": "BASE", "type": "final String"}]}, "fixtures": [], "test_cases": [{"name": "unchanged", "primary_tested": ["TestUtils.assertSpecUnchanged(String,String)"], "external_dependencies": {"modules": ["TestUtils"], "class_members": [{"name": "BASE", "type": "variable"}]}, "category": "unit", "description": "Asserts that the specification remains unchanged."}, {"name": "changedButCompatible", "primary_tested": ["TestUtils.assertSpecChangedButCompatible(String,String)"], "external_dependencies": {"modules": ["TestUtils"], "class_members": [{"name": "BASE", "type": "variable"}]}, "category": "unit", "description": "Asserts that the specification has changed but remains compatible."}, {"name": "responseExplodeChanged", "primary_tested": ["TestUtils.assertSpecIncompatible(String,String,BackwardIncompatibleProp)"], "external_dependencies": {"modules": ["TestUtils", "BackwardIncompatibleProp"], "class_members": [{"name": "BASE", "type": "variable"}]}, "category": "unit", "description": "Asserts that the specification is incompatible due to a change in response header explode property."}, {"name": "responseRequiredDecreased", "primary_tested": ["TestUtils.assertSpecIncompatible(String,String,BackwardIncompatibleProp)"], "external_dependencies": {"modules": ["TestUtils", "BackwardIncompatibleProp"], "class_members": [{"name": "BASE", "type": "variable"}]}, "category": "unit", "description": "Asserts that the specification is incompatible due to a decrease in required response headers."}, {"name": "responseRequiredIncreased", "primary_tested": ["TestUtils.assertSpecIncompatible(String,String,BackwardIncompatibleProp)"], "external_dependencies": {"modules": ["TestUtils", "BackwardIncompatibleProp"], "class_members": [{"name": "BASE", "type": "variable"}]}, "category": "unit", "description": "Asserts that the specification is incompatible due to an increase in required response headers."}]}, {"file_path": "src/test/java/org/openapitools/openapidiff/core/backcompat/EnumBCTest.java", "testclass_name": "EnumBCTest", "dependencies": ["package org.openapitools.openapidiff.core.backcompat;", "import static org.openapitools.openapidiff.core.TestUtils.assertSpecChangedButCompatible;", "import static org.openapitools.openapidiff.core.TestUtils.assertSpecIncompatible;", "import static org.openapitools.openapidiff.core.TestUtils.assertSpecUnchanged;", "import static org.openapitools.openapidiff.core.model.BackwardIncompatibleProp.REQUEST_ENUM_DECREASED;", "import static org.openapitools.openapidiff.core.model.BackwardIncompatibleProp.RESPONSE_ENUM_INCREASED;", "import org.junit.jupiter.api.Test;", "import org.openapitools.openapidiff.core.model.BackwardIncompatibleProp;"], "name": "EnumBCTest", "description": "Tests for backward compatibility of enum changes in OpenAPI specifications.", "class_members": {"variables": [{"name": "BASE", "type": "final String"}]}, "test_cases": [{"name": "unchanged", "primary_tested": ["TestUtils.assertSpecUnchanged(String,String)"], "external_dependencies": {"modules": ["TestUtils"], "class_members": [{"name": "BASE", "type": "variable"}], "project_specific_resources": ["TestUtils.assertSpecUnchanged(String,String)"]}, "category": "unit", "description": "Tests that the specification remains unchanged."}, {"name": "changedButCompatible", "primary_tested": ["TestUtils.assertSpecChangedButCompatible(String,String)"], "external_dependencies": {"modules": ["TestUtils"], "class_members": [{"name": "BASE", "type": "variable"}], "project_specific_resources": ["TestUtils.assertSpecChangedButCompatible(String,String)"]}, "category": "unit", "description": "Tests that the specification changes but remains compatible."}, {"name": "requestDecreased", "primary_tested": ["TestUtils.assertSpecIncompatible(String,String,BackwardIncompatibleProp)"], "associated_methods": ["BackwardIncompatibleProp.REQUEST_ENUM_DECREASED"], "external_dependencies": {"modules": ["TestUtils", "BackwardIncompatibleProp"], "class_members": [{"name": "BASE", "type": "variable"}], "project_specific_resources": ["TestUtils.assertSpecIncompatible(String,String,BackwardIncompatibleProp)"]}, "category": "unit", "description": "Tests that a decrease in request enum values makes the specification incompatible."}, {"name": "responseIncreased", "primary_tested": ["TestUtils.assertSpecIncompatible(String,String,BackwardIncompatibleProp)"], "associated_methods": ["BackwardIncompatibleProp.RESPONSE_ENUM_INCREASED"], "external_dependencies": {"modules": ["TestUtils", "BackwardIncompatibleProp"], "class_members": [{"name": "BASE", "type": "variable"}], "project_specific_resources": ["TestUtils.assertSpecIncompatible(String,String,BackwardIncompatibleProp)"]}, "category": "unit", "description": "Tests that an increase in response enum values makes the specification incompatible."}]}, {"file_path": "src/test/java/org/openapitools/openapidiff/core/AsciidocRenderTest.java", "testclass_name": "AsciidocRenderTest", "dependencies": ["package org.openapitools.openapidiff.core;", "import static org.assertj.core.api.Assertions.assertThat;", "import java.io.ByteArrayOutputStream;", "import java.io.OutputStreamWriter;", "import org.junit.jupiter.api.Test;", "import org.openapitools.openapidiff.core.model.ChangedOpenApi;", "import org.openapitools.openapidiff.core.output.AsciidocRender;"], "name": "AsciidocRenderTest", "description": "Unit tests for the AsciidocRender class, ensuring that various rendering scenarios do not fail.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "renderDoesNotFailWhenPropertyHasBeenRemoved", "primary_tested": ["AsciidocRender.render(ChangedOpenApi,OutputStreamWriter)"], "external_dependencies": {"modules": ["AsciidocRender", "ByteArrayOutputStream", "OutputStreamWriter", "ChangedOpenApi", "OpenApiCompare"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that rendering does not fail when a property has been removed."}, {"name": "renderDoesNotCauseStackOverflowWithRecursiveDefinitions", "primary_tested": ["AsciidocRender.render(ChangedOpenApi,OutputStreamWriter)"], "external_dependencies": {"modules": ["AsciidocRender", "ByteArrayOutputStream", "OutputStreamWriter", "ChangedOpenApi", "OpenApiCompare"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that rendering does not cause a stack overflow with recursive definitions."}, {"name": "renderDoesNotFailWhenHTTPStatusCodeIsRange", "primary_tested": ["AsciidocRender.render(ChangedOpenApi,OutputStreamWriter)"], "external_dependencies": {"modules": ["AsciidocRender", "ByteArrayOutputStream", "OutputStreamWriter", "ChangedOpenApi", "OpenApiCompare"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that rendering does not fail when an HTTP status code is a range."}, {"name": "validateAsciiDocChangeFile", "primary_tested": ["AsciidocRender.render(ChangedOpenApi,OutputStreamWriter)"], "external_dependencies": {"modules": ["AsciidocRender", "ByteArrayOutputStream", "OutputStreamWriter", "ChangedOpenApi", "OpenApiCompare"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the AsciiDoc change file is validated correctly."}, {"name": "validateAsciiDocRangeStatus", "primary_tested": ["AsciidocRender.render(ChangedOpenApi,OutputStreamWriter)"], "external_dependencies": {"modules": ["AsciidocRender", "ByteArrayOutputStream", "OutputStreamWriter", "ChangedOpenApi", "OpenApiCompare"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the AsciiDoc range status is validated correctly."}]}, {"file_path": "src/test/java/org/openapitools/openapidiff/core/utils/FileUtilsTest.java", "testclass_name": "FileUtilsTest", "dependencies": ["package org.openapitools.openapidiff.core.utils;", "import static org.assertj.core.api.Assertions.assertThat;", "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;", "import java.io.IOException;", "import java.nio.charset.StandardCharsets;", "import java.nio.file.Files;", "import java.nio.file.Path;", "import java.util.Collections;", "import org.apache.commons.lang3.StringUtils;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.api.io.TempDir;", "import org.openapitools.openapidiff.core.compare.OpenApiDiffOptions;", "import org.openapitools.openapidiff.core.model.ChangedOpenApi;", "import org.openapitools.openapidiff.core.output.ConsoleRender;"], "name": "FileUtilsTest", "description": "Unit tests for the FileUtils class, focusing on the writeToFile method.", "class_members": {"variables": [{"name": "changedOpenApi", "type": "ChangedOpenApi"}], "methods": [], "nested_classes": []}, "fixtures": ["setup"], "test_cases": [{"name": "writeToFile_filenameIsNull_doesNothing", "primary_tested": ["FileUtils.writeToFile(ConsoleRender,ChangedOpenApi,String)"], "external_dependencies": {"modules": ["FileUtils", "ConsoleRender", "ChangedOpenApi"], "class_members": [{"name": "changedOpenApi", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setup"], "description": "Tests that the writeToFile method does nothing when the filename is null."}, {"name": "writeToFile_filenameIsEmpty_doesNothing", "primary_tested": ["FileUtils.writeToFile(ConsoleRender,ChangedOpenApi,String)"], "external_dependencies": {"modules": ["FileUtils", "ConsoleRender", "ChangedOpenApi", "StringUtils"], "class_members": [{"name": "changedOpenApi", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setup"], "description": "Tests that the writeToFile method does nothing when the filename is empty."}, {"name": "writeToFile_fileExists_overwrites_file", "primary_tested": ["FileUtils.writeToFile(ConsoleRender,ChangedOpenApi,String)"], "external_dependencies": {"modules": ["FileUtils", "ConsoleRender", "ChangedOpenApi", "Files", "Path", "StandardCharsets"], "class_members": [{"name": "changedOpenApi", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setup"], "description": "Tests that the writeToFile method overwrites an existing file when the file exists."}, {"name": "writeToFile_fileDoesNotExist_createsFile", "primary_tested": ["FileUtils.writeToFile(ConsoleRender,ChangedOpenApi,String)"], "external_dependencies": {"modules": ["FileUtils", "ConsoleRender", "ChangedOpenApi", "Path"], "class_members": [{"name": "changedOpenApi", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setup"], "description": "Tests that the writeToFile method creates a new file when the file does not exist."}]}, {"file_path": "src/test/java/org/openapitools/openapidiff/core/AllOfDiffTest.java", "testclass_name": "AllOfDiffTest", "dependencies": ["package org.openapitools.openapidiff.core;", "import static org.openapitools.openapidiff.core.TestUtils.assertOpenApiAreEquals;", "import static org.openapitools.openapidiff.core.TestUtils.assertOpenApiChangedEndpoints;", "import org.junit.jupiter.api.Test;"], "name": "AllOfDiffTest", "description": "Tests for comparing OpenAPI documents using the AllOfDiff functionality.", "class_members": {"variables": [{"name": "OPENAPI_DOC1", "type": "static final String"}, {"name": "OPENAPI_DOC2", "type": "static final String"}, {"name": "OPENAPI_DOC3", "type": "static final String"}, {"name": "OPENAPI_DOC4", "type": "static final String"}]}, "test_cases": [{"name": "testDiffSame", "primary_tested": ["TestUtils.assertOpenApiAreEquals(String,String)"], "external_dependencies": {"modules": ["TestUtils"], "class_members": [{"name": "OPENAPI_DOC1", "type": "variable"}], "project_specific_resources": ["TestUtils.assertOpenApiAreEquals(String,String)"]}, "category": "unit", "description": "Tests that two identical OpenAPI documents are considered the same."}, {"name": "testDiffSameWithAllOf", "primary_tested": ["TestUtils.assertOpenApiAreEquals(String,String)"], "external_dependencies": {"modules": ["TestUtils"], "class_members": [{"name": "OPENAPI_DOC1", "type": "variable"}, {"name": "OPENAPI_DOC2", "type": "variable"}], "project_specific_resources": ["TestUtils.assertOpenApiAreEquals(String,String)"]}, "category": "unit", "description": "Tests that two OpenAPI documents with allOf constructs are considered the same."}, {"name": "testDiffDifferent1", "primary_tested": ["TestUtils.assertOpenApiChangedEndpoints(String,String)"], "external_dependencies": {"modules": ["TestUtils"], "class_members": [{"name": "OPENAPI_DOC1", "type": "variable"}, {"name": "OPENAPI_DOC3", "type": "variable"}], "project_specific_resources": ["TestUtils.assertOpenApiChangedEndpoints(String,String)"]}, "category": "unit", "description": "Tests that two different OpenAPI documents are detected as having changed endpoints."}, {"name": "testDiffDifferent2", "primary_tested": ["TestUtils.assertOpenApiChangedEndpoints(String,String)"], "external_dependencies": {"modules": ["TestUtils"], "class_members": [{"name": "OPENAPI_DOC1", "type": "variable"}, {"name": "OPENAPI_DOC4", "type": "variable"}], "project_specific_resources": ["TestUtils.assertOpenApiChangedEndpoints(String,String)"]}, "category": "unit", "description": "Tests that two different OpenAPI documents are detected as having changed endpoints."}]}, {"file_path": "src/test/java/org/openapitools/openapidiff/core/backcompat/RequiredBCTest.java", "testclass_name": "RequiredBCTest", "dependencies": ["package org.openapitools.openapidiff.core.backcompat;", "import static org.openapitools.openapidiff.core.TestUtils.assertSpecChangedButCompatible;", "import static org.openapitools.openapidiff.core.TestUtils.assertSpecIncompatible;", "import static org.openapitools.openapidiff.core.TestUtils.assertSpecUnchanged;", "import static org.openapitools.openapidiff.core.model.BackwardIncompatibleProp.REQUEST_REQUIRED_INCREASED;", "import static org.openapitools.openapidiff.core.model.BackwardIncompatibleProp.RESPONSE_REQUIRED_DECREASED;", "import org.junit.jupiter.api.Test;", "import org.openapitools.openapidiff.core.model.BackwardIncompatibleProp;"], "name": "RequiredBCTest", "description": "Tests for backward compatibility checks related to required properties in OpenAPI specifications.", "class_members": {"variables": [{"name": "BASE", "type": "final String"}]}, "test_cases": [{"name": "unchanged", "primary_tested": ["TestUtils.assertSpecUnchanged(String,String)"], "external_dependencies": {"modules": ["TestUtils"], "class_members": [{"name": "BASE", "type": "variable"}], "project_specific_resources": ["TestUtils.assertSpecUnchanged(String,String)"]}, "category": "unit", "description": "Tests that the specification remains unchanged."}, {"name": "changedButCompatible", "primary_tested": ["TestUtils.assertSpecChangedButCompatible(String,String)"], "external_dependencies": {"modules": ["TestUtils"], "class_members": [{"name": "BASE", "type": "variable"}], "project_specific_resources": ["TestUtils.assertSpecChangedButCompatible(String,String)"]}, "category": "unit", "description": "Tests that the specification has changed but remains compatible."}, {"name": "requestRequiredIncreased", "primary_tested": ["TestUtils.assertSpecIncompatible(String,String,BackwardIncompatibleProp)"], "external_dependencies": {"modules": ["TestUtils", "BackwardIncompatibleProp"], "class_members": [{"name": "BASE", "type": "variable"}], "project_specific_resources": ["TestUtils.assertSpecIncompatible(String,String,BackwardIncompatibleProp)"]}, "category": "unit", "description": "Tests that the specification becomes incompatible due to an increase in required request properties."}, {"name": "responseRequiredDecreased", "primary_tested": ["TestUtils.assertSpecIncompatible(String,String,BackwardIncompatibleProp)"], "external_dependencies": {"modules": ["TestUtils", "BackwardIncompatibleProp"], "class_members": [{"name": "BASE", "type": "variable"}], "project_specific_resources": ["TestUtils.assertSpecIncompatible(String,String,BackwardIncompatibleProp)"]}, "category": "unit", "description": "Tests that the specification becomes incompatible due to a decrease in required response properties."}]}, {"file_path": "src/test/java/org/openapitools/openapidiff/core/PathDiffTest.java", "testclass_name": "PathDiffTest", "dependencies": ["package org.openapitools.openapidiff.core;", "import static org.assertj.core.api.Assertions.assertThat;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.openapitools.openapidiff.core.TestUtils.assertOpenApiAreEquals;", "import org.junit.jupiter.api.Test;", "import org.openapitools.openapidiff.core.model.ChangedOpenApi;"], "name": "PathDiffTest", "description": "Test suite for comparing OpenAPI paths and their differences.", "class_members": {"variables": [{"name": "OPENAPI_PATH1", "type": "static final String"}, {"name": "OPENAPI_PATH2", "type": "static final String"}, {"name": "OPENAPI_PATH3", "type": "static final String"}, {"name": "OPENAPI_PATH4", "type": "static final String"}, {"name": "OPENAPI_PATH5", "type": "static final String"}, {"name": "OPENAPI_PATH6", "type": "static final String"}]}, "test_cases": [{"name": "testEqual", "primary_tested": ["TestUtils.assertOpenApiAreEquals(String,String)"], "external_dependencies": {"modules": ["TestUtils"], "class_members": [{"name": "OPENAPI_PATH1", "type": "variable"}, {"name": "OPENAPI_PATH2", "type": "variable"}]}, "category": "unit", "description": "Tests if two OpenAPI paths are equal."}, {"name": "testMultiplePathWithSameSignature", "primary_tested": ["TestUtils.assertOpenApiAreEquals(String,String)"], "external_dependencies": {"modules": ["TestUtils"], "class_members": [{"name": "OPENAPI_PATH3", "type": "variable"}]}, "category": "unit", "description": "Tests if an IllegalArgumentException is thrown when comparing the same OpenAPI path."}, {"name": "testSameTemplateDifferentMethods", "primary_tested": ["OpenApiCompare.fromLocations(String,String)"], "associated_methods": ["ChangedOpenApi.getNewEndpoints()", "Endpoint.getOperation()", "Operation.getOperationId()"], "external_dependencies": {"modules": ["OpenApiCompare", "ChangedOpenApi", "Endpoint", "Operation"], "class_members": [{"name": "OPENAPI_PATH1", "type": "variable"}, {"name": "OPENAPI_PATH4", "type": "variable"}]}, "category": "unit", "description": "Tests if the same OpenAPI template with different methods is handled correctly."}, {"name": "testDiffWithSimilarBeginningPaths", "primary_tested": ["OpenApiCompare.fromLocations(String,String)", "OpenApiCompare.fromSpecifications(OpenAPI,OpenAPI)"], "associated_methods": ["ChangedOpenApi.getOldSpecOpenApi()", "ChangedOpenApi.getNewSpecOpenApi()", "ChangedOpenApi.getChangedOperations()"], "external_dependencies": {"modules": ["OpenApiCompare", "ChangedOpenApi"], "class_members": [{"name": "OPENAPI_PATH5", "type": "variable"}, {"name": "OPENAPI_PATH6", "type": "variable"}]}, "category": "unit", "description": "Tests the difference between OpenAPI paths with similar beginnings."}]}, {"file_path": "src/test/java/org/openapitools/openapidiff/core/ConsoleRenderTest.java", "testclass_name": "ConsoleRenderTest", "dependencies": ["package org.openapitools.openapidiff.core;", "import static org.assertj.core.api.Assertions.assertThat;", "import java.io.ByteArrayOutputStream;", "import java.io.OutputStreamWriter;", "import org.junit.jupiter.api.Test;", "import org.openapitools.openapidiff.core.model.ChangedOpenApi;", "import org.openapitools.openapidiff.core.output.ConsoleRender;"], "name": "ConsoleRenderTest", "description": "Unit tests for the ConsoleRender class, which handles rendering of OpenAPI diff results to the console.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "renderDoesNotFailWhenPropertyHasBeenRemoved", "primary_tested": ["ConsoleRender.render(ChangedOpenApi,OutputStreamWriter)"], "external_dependencies": {"modules": ["ConsoleRender", "ByteArrayOutputStream", "OutputStreamWriter", "ChangedOpenApi", "OpenApiCompare"], "class_members": []}, "category": "unit", "description": "Tests that rendering does not fail when a property has been removed from the OpenAPI spec."}, {"name": "renderDoesNotFailWhenHTTPStatusCodeIsRange", "primary_tested": ["ConsoleRender.render(ChangedOpenApi,OutputStreamWriter)"], "external_dependencies": {"modules": ["ConsoleRender", "ByteArrayOutputStream", "OutputStreamWriter", "ChangedOpenApi", "OpenApiCompare"], "class_members": []}, "category": "unit", "description": "Tests that rendering does not fail when an HTTP status code is a range in the OpenAPI spec."}, {"name": "renderShowsWhatsDeletedSectionWhenEndpointIsDeleted", "primary_tested": ["ConsoleRender.render(ChangedOpenApi,OutputStreamWriter)"], "external_dependencies": {"modules": ["ConsoleRender", "ByteArrayOutputStream", "OutputStreamWriter", "ChangedOpenApi", "OpenApiCompare"], "class_members": []}, "category": "unit", "description": "Tests that the 'What's Deleted' section is shown when an endpoint is deleted from the OpenAPI spec."}, {"name": "renderShowsWhatsNewSectionWhenEndpointIsAdded", "primary_tested": ["ConsoleRender.render(ChangedOpenApi,OutputStreamWriter)"], "external_dependencies": {"modules": ["ConsoleRender", "ByteArrayOutputStream", "OutputStreamWriter", "ChangedOpenApi", "OpenApiCompare"], "class_members": []}, "category": "unit", "description": "Tests that the 'What's New' section is shown when a new endpoint is added to the OpenAPI spec."}, {"name": "renderShowsWhatsDeprecatedSectionWhenEndpointIsDeprecated", "primary_tested": ["ConsoleRender.render(ChangedOpenApi,OutputStreamWriter)"], "external_dependencies": {"modules": ["ConsoleRender", "ByteArrayOutputStream", "OutputStreamWriter", "ChangedOpenApi", "OpenApiCompare"], "class_members": []}, "category": "unit", "description": "Tests that the 'What's Deprecated' section is shown when an endpoint is deprecated in the OpenAPI spec."}, {"name": "renderShowsWhatsChangedSectionWithCorrectFormattingWhenEndpointIsChanged", "primary_tested": ["ConsoleRender.render(ChangedOpenApi,OutputStreamWriter)"], "external_dependencies": {"modules": ["ConsoleRender", "ByteArrayOutputStream", "OutputStreamWriter", "ChangedOpenApi", "OpenApiCompare"], "class_members": []}, "category": "unit", "description": "Tests that the 'What's Changed' section is shown with correct formatting when an endpoint is changed in the OpenAPI spec."}]}, {"file_path": "src/test/java/org/openapitools/openapidiff/core/backcompat/ParameterBCTest.java", "testclass_name": "ParameterBCTest", "dependencies": ["package org.openapitools.openapidiff.core.backcompat;", "import static org.openapitools.openapidiff.core.TestUtils.assertSpecChangedButCompatible;", "import static org.openapitools.openapidiff.core.TestUtils.assertSpecIncompatible;", "import static org.openapitools.openapidiff.core.TestUtils.assertSpecUnchanged;", "import static org.openapitools.openapidiff.core.model.BackwardIncompatibleProp.REQUEST_PARAMS_REQUIRED_INCREASED;", "import static org.openapitools.openapidiff.core.model.BackwardIncompatibleProp.REQUEST_PARAM_ALLOWEMPTY_DECREASED;", "import static org.openapitools.openapidiff.core.model.BackwardIncompatibleProp.REQUEST_PARAM_EXPLODE_CHANGED;", "import static org.openapitools.openapidiff.core.model.BackwardIncompatibleProp.REQUEST_PARAM_STYLE_CHANGED;", "import org.junit.jupiter.api.Test;", "import org.openapitools.openapidiff.core.model.BackwardIncompatibleProp;"], "name": "ParameterBCTest", "description": "Tests for backward compatibility of request parameters in OpenAPI specifications.", "class_members": {"variables": [{"name": "BASE", "type": "final String"}]}, "fixtures": [], "test_cases": [{"name": "unchanged", "primary_tested": [], "external_dependencies": {"modules": ["org.openapitools.openapidiff.core.TestUtils"], "project_specific_resources": ["TestUtils.assertSpecUnchanged(String,String)"]}, "category": "unit", "fixtures_used": [], "description": "Asserts that the specification remains unchanged."}, {"name": "changedButCompatible", "primary_tested": [], "external_dependencies": {"modules": ["org.openapitools.openapidiff.core.TestUtils"], "project_specific_resources": ["TestUtils.assertSpecChangedButCompatible(String,String)"]}, "category": "unit", "fixtures_used": [], "description": "Asserts that the specification has changed but remains compatible."}, {"name": "allowEmptyValueDecreased", "primary_tested": [], "external_dependencies": {"modules": ["org.openapitools.openapidiff.core.TestUtils", "org.openapitools.openapidiff.core.model.BackwardIncompatibleProp"], "class_members": [{"name": "REQUEST_PARAM_ALLOWEMPTY_DECREASED", "type": "variable"}], "project_specific_resources": ["TestUtils.assertSpecIncompatible(String,String,BackwardIncompatibleProp)"]}, "category": "unit", "fixtures_used": [], "description": "Asserts that the specification is incompatible due to a decrease in the allowEmptyValue property."}, {"name": "explodeChanged", "primary_tested": [], "external_dependencies": {"modules": ["org.openapitools.openapidiff.core.TestUtils", "org.openapitools.openapidiff.core.model.BackwardIncompatibleProp"], "class_members": [{"name": "REQUEST_PARAM_EXPLODE_CHANGED", "type": "variable"}], "project_specific_resources": ["TestUtils.assertSpecIncompatible(String,String,BackwardIncompatibleProp)"]}, "category": "unit", "fixtures_used": [], "description": "Asserts that the specification is incompatible due to a change in the explode property."}, {"name": "requiredIncreased", "primary_tested": [], "external_dependencies": {"modules": ["org.openapitools.openapidiff.core.TestUtils", "org.openapitools.openapidiff.core.model.BackwardIncompatibleProp"], "class_members": [{"name": "REQUEST_PARAMS_REQUIRED_INCREASED", "type": "variable"}], "project_specific_resources": ["TestUtils.assertSpecIncompatible(String,String,BackwardIncompatibleProp)"]}, "category": "unit", "fixtures_used": [], "description": "Asserts that the specification is incompatible due to an increase in the required property."}, {"name": "styleChanged", "primary_tested": [], "external_dependencies": {"modules": ["org.openapitools.openapidiff.core.TestUtils", "org.openapitools.openapidiff.core.model.BackwardIncompatibleProp"], "class_members": [{"name": "REQUEST_PARAM_STYLE_CHANGED", "type": "variable"}], "project_specific_resources": ["TestUtils.assertSpecIncompatible(String,String,BackwardIncompatibleProp)"]}, "category": "unit", "fixtures_used": [], "description": "Asserts that the specification is incompatible due to a change in the style property."}]}, {"file_path": "src/test/java/org/openapitools/openapidiff/core/ContentDiffTest.java", "testclass_name": "ContentDiffTest", "dependencies": ["package org.openapitools.openapidiff.core;", "import static org.assertj.core.api.Assertions.assertThat;", "import org.junit.jupiter.api.Test;", "import org.openapitools.openapidiff.core.model.ChangedOpenApi;"], "name": "ContentDiffTest", "description": "Unit tests for comparing content differences in OpenAPI documents.", "class_members": {"variables": [{"name": "OPENAPI_DOC1", "type": "static final String"}, {"name": "OPENAPI_DOC2", "type": "static final String"}]}, "test_cases": [{"name": "testContentDiffWithOneEmptyMediaType", "primary_tested": ["OpenApiCompare.fromLocations(String,String)"], "associated_methods": ["ChangedOpenApi.isIncompatible()"], "external_dependencies": {"modules": ["OpenApiCompare", "ChangedOpenApi"], "class_members": [{"name": "OPENAPI_DOC1", "type": "variable"}, {"name": "OPENAPI_DOC2", "type": "variable"}]}, "category": "unit", "description": "Tests the comparison of OpenAPI documents where one has an empty media type, expecting an incompatible result."}, {"name": "testContentDiffWithEmptyMediaTypes", "primary_tested": ["OpenApiCompare.fromLocations(String,String)"], "associated_methods": ["ChangedOpenApi.isUnchanged()"], "external_dependencies": {"modules": ["OpenApiCompare", "ChangedOpenApi"], "class_members": [{"name": "OPENAPI_DOC1", "type": "variable"}]}, "category": "unit", "description": "Tests the comparison of OpenAPI documents where both have empty media types, expecting an unchanged result."}, {"name": "testSameContentDiff", "primary_tested": ["OpenApiCompare.fromLocations(String,String)"], "associated_methods": ["ChangedOpenApi.isUnchanged()"], "external_dependencies": {"modules": ["OpenApiCompare", "ChangedOpenApi"], "class_members": [{"name": "OPENAPI_DOC2", "type": "variable"}]}, "category": "unit", "description": "Tests the comparison of the same OpenAPI document, expecting an unchanged result."}, {"name": "testAddedResponseContentTypeDiff", "primary_tested": ["OpenApiCompare.fromLocations(String,String)"], "associated_methods": ["ChangedOpenApi.isCompatible()"], "external_dependencies": {"modules": ["OpenApiCompare", "ChangedOpenApi"]}, "category": "unit", "description": "Tests the comparison of OpenAPI documents where a response content type is added, expecting a compatible result."}, {"name": "testRemovedResponseContentTypeDiff", "primary_tested": ["OpenApiCompare.fromLocations(String,String)"], "associated_methods": ["ChangedOpenApi.isCompatible()"], "external_dependencies": {"modules": ["OpenApiCompare", "ChangedOpenApi"]}, "category": "unit", "description": "Tests the comparison of OpenAPI documents where a response content type is removed, expecting an incompatible result."}, {"name": "testAddedRequestContentTypeDiff", "primary_tested": ["OpenApiCompare.fromLocations(String,String)"], "associated_methods": ["ChangedOpenApi.isCompatible()"], "external_dependencies": {"modules": ["OpenApiCompare", "ChangedOpenApi"]}, "category": "unit", "description": "Tests the comparison of OpenAPI documents where a request content type is added, expecting a compatible result."}, {"name": "testRemovedRequestContentTypeDiff", "primary_tested": ["OpenApiCompare.fromLocations(String,String)"], "associated_methods": ["ChangedOpenApi.isCompatible()"], "external_dependencies": {"modules": ["OpenApiCompare", "ChangedOpenApi"]}, "category": "unit", "description": "Tests the comparison of OpenAPI documents where a request content type is removed, expecting an incompatible result."}]}, {"file_path": "src/test/java/org/openapitools/openapidiff/core/backcompat/SchemaBCTest.java", "testclass_name": "SchemaBCTest", "dependencies": ["package org.openapitools.openapidiff.core.backcompat;", "import static org.openapitools.openapidiff.core.TestUtils.assertOpenApiBackwardIncompatible;", "import static org.openapitools.openapidiff.core.TestUtils.assertSpecChangedButCompatible;", "import static org.openapitools.openapidiff.core.TestUtils.assertSpecIncompatible;", "import static org.openapitools.openapidiff.core.TestUtils.assertSpecUnchanged;", "import static org.openapitools.openapidiff.core.model.BackwardIncompatibleProp.RESPONSE_REQUIRED_DECREASED;", "import static org.openapitools.openapidiff.core.model.BackwardIncompatibleProp.SCHEMA_DISCRIMINATOR_CHANGED;", "import static org.openapitools.openapidiff.core.model.BackwardIncompatibleProp.SCHEMA_TYPE_CHANGED;", "import org.junit.jupiter.api.Test;", "import org.openapitools.openapidiff.core.model.BackwardIncompatibleProp;"], "name": "SchemaBCTest", "description": "Tests for backward compatibility of schema changes in OpenAPI specifications.", "class_members": {"variables": [{"name": "BASE", "type": "final String"}]}, "fixtures": [], "test_cases": [{"name": "unchanged", "primary_tested": ["TestUtils.assertSpecUnchanged(String,String)"], "external_dependencies": {"modules": ["TestUtils"], "class_members": [{"name": "BASE", "type": "variable"}]}, "category": "unit", "description": "Asserts that the specification remains unchanged."}, {"name": "changedButCompatible", "primary_tested": ["TestUtils.assertSpecChangedButCompatible(String,String)"], "external_dependencies": {"modules": ["TestUtils"], "class_members": [{"name": "BASE", "type": "variable"}]}, "category": "unit", "description": "Asserts that the specification has changed but remains compatible."}, {"name": "discriminatorChanged", "primary_tested": ["TestUtils.assertSpecIncompatible(String,String,BackwardIncompatibleProp)"], "external_dependencies": {"modules": ["TestUtils", "BackwardIncompatibleProp"], "class_members": [{"name": "BASE", "type": "variable"}]}, "category": "unit", "description": "Asserts that the discriminator change in the schema makes the specification incompatible."}, {"name": "requestFormatDecreased", "primary_tested": ["TestUtils.assertOpenApiBackwardIncompatible(String,String)"], "external_dependencies": {"modules": ["TestUtils"], "class_members": [{"name": "BASE", "type": "variable"}]}, "category": "unit", "description": "Asserts that a decrease in request format makes the specification backward incompatible."}, {"name": "requestFormatIncreased", "primary_tested": ["TestUtils.assertOpenApiBackwardIncompatible(String,String)"], "external_dependencies": {"modules": ["TestUtils"], "class_members": [{"name": "BASE", "type": "variable"}]}, "category": "unit", "description": "Asserts that an increase in request format makes the specification backward incompatible."}, {"name": "requestPropsPutIncreased", "primary_tested": ["TestUtils.assertSpecChangedButCompatible(String,String)"], "external_dependencies": {"modules": ["TestUtils"], "class_members": [{"name": "BASE", "type": "variable"}]}, "category": "unit", "description": "Asserts that an increase in request properties for PUT operations makes the specification changed but compatible."}, {"name": "responseFormatDecreased", "primary_tested": ["TestUtils.assertOpenApiBackwardIncompatible(String,String)"], "external_dependencies": {"modules": ["TestUtils"], "class_members": [{"name": "BASE", "type": "variable"}]}, "category": "unit", "description": "Asserts that a decrease in response format makes the specification backward incompatible."}, {"name": "responseFormatIncreased", "primary_tested": ["TestUtils.assertOpenApiBackwardIncompatible(String,String)"], "external_dependencies": {"modules": ["TestUtils"], "class_members": [{"name": "BASE", "type": "variable"}]}, "category": "unit", "description": "Asserts that an increase in response format makes the specification backward incompatible."}, {"name": "responsePropsRequiredDecreased", "primary_tested": ["TestUtils.assertSpecIncompatible(String,String,BackwardIncompatibleProp)"], "external_dependencies": {"modules": ["TestUtils", "BackwardIncompatibleProp"], "class_members": [{"name": "BASE", "type": "variable"}]}, "category": "unit", "description": "Asserts that a decrease in required response properties makes the specification incompatible."}, {"name": "typeChanged", "primary_tested": ["TestUtils.assertSpecIncompatible(String,String,BackwardIncompatibleProp)"], "external_dependencies": {"modules": ["TestUtils", "BackwardIncompatibleProp"], "class_members": [{"name": "BASE", "type": "variable"}]}, "category": "unit", "description": "Asserts that a change in schema type makes the specification incompatible."}]}, {"file_path": "src/test/java/org/openapitools/openapidiff/core/OneOfDiffTest.java", "testclass_name": "OneOfDiffTest", "dependencies": ["package org.openapitools.openapidiff.core;", "import static org.openapitools.openapidiff.core.TestUtils.assertOpenApiAreEquals;", "import static org.openapitools.openapidiff.core.TestUtils.assertOpenApiBackwardIncompatible;", "import static org.openapitools.openapidiff.core.TestUtils.assertOpenApiChangedEndpoints;", "import org.junit.jupiter.api.Test;"], "name": "OneOfDiffTest", "description": "Tests for differences in OpenAPI documents involving oneOf schemas.", "class_members": {"variables": [{"name": "OPENAPI_DOC1", "type": "static final String"}, {"name": "OPENAPI_DOC2", "type": "static final String"}, {"name": "OPENAPI_DOC3", "type": "static final String"}, {"name": "OPENAPI_DOC4", "type": "static final String"}, {"name": "OPENAPI_DOC5", "type": "static final String"}, {"name": "OPENAPI_DOC6", "type": "static final String"}, {"name": "OPENAPI_DOC7", "type": "static final String"}, {"name": "OPENAPI_DOC8", "type": "static final String"}, {"name": "OPENAPI_DOC9", "type": "static final String"}, {"name": "OPENAPI_DOC10", "type": "static final String"}]}, "test_cases": [{"name": "testDiffSame", "primary_tested": ["TestUtils.assertOpenApiAreEquals(String,String)"], "external_dependencies": {"modules": ["TestUtils"], "class_members": [{"name": "OPENAPI_DOC1", "type": "variable"}]}, "category": "unit", "description": "Tests that two identical OpenAPI documents are considered equal."}, {"name": "testDiffDifferentMapping", "primary_tested": ["TestUtils.assertOpenApiChangedEndpoints(String,String)"], "external_dependencies": {"modules": ["TestUtils"], "class_members": [{"name": "OPENAPI_DOC1", "type": "variable"}, {"name": "OPENAPI_DOC2", "type": "variable"}]}, "category": "unit", "description": "Tests that two OpenAPI documents with different mappings are detected."}, {"name": "testDiffSameWithOneOf", "primary_tested": ["TestUtils.assertOpenApiAreEquals(String,String)"], "external_dependencies": {"modules": ["TestUtils"], "class_members": [{"name": "OPENAPI_DOC2", "type": "variable"}, {"name": "OPENAPI_DOC3", "type": "variable"}]}, "category": "unit", "description": "Tests that two OpenAPI documents with oneOf schemas are considered equal."}, {"name": "testComposedSchema", "primary_tested": ["TestUtils.assertOpenApiBackwardIncompatible(String,String)"], "external_dependencies": {"modules": ["TestUtils"], "class_members": [{"name": "OPENAPI_DOC4", "type": "variable"}, {"name": "OPENAPI_DOC5", "type": "variable"}]}, "category": "unit", "description": "Tests that two composed schema OpenAPI documents are backward incompatible."}, {"name": "testComposedSchemaDiff", "primary_tested": ["TestUtils.assertOpenApiAreEquals(String,String)"], "external_dependencies": {"modules": ["TestUtils"], "class_members": [{"name": "OPENAPI_DOC10", "type": "variable"}]}, "category": "unit", "description": "Tests that two identical composed schema OpenAPI documents are considered equal."}, {"name": "testOneOfDiscrimitatorChanged", "primary_tested": ["TestUtils.assertOpenApiBackwardIncompatible(String,String)"], "external_dependencies": {"modules": ["TestUtils"], "class_members": [{"name": "OPENAPI_DOC6", "type": "variable"}, {"name": "OPENAPI_DOC7", "type": "variable"}]}, "category": "unit", "description": "Tests that a change in the discriminator of oneOf schemas is detected as backward incompatible."}, {"name": "testOneOfDiscrimitatorMissingSameOrder", "primary_tested": ["TestUtils.assertOpenApiAreEquals(String,String)"], "external_dependencies": {"modules": ["TestUtils"], "class_members": [{"name": "OPENAPI_DOC8", "type": "variable"}]}, "category": "unit", "description": "Tests that two OpenAPI documents with missing discriminators in the same order are considered equal."}, {"name": "testOneOfDiscrimitatorMissingDifferentOrder", "primary_tested": ["TestUtils.assertOpenApiAreEquals(String,String)"], "external_dependencies": {"modules": ["TestUtils"], "class_members": [{"name": "OPENAPI_DOC8", "type": "variable"}, {"name": "OPENAPI_DOC9", "type": "variable"}]}, "category": "unit", "description": "Tests that two OpenAPI documents with missing discriminators in different orders are considered equal."}]}, {"file_path": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecuritySchemeBCTest.java", "testclass_name": "SecuritySchemeBCTest", "dependencies": ["package org.openapitools.openapidiff.core.backcompat;", "import static org.openapitools.openapidiff.core.TestUtils.*;", "import static org.openapitools.openapidiff.core.model.BackwardIncompatibleProp.*;", "import org.junit.jupiter.api.Test;", "import org.openapitools.openapidiff.core.model.BackwardIncompatibleProp;"], "name": "SecuritySchemeBCTest", "description": "Tests for backward compatibility of security schemes in OpenAPI specifications.", "class_members": {"variables": [{"name": "BASE", "type": "final String"}]}, "fixtures": [], "test_cases": [{"name": "unchanged", "primary_tested": [], "external_dependencies": {"modules": ["org.openapitools.openapidiff.core.TestUtils"], "class_members": [{"name": "BASE", "type": "variable"}], "project_specific_resources": ["org.openapitools.openapidiff.core.TestUtils.assertSpecUnchanged(String,String)"]}, "category": "unit", "fixtures_used": [], "description": "Asserts that the specification remains unchanged."}, {"name": "changedButCompatible", "primary_tested": [], "external_dependencies": {"modules": ["org.openapitools.openapidiff.core.TestUtils"], "class_members": [{"name": "BASE", "type": "variable"}], "project_specific_resources": ["org.openapitools.openapidiff.core.TestUtils.assertSpecChangedButCompatible(String,String)"]}, "category": "unit", "fixtures_used": [], "description": "Asserts that the specification has changed but remains compatible."}, {"name": "bearerFormatChanged", "primary_tested": [], "external_dependencies": {"modules": ["org.openapitools.openapidiff.core.TestUtils", "org.openapitools.openapidiff.core.model.BackwardIncompatibleProp"], "class_members": [{"name": "BASE", "type": "variable"}], "project_specific_resources": ["org.openapitools.openapidiff.core.TestUtils.assertSpecIncompatible(String,String,BackwardIncompatibleProp)"]}, "category": "unit", "fixtures_used": [], "description": "Asserts that the bearer format change makes the specification incompatible."}, {"name": "inChanged", "primary_tested": [], "external_dependencies": {"modules": ["org.openapitools.openapidiff.core.TestUtils"], "class_members": [{"name": "BASE", "type": "variable"}], "project_specific_resources": ["org.openapitools.openapidiff.core.TestUtils.assertOpenApiBackwardIncompatible(String,String)"]}, "category": "unit", "fixtures_used": [], "description": "Asserts that the 'in' change makes the specification backward incompatible."}, {"name": "openIdConnectUrlChanged", "primary_tested": [], "external_dependencies": {"modules": ["org.openapitools.openapidiff.core.TestUtils", "org.openapitools.openapidiff.core.model.BackwardIncompatibleProp"], "class_members": [{"name": "BASE", "type": "variable"}], "project_specific_resources": ["org.openapitools.openapidiff.core.TestUtils.assertSpecIncompatible(String,String,BackwardIncompatibleProp)"]}, "category": "unit", "fixtures_used": [], "description": "Asserts that the OpenID Connect URL change makes the specification incompatible."}, {"name": "schemeChanged", "primary_tested": [], "external_dependencies": {"modules": ["org.openapitools.openapidiff.core.TestUtils", "org.openapitools.openapidiff.core.model.BackwardIncompatibleProp"], "class_members": [{"name": "BASE", "type": "variable"}], "project_specific_resources": ["org.openapitools.openapidiff.core.TestUtils.assertSpecIncompatible(String,String,BackwardIncompatibleProp)"]}, "category": "unit", "fixtures_used": [], "description": "Asserts that the scheme change makes the specification incompatible."}, {"name": "typeChanged", "primary_tested": [], "external_dependencies": {"modules": ["org.openapitools.openapidiff.core.TestUtils"], "class_members": [{"name": "BASE", "type": "variable"}], "project_specific_resources": ["org.openapitools.openapidiff.core.TestUtils.assertOpenApiBackwardIncompatible(String,String)"]}, "category": "unit", "fixtures_used": [], "description": "Asserts that the type change makes the specification backward incompatible."}, {"name": "scopesIncreased", "primary_tested": [], "external_dependencies": {"modules": ["org.openapitools.openapidiff.core.TestUtils", "org.openapitools.openapidiff.core.model.BackwardIncompatibleProp"], "class_members": [{"name": "BASE", "type": "variable"}], "project_specific_resources": ["org.openapitools.openapidiff.core.TestUtils.assertSpecIncompatible(String,String,BackwardIncompatibleProp)"]}, "category": "unit", "fixtures_used": [], "description": "Asserts that the increase in scopes makes the specification incompatible."}]}, {"file_path": "src/test/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilderChangedTest.java", "testclass_name": "DeferredBuilderChangedTest", "dependencies": ["package org.openapitools.openapidiff.core.model.deferred;", "import java.util.Optional;", "import java.util.concurrent.atomic.AtomicBoolean;", "import org.junit.jupiter.api.Assertions;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import org.openapitools.openapidiff.core.model.schema.ChangedReadOnly;", "import org.openapitools.openapidiff.core.model.schema.ChangedWriteOnly;"], "name": "DeferredBuilderChangedTest", "description": "Test suite for the DeferredBuilderChanged class, focusing on various scenarios involving PendingChanged and RealizedChanged objects.", "class_members": {"variables": [{"name": "changed", "type": "PendingChanged<ChangedReadOnly>"}, {"name": "whenSet", "type": "Optional<ChangedReadOnly>"}, {"name": "mappedValue", "type": "ChangedWriteOnly"}, {"name": "chainedValue", "type": "Optional<?>"}], "methods": [], "nested_classes": [{"name": "ChangedAssertion", "description": "Helper class for asserting changes in DeferredChanged objects."}]}, "fixtures": ["beforeEach"], "test_cases": [{"name": "testPendingChangedValueSetBeforeListeners", "primary_tested": ["PendingChanged.setValue(Optional<String>)"], "associated_methods": ["ChangedAssertion.assertSet(boolean)"], "external_dependencies": {"modules": ["PendingChanged", "ChangedAssertion"], "class_members": [{"name": "changed", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests setting a value in PendingChanged before listeners are added."}, {"name": "testPendingChangedValueSetAfterListeners", "primary_tested": ["PendingChanged.setValue(Optional<String>)"], "associated_methods": ["ChangedAssertion.assertSet(boolean)"], "external_dependencies": {"modules": ["PendingChanged", "ChangedAssertion"], "class_members": [{"name": "changed", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests setting a value in PendingChanged after listeners are added."}, {"name": "testPendingChangedValueEMpty", "primary_tested": ["PendingChanged.setValue(Optional<String>)"], "associated_methods": ["ChangedAssertion.assertSet(boolean)"], "external_dependencies": {"modules": ["PendingChanged", "ChangedAssertion"], "class_members": [{"name": "changed", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests setting an empty value in PendingChanged."}, {"name": "testRealizedChange", "primary_tested": ["RealizedChanged.RealizedChanged(String)"], "associated_methods": ["ChangedAssertion.assertSet(boolean)"], "external_dependencies": {"modules": ["RealizedChanged", "ChangedAssertion"], "class_members": [{"name": "changed", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the RealizedChanged constructor with a non-empty value."}, {"name": "testRealizedChangeEmpty", "primary_tested": ["RealizedChanged.RealizedChanged(Optional<String>)"], "associated_methods": ["ChangedAssertion.assertSet(boolean)"], "external_dependencies": {"modules": ["RealizedChanged", "ChangedAssertion"], "class_members": [{"name": "changed", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the RealizedChanged constructor with an empty value."}, {"name": "testFlatMap", "primary_tested": ["PendingChanged.flatMap(Function<ChangedReadOnly, DeferredChanged<ChangedWriteOnly>>)"], "associated_methods": ["PendingChanged.setValue(Optional<ChangedReadOnly>)", "PendingChanged.setValue(Optional<ChangedWriteOnly>)", "DeferredChanged.ifPresent(Consumer<ChangedWriteOnly>)"], "external_dependencies": {"modules": ["PendingChanged", "DeferredChanged", "ChangedReadOnly", "ChangedWriteOnly"], "class_members": [{"name": "changed", "type": "variable"}, {"name": "whenSet", "type": "variable"}, {"name": "chainedValue", "type": "variable"}, {"name": "mappedValue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["beforeEach"], "description": "Tests the flatMap functionality of PendingChanged."}, {"name": "testDeferredBuilderEmpty", "primary_tested": ["DeferredBuilder.build()"], "associated_methods": ["ChangedAssertion.assertSet(boolean)"], "external_dependencies": {"modules": ["DeferredBuilder", "ChangedAssertion"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests building an empty DeferredBuilder."}, {"name": "testDeferredBuilderAllRealized", "primary_tested": ["DeferredBuilder.add(RealizedChanged<String>)", "DeferredBuilder.build()"], "associated_methods": ["ChangedAssertion.assertSet(boolean)"], "external_dependencies": {"modules": ["DeferredBuilder", "RealizedChanged", "ChangedAssertion"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests adding all RealizedChanged objects to DeferredBuilder."}, {"name": "testDeferredBuilderPending", "primary_tested": ["DeferredBuilder.add(RealizedChanged<String>)", "DeferredBuilder.add(PendingChanged<String>)", "DeferredBuilder.build()"], "associated_methods": ["ChangedAssertion.assertNotSet()", "ChangedAssertion.assertSet(boolean)", "PendingChanged.setValue(Optional<String>)"], "external_dependencies": {"modules": ["DeferredBuilder", "RealizedChanged", "PendingChanged", "ChangedAssertion"], "class_members": [{"name": "changed", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests adding a mix of RealizedChanged and PendingChanged objects to DeferredBuilder."}]}, {"file_path": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java", "testclass_name": "ParameterDiffTest", "dependencies": ["package org.openapitools.openapidiff.core;", "import static org.openapitools.openapidiff.core.TestUtils.assertOpenApiChangedEndpoints;", "import org.junit.jupiter.api.Test;"], "name": "ParameterDiffTest", "description": "Test suite for comparing differences in parameters between different OpenAPI specifications.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testDiffDifferent", "primary_tested": ["TestUtils.assertOpenApiChangedEndpoints(String,String)"], "external_dependencies": {"modules": ["TestUtils"], "project_specific_resources": ["TestUtils.assertOpenApiChangedEndpoints(String,String)"]}, "category": "unit", "description": "Tests the comparison of OpenAPI endpoints between two different parameter files."}, {"name": "issue458MaximumDecreased", "primary_tested": ["TestUtils.assertOpenApiChangedEndpoints(String,String)"], "external_dependencies": {"modules": ["TestUtils"], "project_specific_resources": ["TestUtils.assertOpenApiChangedEndpoints(String,String)"]}, "category": "unit", "description": "Tests the comparison of OpenAPI endpoints when the maximum value decreases."}, {"name": "issue458MaximumIncreased", "primary_tested": ["TestUtils.assertOpenApiChangedEndpoints(String,String)"], "external_dependencies": {"modules": ["TestUtils"], "project_specific_resources": ["TestUtils.assertOpenApiChangedEndpoints(String,String)"]}, "category": "unit", "description": "Tests the comparison of OpenAPI endpoints when the maximum value increases."}, {"name": "issue458MinimumDecreased", "primary_tested": ["TestUtils.assertOpenApiChangedEndpoints(String,String)"], "external_dependencies": {"modules": ["TestUtils"], "project_specific_resources": ["TestUtils.assertOpenApiChangedEndpoints(String,String)"]}, "category": "unit", "description": "Tests the comparison of OpenAPI endpoints when the minimum value decreases."}, {"name": "issue458MinimumIncreased", "primary_tested": ["TestUtils.assertOpenApiChangedEndpoints(String,String)"], "external_dependencies": {"modules": ["TestUtils"], "project_specific_resources": ["TestUtils.assertOpenApiChangedEndpoints(String,String)"]}, "category": "unit", "description": "Tests the comparison of OpenAPI endpoints when the minimum value increases."}, {"name": "issue458IntegerFormatChanged", "primary_tested": ["TestUtils.assertOpenApiChangedEndpoints(String,String)"], "external_dependencies": {"modules": ["TestUtils"], "project_specific_resources": ["TestUtils.assertOpenApiChangedEndpoints(String,String)"]}, "category": "unit", "description": "Tests the comparison of OpenAPI endpoints when the integer format changes."}, {"name": "issue458ExclusiveMinimumChanged", "primary_tested": ["TestUtils.assertOpenApiChangedEndpoints(String,String)"], "external_dependencies": {"modules": ["TestUtils"], "project_specific_resources": ["TestUtils.assertOpenApiChangedEndpoints(String,String)"]}, "category": "unit", "description": "Tests the comparison of OpenAPI endpoints when the exclusive minimum changes."}, {"name": "issue458ExclusiveMaximumChanged", "primary_tested": ["TestUtils.assertOpenApiChangedEndpoints(String,String)"], "external_dependencies": {"modules": ["TestUtils"], "project_specific_resources": ["TestUtils.assertOpenApiChangedEndpoints(String,String)"]}, "category": "unit", "description": "Tests the comparison of OpenAPI endpoints when the exclusive maximum changes."}, {"name": "issue458ExclusiveMinimumRemoved", "primary_tested": ["TestUtils.assertOpenApiChangedEndpoints(String,String)"], "external_dependencies": {"modules": ["TestUtils"], "project_specific_resources": ["TestUtils.assertOpenApiChangedEndpoints(String,String)"]}, "category": "unit", "description": "Tests the comparison of OpenAPI endpoints when the exclusive minimum is removed."}, {"name": "issue458ExclusiveMaximumRemoved", "primary_tested": ["TestUtils.assertOpenApiChangedEndpoints(String,String)"], "external_dependencies": {"modules": ["TestUtils"], "project_specific_resources": ["TestUtils.assertOpenApiChangedEndpoints(String,String)"]}, "category": "unit", "description": "Tests the comparison of OpenAPI endpoints when the exclusive maximum is removed."}, {"name": "issue458ExclusiveMaximumTrueToFalse", "primary_tested": ["TestUtils.assertOpenApiChangedEndpoints(String,String)"], "external_dependencies": {"modules": ["TestUtils"], "project_specific_resources": ["TestUtils.assertOpenApiChangedEndpoints(String,String)"]}, "category": "unit", "description": "Tests the comparison of OpenAPI endpoints when the exclusive maximum changes from true to false."}, {"name": "issue458ExclusiveMinimumTrueToFalse", "primary_tested": ["TestUtils.assertOpenApiChangedEndpoints(String,String)"], "external_dependencies": {"modules": ["TestUtils"], "project_specific_resources": ["TestUtils.assertOpenApiChangedEndpoints(String,String)"]}, "category": "unit", "description": "Tests the comparison of OpenAPI endpoints when the exclusive minimum changes from true to false."}, {"name": "issue458ExclusiveMaximumTrueRemoved", "primary_tested": ["TestUtils.assertOpenApiChangedEndpoints(String,String)"], "external_dependencies": {"modules": ["TestUtils"], "project_specific_resources": ["TestUtils.assertOpenApiChangedEndpoints(String,String)"]}, "category": "unit", "description": "Tests the comparison of OpenAPI endpoints when the exclusive maximum with true value is removed."}, {"name": "issue458ExclusiveMinimumTrueRemoved", "primary_tested": ["TestUtils.assertOpenApiChangedEndpoints(String,String)"], "external_dependencies": {"modules": ["TestUtils"], "project_specific_resources": ["TestUtils.assertOpenApiChangedEndpoints(String,String)"]}, "category": "unit", "description": "Tests the comparison of OpenAPI endpoints when the exclusive minimum with true value is removed."}, {"name": "issue488RenameParameterAddAndRemoveParameterReturnFalse", "primary_tested": ["TestUtils.assertOpenApiChangedEndpoints(String,String)"], "external_dependencies": {"modules": ["TestUtils"], "project_specific_resources": ["TestUtils.assertOpenApiChangedEndpoints(String,String)"]}, "category": "unit", "description": "Tests the comparison of OpenAPI endpoints when a parameter is renamed, added, and removed, expecting a false return."}]}, {"file_path": "src/test/java/org/openapitools/openapidiff/core/OpenApiDiffTest.java", "testclass_name": "OpenApiDiffTest", "dependencies": ["package org.openapitools.openapidiff.core;", "import static org.assertj.core.api.Assertions.assertThat;", "import static org.openapitools.openapidiff.core.TestUtils.assertOpenApiAreEquals;", "import io.swagger.parser.OpenAPIParser;", "import io.swagger.v3.oas.models.OpenAPI;", "import io.swagger.v3.parser.core.models.ParseOptions;", "import java.io.ByteArrayOutputStream;", "import java.io.OutputStreamWriter;", "import java.util.List;", "import org.junit.jupiter.api.Test;", "import org.openapitools.openapidiff.core.model.ChangedOpenApi;", "import org.openapitools.openapidiff.core.model.ChangedOperation;", "import org.openapitools.openapidiff.core.model.DiffResult;", "import org.openapitools.openapidiff.core.model.Endpoint;", "import org.openapitools.openapidiff.core.output.HtmlRender;", "import org.openapitools.openapidiff.core.output.JsonRender;", "import org.openapitools.openapidiff.core.output.MarkdownRender;", "import org.openapitools.openapidiff.core.output.Render;"], "name": "OpenApiDiffTest", "description": "Test suite for comparing OpenAPI specifications and rendering the differences in various formats.", "class_members": {"variables": [{"name": "OPENAPI_DOC1", "type": "final String"}, {"name": "OPENAPI_DOC2", "type": "final String"}, {"name": "OPENAPI_EMPTY_DOC", "type": "final String"}, {"name": "OPENAPI_DOC3", "type": "final String"}, {"name": "PARSER", "type": "static final OpenAPIParser"}], "methods": [{"name": "loadSpecFromFile", "signature": "private static OpenAPI loadSpecFromFile(String specFile)"}]}, "fixtures": [], "test_cases": [{"name": "testEqual", "primary_tested": ["TestUtils.assertOpenApiAreEquals(String,String)"], "external_dependencies": {"modules": ["TestUtils"], "class_members": [{"name": "OPENAPI_DOC2", "type": "variable"}]}, "category": "unit", "description": "Tests that two identical OpenAPI documents are considered equal."}, {"name": "testNewApi", "primary_tested": ["OpenApiCompare.fromLocations(String,String)"], "associated_methods": ["ChangedOpenApi.getNewEndpoints()", "ChangedOpenApi.getMissingEndpoints()", "ChangedOpenApi.getChangedOperations()"], "external_dependencies": {"modules": ["OpenApiCompare", "ChangedOpenApi", "Endpoint", "ChangedOperation", "HtmlRender", "OutputStreamWriter", "ByteArrayOutputStream"], "class_members": [{"name": "OPENAPI_EMPTY_DOC", "type": "variable"}, {"name": "OPENAPI_DOC2", "type": "variable"}], "project_specific_resources": ["TestUtils.assertThat(List<Endpoint>).isNotEmpty()", "TestUtils.assertThat(List<Endpoint>).isEmpty()", "TestUtils.assertThat(List<ChangedOperation>).isEmpty()", "TestUtils.assertThat(String).isNotBlank()"]}, "category": "unit", "description": "Tests the addition of new endpoints in an OpenAPI document."}, {"name": "testDeprecatedApi", "primary_tested": ["OpenApiCompare.fromLocations(String,String)"], "associated_methods": ["ChangedOpenApi.getNewEndpoints()", "ChangedOpenApi.getMissingEndpoints()", "ChangedOpenApi.getChangedOperations()"], "external_dependencies": {"modules": ["OpenApiCompare", "ChangedOpenApi", "Endpoint", "ChangedOperation", "HtmlRender", "OutputStreamWriter", "ByteArrayOutputStream"], "class_members": [{"name": "OPENAPI_DOC1", "type": "variable"}, {"name": "OPENAPI_EMPTY_DOC", "type": "variable"}], "project_specific_resources": ["TestUtils.assertThat(List<Endpoint>).isEmpty()", "TestUtils.assertThat(List<Endpoint>).isNotEmpty()", "TestUtils.assertThat(List<ChangedOperation>).isEmpty()", "TestUtils.assertThat(String).isNotBlank()"]}, "category": "unit", "description": "Tests the deprecation of endpoints in an OpenAPI document."}, {"name": "testDiff", "primary_tested": ["OpenApiCompare.fromLocations(String,String)"], "associated_methods": ["ChangedOpenApi.getChangedOperations()"], "external_dependencies": {"modules": ["OpenApiCompare", "ChangedOpenApi", "ChangedOperation", "HtmlRender", "OutputStreamWriter", "ByteArrayOutputStream"], "class_members": [{"name": "OPENAPI_DOC1", "type": "variable"}, {"name": "OPENAPI_DOC2", "type": "variable"}], "project_specific_resources": ["TestUtils.assertThat(List<ChangedOperation>).isNotEmpty()", "TestUtils.assertThat(String).isNotBlank()"]}, "category": "unit", "description": "Tests the difference between two OpenAPI documents."}, {"name": "testDiffAndMarkdown", "primary_tested": ["OpenApiCompare.fromLocations(String,String)"], "external_dependencies": {"modules": ["OpenApiCompare", "ChangedOpenApi", "MarkdownRender", "OutputStreamWriter", "ByteArrayOutputStream"], "class_members": [{"name": "OPENAPI_DOC1", "type": "variable"}, {"name": "OPENAPI_DOC2", "type": "variable"}], "project_specific_resources": ["TestUtils.assertThat(String).isNotBlank()"]}, "category": "unit", "description": "Tests the difference between two OpenAPI documents and renders the result in Markdown format."}, {"name": "testDiffAndJson", "primary_tested": ["OpenApiCompare.fromLocations(String,String)"], "external_dependencies": {"modules": ["OpenApiCompare", "ChangedOpenApi", "JsonRender", "OutputStreamWriter", "ByteArrayOutputStream"], "class_members": [{"name": "OPENAPI_DOC1", "type": "variable"}, {"name": "OPENAPI_DOC2", "type": "variable"}], "project_specific_resources": ["TestUtils.assertThat(String).isNotBlank()"]}, "category": "unit", "description": "Tests the difference between two OpenAPI documents and renders the result in JSON format."}, {"name": "testComparisonConsistency", "primary_tested": ["OpenApiCompare.fromSpecifications(OpenAPI,OpenAPI)"], "associated_methods": ["ChangedOpenApi.isChanged()", "ChangedOpenApi.getNewEndpoints()", "ChangedOpenApi.getMissingEndpoints()", "ChangedOpenApi.getChangedOperations()"], "external_dependencies": {"modules": ["OpenApiCompare", "ChangedOpenApi", "OpenAPI", "DiffResult"], "class_members": [{"name": "OPENAPI_DOC3", "type": "variable"}], "project_specific_resources": ["TestUtils.assertThat(DiffResult).isEqualTo(DiffResult.NO_CHANGES)", "TestUtils.assertThat(List<Endpoint>).isEmpty()", "TestUtils.assertThat(List<ChangedOperation>).isEmpty()"]}, "category": "unit", "description": "Tests the consistency of OpenAPI comparison results when comparing the same specifications multiple times."}, {"name": "testSpecObjectsAreNotChangesAfterComparison", "primary_tested": ["OpenApiCompare.fromSpecifications(OpenAPI,OpenAPI)"], "associated_methods": ["loadSpecFromFile(String)"], "external_dependencies": {"modules": ["OpenApiCompare", "OpenAPI"], "class_members": [{"name": "OPENAPI_DOC3", "type": "variable"}], "project_specific_resources": ["TestUtils.assertThat(OpenAPI).isEqualTo(OpenAPI)"]}, "category": "unit", "description": "Tests that the OpenAPI specification objects remain unchanged after comparison."}]}, {"file_path": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java", "testclass_name": "NumericRangeBCTest", "dependencies": ["package org.openapitools.openapidiff.core.backcompat;", "import static org.openapitools.openapidiff.core.TestUtils.assertSpecChangedButCompatible;", "import static org.openapitools.openapidiff.core.TestUtils.assertSpecIncompatible;", "import static org.openapitools.openapidiff.core.TestUtils.assertSpecUnchanged;", "import static org.openapitools.openapidiff.core.model.BackwardIncompatibleProp.REQUEST_NUMERIC_RANGE_DECREASED;", "import static org.openapitools.openapidiff.core.model.BackwardIncompatibleProp.RESPONSE_NUMERIC_RANGE_INCREASED;", "import org.junit.jupiter.api.Test;"], "name": "NumericRangeBCTest", "description": "Tests for backward compatibility of numeric range changes in OpenAPI specifications.", "class_members": {"variables": [{"name": "BASE", "type": "final String"}], "methods": [{"name": "assertIncompatibleRequest", "signature": "void assertIncompatibleRequest(String newSpec)"}, {"name": "assertIncompatibleResponse", "signature": "void assertIncompatibleResponse(String newSpec)"}]}, "fixtures": [], "test_cases": [{"name": "unchanged", "primary_tested": ["TestUtils.assertSpecUnchanged(String,String)"], "external_dependencies": {"modules": ["TestUtils"], "class_members": [{"name": "BASE", "type": "variable"}]}, "category": "unit", "description": "Tests that the specification remains unchanged."}, {"name": "changedButCompatible", "primary_tested": ["TestUtils.assertSpecChangedButCompatible(String,String)"], "external_dependencies": {"modules": ["TestUtils"], "class_members": [{"name": "BASE", "type": "variable"}]}, "category": "unit", "description": "Tests that the specification changes but remains compatible."}, {"name": "requestExclusiveMaxCreated", "primary_tested": ["TestUtils.assertSpecIncompatible(String,String,BackwardIncompatibleProp)"], "associated_methods": ["NumericRangeBCTest.assertIncompatibleRequest(String)"], "external_dependencies": {"modules": ["TestUtils", "BackwardIncompatibleProp"], "class_members": [{"name": "BASE", "type": "variable"}, {"name": "assertIncompatibleRequest", "type": "method"}]}, "category": "unit", "description": "Tests that creating an exclusive max in the request makes the specification incompatible."}, {"name": "requestExclusiveMaxSet", "primary_tested": ["TestUtils.assertSpecIncompatible(String,String,BackwardIncompatibleProp)"], "associated_methods": ["NumericRangeBCTest.assertIncompatibleRequest(String)"], "external_dependencies": {"modules": ["TestUtils", "BackwardIncompatibleProp"], "class_members": [{"name": "BASE", "type": "variable"}, {"name": "assertIncompatibleRequest", "type": "method"}]}, "category": "unit", "description": "Tests that setting an exclusive max in the request makes the specification incompatible."}, {"name": "requestExclusiveMinCreated", "primary_tested": ["TestUtils.assertSpecIncompatible(String,String,BackwardIncompatibleProp)"], "associated_methods": ["NumericRangeBCTest.assertIncompatibleRequest(String)"], "external_dependencies": {"modules": ["TestUtils", "BackwardIncompatibleProp"], "class_members": [{"name": "BASE", "type": "variable"}, {"name": "assertIncompatibleRequest", "type": "method"}]}, "category": "unit", "description": "Tests that creating an exclusive min in the request makes the specification incompatible."}, {"name": "requestExclusiveMinSet", "primary_tested": ["TestUtils.assertSpecIncompatible(String,String,BackwardIncompatibleProp)"], "associated_methods": ["NumericRangeBCTest.assertIncompatibleRequest(String)"], "external_dependencies": {"modules": ["TestUtils", "BackwardIncompatibleProp"], "class_members": [{"name": "BASE", "type": "variable"}, {"name": "assertIncompatibleRequest", "type": "method"}]}, "category": "unit", "description": "Tests that setting an exclusive min in the request makes the specification incompatible."}, {"name": "requestMaxAdded", "primary_tested": ["TestUtils.assertSpecIncompatible(String,String,BackwardIncompatibleProp)"], "associated_methods": ["NumericRangeBCTest.assertIncompatibleRequest(String)"], "external_dependencies": {"modules": ["TestUtils", "BackwardIncompatibleProp"], "class_members": [{"name": "BASE", "type": "variable"}, {"name": "assertIncompatibleRequest", "type": "method"}]}, "category": "unit", "description": "Tests that adding a max in the request makes the specification incompatible."}, {"name": "requestMaxDecreased", "primary_tested": ["TestUtils.assertSpecIncompatible(String,String,BackwardIncompatibleProp)"], "associated_methods": ["NumericRangeBCTest.assertIncompatibleRequest(String)"], "external_dependencies": {"modules": ["TestUtils", "BackwardIncompatibleProp"], "class_members": [{"name": "BASE", "type": "variable"}, {"name": "assertIncompatibleRequest", "type": "method"}]}, "category": "unit", "description": "Tests that decreasing the max in the request makes the specification incompatible."}, {"name": "requestMinAdded", "primary_tested": ["TestUtils.assertSpecIncompatible(String,String,BackwardIncompatibleProp)"], "associated_methods": ["NumericRangeBCTest.assertIncompatibleRequest(String)"], "external_dependencies": {"modules": ["TestUtils", "BackwardIncompatibleProp"], "class_members": [{"name": "BASE", "type": "variable"}, {"name": "assertIncompatibleRequest", "type": "method"}]}, "category": "unit", "description": "Tests that adding a min in the request makes the specification incompatible."}, {"name": "requestMinIncreased", "primary_tested": ["TestUtils.assertSpecIncompatible(String,String,BackwardIncompatibleProp)"], "associated_methods": ["NumericRangeBCTest.assertIncompatibleRequest(String)"], "external_dependencies": {"modules": ["TestUtils", "BackwardIncompatibleProp"], "class_members": [{"name": "BASE", "type": "variable"}, {"name": "assertIncompatibleRequest", "type": "method"}]}, "category": "unit", "description": "Tests that increasing the min in the request makes the specification incompatible."}, {"name": "responseExclusiveMaxDeleted", "primary_tested": ["TestUtils.assertSpecIncompatible(String,String,BackwardIncompatibleProp)"], "associated_methods": ["NumericRangeBCTest.assertIncompatibleResponse(String)"], "external_dependencies": {"modules": ["TestUtils", "BackwardIncompatibleProp"], "class_members": [{"name": "BASE", "type": "variable"}, {"name": "assertIncompatibleResponse", "type": "method"}]}, "category": "unit", "description": "Tests that deleting an exclusive max in the response makes the specification incompatible."}, {"name": "responseExclusiveMaxUnset", "primary_tested": ["TestUtils.assertSpecIncompatible(String,String,BackwardIncompatibleProp)"], "associated_methods": ["NumericRangeBCTest.assertIncompatibleResponse(String)"], "external_dependencies": {"modules": ["TestUtils", "BackwardIncompatibleProp"], "class_members": [{"name": "BASE", "type": "variable"}, {"name": "assertIncompatibleResponse", "type": "method"}]}, "category": "unit", "description": "Tests that unsetting an exclusive max in the response makes the specification incompatible."}, {"name": "responseExclusiveMinDeleted", "primary_tested": ["TestUtils.assertSpecIncompatible(String,String,BackwardIncompatibleProp)"], "associated_methods": ["NumericRangeBCTest.assertIncompatibleResponse(String)"], "external_dependencies": {"modules": ["TestUtils", "BackwardIncompatibleProp"], "class_members": [{"name": "BASE", "type": "variable"}, {"name": "assertIncompatibleResponse", "type": "method"}]}, "category": "unit", "description": "Tests that deleting an exclusive min in the response makes the specification incompatible."}, {"name": "responseExclusiveMinUnset", "primary_tested": ["TestUtils.assertSpecIncompatible(String,String,BackwardIncompatibleProp)"], "associated_methods": ["NumericRangeBCTest.assertIncompatibleResponse(String)"], "external_dependencies": {"modules": ["TestUtils", "BackwardIncompatibleProp"], "class_members": [{"name": "BASE", "type": "variable"}, {"name": "assertIncompatibleResponse", "type": "method"}]}, "category": "unit", "description": "Tests that unsetting an exclusive min in the response makes the specification incompatible."}, {"name": "responseMaxDeleted", "primary_tested": ["TestUtils.assertSpecIncompatible(String,String,BackwardIncompatibleProp)"], "associated_methods": ["NumericRangeBCTest.assertIncompatibleResponse(String)"], "external_dependencies": {"modules": ["TestUtils", "BackwardIncompatibleProp"], "class_members": [{"name": "BASE", "type": "variable"}, {"name": "assertIncompatibleResponse", "type": "method"}]}, "category": "unit", "description": "Tests that deleting the max in the response makes the specification incompatible."}, {"name": "responseMaxIncreased", "primary_tested": ["TestUtils.assertSpecIncompatible(String,String,BackwardIncompatibleProp)"], "associated_methods": ["NumericRangeBCTest.assertIncompatibleResponse(String)"], "external_dependencies": {"modules": ["TestUtils", "BackwardIncompatibleProp"], "class_members": [{"name": "BASE", "type": "variable"}, {"name": "assertIncompatibleResponse", "type": "method"}]}, "category": "unit", "description": "Tests that increasing the max in the response makes the specification incompatible."}, {"name": "responseMinDecreased", "primary_tested": ["TestUtils.assertSpecIncompatible(String,String,BackwardIncompatibleProp)"], "associated_methods": ["NumericRangeBCTest.assertIncompatibleResponse(String)"], "external_dependencies": {"modules": ["TestUtils", "BackwardIncompatibleProp"], "class_members": [{"name": "BASE", "type": "variable"}, {"name": "assertIncompatibleResponse", "type": "method"}]}, "category": "unit", "description": "Tests that decreasing the min in the response makes the specification incompatible."}, {"name": "responseMinDeleted", "primary_tested": ["TestUtils.assertSpecIncompatible(String,String,BackwardIncompatibleProp)"], "associated_methods": ["NumericRangeBCTest.assertIncompatibleResponse(String)"], "external_dependencies": {"modules": ["TestUtils", "BackwardIncompatibleProp"], "class_members": [{"name": "BASE", "type": "variable"}, {"name": "assertIncompatibleResponse", "type": "method"}]}, "category": "unit", "description": "Tests that deleting the min in the response makes the specification incompatible."}]}, {"file_path": "src/test/java/org/openapitools/openapidiff/core/output/ConsoleRender_titleTest.java", "testclass_name": "ConsoleRender_titleTest", "dependencies": ["package org.openapitools.openapidiff.core.output;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import org.junit.jupiter.api.Test;"], "name": "ConsoleRender_titleTest", "description": "Unit test for the title rendering functionality of the ConsoleRender class.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testTitle", "primary_tested": ["ConsoleRender.title(String,char)"], "external_dependencies": {"modules": ["ConsoleRender"]}, "category": "unit", "description": "Tests the rendering of a title using the ConsoleRender class."}]}, {"file_path": "src/test/java/org/openapitools/openapidiff/core/output/AsciidocRender_bigTitleTest.java", "testclass_name": "AsciidocRender_bigTitleTest", "dependencies": ["package org.openapitools.openapidiff.core.output;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import org.junit.jupiter.api.Test;"], "name": "AsciidocRender_bigTitleTest", "description": "Unit test for the bigTitle method in AsciidocRender.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testBigTitle", "primary_tested": ["AsciidocRender.bigTitle(String,String)"], "external_dependencies": {"modules": ["AsciidocRender"]}, "category": "unit", "description": "Tests the bigTitle method of AsciidocRender to ensure it formats the title correctly."}]}, {"file_path": "src/test/java/org/openapitools/openapidiff/core/model/ChangedResponse_hashCodeTest.java", "testclass_name": "ChangedResponse_hashCodeTest", "dependencies": ["package org.openapitools.openapidiff.core.model;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import io.swagger.v3.oas.models.responses.ApiResponse;", "import org.junit.jupiter.api.Test;"], "name": "ChangedResponse_hashCodeTest", "description": "Unit tests for the hashCode method in the ChangedResponse class.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testHashCode", "primary_tested": ["ChangedResponse.hashCode()"], "external_dependencies": {"modules": ["ApiResponse", "DiffContext", "ChangedResponse"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the hashCode method of the ChangedResponse class to ensure it produces consistent results for identical instances."}]}, {"file_path": "src/test/java/org/openapitools/openapidiff/core/model/deferred/PendingChanged_whenSetTest.java", "testclass_name": "PendingChanged_whenSetTest", "dependencies": ["package org.openapitools.openapidiff.core.model.deferred;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import java.util.Optional;", "import java.util.function.Consumer;", "import org.junit.jupiter.api.Test;"], "name": "PendingChanged_whenSetTest", "description": "Tests for the behavior of the PendingChanged class when the 'whenSet' method is invoked.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testWhenSet_ValueNotSet", "primary_tested": ["PendingChanged.whenSet(Consumer<Optional<String>>)"], "external_dependencies": {"modules": ["PendingChanged", "Optional", "Consumer"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of the 'whenSet' method when the value is not set."}, {"name": "testWhenSet_ValueAlreadySet", "primary_tested": ["PendingChanged.whenSet(Consumer<Optional<String>>)"], "associated_methods": ["PendingChanged.setValue(Optional<String>)"], "external_dependencies": {"modules": ["PendingChanged", "Optional", "Consumer"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of the 'whenSet' method when the value is already set."}]}, {"file_path": "src/test/java/org/openapitools/openapidiff/core/model/deferred/PendingChanged_setValueTest.java", "testclass_name": "PendingChanged_setValueTest", "dependencies": ["package org.openapitools.openapidiff.core.model.deferred;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.Optional;", "import org.junit.jupiter.api.Test;"], "name": "PendingChanged_setValueTest", "description": "Unit tests for the setValue method in the PendingChanged class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testSetValue_FirstTime", "primary_tested": ["PendingChanged.setValue(Optional<String>)"], "associated_methods": ["PendingChanged.isValueSet()", "PendingChanged.isPresent()", "PendingChanged.get()"], "external_dependencies": {"modules": ["PendingChanged", "Optional"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the setValue method when called for the first time, ensuring the value is set and retrievable."}, {"name": "testSetValue_SecondTime", "primary_tested": ["PendingChanged.setValue(Optional<String>)"], "associated_methods": ["PendingChanged.setValue(Optional<String>)"], "external_dependencies": {"modules": ["PendingChanged", "Optional", "IllegalStateException"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the setValue method when called a second time, expecting an IllegalStateException to be thrown."}]}, {"file_path": "src/test/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilder_buildTest.java", "testclass_name": "DeferredBuilder_buildTest", "dependencies": ["package org.openapitools.openapidiff.core.model.deferred;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.mockito.Mockito.*;", "import java.util.List;", "import java.util.Optional;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.api.extension.ExtendWith;", "import org.mockito.Mock;", "import org.mockito.junit.jupiter.MockitoExtension;"], "name": "DeferredBuilder_buildTest", "description": "Unit tests for the build method of DeferredBuilder.", "class_members": {"variables": [{"name": "builder", "type": "DeferredBuilder<String>"}, {"name": "deferred1", "type": "DeferredChanged<String>"}, {"name": "deferred2", "type": "DeferredChanged<String>"}, {"name": "pendingChanged", "type": "PendingChanged<List<Optional<? super String>>>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testBuildWithEmptyDeferredValues", "primary_tested": ["DeferredBuilder.build()"], "external_dependencies": {"modules": ["DeferredChanged"], "class_members": [{"name": "builder", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the build method of DeferredBuilder when no deferred values are added."}, {"name": "testBuildWithNonEmptyDeferredValues", "primary_tested": ["DeferredBuilder.build()"], "associated_methods": ["DeferredBuilder.add(DeferredChanged<String>)", "DeferredChanged.whenSet(Object)"], "external_dependencies": {"modules": ["DeferredChanged", "PendingChanged", "List", "Optional"], "class_members": [{"name": "builder", "type": "variable"}, {"name": "deferred1", "type": "variable"}, {"name": "deferred2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the build method of DeferredBuilder when deferred values are added."}]}, {"file_path": "src/test/java/org/openapitools/openapidiff/core/model/deferred/PendingChanged_ifPresentTest.java", "testclass_name": "PendingChanged_ifPresentTest", "dependencies": ["package org.openapitools.openapidiff.core.model.deferred;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.Optional;", "import java.util.function.Consumer;", "import org.junit.jupiter.api.Test;"], "name": "PendingChanged_ifPresentTest", "description": "Unit tests for the ifPresent method of the PendingChanged class.", "class_members": {"variables": [{"name": "pendingChanged", "type": "PendingChanged<String>"}, {"name": "result", "type": "StringBuilder"}, {"name": "consumer", "type": "Consumer<String>"}]}, "test_cases": [{"name": "testIfPresent_ValueSetAndPresent", "primary_tested": ["PendingChanged.ifPresent(Consumer<String>)"], "external_dependencies": {"modules": ["PendingChanged", "Optional", "Consumer", "StringBuilder"], "class_members": [{"name": "pendingChanged", "type": "variable"}, {"name": "result", "type": "variable"}, {"name": "consumer", "type": "variable"}]}, "category": "unit", "description": "Tests the ifPresent method when the value is set and present."}, {"name": "testIfPresent_ValueNotSet", "primary_tested": ["PendingChanged.ifPresent(Consumer<String>)"], "external_dependencies": {"modules": ["PendingChanged", "Optional", "Consumer", "StringBuilder"], "class_members": [{"name": "pendingChanged", "type": "variable"}, {"name": "result", "type": "variable"}, {"name": "consumer", "type": "variable"}]}, "category": "unit", "description": "Tests the ifPresent method when the value is not set."}, {"name": "testIfPresent_ValueSetButNotPresent", "primary_tested": ["PendingChanged.ifPresent(Consumer<String>)"], "external_dependencies": {"modules": ["PendingChanged", "Optional", "Consumer", "StringBuilder"], "class_members": [{"name": "pendingChanged", "type": "variable"}, {"name": "result", "type": "variable"}, {"name": "consumer", "type": "variable"}]}, "category": "unit", "description": "Tests the ifPresent method when the value is set but not present."}]}, {"file_path": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOpenApi_isCoreChangedTest.java", "testclass_name": "ChangedOpenApi_isCoreChangedTest", "dependencies": ["package org.openapitools.openapidiff.core.model;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.openapitools.openapidiff.core.model.BackwardIncompatibleProp.OPENAPI_ENDPOINTS_DECREASED;", "import java.util.Collections;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import org.openapitools.openapidiff.core.compare.OpenApiDiffOptions;"], "name": "ChangedOpenApi_isCoreChangedTest", "description": "Tests for the ChangedOpenApi class's isCoreChanged method to determine if the OpenAPI core has changed and the nature of those changes.", "class_members": {"variables": [{"name": "changedOpenApi", "type": "ChangedOpenApi"}, {"name": "options", "type": "OpenApiDiffOptions"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testIsCoreChangedNoChanges", "primary_tested": ["ChangedOpenApi.isCoreChanged()"], "external_dependencies": {"modules": ["ChangedOpenApi", "Collections", "DiffResult"], "class_members": [{"name": "changedOpenApi", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isCoreChanged method when there are no changes to the endpoints."}, {"name": "testIsCoreChangedCompatible", "primary_tested": ["ChangedOpenApi.isCoreChanged()"], "external_dependencies": {"modules": ["ChangedOpenApi", "Collections", "DiffResult", "Endpoint"], "class_members": [{"name": "changedOpenApi", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isCoreChanged method when there are new endpoints but no missing endpoints."}, {"name": "testIsCoreChangedIncompatible", "primary_tested": ["ChangedOpenApi.isCoreChanged()"], "external_dependencies": {"modules": ["ChangedOpenApi", "Collections", "DiffResult", "Endpoint"], "class_members": [{"name": "changedOpenApi", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isCoreChanged method when there are missing endpoints."}, {"name": "testIsCoreChangedIncompatibleWithConfig", "primary_tested": ["ChangedOpenApi.isCoreChanged()"], "associated_methods": ["OpenApiDiffOptions.getConfig()"], "external_dependencies": {"modules": ["ChangedOpenApi", "Collections", "DiffResult", "Endpoint", "OpenApiDiffOptions", "CompositeConfiguration", "BackwardIncompatibleProp"], "class_members": [{"name": "changedOpenApi", "type": "variable"}, {"name": "options", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isCoreChanged method when there are missing endpoints and the configuration is set to consider endpoint decreases as incompatible."}]}, {"file_path": "src/test/java/org/openapitools/openapidiff/core/model/ChangedHeaders_equalsTest.java", "testclass_name": "ChangedHeaders_equalsTest", "dependencies": ["package org.openapitools.openapidiff.core.model;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import io.swagger.v3.oas.models.headers.Header;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.Test;"], "name": "ChangedHeaders_equalsTest", "description": "Unit tests for the equals method in the ChangedHeaders class.", "class_members": {"variables": [{"name": "oldHeaders", "type": "Map<String, Header>"}, {"name": "newHeaders", "type": "Map<String, Header>"}, {"name": "context", "type": "DiffContext"}, {"name": "headers", "type": "ChangedHeaders"}, {"name": "headers1", "type": "ChangedHeaders"}, {"name": "headers2", "type": "ChangedHeaders"}]}, "fixtures": [], "test_cases": [{"name": "testEquals_SameInstance", "primary_tested": ["ChangedHeaders.equals(Object)"], "external_dependencies": {"modules": ["ChangedHeaders", "Map", "Header", "DiffContext"], "class_members": [{"name": "oldHeaders", "type": "variable"}, {"name": "newHeaders", "type": "variable"}, {"name": "context", "type": "variable"}, {"name": "headers", "type": "variable"}]}, "category": "unit", "description": "Tests the equals method when comparing the same instance."}, {"name": "testEquals_DifferentClass", "primary_tested": ["ChangedHeaders.equals(Object)"], "external_dependencies": {"modules": ["ChangedHeaders", "Map", "Header", "DiffContext"], "class_members": [{"name": "oldHeaders", "type": "variable"}, {"name": "newHeaders", "type": "variable"}, {"name": "context", "type": "variable"}, {"name": "headers", "type": "variable"}]}, "category": "unit", "description": "Tests the equals method when comparing with an instance of a different class."}, {"name": "testEquals_NullObject", "primary_tested": ["ChangedHeaders.equals(Object)"], "external_dependencies": {"modules": ["ChangedHeaders", "Map", "Header", "DiffContext"], "class_members": [{"name": "oldHeaders", "type": "variable"}, {"name": "newHeaders", "type": "variable"}, {"name": "context", "type": "variable"}, {"name": "headers", "type": "variable"}]}, "category": "unit", "description": "Tests the equals method when comparing with a null object."}, {"name": "testEquals_DifferentFields", "primary_tested": ["ChangedHeaders.equals(Object)"], "associated_methods": ["ChangedHeaders.setIncreased(Map<String, Header>)", "ChangedHeaders.setMissing(Map<String, Header>)", "ChangedHeaders.setChanged(Map<String, Header>)", "ChangedHeaders.getIncreased()"], "external_dependencies": {"modules": ["ChangedHeaders", "Map", "Header", "DiffContext"], "class_members": [{"name": "oldHeaders1", "type": "variable"}, {"name": "newHeaders1", "type": "variable"}, {"name": "context1", "type": "variable"}, {"name": "headers1", "type": "variable"}, {"name": "oldHeaders2", "type": "variable"}, {"name": "newHeaders2", "type": "variable"}, {"name": "context2", "type": "variable"}, {"name": "headers2", "type": "variable"}]}, "category": "unit", "description": "Tests the equals method when comparing instances with different fields."}, {"name": "testEquals_SameFields", "primary_tested": ["ChangedHeaders.equals(Object)"], "associated_methods": ["ChangedHeaders.setIncreased(Map<String, Header>)", "ChangedHeaders.setMissing(Map<String, Header>)", "ChangedHeaders.setChanged(Map<String, Header>)"], "external_dependencies": {"modules": ["ChangedHeaders", "Map", "Header", "DiffContext"], "class_members": [{"name": "oldHeaders", "type": "variable"}, {"name": "newHeaders", "type": "variable"}, {"name": "context", "type": "variable"}, {"name": "headers1", "type": "variable"}, {"name": "headers2", "type": "variable"}]}, "category": "unit", "description": "Tests the equals method when comparing instances with the same fields."}]}]