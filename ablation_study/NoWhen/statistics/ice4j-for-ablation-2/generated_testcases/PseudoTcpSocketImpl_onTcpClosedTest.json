[{"strategy": "retry", "code": "\npackage org.ice4j.pseudotcp;\n\nimport org.junit.jupiter.api.Test;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class PseudoTcpSocketImpl_onTcpClosedTest {\n\n    @Test\n    public void testOnTcpClosedWithException() {\n        // Given\n        PseudoTcpSocketImpl socketImpl = new PseudoTcpSocketImpl(12345);\n        IOException mockException = mock(IOException.class);\n        PseudoTCPBase mockTcp = mock(PseudoTCPBase.class);\n        socketImpl.pseudoTcp = mockTcp;\n        socketImpl.logger = mock(java.util.logging.Logger.class);\n\n        // When\n        socketImpl.onTcpClosed(mockTcp, mockException);\n\n        // Then\n        verify(socketImpl.logger).log(eq(Level.SEVERE), contains(\"PseudoTcp closed: \"));\n        assertFalse(socketImpl.runReceive);\n        assertFalse(socketImpl.runClock);\n        assertEquals(mockException, socketImpl.exception);\n        verify(mockTcp).close(true);\n    }\n\n    @Test\n    public void testOnTcpClosedWithoutException() {\n        // Given\n        PseudoTcpSocketImpl socketImpl = new PseudoTcpSocketImpl(12345);\n        PseudoTCPBase mockTcp = mock(PseudoTCPBase.class);\n        socketImpl.pseudoTcp = mockTcp;\n        socketImpl.logger = mock(java.util.logging.Logger.class);\n\n        // When\n        socketImpl.onTcpClosed(mockTcp, null);\n\n        // Then\n        verify(socketImpl.logger).log(eq(Level.FINE), eq(\"PseudoTcp closed\"));\n        assertFalse(socketImpl.runReceive);\n        assertFalse(socketImpl.runClock);\n        assertNull(socketImpl.exception);\n        verify(mockTcp).close(true);\n    }\n}\n"}]