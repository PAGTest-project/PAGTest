[{"strategy": "generate", "code": "\npackage org.ice4j.attribute;\n\nimport org.ice4j.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.*;\n\npublic class ConnectionIdAttribute_getDataLengthTest {\n    private ConnectionIdAttribute connectionIdAttribute;\n    private MsgFixture msgFixture;\n\n    @BeforeEach\n    public void setUp() throws Exception {\n        this.connectionIdAttribute = new ConnectionIdAttribute();\n        this.msgFixture = new MsgFixture();\n    }\n\n    @Test\n    public void testGetDataLength() {\n        assertEquals(4, connectionIdAttribute.getDataLength(), \"Data length should be 4 bytes.\");\n    }\n\n    @Test\n    public void testEquals() {\n        ConnectionIdAttribute other = new ConnectionIdAttribute();\n        assertTrue(connectionIdAttribute.equals(other), \"Attributes should be equal.\");\n    }\n\n    @Test\n    public void testEncode() {\n        byte[] encoded = connectionIdAttribute.encode();\n        assertEquals(8, encoded.length, \"Encoded length should be 8 bytes.\");\n    }\n\n    @Test\n    public void testDecodeAttributeBody() throws StunException {\n        byte[] attributeValue = msgFixture.connectionId;\n        char offset = Attribute.HEADER_LENGTH;\n        char length = (char) (attributeValue.length - offset);\n\n        connectionIdAttribute.decodeAttributeBody(attributeValue, offset, length);\n\n        assertEquals(MsgFixture.CONNECTION_ID, connectionIdAttribute.getConnectionIdValue(), \"ConnectionIdAttribute.decode() did not properly decode the connection id field.\");\n    }\n}\n"}]