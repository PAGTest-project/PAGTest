[{"strategy": "generate", "code": "\npackage org.ice4j.pseudotcp.util;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.nio.BufferOverflowException;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ByteFifoBuffer_consumeWriteBufferTest {\n    private ByteFifoBuffer buffer;\n\n    @BeforeEach\n    public void setUp() {\n        buffer = new ByteFifoBuffer(1024);\n    }\n\n    @Test\n    public void testConsumeWriteBufferSuccess() {\n        int count = 512;\n        buffer.consumeWriteBuffer(count);\n        assertEquals(512, buffer.getBuffered());\n        assertEquals(512, buffer.getWriteRemaining());\n    }\n\n    @Test\n    public void testConsumeWriteBufferOverflow() {\n        int count = 1025;\n        assertThrows(BufferOverflowException.class, () -> buffer.consumeWriteBuffer(count));\n    }\n\n    @Test\n    public void testConsumeWriteBufferNegativeCount() {\n        int count = -1;\n        assertThrows(IllegalArgumentException.class, () -> buffer.consumeWriteBuffer(count));\n    }\n\n    @Test\n    public void testConsumeWriteBufferWithWrite() {\n        int writeCount = 512;\n        byte[] data = new byte[writeCount];\n        buffer.write(data, 0, writeCount);\n        assertEquals(512, buffer.getBuffered());\n        assertEquals(512, buffer.getWriteRemaining());\n\n        int consumeCount = 256;\n        buffer.consumeWriteBuffer(consumeCount);\n        assertEquals(768, buffer.getBuffered());\n        assertEquals(256, buffer.getWriteRemaining());\n    }\n\n    @Test\n    public void testConsumeWriteBufferWithWriteAndOverflow() {\n        int writeCount = 512;\n        byte[] data = new byte[writeCount];\n        buffer.write(data, 0, writeCount);\n        assertEquals(512, buffer.getBuffered());\n        assertEquals(512, buffer.getWriteRemaining());\n\n        int consumeCount = 513;\n        assertThrows(BufferOverflowException.class, () -> buffer.consumeWriteBuffer(consumeCount));\n    }\n}\n"}]