[{"strategy": "retry", "code": "\npackage org.ice4j.stack;\n\nimport org.ice4j.TransportAddress;\nimport org.ice4j.socket.StunClientTransaction;\nimport org.ice4j.socket.StunServerTransaction;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\nimport java.util.Hashtable;\n\nimport static org.mockito.Mockito.*;\n\npublic class StunStack_removeSocketTest {\n\n    private StunStack stunStack;\n    private NetAccessManager netAccessManager;\n    private Hashtable<TransactionID, StunClientTransaction> clientTransactions;\n    private Hashtable<TransactionID, StunServerTransaction> serverTransactions;\n\n    @BeforeEach\n    public void setUp() {\n        stunStack = new StunStack();\n        netAccessManager = mock(NetAccessManager.class);\n        clientTransactions = spy(new Hashtable<>());\n        serverTransactions = spy(new Hashtable<>());\n\n        stunStack.clientTransactions = clientTransactions;\n        stunStack.serverTransactions = serverTransactions;\n        stunStack.netAccessManager = netAccessManager;\n    }\n\n    @Test\n    public void testRemoveSocket() {\n        TransportAddress localAddr = new TransportAddress(\"127.0.0.1\", 12345, TransportAddress.Transport.UDP);\n        TransportAddress remoteAddr = new TransportAddress(\"127.0.0.1\", 54321, TransportAddress.Transport.UDP);\n\n        StunClientTransaction clientTransaction = mock(StunClientTransaction.class);\n        StunServerTransaction serverTransaction = mock(StunServerTransaction.class);\n\n        clientTransactions.put(TransactionID.createTransactionID(stunStack, new byte[16]), clientTransaction);\n        serverTransactions.put(TransactionID.createTransactionID(stunStack, new byte[16]), serverTransaction);\n\n        stunStack.removeSocket(localAddr, remoteAddr);\n\n        verify(clientTransactions, times(1)).values();\n        verify(serverTransactions, times(1)).values();\n        verify(netAccessManager, times(1)).removeSocket(localAddr, remoteAddr);\n    }\n}\n"}]