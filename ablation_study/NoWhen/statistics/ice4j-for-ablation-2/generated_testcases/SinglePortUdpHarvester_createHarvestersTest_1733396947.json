[{"strategy": "retry", "code": "\npackage org.ice4j.ice.harvest;\n\nimport org.ice4j.TransportAddress;\nimport org.junit.jupiter.api.Test;\nimport java.io.IOException;\nimport java.util.List;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\npublic class SinglePortUdpHarvester_createHarvestersTest {\n\n    @Test\n    public void testCreateHarvesters_Success() throws IOException {\n        // Given\n        TransportAddress mockAddress = mock(TransportAddress.class);\n        when(AbstractUdpListener.getAllowedAddresses(anyInt())).thenReturn(List.of(mockAddress));\n\n        // When\n        List<SinglePortUdpHarvester> result = SinglePortUdpHarvester.createHarvesters(1234);\n\n        // Then\n        assertEquals(1, result.size());\n        verify(mockAddress, times(1)).getPort();\n    }\n\n    @Test\n    public void testCreateHarvesters_IOException() throws IOException {\n        // Given\n        TransportAddress mockAddress = mock(TransportAddress.class);\n        when(AbstractUdpListener.getAllowedAddresses(anyInt())).thenReturn(List.of(mockAddress));\n        doThrow(new IOException(\"Mocked IOException\")).when(mockAddress).getPort();\n\n        // When\n        List<SinglePortUdpHarvester> result = SinglePortUdpHarvester.createHarvesters(1234);\n\n        // Then\n        assertTrue(result.isEmpty());\n    }\n}\n"}]