[{"strategy": "generate", "code": "\npackage org.ice4j.stack;\n\nimport org.ice4j.*;\nimport org.ice4j.attribute.*;\nimport org.ice4j.message.*;\nimport org.ice4j.security.*;\nimport org.ice4j.socket.*;\nimport org.jitsi.utils.concurrent.*;\nimport javax.crypto.*;\nimport java.io.*;\nimport java.net.*;\nimport java.security.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.logging.*;\n\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.mockito.Mockito;\n\npublic class StunStack_shutDownTest {\n\n    private StunStack stunStack;\n    private EventDispatcher eventDispatcher;\n    private NetAccessManager netAccessManager;\n    private ExpiredServerTransactionsCollector expiredTransactionsCollector;\n    private Hashtable<TransactionID, StunClientTransaction> clientTransactions;\n    private Hashtable<TransactionID, StunServerTransaction> serverTransactions;\n    private StunClientTransaction mockClientTransaction;\n    private StunServerTransaction mockServerTransaction;\n\n    @BeforeEach\n    public void setUp() {\n        eventDispatcher = mock(EventDispatcher.class);\n        netAccessManager = mock(NetAccessManager.class);\n        expiredTransactionsCollector = mock(ExpiredServerTransactionsCollector.class);\n        clientTransactions = new Hashtable<>();\n        serverTransactions = new Hashtable<>();\n        mockClientTransaction = mock(StunClientTransaction.class);\n        mockServerTransaction = mock(StunServerTransaction.class);\n\n        stunStack = new StunStack() {\n            @Override\n            EventDispatcher getEventDispatcher() {\n                return eventDispatcher;\n            }\n\n            @Override\n            NetAccessManager getNetAccessManager() {\n                return netAccessManager;\n            }\n\n            @Override\n            ExpiredServerTransactionsCollector getExpiredTransactionsCollector() {\n                return expiredTransactionsCollector;\n            }\n\n            @Override\n            Hashtable<TransactionID, StunClientTransaction> getClientTransactions() {\n                return clientTransactions;\n            }\n\n            @Override\n            Hashtable<TransactionID, StunServerTransaction> getServerTransactions() {\n                return serverTransactions;\n            }\n        };\n\n        clientTransactions.put(mock(TransactionID.class), mockClientTransaction);\n        serverTransactions.put(mock(TransactionID.class), mockServerTransaction);\n    }\n\n    @Test\n    public void testShutDown() {\n        stunStack.shutDown();\n\n        verify(eventDispatcher).removeAllListeners();\n        verify(expiredTransactionsCollector).cancel();\n        verify(mockClientTransaction).cancel();\n        verify(mockServerTransaction).expire();\n        verify(netAccessManager).stop();\n\n        assertTrue(clientTransactions.isEmpty());\n        assertTrue(serverTransactions.isEmpty());\n    }\n}\n"}]