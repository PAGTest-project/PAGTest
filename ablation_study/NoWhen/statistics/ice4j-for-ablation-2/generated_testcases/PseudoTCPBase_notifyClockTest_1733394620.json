[{"strategy": "generate", "code": "\npackage org.ice4j.pseudotcp;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\npublic class PseudoTCPBase_notifyClockTest {\n\n    @Test\n    public void testNotifyClock_TCP_CLOSED() {\n        PseudoTCPBase pseudoTCPBase = new PseudoTCPBase(null, 12345L);\n        pseudoTCPBase.m_state = PseudoTcpState.TCP_CLOSED;\n\n        pseudoTCPBase.notifyClock(System.currentTimeMillis());\n\n        // No assertions needed as the method should return immediately\n    }\n\n    @Test\n    public void testNotifyClock_RetransmitSegment() {\n        PseudoTCPBase pseudoTCPBase = new PseudoTCPBase(null, 12345L);\n        pseudoTCPBase.m_state = PseudoTcpState.TCP_ESTABLISHED;\n        pseudoTCPBase.m_rto_base = 1000L;\n        pseudoTCPBase.m_rx_rto = 2000L;\n        pseudoTCPBase.m_slist.add(new SSegment(1L, 100, false));\n        Logger logger = mock(Logger.class);\n        pseudoTCPBase.logger = logger;\n\n        long now = System.currentTimeMillis();\n        pseudoTCPBase.notifyClock(now);\n\n        verify(logger).log(eq(Level.FINER), anyString());\n        assertEquals(now, pseudoTCPBase.m_rto_base);\n    }\n\n    @Test\n    public void testNotifyClock_ProbeClosedWindows() {\n        PseudoTCPBase pseudoTCPBase = new PseudoTCPBase(null, 12345L);\n        pseudoTCPBase.m_state = PseudoTcpState.TCP_ESTABLISHED;\n        pseudoTCPBase.m_rto_base = 1000L;\n        pseudoTCPBase.m_rx_rto = 2000L;\n        pseudoTCPBase.m_lastsend = now() - 2000L;\n        pseudoTCPBase.m_lastrecv = now() - 16000L;\n        Logger logger = mock(Logger.class);\n        pseudoTCPBase.logger = logger;\n\n        long now = System.currentTimeMillis();\n        pseudoTCPBase.notifyClock(now);\n\n        verify(logger).log(eq(Level.FINE), anyString());\n        assertEquals(PseudoTcpState.TCP_CLOSED, pseudoTCPBase.m_state);\n    }\n\n    @Test\n    public void testNotifyClock_SendDelayedAcks() {\n        PseudoTCPBase pseudoTCPBase = new PseudoTCPBase(null, 12345L);\n        pseudoTCPBase.m_state = PseudoTcpState.TCP_ESTABLISHED;\n        pseudoTCPBase.m_t_ack = now() - 100L;\n        pseudoTCPBase.m_ack_delay = 100L;\n        Logger logger = mock(Logger.class);\n        pseudoTCPBase.logger = logger;\n\n        long now = System.currentTimeMillis();\n        pseudoTCPBase.notifyClock(now);\n\n        verify(logger).log(eq(Level.FINE), anyString());\n    }\n\n    @Test\n    public void testNotifyClock_IdleTimeout() {\n        PseudoTCPBase pseudoTCPBase = new PseudoTCPBase(null, 12345L);\n        pseudoTCPBase.m_state = PseudoTcpState.TCP_ESTABLISHED;\n        pseudoTCPBase.m_lastrecv = now() - 90000L;\n        Logger logger = mock(Logger.class);\n        pseudoTCPBase.logger = logger;\n\n        long now = System.currentTimeMillis();\n        pseudoTCPBase.notifyClock(now);\n\n        verify(logger).log(eq(Level.FINE), anyString());\n        assertEquals(PseudoTcpState.TCP_CLOSED, pseudoTCPBase.m_state);\n    }\n\n    private long now() {\n        return System.currentTimeMillis();\n    }\n}\n"}]