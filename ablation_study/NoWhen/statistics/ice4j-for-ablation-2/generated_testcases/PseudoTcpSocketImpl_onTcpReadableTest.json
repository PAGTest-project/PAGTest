[{"strategy": "retry", "code": "\npackage org.ice4j.pseudotcp;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.io.*;\nimport java.net.*;\nimport java.util.concurrent.atomic.*;\nimport java.util.logging.*;\nimport org.junit.jupiter.api.*;\n\npublic class PseudoTcpSocketImpl_onTcpReadableTest {\n\n    private PseudoTcpSocketImpl pseudoTcpSocketImpl;\n    private PseudoTCPBase pseudoTcpBase;\n\n    @BeforeEach\n    public void setUp() throws SocketException {\n        pseudoTcpSocketImpl = new PseudoTcpSocketImpl(0);\n        pseudoTcpBase = pseudoTcpSocketImpl.pseudoTcp;\n    }\n\n    @Test\n    public void testOnTcpReadableWithLoggable() {\n        // Given\n        Logger logger = Logger.getLogger(PseudoTcpSocketImpl.class.getName());\n        logger.setLevel(Level.FINER);\n        ByteArrayOutputStream logCapture = new ByteArrayOutputStream();\n        PrintStream originalOut = System.out;\n        System.setOut(new PrintStream(logCapture));\n\n        // When\n        pseudoTcpSocketImpl.onTcpReadable(pseudoTcpBase);\n\n        // Then\n        assertTrue(logCapture.toString().contains(\"TCP READABLE data available for reading: \" + pseudoTcpBase.getAvailable()));\n        System.setOut(originalOut);\n    }\n\n    @Test\n    public void testOnTcpReadableWithoutLoggable() {\n        // Given\n        Logger logger = Logger.getLogger(PseudoTcpSocketImpl.class.getName());\n        logger.setLevel(Level.FINE);\n        ByteArrayOutputStream logCapture = new ByteArrayOutputStream();\n        PrintStream originalOut = System.out;\n        System.setOut(new PrintStream(logCapture));\n\n        // When\n        pseudoTcpSocketImpl.onTcpReadable(pseudoTcpBase);\n\n        // Then\n        assertFalse(logCapture.toString().contains(\"TCP READABLE data available for reading: \" + pseudoTcpBase.getAvailable()));\n        System.setOut(originalOut);\n    }\n\n    @Test\n    public void testOnTcpReadableNotifyAll() throws InterruptedException {\n        // Given\n        AtomicBoolean notified = new AtomicBoolean(false);\n        Thread notifyThread = new Thread(() -> {\n            synchronized (pseudoTcpSocketImpl.read_notify) {\n                try {\n                    pseudoTcpSocketImpl.read_notify.wait();\n                    notified.set(true);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        });\n        notifyThread.start();\n\n        // When\n        pseudoTcpSocketImpl.onTcpReadable(pseudoTcpBase);\n\n        // Then\n        notifyThread.join(1000);\n        assertTrue(notified.get());\n    }\n}\n"}]