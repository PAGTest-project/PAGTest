[{"strategy": "generate", "code": "\npackage org.ice4j.pseudotcp;\n\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\nimport java.io.IOException;\nimport java.net.DatagramSocket;\n\nimport static org.mockito.Mockito.*;\n\npublic class PseudoTcpSocketImpl_closeTest {\n\n    @Test\n    public void testClose_Successful() throws IOException, InterruptedException {\n        // Given\n        PseudoTCPBase pseudoTcp = mock(PseudoTCPBase.class);\n        DatagramSocket socket = mock(DatagramSocket.class);\n        PseudoTcpSocketImpl pseudoTcpSocket = new PseudoTcpSocketImpl(12345, socket) {\n            @Override\n            public void onTcpClosed(PseudoTCPBase tcp, IOException e) {\n                // Mock implementation\n            }\n\n            @Override\n            public void joinAllThreads() throws InterruptedException {\n                // Mock implementation\n            }\n        };\n        pseudoTcpSocket.pseudoTcp = pseudoTcp;\n\n        // When\n        pseudoTcpSocket.close();\n\n        // Then\n        verify(pseudoTcp).close(true);\n        verify(socket).close();\n        verify(pseudoTcpSocket).joinAllThreads();\n    }\n\n    @Test\n    public void testClose_Interrupted() throws IOException, InterruptedException {\n        // Given\n        PseudoTCPBase pseudoTcp = mock(PseudoTCPBase.class);\n        DatagramSocket socket = mock(DatagramSocket.class);\n        PseudoTcpSocketImpl pseudoTcpSocket = new PseudoTcpSocketImpl(12345, socket) {\n            @Override\n            public void onTcpClosed(PseudoTCPBase tcp, IOException e) {\n                // Mock implementation\n            }\n\n            @Override\n            public void joinAllThreads() throws InterruptedException {\n                throw new InterruptedException(\"Mock interruption\");\n            }\n        };\n        pseudoTcpSocket.pseudoTcp = pseudoTcp;\n\n        // When\n        try {\n            pseudoTcpSocket.close();\n        } catch (IOException e) {\n            // Then\n            verify(pseudoTcp).close(true);\n            verify(socket, never()).close();\n            verify(pseudoTcpSocket).joinAllThreads();\n            assert(e.getMessage().equals(\"Closing socket interrupted\"));\n        }\n    }\n}\n"}]