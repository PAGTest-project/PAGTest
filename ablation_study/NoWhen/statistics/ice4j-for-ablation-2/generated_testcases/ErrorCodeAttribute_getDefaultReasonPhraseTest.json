[{"strategy": "generate", "code": "\npackage org.ice4j.attribute;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ErrorCodeAttribute_getDefaultReasonPhraseTest {\n    private ErrorCodeAttribute errorCodeAttribute;\n\n    @BeforeEach\n    public void setUp() {\n        errorCodeAttribute = new ErrorCodeAttribute();\n    }\n\n    @Test\n    public void testGetDefaultReasonPhraseTryAlternate() {\n        assertEquals(\n            \"(Try Alternate): The server would like the client to\"\n            + \" use the server specified in the ALTERNATE-SERVER\"\n            + \" attribute instead.\",\n            ErrorCodeAttribute.getDefaultReasonPhrase(ErrorCodeAttribute.TRY_ALTERNATE)\n        );\n    }\n\n    @Test\n    public void testGetDefaultReasonPhraseBadRequest() {\n        assertEquals(\n            \"(Bad Request): The request was malformed.  The client\"\n            + \" should not retry the request without modification from\"\n            + \" the previous attempt.\",\n            ErrorCodeAttribute.getDefaultReasonPhrase(ErrorCodeAttribute.BAD_REQUEST)\n        );\n    }\n\n    @Test\n    public void testGetDefaultReasonPhraseUnauthorized() {\n        assertEquals(\n            \"(Unauthorized): The Binding Request did not contain\"\n            + \" a MESSAGE-INTEGRITY attribute.\",\n            ErrorCodeAttribute.getDefaultReasonPhrase(ErrorCodeAttribute.UNAUTHORIZED)\n        );\n    }\n\n    @Test\n    public void testGetDefaultReasonPhraseForbidden() {\n        assertEquals(\n            \"(Forbidden): The request was valid but cannot be\"\n            + \" performed due to administrative or similar\"\n            + \" restrictions.\",\n            ErrorCodeAttribute.getDefaultReasonPhrase(ErrorCodeAttribute.FORBIDDEN)\n        );\n    }\n\n    @Test\n    public void testGetDefaultReasonPhraseUnknownAttribute() {\n        assertEquals(\n            \"(Unknown Attribute): The server did not understand\"\n            + \" a mandatory attribute in the request.\",\n            ErrorCodeAttribute.getDefaultReasonPhrase(ErrorCodeAttribute.UNKNOWN_ATTRIBUTE)\n        );\n    }\n\n    @Test\n    public void testGetDefaultReasonPhraseStaleCredentials() {\n        assertEquals(\n            \"(Stale Credentials): The Binding Request did contain\"\n            + \" a MESSAGE-INTEGRITY attribute, but it used a shared\"\n            + \" secret that has expired.\",\n            ErrorCodeAttribute.getDefaultReasonPhrase(ErrorCodeAttribute.STALE_CREDENTIALS)\n        );\n    }\n\n    @Test\n    public void testGetDefaultReasonPhraseIntegrityCheckFailure() {\n        assertEquals(\n            \"(Integrity Check Failure): The Binding Request\"\n            + \" contained a MESSAGE-INTEGRITY attribute, but the HMAC\"\n            + \" failed verification.\",\n            ErrorCodeAttribute.getDefaultReasonPhrase(ErrorCodeAttribute.INTEGRITY_CHECK_FAILURE)\n        );\n    }\n\n    @Test\n    public void testGetDefaultReasonPhraseMissingUsername() {\n        assertEquals(\n            \"(Missing Username): The Binding Request contained\"\n            + \" a MESSAGE-INTEGRITY attribute, but not a USERNAME\"\n            + \" attribute.\",\n            ErrorCodeAttribute.getDefaultReasonPhrase(ErrorCodeAttribute.MISSING_USERNAME)\n        );\n    }\n\n    @Test\n    public void testGetDefaultReasonPhraseUseTLS() {\n        assertEquals(\n            \"(Use TLS): The Shared Secret request has to be sent\"\n            + \" over TLS, but was not received over TLS.\",\n            ErrorCodeAttribute.getDefaultReasonPhrase(ErrorCodeAttribute.USE_TLS)\n        );\n    }\n\n    @Test\n    public void testGetDefaultReasonPhraseAllocationMismatch() {\n        assertEquals(\n            \"(Allocation Mismatch): A request was received by the\"\n            + \" server that requires an allocation to be in place,\"\n            + \" but no allocation exists, or a request was received\"\n            + \" that requires no allocation, but an allocation exists.\",\n            ErrorCodeAttribute.getDefaultReasonPhrase(ErrorCodeAttribute.ALLOCATION_MISMATCH)\n        );\n    }\n\n    @Test\n    public void testGetDefaultReasonPhraseStaleNonce() {\n        assertEquals(\n            \"(Stale Nonce): See the procedures for the long-term\"\n            + \" credential mechanism.\",\n            ErrorCodeAttribute.getDefaultReasonPhrase(ErrorCodeAttribute.STALE_NONCE)\n        );\n    }\n\n    @Test\n    public void testGetDefaultReasonPhraseAddressFamilyNotSupported() {\n        assertEquals(\n            \"(Address Family not Supported):  The server does not\"\n            + \" support the address family requested by the client.\",\n            ErrorCodeAttribute.getDefaultReasonPhrase(ErrorCodeAttribute.ADDRESS_FAMILY_NOT_SUPPORTED)\n        );\n    }\n\n    @Test\n    public void testGetDefaultReasonPhraseWrongCredentials() {\n        assertEquals(\n            \"(Wrong Credentials): The credentials in the\"\n            + \" (non-Allocate) request do not match those used\"\n            + \" to create the allocation.\",\n            ErrorCodeAttribute.getDefaultReasonPhrase(ErrorCodeAttribute.WRONG_CREDENTIALS)\n        );\n    }\n\n    @Test\n    public void testGetDefaultReasonPhraseUnsupportedTransportProtocol() {\n        assertEquals(\n            \"(Unsupported Transport Protocol): The Allocate request\"\n            + \" asked the server to use a transport protocol between\"\n            + \" the server and the peer that the server does not\"\n            + \" support.\",\n            ErrorCodeAttribute.getDefaultReasonPhrase(ErrorCodeAttribute.UNSUPPORTED_TRANSPORT_PROTOCOL)\n        );\n    }\n\n    @Test\n    public void testGetDefaultReasonPhrasePeerAddressFamilyMismatch() {\n        assertEquals(\n            \"Peer Address Family Mismatch):  A peer address was of\"\n            + \" a different address family than that of the relayed\"\n            + \" transport address of the allocation.\",\n            ErrorCodeAttribute.getDefaultReasonPhrase(ErrorCodeAttribute.PEER_ADDRESS_FAMILY_MISMATCH)\n        );\n    }\n\n    @Test\n    public void testGetDefaultReasonPhraseConnectionAlreadyExists() {\n        assertEquals(\n            \"Connection Already Exists\",\n            ErrorCodeAttribute.getDefaultReasonPhrase(ErrorCodeAttribute.CONNECTION_ALREADY_EXISTS)\n        );\n    }\n\n    @Test\n    public void testGetDefaultReasonPhraseConnectionTimeoutOrFailure() {\n        assertEquals(\n            \"Connection Timeout or Failure\",\n            ErrorCodeAttribute.getDefaultReasonPhrase(ErrorCodeAttribute.CONNECTION_TIMEOUT_OR_FAILURE)\n        );\n    }\n\n    @Test\n    public void testGetDefaultReasonPhraseAllocationQuotaReached() {\n        assertEquals(\n            \"(Allocation Quota Reached): No more allocations using\"\n            + \" this username can be created at the present time.\",\n            ErrorCodeAttribute.getDefaultReasonPhrase(ErrorCodeAttribute.ALLOCATION_QUOTA_REACHED)\n        );\n    }\n\n    @Test\n    public void testGetDefaultReasonPhraseServerError() {\n        assertEquals(\n            \"(Server Error): The server has suffered a temporary\"\n            + \" error. The client should try again.\",\n            ErrorCodeAttribute.getDefaultReasonPhrase(ErrorCodeAttribute.SERVER_ERROR)\n        );\n    }\n\n    @Test\n    public void testGetDefaultReasonPhraseInsufficientCapacity() {\n        assertEquals(\n            \"(Insufficient Capacity): The server is unable to carry\"\n            + \" out the request due to some capacity limit being\"\n            + \" reached.\",\n            ErrorCodeAttribute.getDefaultReasonPhrase(ErrorCodeAttribute.INSUFFICIENT_CAPACITY)\n        );\n    }\n\n    @Test\n    public void testGetDefaultReasonPhraseGlobalFailure() {\n        assertEquals(\n            \"(Global Failure:) The server is refusing to fulfill\"\n            + \" the request. The client should not retry.\",\n            ErrorCodeAttribute.getDefaultReasonPhrase(ErrorCodeAttribute.GLOBAL_FAILURE)\n        );\n    }\n\n    @Test\n    public void testGetDefaultReasonPhraseUnknownError() {\n        assertEquals(\n            \"Unknown Error\",\n            ErrorCodeAttribute.getDefaultReasonPhrase((char)999)\n        );\n    }\n}\n"}]