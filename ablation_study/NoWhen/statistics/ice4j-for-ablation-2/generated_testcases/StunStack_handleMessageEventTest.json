[{"strategy": "retry", "code": "\npackage org.ice4j.stack;\n\nimport org.ice4j.*;\nimport org.ice4j.attribute.*;\nimport org.ice4j.message.*;\nimport org.ice4j.security.*;\nimport org.ice4j.socket.*;\nimport org.jitsi.utils.concurrent.*;\nimport javax.crypto.*;\nimport java.io.*;\nimport java.net.*;\nimport java.security.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.logging.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.*;\n\npublic class StunStack_handleMessageEventTest {\n    private StunStack stunStack;\n    private TransportAddress clientAddress;\n    private TransportAddress serverAddress;\n    private Request bindingRequest;\n    private Response bindingResponse;\n    private RequestCollector requestCollector;\n    private ResponseCollector responseCollector;\n\n    @BeforeEach\n    public void setUp() throws Exception {\n        stunStack = new StunStack();\n\n        clientAddress = new TransportAddress(\"127.0.0.1\", 0, Transport.UDP);\n        serverAddress = new TransportAddress(\"127.0.0.1\", 0, Transport.UDP);\n\n        bindingRequest = MessageFactory.createBindingRequest();\n        bindingResponse = MessageFactory.create3489BindingResponse(\n            clientAddress, clientAddress, serverAddress);\n\n        requestCollector = new RequestCollector();\n        responseCollector = new ResponseCollector() {\n            @Override\n            public void addResponse(ResponseEvent evt) {\n                // Dummy implementation\n            }\n        };\n\n        System.setProperty(\n                StackProperties.PROPAGATE_RECEIVED_RETRANSMISSIONS,\n                \"false\");\n        System.setProperty(\n                StackProperties.KEEP_CRANS_AFTER_A_RESPONSE,\n                \"false\");\n        System.setProperty(\n                StackProperties.MAX_CTRAN_RETRANSMISSIONS,\n                \"\");\n        System.setProperty(\n                StackProperties.MAX_CTRAN_RETRANS_TIMER,\n                \"\");\n        System.setProperty(\n                StackProperties.FIRST_CTRAN_RETRANS_AFTER,\n                \"\");\n    }\n\n    @Test\n    public void testHandleMessageEventRequest() throws Exception {\n        stunStack.addRequestListener(serverAddress, requestCollector);\n        stunStack.sendRequest(bindingRequest, serverAddress, clientAddress, responseCollector);\n\n        requestCollector.waitForRequest();\n\n        StunMessageEvent evt = requestCollector.receivedRequests.get(0);\n        byte[] tid = evt.getMessage().getTransactionID();\n        stunStack.sendResponse(tid, bindingResponse, serverAddress, clientAddress);\n\n        responseCollector.waitForResponse();\n\n        assertEquals(1, responseCollector.receivedResponses.size(), \"No response was received\");\n    }\n\n    @Test\n    public void testHandleMessageEventResponse() throws Exception {\n        stunStack.addRequestListener(serverAddress, requestCollector);\n        stunStack.sendRequest(bindingRequest, serverAddress, clientAddress, responseCollector);\n\n        requestCollector.waitForRequest();\n\n        StunMessageEvent evt = requestCollector.receivedRequests.get(0);\n        byte[] tid = evt.getMessage().getTransactionID();\n        stunStack.sendResponse(tid, bindingResponse, serverAddress, clientAddress);\n\n        responseCollector.waitForResponse();\n\n        assertEquals(1, responseCollector.receivedResponses.size(), \"No response was received\");\n    }\n\n    @Test\n    public void testHandleMessageEventIndication() throws Exception {\n        stunStack.addRequestListener(serverAddress, requestCollector);\n        stunStack.sendRequest(bindingRequest, serverAddress, clientAddress, responseCollector);\n\n        requestCollector.waitForRequest();\n\n        StunMessageEvent evt = requestCollector.receivedRequests.get(0);\n        byte[] tid = evt.getMessage().getTransactionID();\n        stunStack.sendResponse(tid, bindingResponse, serverAddress, clientAddress);\n\n        responseCollector.waitForResponse();\n\n        assertEquals(1, responseCollector.receivedResponses.size(), \"No response was received\");\n    }\n}\n"}]