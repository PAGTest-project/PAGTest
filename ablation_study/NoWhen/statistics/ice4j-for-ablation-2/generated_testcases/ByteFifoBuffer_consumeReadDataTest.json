[{"strategy": "retry", "code": "\npackage org.ice4j.pseudotcp.util;\n\nimport java.nio.BufferUnderflowException;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ByteFifoBuffer_consumeReadDataTest {\n    private ByteFifoBuffer buffer;\n\n    @BeforeEach\n    public void setUp() {\n        buffer = new ByteFifoBuffer(1024);\n    }\n\n    @Test\n    public void testConsumeReadDataSuccess() {\n        byte[] data = new byte[512];\n        buffer.write(data, 512);\n        buffer.consumeReadData(256);\n        assertEquals(256, buffer.getBuffered());\n        assertEquals(256, buffer.getReadPos());\n    }\n\n    @Test\n    public void testConsumeReadDataBufferUnderflow() {\n        byte[] data = new byte[512];\n        buffer.write(data, 512);\n        assertThrows(BufferUnderflowException.class, () -> buffer.consumeReadData(1024));\n    }\n\n    @Test\n    public void testConsumeReadDataIllegalArgumentException() {\n        assertThrows(IllegalArgumentException.class, () -> buffer.consumeReadData(-1));\n    }\n\n    @Test\n    public void testConsumeReadDataWrapAround() {\n        byte[] data = new byte[512];\n        buffer.write(data, 512);\n        buffer.consumeReadData(512);\n        assertEquals(0, buffer.getBuffered());\n        assertEquals(0, buffer.getReadPos());\n    }\n\n    @Test\n    public void testConsumeReadDataMultipleConsumptions() {\n        byte[] data = new byte[512];\n        buffer.write(data, 512);\n        buffer.consumeReadData(256);\n        buffer.consumeReadData(256);\n        assertEquals(0, buffer.getBuffered());\n        assertEquals(0, buffer.getReadPos());\n    }\n}\n"}]