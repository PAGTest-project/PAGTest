[{"strategy": "retry", "code": "\npackage org.ice4j.stack;\n\nimport org.ice4j.*;\nimport org.ice4j.message.*;\nimport org.ice4j.socket.*;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.net.*;\n\npublic class StunStack_sendUdpMessageTest {\n    private StunStack stunStack;\n    private TransportAddress localAddress;\n    private TransportAddress remoteAddress;\n    private DatagramSocket dummyServerSocket;\n\n    @BeforeEach\n    public void setUp() throws Exception {\n        stunStack = new StunStack();\n        IceSocketWrapper localSock = new IceUdpSocketWrapper(\n            new SafeCloseDatagramSocket(new InetSocketAddress(\"127.0.0.1\", 0)));\n        localAddress = new TransportAddress(\n            \"127.0.0.1\", localSock.getLocalPort(), Transport.UDP);\n        stunStack.addSocket(localSock);\n\n        dummyServerSocket = new DatagramSocket(new InetSocketAddress(\"127.0.0.1\", 0));\n        remoteAddress = new TransportAddress(\n            \"127.0.0.1\", dummyServerSocket.getLocalPort(), Transport.UDP);\n    }\n\n    @Test\n    public void testSendUdpMessageSuccess() throws Exception {\n        RawMessage udpMessage = RawMessage.build(new byte[]{0x01, 0x02}, 2, remoteAddress, localAddress);\n        TransportAddress sendThrough = localAddress;\n\n        assertDoesNotThrow(() -> stunStack.sendUdpMessage(udpMessage, remoteAddress, sendThrough));\n    }\n\n    @Test\n    public void testSendUdpMessageIllegalArgumentException() {\n        RawMessage udpMessage = RawMessage.build(new byte[]{0x01, 0x02}, 2, remoteAddress, localAddress);\n        TransportAddress invalidAddress = new TransportAddress(\"invalid\", 1234, Transport.UDP);\n\n        Exception exception = assertThrows(StunException.class, () -> {\n            stunStack.sendUdpMessage(udpMessage, invalidAddress, localAddress);\n        });\n\n        assertEquals(StunException.ILLEGAL_ARGUMENT, ((StunException) exception).getID());\n    }\n\n    @Test\n    public void testSendUdpMessageIOException() throws Exception {\n        RawMessage udpMessage = RawMessage.build(new byte[]{0x01, 0x02}, 2, remoteAddress, localAddress);\n        TransportAddress sendThrough = localAddress;\n\n        // Simulate IOException by closing the socket\n        dummyServerSocket.close();\n\n        Exception exception = assertThrows(StunException.class, () -> {\n            stunStack.sendUdpMessage(udpMessage, remoteAddress, sendThrough);\n        });\n\n        assertEquals(StunException.NETWORK_ERROR, ((StunException) exception).getID());\n    }\n}\n"}]