[{"strategy": "generate", "code": "\npackage org.ice4j.stack;\n\nimport org.ice4j.*;\nimport org.ice4j.message.*;\nimport org.ice4j.socket.*;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StunStack_sendIndicationTest {\n    private StunStack stunStack;\n    private TransportAddress clientAddress;\n    private TransportAddress serverAddress;\n    private Indication indication;\n\n    @BeforeEach\n    public void setUp() throws Exception {\n        stunStack = new StunStack();\n\n        clientSock = new IceUdpSocketWrapper(\n            new SafeCloseDatagramSocket(new InetSocketAddress(\"127.0.0.1\", 0)));\n        serverSock = new IceUdpSocketWrapper(\n            new SafeCloseDatagramSocket(new InetSocketAddress(\"127.0.0.1\", 0)));\n\n        clientAddress = new TransportAddress(\"127.0.0.1\", clientSock.getLocalPort(), Transport.UDP);\n        serverAddress = new TransportAddress(\"127.0.0.1\", serverSock.getLocalPort(), Transport.UDP);\n\n        indication = MessageFactory.createBindingIndication();\n    }\n\n    @Test\n    public void testSendIndicationSuccess() throws StunException {\n        stunStack.sendIndication(indication, serverAddress, clientAddress);\n        // No exception thrown, indication sent successfully\n    }\n\n    @Test\n    public void testSendIndicationIllegalArgumentException() {\n        indication.setTransactionID(null);\n        assertThrows(StunException.class, () -> {\n            stunStack.sendIndication(indication, serverAddress, clientAddress);\n        });\n    }\n\n    @Test\n    public void testSendIndicationIOException() {\n        // Simulate IOException by providing an invalid address\n        TransportAddress invalidAddress = new TransportAddress(\"invalid.address\", 12345, Transport.UDP);\n        assertThrows(StunException.class, () -> {\n            stunStack.sendIndication(indication, invalidAddress, clientAddress);\n        });\n    }\n}\n"}]