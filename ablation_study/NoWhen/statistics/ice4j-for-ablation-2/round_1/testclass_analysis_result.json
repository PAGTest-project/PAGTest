[{"file_path": "src/test/java/org/ice4j/message/MessageFactory_createConnectionBindResponseTest.java", "testclass_name": "MessageFactory_createConnectionBindResponseTest", "dependencies": ["package org.ice4j.message;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "MessageFactory_createConnectionBindResponseTest", "description": "Unit test for the creation of a connection bind response using MessageFactory.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testCreateConnectionBindResponse", "primary_tested": ["MessageFactory.createConnectionBindResponse()"], "external_dependencies": {"modules": ["MessageFactory", "Response", "Message"]}, "category": "unit", "description": "Tests the creation of a connection bind response and verifies its message type."}]}, {"file_path": "src/test/java/org/ice4j/message/MessageFactory_createCreatePermissionResponseTest.java", "testclass_name": "MessageFactory_createCreatePermissionResponseTest", "dependencies": ["package org.ice4j.message;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.Test;", "import org.ice4j.message.MessageFactory;", "import org.ice4j.message.Response;"], "name": "MessageFactory_createCreatePermissionResponseTest", "description": "Unit test for the creation of a Create Permission Response using MessageFactory.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testCreateCreatePermissionResponse", "primary_tested": ["MessageFactory.createCreatePermissionResponse()"], "external_dependencies": {"modules": ["MessageFactory", "Response", "Message"]}, "category": "unit", "description": "Tests the creation of a Create Permission Response and verifies its type."}]}, {"file_path": "src/test/java/org/ice4j/message/MessageFactory_createChannelBindResponseTest.java", "testclass_name": "MessageFactory_createChannelBindResponseTest", "dependencies": ["package org.ice4j.message;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "MessageFactory_createChannelBindResponseTest", "description": "Unit test for the creation of a Channel Bind Response using MessageFactory.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testCreateChannelBindResponse", "primary_tested": ["MessageFactory.createChannelBindResponse()"], "external_dependencies": {"modules": ["MessageFactory", "Response", "Message"]}, "category": "unit", "description": "Tests the creation of a Channel Bind Response and verifies its message type."}]}, {"file_path": "src/test/java/org/ice4j/message/MessageFactory_createSharedSecretRequestTest.java", "testclass_name": "MessageFactory_createSharedSecretRequestTest", "dependencies": ["package org.ice4j.message;", "import static org.junit.jupiter.api.Assertions.*;", "import org.ice4j.*;", "import org.ice4j.attribute.*;", "import org.junit.jupiter.api.*;"], "name": "MessageFactory_createSharedSecretRequestTest", "description": "Test for the creation of a Shared Secret Request using MessageFactory.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testCreateSharedSecretRequest", "primary_tested": ["MessageFactory.createSharedSecretRequest()"], "external_dependencies": {"modules": ["UnsupportedOperationException", "MessageFactory"]}, "category": "unit", "description": "Tests the creation of a Shared Secret Request using MessageFactory, expecting an UnsupportedOperationException with a specific message."}]}, {"file_path": "src/test/java/org/ice4j/message/MessageFactory_createSharedSecretErrorResponseTest.java", "testclass_name": "MessageFactory_createSharedSecretErrorResponseTest", "dependencies": ["package org.ice4j.message;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "MessageFactory_createSharedSecretErrorResponseTest", "description": "Test for creating a Shared Secret Error Response using MessageFactory.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testCreateSharedSecretErrorResponse", "primary_tested": ["MessageFactory.createSharedSecretErrorResponse()"], "external_dependencies": {"modules": ["MessageFactory", "UnsupportedOperationException"]}, "category": "unit", "description": "Tests the creation of a Shared Secret Error Response using MessageFactory, expecting an UnsupportedOperationException with a specific message."}]}, {"file_path": "src/test/java/org/ice4j/message/MessageFactory_createSharedSecretResponseTest.java", "testclass_name": "MessageFactory_createSharedSecretResponseTest", "dependencies": ["package org.ice4j.message;", "import static org.junit.jupiter.api.Assertions.*;", "import org.ice4j.*;", "import org.ice4j.attribute.*;", "import org.junit.jupiter.api.*;"], "name": "MessageFactory_createSharedSecretResponseTest", "description": "Test for the creation of a Shared Secret Response using MessageFactory.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testCreateSharedSecretResponse", "primary_tested": ["MessageFactory.createSharedSecretResponse()"], "external_dependencies": {"modules": ["UnsupportedOperationException", "MessageFactory"]}, "category": "unit", "description": "Tests the creation of a Shared Secret Response using MessageFactory, expecting an UnsupportedOperationException with a specific message."}]}, {"file_path": "src/test/java/org/ice4j/message/MessageFactory_createCreatePermissionErrorResponseTest.java", "testclass_name": "MessageFactory_createCreatePermissionErrorResponseTest", "dependencies": ["package org.ice4j.message;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.Test;", "import org.ice4j.message.Response;"], "name": "MessageFactory_createCreatePermissionErrorResponseTest", "description": "Unit test for creating a Create Permission Error Response using MessageFactory.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testCreateCreatePermissionErrorResponse", "primary_tested": ["MessageFactory.createCreatePermissionErrorResponse(char)"], "associated_methods": ["Response.isErrorResponse()"], "external_dependencies": {"modules": ["MessageFactory", "Response"]}, "category": "unit", "description": "Tests the creation of a Create Permission Error Response and verifies its properties."}]}, {"file_path": "src/test/java/org/ice4j/message/MessageFactory_createAllocateRequestTest.java", "testclass_name": "MessageFactory_createAllocateRequestTest", "dependencies": ["package org.ice4j.message;", "import static org.junit.jupiter.api.Assertions.*;", "import org.ice4j.*;", "import org.ice4j.attribute.*;", "import org.junit.jupiter.api.*;"], "name": "MessageFactory_createAllocateRequestTest", "description": "Unit test for the creation of an allocate request using MessageFactory.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testCreateAllocateRequest", "primary_tested": ["MessageFactory.createAllocateRequest()"], "external_dependencies": {"modules": ["Request", "MessageFactory", "Message"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the creation of an allocate request using MessageFactory and verifies the message type."}]}, {"file_path": "src/test/java/org/ice4j/message/MessageFactory_createRefreshRequestTest.java", "testclass_name": "MessageFactory_createRefreshRequestTest", "dependencies": ["package org.ice4j.message;", "import static org.junit.jupiter.api.Assertions.*;", "import org.ice4j.*;", "import org.ice4j.attribute.*;", "import org.junit.jupiter.api.*;"], "name": "MessageFactory_createRefreshRequestTest", "description": "Unit test for the creation of a refresh request using MessageFactory.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testCreateRefreshRequest", "primary_tested": ["MessageFactory.createRefreshRequest()"], "external_dependencies": {"modules": ["Request", "MessageFactory", "Message"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the creation of a refresh request using MessageFactory and verifies the message type."}]}, {"file_path": "src/test/java/org/ice4j/pseudotcp/PseudoTCPBase_segToStrTest.java", "testclass_name": "PseudoTCPBase_segToStrTest", "dependencies": ["package org.ice4j.pseudotcp;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "PseudoTCPBase_segToStrTest", "description": "Unit test for the segToStr method in PseudoTCPBase.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testSegToStr", "primary_tested": ["PseudoTCPBase.segToStr(Segment)"], "external_dependencies": {"modules": ["Segment", "PseudoTCPBase"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the segToStr method of PseudoTCPBase by creating a Segment object and comparing the output string with the expected result."}]}, {"file_path": "src/test/java/org/ice4j/ice/harvest/SinglePortUdpHarvester_isHostHarvesterTest.java", "testclass_name": "SinglePortUdpHarvester_isHostHarvesterTest", "dependencies": ["package org.ice4j.ice.harvest;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;", "import java.io.IOException;"], "name": "SinglePortUdpHarvester_isHostHarvesterTest", "description": "Test for checking if SinglePortUdpHarvester is a host harvester.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testIsHostHarvester", "primary_tested": ["SinglePortUdpHarvester.isHostHarvester()"], "external_dependencies": {"modules": ["SinglePortUdpHarvester", "IOException"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests whether the SinglePortUdpHarvester is identified as a host harvester."}]}, {"file_path": "src/test/java/org/ice4j/message/MessageFactory_createBindingIndicationTest.java", "testclass_name": "MessageFactory_createBindingIndicationTest", "dependencies": ["package org.ice4j.message;", "import static org.junit.jupiter.api.Assertions.*;", "import org.ice4j.*;", "import org.ice4j.attribute.*;", "import org.junit.jupiter.api.*;"], "name": "MessageFactory_createBindingIndicationTest", "description": "Unit test for the creation of a binding indication message using MessageFactory.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testCreateBindingIndication", "primary_tested": ["MessageFactory.createBindingIndication()"], "associated_methods": ["Indication.setMessageType(int)", "Indication.getMessageType()"], "external_dependencies": {"modules": ["Indication", "MessageFactory", "Message"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the creation of a binding indication message and verifies its message type."}]}, {"file_path": "src/test/java/org/ice4j/attribute/ConnectionIdAttribute_getNameTest.java", "testclass_name": "ConnectionIdAttribute_getNameTest", "dependencies": ["package org.ice4j.attribute;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "ConnectionIdAttribute_getNameTest", "description": "Unit tests for the getName method of ConnectionIdAttribute.", "class_members": {"variables": [{"name": "connectionIdAttribute", "type": "ConnectionIdAttribute"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetName", "primary_tested": ["ConnectionIdAttribute.getName()"], "external_dependencies": {"modules": ["ConnectionIdAttribute"], "class_members": [{"name": "connectionIdAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getName functionality of the ConnectionIdAttribute."}]}, {"file_path": "src/test/java/org/ice4j/attribute/RequestedAddressFamilyAttribute_getNameTest.java", "testclass_name": "RequestedAddressFamilyAttribute_getNameTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.*;"], "name": "RequestedAddressFamilyAttribute_getNameTest", "description": "Unit tests for the getName method of RequestedAddressFamilyAttribute.", "class_members": {"variables": [{"name": "requestedAddressFamilyAttribute", "type": "RequestedAddressFamilyAttribute"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetName", "primary_tested": ["RequestedAddressFamilyAttribute.getName()"], "external_dependencies": {"modules": ["RequestedAddressFamilyAttribute"], "class_members": [{"name": "requestedAddressFamilyAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getName functionality of the RequestedAddressFamilyAttribute."}]}, {"file_path": "src/test/java/org/ice4j/pseudotcp/PseudoTcpSocketImpl_getOutputStreamTest.java", "testclass_name": "PseudoTcpSocketImpl_getOutputStreamTest", "dependencies": ["package org.ice4j.pseudotcp;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;", "import java.io.IOException;", "import java.io.OutputStream;"], "name": "PseudoTcpSocketImpl_getOutputStreamTest", "description": "Unit tests for the getOutputStream method of PseudoTcpSocketImpl.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testGetOutputStream_InitialCall", "primary_tested": ["PseudoTcpSocketImpl.getOutputStream()"], "external_dependencies": {"modules": ["PseudoTcpSocketImpl", "OutputStream"]}, "category": "unit", "description": "Tests the initial call to getOutputStream method of PseudoTcpSocketImpl, ensuring it returns a non-null OutputStream instance of PseudoTcpOutputStream."}, {"name": "testGetOutputStream_SubsequentCall", "primary_tested": ["PseudoTcpSocketImpl.getOutputStream()"], "external_dependencies": {"modules": ["PseudoTcpSocketImpl", "OutputStream"]}, "category": "unit", "description": "Tests subsequent calls to getOutputStream method of PseudoTcpSocketImpl, ensuring the same OutputStream instance is returned."}]}, {"file_path": "src/test/java/org/ice4j/pseudotcp/util/ByteFifoBuffer_resetWritePositionTest.java", "testclass_name": "ByteFifoBuffer_resetWritePositionTest", "dependencies": ["package org.ice4j.pseudotcp.util;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.*;"], "name": "ByteFifoBuffer_resetWritePositionTest", "description": "Unit tests for the resetWritePosition method of ByteFifoBuffer.", "class_members": {"variables": [{"name": "byteFifoBuffer", "type": "ByteFifoBuffer"}], "methods": [{"name": "getWData", "signature": "byte[] getWData(int)"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testResetWritePosition", "primary_tested": ["ByteFifoBuffer.resetWritePosition()"], "associated_methods": ["ByteFifoBuffer.write(byte[],int)", "ByteFifoBuffer.consumeWriteBuffer(int)", "ByteFifoBuffer.getBuffered()", "ByteFifoBuffer.getWriteRemaining()"], "external_dependencies": {"modules": ["ByteFifoBuffer"], "class_members": [{"name": "byteFifoBuffer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the resetWritePosition method of ByteFifoBuffer to ensure it correctly resets the write position and updates the buffer state."}]}, {"file_path": "src/test/java/org/ice4j/pseudotcp/PseudoTCPBase_notifyMTUTest.java", "testclass_name": "PseudoTCPBase_notifyMTUTest", "dependencies": ["package org.ice4j.pseudotcp;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;"], "name": "PseudoTCPBase_notifyMTUTest", "description": "Unit tests for the notifyMTU method in the PseudoTCPBase class, covering different states.", "class_members": {"variables": [{"name": "notify", "type": "PseudoTcpNotify"}, {"name": "pseudoTCPBase", "type": "PseudoTCPBase"}]}, "fixtures": [], "test_cases": [{"name": "testNotifyMTU_EstablishedState", "primary_tested": ["PseudoTCPBase.notifyMTU(int)"], "associated_methods": ["PseudoTCPBase.getMTU()"], "external_dependencies": {"modules": ["PseudoTcpNotify", "PseudoTCPBase", "PseudoTcpState"], "class_members": [{"name": "notify", "type": "variable"}, {"name": "pseudoTCPBase", "type": "variable"}]}, "category": "unit", "description": "Tests the notifyMTU method when the state is TCP_ESTABLISHED."}, {"name": "testNotifyMTU_NonEstablishedState", "primary_tested": ["PseudoTCPBase.notifyMTU(int)"], "associated_methods": ["PseudoTCPBase.getMTU()"], "external_dependencies": {"modules": ["PseudoTcpNotify", "PseudoTCPBase", "PseudoTcpState"], "class_members": [{"name": "notify", "type": "variable"}, {"name": "pseudoTCPBase", "type": "variable"}]}, "category": "unit", "description": "Tests the notifyMTU method when the state is TCP_LISTEN."}]}, {"file_path": "src/test/java/org/ice4j/message/MessageFactory_createBindingErrorResponseTest.java", "testclass_name": "MessageFactory_createBindingErrorResponseTest", "dependencies": ["package org.ice4j.message;", "import static org.junit.jupiter.api.Assertions.*;", "import org.ice4j.*;", "import org.ice4j.attribute.*;", "import org.junit.jupiter.api.*;"], "name": "MessageFactory_createBindingErrorResponseTest", "description": "Unit tests for the MessageFactory.createBindingErrorResponse method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testCreateBindingErrorResponse_WithReasonPhrase", "primary_tested": ["MessageFactory.createBindingErrorResponse(char,String)"], "associated_methods": ["Response.setMessageType(char)", "AttributeFactory.createErrorCodeAttribute(char,String)", "Response.putAttribute(Attribute)"], "external_dependencies": {"modules": ["org.ice4j.Response", "org.ice4j.Message", "org.ice4j.attribute.ErrorCodeAttribute", "org.ice4j.attribute.AttributeFactory", "org.ice4j.MessageFactory"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the creation of a Binding Error Response with a reason phrase."}, {"name": "testCreateBindingErrorResponse_WithoutReasonPhrase", "primary_tested": ["MessageFactory.createBindingErrorResponse(char)"], "associated_methods": ["Response.setMessageType(char)", "AttributeFactory.createErrorCodeAttribute(char)", "Response.putAttribute(Attribute)"], "external_dependencies": {"modules": ["org.ice4j.Response", "org.ice4j.Message", "org.ice4j.attribute.ErrorCodeAttribute", "org.ice4j.attribute.AttributeFactory", "org.ice4j.MessageFactory"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the creation of a Binding Error Response without a reason phrase."}]}, {"file_path": "src/test/java/org/ice4j/message/MessageFactory_createBindingRequestTest.java", "testclass_name": "MessageFactory_createBindingRequestTest", "dependencies": ["package org.ice4j.message;", "import static org.junit.jupiter.api.Assertions.*;", "import org.ice4j.*;", "import org.ice4j.attribute.*;", "import org.junit.jupiter.api.*;"], "name": "MessageFactory_createBindingRequestTest", "description": "Unit tests for the creation of Binding Request messages using the MessageFactory.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testCreateBindingRequest", "primary_tested": ["MessageFactory.createBindingRequest()"], "external_dependencies": {"modules": ["MessageFactory", "Request", "Message"]}, "category": "unit", "description": "Tests the creation of a Binding Request message and verifies its type."}, {"name": "testCreateBindingRequestWithPriority", "primary_tested": ["MessageFactory.createBindingRequest(long)"], "associated_methods": ["Request.getAttribute(int)"], "external_dependencies": {"modules": ["MessageFactory", "Request", "Message", "PriorityAttribute", "Attribute"]}, "category": "unit", "description": "Tests the creation of a Binding Request message with a priority attribute and verifies its type and priority value."}, {"name": "testCreateBindingRequestWithPriorityAndControlling", "primary_tested": ["MessageFactory.createBindingRequest(long,boolean,long)"], "associated_methods": ["Request.getAttribute(int)"], "external_dependencies": {"modules": ["MessageFactory", "Request", "Message", "PriorityAttribute", "IceControllingAttribute", "Attribute"]}, "category": "unit", "description": "Tests the creation of a Binding Request message with priority and controlling attributes and verifies its type, priority value, and tie breaker."}, {"name": "testCreateBindingRequestWithPriorityAndControlled", "primary_tested": ["MessageFactory.createBindingRequest(long,boolean,long)"], "associated_methods": ["Request.getAttribute(int)"], "external_dependencies": {"modules": ["MessageFactory", "Request", "Message", "PriorityAttribute", "IceControlledAttribute", "Attribute"]}, "category": "unit", "description": "Tests the creation of a Binding Request message with priority and controlled attributes and verifies its type, priority value, and tie breaker."}]}, {"file_path": "src/test/java/org/ice4j/attribute/UnknownAttributesAttribute_addAttributeIDTest.java", "testclass_name": "UnknownAttributesAttribute_addAttributeIDTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.*;"], "name": "UnknownAttributesAttribute_addAttributeIDTest", "description": "Unit tests for the addAttributeID method of the UnknownAttributesAttribute class.", "class_members": {"variables": [{"name": "unknownAttributesAttribute", "type": "UnknownAttributesAttribute"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAddAttributeID_NewAttribute", "primary_tested": ["UnknownAttributesAttribute.addAttributeID(char)"], "associated_methods": ["UnknownAttributesAttribute.contains(char)", "UnknownAttributesAttribute.getAttributeCount()"], "external_dependencies": {"modules": ["UnknownAttributesAttribute"], "class_members": [{"name": "unknownAttributesAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addition of a new attribute ID to the UnknownAttributesAttribute."}, {"name": "testAddAttributeID_DuplicateAttribute", "primary_tested": ["UnknownAttributesAttribute.addAttributeID(char)"], "associated_methods": ["UnknownAttributesAttribute.contains(char)", "UnknownAttributesAttribute.getAttributeCount()"], "external_dependencies": {"modules": ["UnknownAttributesAttribute"], "class_members": [{"name": "unknownAttributesAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addition of a duplicate attribute ID to the UnknownAttributesAttribute."}, {"name": "testAddAttributeID_MultipleAttributes", "primary_tested": ["UnknownAttributesAttribute.addAttributeID(char)"], "associated_methods": ["UnknownAttributesAttribute.contains(char)", "UnknownAttributesAttribute.getAttributeCount()"], "external_dependencies": {"modules": ["UnknownAttributesAttribute"], "class_members": [{"name": "unknownAttributesAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addition of multiple attribute IDs to the UnknownAttributesAttribute."}]}, {"file_path": "src/test/java/org/ice4j/attribute/ErrorCodeAttribute_getDataLengthTest.java", "testclass_name": "ErrorCodeAttribute_getDataLengthTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.*;"], "name": "ErrorCodeAttribute_getDataLengthTest", "description": "Unit tests for the getDataLength method of the ErrorCodeAttribute class.", "class_members": {"variables": [{"name": "errorCodeAttribute", "type": "ErrorCodeAttribute"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetDataLengthWithNullReasonPhrase", "primary_tested": ["ErrorCodeAttribute.getDataLength()"], "associated_methods": ["ErrorCodeAttribute.setErrorClass(byte)", "ErrorCodeAttribute.setErrorNumber(byte)"], "external_dependencies": {"modules": ["ErrorCodeAttribute"], "class_members": [{"name": "errorCodeAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getDataLength method when the reason phrase is null."}, {"name": "testGetDataLengthWithReasonPhrase", "primary_tested": ["ErrorCodeAttribute.getDataLength()"], "associated_methods": ["ErrorCodeAttribute.setErrorClass(byte)", "ErrorCodeAttribute.setErrorNumber(byte)", "ErrorCodeAttribute.setReasonPhrase(String)"], "external_dependencies": {"modules": ["ErrorCodeAttribute"], "class_members": [{"name": "errorCodeAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getDataLength method when the reason phrase is non-null."}, {"name": "testGetDataLengthWithEmptyReasonPhrase", "primary_tested": ["ErrorCodeAttribute.getDataLength()"], "associated_methods": ["ErrorCodeAttribute.setErrorClass(byte)", "ErrorCodeAttribute.setErrorNumber(byte)", "ErrorCodeAttribute.setReasonPhrase(String)"], "external_dependencies": {"modules": ["ErrorCodeAttribute"], "class_members": [{"name": "errorCodeAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getDataLength method when the reason phrase is empty."}]}, {"file_path": "src/test/java/org/ice4j/attribute/ErrorCodeAttribute_getNameTest.java", "testclass_name": "ErrorCodeAttribute_getNameTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.*;"], "name": "ErrorCodeAttribute_getNameTest", "description": "Unit tests for the getName method of the ErrorCodeAttribute class.", "class_members": {"variables": [{"name": "errorCodeAttribute", "type": "ErrorCodeAttribute"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetName", "primary_tested": ["ErrorCodeAttribute.getName()"], "external_dependencies": {"modules": ["ErrorCodeAttribute"], "class_members": [{"name": "errorCodeAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getName method of ErrorCodeAttribute without any modifications."}, {"name": "testGetNameWithSetErrorCode", "primary_tested": ["ErrorCodeAttribute.getName()"], "associated_methods": ["ErrorCodeAttribute.setErrorCode(char)"], "external_dependencies": {"modules": ["ErrorCodeAttribute"], "class_members": [{"name": "errorCodeAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getName method of ErrorCodeAttribute after setting an error code."}, {"name": "testGetNameWithSetReasonPhrase", "primary_tested": ["ErrorCodeAttribute.getName()"], "associated_methods": ["ErrorCodeAttribute.setReasonPhrase(String)"], "external_dependencies": {"modules": ["ErrorCodeAttribute"], "class_members": [{"name": "errorCodeAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getName method of ErrorCodeAttribute after setting a reason phrase."}, {"name": "testGetNameWithSetErrorCodeAndReasonPhrase", "primary_tested": ["ErrorCodeAttribute.getName()"], "associated_methods": ["ErrorCodeAttribute.setErrorCode(char)", "ErrorCodeAttribute.setReasonPhrase(String)"], "external_dependencies": {"modules": ["ErrorCodeAttribute"], "class_members": [{"name": "errorCodeAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getName method of ErrorCodeAttribute after setting both an error code and a reason phrase."}]}, {"file_path": "src/test/java/org/ice4j/attribute/ConnectionIdAttribute_equalsTest.java", "testclass_name": "ConnectionIdAttribute_equalsTest", "dependencies": ["package org.ice4j.attribute;", "import org.ice4j.*;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.*;"], "name": "ConnectionIdAttribute_equalsTest", "description": "Unit tests for the equals method of the ConnectionIdAttribute class.", "class_members": {"variables": [{"name": "connectionIdAttribute", "type": "ConnectionIdAttribute"}, {"name": "msgFixture", "type": "MsgFixture"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEquals_SameObject", "primary_tested": ["ConnectionIdAttribute.equals(Object)"], "external_dependencies": {"modules": ["ConnectionIdAttribute"], "class_members": [{"name": "connectionIdAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with the same object."}, {"name": "testEquals_DifferentClass", "primary_tested": ["ConnectionIdAttribute.equals(Object)"], "external_dependencies": {"modules": ["ConnectionIdAttribute"], "class_members": [{"name": "connectionIdAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with an object of a different class."}, {"name": "testEquals_DifferentConnectionIdValue", "primary_tested": ["ConnectionIdAttribute.equals(Object)"], "associated_methods": ["ConnectionIdAttribute.setConnectionIdValue(int)"], "external_dependencies": {"modules": ["ConnectionIdAttribute", "StunException"], "class_members": [{"name": "connectionIdAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with different connection ID values."}, {"name": "testEquals_SameConnectionIdValue", "primary_tested": ["ConnectionIdAttribute.equals(Object)"], "associated_methods": ["ConnectionIdAttribute.setConnectionIdValue(int)"], "external_dependencies": {"modules": ["ConnectionIdAttribute", "StunException"], "class_members": [{"name": "connectionIdAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with the same connection ID value."}]}, {"file_path": "src/test/java/org/ice4j/attribute/ErrorCodeAttribute_setErrorClassTest.java", "testclass_name": "ErrorCodeAttribute_setErrorClassTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.*;"], "name": "ErrorCodeAttribute_setErrorClassTest", "description": "Unit tests for the setErrorClass method of the ErrorCodeAttribute class.", "class_members": {"variables": [{"name": "errorCodeAttribute", "type": "ErrorCodeAttribute"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testSetErrorClassValid", "primary_tested": ["ErrorCodeAttribute.setErrorClass(byte)"], "associated_methods": ["ErrorCodeAttribute.getErrorClass()"], "external_dependencies": {"modules": ["ErrorCodeAttribute"], "class_members": [{"name": "errorCodeAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the setErrorClass method with a valid error class."}, {"name": "testSetErrorClassInvalid", "primary_tested": ["ErrorCodeAttribute.setErrorClass(byte)"], "associated_methods": ["ErrorCodeAttribute.getErrorClass()"], "external_dependencies": {"modules": ["ErrorCodeAttribute"], "class_members": [{"name": "errorCodeAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the setErrorClass method with an invalid error class, expecting an IllegalArgumentException."}, {"name": "testSetErrorClassBoundaryLower", "primary_tested": ["ErrorCodeAttribute.setErrorClass(byte)"], "associated_methods": ["ErrorCodeAttribute.getErrorClass()"], "external_dependencies": {"modules": ["ErrorCodeAttribute"], "class_members": [{"name": "errorCodeAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the setErrorClass method with the lower boundary value of 0."}, {"name": "testSetErrorClassBoundaryUpper", "primary_tested": ["ErrorCodeAttribute.setErrorClass(byte)"], "associated_methods": ["ErrorCodeAttribute.getErrorClass()"], "external_dependencies": {"modules": ["ErrorCodeAttribute"], "class_members": [{"name": "errorCodeAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the setErrorClass method with the upper boundary value of 99."}]}, {"file_path": "src/test/java/org/ice4j/attribute/UnknownAttributesAttribute_getDataLengthTest.java", "testclass_name": "UnknownAttributesAttribute_getDataLengthTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.*;"], "name": "UnknownAttributesAttribute_getDataLengthTest", "description": "Unit tests for the getDataLength method of the UnknownAttributesAttribute class.", "class_members": {"variables": [{"name": "unknownAttributesAttribute", "type": "UnknownAttributesAttribute"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetDataLengthEvenAttributes", "primary_tested": ["UnknownAttributesAttribute.getDataLength()"], "associated_methods": ["UnknownAttributesAttribute.addAttributeID(char)"], "external_dependencies": {"modules": ["UnknownAttributesAttribute"], "class_members": [{"name": "unknownAttributesAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getDataLength method when there are even number of attributes."}, {"name": "testGetDataLengthOddAttributes", "primary_tested": ["UnknownAttributesAttribute.getDataLength()"], "associated_methods": ["UnknownAttributesAttribute.addAttributeID(char)"], "external_dependencies": {"modules": ["UnknownAttributesAttribute"], "class_members": [{"name": "unknownAttributesAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getDataLength method when there are odd number of attributes."}, {"name": "testGetDataLengthNoAttributes", "primary_tested": ["UnknownAttributesAttribute.getDataLength()"], "external_dependencies": {"modules": ["UnknownAttributesAttribute"], "class_members": [{"name": "unknownAttributesAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getDataLength method when there are no attributes."}, {"name": "testGetDataLengthSingleAttribute", "primary_tested": ["UnknownAttributesAttribute.getDataLength()"], "associated_methods": ["UnknownAttributesAttribute.addAttributeID(char)"], "external_dependencies": {"modules": ["UnknownAttributesAttribute"], "class_members": [{"name": "unknownAttributesAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getDataLength method when there is a single attribute."}]}, {"file_path": "src/test/java/org/ice4j/attribute/ConnectionIdAttribute_getDataLengthTest.java", "testclass_name": "ConnectionIdAttribute_getDataLengthTest", "dependencies": ["package org.ice4j.attribute;", "import org.ice4j.*;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.*;"], "name": "ConnectionIdAttribute_getDataLengthTest", "description": "Unit tests for the ConnectionIdAttribute class, focusing on methods like getDataLength, equals, encode, and decodeAttributeBody.", "class_members": {"variables": [{"name": "connectionIdAttribute", "type": "ConnectionIdAttribute"}, {"name": "msgFixture", "type": "MsgFixture"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetDataLength", "primary_tested": ["ConnectionIdAttribute.getDataLength()"], "external_dependencies": {"modules": ["ConnectionIdAttribute"], "class_members": [{"name": "connectionIdAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getDataLength method of ConnectionIdAttribute to ensure it returns the correct data length."}, {"name": "testEquals", "primary_tested": ["ConnectionIdAttribute.equals(Object)"], "external_dependencies": {"modules": ["ConnectionIdAttribute"], "class_members": [{"name": "connectionIdAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method of ConnectionIdAttribute to ensure it correctly identifies equal attributes."}, {"name": "testEncode", "primary_tested": ["ConnectionIdAttribute.encode()"], "external_dependencies": {"modules": ["ConnectionIdAttribute"], "class_members": [{"name": "connectionIdAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the encode method of ConnectionIdAttribute to ensure it correctly encodes the attribute."}, {"name": "testDecodeAttributeBody", "primary_tested": ["ConnectionIdAttribute.decodeAttributeBody(byte[],char,char)"], "associated_methods": ["ConnectionIdAttribute.getConnectionIdValue()"], "external_dependencies": {"modules": ["ConnectionIdAttribute", "MsgFixture", "Attribute", "StunException"], "class_members": [{"name": "connectionIdAttribute", "type": "variable"}, {"name": "msgFixture", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the decodeAttributeBody method of ConnectionIdAttribute to ensure it correctly decodes the attribute body."}]}, {"file_path": "src/test/java/org/ice4j/attribute/RequestedAddressFamilyAttribute_setFamilyTest.java", "testclass_name": "RequestedAddressFamilyAttribute_setFamilyTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import org.ice4j.*;", "import org.junit.jupiter.api.*;"], "name": "RequestedAddressFamilyAttribute_setFamilyTest", "description": "Unit tests for the setFamily method of the RequestedAddressFamilyAttribute class.", "class_members": {"variables": [{"name": "requestedAddressFamilyAttribute", "type": "RequestedAddressFamilyAttribute"}, {"name": "msgFixture", "type": "MsgFixture"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testSetFamilyIPv4", "primary_tested": ["RequestedAddressFamilyAttribute.setFamily(char)"], "associated_methods": ["RequestedAddressFamilyAttribute.getFamily()"], "external_dependencies": {"modules": ["RequestedAddressFamilyAttribute"], "class_members": [{"name": "requestedAddressFamilyAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests setting the family to IPv4 and verifies the family value."}, {"name": "testSetFamilyIPv6", "primary_tested": ["RequestedAddressFamilyAttribute.setFamily(char)"], "associated_methods": ["RequestedAddressFamilyAttribute.getFamily()"], "external_dependencies": {"modules": ["RequestedAddressFamilyAttribute"], "class_members": [{"name": "requestedAddressFamilyAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests setting the family to IPv6 and verifies the family value."}, {"name": "testSetFamilyInvalid", "primary_tested": ["RequestedAddressFamilyAttribute.setFamily(char)"], "associated_methods": ["RequestedAddressFamilyAttribute.getFamily()"], "external_dependencies": {"modules": ["RequestedAddressFamilyAttribute"], "class_members": [{"name": "requestedAddressFamilyAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests setting an invalid family value and verifies that the family remains unchanged."}, {"name": "testEqualsAfterSetFamily", "primary_tested": ["RequestedAddressFamilyAttribute.setFamily(char)"], "associated_methods": ["RequestedAddressFamilyAttribute.getFamily()", "RequestedAddressFamilyAttribute.equals(Object)"], "external_dependencies": {"modules": ["RequestedAddressFamilyAttribute"], "class_members": [{"name": "requestedAddressFamilyAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method after setting different family values and verifies the equality of the attributes."}]}, {"file_path": "src/test/java/org/ice4j/attribute/ErrorCodeAttribute_getReasonPhraseTest.java", "testclass_name": "ErrorCodeAttribute_getReasonPhraseTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.*;"], "name": "ErrorCodeAttribute_getReasonPhraseTest", "description": "Unit tests for the getReasonPhrase method of the ErrorCodeAttribute class.", "class_members": {"variables": [{"name": "errorCodeAttribute", "type": "ErrorCodeAttribute"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetReasonPhraseWithNullReasonPhrase", "primary_tested": ["ErrorCodeAttribute.getReasonPhrase()"], "external_dependencies": {"modules": ["ErrorCodeAttribute"], "class_members": [{"name": "errorCodeAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the reason phrase is null when not set."}, {"name": "testGetReasonPhraseWithSetReasonPhrase", "primary_tested": ["ErrorCodeAttribute.getReasonPhrase()"], "associated_methods": ["ErrorCodeAttribute.setReasonPhrase(String)"], "external_dependencies": {"modules": ["ErrorCodeAttribute"], "class_members": [{"name": "errorCodeAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the reason phrase matches the set value."}, {"name": "testGetReasonPhraseAfterSettingErrorCode", "primary_tested": ["ErrorCodeAttribute.getReasonPhrase()"], "associated_methods": ["ErrorCodeAttribute.setErrorCode(char)", "ErrorCodeAttribute.setReasonPhrase(String)"], "external_dependencies": {"modules": ["ErrorCodeAttribute"], "class_members": [{"name": "errorCodeAttribute", "type": "variable"}], "project_specific_resources": ["ErrorCodeAttribute.getDefaultReasonPhrase(char)"]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the reason phrase matches the default reason phrase for the error code."}, {"name": "testGetReasonPhraseAfterOverridingWithSetReasonPhrase", "primary_tested": ["ErrorCodeAttribute.getReasonPhrase()"], "associated_methods": ["ErrorCodeAttribute.setErrorCode(char)", "ErrorCodeAttribute.setReasonPhrase(String)"], "external_dependencies": {"modules": ["ErrorCodeAttribute"], "class_members": [{"name": "errorCodeAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the reason phrase matches the custom set value after overriding the default."}]}, {"file_path": "src/test/java/org/ice4j/attribute/XorOnlyAttribute_equalsTest.java", "testclass_name": "XorOnlyAttribute_equalsTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.*;"], "name": "XorOnlyAttribute_equalsTest", "description": "Unit tests for the equals method of the XorOnlyAttribute class.", "class_members": {"variables": [{"name": "xorOnly", "type": "XorOnlyAttribute"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEquals_SameInstance", "primary_tested": ["XorOnlyAttribute.equals(Object)"], "external_dependencies": {"modules": ["XorOnlyAttribute"], "class_members": [{"name": "xorOnly", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with the same instance."}, {"name": "testEquals_DifferentType", "primary_tested": ["XorOnlyAttribute.equals(Object)"], "external_dependencies": {"modules": ["XorOnlyAttribute"], "class_members": [{"name": "xorOnly", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with a different type."}, {"name": "testEquals_DifferentAttributeType", "primary_tested": ["XorOnlyAttribute.equals(Object)"], "external_dependencies": {"modules": ["XorOnlyAttribute"], "class_members": [{"name": "xorOnly", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with a different attribute type."}, {"name": "testEquals_DifferentDataLength", "primary_tested": ["XorOnlyAttribute.equals(Object)"], "external_dependencies": {"modules": ["XorOnlyAttribute"], "class_members": [{"name": "xorOnly", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with a different data length."}, {"name": "testEquals_SameAttributes", "primary_tested": ["XorOnlyAttribute.equals(Object)"], "external_dependencies": {"modules": ["XorOnlyAttribute"], "class_members": [{"name": "xorOnly", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with the same attributes."}]}, {"file_path": "src/test/java/org/ice4j/attribute/OptionalAttribute_equalsTest.java", "testclass_name": "OptionalAttribute_equalsTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import org.ice4j.*;", "import org.junit.jupiter.api.*;"], "name": "OptionalAttribute_equalsTest", "description": "Unit tests for the equals method of the OptionalAttribute class.", "class_members": {"variables": [{"name": "optionalAttribute", "type": "OptionalAttribute"}, {"name": "msgFixture", "type": "MsgFixture"}, {"name": "expectedAttributeValue", "type": "byte[]"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEquals_SameObject", "primary_tested": ["OptionalAttribute.equals(Object)"], "external_dependencies": {"modules": ["OptionalAttribute"], "class_members": [{"name": "optionalAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that an object is equal to itself."}, {"name": "testEquals_DifferentClass", "primary_tested": ["OptionalAttribute.equals(Object)"], "external_dependencies": {"modules": ["OptionalAttribute"], "class_members": [{"name": "optionalAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that an OptionalAttribute is not equal to an object of a different class."}, {"name": "testEquals_DifferentAttributeValue", "primary_tested": ["OptionalAttribute.equals(Object)"], "associated_methods": ["OptionalAttribute.decodeAttributeBody(byte[],char,char)", "OptionalAttribute.setBody(byte[],int,int)"], "external_dependencies": {"modules": ["OptionalAttribute", "StunException"], "class_members": [{"name": "optionalAttribute", "type": "variable"}, {"name": "msgFixture", "type": "variable"}, {"name": "expectedAttributeValue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that OptionalAttributes with different attributeValues are not equal."}, {"name": "testEquals_SameAttributeValue", "primary_tested": ["OptionalAttribute.equals(Object)"], "associated_methods": ["OptionalAttribute.decodeAttributeBody(byte[],char,char)"], "external_dependencies": {"modules": ["OptionalAttribute", "StunException"], "class_members": [{"name": "optionalAttribute", "type": "variable"}, {"name": "msgFixture", "type": "variable"}, {"name": "expectedAttributeValue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that OptionalAttributes with the same attributeValues are equal."}]}, {"file_path": "src/test/java/org/ice4j/attribute/ChangeRequestAttribute_equalsTest.java", "testclass_name": "ChangeRequestAttribute_equalsTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.*;"], "name": "ChangeRequestAttribute_equalsTest", "description": "Unit tests for the equals method of the ChangeRequestAttribute class.", "class_members": {"variables": [{"name": "changeRequestAttribute", "type": "ChangeRequestAttribute"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEquals_SameObject", "primary_tested": ["ChangeRequestAttribute.equals(Object)"], "external_dependencies": {"modules": ["ChangeRequestAttribute"], "class_members": [{"name": "changeRequestAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with the same object."}, {"name": "testEquals_DifferentClass", "primary_tested": ["ChangeRequestAttribute.equals(Object)"], "external_dependencies": {"modules": ["ChangeRequestAttribute"], "class_members": [{"name": "changeRequestAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with an object of a different class."}, {"name": "testEquals_DifferentChangeIpFlag", "primary_tested": ["ChangeRequestAttribute.equals(Object)"], "associated_methods": ["ChangeRequestAttribute.setChangeIpFlag(boolean)"], "external_dependencies": {"modules": ["ChangeRequestAttribute"], "class_members": [{"name": "changeRequestAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with different changeIpFlag values."}, {"name": "testEquals_DifferentChangePortFlag", "primary_tested": ["ChangeRequestAttribute.equals(Object)"], "associated_methods": ["ChangeRequestAttribute.setChangePortFlag(boolean)"], "external_dependencies": {"modules": ["ChangeRequestAttribute"], "class_members": [{"name": "changeRequestAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with different changePortFlag values."}, {"name": "testEquals_AllAttributesSame", "primary_tested": ["ChangeRequestAttribute.equals(Object)"], "associated_methods": ["ChangeRequestAttribute.setChangeIpFlag(boolean)", "ChangeRequestAttribute.setChangePortFlag(boolean)"], "external_dependencies": {"modules": ["ChangeRequestAttribute"], "class_members": [{"name": "changeRequestAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with all attributes set to the same values."}]}, {"file_path": "src/test/java/org/ice4j/message/MessageFactory_create3489BindingResponseTest.java", "testclass_name": "MessageFactory_create3489BindingResponseTest", "dependencies": ["package org.ice4j.message;", "import static org.junit.jupiter.api.Assertions.*;", "import org.ice4j.*;", "import org.ice4j.attribute.*;", "import org.junit.jupiter.api.*;"], "name": "MessageFactory_create3489BindingResponseTest", "description": "Unit tests for the creation of a 3489 Binding Response in the MessageFactory class.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testCreate3489BindingResponseWithAllAddresses", "primary_tested": ["MessageFactory.create3489BindingResponse(TransportAddress,TransportAddress,TransportAddress)"], "associated_methods": ["Response.setMessageType(char)", "Response.putAttribute(Attribute)", "AttributeFactory.createMappedAddressAttribute(TransportAddress)", "AttributeFactory.createSourceAddressAttribute(TransportAddress)", "AttributeFactory.createChangedAddressAttribute(TransportAddress)"], "external_dependencies": {"modules": ["TransportAddress", "Transport", "Response", "Message", "AttributeFactory", "Attribute"], "class_members": []}, "category": "unit", "description": "Tests the creation of a 3489 Binding Response with all addresses provided."}, {"name": "testCreate3489BindingResponseWithNullSourceAndChangedAddresses", "primary_tested": ["MessageFactory.create3489BindingResponse(TransportAddress,TransportAddress,TransportAddress)"], "associated_methods": ["Response.setMessageType(char)", "Response.putAttribute(Attribute)", "AttributeFactory.createMappedAddressAttribute(TransportAddress)"], "external_dependencies": {"modules": ["TransportAddress", "Transport", "Response", "Message", "AttributeFactory", "Attribute"], "class_members": []}, "category": "unit", "description": "Tests the creation of a 3489 Binding Response with null source and changed addresses."}, {"name": "testCreate3489BindingResponseWithNullChangedAddress", "primary_tested": ["MessageFactory.create3489BindingResponse(TransportAddress,TransportAddress,TransportAddress)"], "associated_methods": ["Response.setMessageType(char)", "Response.putAttribute(Attribute)", "AttributeFactory.createMappedAddressAttribute(TransportAddress)", "AttributeFactory.createSourceAddressAttribute(TransportAddress)"], "external_dependencies": {"modules": ["TransportAddress", "Transport", "Response", "Message", "AttributeFactory", "Attribute"], "class_members": []}, "category": "unit", "description": "Tests the creation of a 3489 Binding Response with a null changed address."}, {"name": "testCreate3489BindingResponseWithNullSourceAddress", "primary_tested": ["MessageFactory.create3489BindingResponse(TransportAddress,TransportAddress,TransportAddress)"], "associated_methods": ["Response.setMessageType(char)", "Response.putAttribute(Attribute)", "AttributeFactory.createMappedAddressAttribute(TransportAddress)", "AttributeFactory.createChangedAddressAttribute(TransportAddress)"], "external_dependencies": {"modules": ["TransportAddress", "Transport", "Response", "Message", "AttributeFactory", "Attribute"], "class_members": []}, "category": "unit", "description": "Tests the creation of a 3489 Binding Response with a null source address."}]}, {"file_path": "src/test/java/org/ice4j/attribute/UnknownAttributesAttribute_equalsTest.java", "testclass_name": "UnknownAttributesAttribute_equalsTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.*;", "import org.ice4j.*;", "import org.junit.jupiter.api.*;"], "name": "UnknownAttributesAttribute_equalsTest", "description": "Unit tests for the equals method of the UnknownAttributesAttribute class.", "class_members": {"variables": [{"name": "unknownAttributesAttribute", "type": "UnknownAttributesAttribute"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEquals_SameObject", "primary_tested": ["UnknownAttributesAttribute.equals(Object)"], "external_dependencies": {"modules": ["UnknownAttributesAttribute"], "class_members": [{"name": "unknownAttributesAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with the same object."}, {"name": "testEquals_DifferentType", "primary_tested": ["UnknownAttributesAttribute.equals(Object)"], "external_dependencies": {"modules": ["UnknownAttributesAttribute"], "class_members": [{"name": "unknownAttributesAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with a different type object."}, {"name": "testEquals_DifferentAttributeType", "primary_tested": ["UnknownAttributesAttribute.equals(Object)"], "external_dependencies": {"modules": ["UnknownAttributesAttribute"], "class_members": [{"name": "unknownAttributesAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with different attribute types."}, {"name": "testEquals_DifferentDataLength", "primary_tested": ["UnknownAttributesAttribute.equals(Object)"], "external_dependencies": {"modules": ["UnknownAttributesAttribute"], "class_members": [{"name": "unknownAttributesAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with different data lengths."}, {"name": "testEquals_DifferentUnknownAttributes", "primary_tested": ["UnknownAttributesAttribute.equals(Object)"], "external_dependencies": {"modules": ["UnknownAttributesAttribute"], "class_members": [{"name": "unknownAttributesAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with different unknown attributes."}, {"name": "testEquals_SameAttributes", "primary_tested": ["UnknownAttributesAttribute.equals(Object)"], "external_dependencies": {"modules": ["UnknownAttributesAttribute"], "class_members": [{"name": "unknownAttributesAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with the same attributes."}]}, {"file_path": "src/test/java/org/ice4j/attribute/RequestedAddressFamilyAttribute_getDataLengthTest.java", "testclass_name": "RequestedAddressFamilyAttribute_getDataLengthTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import org.ice4j.*;", "import org.junit.jupiter.api.*;"], "name": "RequestedAddressFamilyAttribute_getDataLengthTest", "description": "Unit tests for the RequestedAddressFamilyAttribute class, focusing on the getDataLength method and related functionalities.", "class_members": {"variables": [{"name": "requestedAddressFamilyAttribute", "type": "RequestedAddressFamilyAttribute"}, {"name": "msgFixture", "type": "MsgFixture"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetDataLength", "primary_tested": ["RequestedAddressFamilyAttribute.getDataLength()"], "external_dependencies": {"modules": ["RequestedAddressFamilyAttribute"], "class_members": [{"name": "requestedAddressFamilyAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the getDataLength method returns the correct data length."}, {"name": "testEqualsWithSameDataLength", "primary_tested": ["RequestedAddressFamilyAttribute.equals(Object)"], "external_dependencies": {"modules": ["RequestedAddressFamilyAttribute"], "class_members": [{"name": "requestedAddressFamilyAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if two attributes with the same data length are considered equal."}, {"name": "testEqualsWithDifferentDataLength", "primary_tested": ["RequestedAddressFamilyAttribute.equals(Object)"], "external_dependencies": {"modules": ["RequestedAddressFamilyAttribute"], "class_members": [{"name": "requestedAddressFamilyAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if two attributes with different data lengths are not considered equal."}, {"name": "testEncodeDataLength", "primary_tested": ["RequestedAddressFamilyAttribute.encode()"], "external_dependencies": {"modules": ["RequestedAddressFamilyAttribute"], "class_members": [{"name": "requestedAddressFamilyAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the encoded data length matches the expected DATA_LENGTH."}, {"name": "testDecodeAttributeBodyV6", "primary_tested": ["RequestedAddressFamilyAttribute.decodeAttributeBody(byte[],char,char)"], "associated_methods": ["RequestedAddressFamilyAttribute.getFamily()"], "external_dependencies": {"modules": ["RequestedAddressFamilyAttribute", "MsgFixture", "Attribute", "StunException"], "class_members": [{"name": "requestedAddressFamilyAttribute", "type": "variable"}, {"name": "msgFixture", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the decodeAttributeBody method properly decodes the attribute body for IPv6."}]}, {"file_path": "src/test/java/org/ice4j/attribute/UsernameAttribute_equalsTest.java", "testclass_name": "UsernameAttribute_equalsTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.*;"], "name": "UsernameAttribute_equalsTest", "description": "Unit tests for the equals method of the UsernameAttribute class.", "class_members": {"variables": [{"name": "usernameAttribute", "type": "UsernameAttribute"}, {"name": "usernameValue", "type": "String"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEquals_SameObject", "primary_tested": ["UsernameAttribute.equals(Object)"], "external_dependencies": {"modules": ["UsernameAttribute"], "class_members": [{"name": "usernameAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with the same object."}, {"name": "testEquals_DifferentObjectType", "primary_tested": ["UsernameAttribute.equals(Object)"], "external_dependencies": {"modules": ["UsernameAttribute"], "class_members": [{"name": "usernameAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with a different object type."}, {"name": "testEquals_DifferentUsername", "primary_tested": ["UsernameAttribute.equals(Object)"], "external_dependencies": {"modules": ["UsernameAttribute"], "class_members": [{"name": "usernameAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with a different username."}, {"name": "testEquals_SameUsername", "primary_tested": ["UsernameAttribute.equals(Object)"], "external_dependencies": {"modules": ["UsernameAttribute"], "class_members": [{"name": "usernameAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with the same username."}, {"name": "testEquals_DifferentAttributeType", "primary_tested": ["UsernameAttribute.equals(Object)"], "external_dependencies": {"modules": ["UsernameAttribute"], "class_members": [{"name": "usernameAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with a different attribute type."}, {"name": "testEquals_DifferentDataLength", "primary_tested": ["UsernameAttribute.equals(Object)"], "external_dependencies": {"modules": ["UsernameAttribute"], "class_members": [{"name": "usernameAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with different data length."}]}, {"file_path": "src/test/java/org/ice4j/attribute/NonceAttribute_equalsTest.java", "testclass_name": "NonceAttribute_equalsTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.*;", "import java.util.Arrays;"], "name": "NonceAttribute_equalsTest", "description": "Unit tests for the equals method of the NonceAttribute class.", "class_members": {"variables": [{"name": "nonceAttribute", "type": "NonceAttribute"}, {"name": "nonceValue", "type": "byte[]"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEqualsSameObject", "primary_tested": ["NonceAttribute.equals(Object)"], "external_dependencies": {"modules": ["NonceAttribute"], "class_members": [{"name": "nonceAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that an object is equal to itself."}, {"name": "testEqualsDifferentType", "primary_tested": ["NonceAttribute.equals(Object)"], "external_dependencies": {"modules": ["NonceAttribute"], "class_members": [{"name": "nonceAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that an object of a different type is not equal."}, {"name": "testEqualsDifferentNonce", "primary_tested": ["NonceAttribute.equals(Object)"], "external_dependencies": {"modules": ["NonceAttribute"], "class_members": [{"name": "nonceAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that attributes with different nonce values are not equal."}, {"name": "testEqualsSameNonce", "primary_tested": ["NonceAttribute.equals(Object)"], "external_dependencies": {"modules": ["NonceAttribute"], "class_members": [{"name": "nonceAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that attributes with the same nonce values are equal."}, {"name": "testEqualsDifferentAttributeType", "primary_tested": ["NonceAttribute.equals(Object)"], "external_dependencies": {"modules": ["NonceAttribute"], "class_members": [{"name": "nonceAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that attributes with different attribute types are not equal."}, {"name": "testEqualsDifferentDataLength", "primary_tested": ["NonceAttribute.equals(Object)"], "external_dependencies": {"modules": ["NonceAttribute"], "class_members": [{"name": "nonceAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that attributes with different data lengths are not equal."}]}, {"file_path": "src/test/java/org/ice4j/pseudotcp/util/ByteFifoBuffer_consumeWriteBufferTest.java", "testclass_name": "ByteFifoBuffer_consumeWriteBufferTest", "dependencies": ["package org.ice4j.pseudotcp.util;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.nio.BufferOverflowException;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "ByteFifoBuffer_consumeWriteBufferTest", "description": "Unit tests for the consumeWriteBuffer method of ByteFifoBuffer.", "class_members": {"variables": [{"name": "buffer", "type": "ByteFifoBuffer"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testConsumeWriteBufferSuccess", "primary_tested": ["ByteFifoBuffer.consumeWriteBuffer(int)"], "associated_methods": ["ByteFifoBuffer.getBuffered()", "ByteFifoBuffer.getWriteRemaining()"], "external_dependencies": {"modules": ["ByteFifoBuffer"], "class_members": [{"name": "buffer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful consumption of the write buffer without overflow."}, {"name": "testConsumeWriteBufferOverflow", "primary_tested": ["ByteFifoBuffer.consumeWriteBuffer(int)"], "external_dependencies": {"modules": ["ByteFifoBuffer", "BufferOverflowException"], "class_members": [{"name": "buffer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the handling of buffer overflow when consuming the write buffer."}, {"name": "testConsumeWriteBufferNegativeCount", "primary_tested": ["ByteFifoBuffer.consumeWriteBuffer(int)"], "external_dependencies": {"modules": ["ByteFifoBuffer", "IllegalArgumentException"], "class_members": [{"name": "buffer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the handling of negative count when consuming the write buffer."}, {"name": "testConsumeWriteBufferWithWrite", "primary_tested": ["ByteFifoBuffer.consumeWriteBuffer(int)"], "associated_methods": ["ByteFifoBuffer.write(byte[],int,int)", "ByteFifoBuffer.getBuffered()", "ByteFifoBuffer.getWriteRemaining()"], "external_dependencies": {"modules": ["ByteFifoBuffer"], "class_members": [{"name": "buffer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the consumption of the write buffer after writing data to it."}, {"name": "testConsumeWriteBufferWithWriteAndOverflow", "primary_tested": ["ByteFifoBuffer.consumeWriteBuffer(int)"], "associated_methods": ["ByteFifoBuffer.write(byte[],int,int)", "ByteFifoBuffer.getBuffered()", "ByteFifoBuffer.getWriteRemaining()"], "external_dependencies": {"modules": ["ByteFifoBuffer", "BufferOverflowException"], "class_members": [{"name": "buffer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the handling of buffer overflow when consuming the write buffer after writing data to it."}]}, {"file_path": "src/test/java/org/ice4j/pseudotcp/util/ByteFifoBuffer_setCapacityTest.java", "testclass_name": "ByteFifoBuffer_setCapacityTest", "dependencies": ["package org.ice4j.pseudotcp.util;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "ByteFifoBuffer_setCapacityTest", "description": "Unit tests for the setCapacity method of ByteFifoBuffer.", "class_members": {"variables": [{"name": "byteFifoBuffer", "type": "ByteFifoBuffer"}], "methods": [{"name": "getWData", "signature": "byte[] getWData(int)"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testSetCapacitySuccess", "primary_tested": ["ByteFifoBuffer.setCapacity(int)"], "associated_methods": ["ByteFifoBuffer.write(byte[],int)", "ByteFifoBuffer.length()", "ByteFifoBuffer.getBuffered()"], "external_dependencies": {"modules": ["ByteFifoBuffer"], "class_members": [{"name": "byteFifoBuffer", "type": "variable"}, {"name": "getWData", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful setting of capacity in ByteFifoBuffer."}, {"name": "testSetCapacityFailure", "primary_tested": ["ByteFifoBuffer.setCapacity(int)"], "associated_methods": ["ByteFifoBuffer.write(byte[],int)", "ByteFifoBuffer.length()", "ByteFifoBuffer.getBuffered()"], "external_dependencies": {"modules": ["ByteFifoBuffer"], "class_members": [{"name": "byteFifoBuffer", "type": "variable"}, {"name": "getWData", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the failure of setting capacity in ByteFifoBuffer when the new capacity is less than the current buffered data."}, {"name": "testSetCapacityWithConsumeWriteBuffer", "primary_tested": ["ByteFifoBuffer.setCapacity(int)"], "associated_methods": ["ByteFifoBuffer.write(byte[],int)", "ByteFifoBuffer.consumeWriteBuffer(int)", "ByteFifoBuffer.length()", "ByteFifoBuffer.getBuffered()"], "external_dependencies": {"modules": ["ByteFifoBuffer"], "class_members": [{"name": "byteFifoBuffer", "type": "variable"}, {"name": "getWData", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the setting of capacity in ByteFifoBuffer after consuming part of the write buffer."}, {"name": "testSetCapacityWithWriteRemaining", "primary_tested": ["ByteFifoBuffer.setCapacity(int)"], "associated_methods": ["ByteFifoBuffer.write(byte[],int)", "ByteFifoBuffer.length()", "ByteFifoBuffer.getWriteRemaining()"], "external_dependencies": {"modules": ["ByteFifoBuffer"], "class_members": [{"name": "byteFifoBuffer", "type": "variable"}, {"name": "getWData", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the setting of capacity in ByteFifoBuffer and checks the remaining write buffer space."}]}, {"file_path": "src/test/java/org/ice4j/attribute/SoftwareAttribute_equalsTest.java", "testclass_name": "SoftwareAttribute_equalsTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.*;"], "name": "SoftwareAttribute_equalsTest", "description": "Unit tests for the equals method of the SoftwareAttribute class.", "class_members": {"variables": [{"name": "softwareAttribute1", "type": "SoftwareAttribute"}, {"name": "softwareAttribute2", "type": "SoftwareAttribute"}, {"name": "softwareValue", "type": "String"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEquals_SameObject", "primary_tested": ["SoftwareAttribute.equals(Object)"], "external_dependencies": {"modules": ["SoftwareAttribute"], "class_members": [{"name": "softwareAttribute1", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with the same object."}, {"name": "testEquals_DifferentType", "primary_tested": ["SoftwareAttribute.equals(Object)"], "external_dependencies": {"modules": ["SoftwareAttribute"], "class_members": [{"name": "softwareAttribute1", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with a different type object."}, {"name": "testEquals_DifferentSoftware", "primary_tested": ["SoftwareAttribute.equals(Object)"], "associated_methods": ["SoftwareAttribute.setSoftware(byte[])"], "external_dependencies": {"modules": ["SoftwareAttribute"], "class_members": [{"name": "softwareAttribute1", "type": "variable"}, {"name": "softwareAttribute2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with different software values."}, {"name": "testEquals_DifferentLength", "primary_tested": ["SoftwareAttribute.equals(Object)"], "associated_methods": ["SoftwareAttribute.setSoftware(byte[])"], "external_dependencies": {"modules": ["SoftwareAttribute"], "class_members": [{"name": "softwareAttribute1", "type": "variable"}, {"name": "softwareAttribute2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with different software lengths."}, {"name": "testEquals_DifferentAttributeType", "primary_tested": ["SoftwareAttribute.equals(Object)"], "associated_methods": ["SoftwareAttribute.getAttributeType()"], "external_dependencies": {"modules": ["SoftwareAttribute"], "class_members": [{"name": "softwareAttribute1", "type": "variable"}, {"name": "softwareAttribute2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with different attribute types."}, {"name": "testEquals_EqualAttributes", "primary_tested": ["SoftwareAttribute.equals(Object)"], "external_dependencies": {"modules": ["SoftwareAttribute"], "class_members": [{"name": "softwareAttribute1", "type": "variable"}, {"name": "softwareAttribute2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with equal attributes."}]}, {"file_path": "src/test/java/org/ice4j/attribute/RequestedAddressFamilyAttribute_equalsTest.java", "testclass_name": "RequestedAddressFamilyAttribute_equalsTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import org.ice4j.*;", "import org.junit.jupiter.api.*;"], "name": "RequestedAddressFamilyAttribute_equalsTest", "description": "Unit tests for the equals method of the RequestedAddressFamilyAttribute class.", "class_members": {"variables": [{"name": "requestedAddressFamilyAttribute", "type": "RequestedAddressFamilyAttribute"}, {"name": "msgFixture", "type": "MsgFixture"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEqualsSameObject", "primary_tested": ["RequestedAddressFamilyAttribute.equals(Object)"], "external_dependencies": {"modules": ["RequestedAddressFamilyAttribute"], "class_members": [{"name": "requestedAddressFamilyAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing the same object."}, {"name": "testEqualsDifferentType", "primary_tested": ["RequestedAddressFamilyAttribute.equals(Object)"], "external_dependencies": {"modules": ["RequestedAddressFamilyAttribute"], "class_members": [{"name": "requestedAddressFamilyAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing with an object of a different type."}, {"name": "testEqualsDifferentFamily", "primary_tested": ["RequestedAddressFamilyAttribute.equals(Object)"], "associated_methods": ["RequestedAddressFamilyAttribute.setFamily(char)"], "external_dependencies": {"modules": ["RequestedAddressFamilyAttribute", "StunException"], "class_members": [{"name": "requestedAddressFamilyAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing attributes with different families."}, {"name": "testEqualsSameFamily", "primary_tested": ["RequestedAddressFamilyAttribute.equals(Object)"], "external_dependencies": {"modules": ["RequestedAddressFamilyAttribute", "StunException"], "class_members": [{"name": "requestedAddressFamilyAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing attributes with the same family."}, {"name": "testEqualsDifferentAttributeType", "primary_tested": ["RequestedAddressFamilyAttribute.equals(Object)"], "associated_methods": ["RequestedAddressFamilyAttribute.getAttributeType()"], "external_dependencies": {"modules": ["RequestedAddressFamilyAttribute", "StunException"], "class_members": [{"name": "requestedAddressFamilyAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing attributes with different attribute types."}, {"name": "testEqualsDifferentDataLength", "primary_tested": ["RequestedAddressFamilyAttribute.equals(Object)"], "associated_methods": ["RequestedAddressFamilyAttribute.getDataLength()"], "external_dependencies": {"modules": ["RequestedAddressFamilyAttribute", "StunException"], "class_members": [{"name": "requestedAddressFamilyAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing attributes with different data lengths."}, {"name": "testEqualsAfterDecode", "primary_tested": ["RequestedAddressFamilyAttribute.equals(Object)"], "associated_methods": ["RequestedAddressFamilyAttribute.decodeAttributeBody(byte[],char,char)", "RequestedAddressFamilyAttribute.setFamily(char)"], "external_dependencies": {"modules": ["RequestedAddressFamilyAttribute", "StunException", "Attribute", "MsgFixture"], "class_members": [{"name": "requestedAddressFamilyAttribute", "type": "variable"}, {"name": "msgFixture", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method after decoding an attribute."}]}, {"file_path": "src/test/java/org/ice4j/attribute/ErrorCodeAttribute_getDefaultReasonPhraseTest.java", "testclass_name": "ErrorCodeAttribute_getDefaultReasonPhraseTest", "dependencies": ["package org.ice4j.attribute;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "ErrorCodeAttribute_getDefaultReasonPhraseTest", "description": "Unit tests for the getDefaultReasonPhrase method of the ErrorCodeAttribute class.", "class_members": {"variables": [{"name": "errorCodeAttribute", "type": "ErrorCodeAttribute"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetDefaultReasonPhraseTryAlternate", "primary_tested": ["ErrorCodeAttribute.getDefaultReasonPhrase(char)"], "external_dependencies": {"modules": ["ErrorCodeAttribute"], "class_members": [{"name": "errorCodeAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getDefaultReasonPhrase method for the TRY_ALTERNATE error code."}, {"name": "testGetDefaultReasonPhraseBadRequest", "primary_tested": ["ErrorCodeAttribute.getDefaultReasonPhrase(char)"], "external_dependencies": {"modules": ["ErrorCodeAttribute"], "class_members": [{"name": "errorCodeAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getDefaultReasonPhrase method for the BAD_REQUEST error code."}, {"name": "testGetDefaultReasonPhraseUnauthorized", "primary_tested": ["ErrorCodeAttribute.getDefaultReasonPhrase(char)"], "external_dependencies": {"modules": ["ErrorCodeAttribute"], "class_members": [{"name": "errorCodeAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getDefaultReasonPhrase method for the UNAUTHORIZED error code."}, {"name": "testGetDefaultReasonPhraseForbidden", "primary_tested": ["ErrorCodeAttribute.getDefaultReasonPhrase(char)"], "external_dependencies": {"modules": ["ErrorCodeAttribute"], "class_members": [{"name": "errorCodeAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getDefaultReasonPhrase method for the FORBIDDEN error code."}, {"name": "testGetDefaultReasonPhraseUnknownAttribute", "primary_tested": ["ErrorCodeAttribute.getDefaultReasonPhrase(char)"], "external_dependencies": {"modules": ["ErrorCodeAttribute"], "class_members": [{"name": "errorCodeAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getDefaultReasonPhrase method for the UNKNOWN_ATTRIBUTE error code."}, {"name": "testGetDefaultReasonPhraseStaleCredentials", "primary_tested": ["ErrorCodeAttribute.getDefaultReasonPhrase(char)"], "external_dependencies": {"modules": ["ErrorCodeAttribute"], "class_members": [{"name": "errorCodeAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getDefaultReasonPhrase method for the STALE_CREDENTIALS error code."}, {"name": "testGetDefaultReasonPhraseIntegrityCheckFailure", "primary_tested": ["ErrorCodeAttribute.getDefaultReasonPhrase(char)"], "external_dependencies": {"modules": ["ErrorCodeAttribute"], "class_members": [{"name": "errorCodeAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getDefaultReasonPhrase method for the INTEGRITY_CHECK_FAILURE error code."}, {"name": "testGetDefaultReasonPhraseMissingUsername", "primary_tested": ["ErrorCodeAttribute.getDefaultReasonPhrase(char)"], "external_dependencies": {"modules": ["ErrorCodeAttribute"], "class_members": [{"name": "errorCodeAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getDefaultReasonPhrase method for the MISSING_USERNAME error code."}, {"name": "testGetDefaultReasonPhraseUseTLS", "primary_tested": ["ErrorCodeAttribute.getDefaultReasonPhrase(char)"], "external_dependencies": {"modules": ["ErrorCodeAttribute"], "class_members": [{"name": "errorCodeAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getDefaultReasonPhrase method for the USE_TLS error code."}, {"name": "testGetDefaultReasonPhraseAllocationMismatch", "primary_tested": ["ErrorCodeAttribute.getDefaultReasonPhrase(char)"], "external_dependencies": {"modules": ["ErrorCodeAttribute"], "class_members": [{"name": "errorCodeAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getDefaultReasonPhrase method for the ALLOCATION_MISMATCH error code."}, {"name": "testGetDefaultReasonPhraseStaleNonce", "primary_tested": ["ErrorCodeAttribute.getDefaultReasonPhrase(char)"], "external_dependencies": {"modules": ["ErrorCodeAttribute"], "class_members": [{"name": "errorCodeAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getDefaultReasonPhrase method for the STALE_NONCE error code."}, {"name": "testGetDefaultReasonPhraseAddressFamilyNotSupported", "primary_tested": ["ErrorCodeAttribute.getDefaultReasonPhrase(char)"], "external_dependencies": {"modules": ["ErrorCodeAttribute"], "class_members": [{"name": "errorCodeAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getDefaultReasonPhrase method for the ADDRESS_FAMILY_NOT_SUPPORTED error code."}, {"name": "testGetDefaultReasonPhraseWrongCredentials", "primary_tested": ["ErrorCodeAttribute.getDefaultReasonPhrase(char)"], "external_dependencies": {"modules": ["ErrorCodeAttribute"], "class_members": [{"name": "errorCodeAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getDefaultReasonPhrase method for the WRONG_CREDENTIALS error code."}, {"name": "testGetDefaultReasonPhraseUnsupportedTransportProtocol", "primary_tested": ["ErrorCodeAttribute.getDefaultReasonPhrase(char)"], "external_dependencies": {"modules": ["ErrorCodeAttribute"], "class_members": [{"name": "errorCodeAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getDefaultReasonPhrase method for the UNSUPPORTED_TRANSPORT_PROTOCOL error code."}, {"name": "testGetDefaultReasonPhrasePeerAddressFamilyMismatch", "primary_tested": ["ErrorCodeAttribute.getDefaultReasonPhrase(char)"], "external_dependencies": {"modules": ["ErrorCodeAttribute"], "class_members": [{"name": "errorCodeAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getDefaultReasonPhrase method for the PEER_ADDRESS_FAMILY_MISMATCH error code."}, {"name": "testGetDefaultReasonPhraseConnectionAlreadyExists", "primary_tested": ["ErrorCodeAttribute.getDefaultReasonPhrase(char)"], "external_dependencies": {"modules": ["ErrorCodeAttribute"], "class_members": [{"name": "errorCodeAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getDefaultReasonPhrase method for the CONNECTION_ALREADY_EXISTS error code."}, {"name": "testGetDefaultReasonPhraseConnectionTimeoutOrFailure", "primary_tested": ["ErrorCodeAttribute.getDefaultReasonPhrase(char)"], "external_dependencies": {"modules": ["ErrorCodeAttribute"], "class_members": [{"name": "errorCodeAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getDefaultReasonPhrase method for the CONNECTION_TIMEOUT_OR_FAILURE error code."}, {"name": "testGetDefaultReasonPhraseAllocationQuotaReached", "primary_tested": ["ErrorCodeAttribute.getDefaultReasonPhrase(char)"], "external_dependencies": {"modules": ["ErrorCodeAttribute"], "class_members": [{"name": "errorCodeAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getDefaultReasonPhrase method for the ALLOCATION_QUOTA_REACHED error code."}, {"name": "testGetDefaultReasonPhraseServerError", "primary_tested": ["ErrorCodeAttribute.getDefaultReasonPhrase(char)"], "external_dependencies": {"modules": ["ErrorCodeAttribute"], "class_members": [{"name": "errorCodeAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getDefaultReasonPhrase method for the SERVER_ERROR error code."}, {"name": "testGetDefaultReasonPhraseInsufficientCapacity", "primary_tested": ["ErrorCodeAttribute.getDefaultReasonPhrase(char)"], "external_dependencies": {"modules": ["ErrorCodeAttribute"], "class_members": [{"name": "errorCodeAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getDefaultReasonPhrase method for the INSUFFICIENT_CAPACITY error code."}, {"name": "testGetDefaultReasonPhraseGlobalFailure", "primary_tested": ["ErrorCodeAttribute.getDefaultReasonPhrase(char)"], "external_dependencies": {"modules": ["ErrorCodeAttribute"], "class_members": [{"name": "errorCodeAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getDefaultReasonPhrase method for the GLOBAL_FAILURE error code."}, {"name": "testGetDefaultReasonPhraseUnknownError", "primary_tested": ["ErrorCodeAttribute.getDefaultReasonPhrase(char)"], "external_dependencies": {"modules": ["ErrorCodeAttribute"], "class_members": [{"name": "errorCodeAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getDefaultReasonPhrase method for an unknown error code."}]}]