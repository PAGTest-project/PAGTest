[{"strategy": "generate", "code": "\npackage org.apache.commons.validator.routines;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNull;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\n\nimport org.apache.commons.validator.routines.checkdigit.CheckDigit;\nimport org.apache.commons.validator.routines.checkdigit.EAN13CheckDigit;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class CodeValidator_validateTest {\n\n    private CodeValidator validator;\n\n    @BeforeEach\n    public void setUp() {\n        validator = new CodeValidator(\"\\\\d{13}\", 13, 13, EAN13CheckDigit.EAN13_CHECK_DIGIT);\n    }\n\n    @Test\n    public void testValidateNullInput() {\n        assertNull(validator.validate(null), \"Null input should return null\");\n    }\n\n    @Test\n    public void testValidateEmptyInput() {\n        assertNull(validator.validate(\"\"), \"Empty input should return null\");\n    }\n\n    @Test\n    public void testValidateInvalidRegex() {\n        assertNull(validator.validate(\"1234567890123\"), \"Input not matching regex should return null\");\n    }\n\n    @Test\n    public void testValidateInvalidLength() {\n        assertNull(validator.validate(\"97819301109912\"), \"Input with invalid length should return null\");\n    }\n\n    @Test\n    public void testValidateInvalidCheckDigit() {\n        assertNull(validator.validate(\"9781930110992\"), \"Input with invalid check digit should return null\");\n    }\n\n    @Test\n    public void testValidateValidInput() {\n        assertEquals(\"9781930110991\", validator.validate(\"9781930110991\"), \"Valid input should return the input\");\n    }\n\n    @Test\n    public void testIsValid() {\n        assertTrue(validator.isValid(\"9781930110991\"), \"Valid input should return true\");\n        assertFalse(validator.isValid(\"9781930110992\"), \"Invalid input should return false\");\n    }\n}\n"}]