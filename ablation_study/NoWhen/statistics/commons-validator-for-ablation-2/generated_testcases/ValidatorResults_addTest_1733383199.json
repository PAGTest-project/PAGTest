[{"strategy": "retry", "code": "\npackage org.apache.commons.validator;\n\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class ValidatorResults_addTest {\n\n    private ValidatorResults validatorResults;\n    private Field field;\n    private static final String VALIDATOR_NAME = \"required\";\n\n    @BeforeEach\n    public void setUp() {\n        validatorResults = new ValidatorResults();\n        field = new Field();\n        field.setKey(\"testField\");\n    }\n\n    @Test\n    public void testAddNewValidatorResult() {\n        validatorResults.add(field, VALIDATOR_NAME, true, \"validValue\");\n        ValidatorResult result = validatorResults.getValidatorResult(field.getKey());\n        assertNotNull(result);\n        assertTrue(result.containsAction(VALIDATOR_NAME));\n        assertTrue(result.isValid(VALIDATOR_NAME));\n    }\n\n    @Test\n    public void testAddExistingValidatorResult() {\n        validatorResults.add(field, VALIDATOR_NAME, true, \"validValue\");\n        validatorResults.add(field, \"anotherValidator\", false, \"invalidValue\");\n        ValidatorResult result = validatorResults.getValidatorResult(field.getKey());\n        assertNotNull(result);\n        assertTrue(result.containsAction(VALIDATOR_NAME));\n        assertTrue(result.isValid(VALIDATOR_NAME));\n        assertTrue(result.containsAction(\"anotherValidator\"));\n        assertFalse(result.isValid(\"anotherValidator\"));\n    }\n\n    @Test\n    public void testAddWithNullValue() {\n        validatorResults.add(field, VALIDATOR_NAME, true, null);\n        ValidatorResult result = validatorResults.getValidatorResult(field.getKey());\n        assertNotNull(result);\n        assertTrue(result.containsAction(VALIDATOR_NAME));\n        assertTrue(result.isValid(VALIDATOR_NAME));\n    }\n\n    @Test\n    public void testAddWithEmptyValidatorName() {\n        validatorResults.add(field, \"\", true, \"validValue\");\n        ValidatorResult result = validatorResults.getValidatorResult(field.getKey());\n        assertNotNull(result);\n        assertTrue(result.containsAction(\"\"));\n        assertTrue(result.isValid(\"\"));\n    }\n\n    @Test\n    public void testAddWithNullField() {\n        validatorResults.add(null, VALIDATOR_NAME, true, \"validValue\");\n        assertTrue(validatorResults.isEmpty());\n    }\n\n    @Test\n    public void testAddWithNullValidatorName() {\n        validatorResults.add(field, null, true, \"validValue\");\n        ValidatorResult result = validatorResults.getValidatorResult(field.getKey());\n        assertNotNull(result);\n        assertTrue(result.containsAction(null));\n        assertTrue(result.isValid(null));\n    }\n\n    @Test\n    public void testAddWithFalseResult() {\n        validatorResults.add(field, VALIDATOR_NAME, false, \"invalidValue\");\n        ValidatorResult result = validatorResults.getValidatorResult(field.getKey());\n        assertNotNull(result);\n        assertTrue(result.containsAction(VALIDATOR_NAME));\n        assertFalse(result.isValid(VALIDATOR_NAME));\n    }\n\n    @Test\n    public void testAddMultipleFields() {\n        Field anotherField = new Field();\n        anotherField.setKey(\"anotherField\");\n        validatorResults.add(field, VALIDATOR_NAME, true, \"validValue\");\n        validatorResults.add(anotherField, VALIDATOR_NAME, false, \"invalidValue\");\n        ValidatorResult result1 = validatorResults.getValidatorResult(field.getKey());\n        ValidatorResult result2 = validatorResults.getValidatorResult(anotherField.getKey());\n        assertNotNull(result1);\n        assertNotNull(result2);\n        assertTrue(result1.containsAction(VALIDATOR_NAME));\n        assertTrue(result1.isValid(VALIDATOR_NAME));\n        assertTrue(result2.containsAction(VALIDATOR_NAME));\n        assertFalse(result2.isValid(VALIDATOR_NAME));\n    }\n}\n"}]