[{"strategy": "retry", "code": "\npackage org.apache.commons.validator.util;\n\nimport org.apache.commons.beanutils.PropertyUtils;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.Collection;\nimport java.util.Collections;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNull;\n\npublic class ValidatorUtils_getValueAsStringTest {\n\n    @Test\n    public void testGetValueAsString_PropertyIsNull() throws Exception {\n        // Given\n        Object bean = new Object();\n        String property = \"nonExistentProperty\";\n\n        // When\n        String result = ValidatorUtils.getValueAsString(bean, property);\n\n        // Then\n        assertNull(result);\n    }\n\n    @Test\n    public void testGetValueAsString_PropertyIsStringArray() throws Exception {\n        // Given\n        Object bean = new Object();\n        String property = \"stringArrayProperty\";\n        String[] stringArray = {\"value1\", \"value2\"};\n        PropertyUtils.setProperty(bean, property, stringArray);\n\n        // When\n        String result = ValidatorUtils.getValueAsString(bean, property);\n\n        // Then\n        assertEquals(stringArray.toString(), result);\n    }\n\n    @Test\n    public void testGetValueAsString_PropertyIsEmptyStringArray() throws Exception {\n        // Given\n        Object bean = new Object();\n        String property = \"emptyStringArrayProperty\";\n        String[] emptyStringArray = {};\n        PropertyUtils.setProperty(bean, property, emptyStringArray);\n\n        // When\n        String result = ValidatorUtils.getValueAsString(bean, property);\n\n        // Then\n        assertEquals(\"\", result);\n    }\n\n    @Test\n    public void testGetValueAsString_PropertyIsCollection() throws Exception {\n        // Given\n        Object bean = new Object();\n        String property = \"collectionProperty\";\n        Collection<String> collection = Collections.singletonList(\"value\");\n        PropertyUtils.setProperty(bean, property, collection);\n\n        // When\n        String result = ValidatorUtils.getValueAsString(bean, property);\n\n        // Then\n        assertEquals(collection.toString(), result);\n    }\n\n    @Test\n    public void testGetValueAsString_PropertyIsEmptyCollection() throws Exception {\n        // Given\n        Object bean = new Object();\n        String property = \"emptyCollectionProperty\";\n        Collection<String> emptyCollection = Collections.emptyList();\n        PropertyUtils.setProperty(bean, property, emptyCollection);\n\n        // When\n        String result = ValidatorUtils.getValueAsString(bean, property);\n\n        // Then\n        assertEquals(\"\", result);\n    }\n\n    @Test\n    public void testGetValueAsString_PropertyIsString() throws Exception {\n        // Given\n        Object bean = new Object();\n        String property = \"stringProperty\";\n        String stringValue = \"value\";\n        PropertyUtils.setProperty(bean, property, stringValue);\n\n        // When\n        String result = ValidatorUtils.getValueAsString(bean, property);\n\n        // Then\n        assertEquals(stringValue, result);\n    }\n}\n"}]