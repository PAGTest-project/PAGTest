[{"strategy": "retry", "code": "\npackage org.apache.commons.validator.routines;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DomainValidator_isValidTest {\n    private DomainValidator validator;\n\n    @BeforeEach\n    public void setUp() {\n        validator = DomainValidator.getInstance();\n    }\n\n    @Test\n    public void testIsValidWithValidDomains() {\n        assertTrue(validator.isValid(\"example.com\"));\n        assertTrue(validator.isValid(\"test.co.uk\"));\n        assertTrue(validator.isValid(\"sub.domain.example.com\"));\n    }\n\n    @Test\n    public void testIsValidWithInvalidDomains() {\n        assertFalse(validator.isValid(\"invalid-domain\"));\n        assertFalse(validator.isValid(\"example..com\"));\n        assertFalse(validator.isValid(\"test.invalidtld\"));\n    }\n\n    @Test\n    public void testIsValidWithNullAndEmpty() {\n        assertFalse(validator.isValid(null));\n        assertFalse(validator.isValid(\"\"));\n    }\n\n    @Test\n    public void testIsValidWithLocalDomains() {\n        assertFalse(validator.isValid(\"localhost\")); // Default instance does not allow local domains\n        DomainValidator localValidator = DomainValidator.getInstance(true);\n        assertTrue(localValidator.isValid(\"localhost\")); // Instance allowing local domains\n    }\n\n    @Test\n    public void testIsValidWithUnicodeToASCIIConversion() {\n        assertTrue(validator.isValid(\"\u043f\u0440\u0435\u0437\u0438\u0434\u0435\u043d\u0442.\u0440\u0444\")); // Cyrillic domain\n        assertTrue(validator.isValid(\"\u4f8b\u5b50.\u4e2d\u56fd\")); // Chinese domain\n    }\n\n    @Test\n    public void testIsValidWithLeadingDot() {\n        assertFalse(validator.isValid(\".example.com\"));\n        assertFalse(validator.isValid(\".test.co.uk\"));\n    }\n\n    @Test\n    public void testIsValidWithMaxLength() {\n        StringBuilder longDomain = new StringBuilder(\"a\");\n        for (int i = 0; i < 252; i++) { // 253 characters total\n            longDomain.append(\"a\");\n        }\n        longDomain.append(\".com\");\n        assertTrue(validator.isValid(longDomain.toString()));\n\n        longDomain.append(\"a\"); // 254 characters total\n        assertFalse(validator.isValid(longDomain.toString()));\n    }\n\n    @Test\n    public void testIsValidWithInvalidTLDs() {\n        assertFalse(validator.isValid(\"example.invalidtld\"));\n        assertFalse(validator.isValid(\"test.nonexistenttld\"));\n    }\n\n    @Test\n    public void testIsValidWithValidTLDs() {\n        assertTrue(validator.isValid(\"example.com\"));\n        assertTrue(validator.isValid(\"test.co.uk\"));\n        assertTrue(validator.isValid(\"sub.domain.example.net\"));\n    }\n\n    @Test\n    public void testIsValidWithMixedCase() {\n        assertTrue(validator.isValid(\"Example.Com\"));\n        assertTrue(validator.isValid(\"Test.Co.Uk\"));\n    }\n\n    @Test\n    public void testIsValidWithUnderscore() {\n        assertFalse(validator.isValid(\"example_domain.com\"));\n        assertFalse(validator.isValid(\"test.co_uk\"));\n    }\n\n    @Test\n    public void testIsValidWithHyphen() {\n        assertTrue(validator.isValid(\"example-domain.com\"));\n        assertTrue(validator.isValid(\"test-domain.co.uk\"));\n    }\n\n    @Test\n    public void testIsValidWithNumbers() {\n        assertTrue(validator.isValid(\"123.com\"));\n        assertTrue(validator.isValid(\"test123.co.uk\"));\n    }\n\n    @Test\n    public void testIsValidWithSpecialCharacters() {\n        assertFalse(validator.isValid(\"example!domain.com\"));\n        assertFalse(validator.isValid(\"test@domain.co.uk\"));\n    }\n}\n"}]