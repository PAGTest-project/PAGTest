[{"strategy": "generate", "code": "\npackage org.apache.commons.validator;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.util.HashMap;\nimport java.util.Map;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\npublic class ValidatorResults_getResultValueMapTest {\n\n    private ValidatorResults validatorResults;\n\n    @BeforeEach\n    public void setUp() {\n        validatorResults = new ValidatorResults();\n    }\n\n    @Test\n    public void testGetResultValueMap_WithNonBooleanResults() {\n        // Given\n        Field field1 = new Field();\n        field1.setKey(\"field1\");\n        validatorResults.add(field1, \"action1\", true, \"result1\");\n\n        Field field2 = new Field();\n        field2.setKey(\"field2\");\n        validatorResults.add(field2, \"action2\", true, 123);\n\n        // When\n        Map<String, Object> resultValueMap = validatorResults.getResultValueMap();\n\n        // Then\n        assertEquals(2, resultValueMap.size());\n        assertEquals(\"result1\", resultValueMap.get(\"field1\"));\n        assertEquals(123, resultValueMap.get(\"field2\"));\n    }\n\n    @Test\n    public void testGetResultValueMap_WithBooleanResults() {\n        // Given\n        Field field1 = new Field();\n        field1.setKey(\"field1\");\n        validatorResults.add(field1, \"action1\", true, true);\n\n        Field field2 = new Field();\n        field2.setKey(\"field2\");\n        validatorResults.add(field2, \"action2\", true, false);\n\n        // When\n        Map<String, Object> resultValueMap = validatorResults.getResultValueMap();\n\n        // Then\n        assertTrue(resultValueMap.isEmpty());\n    }\n\n    @Test\n    public void testGetResultValueMap_WithMixedResults() {\n        // Given\n        Field field1 = new Field();\n        field1.setKey(\"field1\");\n        validatorResults.add(field1, \"action1\", true, \"result1\");\n        validatorResults.add(field1, \"action2\", true, true);\n\n        Field field2 = new Field();\n        field2.setKey(\"field2\");\n        validatorResults.add(field2, \"action3\", true, 123);\n        validatorResults.add(field2, \"action4\", true, false);\n\n        // When\n        Map<String, Object> resultValueMap = validatorResults.getResultValueMap();\n\n        // Then\n        assertEquals(2, resultValueMap.size());\n        assertEquals(\"result1\", resultValueMap.get(\"field1\"));\n        assertEquals(123, resultValueMap.get(\"field2\"));\n    }\n\n    @Test\n    public void testGetResultValueMap_WithEmptyResults() {\n        // When\n        Map<String, Object> resultValueMap = validatorResults.getResultValueMap();\n\n        // Then\n        assertTrue(resultValueMap.isEmpty());\n    }\n}\n"}]