[{"strategy": "retry", "code": "\npackage org.apache.commons.validator.routines;\n\nimport org.apache.commons.validator.routines.checkdigit.CheckDigitException;\nimport org.apache.commons.validator.routines.checkdigit.EAN13CheckDigit;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ISSNValidator_convertToEAN13Test {\n\n    private ISSNValidator issnValidator;\n\n    @BeforeEach\n    public void setUp() {\n        issnValidator = new ISSNValidator();\n    }\n\n    @Test\n    public void testConvertToEAN13ValidISSNAndSuffix() {\n        String issn = \"1234-5679\";\n        String suffix = \"00\";\n        String expectedEAN13 = \"9771234567003\"; // Corrected expected EAN-13\n        assertEquals(expectedEAN13, issnValidator.convertToEAN13(issn, suffix));\n    }\n\n    @Test\n    public void testConvertToEAN13InvalidSuffix() {\n        String issn = \"1234-5679\";\n        String suffix = \"0A\";\n        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> {\n            issnValidator.convertToEAN13(issn, suffix);\n        });\n        assertEquals(\"Suffix must be two digits: '0A'\", exception.getMessage());\n    }\n\n    @Test\n    public void testConvertToEAN13NullSuffix() {\n        String issn = \"1234-5679\";\n        String suffix = null;\n        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> {\n            issnValidator.convertToEAN13(issn, suffix);\n        });\n        assertEquals(\"Suffix must be two digits: 'null'\", exception.getMessage());\n    }\n\n    @Test\n    public void testConvertToEAN13InvalidISSN() {\n        String issn = \"1234-567X\"; // Invalid ISSN\n        String suffix = \"00\";\n        assertNull(issnValidator.convertToEAN13(issn, suffix));\n    }\n\n    @Test\n    public void testConvertToEAN13CheckDigitException() {\n        String issn = \"1234-5679\";\n        String suffix = \"00\";\n        // Mocking a CheckDigitException by providing an invalid EAN13 prefix\n        String invalidEAN13Prefix = \"978\"; // This should not be used for ISSN conversion\n        String ean13 = invalidEAN13Prefix + issn.replace(\"-\", \"\") + suffix;\n        CheckDigitException exception = assertThrows(CheckDigitException.class, () -> {\n            EAN13CheckDigit.EAN13_CHECK_DIGIT.calculate(ean13);\n        });\n        assertNotNull(exception.getMessage());\n    }\n}\n"}]