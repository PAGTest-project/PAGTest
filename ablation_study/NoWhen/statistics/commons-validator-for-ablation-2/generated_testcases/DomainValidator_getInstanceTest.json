[{"strategy": "retry", "code": "\npackage org.apache.commons.validator.routines;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class DomainValidator_getInstanceTest {\n\n    private DomainValidator validator;\n\n    @BeforeEach\n    public void setUp() {\n        validator = DomainValidator.getInstance(false);\n    }\n\n    @Test\n    public void testGetInstanceAllowLocal() {\n        DomainValidator instanceWithLocal = DomainValidator.getInstance(true);\n        assertTrue(instanceWithLocal.isValid(\"localhost\"));\n        assertTrue(instanceWithLocal.isValid(\"localdomain\"));\n\n        DomainValidator instanceWithoutLocal = DomainValidator.getInstance(false);\n        assertFalse(instanceWithoutLocal.isValid(\"localhost\"));\n        assertFalse(instanceWithoutLocal.isValid(\"localdomain\"));\n    }\n\n    @Test\n    public void testGetInstanceAllowLocalWithTLDOverride() {\n        DomainValidator.updateTLDOverride(DomainValidator.ArrayType.LOCAL_PLUS, \"example\");\n        DomainValidator instanceWithLocal = DomainValidator.getInstance(true);\n        assertTrue(instanceWithLocal.isValid(\"test.example\"));\n\n        DomainValidator.updateTLDOverride(DomainValidator.ArrayType.LOCAL_MINUS, \"example\");\n        DomainValidator instanceWithoutLocal = DomainValidator.getInstance(false);\n        assertFalse(instanceWithoutLocal.isValid(\"test.example\"));\n    }\n\n    @Test\n    public void testGetInstanceWithCustomTLDs() {\n        List<DomainValidator.Item> items = new ArrayList<>();\n        items.add(new DomainValidator.Item(DomainValidator.ArrayType.GENERIC_PLUS, \"custom\"));\n        DomainValidator customValidator = DomainValidator.getInstance(false, items);\n        assertTrue(customValidator.isValid(\"test.custom\"));\n\n        items.clear();\n        items.add(new DomainValidator.Item(DomainValidator.ArrayType.GENERIC_MINUS, \"com\"));\n        customValidator = DomainValidator.getInstance(false, items);\n        assertFalse(customValidator.isValid(\"test.com\"));\n    }\n\n    @Test\n    public void testGetInstanceWithInvalidTLDs() {\n        List<DomainValidator.Item> items = new ArrayList<>();\n        items.add(new DomainValidator.Item(DomainValidator.ArrayType.GENERIC_PLUS, \"invalid\"));\n        DomainValidator customValidator = DomainValidator.getInstance(false, items);\n        assertFalse(customValidator.isValid(\"test.invalid\"));\n    }\n\n    @Test\n    public void testGetInstanceWithMixedTLDs() {\n        List<DomainValidator.Item> items = new ArrayList<>();\n        items.add(new DomainValidator.Item(DomainValidator.ArrayType.GENERIC_PLUS, \"custom\"));\n        items.add(new DomainValidator.Item(DomainValidator.ArrayType.GENERIC_MINUS, \"com\"));\n        DomainValidator customValidator = DomainValidator.getInstance(false, items);\n        assertTrue(customValidator.isValid(\"test.custom\"));\n        assertFalse(customValidator.isValid(\"test.com\"));\n    }\n}\n"}]