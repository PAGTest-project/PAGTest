[{"uris": "src/example/org/apache/commons/validator/example/ValidateExample.java.ValidateExample", "name": "ValidateExample", "file_path": "src/example/org/apache/commons/validator/example/ValidateExample.java", "superclasses": "", "methods": ["[void]main(String[])", "[void]printResults(ValidateBean,ValidatorResults,ValidatorResources)"], "method_uris": ["src/example/org/apache/commons/validator/example/ValidateExample.java.ValidateExample.[void]main(String[])", "src/example/org/apache/commons/validator/example/ValidateExample.java.ValidateExample.[void]printResults(ValidateBean,ValidatorResults,ValidatorResources)"], "overrides": null, "attributes": [], "class_docstring": "                                                       \n<p>A simple example of setting up and using the Validator.</p> \n\nThis simple example shows all the steps needed to set up and use\nthe Validator.  Note that in most cases, some kind of framework\nwould be wrapped around the Validator, such as is the case with\nthe Struts Validator Framework.  However, should you wish to use\nthe Validator against raw Beans in a pure Java application, you\ncan see everything you need to know to get it working here.\n", "original_string": "public class ValidateExample {\n\n    /**\n     * We need a resource bundle to get our field names and errors messages \n     * from.  Note that this is not strictly required to make the Validator \n     * work, but is a good coding practice.\n     */\n    private static ResourceBundle apps =\n        ResourceBundle.getBundle(\n            \"org.apache.commons.validator.example.applicationResources\");\n\n    /**\n     * This is the main method that will be called to initialize the Validator, create some sample beans, and\n     * run the Validator against them.\n     */\n    public static void main(String[] args)\n        throws ValidatorException, IOException, SAXException {\n            \n        InputStream in = null;\n        ValidatorResources resources = null;\n        \n        try {\n        \n            // Create a new instance of a ValidatorResource, then get a stream\n            // handle on the XML file with the actions in it, and initialize the\n            // resources from it.  This would normally be done by a servlet\n            // run during JSP initialization or some other application-startup\n            // routine.\n            in = ValidateExample.class.getResourceAsStream(\"validator-example.xml\");\n            resources = new ValidatorResources(in);\n            \n        } finally {\n            // Make sure we close the input stream.\n            if (in != null) {\n                in.close();\n            }\n        }\n        \n        // Create a test bean to validate against.\n        ValidateBean bean = new ValidateBean();\n        \n        // Create a validator with the ValidateBean actions for the bean\n        // we're interested in.\n        Validator validator = new Validator(resources, \"ValidateBean\");\n        \n        // Tell the validator which bean to validate against.\n        validator.setParameter(Validator.BEAN_PARAM, bean);\n        \n        ValidatorResults results = null;\n        \n        // Run the validation actions against the bean.  Since all of the properties\n        // are null, we expect them all to error out except for street2, which has\n        // no validations (it's an optional property)\n        \n        results = validator.validate();\n        printResults(bean, results, resources);\n        \n        // Now set all the required properties, but make the age a non-integer.\n        // You'll notice that age will pass the required test, but fail the int\n        // test.\n        bean.setLastName(\"Tester\");\n        bean.setFirstName(\"John\");\n        bean.setStreet1(\"1 Test Street\");\n        bean.setCity(\"Testville\");\n        bean.setState(\"TE\");\n        bean.setPostalCode(\"12345\");\n        bean.setAge(\"Too Old\");\n        results = validator.validate();\n        printResults(bean, results, resources);\n        \n        // Now only report failed fields\n        validator.setOnlyReturnErrors(true);\n        results = validator.validate();\n        printResults(bean, results, resources);\n        \n        // Now everything should pass.\n        validator.setOnlyReturnErrors(false);\n        bean.setAge(\"123\");\n        results = validator.validate();\n        printResults(bean, results, resources);\n    }\n\n    /**\n     * Dumps out the Bean in question and the results of validating it.\n     */\n    public static void printResults(\n        ValidateBean bean,\n        ValidatorResults results,\n        ValidatorResources resources) {\n            \n        boolean success = true;\n\n        // Start by getting the form for the current locale and Bean.\n        Form form = resources.getForm(Locale.getDefault(), \"ValidateBean\");\n\n        System.out.println(\"\\n\\nValidating:\");\n        System.out.println(bean);\n\n        // Iterate over each of the properties of the Bean which had messages.\n        Iterator<String> propertyNames = results.getPropertyNames().iterator();\n        while (propertyNames.hasNext()) {\n            String propertyName = propertyNames.next();\n\n            // Get the Field associated with that property in the Form\n            Field field = form.getField(propertyName);\n\n            // Look up the formatted name of the field from the Field arg0\n            String prettyFieldName = apps.getString(field.getArg(0).getKey());\n\n            // Get the result of validating the property.\n            ValidatorResult result = results.getValidatorResult(propertyName);\n\n            // Get all the actions run against the property, and iterate over their names.\n            Iterator<String> keys = result.getActions();\n            while (keys.hasNext()) {\n                String actName = keys.next();\n\n                // Get the Action for that name.\n                ValidatorAction action = resources.getValidatorAction(actName);\n\n                // If the result is valid, print PASSED, otherwise print FAILED\n                System.out.println(\n                    propertyName\n                        + \"[\"\n                        + actName\n                        + \"] (\"\n                        + (result.isValid(actName) ? \"PASSED\" : \"FAILED\")\n                        + \")\");\n\n                //If the result failed, format the Action's message against the formatted field name\n                if (!result.isValid(actName)) {\n                    success = false;\n                    String message = apps.getString(action.getMsg());\n                    Object[] args = { prettyFieldName };\n                    System.out.println(\n                        \"     Error message will be: \"\n                            + MessageFormat.format(message, args));\n\n                }\n            }\n        }\n        if (success) {\n            System.out.println(\"FORM VALIDATION PASSED\");\n        } else {\n            System.out.println(\"FORM VALIDATION FAILED\");\n        }\n\n    }\n\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static ResourceBundle apps =\n        ResourceBundle.getBundle(\n            \"org.apache.commons.validator.example.applicationResources\");", "docstring": "\nWe need a resource bundle to get our field names and errors messages \nfrom.  Note that this is not strictly required to make the Validator \nwork, but is a good coding practice.\n", "modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "type": "ResourceBundle", "name": "apps =\n        ResourceBundle.getBundle(\n            \"org.apache.commons.validator.example.applicationResources\")", "syntax_pass": true}]}, {"uris": "src/example/org/apache/commons/validator/example/ValidateBean.java.ValidateBean", "name": "ValidateBean", "file_path": "src/example/org/apache/commons/validator/example/ValidateBean.java", "superclasses": "", "methods": ["[void]setLastName(String)", "[void]setFirstName(String)", "[void]setStreet1(String)", "[void]setStreet2(String)", "[void]setCity(String)", "[void]setState(String)", "[void]setPostalCode(String)", "[void]setAge(String)", "[String]getLastName()", "[String]getFirstName()", "[String]getStreet1()", "[String]getStreet2()", "[String]getCity()", "[String]getState()", "[String]getPostalCode()", "[String]getAge()", "[String]toString()"], "method_uris": ["src/example/org/apache/commons/validator/example/ValidateBean.java.ValidateBean.[void]setLastName(String)", "src/example/org/apache/commons/validator/example/ValidateBean.java.ValidateBean.[void]setFirstName(String)", "src/example/org/apache/commons/validator/example/ValidateBean.java.ValidateBean.[void]setStreet1(String)", "src/example/org/apache/commons/validator/example/ValidateBean.java.ValidateBean.[void]setStreet2(String)", "src/example/org/apache/commons/validator/example/ValidateBean.java.ValidateBean.[void]setCity(String)", "src/example/org/apache/commons/validator/example/ValidateBean.java.ValidateBean.[void]setState(String)", "src/example/org/apache/commons/validator/example/ValidateBean.java.ValidateBean.[void]setPostalCode(String)", "src/example/org/apache/commons/validator/example/ValidateBean.java.ValidateBean.[void]setAge(String)", "src/example/org/apache/commons/validator/example/ValidateBean.java.ValidateBean.[String]getLastName()", "src/example/org/apache/commons/validator/example/ValidateBean.java.ValidateBean.[String]getFirstName()", "src/example/org/apache/commons/validator/example/ValidateBean.java.ValidateBean.[String]getStreet1()", "src/example/org/apache/commons/validator/example/ValidateBean.java.ValidateBean.[String]getStreet2()", "src/example/org/apache/commons/validator/example/ValidateBean.java.ValidateBean.[String]getCity()", "src/example/org/apache/commons/validator/example/ValidateBean.java.ValidateBean.[String]getState()", "src/example/org/apache/commons/validator/example/ValidateBean.java.ValidateBean.[String]getPostalCode()", "src/example/org/apache/commons/validator/example/ValidateBean.java.ValidateBean.[String]getAge()", "src/example/org/apache/commons/validator/example/ValidateBean.java.ValidateBean.[String]toString()"], "overrides": null, "attributes": [], "class_docstring": "                                                       \nA simple bean to use with the Validator Example.\n", "original_string": "public class ValidateBean {\n\n    String lastName, firstName, street1, street2, city, state, postalCode, age;\n\n    public void setLastName(String lastName) {\n        this.lastName = lastName;\n    }\n    \n    public void setFirstName(String firstName) {\n        this.firstName = firstName;\n    }\n    \n    public void setStreet1(String street1) {\n        this.street1 = street1;\n    }\n    \n    public void setStreet2(String street2) {\n        this.street2 = street2;\n    }\n    \n    public void setCity(String city) {\n        this.city = city;\n    }\n    \n    public void setState(String state) {\n        this.state = state;\n    }\n    \n    public void setPostalCode(String postalCode) {\n        this.postalCode = postalCode;\n    }\n    \n    public void setAge(String age) {\n        this.age = age;\n    }\n\n    public String getLastName() {\n        return this.lastName;\n    }\n    \n    public String getFirstName() {\n        return this.firstName;\n    }\n    \n    public String getStreet1() {\n        return this.street1;\n    }\n    \n    public String getStreet2() {\n        return this.street2;\n    }\n    \n    public String getCity() {\n        return this.city;\n    }\n    \n    public String getState() {\n        return this.state;\n    }\n    \n    public String getPostalCode() {\n        return this.postalCode;\n    }\n    \n    public String getAge() {\n        return this.age;\n    }\n\n    public String toString() {\n        return \"{lastname=\"\n            + this.lastName\n            + \", firstname=\"\n            + this.firstName\n            + \", street1=\"\n            + this.street1\n            + \",\\n street2=\"\n            + this.street2\n            + \", \"\n            + \"city=\"\n            + this.city\n            + \", state=\"\n            + this.state\n            + \",\\n postalcode=\"\n            + this.postalCode\n            + \", age=\"\n            + this.age\n            + \"}\";\n    }\n\n}", "super_interfaces": [], "fields": [{"attribute_expression": "String lastName, firstName, street1, street2, city, state, postalCode, age;", "docstring": "", "modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "type": "String", "name": "lastName", "syntax_pass": true}]}, {"uris": "src/test/java/org/apache/commons/validator/ResultPair.java.ResultPair", "name": "ResultPair", "file_path": "src/test/java/org/apache/commons/validator/ResultPair.java", "superclasses": "", "methods": ["[]ResultPair(String,boolean)"], "method_uris": ["src/test/java/org/apache/commons/validator/ResultPair.java.ResultPair.[]ResultPair(String,boolean)"], "overrides": null, "attributes": [], "class_docstring": "\nGroups tests and expected results.\n", "original_string": "public class ResultPair {\n    public final String item;\n    public final boolean valid;\n\n    public ResultPair(final String item, final boolean valid) {\n        this.item = item;\n        this.valid = valid; // Whether the individual part of URL is valid.\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "public final String item;", "docstring": "", "modifiers": "public final", "marker_annotations": [], "non_marker_annotations": ["public", "final"], "comments": [], "type": "String", "name": "item", "syntax_pass": true}, {"attribute_expression": "public final boolean valid;", "docstring": "", "modifiers": "public final", "marker_annotations": [], "non_marker_annotations": ["public", "final"], "comments": [], "type": "boolean", "name": "valid", "syntax_pass": true}]}, {"uris": "src/test/java/org/apache/commons/validator/TypeBean.java.TypeBean", "name": "TypeBean", "file_path": "src/test/java/org/apache/commons/validator/TypeBean.java", "superclasses": "", "methods": ["[String]getByte()", "[String]getCreditCard()", "[String]getDate()", "[String]getDouble()", "[String]getFloat()", "[String]getInteger()", "[String]getLong()", "[String]getShort()", "[void]setByte(String)", "[void]setCreditCard(String)", "[void]setDate(String)", "[void]setDouble(String)", "[void]setFloat(String)", "[void]setInteger(String)", "[void]setLong(String)", "[void]setShort(String)"], "method_uris": ["src/test/java/org/apache/commons/validator/TypeBean.java.TypeBean.[String]getByte()", "src/test/java/org/apache/commons/validator/TypeBean.java.TypeBean.[String]getCreditCard()", "src/test/java/org/apache/commons/validator/TypeBean.java.TypeBean.[String]getDate()", "src/test/java/org/apache/commons/validator/TypeBean.java.TypeBean.[String]getDouble()", "src/test/java/org/apache/commons/validator/TypeBean.java.TypeBean.[String]getFloat()", "src/test/java/org/apache/commons/validator/TypeBean.java.TypeBean.[String]getInteger()", "src/test/java/org/apache/commons/validator/TypeBean.java.TypeBean.[String]getLong()", "src/test/java/org/apache/commons/validator/TypeBean.java.TypeBean.[String]getShort()", "src/test/java/org/apache/commons/validator/TypeBean.java.TypeBean.[void]setByte(String)", "src/test/java/org/apache/commons/validator/TypeBean.java.TypeBean.[void]setCreditCard(String)", "src/test/java/org/apache/commons/validator/TypeBean.java.TypeBean.[void]setDate(String)", "src/test/java/org/apache/commons/validator/TypeBean.java.TypeBean.[void]setDouble(String)", "src/test/java/org/apache/commons/validator/TypeBean.java.TypeBean.[void]setFloat(String)", "src/test/java/org/apache/commons/validator/TypeBean.java.TypeBean.[void]setInteger(String)", "src/test/java/org/apache/commons/validator/TypeBean.java.TypeBean.[void]setLong(String)", "src/test/java/org/apache/commons/validator/TypeBean.java.TypeBean.[void]setShort(String)"], "overrides": null, "attributes": [], "class_docstring": "\nValue object that contains different fields to test type conversion validation.\n", "original_string": "public class TypeBean {\n\n    private String sByte;\n    private String sShort;\n    private String sInteger;\n    private String sLong;\n    private String sFloat;\n    private String sDouble;\n    private String sDate;\n    private String sCreditCard;\n\n    public String getByte() {\n        return sByte;\n    }\n\n    public String getCreditCard() {\n        return sCreditCard;\n    }\n\n    public String getDate() {\n        return sDate;\n    }\n\n    public String getDouble() {\n        return sDouble;\n    }\n\n    public String getFloat() {\n        return sFloat;\n    }\n\n    public String getInteger() {\n        return sInteger;\n    }\n\n    public String getLong() {\n        return sLong;\n    }\n\n    public String getShort() {\n        return sShort;\n    }\n\n    public void setByte(final String sByte) {\n        this.sByte = sByte;\n    }\n\n    public void setCreditCard(final String sCreditCard) {\n        this.sCreditCard = sCreditCard;\n    }\n\n    public void setDate(final String sDate) {\n        this.sDate = sDate;\n    }\n\n    public void setDouble(final String sDouble) {\n        this.sDouble = sDouble;\n    }\n\n    public void setFloat(final String sFloat) {\n        this.sFloat = sFloat;\n    }\n\n    public void setInteger(final String sInteger) {\n        this.sInteger = sInteger;\n    }\n\n    public void setLong(final String sLong) {\n        this.sLong = sLong;\n    }\n\n    public void setShort(final String sShort) {\n        this.sShort = sShort;\n    }\n\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private String sByte;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "sByte", "syntax_pass": true}, {"attribute_expression": "private String sShort;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "sShort", "syntax_pass": true}, {"attribute_expression": "private String sInteger;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "sInteger", "syntax_pass": true}, {"attribute_expression": "private String sLong;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "sLong", "syntax_pass": true}, {"attribute_expression": "private String sFloat;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "sFloat", "syntax_pass": true}, {"attribute_expression": "private String sDouble;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "sDouble", "syntax_pass": true}, {"attribute_expression": "private String sDate;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "sDate", "syntax_pass": true}, {"attribute_expression": "private String sCreditCard;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "sCreditCard", "syntax_pass": true}]}, {"uris": "src/test/java/org/apache/commons/validator/NameBean.java.NameBean", "name": "NameBean", "file_path": "src/test/java/org/apache/commons/validator/NameBean.java", "superclasses": "", "methods": ["[String]getFirstName()", "[String]getLastName()", "[String]getMiddleName()", "[void]setFirstName(String)", "[void]setLastName(String)", "[void]setMiddleName(String)"], "method_uris": ["src/test/java/org/apache/commons/validator/NameBean.java.NameBean.[String]getFirstName()", "src/test/java/org/apache/commons/validator/NameBean.java.NameBean.[String]getLastName()", "src/test/java/org/apache/commons/validator/NameBean.java.NameBean.[String]getMiddleName()", "src/test/java/org/apache/commons/validator/NameBean.java.NameBean.[void]setFirstName(String)", "src/test/java/org/apache/commons/validator/NameBean.java.NameBean.[void]setLastName(String)", "src/test/java/org/apache/commons/validator/NameBean.java.NameBean.[void]setMiddleName(String)"], "overrides": null, "attributes": [], "class_docstring": "\nValue object that contains a first name and last name.\n", "original_string": "public class NameBean {\n\n    protected String firstName;\n\n    protected String middleName;\n\n    protected String lastName;\n\n    public String getFirstName() {\n        return firstName;\n    }\n\n    public String getLastName() {\n        return lastName;\n    }\n\n    public String getMiddleName() {\n        return middleName;\n    }\n\n    public void setFirstName(final String firstName) {\n        this.firstName = firstName;\n    }\n\n    public void setLastName(final String lastName) {\n        this.lastName = lastName;\n    }\n\n    public void setMiddleName(final String middleName) {\n        this.middleName = middleName;\n    }\n\n}", "super_interfaces": [], "fields": [{"attribute_expression": "protected String firstName;", "docstring": "", "modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "type": "String", "name": "firstName", "syntax_pass": true}, {"attribute_expression": "protected String middleName;", "docstring": "", "modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "type": "String", "name": "middleName", "syntax_pass": true}, {"attribute_expression": "protected String lastName;", "docstring": "", "modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "type": "String", "name": "lastName", "syntax_pass": true}]}, {"uris": "src/test/java/org/apache/commons/validator/ParameterValidatorImpl.java.ParameterValidatorImpl", "name": "ParameterValidatorImpl", "file_path": "src/test/java/org/apache/commons/validator/ParameterValidatorImpl.java", "superclasses": "", "methods": ["[boolean]validateParameter(java.lang.Object,org.apache.commons.validator.Form,org.apache.commons.validator.Field,org.apache.commons.validator.Validator,org.apache.commons.validator.ValidatorAction,org.apache.commons.validator.ValidatorResults,java.util.Locale)"], "method_uris": ["src/test/java/org/apache/commons/validator/ParameterValidatorImpl.java.ParameterValidatorImpl.[boolean]validateParameter(java.lang.Object,org.apache.commons.validator.Form,org.apache.commons.validator.Field,org.apache.commons.validator.Validator,org.apache.commons.validator.ValidatorAction,org.apache.commons.validator.ValidatorResults,java.util.Locale)"], "overrides": null, "attributes": [], "class_docstring": "\nContains validation methods for different unit tests.\n", "original_string": "public class ParameterValidatorImpl {\n\n    /**\n     * ValidatorParameter is valid.\n     */\n    public static boolean validateParameter(final java.lang.Object bean, final org.apache.commons.validator.Form form,\n            final org.apache.commons.validator.Field field, final org.apache.commons.validator.Validator validator,\n            final org.apache.commons.validator.ValidatorAction action, final org.apache.commons.validator.ValidatorResults results,\n            final java.util.Locale locale) throws Exception {\n\n        return true;\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/org/apache/commons/validator/GenericTypeValidatorImpl.java.GenericTypeValidatorImpl", "name": "GenericTypeValidatorImpl", "file_path": "src/test/java/org/apache/commons/validator/GenericTypeValidatorImpl.java", "superclasses": "", "methods": ["[Byte]validateByte(Object,Field)", "[Byte]validateByte(Object,Field,Locale)", "[Date]validateDate(Object,Field)", "[Date]validateDate(Object,Field,Locale)", "[Double]validateDouble(Object,Field)", "[Double]validateDouble(Object,Field,Locale)", "[Float]validateFloat(Object,Field)", "[Float]validateFloat(Object,Field,Locale)", "[Integer]validateInt(Object,Field)", "[Integer]validateInt(Object,Field,Locale)", "[Long]validateLong(Object,Field)", "[Long]validateLong(Object,Field,Locale)", "[Short]validateShort(Object,Field)", "[Short]validateShort(Object,Field,Locale)"], "method_uris": ["src/test/java/org/apache/commons/validator/GenericTypeValidatorImpl.java.GenericTypeValidatorImpl.[Byte]validateByte(Object,Field)", "src/test/java/org/apache/commons/validator/GenericTypeValidatorImpl.java.GenericTypeValidatorImpl.[Byte]validateByte(Object,Field,Locale)", "src/test/java/org/apache/commons/validator/GenericTypeValidatorImpl.java.GenericTypeValidatorImpl.[Date]validateDate(Object,Field)", "src/test/java/org/apache/commons/validator/GenericTypeValidatorImpl.java.GenericTypeValidatorImpl.[Date]validateDate(Object,Field,Locale)", "src/test/java/org/apache/commons/validator/GenericTypeValidatorImpl.java.GenericTypeValidatorImpl.[Double]validateDouble(Object,Field)", "src/test/java/org/apache/commons/validator/GenericTypeValidatorImpl.java.GenericTypeValidatorImpl.[Double]validateDouble(Object,Field,Locale)", "src/test/java/org/apache/commons/validator/GenericTypeValidatorImpl.java.GenericTypeValidatorImpl.[Float]validateFloat(Object,Field)", "src/test/java/org/apache/commons/validator/GenericTypeValidatorImpl.java.GenericTypeValidatorImpl.[Float]validateFloat(Object,Field,Locale)", "src/test/java/org/apache/commons/validator/GenericTypeValidatorImpl.java.GenericTypeValidatorImpl.[Integer]validateInt(Object,Field)", "src/test/java/org/apache/commons/validator/GenericTypeValidatorImpl.java.GenericTypeValidatorImpl.[Integer]validateInt(Object,Field,Locale)", "src/test/java/org/apache/commons/validator/GenericTypeValidatorImpl.java.GenericTypeValidatorImpl.[Long]validateLong(Object,Field)", "src/test/java/org/apache/commons/validator/GenericTypeValidatorImpl.java.GenericTypeValidatorImpl.[Long]validateLong(Object,Field,Locale)", "src/test/java/org/apache/commons/validator/GenericTypeValidatorImpl.java.GenericTypeValidatorImpl.[Short]validateShort(Object,Field)", "src/test/java/org/apache/commons/validator/GenericTypeValidatorImpl.java.GenericTypeValidatorImpl.[Short]validateShort(Object,Field,Locale)"], "overrides": null, "attributes": [], "class_docstring": "\nContains validation methods for different unit tests.\n", "original_string": "public class GenericTypeValidatorImpl {\n\n    /**\n     * Checks if the field can be successfully converted to a {@code byte}.\n     *\n     * @param bean  The value validation is being performed on.\n     * @param field the field to use\n     * @return boolean If the field can be successfully converted to a {@code byte} {@code true} is returned. Otherwise {@code false}.\n     */\n    public static Byte validateByte(final Object bean, final Field field) {\n        final String value = ValidatorUtils.getValueAsString(bean, field.getProperty());\n\n        return GenericTypeValidator.formatByte(value);\n    }\n\n    /**\n     * Checks if the field can be successfully converted to a {@code byte}.\n     *\n     * @param bean  The value validation is being performed on.\n     * @param field the field to use\n     * @return boolean If the field can be successfully converted to a {@code byte} {@code true} is returned. Otherwise {@code false}.\n     */\n    public static Byte validateByte(final Object bean, final Field field, final Locale locale) {\n        final String value = ValidatorUtils.getValueAsString(bean, field.getProperty());\n\n        return GenericTypeValidator.formatByte(value, locale);\n    }\n\n    /**\n     * Checks if the field can be successfully converted to a {@code date}.\n     *\n     * @param bean  The value validation is being performed on.\n     * @param field the field to use\n     * @return boolean If the field can be successfully converted to a {@code date} {@code true} is returned. Otherwise {@code false}.\n     */\n    public static Date validateDate(final Object bean, final Field field) {\n        final String value = ValidatorUtils.getValueAsString(bean, field.getProperty());\n        final String datePattern = field.getVarValue(\"datePattern\");\n        final String datePatternStrict = field.getVarValue(\"datePatternStrict\");\n\n        Date result = null;\n        if (datePattern != null && !datePattern.isEmpty()) {\n            result = GenericTypeValidator.formatDate(value, datePattern, false);\n        } else if (datePatternStrict != null && !datePatternStrict.isEmpty()) {\n            result = GenericTypeValidator.formatDate(value, datePatternStrict, true);\n        }\n\n        return result;\n    }\n\n    /**\n     * Checks if the field can be successfully converted to a {@code date}.\n     *\n     * @param bean  The value validation is being performed on.\n     * @param field the field to use\n     * @return boolean If the field can be successfully converted to a {@code date} {@code true} is returned. Otherwise {@code false}.\n     */\n    public static Date validateDate(final Object bean, final Field field, final Locale locale) {\n        final String value = ValidatorUtils.getValueAsString(bean, field.getProperty());\n\n        return GenericTypeValidator.formatDate(value, locale);\n    }\n\n    /**\n     * Checks if the field can be successfully converted to a {@code double}.\n     *\n     * @param bean  The value validation is being performed on.\n     * @param field the field to use\n     * @return boolean If the field can be successfully converted to a {@code double} {@code true} is returned. Otherwise {@code false}.\n     */\n    public static Double validateDouble(final Object bean, final Field field) {\n        final String value = ValidatorUtils.getValueAsString(bean, field.getProperty());\n\n        return GenericTypeValidator.formatDouble(value);\n    }\n\n    /**\n     * Checks if the field can be successfully converted to a {@code double}.\n     *\n     * @param bean  The value validation is being performed on.\n     * @param field the field to use\n     * @return boolean If the field can be successfully converted to a {@code double} {@code true} is returned. Otherwise {@code false}.\n     */\n    public static Double validateDouble(final Object bean, final Field field, final Locale locale) {\n        final String value = ValidatorUtils.getValueAsString(bean, field.getProperty());\n\n        return GenericTypeValidator.formatDouble(value, locale);\n    }\n\n    /**\n     * Checks if the field can be successfully converted to a {@code float}.\n     *\n     * @param bean  The value validation is being performed on.\n     * @param field the field to use\n     * @return boolean If the field can be successfully converted to a {@code float} {@code true} is returned. Otherwise {@code false}.\n     */\n    public static Float validateFloat(final Object bean, final Field field) {\n        final String value = ValidatorUtils.getValueAsString(bean, field.getProperty());\n\n        return GenericTypeValidator.formatFloat(value);\n    }\n\n    /**\n     * Checks if the field can be successfully converted to a {@code float}.\n     *\n     * @param bean  The value validation is being performed on.\n     * @param field the field to use\n     * @return boolean If the field can be successfully converted to a {@code float} {@code true} is returned. Otherwise {@code false}.\n     */\n    public static Float validateFloat(final Object bean, final Field field, final Locale locale) {\n        final String value = ValidatorUtils.getValueAsString(bean, field.getProperty());\n\n        return GenericTypeValidator.formatFloat(value, locale);\n    }\n\n    /**\n     * Checks if the field can be successfully converted to a {@code int}.\n     *\n     * @param bean  The value validation is being performed on.\n     * @param field the field to use\n     * @return boolean If the field can be successfully converted to a {@code int} {@code true} is returned. Otherwise {@code false}.\n     */\n    public static Integer validateInt(final Object bean, final Field field) {\n        final String value = ValidatorUtils.getValueAsString(bean, field.getProperty());\n\n        return GenericTypeValidator.formatInt(value);\n    }\n\n    /**\n     * Checks if the field can be successfully converted to a {@code int}.\n     *\n     * @param bean  The value validation is being performed on.\n     * @param field the field to use\n     * @return boolean If the field can be successfully converted to a {@code int} {@code true} is returned. Otherwise {@code false}.\n     */\n    public static Integer validateInt(final Object bean, final Field field, final Locale locale) {\n        final String value = ValidatorUtils.getValueAsString(bean, field.getProperty());\n\n        return GenericTypeValidator.formatInt(value, locale);\n    }\n\n    /**\n     * Checks if the field can be successfully converted to a {@code long}.\n     *\n     * @param bean  The value validation is being performed on.\n     * @param field the field to use\n     * @return boolean If the field can be successfully converted to a {@code long} {@code true} is returned. Otherwise {@code false}.\n     */\n    public static Long validateLong(final Object bean, final Field field) {\n        final String value = ValidatorUtils.getValueAsString(bean, field.getProperty());\n\n        return GenericTypeValidator.formatLong(value);\n    }\n\n    /**\n     * Checks if the field can be successfully converted to a {@code long}.\n     *\n     * @param bean  The value validation is being performed on.\n     * @param field the field to use\n     * @return boolean If the field can be successfully converted to a {@code long} {@code true} is returned. Otherwise {@code false}.\n     */\n    public static Long validateLong(final Object bean, final Field field, final Locale locale) {\n        final String value = ValidatorUtils.getValueAsString(bean, field.getProperty());\n\n        return GenericTypeValidator.formatLong(value, locale);\n    }\n\n    /**\n     * Checks if the field can be successfully converted to a {@code short}.\n     *\n     * @param bean  The value validation is being performed on.\n     * @param field the field to use\n     * @return boolean If the field can be successfully converted to a {@code short} {@code true} is returned. Otherwise {@code false}.\n     */\n    public static Short validateShort(final Object bean, final Field field) {\n        final String value = ValidatorUtils.getValueAsString(bean, field.getProperty());\n\n        return GenericTypeValidator.formatShort(value);\n    }\n\n    /**\n     * Checks if the field can be successfully converted to a {@code short}.\n     *\n     * @param bean  The value validation is being performed on.\n     * @param field the field to use\n     * @return boolean If the field can be successfully converted to a {@code short} {@code true} is returned. Otherwise {@code false}.\n     */\n    public static Short validateShort(final Object bean, final Field field, final Locale locale) {\n        final String value = ValidatorUtils.getValueAsString(bean, field.getProperty());\n\n        return GenericTypeValidator.formatShort(value, locale);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/org/apache/commons/validator/GenericValidatorImpl.java.GenericValidatorImpl", "name": "GenericValidatorImpl", "file_path": "src/test/java/org/apache/commons/validator/GenericValidatorImpl.java", "superclasses": "", "methods": ["[boolean]isStringOrNull(Object)", "[boolean]validateByte(Object,Field)", "[boolean]validateDouble(Object,Field)", "[boolean]validateEmail(Object,Field)", "[boolean]validateFloat(Object,Field)", "[boolean]validateInt(Object,Field)", "[boolean]validateLong(Object,Field)", "[boolean]validatePositive(Object,Field)", "[boolean]validateRaiseException(Object,Field)", "[boolean]validateRequired(Object,Field)", "[boolean]validateRequiredIf(Object,Field,Validator)", "[boolean]validateShort(Object,Field)"], "method_uris": ["src/test/java/org/apache/commons/validator/GenericValidatorImpl.java.GenericValidatorImpl.[boolean]isStringOrNull(Object)", "src/test/java/org/apache/commons/validator/GenericValidatorImpl.java.GenericValidatorImpl.[boolean]validateByte(Object,Field)", "src/test/java/org/apache/commons/validator/GenericValidatorImpl.java.GenericValidatorImpl.[boolean]validateDouble(Object,Field)", "src/test/java/org/apache/commons/validator/GenericValidatorImpl.java.GenericValidatorImpl.[boolean]validateEmail(Object,Field)", "src/test/java/org/apache/commons/validator/GenericValidatorImpl.java.GenericValidatorImpl.[boolean]validateFloat(Object,Field)", "src/test/java/org/apache/commons/validator/GenericValidatorImpl.java.GenericValidatorImpl.[boolean]validateInt(Object,Field)", "src/test/java/org/apache/commons/validator/GenericValidatorImpl.java.GenericValidatorImpl.[boolean]validateLong(Object,Field)", "src/test/java/org/apache/commons/validator/GenericValidatorImpl.java.GenericValidatorImpl.[boolean]validatePositive(Object,Field)", "src/test/java/org/apache/commons/validator/GenericValidatorImpl.java.GenericValidatorImpl.[boolean]validateRaiseException(Object,Field)", "src/test/java/org/apache/commons/validator/GenericValidatorImpl.java.GenericValidatorImpl.[boolean]validateRequired(Object,Field)", "src/test/java/org/apache/commons/validator/GenericValidatorImpl.java.GenericValidatorImpl.[boolean]validateRequiredIf(Object,Field,Validator)", "src/test/java/org/apache/commons/validator/GenericValidatorImpl.java.GenericValidatorImpl.[boolean]validateShort(Object,Field)"], "overrides": null, "attributes": [], "class_docstring": "\nContains validation methods for different unit tests.\n", "original_string": "public class GenericValidatorImpl {\n\n    public static final String FIELD_TEST_NULL = \"NULL\";\n\n    public static final String FIELD_TEST_NOTNULL = \"NOTNULL\";\n\n    public static final String FIELD_TEST_EQUAL = \"EQUAL\";\n\n    private static boolean isStringOrNull(final Object o) {\n        if (o == null) {\n            return true; // TODO this condition is not exercised by any tests currently\n        }\n        return o instanceof String;\n    }\n\n    /**\n     * Checks if the field can be successfully converted to a {@code byte}.\n     *\n     * @param bean  The value validation is being performed on.\n     * @param field the field to use\n     * @return boolean If the field can be successfully converted to a {@code byte} {@code true} is returned. Otherwise {@code false}.\n     */\n    public static boolean validateByte(final Object bean, final Field field) {\n        final String value = ValidatorUtils.getValueAsString(bean, field.getProperty());\n\n        return GenericValidator.isByte(value);\n    }\n\n    /**\n     * Checks if the field can be successfully converted to a {@code double}.\n     *\n     * @param bean  The value validation is being performed on.\n     * @param field the field to use\n     * @return boolean If the field can be successfully converted to a {@code double} {@code true} is returned. Otherwise {@code false}.\n     */\n    public static boolean validateDouble(final Object bean, final Field field) {\n        final String value = ValidatorUtils.getValueAsString(bean, field.getProperty());\n\n        return GenericValidator.isDouble(value);\n    }\n\n    /**\n     * Checks if the field is an e-mail address.\n     *\n     * @param bean  The value validation is being performed on.\n     * @param field the field to use\n     * @return boolean If the field is an e-mail address {@code true} is returned. Otherwise {@code false}.\n     */\n    public static boolean validateEmail(final Object bean, final Field field) {\n        final String value = ValidatorUtils.getValueAsString(bean, field.getProperty());\n\n        return GenericValidator.isEmail(value);\n    }\n\n    /**\n     * Checks if the field can be successfully converted to a {@code float}.\n     *\n     * @param bean  The value validation is being performed on.\n     * @param field the field to use\n     * @return boolean If the field can be successfully converted to a {@code float} {@code true} is returned. Otherwise {@code false}.\n     */\n    public static boolean validateFloat(final Object bean, final Field field) {\n        final String value = ValidatorUtils.getValueAsString(bean, field.getProperty());\n\n        return GenericValidator.isFloat(value);\n    }\n\n    /**\n     * Checks if the field can be successfully converted to a {@code int}.\n     *\n     * @param bean  The value validation is being performed on.\n     * @param field the field to use\n     * @return boolean If the field can be successfully converted to a {@code int} {@code true} is returned. Otherwise {@code false}.\n     */\n    public static boolean validateInt(final Object bean, final Field field) {\n        final String value = ValidatorUtils.getValueAsString(bean, field.getProperty());\n\n        return GenericValidator.isInt(value);\n    }\n\n    /**\n     * Checks if the field can be successfully converted to a {@code long}.\n     *\n     * @param bean  The value validation is being performed on.\n     * @param field the field to use\n     * @return boolean If the field can be successfully converted to a {@code long} {@code true} is returned. Otherwise {@code false}.\n     */\n    public static boolean validateLong(final Object bean, final Field field) {\n        final String value = ValidatorUtils.getValueAsString(bean, field.getProperty());\n\n        return GenericValidator.isLong(value);\n    }\n\n    /**\n     * Checks if field is positive assuming it is an integer\n     *\n     * @param bean  The value validation is being performed on.\n     * @param field Description of the field to be evaluated\n     * @return boolean If the integer field is greater than zero, returns true, otherwise returns false.\n     */\n    public static boolean validatePositive(final Object bean, final Field field) {\n        final String value = ValidatorUtils.getValueAsString(bean, field.getProperty());\n\n        return GenericTypeValidator.formatInt(value).intValue() > 0;\n    }\n\n    /**\n     * Throws a runtime exception if the value of the argument is \"RUNTIME\", an exception if the value of the argument is \"CHECKED\", and a ValidatorException\n     * otherwise.\n     *\n     * @throws RuntimeException   with \"RUNTIME-EXCEPTION as message\" if value is \"RUNTIME\"\n     * @throws Exception          with \"CHECKED-EXCEPTION\" as message if value is \"CHECKED\"\n     * @throws ValidatorException with \"VALIDATOR-EXCEPTION\" as message otherwise\n     */\n    public static boolean validateRaiseException(final Object bean, final Field field) throws Exception {\n\n        final String value = ValidatorUtils.getValueAsString(bean, field.getProperty());\n\n        if (\"RUNTIME\".equals(value)) {\n            throw new RuntimeException(\"RUNTIME-EXCEPTION\");\n\n        }\n        if (\"CHECKED\".equals(value)) {\n            throw new Exception(\"CHECKED-EXCEPTION\");\n\n        }\n        throw new ValidatorException(\"VALIDATOR-EXCEPTION\");\n    }\n\n    /**\n     * Checks if the field is required.\n     *\n     * @return boolean If the field isn't {@code null} and has a length greater than zero, {@code true} is returned. Otherwise {@code false}.\n     */\n    public static boolean validateRequired(final Object bean, final Field field) {\n        final String value = ValidatorUtils.getValueAsString(bean, field.getProperty());\n\n        return !GenericValidator.isBlankOrNull(value);\n    }\n\n    public static boolean validateRequiredIf(final Object bean, final Field field, final Validator validator) {\n\n        final Object form = validator.getParameterValue(Validator.BEAN_PARAM);\n        String value = null;\n        boolean required = false;\n        if (isStringOrNull(bean)) {\n            value = (String) bean;\n        } else {\n            value = ValidatorUtils.getValueAsString(bean, field.getProperty());\n        }\n        int i = 0;\n        String fieldJoin = \"AND\";\n        if (!GenericValidator.isBlankOrNull(field.getVarValue(\"fieldJoin\"))) {\n            fieldJoin = field.getVarValue(\"fieldJoin\");\n        }\n        if (fieldJoin.equalsIgnoreCase(\"AND\")) {\n            required = true;\n        }\n        while (!GenericValidator.isBlankOrNull(field.getVarValue(\"field[\" + i + \"]\"))) {\n            String dependProp = field.getVarValue(\"field[\" + i + \"]\");\n            final String dependTest = field.getVarValue(\"fieldTest[\" + i + \"]\");\n            final String dependTestValue = field.getVarValue(\"fieldValue[\" + i + \"]\");\n            String dependIndexed = field.getVarValue(\"fieldIndexed[\" + i + \"]\");\n            if (dependIndexed == null) {\n                dependIndexed = \"false\";\n            }\n            boolean thisRequired = false;\n            if (field.isIndexed() && Boolean.parseBoolean(dependIndexed)) {\n                final String key = field.getKey();\n                if (key.contains(\"[\") && key.contains(\"]\")) {\n                    final String ind = key.substring(0, key.indexOf(\".\") + 1);\n                    dependProp = ind + dependProp;\n                }\n            }\n            final String dependVal = ValidatorUtils.getValueAsString(form, dependProp);\n            if (dependTest.equals(FIELD_TEST_NULL)) {\n                if (dependVal != null && !dependVal.isEmpty()) {\n                    thisRequired = false;\n                } else {\n                    thisRequired = true;\n                }\n            }\n            if (dependTest.equals(FIELD_TEST_NOTNULL)) {\n                if (dependVal != null && !dependVal.isEmpty()) {\n                    thisRequired = true;\n                } else {\n                    thisRequired = false;\n                }\n            }\n            if (dependTest.equals(FIELD_TEST_EQUAL)) {\n                thisRequired = dependTestValue.equalsIgnoreCase(dependVal);\n            }\n            if (fieldJoin.equalsIgnoreCase(\"AND\")) {\n                required = required && thisRequired;\n            } else {\n                required = required || thisRequired;\n            }\n            i++;\n        }\n        if (required) {\n            if (value != null && !value.isEmpty()) {\n                return true;\n            }\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Checks if the field can be successfully converted to a {@code short}.\n     *\n     * @param bean  The value validation is being performed on.\n     * @param field the field to use\n     * @return boolean If the field can be successfully converted to a {@code short} {@code true} is returned. Otherwise {@code false}.\n     */\n    public static boolean validateShort(final Object bean, final Field field) {\n        final String value = ValidatorUtils.getValueAsString(bean, field.getProperty());\n\n        return GenericValidator.isShort(value);\n    }\n\n}", "super_interfaces": [], "fields": [{"attribute_expression": "public static final String FIELD_TEST_NULL = \"NULL\";", "docstring": "", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "String", "name": "FIELD_TEST_NULL = \"NULL\"", "syntax_pass": true}, {"attribute_expression": "public static final String FIELD_TEST_NOTNULL = \"NOTNULL\";", "docstring": "", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "String", "name": "FIELD_TEST_NOTNULL = \"NOTNULL\"", "syntax_pass": true}, {"attribute_expression": "public static final String FIELD_TEST_EQUAL = \"EQUAL\";", "docstring": "", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "String", "name": "FIELD_TEST_EQUAL = \"EQUAL\"", "syntax_pass": true}]}, {"uris": "src/test/java/org/apache/commons/validator/ValueBean.java.ValueBean", "name": "ValueBean", "file_path": "src/test/java/org/apache/commons/validator/ValueBean.java", "superclasses": "", "methods": ["[String]getValue()", "[void]setValue(String)"], "method_uris": ["src/test/java/org/apache/commons/validator/ValueBean.java.ValueBean.[String]getValue()", "src/test/java/org/apache/commons/validator/ValueBean.java.ValueBean.[void]setValue(String)"], "overrides": null, "attributes": [], "class_docstring": "\nValue object for storing a value to run tests on.\n", "original_string": "public class ValueBean {\n\n    protected String value;\n\n    /**\n     * Gets the value.\n     */\n    public String getValue() {\n        return value;\n    }\n\n    /**\n     * Sets the value.\n     */\n    public void setValue(final String value) {\n        this.value = value;\n    }\n\n}", "super_interfaces": [], "fields": [{"attribute_expression": "protected String value;", "docstring": "", "modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "type": "String", "name": "value", "syntax_pass": true}]}, {"uris": "src/test/java/org/apache/commons/validator/routines/checkdigit/CASNumberCheckDigitTest.java.CASNumberCheckDigitTest", "name": "CASNumberCheckDigitTest", "file_path": "src/test/java/org/apache/commons/validator/routines/checkdigit/CASNumberCheckDigitTest.java", "superclasses": "AbstractCheckDigitTest", "methods": ["[String]removeCheckDigit(String)", "[void]setUp()"], "method_uris": ["src/test/java/org/apache/commons/validator/routines/checkdigit/CASNumberCheckDigitTest.java.CASNumberCheckDigitTest.[String]removeCheckDigit(String)", "src/test/java/org/apache/commons/validator/routines/checkdigit/CASNumberCheckDigitTest.java.CASNumberCheckDigitTest.[void]setUp()"], "overrides": null, "attributes": [], "class_docstring": "\nCAS Number Check Digit Tests.\n", "original_string": "public class CASNumberCheckDigitTest extends AbstractCheckDigitTest {\n\n    private static final String MIN = \"00-01-1\"; // theoretical\n    private static final String WATER = \"7732-18-5\";\n    private static final String ETHANOL = \"64-17-5\";\n    private static final String ASPIRIN = \"50-78-2\";\n    private static final String COFFEIN = \"58-08-2\";\n    private static final String FORMALDEHYDE = \"50-00-0\";\n    private static final String DEXAMETHASONE = \"50-02-2\";\n    private static final String ARSENIC = \"7440-38-2\";\n    private static final String ASBESTOS = \"1332-21-4\";\n    private static final String MAX = \"9999999-99-5\"; // theoretical\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected String removeCheckDigit(final String code) {\n        final String cde = (String) CASNumberCheckDigit.REGEX_VALIDATOR.validate(code);\n        if (cde == null || cde.length() <= checkDigitLth) {\n            return null;\n        }\n        return cde.substring(0, cde.length() - checkDigitLth);\n    }\n\n    /**\n     * Sets up routine & valid codes.\n     */\n    @BeforeEach\n    protected void setUp() {\n        routine = CASNumberCheckDigit.getInstance();\n        valid = new String[] {MIN, WATER, ETHANOL, ASPIRIN, COFFEIN, FORMALDEHYDE, DEXAMETHASONE, ARSENIC, ASBESTOS, MAX};\n    }\n\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final String MIN = \"00-01-1\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "MIN = \"00-01-1\"", "syntax_pass": true}, {"attribute_expression": "private static final String WATER = \"7732-18-5\";", "docstring": " theoretical", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "WATER = \"7732-18-5\"", "syntax_pass": true}, {"attribute_expression": "private static final String ETHANOL = \"64-17-5\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "ETHANOL = \"64-17-5\"", "syntax_pass": true}, {"attribute_expression": "private static final String ASPIRIN = \"50-78-2\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "ASPIRIN = \"50-78-2\"", "syntax_pass": true}, {"attribute_expression": "private static final String COFFEIN = \"58-08-2\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "COFFEIN = \"58-08-2\"", "syntax_pass": true}, {"attribute_expression": "private static final String FORMALDEHYDE = \"50-00-0\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "FORMALDEHYDE = \"50-00-0\"", "syntax_pass": true}, {"attribute_expression": "private static final String DEXAMETHASONE = \"50-02-2\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "DEXAMETHASONE = \"50-02-2\"", "syntax_pass": true}, {"attribute_expression": "private static final String ARSENIC = \"7440-38-2\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "ARSENIC = \"7440-38-2\"", "syntax_pass": true}, {"attribute_expression": "private static final String ASBESTOS = \"1332-21-4\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "ASBESTOS = \"1332-21-4\"", "syntax_pass": true}, {"attribute_expression": "private static final String MAX = \"9999999-99-5\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "MAX = \"9999999-99-5\"", "syntax_pass": true}]}, {"uris": "src/test/java/org/apache/commons/validator/routines/checkdigit/ISBN10CheckDigitTest.java.ISBN10CheckDigitTest", "name": "ISBN10CheckDigitTest", "file_path": "src/test/java/org/apache/commons/validator/routines/checkdigit/ISBN10CheckDigitTest.java", "superclasses": "AbstractCheckDigitTest", "methods": ["[void]setUp()"], "method_uris": ["src/test/java/org/apache/commons/validator/routines/checkdigit/ISBN10CheckDigitTest.java.ISBN10CheckDigitTest.[void]setUp()"], "overrides": null, "attributes": [], "class_docstring": "\nISBN-10 Check Digit Test.\n", "original_string": "public class ISBN10CheckDigitTest extends AbstractCheckDigitTest {\n\n    /**\n     * Sets up routine & valid codes.\n     */\n    @BeforeEach\n    protected void setUp() {\n        routine = ISBN10CheckDigit.ISBN10_CHECK_DIGIT;\n        valid = new String[] { \"1930110995\", \"020163385X\", \"1932394354\", \"1590596277\" };\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/org/apache/commons/validator/routines/checkdigit/ISSNCheckDigitTest.java.ISSNCheckDigitTest", "name": "ISSNCheckDigitTest", "file_path": "src/test/java/org/apache/commons/validator/routines/checkdigit/ISSNCheckDigitTest.java", "superclasses": "AbstractCheckDigitTest", "methods": ["[void]setUp()"], "method_uris": ["src/test/java/org/apache/commons/validator/routines/checkdigit/ISSNCheckDigitTest.java.ISSNCheckDigitTest.[void]setUp()"], "overrides": null, "attributes": [], "class_docstring": "\nISSN Check Digit Test.\n", "original_string": "public class ISSNCheckDigitTest extends AbstractCheckDigitTest {\n\n    /**\n     * Sets up routine & valid codes.\n     */\n    @BeforeEach\n    protected void setUp() {\n        routine = ISSNCheckDigit.ISSN_CHECK_DIGIT;\n        valid = new String[] { \"03178471\", \"1050124X\", \"15626865\", \"10637710\", \"17487188\", \"02642875\", \"17500095\", \"11881534\", \"19111479\", \"19111460\",\n                \"00016772\", \"1365201X\", };\n        invalid = new String[] { \"03178472\", // wrong check\n                \"1050-124X\", // format char\n                \" 1365201X\", \"1365201X \", \" 1365201X \", };\n        missingMessage = \"Code is missing\";\n        zeroSum = \"00000000\";\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/org/apache/commons/validator/routines/checkdigit/EAN13CheckDigitTest.java.EAN13CheckDigitTest", "name": "EAN13CheckDigitTest", "file_path": "src/test/java/org/apache/commons/validator/routines/checkdigit/EAN13CheckDigitTest.java", "superclasses": "AbstractCheckDigitTest", "methods": ["[void]setUp()"], "method_uris": ["src/test/java/org/apache/commons/validator/routines/checkdigit/EAN13CheckDigitTest.java.EAN13CheckDigitTest.[void]setUp()"], "overrides": null, "attributes": [], "class_docstring": "\nEAN-13 Check Digit Test.\n", "original_string": "public class EAN13CheckDigitTest extends AbstractCheckDigitTest {\n\n    /**\n     * Sets up routine & valid codes.\n     */\n    @BeforeEach\n    protected void setUp() {\n        routine = EAN13CheckDigit.EAN13_CHECK_DIGIT;\n        valid = new String[] { \"9780072129519\", \"9780764558313\", \"4025515373438\", \"0095673400332\" };\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/org/apache/commons/validator/routines/checkdigit/ModulusTenEAN13CheckDigitTest.java.ModulusTenEAN13CheckDigitTest", "name": "ModulusTenEAN13CheckDigitTest", "file_path": "src/test/java/org/apache/commons/validator/routines/checkdigit/ModulusTenEAN13CheckDigitTest.java", "superclasses": "AbstractCheckDigitTest", "methods": ["[void]setUp()"], "method_uris": ["src/test/java/org/apache/commons/validator/routines/checkdigit/ModulusTenEAN13CheckDigitTest.java.ModulusTenEAN13CheckDigitTest.[void]setUp()"], "overrides": null, "attributes": [], "class_docstring": "\nModulusTenCheckDigit EAN-13 Test.\n", "original_string": "public class ModulusTenEAN13CheckDigitTest extends AbstractCheckDigitTest {\n\n    /**\n     * Sets up routine & valid codes.\n     */\n    @BeforeEach\n    protected void setUp() {\n        routine = new ModulusTenCheckDigit(new int[] { 1, 3 }, true);\n        valid = new String[] { \"9780072129519\", \"9780764558313\", \"4025515373438\", \"0095673400332\" };\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/org/apache/commons/validator/routines/checkdigit/ModulusTenABACheckDigitTest.java.ModulusTenABACheckDigitTest", "name": "ModulusTenABACheckDigitTest", "file_path": "src/test/java/org/apache/commons/validator/routines/checkdigit/ModulusTenABACheckDigitTest.java", "superclasses": "AbstractCheckDigitTest", "methods": ["[void]setUp()"], "method_uris": ["src/test/java/org/apache/commons/validator/routines/checkdigit/ModulusTenABACheckDigitTest.java.ModulusTenABACheckDigitTest.[void]setUp()"], "overrides": null, "attributes": [], "class_docstring": "\nModulusTenCheckDigit ABA Number Check Digit Test.\n", "original_string": "public class ModulusTenABACheckDigitTest extends AbstractCheckDigitTest {\n\n    /**\n     * Sets up routine & valid codes.\n     */\n    @BeforeEach\n    protected void setUp() {\n        routine = new ModulusTenCheckDigit(new int[] { 1, 7, 3 }, true);\n        valid = new String[] { \"123456780\", \"123123123\", \"011000015\", \"111000038\", \"231381116\", \"121181976\" };\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/org/apache/commons/validator/routines/checkdigit/ABANumberCheckDigitTest.java.ABANumberCheckDigitTest", "name": "ABANumberCheckDigitTest", "file_path": "src/test/java/org/apache/commons/validator/routines/checkdigit/ABANumberCheckDigitTest.java", "superclasses": "AbstractCheckDigitTest", "methods": ["[void]setUp()"], "method_uris": ["src/test/java/org/apache/commons/validator/routines/checkdigit/ABANumberCheckDigitTest.java.ABANumberCheckDigitTest.[void]setUp()"], "overrides": null, "attributes": [], "class_docstring": "\nABA Number Check Digit Test.\n", "original_string": "public class ABANumberCheckDigitTest extends AbstractCheckDigitTest {\n\n    /**\n     * Sets up routine & valid codes.\n     */\n    @BeforeEach\n    protected void setUp() {\n        routine = ABANumberCheckDigit.ABAN_CHECK_DIGIT;\n        valid = new String[] { \"123456780\", \"123123123\", \"011000015\", \"111000038\", \"231381116\", \"121181976\" };\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/org/apache/commons/validator/routines/checkdigit/ECNumberCheckDigitTest.java.ECNumberCheckDigitTest", "name": "ECNumberCheckDigitTest", "file_path": "src/test/java/org/apache/commons/validator/routines/checkdigit/ECNumberCheckDigitTest.java", "superclasses": "AbstractCheckDigitTest", "methods": ["[String]removeCheckDigit(String)", "[void]setUp()"], "method_uris": ["src/test/java/org/apache/commons/validator/routines/checkdigit/ECNumberCheckDigitTest.java.ECNumberCheckDigitTest.[String]removeCheckDigit(String)", "src/test/java/org/apache/commons/validator/routines/checkdigit/ECNumberCheckDigitTest.java.ECNumberCheckDigitTest.[void]setUp()"], "overrides": null, "attributes": [], "class_docstring": "\nEC Number Check Digit Tests.\n", "original_string": "public class ECNumberCheckDigitTest extends AbstractCheckDigitTest {\n\n    private static final String MIN = \"000-001-6\"; // theoretical\n    private static final String FORMALDEHYDE = \"200-001-8\"; // this is the first entry in EINECS\n    private static final String DEXAMETHASONE = \"200-003-9\";\n    private static final String ARSENIC = \"231-148-6\";\n    private static final String ASBESTOS = \"603-721-4\";\n    private static final String MAX = \"999-999-2\"; // theoretical\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected String removeCheckDigit(final String code) {\n        final String cde = (String) ECNumberCheckDigit.REGEX_VALIDATOR.validate(code);\n        if (cde == null || cde.length() <= checkDigitLth) {\n            return null;\n        }\n        return cde.substring(0, cde.length() - checkDigitLth);\n    }\n\n    /**\n     * Sets up routine & valid codes.\n     */\n    @BeforeEach\n    protected void setUp() {\n        routine = ECNumberCheckDigit.getInstance();\n        valid = new String[] {MIN, FORMALDEHYDE, DEXAMETHASONE, ARSENIC, ASBESTOS, MAX};\n    }\n\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final String MIN = \"000-001-6\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "MIN = \"000-001-6\"", "syntax_pass": true}, {"attribute_expression": "private static final String FORMALDEHYDE = \"200-001-8\";", "docstring": " theoretical", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "FORMALDEHYDE = \"200-001-8\"", "syntax_pass": true}, {"attribute_expression": "private static final String DEXAMETHASONE = \"200-003-9\";", "docstring": " this is the first entry in EINECS", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "DEXAMETHASONE = \"200-003-9\"", "syntax_pass": true}, {"attribute_expression": "private static final String ARSENIC = \"231-148-6\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "ARSENIC = \"231-148-6\"", "syntax_pass": true}, {"attribute_expression": "private static final String ASBESTOS = \"603-721-4\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "ASBESTOS = \"603-721-4\"", "syntax_pass": true}, {"attribute_expression": "private static final String MAX = \"999-999-2\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "MAX = \"999-999-2\"", "syntax_pass": true}]}, {"uris": "src/test/java/org/apache/commons/validator/routines/checkdigit/ModulusTenLuhnCheckDigitTest.java.ModulusTenLuhnCheckDigitTest", "name": "ModulusTenLuhnCheckDigitTest", "file_path": "src/test/java/org/apache/commons/validator/routines/checkdigit/ModulusTenLuhnCheckDigitTest.java", "superclasses": "AbstractCheckDigitTest", "methods": ["[void]setUp()"], "method_uris": ["src/test/java/org/apache/commons/validator/routines/checkdigit/ModulusTenLuhnCheckDigitTest.java.ModulusTenLuhnCheckDigitTest.[void]setUp()"], "overrides": null, "attributes": [], "class_docstring": "\nModulusTenCheckDigit Luhn Test.\n", "original_string": "public class ModulusTenLuhnCheckDigitTest extends AbstractCheckDigitTest {\n\n    private static final String VALID_VISA = \"4417123456789113\";\n    private static final String VALID_SHORT_VISA = \"4222222222222\";\n    private static final String VALID_AMEX = \"378282246310005\";\n    private static final String VALID_MASTERCARD = \"5105105105105100\";\n    private static final String VALID_DISCOVER = \"6011000990139424\";\n    private static final String VALID_DINERS = \"30569309025904\";\n\n    /**\n     * Sets up routine & valid codes.\n     */\n    @BeforeEach\n    protected void setUp() {\n        routine = new ModulusTenCheckDigit(new int[] { 1, 2 }, true, true);\n\n        valid = new String[] { VALID_VISA, VALID_SHORT_VISA, VALID_AMEX, VALID_MASTERCARD, VALID_DISCOVER, VALID_DINERS };\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final String VALID_VISA = \"4417123456789113\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "VALID_VISA = \"4417123456789113\"", "syntax_pass": true}, {"attribute_expression": "private static final String VALID_SHORT_VISA = \"4222222222222\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "VALID_SHORT_VISA = \"4222222222222\"", "syntax_pass": true}, {"attribute_expression": "private static final String VALID_AMEX = \"378282246310005\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "VALID_AMEX = \"378282246310005\"", "syntax_pass": true}, {"attribute_expression": "private static final String VALID_MASTERCARD = \"5105105105105100\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "VALID_MASTERCARD = \"5105105105105100\"", "syntax_pass": true}, {"attribute_expression": "private static final String VALID_DISCOVER = \"6011000990139424\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "VALID_DISCOVER = \"6011000990139424\"", "syntax_pass": true}, {"attribute_expression": "private static final String VALID_DINERS = \"30569309025904\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "VALID_DINERS = \"30569309025904\"", "syntax_pass": true}]}, {"uris": "src/test/java/org/apache/commons/validator/routines/checkdigit/LuhnCheckDigitTest.java.LuhnCheckDigitTest", "name": "LuhnCheckDigitTest", "file_path": "src/test/java/org/apache/commons/validator/routines/checkdigit/LuhnCheckDigitTest.java", "superclasses": "AbstractCheckDigitTest", "methods": ["[void]setUp()"], "method_uris": ["src/test/java/org/apache/commons/validator/routines/checkdigit/LuhnCheckDigitTest.java.LuhnCheckDigitTest.[void]setUp()"], "overrides": null, "attributes": [], "class_docstring": "\nLuhn Check Digit Test.\n", "original_string": "public class LuhnCheckDigitTest extends AbstractCheckDigitTest {\n\n    private static final String VALID_VISA = \"4417123456789113\";\n    private static final String VALID_SHORT_VISA = \"4222222222222\";\n    private static final String VALID_AMEX = \"378282246310005\";\n    private static final String VALID_MASTERCARD = \"5105105105105100\";\n    private static final String VALID_DISCOVER = \"6011000990139424\";\n    private static final String VALID_DINERS = \"30569309025904\";\n\n    /**\n     * Sets up routine & valid codes.\n     */\n    @BeforeEach\n    protected void setUp() {\n\n        routine = LuhnCheckDigit.LUHN_CHECK_DIGIT;\n\n        valid = new String[] { VALID_VISA, VALID_SHORT_VISA, VALID_AMEX, VALID_MASTERCARD, VALID_DISCOVER, VALID_DINERS };\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final String VALID_VISA = \"4417123456789113\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "VALID_VISA = \"4417123456789113\"", "syntax_pass": true}, {"attribute_expression": "private static final String VALID_SHORT_VISA = \"4222222222222\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "VALID_SHORT_VISA = \"4222222222222\"", "syntax_pass": true}, {"attribute_expression": "private static final String VALID_AMEX = \"378282246310005\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "VALID_AMEX = \"378282246310005\"", "syntax_pass": true}, {"attribute_expression": "private static final String VALID_MASTERCARD = \"5105105105105100\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "VALID_MASTERCARD = \"5105105105105100\"", "syntax_pass": true}, {"attribute_expression": "private static final String VALID_DISCOVER = \"6011000990139424\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "VALID_DISCOVER = \"6011000990139424\"", "syntax_pass": true}, {"attribute_expression": "private static final String VALID_DINERS = \"30569309025904\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "VALID_DINERS = \"30569309025904\"", "syntax_pass": true}]}, {"uris": "src/test/java/org/apache/commons/validator/custom/CustomValidatorResources.java.CustomValidatorResources", "name": "CustomValidatorResources", "file_path": "src/test/java/org/apache/commons/validator/custom/CustomValidatorResources.java", "superclasses": "ValidatorResources", "methods": ["[]CustomValidatorResources(InputStream)"], "method_uris": ["src/test/java/org/apache/commons/validator/custom/CustomValidatorResources.java.CustomValidatorResources.[]CustomValidatorResources(InputStream)"], "overrides": null, "attributes": [], "class_docstring": "\nCustom ValidatorResources implementation.\n", "original_string": "public class CustomValidatorResources extends ValidatorResources {\n\n    private static final long serialVersionUID = 1272843199141974642L;\n\n    /**\n     * Create a custom ValidatorResources object from an uri\n     *\n     * @param in InputStream for the validation.xml configuration file.\n     * @throws SAXException if the validation XML files are not valid or well formed.\n     * @throws IOException  if an I/O error occurs processing the XML files\n     */\n    public CustomValidatorResources(final InputStream in) throws IOException, SAXException {\n        super(in);\n    }\n\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final long serialVersionUID = 1272843199141974642L;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "serialVersionUID = 1272843199141974642L", "syntax_pass": true}]}, {"uris": "src/main/java/org/apache/commons/validator/Field.java.Field", "name": "Field", "file_path": "src/main/java/org/apache/commons/validator/Field.java", "superclasses": "", "methods": ["[void]addArg(Arg)", "[void]addMsg(Msg)", "[void]addVar(String,String,String)", "[void]addVar(Var)", "[Object]clone()", "[void]determineArgPosition(Arg)", "[void]ensureArgsCapacity(Arg)", "[void]generateKey()", "[Arg]getArg(int)", "[Arg]getArg(String,int)", "[Arg[]]getArgs(String)", "[List<String>]getDependencyList()", "[String]getDepends()", "[int]getFieldOrder()", "[String]getIndexedListProperty()", "[String]getIndexedProperty()", "[Object[]]getIndexedProperty(Object)", "[int]getIndexedPropertySize(Object)", "[String]getKey()", "[Msg]getMessage(String)", "[Map<String, Msg>]getMessages()", "[String]getMsg(String)", "[Map<String, Msg>]getMsgMap()", "[int]getPage()", "[String]getProperty()", "[Var]getVar(String)", "[Map<String, Var>]getVarMap()", "[Map<String, Var>]getVars()", "[String]getVarValue(String)", "[void]handleMissingAction(String)", "[boolean]isClientValidation()", "[boolean]isDependency(String)", "[boolean]isIndexed()", "[void]process(Map<String, String>,Map<String, String>)", "[void]processArg(String,String)", "[void]processMessageComponents(String,String)", "[void]processVars(String,String)", "[boolean]runDependentValidators(ValidatorAction,ValidatorResults,Map<String, ValidatorAction>,Map<String, Object>,int)", "[void]setClientValidation(boolean)", "[void]setDepends(String)", "[void]setFieldOrder(int)", "[void]setIndexedListProperty(String)", "[void]setIndexedProperty(String)", "[void]setKey(String)", "[void]setPage(int)", "[void]setProperty(String)", "[String]toString()", "[ValidatorResults]validate(Map<String, Object>,Map<String, ValidatorAction>)", "[boolean]validateForRule(ValidatorAction,ValidatorResults,Map<String, ValidatorAction>,Map<String, Object>,int)"], "method_uris": ["src/main/java/org/apache/commons/validator/Field.java.Field.[void]addArg(Arg)", "src/main/java/org/apache/commons/validator/Field.java.Field.[void]addMsg(Msg)", "src/main/java/org/apache/commons/validator/Field.java.Field.[void]addVar(String,String,String)", "src/main/java/org/apache/commons/validator/Field.java.Field.[void]addVar(Var)", "src/main/java/org/apache/commons/validator/Field.java.Field.[Object]clone()", "src/main/java/org/apache/commons/validator/Field.java.Field.[void]determineArgPosition(Arg)", "src/main/java/org/apache/commons/validator/Field.java.Field.[void]ensureArgsCapacity(Arg)", "src/main/java/org/apache/commons/validator/Field.java.Field.[void]generateKey()", "src/main/java/org/apache/commons/validator/Field.java.Field.[Arg]getArg(int)", "src/main/java/org/apache/commons/validator/Field.java.Field.[Arg]getArg(String,int)", "src/main/java/org/apache/commons/validator/Field.java.Field.[Arg[]]getArgs(String)", "src/main/java/org/apache/commons/validator/Field.java.Field.[List<String>]getDependencyList()", "src/main/java/org/apache/commons/validator/Field.java.Field.[String]getDepends()", "src/main/java/org/apache/commons/validator/Field.java.Field.[int]getFieldOrder()", "src/main/java/org/apache/commons/validator/Field.java.Field.[String]getIndexedListProperty()", "src/main/java/org/apache/commons/validator/Field.java.Field.[String]getIndexedProperty()", "src/main/java/org/apache/commons/validator/Field.java.Field.[Object[]]getIndexedProperty(Object)", "src/main/java/org/apache/commons/validator/Field.java.Field.[int]getIndexedPropertySize(Object)", "src/main/java/org/apache/commons/validator/Field.java.Field.[String]getKey()", "src/main/java/org/apache/commons/validator/Field.java.Field.[Msg]getMessage(String)", "src/main/java/org/apache/commons/validator/Field.java.Field.[Map<String, Msg>]getMessages()", "src/main/java/org/apache/commons/validator/Field.java.Field.[String]getMsg(String)", "src/main/java/org/apache/commons/validator/Field.java.Field.[Map<String, Msg>]getMsgMap()", "src/main/java/org/apache/commons/validator/Field.java.Field.[int]getPage()", "src/main/java/org/apache/commons/validator/Field.java.Field.[String]getProperty()", "src/main/java/org/apache/commons/validator/Field.java.Field.[Var]getVar(String)", "src/main/java/org/apache/commons/validator/Field.java.Field.[Map<String, Var>]getVarMap()", "src/main/java/org/apache/commons/validator/Field.java.Field.[Map<String, Var>]getVars()", "src/main/java/org/apache/commons/validator/Field.java.Field.[String]getVarValue(String)", "src/main/java/org/apache/commons/validator/Field.java.Field.[void]handleMissingAction(String)", "src/main/java/org/apache/commons/validator/Field.java.Field.[boolean]isClientValidation()", "src/main/java/org/apache/commons/validator/Field.java.Field.[boolean]isDependency(String)", "src/main/java/org/apache/commons/validator/Field.java.Field.[boolean]isIndexed()", "src/main/java/org/apache/commons/validator/Field.java.Field.[void]process(Map<String, String>,Map<String, String>)", "src/main/java/org/apache/commons/validator/Field.java.Field.[void]processArg(String,String)", "src/main/java/org/apache/commons/validator/Field.java.Field.[void]processMessageComponents(String,String)", "src/main/java/org/apache/commons/validator/Field.java.Field.[void]processVars(String,String)", "src/main/java/org/apache/commons/validator/Field.java.Field.[boolean]runDependentValidators(ValidatorAction,ValidatorResults,Map<String, ValidatorAction>,Map<String, Object>,int)", "src/main/java/org/apache/commons/validator/Field.java.Field.[void]setClientValidation(boolean)", "src/main/java/org/apache/commons/validator/Field.java.Field.[void]setDepends(String)", "src/main/java/org/apache/commons/validator/Field.java.Field.[void]setFieldOrder(int)", "src/main/java/org/apache/commons/validator/Field.java.Field.[void]setIndexedListProperty(String)", "src/main/java/org/apache/commons/validator/Field.java.Field.[void]setIndexedProperty(String)", "src/main/java/org/apache/commons/validator/Field.java.Field.[void]setKey(String)", "src/main/java/org/apache/commons/validator/Field.java.Field.[void]setPage(int)", "src/main/java/org/apache/commons/validator/Field.java.Field.[void]setProperty(String)", "src/main/java/org/apache/commons/validator/Field.java.Field.[String]toString()", "src/main/java/org/apache/commons/validator/Field.java.Field.[ValidatorResults]validate(Map<String, Object>,Map<String, ValidatorAction>)", "src/main/java/org/apache/commons/validator/Field.java.Field.[boolean]validateForRule(ValidatorAction,ValidatorResults,Map<String, ValidatorAction>,Map<String, Object>,int)"], "overrides": null, "attributes": [], "class_docstring": " TODO mutable non-private fields", "original_string": "public class Field implements Cloneable, Serializable {\n\n    private static final long serialVersionUID = -8502647722530192185L;\n\n    /**\n     * This is the value that will be used as a key if the {@code Arg}\n     * name field has no value.\n     */\n    private static final String DEFAULT_ARG =\n            \"org.apache.commons.validator.Field.DEFAULT\";\n\n    /**\n     * This indicates an indexed property is being referenced.\n     */\n    public static final String TOKEN_INDEXED = \"[]\";\n\n    /**\n     * The start of a token.\n     */\n    protected static final String TOKEN_START = \"${\";\n\n    /**\n     * The end of a token.\n     */\n    protected static final String TOKEN_END = \"}\";\n\n    /**\n     * A Vriable token.\n     */\n    protected static final String TOKEN_VAR = \"var:\";\n\n    /**\n     * The Field's property name.\n     */\n    protected String property;\n\n    /**\n     * The Field's indexed property name.\n     */\n    protected String indexedProperty;\n\n    /**\n     * The Field's indexed list property name.\n     */\n    protected String indexedListProperty;\n\n    /**\n     * The Field's unique key.\n     */\n    protected String key;\n\n    /**\n     * A comma separated list of validator's this field depends on.\n     */\n    protected String depends;\n\n    /**\n     * The Page Number\n     */\n    protected int page;\n\n    /**\n     * The flag that indicates whether scripting should be generated\n     * by the client for client-side validation.\n     * @since 1.4\n     */\n    protected boolean clientValidation = true;\n\n    /**\n     * The order of the Field in the Form.\n     */\n    protected int fieldOrder;\n\n    /**\n     * Internal representation of this.depends String as a List.  This List\n     * gets updated whenever setDepends() gets called.  This List is\n     * synchronized so a call to setDepends() (which clears the List) won't\n     * interfere with a call to isDependency().\n     */\n    private final List<String> dependencyList = Collections.synchronizedList(new ArrayList<>());\n\n    /**\n     * @deprecated Subclasses should use getVarMap() instead.\n     */\n    @Deprecated\n    protected FastHashMap hVars = new FastHashMap(); // <String, Var>\n\n    /**\n     * @deprecated Subclasses should use getMsgMap() instead.\n     */\n    @Deprecated\n    protected FastHashMap hMsgs = new FastHashMap(); // <String, Msg>\n\n    /**\n     * Holds Maps of arguments.  args[0] returns the Map for the first\n     * replacement argument.  Start with a 0 length array so that it will\n     * only grow to the size of the highest argument position.\n     * @since 1.1\n     */\n    @SuppressWarnings(\"unchecked\") // cannot instantiate generic array, so have to assume this is OK\n    protected Map<String, Arg>[] args = new Map[0];\n\n    /**\n     * Add an {@code Arg} to the replacement argument list.\n     * @since 1.1\n     * @param arg Validation message's argument.\n     */\n    public void addArg(final Arg arg) {\n        // TODO this first if check can go away after arg0, etc. are removed from dtd\n        if (arg == null || arg.getKey() == null || arg.getKey().isEmpty()) {\n            return;\n        }\n\n        determineArgPosition(arg);\n        ensureArgsCapacity(arg);\n\n        Map<String, Arg> argMap = args[arg.getPosition()];\n        if (argMap == null) {\n            argMap = new HashMap<>();\n            args[arg.getPosition()] = argMap;\n        }\n\n        final String name = arg.getName();\n        argMap.put(name != null ? name : DEFAULT_ARG, arg);\n    }\n\n    /**\n     * Add a {@code Msg} to the {@code Field}.\n     * @param msg A validation message.\n     */\n    public void addMsg(final Msg msg) {\n        getMsgMap().put(msg.getName(), msg);\n    }\n\n    /**\n     * Add a {@code Var}, based on the values passed in, to the\n     * {@code Field}.\n     * @param name Name of the validation.\n     * @param value The Argument's value.\n     * @param jsType The JavaScript type.\n     */\n    public void addVar(final String name, final String value, final String jsType) {\n        this.addVar(new Var(name, value, jsType));\n    }\n\n    /**\n     * Add a {@code Var} to the {@code Field}.\n     * @param v The Validator Argument.\n     */\n    public void addVar(final Var v) {\n        getVarMap().put(v.getName(), v);\n    }\n\n    /**\n     * Creates and returns a copy of this object.\n     * @return A copy of the Field.\n     */\n    @Override\n    public Object clone() {\n        Field field = null;\n        try {\n            field = (Field) super.clone();\n        } catch (final CloneNotSupportedException e) {\n            throw new UnsupportedOperationException(e.toString(), e);\n        }\n\n        @SuppressWarnings(\"unchecked\") // empty array always OK; cannot check this at compile time\n        final Map<String, Arg>[] tempMap = new Map[args.length];\n        field.args = tempMap;\n        for (int i = 0; i < args.length; i++) {\n            if (args[i] == null) {\n                continue;\n            }\n\n            final Map<String, Arg> argMap = new HashMap<>(args[i]);\n            argMap.forEach((validatorName, arg) -> argMap.put(validatorName, (Arg) arg.clone()));\n            field.args[i] = argMap;\n        }\n\n        field.hVars = ValidatorUtils.copyFastHashMap(hVars);\n        field.hMsgs = ValidatorUtils.copyFastHashMap(hMsgs);\n\n        return field;\n    }\n\n    /**\n     * Calculate the position of the Arg\n     */\n    private void determineArgPosition(final Arg arg) {\n\n        final int position = arg.getPosition();\n\n        // position has been explicity set\n        if (position >= 0) {\n            return;\n        }\n\n        // first arg to be added\n        if (args == null || args.length == 0) {\n            arg.setPosition(0);\n            return;\n        }\n\n        // determine the position of the last argument with\n        // the same name or the last default argument\n        final String keyName = arg.getName() == null ? DEFAULT_ARG : arg.getName();\n        int lastPosition = -1;\n        int lastDefault = -1;\n        for (int i = 0; i < args.length; i++) {\n            if (args[i] != null && args[i].containsKey(keyName)) {\n                lastPosition = i;\n            }\n            if (args[i] != null && args[i].containsKey(DEFAULT_ARG)) {\n                lastDefault = i;\n            }\n        }\n\n        if (lastPosition < 0) {\n            lastPosition = lastDefault;\n        }\n\n        // allocate the next position\n        arg.setPosition(++lastPosition);\n\n    }\n\n    /**\n     * Ensures that the args array can hold the given arg.  Resizes the array as\n     * necessary.\n     * @param arg Determine if the args array is long enough to store this arg's\n     * position.\n     */\n    private void ensureArgsCapacity(final Arg arg) {\n        if (arg.getPosition() >= args.length) {\n            @SuppressWarnings(\"unchecked\") // cannot check this at compile time, but it is OK\n            final\n            Map<String, Arg>[] newArgs = new Map[arg.getPosition() + 1];\n            System.arraycopy(args, 0, newArgs, 0, args.length);\n            args = newArgs;\n        }\n    }\n\n    /**\n     * Generate correct {@code key} value.\n     */\n    public void generateKey() {\n        if (isIndexed()) {\n            key = indexedListProperty + TOKEN_INDEXED + \".\" + property;\n        } else {\n            key = property;\n        }\n    }\n\n    /**\n     * Gets the default {@code Arg} object at the given position.\n     * @param position Validation message argument's position.\n     * @return The default Arg or null if not found.\n     * @since 1.1\n     */\n    public Arg getArg(final int position) {\n        return this.getArg(DEFAULT_ARG, position);\n    }\n\n    /**\n     * Gets the {@code Arg} object at the given position.  If the key\n     * finds a {@code null} value then the default value will be\n     * retrieved.\n     * @param key The name the Arg is stored under.  If not found, the default\n     * Arg for the given position (if any) will be retrieved.\n     * @param position The Arg number to find.\n     * @return The Arg with the given name and position or null if not found.\n     * @since 1.1\n     */\n    public Arg getArg(final String key, final int position) {\n        if (position >= args.length || args[position] == null) {\n            return null;\n        }\n\n        final Arg arg = args[position].get(key);\n\n        // Didn't find default arg so exit, otherwise we would get into\n        // infinite recursion\n        if (arg == null && key.equals(DEFAULT_ARG)) {\n            return null;\n        }\n\n        return arg == null ? this.getArg(position) : arg;\n    }\n\n    /**\n     * Retrieves the Args for the given validator name.\n     * @param key The validator's args to retrieve.\n     * @return An Arg[] sorted by the Args' positions (i.e. the Arg at index 0\n     * has a position of 0).\n     * @since 1.1.1\n     */\n    public Arg[] getArgs(final String key) {\n        final Arg[] argList = new Arg[args.length];\n\n        for (int i = 0; i < args.length; i++) {\n            argList[i] = this.getArg(key, i);\n        }\n\n        return argList;\n    }\n\n    /**\n     * Gets an unmodifiable {@code List} of the dependencies in the same\n     * order they were defined in parameter passed to the setDepends() method.\n     * @return A list of the Field's dependancies.\n     */\n    public List<String> getDependencyList() {\n        return Collections.unmodifiableList(dependencyList);\n    }\n\n    /**\n     * Gets the validation rules for this field as a comma separated list.\n     * @return A comma separated list of validator names.\n     */\n    public String getDepends() {\n        return depends;\n    }\n\n    /**\n     * Gets the position of the {@code Field} in the validation list.\n     * @return The field position.\n     */\n    public int getFieldOrder() {\n        return fieldOrder;\n    }\n\n    /**\n     * Gets the indexed property name of the field.  This\n     * is the method name that will return an array or a\n     * {@link Collection} used to retrieve the\n     * list and then loop through the list performing the specified\n     * validations.\n     * @return The field's indexed List property name.\n     */\n    public String getIndexedListProperty() {\n        return indexedListProperty;\n    }\n\n    /**\n     * Gets the indexed property name of the field.  This\n     * is the method name that can take an {@code int} as\n     * a parameter for indexed property value retrieval.\n     * @return The field's indexed property name.\n     */\n    public String getIndexedProperty() {\n        return indexedProperty;\n    }\n\n    /**\n     * Returns an indexed property from the object we're validating.\n     *\n     * @param bean The bean to extract the indexed values from.\n     * @throws ValidatorException If there's an error looking up the property\n     * or, the property found is not indexed.\n     */\n    Object[] getIndexedProperty(final Object bean) throws ValidatorException {\n        Object indexProp = null;\n\n        try {\n            indexProp = PropertyUtils.getProperty(bean, getIndexedListProperty());\n\n        } catch (IllegalAccessException | InvocationTargetException | NoSuchMethodException e) {\n            throw new ValidatorException(e.getMessage());\n        }\n\n        if (indexProp instanceof Collection) {\n            return ((Collection<?>) indexProp).toArray();\n\n        }\n        if (indexProp.getClass().isArray()) {\n            return (Object[]) indexProp;\n\n        }\n        throw new ValidatorException(getKey() + \" is not indexed\");\n\n    }\n\n    /**\n     * Returns the size of an indexed property from the object we're validating.\n     *\n     * @param bean The bean to extract the indexed values from.\n     * @throws ValidatorException If there's an error looking up the property\n     * or, the property found is not indexed.\n     */\n    private int getIndexedPropertySize(final Object bean) throws ValidatorException {\n        Object indexProp = null;\n\n        try {\n            indexProp = PropertyUtils.getProperty(bean, getIndexedListProperty());\n\n        } catch (IllegalAccessException | InvocationTargetException | NoSuchMethodException e) {\n            throw new ValidatorException(e.getMessage());\n        }\n\n        if (indexProp == null) {\n            return 0;\n        }\n        if (indexProp instanceof Collection) {\n            return ((Collection<?>) indexProp).size();\n        }\n        if (indexProp.getClass().isArray()) {\n            return ((Object[]) indexProp).length;\n        }\n        throw new ValidatorException(getKey() + \" is not indexed\");\n\n    }\n\n    /**\n     * Gets a unique key based on the property and indexedProperty fields.\n     * @return a unique key for the field.\n     */\n    public String getKey() {\n        if (key == null) {\n            generateKey();\n        }\n\n        return key;\n    }\n\n    /**\n     * Retrieve a message object.\n     * @since 1.1.4\n     * @param key Validation key.\n     * @return A validation message for a specified validator.\n     */\n    public Msg getMessage(final String key) {\n        return getMsgMap().get(key);\n    }\n\n    /**\n     * The {@code Field}'s messages are returned as an\n     * unmodifiable {@link Map}.\n     * @since 1.1.4\n     * @return Map of validation messages for the field.\n     */\n    public Map<String, Msg> getMessages() {\n        return Collections.unmodifiableMap(getMsgMap());\n    }\n\n    /**\n     * Retrieve a message value.\n     * @param key Validation key.\n     * @return A validation message for a specified validator.\n     */\n    public String getMsg(final String key) {\n        final Msg msg = getMessage(key);\n        return msg == null ? null : msg.getKey();\n    }\n\n    /**\n     * Returns a Map of String Msg names to Msg objects.\n     * @since 1.2.0\n     * @return A Map of the Field's messages.\n     */\n    @SuppressWarnings(\"unchecked\") // FastHashMap does not support generics\n    protected Map<String, Msg> getMsgMap() {\n        return hMsgs;\n    }\n\n    /**\n     * Gets the page value that the Field is associated with for\n     * validation.\n     * @return The page number.\n     */\n    public int getPage() {\n        return page;\n    }\n\n    /**\n     * Gets the property name of the field.\n     * @return The field's property name.\n     */\n    public String getProperty() {\n        return property;\n    }\n\n    /**\n     * Retrieve a variable.\n     * @param mainKey The Variable's key\n     * @return the Variable\n     */\n    public Var getVar(final String mainKey) {\n        return getVarMap().get(mainKey);\n    }\n\n    /**\n     * Returns a Map of String Var names to Var objects.\n     * @since 1.2.0\n     * @return A Map of the Field's variables.\n     */\n    @SuppressWarnings(\"unchecked\") // FastHashMap does not support generics\n    protected Map<String, Var> getVarMap() {\n        return hVars;\n    }\n\n    /**\n     * The {@code Field}'s variables are returned as an\n     * unmodifiable {@link Map}.\n     * @return the Map of Variable's for a Field.\n     */\n    public Map<String, Var> getVars() {\n        return Collections.unmodifiableMap(getVarMap());\n    }\n\n    /**\n     * Retrieve a variable's value.\n     * @param mainKey The Variable's key\n     * @return the Variable's value\n     */\n    public String getVarValue(final String mainKey) {\n        String value = null;\n\n        final Var v = getVarMap().get(mainKey);\n        if (v != null) {\n            value = v.getValue();\n        }\n\n        return value;\n    }\n\n    /**\n     * Called when a validator name is used in a depends clause but there is\n     * no know ValidatorAction configured for that name.\n     * @param name The name of the validator in the depends list.\n     * @throws ValidatorException\n     */\n    private void handleMissingAction(final String name) throws ValidatorException {\n        throw new ValidatorException(\"No ValidatorAction named \" + name\n                + \" found for field \" + getProperty());\n    }\n\n    /**\n     * Determines whether client-side scripting should be generated\n     * for this field. The default is {@code true}\n     * @return {@code true} for scripting; otherwise false\n     * @see #setClientValidation(boolean)\n     * @since 1.4\n     */\n    public boolean isClientValidation() {\n        return clientValidation;\n    }\n\n    /**\n     * Checks if the validator is listed as a dependency.\n     * @param validatorName Name of the validator to check.\n     * @return Whether the field is dependant on a validator.\n     */\n    public boolean isDependency(final String validatorName) {\n        return dependencyList.contains(validatorName);\n    }\n\n    /**\n     * If there is a value specified for the indexedProperty field then\n     * {@code true} will be returned.  Otherwise it will be\n     * {@code false}.\n     * @return Whether the Field is indexed.\n     */\n    public boolean isIndexed() {\n        return indexedListProperty != null && !indexedListProperty.isEmpty();\n    }\n\n    /**\n     * Replace constants with values in fields and process the depends field\n     * to create the dependency {@link Map}.\n     */\n    void process(final Map<String, String> globalConstants, final Map<String, String> constants) {\n        hMsgs.setFast(false);\n        hVars.setFast(true);\n\n        generateKey();\n\n        // Process FormSet Constants\n        for (final Entry<String, String> entry : constants.entrySet()) {\n            final String key1 = entry.getKey();\n            final String key2 = TOKEN_START + key1 + TOKEN_END;\n            final String replaceValue = entry.getValue();\n\n            property = ValidatorUtils.replace(property, key2, replaceValue);\n\n            processVars(key2, replaceValue);\n\n            processMessageComponents(key2, replaceValue);\n        }\n\n        // Process Global Constants\n        for (final Entry<String, String> entry : globalConstants.entrySet()) {\n            final String key1 = entry.getKey();\n            final String key2 = TOKEN_START + key1 + TOKEN_END;\n            final String replaceValue = entry.getValue();\n\n            property = ValidatorUtils.replace(property, key2, replaceValue);\n\n            processVars(key2, replaceValue);\n\n            processMessageComponents(key2, replaceValue);\n        }\n\n        // Process Var Constant Replacement\n        for (final String key1 : getVarMap().keySet()) {\n            final String key2 = TOKEN_START + TOKEN_VAR + key1 + TOKEN_END;\n            final Var var = getVar(key1);\n            final String replaceValue = var.getValue();\n\n            processMessageComponents(key2, replaceValue);\n        }\n\n        hMsgs.setFast(true);\n    }\n\n    /**\n     * Replace the arg {@link Collection} key value with the key/value\n     * pairs passed in.\n     */\n    private void processArg(final String key, final String replaceValue) {\n        for (final Map<String, Arg> argMap : args) {\n            if (argMap == null) {\n                continue;\n            }\n            for (final Arg arg : argMap.values()) {\n                if (arg != null) {\n                    arg.setKey(ValidatorUtils.replace(arg.getKey(), key, replaceValue));\n                }\n            }\n        }\n    }\n\n    /**\n     * Replace the args key value with the key/value pairs passed in.\n     */\n    private void processMessageComponents(final String key, final String replaceValue) {\n        final String varKey = TOKEN_START + TOKEN_VAR;\n        // Process Messages\n        if (key != null && !key.startsWith(varKey)) {\n            for (final Msg msg : getMsgMap().values()) {\n                msg.setKey(ValidatorUtils.replace(msg.getKey(), key, replaceValue));\n            }\n        }\n\n        processArg(key, replaceValue);\n    }\n\n    /**\n     * Replace the vars value with the key/value pairs passed in.\n     */\n    private void processVars(final String key, final String replaceValue) {\n        for (final String varKey : getVarMap().keySet()) {\n            final Var var = getVar(varKey);\n            var.setValue(ValidatorUtils.replace(var.getValue(), key, replaceValue));\n        }\n\n    }\n\n    /**\n     * Calls all of the validators that this validator depends on.\n     * TODO ValidatorAction should know how to run its own dependencies.\n     * @param va Run dependent validators for this action.\n     * @param results\n     * @param actions\n     * @param pos\n     * @return true if all of the dependent validations passed.\n     * @throws ValidatorException If there's an error running a validator\n     */\n    private boolean runDependentValidators(\n        final ValidatorAction va,\n        final ValidatorResults results,\n        final Map<String, ValidatorAction> actions,\n        final Map<String, Object> params,\n        final int pos)\n        throws ValidatorException {\n\n        final List<String> dependentValidators = va.getDependencyList();\n\n        if (dependentValidators.isEmpty()) {\n            return true;\n        }\n\n        for (final String depend : dependentValidators) {\n            final ValidatorAction action = actions.get(depend);\n            if (action == null) {\n                handleMissingAction(depend);\n            }\n\n            if (!validateForRule(action, results, actions, params, pos)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Sets the flag that determines whether client-side scripting should\n     * be generated for this field.\n     * @param clientValidation the scripting flag\n     * @see #isClientValidation()\n     * @since 1.4\n     */\n    public void setClientValidation(final boolean clientValidation) {\n        this.clientValidation = clientValidation;\n    }\n\n    /**\n     * Sets the validation rules for this field as a comma separated list.\n     * @param depends A comma separated list of validator names.\n     */\n    public void setDepends(final String depends) {\n        this.depends = depends;\n\n        dependencyList.clear();\n\n        final StringTokenizer st = new StringTokenizer(depends, \",\");\n        while (st.hasMoreTokens()) {\n            final String depend = st.nextToken().trim();\n\n            if (depend != null && !depend.isEmpty()) {\n                dependencyList.add(depend);\n            }\n        }\n    }\n\n    /**\n     * Sets the position of the {@code Field} in the validation list.\n     * @param fieldOrder The field position.\n     */\n    public void setFieldOrder(final int fieldOrder) {\n        this.fieldOrder = fieldOrder;\n    }\n\n    /**\n     * Sets the indexed property name of the field.\n     * @param indexedListProperty The field's indexed List property name.\n     */\n    public void setIndexedListProperty(final String indexedListProperty) {\n        this.indexedListProperty = indexedListProperty;\n    }\n    /**\n     * Sets the indexed property name of the field.\n     * @param indexedProperty The field's indexed property name.\n     */\n    public void setIndexedProperty(final String indexedProperty) {\n        this.indexedProperty = indexedProperty;\n    }\n\n    /**\n     * Sets a unique key for the field.  This can be used to change\n     * the key temporarily to have a unique key for an indexed field.\n     * @param key a unique key for the field\n     */\n    public void setKey(final String key) {\n        this.key = key;\n    }\n\n    /**\n     * Sets the page value that the Field is associated with for\n     * validation.\n     * @param page The page number.\n     */\n    public void setPage(final int page) {\n        this.page = page;\n    }\n\n    /**\n     * Sets the property name of the field.\n     * @param property The field's property name.\n     */\n    public void setProperty(final String property) {\n        this.property = property;\n    }\n\n    /**\n     * Returns a string representation of the object.\n     * @return A string representation of the object.\n     */\n    @Override\n    public String toString() {\n        final StringBuilder results = new StringBuilder();\n\n        results.append(\"\\t\\tkey = \" + key + \"\\n\");\n        results.append(\"\\t\\tproperty = \" + property + \"\\n\");\n        results.append(\"\\t\\tindexedProperty = \" + indexedProperty + \"\\n\");\n        results.append(\"\\t\\tindexedListProperty = \" + indexedListProperty + \"\\n\");\n        results.append(\"\\t\\tdepends = \" + depends + \"\\n\");\n        results.append(\"\\t\\tpage = \" + page + \"\\n\");\n        results.append(\"\\t\\tfieldOrder = \" + fieldOrder + \"\\n\");\n\n        if (hVars != null) {\n            results.append(\"\\t\\tVars:\\n\");\n            for (final Object key1 : getVarMap().keySet()) {\n                results.append(\"\\t\\t\\t\");\n                results.append(key1);\n                results.append(\"=\");\n                results.append(getVarMap().get(key1));\n                results.append(\"\\n\");\n            }\n        }\n\n        return results.toString();\n    }\n\n    /**\n     * Run the configured validations on this field.  Run all validations\n     * in the depends clause over each item in turn, returning when the first\n     * one fails.\n     * @param params A Map of parameter class names to parameter values to pass\n     * into validation methods.\n     * @param actions A Map of validator names to ValidatorAction objects.\n     * @return A ValidatorResults object containing validation messages for\n     * this field.\n     * @throws ValidatorException If an error occurs during validation.\n     */\n    public ValidatorResults validate(final Map<String, Object> params, final Map<String, ValidatorAction> actions)\n            throws ValidatorException {\n\n        if (getDepends() == null) {\n            return new ValidatorResults();\n        }\n\n        final ValidatorResults allResults = new ValidatorResults();\n\n        final Object bean = params.get(Validator.BEAN_PARAM);\n        final int numberOfFieldsToValidate = isIndexed() ? getIndexedPropertySize(bean) : 1;\n\n        for (int fieldNumber = 0; fieldNumber < numberOfFieldsToValidate; fieldNumber++) {\n\n            final ValidatorResults results = new ValidatorResults();\n            synchronized (dependencyList) {\n                for (final String depend : dependencyList) {\n\n                    final ValidatorAction action = actions.get(depend);\n                    if (action == null) {\n                        handleMissingAction(depend);\n                    }\n\n                    final boolean good = validateForRule(action, results, actions, params, fieldNumber);\n\n                    if (!good) {\n                        allResults.merge(results);\n                        return allResults;\n                    }\n                }\n            }\n            allResults.merge(results);\n        }\n\n        return allResults;\n    }\n\n    /**\n     * Executes the given ValidatorAction and all ValidatorActions that it\n     * depends on.\n     * @return true if the validation succeeded.\n     */\n    private boolean validateForRule(\n        final ValidatorAction va,\n        final ValidatorResults results,\n        final Map<String, ValidatorAction> actions,\n        final Map<String, Object> params,\n        final int pos)\n        throws ValidatorException {\n\n        final ValidatorResult result = results.getValidatorResult(getKey());\n        if (result != null && result.containsAction(va.getName())) {\n            return result.isValid(va.getName());\n        }\n\n        if (!runDependentValidators(va, results, actions, params, pos)) {\n            return false;\n        }\n\n        return va.executeValidationMethod(this, params, results, pos);\n    }\n}", "super_interfaces": ["Cloneable", "Serializable"], "fields": [{"attribute_expression": "private static final long serialVersionUID = -8502647722530192185L;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "serialVersionUID = -8502647722530192185L", "syntax_pass": true}, {"attribute_expression": "private static final String DEFAULT_ARG =\n            \"org.apache.commons.validator.Field.DEFAULT\";", "docstring": "\nThis is the value that will be used as a key if the {@code Arg}\nname field has no value.\n", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "DEFAULT_ARG =\n            \"org.apache.commons.validator.Field.DEFAULT\"", "syntax_pass": true}, {"attribute_expression": "public static final String TOKEN_INDEXED = \"[]\";", "docstring": "\nThis indicates an indexed property is being referenced.\n", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "String", "name": "TOKEN_INDEXED = \"[]\"", "syntax_pass": true}, {"attribute_expression": "protected static final String TOKEN_START = \"${\";", "docstring": "\nThe start of a token.\n", "modifiers": "protected static final", "marker_annotations": [], "non_marker_annotations": ["protected", "static", "final"], "comments": [], "type": "String", "name": "TOKEN_START = \"${\"", "syntax_pass": true}, {"attribute_expression": "protected static final String TOKEN_END = \"}\";", "docstring": "\nThe end of a token.\n", "modifiers": "protected static final", "marker_annotations": [], "non_marker_annotations": ["protected", "static", "final"], "comments": [], "type": "String", "name": "TOKEN_END = \"}\"", "syntax_pass": true}, {"attribute_expression": "protected static final String TOKEN_VAR = \"var:\";", "docstring": "\nA Vriable token.\n", "modifiers": "protected static final", "marker_annotations": [], "non_marker_annotations": ["protected", "static", "final"], "comments": [], "type": "String", "name": "TOKEN_VAR = \"var:\"", "syntax_pass": true}, {"attribute_expression": "protected String property;", "docstring": "\nThe Field's property name.\n", "modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "type": "String", "name": "property", "syntax_pass": true}, {"attribute_expression": "protected String indexedProperty;", "docstring": "\nThe Field's indexed property name.\n", "modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "type": "String", "name": "indexedProperty", "syntax_pass": true}, {"attribute_expression": "protected String indexedListProperty;", "docstring": "\nThe Field's indexed list property name.\n", "modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "type": "String", "name": "indexedListProperty", "syntax_pass": true}, {"attribute_expression": "protected String key;", "docstring": "\nThe Field's unique key.\n", "modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "type": "String", "name": "key", "syntax_pass": true}, {"attribute_expression": "protected String depends;", "docstring": "\nA comma separated list of validator's this field depends on.\n", "modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "type": "String", "name": "depends", "syntax_pass": true}, {"attribute_expression": "protected int page;", "docstring": "\nThe Page Number\n", "modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "type": "int", "name": "page", "syntax_pass": true}, {"attribute_expression": "protected boolean clientValidation = true;", "docstring": "\nThe flag that indicates whether scripting should be generated\nby the client for client-side validation.\n@since 1.4\n", "modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "type": "boolean", "name": "clientValidation = true", "syntax_pass": true}, {"attribute_expression": "protected int fieldOrder;", "docstring": "\nThe order of the Field in the Form.\n", "modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "type": "int", "name": "fieldOrder", "syntax_pass": true}, {"attribute_expression": "private final List<String> dependencyList = Collections.synchronizedList(new ArrayList<>());", "docstring": "\nInternal representation of this.depends String as a List.  This List\ngets updated whenever setDepends() gets called.  This List is\nsynchronized so a call to setDepends() (which clears the List) won't\ninterfere with a call to isDependency().\n", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "List<String>", "name": "dependencyList = Collections.synchronizedList(new ArrayList<>())", "syntax_pass": true}, {"attribute_expression": "@Deprecated\n    protected FastHashMap hVars = new FastHashMap();", "docstring": "\n@deprecated Subclasses should use getVarMap() instead.\n", "modifiers": "@Deprecated\n    protected", "marker_annotations": ["@Deprecated"], "non_marker_annotations": ["protected"], "comments": [], "type": "FastHashMap", "name": "hVars = new FastHashMap()", "syntax_pass": true}, {"attribute_expression": "@Deprecated\n    protected FastHashMap hMsgs = new FastHashMap();", "docstring": "\n@deprecated Subclasses should use getMsgMap() instead.\n", "modifiers": "@Deprecated\n    protected", "marker_annotations": ["@Deprecated"], "non_marker_annotations": ["protected"], "comments": [], "type": "FastHashMap", "name": "hMsgs = new FastHashMap()", "syntax_pass": true}, {"attribute_expression": "@SuppressWarnings(\"unchecked\") // cannot instantiate generic array, so have to assume this is OK\n    protected Map<String, Arg>[] args = new Map[0];", "docstring": "\nHolds Maps of arguments.  args[0] returns the Map for the first\nreplacement argument.  Start with a 0 length array so that it will\nonly grow to the size of the highest argument position.\n@since 1.1\n", "modifiers": "@SuppressWarnings(\"unchecked\") // cannot instantiate generic array, so have to assume this is OK\n    protected", "marker_annotations": [], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "protected"], "comments": ["// cannot instantiate generic array, so have to assume this is OK"], "type": "Map<String, Arg>[]", "name": "args = new Map[0]", "syntax_pass": true}]}, {"uris": "src/main/java/org/apache/commons/validator/FormSetFactory.java.FormSetFactory", "name": "FormSetFactory", "file_path": "src/main/java/org/apache/commons/validator/FormSetFactory.java", "superclasses": "AbstractObjectCreationFactory", "methods": ["[FormSet]createFormSet(ValidatorResources,String,String,String)", "[Object]createObject(Attributes)", "[Log]getLog()"], "method_uris": ["src/main/java/org/apache/commons/validator/FormSetFactory.java.FormSetFactory.[FormSet]createFormSet(ValidatorResources,String,String,String)", "src/main/java/org/apache/commons/validator/FormSetFactory.java.FormSetFactory.[Object]createObject(Attributes)", "src/main/java/org/apache/commons/validator/FormSetFactory.java.FormSetFactory.[Log]getLog()"], "overrides": null, "attributes": [], "class_docstring": "\nFactory class used by Digester to create FormSet's.\n\n@since 1.2\n", "original_string": "public class FormSetFactory extends AbstractObjectCreationFactory {\n\n    /** Logging */\n    private transient Log log = LogFactory.getLog(FormSetFactory.class);\n\n    /**\n     * <p>Create or retrieve a {@code FormSet} based on the language, country\n     *    and variant.</p>\n     *\n     * @param resources The validator resources.\n     * @param language The locale's language.\n     * @param country The locale's country.\n     * @param variant The locale's language variant.\n     * @return The FormSet for a locale.\n     * @since 1.2\n     */\n    private FormSet createFormSet(final ValidatorResources resources,\n                                  final String language,\n                                  final String country,\n                                  final String variant) {\n\n        // Retrieve existing FormSet for the language/country/variant\n        FormSet formSet = resources.getFormSet(language, country, variant);\n        if (formSet != null) {\n            if (getLog().isDebugEnabled()) {\n                getLog().debug(\"FormSet[\" + formSet.displayKey() + \"] found - merging.\");\n            }\n            return formSet;\n        }\n\n        // Create a new FormSet for the language/country/variant\n        formSet = new FormSet();\n        formSet.setLanguage(language);\n        formSet.setCountry(country);\n        formSet.setVariant(variant);\n\n        // Add the FormSet to the validator resources\n        resources.addFormSet(formSet);\n\n        if (getLog().isDebugEnabled()) {\n            getLog().debug(\"FormSet[\" + formSet.displayKey() + \"] created.\");\n        }\n\n        return formSet;\n\n    }\n\n    /**\n     * <p>Create or retrieve a {@code FormSet} for the specified\n     *    attributes.</p>\n     *\n     * @param attributes The sax attributes for the formset element.\n     * @return The FormSet for a locale.\n     * @throws Exception If an error occurs creating the FormSet.\n     */\n    @Override\n    public Object createObject(final Attributes attributes) throws Exception {\n\n        final ValidatorResources resources = (ValidatorResources) digester.peek(0);\n\n        final String language = attributes.getValue(\"language\");\n        final String country = attributes.getValue(\"country\");\n        final String variant = attributes.getValue(\"variant\");\n\n        return createFormSet(resources, language, country, variant);\n\n    }\n\n    /**\n     * Accessor method for Log instance.\n     *\n     * The Log instance variable is transient and\n     * accessing it through this method ensures it\n     * is re-initialized when this instance is\n     * de-serialized.\n     *\n     * @return The Log instance.\n     */\n    private Log getLog() {\n        if (log == null) {\n            log = LogFactory.getLog(FormSetFactory.class);\n        }\n        return log;\n    }\n\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private transient Log log = LogFactory.getLog(FormSetFactory.class);", "docstring": " Logging", "modifiers": "private transient", "marker_annotations": [], "non_marker_annotations": ["private", "transient"], "comments": [], "type": "Log", "name": "log = LogFactory.getLog(FormSetFactory.class)", "syntax_pass": true}]}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorResults.java.ValidatorResults", "name": "ValidatorResults", "file_path": "src/main/java/org/apache/commons/validator/ValidatorResults.java", "superclasses": "", "methods": ["[void]add(Field,String,boolean)", "[void]add(Field,String,boolean,Object)", "[void]clear()", "[Set<String>]getPropertyNames()", "[Map<String, Object>]getResultValueMap()", "[ValidatorResult]getValidatorResult(String)", "[boolean]isEmpty()", "[void]merge(ValidatorResults)"], "method_uris": ["src/main/java/org/apache/commons/validator/ValidatorResults.java.ValidatorResults.[void]add(Field,String,boolean)", "src/main/java/org/apache/commons/validator/ValidatorResults.java.ValidatorResults.[void]add(Field,String,boolean,Object)", "src/main/java/org/apache/commons/validator/ValidatorResults.java.ValidatorResults.[void]clear()", "src/main/java/org/apache/commons/validator/ValidatorResults.java.ValidatorResults.[Set<String>]getPropertyNames()", "src/main/java/org/apache/commons/validator/ValidatorResults.java.ValidatorResults.[Map<String, Object>]getResultValueMap()", "src/main/java/org/apache/commons/validator/ValidatorResults.java.ValidatorResults.[ValidatorResult]getValidatorResult(String)", "src/main/java/org/apache/commons/validator/ValidatorResults.java.ValidatorResults.[boolean]isEmpty()", "src/main/java/org/apache/commons/validator/ValidatorResults.java.ValidatorResults.[void]merge(ValidatorResults)"], "overrides": null, "attributes": [], "class_docstring": "TODO mutable non-private fields", "original_string": "public class ValidatorResults implements Serializable {\n\n    private static final long serialVersionUID = -2709911078904924839L;\n\n    /**\n     * Map of validation results.\n     */\n    protected Map<String, ValidatorResult> hResults = new HashMap<>();\n\n    /**\n     * Add a the result of a validator action.\n     *\n     * @param field The field validated.\n     * @param validatorName The name of the validator.\n     * @param result The result of the validation.\n     */\n    public void add(final Field field, final String validatorName, final boolean result) {\n        this.add(field, validatorName, result, null);\n    }\n\n    /**\n     * Add a the result of a validator action.\n     *\n     * @param field The field validated.\n     * @param validatorName The name of the validator.\n     * @param result The result of the validation.\n     * @param value The value returned by the validator.\n     */\n    public void add(\n            final Field field,\n            final String validatorName,\n            final boolean result,\n            final Object value) {\n\n        ValidatorResult validatorResult = getValidatorResult(field.getKey());\n\n        if (validatorResult == null) {\n            validatorResult = new ValidatorResult(field);\n            hResults.put(field.getKey(), validatorResult);\n        }\n\n        validatorResult.add(validatorName, result, value);\n    }\n\n    /**\n     * Clear all results recorded by this object.\n     */\n    public void clear() {\n        hResults.clear();\n    }\n\n    /**\n     * Gets the set of property names for which at least one message has\n     * been recorded.\n     * @return An unmodifiable Set of the property names.\n     */\n    public Set<String> getPropertyNames() {\n        return Collections.unmodifiableSet(hResults.keySet());\n    }\n\n    /**\n     * Gets a {@link Map} of any {@code Object}s returned from\n     * validation routines.\n     *\n     * @return Map of objections returned by validators.\n     */\n    public Map<String, Object> getResultValueMap() {\n        final Map<String, Object> results = new HashMap<>();\n\n        for (final String propertyKey : hResults.keySet()) {\n            final ValidatorResult vr = getValidatorResult(propertyKey);\n\n            for (final Iterator<String> x = vr.getActions(); x.hasNext();) {\n                final String actionKey = x.next();\n                final Object result = vr.getResult(actionKey);\n\n                if (result != null && !(result instanceof Boolean)) {\n                    results.put(propertyKey, result);\n                }\n            }\n        }\n\n        return results;\n    }\n\n    /**\n     * Gets the {@code ValidatorResult} associated\n     * with the key passed in.  The key the {@code ValidatorResult}\n     * is stored under is the {@code Field}'s getKey method.\n     *\n     * @param key The key generated from {@code Field} (this is often just\n     * the field name).\n     *\n     * @return The result of a specified key.\n     */\n    public ValidatorResult getValidatorResult(final String key) {\n        return hResults.get(key);\n    }\n\n    /**\n     * Gets {@code true} if there are no messages recorded\n     * in this collection, or {@code false} otherwise.\n     *\n     * @return Whether these results are empty.\n     */\n    public boolean isEmpty() {\n        return hResults.isEmpty();\n    }\n\n    /**\n     * Merge another ValidatorResults into mine.\n     *\n     * @param results ValidatorResults to merge.\n     */\n    public void merge(final ValidatorResults results) {\n        hResults.putAll(results.hResults);\n    }\n\n}", "super_interfaces": ["Serializable"], "fields": [{"attribute_expression": "private static final long serialVersionUID = -2709911078904924839L;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "serialVersionUID = -2709911078904924839L", "syntax_pass": true}, {"attribute_expression": "protected Map<String, ValidatorResult> hResults = new HashMap<>();", "docstring": "\nMap of validation results.\n", "modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "type": "Map<String, ValidatorResult>", "name": "hResults = new HashMap<>()", "syntax_pass": true}]}, {"uris": "src/main/java/org/apache/commons/validator/CreditCardValidator.java.CreditCardValidator", "name": "CreditCardValidator", "file_path": "src/main/java/org/apache/commons/validator/CreditCardValidator.java", "superclasses": "", "methods": ["[]CreditCardValidator()", "[]CreditCardValidator(int)", "[void]addAllowedCardType(CreditCardType)", "[boolean]isValid(String)", "[boolean]luhnCheck(String)"], "method_uris": ["src/main/java/org/apache/commons/validator/CreditCardValidator.java.CreditCardValidator.[]CreditCardValidator()", "src/main/java/org/apache/commons/validator/CreditCardValidator.java.CreditCardValidator.[]CreditCardValidator(int)", "src/main/java/org/apache/commons/validator/CreditCardValidator.java.CreditCardValidator.[void]addAllowedCardType(CreditCardType)", "src/main/java/org/apache/commons/validator/CreditCardValidator.java.CreditCardValidator.[boolean]isValid(String)", "src/main/java/org/apache/commons/validator/CreditCardValidator.java.CreditCardValidator.[boolean]luhnCheck(String)"], "overrides": null, "attributes": [{"original_string": "    private static class Amex implements CreditCardType {\n        static final Amex INSTANCE = new Amex();\n        private static final String PREFIX = \"34,37,\";\n        @Override\n        public boolean matches(final String card) {\n            final String prefix2 = card.substring(0, 2) + \",\";\n            return PREFIX.contains(prefix2) && card.length() == 15;\n        }\n    }", "definition": "    private static class Amex implements CreditCardType", "class_docstring": "", "name": "Amex", "super_interfaces": ["CreditCardType"], "superclasses": "", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "fields": [{"attribute_expression": "static final Amex INSTANCE = new Amex();", "docstring": "", "modifiers": "static final", "marker_annotations": [], "non_marker_annotations": ["static", "final"], "comments": [], "type": "Amex", "name": "INSTANCE = new Amex()", "syntax_pass": true}, {"attribute_expression": "private static final String PREFIX = \"34,37,\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "PREFIX = \"34,37,\"", "syntax_pass": true}], "classes": []}, "syntax_pass": true, "methods": [{"syntax_pass": true, "original_string": "        @Override\n        public boolean matches(final String card) {\n            final String prefix2 = card.substring(0, 2) + \",\";\n            return PREFIX.contains(prefix2) && card.length() == 15;\n        }", "docstring": "", "attributes": {"modifiers": "@Override\n        public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "name": "matches", "params": [{"name": "card", "type": "String"}], "body": "                                                  {\n            final String prefix2 = card.substring(0, 2) + \",\";\n            return PREFIX.contains(prefix2) && card.length() == 15;\n        }", "signature": "@Override\n        public boolean matches(final String card)"}]}, {"original_string": "    private static class Discover implements CreditCardType {\n        static final Discover INSTANCE = new Discover();\n        private static final String PREFIX = \"6011\";\n        @Override\n        public boolean matches(final String card) {\n            return card.substring(0, 4).equals(PREFIX) && card.length() == 16;\n        }\n    }", "definition": "    private static class Discover implements CreditCardType", "class_docstring": "", "name": "Discover", "super_interfaces": ["CreditCardType"], "superclasses": "", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "fields": [{"attribute_expression": "static final Discover INSTANCE = new Discover();", "docstring": "", "modifiers": "static final", "marker_annotations": [], "non_marker_annotations": ["static", "final"], "comments": [], "type": "Discover", "name": "INSTANCE = new Discover()", "syntax_pass": true}, {"attribute_expression": "private static final String PREFIX = \"6011\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "PREFIX = \"6011\"", "syntax_pass": true}], "classes": []}, "syntax_pass": true, "methods": [{"syntax_pass": true, "original_string": "        @Override\n        public boolean matches(final String card) {\n            return card.substring(0, 4).equals(PREFIX) && card.length() == 16;\n        }", "docstring": "", "attributes": {"modifiers": "@Override\n        public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "name": "matches", "params": [{"name": "card", "type": "String"}], "body": "                                                  {\n            return card.substring(0, 4).equals(PREFIX) && card.length() == 16;\n        }", "signature": "@Override\n        public boolean matches(final String card)"}]}, {"original_string": "    private static class Mastercard implements CreditCardType {\n        static final Mastercard INSTANCE = new Mastercard();\n        private static final String PREFIX = \"51,52,53,54,55,\";\n        @Override\n        public boolean matches(final String card) {\n            final String prefix2 = card.substring(0, 2) + \",\";\n            return PREFIX.contains(prefix2) && card.length() == 16;\n        }\n    }", "definition": "    private static class Mastercard implements CreditCardType", "class_docstring": "", "name": "Mastercard", "super_interfaces": ["CreditCardType"], "superclasses": "", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "fields": [{"attribute_expression": "static final Mastercard INSTANCE = new Mastercard();", "docstring": "", "modifiers": "static final", "marker_annotations": [], "non_marker_annotations": ["static", "final"], "comments": [], "type": "Mastercard", "name": "INSTANCE = new Mastercard()", "syntax_pass": true}, {"attribute_expression": "private static final String PREFIX = \"51,52,53,54,55,\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "PREFIX = \"51,52,53,54,55,\"", "syntax_pass": true}], "classes": []}, "syntax_pass": true, "methods": [{"syntax_pass": true, "original_string": "        @Override\n        public boolean matches(final String card) {\n            final String prefix2 = card.substring(0, 2) + \",\";\n            return PREFIX.contains(prefix2) && card.length() == 16;\n        }", "docstring": "", "attributes": {"modifiers": "@Override\n        public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "name": "matches", "params": [{"name": "card", "type": "String"}], "body": "                                                  {\n            final String prefix2 = card.substring(0, 2) + \",\";\n            return PREFIX.contains(prefix2) && card.length() == 16;\n        }", "signature": "@Override\n        public boolean matches(final String card)"}]}, {"original_string": "    private static class Visa implements CreditCardType {\n        static final Visa INSTANCE = new Visa();\n        private static final String PREFIX = \"4\";\n\n        @Override\n        public boolean matches(final String card) {\n            return card.substring(0, 1).equals(PREFIX) && (card.length() == 13 || card.length() == 16);\n        }\n    }", "definition": "    private static class Visa implements CreditCardType", "class_docstring": "\n Change to support Visa Carte Blue used in France\n has been removed - see Bug 35926\n", "name": "Visa", "super_interfaces": ["CreditCardType"], "superclasses": "", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "fields": [{"attribute_expression": "static final Visa INSTANCE = new Visa();", "docstring": "", "modifiers": "static final", "marker_annotations": [], "non_marker_annotations": ["static", "final"], "comments": [], "type": "Visa", "name": "INSTANCE = new Visa()", "syntax_pass": true}, {"attribute_expression": "private static final String PREFIX = \"4\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "PREFIX = \"4\"", "syntax_pass": true}], "classes": []}, "syntax_pass": true, "methods": [{"syntax_pass": true, "original_string": "        @Override\n        public boolean matches(final String card) {\n            return card.substring(0, 1).equals(PREFIX) && (card.length() == 13 || card.length() == 16);\n        }", "docstring": "", "attributes": {"modifiers": "@Override\n        public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "name": "matches", "params": [{"name": "card", "type": "String"}], "body": "                                                  {\n            return card.substring(0, 1).equals(PREFIX) && (card.length() == 13 || card.length() == 16);\n        }", "signature": "@Override\n        public boolean matches(final String card)"}]}], "class_docstring": " CHECKSTYLE:OFF (deprecated code)", "original_string": "@Deprecated\npublic class CreditCardValidator {\n\n    private static class Amex implements CreditCardType {\n        static final Amex INSTANCE = new Amex();\n        private static final String PREFIX = \"34,37,\";\n        @Override\n        public boolean matches(final String card) {\n            final String prefix2 = card.substring(0, 2) + \",\";\n            return PREFIX.contains(prefix2) && card.length() == 15;\n        }\n    }\n\n    /**\n     * CreditCardType implementations define how validation is performed\n     * for one type/brand of credit card.\n     * @since 1.1.2\n     */\n    public interface CreditCardType {\n\n        /**\n         * Returns true if the card number matches this type of credit\n         * card.  Note that this method is <strong>not</strong> responsible\n         * for analyzing the general form of the card number because\n         * {@code CreditCardValidator} performs those checks before\n         * calling this method.  It is generally only required to valid the\n         * length and prefix of the number to determine if it's the correct\n         * type.\n         * @param card The card number, never null.\n         * @return true if the number matches.\n         */\n        boolean matches(String card);\n\n    }\n\n    private static class Discover implements CreditCardType {\n        static final Discover INSTANCE = new Discover();\n        private static final String PREFIX = \"6011\";\n        @Override\n        public boolean matches(final String card) {\n            return card.substring(0, 4).equals(PREFIX) && card.length() == 16;\n        }\n    }\n\n    private static class Mastercard implements CreditCardType {\n        static final Mastercard INSTANCE = new Mastercard();\n        private static final String PREFIX = \"51,52,53,54,55,\";\n        @Override\n        public boolean matches(final String card) {\n            final String prefix2 = card.substring(0, 2) + \",\";\n            return PREFIX.contains(prefix2) && card.length() == 16;\n        }\n    }\n\n    /**\n     *  Change to support Visa Carte Blue used in France\n     *  has been removed - see Bug 35926\n     */\n    private static class Visa implements CreditCardType {\n        static final Visa INSTANCE = new Visa();\n        private static final String PREFIX = \"4\";\n\n        @Override\n        public boolean matches(final String card) {\n            return card.substring(0, 1).equals(PREFIX) && (card.length() == 13 || card.length() == 16);\n        }\n    }\n\n    /**\n     * Option specifying that no cards are allowed.  This is useful if\n     * you want only custom card types to validate so you turn off the\n     * default cards with this option.\n     * <pre>\n     * {@code\n     * CreditCardValidator v = new CreditCardValidator(CreditCardValidator.NONE);\n     * v.addAllowedCardType(customType);\n     * v.isValid(aCardNumber);\n     * }\n     * </pre>\n     * @since 1.1.2\n     */\n    public static final int NONE = 0;\n\n    /**\n     * Option specifying that American Express cards are allowed.\n     */\n    public static final int AMEX = 1 << 0;\n\n    /**\n     * Option specifying that Visa cards are allowed.\n     */\n    public static final int VISA = 1 << 1;\n\n    /**\n     * Option specifying that Mastercard cards are allowed.\n     */\n    public static final int MASTERCARD = 1 << 2;\n\n    /**\n     * Option specifying that Discover cards are allowed.\n     */\n    public static final int DISCOVER = 1 << 3;\n\n    /**\n     * The CreditCardTypes that are allowed to pass validation.\n     */\n    private final Collection<CreditCardType> cardTypes = new ArrayList<>();\n\n    /**\n     * Create a new CreditCardValidator with default options.\n     */\n    public CreditCardValidator() {\n        this(AMEX + VISA + MASTERCARD + DISCOVER);\n    }\n\n    /**\n     * Creates a new CreditCardValidator with the specified options.\n     * @param options Pass in\n     * CreditCardValidator.VISA + CreditCardValidator.AMEX to specify that\n     * those are the only valid card types.\n     */\n    public CreditCardValidator(final int options) {\n        final Flags f = new Flags(options);\n        if (f.isOn(VISA)) {\n            cardTypes.add(Visa.INSTANCE);\n        }\n\n        if (f.isOn(AMEX)) {\n            cardTypes.add(Amex.INSTANCE);\n        }\n\n        if (f.isOn(MASTERCARD)) {\n            cardTypes.add(Mastercard.INSTANCE);\n        }\n\n        if (f.isOn(DISCOVER)) {\n            cardTypes.add(Discover.INSTANCE);\n        }\n    }\n\n    /**\n     * Adds an allowed CreditCardType that participates in the card\n     * validation algorithm.\n     * @param type The type that is now allowed to pass validation.\n     * @since 1.1.2\n     */\n    public void addAllowedCardType(final CreditCardType type){\n        cardTypes.add(type);\n    }\n\n    /**\n     * Checks if the field is a valid credit card number.\n     * @param card The card number to validate.\n     * @return Whether the card number is valid.\n     */\n    public boolean isValid(final String card) {\n        if (card == null || card.length() < 13 || card.length() > 19) {\n            return false;\n        }\n        if (!luhnCheck(card)) {\n            return false;\n        }\n        for (final Object cardType : cardTypes) {\n            final CreditCardType type = (CreditCardType) cardType;\n            if (type.matches(card)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Checks for a valid credit card number.\n     * @param cardNumber Credit Card Number.\n     * @return Whether the card number passes the luhnCheck.\n     */\n    protected boolean luhnCheck(final String cardNumber) {\n        // number must be validated as 0..9 numeric first!!\n        final int digits = cardNumber.length();\n        final int oddOrEven = digits & 1;\n        long sum = 0;\n        for (int count = 0; count < digits; count++) {\n            int digit = 0;\n            try {\n                digit = Integer.parseInt(cardNumber.charAt(count) + \"\");\n            } catch (final NumberFormatException e) {\n                return false;\n            }\n            if ((count & 1 ^ oddOrEven) == 0) { // not\n                digit *= 2;\n                if (digit > 9) {\n                    digit -= 9;\n                }\n            }\n            sum += digit;\n        }\n        return sum != 0 && sum % 10 == 0;\n    }\n\n}", "super_interfaces": [], "fields": [{"attribute_expression": "public static final int NONE = 0;", "docstring": "\nOption specifying that no cards are allowed.  This is useful if\nyou want only custom card types to validate so you turn off the\ndefault cards with this option.\n<pre>\n{@code\nCreditCardValidator v = new CreditCardValidator(CreditCardValidator.NONE);\nv.addAllowedCardType(customType);\nv.isValid(aCardNumber);\n}\n</pre>\n@since 1.1.2\n", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "int", "name": "NONE = 0", "syntax_pass": true}, {"attribute_expression": "public static final int AMEX = 1 << 0;", "docstring": "\nOption specifying that American Express cards are allowed.\n", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "int", "name": "AMEX = 1 << 0", "syntax_pass": true}, {"attribute_expression": "public static final int VISA = 1 << 1;", "docstring": "\nOption specifying that Visa cards are allowed.\n", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "int", "name": "VISA = 1 << 1", "syntax_pass": true}, {"attribute_expression": "public static final int MASTERCARD = 1 << 2;", "docstring": "\nOption specifying that Mastercard cards are allowed.\n", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "int", "name": "MASTERCARD = 1 << 2", "syntax_pass": true}, {"attribute_expression": "public static final int DISCOVER = 1 << 3;", "docstring": "\nOption specifying that Discover cards are allowed.\n", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "int", "name": "DISCOVER = 1 << 3", "syntax_pass": true}, {"attribute_expression": "private final Collection<CreditCardType> cardTypes = new ArrayList<>();", "docstring": "\nThe CreditCardTypes that are allowed to pass validation.\n", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Collection<CreditCardType>", "name": "cardTypes = new ArrayList<>()", "syntax_pass": true}]}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction", "name": "ValidatorAction", "file_path": "src/main/java/org/apache/commons/validator/ValidatorAction.java", "superclasses": "", "methods": ["[boolean]executeValidationMethod(Field,Map<String, Object>,ValidatorResults,int)", "[String]formatJavaScriptFileName()", "[String]generateJsFunction()", "[ClassLoader]getClassLoader(Map<String, Object>)", "[String]getClassname()", "[List<String>]getDependencyList()", "[String]getDepends()", "[String]getJavascript()", "[String]getJsFunctionName()", "[Log]getLog()", "[String]getMethod()", "[String]getMethodParams()", "[String]getMsg()", "[String]getName()", "[Object[]]getParameterValues(Map<String, ? super Object>)", "[Object]getValidationClassInstance()", "[Validator]getValidator(Map<String, Object>)", "[void]handleIndexedField(Field,int,Object[])", "[void]init()", "[boolean]isDependency(String)", "[boolean]isValid(Object)", "[boolean]javaScriptAlreadyLoaded()", "[void]loadJavascriptFunction()", "[void]loadParameterClasses(ClassLoader)", "[void]loadValidationClass(ClassLoader)", "[void]loadValidationMethod()", "[boolean]onlyReturnErrors(Map<String, Object>)", "[InputStream]openInputStream(String,ClassLoader)", "[String]readJavaScriptFile(String)", "[void]setClassname(String)", "[void]setClassName(String)", "[void]setDepends(String)", "[void]setJavascript(String)", "[void]setJsFunction(String)", "[void]setJsFunctionName(String)", "[void]setMethod(String)", "[void]setMethodParams(String)", "[void]setMsg(String)", "[void]setName(String)", "[String]toString()"], "method_uris": ["src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[boolean]executeValidationMethod(Field,Map<String, Object>,ValidatorResults,int)", "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[String]formatJavaScriptFileName()", "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[String]generateJsFunction()", "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[ClassLoader]getClassLoader(Map<String, Object>)", "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[String]getClassname()", "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[List<String>]getDependencyList()", "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[String]getDepends()", "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[String]getJavascript()", "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[String]getJsFunctionName()", "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[Log]getLog()", "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[String]getMethod()", "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[String]getMethodParams()", "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[String]getMsg()", "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[String]getName()", "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[Object[]]getParameterValues(Map<String, ? super Object>)", "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[Object]getValidationClassInstance()", "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[Validator]getValidator(Map<String, Object>)", "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[void]handleIndexedField(Field,int,Object[])", "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[void]init()", "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[boolean]isDependency(String)", "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[boolean]isValid(Object)", "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[boolean]javaScriptAlreadyLoaded()", "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[void]loadJavascriptFunction()", "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[void]loadParameterClasses(ClassLoader)", "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[void]loadValidationClass(ClassLoader)", "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[void]loadValidationMethod()", "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[boolean]onlyReturnErrors(Map<String, Object>)", "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[InputStream]openInputStream(String,ClassLoader)", "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[String]readJavaScriptFile(String)", "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[void]setClassname(String)", "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[void]setClassName(String)", "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[void]setDepends(String)", "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[void]setJavascript(String)", "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[void]setJsFunction(String)", "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[void]setJsFunctionName(String)", "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[void]setMethod(String)", "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[void]setMethodParams(String)", "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[void]setMsg(String)", "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[void]setName(String)", "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[String]toString()"], "overrides": null, "attributes": [], "class_docstring": "\nContains the information to dynamically create and run a validation method. This is the class representation of a pluggable validator that can be defined in\nan xml file with the &lt;validator&gt; element.\n\n<strong>Note</strong>: The validation method is assumed to be thread safe.\n", "original_string": "public class ValidatorAction implements Serializable {\n\n    private static final long serialVersionUID = 1339713700053204597L;\n\n    /**\n     * Logger.\n     */\n    private transient Log log = LogFactory.getLog(ValidatorAction.class);\n\n    /**\n     * The name of the validation.\n     */\n    private String name;\n\n    /**\n     * The full class name of the class containing the validation method associated with this action.\n     */\n    private String className;\n\n    /**\n     * The Class object loaded from the class name.\n     */\n    private Class<?> validationClass;\n\n    /**\n     * The full method name of the validation to be performed. The method must be thread safe.\n     */\n    private String method;\n\n    /**\n     * The Method object loaded from the method name.\n     */\n    private transient Method validationMethod;\n\n    /**\n     * <p>\n     * The method signature of the validation method. This should be a comma delimited list of the full class names of each parameter in the correct order that\n     * the method takes.\n     * </p>\n     * <p>\n     * Note: {@code java.lang.Object} is reserved for the JavaBean that is being validated. The {@code ValidatorAction} and {@code Field} that\n     * are associated with a field's validation will automatically be populated if they are specified in the method signature.\n     * </p>\n     */\n    private String methodParams = Validator.BEAN_PARAM + \",\" + Validator.VALIDATOR_ACTION_PARAM + \",\" + Validator.FIELD_PARAM;\n\n    /**\n     * The Class objects for each entry in methodParameterList.\n     */\n    private Class<?>[] parameterClasses;\n\n    /**\n     * The other {@code ValidatorAction}s that this one depends on. If any errors occur in an action that this one depends on, this action will not be\n     * processsed.\n     */\n    private String depends;\n\n    /**\n     * The default error message associated with this action.\n     */\n    private String msg;\n\n    /**\n     * An optional field to contain the name to be used if JavaScript is generated.\n     */\n    private String jsFunctionName;\n\n    /**\n     * An optional field to contain the class path to be used to retrieve the JavaScript function.\n     */\n    private String jsFunction;\n\n    /**\n     * An optional field to containing a JavaScript representation of the Java method assocated with this action.\n     */\n    private String javascript;\n\n    /**\n     * If the Java method matching the correct signature isn't static, the instance is stored in the action. This assumes the method is thread safe.\n     */\n    private Object instance;\n\n    /**\n     * An internal List representation of the other {@code ValidatorAction}s this one depends on (if any). This List gets updated whenever setDepends()\n     * gets called. This is synchronized so a call to setDepends() (which clears the List) won't interfere with a call to isDependency().\n     */\n    private final List<String> dependencyList = Collections.synchronizedList(new ArrayList<>());\n\n    /**\n     * An internal List representation of all the validation method's parameters defined in the methodParams String.\n     */\n    private final List<String> methodParameterList = new ArrayList<>();\n\n    /**\n     * Dynamically runs the validation method for this validator and returns true if the data is valid.\n     *\n     * @param field\n     * @param params  A Map of class names to parameter values.\n     * @param results\n     * @param pos     The index of the list property to validate if it's indexed.\n     * @throws ValidatorException\n     */\n    boolean executeValidationMethod(final Field field,\n            // TODO What is this the correct value type?\n            // both ValidatorAction and Validator are added as parameters\n            final Map<String, Object> params, final ValidatorResults results, final int pos) throws ValidatorException {\n\n        params.put(Validator.VALIDATOR_ACTION_PARAM, this);\n\n        try {\n            if (validationMethod == null) {\n                synchronized (this) {\n                    final ClassLoader loader = getClassLoader(params);\n                    loadValidationClass(loader);\n                    loadParameterClasses(loader);\n                    loadValidationMethod();\n                }\n            }\n\n            final Object[] paramValues = getParameterValues(params);\n\n            if (field.isIndexed()) {\n                handleIndexedField(field, pos, paramValues);\n            }\n\n            Object result = null;\n            try {\n                result = validationMethod.invoke(getValidationClassInstance(), paramValues);\n\n            } catch (IllegalArgumentException | IllegalAccessException e) {\n                throw new ValidatorException(e.getMessage());\n            } catch (final InvocationTargetException e) {\n\n                if (e.getTargetException() instanceof Exception) {\n                    throw (Exception) e.getTargetException();\n\n                }\n                if (e.getTargetException() instanceof Error) {\n                    throw (Error) e.getTargetException();\n                }\n            }\n\n            final boolean valid = isValid(result);\n            if (!valid || valid && !onlyReturnErrors(params)) {\n                results.add(field, name, valid, result);\n            }\n\n            if (!valid) {\n                return false;\n            }\n\n            // TODO This catch block remains for backward compatibility. Remove\n            // this for Validator 2.0 when exception scheme changes.\n        } catch (final Exception e) {\n            if (e instanceof ValidatorException) {\n                throw (ValidatorException) e;\n            }\n\n            getLog().error(\"Unhandled exception thrown during validation: \" + e.getMessage(), e);\n\n            results.add(field, name, false);\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * @return A file name suitable for passing to a {@link ClassLoader#getResourceAsStream(String)} method.\n     */\n    private String formatJavaScriptFileName() {\n        String fname = jsFunction.substring(1);\n\n        if (!jsFunction.startsWith(\"/\")) {\n            fname = jsFunction.replace('.', '/') + \".js\";\n        }\n\n        return fname;\n    }\n\n    /**\n     * Used to generate the JavaScript name when it is not specified.\n     */\n    private String generateJsFunction() {\n        final StringBuilder jsName = new StringBuilder(\"org.apache.commons.validator.javascript\");\n\n        jsName.append(\".validate\");\n        jsName.append(name.substring(0, 1).toUpperCase());\n        jsName.append(name.substring(1));\n\n        return jsName.toString();\n    }\n\n    /**\n     * Returns the ClassLoader set in the Validator contained in the parameter Map.\n     */\n    private ClassLoader getClassLoader(final Map<String, Object> params) {\n        final Validator v = getValidator(params);\n        return v.getClassLoader();\n    }\n\n    /**\n     * Gets the class of the validator action.\n     *\n     * @return Class name of the validator Action.\n     */\n    public String getClassname() {\n        return className;\n    }\n\n    /**\n     * Returns the dependent validator names as an unmodifiable {@code List}.\n     *\n     * @return List of the validator action's depedents.\n     */\n    public List<String> getDependencyList() {\n        return Collections.unmodifiableList(dependencyList);\n    }\n\n    /**\n     * Gets the dependencies of the validator action as a comma separated list of validator names.\n     *\n     * @return The validator action's dependencies.\n     */\n    public String getDepends() {\n        return depends;\n    }\n\n    /**\n     * Gets the JavaScript equivalent of the Java class and method associated with this action.\n     *\n     * @return The JavaScript validation.\n     */\n    public synchronized String getJavascript() {\n        return javascript;\n    }\n\n    /**\n     * Gets the JavaScript function name. This is optional and can be used instead of validator action name for the name of the JavaScript function/object.\n     *\n     * @return The JavaScript function name.\n     */\n    public String getJsFunctionName() {\n        return jsFunctionName;\n    }\n\n    /**\n     * Accessor method for Log instance.\n     *\n     * The Log instance variable is transient and accessing it through this method ensures it is re-initialized when this instance is de-serialized.\n     *\n     * @return The Log instance.\n     */\n    private Log getLog() {\n        if (log == null) {\n            log = LogFactory.getLog(ValidatorAction.class);\n        }\n        return log;\n    }\n\n    /**\n     * Gets the name of method being called for the validator action.\n     *\n     * @return The method name.\n     */\n    public String getMethod() {\n        return method;\n    }\n\n    /**\n     * Gets the method parameters for the method.\n     *\n     * @return Method's parameters.\n     */\n    public String getMethodParams() {\n        return methodParams;\n    }\n\n    /**\n     * Gets the message associated with the validator action.\n     *\n     * @return The message for the validator action.\n     */\n    public String getMsg() {\n        return msg;\n    }\n\n    /**\n     * Gets the name of the validator action.\n     *\n     * @return Validator Action name.\n     */\n    public String getName() {\n        return name;\n    }\n\n    /**\n     * Converts a List of parameter class names into their values contained in the parameters Map.\n     *\n     * @param params A Map of class names to parameter values.\n     * @return An array containing the value object for each parameter. This array is in the same order as the given List and is suitable for passing to the\n     *         validation method.\n     */\n    private Object[] getParameterValues(final Map<String, ? super Object> params) {\n\n        final Object[] paramValue = new Object[methodParameterList.size()];\n\n        for (int i = 0; i < methodParameterList.size(); i++) {\n            final String paramClassName = methodParameterList.get(i);\n            paramValue[i] = params.get(paramClassName);\n        }\n\n        return paramValue;\n    }\n\n    /**\n     * Gets an instance of the validation class or null if the validation method is static so does not require an instance to be executed.\n     */\n    private Object getValidationClassInstance() throws ValidatorException {\n        if (Modifier.isStatic(validationMethod.getModifiers())) {\n            instance = null;\n\n        } else if (instance == null) {\n            try {\n                instance = validationClass.getConstructor().newInstance();\n            } catch (final ReflectiveOperationException e) {\n                final String msg1 = \"Couldn't create instance of \" + className + \".  \" + e.getMessage();\n\n                throw new ValidatorException(msg1);\n            }\n        }\n\n        return instance;\n    }\n\n    private Validator getValidator(final Map<String, Object> params) {\n        return (Validator) params.get(Validator.VALIDATOR_PARAM);\n    }\n\n    /**\n     * Modifies the paramValue array with indexed fields.\n     *\n     * @param field\n     * @param pos\n     * @param paramValues\n     */\n    private void handleIndexedField(final Field field, final int pos, final Object[] paramValues) throws ValidatorException {\n\n        final int beanIndex = methodParameterList.indexOf(Validator.BEAN_PARAM);\n        final int fieldIndex = methodParameterList.indexOf(Validator.FIELD_PARAM);\n\n        final Object[] indexedList = field.getIndexedProperty(paramValues[beanIndex]);\n\n        // Set current iteration object to the parameter array\n        paramValues[beanIndex] = indexedList[pos];\n\n        // Set field clone with the key modified to represent\n        // the current field\n        final Field indexedField = (Field) field.clone();\n        indexedField.setKey(ValidatorUtils.replace(indexedField.getKey(), Field.TOKEN_INDEXED, \"[\" + pos + \"]\"));\n\n        paramValues[fieldIndex] = indexedField;\n    }\n\n    /**\n     * Initialize based on set.\n     */\n    protected void init() {\n        loadJavascriptFunction();\n    }\n\n    /**\n     * Checks whether or not the value passed in is in the depends field.\n     *\n     * @param validatorName Name of the dependency to check.\n     * @return Whether the named validator is a dependant.\n     */\n    public boolean isDependency(final String validatorName) {\n        return dependencyList.contains(validatorName);\n    }\n\n    /**\n     * If the result object is a {@code Boolean}, it will return its value. If not it will return {@code false} if the object is {@code null} and\n     * {@code true} if it isn't.\n     */\n    private boolean isValid(final Object result) {\n        if (result instanceof Boolean) {\n            final Boolean valid = (Boolean) result;\n            return valid.booleanValue();\n        }\n        return result != null;\n    }\n\n    /**\n     * @return true if the JavaScript for this action has already been loaded.\n     */\n    private boolean javaScriptAlreadyLoaded() {\n        return javascript != null;\n    }\n\n    /**\n     * Load the JavaScript function specified by the given path. For this implementation, the {@code jsFunction} property should contain a fully qualified\n     * package and script name, separated by periods, to be loaded from the class loader that created this instance.\n     *\n     * TODO if the path begins with a '/' the path will be intepreted as absolute, and remain unchanged. If this fails then it will attempt to treat the path as\n     * a file path. It is assumed the script ends with a '.js'.\n     */\n    protected synchronized void loadJavascriptFunction() {\n\n        if (javaScriptAlreadyLoaded()) {\n            return;\n        }\n\n        if (getLog().isTraceEnabled()) {\n            getLog().trace(\"  Loading function begun\");\n        }\n\n        if (jsFunction == null) {\n            jsFunction = generateJsFunction();\n        }\n\n        final String javaScriptFileName = formatJavaScriptFileName();\n\n        if (getLog().isTraceEnabled()) {\n            getLog().trace(\"  Loading js function '\" + javaScriptFileName + \"'\");\n        }\n\n        javascript = readJavaScriptFile(javaScriptFileName);\n\n        if (getLog().isTraceEnabled()) {\n            getLog().trace(\"  Loading JavaScript function completed\");\n        }\n\n    }\n\n    /**\n     * Converts a List of parameter class names into their Class objects. Stores the output in {@link #parameterClasses}. This array is in the same order as the\n     * given List and is suitable for passing to the validation method.\n     *\n     * @throws ValidatorException if a class cannot be loaded.\n     */\n    private void loadParameterClasses(final ClassLoader loader) throws ValidatorException {\n\n        if (parameterClasses != null) {\n            return;\n        }\n\n        final Class<?>[] parameterClasses = new Class[methodParameterList.size()];\n\n        for (int i = 0; i < methodParameterList.size(); i++) {\n            final String paramClassName = methodParameterList.get(i);\n\n            try {\n                parameterClasses[i] = loader.loadClass(paramClassName);\n\n            } catch (final ClassNotFoundException e) {\n                throw new ValidatorException(e.getMessage());\n            }\n        }\n\n        this.parameterClasses = parameterClasses;\n    }\n\n    /**\n     * Load the Class object for the configured validation class name.\n     *\n     * @param loader The ClassLoader used to load the Class object.\n     * @throws ValidatorException\n     */\n    private void loadValidationClass(final ClassLoader loader) throws ValidatorException {\n\n        if (validationClass != null) {\n            return;\n        }\n\n        try {\n            validationClass = loader.loadClass(className);\n        } catch (final ClassNotFoundException e) {\n            throw new ValidatorException(e.toString());\n        }\n    }\n\n    /**\n     * Load the Method object for the configured validation method name.\n     *\n     * @throws ValidatorException\n     */\n    private void loadValidationMethod() throws ValidatorException {\n        if (validationMethod != null) {\n            return;\n        }\n\n        try {\n            validationMethod = validationClass.getMethod(method, parameterClasses);\n\n        } catch (final NoSuchMethodException e) {\n            throw new ValidatorException(\"No such validation method: \" + e.getMessage());\n        }\n    }\n\n    /**\n     * Returns the onlyReturnErrors setting in the Validator contained in the parameter Map.\n     */\n    private boolean onlyReturnErrors(final Map<String, Object> params) {\n        final Validator v = getValidator(params);\n        return v.getOnlyReturnErrors();\n    }\n\n    /**\n     * Opens an input stream for reading the specified resource.\n     * <p>\n     * The search order is described in the documentation for {@link ClassLoader#getResource(String)}.\n     * </p>\n     *\n     * @param name The resource name\n     * @return An input stream for reading the resource, or {@code null} if the resource could not be found\n     */\n    private InputStream openInputStream(final String javaScriptFileName, final ClassLoader classLoader) {\n        InputStream is = null;\n        if (classLoader != null) {\n            is = classLoader.getResourceAsStream(javaScriptFileName);\n        }\n        if (is == null) {\n            return getClass().getResourceAsStream(javaScriptFileName);\n        }\n        return is;\n    }\n\n    /**\n     * Reads a JavaScript function from a file.\n     *\n     * @param javaScriptFileName The file containing the JavaScript.\n     * @return The JavaScript function or null if it could not be loaded.\n     */\n    private String readJavaScriptFile(final String javaScriptFileName) {\n        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n        if (classLoader == null) {\n            classLoader = getClass().getClassLoader();\n        }\n        // BufferedReader closes InputStreamReader closes InputStream\n        final InputStream is = openInputStream(javaScriptFileName, classLoader);\n        if (is == null) {\n            getLog().debug(\"  Unable to read javascript name \" + javaScriptFileName);\n            return null;\n        }\n        final StringBuilder buffer = new StringBuilder();\n        // TODO encoding\n        try (BufferedReader reader = new BufferedReader(new InputStreamReader(is, StandardCharsets.UTF_8))) {\n            String line = null;\n            while ((line = reader.readLine()) != null) {\n                buffer.append(line).append(\"\\n\");\n            }\n        } catch (final IOException e) {\n            getLog().error(\"Error reading JavaScript file.\", e);\n\n        }\n        final String function = buffer.toString();\n        return function.isEmpty() ? null : function;\n    }\n\n    /**\n     * Sets the class of the validator action.\n     *\n     * @param className Class name of the validator Action.\n     * @deprecated Use {@link #setClassName(String)}.\n     */\n    @Deprecated\n    public void setClassname(final String className) {\n        this.className = className;\n    }\n\n    /**\n     * Sets the class of the validator action.\n     *\n     * @param className Class name of the validator Action.\n     */\n    public void setClassName(final String className) {\n        this.className = className;\n    }\n\n    /**\n     * Sets the dependencies of the validator action.\n     *\n     * @param depends A comma separated list of validator names.\n     */\n    public void setDepends(final String depends) {\n        this.depends = depends;\n\n        dependencyList.clear();\n\n        final StringTokenizer st = new StringTokenizer(depends, \",\");\n        while (st.hasMoreTokens()) {\n            final String depend = st.nextToken().trim();\n\n            if (depend != null && !depend.isEmpty()) {\n                dependencyList.add(depend);\n            }\n        }\n    }\n\n    /**\n     * Sets the JavaScript equivalent of the Java class and method associated with this action.\n     *\n     * @param javaScript The JavaScript validation.\n     */\n    public synchronized void setJavascript(final String javaScript) {\n        if (jsFunction != null) {\n            throw new IllegalStateException(\"Cannot call setJavascript() after calling setJsFunction()\");\n        }\n\n        this.javascript = javaScript;\n    }\n\n    /**\n     * Sets the fully qualified class path of the JavaScript function.\n     * <p>\n     * This is optional and can be used <strong>instead</strong> of the setJavascript(). Attempting to call both {@code setJsFunction} and\n     * {@code setJavascript} will result in an {@code IllegalStateException} being thrown.\n     * </p>\n     * <p>\n     * If <strong>neither</strong> setJsFunction or setJavascript is set then validator will attempt to load the default JavaScript definition.\n     * </p>\n     *\n     * <pre>\n     * <b>Examples</b>\n     *   If in the validator.xml :\n     * #1:\n     *      &lt;validator name=\"tire\"\n     *            jsFunction=\"com.yourcompany.project.tireFuncion\"&gt;\n     *     Validator will attempt to load com.yourcompany.project.validateTireFunction.js from\n     *     its class path.\n     * #2:\n     *    &lt;validator name=\"tire\"&gt;\n     *      Validator will use the name attribute to try and load\n     *         org.apache.commons.validator.javascript.validateTire.js\n     *      which is the default JavaScript definition.\n     * </pre>\n     *\n     * @param jsFunction The JavaScript function's fully qualified class path.\n     */\n    public synchronized void setJsFunction(final String jsFunction) {\n        if (javascript != null) {\n            throw new IllegalStateException(\"Cannot call setJsFunction() after calling setJavascript()\");\n        }\n\n        this.jsFunction = jsFunction;\n    }\n\n    /**\n     * Sets the JavaScript function name. This is optional and can be used instead of validator action name for the name of the JavaScript function/object.\n     *\n     * @param jsFunctionName The JavaScript function name.\n     */\n    public void setJsFunctionName(final String jsFunctionName) {\n        this.jsFunctionName = jsFunctionName;\n    }\n\n    /**\n     * Sets the name of method being called for the validator action.\n     *\n     * @param method The method name.\n     */\n    public void setMethod(final String method) {\n        this.method = method;\n    }\n\n    /**\n     * Sets the method parameters for the method.\n     *\n     * @param methodParams A comma separated list of parameters.\n     */\n    public void setMethodParams(final String methodParams) {\n        this.methodParams = methodParams;\n\n        methodParameterList.clear();\n\n        final StringTokenizer st = new StringTokenizer(methodParams, \",\");\n        while (st.hasMoreTokens()) {\n            final String value = st.nextToken().trim();\n\n            if (value != null && !value.isEmpty()) {\n                methodParameterList.add(value);\n            }\n        }\n    }\n\n    /**\n     * Sets the message associated with the validator action.\n     *\n     * @param msg The message for the validator action.\n     */\n    public void setMsg(final String msg) {\n        this.msg = msg;\n    }\n\n    /**\n     * Sets the name of the validator action.\n     *\n     * @param name Validator Action name.\n     */\n    public void setName(final String name) {\n        this.name = name;\n    }\n\n    /**\n     * Returns a string representation of the object.\n     *\n     * @return a string representation.\n     */\n    @Override\n    public String toString() {\n        final StringBuilder results = new StringBuilder(\"ValidatorAction: \");\n        results.append(name);\n        results.append(\"\\n\");\n\n        return results.toString();\n    }\n}", "super_interfaces": ["Serializable"], "fields": [{"attribute_expression": "private static final long serialVersionUID = 1339713700053204597L;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "serialVersionUID = 1339713700053204597L", "syntax_pass": true}, {"attribute_expression": "private transient Log log = LogFactory.getLog(ValidatorAction.class);", "docstring": "\nLogger.\n", "modifiers": "private transient", "marker_annotations": [], "non_marker_annotations": ["private", "transient"], "comments": [], "type": "Log", "name": "log = LogFactory.getLog(ValidatorAction.class)", "syntax_pass": true}, {"attribute_expression": "private String name;", "docstring": "\nThe name of the validation.\n", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "name", "syntax_pass": true}, {"attribute_expression": "private String className;", "docstring": "\nThe full class name of the class containing the validation method associated with this action.\n", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "className", "syntax_pass": true}, {"attribute_expression": "private Class<?> validationClass;", "docstring": "\nThe Class object loaded from the class name.\n", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Class<?>", "name": "validationClass", "syntax_pass": true}, {"attribute_expression": "private String method;", "docstring": "\nThe full method name of the validation to be performed. The method must be thread safe.\n", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "method", "syntax_pass": true}, {"attribute_expression": "private transient Method validationMethod;", "docstring": "\nThe Method object loaded from the method name.\n", "modifiers": "private transient", "marker_annotations": [], "non_marker_annotations": ["private", "transient"], "comments": [], "type": "Method", "name": "validationMethod", "syntax_pass": true}, {"attribute_expression": "private String methodParams = Validator.BEAN_PARAM + \",\" + Validator.VALIDATOR_ACTION_PARAM + \",\" + Validator.FIELD_PARAM;", "docstring": "\n<p>\nThe method signature of the validation method. This should be a comma delimited list of the full class names of each parameter in the correct order that\nthe method takes.\n</p>\n<p>\nNote: {@code java.lang.Object} is reserved for the JavaBean that is being validated. The {@code ValidatorAction} and {@code Field} that\nare associated with a field's validation will automatically be populated if they are specified in the method signature.\n</p>\n", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "methodParams = Validator.BEAN_PARAM + \",\" + Validator.VALIDATOR_ACTION_PARAM + \",\" + Validator.FIELD_PARAM", "syntax_pass": true}, {"attribute_expression": "private Class<?>[] parameterClasses;", "docstring": "\nThe Class objects for each entry in methodParameterList.\n", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Class<?>[]", "name": "parameterClasses", "syntax_pass": true}, {"attribute_expression": "private String depends;", "docstring": "\nThe other {@code ValidatorAction}s that this one depends on. If any errors occur in an action that this one depends on, this action will not be\nprocesssed.\n", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "depends", "syntax_pass": true}, {"attribute_expression": "private String msg;", "docstring": "\nThe default error message associated with this action.\n", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "msg", "syntax_pass": true}, {"attribute_expression": "private String jsFunctionName;", "docstring": "\nAn optional field to contain the name to be used if JavaScript is generated.\n", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "jsFunctionName", "syntax_pass": true}, {"attribute_expression": "private String jsFunction;", "docstring": "\nAn optional field to contain the class path to be used to retrieve the JavaScript function.\n", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "jsFunction", "syntax_pass": true}, {"attribute_expression": "private String javascript;", "docstring": "\nAn optional field to containing a JavaScript representation of the Java method assocated with this action.\n", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "javascript", "syntax_pass": true}, {"attribute_expression": "private Object instance;", "docstring": "\nIf the Java method matching the correct signature isn't static, the instance is stored in the action. This assumes the method is thread safe.\n", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Object", "name": "instance", "syntax_pass": true}, {"attribute_expression": "private final List<String> dependencyList = Collections.synchronizedList(new ArrayList<>());", "docstring": "\nAn internal List representation of the other {@code ValidatorAction}s this one depends on (if any). This List gets updated whenever setDepends()\ngets called. This is synchronized so a call to setDepends() (which clears the List) won't interfere with a call to isDependency().\n", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "List<String>", "name": "dependencyList = Collections.synchronizedList(new ArrayList<>())", "syntax_pass": true}, {"attribute_expression": "private final List<String> methodParameterList = new ArrayList<>();", "docstring": "\nAn internal List representation of all the validation method's parameters defined in the methodParams String.\n", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "List<String>", "name": "methodParameterList = new ArrayList<>()", "syntax_pass": true}]}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorResources.java.ValidatorResources", "name": "ValidatorResources", "file_path": "src/main/java/org/apache/commons/validator/ValidatorResources.java", "superclasses": "", "methods": ["[]ValidatorResources()", "[]ValidatorResources(InputStream)", "[]ValidatorResources(InputStream[])", "[]ValidatorResources(String)", "[]ValidatorResources()", "[]ValidatorResources(URL)", "[]ValidatorResources(URL[])", "[void]addConstant(String,String)", "[void]addFormSet(FormSet)", "[void]addOldArgRules(Digester)", "[void]addValidatorAction(ValidatorAction)", "[String]buildKey(FormSet)", "[String]buildLocale(String,String,String)", "[Map<String, ValidatorAction>]getActions()", "[Map<String, String>]getConstants()", "[Form]getForm(Locale,String)", "[Form]getForm(String,String,String,String)", "[FormSet]getFormSet(String,String,String)", "[Map<String, FormSet>]getFormSets()", "[Log]getLog()", "[FormSet]getParent(FormSet)", "[ValidatorAction]getValidatorAction(String)", "[Map<String, ValidatorAction>]getValidatorActions()", "[Digester]initDigester()", "[void]process()", "[void]processForms()"], "method_uris": ["src/main/java/org/apache/commons/validator/ValidatorResources.java.ValidatorResources.[]ValidatorResources()", "src/main/java/org/apache/commons/validator/ValidatorResources.java.ValidatorResources.[]ValidatorResources(InputStream)", "src/main/java/org/apache/commons/validator/ValidatorResources.java.ValidatorResources.[]ValidatorResources(InputStream[])", "src/main/java/org/apache/commons/validator/ValidatorResources.java.ValidatorResources.[]ValidatorResources(String)", "src/main/java/org/apache/commons/validator/ValidatorResources.java.ValidatorResources.[]ValidatorResources()", "src/main/java/org/apache/commons/validator/ValidatorResources.java.ValidatorResources.[]ValidatorResources(URL)", "src/main/java/org/apache/commons/validator/ValidatorResources.java.ValidatorResources.[]ValidatorResources(URL[])", "src/main/java/org/apache/commons/validator/ValidatorResources.java.ValidatorResources.[void]addConstant(String,String)", "src/main/java/org/apache/commons/validator/ValidatorResources.java.ValidatorResources.[void]addFormSet(FormSet)", "src/main/java/org/apache/commons/validator/ValidatorResources.java.ValidatorResources.[void]addOldArgRules(Digester)", "src/main/java/org/apache/commons/validator/ValidatorResources.java.ValidatorResources.[void]addValidatorAction(ValidatorAction)", "src/main/java/org/apache/commons/validator/ValidatorResources.java.ValidatorResources.[String]buildKey(FormSet)", "src/main/java/org/apache/commons/validator/ValidatorResources.java.ValidatorResources.[String]buildLocale(String,String,String)", "src/main/java/org/apache/commons/validator/ValidatorResources.java.ValidatorResources.[Map<String, ValidatorAction>]getActions()", "src/main/java/org/apache/commons/validator/ValidatorResources.java.ValidatorResources.[Map<String, String>]getConstants()", "src/main/java/org/apache/commons/validator/ValidatorResources.java.ValidatorResources.[Form]getForm(Locale,String)", "src/main/java/org/apache/commons/validator/ValidatorResources.java.ValidatorResources.[Form]getForm(String,String,String,String)", "src/main/java/org/apache/commons/validator/ValidatorResources.java.ValidatorResources.[FormSet]getFormSet(String,String,String)", "src/main/java/org/apache/commons/validator/ValidatorResources.java.ValidatorResources.[Map<String, FormSet>]getFormSets()", "src/main/java/org/apache/commons/validator/ValidatorResources.java.ValidatorResources.[Log]getLog()", "src/main/java/org/apache/commons/validator/ValidatorResources.java.ValidatorResources.[FormSet]getParent(FormSet)", "src/main/java/org/apache/commons/validator/ValidatorResources.java.ValidatorResources.[ValidatorAction]getValidatorAction(String)", "src/main/java/org/apache/commons/validator/ValidatorResources.java.ValidatorResources.[Map<String, ValidatorAction>]getValidatorActions()", "src/main/java/org/apache/commons/validator/ValidatorResources.java.ValidatorResources.[Digester]initDigester()", "src/main/java/org/apache/commons/validator/ValidatorResources.java.ValidatorResources.[void]process()", "src/main/java/org/apache/commons/validator/ValidatorResources.java.ValidatorResources.[void]processForms()"], "overrides": null, "attributes": [], "class_docstring": "TODO mutable non-private fields", "original_string": "public class ValidatorResources implements Serializable {\n\n    private static final long serialVersionUID = -8203745881446239554L;\n\n    /** Name of the digester validator rules file */\n    private static final String VALIDATOR_RULES = \"digester-rules.xml\";\n\n    /**\n     * The set of public identifiers, and corresponding resource names, for\n     * the versions of the configuration file DTDs that we know about.  There\n     * <strong>MUST</strong> be an even number of Strings in this list!\n     */\n    private static final String[] REGISTRATIONS = {\n        \"-//Apache Software Foundation//DTD Commons Validator Rules Configuration 1.0//EN\",\n        \"/org/apache/commons/validator/resources/validator_1_0.dtd\",\n        \"-//Apache Software Foundation//DTD Commons Validator Rules Configuration 1.0.1//EN\",\n        \"/org/apache/commons/validator/resources/validator_1_0_1.dtd\",\n        \"-//Apache Software Foundation//DTD Commons Validator Rules Configuration 1.1//EN\",\n        \"/org/apache/commons/validator/resources/validator_1_1.dtd\",\n        \"-//Apache Software Foundation//DTD Commons Validator Rules Configuration 1.1.3//EN\",\n        \"/org/apache/commons/validator/resources/validator_1_1_3.dtd\",\n        \"-//Apache Software Foundation//DTD Commons Validator Rules Configuration 1.2.0//EN\",\n        \"/org/apache/commons/validator/resources/validator_1_2_0.dtd\",\n        \"-//Apache Software Foundation//DTD Commons Validator Rules Configuration 1.3.0//EN\",\n        \"/org/apache/commons/validator/resources/validator_1_3_0.dtd\",\n        \"-//Apache Software Foundation//DTD Commons Validator Rules Configuration 1.4.0//EN\",\n        \"/org/apache/commons/validator/resources/validator_1_4_0.dtd\"\n    };\n\n    /**\n     * The default locale on our server.\n     */\n    protected static Locale defaultLocale = Locale.getDefault();\n\n    private static final String ARGS_PATTERN\n               = \"form-validation/formset/form/field/arg\";\n\n    private transient Log log = LogFactory.getLog(ValidatorResources.class);\n\n    /**\n     * {@link Map} of {@code FormSet}s stored under\n     * a {@link Locale} key (expressed as a String).\n     * @deprecated Subclasses should use getFormSets() instead.\n     */\n    @Deprecated\n    protected FastHashMap hFormSets = new FastHashMap(); // <String, FormSet>\n\n    /**\n     * {@link Map} of global constant values with\n     * the name of the constant as the key.\n     * @deprecated Subclasses should use getConstants() instead.\n     */\n    @Deprecated\n    protected FastHashMap hConstants = new FastHashMap(); // <String, String>\n\n    /**\n     * {@link Map} of {@code ValidatorAction}s with\n     * the name of the {@code ValidatorAction} as the key.\n     * @deprecated Subclasses should use getActions() instead.\n     */\n    @Deprecated\n    protected FastHashMap hActions = new FastHashMap(); // <String, ValidatorAction>\n\n    /**\n     * This is the default {@code FormSet} (without locale). (We probably don't need\n     * the defaultLocale anymore.)\n     */\n    protected FormSet defaultFormSet;\n\n    /**\n     * Create an empty ValidatorResources object.\n     */\n    public ValidatorResources() {\n    }\n\n    /**\n     * Create a ValidatorResources object from an InputStream.\n     *\n     * @param in InputStream to a validation.xml configuration file.  It's the client's\n     * responsibility to close this stream.\n     * @throws SAXException if the validation XML files are not valid or well\n     * formed.\n     * @throws IOException if an I/O error occurs processing the XML files\n     * @since 1.1\n     */\n    public ValidatorResources(final InputStream in) throws IOException, SAXException {\n        this(new InputStream[]{in});\n    }\n\n    /**\n     * Create a ValidatorResources object from an InputStream.\n     *\n     * @param streams An array of InputStreams to several validation.xml\n     * configuration files that will be read in order and merged into this object.\n     * It's the client's responsibility to close these streams.\n     * @throws SAXException if the validation XML files are not valid or well\n     * formed.\n     * @throws IOException if an I/O error occurs processing the XML files\n     * @since 1.1\n     */\n    public ValidatorResources(final InputStream[] streams)\n            throws IOException, SAXException {\n\n        final Digester digester = initDigester();\n        for (int i = 0; i < streams.length; i++) {\n            if (streams[i] == null) {\n                throw new IllegalArgumentException(\"Stream[\" + i + \"] is null\");\n            }\n            digester.push(this);\n            digester.parse(streams[i]);\n        }\n\n        process();\n    }\n\n    /**\n     * Create a ValidatorResources object from an uri\n     *\n     * @param uri The location of a validation.xml configuration file.\n     * @throws SAXException if the validation XML files are not valid or well\n     * formed.\n     * @throws IOException if an I/O error occurs processing the XML files\n     * @since 1.2\n     */\n    public ValidatorResources(final String uri) throws IOException, SAXException {\n        this(new String[] { uri });\n    }\n\n    /**\n     * Create a ValidatorResources object from several uris\n     *\n     * @param uris An array of uris to several validation.xml\n     * configuration files that will be read in order and merged into this object.\n     * @throws SAXException if the validation XML files are not valid or well\n     * formed.\n     * @throws IOException if an I/O error occurs processing the XML files\n     * @since 1.2\n     */\n    public ValidatorResources(final String... uris)\n            throws IOException, SAXException {\n\n        final Digester digester = initDigester();\n        for (final String element : uris) {\n            digester.push(this);\n            digester.parse(element);\n        }\n\n        process();\n    }\n\n    /**\n     * Create a ValidatorResources object from a URL.\n     *\n     * @param url The URL for the validation.xml\n     * configuration file that will be read into this object.\n     * @throws SAXException if the validation XML file are not valid or well\n     * formed.\n     * @throws IOException if an I/O error occurs processing the XML files\n     * @since 1.3.1\n     */\n    public ValidatorResources(final URL url)\n            throws IOException, SAXException {\n        this(new URL[]{url});\n    }\n\n    /**\n     * Create a ValidatorResources object from several URL.\n     *\n     * @param urls An array of URL to several validation.xml\n     * configuration files that will be read in order and merged into this object.\n     * @throws SAXException if the validation XML files are not valid or well\n     * formed.\n     * @throws IOException if an I/O error occurs processing the XML files\n     * @since 1.3.1\n     */\n    public ValidatorResources(final URL[] urls)\n            throws IOException, SAXException {\n\n        final Digester digester = initDigester();\n        for (final URL url : urls) {\n            digester.push(this);\n            digester.parse(url);\n        }\n\n        process();\n    }\n\n    /**\n     * Add a global constant to the resource.\n     * @param name The constant name.\n     * @param value The constant value.\n     */\n    public void addConstant(final String name, final String value) {\n        if (getLog().isDebugEnabled()) {\n            getLog().debug(\"Adding Global Constant: \" + name + \",\" + value);\n        }\n\n        hConstants.put(name, value);\n    }\n\n    /**\n     * Add a {@code FormSet} to this {@code ValidatorResources}\n     * object.  It will be associated with the {@link Locale} of the\n     * {@code FormSet}.\n     * @param fs The form set to add.\n     * @since 1.1\n     */\n    public void addFormSet(final FormSet fs) {\n        final String key = buildKey(fs);\n        if (key.isEmpty()) { // there can only be one default formset\n            if (getLog().isWarnEnabled() && defaultFormSet != null) {\n                // warn the user he might not get the expected results\n                getLog().warn(\"Overriding default FormSet definition.\");\n            }\n            defaultFormSet = fs;\n        } else {\n            final FormSet formset = getFormSets().get(key);\n            if (formset == null) { // it hasn't been included yet\n                if (getLog().isDebugEnabled()) {\n                    getLog().debug(\"Adding FormSet '\" + fs + \"'.\");\n                }\n            } else if (getLog().isWarnEnabled()) { // warn the user he might not\n                                                   // get the expected results\n                getLog().warn(\"Overriding FormSet definition. Duplicate for locale: \" + key);\n            }\n            getFormSets().put(key, fs);\n        }\n    }\n\n    /**\n     * Create a {@code Rule} to handle {@code arg0-arg3}\n     * elements. This will allow validation.xml files that use the\n     * versions of the DTD prior to Validator 1.2.0 to continue\n     * working.\n     */\n    private void addOldArgRules(final Digester digester) {\n        // Create a new rule to process args elements\n        final Rule rule = new Rule() {\n            @Override\n            public void begin(final String namespace, final String name, final Attributes attributes) {\n                // Create the Arg\n                final Arg arg = new Arg();\n                arg.setKey(attributes.getValue(\"key\"));\n                arg.setName(attributes.getValue(\"name\"));\n                if (\"false\".equalsIgnoreCase(attributes.getValue(\"resource\"))) {\n                    arg.setResource(false);\n                }\n                try {\n                    final int length = \"arg\".length(); // skip the arg prefix\n                    arg.setPosition(Integer.parseInt(name.substring(length)));\n                } catch (final Exception ex) {\n                    getLog().error(\"Error parsing Arg position: \" + name + \" \" + arg + \" \" + ex);\n                }\n\n                // Add the arg to the parent field\n                ((Field) getDigester().peek(0)).addArg(arg);\n            }\n        };\n\n        // Add the rule for each of the arg elements\n        digester.addRule(ARGS_PATTERN + \"0\", rule);\n        digester.addRule(ARGS_PATTERN + \"1\", rule);\n        digester.addRule(ARGS_PATTERN + \"2\", rule);\n        digester.addRule(ARGS_PATTERN + \"3\", rule);\n\n    }\n\n    /**\n     * Add a {@code ValidatorAction} to the resource.  It also creates an\n     * instance of the class based on the {@code ValidatorAction}s\n     * class name and retrieves the {@code Method} instance and sets them\n     * in the {@code ValidatorAction}.\n     * @param va The validator action.\n     */\n    public void addValidatorAction(final ValidatorAction va) {\n        va.init();\n\n        getActions().put(va.getName(), va);\n\n        if (getLog().isDebugEnabled()) {\n            getLog().debug(\"Add ValidatorAction: \" + va.getName() + \",\" + va.getClassname());\n        }\n    }\n\n    /**\n     * Builds a key to store the {@code FormSet} under based on it's\n     * language, country, and variant values.\n     * @param fs The Form Set.\n     * @return generated key for a formset.\n     */\n    protected String buildKey(final FormSet fs) {\n        return\n                buildLocale(fs.getLanguage(), fs.getCountry(), fs.getVariant());\n    }\n\n    /**\n     * Assembles a Locale code from the given parts.\n     */\n    private String buildLocale(final String lang, final String country, final String variant) {\n        final StringBuilder key = new StringBuilder().append(lang != null && !lang.isEmpty() ? lang : \"\");\n        key.append(country != null && !country.isEmpty() ? \"_\" + country : \"\");\n        key.append(variant != null && !variant.isEmpty() ? \"_\" + variant : \"\");\n        return key.toString();\n    }\n\n    /**\n     * Returns a Map of String ValidatorAction names to their ValidatorAction.\n     * @return Map of Validator Actions\n     * @since 1.2.0\n     */\n    @SuppressWarnings(\"unchecked\") // FastHashMap is not generic\n    protected Map<String, ValidatorAction> getActions() {\n        return hActions;\n    }\n\n    /**\n     * Returns a Map of String constant names to their String values.\n     * @return Map of Constants\n     * @since 1.2.0\n     */\n    @SuppressWarnings(\"unchecked\") // FastHashMap is not generic\n    protected Map<String, String> getConstants() {\n        return hConstants;\n    }\n\n    /**\n     * <p>Gets a {@code Form} based on the name of the form and the\n     * {@link Locale} that most closely matches the {@link Locale}\n     * passed in.  The order of {@link Locale} matching is:</p>\n     * <ol>\n     *    <li>language + country + variant</li>\n     *    <li>language + country</li>\n     *    <li>language</li>\n     *    <li>default locale</li>\n     * </ol>\n     * @param locale The Locale.\n     * @param formKey The key for the Form.\n     * @return The validator Form.\n     * @since 1.1\n     */\n    public Form getForm(final Locale locale, final String formKey) {\n        return this.getForm(locale.getLanguage(), locale.getCountry(), locale\n                .getVariant(), formKey);\n    }\n\n    /**\n     * <p>Gets a {@code Form} based on the name of the form and the\n     * {@link Locale} that most closely matches the {@link Locale}\n     * passed in.  The order of {@link Locale} matching is:</p>\n     * <ol>\n     *    <li>language + country + variant</li>\n     *    <li>language + country</li>\n     *    <li>language</li>\n     *    <li>default locale</li>\n     * </ol>\n     * @param language The locale's language.\n     * @param country The locale's country.\n     * @param variant The locale's language variant.\n     * @param formKey The key for the Form.\n     * @return The validator Form.\n     * @since 1.1\n     */\n    public Form getForm(final String language, final String country, final String variant, final String formKey) {\n\n        Form form = null;\n\n        // Try language/country/variant\n        String key = buildLocale(language, country, variant);\n        if (!key.isEmpty()) {\n            final FormSet formSet = getFormSets().get(key);\n            if (formSet != null) {\n                form = formSet.getForm(formKey);\n            }\n        }\n        final String localeKey = key;\n\n        // Try language/country\n        if (form == null) {\n            key = buildLocale(language, country, null);\n            if (!key.isEmpty()) {\n                final FormSet formSet = getFormSets().get(key);\n                if (formSet != null) {\n                    form = formSet.getForm(formKey);\n                }\n            }\n        }\n\n        // Try language\n        if (form == null) {\n            key = buildLocale(language, null, null);\n            if (!key.isEmpty()) {\n                final FormSet formSet = getFormSets().get(key);\n                if (formSet != null) {\n                    form = formSet.getForm(formKey);\n                }\n            }\n        }\n\n        // Try default formset\n        if (form == null) {\n            form = defaultFormSet.getForm(formKey);\n            key = \"default\";\n        }\n\n        if (form == null) {\n            if (getLog().isWarnEnabled()) {\n                getLog().warn(\"Form '\" + formKey + \"' not found for locale '\" + localeKey + \"'\");\n            }\n        } else if (getLog().isDebugEnabled()) {\n            getLog().debug(\"Form '\" + formKey + \"' found in formset '\" + key + \"' for locale '\" + localeKey + \"'\");\n        }\n\n        return form;\n\n    }\n\n    /**\n     * <p>Gets a {@code FormSet} based on the language, country\n     *    and variant.</p>\n     * @param language The locale's language.\n     * @param country The locale's country.\n     * @param variant The locale's language variant.\n     * @return The FormSet for a locale.\n     * @since 1.2\n     */\n    FormSet getFormSet(final String language, final String country, final String variant) {\n        final String key = buildLocale(language, country, variant);\n        if (key.isEmpty()) {\n            return defaultFormSet;\n        }\n        return getFormSets().get(key);\n    }\n\n    /**\n     * Returns a Map of String locale keys to Lists of their FormSets.\n     * @return Map of Form sets\n     * @since 1.2.0\n     */\n    @SuppressWarnings(\"unchecked\") // FastHashMap is not generic\n    protected Map<String, FormSet> getFormSets() {\n        return hFormSets;\n    }\n\n    /**\n     * Accessor method for Log instance.\n     *\n     * The Log instance variable is transient and\n     * accessing it through this method ensures it\n     * is re-initialized when this instance is\n     * de-serialized.\n     *\n     * @return The Log instance.\n     */\n    private Log getLog() {\n        if (log == null) {\n            log = LogFactory.getLog(ValidatorResources.class);\n        }\n        return log;\n    }\n\n    /**\n     * Finds the given formSet's parent. ex: A formSet with locale en_UK_TEST1\n     * has a direct parent in the formSet with locale en_UK. If it doesn't\n     * exist, find the formSet with locale en, if no found get the\n     * defaultFormSet.\n     *\n     * @param fs\n     *            the formSet we want to get the parent from\n     * @return fs's parent\n     */\n    private FormSet getParent(final FormSet fs) {\n\n        FormSet parent = null;\n        if (fs.getType() == FormSet.LANGUAGE_FORMSET) {\n            parent = defaultFormSet;\n        } else if (fs.getType() == FormSet.COUNTRY_FORMSET) {\n            parent = getFormSets().get(buildLocale(fs.getLanguage(), null, null));\n            if (parent == null) {\n                parent = defaultFormSet;\n            }\n        } else if (fs.getType() == FormSet.VARIANT_FORMSET) {\n            parent = getFormSets().get(buildLocale(fs.getLanguage(), fs.getCountry(), null));\n            if (parent == null) {\n                parent = getFormSets().get(buildLocale(fs.getLanguage(), null, null));\n                if (parent == null) {\n                    parent = defaultFormSet;\n                }\n            }\n        }\n        return parent;\n    }\n\n    /**\n     * Gets a {@code ValidatorAction} based on it's name.\n     * @param key The validator action key.\n     * @return The validator action.\n     */\n    public ValidatorAction getValidatorAction(final String key) {\n        return getActions().get(key);\n    }\n\n    /**\n     * Gets an unmodifiable {@link Map} of the {@code ValidatorAction}s.\n     * @return Map of validator actions.\n     */\n    public Map<String, ValidatorAction> getValidatorActions() {\n        return Collections.unmodifiableMap(getActions());\n    }\n\n    /**\n     *  Initialize the digester.\n     */\n    private Digester initDigester() {\n        URL rulesUrl = this.getClass().getResource(VALIDATOR_RULES);\n        if (rulesUrl == null) {\n            // Fix for Issue# VALIDATOR-195\n            rulesUrl = ValidatorResources.class.getResource(VALIDATOR_RULES);\n        }\n        if (getLog().isDebugEnabled()) {\n            getLog().debug(\"Loading rules from '\" + rulesUrl + \"'\");\n        }\n        final Digester digester = DigesterLoader.createDigester(rulesUrl);\n        digester.setNamespaceAware(true);\n        digester.setValidating(true);\n        digester.setUseContextClassLoader(true);\n\n        // Add rules for arg0-arg3 elements\n        addOldArgRules(digester);\n\n        // register DTDs\n        for (int i = 0; i < REGISTRATIONS.length; i += 2) {\n            final URL url = this.getClass().getResource(REGISTRATIONS[i + 1]);\n            if (url != null) {\n                digester.register(REGISTRATIONS[i], url.toString());\n            }\n        }\n        return digester;\n    }\n\n    /**\n     * Process the {@code ValidatorResources} object. Currently sets the\n     * {@code FastHashMap} s to the 'fast' mode and call the processes\n     * all other resources. <strong>Note </strong>: The framework calls this\n     * automatically when ValidatorResources is created from an XML file. If you\n     * create an instance of this class by hand you <strong>must </strong> call\n     * this method when finished.\n     */\n    public void process() {\n        hFormSets.setFast(true);\n        hConstants.setFast(true);\n        hActions.setFast(true);\n\n        processForms();\n    }\n\n    /**\n     * <p>Process the {@code Form} objects.  This clones the {@code Field}s\n     * that don't exist in a {@code FormSet} compared to its parent\n     * {@code FormSet}.</p>\n     */\n    private void processForms() {\n        if (defaultFormSet == null) { // it isn't mandatory to have a\n            // default formset\n            defaultFormSet = new FormSet();\n        }\n        defaultFormSet.process(getConstants());\n        // Loop through FormSets and merge if necessary\n        for (final String key : getFormSets().keySet()) {\n            final FormSet fs = getFormSets().get(key);\n            fs.merge(getParent(fs));\n        }\n\n        // Process Fully Constructed FormSets\n        for (final FormSet fs : getFormSets().values()) {\n            if (!fs.isProcessed()) {\n                fs.process(getConstants());\n            }\n        }\n    }\n\n}", "super_interfaces": ["Serializable"], "fields": [{"attribute_expression": "private static final long serialVersionUID = -8203745881446239554L;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "serialVersionUID = -8203745881446239554L", "syntax_pass": true}, {"attribute_expression": "private static final String VALIDATOR_RULES = \"digester-rules.xml\";", "docstring": " Name of the digester validator rules file", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "VALIDATOR_RULES = \"digester-rules.xml\"", "syntax_pass": true}, {"attribute_expression": "private static final String[] REGISTRATIONS = {\n        \"-//Apache Software Foundation//DTD Commons Validator Rules Configuration 1.0//EN\",\n        \"/org/apache/commons/validator/resources/validator_1_0.dtd\",\n        \"-//Apache Software Foundation//DTD Commons Validator Rules Configuration 1.0.1//EN\",\n        \"/org/apache/commons/validator/resources/validator_1_0_1.dtd\",\n        \"-//Apache Software Foundation//DTD Commons Validator Rules Configuration 1.1//EN\",\n        \"/org/apache/commons/validator/resources/validator_1_1.dtd\",\n        \"-//Apache Software Foundation//DTD Commons Validator Rules Configuration 1.1.3//EN\",\n        \"/org/apache/commons/validator/resources/validator_1_1_3.dtd\",\n        \"-//Apache Software Foundation//DTD Commons Validator Rules Configuration 1.2.0//EN\",\n        \"/org/apache/commons/validator/resources/validator_1_2_0.dtd\",\n        \"-//Apache Software Foundation//DTD Commons Validator Rules Configuration 1.3.0//EN\",\n        \"/org/apache/commons/validator/resources/validator_1_3_0.dtd\",\n        \"-//Apache Software Foundation//DTD Commons Validator Rules Configuration 1.4.0//EN\",\n        \"/org/apache/commons/validator/resources/validator_1_4_0.dtd\"\n    };", "docstring": "\nThe set of public identifiers, and corresponding resource names, for\nthe versions of the configuration file DTDs that we know about.  There\n<strong>MUST</strong> be an even number of Strings in this list!\n", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String[]", "name": "REGISTRATIONS = {\n        \"-//Apache Software Foundation//DTD Commons Validator Rules Configuration 1.0//EN\",\n        \"/org/apache/commons/validator/resources/validator_1_0.dtd\",\n        \"-//Apache Software Foundation//DTD Commons Validator Rules Configuration 1.0.1//EN\",\n        \"/org/apache/commons/validator/resources/validator_1_0_1.dtd\",\n        \"-//Apache Software Foundation//DTD Commons Validator Rules Configuration 1.1//EN\",\n        \"/org/apache/commons/validator/resources/validator_1_1.dtd\",\n        \"-//Apache Software Foundation//DTD Commons Validator Rules Configuration 1.1.3//EN\",\n        \"/org/apache/commons/validator/resources/validator_1_1_3.dtd\",\n        \"-//Apache Software Foundation//DTD Commons Validator Rules Configuration 1.2.0//EN\",\n        \"/org/apache/commons/validator/resources/validator_1_2_0.dtd\",\n        \"-//Apache Software Foundation//DTD Commons Validator Rules Configuration 1.3.0//EN\",\n        \"/org/apache/commons/validator/resources/validator_1_3_0.dtd\",\n        \"-//Apache Software Foundation//DTD Commons Validator Rules Configuration 1.4.0//EN\",\n        \"/org/apache/commons/validator/resources/validator_1_4_0.dtd\"\n    }", "syntax_pass": true}, {"attribute_expression": "protected static Locale defaultLocale = Locale.getDefault();", "docstring": "\nThe default locale on our server.\n", "modifiers": "protected static", "marker_annotations": [], "non_marker_annotations": ["protected", "static"], "comments": [], "type": "Locale", "name": "defaultLocale = Locale.getDefault()", "syntax_pass": true}, {"attribute_expression": "private static final String ARGS_PATTERN\n               = \"form-validation/formset/form/field/arg\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "ARGS_PATTERN\n               = \"form-validation/formset/form/field/arg\"", "syntax_pass": true}, {"attribute_expression": "private transient Log log = LogFactory.getLog(ValidatorResources.class);", "docstring": "", "modifiers": "private transient", "marker_annotations": [], "non_marker_annotations": ["private", "transient"], "comments": [], "type": "Log", "name": "log = LogFactory.getLog(ValidatorResources.class)", "syntax_pass": true}, {"attribute_expression": "@Deprecated\n    protected FastHashMap hFormSets = new FastHashMap();", "docstring": "\n{@link Map} of {@code FormSet}s stored under\na {@link Locale} key (expressed as a String).\n@deprecated Subclasses should use getFormSets() instead.\n", "modifiers": "@Deprecated\n    protected", "marker_annotations": ["@Deprecated"], "non_marker_annotations": ["protected"], "comments": [], "type": "FastHashMap", "name": "hFormSets = new FastHashMap()", "syntax_pass": true}, {"attribute_expression": "@Deprecated\n    protected FastHashMap hConstants = new FastHashMap();", "docstring": "\n{@link Map} of global constant values with\nthe name of the constant as the key.\n@deprecated Subclasses should use getConstants() instead.\n", "modifiers": "@Deprecated\n    protected", "marker_annotations": ["@Deprecated"], "non_marker_annotations": ["protected"], "comments": [], "type": "FastHashMap", "name": "hConstants = new FastHashMap()", "syntax_pass": true}, {"attribute_expression": "@Deprecated\n    protected FastHashMap hActions = new FastHashMap();", "docstring": "\n{@link Map} of {@code ValidatorAction}s with\nthe name of the {@code ValidatorAction} as the key.\n@deprecated Subclasses should use getActions() instead.\n", "modifiers": "@Deprecated\n    protected", "marker_annotations": ["@Deprecated"], "non_marker_annotations": ["protected"], "comments": [], "type": "FastHashMap", "name": "hActions = new FastHashMap()", "syntax_pass": true}, {"attribute_expression": "protected FormSet defaultFormSet;", "docstring": "\nThis is the default {@code FormSet} (without locale). (We probably don't need\nthe defaultLocale anymore.)\n", "modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "type": "FormSet", "name": "defaultFormSet", "syntax_pass": true}]}, {"uris": "src/main/java/org/apache/commons/validator/GenericTypeValidator.java.GenericTypeValidator", "name": "GenericTypeValidator", "file_path": "src/main/java/org/apache/commons/validator/GenericTypeValidator.java", "superclasses": "", "methods": ["[Byte]formatByte(String)", "[Byte]formatByte(String,Locale)", "[Long]formatCreditCard(String)", "[Date]formatDate(String,Locale)", "[Date]formatDate(String,String,boolean)", "[Double]formatDouble(String)", "[Double]formatDouble(String,Locale)", "[Float]formatFloat(String)", "[Float]formatFloat(String,Locale)", "[Integer]formatInt(String)", "[Integer]formatInt(String,Locale)", "[Long]formatLong(String)", "[Long]formatLong(String,Locale)", "[Short]formatShort(String)", "[Short]formatShort(String,Locale)"], "method_uris": ["src/main/java/org/apache/commons/validator/GenericTypeValidator.java.GenericTypeValidator.[Byte]formatByte(String)", "src/main/java/org/apache/commons/validator/GenericTypeValidator.java.GenericTypeValidator.[Byte]formatByte(String,Locale)", "src/main/java/org/apache/commons/validator/GenericTypeValidator.java.GenericTypeValidator.[Long]formatCreditCard(String)", "src/main/java/org/apache/commons/validator/GenericTypeValidator.java.GenericTypeValidator.[Date]formatDate(String,Locale)", "src/main/java/org/apache/commons/validator/GenericTypeValidator.java.GenericTypeValidator.[Date]formatDate(String,String,boolean)", "src/main/java/org/apache/commons/validator/GenericTypeValidator.java.GenericTypeValidator.[Double]formatDouble(String)", "src/main/java/org/apache/commons/validator/GenericTypeValidator.java.GenericTypeValidator.[Double]formatDouble(String,Locale)", "src/main/java/org/apache/commons/validator/GenericTypeValidator.java.GenericTypeValidator.[Float]formatFloat(String)", "src/main/java/org/apache/commons/validator/GenericTypeValidator.java.GenericTypeValidator.[Float]formatFloat(String,Locale)", "src/main/java/org/apache/commons/validator/GenericTypeValidator.java.GenericTypeValidator.[Integer]formatInt(String)", "src/main/java/org/apache/commons/validator/GenericTypeValidator.java.GenericTypeValidator.[Integer]formatInt(String,Locale)", "src/main/java/org/apache/commons/validator/GenericTypeValidator.java.GenericTypeValidator.[Long]formatLong(String)", "src/main/java/org/apache/commons/validator/GenericTypeValidator.java.GenericTypeValidator.[Long]formatLong(String,Locale)", "src/main/java/org/apache/commons/validator/GenericTypeValidator.java.GenericTypeValidator.[Short]formatShort(String)", "src/main/java/org/apache/commons/validator/GenericTypeValidator.java.GenericTypeValidator.[Short]formatShort(String,Locale)"], "overrides": null, "attributes": [], "class_docstring": "\nThis class contains basic methods for performing validations that return the\ncorrectly typed class based on the validation performed.\n", "original_string": "public class GenericTypeValidator implements Serializable {\n\n    private static final long serialVersionUID = 5487162314134261703L;\n\n    private static final Log LOG = LogFactory.getLog(GenericTypeValidator.class);\n\n    /**\n     * Checks if the value can safely be converted to a byte primitive.\n     *\n     * @param value The value validation is being performed on.\n     * @return the converted Byte value.\n     */\n    public static Byte formatByte(final String value) {\n        if (value == null) {\n            return null;\n        }\n\n        try {\n            return Byte.valueOf(value);\n        } catch (final NumberFormatException e) {\n            return null;\n        }\n\n    }\n\n    /**\n     * Checks if the value can safely be converted to a byte primitive.\n     *\n     * @param value  The value validation is being performed on.\n     * @param locale The locale to use to parse the number (system default if\n     *               null)\n     * @return the converted Byte value.\n     */\n    public static Byte formatByte(final String value, final Locale locale) {\n        Byte result = null;\n\n        if (value != null) {\n            NumberFormat formatter = null;\n            if (locale != null) {\n                formatter = NumberFormat.getNumberInstance(locale);\n            } else {\n                formatter = NumberFormat.getNumberInstance(Locale.getDefault());\n            }\n            formatter.setParseIntegerOnly(true);\n            final ParsePosition pos = new ParsePosition(0);\n            final Number num = formatter.parse(value, pos);\n\n            // If there was no error      and we used the whole string\n            if (pos.getErrorIndex() == -1 && pos.getIndex() == value.length() &&\n                    num.doubleValue() >= Byte.MIN_VALUE &&\n                    num.doubleValue() <= Byte.MAX_VALUE) {\n                result = Byte.valueOf(num.byteValue());\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Checks if the field is a valid credit card number.\n     *\n     * <p>Reference Sean M. Burke's <a href=\"http://www.ling.nwu.edu/~sburke/pub/luhn_lib.pl\">\n     * script</a>.</p>\n     *\n     * @param value The value validation is being performed on.\n     * @return the converted Credit Card number.\n     */\n    public static Long formatCreditCard(final String value) {\n        return GenericValidator.isCreditCard(value) ? Long.valueOf(value) : null;\n    }\n\n    /**\n     * Checks if the field is a valid date.\n     *\n     * <p>The {@link Locale} is used with {@link java.text.DateFormat}. The {@link java.text.DateFormat#setLenient(boolean)}\n     * method is set to {@code false} for all.\n     * </p>\n     *\n     * @param value  The value validation is being performed on.\n     * @param locale The Locale to use to parse the date (system default if null)\n     * @return the converted Date value.\n     */\n    public static Date formatDate(final String value, final Locale locale) {\n        Date date = null;\n\n        if (value == null) {\n            return null;\n        }\n\n        try {\n            // Get the formatters to check against\n            DateFormat formatterShort = null;\n            DateFormat formatterDefault = null;\n            if (locale != null) {\n                formatterShort =\n                        DateFormat.getDateInstance(DateFormat.SHORT, locale);\n                formatterDefault =\n                        DateFormat.getDateInstance(DateFormat.DEFAULT, locale);\n            } else {\n                formatterShort =\n                        DateFormat.getDateInstance(\n                                DateFormat.SHORT,\n                                Locale.getDefault());\n                formatterDefault =\n                        DateFormat.getDateInstance(\n                                DateFormat.DEFAULT,\n                                Locale.getDefault());\n            }\n\n            // Turn off lenient parsing\n            formatterShort.setLenient(false);\n            formatterDefault.setLenient(false);\n\n            // Firstly, try with the short form\n            try {\n                date = formatterShort.parse(value);\n            } catch (final ParseException e) {\n                // Fall back on the default one\n                date = formatterDefault.parse(value);\n            }\n        } catch (final ParseException e) {\n            // Bad date, so LOG and return null\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"Date parse failed value=[\" + value + \"], \" +\n                        \"locale=[\" + locale + \"] \" + e);\n            }\n        }\n\n        return date;\n    }\n\n    /**\n     * Checks if the field is a valid date.\n     *\n     * <p>The pattern is used with {@link java.text.SimpleDateFormat}.\n     * If strict is true, then the length will be checked so '2/12/1999' will\n     * not pass validation with the format 'MM/dd/yyyy' because the month isn't\n     * two digits. The {@link java.text.SimpleDateFormat#setLenient(boolean)}\n     * method is set to {@code false} for all.\n     * </p>\n     *\n     * @param value       The value validation is being performed on.\n     * @param datePattern The pattern passed to {@link SimpleDateFormat}.\n     * @param strict      Whether or not to have an exact match of the\n     *                    datePattern.\n     * @return the converted Date value.\n     */\n    public static Date formatDate(final String value, final String datePattern, final boolean strict) {\n        Date date = null;\n\n        if (value == null\n                || datePattern == null\n                || datePattern.isEmpty()) {\n            return null;\n        }\n\n        try {\n            final SimpleDateFormat formatter = new SimpleDateFormat(datePattern);\n            formatter.setLenient(false);\n\n            date = formatter.parse(value);\n\n            if (strict && datePattern.length() != value.length()) {\n                date = null;\n            }\n        } catch (final ParseException e) {\n            // Bad date so return null\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"Date parse failed value=[\" + value + \"], \" +\n                        \"pattern=[\" + datePattern + \"], \" +\n                        \"strict=[\" + strict + \"] \" + e);\n            }\n        }\n\n        return date;\n    }\n\n    /**\n     * Checks if the value can safely be converted to a double primitive.\n     *\n     * @param value The value validation is being performed on.\n     * @return the converted Double value.\n     */\n    public static Double formatDouble(final String value) {\n        if (value == null) {\n            return null;\n        }\n\n        try {\n            return Double.valueOf(value);\n        } catch (final NumberFormatException e) {\n            return null;\n        }\n\n    }\n\n    /**\n     * Checks if the value can safely be converted to a double primitive.\n     *\n     * @param value  The value validation is being performed on.\n     * @param locale The locale to use to parse the number (system default if\n     *               null)\n     * @return the converted Double value.\n     */\n    public static Double formatDouble(final String value, final Locale locale) {\n        Double result = null;\n\n        if (value != null) {\n            NumberFormat formatter = null;\n            if (locale != null) {\n                formatter = NumberFormat.getInstance(locale);\n            } else {\n                formatter = NumberFormat.getInstance(Locale.getDefault());\n            }\n            final ParsePosition pos = new ParsePosition(0);\n            final Number num = formatter.parse(value, pos);\n\n            // If there was no error      and we used the whole string\n            if (pos.getErrorIndex() == -1 && pos.getIndex() == value.length() &&\n                    num.doubleValue() >= Double.MAX_VALUE * -1 &&\n                    num.doubleValue() <= Double.MAX_VALUE) {\n                result = Double.valueOf(num.doubleValue());\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Checks if the value can safely be converted to a float primitive.\n     *\n     * @param value The value validation is being performed on.\n     * @return the converted Float value.\n     */\n    public static Float formatFloat(final String value) {\n        if (value == null) {\n            return null;\n        }\n\n        try {\n            return Float.valueOf(value);\n        } catch (final NumberFormatException e) {\n            return null;\n        }\n\n    }\n\n    /**\n     * Checks if the value can safely be converted to a float primitive.\n     *\n     * @param value  The value validation is being performed on.\n     * @param locale The locale to use to parse the number (system default if\n     *               null)\n     * @return the converted Float value.\n     */\n    public static Float formatFloat(final String value, final Locale locale) {\n        Float result = null;\n\n        if (value != null) {\n            NumberFormat formatter = null;\n            if (locale != null) {\n                formatter = NumberFormat.getInstance(locale);\n            } else {\n                formatter = NumberFormat.getInstance(Locale.getDefault());\n            }\n            final ParsePosition pos = new ParsePosition(0);\n            final Number num = formatter.parse(value, pos);\n\n            // If there was no error      and we used the whole string\n            if (pos.getErrorIndex() == -1 && pos.getIndex() == value.length() &&\n                    num.doubleValue() >= Float.MAX_VALUE * -1 &&\n                    num.doubleValue() <= Float.MAX_VALUE) {\n                result = Float.valueOf(num.floatValue());\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Checks if the value can safely be converted to a int primitive.\n     *\n     * @param value The value validation is being performed on.\n     * @return the converted Integer value.\n     */\n    public static Integer formatInt(final String value) {\n        if (value == null) {\n            return null;\n        }\n\n        try {\n            return Integer.valueOf(value);\n        } catch (final NumberFormatException e) {\n            return null;\n        }\n\n    }\n\n    /**\n     * Checks if the value can safely be converted to an int primitive.\n     *\n     * @param value  The value validation is being performed on.\n     * @param locale The locale to use to parse the number (system default if\n     *               null)\n     * @return the converted Integer value.\n     */\n    public static Integer formatInt(final String value, final Locale locale) {\n        Integer result = null;\n\n        if (value != null) {\n            NumberFormat formatter = null;\n            if (locale != null) {\n                formatter = NumberFormat.getNumberInstance(locale);\n            } else {\n                formatter = NumberFormat.getNumberInstance(Locale.getDefault());\n            }\n            formatter.setParseIntegerOnly(true);\n            final ParsePosition pos = new ParsePosition(0);\n            final Number num = formatter.parse(value, pos);\n\n            // If there was no error      and we used the whole string\n            if (pos.getErrorIndex() == -1 && pos.getIndex() == value.length() &&\n                    num.doubleValue() >= Integer.MIN_VALUE &&\n                    num.doubleValue() <= Integer.MAX_VALUE) {\n                result = Integer.valueOf(num.intValue());\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Checks if the value can safely be converted to a long primitive.\n     *\n     * @param value The value validation is being performed on.\n     * @return the converted Long value.\n     */\n    public static Long formatLong(final String value) {\n        if (value == null) {\n            return null;\n        }\n\n        try {\n            return Long.valueOf(value);\n        } catch (final NumberFormatException e) {\n            return null;\n        }\n\n    }\n\n    /**\n     * Checks if the value can safely be converted to a long primitive.\n     *\n     * @param value  The value validation is being performed on.\n     * @param locale The locale to use to parse the number (system default if\n     *               null)\n     * @return the converted Long value.\n     */\n    public static Long formatLong(final String value, final Locale locale) {\n        Long result = null;\n\n        if (value != null) {\n            NumberFormat formatter = null;\n            if (locale != null) {\n                formatter = NumberFormat.getNumberInstance(locale);\n            } else {\n                formatter = NumberFormat.getNumberInstance(Locale.getDefault());\n            }\n            formatter.setParseIntegerOnly(true);\n            final ParsePosition pos = new ParsePosition(0);\n            final Number num = formatter.parse(value, pos);\n\n            // If there was no error      and we used the whole string\n            if (pos.getErrorIndex() == -1 && pos.getIndex() == value.length() &&\n                    num.doubleValue() >= Long.MIN_VALUE &&\n                    num.doubleValue() <= Long.MAX_VALUE) {\n                result = Long.valueOf(num.longValue());\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Checks if the value can safely be converted to a short primitive.\n     *\n     * @param value The value validation is being performed on.\n     * @return the converted Short value.\n     */\n    public static Short formatShort(final String value) {\n        if (value == null) {\n            return null;\n        }\n\n        try {\n            return Short.valueOf(value);\n        } catch (final NumberFormatException e) {\n            return null;\n        }\n\n    }\n\n    /**\n     * Checks if the value can safely be converted to a short primitive.\n     *\n     * @param value  The value validation is being performed on.\n     * @param locale The locale to use to parse the number (system default if\n     *               null)\n     * @return the converted Short value.\n     */\n    public static Short formatShort(final String value, final Locale locale) {\n        Short result = null;\n\n        if (value != null) {\n            NumberFormat formatter = null;\n            if (locale != null) {\n                formatter = NumberFormat.getNumberInstance(locale);\n            } else {\n                formatter = NumberFormat.getNumberInstance(Locale.getDefault());\n            }\n            formatter.setParseIntegerOnly(true);\n            final ParsePosition pos = new ParsePosition(0);\n            final Number num = formatter.parse(value, pos);\n\n            // If there was no error      and we used the whole string\n            if (pos.getErrorIndex() == -1 && pos.getIndex() == value.length() &&\n                    num.doubleValue() >= Short.MIN_VALUE &&\n                    num.doubleValue() <= Short.MAX_VALUE) {\n                result = Short.valueOf(num.shortValue());\n            }\n        }\n\n        return result;\n    }\n\n}", "super_interfaces": ["Serializable"], "fields": [{"attribute_expression": "private static final long serialVersionUID = 5487162314134261703L;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "serialVersionUID = 5487162314134261703L", "syntax_pass": true}, {"attribute_expression": "private static final Log LOG = LogFactory.getLog(GenericTypeValidator.class);", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "Log", "name": "LOG = LogFactory.getLog(GenericTypeValidator.class)", "syntax_pass": true}]}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorException.java.ValidatorException", "name": "ValidatorException", "file_path": "src/main/java/org/apache/commons/validator/ValidatorException.java", "superclasses": "Exception", "methods": ["[]ValidatorException()", "[]ValidatorException(String)"], "method_uris": ["src/main/java/org/apache/commons/validator/ValidatorException.java.ValidatorException.[]ValidatorException()", "src/main/java/org/apache/commons/validator/ValidatorException.java.ValidatorException.[]ValidatorException(String)"], "overrides": null, "attributes": [], "class_docstring": "\nThe base exception for the Validator Framework.  All other\n{@code Exception}s thrown during calls to\n{@code Validator.validate()} are considered errors.\n", "original_string": "public class ValidatorException extends Exception {\n\n    private static final long serialVersionUID = 1025759372615616964L;\n\n    /**\n     * Constructs an Exception with no specified detail message.\n     */\n    public ValidatorException() {\n    }\n\n    /**\n     * Constructs an Exception with the specified detail message.\n     *\n     * @param    message The error message.\n     */\n    public ValidatorException(final String message) {\n        super(message);\n    }\n\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final long serialVersionUID = 1025759372615616964L;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "serialVersionUID = 1025759372615616964L", "syntax_pass": true}]}, {"uris": "src/main/java/org/apache/commons/validator/ISBNValidator.java.ISBNValidator", "name": "ISBNValidator", "file_path": "src/main/java/org/apache/commons/validator/ISBNValidator.java", "superclasses": "", "methods": ["[]ISBNValidator()", "[boolean]isValid(String)"], "method_uris": ["src/main/java/org/apache/commons/validator/ISBNValidator.java.ISBNValidator.[]ISBNValidator()", "src/main/java/org/apache/commons/validator/ISBNValidator.java.ISBNValidator.[boolean]isValid(String)"], "overrides": null, "attributes": [], "class_docstring": "\nA class for validating 10 digit ISBN codes.\nBased on this\n<a href=\"http://www.isbn.org/standards/home/isbn/international/html/usm4.htm\">\nalgorithm</a>\n\n<b>NOTE:</b> This has been replaced by the new\n {@link org.apache.commons.validator.routines.ISBNValidator}.\n\n@since 1.2.0\n@deprecated Use the new ISBNValidator in the routines package\n", "original_string": "@Deprecated\npublic class ISBNValidator {\n\n    /**\n     * Default Constructor.\n     */\n    public ISBNValidator() {\n    }\n\n    /**\n     * If the ISBN is formatted with space or dash separators its format is\n     * validated.  Then the digits in the number are weighted, summed, and\n     * divided by 11 according to the ISBN algorithm.  If the result is zero,\n     * the ISBN is valid.  This method accepts formatted or raw ISBN codes.\n     *\n     * @param isbn Candidate ISBN number to be validated. {@code null} is\n     * considered invalid.\n     * @return true if the string is a valid ISBN code.\n     */\n    public boolean isValid(final String isbn) {\n        return org.apache.commons.validator.routines.ISBNValidator.getInstance().isValidISBN10(isbn);\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorResult.java.ValidatorResult", "name": "ValidatorResult", "file_path": "src/main/java/org/apache/commons/validator/ValidatorResult.java", "superclasses": "", "methods": ["[]ValidatorResult(Field)", "[void]add(String,boolean)", "[void]add(String,boolean,Object)", "[boolean]containsAction(String)", "[Map<String, ResultStatus>]getActionMap()", "[Iterator<String>]getActions()", "[Field]getField()", "[Object]getResult(String)", "[boolean]isValid(String)"], "method_uris": ["src/main/java/org/apache/commons/validator/ValidatorResult.java.ValidatorResult.[]ValidatorResult(Field)", "src/main/java/org/apache/commons/validator/ValidatorResult.java.ValidatorResult.[void]add(String,boolean)", "src/main/java/org/apache/commons/validator/ValidatorResult.java.ValidatorResult.[void]add(String,boolean,Object)", "src/main/java/org/apache/commons/validator/ValidatorResult.java.ValidatorResult.[boolean]containsAction(String)", "src/main/java/org/apache/commons/validator/ValidatorResult.java.ValidatorResult.[Map<String, ResultStatus>]getActionMap()", "src/main/java/org/apache/commons/validator/ValidatorResult.java.ValidatorResult.[Iterator<String>]getActions()", "src/main/java/org/apache/commons/validator/ValidatorResult.java.ValidatorResult.[Field]getField()", "src/main/java/org/apache/commons/validator/ValidatorResult.java.ValidatorResult.[Object]getResult(String)", "src/main/java/org/apache/commons/validator/ValidatorResult.java.ValidatorResult.[boolean]isValid(String)"], "overrides": null, "attributes": [{"original_string": "    protected static class ResultStatus implements Serializable {\n\n        private static final long serialVersionUID = 4076665918535320007L;\n\n        /** Whether or not the validation passed. */\n        private boolean valid;\n\n        /** Result returned by a validation method. */\n        private Object result;\n\n       /**\n        * Constructs a Result status.\n        * @param valid Whether the validator passed or failed.\n        * @param result Value returned by the validator.\n        */\n        public ResultStatus(final boolean valid, final Object result) {\n            this.valid = valid;\n            this.result = result;\n        }\n        /**\n         * Provided for backwards binary compatibility only.\n         *\n         * @param ignored ignored by this method\n         * @param valid Whether the validator passed or failed.\n         * @param result Value returned by the validator.\n         *\n         * @deprecated Use {@code ResultStatus(boolean, Object)} instead\n         */\n        @Deprecated\n        public ResultStatus(final ValidatorResult ignored, final boolean valid, final Object result) {\n            this(valid, result);\n        }\n\n        /**\n         * Gets the result returned by a validation method.\n         * This can be used to retrieve to the correctly\n         * typed value of a date validation for example.\n         * @return The value returned by the validation.\n         */\n        public Object getResult() {\n            return result;\n        }\n\n        /**\n         * Tests whether or not the validation passed.\n         * @return true if the result was good.\n         */\n        public boolean isValid() {\n            return valid;\n        }\n\n        /**\n         * Sets the result returned by a validation method.\n         * This can be used to retrieve to the correctly\n         * typed value of a date validation for example.\n         * @param result The value returned by the validation.\n         */\n        public void setResult(final Object result) {\n            this.result = result;\n        }\n\n        /**\n         * Sets whether or not the validation passed.\n         * @param valid Whether the validation passed.\n         */\n        public void setValid(final boolean valid) {\n            this.valid = valid;\n        }\n\n    }", "definition": "    protected static class ResultStatus implements Serializable", "class_docstring": "\nContains the status of the validation.\n", "name": "ResultStatus", "super_interfaces": ["Serializable"], "superclasses": "", "attributes": {"modifiers": "protected static", "marker_annotations": [], "non_marker_annotations": ["protected", "static"], "comments": [], "fields": [{"attribute_expression": "private static final long serialVersionUID = 4076665918535320007L;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "serialVersionUID = 4076665918535320007L", "syntax_pass": true}, {"attribute_expression": "private boolean valid;", "docstring": " Whether or not the validation passed.", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "boolean", "name": "valid", "syntax_pass": true}, {"attribute_expression": "private Object result;", "docstring": " Result returned by a validation method.", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Object", "name": "result", "syntax_pass": true}], "classes": []}, "syntax_pass": true, "methods": [{"syntax_pass": true, "original_string": "        public ResultStatus(final boolean valid, final Object result) {\n            this.valid = valid;\n            this.result = result;\n        }", "docstring": "\nConstructs a Result status.\n@param valid Whether the validator passed or failed.\n@param result Value returned by the validator.\n", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "name": "ResultStatus", "params": [{"name": "valid", "type": "boolean"}, {"name": "result", "type": "Object"}], "body": "                                                                      {\n            this.valid = valid;\n            this.result = result;\n        }", "signature": "public ResultStatus(final boolean valid, final Object result)"}, {"syntax_pass": true, "original_string": "        @Deprecated\n        public ResultStatus(final ValidatorResult ignored, final boolean valid, final Object result) {\n            this(valid, result);\n        }", "docstring": "\nProvided for backwards binary compatibility only.\n\n@param ignored ignored by this method\n@param valid Whether the validator passed or failed.\n@param result Value returned by the validator.\n\n@deprecated Use {@code ResultStatus(boolean, Object)} instead\n", "attributes": {"modifiers": "@Deprecated\n        public", "marker_annotations": ["@Deprecated"], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "name": "ResultStatus", "params": [{"name": "ignored", "type": "ValidatorResult"}, {"name": "valid", "type": "boolean"}, {"name": "result", "type": "Object"}], "body": "                                                                                                     {\n            this(valid, result);\n        }", "signature": "@Deprecated\n        public ResultStatus(final ValidatorResult ignored, final boolean valid, final Object result)"}, {"syntax_pass": true, "original_string": "        public Object getResult() {\n            return result;\n        }", "docstring": "\nGets the result returned by a validation method.\nThis can be used to retrieve to the correctly\ntyped value of a date validation for example.\n@return The value returned by the validation.\n", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Object", "classes": []}, "name": "getResult", "params": [], "body": "                                  {\n            return result;\n        }", "signature": "public Object getResult()"}, {"syntax_pass": true, "original_string": "        public boolean isValid() {\n            return valid;\n        }", "docstring": "\nTests whether or not the validation passed.\n@return true if the result was good.\n", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "name": "isValid", "params": [], "body": "                                 {\n            return valid;\n        }", "signature": "public boolean isValid()"}, {"syntax_pass": true, "original_string": "        public void setResult(final Object result) {\n            this.result = result;\n        }", "docstring": "\nSets the result returned by a validation method.\nThis can be used to retrieve to the correctly\ntyped value of a date validation for example.\n@param result The value returned by the validation.\n", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "name": "setResult", "params": [{"name": "result", "type": "Object"}], "body": "                                                   {\n            this.result = result;\n        }", "signature": "public void setResult(final Object result)"}, {"syntax_pass": true, "original_string": "        public void setValid(final boolean valid) {\n            this.valid = valid;\n        }", "docstring": "\nSets whether or not the validation passed.\n@param valid Whether the validation passed.\n", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "name": "setValid", "params": [{"name": "valid", "type": "boolean"}], "body": "                                                  {\n            this.valid = valid;\n        }", "signature": "public void setValid(final boolean valid)"}]}], "class_docstring": "TODO mutable non-private fields", "original_string": "public class ValidatorResult implements Serializable {\n\n    /**\n     * Contains the status of the validation.\n     */\n    protected static class ResultStatus implements Serializable {\n\n        private static final long serialVersionUID = 4076665918535320007L;\n\n        /** Whether or not the validation passed. */\n        private boolean valid;\n\n        /** Result returned by a validation method. */\n        private Object result;\n\n       /**\n        * Constructs a Result status.\n        * @param valid Whether the validator passed or failed.\n        * @param result Value returned by the validator.\n        */\n        public ResultStatus(final boolean valid, final Object result) {\n            this.valid = valid;\n            this.result = result;\n        }\n        /**\n         * Provided for backwards binary compatibility only.\n         *\n         * @param ignored ignored by this method\n         * @param valid Whether the validator passed or failed.\n         * @param result Value returned by the validator.\n         *\n         * @deprecated Use {@code ResultStatus(boolean, Object)} instead\n         */\n        @Deprecated\n        public ResultStatus(final ValidatorResult ignored, final boolean valid, final Object result) {\n            this(valid, result);\n        }\n\n        /**\n         * Gets the result returned by a validation method.\n         * This can be used to retrieve to the correctly\n         * typed value of a date validation for example.\n         * @return The value returned by the validation.\n         */\n        public Object getResult() {\n            return result;\n        }\n\n        /**\n         * Tests whether or not the validation passed.\n         * @return true if the result was good.\n         */\n        public boolean isValid() {\n            return valid;\n        }\n\n        /**\n         * Sets the result returned by a validation method.\n         * This can be used to retrieve to the correctly\n         * typed value of a date validation for example.\n         * @param result The value returned by the validation.\n         */\n        public void setResult(final Object result) {\n            this.result = result;\n        }\n\n        /**\n         * Sets whether or not the validation passed.\n         * @param valid Whether the validation passed.\n         */\n        public void setValid(final boolean valid) {\n            this.valid = valid;\n        }\n\n    }\n\n    private static final long serialVersionUID = -3713364681647250531L;\n\n    /**\n     * Map of results.  The key is the name of the {@code ValidatorAction}\n     * and the value is whether or not this field passed or not.\n     */\n    protected Map<String, ResultStatus> hAction = new HashMap<>();\n\n    /**\n     * {@code Field} being validated.\n     * TODO This variable is not used.  Need to investigate removing it.\n     */\n    protected Field field;\n\n    /**\n     * Constructs a {@code ValidatorResult} with the associated field being\n     * validated.\n     * @param field Field that was validated.\n     */\n    public ValidatorResult(final Field field) {\n        this.field = field;\n    }\n\n    /**\n     * Add the result of a validator action.\n     * @param validatorName Name of the validator.\n     * @param result Whether the validation passed or failed.\n     */\n    public void add(final String validatorName, final boolean result) {\n        this.add(validatorName, result, null);\n    }\n\n    /**\n     * Add the result of a validator action.\n     * @param validatorName Name of the validator.\n     * @param result Whether the validation passed or failed.\n     * @param value Value returned by the validator.\n     */\n    public void add(final String validatorName, final boolean result, final Object value) {\n        hAction.put(validatorName, new ResultStatus(result, value));\n    }\n\n    /**\n     * Indicate whether a specified validator is in the Result.\n     * @param validatorName Name of the validator.\n     * @return true if the validator is in the result.\n     */\n    public boolean containsAction(final String validatorName) {\n        return hAction.containsKey(validatorName);\n    }\n\n    /**\n     * Gets a Map of the validator actions in this Result.\n     * @return Map of validator actions.\n     * @deprecated Use getActions() to return the set of actions\n     *             the isValid(name) and getResult(name) methods\n     *             to determine the contents of ResultStatus.\n     */\n    @Deprecated\n    public Map<String, ResultStatus> getActionMap() {\n        return Collections.unmodifiableMap(hAction);\n    }\n\n    /**\n     * Gets an Iterator of the action names contained in this Result.\n     * @return The set of action names.\n     */\n    public Iterator<String> getActions() {\n        return Collections.unmodifiableMap(hAction).keySet().iterator();\n    }\n\n    /**\n     * Returns the Field that was validated.\n     * @return The Field associated with this result.\n     */\n    public Field getField() {\n        return field;\n    }\n\n    /**\n     * Gets the result of a validation.\n     * @param validatorName Name of the validator.\n     * @return The validation result.\n     */\n    public Object getResult(final String validatorName) {\n        final ResultStatus status = hAction.get(validatorName);\n        return status == null ? null : status.getResult();\n    }\n\n    /**\n     * Indicate whether a specified validation passed.\n     * @param validatorName Name of the validator.\n     * @return true if the validation passed.\n     */\n    public boolean isValid(final String validatorName) {\n        final ResultStatus status = hAction.get(validatorName);\n        return status != null && status.isValid();\n    }\n\n}", "super_interfaces": ["Serializable"], "fields": [{"attribute_expression": "private static final long serialVersionUID = -3713364681647250531L;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "serialVersionUID = -3713364681647250531L", "syntax_pass": true}, {"attribute_expression": "protected Map<String, ResultStatus> hAction = new HashMap<>();", "docstring": "\nMap of results.  The key is the name of the {@code ValidatorAction}\nand the value is whether or not this field passed or not.\n", "modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "type": "Map<String, ResultStatus>", "name": "hAction = new HashMap<>()", "syntax_pass": true}, {"attribute_expression": "protected Field field;", "docstring": "\n{@code Field} being validated.\nTODO This variable is not used.  Need to investigate removing it.\n", "modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "type": "Field", "name": "field", "syntax_pass": true}]}, {"uris": "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator", "name": "GenericValidator", "file_path": "src/main/java/org/apache/commons/validator/GenericValidator.java", "superclasses": "", "methods": ["[int]adjustForLineEnding(String,int)", "[boolean]isBlankOrNull(String)", "[boolean]isByte(String)", "[boolean]isCreditCard(String)", "[boolean]isDate(String,Locale)", "[boolean]isDate(String,String,boolean)", "[boolean]isDouble(String)", "[boolean]isEmail(String)", "[boolean]isFloat(String)", "[boolean]isInRange(byte,byte,byte)", "[boolean]isInRange(double,double,double)", "[boolean]isInRange(float,float,float)", "[boolean]isInRange(int,int,int)", "[boolean]isInRange(long,long,long)", "[boolean]isInRange(short,short,short)", "[boolean]isInt(String)", "[boolean]isLong(String)", "[boolean]isShort(String)", "[boolean]isUrl(String)", "[boolean]matchRegexp(String,String)", "[boolean]maxLength(String,int)", "[boolean]maxLength(String,int,int)", "[boolean]maxValue(double,double)", "[boolean]maxValue(float,float)", "[boolean]maxValue(int,int)", "[boolean]maxValue(long,long)", "[boolean]minLength(String,int)", "[boolean]minLength(String,int,int)", "[boolean]minValue(double,double)", "[boolean]minValue(float,float)", "[boolean]minValue(int,int)", "[boolean]minValue(long,long)"], "method_uris": ["src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator.[int]adjustForLineEnding(String,int)", "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator.[boolean]isBlankOrNull(String)", "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator.[boolean]isByte(String)", "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator.[boolean]isCreditCard(String)", "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator.[boolean]isDate(String,Locale)", "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator.[boolean]isDate(String,String,boolean)", "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator.[boolean]isDouble(String)", "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator.[boolean]isEmail(String)", "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator.[boolean]isFloat(String)", "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator.[boolean]isInRange(byte,byte,byte)", "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator.[boolean]isInRange(double,double,double)", "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator.[boolean]isInRange(float,float,float)", "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator.[boolean]isInRange(int,int,int)", "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator.[boolean]isInRange(long,long,long)", "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator.[boolean]isInRange(short,short,short)", "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator.[boolean]isInt(String)", "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator.[boolean]isLong(String)", "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator.[boolean]isShort(String)", "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator.[boolean]isUrl(String)", "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator.[boolean]matchRegexp(String,String)", "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator.[boolean]maxLength(String,int)", "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator.[boolean]maxLength(String,int,int)", "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator.[boolean]maxValue(double,double)", "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator.[boolean]maxValue(float,float)", "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator.[boolean]maxValue(int,int)", "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator.[boolean]maxValue(long,long)", "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator.[boolean]minLength(String,int)", "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator.[boolean]minLength(String,int,int)", "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator.[boolean]minValue(double,double)", "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator.[boolean]minValue(float,float)", "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator.[boolean]minValue(int,int)", "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator.[boolean]minValue(long,long)"], "overrides": null, "attributes": [], "class_docstring": "\nThis class contains basic methods for performing validations.\n", "original_string": "public class GenericValidator implements Serializable {\n\n    private static final long serialVersionUID = -7212095066891517618L;\n\n    /**\n     * UrlValidator used in wrapper method.\n     */\n    private static final UrlValidator URL_VALIDATOR = new UrlValidator();\n\n    /**\n     * CreditCardValidator used in wrapper method.\n     */\n    private static final CreditCardValidator CREDIT_CARD_VALIDATOR = new CreditCardValidator();\n\n    /**\n     * Calculate an adjustment amount for line endings.\n     *\n     * See Bug 37962 for the rational behind this.\n     *\n     * @param value The value validation is being performed on.\n     * @param lineEndLength The length to use for line endings.\n     * @return the adjustment amount.\n     */\n    private static int adjustForLineEnding(final String value, final int lineEndLength) {\n        int nCount = 0;\n        int rCount = 0;\n        for (int i = 0; i < value.length(); i++) {\n            if (value.charAt(i) == '\\n') {\n                nCount++;\n            }\n            if (value.charAt(i) == '\\r') {\n                rCount++;\n            }\n        }\n        final int rnCount = rCount + nCount;\n        return nCount * lineEndLength - rnCount;\n    }\n\n    /**\n     * <p>Checks if the field isn't null and length of the field is greater\n     * than zero not including whitespace.</p>\n     *\n     * @param value The value validation is being performed on.\n     * @return true if blank or null.\n     */\n    public static boolean isBlankOrNull(final String value) {\n        // Don't trim is already empty.\n        return value == null || value.isEmpty() || value.trim().isEmpty();\n    }\n\n    /**\n     * <p>Checks if the value can safely be converted to a byte primitive.</p>\n     *\n     * @param value The value validation is being performed on.\n     * @return true if the value can be converted to a Byte.\n     */\n    public static boolean isByte(final String value) {\n        return GenericTypeValidator.formatByte(value) != null;\n    }\n\n    /**\n     * Checks if the field is a valid credit card number.\n     * @param value The value validation is being performed on.\n     * @return true if the value is valid Credit Card Number.\n     */\n    public static boolean isCreditCard(final String value) {\n        return CREDIT_CARD_VALIDATOR.isValid(value);\n    }\n\n    /**\n     * <p>Checks if the field is a valid date.  The {@link Locale} is\n     * used with {@link DateFormat}.  The setLenient method\n     * is set to {@code false} for all.</p>\n     *\n     * @param value The value validation is being performed on.\n     * @param locale The locale to use for the date format, defaults to the\n     * system default if null.\n     * @return true if the value can be converted to a Date.\n     */\n    public static boolean isDate(final String value, final Locale locale) {\n        return DateValidator.getInstance().isValid(value, locale);\n    }\n\n    /**\n     * <p>Checks if the field is a valid date.  The pattern is used with\n     * {@link SimpleDateFormat}.  If strict is true, then the\n     * length will be checked so '2/12/1999' will not pass validation with\n     * the format 'MM/dd/yyyy' because the month isn't two digits.\n     * The setLenient method is set to {@code false} for all.</p>\n     *\n     * @param value The value validation is being performed on.\n     * @param datePattern The pattern passed to {@link SimpleDateFormat}.\n     * @param strict Whether or not to have an exact match of the datePattern.\n     * @return true if the value can be converted to a Date.\n     */\n    public static boolean isDate(final String value, final String datePattern, final boolean strict) {\n        // TODO method isValid() not yet supported in routines version\n        return org.apache.commons.validator.DateValidator.getInstance().isValid(value, datePattern, strict);\n    }\n\n    /**\n     * <p>Checks if the value can safely be converted to a double primitive.</p>\n     *\n     * @param value The value validation is being performed on.\n     * @return true if the value can be converted to a Double.\n     */\n    public static boolean isDouble(final String value) {\n        return GenericTypeValidator.formatDouble(value) != null;\n    }\n\n    /**\n     * <p>Checks if a field has a valid e-mail address.</p>\n     *\n     * @param value The value validation is being performed on.\n     * @return true if the value is valid Email Address.\n     */\n    public static boolean isEmail(final String value) {\n        return EmailValidator.getInstance().isValid(value);\n    }\n\n    /**\n     * <p>Checks if the value can safely be converted to a float primitive.</p>\n     *\n     * @param value The value validation is being performed on.\n     * @return true if the value can be converted to a Float.\n     */\n    public static boolean isFloat(final String value) {\n        return GenericTypeValidator.formatFloat(value) != null;\n    }\n\n    /**\n    * <p>Checks if a value is within a range (min &amp; max specified\n    * in the vars attribute).</p>\n    *\n    * @param value The value validation is being performed on.\n    * @param min The minimum value of the range.\n    * @param max The maximum value of the range.\n     * @return true if the value is in the specified range.\n    */\n    public static boolean isInRange(final byte value, final byte min, final byte max) {\n        return value >= min && value <= max;\n    }\n\n    /**\n     * <p>Checks if a value is within a range (min &amp; max specified\n     * in the vars attribute).</p>\n     *\n     * @param value The value validation is being performed on.\n     * @param min The minimum value of the range.\n     * @param max The maximum value of the range.\n     * @return true if the value is in the specified range.\n     */\n    public static boolean isInRange(final double value, final double min, final double max) {\n        return value >= min && value <= max;\n    }\n\n    /**\n     * <p>Checks if a value is within a range (min &amp; max specified\n     * in the vars attribute).</p>\n     *\n     * @param value The value validation is being performed on.\n     * @param min The minimum value of the range.\n     * @param max The maximum value of the range.\n     * @return true if the value is in the specified range.\n     */\n    public static boolean isInRange(final float value, final float min, final float max) {\n        return value >= min && value <= max;\n    }\n\n    /**\n     * <p>Checks if a value is within a range (min &amp; max specified\n     * in the vars attribute).</p>\n     *\n     * @param value The value validation is being performed on.\n     * @param min The minimum value of the range.\n     * @param max The maximum value of the range.\n     * @return true if the value is in the specified range.\n     */\n    public static boolean isInRange(final int value, final int min, final int max) {\n        return value >= min && value <= max;\n    }\n\n    /**\n     * <p>Checks if a value is within a range (min &amp; max specified\n     * in the vars attribute).</p>\n     *\n     * @param value The value validation is being performed on.\n     * @param min The minimum value of the range.\n     * @param max The maximum value of the range.\n     * @return true if the value is in the specified range.\n     */\n    public static boolean isInRange(final long value, final long min, final long max) {\n        return value >= min && value <= max;\n    }\n\n    /**\n     * <p>Checks if a value is within a range (min &amp; max specified\n     * in the vars attribute).</p>\n     *\n     * @param value The value validation is being performed on.\n     * @param min The minimum value of the range.\n     * @param max The maximum value of the range.\n     * @return true if the value is in the specified range.\n     */\n    public static boolean isInRange(final short value, final short min, final short max) {\n        return value >= min && value <= max;\n    }\n\n    /**\n     * <p>Checks if the value can safely be converted to a int primitive.</p>\n     *\n     * @param value The value validation is being performed on.\n     * @return true if the value can be converted to an Integer.\n     */\n    public static boolean isInt(final String value) {\n        return GenericTypeValidator.formatInt(value) != null;\n    }\n\n    /**\n     * <p>Checks if the value can safely be converted to a long primitive.</p>\n     *\n     * @param value The value validation is being performed on.\n     * @return true if the value can be converted to a Long.\n     */\n    public static boolean isLong(final String value) {\n        return GenericTypeValidator.formatLong(value) != null;\n    }\n\n    /**\n     * <p>Checks if the value can safely be converted to a short primitive.</p>\n     *\n     * @param value The value validation is being performed on.\n     * @return true if the value can be converted to a Short.\n     */\n    public static boolean isShort(final String value) {\n        return GenericTypeValidator.formatShort(value) != null;\n    }\n\n    /**\n     * <p>Checks if a field is a valid URL address.</p>\n     * If you need to modify what is considered valid then\n     * consider using the UrlValidator directly.\n     *\n     * @param value The value validation is being performed on.\n     * @return true if the value is valid Url.\n     */\n    public static boolean isUrl(final String value) {\n        return URL_VALIDATOR.isValid(value);\n    }\n\n    /**\n     * <p>Checks if the value matches the regular expression.</p>\n     *\n     * @param value The value validation is being performed on.\n     * @param regexp The regular expression.\n     * @return true if matches the regular expression.\n     */\n    public static boolean matchRegexp(final String value, final String regexp) {\n        if (regexp == null || regexp.isEmpty()) {\n            return false;\n        }\n\n        return Pattern.matches(regexp, value);\n    }\n\n    /**\n     * <p>Checks if the value's length is less than or equal to the max.</p>\n     *\n     * @param value The value validation is being performed on.\n     * @param max The maximum length.\n     * @return true if the value's length is less than the specified maximum.\n     */\n    public static boolean maxLength(final String value, final int max) {\n        return value.length() <= max;\n    }\n\n    /**\n     * <p>Checks if the value's adjusted length is less than or equal to the max.</p>\n     *\n     * @param value The value validation is being performed on.\n     * @param max The maximum length.\n     * @param lineEndLength The length to use for line endings.\n     * @return true if the value's length is less than the specified maximum.\n     */\n    public static boolean maxLength(final String value, final int max, final int lineEndLength) {\n        final int adjustAmount = adjustForLineEnding(value, lineEndLength);\n        return value.length() + adjustAmount <= max;\n    }\n\n    /**\n     * <p>Checks if the value is less than or equal to the max.</p>\n     *\n     * @param value The value validation is being performed on.\n     * @param max The maximum numeric value.\n     * @return true if the value is &lt;= the specified maximum.\n     */\n    public static boolean maxValue(final double value, final double max) {\n        return value <= max;\n    }\n\n    /**\n     * <p>Checks if the value is less than or equal to the max.</p>\n     *\n     * @param value The value validation is being performed on.\n     * @param max The maximum numeric value.\n     * @return true if the value is &lt;= the specified maximum.\n     */\n    public static boolean maxValue(final float value, final float max) {\n        return value <= max;\n    }\n\n    // See https://issues.apache.org/bugzilla/show_bug.cgi?id=29015 WRT the \"value\" methods\n\n    /**\n     * <p>Checks if the value is less than or equal to the max.</p>\n     *\n     * @param value The value validation is being performed on.\n     * @param max The maximum numeric value.\n     * @return true if the value is &lt;= the specified maximum.\n     */\n    public static boolean maxValue(final int value, final int max) {\n        return value <= max;\n    }\n\n    /**\n     * <p>Checks if the value is less than or equal to the max.</p>\n     *\n     * @param value The value validation is being performed on.\n     * @param max The maximum numeric value.\n     * @return true if the value is &lt;= the specified maximum.\n     */\n    public static boolean maxValue(final long value, final long max) {\n        return value <= max;\n    }\n\n    /**\n     * <p>Checks if the value's length is greater than or equal to the min.</p>\n     *\n     * @param value The value validation is being performed on.\n     * @param min The minimum length.\n     * @return true if the value's length is more than the specified minimum.\n     */\n    public static boolean minLength(final String value, final int min) {\n        return value.length() >= min;\n    }\n\n    /**\n     * <p>Checks if the value's adjusted length is greater than or equal to the min.</p>\n     *\n     * @param value The value validation is being performed on.\n     * @param min The minimum length.\n     * @param lineEndLength The length to use for line endings.\n     * @return true if the value's length is more than the specified minimum.\n     */\n    public static boolean minLength(final String value, final int min, final int lineEndLength) {\n        final int adjustAmount = adjustForLineEnding(value, lineEndLength);\n        return value.length() + adjustAmount >= min;\n    }\n\n    /**\n     * <p>Checks if the value is greater than or equal to the min.</p>\n     *\n     * @param value The value validation is being performed on.\n     * @param min The minimum numeric value.\n     * @return true if the value is &gt;= the specified minimum.\n     */\n    public static boolean minValue(final double value, final double min) {\n        return value >= min;\n    }\n\n    /**\n     * <p>Checks if the value is greater than or equal to the min.</p>\n     *\n     * @param value The value validation is being performed on.\n     * @param min The minimum numeric value.\n     * @return true if the value is &gt;= the specified minimum.\n     */\n    public static boolean minValue(final float value, final float min) {\n        return value >= min;\n    }\n\n    /**\n     * <p>Checks if the value is greater than or equal to the min.</p>\n     *\n     * @param value The value validation is being performed on.\n     * @param min The minimum numeric value.\n     * @return true if the value is &gt;= the specified minimum.\n     */\n    public static boolean minValue(final int value, final int min) {\n        return value >= min;\n    }\n\n    /**\n     * <p>Checks if the value is greater than or equal to the min.</p>\n     *\n     * @param value The value validation is being performed on.\n     * @param min The minimum numeric value.\n     * @return true if the value is &gt;= the specified minimum.\n     */\n    public static boolean minValue(final long value, final long min) {\n        return value >= min;\n    }\n\n}", "super_interfaces": ["Serializable"], "fields": [{"attribute_expression": "private static final long serialVersionUID = -7212095066891517618L;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "serialVersionUID = -7212095066891517618L", "syntax_pass": true}, {"attribute_expression": "private static final UrlValidator URL_VALIDATOR = new UrlValidator();", "docstring": "\nUrlValidator used in wrapper method.\n", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "UrlValidator", "name": "URL_VALIDATOR = new UrlValidator()", "syntax_pass": true}, {"attribute_expression": "private static final CreditCardValidator CREDIT_CARD_VALIDATOR = new CreditCardValidator();", "docstring": "\nCreditCardValidator used in wrapper method.\n", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "CreditCardValidator", "name": "CREDIT_CARD_VALIDATOR = new CreditCardValidator()", "syntax_pass": true}]}, {"uris": "src/main/java/org/apache/commons/validator/DateValidator.java.DateValidator", "name": "DateValidator", "file_path": "src/main/java/org/apache/commons/validator/DateValidator.java", "superclasses": "", "methods": ["[DateValidator]getInstance()", "[]DateValidator()", "[boolean]isValid(String,Locale)", "[boolean]isValid(String,String,boolean)"], "method_uris": ["src/main/java/org/apache/commons/validator/DateValidator.java.DateValidator.[DateValidator]getInstance()", "src/main/java/org/apache/commons/validator/DateValidator.java.DateValidator.[]DateValidator()", "src/main/java/org/apache/commons/validator/DateValidator.java.DateValidator.[boolean]isValid(String,Locale)", "src/main/java/org/apache/commons/validator/DateValidator.java.DateValidator.[boolean]isValid(String,String,boolean)"], "overrides": null, "attributes": [], "class_docstring": "\n<p>Perform date validations.</p>\n<p>\nThis class is a Singleton; you can retrieve the instance via the\ngetInstance() method.\n</p>\n\n@since 1.1\n@deprecated Use the new DateValidator, CalendarValidator or TimeValidator in the\nroutines package. This class will be removed in a future release.\n", "original_string": "@Deprecated\npublic class DateValidator {\n\n    /**\n     * Singleton instance of this class.\n     */\n    private static final DateValidator DATE_VALIDATOR = new DateValidator();\n\n    /**\n     * Returns the Singleton instance of this validator.\n     * @return A singleton instance of the DateValidator.\n     */\n    public static DateValidator getInstance() {\n        return DATE_VALIDATOR;\n    }\n\n    /**\n     * Protected constructor for subclasses to use.\n     */\n    protected DateValidator() {\n    }\n\n    /**\n     * <p>Checks if the field is a valid date.  The {@link Locale} is\n     * used with {@link DateFormat}.  The setLenient method\n     * is set to {@code false} for all.</p>\n     *\n     * @param value The value validation is being performed on.\n     * @param locale The locale to use for the date format, defaults to the default\n     * system default if null.\n     * @return true if the date is valid.\n     */\n    public boolean isValid(final String value, final Locale locale) {\n\n        if (value == null) {\n            return false;\n        }\n\n        DateFormat formatter;\n        if (locale != null) {\n            formatter = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n        } else {\n            formatter =\n                    DateFormat.getDateInstance(\n                            DateFormat.SHORT,\n                            Locale.getDefault());\n        }\n\n        formatter.setLenient(false);\n\n        try {\n            formatter.parse(value);\n        } catch (final ParseException e) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * <p>Checks if the field is a valid date.  The pattern is used with\n     * {@link SimpleDateFormat}.  If strict is true, then the\n     * length will be checked so '2/12/1999' will not pass validation with\n     * the format 'MM/dd/yyyy' because the month isn't two digits.\n     * The setLenient method is set to {@code false} for all.</p>\n     *\n     * @param value The value validation is being performed on.\n     * @param datePattern The pattern passed to {@link SimpleDateFormat}.\n     * @param strict Whether or not to have an exact match of the datePattern.\n     * @return true if the date is valid.\n     */\n    public boolean isValid(final String value, final String datePattern, final boolean strict) {\n\n        if (value == null\n                || datePattern == null\n                || datePattern.isEmpty()) {\n\n            return false;\n        }\n\n        final SimpleDateFormat formatter = new SimpleDateFormat(datePattern);\n        formatter.setLenient(false);\n\n        try {\n            formatter.parse(value);\n        } catch (final ParseException e) {\n            return false;\n        }\n\n        if (strict && datePattern.length() != value.length()) {\n            return false;\n        }\n\n        return true;\n    }\n\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final DateValidator DATE_VALIDATOR = new DateValidator();", "docstring": "\nSingleton instance of this class.\n", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "DateValidator", "name": "DATE_VALIDATOR = new DateValidator()", "syntax_pass": true}]}, {"uris": "src/main/java/org/apache/commons/validator/FormSet.java.FormSet", "name": "FormSet", "file_path": "src/main/java/org/apache/commons/validator/FormSet.java", "superclasses": "", "methods": ["[void]addConstant(String,String)", "[void]addForm(Form)", "[String]displayKey()", "[String]getCountry()", "[Form]getForm(String)", "[Map<String, Form>]getForms()", "[String]getLanguage()", "[Log]getLog()", "[int]getType()", "[String]getVariant()", "[boolean]isMerged()", "[boolean]isProcessed()", "[void]merge(FormSet)", "[void]process(Map<String, String>)", "[void]setCountry(String)", "[void]setLanguage(String)", "[void]setVariant(String)", "[String]toString()"], "method_uris": ["src/main/java/org/apache/commons/validator/FormSet.java.FormSet.[void]addConstant(String,String)", "src/main/java/org/apache/commons/validator/FormSet.java.FormSet.[void]addForm(Form)", "src/main/java/org/apache/commons/validator/FormSet.java.FormSet.[String]displayKey()", "src/main/java/org/apache/commons/validator/FormSet.java.FormSet.[String]getCountry()", "src/main/java/org/apache/commons/validator/FormSet.java.FormSet.[Form]getForm(String)", "src/main/java/org/apache/commons/validator/FormSet.java.FormSet.[Map<String, Form>]getForms()", "src/main/java/org/apache/commons/validator/FormSet.java.FormSet.[String]getLanguage()", "src/main/java/org/apache/commons/validator/FormSet.java.FormSet.[Log]getLog()", "src/main/java/org/apache/commons/validator/FormSet.java.FormSet.[int]getType()", "src/main/java/org/apache/commons/validator/FormSet.java.FormSet.[String]getVariant()", "src/main/java/org/apache/commons/validator/FormSet.java.FormSet.[boolean]isMerged()", "src/main/java/org/apache/commons/validator/FormSet.java.FormSet.[boolean]isProcessed()", "src/main/java/org/apache/commons/validator/FormSet.java.FormSet.[void]merge(FormSet)", "src/main/java/org/apache/commons/validator/FormSet.java.FormSet.[void]process(Map<String, String>)", "src/main/java/org/apache/commons/validator/FormSet.java.FormSet.[void]setCountry(String)", "src/main/java/org/apache/commons/validator/FormSet.java.FormSet.[void]setLanguage(String)", "src/main/java/org/apache/commons/validator/FormSet.java.FormSet.[void]setVariant(String)", "src/main/java/org/apache/commons/validator/FormSet.java.FormSet.[String]toString()"], "overrides": null, "attributes": [], "class_docstring": "\nHolds a set of {@code Form}s stored associated with a {@link Locale}\nbased on the country, language, and variant specified. Instances of this\nclass are configured with a &lt;formset&gt; xml element.\n", "original_string": "public class FormSet implements Serializable {\n\n    private static final long serialVersionUID = -8936513232763306055L;\n\n    /**\n     * This is the type of {@code FormSet}s where no locale is specified.\n     */\n    protected final static int GLOBAL_FORMSET = 1;\n\n    /**\n     * This is the type of {@code FormSet}s where only language locale is\n     * specified.\n     */\n    protected final static int LANGUAGE_FORMSET = 2;\n\n    /**\n     * This is the type of {@code FormSet}s where only language and country\n     * locale are specified.\n     */\n    protected final static int COUNTRY_FORMSET = 3;\n\n    /**\n     * This is the type of {@code FormSet}s where full locale has been set.\n     */\n    protected final static int VARIANT_FORMSET = 4;\n\n    /** Logging */\n    private transient Log log = LogFactory.getLog(FormSet.class);\n\n    /**\n     * Whether or not the this {@code FormSet} was processed for replacing\n     * variables in strings with their values.\n     */\n    private boolean processed;\n\n    /** Language component of {@link Locale} (required). */\n    private String language;\n\n    /** Country component of {@link Locale} (optional). */\n    private String country;\n\n    /** Variant component of {@link Locale} (optional). */\n    private String variant;\n\n    /**\n     * A {@link Map} of {@code Form}s using the name field of the\n     * {@code Form} as the key.\n     */\n    private final Map<String, Form> forms = new HashMap<>();\n\n    /**\n     * A {@link Map} of {@code Constant}s using the name field of the\n     * {@code Constant} as the key.\n     */\n    private final Map<String, String> constants = new HashMap<>();\n\n    /**\n     * Flag indicating if this formSet has been merged with its parent (higher\n     * rank in Locale hierarchy).\n     */\n    private boolean merged;\n\n    /**\n     * Add a {@code Constant} to the locale level.\n     *\n     * @param name   The constant name\n     * @param value  The constant value\n     */\n    public void addConstant(final String name, final String value) {\n        if (constants.containsKey(name)) {\n            getLog().error(\"Constant '\" + name + \"' already exists in FormSet[\" + displayKey() + \"] - ignoring.\");\n        } else {\n            constants.put(name, value);\n        }\n    }\n\n    /**\n     * Add a {@code Form} to the {@code FormSet}.\n     *\n     * @param f  The form\n     */\n    public void addForm(final Form f) {\n\n        final String formName = f.getName();\n        if (forms.containsKey(formName)) {\n            getLog().error(\"Form '\" + formName + \"' already exists in FormSet[\" + displayKey() + \"] - ignoring.\");\n\n        } else {\n            forms.put(f.getName(), f);\n        }\n\n    }\n\n    /**\n     * Returns a string representation of the object's key.\n     *\n     * @return   A string representation of the key\n     */\n    public String displayKey() {\n        final StringBuilder results = new StringBuilder();\n        if (language != null && !language.isEmpty()) {\n            results.append(\"language=\");\n            results.append(language);\n        }\n        if (country != null && !country.isEmpty()) {\n            if (results.length() > 0) {\n                results.append(\", \");\n            }\n            results.append(\"country=\");\n            results.append(country);\n        }\n        if (variant != null && !variant.isEmpty()) {\n            if (results.length() > 0) {\n                results.append(\", \");\n            }\n            results.append(\"variant=\");\n            results.append(variant);\n        }\n        if (results.length() == 0) {\n            results.append(\"default\");\n        }\n\n        return results.toString();\n    }\n\n    /**\n     * Gets the equivalent of the country component of {@link Locale}.\n     *\n     * @return   The country value\n     */\n    public String getCountry() {\n        return country;\n    }\n\n    /**\n     * Retrieve a {@code Form} based on the form name.\n     *\n     * @param formName  The form name\n     * @return          The form\n     */\n    public Form getForm(final String formName) {\n        return forms.get(formName);\n    }\n\n    /**\n     * A {@link Map} of {@code Form}s is returned as an unmodifiable\n     * {@link Map} with the key based on the form name.\n     *\n     * @return   The forms map\n     */\n    public Map<String, Form> getForms() {\n        return Collections.unmodifiableMap(forms);\n    }\n\n    /**\n     * Gets the equivalent of the language component of {@link Locale}.\n     *\n     * @return   The language value\n     */\n    public String getLanguage() {\n        return language;\n    }\n\n    /**\n     * Accessor method for Log instance.\n     *\n     * The Log instance variable is transient and\n     * accessing it through this method ensures it\n     * is re-initialized when this instance is\n     * de-serialized.\n     *\n     * @return The Log instance.\n     */\n    private Log getLog() {\n        if (log == null) {\n            log = LogFactory.getLog(FormSet.class);\n        }\n        return log;\n    }\n\n    /**\n     * Returns the type of {@code FormSet}:{@code GLOBAL_FORMSET},\n     * {@code LANGUAGE_FORMSET},{@code COUNTRY_FORMSET} or {@code VARIANT_FORMSET}\n     * .\n     *\n     * @return                       The type value\n     * @since 1.2.0\n     * @throws NullPointerException  if there is inconsistency in the locale\n     *      definition (not sure about this)\n     */\n    protected int getType() {\n        if (getVariant() != null) {\n            if (getLanguage() == null || getCountry() == null) {\n                throw new NullPointerException(\"When variant is specified, country and language must be specified.\");\n            }\n            return VARIANT_FORMSET;\n        }\n        if (getCountry() != null) {\n            if (getLanguage() == null) {\n                throw new NullPointerException(\"When country is specified, language must be specified.\");\n            }\n            return COUNTRY_FORMSET;\n        }\n        if (getLanguage() != null) {\n            return LANGUAGE_FORMSET;\n        }\n        return GLOBAL_FORMSET;\n    }\n\n    /**\n     * Gets the equivalent of the variant component of {@link Locale}.\n     *\n     * @return   The variant value\n     */\n    public String getVariant() {\n        return variant;\n    }\n\n    /**\n     * Has this formSet been merged?\n     *\n     * @return   true if it has been merged\n     * @since 1.2.0\n     */\n    protected boolean isMerged() {\n        return merged;\n    }\n\n    /**\n     * Whether or not the this {@code FormSet} was processed for replacing\n     * variables in strings with their values.\n     *\n     * @return   The processed value\n     */\n    public boolean isProcessed() {\n        return processed;\n    }\n\n    /**\n     * Merges the given {@code FormSet} into this one. If any of {@code depends}\n     * s {@code Forms} are not in this {@code FormSet} then, include\n     * them, else merge both {@code Forms}. Theoretically we should only\n     * merge a \"parent\" formSet.\n     *\n     * @param depends  FormSet to be merged\n     * @since 1.2.0\n     */\n    protected void merge(final FormSet depends) {\n        if (depends != null) {\n            final Map<String, Form> pForms = getForms();\n            final Map<String, Form> dForms = depends.getForms();\n            for (final Entry<String, Form> entry : dForms.entrySet()) {\n                final String key = entry.getKey();\n                final Form pForm = pForms.get(key);\n                if (pForm != null) { // merge, but principal 'rules', don't overwrite\n                    // anything\n                    pForm.merge(entry.getValue());\n                } else { // just add\n                    addForm(entry.getValue());\n                }\n            }\n        }\n        merged = true;\n    }\n\n    /**\n     * Processes all of the {@code Form}s.\n     *\n     * @param globalConstants  Global constants\n     */\n    synchronized void process(final Map<String, String> globalConstants) {\n        for (final Form f : forms.values()) {\n            f.process(globalConstants, constants, forms);\n        }\n\n        processed = true;\n    }\n\n    /**\n     * Sets the equivalent of the country component of {@link Locale}.\n     *\n     * @param country  The new country value\n     */\n    public void setCountry(final String country) {\n        this.country = country;\n    }\n\n    /**\n     * Sets the equivalent of the language component of {@link Locale}.\n     *\n     * @param language  The new language value\n     */\n    public void setLanguage(final String language) {\n        this.language = language;\n    }\n\n    /**\n     * Sets the equivalent of the variant component of {@link Locale}.\n     *\n     * @param variant  The new variant value\n     */\n    public void setVariant(final String variant) {\n        this.variant = variant;\n    }\n\n    /**\n     * Returns a string representation of the object.\n     *\n     * @return   A string representation\n     */\n    @Override\n    public String toString() {\n        final StringBuilder results = new StringBuilder();\n\n        results.append(\"FormSet: language=\");\n        results.append(language);\n        results.append(\"  country=\");\n        results.append(country);\n        results.append(\"  variant=\");\n        results.append(variant);\n        results.append(\"\\n\");\n\n        for (final Object name : getForms().values()) {\n            results.append(\"   \");\n            results.append(name);\n            results.append(\"\\n\");\n        }\n\n        return results.toString();\n    }\n}", "super_interfaces": ["Serializable"], "fields": [{"attribute_expression": "private static final long serialVersionUID = -8936513232763306055L;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "serialVersionUID = -8936513232763306055L", "syntax_pass": true}, {"attribute_expression": "protected final static int GLOBAL_FORMSET = 1;", "docstring": "\nThis is the type of {@code FormSet}s where no locale is specified.\n", "modifiers": "protected final static", "marker_annotations": [], "non_marker_annotations": ["protected", "final", "static"], "comments": [], "type": "int", "name": "GLOBAL_FORMSET = 1", "syntax_pass": true}, {"attribute_expression": "protected final static int LANGUAGE_FORMSET = 2;", "docstring": "\nThis is the type of {@code FormSet}s where only language locale is\nspecified.\n", "modifiers": "protected final static", "marker_annotations": [], "non_marker_annotations": ["protected", "final", "static"], "comments": [], "type": "int", "name": "LANGUAGE_FORMSET = 2", "syntax_pass": true}, {"attribute_expression": "protected final static int COUNTRY_FORMSET = 3;", "docstring": "\nThis is the type of {@code FormSet}s where only language and country\nlocale are specified.\n", "modifiers": "protected final static", "marker_annotations": [], "non_marker_annotations": ["protected", "final", "static"], "comments": [], "type": "int", "name": "COUNTRY_FORMSET = 3", "syntax_pass": true}, {"attribute_expression": "protected final static int VARIANT_FORMSET = 4;", "docstring": "\nThis is the type of {@code FormSet}s where full locale has been set.\n", "modifiers": "protected final static", "marker_annotations": [], "non_marker_annotations": ["protected", "final", "static"], "comments": [], "type": "int", "name": "VARIANT_FORMSET = 4", "syntax_pass": true}, {"attribute_expression": "private transient Log log = LogFactory.getLog(FormSet.class);", "docstring": " Logging", "modifiers": "private transient", "marker_annotations": [], "non_marker_annotations": ["private", "transient"], "comments": [], "type": "Log", "name": "log = LogFactory.getLog(FormSet.class)", "syntax_pass": true}, {"attribute_expression": "private boolean processed;", "docstring": "\nWhether or not the this {@code FormSet} was processed for replacing\nvariables in strings with their values.\n", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "boolean", "name": "processed", "syntax_pass": true}, {"attribute_expression": "private String language;", "docstring": " Language component of {@link Locale} (required).", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "language", "syntax_pass": true}, {"attribute_expression": "private String country;", "docstring": " Country component of {@link Locale} (optional).", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "country", "syntax_pass": true}, {"attribute_expression": "private String variant;", "docstring": " Variant component of {@link Locale} (optional).", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "variant", "syntax_pass": true}, {"attribute_expression": "private final Map<String, Form> forms = new HashMap<>();", "docstring": "\nA {@link Map} of {@code Form}s using the name field of the\n{@code Form} as the key.\n", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Map<String, Form>", "name": "forms = new HashMap<>()", "syntax_pass": true}, {"attribute_expression": "private final Map<String, String> constants = new HashMap<>();", "docstring": "\nA {@link Map} of {@code Constant}s using the name field of the\n{@code Constant} as the key.\n", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Map<String, String>", "name": "constants = new HashMap<>()", "syntax_pass": true}, {"attribute_expression": "private boolean merged;", "docstring": "\nFlag indicating if this formSet has been merged with its parent (higher\nrank in Locale hierarchy).\n", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "boolean", "name": "merged", "syntax_pass": true}]}, {"uris": "src/main/java/org/apache/commons/validator/Msg.java.Msg", "name": "Msg", "file_path": "src/main/java/org/apache/commons/validator/Msg.java", "superclasses": "", "methods": ["[Object]clone()", "[String]getBundle()", "[String]getKey()", "[String]getName()", "[boolean]isResource()", "[void]setBundle(String)", "[void]setKey(String)", "[void]setName(String)", "[void]setResource(boolean)", "[String]toString()"], "method_uris": ["src/main/java/org/apache/commons/validator/Msg.java.Msg.[Object]clone()", "src/main/java/org/apache/commons/validator/Msg.java.Msg.[String]getBundle()", "src/main/java/org/apache/commons/validator/Msg.java.Msg.[String]getKey()", "src/main/java/org/apache/commons/validator/Msg.java.Msg.[String]getName()", "src/main/java/org/apache/commons/validator/Msg.java.Msg.[boolean]isResource()", "src/main/java/org/apache/commons/validator/Msg.java.Msg.[void]setBundle(String)", "src/main/java/org/apache/commons/validator/Msg.java.Msg.[void]setKey(String)", "src/main/java/org/apache/commons/validator/Msg.java.Msg.[void]setName(String)", "src/main/java/org/apache/commons/validator/Msg.java.Msg.[void]setResource(boolean)", "src/main/java/org/apache/commons/validator/Msg.java.Msg.[String]toString()"], "overrides": null, "attributes": [], "class_docstring": "TODO mutable non-private fields", "original_string": "public class Msg implements Cloneable, Serializable {\n\n    private static final long serialVersionUID = 5690015734364127124L;\n\n    /**\n     * The resource bundle name that this Msg's {@code key} should be\n     * resolved in (optional).\n     * @since 1.1\n     */\n    protected String bundle;\n\n    /**\n     * The key or value of the argument.\n     */\n    protected String key;\n\n    /**\n     * The name dependency that this argument goes with (optional).\n     */\n    protected String name;\n\n    /**\n     * Whether or not the key is a message resource (optional).  Defaults to\n     * true.  If it is 'true', the value will try to be resolved as a message\n     * resource.\n     * @since 1.1.4\n     */\n    protected boolean resource = true;\n\n    /**\n     * Creates and returns a copy of this object.\n     * @return A copy of the Msg.\n     */\n    @Override\n    public Object clone() {\n        try {\n            return super.clone();\n\n        } catch (final CloneNotSupportedException e) {\n            throw new UnsupportedOperationException(e.toString(), e);\n        }\n    }\n\n    /**\n     * Returns the resource bundle name.\n     * @return The bundle name.\n     * @since 1.1\n     */\n    public String getBundle() {\n        return bundle;\n    }\n\n    /**\n     * Gets the key/value.\n     * @return The message key/value.\n     */\n    public String getKey() {\n        return key;\n    }\n\n    /**\n     * Gets the name of the dependency.\n     * @return The dependency name.\n     */\n    public String getName() {\n        return name;\n    }\n\n    /**\n     * Tests whether or not the key is a resource key or literal value.\n     * @return {@code true} if key is a resource key.\n     * @since 1.1.4\n     */\n    public boolean isResource() {\n        return resource;\n    }\n\n    /**\n     * Sets the resource bundle name.\n     * @param bundle The new bundle name.\n     * @since 1.1\n     */\n    public void setBundle(final String bundle) {\n        this.bundle = bundle;\n    }\n\n    /**\n     * Sets the key/value.\n     * @param key The message key/value.\n     */\n    public void setKey(final String key) {\n        this.key = key;\n    }\n\n    /**\n     * Sets the name of the dependency.\n     * @param name The dependency name.\n     */\n    public void setName(final String name) {\n        this.name = name;\n    }\n\n    /**\n     * Sets whether or not the key is a resource.\n     * @param resource If true indicates the key is a resource.\n     * @since 1.1.4\n     */\n    public void setResource(final boolean resource) {\n        this.resource = resource;\n    }\n\n    /**\n     * Returns a string representation of the object.\n     * @return Msg String representation.\n     */\n    @Override\n    public String toString() {\n        final StringBuilder results = new StringBuilder();\n\n        results.append(\"Msg: name=\");\n        results.append(name);\n        results.append(\"  key=\");\n        results.append(key);\n        results.append(\"  resource=\");\n        results.append(resource);\n        results.append(\"  bundle=\");\n        results.append(bundle);\n        results.append(\"\\n\");\n\n        return results.toString();\n    }\n\n}", "super_interfaces": ["Cloneable", "Serializable"], "fields": [{"attribute_expression": "private static final long serialVersionUID = 5690015734364127124L;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "serialVersionUID = 5690015734364127124L", "syntax_pass": true}, {"attribute_expression": "protected String bundle;", "docstring": "\nThe resource bundle name that this Msg's {@code key} should be\nresolved in (optional).\n@since 1.1\n", "modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "type": "String", "name": "bundle", "syntax_pass": true}, {"attribute_expression": "protected String key;", "docstring": "\nThe key or value of the argument.\n", "modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "type": "String", "name": "key", "syntax_pass": true}, {"attribute_expression": "protected String name;", "docstring": "\nThe name dependency that this argument goes with (optional).\n", "modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "type": "String", "name": "name", "syntax_pass": true}, {"attribute_expression": "protected boolean resource = true;", "docstring": "\nWhether or not the key is a message resource (optional).  Defaults to\ntrue.  If it is 'true', the value will try to be resolved as a message\nresource.\n@since 1.1.4\n", "modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "type": "boolean", "name": "resource = true", "syntax_pass": true}]}, {"uris": "src/main/java/org/apache/commons/validator/Form.java.Form", "name": "Form", "file_path": "src/main/java/org/apache/commons/validator/Form.java", "superclasses": "", "methods": ["[void]addField(Field)", "[boolean]containsField(String)", "[String]getExtends()", "[Field]getField(String)", "[Map<String, Field>]getFieldMap()", "[List<Field>]getFields()", "[String]getName()", "[boolean]isExtending()", "[boolean]isProcessed()", "[void]merge(Form)", "[void]process(Map<String, String>,Map<String, String>,Map<String, Form>)", "[void]setExtends(String)", "[void]setName(String)", "[String]toString()", "[ValidatorResults]validate(Map<String, Object>,Map<String, ValidatorAction>,int)", "[ValidatorResults]validate(Map<String, Object>,Map<String, ValidatorAction>,int,String)"], "method_uris": ["src/main/java/org/apache/commons/validator/Form.java.Form.[void]addField(Field)", "src/main/java/org/apache/commons/validator/Form.java.Form.[boolean]containsField(String)", "src/main/java/org/apache/commons/validator/Form.java.Form.[String]getExtends()", "src/main/java/org/apache/commons/validator/Form.java.Form.[Field]getField(String)", "src/main/java/org/apache/commons/validator/Form.java.Form.[Map<String, Field>]getFieldMap()", "src/main/java/org/apache/commons/validator/Form.java.Form.[List<Field>]getFields()", "src/main/java/org/apache/commons/validator/Form.java.Form.[String]getName()", "src/main/java/org/apache/commons/validator/Form.java.Form.[boolean]isExtending()", "src/main/java/org/apache/commons/validator/Form.java.Form.[boolean]isProcessed()", "src/main/java/org/apache/commons/validator/Form.java.Form.[void]merge(Form)", "src/main/java/org/apache/commons/validator/Form.java.Form.[void]process(Map<String, String>,Map<String, String>,Map<String, Form>)", "src/main/java/org/apache/commons/validator/Form.java.Form.[void]setExtends(String)", "src/main/java/org/apache/commons/validator/Form.java.Form.[void]setName(String)", "src/main/java/org/apache/commons/validator/Form.java.Form.[String]toString()", "src/main/java/org/apache/commons/validator/Form.java.Form.[ValidatorResults]validate(Map<String, Object>,Map<String, ValidatorAction>,int)", "src/main/java/org/apache/commons/validator/Form.java.Form.[ValidatorResults]validate(Map<String, Object>,Map<String, ValidatorAction>,int,String)"], "overrides": null, "attributes": [], "class_docstring": "TODO mutable non-private fields", "original_string": "public class Form implements Serializable {\n\n    private static final long serialVersionUID = 6445211789563796371L;\n\n    /** The name/key the set of validation rules is stored under. */\n    protected String name;\n\n    /**\n     * List of {@code Field}s. Used to maintain the order they were added\n     * in although individual {@code Field}s can be retrieved using {@link Map}\n     * of {@code Field}s.\n     */\n    protected List<Field> lFields = new ArrayList<>();\n\n    /**\n     * Map of {@code Field}s keyed on their property value.\n     *\n     * @deprecated   Subclasses should use getFieldMap() instead.\n     */\n    @Deprecated\n    protected FastHashMap hFields = new FastHashMap(); // <String, Field>\n\n    /**\n     * The name/key of the form which this form extends from.\n     *\n     * @since 1.2.0\n     */\n    protected String inherit;\n\n    /**\n     * Whether or not the this {@code Form} was processed for replacing\n     * variables in strings with their values.\n     */\n    private boolean processed;\n\n    /**\n     * Add a {@code Field} to the {@code Form}.\n     *\n     * @param f  The field\n     */\n    public void addField(final Field f) {\n        lFields.add(f);\n        getFieldMap().put(f.getKey(), f);\n    }\n\n    /**\n     * Returns true if this Form contains a Field with the given name.\n     *\n     * @param fieldName  The field name\n     * @return           True if this form contains the field by the given name\n     * @since 1.1\n     */\n    public boolean containsField(final String fieldName) {\n        return getFieldMap().containsKey(fieldName);\n    }\n\n    /**\n     * Gets the name/key of the parent set of validation rules.\n     *\n     * @return   The extends value\n     * @since 1.2.0\n     */\n    public String getExtends() {\n        return inherit;\n    }\n\n    /**\n     * Returns the Field with the given name or null if this Form has no such\n     * field.\n     *\n     * @param fieldName  The field name\n     * @return           The field value\n     * @since 1.1\n     */\n    public Field getField(final String fieldName) {\n        return getFieldMap().get(fieldName);\n    }\n\n    /**\n     * Returns a Map of String field keys to Field objects.\n     *\n     * @return   The fieldMap value\n     * @since 1.2.0\n     */\n    @SuppressWarnings(\"unchecked\") // FastHashMap is not generic\n    protected Map<String, Field> getFieldMap() {\n        return hFields;\n    }\n\n    /**\n     * A {@code List} of {@code Field}s is returned as an unmodifiable\n     * {@code List}.\n     *\n     * @return   The fields value\n     */\n    public List<Field> getFields() {\n        return Collections.unmodifiableList(lFields);\n    }\n\n    /**\n     * Gets the name/key of the set of validation rules.\n     *\n     * @return   The name value\n     */\n    public String getName() {\n        return name;\n    }\n\n    /**\n     * Gets extends flag.\n     *\n     * @return   The extending value\n     * @since 1.2.0\n     */\n    public boolean isExtending() {\n        return inherit != null;\n    }\n\n    /**\n     * Whether or not the this {@code Form} was processed for replacing\n     * variables in strings with their values.\n     *\n     * @return   The processed value\n     * @since 1.2.0\n     */\n    public boolean isProcessed() {\n        return processed;\n    }\n\n    /**\n     * Merges the given form into this one. For any field in {@code depends}\n     * not present in this form, include it. {@code depends} has precedence\n     * in the way the fields are ordered.\n     *\n     * @param depends  the form we want to merge\n     * @since 1.2.0\n     */\n    protected void merge(final Form depends) {\n\n        final List<Field> templFields = new ArrayList<>();\n        @SuppressWarnings(\"unchecked\") // FastHashMap is not generic\n        final\n        Map<String, Field> temphFields = new FastHashMap();\n        for (final Field defaultField : depends.getFields()) {\n            if (defaultField != null) {\n                final String fieldKey = defaultField.getKey();\n                if (!containsField(fieldKey)) {\n                    templFields.add(defaultField);\n                    temphFields.put(fieldKey, defaultField);\n                }\n                else {\n                    final Field old = getField(fieldKey);\n                    getFieldMap().remove(fieldKey);\n                    lFields.remove(old);\n                    templFields.add(old);\n                    temphFields.put(fieldKey, old);\n                }\n            }\n        }\n        lFields.addAll(0, templFields);\n        getFieldMap().putAll(temphFields);\n    }\n\n    /**\n     * Processes all of the {@code Form}'s {@code Field}s.\n     *\n     * @param globalConstants  A map of global constants\n     * @param constants        Local constants\n     * @param forms            Map of forms\n     * @since 1.2.0\n     */\n    protected void process(final Map<String, String> globalConstants, final Map<String, String> constants, final Map<String, Form> forms) {\n        if (isProcessed()) {\n            return;\n        }\n\n        int n = 0; //we want the fields from its parent first\n        if (isExtending()) {\n            final Form parent = forms.get(inherit);\n            if (parent != null) {\n                if (!parent.isProcessed()) {\n                    // we want to go all the way up the tree\n                    parent.process(constants, globalConstants, forms);\n                }\n                for (final Field f : parent.getFields()) {\n                    // we want to be able to override any fields we like\n                    if (getFieldMap().get(f.getKey()) == null) {\n                        lFields.add(n, f);\n                        getFieldMap().put(f.getKey(), f);\n                        n++;\n                    }\n                }\n            }\n        }\n        hFields.setFast(true);\n        // no need to reprocess parent's fields, we iterate from 'n'\n        for (final Iterator<Field> i = lFields.listIterator(n); i.hasNext(); ) {\n            final Field f = i.next();\n            f.process(globalConstants, constants);\n        }\n\n        processed = true;\n    }\n\n    /**\n     * Sets the name/key of the parent set of validation rules.\n     *\n     * @param inherit  The new extends value\n     * @since 1.2.0\n     */\n    public void setExtends(final String inherit) {\n        this.inherit = inherit;\n    }\n\n    /**\n     * Sets the name/key of the set of validation rules.\n     *\n     * @param name  The new name value\n     */\n    public void setName(final String name) {\n        this.name = name;\n    }\n\n    /**\n     * Returns a string representation of the object.\n     *\n     * @return string representation\n     */\n    @Override\n    public String toString() {\n        final StringBuilder results = new StringBuilder();\n\n        results.append(\"Form: \");\n        results.append(name);\n        results.append(\"\\n\");\n\n        for (final Field lField : lFields) {\n            results.append(\"\\tField: \\n\");\n            results.append(lField);\n            results.append(\"\\n\");\n        }\n\n        return results.toString();\n    }\n\n    /**\n     * Validate all Fields in this Form on the given page and below.\n     *\n     * @param params               A Map of parameter class names to parameter\n     *      values to pass into validation methods.\n     * @param actions              A Map of validator names to ValidatorAction\n     *      objects.\n     * @param page                 Fields on pages higher than this will not be\n     *      validated.\n     * @return                     A ValidatorResults object containing all\n     *      validation messages.\n     * @throws ValidatorException\n     */\n    ValidatorResults validate(final Map<String, Object> params, final Map<String, ValidatorAction> actions, final int page)\n        throws ValidatorException {\n        return validate(params, actions, page, null);\n    }\n\n    /**\n     * Validate all Fields in this Form on the given page and below.\n     *\n     * @param params               A Map of parameter class names to parameter\n     *      values to pass into validation methods.\n     * @param actions              A Map of validator names to ValidatorAction\n     *      objects.\n     * @param page                 Fields on pages higher than this will not be\n     *      validated.\n     * @return                     A ValidatorResults object containing all\n     *      validation messages.\n     * @throws ValidatorException\n     * @since 1.2.0\n     */\n    ValidatorResults validate(final Map<String, Object> params, final Map<String, ValidatorAction> actions, final int page, final String fieldName)\n            throws ValidatorException {\n        final ValidatorResults results = new ValidatorResults();\n        params.put(Validator.VALIDATOR_RESULTS_PARAM, results);\n\n        // Only validate a single field if specified\n        if (fieldName != null) {\n            final Field field = getFieldMap().get(fieldName);\n\n            if (field == null) {\n                throw new ValidatorException(\"Unknown field \" + fieldName + \" in form \" + getName());\n            }\n            params.put(Validator.FIELD_PARAM, field);\n\n            if (field.getPage() <= page) {\n                results.merge(field.validate(params, actions));\n            }\n        } else {\n            for (final Field field : lFields) {\n\n                params.put(Validator.FIELD_PARAM, field);\n\n                if (field.getPage() <= page) {\n                    results.merge(field.validate(params, actions));\n                }\n            }\n        }\n\n        return results;\n    }\n}", "super_interfaces": ["Serializable"], "fields": [{"attribute_expression": "private static final long serialVersionUID = 6445211789563796371L;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "serialVersionUID = 6445211789563796371L", "syntax_pass": true}, {"attribute_expression": "protected String name;", "docstring": " The name/key the set of validation rules is stored under.", "modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "type": "String", "name": "name", "syntax_pass": true}, {"attribute_expression": "protected List<Field> lFields = new ArrayList<>();", "docstring": "\nList of {@code Field}s. Used to maintain the order they were added\nin although individual {@code Field}s can be retrieved using {@link Map}\nof {@code Field}s.\n", "modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "type": "List<Field>", "name": "lFields = new ArrayList<>()", "syntax_pass": true}, {"attribute_expression": "@Deprecated\n    protected FastHashMap hFields = new FastHashMap();", "docstring": "\nMap of {@code Field}s keyed on their property value.\n\n@deprecated   Subclasses should use getFieldMap() instead.\n", "modifiers": "@Deprecated\n    protected", "marker_annotations": ["@Deprecated"], "non_marker_annotations": ["protected"], "comments": [], "type": "FastHashMap", "name": "hFields = new FastHashMap()", "syntax_pass": true}, {"attribute_expression": "protected String inherit;", "docstring": "\nThe name/key of the form which this form extends from.\n\n@since 1.2.0\n", "modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "type": "String", "name": "inherit", "syntax_pass": true}, {"attribute_expression": "private boolean processed;", "docstring": "\nWhether or not the this {@code Form} was processed for replacing\nvariables in strings with their values.\n", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "boolean", "name": "processed", "syntax_pass": true}]}, {"uris": "src/main/java/org/apache/commons/validator/UrlValidator.java.UrlValidator", "name": "UrlValidator", "file_path": "src/main/java/org/apache/commons/validator/UrlValidator.java", "superclasses": "", "methods": ["[]UrlValidator()", "[]UrlValidator(int)", "[]UrlValidator(String[])", "[]UrlValidator(String[],int)", "[int]countToken(String,String)", "[boolean]isValid(String)", "[boolean]isValidAuthority(String)", "[boolean]isValidFragment(String)", "[boolean]isValidPath(String)", "[boolean]isValidQuery(String)", "[boolean]isValidScheme(String)"], "method_uris": ["src/main/java/org/apache/commons/validator/UrlValidator.java.UrlValidator.[]UrlValidator()", "src/main/java/org/apache/commons/validator/UrlValidator.java.UrlValidator.[]UrlValidator(int)", "src/main/java/org/apache/commons/validator/UrlValidator.java.UrlValidator.[]UrlValidator(String[])", "src/main/java/org/apache/commons/validator/UrlValidator.java.UrlValidator.[]UrlValidator(String[],int)", "src/main/java/org/apache/commons/validator/UrlValidator.java.UrlValidator.[int]countToken(String,String)", "src/main/java/org/apache/commons/validator/UrlValidator.java.UrlValidator.[boolean]isValid(String)", "src/main/java/org/apache/commons/validator/UrlValidator.java.UrlValidator.[boolean]isValidAuthority(String)", "src/main/java/org/apache/commons/validator/UrlValidator.java.UrlValidator.[boolean]isValidFragment(String)", "src/main/java/org/apache/commons/validator/UrlValidator.java.UrlValidator.[boolean]isValidPath(String)", "src/main/java/org/apache/commons/validator/UrlValidator.java.UrlValidator.[boolean]isValidQuery(String)", "src/main/java/org/apache/commons/validator/UrlValidator.java.UrlValidator.[boolean]isValidScheme(String)"], "overrides": null, "attributes": [], "class_docstring": "\n<p>Validates URLs.</p>\nBehavour of validation is modified by passing in options:\n<ul>\n<li>ALLOW_2_SLASHES - [FALSE]  Allows double '/' characters in the path\ncomponent.</li>\n<li>NO_FRAGMENT- [FALSE]  By default fragments are allowed, if this option is\nincluded then fragments are flagged as illegal.</li>\n<li>ALLOW_ALL_SCHEMES - [FALSE] By default only http, https, and ftp are\nconsidered valid schemes.  Enabling this option will let any scheme pass validation.</li>\n</ul>\n\n<p>Originally based in on php script by Debbie Dyer, validation.php v1.2b, Date: 03/07/02,\nhttps://javascript.internet.com. However, this validation now bears little resemblance\nto the php original.</p>\n<pre>\n  Example of usage:\n  Construct a UrlValidator with valid schemes of \"http\", and \"https\".\n\n   String[] schemes = {\"http\",\"https\"}.\n   UrlValidator urlValidator = new UrlValidator(schemes);\n   if (urlValidator.isValid(\"ftp://foo.bar.com/\")) {\n      System.out.println(\"URL is valid\");\n   } else {\n      System.out.println(\"URL is invalid\");\n   }\n\n   prints \"URL is invalid\"\n  If instead the default constructor is used.\n\n   UrlValidator urlValidator = new UrlValidator();\n   if (urlValidator.isValid(\"ftp://foo.bar.com/\")) {\n      System.out.println(\"URL is valid\");\n   } else {\n      System.out.println(\"URL is invalid\");\n   }\n\n  prints out \"URL is valid\"\n </pre>\n\n@see\n<a href=\"http://www.ietf.org/rfc/rfc2396.txt\">\n Uniform Resource Identifiers (URI): Generic Syntax\n</a>\n\n@since 1.1\n@deprecated Use the new UrlValidator in the routines package. This class\nwill be removed in a future release.\n", "original_string": "@Deprecated\npublic class UrlValidator implements Serializable {\n\n    private static final long serialVersionUID = 24137157400029593L;\n\n    /**\n     * Allows all validly formatted schemes to pass validation instead of\n     * supplying a set of valid schemes.\n     */\n    public static final int ALLOW_ALL_SCHEMES = 1 << 0;\n\n    /**\n     * Allow two slashes in the path component of the URL.\n     */\n    public static final int ALLOW_2_SLASHES = 1 << 1;\n\n    /**\n     * Enabling this options disallows any URL fragments.\n     */\n    public static final int NO_FRAGMENTS = 1 << 2;\n\n    private static final String ALPHA_CHARS = \"a-zA-Z\";\n\n// NOT USED   private static final String ALPHA_NUMERIC_CHARS = ALPHA_CHARS + \"\\\\d\";\n\n    private static final String SPECIAL_CHARS = \";/@&=,.?:+$\";\n\n    private static final String VALID_CHARS = \"[^\\\\s\" + SPECIAL_CHARS + \"]\";\n\n    // Drop numeric, and  \"+-.\" for now\n    private static final String AUTHORITY_CHARS_REGEX = \"\\\\p{Alnum}\\\\-\\\\.\";\n\n    private static final String ATOM = VALID_CHARS + '+';\n\n    /**\n     * This expression derived/taken from the BNF for URI (RFC2396).\n     */\n    private static final String URL_REGEX =\n            \"^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\\\?([^#]*))?(#(.*))?\";\n    //                                                                      12            3  4          5       6   7        8 9\n    private static final Pattern URL_PATTERN = Pattern.compile(URL_REGEX);\n\n    /**\n     * Schema/Protocol (ie. http:, ftp:, file:, etc).\n     */\n    private static final int PARSE_URL_SCHEME = 2;\n\n    /**\n     * Includes hostname/ip and port number.\n     */\n    private static final int PARSE_URL_AUTHORITY = 4;\n\n    private static final int PARSE_URL_PATH = 5;\n\n    private static final int PARSE_URL_QUERY = 7;\n\n    private static final int PARSE_URL_FRAGMENT = 9;\n\n    /**\n     * Protocol (ie. http:, ftp:,https:).\n     */\n    private static final Pattern SCHEME_PATTERN = Pattern.compile(\"^\\\\p{Alpha}[\\\\p{Alnum}\\\\+\\\\-\\\\.]*\");\n\n    private static final String AUTHORITY_REGEX =\n       \"^([\" + AUTHORITY_CHARS_REGEX + \"]*)(:\\\\d*)?(.*)?\";\n    //                                                                            1                          2  3       4\n    private static final Pattern AUTHORITY_PATTERN = Pattern.compile(AUTHORITY_REGEX);\n\n    private static final int PARSE_AUTHORITY_HOST_IP = 1;\n\n    private static final int PARSE_AUTHORITY_PORT = 2;\n\n    /**\n     * Should always be empty.\n     */\n    private static final int PARSE_AUTHORITY_EXTRA = 3;\n\n    private static final Pattern PATH_PATTERN = Pattern.compile(\"^(/[-\\\\w:@&?=+,.!/~*'%$_;]*)?$\");\n\n    private static final Pattern QUERY_PATTERN = Pattern.compile(\"^(.*)$\");\n\n    private static final Pattern LEGAL_ASCII_PATTERN = Pattern.compile(\"^\\\\p{ASCII}+$\");\n\n    private static final Pattern DOMAIN_PATTERN =\n            Pattern.compile(\"^\" + ATOM + \"(\\\\.\" + ATOM + \")*$\");\n\n    private static final Pattern PORT_PATTERN = Pattern.compile(\"^:(\\\\d{1,5})$\");\n\n    private static final Pattern ATOM_PATTERN = Pattern.compile(\"^(\" + ATOM + \").*?$\");\n\n    private static final Pattern ALPHA_PATTERN = Pattern.compile(\"^[\" + ALPHA_CHARS + \"]\");\n\n    /**\n     * Holds the set of current validation options.\n     */\n    private final Flags options;\n\n    /**\n     * The set of schemes that are allowed to be in a URL.\n     */\n    private final Set<String> allowedSchemes = new HashSet<>();\n\n    /**\n     * If no schemes are provided, default to this set.\n     */\n    protected String[] defaultSchemes = {\"http\", \"https\", \"ftp\"};\n\n    /**\n     * Create a UrlValidator with default properties.\n     */\n    public UrlValidator() {\n        this(null);\n    }\n\n    /**\n     * Initialize a UrlValidator with the given validation options.\n     * @param options The options should be set using the public constants declared in\n     * this class.  To set multiple options you simply add them together.  For example,\n     * ALLOW_2_SLASHES + NO_FRAGMENTS enables both of those options.\n     */\n    public UrlValidator(final int options) {\n        this(null, options);\n    }\n\n    /**\n     * Behavior of validation is modified by passing in several strings options:\n     * @param schemes Pass in one or more URL schemes to consider valid, passing in\n     *        a null will default to \"http,https,ftp\" being valid.\n     *        If a non-null schemes is specified then all valid schemes must\n     *        be specified. Setting the ALLOW_ALL_SCHEMES option will\n     *        ignore the contents of schemes.\n     */\n    public UrlValidator(final String[] schemes) {\n        this(schemes, 0);\n    }\n\n    /**\n     * Behavour of validation is modified by passing in options:\n     * @param schemes The set of valid schemes.\n     * @param options The options should be set using the public constants declared in\n     * this class.  To set multiple options you simply add them together.  For example,\n     * ALLOW_2_SLASHES + NO_FRAGMENTS enables both of those options.\n     */\n    public UrlValidator(String[] schemes, final int options) {\n        this.options = new Flags(options);\n\n        if (this.options.isOn(ALLOW_ALL_SCHEMES)) {\n            return;\n        }\n\n        if (schemes == null) {\n            schemes = defaultSchemes;\n        }\n\n        allowedSchemes.addAll(Arrays.asList(schemes));\n    }\n\n    /**\n     * Returns the number of times the token appears in the target.\n     * @param token Token value to be counted.\n     * @param target Target value to count tokens in.\n     * @return the number of tokens.\n     */\n    protected int countToken(final String token, final String target) {\n        int tokenIndex = 0;\n        int count = 0;\n        while (tokenIndex != -1) {\n            tokenIndex = target.indexOf(token, tokenIndex);\n            if (tokenIndex > -1) {\n                tokenIndex++;\n                count++;\n            }\n        }\n        return count;\n    }\n\n    /**\n     * <p>Checks if a field has a valid URL address.</p>\n     *\n     * @param value The value validation is being performed on.  A {@code null}\n     * value is considered invalid.\n     * @return true if the URL is valid.\n     */\n    public boolean isValid(final String value) {\n        if (value == null) {\n            return false;\n        }\n        if (!LEGAL_ASCII_PATTERN.matcher(value).matches()) {\n           return false;\n        }\n\n        // Check the whole url address structure\n        final Matcher urlMatcher = URL_PATTERN.matcher(value);\n        if (!urlMatcher.matches()) {\n            return false;\n        }\n\n        if (!isValidScheme(urlMatcher.group(PARSE_URL_SCHEME))) {\n            return false;\n        }\n\n        if (!isValidAuthority(urlMatcher.group(PARSE_URL_AUTHORITY))) {\n            return false;\n        }\n\n        if (!isValidPath(urlMatcher.group(PARSE_URL_PATH))) {\n            return false;\n        }\n\n        if (!isValidQuery(urlMatcher.group(PARSE_URL_QUERY))) {\n            return false;\n        }\n\n        if (!isValidFragment(urlMatcher.group(PARSE_URL_FRAGMENT))) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Returns true if the authority is properly formatted.  An authority is the combination\n     * of hostname and port.  A {@code null} authority value is considered invalid.\n     * @param authority Authority value to validate.\n     * @return true if authority (hostname and port) is valid.\n     */\n    protected boolean isValidAuthority(final String authority) {\n        if (authority == null) {\n            return false;\n        }\n\n        final InetAddressValidator inetAddressValidator =\n                InetAddressValidator.getInstance();\n\n        final Matcher authorityMatcher = AUTHORITY_PATTERN.matcher(authority);\n        if (!authorityMatcher.matches()) {\n            return false;\n        }\n\n        boolean hostname = false;\n        // check if authority is IP address or hostname\n        String hostIP = authorityMatcher.group(PARSE_AUTHORITY_HOST_IP);\n        final boolean ipV4Address = inetAddressValidator.isValid(hostIP);\n\n        if (!ipV4Address) {\n            // Domain is hostname name\n            hostname = DOMAIN_PATTERN.matcher(hostIP).matches();\n        }\n\n        //rightmost hostname will never start with a digit.\n        if (hostname) {\n            // LOW-TECH FIX FOR VALIDATOR-202\n            // TODO: Rewrite to use ArrayList and .add semantics: see VALIDATOR-203\n            final char[] chars = hostIP.toCharArray();\n            int size = 1;\n            for (final char element : chars) {\n                if (element == '.') {\n                    size++;\n                }\n            }\n            final String[] domainSegment = new String[size];\n            boolean match = true;\n            int segmentCount = 0;\n            int segmentLength = 0;\n\n            while (match) {\n                final Matcher atomMatcher = ATOM_PATTERN.matcher(hostIP);\n                match = atomMatcher.matches();\n                if (match) {\n                    domainSegment[segmentCount] = atomMatcher.group(1);\n                    segmentLength = domainSegment[segmentCount].length() + 1;\n                    hostIP =\n                            segmentLength >= hostIP.length()\n                            ? \"\"\n                            : hostIP.substring(segmentLength);\n\n                    segmentCount++;\n                }\n            }\n            final String topLevel = domainSegment[segmentCount - 1];\n            if (topLevel.length() < 2 || topLevel.length() > 4) { // CHECKSTYLE IGNORE MagicNumber (deprecated code)\n                return false;\n            }\n\n            // First letter of top level must be a alpha\n            if (!ALPHA_PATTERN.matcher(topLevel.substring(0, 1)).matches()) {\n                return false;\n            }\n\n            // Make sure there's a host name preceding the authority.\n            if (segmentCount < 2) {\n                return false;\n            }\n        }\n\n        if (!hostname && !ipV4Address) {\n            return false;\n        }\n\n        final String port = authorityMatcher.group(PARSE_AUTHORITY_PORT);\n        if (port != null && !PORT_PATTERN.matcher(port).matches()) {\n            return false;\n        }\n\n        final String extra = authorityMatcher.group(PARSE_AUTHORITY_EXTRA);\n        if (!GenericValidator.isBlankOrNull(extra)) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Returns true if the given fragment is null or fragments are allowed.\n     * @param fragment Fragment value to validate.\n     * @return true if fragment is valid.\n     */\n    protected boolean isValidFragment(final String fragment) {\n        if (fragment == null) {\n            return true;\n        }\n\n        return options.isOff(NO_FRAGMENTS);\n    }\n\n    /**\n     * Returns true if the path is valid.  A {@code null} value is considered invalid.\n     * @param path Path value to validate.\n     * @return true if path is valid.\n     */\n    protected boolean isValidPath(final String path) {\n        if (path == null) {\n            return false;\n        }\n\n        if (!PATH_PATTERN.matcher(path).matches()) {\n            return false;\n        }\n\n        final int slash2Count = countToken(\"//\", path);\n        if (options.isOff(ALLOW_2_SLASHES) && slash2Count > 0) {\n            return false;\n        }\n\n        final int slashCount = countToken(\"/\", path);\n        final int dot2Count = countToken(\"..\", path);\n        if (dot2Count > 0 && slashCount - slash2Count - 1 <= dot2Count) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Returns true if the query is null or it's a properly formatted query string.\n     * @param query Query value to validate.\n     * @return true if query is valid.\n     */\n    protected boolean isValidQuery(final String query) {\n        if (query == null) {\n            return true;\n        }\n\n        return QUERY_PATTERN.matcher(query).matches();\n    }\n\n    /**\n     * Validate scheme. If schemes[] was initialized to a non null,\n     * then only those scheme's are allowed.  Note this is slightly different\n     * than for the constructor.\n     * @param scheme The scheme to validate.  A {@code null} value is considered\n     * invalid.\n     * @return true if valid.\n     */\n    protected boolean isValidScheme(final String scheme) {\n        if (scheme == null) {\n            return false;\n        }\n\n        if (!SCHEME_PATTERN.matcher(scheme).matches()) {\n            return false;\n        }\n\n        if (options.isOff(ALLOW_ALL_SCHEMES) && !allowedSchemes.contains(scheme)) {\n            return false;\n        }\n\n        return true;\n    }\n}", "super_interfaces": ["Serializable"], "fields": [{"attribute_expression": "private static final long serialVersionUID = 24137157400029593L;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "serialVersionUID = 24137157400029593L", "syntax_pass": true}, {"attribute_expression": "public static final int ALLOW_ALL_SCHEMES = 1 << 0;", "docstring": "\nAllows all validly formatted schemes to pass validation instead of\nsupplying a set of valid schemes.\n", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "int", "name": "ALLOW_ALL_SCHEMES = 1 << 0", "syntax_pass": true}, {"attribute_expression": "public static final int ALLOW_2_SLASHES = 1 << 1;", "docstring": "\nAllow two slashes in the path component of the URL.\n", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "int", "name": "ALLOW_2_SLASHES = 1 << 1", "syntax_pass": true}, {"attribute_expression": "public static final int NO_FRAGMENTS = 1 << 2;", "docstring": "\nEnabling this options disallows any URL fragments.\n", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "int", "name": "NO_FRAGMENTS = 1 << 2", "syntax_pass": true}, {"attribute_expression": "private static final String ALPHA_CHARS = \"a-zA-Z\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "ALPHA_CHARS = \"a-zA-Z\"", "syntax_pass": true}, {"attribute_expression": "private static final String SPECIAL_CHARS = \";/@&=,.?:+$\";", "docstring": " NOT USED   private static final String ALPHA_NUMERIC_CHARS = ALPHA_CHARS + \"\\\\d\";", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "SPECIAL_CHARS = \";/@&=,.?:+$\"", "syntax_pass": true}, {"attribute_expression": "private static final String VALID_CHARS = \"[^\\\\s\" + SPECIAL_CHARS + \"]\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "VALID_CHARS = \"[^\\\\s\" + SPECIAL_CHARS + \"]\"", "syntax_pass": true}, {"attribute_expression": "private static final String AUTHORITY_CHARS_REGEX = \"\\\\p{Alnum}\\\\-\\\\.\";", "docstring": " Drop numeric, and  \"+-.\" for now", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "AUTHORITY_CHARS_REGEX = \"\\\\p{Alnum}\\\\-\\\\.\"", "syntax_pass": true}, {"attribute_expression": "private static final String ATOM = VALID_CHARS + '+';", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "ATOM = VALID_CHARS + '+'", "syntax_pass": true}, {"attribute_expression": "private static final String URL_REGEX =\n            \"^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\\\?([^#]*))?(#(.*))?\";", "docstring": "\nThis expression derived/taken from the BNF for URI (RFC2396).\n", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "URL_REGEX =\n            \"^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\\\?([^#]*))?(#(.*))?\"", "syntax_pass": true}, {"attribute_expression": "private static final Pattern URL_PATTERN = Pattern.compile(URL_REGEX);", "docstring": "                                                                      12            3  4          5       6   7        8 9", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "Pattern", "name": "URL_PATTERN = Pattern.compile(URL_REGEX)", "syntax_pass": true}, {"attribute_expression": "private static final int PARSE_URL_SCHEME = 2;", "docstring": "\nSchema/Protocol (ie. http:, ftp:, file:, etc).\n", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "PARSE_URL_SCHEME = 2", "syntax_pass": true}, {"attribute_expression": "private static final int PARSE_URL_AUTHORITY = 4;", "docstring": "\nIncludes hostname/ip and port number.\n", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "PARSE_URL_AUTHORITY = 4", "syntax_pass": true}, {"attribute_expression": "private static final int PARSE_URL_PATH = 5;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "PARSE_URL_PATH = 5", "syntax_pass": true}, {"attribute_expression": "private static final int PARSE_URL_QUERY = 7;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "PARSE_URL_QUERY = 7", "syntax_pass": true}, {"attribute_expression": "private static final int PARSE_URL_FRAGMENT = 9;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "PARSE_URL_FRAGMENT = 9", "syntax_pass": true}, {"attribute_expression": "private static final Pattern SCHEME_PATTERN = Pattern.compile(\"^\\\\p{Alpha}[\\\\p{Alnum}\\\\+\\\\-\\\\.]*\");", "docstring": "\nProtocol (ie. http:, ftp:,https:).\n", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "Pattern", "name": "SCHEME_PATTERN = Pattern.compile(\"^\\\\p{Alpha}[\\\\p{Alnum}\\\\+\\\\-\\\\.]*\")", "syntax_pass": true}, {"attribute_expression": "private static final String AUTHORITY_REGEX =\n       \"^([\" + AUTHORITY_CHARS_REGEX + \"]*)(:\\\\d*)?(.*)?\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "AUTHORITY_REGEX =\n       \"^([\" + AUTHORITY_CHARS_REGEX + \"]*)(:\\\\d*)?(.*)?\"", "syntax_pass": true}, {"attribute_expression": "private static final Pattern AUTHORITY_PATTERN = Pattern.compile(AUTHORITY_REGEX);", "docstring": "                                                                            1                          2  3       4", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "Pattern", "name": "AUTHORITY_PATTERN = Pattern.compile(AUTHORITY_REGEX)", "syntax_pass": true}, {"attribute_expression": "private static final int PARSE_AUTHORITY_HOST_IP = 1;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "PARSE_AUTHORITY_HOST_IP = 1", "syntax_pass": true}, {"attribute_expression": "private static final int PARSE_AUTHORITY_PORT = 2;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "PARSE_AUTHORITY_PORT = 2", "syntax_pass": true}, {"attribute_expression": "private static final int PARSE_AUTHORITY_EXTRA = 3;", "docstring": "\nShould always be empty.\n", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "PARSE_AUTHORITY_EXTRA = 3", "syntax_pass": true}, {"attribute_expression": "private static final Pattern PATH_PATTERN = Pattern.compile(\"^(/[-\\\\w:@&?=+,.!/~*'%$_;]*)?$\");", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "Pattern", "name": "PATH_PATTERN = Pattern.compile(\"^(/[-\\\\w:@&?=+,.!/~*'%$_;]*)?$\")", "syntax_pass": true}, {"attribute_expression": "private static final Pattern QUERY_PATTERN = Pattern.compile(\"^(.*)$\");", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "Pattern", "name": "QUERY_PATTERN = Pattern.compile(\"^(.*)$\")", "syntax_pass": true}, {"attribute_expression": "private static final Pattern LEGAL_ASCII_PATTERN = Pattern.compile(\"^\\\\p{ASCII}+$\");", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "Pattern", "name": "LEGAL_ASCII_PATTERN = Pattern.compile(\"^\\\\p{ASCII}+$\")", "syntax_pass": true}, {"attribute_expression": "private static final Pattern DOMAIN_PATTERN =\n            Pattern.compile(\"^\" + ATOM + \"(\\\\.\" + ATOM + \")*$\");", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "Pattern", "name": "DOMAIN_PATTERN =\n            Pattern.compile(\"^\" + ATOM + \"(\\\\.\" + ATOM + \")*$\")", "syntax_pass": true}, {"attribute_expression": "private static final Pattern PORT_PATTERN = Pattern.compile(\"^:(\\\\d{1,5})$\");", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "Pattern", "name": "PORT_PATTERN = Pattern.compile(\"^:(\\\\d{1,5})$\")", "syntax_pass": true}, {"attribute_expression": "private static final Pattern ATOM_PATTERN = Pattern.compile(\"^(\" + ATOM + \").*?$\");", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "Pattern", "name": "ATOM_PATTERN = Pattern.compile(\"^(\" + ATOM + \").*?$\")", "syntax_pass": true}, {"attribute_expression": "private static final Pattern ALPHA_PATTERN = Pattern.compile(\"^[\" + ALPHA_CHARS + \"]\");", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "Pattern", "name": "ALPHA_PATTERN = Pattern.compile(\"^[\" + ALPHA_CHARS + \"]\")", "syntax_pass": true}, {"attribute_expression": "private final Flags options;", "docstring": "\nHolds the set of current validation options.\n", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Flags", "name": "options", "syntax_pass": true}, {"attribute_expression": "private final Set<String> allowedSchemes = new HashSet<>();", "docstring": "\nThe set of schemes that are allowed to be in a URL.\n", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Set<String>", "name": "allowedSchemes = new HashSet<>()", "syntax_pass": true}, {"attribute_expression": "protected String[] defaultSchemes = {\"http\", \"https\", \"ftp\"};", "docstring": "\nIf no schemes are provided, default to this set.\n", "modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "type": "String[]", "name": "defaultSchemes = {\"http\", \"https\", \"ftp\"}", "syntax_pass": true}]}, {"uris": "src/main/java/org/apache/commons/validator/EmailValidator.java.EmailValidator", "name": "EmailValidator", "file_path": "src/main/java/org/apache/commons/validator/EmailValidator.java", "superclasses": "", "methods": ["[EmailValidator]getInstance()", "[]EmailValidator()", "[boolean]isValid(String)", "[boolean]isValidDomain(String)", "[boolean]isValidIpAddress(String)", "[boolean]isValidSymbolicDomain(String)", "[boolean]isValidUser(String)", "[String]stripComments(String)"], "method_uris": ["src/main/java/org/apache/commons/validator/EmailValidator.java.EmailValidator.[EmailValidator]getInstance()", "src/main/java/org/apache/commons/validator/EmailValidator.java.EmailValidator.[]EmailValidator()", "src/main/java/org/apache/commons/validator/EmailValidator.java.EmailValidator.[boolean]isValid(String)", "src/main/java/org/apache/commons/validator/EmailValidator.java.EmailValidator.[boolean]isValidDomain(String)", "src/main/java/org/apache/commons/validator/EmailValidator.java.EmailValidator.[boolean]isValidIpAddress(String)", "src/main/java/org/apache/commons/validator/EmailValidator.java.EmailValidator.[boolean]isValidSymbolicDomain(String)", "src/main/java/org/apache/commons/validator/EmailValidator.java.EmailValidator.[boolean]isValidUser(String)", "src/main/java/org/apache/commons/validator/EmailValidator.java.EmailValidator.[String]stripComments(String)"], "overrides": null, "attributes": [], "class_docstring": "\n<p>Perform email validations.</p>\n<p>\nThis class is a Singleton; you can retrieve the instance via the getInstance() method.\n</p>\n<p>\nBased on a script by <a href=\"mailto:stamhankar@hotmail.com\">Sandeep V. Tamhankar</a>\nhttps://javascript.internet.com\n</p>\n<p>\nThis implementation is not guaranteed to catch all possible errors in an email address.\nFor example, an address like nobody@noplace.somedog will pass validator, even though there\nis no TLD \"somedog\"\n</p>.\n\n@since 1.1\n@deprecated Use the new EmailValidator in the routines package. This class\nwill be removed in a future release.\n", "original_string": "@Deprecated\npublic class EmailValidator {\n\n    private static final String SPECIAL_CHARS = \"\\\\p{Cntrl}\\\\(\\\\)<>@,;:'\\\\\\\\\\\\\\\"\\\\.\\\\[\\\\]\";\n    private static final String VALID_CHARS = \"[^\\\\s\" + SPECIAL_CHARS + \"]\";\n    private static final String QUOTED_USER = \"(\\\"[^\\\"]*\\\")\";\n    private static final String ATOM = VALID_CHARS + '+';\n    private static final String WORD = \"((\" + VALID_CHARS + \"|')+|\" + QUOTED_USER + \")\";\n\n// NOT USED   private static final Pattern LEGAL_ASCII_PATTERN = Pattern.compile(\"^\\\\p{ASCII}+$\");\n// NOT USED   private static final Pattern EMAIL_PATTERN = Pattern.compile(\"^(.+)@(.+)$\");\n    private static final Pattern IP_DOMAIN_PATTERN = Pattern.compile(\"^\\\\[(.*)\\\\]$\");\n    private static final Pattern TLD_PATTERN = Pattern.compile(\"^([a-zA-Z]+)$\");\n\n    private static final Pattern USER_PATTERN = Pattern.compile(\"^\\\\s*\" + WORD + \"(\\\\.\" + WORD + \")*$\");\n    private static final Pattern DOMAIN_PATTERN = Pattern.compile(\"^\" + ATOM + \"(\\\\.\" + ATOM + \")*\\\\s*$\");\n    private static final Pattern ATOM_PATTERN = Pattern.compile(\"(\" + ATOM + \")\");\n\n    /**\n     * Singleton instance of this class.\n     */\n    private static final EmailValidator EMAIL_VALIDATOR = new EmailValidator();\n\n    /**\n     * Returns the Singleton instance of this validator.\n     * @return singleton instance of this validator.\n     */\n    public static EmailValidator getInstance() {\n        return EMAIL_VALIDATOR;\n    }\n\n    /**\n     * Protected constructor for subclasses to use.\n     */\n    protected EmailValidator() {\n    }\n\n    /**\n     * <p>Checks if a field has a valid e-mail address.</p>\n     *\n     * @param email The value validation is being performed on.  A {@code null}\n     * value is considered invalid.\n     * @return true if the email address is valid.\n     */\n    public boolean isValid(final String email) {\n        return org.apache.commons.validator.routines.EmailValidator.getInstance().isValid(email);\n    }\n\n    /**\n     * Returns true if the domain component of an email address is valid.\n     * @param domain being validated.\n     * @return true if the email address's domain is valid.\n     */\n    protected boolean isValidDomain(final String domain) {\n        boolean symbolic = false;\n\n        // see if domain is an IP address in brackets\n        final Matcher ipDomainMatcher = IP_DOMAIN_PATTERN.matcher(domain);\n\n        if (ipDomainMatcher.matches()) {\n            final InetAddressValidator inetAddressValidator =\n                    InetAddressValidator.getInstance();\n            if (inetAddressValidator.isValid(ipDomainMatcher.group(1))) {\n                return true;\n            }\n        } else {\n            // Domain is symbolic name\n            symbolic = DOMAIN_PATTERN.matcher(domain).matches();\n        }\n\n        if (!symbolic) {\n            return false;\n        }\n        if (!isValidSymbolicDomain(domain)) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Validates an IP address. Returns true if valid.\n     * @param ipAddress IP address\n     * @return true if the ip address is valid.\n     */\n    protected boolean isValidIpAddress(final String ipAddress) {\n        final Matcher ipAddressMatcher = IP_DOMAIN_PATTERN.matcher(ipAddress);\n        for (int i = 1; i <= 4; i++) { // CHECKSTYLE IGNORE MagicNumber\n            final String ipSegment = ipAddressMatcher.group(i);\n            if (ipSegment == null || ipSegment.isEmpty()) {\n                return false;\n            }\n\n            int iIpSegment = 0;\n\n            try {\n                iIpSegment = Integer.parseInt(ipSegment);\n            } catch (final NumberFormatException e) {\n                return false;\n            }\n\n            if (iIpSegment > 255) { // CHECKSTYLE IGNORE MagicNumber\n                return false;\n            }\n\n        }\n        return true;\n    }\n\n    /**\n     * Validates a symbolic domain name.  Returns true if it's valid.\n     * @param domain symbolic domain name\n     * @return true if the symbolic domain name is valid.\n     */\n    protected boolean isValidSymbolicDomain(String domain) {\n        final String[] domainSegment = new String[10]; // CHECKSTYLE IGNORE MagicNumber\n        boolean match = true;\n        int i = 0;\n        final Matcher atomMatcher = ATOM_PATTERN.matcher(domain);\n        while (match) {\n            match = atomMatcher.matches();\n            if (match) {\n                domainSegment[i] = atomMatcher.group(1);\n                final int l = domainSegment[i].length() + 1;\n                domain =\n                        l >= domain.length()\n                        ? \"\"\n                        : domain.substring(l);\n\n                i++;\n            }\n        }\n\n        final int len = i;\n\n        // Make sure there's a host name preceding the domain.\n        if (len < 2) {\n            return false;\n        }\n\n        final String tld = domainSegment[len - 1];\n        if (tld.length() <= 1) {\n            return false;\n        }\n        if (! TLD_PATTERN.matcher(tld).matches()) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Returns true if the user component of an email address is valid.\n     * @param user being validated\n     * @return true if the user name is valid.\n     */\n    protected boolean isValidUser(final String user) {\n        return USER_PATTERN.matcher(user).matches();\n    }\n\n    /**\n     * Recursively remove comments, and replace with a single space. The simpler regexps in the Email Addressing FAQ are imperfect - they will miss escaped\n     * chars in atoms, for example. Derived From Mail::RFC822::Address\n     *\n     * @param emailStr The email address\n     * @return address with comments removed.\n     */\n    protected String stripComments(final String emailStr) {\n        String result = emailStr;\n        final String commentPat = \"^((?:[^\\\"\\\\\\\\]|\\\\\\\\.)*(?:\\\"(?:[^\\\"\\\\\\\\]|\\\\\\\\.)*\\\"(?:[^\\\"\\\\\\\\]|\\111111\\\\\\\\.)*)*)\\\\((?:[^()\\\\\\\\]|\\\\\\\\.)*\\\\)/\";\n        final Pattern commentMatcher = Pattern.compile(commentPat);\n\n        while (commentMatcher.matcher(result).matches()) {\n            result = result.replaceFirst(commentPat, \"\\1 \");\n        }\n        return result;\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final String SPECIAL_CHARS = \"\\\\p{Cntrl}\\\\(\\\\)<>@,;:'\\\\\\\\\\\\\\\"\\\\.\\\\[\\\\]\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "SPECIAL_CHARS = \"\\\\p{Cntrl}\\\\(\\\\)<>@,;:'\\\\\\\\\\\\\\\"\\\\.\\\\[\\\\]\"", "syntax_pass": true}, {"attribute_expression": "private static final String VALID_CHARS = \"[^\\\\s\" + SPECIAL_CHARS + \"]\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "VALID_CHARS = \"[^\\\\s\" + SPECIAL_CHARS + \"]\"", "syntax_pass": true}, {"attribute_expression": "private static final String QUOTED_USER = \"(\\\"[^\\\"]*\\\")\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "QUOTED_USER = \"(\\\"[^\\\"]*\\\")\"", "syntax_pass": true}, {"attribute_expression": "private static final String ATOM = VALID_CHARS + '+';", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "ATOM = VALID_CHARS + '+'", "syntax_pass": true}, {"attribute_expression": "private static final String WORD = \"((\" + VALID_CHARS + \"|')+|\" + QUOTED_USER + \")\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "WORD = \"((\" + VALID_CHARS + \"|')+|\" + QUOTED_USER + \")\"", "syntax_pass": true}, {"attribute_expression": "private static final Pattern IP_DOMAIN_PATTERN = Pattern.compile(\"^\\\\[(.*)\\\\]$\");", "docstring": " NOT USED   private static final Pattern EMAIL_PATTERN = Pattern.compile(\"^(.+)@(.+)$\");", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "Pattern", "name": "IP_DOMAIN_PATTERN = Pattern.compile(\"^\\\\[(.*)\\\\]$\")", "syntax_pass": true}, {"attribute_expression": "private static final Pattern TLD_PATTERN = Pattern.compile(\"^([a-zA-Z]+)$\");", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "Pattern", "name": "TLD_PATTERN = Pattern.compile(\"^([a-zA-Z]+)$\")", "syntax_pass": true}, {"attribute_expression": "private static final Pattern USER_PATTERN = Pattern.compile(\"^\\\\s*\" + WORD + \"(\\\\.\" + WORD + \")*$\");", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "Pattern", "name": "USER_PATTERN = Pattern.compile(\"^\\\\s*\" + WORD + \"(\\\\.\" + WORD + \")*$\")", "syntax_pass": true}, {"attribute_expression": "private static final Pattern DOMAIN_PATTERN = Pattern.compile(\"^\" + ATOM + \"(\\\\.\" + ATOM + \")*\\\\s*$\");", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "Pattern", "name": "DOMAIN_PATTERN = Pattern.compile(\"^\" + ATOM + \"(\\\\.\" + ATOM + \")*\\\\s*$\")", "syntax_pass": true}, {"attribute_expression": "private static final Pattern ATOM_PATTERN = Pattern.compile(\"(\" + ATOM + \")\");", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "Pattern", "name": "ATOM_PATTERN = Pattern.compile(\"(\" + ATOM + \")\")", "syntax_pass": true}, {"attribute_expression": "private static final EmailValidator EMAIL_VALIDATOR = new EmailValidator();", "docstring": "\nSingleton instance of this class.\n", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "EmailValidator", "name": "EMAIL_VALIDATOR = new EmailValidator()", "syntax_pass": true}]}, {"uris": "src/main/java/org/apache/commons/validator/Arg.java.Arg", "name": "Arg", "file_path": "src/main/java/org/apache/commons/validator/Arg.java", "superclasses": "", "methods": ["[Object]clone()", "[String]getBundle()", "[String]getKey()", "[String]getName()", "[int]getPosition()", "[boolean]isResource()", "[void]setBundle(String)", "[void]setKey(String)", "[void]setName(String)", "[void]setPosition(int)", "[void]setResource(boolean)", "[String]toString()"], "method_uris": ["src/main/java/org/apache/commons/validator/Arg.java.Arg.[Object]clone()", "src/main/java/org/apache/commons/validator/Arg.java.Arg.[String]getBundle()", "src/main/java/org/apache/commons/validator/Arg.java.Arg.[String]getKey()", "src/main/java/org/apache/commons/validator/Arg.java.Arg.[String]getName()", "src/main/java/org/apache/commons/validator/Arg.java.Arg.[int]getPosition()", "src/main/java/org/apache/commons/validator/Arg.java.Arg.[boolean]isResource()", "src/main/java/org/apache/commons/validator/Arg.java.Arg.[void]setBundle(String)", "src/main/java/org/apache/commons/validator/Arg.java.Arg.[void]setKey(String)", "src/main/java/org/apache/commons/validator/Arg.java.Arg.[void]setName(String)", "src/main/java/org/apache/commons/validator/Arg.java.Arg.[void]setPosition(int)", "src/main/java/org/apache/commons/validator/Arg.java.Arg.[void]setResource(boolean)", "src/main/java/org/apache/commons/validator/Arg.java.Arg.[String]toString()"], "overrides": null, "attributes": [], "class_docstring": "TODO mutable non-private fields", "original_string": "public class Arg implements Cloneable, Serializable {\n\n    private static final long serialVersionUID = -8922606779669839294L;\n\n    /**\n     * The resource bundle name that this Arg's {@code key} should be\n     * resolved in (optional).\n     * @since 1.1\n     */\n    protected String bundle;\n\n    /**\n     * The key or value of the argument.\n     */\n    protected String key;\n\n    /**\n     * The name dependency that this argument goes with (optional).\n     */\n    protected String name;\n\n    /**\n     * This argument's position in the message. Set postion=0 to\n     * make a replacement in this string: \"some msg {0}\".\n     * @since 1.1\n     */\n    protected int position = -1;\n\n    /**\n     * Whether or not the key is a message resource (optional).  Defaults to\n     * true.  If it is 'true', the value will try to be resolved as a message\n     * resource.\n     */\n    protected boolean resource = true;\n\n    /**\n     * Creates and returns a copy of this object.\n     * @return A copy of this object.\n     */\n    @Override\n    public Object clone() {\n        try {\n            return super.clone();\n        } catch (final CloneNotSupportedException e) {\n            throw new UnsupportedOperationException(e.toString(), e);\n        }\n    }\n\n    /**\n     * Returns the resource bundle name.\n     * @return the bundle name.\n     * @since 1.1\n     */\n    public String getBundle() {\n        return bundle;\n    }\n\n    /**\n     * Gets the key/value.\n     * @return the key value.\n     */\n    public String getKey() {\n        return key;\n    }\n\n    /**\n     * Gets the name of the dependency.\n     * @return the name of the dependency.\n     */\n    public String getName() {\n        return name;\n    }\n\n    /**\n     * Argument's replacement position.\n     * @return This argument's replacement position.\n     */\n    public int getPosition() {\n        return position;\n    }\n\n    /**\n     * Tests whether or not the key is a resource key or literal value.\n     * @return {@code true} if key is a resource key.\n     */\n    public boolean isResource() {\n        return resource;\n    }\n\n    /**\n     * Sets the resource bundle name.\n     * @param bundle The new bundle name.\n     * @since 1.1\n     */\n    public void setBundle(final String bundle) {\n        this.bundle = bundle;\n    }\n\n    /**\n     * Sets the key/value.\n     * @param key They to access the argument.\n     */\n    public void setKey(final String key) {\n        this.key = key;\n    }\n\n    /**\n     * Sets the name of the dependency.\n     * @param name the name of the dependency.\n     */\n    public void setName(final String name) {\n        this.name = name;\n    }\n\n    /**\n     * Sets this argument's replacement position.\n     * @param position set this argument's replacement position.\n     */\n    public void setPosition(final int position) {\n        this.position = position;\n    }\n\n    /**\n     * Sets whether or not the key is a resource.\n     * @param resource If true indicates the key is a resource.\n     */\n    public void setResource(final boolean resource) {\n        this.resource = resource;\n    }\n\n    /**\n     * Returns a string representation of the object.\n     * @return a string representation of the object.\n     */\n    @Override\n    public String toString() {\n        // @formatter:off\n        return new StringBuilder()\n            .append(\"Arg: name=\")\n            .append(name)\n            .append(\"  key=\")\n            .append(key)\n            .append(\"  position=\")\n            .append(position)\n            .append(\"  bundle=\")\n            .append(bundle)\n            .append(\"  resource=\")\n            .append(resource)\n            .append(\"\\n\")\n            .toString();\n        // @formatter:on\n    }\n\n}", "super_interfaces": ["Cloneable", "Serializable"], "fields": [{"attribute_expression": "private static final long serialVersionUID = -8922606779669839294L;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "serialVersionUID = -8922606779669839294L", "syntax_pass": true}, {"attribute_expression": "protected String bundle;", "docstring": "\nThe resource bundle name that this Arg's {@code key} should be\nresolved in (optional).\n@since 1.1\n", "modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "type": "String", "name": "bundle", "syntax_pass": true}, {"attribute_expression": "protected String key;", "docstring": "\nThe key or value of the argument.\n", "modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "type": "String", "name": "key", "syntax_pass": true}, {"attribute_expression": "protected String name;", "docstring": "\nThe name dependency that this argument goes with (optional).\n", "modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "type": "String", "name": "name", "syntax_pass": true}, {"attribute_expression": "protected int position = -1;", "docstring": "\nThis argument's position in the message. Set postion=0 to\nmake a replacement in this string: \"some msg {0}\".\n@since 1.1\n", "modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "type": "int", "name": "position = -1", "syntax_pass": true}, {"attribute_expression": "protected boolean resource = true;", "docstring": "\nWhether or not the key is a message resource (optional).  Defaults to\ntrue.  If it is 'true', the value will try to be resolved as a message\nresource.\n", "modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "type": "boolean", "name": "resource = true", "syntax_pass": true}]}, {"uris": "src/main/java/org/apache/commons/validator/Var.java.Var", "name": "Var", "file_path": "src/main/java/org/apache/commons/validator/Var.java", "superclasses": "", "methods": ["[]Var()", "[]Var(String,String,String)", "[Object]clone()", "[String]getBundle()", "[String]getJsType()", "[String]getName()", "[String]getValue()", "[boolean]isResource()", "[void]setBundle(String)", "[void]setJsType(String)", "[void]setName(String)", "[void]setResource(boolean)", "[void]setValue(String)", "[String]toString()"], "method_uris": ["src/main/java/org/apache/commons/validator/Var.java.Var.[]Var()", "src/main/java/org/apache/commons/validator/Var.java.Var.[]Var(String,String,String)", "src/main/java/org/apache/commons/validator/Var.java.Var.[Object]clone()", "src/main/java/org/apache/commons/validator/Var.java.Var.[String]getBundle()", "src/main/java/org/apache/commons/validator/Var.java.Var.[String]getJsType()", "src/main/java/org/apache/commons/validator/Var.java.Var.[String]getName()", "src/main/java/org/apache/commons/validator/Var.java.Var.[String]getValue()", "src/main/java/org/apache/commons/validator/Var.java.Var.[boolean]isResource()", "src/main/java/org/apache/commons/validator/Var.java.Var.[void]setBundle(String)", "src/main/java/org/apache/commons/validator/Var.java.Var.[void]setJsType(String)", "src/main/java/org/apache/commons/validator/Var.java.Var.[void]setName(String)", "src/main/java/org/apache/commons/validator/Var.java.Var.[void]setResource(boolean)", "src/main/java/org/apache/commons/validator/Var.java.Var.[void]setValue(String)", "src/main/java/org/apache/commons/validator/Var.java.Var.[String]toString()"], "overrides": null, "attributes": [], "class_docstring": "\nA variable that can be associated with a {@code Field} for\npassing in information to a pluggable validator.  Instances of this class are\nconfigured with a &lt;var&gt; xml element.\n", "original_string": "public class Var implements Cloneable, Serializable {\n\n    private static final long serialVersionUID = -684185211548420224L;\n\n    /**\n     * Int Constant for JavaScript type.  This can be used\n     * when auto-generating JavaScript.\n     */\n    public static final String JSTYPE_INT = \"int\";\n\n    /**\n     * String Constant for JavaScript type.  This can be used\n     * when auto-generating JavaScript.\n     */\n    public static final String JSTYPE_STRING = \"string\";\n\n    /**\n     * Regular Expression Constant for JavaScript type.  This can be used\n     * when auto-generating JavaScript.\n     */\n    public static final String JSTYPE_REGEXP = \"regexp\";\n\n    /**\n     * The name of the variable.\n     */\n    private String name;\n\n    /**\n     * The key or value the variable.\n     */\n    private String value;\n\n    /**\n     * The optional JavaScript type of the variable.\n     */\n    private String jsType;\n\n    /**\n     * Whether the variable is a resource [false]\n     */\n    private boolean resource;\n\n    /**\n     * The bundle for a variable (when resource = 'true').\n     */\n    private String bundle;\n\n    /**\n     * Default Constructor.\n     */\n    public Var() {\n    }\n\n    /**\n     * Constructs a variable with a specified name, value\n     * and JavaScript type.\n     * @param name Variable name.\n     * @param value Variable value.\n     * @param jsType Variable JavaScript type.\n     */\n    public Var(final String name, final String value, final String jsType) {\n        this.name = name;\n        this.value = value;\n        this.jsType = jsType;\n    }\n\n    /**\n     * Creates and returns a copy of this object.\n     * @return A copy of the variable.\n     */\n    @Override\n    public Object clone() {\n        try {\n            return super.clone();\n\n        } catch (final CloneNotSupportedException e) {\n            throw new UnsupportedOperationException(e.toString(), e);\n        }\n    }\n\n    /**\n     * Returns the resource bundle name.\n     * @return The bundle name.\n     * @since 1.2.0\n     */\n    public String getBundle() {\n        return bundle;\n    }\n\n    /**\n     * Gets the JavaScript type of the variable.\n     * @return The JavaScript type of the variable.\n     */\n    public String getJsType() {\n        return jsType;\n    }\n\n    /**\n     * Gets the name of the variable.\n     * @return The name of the variable.\n     */\n    public String getName() {\n        return name;\n    }\n\n    /**\n     * Gets the value of the variable.\n     * @return The value of the variable.\n     */\n    public String getValue() {\n        return value;\n    }\n\n    /**\n     * Tests whether or not the value is a resource key or literal value.\n     * @return {@code true} if value is a resource key.\n     * @since 1.2.0\n     */\n    public boolean isResource() {\n        return resource;\n    }\n\n    /**\n     * Sets the resource bundle name.\n     * @param bundle The new bundle name.\n     * @since 1.2.0\n     */\n    public void setBundle(final String bundle) {\n        this.bundle = bundle;\n    }\n\n    /**\n     * Sets the JavaScript type of the variable.\n     * @param jsType The JavaScript type of the variable.\n     */\n    public void setJsType(final String jsType) {\n        this.jsType = jsType;\n    }\n\n    /**\n     * Sets the name of the variable.\n     * @param name The name of the variable.\n     */\n    public void setName(final String name) {\n        this.name = name;\n    }\n\n    /**\n     * Sets whether or not the value is a resource.\n     * @param resource If true indicates the value is a resource.\n     * @since 1.2.0\n     */\n    public void setResource(final boolean resource) {\n        this.resource = resource;\n    }\n\n    /**\n     * Sets the value of the variable.\n     * @param value The value of the variable.\n     */\n    public void setValue(final String value) {\n        this.value = value;\n    }\n\n    /**\n     * Returns a string representation of the object.\n     * @return A string representation of the variable.\n     */\n    @Override\n    public String toString() {\n        final StringBuilder results = new StringBuilder();\n\n        results.append(\"Var: name=\");\n        results.append(name);\n        results.append(\"  value=\");\n        results.append(value);\n        results.append(\"  resource=\");\n        results.append(resource);\n        if (resource) {\n            results.append(\"  bundle=\");\n            results.append(bundle);\n        }\n        results.append(\"  jsType=\");\n        results.append(jsType);\n        results.append(\"\\n\");\n\n        return results.toString();\n    }\n\n}", "super_interfaces": ["Cloneable", "Serializable"], "fields": [{"attribute_expression": "private static final long serialVersionUID = -684185211548420224L;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "serialVersionUID = -684185211548420224L", "syntax_pass": true}, {"attribute_expression": "public static final String JSTYPE_INT = \"int\";", "docstring": "\nInt Constant for JavaScript type.  This can be used\nwhen auto-generating JavaScript.\n", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "String", "name": "JSTYPE_INT = \"int\"", "syntax_pass": true}, {"attribute_expression": "public static final String JSTYPE_STRING = \"string\";", "docstring": "\nString Constant for JavaScript type.  This can be used\nwhen auto-generating JavaScript.\n", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "String", "name": "JSTYPE_STRING = \"string\"", "syntax_pass": true}, {"attribute_expression": "public static final String JSTYPE_REGEXP = \"regexp\";", "docstring": "\nRegular Expression Constant for JavaScript type.  This can be used\nwhen auto-generating JavaScript.\n", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "String", "name": "JSTYPE_REGEXP = \"regexp\"", "syntax_pass": true}, {"attribute_expression": "private String name;", "docstring": "\nThe name of the variable.\n", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "name", "syntax_pass": true}, {"attribute_expression": "private String value;", "docstring": "\nThe key or value the variable.\n", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "value", "syntax_pass": true}, {"attribute_expression": "private String jsType;", "docstring": "\nThe optional JavaScript type of the variable.\n", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "jsType", "syntax_pass": true}, {"attribute_expression": "private boolean resource;", "docstring": "\nWhether the variable is a resource [false]\n", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "boolean", "name": "resource", "syntax_pass": true}, {"attribute_expression": "private String bundle;", "docstring": "\nThe bundle for a variable (when resource = 'true').\n", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "bundle", "syntax_pass": true}]}, {"uris": "src/main/java/org/apache/commons/validator/Validator.java.Validator", "name": "Validator", "file_path": "src/main/java/org/apache/commons/validator/Validator.java", "superclasses": "", "methods": ["[]Validator(ValidatorResources)", "[]Validator(ValidatorResources,String)", "[]Validator(ValidatorResources,String,String)", "[void]clear()", "[ClassLoader]getClassLoader()", "[String]getFormName()", "[boolean]getOnlyReturnErrors()", "[int]getPage()", "[Object]getParameterValue(String)", "[boolean]getUseContextClassLoader()", "[void]setClassLoader(ClassLoader)", "[void]setFieldName(String)", "[void]setFormName(String)", "[void]setOnlyReturnErrors(boolean)", "[void]setPage(int)", "[void]setParameter(String,Object)", "[void]setUseContextClassLoader(boolean)", "[ValidatorResults]validate()"], "method_uris": ["src/main/java/org/apache/commons/validator/Validator.java.Validator.[]Validator(ValidatorResources)", "src/main/java/org/apache/commons/validator/Validator.java.Validator.[]Validator(ValidatorResources,String)", "src/main/java/org/apache/commons/validator/Validator.java.Validator.[]Validator(ValidatorResources,String,String)", "src/main/java/org/apache/commons/validator/Validator.java.Validator.[void]clear()", "src/main/java/org/apache/commons/validator/Validator.java.Validator.[ClassLoader]getClassLoader()", "src/main/java/org/apache/commons/validator/Validator.java.Validator.[String]getFormName()", "src/main/java/org/apache/commons/validator/Validator.java.Validator.[boolean]getOnlyReturnErrors()", "src/main/java/org/apache/commons/validator/Validator.java.Validator.[int]getPage()", "src/main/java/org/apache/commons/validator/Validator.java.Validator.[Object]getParameterValue(String)", "src/main/java/org/apache/commons/validator/Validator.java.Validator.[boolean]getUseContextClassLoader()", "src/main/java/org/apache/commons/validator/Validator.java.Validator.[void]setClassLoader(ClassLoader)", "src/main/java/org/apache/commons/validator/Validator.java.Validator.[void]setFieldName(String)", "src/main/java/org/apache/commons/validator/Validator.java.Validator.[void]setFormName(String)", "src/main/java/org/apache/commons/validator/Validator.java.Validator.[void]setOnlyReturnErrors(boolean)", "src/main/java/org/apache/commons/validator/Validator.java.Validator.[void]setPage(int)", "src/main/java/org/apache/commons/validator/Validator.java.Validator.[void]setParameter(String,Object)", "src/main/java/org/apache/commons/validator/Validator.java.Validator.[void]setUseContextClassLoader(boolean)", "src/main/java/org/apache/commons/validator/Validator.java.Validator.[ValidatorResults]validate()"], "overrides": null, "attributes": [], "class_docstring": " TODO mutable fields should be made private and accessed via suitable methods only", "original_string": "public class Validator implements Serializable {\n\n    private static final long serialVersionUID = -7119418755208731611L;\n\n    /**\n     * Resources key the JavaBean is stored to perform validation on.\n     */\n    public static final String BEAN_PARAM = \"java.lang.Object\";\n\n    /**\n     * Resources key the {@code ValidatorAction} is stored under.\n     * This will be automatically passed into a validation method\n     * with the current {@code ValidatorAction} if it is\n     * specified in the method signature.\n     */\n    public static final String VALIDATOR_ACTION_PARAM =\n            \"org.apache.commons.validator.ValidatorAction\";\n\n    /**\n     * Resources key the {@code ValidatorResults} is stored under.\n     * This will be automatically passed into a validation method\n     * with the current {@code ValidatorResults} if it is\n     * specified in the method signature.\n     */\n    public static final String VALIDATOR_RESULTS_PARAM =\n            \"org.apache.commons.validator.ValidatorResults\";\n\n    /**\n     * Resources key the {@code Form} is stored under.\n     * This will be automatically passed into a validation method\n     * with the current {@code Form} if it is\n     * specified in the method signature.\n     */\n    public static final String FORM_PARAM = \"org.apache.commons.validator.Form\";\n\n    /**\n     * Resources key the {@code Field} is stored under.\n     * This will be automatically passed into a validation method\n     * with the current {@code Field} if it is\n     * specified in the method signature.\n     */\n    public static final String FIELD_PARAM = \"org.apache.commons.validator.Field\";\n\n    /**\n     * Resources key the {@code Validator} is stored under.\n     * This will be automatically passed into a validation method\n     * with the current {@code Validator} if it is\n     * specified in the method signature.\n     */\n    public static final String VALIDATOR_PARAM =\n            \"org.apache.commons.validator.Validator\";\n\n    /**\n     * Resources key the {@link Locale} is stored.\n     * This will be used to retrieve the appropriate\n     * {@code FormSet} and {@code Form} to be\n     * processed.\n     */\n    public static final String LOCALE_PARAM = \"java.util.Locale\";\n\n    /**\n     * The Validator Resources.\n     */\n    protected ValidatorResources resources;\n\n    /**\n     * The name of the form to validate\n     */\n    protected String formName;\n\n    /**\n     * The name of the field on the form to validate\n     * @since 1.2.0\n     */\n    protected String fieldName;\n\n    /**\n     * Maps validation method parameter class names to the objects to be passed\n     * into the method.\n     */\n    protected Map<String, Object> parameters = new HashMap<>(); // <String, Object>\n\n    /**\n     * The current page number to validate.\n     */\n    protected int page;\n\n    /**\n     * The class loader to use for instantiating application objects.\n     * If not specified, the context class loader, or the class loader\n     * used to load Digester itself, is used, based on the value of the\n     * {@code useContextClassLoader} variable.\n     */\n    protected transient ClassLoader classLoader;\n\n    /**\n     * Whether or not to use the Context ClassLoader when loading classes\n     * for instantiating new objects.  Default is {@code false}.\n     */\n    protected boolean useContextClassLoader;\n\n    /**\n     * Sets this to true to not return Fields that pass validation.  Only return failures.\n     */\n    protected boolean onlyReturnErrors;\n\n    /**\n     * Constructs a {@code Validator} that will\n     * use the {@code ValidatorResources}\n     * passed in to retrieve pluggable validators\n     * the different sets of validation rules.\n     *\n     * @param resources {@code ValidatorResources} to use during validation.\n     */\n    public Validator(final ValidatorResources resources) {\n        this(resources, null);\n    }\n\n    /**\n     * Constructs a {@code Validator} that will\n     * use the {@code ValidatorResources}\n     * passed in to retrieve pluggable validators\n     * the different sets of validation rules.\n     *\n     * @param resources {@code ValidatorResources} to use during validation.\n     * @param formName Key used for retrieving the set of validation rules.\n     */\n    public Validator(final ValidatorResources resources, final String formName) {\n        if (resources == null) {\n            throw new IllegalArgumentException(\"Resources cannot be null.\");\n        }\n\n        this.resources = resources;\n        this.formName = formName;\n    }\n\n    /**\n     * Constructs a {@code Validator} that will\n     * use the {@code ValidatorResources}\n     * passed in to retrieve pluggable validators\n     * the different sets of validation rules.\n     *\n     * @param resources {@code ValidatorResources} to use during validation.\n     * @param formName Key used for retrieving the set of validation rules.\n     * @param fieldName Key used for retrieving the set of validation rules for a field\n     * @since 1.2.0\n     */\n    public Validator(final ValidatorResources resources, final String formName, final String fieldName) {\n        if (resources == null) {\n            throw new IllegalArgumentException(\"Resources cannot be null.\");\n        }\n\n        this.resources = resources;\n        this.formName = formName;\n        this.fieldName = fieldName;\n    }\n\n    /**\n     * Clears the form name, resources that were added, and the page that was\n     * set (if any).  This can be called to reinitialize the Validator instance\n     * so it can be reused.  The form name (key to set of validation rules) and any\n     * resources needed, like the JavaBean being validated, will need to\n     * set and/or added to this instance again.  The\n     * {@code ValidatorResources} will not be removed since it can be used\n     * again and is thread safe.\n     */\n    public void clear() {\n        formName = null;\n        fieldName = null;\n        parameters = new HashMap<>();\n        page = 0;\n    }\n\n    /**\n     * Gets the class loader to be used for instantiating application objects\n     * when required.  This is determined based upon the following rules:\n     * <ul>\n     * <li>The class loader set by {@code setClassLoader()}, if any</li>\n     * <li>The thread context class loader, if it exists and the\n     *     {@code useContextClassLoader} property is set to true</li>\n     * <li>The class loader used to load the Digester class itself.\n     * </ul>\n     * @return the class loader.\n     */\n    public ClassLoader getClassLoader() {\n        if (classLoader != null) {\n            return classLoader;\n        }\n\n        if (useContextClassLoader) {\n            final ClassLoader contextLoader = Thread.currentThread().getContextClassLoader();\n            if (contextLoader != null) {\n                return contextLoader;\n            }\n        }\n\n        return this.getClass().getClassLoader();\n    }\n\n    /**\n     * Gets the form name which is the key to a set of validation rules.\n     * @return the name of the form.\n     */\n    public String getFormName() {\n        return formName;\n    }\n\n    /**\n     * Returns true if the Validator is only returning Fields that fail validation.\n     * @return whether only failed fields are returned.\n     */\n    public boolean getOnlyReturnErrors() {\n        return onlyReturnErrors;\n    }\n\n    /**\n     * Gets the page.\n     *\n     * <p>\n     * This in conjunction with the page property of\n     * a {@code Field} can control the processing of fields. If the field's\n     * page is less than or equal to this page value, it will be processed.\n     * </p>\n     *\n     * @return the page number.\n     */\n    public int getPage() {\n        return page;\n    }\n\n    /**\n     * Returns the value of the specified parameter that will be used during the\n     * processing of validations.\n     *\n     * @param parameterClassName The full class name of the parameter of the\n     * validation method that corresponds to the value/instance passed in with it.\n     * @return value of the specified parameter.\n     */\n    public Object getParameterValue(final String parameterClassName) {\n        return parameters.get(parameterClassName);\n    }\n\n    /**\n     * Gets the boolean as to whether the context classloader should be used.\n     * @return whether the context classloader should be used.\n     */\n    public boolean getUseContextClassLoader() {\n        return useContextClassLoader;\n    }\n\n    /**\n     * Sets the class loader to be used for instantiating application objects\n     * when required.\n     *\n     * @param classLoader The new class loader to use, or {@code null}\n     *  to revert to the standard rules\n     */\n    public void setClassLoader(final ClassLoader classLoader) {\n        this.classLoader = classLoader;\n    }\n\n    /**\n     * Sets the name of the field to validate in a form (optional)\n     *\n     * @param fieldName The name of the field in a form set\n     * @since 1.2.0\n     */\n    public void setFieldName(final String fieldName) {\n        this.fieldName = fieldName;\n    }\n\n    /**\n     * Sets the form name which is the key to a set of validation rules.\n     * @param formName the name of the form.\n     */\n    public void setFormName(final String formName) {\n        this.formName = formName;\n    }\n\n    /**\n     * Configures which Fields the Validator returns from the validate() method.  Set this\n     * to true to only return Fields that failed validation.  By default, validate() returns\n     * all fields.\n     * @param onlyReturnErrors whether only failed fields are returned.\n     */\n    public void setOnlyReturnErrors(final boolean onlyReturnErrors) {\n        this.onlyReturnErrors = onlyReturnErrors;\n    }\n\n    /**\n     * Sets the page.\n     * <p>\n     * This in conjunction with the page property of\n     * a {@code Field} can control the processing of fields. If the field's page\n     * is less than or equal to this page value, it will be processed.\n     * </p>\n     *\n     * @param page the page number.\n     */\n    public void setPage(final int page) {\n        this.page = page;\n    }\n\n    /**\n     * Sets a parameter of a pluggable validation method.\n     *\n     * @param parameterClassName The full class name of the parameter of the\n     * validation method that corresponds to the value/instance passed in with it.\n     *\n     * @param parameterValue The instance that will be passed into the\n     * validation method.\n     */\n    public void setParameter(final String parameterClassName, final Object parameterValue) {\n        parameters.put(parameterClassName, parameterValue);\n    }\n\n    /**\n     * Sets whether to use the Context ClassLoader (the one found by\n     * calling {@code Thread.currentThread().getContextClassLoader()})\n     * to resolve/load classes that are defined in various rules.  If not\n     * using Context ClassLoader, then the class-loading defaults to\n     * using the calling-class' ClassLoader.\n     *\n     * @param useContextClassLoader determines whether to use Context ClassLoader.\n     */\n    public void setUseContextClassLoader(final boolean useContextClassLoader) {\n        this.useContextClassLoader = useContextClassLoader;\n    }\n\n    /**\n     * Performs validations based on the configured resources.\n     *\n     * @return The {@link Map} returned uses the property of the\n     * {@code Field} for the key and the value is the number of error the\n     * field had.\n     * @throws ValidatorException If an error occurs during validation\n     */\n    public ValidatorResults validate() throws ValidatorException {\n        Locale locale = (Locale) getParameterValue(LOCALE_PARAM);\n\n        if (locale == null) {\n            locale = Locale.getDefault();\n        }\n\n        setParameter(VALIDATOR_PARAM, this);\n\n        final Form form = resources.getForm(locale, formName);\n        if (form != null) {\n            setParameter(FORM_PARAM, form);\n            return form.validate(\n                parameters,\n                resources.getValidatorActions(),\n                page,\n                fieldName);\n        }\n\n        return new ValidatorResults();\n    }\n\n}", "super_interfaces": ["Serializable"], "fields": [{"attribute_expression": "private static final long serialVersionUID = -7119418755208731611L;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "serialVersionUID = -7119418755208731611L", "syntax_pass": true}, {"attribute_expression": "public static final String BEAN_PARAM = \"java.lang.Object\";", "docstring": "\nResources key the JavaBean is stored to perform validation on.\n", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "String", "name": "BEAN_PARAM = \"java.lang.Object\"", "syntax_pass": true}, {"attribute_expression": "public static final String VALIDATOR_ACTION_PARAM =\n            \"org.apache.commons.validator.ValidatorAction\";", "docstring": "\nResources key the {@code ValidatorAction} is stored under.\nThis will be automatically passed into a validation method\nwith the current {@code ValidatorAction} if it is\nspecified in the method signature.\n", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "String", "name": "VALIDATOR_ACTION_PARAM =\n            \"org.apache.commons.validator.ValidatorAction\"", "syntax_pass": true}, {"attribute_expression": "public static final String VALIDATOR_RESULTS_PARAM =\n            \"org.apache.commons.validator.ValidatorResults\";", "docstring": "\nResources key the {@code ValidatorResults} is stored under.\nThis will be automatically passed into a validation method\nwith the current {@code ValidatorResults} if it is\nspecified in the method signature.\n", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "String", "name": "VALIDATOR_RESULTS_PARAM =\n            \"org.apache.commons.validator.ValidatorResults\"", "syntax_pass": true}, {"attribute_expression": "public static final String FORM_PARAM = \"org.apache.commons.validator.Form\";", "docstring": "\nResources key the {@code Form} is stored under.\nThis will be automatically passed into a validation method\nwith the current {@code Form} if it is\nspecified in the method signature.\n", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "String", "name": "FORM_PARAM = \"org.apache.commons.validator.Form\"", "syntax_pass": true}, {"attribute_expression": "public static final String FIELD_PARAM = \"org.apache.commons.validator.Field\";", "docstring": "\nResources key the {@code Field} is stored under.\nThis will be automatically passed into a validation method\nwith the current {@code Field} if it is\nspecified in the method signature.\n", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "String", "name": "FIELD_PARAM = \"org.apache.commons.validator.Field\"", "syntax_pass": true}, {"attribute_expression": "public static final String VALIDATOR_PARAM =\n            \"org.apache.commons.validator.Validator\";", "docstring": "\nResources key the {@code Validator} is stored under.\nThis will be automatically passed into a validation method\nwith the current {@code Validator} if it is\nspecified in the method signature.\n", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "String", "name": "VALIDATOR_PARAM =\n            \"org.apache.commons.validator.Validator\"", "syntax_pass": true}, {"attribute_expression": "public static final String LOCALE_PARAM = \"java.util.Locale\";", "docstring": "\nResources key the {@link Locale} is stored.\nThis will be used to retrieve the appropriate\n{@code FormSet} and {@code Form} to be\nprocessed.\n", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "String", "name": "LOCALE_PARAM = \"java.util.Locale\"", "syntax_pass": true}, {"attribute_expression": "protected ValidatorResources resources;", "docstring": "\nThe Validator Resources.\n", "modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "type": "ValidatorResources", "name": "resources", "syntax_pass": true}, {"attribute_expression": "protected String formName;", "docstring": "\nThe name of the form to validate\n", "modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "type": "String", "name": "formName", "syntax_pass": true}, {"attribute_expression": "protected String fieldName;", "docstring": "\nThe name of the field on the form to validate\n@since 1.2.0\n", "modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "type": "String", "name": "fieldName", "syntax_pass": true}, {"attribute_expression": "protected Map<String, Object> parameters = new HashMap<>();", "docstring": "\nMaps validation method parameter class names to the objects to be passed\ninto the method.\n", "modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "type": "Map<String, Object>", "name": "parameters = new HashMap<>()", "syntax_pass": true}, {"attribute_expression": "protected int page;", "docstring": "\nThe current page number to validate.\n", "modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "type": "int", "name": "page", "syntax_pass": true}, {"attribute_expression": "protected transient ClassLoader classLoader;", "docstring": "\nThe class loader to use for instantiating application objects.\nIf not specified, the context class loader, or the class loader\nused to load Digester itself, is used, based on the value of the\n{@code useContextClassLoader} variable.\n", "modifiers": "protected transient", "marker_annotations": [], "non_marker_annotations": ["protected", "transient"], "comments": [], "type": "ClassLoader", "name": "classLoader", "syntax_pass": true}, {"attribute_expression": "protected boolean useContextClassLoader;", "docstring": "\nWhether or not to use the Context ClassLoader when loading classes\nfor instantiating new objects.  Default is {@code false}.\n", "modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "type": "boolean", "name": "useContextClassLoader", "syntax_pass": true}, {"attribute_expression": "protected boolean onlyReturnErrors;", "docstring": "\nSets this to true to not return Fields that pass validation.  Only return failures.\n", "modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "type": "boolean", "name": "onlyReturnErrors", "syntax_pass": true}]}, {"uris": "src/main/java/org/apache/commons/validator/routines/CalendarValidator.java.CalendarValidator", "name": "CalendarValidator", "file_path": "src/main/java/org/apache/commons/validator/routines/CalendarValidator.java", "superclasses": "AbstractCalendarValidator", "methods": ["[void]adjustToTimeZone(Calendar,TimeZone)", "[CalendarValidator]getInstance()", "[]CalendarValidator()", "[]CalendarValidator(boolean,int)", "[int]compareDates(Calendar,Calendar)", "[int]compareMonths(Calendar,Calendar)", "[int]compareQuarters(Calendar,Calendar)", "[int]compareQuarters(Calendar,Calendar,int)", "[int]compareWeeks(Calendar,Calendar)", "[int]compareYears(Calendar,Calendar)", "[Object]processParsedValue(Object,Format)", "[Calendar]validate(String)", "[Calendar]validate(String,Locale)", "[Calendar]validate(String,Locale,TimeZone)", "[Calendar]validate(String,String)", "[Calendar]validate(String,String,Locale)", "[Calendar]validate(String,String,Locale,TimeZone)", "[Calendar]validate(String,String,TimeZone)", "[Calendar]validate(String,TimeZone)"], "method_uris": ["src/main/java/org/apache/commons/validator/routines/CalendarValidator.java.CalendarValidator.[void]adjustToTimeZone(Calendar,TimeZone)", "src/main/java/org/apache/commons/validator/routines/CalendarValidator.java.CalendarValidator.[CalendarValidator]getInstance()", "src/main/java/org/apache/commons/validator/routines/CalendarValidator.java.CalendarValidator.[]CalendarValidator()", "src/main/java/org/apache/commons/validator/routines/CalendarValidator.java.CalendarValidator.[]CalendarValidator(boolean,int)", "src/main/java/org/apache/commons/validator/routines/CalendarValidator.java.CalendarValidator.[int]compareDates(Calendar,Calendar)", "src/main/java/org/apache/commons/validator/routines/CalendarValidator.java.CalendarValidator.[int]compareMonths(Calendar,Calendar)", "src/main/java/org/apache/commons/validator/routines/CalendarValidator.java.CalendarValidator.[int]compareQuarters(Calendar,Calendar)", "src/main/java/org/apache/commons/validator/routines/CalendarValidator.java.CalendarValidator.[int]compareQuarters(Calendar,Calendar,int)", "src/main/java/org/apache/commons/validator/routines/CalendarValidator.java.CalendarValidator.[int]compareWeeks(Calendar,Calendar)", "src/main/java/org/apache/commons/validator/routines/CalendarValidator.java.CalendarValidator.[int]compareYears(Calendar,Calendar)", "src/main/java/org/apache/commons/validator/routines/CalendarValidator.java.CalendarValidator.[Object]processParsedValue(Object,Format)", "src/main/java/org/apache/commons/validator/routines/CalendarValidator.java.CalendarValidator.[Calendar]validate(String)", "src/main/java/org/apache/commons/validator/routines/CalendarValidator.java.CalendarValidator.[Calendar]validate(String,Locale)", "src/main/java/org/apache/commons/validator/routines/CalendarValidator.java.CalendarValidator.[Calendar]validate(String,Locale,TimeZone)", "src/main/java/org/apache/commons/validator/routines/CalendarValidator.java.CalendarValidator.[Calendar]validate(String,String)", "src/main/java/org/apache/commons/validator/routines/CalendarValidator.java.CalendarValidator.[Calendar]validate(String,String,Locale)", "src/main/java/org/apache/commons/validator/routines/CalendarValidator.java.CalendarValidator.[Calendar]validate(String,String,Locale,TimeZone)", "src/main/java/org/apache/commons/validator/routines/CalendarValidator.java.CalendarValidator.[Calendar]validate(String,String,TimeZone)", "src/main/java/org/apache/commons/validator/routines/CalendarValidator.java.CalendarValidator.[Calendar]validate(String,TimeZone)"], "overrides": null, "attributes": [], "class_docstring": "\n<p><b>Calendar Validation</b> and Conversion routines ({@code java.util.Calendar}).</p>\n\n<p>This validator provides a number of methods for validating/converting\n   a {@link String} date value to a {@code java.util.Calendar} using\n   {@link DateFormat} to parse either:</p>\n   <ul>\n      <li>using the default format for the default {@link Locale}</li>\n      <li>using a specified pattern with the default {@link Locale}</li>\n      <li>using the default format for a specified {@link Locale}</li>\n      <li>using a specified pattern with a specified {@link Locale}</li>\n   </ul>\n\n<p>For each of the above mechanisms, conversion method (i.e the\n   {@code validate} methods) implementations are provided which\n   either use the default {@code TimeZone} or allow the\n   {@code TimeZone} to be specified.</p>\n\n<p>Use one of the {@code isValid()} methods to just validate or\n   one of the {@code validate()} methods to validate and receive a\n   <em>converted</em> {@link Calendar} value.</p>\n\n<p>Implementations of the {@code validate()} method are provided\n   to create {@link Calendar} objects for different <em>time zones</em>\n   if the system default is not appropriate.</p>\n\n<p>Alternatively the CalendarValidator's {@code adjustToTimeZone()} method\n   can be used to adjust the {@code TimeZone} of the {@link Calendar}\n   object afterwards.</p>\n\n<p>Once a value has been successfully converted the following\n   methods can be used to perform various date comparison checks:</p>\n   <ul>\n      <li>{@code compareDates()} compares the day, month and\n          year of two calendars, returning 0, -1 or +1 indicating\n          whether the first date is equal, before or after the second.</li>\n      <li>{@code compareWeeks()} compares the week and\n          year of two calendars, returning 0, -1 or +1 indicating\n          whether the first week is equal, before or after the second.</li>\n      <li>{@code compareMonths()} compares the month and\n          year of two calendars, returning 0, -1 or +1 indicating\n          whether the first month is equal, before or after the second.</li>\n      <li>{@code compareQuarters()} compares the quarter and\n          year of two calendars, returning 0, -1 or +1 indicating\n          whether the first quarter is equal, before or after the second.</li>\n      <li>{@code compareYears()} compares the\n          year of two calendars, returning 0, -1 or +1 indicating\n          whether the first year is equal, before or after the second.</li>\n   </ul>\n\n<p>So that the same mechanism used for parsing an <em>input</em> value\n   for validation can be used to format <em>output</em>, corresponding\n   {@code format()} methods are also provided. That is you can\n   format either:</p>\n   <ul>\n      <li>using a specified pattern</li>\n      <li>using the format for a specified {@link Locale}</li>\n      <li>using the format for the <em>default</em> {@link Locale}</li>\n   </ul>\n\n@since 1.3.0\n", "original_string": "public class CalendarValidator extends AbstractCalendarValidator {\n\n    private static final long serialVersionUID = 9109652318762134167L;\n\n    private static final CalendarValidator VALIDATOR = new CalendarValidator();\n\n    /**\n     * <p>Adjusts a Calendar's value to a different TimeZone.</p>\n     *\n     * @param value The value to adjust.\n     * @param timeZone The new time zone to use to adjust the Calendar to.\n     */\n    public static void adjustToTimeZone(final Calendar value, final TimeZone timeZone) {\n        if (value.getTimeZone().hasSameRules(timeZone)) {\n            value.setTimeZone(timeZone);\n        } else {\n            final int year = value.get(Calendar.YEAR);\n            final int month = value.get(Calendar.MONTH);\n            final int date = value.get(Calendar.DATE);\n            final int hour = value.get(Calendar.HOUR_OF_DAY);\n            final int minute = value.get(Calendar.MINUTE);\n            value.setTimeZone(timeZone);\n            value.set(year, month, date, hour, minute);\n        }\n    }\n\n    /**\n     * Gets the singleton instance of this validator.\n     * @return A singleton instance of the CalendarValidator.\n     */\n    public static CalendarValidator getInstance() {\n        return VALIDATOR;\n    }\n\n    /**\n     * Constructs a <em>strict</em> instance with <em>short</em>\n     * date style.\n     */\n    public CalendarValidator() {\n        this(true, DateFormat.SHORT);\n    }\n\n    /**\n     * Constructs an instance with the specified <em>strict</em>\n     * and <em>date style</em> parameters.\n     *\n     * @param strict {@code true} if strict\n     *        {@code Format} parsing should be used.\n     * @param dateStyle the date style to use for Locale validation.\n     */\n    public CalendarValidator(final boolean strict, final int dateStyle) {\n        super(strict, dateStyle, -1);\n    }\n\n    /**\n     * <p>Compare Dates (day, month and year - not time).</p>\n     *\n     * @param value The {@link Calendar} value to check.\n     * @param compare The {@link Calendar} to compare the value to.\n     * @return Zero if the dates are equal, -1 if first\n     * date is less than the seconds and +1 if the first\n     * date is greater than.\n     */\n    public int compareDates(final Calendar value, final Calendar compare) {\n        return compare(value, compare, Calendar.DATE);\n    }\n\n    /**\n     * <p>Compare Months (month and year).</p>\n     *\n     * @param value The {@link Calendar} value to check.\n     * @param compare The {@link Calendar} to compare the value to.\n     * @return Zero if the months are equal, -1 if first\n     * parameter's month is less than the seconds and +1 if the first\n     * parameter's month is greater than.\n     */\n    public int compareMonths(final Calendar value, final Calendar compare) {\n        return compare(value, compare, Calendar.MONTH);\n    }\n\n    /**\n     * <p>Compare Quarters (quarter and year).</p>\n     *\n     * @param value The {@link Calendar} value to check.\n     * @param compare The {@link Calendar} to check the value against.\n     * @return Zero if the quarters are equal, -1 if first\n     * parameter's quarter is less than the seconds and +1 if the first\n     * parameter's quarter is greater than.\n     */\n    public int compareQuarters(final Calendar value, final Calendar compare) {\n        return compareQuarters(value, compare, 1);\n    }\n\n    /**\n     * <p>Compare Quarters (quarter and year).</p>\n     *\n     * @param value The {@link Calendar} value to check.\n     * @param compare The {@link Calendar} to compare the value to.\n     * @param monthOfFirstQuarter The  month that the first quarter starts.\n     * @return Zero if the quarters are equal, -1 if first\n     * parameter's quarter is less than the seconds and +1 if the first\n     * parameter's quarter is greater than.\n     */\n    @Override\n    public int compareQuarters(final Calendar value, final Calendar compare, final int monthOfFirstQuarter) {\n        return super.compareQuarters(value, compare, monthOfFirstQuarter);\n    }\n\n    /**\n     * <p>Compare Weeks (week and year).</p>\n     *\n     * @param value The {@link Calendar} value to check.\n     * @param compare The {@link Calendar} to compare the value to.\n     * @return Zero if the weeks are equal, -1 if first\n     * parameter's week is less than the seconds and +1 if the first\n     * parameter's week is greater than.\n     */\n    public int compareWeeks(final Calendar value, final Calendar compare) {\n        return compare(value, compare, Calendar.WEEK_OF_YEAR);\n    }\n\n    /**\n     * <p>Compare Years.</p>\n     *\n     * @param value The {@link Calendar} value to check.\n     * @param compare The {@link Calendar} to compare the value to.\n     * @return Zero if the years are equal, -1 if first\n     * parameter's year is less than the seconds and +1 if the first\n     * parameter's year is greater than.\n     */\n    public int compareYears(final Calendar value, final Calendar compare) {\n        return compare(value, compare, Calendar.YEAR);\n    }\n\n    /**\n     * <p>Convert the parsed {@code Date} to a {@link Calendar}.</p>\n     *\n     * @param value The parsed {@code Date} object created.\n     * @param formatter The Format used to parse the value with.\n     * @return The parsed value converted to a {@link Calendar}.\n     */\n    @Override\n    protected Object processParsedValue(final Object value, final Format formatter) {\n        return ((DateFormat) formatter).getCalendar();\n    }\n\n    /**\n     * <p>Validate/convert a {@link Calendar} using the default\n     *    {@link Locale} and {@code TimeZone}.\n     *\n     * @param value The value validation is being performed on.\n     * @return The parsed {@link Calendar} if valid or {@code null}\n     *  if invalid.\n     */\n    public Calendar validate(final String value) {\n        return (Calendar) parse(value, (String) null, (Locale) null, (TimeZone) null);\n    }\n\n    /**\n     * <p>Validate/convert a {@link Calendar} using the specified\n     *    {@link Locale} and default {@code TimeZone}.\n     *\n     * @param value The value validation is being performed on.\n     * @param locale The locale to use for the date format, system default if null.\n     * @return The parsed {@link Calendar} if valid or {@code null} if invalid.\n     */\n    public Calendar validate(final String value, final Locale locale) {\n        return (Calendar) parse(value, (String) null, locale, (TimeZone) null);\n    }\n\n    /**\n     * <p>Validate/convert a {@link Calendar} using the specified\n     *    {@link Locale} and {@code TimeZone}.\n     *\n     * @param value The value validation is being performed on.\n     * @param locale The locale to use for the date format, system default if null.\n     * @param timeZone The Time Zone used to parse the date, system default if null.\n     * @return The parsed {@link Calendar} if valid or {@code null} if invalid.\n     */\n    public Calendar validate(final String value, final Locale locale, final TimeZone timeZone) {\n        return (Calendar) parse(value, (String) null, locale, timeZone);\n    }\n\n    /**\n     * <p>Validate/convert a {@link Calendar} using the specified\n     *    <em>pattern</em> and default {@code TimeZone}.\n     *\n     * @param value The value validation is being performed on.\n     * @param pattern The pattern used to validate the value against.\n     * @return The parsed {@link Calendar} if valid or {@code null} if invalid.\n     */\n    public Calendar validate(final String value, final String pattern) {\n        return (Calendar) parse(value, pattern, (Locale) null, (TimeZone) null);\n    }\n\n    /**\n     * <p>Validate/convert a {@link Calendar} using the specified pattern\n     *    and {@link Locale} and the default {@code TimeZone}.\n     *\n     * @param value The value validation is being performed on.\n     * @param pattern The pattern used to validate the value against, or the\n     *        default for the {@link Locale} if {@code null}.\n     * @param locale The locale to use for the date format, system default if null.\n     * @return The parsed {@link Calendar} if valid or {@code null} if invalid.\n     */\n    public Calendar validate(final String value, final String pattern, final Locale locale) {\n        return (Calendar) parse(value, pattern, locale, (TimeZone) null);\n    }\n\n    /**\n     * <p>Validate/convert a {@link Calendar} using the specified\n     *    pattern, and {@link Locale} and {@code TimeZone}.\n     *\n     * @param value The value validation is being performed on.\n     * @param pattern The pattern used to validate the value against, or the\n     *        default for the {@link Locale} if {@code null}.\n     * @param locale The locale to use for the date format, system default if null.\n     * @param timeZone The Time Zone used to parse the date, system default if null.\n     * @return The parsed {@link Calendar} if valid or {@code null} if invalid.\n     */\n    public Calendar validate(final String value, final String pattern, final Locale locale, final TimeZone timeZone) {\n        return (Calendar) parse(value, pattern, locale, timeZone);\n    }\n\n    /**\n     * <p>Validate/convert a {@link Calendar} using the specified\n     *    <em>pattern</em> and {@code TimeZone}.\n     *\n     * @param value The value validation is being performed on.\n     * @param pattern The pattern used to validate the value against.\n     * @param timeZone The Time Zone used to parse the date, system default if null.\n     * @return The parsed {@link Calendar} if valid or {@code null} if invalid.\n     */\n    public Calendar validate(final String value, final String pattern, final TimeZone timeZone) {\n        return (Calendar) parse(value, pattern, (Locale) null, timeZone);\n    }\n\n    /**\n     * <p>Validate/convert a {@link Calendar} using the specified\n     *    {@code TimeZone} and default {@link Locale}.\n     *\n     * @param value The value validation is being performed on.\n     * @param timeZone The Time Zone used to parse the date, system default if null.\n     * @return The parsed {@link Calendar} if valid or {@code null}\n     *  if invalid.\n     */\n    public Calendar validate(final String value, final TimeZone timeZone) {\n        return (Calendar) parse(value, (String) null, (Locale) null, timeZone);\n    }\n\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final long serialVersionUID = 9109652318762134167L;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "serialVersionUID = 9109652318762134167L", "syntax_pass": true}, {"attribute_expression": "private static final CalendarValidator VALIDATOR = new CalendarValidator();", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "CalendarValidator", "name": "VALIDATOR = new CalendarValidator()", "syntax_pass": true}]}, {"uris": "src/main/java/org/apache/commons/validator/routines/TimeValidator.java.TimeValidator", "name": "TimeValidator", "file_path": "src/main/java/org/apache/commons/validator/routines/TimeValidator.java", "superclasses": "AbstractCalendarValidator", "methods": ["[TimeValidator]getInstance()", "[]TimeValidator()", "[]TimeValidator(boolean,int)", "[int]compareHours(Calendar,Calendar)", "[int]compareMinutes(Calendar,Calendar)", "[int]compareSeconds(Calendar,Calendar)", "[int]compareTime(Calendar,Calendar)", "[Object]processParsedValue(Object,Format)", "[Calendar]validate(String)", "[Calendar]validate(String,Locale)", "[Calendar]validate(String,Locale,TimeZone)", "[Calendar]validate(String,String)", "[Calendar]validate(String,String,Locale)", "[Calendar]validate(String,String,Locale,TimeZone)", "[Calendar]validate(String,String,TimeZone)", "[Calendar]validate(String,TimeZone)"], "method_uris": ["src/main/java/org/apache/commons/validator/routines/TimeValidator.java.TimeValidator.[TimeValidator]getInstance()", "src/main/java/org/apache/commons/validator/routines/TimeValidator.java.TimeValidator.[]TimeValidator()", "src/main/java/org/apache/commons/validator/routines/TimeValidator.java.TimeValidator.[]TimeValidator(boolean,int)", "src/main/java/org/apache/commons/validator/routines/TimeValidator.java.TimeValidator.[int]compareHours(Calendar,Calendar)", "src/main/java/org/apache/commons/validator/routines/TimeValidator.java.TimeValidator.[int]compareMinutes(Calendar,Calendar)", "src/main/java/org/apache/commons/validator/routines/TimeValidator.java.TimeValidator.[int]compareSeconds(Calendar,Calendar)", "src/main/java/org/apache/commons/validator/routines/TimeValidator.java.TimeValidator.[int]compareTime(Calendar,Calendar)", "src/main/java/org/apache/commons/validator/routines/TimeValidator.java.TimeValidator.[Object]processParsedValue(Object,Format)", "src/main/java/org/apache/commons/validator/routines/TimeValidator.java.TimeValidator.[Calendar]validate(String)", "src/main/java/org/apache/commons/validator/routines/TimeValidator.java.TimeValidator.[Calendar]validate(String,Locale)", "src/main/java/org/apache/commons/validator/routines/TimeValidator.java.TimeValidator.[Calendar]validate(String,Locale,TimeZone)", "src/main/java/org/apache/commons/validator/routines/TimeValidator.java.TimeValidator.[Calendar]validate(String,String)", "src/main/java/org/apache/commons/validator/routines/TimeValidator.java.TimeValidator.[Calendar]validate(String,String,Locale)", "src/main/java/org/apache/commons/validator/routines/TimeValidator.java.TimeValidator.[Calendar]validate(String,String,Locale,TimeZone)", "src/main/java/org/apache/commons/validator/routines/TimeValidator.java.TimeValidator.[Calendar]validate(String,String,TimeZone)", "src/main/java/org/apache/commons/validator/routines/TimeValidator.java.TimeValidator.[Calendar]validate(String,TimeZone)"], "overrides": null, "attributes": [], "class_docstring": "\n<p><b>Time Validation</b> and Conversion routines ({@code java.util.Calendar}).</p>\n\n<p>This validator provides a number of methods for validating/converting\n   a {@link String} time value to a {@code java.util.Calendar} using\n   {@link DateFormat} to parse either:</p>\n   <ul>\n      <li>using the default format for the default {@link Locale}</li>\n      <li>using a specified pattern with the default {@link Locale}</li>\n      <li>using the default format for a specified {@link Locale}</li>\n      <li>using a specified pattern with a specified {@link Locale}</li>\n   </ul>\n\n<p>For each of the above mechanisms, conversion method (i.e the\n   {@code validate} methods) implementations are provided which\n   either use the default {@code TimeZone} or allow the\n   {@code TimeZone} to be specified.</p>\n\n<p>Use one of the {@code isValid()} methods to just validate or\n   one of the {@code validate()} methods to validate and receive a\n   <em>converted</em> {@link Calendar} value for the time.</p>\n\n<p>Implementations of the {@code validate()} method are provided\n   to create {@link Calendar} objects for different <em>time zones</em>\n   if the system default is not appropriate.</p>\n\n<p>Alternatively the CalendarValidator's {@code adjustToTimeZone()} method\n   can be used to adjust the {@code TimeZone} of the {@link Calendar}\n   object afterwards.</p>\n\n<p>Once a value has been successfully converted the following\n   methods can be used to perform various time comparison checks:</p>\n   <ul>\n      <li>{@code compareTime()} compares the hours, minutes, seconds\n          and milliseconds of two calendars, returning 0, -1 or +1 indicating\n          whether the first time is equal, before or after the second.</li>\n      <li>{@code compareSeconds()} compares the hours, minutes and\n          seconds of two times, returning 0, -1 or +1 indicating\n          whether the first is equal to, before or after the second.</li>\n      <li>{@code compareMinutes()} compares the hours and minutes\n          two times, returning 0, -1 or +1 indicating\n          whether the first is equal to, before or after the second.</li>\n      <li>{@code compareHours()} compares the hours\n          of two times, returning 0, -1 or +1 indicating\n          whether the first is equal to, before or after the second.</li>\n   </ul>\n\n<p>So that the same mechanism used for parsing an <em>input</em> value\n   for validation can be used to format <em>output</em>, corresponding\n   {@code format()} methods are also provided. That is you can\n   format either:</p>\n   <ul>\n      <li>using a specified pattern</li>\n      <li>using the format for a specified {@link Locale}</li>\n      <li>using the format for the <em>default</em> {@link Locale}</li>\n   </ul>\n\n@since 1.3.0\n", "original_string": "public class TimeValidator extends AbstractCalendarValidator {\n\n    private static final long serialVersionUID = 3494007492269691581L;\n\n    private static final TimeValidator VALIDATOR = new TimeValidator();\n\n    /**\n     * Gets the singleton instance of this validator.\n     * @return A singleton instance of the TimeValidator.\n     */\n    public static TimeValidator getInstance() {\n        return VALIDATOR;\n    }\n\n    /**\n     * Constructs a <em>strict</em> instance with <em>short</em>\n     * time style.\n     */\n    public TimeValidator() {\n        this(true, DateFormat.SHORT);\n    }\n\n    /**\n     * Constructs an instance with the specified <em>strict</em>\n     * and <em>time style</em> parameters.\n     *\n     * @param strict {@code true} if strict\n     *        {@code Format} parsing should be used.\n     * @param timeStyle the time style to use for Locale validation.\n     */\n    public TimeValidator(final boolean strict, final int timeStyle) {\n        super(strict, -1, timeStyle);\n    }\n\n    /**\n     * <p>Compare Hours.</p>\n     *\n     * @param value The {@link Calendar} value to check.\n     * @param compare The {@link Calendar} to compare the value to.\n     * @return Zero if the hours are equal, -1 if first\n     * parameter's hour is less than the seconds and +1 if the first\n     * parameter's hour is greater than.\n     */\n    public int compareHours(final Calendar value, final Calendar compare) {\n        return compareTime(value, compare, Calendar.HOUR_OF_DAY);\n    }\n\n    /**\n     * <p>Compare Minutes (hours and minutes).</p>\n     *\n     * @param value The {@link Calendar} value to check.\n     * @param compare The {@link Calendar} to compare the value to.\n     * @return Zero if the hours are equal, -1 if first\n     * parameter's minutes are less than the seconds and +1 if the first\n     * parameter's minutes are greater than.\n     */\n    public int compareMinutes(final Calendar value, final Calendar compare) {\n        return compareTime(value, compare, Calendar.MINUTE);\n    }\n\n    /**\n     * <p>Compare Seconds (hours, minutes and seconds).</p>\n     *\n     * @param value The {@link Calendar} value to check.\n     * @param compare The {@link Calendar} to compare the value to.\n     * @return Zero if the hours are equal, -1 if first\n     * parameter's seconds are less than the seconds and +1 if the first\n     * parameter's seconds are greater than.\n     */\n    public int compareSeconds(final Calendar value, final Calendar compare) {\n        return compareTime(value, compare, Calendar.SECOND);\n    }\n\n    /**\n     * <p>Compare Times (hour, minute, second and millisecond - not date).</p>\n     *\n     * @param value The {@link Calendar} value to check.\n     * @param compare The {@link Calendar} to compare the value to.\n     * @return Zero if the hours are equal, -1 if first\n     * time is less than the seconds and +1 if the first\n     * time is greater than.\n     */\n    public int compareTime(final Calendar value, final Calendar compare) {\n        return compareTime(value, compare, Calendar.MILLISECOND);\n    }\n\n    /**\n     * <p>Convert the parsed {@code Date} to a {@link Calendar}.</p>\n     *\n     * @param value The parsed {@code Date} object created.\n     * @param formatter The Format used to parse the value with.\n     * @return The parsed value converted to a {@link Calendar}.\n     */\n    @Override\n    protected Object processParsedValue(final Object value, final Format formatter) {\n        return ((DateFormat) formatter).getCalendar();\n    }\n\n    /**\n     * <p>Validate/convert a time using the default {@link Locale}\n     *    and {@code TimeZone}.\n     *\n     * @param value The value validation is being performed on.\n     * @return The parsed {@link Calendar} if valid or {@code null}\n     *  if invalid.\n     */\n    public Calendar validate(final String value) {\n        return (Calendar) parse(value, (String) null, (Locale) null, (TimeZone) null);\n    }\n\n    /**\n     * <p>Validate/convert a time using the specified {@link Locale}\n     *    default {@code TimeZone}.\n     *\n     * @param value The value validation is being performed on.\n     * @param locale The locale to use for the time format, system default if null.\n     * @return The parsed {@link Calendar} if valid or {@code null} if invalid.\n     */\n    public Calendar validate(final String value, final Locale locale) {\n        return (Calendar) parse(value, (String) null, locale, (TimeZone) null);\n    }\n\n    /**\n     * <p>Validate/convert a time using the specified {@link Locale}\n     *    and {@code TimeZone}.\n     *\n     * @param value The value validation is being performed on.\n     * @param locale The locale to use for the time format, system default if null.\n     * @param timeZone The Time Zone used to parse the time, system default if null.\n     * @return The parsed {@link Calendar} if valid or {@code null} if invalid.\n     */\n    public Calendar validate(final String value, final Locale locale, final TimeZone timeZone) {\n        return (Calendar) parse(value, (String) null, locale, timeZone);\n    }\n\n    /**\n     * <p>Validate/convert a time using the specified <em>pattern</em> and\n     *    default {@code TimeZone}.\n     *\n     * @param value The value validation is being performed on.\n     * @param pattern The pattern used to validate the value against.\n     * @return The parsed {@link Calendar} if valid or {@code null} if invalid.\n     */\n    public Calendar validate(final String value, final String pattern) {\n        return (Calendar) parse(value, pattern, (Locale) null, (TimeZone) null);\n    }\n\n    /**\n     * <p>Validate/convert a time using the specified pattern and {@link Locale}\n     *    and the default {@code TimeZone}.\n     *\n     * @param value The value validation is being performed on.\n     * @param pattern The pattern used to validate the value against, or the\n     *        default for the {@link Locale} if {@code null}.\n     * @param locale The locale to use for the date format, system default if null.\n     * @return The parsed {@link Calendar} if valid or {@code null} if invalid.\n     */\n    public Calendar validate(final String value, final String pattern, final Locale locale) {\n        return (Calendar) parse(value, pattern, locale, (TimeZone) null);\n    }\n\n    /**\n     * <p>Validate/convert a time using the specified pattern, {@link Locale}\n     *    and {@code TimeZone}.\n     *\n     * @param value The value validation is being performed on.\n     * @param pattern The pattern used to validate the value against, or the\n     *        default for the {@link Locale} if {@code null}.\n     * @param locale The locale to use for the date format, system default if null.\n     * @param timeZone The Time Zone used to parse the date, system default if null.\n     * @return The parsed {@link Calendar} if valid or {@code null} if invalid.\n     */\n    public Calendar validate(final String value, final String pattern, final Locale locale, final TimeZone timeZone) {\n        return (Calendar) parse(value, pattern, locale, timeZone);\n    }\n\n    /**\n     * <p>Validate/convert a time using the specified <em>pattern</em>\n     *    and {@code TimeZone}.\n     *\n     * @param value The value validation is being performed on.\n     * @param pattern The pattern used to validate the value against.\n     * @param timeZone The Time Zone used to parse the time, system default if null.\n     * @return The parsed {@link Calendar} if valid or {@code null} if invalid.\n     */\n    public Calendar validate(final String value, final String pattern, final TimeZone timeZone) {\n        return (Calendar) parse(value, pattern, (Locale) null, timeZone);\n    }\n\n    /**\n     * <p>Validate/convert a time using the specified {@code TimeZone}\n     *    and default {@link Locale}.\n     *\n     * @param value The value validation is being performed on.\n     * @param timeZone The Time Zone used to parse the time, system default if null.\n     * @return The parsed {@link Calendar} if valid or {@code null} if invalid.\n     */\n    public Calendar validate(final String value, final TimeZone timeZone) {\n        return (Calendar) parse(value, (String) null, (Locale) null, timeZone);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final long serialVersionUID = 3494007492269691581L;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "serialVersionUID = 3494007492269691581L", "syntax_pass": true}, {"attribute_expression": "private static final TimeValidator VALIDATOR = new TimeValidator();", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "TimeValidator", "name": "VALIDATOR = new TimeValidator()", "syntax_pass": true}]}, {"uris": "src/main/java/org/apache/commons/validator/routines/ISINValidator.java.ISINValidator", "name": "ISINValidator", "file_path": "src/main/java/org/apache/commons/validator/routines/ISINValidator.java", "superclasses": "", "methods": ["[ISINValidator]getInstance(boolean)", "[]ISINValidator(boolean)", "[boolean]checkCode(String)", "[boolean]isValid(String)", "[Object]validate(String)"], "method_uris": ["src/main/java/org/apache/commons/validator/routines/ISINValidator.java.ISINValidator.[ISINValidator]getInstance(boolean)", "src/main/java/org/apache/commons/validator/routines/ISINValidator.java.ISINValidator.[]ISINValidator(boolean)", "src/main/java/org/apache/commons/validator/routines/ISINValidator.java.ISINValidator.[boolean]checkCode(String)", "src/main/java/org/apache/commons/validator/routines/ISINValidator.java.ISINValidator.[boolean]isValid(String)", "src/main/java/org/apache/commons/validator/routines/ISINValidator.java.ISINValidator.[Object]validate(String)"], "overrides": null, "attributes": [], "class_docstring": "\n<b>ISIN</b> (International Securities Identifying Number) validation.\n\n<p>\nISIN Numbers are 12 character alphanumeric codes used to identify Securities.\n</p>\n\n<p>\nISINs consist of two alphabetic characters,\nwhich are the ISO 3166-1 alpha-2 code for the issuing country,\nnine alpha-numeric characters (the National Securities Identifying Number, or NSIN, which identifies the security),\nand one numerical check digit.\nThey are 12 characters in length.\n</p>\n\n<p>\nSee <a href=\"https://en.wikipedia.org/wiki/ISIN\">Wikipedia - ISIN</a>\nfor more details.\n</p>\n\n@since 1.7\n", "original_string": "public class ISINValidator implements Serializable {\n\n    private static final long serialVersionUID = -5964391439144260936L;\n\n    private static final String ISIN_REGEX = \"([A-Z]{2}[A-Z0-9]{9}[0-9])\";\n\n    private static final CodeValidator VALIDATOR = new CodeValidator(ISIN_REGEX, 12, ISINCheckDigit.ISIN_CHECK_DIGIT);\n\n    /** ISIN Code Validator (no countryCode check) */\n    private static final ISINValidator ISIN_VALIDATOR_FALSE = new ISINValidator(false);\n\n    /** ISIN Code Validator (with countryCode check) */\n    private static final ISINValidator ISIN_VALIDATOR_TRUE = new ISINValidator(true);\n\n    private static final String [] CCODES = Locale.getISOCountries();\n\n    /**\n     * All codes from ISO 3166-1 alpha-2 except unassigned code elements.\n     *\n     * From https://www.iso.org/obp/ui/#iso:pub:PUB500001:en as of 2024-03-23.\n     */\n    private static final String[] SPECIALS = {\n            \"AA\",\n            \"AC\",\n            \"AD\",\n            \"AE\",\n            \"AF\",\n            \"AG\",\n            \"AI\",\n            \"AL\",\n            \"AM\",\n            \"AN\",\n            \"AO\",\n            \"AP\",\n            \"AQ\",\n            \"AR\",\n            \"AS\",\n            \"AT\",\n            \"AU\",\n            \"AW\",\n            \"AX\",\n            \"AZ\",\n            \"BA\",\n            \"BB\",\n            \"BD\",\n            \"BE\",\n            \"BF\",\n            \"BG\",\n            \"BH\",\n            \"BI\",\n            \"BJ\",\n            \"BL\",\n            \"BM\",\n            \"BN\",\n            \"BO\",\n            \"BQ\",\n            \"BR\",\n            \"BS\",\n            \"BT\",\n            \"BU\",\n            \"BV\",\n            \"BW\",\n            \"BX\",\n            \"BY\",\n            \"BZ\",\n            \"CA\",\n            \"CC\",\n            \"CD\",\n            \"CF\",\n            \"CG\",\n            \"CH\",\n            \"CI\",\n            \"CK\",\n            \"CL\",\n            \"CM\",\n            \"CN\",\n            \"CO\",\n            \"CP\",\n            \"CQ\",\n            \"CR\",\n            \"CS\",\n            \"CT\",\n            \"CU\",\n            \"CV\",\n            \"CW\",\n            \"CX\",\n            \"CY\",\n            \"CZ\",\n            \"DD\",\n            \"DE\",\n            \"DG\",\n            \"DJ\",\n            \"DK\",\n            \"DM\",\n            \"DO\",\n            \"DY\",\n            \"DZ\",\n            \"EA\",\n            \"EC\",\n            \"EE\",\n            \"EF\",\n            \"EG\",\n            \"EH\",\n            \"EM\",\n            \"EP\",\n            \"ER\",\n            \"ES\",\n            \"ET\",\n            \"EU\",\n            \"EV\",\n            \"EW\",\n            \"EZ\",\n            \"FI\",\n            \"FJ\",\n            \"FK\",\n            \"FL\",\n            \"FM\",\n            \"FO\",\n            \"FQ\",\n            \"FR\",\n            \"FX\",\n            \"GA\",\n            \"GB\",\n            \"GC\",\n            \"GD\",\n            \"GE\",\n            \"GF\",\n            \"GG\",\n            \"GH\",\n            \"GI\",\n            \"GL\",\n            \"GM\",\n            \"GN\",\n            \"GP\",\n            \"GQ\",\n            \"GR\",\n            \"GS\",\n            \"GT\",\n            \"GU\",\n            \"GW\",\n            \"GY\",\n            \"HK\",\n            \"HM\",\n            \"HN\",\n            \"HR\",\n            \"HT\",\n            \"HU\",\n            \"HV\",\n            \"IB\",\n            \"IC\",\n            \"ID\",\n            \"IE\",\n            \"IL\",\n            \"IM\",\n            \"IN\",\n            \"IO\",\n            \"IQ\",\n            \"IR\",\n            \"IS\",\n            \"IT\",\n            \"JA\",\n            \"JE\",\n            \"JM\",\n            \"JO\",\n            \"JP\",\n            \"JT\",\n            \"KE\",\n            \"KG\",\n            \"KH\",\n            \"KI\",\n            \"KM\",\n            \"KN\",\n            \"KP\",\n            \"KR\",\n            \"KW\",\n            \"KY\",\n            \"KZ\",\n            \"LA\",\n            \"LB\",\n            \"LC\",\n            \"LF\",\n            \"LI\",\n            \"LK\",\n            \"LR\",\n            \"LS\",\n            \"LT\",\n            \"LU\",\n            \"LV\",\n            \"LY\",\n            \"MA\",\n            \"MC\",\n            \"MD\",\n            \"ME\",\n            \"MF\",\n            \"MG\",\n            \"MH\",\n            \"MI\",\n            \"MK\",\n            \"ML\",\n            \"MM\",\n            \"MN\",\n            \"MO\",\n            \"MP\",\n            \"MQ\",\n            \"MR\",\n            \"MS\",\n            \"MT\",\n            \"MU\",\n            \"MV\",\n            \"MW\",\n            \"MX\",\n            \"MY\",\n            \"MZ\",\n            \"NA\",\n            \"NC\",\n            \"NE\",\n            \"NF\",\n            \"NG\",\n            \"NH\",\n            \"NI\",\n            \"NL\",\n            \"NO\",\n            \"NP\",\n            \"NQ\",\n            \"NR\",\n            \"NT\",\n            \"NU\",\n            \"NZ\",\n            \"OA\",\n            \"OM\",\n            \"PA\",\n            \"PC\",\n            \"PE\",\n            \"PF\",\n            \"PG\",\n            \"PH\",\n            \"PI\",\n            \"PK\",\n            \"PL\",\n            \"PM\",\n            \"PN\",\n            \"PR\",\n            \"PS\",\n            \"PT\",\n            \"PU\",\n            \"PW\",\n            \"PY\",\n            \"PZ\",\n            \"QA\",\n            \"QM\",\n            \"QN\",\n            \"QO\",\n            \"QP\",\n            \"QQ\",\n            \"QR\",\n            \"QS\",\n            \"QT\",\n            \"QU\",\n            \"QV\",\n            \"QW\",\n            \"QX\",\n            \"QY\",\n            \"QZ\",\n            \"RA\",\n            \"RB\",\n            \"RC\",\n            \"RE\",\n            \"RH\",\n            \"RI\",\n            \"RL\",\n            \"RM\",\n            \"RN\",\n            \"RO\",\n            \"RP\",\n            \"RS\",\n            \"RU\",\n            \"RW\",\n            \"SA\",\n            \"SB\",\n            \"SC\",\n            \"SD\",\n            \"SE\",\n            \"SF\",\n            \"SG\",\n            \"SH\",\n            \"SI\",\n            \"SJ\",\n            \"SK\",\n            \"SL\",\n            \"SM\",\n            \"SN\",\n            \"SO\",\n            \"SR\",\n            \"SS\",\n            \"ST\",\n            \"SU\",\n            \"SV\",\n            \"SX\",\n            \"SY\",\n            \"SZ\",\n            \"TA\",\n            \"TC\",\n            \"TD\",\n            \"TF\",\n            \"TG\",\n            \"TH\",\n            \"TJ\",\n            \"TK\",\n            \"TL\",\n            \"TM\",\n            \"TN\",\n            \"TO\",\n            \"TP\",\n            \"TR\",\n            \"TT\",\n            \"TV\",\n            \"TW\",\n            \"TZ\",\n            \"UA\",\n            \"UG\",\n            \"UK\",\n            \"UM\",\n            \"UN\",\n            \"US\",\n            \"UY\",\n            \"UZ\",\n            \"VA\",\n            \"VC\",\n            \"VD\",\n            \"VE\",\n            \"VG\",\n            \"VI\",\n            \"VN\",\n            \"VU\",\n            \"WF\",\n            \"WG\",\n            \"WK\",\n            \"WL\",\n            \"WO\",\n            \"WS\",\n            \"WV\",\n            \"XA\",\n            \"XB\",\n            \"XC\",\n            \"XD\",\n            \"XE\",\n            \"XF\",\n            \"XG\",\n            \"XH\",\n            \"XI\",\n            \"XJ\",\n            \"XK\",\n            \"XL\",\n            \"XM\",\n            \"XN\",\n            \"XO\",\n            \"XP\",\n            \"XQ\",\n            \"XR\",\n            \"XS\",\n            \"XT\",\n            \"XU\",\n            \"XV\",\n            \"XW\",\n            \"XX\",\n            \"XY\",\n            \"XZ\",\n            \"YD\",\n            \"YE\",\n            \"YT\",\n            \"YU\",\n            \"YV\",\n            \"ZA\",\n            \"ZM\",\n            \"ZR\",\n            \"ZW\",\n            \"ZZ\",\n    };\n\n    static {\n        Arrays.sort(CCODES); // we cannot assume the codes are sorted\n        Arrays.sort(SPECIALS); // Just in case ...\n    }\n\n    /**\n     * Gets the singleton instance of the ISIN validator.\n     *\n     * @param checkCountryCode whether to check the country-code prefix or not\n     * @return A singleton instance of the appropriate ISIN validator.\n     */\n    public static ISINValidator getInstance(final boolean checkCountryCode) {\n        return checkCountryCode ? ISIN_VALIDATOR_TRUE : ISIN_VALIDATOR_FALSE;\n    }\n\n    /**\n     * Whether to check the country code during validation.\n     */\n    private final boolean checkCountryCode;\n\n    private ISINValidator(final boolean checkCountryCode) {\n        this.checkCountryCode = checkCountryCode;\n    }\n\n    private boolean checkCode(final String code) {\n        return Arrays.binarySearch(CCODES, code) >= 0 || Arrays.binarySearch(SPECIALS, code) >= 0;\n    }\n\n    /**\n     * Tests whether the code is a valid ISIN code after any transformation\n     * by the validate routine.\n     *\n     * @param code The code to validate.\n     * @return {@code true} if a valid ISIN\n     * code, otherwise {@code false}.\n     */\n    public boolean isValid(final String code) {\n        final boolean valid = VALIDATOR.isValid(code);\n        if (valid && checkCountryCode) {\n            return checkCode(code.substring(0, 2));\n        }\n        return valid;\n    }\n\n    /**\n     * Checks the code is valid ISIN code.\n     *\n     * @param code The code to validate.\n     * @return A valid ISIN code if valid, otherwise {@code null}.\n     */\n    public Object validate(final String code) {\n        final Object validate = VALIDATOR.validate(code);\n        if (validate != null && checkCountryCode) {\n            return checkCode(code.substring(0, 2)) ? validate : null;\n        }\n        return validate;\n    }\n\n}", "super_interfaces": ["Serializable"], "fields": [{"attribute_expression": "private static final long serialVersionUID = -5964391439144260936L;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "serialVersionUID = -5964391439144260936L", "syntax_pass": true}, {"attribute_expression": "private static final String ISIN_REGEX = \"([A-Z]{2}[A-Z0-9]{9}[0-9])\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "ISIN_REGEX = \"([A-Z]{2}[A-Z0-9]{9}[0-9])\"", "syntax_pass": true}, {"attribute_expression": "private static final CodeValidator VALIDATOR = new CodeValidator(ISIN_REGEX, 12, ISINCheckDigit.ISIN_CHECK_DIGIT);", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "CodeValidator", "name": "VALIDATOR = new CodeValidator(ISIN_REGEX, 12, ISINCheckDigit.ISIN_CHECK_DIGIT)", "syntax_pass": true}, {"attribute_expression": "private static final ISINValidator ISIN_VALIDATOR_FALSE = new ISINValidator(false);", "docstring": " ISIN Code Validator (no countryCode check)", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "ISINValidator", "name": "ISIN_VALIDATOR_FALSE = new ISINValidator(false)", "syntax_pass": true}, {"attribute_expression": "private static final ISINValidator ISIN_VALIDATOR_TRUE = new ISINValidator(true);", "docstring": " ISIN Code Validator (with countryCode check)", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "ISINValidator", "name": "ISIN_VALIDATOR_TRUE = new ISINValidator(true)", "syntax_pass": true}, {"attribute_expression": "private static final String [] CCODES = Locale.getISOCountries();", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String []", "name": "CCODES = Locale.getISOCountries()", "syntax_pass": true}, {"attribute_expression": "private static final String[] SPECIALS = {\n            \"AA\",\n            \"AC\",\n            \"AD\",\n            \"AE\",\n            \"AF\",\n            \"AG\",\n            \"AI\",\n            \"AL\",\n            \"AM\",\n            \"AN\",\n            \"AO\",\n            \"AP\",\n            \"AQ\",\n            \"AR\",\n            \"AS\",\n            \"AT\",\n            \"AU\",\n            \"AW\",\n            \"AX\",\n            \"AZ\",\n            \"BA\",\n            \"BB\",\n            \"BD\",\n            \"BE\",\n            \"BF\",\n            \"BG\",\n            \"BH\",\n            \"BI\",\n            \"BJ\",\n            \"BL\",\n            \"BM\",\n            \"BN\",\n            \"BO\",\n            \"BQ\",\n            \"BR\",\n            \"BS\",\n            \"BT\",\n            \"BU\",\n            \"BV\",\n            \"BW\",\n            \"BX\",\n            \"BY\",\n            \"BZ\",\n            \"CA\",\n            \"CC\",\n            \"CD\",\n            \"CF\",\n            \"CG\",\n            \"CH\",\n            \"CI\",\n            \"CK\",\n            \"CL\",\n            \"CM\",\n            \"CN\",\n            \"CO\",\n            \"CP\",\n            \"CQ\",\n            \"CR\",\n            \"CS\",\n            \"CT\",\n            \"CU\",\n            \"CV\",\n            \"CW\",\n            \"CX\",\n            \"CY\",\n            \"CZ\",\n            \"DD\",\n            \"DE\",\n            \"DG\",\n            \"DJ\",\n            \"DK\",\n            \"DM\",\n            \"DO\",\n            \"DY\",\n            \"DZ\",\n            \"EA\",\n            \"EC\",\n            \"EE\",\n            \"EF\",\n            \"EG\",\n            \"EH\",\n            \"EM\",\n            \"EP\",\n            \"ER\",\n            \"ES\",\n            \"ET\",\n            \"EU\",\n            \"EV\",\n            \"EW\",\n            \"EZ\",\n            \"FI\",\n            \"FJ\",\n            \"FK\",\n            \"FL\",\n            \"FM\",\n            \"FO\",\n            \"FQ\",\n            \"FR\",\n            \"FX\",\n            \"GA\",\n            \"GB\",\n            \"GC\",\n            \"GD\",\n            \"GE\",\n            \"GF\",\n            \"GG\",\n            \"GH\",\n            \"GI\",\n            \"GL\",\n            \"GM\",\n            \"GN\",\n            \"GP\",\n            \"GQ\",\n            \"GR\",\n            \"GS\",\n            \"GT\",\n            \"GU\",\n            \"GW\",\n            \"GY\",\n            \"HK\",\n            \"HM\",\n            \"HN\",\n            \"HR\",\n            \"HT\",\n            \"HU\",\n            \"HV\",\n            \"IB\",\n            \"IC\",\n            \"ID\",\n            \"IE\",\n            \"IL\",\n            \"IM\",\n            \"IN\",\n            \"IO\",\n            \"IQ\",\n            \"IR\",\n            \"IS\",\n            \"IT\",\n            \"JA\",\n            \"JE\",\n            \"JM\",\n            \"JO\",\n            \"JP\",\n            \"JT\",\n            \"KE\",\n            \"KG\",\n            \"KH\",\n            \"KI\",\n            \"KM\",\n            \"KN\",\n            \"KP\",\n            \"KR\",\n            \"KW\",\n            \"KY\",\n            \"KZ\",\n            \"LA\",\n            \"LB\",\n            \"LC\",\n            \"LF\",\n            \"LI\",\n            \"LK\",\n            \"LR\",\n            \"LS\",\n            \"LT\",\n            \"LU\",\n            \"LV\",\n            \"LY\",\n            \"MA\",\n            \"MC\",\n            \"MD\",\n            \"ME\",\n            \"MF\",\n            \"MG\",\n            \"MH\",\n            \"MI\",\n            \"MK\",\n            \"ML\",\n            \"MM\",\n            \"MN\",\n            \"MO\",\n            \"MP\",\n            \"MQ\",\n            \"MR\",\n            \"MS\",\n            \"MT\",\n            \"MU\",\n            \"MV\",\n            \"MW\",\n            \"MX\",\n            \"MY\",\n            \"MZ\",\n            \"NA\",\n            \"NC\",\n            \"NE\",\n            \"NF\",\n            \"NG\",\n            \"NH\",\n            \"NI\",\n            \"NL\",\n            \"NO\",\n            \"NP\",\n            \"NQ\",\n            \"NR\",\n            \"NT\",\n            \"NU\",\n            \"NZ\",\n            \"OA\",\n            \"OM\",\n            \"PA\",\n            \"PC\",\n            \"PE\",\n            \"PF\",\n            \"PG\",\n            \"PH\",\n            \"PI\",\n            \"PK\",\n            \"PL\",\n            \"PM\",\n            \"PN\",\n            \"PR\",\n            \"PS\",\n            \"PT\",\n            \"PU\",\n            \"PW\",\n            \"PY\",\n            \"PZ\",\n            \"QA\",\n            \"QM\",\n            \"QN\",\n            \"QO\",\n            \"QP\",\n            \"QQ\",\n            \"QR\",\n            \"QS\",\n            \"QT\",\n            \"QU\",\n            \"QV\",\n            \"QW\",\n            \"QX\",\n            \"QY\",\n            \"QZ\",\n            \"RA\",\n            \"RB\",\n            \"RC\",\n            \"RE\",\n            \"RH\",\n            \"RI\",\n            \"RL\",\n            \"RM\",\n            \"RN\",\n            \"RO\",\n            \"RP\",\n            \"RS\",\n            \"RU\",\n            \"RW\",\n            \"SA\",\n            \"SB\",\n            \"SC\",\n            \"SD\",\n            \"SE\",\n            \"SF\",\n            \"SG\",\n            \"SH\",\n            \"SI\",\n            \"SJ\",\n            \"SK\",\n            \"SL\",\n            \"SM\",\n            \"SN\",\n            \"SO\",\n            \"SR\",\n            \"SS\",\n            \"ST\",\n            \"SU\",\n            \"SV\",\n            \"SX\",\n            \"SY\",\n            \"SZ\",\n            \"TA\",\n            \"TC\",\n            \"TD\",\n            \"TF\",\n            \"TG\",\n            \"TH\",\n            \"TJ\",\n            \"TK\",\n            \"TL\",\n            \"TM\",\n            \"TN\",\n            \"TO\",\n            \"TP\",\n            \"TR\",\n            \"TT\",\n            \"TV\",\n            \"TW\",\n            \"TZ\",\n            \"UA\",\n            \"UG\",\n            \"UK\",\n            \"UM\",\n            \"UN\",\n            \"US\",\n            \"UY\",\n            \"UZ\",\n            \"VA\",\n            \"VC\",\n            \"VD\",\n            \"VE\",\n            \"VG\",\n            \"VI\",\n            \"VN\",\n            \"VU\",\n            \"WF\",\n            \"WG\",\n            \"WK\",\n            \"WL\",\n            \"WO\",\n            \"WS\",\n            \"WV\",\n            \"XA\",\n            \"XB\",\n            \"XC\",\n            \"XD\",\n            \"XE\",\n            \"XF\",\n            \"XG\",\n            \"XH\",\n            \"XI\",\n            \"XJ\",\n            \"XK\",\n            \"XL\",\n            \"XM\",\n            \"XN\",\n            \"XO\",\n            \"XP\",\n            \"XQ\",\n            \"XR\",\n            \"XS\",\n            \"XT\",\n            \"XU\",\n            \"XV\",\n            \"XW\",\n            \"XX\",\n            \"XY\",\n            \"XZ\",\n            \"YD\",\n            \"YE\",\n            \"YT\",\n            \"YU\",\n            \"YV\",\n            \"ZA\",\n            \"ZM\",\n            \"ZR\",\n            \"ZW\",\n            \"ZZ\",\n    };", "docstring": "\nAll codes from ISO 3166-1 alpha-2 except unassigned code elements.\n\nFrom https://www.iso.org/obp/ui/#iso:pub:PUB500001:en as of 2024-03-23.\n", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String[]", "name": "SPECIALS = {\n            \"AA\",\n            \"AC\",\n            \"AD\",\n            \"AE\",\n            \"AF\",\n            \"AG\",\n            \"AI\",\n            \"AL\",\n            \"AM\",\n            \"AN\",\n            \"AO\",\n            \"AP\",\n            \"AQ\",\n            \"AR\",\n            \"AS\",\n            \"AT\",\n            \"AU\",\n            \"AW\",\n            \"AX\",\n            \"AZ\",\n            \"BA\",\n            \"BB\",\n            \"BD\",\n            \"BE\",\n            \"BF\",\n            \"BG\",\n            \"BH\",\n            \"BI\",\n            \"BJ\",\n            \"BL\",\n            \"BM\",\n            \"BN\",\n            \"BO\",\n            \"BQ\",\n            \"BR\",\n            \"BS\",\n            \"BT\",\n            \"BU\",\n            \"BV\",\n            \"BW\",\n            \"BX\",\n            \"BY\",\n            \"BZ\",\n            \"CA\",\n            \"CC\",\n            \"CD\",\n            \"CF\",\n            \"CG\",\n            \"CH\",\n            \"CI\",\n            \"CK\",\n            \"CL\",\n            \"CM\",\n            \"CN\",\n            \"CO\",\n            \"CP\",\n            \"CQ\",\n            \"CR\",\n            \"CS\",\n            \"CT\",\n            \"CU\",\n            \"CV\",\n            \"CW\",\n            \"CX\",\n            \"CY\",\n            \"CZ\",\n            \"DD\",\n            \"DE\",\n            \"DG\",\n            \"DJ\",\n            \"DK\",\n            \"DM\",\n            \"DO\",\n            \"DY\",\n            \"DZ\",\n            \"EA\",\n            \"EC\",\n            \"EE\",\n            \"EF\",\n            \"EG\",\n            \"EH\",\n            \"EM\",\n            \"EP\",\n            \"ER\",\n            \"ES\",\n            \"ET\",\n            \"EU\",\n            \"EV\",\n            \"EW\",\n            \"EZ\",\n            \"FI\",\n            \"FJ\",\n            \"FK\",\n            \"FL\",\n            \"FM\",\n            \"FO\",\n            \"FQ\",\n            \"FR\",\n            \"FX\",\n            \"GA\",\n            \"GB\",\n            \"GC\",\n            \"GD\",\n            \"GE\",\n            \"GF\",\n            \"GG\",\n            \"GH\",\n            \"GI\",\n            \"GL\",\n            \"GM\",\n            \"GN\",\n            \"GP\",\n            \"GQ\",\n            \"GR\",\n            \"GS\",\n            \"GT\",\n            \"GU\",\n            \"GW\",\n            \"GY\",\n            \"HK\",\n            \"HM\",\n            \"HN\",\n            \"HR\",\n            \"HT\",\n            \"HU\",\n            \"HV\",\n            \"IB\",\n            \"IC\",\n            \"ID\",\n            \"IE\",\n            \"IL\",\n            \"IM\",\n            \"IN\",\n            \"IO\",\n            \"IQ\",\n            \"IR\",\n            \"IS\",\n            \"IT\",\n            \"JA\",\n            \"JE\",\n            \"JM\",\n            \"JO\",\n            \"JP\",\n            \"JT\",\n            \"KE\",\n            \"KG\",\n            \"KH\",\n            \"KI\",\n            \"KM\",\n            \"KN\",\n            \"KP\",\n            \"KR\",\n            \"KW\",\n            \"KY\",\n            \"KZ\",\n            \"LA\",\n            \"LB\",\n            \"LC\",\n            \"LF\",\n            \"LI\",\n            \"LK\",\n            \"LR\",\n            \"LS\",\n            \"LT\",\n            \"LU\",\n            \"LV\",\n            \"LY\",\n            \"MA\",\n            \"MC\",\n            \"MD\",\n            \"ME\",\n            \"MF\",\n            \"MG\",\n            \"MH\",\n            \"MI\",\n            \"MK\",\n            \"ML\",\n            \"MM\",\n            \"MN\",\n            \"MO\",\n            \"MP\",\n            \"MQ\",\n            \"MR\",\n            \"MS\",\n            \"MT\",\n            \"MU\",\n            \"MV\",\n            \"MW\",\n            \"MX\",\n            \"MY\",\n            \"MZ\",\n            \"NA\",\n            \"NC\",\n            \"NE\",\n            \"NF\",\n            \"NG\",\n            \"NH\",\n            \"NI\",\n            \"NL\",\n            \"NO\",\n            \"NP\",\n            \"NQ\",\n            \"NR\",\n            \"NT\",\n            \"NU\",\n            \"NZ\",\n            \"OA\",\n            \"OM\",\n            \"PA\",\n            \"PC\",\n            \"PE\",\n            \"PF\",\n            \"PG\",\n            \"PH\",\n            \"PI\",\n            \"PK\",\n            \"PL\",\n            \"PM\",\n            \"PN\",\n            \"PR\",\n            \"PS\",\n            \"PT\",\n            \"PU\",\n            \"PW\",\n            \"PY\",\n            \"PZ\",\n            \"QA\",\n            \"QM\",\n            \"QN\",\n            \"QO\",\n            \"QP\",\n            \"QQ\",\n            \"QR\",\n            \"QS\",\n            \"QT\",\n            \"QU\",\n            \"QV\",\n            \"QW\",\n            \"QX\",\n            \"QY\",\n            \"QZ\",\n            \"RA\",\n            \"RB\",\n            \"RC\",\n            \"RE\",\n            \"RH\",\n            \"RI\",\n            \"RL\",\n            \"RM\",\n            \"RN\",\n            \"RO\",\n            \"RP\",\n            \"RS\",\n            \"RU\",\n            \"RW\",\n            \"SA\",\n            \"SB\",\n            \"SC\",\n            \"SD\",\n            \"SE\",\n            \"SF\",\n            \"SG\",\n            \"SH\",\n            \"SI\",\n            \"SJ\",\n            \"SK\",\n            \"SL\",\n            \"SM\",\n            \"SN\",\n            \"SO\",\n            \"SR\",\n            \"SS\",\n            \"ST\",\n            \"SU\",\n            \"SV\",\n            \"SX\",\n            \"SY\",\n            \"SZ\",\n            \"TA\",\n            \"TC\",\n            \"TD\",\n            \"TF\",\n            \"TG\",\n            \"TH\",\n            \"TJ\",\n            \"TK\",\n            \"TL\",\n            \"TM\",\n            \"TN\",\n            \"TO\",\n            \"TP\",\n            \"TR\",\n            \"TT\",\n            \"TV\",\n            \"TW\",\n            \"TZ\",\n            \"UA\",\n            \"UG\",\n            \"UK\",\n            \"UM\",\n            \"UN\",\n            \"US\",\n            \"UY\",\n            \"UZ\",\n            \"VA\",\n            \"VC\",\n            \"VD\",\n            \"VE\",\n            \"VG\",\n            \"VI\",\n            \"VN\",\n            \"VU\",\n            \"WF\",\n            \"WG\",\n            \"WK\",\n            \"WL\",\n            \"WO\",\n            \"WS\",\n            \"WV\",\n            \"XA\",\n            \"XB\",\n            \"XC\",\n            \"XD\",\n            \"XE\",\n            \"XF\",\n            \"XG\",\n            \"XH\",\n            \"XI\",\n            \"XJ\",\n            \"XK\",\n            \"XL\",\n            \"XM\",\n            \"XN\",\n            \"XO\",\n            \"XP\",\n            \"XQ\",\n            \"XR\",\n            \"XS\",\n            \"XT\",\n            \"XU\",\n            \"XV\",\n            \"XW\",\n            \"XX\",\n            \"XY\",\n            \"XZ\",\n            \"YD\",\n            \"YE\",\n            \"YT\",\n            \"YU\",\n            \"YV\",\n            \"ZA\",\n            \"ZM\",\n            \"ZR\",\n            \"ZW\",\n            \"ZZ\",\n    }", "syntax_pass": true}, {"attribute_expression": "private final boolean checkCountryCode;", "docstring": "\nWhether to check the country code during validation.\n", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "boolean", "name": "checkCountryCode", "syntax_pass": true}]}, {"uris": "src/main/java/org/apache/commons/validator/routines/FloatValidator.java.FloatValidator", "name": "FloatValidator", "file_path": "src/main/java/org/apache/commons/validator/routines/FloatValidator.java", "superclasses": "AbstractNumberValidator", "methods": ["[FloatValidator]getInstance()", "[]FloatValidator()", "[]FloatValidator(boolean,int)", "[boolean]isInRange(float,float,float)", "[boolean]isInRange(Float,float,float)", "[boolean]maxValue(float,float)", "[boolean]maxValue(Float,float)", "[boolean]minValue(float,float)", "[boolean]minValue(Float,float)", "[Object]processParsedValue(Object,Format)", "[Float]validate(String)", "[Float]validate(String,Locale)", "[Float]validate(String,String)", "[Float]validate(String,String,Locale)"], "method_uris": ["src/main/java/org/apache/commons/validator/routines/FloatValidator.java.FloatValidator.[FloatValidator]getInstance()", "src/main/java/org/apache/commons/validator/routines/FloatValidator.java.FloatValidator.[]FloatValidator()", "src/main/java/org/apache/commons/validator/routines/FloatValidator.java.FloatValidator.[]FloatValidator(boolean,int)", "src/main/java/org/apache/commons/validator/routines/FloatValidator.java.FloatValidator.[boolean]isInRange(float,float,float)", "src/main/java/org/apache/commons/validator/routines/FloatValidator.java.FloatValidator.[boolean]isInRange(Float,float,float)", "src/main/java/org/apache/commons/validator/routines/FloatValidator.java.FloatValidator.[boolean]maxValue(float,float)", "src/main/java/org/apache/commons/validator/routines/FloatValidator.java.FloatValidator.[boolean]maxValue(Float,float)", "src/main/java/org/apache/commons/validator/routines/FloatValidator.java.FloatValidator.[boolean]minValue(float,float)", "src/main/java/org/apache/commons/validator/routines/FloatValidator.java.FloatValidator.[boolean]minValue(Float,float)", "src/main/java/org/apache/commons/validator/routines/FloatValidator.java.FloatValidator.[Object]processParsedValue(Object,Format)", "src/main/java/org/apache/commons/validator/routines/FloatValidator.java.FloatValidator.[Float]validate(String)", "src/main/java/org/apache/commons/validator/routines/FloatValidator.java.FloatValidator.[Float]validate(String,Locale)", "src/main/java/org/apache/commons/validator/routines/FloatValidator.java.FloatValidator.[Float]validate(String,String)", "src/main/java/org/apache/commons/validator/routines/FloatValidator.java.FloatValidator.[Float]validate(String,String,Locale)"], "overrides": null, "attributes": [], "class_docstring": "\n<p><b>Float Validation</b> and Conversion routines ({@code java.lang.Float}).</p>\n\n<p>This validator provides a number of methods for\n   validating/converting a {@link String} value to\n   a {@code Float} using {@link NumberFormat}\n   to parse either:</p>\n   <ul>\n      <li>using the default format for the default {@link Locale}</li>\n      <li>using a specified pattern with the default {@link Locale}</li>\n      <li>using the default format for a specified {@link Locale}</li>\n      <li>using a specified pattern with a specified {@link Locale}</li>\n   </ul>\n\n<p>Use one of the {@code isValid()} methods to just validate or\n   one of the {@code validate()} methods to validate and receive a\n   <em>converted</em> {@code Float} value.</p>\n\n<p>Once a value has been successfully converted the following\n   methods can be used to perform minimum, maximum and range checks:</p>\n   <ul>\n      <li>{@code minValue()} checks whether the value is greater\n          than or equal to a specified minimum.</li>\n      <li>{@code maxValue()} checks whether the value is less\n          than or equal to a specified maximum.</li>\n      <li>{@code isInRange()} checks whether the value is within\n          a specified range of values.</li>\n   </ul>\n\n<p>So that the same mechanism used for parsing an <em>input</em> value\n   for validation can be used to format <em>output</em>, corresponding\n   {@code format()} methods are also provided. That is you can\n   format either:</p>\n   <ul>\n      <li>using the default format for the default {@link Locale}</li>\n      <li>using a specified pattern with the default {@link Locale}</li>\n      <li>using the default format for a specified {@link Locale}</li>\n      <li>using a specified pattern with a specified {@link Locale}</li>\n   </ul>\n\n@since 1.3.0\n", "original_string": "public class FloatValidator extends AbstractNumberValidator {\n\n    private static final long serialVersionUID = -4513245432806414267L;\n\n    private static final FloatValidator VALIDATOR = new FloatValidator();\n\n    /**\n     * Gets the singleton instance of this validator.\n     * @return A singleton instance of the FloatValidator.\n     */\n    public static FloatValidator getInstance() {\n        return VALIDATOR;\n    }\n\n    /**\n     * Constructs a <em>strict</em> instance.\n     */\n    public FloatValidator() {\n        this(true, STANDARD_FORMAT);\n    }\n\n    /**\n     * <p>Construct an instance with the specified strict setting\n     *    and format type.</p>\n     *\n     * <p>The {@code formatType} specified what type of\n     *    {@code NumberFormat} is created - valid types\n     *    are:</p>\n     *    <ul>\n     *       <li>AbstractNumberValidator.STANDARD_FORMAT -to create\n     *           <em>standard</em> number formats (the default).</li>\n     *       <li>AbstractNumberValidator.CURRENCY_FORMAT -to create\n     *           <em>currency</em> number formats.</li>\n     *       <li>AbstractNumberValidator.PERCENT_FORMAT -to create\n     *           <em>percent</em> number formats (the default).</li>\n     *    </ul>\n     *\n     * @param strict {@code true} if strict\n     *        {@code Format} parsing should be used.\n     * @param formatType The {@code NumberFormat} type to\n     *        create for validation, default is STANDARD_FORMAT.\n     */\n    public FloatValidator(final boolean strict, final int formatType) {\n        super(strict, formatType, true);\n    }\n\n    /**\n     * Check if the value is within a specified range.\n     *\n     * @param value The {@code Number} value to check.\n     * @param min The minimum value of the range.\n     * @param max The maximum value of the range.\n     * @return {@code true} if the value is within the\n     *         specified range.\n     */\n    public boolean isInRange(final float value, final float min, final float max) {\n        return value >= min && value <= max;\n    }\n\n    /**\n     * Check if the value is within a specified range.\n     *\n     * @param value The {@code Number} value to check.\n     * @param min The minimum value of the range.\n     * @param max The maximum value of the range.\n     * @return {@code true} if the value is within the\n     *         specified range.\n     */\n    public boolean isInRange(final Float value, final float min, final float max) {\n        return isInRange(value.floatValue(), min, max);\n    }\n\n    /**\n     * Check if the value is less than or equal to a maximum.\n     *\n     * @param value The value validation is being performed on.\n     * @param max The maximum value.\n     * @return {@code true} if the value is less than\n     *         or equal to the maximum.\n     */\n    public boolean maxValue(final float value, final float max) {\n        return value <= max;\n    }\n\n    /**\n     * Check if the value is less than or equal to a maximum.\n     *\n     * @param value The value validation is being performed on.\n     * @param max The maximum value.\n     * @return {@code true} if the value is less than\n     *         or equal to the maximum.\n     */\n    public boolean maxValue(final Float value, final float max) {\n        return maxValue(value.floatValue(), max);\n    }\n\n    /**\n     * Check if the value is greater than or equal to a minimum.\n     *\n     * @param value The value validation is being performed on.\n     * @param min The minimum value.\n     * @return {@code true} if the value is greater than\n     *         or equal to the minimum.\n     */\n    public boolean minValue(final float value, final float min) {\n        return value >= min;\n    }\n\n    /**\n     * Check if the value is greater than or equal to a minimum.\n     *\n     * @param value The value validation is being performed on.\n     * @param min The minimum value.\n     * @return {@code true} if the value is greater than\n     *         or equal to the minimum.\n     */\n    public boolean minValue(final Float value, final float min) {\n        return minValue(value.floatValue(), min);\n    }\n\n    /**\n     * <p>Perform further validation and convert the {@code Number} to\n     * a {@code Float}.</p>\n     *\n     * @param value The parsed {@code Number} object created.\n     * @param formatter The Format used to parse the value with.\n     * @return The parsed {@code Number} converted to a\n     *   {@code Float} if valid or {@code null} if invalid.\n     */\n    @Override\n    protected Object processParsedValue(final Object value, final Format formatter) {\n\n        final double doubleValue = ((Number) value).doubleValue();\n\n        if (doubleValue > 0) {\n            if (doubleValue < Float.MIN_VALUE) {\n                return null;\n            }\n            if (doubleValue > Float.MAX_VALUE) {\n                return null;\n            }\n        } else if (doubleValue < 0) {\n            final double posDouble = doubleValue * -1;\n            if (posDouble < Float.MIN_VALUE) {\n                return null;\n            }\n            if (posDouble > Float.MAX_VALUE) {\n                return null;\n            }\n        }\n\n        return Float.valueOf((float) doubleValue);\n\n    }\n\n    /**\n     * <p>Validate/convert a {@code Float} using the default\n     *    {@link Locale}.\n     *\n     * @param value The value validation is being performed on.\n     * @return The parsed {@code Float} if valid or {@code null}\n     *  if invalid.\n     */\n    public Float validate(final String value) {\n        return (Float) parse(value, (String) null, (Locale) null);\n    }\n\n    /**\n     * <p>Validate/convert a {@code Float} using the\n     *    specified {@link Locale}.\n     *\n     * @param value The value validation is being performed on.\n     * @param locale The locale to use for the number format, system default if null.\n     * @return The parsed {@code Float} if valid or {@code null} if invalid.\n     */\n    public Float validate(final String value, final Locale locale) {\n        return (Float) parse(value, (String) null, locale);\n    }\n\n    /**\n     * <p>Validate/convert a {@code Float} using the\n     *    specified <em>pattern</em>.\n     *\n     * @param value The value validation is being performed on.\n     * @param pattern The pattern used to validate the value against.\n     * @return The parsed {@code Float} if valid or {@code null} if invalid.\n     */\n    public Float validate(final String value, final String pattern) {\n        return (Float) parse(value, pattern, (Locale) null);\n    }\n\n    /**\n     * <p>Validate/convert a {@code Float} using the\n     *    specified pattern and/ or {@link Locale}.\n     *\n     * @param value The value validation is being performed on.\n     * @param pattern The pattern used to validate the value against, or the\n     *        default for the {@link Locale} if {@code null}.\n     * @param locale The locale to use for the date format, system default if null.\n     * @return The parsed {@code Float} if valid or {@code null} if invalid.\n     */\n    public Float validate(final String value, final String pattern, final Locale locale) {\n        return (Float) parse(value, pattern, locale);\n    }\n\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final long serialVersionUID = -4513245432806414267L;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "serialVersionUID = -4513245432806414267L", "syntax_pass": true}, {"attribute_expression": "private static final FloatValidator VALIDATOR = new FloatValidator();", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "FloatValidator", "name": "VALIDATOR = new FloatValidator()", "syntax_pass": true}]}, {"uris": "src/main/java/org/apache/commons/validator/routines/CreditCardValidator.java.CreditCardValidator", "name": "CreditCardValidator", "file_path": "src/main/java/org/apache/commons/validator/routines/CreditCardValidator.java", "superclasses": "", "methods": ["[CodeValidator]createRangeValidator(CreditCardRange[],CheckDigit)", "[CreditCardValidator]genericCreditCardValidator()", "[CreditCardValidator]genericCreditCardValidator(int)", "[CreditCardValidator]genericCreditCardValidator(int,int)", "[boolean]validLength(int,CreditCardRange)", "[]CreditCardValidator()", "[]CreditCardValidator(CodeValidator[])", "[]CreditCardValidator(CodeValidator[],CreditCardRange[])", "[]CreditCardValidator(CreditCardRange[])", "[]CreditCardValidator(long)", "[boolean]isOn(long,long)", "[boolean]isValid(String)", "[Object]validate(String)"], "method_uris": ["src/main/java/org/apache/commons/validator/routines/CreditCardValidator.java.CreditCardValidator.[CodeValidator]createRangeValidator(CreditCardRange[],CheckDigit)", "src/main/java/org/apache/commons/validator/routines/CreditCardValidator.java.CreditCardValidator.[CreditCardValidator]genericCreditCardValidator()", "src/main/java/org/apache/commons/validator/routines/CreditCardValidator.java.CreditCardValidator.[CreditCardValidator]genericCreditCardValidator(int)", "src/main/java/org/apache/commons/validator/routines/CreditCardValidator.java.CreditCardValidator.[CreditCardValidator]genericCreditCardValidator(int,int)", "src/main/java/org/apache/commons/validator/routines/CreditCardValidator.java.CreditCardValidator.[boolean]validLength(int,CreditCardRange)", "src/main/java/org/apache/commons/validator/routines/CreditCardValidator.java.CreditCardValidator.[]CreditCardValidator()", "src/main/java/org/apache/commons/validator/routines/CreditCardValidator.java.CreditCardValidator.[]CreditCardValidator(CodeValidator[])", "src/main/java/org/apache/commons/validator/routines/CreditCardValidator.java.CreditCardValidator.[]CreditCardValidator(CodeValidator[],CreditCardRange[])", "src/main/java/org/apache/commons/validator/routines/CreditCardValidator.java.CreditCardValidator.[]CreditCardValidator(CreditCardRange[])", "src/main/java/org/apache/commons/validator/routines/CreditCardValidator.java.CreditCardValidator.[]CreditCardValidator(long)", "src/main/java/org/apache/commons/validator/routines/CreditCardValidator.java.CreditCardValidator.[boolean]isOn(long,long)", "src/main/java/org/apache/commons/validator/routines/CreditCardValidator.java.CreditCardValidator.[boolean]isValid(String)", "src/main/java/org/apache/commons/validator/routines/CreditCardValidator.java.CreditCardValidator.[Object]validate(String)"], "overrides": null, "attributes": [{"original_string": "    public static class CreditCardRange {\n        final String low; // e.g. 34 or 644\n        final String high; // e.g. 34 or 65\n        final int minLen; // e.g. 16 or -1\n        final int maxLen; // e.g. 19 or -1\n        final int lengths[]; // e.g. 16,18,19\n\n        /**\n         * Create a credit card range specifier for use in validation\n         * of the number syntax including the IIN range.\n         * <p>\n         * The low and high parameters may be shorter than the length\n         * of an IIN (currently 6 digits) in which case subsequent digits\n         * are ignored and may range from 0-9.\n         * </p>\n         * <p>\n         * The low and high parameters may be different lengths.\n         * e.g. Discover \"644\" and \"65\".\n         * </p>\n         * @param low the low digits of the IIN range\n         * @param high the high digits of the IIN range\n         * @param minLen the minimum length of the entire number\n         * @param maxLen the maximum length of the entire number\n         */\n        public CreditCardRange(final String low, final String high, final int minLen, final int maxLen) {\n            this.low = low;\n            this.high = high;\n            this.minLen = minLen;\n            this.maxLen = maxLen;\n            this.lengths = null;\n        }\n\n        /**\n         * Create a credit card range specifier for use in validation\n         * of the number syntax including the IIN range.\n         * <p>\n         * The low and high parameters may be shorter than the length\n         * of an IIN (currently 6 digits) in which case subsequent digits\n         * are ignored and may range from 0-9.\n         * </p>\n         * <p>\n         * The low and high parameters may be different lengths.\n         * e.g. Discover \"644\" and \"65\".\n         * </p>\n         * @param low the low digits of the IIN range\n         * @param high the high digits of the IIN range\n         * @param lengths array of valid lengths\n         */\n        public CreditCardRange(final String low, final String high, final int [] lengths) {\n            this.low = low;\n            this.high = high;\n            this.minLen = -1;\n            this.maxLen = -1;\n            this.lengths = lengths.clone();\n        }\n    }", "definition": "    public static class CreditCardRange", "class_docstring": "\nClass that represents a credit card range.\n@since 1.6\n", "name": "CreditCardRange", "super_interfaces": [], "superclasses": "", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "fields": [{"attribute_expression": "final String low;", "docstring": "", "modifiers": "final", "marker_annotations": [], "non_marker_annotations": ["final"], "comments": [], "type": "String", "name": "low", "syntax_pass": true}, {"attribute_expression": "final String high;", "docstring": " e.g. 34 or 644", "modifiers": "final", "marker_annotations": [], "non_marker_annotations": ["final"], "comments": [], "type": "String", "name": "high", "syntax_pass": true}, {"attribute_expression": "final int minLen;", "docstring": " e.g. 34 or 65", "modifiers": "final", "marker_annotations": [], "non_marker_annotations": ["final"], "comments": [], "type": "int", "name": "minLen", "syntax_pass": true}, {"attribute_expression": "final int maxLen;", "docstring": " e.g. 16 or -1", "modifiers": "final", "marker_annotations": [], "non_marker_annotations": ["final"], "comments": [], "type": "int", "name": "maxLen", "syntax_pass": true}, {"attribute_expression": "final int lengths[];", "docstring": " e.g. 19 or -1", "modifiers": "final", "marker_annotations": [], "non_marker_annotations": ["final"], "comments": [], "type": "int", "name": "lengths[]", "syntax_pass": true}], "classes": []}, "syntax_pass": true, "methods": [{"syntax_pass": true, "original_string": "        public CreditCardRange(final String low, final String high, final int minLen, final int maxLen) {\n            this.low = low;\n            this.high = high;\n            this.minLen = minLen;\n            this.maxLen = maxLen;\n            this.lengths = null;\n        }", "docstring": "\nCreate a credit card range specifier for use in validation\nof the number syntax including the IIN range.\n<p>\nThe low and high parameters may be shorter than the length\nof an IIN (currently 6 digits) in which case subsequent digits\nare ignored and may range from 0-9.\n</p>\n<p>\nThe low and high parameters may be different lengths.\ne.g. Discover \"644\" and \"65\".\n</p>\n@param low the low digits of the IIN range\n@param high the high digits of the IIN range\n@param minLen the minimum length of the entire number\n@param maxLen the maximum length of the entire number\n", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "name": "CreditCardRange", "params": [{"name": "low", "type": "String"}, {"name": "high", "type": "String"}, {"name": "minLen", "type": "int"}, {"name": "maxLen", "type": "int"}], "body": "                                                                                                        {\n            this.low = low;\n            this.high = high;\n            this.minLen = minLen;\n            this.maxLen = maxLen;\n            this.lengths = null;\n        }", "signature": "public CreditCardRange(final String low, final String high, final int minLen, final int maxLen)"}, {"syntax_pass": true, "original_string": "        public CreditCardRange(final String low, final String high, final int [] lengths) {\n            this.low = low;\n            this.high = high;\n            this.minLen = -1;\n            this.maxLen = -1;\n            this.lengths = lengths.clone();\n        }", "docstring": "\nCreate a credit card range specifier for use in validation\nof the number syntax including the IIN range.\n<p>\nThe low and high parameters may be shorter than the length\nof an IIN (currently 6 digits) in which case subsequent digits\nare ignored and may range from 0-9.\n</p>\n<p>\nThe low and high parameters may be different lengths.\ne.g. Discover \"644\" and \"65\".\n</p>\n@param low the low digits of the IIN range\n@param high the high digits of the IIN range\n@param lengths array of valid lengths\n", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "name": "CreditCardRange", "params": [{"name": "low", "type": "String"}, {"name": "high", "type": "String"}, {"name": "lengths", "type": "int []"}], "body": "                                                                                          {\n            this.low = low;\n            this.high = high;\n            this.minLen = -1;\n            this.maxLen = -1;\n            this.lengths = lengths.clone();\n        }", "signature": "public CreditCardRange(final String low, final String high, final int [] lengths)"}]}], "class_docstring": "\nPerform credit card validations.\n\n<p>\nBy default, AMEX + VISA + MASTERCARD + DISCOVER card types are allowed.  You can specify which\ncards should pass validation by configuring the validation options. For\nexample,\n</p>\n\n<pre>\n{@code CreditCardValidator ccv = new CreditCardValidator(CreditCardValidator.AMEX + CreditCardValidator.VISA);}\n</pre>\n\n<p>\nconfigures the validator to only pass American Express and Visa cards.\nIf a card type is not directly supported by this class, you can create an\ninstance of the {@link CodeValidator} class and pass it to a {@link CreditCardValidator}\nconstructor along with any existing validators. For example:\n</p>\n\n<pre>\n<code>CreditCardValidator ccv = new CreditCardValidator(\n    new CodeValidator[] {\n        CreditCardValidator.AMEX_VALIDATOR,\n        CreditCardValidator.VISA_VALIDATOR,\n        new CodeValidator(\"^(4)(\\\\d{12,18})$\", LUHN_VALIDATOR) // add VPAY\n};</code>\n</pre>\n\n<p>\nAlternatively you can define a validator using the {@link CreditCardRange} class.\nFor example:\n</p>\n\n<pre>\n<code>CreditCardValidator ccv = new CreditCardValidator(\n   new CreditCardRange[]{\n       new CreditCardRange(\"300\", \"305\", 14, 14), // Diners\n       new CreditCardRange(\"3095\", null, 14, 14), // Diners\n       new CreditCardRange(\"36\",   null, 14, 14), // Diners\n       new CreditCardRange(\"38\",   \"39\", 14, 14), // Diners\n       new CreditCardRange(\"4\",    null, new int[] {13, 16}), // VISA\n   }\n);\n</code>\n</pre>\n<p>\nThis can be combined with a list of {@code CodeValidator}s\n</p>\n<p>\nMore information can be found in Michael Gilleland's essay\n<a href=\"http://web.archive.org/web/20120614072656/http://www.merriampark.com/anatomycc.htm\">Anatomy of Credit Card Numbers</a>.\n</p>\n\n@since 1.4\n", "original_string": "public class CreditCardValidator implements Serializable {\n\n    /**\n     * Class that represents a credit card range.\n     * @since 1.6\n     */\n    public static class CreditCardRange {\n        final String low; // e.g. 34 or 644\n        final String high; // e.g. 34 or 65\n        final int minLen; // e.g. 16 or -1\n        final int maxLen; // e.g. 19 or -1\n        final int lengths[]; // e.g. 16,18,19\n\n        /**\n         * Create a credit card range specifier for use in validation\n         * of the number syntax including the IIN range.\n         * <p>\n         * The low and high parameters may be shorter than the length\n         * of an IIN (currently 6 digits) in which case subsequent digits\n         * are ignored and may range from 0-9.\n         * </p>\n         * <p>\n         * The low and high parameters may be different lengths.\n         * e.g. Discover \"644\" and \"65\".\n         * </p>\n         * @param low the low digits of the IIN range\n         * @param high the high digits of the IIN range\n         * @param minLen the minimum length of the entire number\n         * @param maxLen the maximum length of the entire number\n         */\n        public CreditCardRange(final String low, final String high, final int minLen, final int maxLen) {\n            this.low = low;\n            this.high = high;\n            this.minLen = minLen;\n            this.maxLen = maxLen;\n            this.lengths = null;\n        }\n\n        /**\n         * Create a credit card range specifier for use in validation\n         * of the number syntax including the IIN range.\n         * <p>\n         * The low and high parameters may be shorter than the length\n         * of an IIN (currently 6 digits) in which case subsequent digits\n         * are ignored and may range from 0-9.\n         * </p>\n         * <p>\n         * The low and high parameters may be different lengths.\n         * e.g. Discover \"644\" and \"65\".\n         * </p>\n         * @param low the low digits of the IIN range\n         * @param high the high digits of the IIN range\n         * @param lengths array of valid lengths\n         */\n        public CreditCardRange(final String low, final String high, final int [] lengths) {\n            this.low = low;\n            this.high = high;\n            this.minLen = -1;\n            this.maxLen = -1;\n            this.lengths = lengths.clone();\n        }\n    }\n\n    private static final long serialVersionUID = 5955978921148959496L;\n\n    private static final int MIN_CC_LENGTH = 12; // minimum allowed length\n\n    private static final int MAX_CC_LENGTH = 19; // maximum allowed length\n\n    /**\n     * Option specifying that no cards are allowed.  This is useful if\n     * you want only custom card types to validate so you turn off the\n     * default cards with this option.\n     *\n     * <pre>\n     * {@code\n     * CreditCardValidator v = new CreditCardValidator(CreditCardValidator.NONE);\n     * v.addAllowedCardType(customType);\n     * v.isValid(aCardNumber);\n     * }\n     * </pre>\n     */\n    public static final long NONE = 0;\n\n    /**\n     * Option specifying that American Express cards are allowed.\n     */\n    public static final long AMEX = 1 << 0;\n\n    /**\n     * Option specifying that Visa cards are allowed.\n     */\n    public static final long VISA = 1 << 1;\n\n    /**\n     * Option specifying that Mastercard cards are allowed.\n     */\n    public static final long MASTERCARD = 1 << 2;\n\n    /**\n     * Option specifying that Discover cards are allowed.\n     */\n    public static final long DISCOVER = 1 << 3; // CHECKSTYLE IGNORE MagicNumber\n\n    /**\n     * Option specifying that Diners cards are allowed.\n     */\n    public static final long DINERS = 1 << 4; // CHECKSTYLE IGNORE MagicNumber\n\n    /**\n     * Option specifying that VPay (Visa) cards are allowed.\n     * @since 1.5.0\n     */\n    public static final long VPAY = 1 << 5; // CHECKSTYLE IGNORE MagicNumber\n\n    /**\n     * Option specifying that Mastercard cards (pre Oct 2016 only) are allowed.\n     * @deprecated for use until Oct 2016 only\n     */\n    @Deprecated\n    public static final long MASTERCARD_PRE_OCT2016 = 1 << 6; // CHECKSTYLE IGNORE MagicNumber\n\n    /**\n     * Luhn checkdigit validator for the card numbers.\n     */\n    private static final CheckDigit LUHN_VALIDATOR = LuhnCheckDigit.LUHN_CHECK_DIGIT;\n\n    /**\n     * American Express (Amex) Card Validator\n     * <ul>\n     * <li>34xxxx (15)</li>\n     * <li>37xxxx (15)</li>\n     * </ul>\n     */\n    public static final CodeValidator AMEX_VALIDATOR = new CodeValidator(\"^(3[47]\\\\d{13})$\", LUHN_VALIDATOR);\n\n    /**\n     * Diners Card Validator\n     * <ul>\n     * <li>300xxx - 305xxx (14)</li>\n     * <li>3095xx (14)</li>\n     * <li>36xxxx (14)</li>\n     * <li>38xxxx (14)</li>\n     * <li>39xxxx (14)</li>\n     * </ul>\n     */\n    public static final CodeValidator DINERS_VALIDATOR = new CodeValidator(\"^(30[0-5]\\\\d{11}|3095\\\\d{10}|36\\\\d{12}|3[8-9]\\\\d{12})$\", LUHN_VALIDATOR);\n\n    /**\n     * Discover Card regular expressions\n     * <ul>\n     * <li>6011xx (16)</li>\n     * <li>644xxx - 65xxxx (16)</li>\n     * </ul>\n     */\n    private static final RegexValidator DISCOVER_REGEX = new RegexValidator(\"^(6011\\\\d{12,13})$\", \"^(64[4-9]\\\\d{13})$\", \"^(65\\\\d{14})$\", \"^(62[2-8]\\\\d{13})$\");\n\n    /** Discover Card Validator */\n    public static final CodeValidator DISCOVER_VALIDATOR = new CodeValidator(DISCOVER_REGEX, LUHN_VALIDATOR);\n\n    /**\n     * Mastercard regular expressions\n     * <ul>\n     * <li>2221xx - 2720xx (16)</li>\n     * <li>51xxx - 55xxx (16)</li>\n     * </ul>\n     */\n    private static final RegexValidator MASTERCARD_REGEX = new RegexValidator(\n            \"^(5[1-5]\\\\d{14})$\",   // 51 - 55 (pre Oct 2016)\n            // valid from October 2016\n            \"^(2221\\\\d{12})$\",     // 222100 - 222199\n            \"^(222[2-9]\\\\d{12})$\", // 222200 - 222999\n            \"^(22[3-9]\\\\d{13})$\",  // 223000 - 229999\n            \"^(2[3-6]\\\\d{14})$\",   // 230000 - 269999\n            \"^(27[01]\\\\d{13})$\",   // 270000 - 271999\n            \"^(2720\\\\d{12})$\"      // 272000 - 272099\n        );\n\n    /** Mastercard Card Validator */\n    public static final CodeValidator MASTERCARD_VALIDATOR = new CodeValidator(MASTERCARD_REGEX, LUHN_VALIDATOR);\n\n    /**\n     * Mastercard Card Validator (pre Oct 2016)\n     * @deprecated for use until Oct 2016 only\n     */\n    @Deprecated\n    public static final CodeValidator MASTERCARD_VALIDATOR_PRE_OCT2016 = new CodeValidator(\"^(5[1-5]\\\\d{14})$\", LUHN_VALIDATOR);\n\n    /**\n     * Visa Card Validator\n     * <p>\n     * 4xxxxx (13 or 16)\n     * </p>\n     */\n    public static final CodeValidator VISA_VALIDATOR = new CodeValidator(\"^(4)(\\\\d{12}|\\\\d{15})$\", LUHN_VALIDATOR);\n\n    /**\n     * VPay (Visa) Card Validator\n     * <p>\n     * 4xxxxx (13-19)\n     * </p>\n     * @since 1.5.0\n     */\n    public static final CodeValidator VPAY_VALIDATOR = new CodeValidator(\"^(4)(\\\\d{12,18})$\", LUHN_VALIDATOR);\n\n    // package protected for unit test access\n    static CodeValidator createRangeValidator(final CreditCardRange[] creditCardRanges, final CheckDigit digitCheck) {\n        return new CodeValidator(\n                // must be numeric (rest of validation is done later)\n                new RegexValidator(\"(\\\\d+)\") {\n                    private static final long serialVersionUID = 1L;\n                    private final transient CreditCardRange[] ccr = creditCardRanges.clone();\n\n                    @Override\n                    public boolean isValid(final String value) {\n                        return validate(value) != null;\n                    }\n\n                    @Override\n                    public String[] match(final String value) {\n                        return new String[] { validate(value) };\n                    }\n\n                    @Override\n                    // must return full string\n                    public String validate(final String value) {\n                        if (super.match(value) != null) {\n                            final int length = value.length();\n                            for (final CreditCardRange range : ccr) {\n                                if (validLength(length, range)) {\n                                    if (range.high == null) { // single prefix only\n                                        if (value.startsWith(range.low)) {\n                                            return value;\n                                        }\n                                    } else if (range.low.compareTo(value) <= 0 // no need to trim value here\n                                            &&\n                                    // here we have to ignore digits beyond the prefix\n                                            range.high.compareTo(value.substring(0, range.high.length())) >= 0) {\n                                        return value;\n                                    }\n                                }\n                            }\n                        }\n                        return null;\n                    }\n                }, digitCheck);\n    }\n\n    /**\n     * Creates a new generic CreditCardValidator which validates the syntax and check digit only.\n     * Does not check the Issuer Identification Number (IIN)\n     *\n     * @return the validator\n     * @since 1.6\n     */\n    public static CreditCardValidator genericCreditCardValidator() {\n        return genericCreditCardValidator(MIN_CC_LENGTH, MAX_CC_LENGTH);\n    }\n\n    /**\n     * Creates a new generic CreditCardValidator which validates the syntax and check digit only.\n     * Does not check the Issuer Identification Number (IIN)\n     *\n     * @param length exact length\n     * @return the validator\n     * @since 1.6\n     */\n    public static CreditCardValidator genericCreditCardValidator(final int length) {\n        return genericCreditCardValidator(length, length);\n    }\n\n    /**\n     * Creates a new generic CreditCardValidator which validates the syntax and check digit only.\n     * Does not check the Issuer Identification Number (IIN)\n     *\n     * @param minLen minimum allowed length\n     * @param maxLen maximum allowed length\n     * @return the validator\n     * @since 1.6\n     */\n    public static CreditCardValidator genericCreditCardValidator(final int minLen, final int maxLen) {\n        return new CreditCardValidator(new CodeValidator[] {new CodeValidator(\"(\\\\d+)\", minLen, maxLen, LUHN_VALIDATOR)});\n    }\n\n    // package protected for unit test access\n    static boolean validLength(final int valueLength, final CreditCardRange range) {\n        if (range.lengths != null) {\n            for (final int length : range.lengths) {\n                if (valueLength == length) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        return valueLength >= range.minLen && valueLength <= range.maxLen;\n    }\n\n    /**\n     * The CreditCardTypes that are allowed to pass validation.\n     */\n    private final List<CodeValidator> cardTypes = new ArrayList<>();\n\n    /**\n     * Constructs a new CreditCardValidator with default options.\n     * The default options are:\n     * AMEX, VISA, MASTERCARD and DISCOVER\n     */\n    public CreditCardValidator() {\n        this(AMEX + VISA + MASTERCARD + DISCOVER);\n    }\n\n    /**\n     * Constructs a new CreditCardValidator with the specified {@link CodeValidator}s.\n     * @param creditCardValidators Set of valid code validators\n     */\n    public CreditCardValidator(final CodeValidator[] creditCardValidators) {\n        if (creditCardValidators == null) {\n            throw new IllegalArgumentException(\"Card validators are missing\");\n        }\n        Collections.addAll(cardTypes, creditCardValidators);\n    }\n\n    /**\n     * Constructs a new CreditCardValidator with the specified {@link CodeValidator}s\n     * and {@link CreditCardRange}s.\n     * <p>\n     * This can be used to combine predefined validators such as {@link #MASTERCARD_VALIDATOR}\n     * with additional validators using the simpler {@link CreditCardRange}s.\n     * @param creditCardValidators Set of valid code validators\n     * @param creditCardRanges Set of valid code validators\n     * @since 1.6\n     */\n    public CreditCardValidator(final CodeValidator[] creditCardValidators, final CreditCardRange[] creditCardRanges) {\n        if (creditCardValidators == null) {\n            throw new IllegalArgumentException(\"Card validators are missing\");\n        }\n        if (creditCardRanges == null) {\n            throw new IllegalArgumentException(\"Card ranges are missing\");\n        }\n        Collections.addAll(cardTypes, creditCardValidators);\n        Collections.addAll(cardTypes, createRangeValidator(creditCardRanges, LUHN_VALIDATOR));\n    }\n\n    /**\n     * Constructs a new CreditCardValidator with the specified {@link CreditCardRange}s.\n     * @param creditCardRanges Set of valid code validators\n     * @since 1.6\n     */\n    public CreditCardValidator(final CreditCardRange[] creditCardRanges) {\n        if (creditCardRanges == null) {\n            throw new IllegalArgumentException(\"Card ranges are missing\");\n        }\n        Collections.addAll(cardTypes, createRangeValidator(creditCardRanges, LUHN_VALIDATOR));\n    }\n\n    /**\n     * Constructs a new CreditCardValidator with the specified options.\n     * @param options Pass in\n     * CreditCardValidator.VISA + CreditCardValidator.AMEX to specify that\n     * those are the only valid card types.\n     */\n    public CreditCardValidator(final long options) {\n        if (isOn(options, VISA)) {\n            cardTypes.add(VISA_VALIDATOR);\n        }\n\n        if (isOn(options, VPAY)) {\n            cardTypes.add(VPAY_VALIDATOR);\n        }\n\n        if (isOn(options, AMEX)) {\n            cardTypes.add(AMEX_VALIDATOR);\n        }\n\n        if (isOn(options, MASTERCARD)) {\n            cardTypes.add(MASTERCARD_VALIDATOR);\n        }\n\n        if (isOn(options, MASTERCARD_PRE_OCT2016)) {\n            cardTypes.add(MASTERCARD_VALIDATOR_PRE_OCT2016);\n        }\n\n        if (isOn(options, DISCOVER)) {\n            cardTypes.add(DISCOVER_VALIDATOR);\n        }\n\n        if (isOn(options, DINERS)) {\n            cardTypes.add(DINERS_VALIDATOR);\n        }\n    }\n\n    /**\n     * Tests whether the given flag is on.  If the flag is not a power of 2\n     * (ie. 3) this tests whether the combination of flags is on.\n     *\n     * @param options The options specified.\n     * @param flag Flag value to check.\n     *\n     * @return whether the specified flag value is on.\n     */\n    private boolean isOn(final long options, final long flag) {\n        return (options & flag) > 0;\n    }\n\n    /**\n     * Checks if the field is a valid credit card number.\n     * @param card The card number to validate.\n     * @return Whether the card number is valid.\n     */\n    public boolean isValid(final String card) {\n        if (GenericValidator.isBlankOrNull(card)) {\n            return false;\n        }\n        for (final CodeValidator cardType : cardTypes) {\n            if (cardType.isValid(card)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Checks if the field is a valid credit card number.\n     * @param card The card number to validate.\n     * @return The card number if valid or {@code null}\n     * if invalid.\n     */\n    public Object validate(final String card) {\n        if (GenericValidator.isBlankOrNull(card)) {\n            return null;\n        }\n        Object result = null;\n        for (final CodeValidator cardType : cardTypes) {\n            result = cardType.validate(card);\n            if (result != null) {\n                return result;\n            }\n        }\n        return null;\n\n    }\n\n}", "super_interfaces": ["Serializable"], "fields": [{"attribute_expression": "private static final long serialVersionUID = 5955978921148959496L;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "serialVersionUID = 5955978921148959496L", "syntax_pass": true}, {"attribute_expression": "private static final int MIN_CC_LENGTH = 12;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "MIN_CC_LENGTH = 12", "syntax_pass": true}, {"attribute_expression": "private static final int MAX_CC_LENGTH = 19;", "docstring": " minimum allowed length", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "MAX_CC_LENGTH = 19", "syntax_pass": true}, {"attribute_expression": "public static final long NONE = 0;", "docstring": "\nOption specifying that no cards are allowed.  This is useful if\nyou want only custom card types to validate so you turn off the\ndefault cards with this option.\n\n<pre>\n{@code\nCreditCardValidator v = new CreditCardValidator(CreditCardValidator.NONE);\nv.addAllowedCardType(customType);\nv.isValid(aCardNumber);\n}\n</pre>\n", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "long", "name": "NONE = 0", "syntax_pass": true}, {"attribute_expression": "public static final long AMEX = 1 << 0;", "docstring": "\nOption specifying that American Express cards are allowed.\n", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "long", "name": "AMEX = 1 << 0", "syntax_pass": true}, {"attribute_expression": "public static final long VISA = 1 << 1;", "docstring": "\nOption specifying that Visa cards are allowed.\n", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "long", "name": "VISA = 1 << 1", "syntax_pass": true}, {"attribute_expression": "public static final long MASTERCARD = 1 << 2;", "docstring": "\nOption specifying that Mastercard cards are allowed.\n", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "long", "name": "MASTERCARD = 1 << 2", "syntax_pass": true}, {"attribute_expression": "public static final long DISCOVER = 1 << 3;", "docstring": "\nOption specifying that Discover cards are allowed.\n", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "long", "name": "DISCOVER = 1 << 3", "syntax_pass": true}, {"attribute_expression": "public static final long DINERS = 1 << 4;", "docstring": "\nOption specifying that Diners cards are allowed.\n", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "long", "name": "DINERS = 1 << 4", "syntax_pass": true}, {"attribute_expression": "public static final long VPAY = 1 << 5;", "docstring": "\nOption specifying that VPay (Visa) cards are allowed.\n@since 1.5.0\n", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "long", "name": "VPAY = 1 << 5", "syntax_pass": true}, {"attribute_expression": "@Deprecated\n    public static final long MASTERCARD_PRE_OCT2016 = 1 << 6;", "docstring": "\nOption specifying that Mastercard cards (pre Oct 2016 only) are allowed.\n@deprecated for use until Oct 2016 only\n", "modifiers": "@Deprecated\n    public static final", "marker_annotations": ["@Deprecated"], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "long", "name": "MASTERCARD_PRE_OCT2016 = 1 << 6", "syntax_pass": true}, {"attribute_expression": "private static final CheckDigit LUHN_VALIDATOR = LuhnCheckDigit.LUHN_CHECK_DIGIT;", "docstring": "\nLuhn checkdigit validator for the card numbers.\n", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "CheckDigit", "name": "LUHN_VALIDATOR = LuhnCheckDigit.LUHN_CHECK_DIGIT", "syntax_pass": true}, {"attribute_expression": "public static final CodeValidator AMEX_VALIDATOR = new CodeValidator(\"^(3[47]\\\\d{13})$\", LUHN_VALIDATOR);", "docstring": "\nAmerican Express (Amex) Card Validator\n<ul>\n<li>34xxxx (15)</li>\n<li>37xxxx (15)</li>\n</ul>\n", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "CodeValidator", "name": "AMEX_VALIDATOR = new CodeValidator(\"^(3[47]\\\\d{13})$\", LUHN_VALIDATOR)", "syntax_pass": true}, {"attribute_expression": "public static final CodeValidator DINERS_VALIDATOR = new CodeValidator(\"^(30[0-5]\\\\d{11}|3095\\\\d{10}|36\\\\d{12}|3[8-9]\\\\d{12})$\", LUHN_VALIDATOR);", "docstring": "\nDiners Card Validator\n<ul>\n<li>300xxx - 305xxx (14)</li>\n<li>3095xx (14)</li>\n<li>36xxxx (14)</li>\n<li>38xxxx (14)</li>\n<li>39xxxx (14)</li>\n</ul>\n", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "CodeValidator", "name": "DINERS_VALIDATOR = new CodeValidator(\"^(30[0-5]\\\\d{11}|3095\\\\d{10}|36\\\\d{12}|3[8-9]\\\\d{12})$\", LUHN_VALIDATOR)", "syntax_pass": true}, {"attribute_expression": "private static final RegexValidator DISCOVER_REGEX = new RegexValidator(\"^(6011\\\\d{12,13})$\", \"^(64[4-9]\\\\d{13})$\", \"^(65\\\\d{14})$\", \"^(62[2-8]\\\\d{13})$\");", "docstring": "\nDiscover Card regular expressions\n<ul>\n<li>6011xx (16)</li>\n<li>644xxx - 65xxxx (16)</li>\n</ul>\n", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "RegexValidator", "name": "DISCOVER_REGEX = new RegexValidator(\"^(6011\\\\d{12,13})$\", \"^(64[4-9]\\\\d{13})$\", \"^(65\\\\d{14})$\", \"^(62[2-8]\\\\d{13})$\")", "syntax_pass": true}, {"attribute_expression": "public static final CodeValidator DISCOVER_VALIDATOR = new CodeValidator(DISCOVER_REGEX, LUHN_VALIDATOR);", "docstring": " Discover Card Validator", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "CodeValidator", "name": "DISCOVER_VALIDATOR = new CodeValidator(DISCOVER_REGEX, LUHN_VALIDATOR)", "syntax_pass": true}, {"attribute_expression": "private static final RegexValidator MASTERCARD_REGEX = new RegexValidator(\n            \"^(5[1-5]\\\\d{14})$\",   // 51 - 55 (pre Oct 2016)\n            // valid from October 2016\n            \"^(2221\\\\d{12})$\",     // 222100 - 222199\n            \"^(222[2-9]\\\\d{12})$\", // 222200 - 222999\n            \"^(22[3-9]\\\\d{13})$\",  // 223000 - 229999\n            \"^(2[3-6]\\\\d{14})$\",   // 230000 - 269999\n            \"^(27[01]\\\\d{13})$\",   // 270000 - 271999\n            \"^(2720\\\\d{12})$\"      // 272000 - 272099\n        );", "docstring": "\nMastercard regular expressions\n<ul>\n<li>2221xx - 2720xx (16)</li>\n<li>51xxx - 55xxx (16)</li>\n</ul>\n", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "RegexValidator", "name": "MASTERCARD_REGEX = new RegexValidator(\n            \"^(5[1-5]\\\\d{14})$\",   // 51 - 55 (pre Oct 2016)\n            // valid from October 2016\n            \"^(2221\\\\d{12})$\",     // 222100 - 222199\n            \"^(222[2-9]\\\\d{12})$\", // 222200 - 222999\n            \"^(22[3-9]\\\\d{13})$\",  // 223000 - 229999\n            \"^(2[3-6]\\\\d{14})$\",   // 230000 - 269999\n            \"^(27[01]\\\\d{13})$\",   // 270000 - 271999\n            \"^(2720\\\\d{12})$\"      // 272000 - 272099\n        )", "syntax_pass": true}, {"attribute_expression": "public static final CodeValidator MASTERCARD_VALIDATOR = new CodeValidator(MASTERCARD_REGEX, LUHN_VALIDATOR);", "docstring": " Mastercard Card Validator", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "CodeValidator", "name": "MASTERCARD_VALIDATOR = new CodeValidator(MASTERCARD_REGEX, LUHN_VALIDATOR)", "syntax_pass": true}, {"attribute_expression": "@Deprecated\n    public static final CodeValidator MASTERCARD_VALIDATOR_PRE_OCT2016 = new CodeValidator(\"^(5[1-5]\\\\d{14})$\", LUHN_VALIDATOR);", "docstring": "\nMastercard Card Validator (pre Oct 2016)\n@deprecated for use until Oct 2016 only\n", "modifiers": "@Deprecated\n    public static final", "marker_annotations": ["@Deprecated"], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "CodeValidator", "name": "MASTERCARD_VALIDATOR_PRE_OCT2016 = new CodeValidator(\"^(5[1-5]\\\\d{14})$\", LUHN_VALIDATOR)", "syntax_pass": true}, {"attribute_expression": "public static final CodeValidator VISA_VALIDATOR = new CodeValidator(\"^(4)(\\\\d{12}|\\\\d{15})$\", LUHN_VALIDATOR);", "docstring": "\nVisa Card Validator\n<p>\n4xxxxx (13 or 16)\n</p>\n", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "CodeValidator", "name": "VISA_VALIDATOR = new CodeValidator(\"^(4)(\\\\d{12}|\\\\d{15})$\", LUHN_VALIDATOR)", "syntax_pass": true}, {"attribute_expression": "public static final CodeValidator VPAY_VALIDATOR = new CodeValidator(\"^(4)(\\\\d{12,18})$\", LUHN_VALIDATOR);", "docstring": "\nVPay (Visa) Card Validator\n<p>\n4xxxxx (13-19)\n</p>\n@since 1.5.0\n", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "CodeValidator", "name": "VPAY_VALIDATOR = new CodeValidator(\"^(4)(\\\\d{12,18})$\", LUHN_VALIDATOR)", "syntax_pass": true}, {"attribute_expression": "private final List<CodeValidator> cardTypes = new ArrayList<>();", "docstring": "\nThe CreditCardTypes that are allowed to pass validation.\n", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "List<CodeValidator>", "name": "cardTypes = new ArrayList<>()", "syntax_pass": true}]}, {"uris": "src/main/java/org/apache/commons/validator/routines/ShortValidator.java.ShortValidator", "name": "ShortValidator", "file_path": "src/main/java/org/apache/commons/validator/routines/ShortValidator.java", "superclasses": "AbstractNumberValidator", "methods": ["[ShortValidator]getInstance()", "[]ShortValidator()", "[]ShortValidator(boolean,int)", "[boolean]isInRange(short,short,short)", "[boolean]isInRange(Short,short,short)", "[boolean]maxValue(short,short)", "[boolean]maxValue(Short,short)", "[boolean]minValue(short,short)", "[boolean]minValue(Short,short)", "[Object]processParsedValue(Object,Format)", "[Short]validate(String)", "[Short]validate(String,Locale)", "[Short]validate(String,String)", "[Short]validate(String,String,Locale)"], "method_uris": ["src/main/java/org/apache/commons/validator/routines/ShortValidator.java.ShortValidator.[ShortValidator]getInstance()", "src/main/java/org/apache/commons/validator/routines/ShortValidator.java.ShortValidator.[]ShortValidator()", "src/main/java/org/apache/commons/validator/routines/ShortValidator.java.ShortValidator.[]ShortValidator(boolean,int)", "src/main/java/org/apache/commons/validator/routines/ShortValidator.java.ShortValidator.[boolean]isInRange(short,short,short)", "src/main/java/org/apache/commons/validator/routines/ShortValidator.java.ShortValidator.[boolean]isInRange(Short,short,short)", "src/main/java/org/apache/commons/validator/routines/ShortValidator.java.ShortValidator.[boolean]maxValue(short,short)", "src/main/java/org/apache/commons/validator/routines/ShortValidator.java.ShortValidator.[boolean]maxValue(Short,short)", "src/main/java/org/apache/commons/validator/routines/ShortValidator.java.ShortValidator.[boolean]minValue(short,short)", "src/main/java/org/apache/commons/validator/routines/ShortValidator.java.ShortValidator.[boolean]minValue(Short,short)", "src/main/java/org/apache/commons/validator/routines/ShortValidator.java.ShortValidator.[Object]processParsedValue(Object,Format)", "src/main/java/org/apache/commons/validator/routines/ShortValidator.java.ShortValidator.[Short]validate(String)", "src/main/java/org/apache/commons/validator/routines/ShortValidator.java.ShortValidator.[Short]validate(String,Locale)", "src/main/java/org/apache/commons/validator/routines/ShortValidator.java.ShortValidator.[Short]validate(String,String)", "src/main/java/org/apache/commons/validator/routines/ShortValidator.java.ShortValidator.[Short]validate(String,String,Locale)"], "overrides": null, "attributes": [], "class_docstring": "\n<p><b>Short Validation</b> and Conversion routines ({@code java.lang.Short}).</p>\n\n<p>This validator provides a number of methods for\n   validating/converting a {@link String} value to\n   a {@code Short} using {@link NumberFormat}\n   to parse either:</p>\n   <ul>\n      <li>using the default format for the default {@link Locale}</li>\n      <li>using a specified pattern with the default {@link Locale}</li>\n      <li>using the default format for a specified {@link Locale}</li>\n      <li>using a specified pattern with a specified {@link Locale}</li>\n   </ul>\n\n<p>Use one of the {@code isValid()} methods to just validate or\n   one of the {@code validate()} methods to validate and receive a\n   <em>converted</em> {@code Short} value.</p>\n\n<p>Once a value has been successfully converted the following\n   methods can be used to perform minimum, maximum and range checks:</p>\n   <ul>\n      <li>{@code minValue()} checks whether the value is greater\n          than or equal to a specified minimum.</li>\n      <li>{@code maxValue()} checks whether the value is less\n          than or equal to a specified maximum.</li>\n      <li>{@code isInRange()} checks whether the value is within\n          a specified range of values.</li>\n   </ul>\n\n<p>So that the same mechanism used for parsing an <em>input</em> value\n   for validation can be used to format <em>output</em>, corresponding\n   {@code format()} methods are also provided. That is you can\n   format either:</p>\n   <ul>\n      <li>using the default format for the default {@link Locale}</li>\n      <li>using a specified pattern with the default {@link Locale}</li>\n      <li>using the default format for a specified {@link Locale}</li>\n      <li>using a specified pattern with a specified {@link Locale}</li>\n   </ul>\n\n@since 1.3.0\n", "original_string": "public class ShortValidator extends AbstractNumberValidator {\n\n    private static final long serialVersionUID = -5227510699747787066L;\n\n    private static final ShortValidator VALIDATOR = new ShortValidator();\n\n    /**\n     * Gets the singleton instance of this validator.\n     * @return A singleton instance of the ShortValidator.\n     */\n    public static ShortValidator getInstance() {\n        return VALIDATOR;\n    }\n\n    /**\n     * Constructs a <em>strict</em> instance.\n     */\n    public ShortValidator() {\n        this(true, STANDARD_FORMAT);\n    }\n\n    /**\n     * <p>Construct an instance with the specified strict setting\n     *    and format type.</p>\n     *\n     * <p>The {@code formatType} specified what type of\n     *    {@code NumberFormat} is created - valid types\n     *    are:</p>\n     *    <ul>\n     *       <li>AbstractNumberValidator.STANDARD_FORMAT -to create\n     *           <em>standard</em> number formats (the default).</li>\n     *       <li>AbstractNumberValidator.CURRENCY_FORMAT -to create\n     *           <em>currency</em> number formats.</li>\n     *       <li>AbstractNumberValidator.PERCENT_FORMAT -to create\n     *           <em>percent</em> number formats (the default).</li>\n     *    </ul>\n     *\n     * @param strict {@code true} if strict\n     *        {@code Format} parsing should be used.\n     * @param formatType The {@code NumberFormat} type to\n     *        create for validation, default is STANDARD_FORMAT.\n     */\n    public ShortValidator(final boolean strict, final int formatType) {\n        super(strict, formatType, false);\n    }\n\n    /**\n     * Check if the value is within a specified range.\n     *\n     * @param value The {@code Number} value to check.\n     * @param min The minimum value of the range.\n     * @param max The maximum value of the range.\n     * @return {@code true} if the value is within the\n     *         specified range.\n     */\n    public boolean isInRange(final short value, final short min, final short max) {\n        return value >= min && value <= max;\n    }\n\n    /**\n     * Check if the value is within a specified range.\n     *\n     * @param value The {@code Number} value to check.\n     * @param min The minimum value of the range.\n     * @param max The maximum value of the range.\n     * @return {@code true} if the value is within the\n     *         specified range.\n     */\n    public boolean isInRange(final Short value, final short min, final short max) {\n        return isInRange(value.shortValue(), min, max);\n    }\n\n    /**\n     * Check if the value is less than or equal to a maximum.\n     *\n     * @param value The value validation is being performed on.\n     * @param max The maximum value.\n     * @return {@code true} if the value is less than\n     *         or equal to the maximum.\n     */\n    public boolean maxValue(final short value, final short max) {\n        return value <= max;\n    }\n\n    /**\n     * Check if the value is less than or equal to a maximum.\n     *\n     * @param value The value validation is being performed on.\n     * @param max The maximum value.\n     * @return {@code true} if the value is less than\n     *         or equal to the maximum.\n     */\n    public boolean maxValue(final Short value, final short max) {\n        return maxValue(value.shortValue(), max);\n    }\n\n    /**\n     * Check if the value is greater than or equal to a minimum.\n     *\n     * @param value The value validation is being performed on.\n     * @param min The minimum value.\n     * @return {@code true} if the value is greater than\n     *         or equal to the minimum.\n     */\n    public boolean minValue(final short value, final short min) {\n        return value >= min;\n    }\n\n    /**\n     * Check if the value is greater than or equal to a minimum.\n     *\n     * @param value The value validation is being performed on.\n     * @param min The minimum value.\n     * @return {@code true} if the value is greater than\n     *         or equal to the minimum.\n     */\n    public boolean minValue(final Short value, final short min) {\n        return minValue(value.shortValue(), min);\n    }\n\n    /**\n     * <p>Perform further validation and convert the {@code Number} to\n     * a {@code Short}.</p>\n     *\n     * @param value The parsed {@code Number} object created.\n     * @param formatter The Format used to parse the value with.\n     * @return The parsed {@code Number} converted to a\n     *   {@code Short} if valid or {@code null} if invalid.\n     */\n    @Override\n    protected Object processParsedValue(final Object value, final Format formatter) {\n\n        final long longValue = ((Number) value).longValue();\n\n        if (longValue < Short.MIN_VALUE ||\n            longValue > Short.MAX_VALUE) {\n            return null;\n        }\n        return Short.valueOf((short) longValue);\n    }\n\n    /**\n     * <p>Validate/convert a {@code Short} using the default\n     *    {@link Locale}.\n     *\n     * @param value The value validation is being performed on.\n     * @return The parsed {@code Short} if valid or {@code null}\n     *  if invalid.\n     */\n    public Short validate(final String value) {\n        return (Short) parse(value, (String) null, (Locale) null);\n    }\n\n    /**\n     * <p>Validate/convert a {@code Short} using the\n     *    specified {@link Locale}.\n     *\n     * @param value The value validation is being performed on.\n     * @param locale The locale to use for the number format, system default if null.\n     * @return The parsed {@code Short} if valid or {@code null} if invalid.\n     */\n    public Short validate(final String value, final Locale locale) {\n        return (Short) parse(value, (String) null, locale);\n    }\n\n    /**\n     * <p>Validate/convert a {@code Short} using the\n     *    specified <em>pattern</em>.\n     *\n     * @param value The value validation is being performed on.\n     * @param pattern The pattern used to validate the value against.\n     * @return The parsed {@code Short} if valid or {@code null} if invalid.\n     */\n    public Short validate(final String value, final String pattern) {\n        return (Short) parse(value, pattern, (Locale) null);\n    }\n\n    /**\n     * <p>Validate/convert a {@code Short} using the\n     *    specified pattern and/ or {@link Locale}.\n     *\n     * @param value The value validation is being performed on.\n     * @param pattern The pattern used to validate the value against, or the\n     *        default for the {@link Locale} if {@code null}.\n     * @param locale The locale to use for the date format, system default if null.\n     * @return The parsed {@code Short} if valid or {@code null} if invalid.\n     */\n    public Short validate(final String value, final String pattern, final Locale locale) {\n        return (Short) parse(value, pattern, locale);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final long serialVersionUID = -5227510699747787066L;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "serialVersionUID = -5227510699747787066L", "syntax_pass": true}, {"attribute_expression": "private static final ShortValidator VALIDATOR = new ShortValidator();", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "ShortValidator", "name": "VALIDATOR = new ShortValidator()", "syntax_pass": true}]}, {"uris": "src/main/java/org/apache/commons/validator/routines/IBANValidator.java.IBANValidator", "name": "IBANValidator", "file_path": "src/main/java/org/apache/commons/validator/routines/IBANValidator.java", "superclasses": "", "methods": ["[IBANValidator]getInstance()", "[]IBANValidator()", "[]IBANValidator(Validator[])", "[ConcurrentMap<String, Validator>]createValidators(Validator[])", "[Validator[]]getDefaultValidators()", "[Validator]getValidator(String)", "[boolean]hasValidator(String)", "[boolean]isValid(String)", "[Validator]setValidator(String,int,String)", "[Validator]setValidator(Validator)"], "method_uris": ["src/main/java/org/apache/commons/validator/routines/IBANValidator.java.IBANValidator.[IBANValidator]getInstance()", "src/main/java/org/apache/commons/validator/routines/IBANValidator.java.IBANValidator.[]IBANValidator()", "src/main/java/org/apache/commons/validator/routines/IBANValidator.java.IBANValidator.[]IBANValidator(Validator[])", "src/main/java/org/apache/commons/validator/routines/IBANValidator.java.IBANValidator.[ConcurrentMap<String, Validator>]createValidators(Validator[])", "src/main/java/org/apache/commons/validator/routines/IBANValidator.java.IBANValidator.[Validator[]]getDefaultValidators()", "src/main/java/org/apache/commons/validator/routines/IBANValidator.java.IBANValidator.[Validator]getValidator(String)", "src/main/java/org/apache/commons/validator/routines/IBANValidator.java.IBANValidator.[boolean]hasValidator(String)", "src/main/java/org/apache/commons/validator/routines/IBANValidator.java.IBANValidator.[boolean]isValid(String)", "src/main/java/org/apache/commons/validator/routines/IBANValidator.java.IBANValidator.[Validator]setValidator(String,int,String)", "src/main/java/org/apache/commons/validator/routines/IBANValidator.java.IBANValidator.[Validator]setValidator(Validator)"], "overrides": null, "attributes": [{"original_string": "    public static class Validator {\n\n        /**\n         * The minimum length does not appear to be defined by the standard.\n         * Norway is currently the shortest at 15.\n         *\n         * There is no standard for BBANs; they vary between countries.\n         * But a BBAN must consist of a branch id and account number.\n         * Each of these must be at least 2 chars (generally more) so an absolute minimum is\n         * 4 characters for the BBAN and 8 for the IBAN.\n         */\n        private static final int MIN_LEN = 8;\n        private static final int MAX_LEN = 34; // defined by [3]\n\n        final String countryCode;\n        final String[] otherCountryCodes;\n        final RegexValidator regexValidator;\n\n        /**\n         * Used to avoid unnecessary regex matching.\n         */\n        private final int ibanLength;\n\n        /**\n         * Creates the validator.\n         *\n         * @param countryCode the country code\n         * @param ibanLength the length of the IBAN\n         * @param regexWithCC the regex to use to check the format, the regex MUST start with the country code.\n         */\n        public Validator(final String countryCode, final int ibanLength, final String regexWithCC) {\n            this(countryCode, ibanLength, regexWithCC.substring(countryCode.length()), new String[] {});\n        }\n\n        /**\n         * Creates the validator.\n         *\n         * @param countryCode the country code\n         * @param ibanLength the length of the IBAN\n         * @param regexWithoutCC the regex to use to check the format, the regex MUST NOT start with the country code.\n         */\n        Validator(final String countryCode, final int ibanLength, final String regexWithoutCC, final String... otherCountryCodes) {\n            if (!(countryCode.length() == 2 && Character.isUpperCase(countryCode.charAt(0)) && Character.isUpperCase(countryCode.charAt(1)))) {\n                throw new IllegalArgumentException(\"Invalid country Code; must be exactly 2 upper-case characters\");\n            }\n            if (ibanLength > MAX_LEN || ibanLength < MIN_LEN) {\n                throw new IllegalArgumentException(\"Invalid length parameter, must be in range \" + MIN_LEN + \" to \" + MAX_LEN + \" inclusive: \" + ibanLength);\n            }\n            final String regex = countryCode + regexWithoutCC;\n            if (!regex.startsWith(countryCode)) {\n                throw new IllegalArgumentException(\"countryCode '\" + countryCode + \"' does not agree with format: \" + regex);\n            }\n            this.countryCode = countryCode;\n            this.otherCountryCodes = otherCountryCodes.clone();\n            final List<String> regexList = new ArrayList<>(this.otherCountryCodes.length + 1);\n            regexList.add(countryCode + regexWithoutCC);\n            for (final String otherCc : otherCountryCodes) {\n                regexList.add(otherCc + regexWithoutCC);\n            }\n            this.ibanLength = ibanLength;\n            this.regexValidator = new RegexValidator(regexList);\n        }\n\n        /**\n         * Gets the length.\n         *\n         * @return the length.\n         * @since 1.10.0\n         */\n        public int getIbanLength() {\n            return ibanLength;\n        }\n\n        /**\n         * Gets the RegexValidator.\n         *\n         * @return the RegexValidator.\n         * @since 1.8\n         */\n        public RegexValidator getRegexValidator() {\n            return regexValidator;\n        }\n    }", "definition": "    public static class Validator", "class_docstring": "\nThe validation class\n", "name": "Validator", "super_interfaces": [], "superclasses": "", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "fields": [{"attribute_expression": "private static final int MIN_LEN = 8;", "docstring": "\nThe minimum length does not appear to be defined by the standard.\nNorway is currently the shortest at 15.\n\nThere is no standard for BBANs; they vary between countries.\nBut a BBAN must consist of a branch id and account number.\nEach of these must be at least 2 chars (generally more) so an absolute minimum is\n4 characters for the BBAN and 8 for the IBAN.\n", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "MIN_LEN = 8", "syntax_pass": true}, {"attribute_expression": "private static final int MAX_LEN = 34;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "MAX_LEN = 34", "syntax_pass": true}, {"attribute_expression": "final String countryCode;", "docstring": " defined by [3]", "modifiers": "final", "marker_annotations": [], "non_marker_annotations": ["final"], "comments": [], "type": "String", "name": "countryCode", "syntax_pass": true}, {"attribute_expression": "final String[] otherCountryCodes;", "docstring": "", "modifiers": "final", "marker_annotations": [], "non_marker_annotations": ["final"], "comments": [], "type": "String[]", "name": "otherCountryCodes", "syntax_pass": true}, {"attribute_expression": "final RegexValidator regexValidator;", "docstring": "", "modifiers": "final", "marker_annotations": [], "non_marker_annotations": ["final"], "comments": [], "type": "RegexValidator", "name": "regexValidator", "syntax_pass": true}, {"attribute_expression": "private final int ibanLength;", "docstring": "\nUsed to avoid unnecessary regex matching.\n", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "ibanLength", "syntax_pass": true}], "classes": []}, "syntax_pass": true, "methods": [{"syntax_pass": true, "original_string": "        public Validator(final String countryCode, final int ibanLength, final String regexWithCC) {\n            this(countryCode, ibanLength, regexWithCC.substring(countryCode.length()), new String[] {});\n        }", "docstring": "\nCreates the validator.\n\n@param countryCode the country code\n@param ibanLength the length of the IBAN\n@param regexWithCC the regex to use to check the format, the regex MUST start with the country code.\n", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "name": "Validator", "params": [{"name": "countryCode", "type": "String"}, {"name": "ibanLength", "type": "int"}, {"name": "regexWithCC", "type": "String"}], "body": "                                                                                                   {\n            this(countryCode, ibanLength, regexWithCC.substring(countryCode.length()), new String[] {});\n        }", "signature": "public Validator(final String countryCode, final int ibanLength, final String regexWithCC)"}, {"syntax_pass": true, "original_string": "        Validator(final String countryCode, final int ibanLength, final String regexWithoutCC, final String... otherCountryCodes) {\n            if (!(countryCode.length() == 2 && Character.isUpperCase(countryCode.charAt(0)) && Character.isUpperCase(countryCode.charAt(1)))) {\n                throw new IllegalArgumentException(\"Invalid country Code; must be exactly 2 upper-case characters\");\n            }\n            if (ibanLength > MAX_LEN || ibanLength < MIN_LEN) {\n                throw new IllegalArgumentException(\"Invalid length parameter, must be in range \" + MIN_LEN + \" to \" + MAX_LEN + \" inclusive: \" + ibanLength);\n            }\n            final String regex = countryCode + regexWithoutCC;\n            if (!regex.startsWith(countryCode)) {\n                throw new IllegalArgumentException(\"countryCode '\" + countryCode + \"' does not agree with format: \" + regex);\n            }\n            this.countryCode = countryCode;\n            this.otherCountryCodes = otherCountryCodes.clone();\n            final List<String> regexList = new ArrayList<>(this.otherCountryCodes.length + 1);\n            regexList.add(countryCode + regexWithoutCC);\n            for (final String otherCc : otherCountryCodes) {\n                regexList.add(otherCc + regexWithoutCC);\n            }\n            this.ibanLength = ibanLength;\n            this.regexValidator = new RegexValidator(regexList);\n        }", "docstring": "\nCreates the validator.\n\n@param countryCode the country code\n@param ibanLength the length of the IBAN\n@param regexWithoutCC the regex to use to check the format, the regex MUST NOT start with the country code.\n", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "", "classes": []}, "name": "Validator", "params": [{"name": "countryCode", "type": "String"}, {"name": "ibanLength", "type": "int"}, {"name": "regexWithoutCC", "type": "String"}], "body": "                                                                                                                                  {\n            if (!(countryCode.length() == 2 && Character.isUpperCase(countryCode.charAt(0)) && Character.isUpperCase(countryCode.charAt(1)))) {\n                throw new IllegalArgumentException(\"Invalid country Code; must be exactly 2 upper-case characters\");\n            }\n            if (ibanLength > MAX_LEN || ibanLength < MIN_LEN) {\n                throw new IllegalArgumentException(\"Invalid length parameter, must be in range \" + MIN_LEN + \" to \" + MAX_LEN + \" inclusive: \" + ibanLength);\n            }\n            final String regex = countryCode + regexWithoutCC;\n            if (!regex.startsWith(countryCode)) {\n                throw new IllegalArgumentException(\"countryCode '\" + countryCode + \"' does not agree with format: \" + regex);\n            }\n            this.countryCode = countryCode;\n            this.otherCountryCodes = otherCountryCodes.clone();\n            final List<String> regexList = new ArrayList<>(this.otherCountryCodes.length + 1);\n            regexList.add(countryCode + regexWithoutCC);\n            for (final String otherCc : otherCountryCodes) {\n                regexList.add(otherCc + regexWithoutCC);\n            }\n            this.ibanLength = ibanLength;\n            this.regexValidator = new RegexValidator(regexList);\n        }", "signature": "Validator(final String countryCode, final int ibanLength, final String regexWithoutCC, final String... otherCountryCodes)"}, {"syntax_pass": true, "original_string": "        public int getIbanLength() {\n            return ibanLength;\n        }", "docstring": "\nGets the length.\n\n@return the length.\n@since 1.10.0\n", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "name": "getIbanLength", "params": [], "body": "                                   {\n            return ibanLength;\n        }", "signature": "public int getIbanLength()"}, {"syntax_pass": true, "original_string": "        public RegexValidator getRegexValidator() {\n            return regexValidator;\n        }", "docstring": "\nGets the RegexValidator.\n\n@return the RegexValidator.\n@since 1.8\n", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "RegexValidator", "classes": []}, "name": "getRegexValidator", "params": [], "body": "                                                  {\n            return regexValidator;\n        }", "signature": "public RegexValidator getRegexValidator()"}]}], "class_docstring": "\nIBAN Validator.\n<p>\nThe validator includes a default set of formats derived from the IBAN registry at\nhttps://www.swift.com/standards/data-standards/iban.\n</p>\n<p>\nThis can get out of date, but the set can be adjusted by creating a validator and using the\n{@link #setValidator(String, int, String)} or\n{@link #setValidator(Validator)}\nmethod to add (or remove) an entry.\n</p>\n<p>\nFor example:\n</p>\n<pre>\nIBANValidator ibv = new IBANValidator();\nibv.setValidator(\"XX\", 12, \"XX\\\\d{10}\")\n</pre>\n<p>\nThe singleton default instance cannot be modified in this way.\n</p>\n@since 1.5.0\n", "original_string": "public class IBANValidator {\n\n    /**\n     * The validation class\n     */\n    public static class Validator {\n\n        /**\n         * The minimum length does not appear to be defined by the standard.\n         * Norway is currently the shortest at 15.\n         *\n         * There is no standard for BBANs; they vary between countries.\n         * But a BBAN must consist of a branch id and account number.\n         * Each of these must be at least 2 chars (generally more) so an absolute minimum is\n         * 4 characters for the BBAN and 8 for the IBAN.\n         */\n        private static final int MIN_LEN = 8;\n        private static final int MAX_LEN = 34; // defined by [3]\n\n        final String countryCode;\n        final String[] otherCountryCodes;\n        final RegexValidator regexValidator;\n\n        /**\n         * Used to avoid unnecessary regex matching.\n         */\n        private final int ibanLength;\n\n        /**\n         * Creates the validator.\n         *\n         * @param countryCode the country code\n         * @param ibanLength the length of the IBAN\n         * @param regexWithCC the regex to use to check the format, the regex MUST start with the country code.\n         */\n        public Validator(final String countryCode, final int ibanLength, final String regexWithCC) {\n            this(countryCode, ibanLength, regexWithCC.substring(countryCode.length()), new String[] {});\n        }\n\n        /**\n         * Creates the validator.\n         *\n         * @param countryCode the country code\n         * @param ibanLength the length of the IBAN\n         * @param regexWithoutCC the regex to use to check the format, the regex MUST NOT start with the country code.\n         */\n        Validator(final String countryCode, final int ibanLength, final String regexWithoutCC, final String... otherCountryCodes) {\n            if (!(countryCode.length() == 2 && Character.isUpperCase(countryCode.charAt(0)) && Character.isUpperCase(countryCode.charAt(1)))) {\n                throw new IllegalArgumentException(\"Invalid country Code; must be exactly 2 upper-case characters\");\n            }\n            if (ibanLength > MAX_LEN || ibanLength < MIN_LEN) {\n                throw new IllegalArgumentException(\"Invalid length parameter, must be in range \" + MIN_LEN + \" to \" + MAX_LEN + \" inclusive: \" + ibanLength);\n            }\n            final String regex = countryCode + regexWithoutCC;\n            if (!regex.startsWith(countryCode)) {\n                throw new IllegalArgumentException(\"countryCode '\" + countryCode + \"' does not agree with format: \" + regex);\n            }\n            this.countryCode = countryCode;\n            this.otherCountryCodes = otherCountryCodes.clone();\n            final List<String> regexList = new ArrayList<>(this.otherCountryCodes.length + 1);\n            regexList.add(countryCode + regexWithoutCC);\n            for (final String otherCc : otherCountryCodes) {\n                regexList.add(otherCc + regexWithoutCC);\n            }\n            this.ibanLength = ibanLength;\n            this.regexValidator = new RegexValidator(regexList);\n        }\n\n        /**\n         * Gets the length.\n         *\n         * @return the length.\n         * @since 1.10.0\n         */\n        public int getIbanLength() {\n            return ibanLength;\n        }\n\n        /**\n         * Gets the RegexValidator.\n         *\n         * @return the RegexValidator.\n         * @since 1.8\n         */\n        public RegexValidator getRegexValidator() {\n            return regexValidator;\n        }\n    }\n\n    private static final int SHORT_CODE_LEN = 2;\n\n    private static final Validator[] DEFAULT_VALIDATORS = {                   //\n            new Validator(\"AD\", 24, \"AD\\\\d{10}[A-Z0-9]{12}\"),                 // Andorra\n            new Validator(\"AE\", 23, \"AE\\\\d{21}\"),                             // United Arab Emirates (The)\n            new Validator(\"AL\", 28, \"AL\\\\d{10}[A-Z0-9]{16}\"),                 // Albania\n            new Validator(\"AT\", 20, \"AT\\\\d{18}\"),                             // Austria\n            new Validator(\"AZ\", 28, \"AZ\\\\d{2}[A-Z]{4}[A-Z0-9]{20}\"),          // Azerbaijan\n            new Validator(\"BA\", 20, \"BA\\\\d{18}\"),                             // Bosnia and Herzegovina\n            new Validator(\"BE\", 16, \"BE\\\\d{14}\"),                             // Belgium\n            new Validator(\"BG\", 22, \"BG\\\\d{2}[A-Z]{4}\\\\d{6}[A-Z0-9]{8}\"),     // Bulgaria\n            new Validator(\"BH\", 22, \"BH\\\\d{2}[A-Z]{4}[A-Z0-9]{14}\"),          // Bahrain\n            new Validator(\"BI\", 27, \"BI\\\\d{25}\"),                             // Burundi\n            new Validator(\"BR\", 29, \"BR\\\\d{25}[A-Z]{1}[A-Z0-9]{1}\"),          // Brazil\n            new Validator(\"BY\", 28, \"BY\\\\d{2}[A-Z0-9]{4}\\\\d{4}[A-Z0-9]{16}\"), // Republic of Belarus\n            new Validator(\"CH\", 21, \"CH\\\\d{7}[A-Z0-9]{12}\"),                  // Switzerland\n            new Validator(\"CR\", 22, \"CR\\\\d{20}\"),                             // Costa Rica\n            new Validator(\"CY\", 28, \"CY\\\\d{10}[A-Z0-9]{16}\"),                 // Cyprus\n            new Validator(\"CZ\", 24, \"CZ\\\\d{22}\"),                             // Czechia\n            new Validator(\"DE\", 22, \"DE\\\\d{20}\"),                             // Germany\n            new Validator(\"DJ\", 27, \"DJ\\\\d{25}\"),                             // Djibouti\n            new Validator(\"DK\", 18, \"DK\\\\d{16}\"),                             // Denmark\n            new Validator(\"DO\", 28, \"DO\\\\d{2}[A-Z0-9]{4}\\\\d{20}\"),            // Dominican Republic\n            new Validator(\"EE\", 20, \"EE\\\\d{18}\"),                             // Estonia\n            new Validator(\"EG\", 29, \"EG\\\\d{27}\"),                             // Egypt\n            new Validator(\"ES\", 24, \"ES\\\\d{22}\"),                             // Spain\n            new Validator(\"FI\", 18, \"\\\\d{16}\", \"AX\"),                         // Finland\n            new Validator(\"FK\", 18, \"FK\\\\d{2}[A-Z]{2}\\\\d{12}\"),               // Falkland Islands, since Jul-23\n            new Validator(\"FO\", 18, \"FO\\\\d{16}\"),                             // Faroe Islands\n            new Validator(\"FR\", 27, \"\\\\d{12}[A-Z0-9]{11}\\\\d{2}\", \"GF\", \"GP\", \"MQ\", \"RE\", \"PF\", \"TF\", \"YT\", \"NC\", \"BL\", \"MF\", \"PM\", \"WF\"), // France\n            new Validator(\"GB\", 22, \"\\\\d{2}[A-Z]{4}\\\\d{14}\", \"IM\", \"JE\", \"GG\"), // United Kingdom\n            new Validator(\"GE\", 22, \"GE\\\\d{2}[A-Z]{2}\\\\d{16}\"),               // Georgia\n            new Validator(\"GI\", 23, \"GI\\\\d{2}[A-Z]{4}[A-Z0-9]{15}\"),          // Gibraltar\n            new Validator(\"GL\", 18, \"GL\\\\d{16}\"),                             // Greenland\n            new Validator(\"GR\", 27, \"GR\\\\d{9}[A-Z0-9]{16}\"),                  // Greece\n            new Validator(\"GT\", 28, \"GT\\\\d{2}[A-Z0-9]{24}\"),                  // Guatemala\n            new Validator(\"HR\", 21, \"HR\\\\d{19}\"),                             // Croatia\n            new Validator(\"HU\", 28, \"HU\\\\d{26}\"),                             // Hungary\n            new Validator(\"IE\", 22, \"IE\\\\d{2}[A-Z]{4}\\\\d{14}\"),               // Ireland\n            new Validator(\"IL\", 23, \"IL\\\\d{21}\"),                             // Israel\n            new Validator(\"IQ\", 23, \"IQ\\\\d{2}[A-Z]{4}\\\\d{15}\"),               // Iraq\n            new Validator(\"IS\", 26, \"IS\\\\d{24}\"),                             // Iceland\n            new Validator(\"IT\", 27, \"IT\\\\d{2}[A-Z]{1}\\\\d{10}[A-Z0-9]{12}\"),   // Italy\n            new Validator(\"JO\", 30, \"JO\\\\d{2}[A-Z]{4}\\\\d{4}[A-Z0-9]{18}\"),    // Jordan\n            new Validator(\"KW\", 30, \"KW\\\\d{2}[A-Z]{4}[A-Z0-9]{22}\"),          // Kuwait\n            new Validator(\"KZ\", 20, \"KZ\\\\d{5}[A-Z0-9]{13}\"),                  // Kazakhstan\n            new Validator(\"LB\", 28, \"LB\\\\d{6}[A-Z0-9]{20}\"),                  // Lebanon\n            new Validator(\"LC\", 32, \"LC\\\\d{2}[A-Z]{4}[A-Z0-9]{24}\"),          // Saint Lucia\n            new Validator(\"LI\", 21, \"LI\\\\d{7}[A-Z0-9]{12}\"),                  // Liechtenstein\n            new Validator(\"LT\", 20, \"LT\\\\d{18}\"),                             // Lithuania\n            new Validator(\"LU\", 20, \"LU\\\\d{5}[A-Z0-9]{13}\"),                  // Luxembourg\n            new Validator(\"LV\", 21, \"LV\\\\d{2}[A-Z]{4}[A-Z0-9]{13}\"),          // Latvia\n            new Validator(\"LY\", 25, \"LY\\\\d{23}\"),                             // Libya\n            new Validator(\"MC\", 27, \"MC\\\\d{12}[A-Z0-9]{11}\\\\d{2}\"),           // Monaco\n            new Validator(\"MD\", 24, \"MD\\\\d{2}[A-Z0-9]{20}\"),                  // Moldova\n            new Validator(\"ME\", 22, \"ME\\\\d{20}\"),                             // Montenegro\n            new Validator(\"MK\", 19, \"MK\\\\d{5}[A-Z0-9]{10}\\\\d{2}\"),            // Macedonia\n            new Validator(\"MN\", 20, \"MN\\\\d{18}\"),                             // Mongolia, since Apr-23\n            new Validator(\"MR\", 27, \"MR\\\\d{25}\"),                             // Mauritania\n            new Validator(\"MT\", 31, \"MT\\\\d{2}[A-Z]{4}\\\\d{5}[A-Z0-9]{18}\"),    // Malta\n            new Validator(\"MU\", 30, \"MU\\\\d{2}[A-Z]{4}\\\\d{19}[A-Z]{3}\"),       // Mauritius\n            new Validator(\"NI\", 28, \"NI\\\\d{2}[A-Z]{4}\\\\d{20}\"),               // Nicaragua, since Apr-23\n            new Validator(\"NL\", 18, \"NL\\\\d{2}[A-Z]{4}\\\\d{10}\"),               // Netherlands (The)\n            new Validator(\"NO\", 15, \"NO\\\\d{13}\"),                             // Norway\n            new Validator(\"OM\", 23, \"OM\\\\d{5}[A-Z0-9]{16}\"),                  // Oman, since Mar-24\n            new Validator(\"PK\", 24, \"PK\\\\d{2}[A-Z]{4}[A-Z0-9]{16}\"),          // Pakistan\n            new Validator(\"PL\", 28, \"PL\\\\d{26}\"),                             // Poland\n            new Validator(\"PS\", 29, \"PS\\\\d{2}[A-Z]{4}[A-Z0-9]{21}\"),          // Palestine, State of\n            new Validator(\"PT\", 25, \"PT\\\\d{23}\"),                             // Portugal\n            new Validator(\"QA\", 29, \"QA\\\\d{2}[A-Z]{4}[A-Z0-9]{21}\"),          // Qatar\n            new Validator(\"RO\", 24, \"RO\\\\d{2}[A-Z]{4}[A-Z0-9]{16}\"),          // Romania\n            new Validator(\"RS\", 22, \"RS\\\\d{20}\"),                             // Serbia\n            new Validator(\"RU\", 33, \"RU\\\\d{16}[A-Z0-9]{15}\"),                 // Russia\n            new Validator(\"SA\", 24, \"SA\\\\d{4}[A-Z0-9]{18}\"),                  // Saudi Arabia\n            new Validator(\"SC\", 31, \"SC\\\\d{2}[A-Z]{4}\\\\d{20}[A-Z]{3}\"),       // Seychelles\n            new Validator(\"SD\", 18, \"SD\\\\d{16}\"),                             // Sudan\n            new Validator(\"SE\", 24, \"SE\\\\d{22}\"),                             // Sweden\n            new Validator(\"SI\", 19, \"SI\\\\d{17}\"),                             // Slovenia\n            new Validator(\"SK\", 24, \"SK\\\\d{22}\"),                             // Slovakia\n            new Validator(\"SM\", 27, \"SM\\\\d{2}[A-Z]{1}\\\\d{10}[A-Z0-9]{12}\"),   // San Marino\n            new Validator(\"SO\", 23, \"SO\\\\d{21}\"),                             // Somalia, since Feb-23\n            new Validator(\"ST\", 25, \"ST\\\\d{23}\"),                             // Sao Tome and Principe\n            new Validator(\"SV\", 28, \"SV\\\\d{2}[A-Z]{4}\\\\d{20}\"),               // El Salvador\n            new Validator(\"TL\", 23, \"TL\\\\d{21}\"),                             // Timor-Leste\n            new Validator(\"TN\", 24, \"TN\\\\d{22}\"),                             // Tunisia\n            new Validator(\"TR\", 26, \"TR\\\\d{8}[A-Z0-9]{16}\"),                  // Turkey\n            new Validator(\"UA\", 29, \"UA\\\\d{8}[A-Z0-9]{19}\"),                  // Ukraine\n            new Validator(\"VA\", 22, \"VA\\\\d{20}\"),                             // Vatican City State\n            new Validator(\"VG\", 24, \"VG\\\\d{2}[A-Z]{4}\\\\d{16}\"),               // Virgin Islands\n            new Validator(\"XK\", 20, \"XK\\\\d{18}\"),                             // Kosovo\n    };\n\n    /*\n     * Wikipedia [1] says that only uppercase is allowed.\n     * The SWIFT PDF file [2] implies that lower case is allowed.\n     * However there are no examples using lower-case.\n     * Unfortunately the relevant ISO documents (ISO 13616-1) are not available for free.\n     * The IBANCheckDigit code treats upper and lower case the same,\n     * so any case validation has to be done in this class.\n     *\n     * Note: the European Payments council has a document [3] which includes a description\n     * of the IBAN. Section 5 clearly states that only upper case is allowed.\n     * Also the maximum length is 34 characters (including the country code),\n     * and the length is fixed for each country.\n     *\n     * It looks like lower-case is permitted in BBANs, but they must be converted to\n     * upper case for IBANs.\n     *\n     * [1] https://en.wikipedia.org/wiki/International_Bank_Account_Number\n     * [2] http://www.swift.com/dsp/resources/documents/IBAN_Registry.pdf (404)\n     * => https://www.swift.com/sites/default/files/resources/iban_registry.pdf\n     * The above is an old version (62, Jan 2016)\n     * As of May 2020, the current IBAN standards are located at:\n     * https://www.swift.com/standards/data-standards/iban\n     * The above page contains links for the PDF and TXT (CSV) versions of the registry\n     * Warning: these may not agree -- in the past there have been discrepancies.\n     * The TXT file can be used to determine changes which can be cross-checked in the PDF file.\n     * [3] http://www.europeanpaymentscouncil.eu/documents/ECBS%20IBAN%20standard%20EBS204_V3.2.pdf\n     */\n\n    /** The singleton instance which uses the default formats */\n    public static final IBANValidator DEFAULT_IBAN_VALIDATOR = new IBANValidator();\n\n    /**\n     * Gets the singleton instance of the IBAN validator using the default formats\n     *\n     * @return A singleton instance of the IBAN validator\n     */\n    public static IBANValidator getInstance() {\n        return DEFAULT_IBAN_VALIDATOR;\n    }\n\n    private final ConcurrentMap<String, Validator> validatorMap;\n\n    /**\n     * Create a default IBAN validator.\n     */\n    public IBANValidator() {\n        this(DEFAULT_VALIDATORS);\n    }\n\n    /**\n     * Create an IBAN validator from the specified map of IBAN formats.\n     *\n     * @param validators map of IBAN formats\n     */\n    public IBANValidator(final Validator[] validators) {\n        this.validatorMap = createValidators(validators);\n    }\n\n    private ConcurrentMap<String, Validator> createValidators(final Validator[] validators) {\n        final ConcurrentMap<String, Validator> map = new ConcurrentHashMap<>();\n        for (final Validator validator : validators) {\n            map.put(validator.countryCode, validator);\n            for (final String otherCC : validator.otherCountryCodes) {\n                map.put(otherCC, validator);\n            }\n        }\n        return map;\n    }\n\n    /**\n     * Gets a copy of the default Validators.\n     *\n     * @return a copy of the default Validator array\n     */\n    public Validator[] getDefaultValidators() {\n        return Arrays.copyOf(DEFAULT_VALIDATORS, DEFAULT_VALIDATORS.length);\n    }\n\n    /**\n     * Gets the Validator for a given IBAN\n     *\n     * @param code a string starting with the ISO country code (e.g. an IBAN)\n     *\n     * @return the validator or {@code null} if there is not one registered.\n     */\n    public Validator getValidator(final String code) {\n        if (code == null || code.length() < SHORT_CODE_LEN) { // ensure we can extract the code\n            return null;\n        }\n        final String key = code.substring(0, SHORT_CODE_LEN);\n        return validatorMap.get(key);\n    }\n\n    /**\n     * Does the class have the required validator?\n     *\n     * @param code the code to check\n     * @return true if there is a validator\n     */\n    public boolean hasValidator(final String code) {\n        return getValidator(code) != null;\n    }\n\n    /**\n     * Validate an IBAN Code\n     *\n     * @param code The value validation is being performed on\n     * @return {@code true} if the value is valid\n     */\n    public boolean isValid(final String code) {\n        final Validator formatValidator = getValidator(code);\n        if (formatValidator == null || code.length() != formatValidator.ibanLength || !formatValidator.regexValidator.isValid(code)) {\n            return false;\n        }\n        return IBANCheckDigit.IBAN_CHECK_DIGIT.isValid(code);\n    }\n\n    /**\n     * Installs a validator.\n     * Will replace any existing entry which has the same countryCode.\n     *\n     * @param countryCode the country code\n     * @param length the length of the IBAN. Must be &ge; 8 and &le; 32.\n     * If the length is &lt; 0, the validator is removed, and the format is not used.\n     * @param format the format of the IBAN (as a regular expression)\n     * @return the previous Validator, or {@code null} if there was none\n     * @throws IllegalArgumentException if there is a problem\n     * @throws IllegalStateException if an attempt is made to modify the singleton validator\n     */\n    public Validator setValidator(final String countryCode, final int length, final String format) {\n        if (this == DEFAULT_IBAN_VALIDATOR) {\n            throw new IllegalStateException(\"The singleton validator cannot be modified\");\n        }\n        if (length < 0) {\n            return validatorMap.remove(countryCode);\n        }\n        return setValidator(new Validator(countryCode, length, format));\n    }\n\n    /**\n     * Installs a validator.\n     * Will replace any existing entry which has the same countryCode\n     *\n     * @param validator the instance to install.\n     * @return the previous Validator, or {@code null} if there was none\n     * @throws IllegalStateException if an attempt is made to modify the singleton validator\n     */\n    public Validator setValidator(final Validator validator) {\n        if (this == DEFAULT_IBAN_VALIDATOR) {\n            throw new IllegalStateException(\"The singleton validator cannot be modified\");\n        }\n        return validatorMap.put(validator.countryCode, validator);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final int SHORT_CODE_LEN = 2;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "SHORT_CODE_LEN = 2", "syntax_pass": true}, {"attribute_expression": "private static final Validator[] DEFAULT_VALIDATORS = {                   //\n            new Validator(\"AD\", 24, \"AD\\\\d{10}[A-Z0-9]{12}\"),                 // Andorra\n            new Validator(\"AE\", 23, \"AE\\\\d{21}\"),                             // United Arab Emirates (The)\n            new Validator(\"AL\", 28, \"AL\\\\d{10}[A-Z0-9]{16}\"),                 // Albania\n            new Validator(\"AT\", 20, \"AT\\\\d{18}\"),                             // Austria\n            new Validator(\"AZ\", 28, \"AZ\\\\d{2}[A-Z]{4}[A-Z0-9]{20}\"),          // Azerbaijan\n            new Validator(\"BA\", 20, \"BA\\\\d{18}\"),                             // Bosnia and Herzegovina\n            new Validator(\"BE\", 16, \"BE\\\\d{14}\"),                             // Belgium\n            new Validator(\"BG\", 22, \"BG\\\\d{2}[A-Z]{4}\\\\d{6}[A-Z0-9]{8}\"),     // Bulgaria\n            new Validator(\"BH\", 22, \"BH\\\\d{2}[A-Z]{4}[A-Z0-9]{14}\"),          // Bahrain\n            new Validator(\"BI\", 27, \"BI\\\\d{25}\"),                             // Burundi\n            new Validator(\"BR\", 29, \"BR\\\\d{25}[A-Z]{1}[A-Z0-9]{1}\"),          // Brazil\n            new Validator(\"BY\", 28, \"BY\\\\d{2}[A-Z0-9]{4}\\\\d{4}[A-Z0-9]{16}\"), // Republic of Belarus\n            new Validator(\"CH\", 21, \"CH\\\\d{7}[A-Z0-9]{12}\"),                  // Switzerland\n            new Validator(\"CR\", 22, \"CR\\\\d{20}\"),                             // Costa Rica\n            new Validator(\"CY\", 28, \"CY\\\\d{10}[A-Z0-9]{16}\"),                 // Cyprus\n            new Validator(\"CZ\", 24, \"CZ\\\\d{22}\"),                             // Czechia\n            new Validator(\"DE\", 22, \"DE\\\\d{20}\"),                             // Germany\n            new Validator(\"DJ\", 27, \"DJ\\\\d{25}\"),                             // Djibouti\n            new Validator(\"DK\", 18, \"DK\\\\d{16}\"),                             // Denmark\n            new Validator(\"DO\", 28, \"DO\\\\d{2}[A-Z0-9]{4}\\\\d{20}\"),            // Dominican Republic\n            new Validator(\"EE\", 20, \"EE\\\\d{18}\"),                             // Estonia\n            new Validator(\"EG\", 29, \"EG\\\\d{27}\"),                             // Egypt\n            new Validator(\"ES\", 24, \"ES\\\\d{22}\"),                             // Spain\n            new Validator(\"FI\", 18, \"\\\\d{16}\", \"AX\"),                         // Finland\n            new Validator(\"FK\", 18, \"FK\\\\d{2}[A-Z]{2}\\\\d{12}\"),               // Falkland Islands, since Jul-23\n            new Validator(\"FO\", 18, \"FO\\\\d{16}\"),                             // Faroe Islands\n            new Validator(\"FR\", 27, \"\\\\d{12}[A-Z0-9]{11}\\\\d{2}\", \"GF\", \"GP\", \"MQ\", \"RE\", \"PF\", \"TF\", \"YT\", \"NC\", \"BL\", \"MF\", \"PM\", \"WF\"), // France\n            new Validator(\"GB\", 22, \"\\\\d{2}[A-Z]{4}\\\\d{14}\", \"IM\", \"JE\", \"GG\"), // United Kingdom\n            new Validator(\"GE\", 22, \"GE\\\\d{2}[A-Z]{2}\\\\d{16}\"),               // Georgia\n            new Validator(\"GI\", 23, \"GI\\\\d{2}[A-Z]{4}[A-Z0-9]{15}\"),          // Gibraltar\n            new Validator(\"GL\", 18, \"GL\\\\d{16}\"),                             // Greenland\n            new Validator(\"GR\", 27, \"GR\\\\d{9}[A-Z0-9]{16}\"),                  // Greece\n            new Validator(\"GT\", 28, \"GT\\\\d{2}[A-Z0-9]{24}\"),                  // Guatemala\n            new Validator(\"HR\", 21, \"HR\\\\d{19}\"),                             // Croatia\n            new Validator(\"HU\", 28, \"HU\\\\d{26}\"),                             // Hungary\n            new Validator(\"IE\", 22, \"IE\\\\d{2}[A-Z]{4}\\\\d{14}\"),               // Ireland\n            new Validator(\"IL\", 23, \"IL\\\\d{21}\"),                             // Israel\n            new Validator(\"IQ\", 23, \"IQ\\\\d{2}[A-Z]{4}\\\\d{15}\"),               // Iraq\n            new Validator(\"IS\", 26, \"IS\\\\d{24}\"),                             // Iceland\n            new Validator(\"IT\", 27, \"IT\\\\d{2}[A-Z]{1}\\\\d{10}[A-Z0-9]{12}\"),   // Italy\n            new Validator(\"JO\", 30, \"JO\\\\d{2}[A-Z]{4}\\\\d{4}[A-Z0-9]{18}\"),    // Jordan\n            new Validator(\"KW\", 30, \"KW\\\\d{2}[A-Z]{4}[A-Z0-9]{22}\"),          // Kuwait\n            new Validator(\"KZ\", 20, \"KZ\\\\d{5}[A-Z0-9]{13}\"),                  // Kazakhstan\n            new Validator(\"LB\", 28, \"LB\\\\d{6}[A-Z0-9]{20}\"),                  // Lebanon\n            new Validator(\"LC\", 32, \"LC\\\\d{2}[A-Z]{4}[A-Z0-9]{24}\"),          // Saint Lucia\n            new Validator(\"LI\", 21, \"LI\\\\d{7}[A-Z0-9]{12}\"),                  // Liechtenstein\n            new Validator(\"LT\", 20, \"LT\\\\d{18}\"),                             // Lithuania\n            new Validator(\"LU\", 20, \"LU\\\\d{5}[A-Z0-9]{13}\"),                  // Luxembourg\n            new Validator(\"LV\", 21, \"LV\\\\d{2}[A-Z]{4}[A-Z0-9]{13}\"),          // Latvia\n            new Validator(\"LY\", 25, \"LY\\\\d{23}\"),                             // Libya\n            new Validator(\"MC\", 27, \"MC\\\\d{12}[A-Z0-9]{11}\\\\d{2}\"),           // Monaco\n            new Validator(\"MD\", 24, \"MD\\\\d{2}[A-Z0-9]{20}\"),                  // Moldova\n            new Validator(\"ME\", 22, \"ME\\\\d{20}\"),                             // Montenegro\n            new Validator(\"MK\", 19, \"MK\\\\d{5}[A-Z0-9]{10}\\\\d{2}\"),            // Macedonia\n            new Validator(\"MN\", 20, \"MN\\\\d{18}\"),                             // Mongolia, since Apr-23\n            new Validator(\"MR\", 27, \"MR\\\\d{25}\"),                             // Mauritania\n            new Validator(\"MT\", 31, \"MT\\\\d{2}[A-Z]{4}\\\\d{5}[A-Z0-9]{18}\"),    // Malta\n            new Validator(\"MU\", 30, \"MU\\\\d{2}[A-Z]{4}\\\\d{19}[A-Z]{3}\"),       // Mauritius\n            new Validator(\"NI\", 28, \"NI\\\\d{2}[A-Z]{4}\\\\d{20}\"),               // Nicaragua, since Apr-23\n            new Validator(\"NL\", 18, \"NL\\\\d{2}[A-Z]{4}\\\\d{10}\"),               // Netherlands (The)\n            new Validator(\"NO\", 15, \"NO\\\\d{13}\"),                             // Norway\n            new Validator(\"OM\", 23, \"OM\\\\d{5}[A-Z0-9]{16}\"),                  // Oman, since Mar-24\n            new Validator(\"PK\", 24, \"PK\\\\d{2}[A-Z]{4}[A-Z0-9]{16}\"),          // Pakistan\n            new Validator(\"PL\", 28, \"PL\\\\d{26}\"),                             // Poland\n            new Validator(\"PS\", 29, \"PS\\\\d{2}[A-Z]{4}[A-Z0-9]{21}\"),          // Palestine, State of\n            new Validator(\"PT\", 25, \"PT\\\\d{23}\"),                             // Portugal\n            new Validator(\"QA\", 29, \"QA\\\\d{2}[A-Z]{4}[A-Z0-9]{21}\"),          // Qatar\n            new Validator(\"RO\", 24, \"RO\\\\d{2}[A-Z]{4}[A-Z0-9]{16}\"),          // Romania\n            new Validator(\"RS\", 22, \"RS\\\\d{20}\"),                             // Serbia\n            new Validator(\"RU\", 33, \"RU\\\\d{16}[A-Z0-9]{15}\"),                 // Russia\n            new Validator(\"SA\", 24, \"SA\\\\d{4}[A-Z0-9]{18}\"),                  // Saudi Arabia\n            new Validator(\"SC\", 31, \"SC\\\\d{2}[A-Z]{4}\\\\d{20}[A-Z]{3}\"),       // Seychelles\n            new Validator(\"SD\", 18, \"SD\\\\d{16}\"),                             // Sudan\n            new Validator(\"SE\", 24, \"SE\\\\d{22}\"),                             // Sweden\n            new Validator(\"SI\", 19, \"SI\\\\d{17}\"),                             // Slovenia\n            new Validator(\"SK\", 24, \"SK\\\\d{22}\"),                             // Slovakia\n            new Validator(\"SM\", 27, \"SM\\\\d{2}[A-Z]{1}\\\\d{10}[A-Z0-9]{12}\"),   // San Marino\n            new Validator(\"SO\", 23, \"SO\\\\d{21}\"),                             // Somalia, since Feb-23\n            new Validator(\"ST\", 25, \"ST\\\\d{23}\"),                             // Sao Tome and Principe\n            new Validator(\"SV\", 28, \"SV\\\\d{2}[A-Z]{4}\\\\d{20}\"),               // El Salvador\n            new Validator(\"TL\", 23, \"TL\\\\d{21}\"),                             // Timor-Leste\n            new Validator(\"TN\", 24, \"TN\\\\d{22}\"),                             // Tunisia\n            new Validator(\"TR\", 26, \"TR\\\\d{8}[A-Z0-9]{16}\"),                  // Turkey\n            new Validator(\"UA\", 29, \"UA\\\\d{8}[A-Z0-9]{19}\"),                  // Ukraine\n            new Validator(\"VA\", 22, \"VA\\\\d{20}\"),                             // Vatican City State\n            new Validator(\"VG\", 24, \"VG\\\\d{2}[A-Z]{4}\\\\d{16}\"),               // Virgin Islands\n            new Validator(\"XK\", 20, \"XK\\\\d{18}\"),                             // Kosovo\n    };", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "Validator[]", "name": "DEFAULT_VALIDATORS = {                   //\n            new Validator(\"AD\", 24, \"AD\\\\d{10}[A-Z0-9]{12}\"),                 // Andorra\n            new Validator(\"AE\", 23, \"AE\\\\d{21}\"),                             // United Arab Emirates (The)\n            new Validator(\"AL\", 28, \"AL\\\\d{10}[A-Z0-9]{16}\"),                 // Albania\n            new Validator(\"AT\", 20, \"AT\\\\d{18}\"),                             // Austria\n            new Validator(\"AZ\", 28, \"AZ\\\\d{2}[A-Z]{4}[A-Z0-9]{20}\"),          // Azerbaijan\n            new Validator(\"BA\", 20, \"BA\\\\d{18}\"),                             // Bosnia and Herzegovina\n            new Validator(\"BE\", 16, \"BE\\\\d{14}\"),                             // Belgium\n            new Validator(\"BG\", 22, \"BG\\\\d{2}[A-Z]{4}\\\\d{6}[A-Z0-9]{8}\"),     // Bulgaria\n            new Validator(\"BH\", 22, \"BH\\\\d{2}[A-Z]{4}[A-Z0-9]{14}\"),          // Bahrain\n            new Validator(\"BI\", 27, \"BI\\\\d{25}\"),                             // Burundi\n            new Validator(\"BR\", 29, \"BR\\\\d{25}[A-Z]{1}[A-Z0-9]{1}\"),          // Brazil\n            new Validator(\"BY\", 28, \"BY\\\\d{2}[A-Z0-9]{4}\\\\d{4}[A-Z0-9]{16}\"), // Republic of Belarus\n            new Validator(\"CH\", 21, \"CH\\\\d{7}[A-Z0-9]{12}\"),                  // Switzerland\n            new Validator(\"CR\", 22, \"CR\\\\d{20}\"),                             // Costa Rica\n            new Validator(\"CY\", 28, \"CY\\\\d{10}[A-Z0-9]{16}\"),                 // Cyprus\n            new Validator(\"CZ\", 24, \"CZ\\\\d{22}\"),                             // Czechia\n            new Validator(\"DE\", 22, \"DE\\\\d{20}\"),                             // Germany\n            new Validator(\"DJ\", 27, \"DJ\\\\d{25}\"),                             // Djibouti\n            new Validator(\"DK\", 18, \"DK\\\\d{16}\"),                             // Denmark\n            new Validator(\"DO\", 28, \"DO\\\\d{2}[A-Z0-9]{4}\\\\d{20}\"),            // Dominican Republic\n            new Validator(\"EE\", 20, \"EE\\\\d{18}\"),                             // Estonia\n            new Validator(\"EG\", 29, \"EG\\\\d{27}\"),                             // Egypt\n            new Validator(\"ES\", 24, \"ES\\\\d{22}\"),                             // Spain\n            new Validator(\"FI\", 18, \"\\\\d{16}\", \"AX\"),                         // Finland\n            new Validator(\"FK\", 18, \"FK\\\\d{2}[A-Z]{2}\\\\d{12}\"),               // Falkland Islands, since Jul-23\n            new Validator(\"FO\", 18, \"FO\\\\d{16}\"),                             // Faroe Islands\n            new Validator(\"FR\", 27, \"\\\\d{12}[A-Z0-9]{11}\\\\d{2}\", \"GF\", \"GP\", \"MQ\", \"RE\", \"PF\", \"TF\", \"YT\", \"NC\", \"BL\", \"MF\", \"PM\", \"WF\"), // France\n            new Validator(\"GB\", 22, \"\\\\d{2}[A-Z]{4}\\\\d{14}\", \"IM\", \"JE\", \"GG\"), // United Kingdom\n            new Validator(\"GE\", 22, \"GE\\\\d{2}[A-Z]{2}\\\\d{16}\"),               // Georgia\n            new Validator(\"GI\", 23, \"GI\\\\d{2}[A-Z]{4}[A-Z0-9]{15}\"),          // Gibraltar\n            new Validator(\"GL\", 18, \"GL\\\\d{16}\"),                             // Greenland\n            new Validator(\"GR\", 27, \"GR\\\\d{9}[A-Z0-9]{16}\"),                  // Greece\n            new Validator(\"GT\", 28, \"GT\\\\d{2}[A-Z0-9]{24}\"),                  // Guatemala\n            new Validator(\"HR\", 21, \"HR\\\\d{19}\"),                             // Croatia\n            new Validator(\"HU\", 28, \"HU\\\\d{26}\"),                             // Hungary\n            new Validator(\"IE\", 22, \"IE\\\\d{2}[A-Z]{4}\\\\d{14}\"),               // Ireland\n            new Validator(\"IL\", 23, \"IL\\\\d{21}\"),                             // Israel\n            new Validator(\"IQ\", 23, \"IQ\\\\d{2}[A-Z]{4}\\\\d{15}\"),               // Iraq\n            new Validator(\"IS\", 26, \"IS\\\\d{24}\"),                             // Iceland\n            new Validator(\"IT\", 27, \"IT\\\\d{2}[A-Z]{1}\\\\d{10}[A-Z0-9]{12}\"),   // Italy\n            new Validator(\"JO\", 30, \"JO\\\\d{2}[A-Z]{4}\\\\d{4}[A-Z0-9]{18}\"),    // Jordan\n            new Validator(\"KW\", 30, \"KW\\\\d{2}[A-Z]{4}[A-Z0-9]{22}\"),          // Kuwait\n            new Validator(\"KZ\", 20, \"KZ\\\\d{5}[A-Z0-9]{13}\"),                  // Kazakhstan\n            new Validator(\"LB\", 28, \"LB\\\\d{6}[A-Z0-9]{20}\"),                  // Lebanon\n            new Validator(\"LC\", 32, \"LC\\\\d{2}[A-Z]{4}[A-Z0-9]{24}\"),          // Saint Lucia\n            new Validator(\"LI\", 21, \"LI\\\\d{7}[A-Z0-9]{12}\"),                  // Liechtenstein\n            new Validator(\"LT\", 20, \"LT\\\\d{18}\"),                             // Lithuania\n            new Validator(\"LU\", 20, \"LU\\\\d{5}[A-Z0-9]{13}\"),                  // Luxembourg\n            new Validator(\"LV\", 21, \"LV\\\\d{2}[A-Z]{4}[A-Z0-9]{13}\"),          // Latvia\n            new Validator(\"LY\", 25, \"LY\\\\d{23}\"),                             // Libya\n            new Validator(\"MC\", 27, \"MC\\\\d{12}[A-Z0-9]{11}\\\\d{2}\"),           // Monaco\n            new Validator(\"MD\", 24, \"MD\\\\d{2}[A-Z0-9]{20}\"),                  // Moldova\n            new Validator(\"ME\", 22, \"ME\\\\d{20}\"),                             // Montenegro\n            new Validator(\"MK\", 19, \"MK\\\\d{5}[A-Z0-9]{10}\\\\d{2}\"),            // Macedonia\n            new Validator(\"MN\", 20, \"MN\\\\d{18}\"),                             // Mongolia, since Apr-23\n            new Validator(\"MR\", 27, \"MR\\\\d{25}\"),                             // Mauritania\n            new Validator(\"MT\", 31, \"MT\\\\d{2}[A-Z]{4}\\\\d{5}[A-Z0-9]{18}\"),    // Malta\n            new Validator(\"MU\", 30, \"MU\\\\d{2}[A-Z]{4}\\\\d{19}[A-Z]{3}\"),       // Mauritius\n            new Validator(\"NI\", 28, \"NI\\\\d{2}[A-Z]{4}\\\\d{20}\"),               // Nicaragua, since Apr-23\n            new Validator(\"NL\", 18, \"NL\\\\d{2}[A-Z]{4}\\\\d{10}\"),               // Netherlands (The)\n            new Validator(\"NO\", 15, \"NO\\\\d{13}\"),                             // Norway\n            new Validator(\"OM\", 23, \"OM\\\\d{5}[A-Z0-9]{16}\"),                  // Oman, since Mar-24\n            new Validator(\"PK\", 24, \"PK\\\\d{2}[A-Z]{4}[A-Z0-9]{16}\"),          // Pakistan\n            new Validator(\"PL\", 28, \"PL\\\\d{26}\"),                             // Poland\n            new Validator(\"PS\", 29, \"PS\\\\d{2}[A-Z]{4}[A-Z0-9]{21}\"),          // Palestine, State of\n            new Validator(\"PT\", 25, \"PT\\\\d{23}\"),                             // Portugal\n            new Validator(\"QA\", 29, \"QA\\\\d{2}[A-Z]{4}[A-Z0-9]{21}\"),          // Qatar\n            new Validator(\"RO\", 24, \"RO\\\\d{2}[A-Z]{4}[A-Z0-9]{16}\"),          // Romania\n            new Validator(\"RS\", 22, \"RS\\\\d{20}\"),                             // Serbia\n            new Validator(\"RU\", 33, \"RU\\\\d{16}[A-Z0-9]{15}\"),                 // Russia\n            new Validator(\"SA\", 24, \"SA\\\\d{4}[A-Z0-9]{18}\"),                  // Saudi Arabia\n            new Validator(\"SC\", 31, \"SC\\\\d{2}[A-Z]{4}\\\\d{20}[A-Z]{3}\"),       // Seychelles\n            new Validator(\"SD\", 18, \"SD\\\\d{16}\"),                             // Sudan\n            new Validator(\"SE\", 24, \"SE\\\\d{22}\"),                             // Sweden\n            new Validator(\"SI\", 19, \"SI\\\\d{17}\"),                             // Slovenia\n            new Validator(\"SK\", 24, \"SK\\\\d{22}\"),                             // Slovakia\n            new Validator(\"SM\", 27, \"SM\\\\d{2}[A-Z]{1}\\\\d{10}[A-Z0-9]{12}\"),   // San Marino\n            new Validator(\"SO\", 23, \"SO\\\\d{21}\"),                             // Somalia, since Feb-23\n            new Validator(\"ST\", 25, \"ST\\\\d{23}\"),                             // Sao Tome and Principe\n            new Validator(\"SV\", 28, \"SV\\\\d{2}[A-Z]{4}\\\\d{20}\"),               // El Salvador\n            new Validator(\"TL\", 23, \"TL\\\\d{21}\"),                             // Timor-Leste\n            new Validator(\"TN\", 24, \"TN\\\\d{22}\"),                             // Tunisia\n            new Validator(\"TR\", 26, \"TR\\\\d{8}[A-Z0-9]{16}\"),                  // Turkey\n            new Validator(\"UA\", 29, \"UA\\\\d{8}[A-Z0-9]{19}\"),                  // Ukraine\n            new Validator(\"VA\", 22, \"VA\\\\d{20}\"),                             // Vatican City State\n            new Validator(\"VG\", 24, \"VG\\\\d{2}[A-Z]{4}\\\\d{16}\"),               // Virgin Islands\n            new Validator(\"XK\", 20, \"XK\\\\d{18}\"),                             // Kosovo\n    }", "syntax_pass": true}, {"attribute_expression": "public static final IBANValidator DEFAULT_IBAN_VALIDATOR = new IBANValidator();", "docstring": " The singleton instance which uses the default formats", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "IBANValidator", "name": "DEFAULT_IBAN_VALIDATOR = new IBANValidator()", "syntax_pass": true}, {"attribute_expression": "private final ConcurrentMap<String, Validator> validatorMap;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "ConcurrentMap<String, Validator>", "name": "validatorMap", "syntax_pass": true}]}, {"uris": "src/main/java/org/apache/commons/validator/routines/BigDecimalValidator.java.BigDecimalValidator", "name": "BigDecimalValidator", "file_path": "src/main/java/org/apache/commons/validator/routines/BigDecimalValidator.java", "superclasses": "AbstractNumberValidator", "methods": ["[BigDecimalValidator]getInstance()", "[]BigDecimalValidator()", "[]BigDecimalValidator(boolean)", "[]BigDecimalValidator(boolean,int,boolean)", "[boolean]isInRange(BigDecimal,double,double)", "[boolean]maxValue(BigDecimal,double)", "[boolean]minValue(BigDecimal,double)", "[Object]processParsedValue(Object,Format)", "[BigDecimal]validate(String)", "[BigDecimal]validate(String,Locale)", "[BigDecimal]validate(String,String)", "[BigDecimal]validate(String,String,Locale)"], "method_uris": ["src/main/java/org/apache/commons/validator/routines/BigDecimalValidator.java.BigDecimalValidator.[BigDecimalValidator]getInstance()", "src/main/java/org/apache/commons/validator/routines/BigDecimalValidator.java.BigDecimalValidator.[]BigDecimalValidator()", "src/main/java/org/apache/commons/validator/routines/BigDecimalValidator.java.BigDecimalValidator.[]BigDecimalValidator(boolean)", "src/main/java/org/apache/commons/validator/routines/BigDecimalValidator.java.BigDecimalValidator.[]BigDecimalValidator(boolean,int,boolean)", "src/main/java/org/apache/commons/validator/routines/BigDecimalValidator.java.BigDecimalValidator.[boolean]isInRange(BigDecimal,double,double)", "src/main/java/org/apache/commons/validator/routines/BigDecimalValidator.java.BigDecimalValidator.[boolean]maxValue(BigDecimal,double)", "src/main/java/org/apache/commons/validator/routines/BigDecimalValidator.java.BigDecimalValidator.[boolean]minValue(BigDecimal,double)", "src/main/java/org/apache/commons/validator/routines/BigDecimalValidator.java.BigDecimalValidator.[Object]processParsedValue(Object,Format)", "src/main/java/org/apache/commons/validator/routines/BigDecimalValidator.java.BigDecimalValidator.[BigDecimal]validate(String)", "src/main/java/org/apache/commons/validator/routines/BigDecimalValidator.java.BigDecimalValidator.[BigDecimal]validate(String,Locale)", "src/main/java/org/apache/commons/validator/routines/BigDecimalValidator.java.BigDecimalValidator.[BigDecimal]validate(String,String)", "src/main/java/org/apache/commons/validator/routines/BigDecimalValidator.java.BigDecimalValidator.[BigDecimal]validate(String,String,Locale)"], "overrides": null, "attributes": [], "class_docstring": "\n<p><b>BigDecimal Validation</b> and Conversion routines ({@code java.math.BigDecimal}).</p>\n\n<p>This validator provides a number of methods for\n   validating/converting a {@link String} value to\n   a {@code BigDecimal} using {@link NumberFormat}\n   to parse either:</p>\n   <ul>\n      <li>using the default format for the default {@link Locale}</li>\n      <li>using a specified pattern with the default {@link Locale}</li>\n      <li>using the default format for a specified {@link Locale}</li>\n      <li>using a specified pattern with a specified {@link Locale}</li>\n   </ul>\n\n<p>Use one of the {@code isValid()} methods to just validate or\n   one of the {@code validate()} methods to validate and receive a\n   <em>converted</em> {@code BigDecimal} value.</p>\n\n<p>Fraction/decimal values are automatically trimmed to the appropriate length.</p>\n\n<p>Once a value has been successfully converted the following\n   methods can be used to perform minimum, maximum and range checks:</p>\n   <ul>\n      <li>{@code minValue()} checks whether the value is greater\n          than or equal to a specified minimum.</li>\n      <li>{@code maxValue()} checks whether the value is less\n          than or equal to a specified maximum.</li>\n      <li>{@code isInRange()} checks whether the value is within\n          a specified range of values.</li>\n   </ul>\n\n<p>So that the same mechanism used for parsing an <em>input</em> value\n   for validation can be used to format <em>output</em>, corresponding\n   {@code format()} methods are also provided. That is you can\n   format either:</p>\n   <ul>\n      <li>using the default format for the default {@link Locale}</li>\n      <li>using a specified pattern with the default {@link Locale}</li>\n      <li>using the default format for a specified {@link Locale}</li>\n      <li>using a specified pattern with a specified {@link Locale}</li>\n   </ul>\n\n@since 1.3.0\n", "original_string": "public class BigDecimalValidator extends AbstractNumberValidator {\n\n    private static final long serialVersionUID = -670320911490506772L;\n\n    private static final BigDecimalValidator VALIDATOR = new BigDecimalValidator();\n\n    /**\n     * Gets the singleton instance of this validator.\n     * @return A singleton instance of the BigDecimalValidator.\n     */\n    public static BigDecimalValidator getInstance() {\n        return VALIDATOR;\n    }\n\n    /**\n     * Constructs a <em>strict</em> instance.\n     */\n    public BigDecimalValidator() {\n        this(true);\n    }\n\n    /**\n     * <p>Construct an instance with the specified strict setting.</p>\n     *\n     * @param strict {@code true} if strict\n     *        {@code Format} parsing should be used.\n     */\n    public BigDecimalValidator(final boolean strict) {\n        this(strict, STANDARD_FORMAT, true);\n    }\n\n    /**\n     * <p>Construct an instance with the specified strict setting\n     *    and format type.</p>\n     *\n     * <p>The {@code formatType} specified what type of\n     *    {@code NumberFormat} is created - valid types\n     *    are:</p>\n     *    <ul>\n     *       <li>AbstractNumberValidator.STANDARD_FORMAT -to create\n     *           <em>standard</em> number formats (the default).</li>\n     *       <li>AbstractNumberValidator.CURRENCY_FORMAT -to create\n     *           <em>currency</em> number formats.</li>\n     *       <li>AbstractNumberValidator.PERCENT_FORMAT -to create\n     *           <em>percent</em> number formats (the default).</li>\n     *    </ul>\n     *\n     * @param strict {@code true} if strict\n     *        {@code Format} parsing should be used.\n     * @param formatType The {@code NumberFormat} type to\n     *        create for validation, default is STANDARD_FORMAT.\n     * @param allowFractions {@code true} if fractions are\n     *        allowed or {@code false} if integers only.\n     */\n    protected BigDecimalValidator(final boolean strict, final int formatType,\n            final boolean allowFractions) {\n        super(strict, formatType, allowFractions);\n    }\n\n    /**\n     * Check if the value is within a specified range.\n     *\n     * @param value The {@code Number} value to check.\n     * @param min The minimum value of the range.\n     * @param max The maximum value of the range.\n     * @return {@code true} if the value is within the\n     *         specified range.\n     */\n    public boolean isInRange(final BigDecimal value, final double min, final double max) {\n        return value.doubleValue() >= min && value.doubleValue() <= max;\n    }\n\n    /**\n     * Check if the value is less than or equal to a maximum.\n     *\n     * @param value The value validation is being performed on.\n     * @param max The maximum value.\n     * @return {@code true} if the value is less than\n     *         or equal to the maximum.\n     */\n    public boolean maxValue(final BigDecimal value, final double max) {\n        return value.doubleValue() <= max;\n    }\n\n    /**\n     * Check if the value is greater than or equal to a minimum.\n     *\n     * @param value The value validation is being performed on.\n     * @param min The minimum value.\n     * @return {@code true} if the value is greater than\n     *         or equal to the minimum.\n     */\n    public boolean minValue(final BigDecimal value, final double min) {\n        return value.doubleValue() >= min;\n    }\n\n    /**\n     * Convert the parsed value to a {@code BigDecimal}.\n     *\n     * @param value The parsed {@code Number} object created.\n     * @param formatter The Format used to parse the value with.\n     * @return The parsed {@code Number} converted to a\n     *         {@code BigDecimal}.\n     */\n    @Override\n    protected Object processParsedValue(final Object value, final Format formatter) {\n        BigDecimal decimal;\n        if (value instanceof Long) {\n            decimal = BigDecimal.valueOf(((Long) value).longValue());\n        } else {\n            decimal = new BigDecimal(value.toString());\n        }\n\n        final int scale = determineScale((NumberFormat) formatter);\n        if (scale >= 0) {\n            decimal = decimal.setScale(scale, BigDecimal.ROUND_DOWN);\n        }\n\n        return decimal;\n    }\n\n    /**\n     * <p>Validate/convert a {@code BigDecimal} using the default\n     *    {@link Locale}.\n     *\n     * @param value The value validation is being performed on.\n     * @return The parsed {@code BigDecimal} if valid or {@code null}\n     *  if invalid.\n     */\n    public BigDecimal validate(final String value) {\n        return (BigDecimal) parse(value, (String) null, (Locale) null);\n    }\n\n    /**\n     * <p>Validate/convert a {@code BigDecimal} using the\n     *    specified {@link Locale}.\n     *\n     * @param value The value validation is being performed on.\n     * @param locale The locale to use for the number format, system default if null.\n     * @return The parsed {@code BigDecimal} if valid or {@code null} if invalid.\n     */\n    public BigDecimal validate(final String value, final Locale locale) {\n        return (BigDecimal) parse(value, (String) null, locale);\n    }\n\n    /**\n     * <p>Validate/convert a {@code BigDecimal} using the\n     *    specified <em>pattern</em>.\n     *\n     * @param value The value validation is being performed on.\n     * @param pattern The pattern used to validate the value against, or the\n     *        default for the {@link Locale} if {@code null}.\n     * @return The parsed {@code BigDecimal} if valid or {@code null} if invalid.\n     */\n    public BigDecimal validate(final String value, final String pattern) {\n        return (BigDecimal) parse(value, pattern, (Locale) null);\n    }\n\n    /**\n     * <p>Validate/convert a {@code BigDecimal} using the\n     *    specified pattern and/ or {@link Locale}.\n     *\n     * @param value The value validation is being performed on.\n     * @param pattern The pattern used to validate the value against, or the\n     *        default for the {@link Locale} if {@code null}.\n     * @param locale The locale to use for the date format, system default if null.\n     * @return The parsed {@code BigDecimal} if valid or {@code null} if invalid.\n     */\n    public BigDecimal validate(final String value, final String pattern, final Locale locale) {\n        return (BigDecimal) parse(value, pattern, locale);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final long serialVersionUID = -670320911490506772L;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "serialVersionUID = -670320911490506772L", "syntax_pass": true}, {"attribute_expression": "private static final BigDecimalValidator VALIDATOR = new BigDecimalValidator();", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "BigDecimalValidator", "name": "VALIDATOR = new BigDecimalValidator()", "syntax_pass": true}]}, {"uris": "src/main/java/org/apache/commons/validator/routines/ISBNValidator.java.ISBNValidator", "name": "ISBNValidator", "file_path": "src/main/java/org/apache/commons/validator/routines/ISBNValidator.java", "superclasses": "", "methods": ["[ISBNValidator]getInstance()", "[ISBNValidator]getInstance(boolean)", "[]ISBNValidator()", "[]ISBNValidator(boolean)", "[String]convertToISBN13(String)", "[boolean]isValid(String)", "[boolean]isValidISBN10(String)", "[boolean]isValidISBN13(String)", "[String]validate(String)", "[String]validateISBN10(String)", "[String]validateISBN13(String)"], "method_uris": ["src/main/java/org/apache/commons/validator/routines/ISBNValidator.java.ISBNValidator.[ISBNValidator]getInstance()", "src/main/java/org/apache/commons/validator/routines/ISBNValidator.java.ISBNValidator.[ISBNValidator]getInstance(boolean)", "src/main/java/org/apache/commons/validator/routines/ISBNValidator.java.ISBNValidator.[]ISBNValidator()", "src/main/java/org/apache/commons/validator/routines/ISBNValidator.java.ISBNValidator.[]ISBNValidator(boolean)", "src/main/java/org/apache/commons/validator/routines/ISBNValidator.java.ISBNValidator.[String]convertToISBN13(String)", "src/main/java/org/apache/commons/validator/routines/ISBNValidator.java.ISBNValidator.[boolean]isValid(String)", "src/main/java/org/apache/commons/validator/routines/ISBNValidator.java.ISBNValidator.[boolean]isValidISBN10(String)", "src/main/java/org/apache/commons/validator/routines/ISBNValidator.java.ISBNValidator.[boolean]isValidISBN13(String)", "src/main/java/org/apache/commons/validator/routines/ISBNValidator.java.ISBNValidator.[String]validate(String)", "src/main/java/org/apache/commons/validator/routines/ISBNValidator.java.ISBNValidator.[String]validateISBN10(String)", "src/main/java/org/apache/commons/validator/routines/ISBNValidator.java.ISBNValidator.[String]validateISBN13(String)"], "overrides": null, "attributes": [], "class_docstring": "\n<b>ISBN-10</b> and <b>ISBN-13</b> Code Validation.\n<p>\nThis validator validates the code is either a valid ISBN-10\n(using a {@link CodeValidator} with the {@link ISBN10CheckDigit})\nor a valid ISBN-13 code (using a {@link CodeValidator} with the\nthe {@link EAN13CheckDigit} routine).\n<p>\nThe {@code validate()} methods return the ISBN code with formatting\ncharacters removed if valid or {@code null} if invalid.\n<p>\nThis validator also provides the facility to convert ISBN-10 codes to\nISBN-13 if the {@code convert} property is {@code true}.\n<p>\nFrom 1st January 2007 the book industry will start to use a new 13 digit\nISBN number (rather than this 10 digit ISBN number). ISBN-13 codes are\n<a href=\"https://en.wikipedia.org/wiki/European_Article_Number\">EAN</a>\ncodes, for more information see:</p>\n\n<ul>\n  <li><a href=\"https://en.wikipedia.org/wiki/ISBN\">Wikipedia - International\n      Standard Book Number (ISBN)</a>.</li>\n  <li>EAN - see\n      <a href=\"https://en.wikipedia.org/wiki/European_Article_Number\">Wikipedia -\n      European Article Number</a>.</li>\n  <li><a href=\"http://www.isbn.org/standards/home/isbn/transition.asp\">ISBN-13\n      Transition details</a>.</li>\n</ul>\n\n<p>ISBN-13s are either prefixed with 978 or 979. 978 prefixes are only assigned\nto the ISBN agency. 979 prefixes may be assigned to ISBNs or ISMNs\n(<a href=\"https://www.ismn-international.org/\">International\nStandard Music Numbers</a>).\n<ul>\n    <li>979-0 are assigned to the ISMN agency</li>\n    <li>979-10, 979-11, 979-12 are assigned to the ISBN agency</li>\n</ul>\nAll other 979 prefixed EAN-13 numbers have not yet been assigned to an agency. The\nvalidator validates all 13 digit codes with 978 or 979 prefixes.\n\n@since 1.4\n", "original_string": "public class ISBNValidator implements Serializable {\n\n    private static final int ISBN_10_LEN = 10;\n\n    private static final long serialVersionUID = 4319515687976420405L;\n\n    private static final String SEP = \"(?:\\\\-|\\\\s)\";\n    private static final String GROUP = \"(\\\\d{1,5})\";\n    private static final String PUBLISHER = \"(\\\\d{1,7})\";\n    private static final String TITLE = \"(\\\\d{1,6})\";\n\n    /**\n     * ISBN-10 consists of 4 groups of numbers separated by either dashes (-)\n     * or spaces.  The first group is 1-5 characters, second 1-7, third 1-6,\n     * and fourth is 1 digit or an X.\n     */\n    static final String ISBN10_REGEX = \"^(?:(\\\\d{9}[0-9X])|(?:\" + GROUP + SEP + PUBLISHER + SEP + TITLE + SEP + \"([0-9X])))$\";\n\n    /**\n     * ISBN-13 consists of 5 groups of numbers separated by either dashes (-)\n     * or spaces.  The first group is 978 or 979, the second group is\n     * 1-5 characters, third 1-7, fourth 1-6, and fifth is 1 digit.\n     */\n    static final String ISBN13_REGEX = \"^(978|979)(?:(\\\\d{10})|(?:\" + SEP + GROUP + SEP + PUBLISHER + SEP + TITLE + SEP + \"([0-9])))$\";\n\n    /** ISBN Code Validator (which converts ISBN-10 codes to ISBN-13 */\n    private static final ISBNValidator ISBN_VALIDATOR = new ISBNValidator();\n\n    /** ISBN Code Validator (which converts ISBN-10 codes to ISBN-13 */\n    private static final ISBNValidator ISBN_VALIDATOR_NO_CONVERT = new ISBNValidator(false);\n\n    /**\n     * Gets the singleton instance of the ISBN validator which\n     * converts ISBN-10 codes to ISBN-13.\n     *\n     * @return A singleton instance of the ISBN validator.\n     */\n    public static ISBNValidator getInstance() {\n        return ISBN_VALIDATOR;\n    }\n\n    /**\n     * Gets the singleton instance of the ISBN validator specifying\n     * whether ISBN-10 codes should be converted to ISBN-13.\n     *\n     * @param convert {@code true} if valid ISBN-10 codes\n     * should be converted to ISBN-13 codes or {@code false}\n     * if valid ISBN-10 codes should be returned unchanged.\n     * @return A singleton instance of the ISBN validator.\n     */\n    public static ISBNValidator getInstance(final boolean convert) {\n        return convert ? ISBN_VALIDATOR : ISBN_VALIDATOR_NO_CONVERT;\n    }\n\n    /** ISBN-10 Code Validator */\n    private final CodeValidator isbn10Validator = new CodeValidator(ISBN10_REGEX, 10, ISBN10CheckDigit.ISBN10_CHECK_DIGIT);\n\n    /** ISBN-13 Code Validator */\n    private final CodeValidator isbn13Validator = new CodeValidator(ISBN13_REGEX, 13, EAN13CheckDigit.EAN13_CHECK_DIGIT);\n\n    /**\n     * Whether validation converts an ISBN-10 codes to ISBN-13.\n     */\n    private final boolean convert;\n\n    /**\n     * Constructs an ISBN validator which converts ISBN-10 codes\n     * to ISBN-13.\n     */\n    public ISBNValidator() {\n        this(true);\n    }\n\n    /**\n     * Constructs an ISBN validator indicating whether\n     * ISBN-10 codes should be converted to ISBN-13.\n     *\n     * @param convert {@code true} if valid ISBN-10 codes\n     * should be converted to ISBN-13 codes or {@code false}\n     * if valid ISBN-10 codes should be returned unchanged.\n     */\n    public ISBNValidator(final boolean convert) {\n        this.convert = convert;\n    }\n\n    /**\n     * Convert an ISBN-10 code to an ISBN-13 code.\n     * <p>\n     * This method requires a valid ISBN-10 with NO formatting\n     * characters.\n     *\n     * @param isbn10 The ISBN-10 code to convert\n     * @return A converted ISBN-13 code or {@code null}\n     * if the ISBN-10 code is not valid\n     */\n    public String convertToISBN13(final String isbn10) {\n\n        if (isbn10 == null) {\n            return null;\n        }\n\n        final String input = isbn10.trim();\n        if (input.length() != ISBN_10_LEN) {\n            throw new IllegalArgumentException(\"Invalid length \" + input.length() + \" for '\" + input + \"'\");\n        }\n\n        // Calculate the new ISBN-13 code (drop the original checkdigit)\n        String isbn13 = \"978\" + input.substring(0, ISBN_10_LEN - 1);\n        try {\n            final String checkDigit = isbn13Validator.getCheckDigit().calculate(isbn13);\n            isbn13 += checkDigit;\n            return isbn13;\n        } catch (final CheckDigitException e) {\n            throw new IllegalArgumentException(\"Check digit error for '\" + input + \"' - \" + e.getMessage());\n        }\n\n    }\n\n    /**\n     * Check the code is either a valid ISBN-10 or ISBN-13 code.\n     *\n     * @param code The code to validate.\n     * @return {@code true} if a valid ISBN-10 or\n     * ISBN-13 code, otherwise {@code false}.\n     */\n    public boolean isValid(final String code) {\n        return isValidISBN13(code) || isValidISBN10(code);\n    }\n\n    /**\n     * Check the code is a valid ISBN-10 code.\n     *\n     * @param code The code to validate.\n     * @return {@code true} if a valid ISBN-10\n     * code, otherwise {@code false}.\n     */\n    public boolean isValidISBN10(final String code) {\n        return isbn10Validator.isValid(code);\n    }\n\n    /**\n     * Check the code is a valid ISBN-13 code.\n     *\n     * @param code The code to validate.\n     * @return {@code true} if a valid ISBN-13\n     * code, otherwise {@code false}.\n     */\n    public boolean isValidISBN13(final String code) {\n        return isbn13Validator.isValid(code);\n    }\n\n    /**\n     * Check the code is either a valid ISBN-10 or ISBN-13 code.\n     * <p>\n     * If valid, this method returns the ISBN code with\n     * formatting characters removed (i.e. space or hyphen).\n     * <p>\n     * Converts an ISBN-10 codes to ISBN-13 if\n     * {@code convertToISBN13} is {@code true}.\n     *\n     * @param code The code to validate.\n     * @return A valid ISBN code if valid, otherwise {@code null}.\n     */\n    public String validate(final String code) {\n        String result = validateISBN13(code);\n        if (result == null) {\n            result = validateISBN10(code);\n            if (result != null && convert) {\n                result = convertToISBN13(result);\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Check the code is a valid ISBN-10 code.\n     * <p>\n     * If valid, this method returns the ISBN-10 code with\n     * formatting characters removed (i.e. space or hyphen).\n     *\n     * @param code The code to validate.\n     * @return A valid ISBN-10 code if valid,\n     * otherwise {@code null}.\n     */\n    public String validateISBN10(final String code) {\n        final Object result = isbn10Validator.validate(code);\n        return Objects.toString(result, null);\n    }\n\n    /**\n     * Check the code is a valid ISBN-13 code.\n     * <p>\n     * If valid, this method returns the ISBN-13 code with\n     * formatting characters removed (i.e. space or hyphen).\n     *\n     * @param code The code to validate.\n     * @return A valid ISBN-13 code if valid,\n     * otherwise {@code null}.\n     */\n    public String validateISBN13(final String code) {\n        final Object result = isbn13Validator.validate(code);\n        return Objects.toString(result, null);\n    }\n\n}", "super_interfaces": ["Serializable"], "fields": [{"attribute_expression": "private static final int ISBN_10_LEN = 10;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "ISBN_10_LEN = 10", "syntax_pass": true}, {"attribute_expression": "private static final long serialVersionUID = 4319515687976420405L;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "serialVersionUID = 4319515687976420405L", "syntax_pass": true}, {"attribute_expression": "private static final String SEP = \"(?:\\\\-|\\\\s)\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "SEP = \"(?:\\\\-|\\\\s)\"", "syntax_pass": true}, {"attribute_expression": "private static final String GROUP = \"(\\\\d{1,5})\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "GROUP = \"(\\\\d{1,5})\"", "syntax_pass": true}, {"attribute_expression": "private static final String PUBLISHER = \"(\\\\d{1,7})\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "PUBLISHER = \"(\\\\d{1,7})\"", "syntax_pass": true}, {"attribute_expression": "private static final String TITLE = \"(\\\\d{1,6})\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "TITLE = \"(\\\\d{1,6})\"", "syntax_pass": true}, {"attribute_expression": "static final String ISBN10_REGEX = \"^(?:(\\\\d{9}[0-9X])|(?:\" + GROUP + SEP + PUBLISHER + SEP + TITLE + SEP + \"([0-9X])))$\";", "docstring": "\nISBN-10 consists of 4 groups of numbers separated by either dashes (-)\nor spaces.  The first group is 1-5 characters, second 1-7, third 1-6,\nand fourth is 1 digit or an X.\n", "modifiers": "static final", "marker_annotations": [], "non_marker_annotations": ["static", "final"], "comments": [], "type": "String", "name": "ISBN10_REGEX = \"^(?:(\\\\d{9}[0-9X])|(?:\" + GROUP + SEP + PUBLISHER + SEP + TITLE + SEP + \"([0-9X])))$\"", "syntax_pass": true}, {"attribute_expression": "static final String ISBN13_REGEX = \"^(978|979)(?:(\\\\d{10})|(?:\" + SEP + GROUP + SEP + PUBLISHER + SEP + TITLE + SEP + \"([0-9])))$\";", "docstring": "\nISBN-13 consists of 5 groups of numbers separated by either dashes (-)\nor spaces.  The first group is 978 or 979, the second group is\n1-5 characters, third 1-7, fourth 1-6, and fifth is 1 digit.\n", "modifiers": "static final", "marker_annotations": [], "non_marker_annotations": ["static", "final"], "comments": [], "type": "String", "name": "ISBN13_REGEX = \"^(978|979)(?:(\\\\d{10})|(?:\" + SEP + GROUP + SEP + PUBLISHER + SEP + TITLE + SEP + \"([0-9])))$\"", "syntax_pass": true}, {"attribute_expression": "private static final ISBNValidator ISBN_VALIDATOR = new ISBNValidator();", "docstring": " ISBN Code Validator (which converts ISBN-10 codes to ISBN-13", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "ISBNValidator", "name": "ISBN_VALIDATOR = new ISBNValidator()", "syntax_pass": true}, {"attribute_expression": "private static final ISBNValidator ISBN_VALIDATOR_NO_CONVERT = new ISBNValidator(false);", "docstring": " ISBN Code Validator (which converts ISBN-10 codes to ISBN-13", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "ISBNValidator", "name": "ISBN_VALIDATOR_NO_CONVERT = new ISBNValidator(false)", "syntax_pass": true}, {"attribute_expression": "private final CodeValidator isbn10Validator = new CodeValidator(ISBN10_REGEX, 10, ISBN10CheckDigit.ISBN10_CHECK_DIGIT);", "docstring": " ISBN-10 Code Validator", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "CodeValidator", "name": "isbn10Validator = new CodeValidator(ISBN10_REGEX, 10, ISBN10CheckDigit.ISBN10_CHECK_DIGIT)", "syntax_pass": true}, {"attribute_expression": "private final CodeValidator isbn13Validator = new CodeValidator(ISBN13_REGEX, 13, EAN13CheckDigit.EAN13_CHECK_DIGIT);", "docstring": " ISBN-13 Code Validator", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "CodeValidator", "name": "isbn13Validator = new CodeValidator(ISBN13_REGEX, 13, EAN13CheckDigit.EAN13_CHECK_DIGIT)", "syntax_pass": true}, {"attribute_expression": "private final boolean convert;", "docstring": "\nWhether validation converts an ISBN-10 codes to ISBN-13.\n", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "boolean", "name": "convert", "syntax_pass": true}]}, {"uris": "src/main/java/org/apache/commons/validator/routines/DomainValidator.java.DomainValidator", "name": "DomainValidator", "file_path": "src/main/java/org/apache/commons/validator/routines/DomainValidator.java", "superclasses": "", "methods": ["[boolean]arrayContains(String[],String)", "[DomainValidator]getInstance()", "[DomainValidator]getInstance(boolean)", "[DomainValidator]getInstance(boolean,List<Item>)", "[String[]]getTLDEntries(ArrayType)", "[boolean]isOnlyASCII(String)", "[String]unicodeToASCII(String)", "[void]updateTLDOverride(ArrayType)", "[]DomainValidator(boolean)", "[]DomainValidator(boolean,List<Item>)", "[String]chompLeadingDot(String)", "[String[]]getOverrides(ArrayType)", "[boolean]isAllowLocal()", "[boolean]isValid(String)", "[boolean]isValidCountryCodeTld(String)", "[boolean]isValidDomainSyntax(String)", "[boolean]isValidGenericTld(String)", "[boolean]isValidInfrastructureTld(String)", "[boolean]isValidLocalTld(String)", "[boolean]isValidTld(String)"], "method_uris": ["src/main/java/org/apache/commons/validator/routines/DomainValidator.java.DomainValidator.[boolean]arrayContains(String[],String)", "src/main/java/org/apache/commons/validator/routines/DomainValidator.java.DomainValidator.[DomainValidator]getInstance()", "src/main/java/org/apache/commons/validator/routines/DomainValidator.java.DomainValidator.[DomainValidator]getInstance(boolean)", "src/main/java/org/apache/commons/validator/routines/DomainValidator.java.DomainValidator.[DomainValidator]getInstance(boolean,List<Item>)", "src/main/java/org/apache/commons/validator/routines/DomainValidator.java.DomainValidator.[String[]]getTLDEntries(ArrayType)", "src/main/java/org/apache/commons/validator/routines/DomainValidator.java.DomainValidator.[boolean]isOnlyASCII(String)", "src/main/java/org/apache/commons/validator/routines/DomainValidator.java.DomainValidator.[String]unicodeToASCII(String)", "src/main/java/org/apache/commons/validator/routines/DomainValidator.java.DomainValidator.[void]updateTLDOverride(ArrayType)", "src/main/java/org/apache/commons/validator/routines/DomainValidator.java.DomainValidator.[]DomainValidator(boolean)", "src/main/java/org/apache/commons/validator/routines/DomainValidator.java.DomainValidator.[]DomainValidator(boolean,List<Item>)", "src/main/java/org/apache/commons/validator/routines/DomainValidator.java.DomainValidator.[String]chompLeadingDot(String)", "src/main/java/org/apache/commons/validator/routines/DomainValidator.java.DomainValidator.[String[]]getOverrides(ArrayType)", "src/main/java/org/apache/commons/validator/routines/DomainValidator.java.DomainValidator.[boolean]isAllowLocal()", "src/main/java/org/apache/commons/validator/routines/DomainValidator.java.DomainValidator.[boolean]isValid(String)", "src/main/java/org/apache/commons/validator/routines/DomainValidator.java.DomainValidator.[boolean]isValidCountryCodeTld(String)", "src/main/java/org/apache/commons/validator/routines/DomainValidator.java.DomainValidator.[boolean]isValidDomainSyntax(String)", "src/main/java/org/apache/commons/validator/routines/DomainValidator.java.DomainValidator.[boolean]isValidGenericTld(String)", "src/main/java/org/apache/commons/validator/routines/DomainValidator.java.DomainValidator.[boolean]isValidInfrastructureTld(String)", "src/main/java/org/apache/commons/validator/routines/DomainValidator.java.DomainValidator.[boolean]isValidLocalTld(String)", "src/main/java/org/apache/commons/validator/routines/DomainValidator.java.DomainValidator.[boolean]isValidTld(String)"], "overrides": null, "attributes": [{"original_string": "    private static class IDNBUGHOLDER {\n        private static final boolean IDN_TOASCII_PRESERVES_TRAILING_DOTS = keepsTrailingDot();\n        private static boolean keepsTrailingDot() {\n            final String input = \"a.\"; // must be a valid name\n            return input.equals(IDN.toASCII(input));\n        }\n    }", "definition": "    private static class IDNBUGHOLDER", "class_docstring": "", "name": "IDNBUGHOLDER", "super_interfaces": [], "superclasses": "", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "fields": [{"attribute_expression": "private static final boolean IDN_TOASCII_PRESERVES_TRAILING_DOTS = keepsTrailingDot();", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "boolean", "name": "IDN_TOASCII_PRESERVES_TRAILING_DOTS = keepsTrailingDot()", "syntax_pass": true}], "classes": []}, "syntax_pass": true, "methods": [{"syntax_pass": true, "original_string": "        private static boolean keepsTrailingDot() {\n            final String input = \"a.\"; // must be a valid name\n            return input.equals(IDN.toASCII(input));\n        }", "docstring": "", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "boolean", "classes": []}, "name": "keepsTrailingDot", "params": [], "body": "                                                  {\n            final String input = \"a.\"; // must be a valid name\n            return input.equals(IDN.toASCII(input));\n        }", "signature": "private static boolean keepsTrailingDot()"}]}, {"original_string": "    public static class Item {\n        final ArrayType type;\n        final String[] values;\n\n        /**\n         * Constructs a new instance.\n         * @param type ArrayType, e.g. GENERIC_PLUS, LOCAL_PLUS\n         * @param values array of TLDs. Will be lower-cased and sorted\n         */\n        public Item(final ArrayType type, final String... values) {\n            this.type = type;\n            this.values = values; // no need to copy here\n        }\n    }", "definition": "    public static class Item", "class_docstring": "\nUsed to specify overrides when creating a new class.\n@since 1.7\n", "name": "Item", "super_interfaces": [], "superclasses": "", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "fields": [{"attribute_expression": "final ArrayType type;", "docstring": "", "modifiers": "final", "marker_annotations": [], "non_marker_annotations": ["final"], "comments": [], "type": "ArrayType", "name": "type", "syntax_pass": true}, {"attribute_expression": "final String[] values;", "docstring": "", "modifiers": "final", "marker_annotations": [], "non_marker_annotations": ["final"], "comments": [], "type": "String[]", "name": "values", "syntax_pass": true}], "classes": []}, "syntax_pass": true, "methods": [{"syntax_pass": true, "original_string": "        public Item(final ArrayType type, final String... values) {\n            this.type = type;\n            this.values = values; // no need to copy here\n        }", "docstring": "\nConstructs a new instance.\n@param type ArrayType, e.g. GENERIC_PLUS, LOCAL_PLUS\n@param values array of TLDs. Will be lower-cased and sorted\n", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "name": "Item", "params": [{"name": "type", "type": "ArrayType"}], "body": "                                                                  {\n            this.type = type;\n            this.values = values; // no need to copy here\n        }", "signature": "public Item(final ArrayType type, final String... values)"}]}, {"original_string": "    private static class LazyHolder { // IODH\n\n        /**\n         * Singleton instance of this validator, which\n         *  doesn't consider local addresses as valid.\n         */\n        private static final DomainValidator DOMAIN_VALIDATOR = new DomainValidator(false);\n\n        /**\n         * Singleton instance of this validator, which does\n         *  consider local addresses valid.\n         */\n        private static final DomainValidator DOMAIN_VALIDATOR_WITH_LOCAL = new DomainValidator(true);\n\n    }", "definition": "    private static class LazyHolder", "class_docstring": " Regular expression strings for hostnames (derived from RFC2396 and RFC 1123)", "name": "LazyHolder", "super_interfaces": [], "superclasses": "", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "fields": [{"attribute_expression": "private static final DomainValidator DOMAIN_VALIDATOR = new DomainValidator(false);", "docstring": "\nSingleton instance of this validator, which\n doesn't consider local addresses as valid.\n", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "DomainValidator", "name": "DOMAIN_VALIDATOR = new DomainValidator(false)", "syntax_pass": true}, {"attribute_expression": "private static final DomainValidator DOMAIN_VALIDATOR_WITH_LOCAL = new DomainValidator(true);", "docstring": "\nSingleton instance of this validator, which does\n consider local addresses valid.\n", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "DomainValidator", "name": "DOMAIN_VALIDATOR_WITH_LOCAL = new DomainValidator(true)", "syntax_pass": true}], "classes": []}, "syntax_pass": true, "methods": []}], "class_docstring": "\n<p><b>Domain name</b> validation routines.</p>\n\n<p>\nThis validator provides methods for validating Internet domain names\nand top-level domains.\n</p>\n\n<p>Domain names are evaluated according\nto the standards <a href=\"http://www.ietf.org/rfc/rfc1034.txt\">RFC1034</a>,\nsection 3, and <a href=\"http://www.ietf.org/rfc/rfc1123.txt\">RFC1123</a>,\nsection 2.1. No accommodation is provided for the specialized needs of\nother applications; if the domain name has been URL-encoded, for example,\nvalidation will fail even though the equivalent plaintext version of the\nsame name would have passed.\n</p>\n\n<p>\nValidation is also provided for top-level domains (TLDs) as defined and\nmaintained by the Internet Assigned Numbers Authority (IANA):\n</p>\n\n  <ul>\n    <li>{@link #isValidInfrastructureTld} - validates infrastructure TLDs\n        ({@code .arpa}, etc.)</li>\n    <li>{@link #isValidGenericTld} - validates generic TLDs\n        ({@code .com, .org}, etc.)</li>\n    <li>{@link #isValidCountryCodeTld} - validates country code TLDs\n        ({@code .us, .uk, .cn}, etc.)</li>\n  </ul>\n\n<p>\n(<b>NOTE</b>: This class does not provide IP address lookup for domain names or\nmethods to ensure that a given domain name matches a specific IP; see\n{@link java.net.InetAddress} for that functionality.)\n</p>\n\n@since 1.4\n", "original_string": "public class DomainValidator implements Serializable {\n\n    /**\n     * enum used by {@link DomainValidator#updateTLDOverride(ArrayType, String[])}\n     * to determine which override array to update / fetch\n     * @since 1.5.0\n     * @since 1.5.1 made public and added read-only array references\n     */\n    public enum ArrayType {\n        /** Update (or get a copy of) the GENERIC_TLDS_PLUS table containing additonal generic TLDs */\n        GENERIC_PLUS,\n        /** Update (or get a copy of) the GENERIC_TLDS_MINUS table containing deleted generic TLDs */\n        GENERIC_MINUS,\n        /** Update (or get a copy of) the COUNTRY_CODE_TLDS_PLUS table containing additonal country code TLDs */\n        COUNTRY_CODE_PLUS,\n        /** Update (or get a copy of) the COUNTRY_CODE_TLDS_MINUS table containing deleted country code TLDs */\n        COUNTRY_CODE_MINUS,\n        /** Gets a copy of the generic TLDS table */\n        GENERIC_RO,\n        /** Gets a copy of the country code table */\n        COUNTRY_CODE_RO,\n        /** Gets a copy of the infrastructure table */\n        INFRASTRUCTURE_RO,\n        /** Gets a copy of the local table */\n        LOCAL_RO,\n        /**\n         * Update (or get a copy of) the LOCAL_TLDS_PLUS table containing additional local TLDs\n         * @since 1.7\n         */\n        LOCAL_PLUS,\n        /**\n         * Update (or get a copy of) the LOCAL_TLDS_MINUS table containing deleted local TLDs\n         * @since 1.7\n         */\n        LOCAL_MINUS\n        ;\n    }\n\n    private static class IDNBUGHOLDER {\n        private static final boolean IDN_TOASCII_PRESERVES_TRAILING_DOTS = keepsTrailingDot();\n        private static boolean keepsTrailingDot() {\n            final String input = \"a.\"; // must be a valid name\n            return input.equals(IDN.toASCII(input));\n        }\n    }\n\n    /**\n     * Used to specify overrides when creating a new class.\n     * @since 1.7\n     */\n    public static class Item {\n        final ArrayType type;\n        final String[] values;\n\n        /**\n         * Constructs a new instance.\n         * @param type ArrayType, e.g. GENERIC_PLUS, LOCAL_PLUS\n         * @param values array of TLDs. Will be lower-cased and sorted\n         */\n        public Item(final ArrayType type, final String... values) {\n            this.type = type;\n            this.values = values; // no need to copy here\n        }\n    }\n\n    // Regular expression strings for hostnames (derived from RFC2396 and RFC 1123)\n\n    private static class LazyHolder { // IODH\n\n        /**\n         * Singleton instance of this validator, which\n         *  doesn't consider local addresses as valid.\n         */\n        private static final DomainValidator DOMAIN_VALIDATOR = new DomainValidator(false);\n\n        /**\n         * Singleton instance of this validator, which does\n         *  consider local addresses valid.\n         */\n        private static final DomainValidator DOMAIN_VALIDATOR_WITH_LOCAL = new DomainValidator(true);\n\n    }\n\n    /** Maximum allowable length ({@value}) of a domain name */\n    private static final int MAX_DOMAIN_LENGTH = 253;\n\n    private static final String[] EMPTY_STRING_ARRAY = {};\n\n    private static final long serialVersionUID = -4407125112880174009L;\n\n    // RFC2396: domainlabel   = alphanum | alphanum *( alphanum | \"-\" ) alphanum\n    // Max 63 characters\n    private static final String DOMAIN_LABEL_REGEX = \"\\\\p{Alnum}(?>[\\\\p{Alnum}-]{0,61}\\\\p{Alnum})?\";\n\n    // RFC2396 toplabel = alpha | alpha *( alphanum | \"-\" ) alphanum\n    // Max 63 characters\n    private static final String TOP_LABEL_REGEX = \"\\\\p{Alpha}(?>[\\\\p{Alnum}-]{0,61}\\\\p{Alnum})?\";\n\n    /**\n     * The above instances must only be returned via the getInstance() methods.\n     * This is to ensure that the override data arrays are properly protected.\n     */\n\n    // RFC2396 hostname = *( domainlabel \".\" ) toplabel [ \".\" ]\n    // Note that the regex currently requires both a domain label and a top level label, whereas\n    // the RFC does not. This is because the regex is used to detect if a TLD is present.\n    // If the match fails, input is checked against DOMAIN_LABEL_REGEX (hostnameRegex)\n    // RFC1123 sec 2.1 allows hostnames to start with a digit\n    private static final String DOMAIN_NAME_REGEX =\n            \"^(?:\" + DOMAIN_LABEL_REGEX + \"\\\\.)+\" + \"(\" + TOP_LABEL_REGEX + \")\\\\.?$\";\n    private static final String UNEXPECTED_ENUM_VALUE = \"Unexpected enum value: \";\n\n    // WARNING: this array MUST be sorted, otherwise it cannot be searched reliably using binary search\n    private static final String[] INFRASTRUCTURE_TLDS = {\n        \"arpa\",               // internet infrastructure\n    };\n\n    // WARNING: this array MUST be sorted, otherwise it cannot be searched reliably using binary search\n    private static final String[] GENERIC_TLDS = {\n        // Taken from Version 2024040200, Last Updated Tue Apr  2 07:07:02 2024 UTC\n        \"aaa\", // aaa American Automobile Association, Inc.\n        \"aarp\", // aarp AARP\n        // \"abarth\", // abarth Fiat Chrysler Automobiles N.V.\n        \"abb\", // abb ABB Ltd\n        \"abbott\", // abbott Abbott Laboratories, Inc.\n        \"abbvie\", // abbvie AbbVie Inc.\n        \"abc\", // abc Disney Enterprises, Inc.\n        \"able\", // able Able Inc.\n        \"abogado\", // abogado Top Level Domain Holdings Limited\n        \"abudhabi\", // abudhabi Abu Dhabi Systems and Information Centre\n        \"academy\", // academy Half Oaks, LLC\n        \"accenture\", // accenture Accenture plc\n        \"accountant\", // accountant dot Accountant Limited\n        \"accountants\", // accountants Knob Town, LLC\n        \"aco\", // aco ACO Severin Ahlmann GmbH &amp; Co. KG\n//        \"active\", // active The Active Network, Inc\n        \"actor\", // actor United TLD Holdco Ltd.\n//        \"adac\", // adac Allgemeiner Deutscher Automobil-Club e.V. (ADAC)\n        \"ads\", // ads Charleston Road Registry Inc.\n        \"adult\", // adult ICM Registry AD LLC\n        \"aeg\", // aeg Aktiebolaget Electrolux\n        \"aero\", // aero Societe Internationale de Telecommunications Aeronautique (SITA INC USA)\n        \"aetna\", // aetna Aetna Life Insurance Company\n//        \"afamilycompany\", // afamilycompany Johnson Shareholdings, Inc.\n        \"afl\", // afl Australian Football League\n        \"africa\", // africa ZA Central Registry NPC trading as Registry.Africa\n        \"agakhan\", // agakhan Fondation Aga Khan (Aga Khan Foundation)\n        \"agency\", // agency Steel Falls, LLC\n        \"aig\", // aig American International Group, Inc.\n//        \"aigo\", // aigo aigo Digital Technology Co,Ltd. [Not assigned as of Jul 25]\n        \"airbus\", // airbus Airbus S.A.S.\n        \"airforce\", // airforce United TLD Holdco Ltd.\n        \"airtel\", // airtel Bharti Airtel Limited\n        \"akdn\", // akdn Fondation Aga Khan (Aga Khan Foundation)\n        // \"alfaromeo\", // alfaromeo Fiat Chrysler Automobiles N.V.\n        \"alibaba\", // alibaba Alibaba Group Holding Limited\n        \"alipay\", // alipay Alibaba Group Holding Limited\n        \"allfinanz\", // allfinanz Allfinanz Deutsche Verm\u00f6gensberatung Aktiengesellschaft\n        \"allstate\", // allstate Allstate Fire and Casualty Insurance Company\n        \"ally\", // ally Ally Financial Inc.\n        \"alsace\", // alsace REGION D ALSACE\n        \"alstom\", // alstom ALSTOM\n        \"amazon\", // amazon Amazon Registry Services, Inc.\n        \"americanexpress\", // americanexpress American Express Travel Related Services Company, Inc.\n        \"americanfamily\", // americanfamily AmFam, Inc.\n        \"amex\", // amex American Express Travel Related Services Company, Inc.\n        \"amfam\", // amfam AmFam, Inc.\n        \"amica\", // amica Amica Mutual Insurance Company\n        \"amsterdam\", // amsterdam Gemeente Amsterdam\n        \"analytics\", // analytics Campus IP LLC\n        \"android\", // android Charleston Road Registry Inc.\n        \"anquan\", // anquan QIHOO 360 TECHNOLOGY CO. LTD.\n        \"anz\", // anz Australia and New Zealand Banking Group Limited\n        \"aol\", // aol AOL Inc.\n        \"apartments\", // apartments June Maple, LLC\n        \"app\", // app Charleston Road Registry Inc.\n        \"apple\", // apple Apple Inc.\n        \"aquarelle\", // aquarelle Aquarelle.com\n        \"arab\", // arab League of Arab States\n        \"aramco\", // aramco Aramco Services Company\n        \"archi\", // archi STARTING DOT LIMITED\n        \"army\", // army United TLD Holdco Ltd.\n        \"art\", // art UK Creative Ideas Limited\n        \"arte\", // arte Association Relative \u00e0 la T\u00e9l\u00e9vision Europ\u00e9enne G.E.I.E.\n        \"asda\", // asda Wal-Mart Stores, Inc.\n        \"asia\", // asia DotAsia Organisation Ltd.\n        \"associates\", // associates Baxter Hill, LLC\n        \"athleta\", // athleta The Gap, Inc.\n        \"attorney\", // attorney United TLD Holdco, Ltd\n        \"auction\", // auction United TLD HoldCo, Ltd.\n        \"audi\", // audi AUDI Aktiengesellschaft\n        \"audible\", // audible Amazon Registry Services, Inc.\n        \"audio\", // audio Uniregistry, Corp.\n        \"auspost\", // auspost Australian Postal Corporation\n        \"author\", // author Amazon Registry Services, Inc.\n        \"auto\", // auto Uniregistry, Corp.\n        \"autos\", // autos DERAutos, LLC\n        // \"avianca\", // avianca Aerovias del Continente Americano S.A. Avianca\n        \"aws\", // aws Amazon Registry Services, Inc.\n        \"axa\", // axa AXA SA\n        \"azure\", // azure Microsoft Corporation\n        \"baby\", // baby Johnson &amp; Johnson Services, Inc.\n        \"baidu\", // baidu Baidu, Inc.\n        \"banamex\", // banamex Citigroup Inc.\n        // \"bananarepublic\", // bananarepublic The Gap, Inc.\n        \"band\", // band United TLD Holdco, Ltd\n        \"bank\", // bank fTLD Registry Services, LLC\n        \"bar\", // bar Punto 2012 Sociedad Anonima Promotora de Inversion de Capital Variable\n        \"barcelona\", // barcelona Municipi de Barcelona\n        \"barclaycard\", // barclaycard Barclays Bank PLC\n        \"barclays\", // barclays Barclays Bank PLC\n        \"barefoot\", // barefoot Gallo Vineyards, Inc.\n        \"bargains\", // bargains Half Hallow, LLC\n        \"baseball\", // baseball MLB Advanced Media DH, LLC\n        \"basketball\", // basketball F\u00e9d\u00e9ration Internationale de Basketball (FIBA)\n        \"bauhaus\", // bauhaus Werkhaus GmbH\n        \"bayern\", // bayern Bayern Connect GmbH\n        \"bbc\", // bbc British Broadcasting Corporation\n        \"bbt\", // bbt BB&amp;T Corporation\n        \"bbva\", // bbva BANCO BILBAO VIZCAYA ARGENTARIA, S.A.\n        \"bcg\", // bcg The Boston Consulting Group, Inc.\n        \"bcn\", // bcn Municipi de Barcelona\n        \"beats\", // beats Beats Electronics, LLC\n        \"beauty\", // beauty L&#39;Or\u00e9al\n        \"beer\", // beer Top Level Domain Holdings Limited\n        \"bentley\", // bentley Bentley Motors Limited\n        \"berlin\", // berlin dotBERLIN GmbH &amp; Co. KG\n        \"best\", // best BestTLD Pty Ltd\n        \"bestbuy\", // bestbuy BBY Solutions, Inc.\n        \"bet\", // bet Afilias plc\n        \"bharti\", // bharti Bharti Enterprises (Holding) Private Limited\n        \"bible\", // bible American Bible Society\n        \"bid\", // bid dot Bid Limited\n        \"bike\", // bike Grand Hollow, LLC\n        \"bing\", // bing Microsoft Corporation\n        \"bingo\", // bingo Sand Cedar, LLC\n        \"bio\", // bio STARTING DOT LIMITED\n        \"biz\", // biz Neustar, Inc.\n        \"black\", // black Afilias Limited\n        \"blackfriday\", // blackfriday Uniregistry, Corp.\n//        \"blanco\", // blanco BLANCO GmbH + Co KG\n        \"blockbuster\", // blockbuster Dish DBS Corporation\n        \"blog\", // blog Knock Knock WHOIS There, LLC\n        \"bloomberg\", // bloomberg Bloomberg IP Holdings LLC\n        \"blue\", // blue Afilias Limited\n        \"bms\", // bms Bristol-Myers Squibb Company\n        \"bmw\", // bmw Bayerische Motoren Werke Aktiengesellschaft\n//        \"bnl\", // bnl Banca Nazionale del Lavoro\n        \"bnpparibas\", // bnpparibas BNP Paribas\n        \"boats\", // boats DERBoats, LLC\n        \"boehringer\", // boehringer Boehringer Ingelheim International GmbH\n        \"bofa\", // bofa NMS Services, Inc.\n        \"bom\", // bom N\u00facleo de Informa\u00e7\u00e3o e Coordena\u00e7\u00e3o do Ponto BR - NIC.br\n        \"bond\", // bond Bond University Limited\n        \"boo\", // boo Charleston Road Registry Inc.\n        \"book\", // book Amazon Registry Services, Inc.\n        \"booking\", // booking Booking.com B.V.\n//        \"boots\", // boots THE BOOTS COMPANY PLC\n        \"bosch\", // bosch Robert Bosch GMBH\n        \"bostik\", // bostik Bostik SA\n        \"boston\", // boston Boston TLD Management, LLC\n        \"bot\", // bot Amazon Registry Services, Inc.\n        \"boutique\", // boutique Over Galley, LLC\n        \"box\", // box NS1 Limited\n        \"bradesco\", // bradesco Banco Bradesco S.A.\n        \"bridgestone\", // bridgestone Bridgestone Corporation\n        \"broadway\", // broadway Celebrate Broadway, Inc.\n        \"broker\", // broker DOTBROKER REGISTRY LTD\n        \"brother\", // brother Brother Industries, Ltd.\n        \"brussels\", // brussels DNS.be vzw\n//        \"budapest\", // budapest Top Level Domain Holdings Limited\n//        \"bugatti\", // bugatti Bugatti International SA\n        \"build\", // build Plan Bee LLC\n        \"builders\", // builders Atomic Madison, LLC\n        \"business\", // business Spring Cross, LLC\n        \"buy\", // buy Amazon Registry Services, INC\n        \"buzz\", // buzz DOTSTRATEGY CO.\n        \"bzh\", // bzh Association www.bzh\n        \"cab\", // cab Half Sunset, LLC\n        \"cafe\", // cafe Pioneer Canyon, LLC\n        \"cal\", // cal Charleston Road Registry Inc.\n        \"call\", // call Amazon Registry Services, Inc.\n        \"calvinklein\", // calvinklein PVH gTLD Holdings LLC\n        \"cam\", // cam AC Webconnecting Holding B.V.\n        \"camera\", // camera Atomic Maple, LLC\n        \"camp\", // camp Delta Dynamite, LLC\n//        \"cancerresearch\", // cancerresearch Australian Cancer Research Foundation\n        \"canon\", // canon Canon Inc.\n        \"capetown\", // capetown ZA Central Registry NPC trading as ZA Central Registry\n        \"capital\", // capital Delta Mill, LLC\n        \"capitalone\", // capitalone Capital One Financial Corporation\n        \"car\", // car Cars Registry Limited\n        \"caravan\", // caravan Caravan International, Inc.\n        \"cards\", // cards Foggy Hollow, LLC\n        \"care\", // care Goose Cross, LLC\n        \"career\", // career dotCareer LLC\n        \"careers\", // careers Wild Corner, LLC\n        \"cars\", // cars Uniregistry, Corp.\n//        \"cartier\", // cartier Richemont DNS Inc.\n        \"casa\", // casa Top Level Domain Holdings Limited\n        \"case\", // case CNH Industrial N.V.\n//        \"caseih\", // caseih CNH Industrial N.V.\n        \"cash\", // cash Delta Lake, LLC\n        \"casino\", // casino Binky Sky, LLC\n        \"cat\", // cat Fundacio puntCAT\n        \"catering\", // catering New Falls. LLC\n        \"catholic\", // catholic Pontificium Consilium de Comunicationibus Socialibus (PCCS) (Pontifical Council for Social Communication)\n        \"cba\", // cba COMMONWEALTH BANK OF AUSTRALIA\n        \"cbn\", // cbn The Christian Broadcasting Network, Inc.\n        \"cbre\", // cbre CBRE, Inc.\n        // \"cbs\", // cbs CBS Domains Inc.\n//        \"ceb\", // ceb The Corporate Executive Board Company\n        \"center\", // center Tin Mill, LLC\n        \"ceo\", // ceo CEOTLD Pty Ltd\n        \"cern\", // cern European Organization for Nuclear Research (&quot;CERN&quot;)\n        \"cfa\", // cfa CFA Institute\n        \"cfd\", // cfd DOTCFD REGISTRY LTD\n        \"chanel\", // chanel Chanel International B.V.\n        \"channel\", // channel Charleston Road Registry Inc.\n        \"charity\", // charity Corn Lake, LLC\n        \"chase\", // chase JPMorgan Chase &amp; Co.\n        \"chat\", // chat Sand Fields, LLC\n        \"cheap\", // cheap Sand Cover, LLC\n        \"chintai\", // chintai CHINTAI Corporation\n//        \"chloe\", // chloe Richemont DNS Inc. (Not assigned)\n        \"christmas\", // christmas Uniregistry, Corp.\n        \"chrome\", // chrome Charleston Road Registry Inc.\n//        \"chrysler\", // chrysler FCA US LLC.\n        \"church\", // church Holly Fileds, LLC\n        \"cipriani\", // cipriani Hotel Cipriani Srl\n        \"circle\", // circle Amazon Registry Services, Inc.\n        \"cisco\", // cisco Cisco Technology, Inc.\n        \"citadel\", // citadel Citadel Domain LLC\n        \"citi\", // citi Citigroup Inc.\n        \"citic\", // citic CITIC Group Corporation\n        \"city\", // city Snow Sky, LLC\n        // \"cityeats\", // cityeats Lifestyle Domain Holdings, Inc.\n        \"claims\", // claims Black Corner, LLC\n        \"cleaning\", // cleaning Fox Shadow, LLC\n        \"click\", // click Uniregistry, Corp.\n        \"clinic\", // clinic Goose Park, LLC\n        \"clinique\", // clinique The Est\u00e9e Lauder Companies Inc.\n        \"clothing\", // clothing Steel Lake, LLC\n        \"cloud\", // cloud ARUBA S.p.A.\n        \"club\", // club .CLUB DOMAINS, LLC\n        \"clubmed\", // clubmed Club M\u00e9diterran\u00e9e S.A.\n        \"coach\", // coach Koko Island, LLC\n        \"codes\", // codes Puff Willow, LLC\n        \"coffee\", // coffee Trixy Cover, LLC\n        \"college\", // college XYZ.COM LLC\n        \"cologne\", // cologne NetCologne Gesellschaft f\u00fcr Telekommunikation mbH\n        \"com\", // com VeriSign Global Registry Services\n        // \"comcast\", // comcast Comcast IP Holdings I, LLC\n        \"commbank\", // commbank COMMONWEALTH BANK OF AUSTRALIA\n        \"community\", // community Fox Orchard, LLC\n        \"company\", // company Silver Avenue, LLC\n        \"compare\", // compare iSelect Ltd\n        \"computer\", // computer Pine Mill, LLC\n        \"comsec\", // comsec VeriSign, Inc.\n        \"condos\", // condos Pine House, LLC\n        \"construction\", // construction Fox Dynamite, LLC\n        \"consulting\", // consulting United TLD Holdco, LTD.\n        \"contact\", // contact Top Level Spectrum, Inc.\n        \"contractors\", // contractors Magic Woods, LLC\n        \"cooking\", // cooking Top Level Domain Holdings Limited\n        // \"cookingchannel\", // cookingchannel Lifestyle Domain Holdings, Inc.\n        \"cool\", // cool Koko Lake, LLC\n        \"coop\", // coop DotCooperation LLC\n        \"corsica\", // corsica Collectivit\u00e9 Territoriale de Corse\n        \"country\", // country Top Level Domain Holdings Limited\n        \"coupon\", // coupon Amazon Registry Services, Inc.\n        \"coupons\", // coupons Black Island, LLC\n        \"courses\", // courses OPEN UNIVERSITIES AUSTRALIA PTY LTD\n        \"cpa\", // cpa American Institute of Certified Public Accountants\n        \"credit\", // credit Snow Shadow, LLC\n        \"creditcard\", // creditcard Binky Frostbite, LLC\n        \"creditunion\", // creditunion CUNA Performance Resources, LLC\n        \"cricket\", // cricket dot Cricket Limited\n        \"crown\", // crown Crown Equipment Corporation\n        \"crs\", // crs Federated Co-operatives Limited\n        \"cruise\", // cruise Viking River Cruises (Bermuda) Ltd.\n        \"cruises\", // cruises Spring Way, LLC\n//        \"csc\", // csc Alliance-One Services, Inc.\n        \"cuisinella\", // cuisinella SALM S.A.S.\n        \"cymru\", // cymru Nominet UK\n        \"cyou\", // cyou Beijing Gamease Age Digital Technology Co., Ltd.\n        \"dabur\", // dabur Dabur India Limited\n        \"dad\", // dad Charleston Road Registry Inc.\n        \"dance\", // dance United TLD Holdco Ltd.\n        \"data\", // data Dish DBS Corporation\n        \"date\", // date dot Date Limited\n        \"dating\", // dating Pine Fest, LLC\n        \"datsun\", // datsun NISSAN MOTOR CO., LTD.\n        \"day\", // day Charleston Road Registry Inc.\n        \"dclk\", // dclk Charleston Road Registry Inc.\n        \"dds\", // dds Minds + Machines Group Limited\n        \"deal\", // deal Amazon Registry Services, Inc.\n        \"dealer\", // dealer Dealer Dot Com, Inc.\n        \"deals\", // deals Sand Sunset, LLC\n        \"degree\", // degree United TLD Holdco, Ltd\n        \"delivery\", // delivery Steel Station, LLC\n        \"dell\", // dell Dell Inc.\n        \"deloitte\", // deloitte Deloitte Touche Tohmatsu\n        \"delta\", // delta Delta Air Lines, Inc.\n        \"democrat\", // democrat United TLD Holdco Ltd.\n        \"dental\", // dental Tin Birch, LLC\n        \"dentist\", // dentist United TLD Holdco, Ltd\n        \"desi\", // desi Desi Networks LLC\n        \"design\", // design Top Level Design, LLC\n        \"dev\", // dev Charleston Road Registry Inc.\n        \"dhl\", // dhl Deutsche Post AG\n        \"diamonds\", // diamonds John Edge, LLC\n        \"diet\", // diet Uniregistry, Corp.\n        \"digital\", // digital Dash Park, LLC\n        \"direct\", // direct Half Trail, LLC\n        \"directory\", // directory Extra Madison, LLC\n        \"discount\", // discount Holly Hill, LLC\n        \"discover\", // discover Discover Financial Services\n        \"dish\", // dish Dish DBS Corporation\n        \"diy\", // diy Lifestyle Domain Holdings, Inc.\n        \"dnp\", // dnp Dai Nippon Printing Co., Ltd.\n        \"docs\", // docs Charleston Road Registry Inc.\n        \"doctor\", // doctor Brice Trail, LLC\n//        \"dodge\", // dodge FCA US LLC.\n        \"dog\", // dog Koko Mill, LLC\n//        \"doha\", // doha Communications Regulatory Authority (CRA)\n        \"domains\", // domains Sugar Cross, LLC\n//            \"doosan\", // doosan Doosan Corporation (retired)\n        \"dot\", // dot Dish DBS Corporation\n        \"download\", // download dot Support Limited\n        \"drive\", // drive Charleston Road Registry Inc.\n        \"dtv\", // dtv Dish DBS Corporation\n        \"dubai\", // dubai Dubai Smart Government Department\n//        \"duck\", // duck Johnson Shareholdings, Inc.\n        \"dunlop\", // dunlop The Goodyear Tire &amp; Rubber Company\n//        \"duns\", // duns The Dun &amp; Bradstreet Corporation\n        \"dupont\", // dupont E. I. du Pont de Nemours and Company\n        \"durban\", // durban ZA Central Registry NPC trading as ZA Central Registry\n        \"dvag\", // dvag Deutsche Verm\u00f6gensberatung Aktiengesellschaft DVAG\n        \"dvr\", // dvr Hughes Satellite Systems Corporation\n        \"earth\", // earth Interlink Co., Ltd.\n        \"eat\", // eat Charleston Road Registry Inc.\n        \"eco\", // eco Big Room Inc.\n        \"edeka\", // edeka EDEKA Verband kaufm\u00e4nnischer Genossenschaften e.V.\n        \"edu\", // edu EDUCAUSE\n        \"education\", // education Brice Way, LLC\n        \"email\", // email Spring Madison, LLC\n        \"emerck\", // emerck Merck KGaA\n        \"energy\", // energy Binky Birch, LLC\n        \"engineer\", // engineer United TLD Holdco Ltd.\n        \"engineering\", // engineering Romeo Canyon\n        \"enterprises\", // enterprises Snow Oaks, LLC\n//        \"epost\", // epost Deutsche Post AG\n        \"epson\", // epson Seiko Epson Corporation\n        \"equipment\", // equipment Corn Station, LLC\n        \"ericsson\", // ericsson Telefonaktiebolaget L M Ericsson\n        \"erni\", // erni ERNI Group Holding AG\n        \"esq\", // esq Charleston Road Registry Inc.\n        \"estate\", // estate Trixy Park, LLC\n        // \"esurance\", // esurance Esurance Insurance Company (not assigned as at Version 2020062100)\n        // \"etisalat\", // etisalat Emirates Telecommunic\n        \"eurovision\", // eurovision European Broadcasting Union (EBU)\n        \"eus\", // eus Puntueus Fundazioa\n        \"events\", // events Pioneer Maple, LLC\n//        \"everbank\", // everbank EverBank\n        \"exchange\", // exchange Spring Falls, LLC\n        \"expert\", // expert Magic Pass, LLC\n        \"exposed\", // exposed Victor Beach, LLC\n        \"express\", // express Sea Sunset, LLC\n        \"extraspace\", // extraspace Extra Space Storage LLC\n        \"fage\", // fage Fage International S.A.\n        \"fail\", // fail Atomic Pipe, LLC\n        \"fairwinds\", // fairwinds FairWinds Partners, LLC\n        \"faith\", // faith dot Faith Limited\n        \"family\", // family United TLD Holdco Ltd.\n        \"fan\", // fan Asiamix Digital Ltd\n        \"fans\", // fans Asiamix Digital Limited\n        \"farm\", // farm Just Maple, LLC\n        \"farmers\", // farmers Farmers Insurance Exchange\n        \"fashion\", // fashion Top Level Domain Holdings Limited\n        \"fast\", // fast Amazon Registry Services, Inc.\n        \"fedex\", // fedex Federal Express Corporation\n        \"feedback\", // feedback Top Level Spectrum, Inc.\n        \"ferrari\", // ferrari Fiat Chrysler Automobiles N.V.\n        \"ferrero\", // ferrero Ferrero Trading Lux S.A.\n        // \"fiat\", // fiat Fiat Chrysler Automobiles N.V.\n        \"fidelity\", // fidelity Fidelity Brokerage Services LLC\n        \"fido\", // fido Rogers Communications Canada Inc.\n        \"film\", // film Motion Picture Domain Registry Pty Ltd\n        \"final\", // final N\u00facleo de Informa\u00e7\u00e3o e Coordena\u00e7\u00e3o do Ponto BR - NIC.br\n        \"finance\", // finance Cotton Cypress, LLC\n        \"financial\", // financial Just Cover, LLC\n        \"fire\", // fire Amazon Registry Services, Inc.\n        \"firestone\", // firestone Bridgestone Corporation\n        \"firmdale\", // firmdale Firmdale Holdings Limited\n        \"fish\", // fish Fox Woods, LLC\n        \"fishing\", // fishing Top Level Domain Holdings Limited\n        \"fit\", // fit Minds + Machines Group Limited\n        \"fitness\", // fitness Brice Orchard, LLC\n        \"flickr\", // flickr Yahoo! Domain Services Inc.\n        \"flights\", // flights Fox Station, LLC\n        \"flir\", // flir FLIR Systems, Inc.\n        \"florist\", // florist Half Cypress, LLC\n        \"flowers\", // flowers Uniregistry, Corp.\n//        \"flsmidth\", // flsmidth FLSmidth A/S retired 2016-07-22\n        \"fly\", // fly Charleston Road Registry Inc.\n        \"foo\", // foo Charleston Road Registry Inc.\n        \"food\", // food Lifestyle Domain Holdings, Inc.\n        // \"foodnetwork\", // foodnetwork Lifestyle Domain Holdings, Inc.\n        \"football\", // football Foggy Farms, LLC\n        \"ford\", // ford Ford Motor Company\n        \"forex\", // forex DOTFOREX REGISTRY LTD\n        \"forsale\", // forsale United TLD Holdco, LLC\n        \"forum\", // forum Fegistry, LLC\n        \"foundation\", // foundation John Dale, LLC\n        \"fox\", // fox FOX Registry, LLC\n        \"free\", // free Amazon Registry Services, Inc.\n        \"fresenius\", // fresenius Fresenius Immobilien-Verwaltungs-GmbH\n        \"frl\", // frl FRLregistry B.V.\n        \"frogans\", // frogans OP3FT\n        // \"frontdoor\", // frontdoor Lifestyle Domain Holdings, Inc.\n        \"frontier\", // frontier Frontier Communications Corporation\n        \"ftr\", // ftr Frontier Communications Corporation\n        \"fujitsu\", // fujitsu Fujitsu Limited\n//        \"fujixerox\", // fujixerox Xerox DNHC LLC\n        \"fun\", // fun DotSpace, Inc.\n        \"fund\", // fund John Castle, LLC\n        \"furniture\", // furniture Lone Fields, LLC\n        \"futbol\", // futbol United TLD Holdco, Ltd.\n        \"fyi\", // fyi Silver Tigers, LLC\n        \"gal\", // gal Asociaci\u00f3n puntoGAL\n        \"gallery\", // gallery Sugar House, LLC\n        \"gallo\", // gallo Gallo Vineyards, Inc.\n        \"gallup\", // gallup Gallup, Inc.\n        \"game\", // game Uniregistry, Corp.\n        \"games\", // games United TLD Holdco Ltd.\n        \"gap\", // gap The Gap, Inc.\n        \"garden\", // garden Top Level Domain Holdings Limited\n        \"gay\", // gay Top Level Design, LLC\n        \"gbiz\", // gbiz Charleston Road Registry Inc.\n        \"gdn\", // gdn Joint Stock Company \"Navigation-information systems\"\n        \"gea\", // gea GEA Group Aktiengesellschaft\n        \"gent\", // gent COMBELL GROUP NV/SA\n        \"genting\", // genting Resorts World Inc. Pte. Ltd.\n        \"george\", // george Wal-Mart Stores, Inc.\n        \"ggee\", // ggee GMO Internet, Inc.\n        \"gift\", // gift Uniregistry, Corp.\n        \"gifts\", // gifts Goose Sky, LLC\n        \"gives\", // gives United TLD Holdco Ltd.\n        \"giving\", // giving Giving Limited\n//        \"glade\", // glade Johnson Shareholdings, Inc.\n        \"glass\", // glass Black Cover, LLC\n        \"gle\", // gle Charleston Road Registry Inc.\n        \"global\", // global Dot Global Domain Registry Limited\n        \"globo\", // globo Globo Comunica\u00e7\u00e3o e Participa\u00e7\u00f5es S.A\n        \"gmail\", // gmail Charleston Road Registry Inc.\n        \"gmbh\", // gmbh Extra Dynamite, LLC\n        \"gmo\", // gmo GMO Internet, Inc.\n        \"gmx\", // gmx 1&amp;1 Mail &amp; Media GmbH\n        \"godaddy\", // godaddy Go Daddy East, LLC\n        \"gold\", // gold June Edge, LLC\n        \"goldpoint\", // goldpoint YODOBASHI CAMERA CO.,LTD.\n        \"golf\", // golf Lone Falls, LLC\n        \"goo\", // goo NTT Resonant Inc.\n//        \"goodhands\", // goodhands Allstate Fire and Casualty Insurance Company\n        \"goodyear\", // goodyear The Goodyear Tire &amp; Rubber Company\n        \"goog\", // goog Charleston Road Registry Inc.\n        \"google\", // google Charleston Road Registry Inc.\n        \"gop\", // gop Republican State Leadership Committee, Inc.\n        \"got\", // got Amazon Registry Services, Inc.\n        \"gov\", // gov General Services Administration Attn: QTDC, 2E08 (.gov Domain Registration)\n        \"grainger\", // grainger Grainger Registry Services, LLC\n        \"graphics\", // graphics Over Madison, LLC\n        \"gratis\", // gratis Pioneer Tigers, LLC\n        \"green\", // green Afilias Limited\n        \"gripe\", // gripe Corn Sunset, LLC\n        \"grocery\", // grocery Wal-Mart Stores, Inc.\n        \"group\", // group Romeo Town, LLC\n        // \"guardian\", // guardian The Guardian Life Insurance Company of America\n        \"gucci\", // gucci Guccio Gucci S.p.a.\n        \"guge\", // guge Charleston Road Registry Inc.\n        \"guide\", // guide Snow Moon, LLC\n        \"guitars\", // guitars Uniregistry, Corp.\n        \"guru\", // guru Pioneer Cypress, LLC\n        \"hair\", // hair L&#39;Oreal\n        \"hamburg\", // hamburg Hamburg Top-Level-Domain GmbH\n        \"hangout\", // hangout Charleston Road Registry Inc.\n        \"haus\", // haus United TLD Holdco, LTD.\n        \"hbo\", // hbo HBO Registry Services, Inc.\n        \"hdfc\", // hdfc HOUSING DEVELOPMENT FINANCE CORPORATION LIMITED\n        \"hdfcbank\", // hdfcbank HDFC Bank Limited\n        \"health\", // health DotHealth, LLC\n        \"healthcare\", // healthcare Silver Glen, LLC\n        \"help\", // help Uniregistry, Corp.\n        \"helsinki\", // helsinki City of Helsinki\n        \"here\", // here Charleston Road Registry Inc.\n        \"hermes\", // hermes Hermes International\n        // \"hgtv\", // hgtv Lifestyle Domain Holdings, Inc.\n        \"hiphop\", // hiphop Uniregistry, Corp.\n        \"hisamitsu\", // hisamitsu Hisamitsu Pharmaceutical Co.,Inc.\n        \"hitachi\", // hitachi Hitachi, Ltd.\n        \"hiv\", // hiv dotHIV gemeinnuetziger e.V.\n        \"hkt\", // hkt PCCW-HKT DataCom Services Limited\n        \"hockey\", // hockey Half Willow, LLC\n        \"holdings\", // holdings John Madison, LLC\n        \"holiday\", // holiday Goose Woods, LLC\n        \"homedepot\", // homedepot Homer TLC, Inc.\n        \"homegoods\", // homegoods The TJX Companies, Inc.\n        \"homes\", // homes DERHomes, LLC\n        \"homesense\", // homesense The TJX Companies, Inc.\n        \"honda\", // honda Honda Motor Co., Ltd.\n//        \"honeywell\", // honeywell Honeywell GTLD LLC\n        \"horse\", // horse Top Level Domain Holdings Limited\n        \"hospital\", // hospital Ruby Pike, LLC\n        \"host\", // host DotHost Inc.\n        \"hosting\", // hosting Uniregistry, Corp.\n        \"hot\", // hot Amazon Registry Services, Inc.\n        // \"hoteles\", // hoteles Travel Reservations SRL\n        \"hotels\", // hotels Booking.com B.V.\n        \"hotmail\", // hotmail Microsoft Corporation\n        \"house\", // house Sugar Park, LLC\n        \"how\", // how Charleston Road Registry Inc.\n        \"hsbc\", // hsbc HSBC Holdings PLC\n//        \"htc\", // htc HTC corporation (Not assigned)\n        \"hughes\", // hughes Hughes Satellite Systems Corporation\n        \"hyatt\", // hyatt Hyatt GTLD, L.L.C.\n        \"hyundai\", // hyundai Hyundai Motor Company\n        \"ibm\", // ibm International Business Machines Corporation\n        \"icbc\", // icbc Industrial and Commercial Bank of China Limited\n        \"ice\", // ice IntercontinentalExchange, Inc.\n        \"icu\", // icu One.com A/S\n        \"ieee\", // ieee IEEE Global LLC\n        \"ifm\", // ifm ifm electronic gmbh\n//        \"iinet\", // iinet Connect West Pty. Ltd. (Retired)\n        \"ikano\", // ikano Ikano S.A.\n        \"imamat\", // imamat Fondation Aga Khan (Aga Khan Foundation)\n        \"imdb\", // imdb Amazon Registry Services, Inc.\n        \"immo\", // immo Auburn Bloom, LLC\n        \"immobilien\", // immobilien United TLD Holdco Ltd.\n        \"inc\", // inc Intercap Holdings Inc.\n        \"industries\", // industries Outer House, LLC\n        \"infiniti\", // infiniti NISSAN MOTOR CO., LTD.\n        \"info\", // info Afilias Limited\n        \"ing\", // ing Charleston Road Registry Inc.\n        \"ink\", // ink Top Level Design, LLC\n        \"institute\", // institute Outer Maple, LLC\n        \"insurance\", // insurance fTLD Registry Services LLC\n        \"insure\", // insure Pioneer Willow, LLC\n        \"int\", // int Internet Assigned Numbers Authority\n//        \"intel\", // intel Intel Corporation\n        \"international\", // international Wild Way, LLC\n        \"intuit\", // intuit Intuit Administrative Services, Inc.\n        \"investments\", // investments Holly Glen, LLC\n        \"ipiranga\", // ipiranga Ipiranga Produtos de Petroleo S.A.\n        \"irish\", // irish Dot-Irish LLC\n//        \"iselect\", // iselect iSelect Ltd\n        \"ismaili\", // ismaili Fondation Aga Khan (Aga Khan Foundation)\n        \"ist\", // ist Istanbul Metropolitan Municipality\n        \"istanbul\", // istanbul Istanbul Metropolitan Municipality / Medya A.S.\n        \"itau\", // itau Itau Unibanco Holding S.A.\n        \"itv\", // itv ITV Services Limited\n//        \"iveco\", // iveco CNH Industrial N.V.\n//        \"iwc\", // iwc Richemont DNS Inc.\n        \"jaguar\", // jaguar Jaguar Land Rover Ltd\n        \"java\", // java Oracle Corporation\n        \"jcb\", // jcb JCB Co., Ltd.\n//        \"jcp\", // jcp JCP Media, Inc.\n        \"jeep\", // jeep FCA US LLC.\n        \"jetzt\", // jetzt New TLD Company AB\n        \"jewelry\", // jewelry Wild Bloom, LLC\n        \"jio\", // jio Affinity Names, Inc.\n//        \"jlc\", // jlc Richemont DNS Inc.\n        \"jll\", // jll Jones Lang LaSalle Incorporated\n        \"jmp\", // jmp Matrix IP LLC\n        \"jnj\", // jnj Johnson &amp; Johnson Services, Inc.\n        \"jobs\", // jobs Employ Media LLC\n        \"joburg\", // joburg ZA Central Registry NPC trading as ZA Central Registry\n        \"jot\", // jot Amazon Registry Services, Inc.\n        \"joy\", // joy Amazon Registry Services, Inc.\n        \"jpmorgan\", // jpmorgan JPMorgan Chase &amp; Co.\n        \"jprs\", // jprs Japan Registry Services Co., Ltd.\n        \"juegos\", // juegos Uniregistry, Corp.\n        \"juniper\", // juniper JUNIPER NETWORKS, INC.\n        \"kaufen\", // kaufen United TLD Holdco Ltd.\n        \"kddi\", // kddi KDDI CORPORATION\n        \"kerryhotels\", // kerryhotels Kerry Trading Co. Limited\n        \"kerrylogistics\", // kerrylogistics Kerry Trading Co. Limited\n        \"kerryproperties\", // kerryproperties Kerry Trading Co. Limited\n        \"kfh\", // kfh Kuwait Finance House\n        \"kia\", // kia KIA MOTORS CORPORATION\n        \"kids\", // kids DotKids Foundation Limited\n        \"kim\", // kim Afilias Limited\n        // \"kinder\", // kinder Ferrero Trading Lux S.A.\n        \"kindle\", // kindle Amazon Registry Services, Inc.\n        \"kitchen\", // kitchen Just Goodbye, LLC\n        \"kiwi\", // kiwi DOT KIWI LIMITED\n        \"koeln\", // koeln NetCologne Gesellschaft f\u00fcr Telekommunikation mbH\n        \"komatsu\", // komatsu Komatsu Ltd.\n        \"kosher\", // kosher Kosher Marketing Assets LLC\n        \"kpmg\", // kpmg KPMG International Cooperative (KPMG International Genossenschaft)\n        \"kpn\", // kpn Koninklijke KPN N.V.\n        \"krd\", // krd KRG Department of Information Technology\n        \"kred\", // kred KredTLD Pty Ltd\n        \"kuokgroup\", // kuokgroup Kerry Trading Co. Limited\n        \"kyoto\", // kyoto Academic Institution: Kyoto Jyoho Gakuen\n        \"lacaixa\", // lacaixa CAIXA D&#39;ESTALVIS I PENSIONS DE BARCELONA\n//        \"ladbrokes\", // ladbrokes LADBROKES INTERNATIONAL PLC\n        \"lamborghini\", // lamborghini Automobili Lamborghini S.p.A.\n        \"lamer\", // lamer The Est\u00e9e Lauder Companies Inc.\n        \"lancaster\", // lancaster LANCASTER\n        // \"lancia\", // lancia Fiat Chrysler Automobiles N.V.\n//        \"lancome\", // lancome L&#39;Or\u00e9al\n        \"land\", // land Pine Moon, LLC\n        \"landrover\", // landrover Jaguar Land Rover Ltd\n        \"lanxess\", // lanxess LANXESS Corporation\n        \"lasalle\", // lasalle Jones Lang LaSalle Incorporated\n        \"lat\", // lat ECOM-LAC Federaci\u00f3n de Latinoam\u00e9rica y el Caribe para Internet y el Comercio Electr\u00f3nico\n        \"latino\", // latino Dish DBS Corporation\n        \"latrobe\", // latrobe La Trobe University\n        \"law\", // law Minds + Machines Group Limited\n        \"lawyer\", // lawyer United TLD Holdco, Ltd\n        \"lds\", // lds IRI Domain Management, LLC\n        \"lease\", // lease Victor Trail, LLC\n        \"leclerc\", // leclerc A.C.D. LEC Association des Centres Distributeurs Edouard Leclerc\n        \"lefrak\", // lefrak LeFrak Organization, Inc.\n        \"legal\", // legal Blue Falls, LLC\n        \"lego\", // lego LEGO Juris A/S\n        \"lexus\", // lexus TOYOTA MOTOR CORPORATION\n        \"lgbt\", // lgbt Afilias Limited\n//        \"liaison\", // liaison Liaison Technologies, Incorporated\n        \"lidl\", // lidl Schwarz Domains und Services GmbH &amp; Co. KG\n        \"life\", // life Trixy Oaks, LLC\n        \"lifeinsurance\", // lifeinsurance American Council of Life Insurers\n        \"lifestyle\", // lifestyle Lifestyle Domain Holdings, Inc.\n        \"lighting\", // lighting John McCook, LLC\n        \"like\", // like Amazon Registry Services, Inc.\n        \"lilly\", // lilly Eli Lilly and Company\n        \"limited\", // limited Big Fest, LLC\n        \"limo\", // limo Hidden Frostbite, LLC\n        \"lincoln\", // lincoln Ford Motor Company\n        // \"linde\", // linde Linde Aktiengesellschaft\n        \"link\", // link Uniregistry, Corp.\n        \"lipsy\", // lipsy Lipsy Ltd\n        \"live\", // live United TLD Holdco Ltd.\n        \"living\", // living Lifestyle Domain Holdings, Inc.\n//        \"lixil\", // lixil LIXIL Group Corporation\n        \"llc\", // llc Afilias plc\n        \"llp\", // llp Dot Registry LLC\n        \"loan\", // loan dot Loan Limited\n        \"loans\", // loans June Woods, LLC\n        \"locker\", // locker Dish DBS Corporation\n        \"locus\", // locus Locus Analytics LLC\n//        \"loft\", // loft Annco, Inc.\n        \"lol\", // lol Uniregistry, Corp.\n        \"london\", // london Dot London Domains Limited\n        \"lotte\", // lotte Lotte Holdings Co., Ltd.\n        \"lotto\", // lotto Afilias Limited\n        \"love\", // love Merchant Law Group LLP\n        \"lpl\", // lpl LPL Holdings, Inc.\n        \"lplfinancial\", // lplfinancial LPL Holdings, Inc.\n        \"ltd\", // ltd Over Corner, LLC\n        \"ltda\", // ltda InterNetX Corp.\n        \"lundbeck\", // lundbeck H. Lundbeck A/S\n//        \"lupin\", // lupin LUPIN LIMITED\n        \"luxe\", // luxe Top Level Domain Holdings Limited\n        \"luxury\", // luxury Luxury Partners LLC\n        // \"macys\", // macys Macys, Inc.\n        \"madrid\", // madrid Comunidad de Madrid\n        \"maif\", // maif Mutuelle Assurance Instituteur France (MAIF)\n        \"maison\", // maison Victor Frostbite, LLC\n        \"makeup\", // makeup L&#39;Or\u00e9al\n        \"man\", // man MAN SE\n        \"management\", // management John Goodbye, LLC\n        \"mango\", // mango PUNTO FA S.L.\n        \"map\", // map Charleston Road Registry Inc.\n        \"market\", // market Unitied TLD Holdco, Ltd\n        \"marketing\", // marketing Fern Pass, LLC\n        \"markets\", // markets DOTMARKETS REGISTRY LTD\n        \"marriott\", // marriott Marriott Worldwide Corporation\n        \"marshalls\", // marshalls The TJX Companies, Inc.\n        // \"maserati\", // maserati Fiat Chrysler Automobiles N.V.\n        \"mattel\", // mattel Mattel Sites, Inc.\n        \"mba\", // mba Lone Hollow, LLC\n//        \"mcd\", // mcd McDonald\u2019s Corporation (Not assigned)\n//        \"mcdonalds\", // mcdonalds McDonald\u2019s Corporation (Not assigned)\n        \"mckinsey\", // mckinsey McKinsey Holdings, Inc.\n        \"med\", // med Medistry LLC\n        \"media\", // media Grand Glen, LLC\n        \"meet\", // meet Afilias Limited\n        \"melbourne\", // melbourne The Crown in right of the State of Victoria, represented by its Department of State Development, Business and Innovation\n        \"meme\", // meme Charleston Road Registry Inc.\n        \"memorial\", // memorial Dog Beach, LLC\n        \"men\", // men Exclusive Registry Limited\n        \"menu\", // menu Wedding TLD2, LLC\n//        \"meo\", // meo PT Comunicacoes S.A.\n        \"merckmsd\", // merckmsd MSD Registry Holdings, Inc.\n//        \"metlife\", // metlife MetLife Services and Solutions, LLC\n        \"miami\", // miami Top Level Domain Holdings Limited\n        \"microsoft\", // microsoft Microsoft Corporation\n        \"mil\", // mil DoD Network Information Center\n        \"mini\", // mini Bayerische Motoren Werke Aktiengesellschaft\n        \"mint\", // mint Intuit Administrative Services, Inc.\n        \"mit\", // mit Massachusetts Institute of Technology\n        \"mitsubishi\", // mitsubishi Mitsubishi Corporation\n        \"mlb\", // mlb MLB Advanced Media DH, LLC\n        \"mls\", // mls The Canadian Real Estate Association\n        \"mma\", // mma MMA IARD\n        \"mobi\", // mobi Afilias Technologies Limited dba dotMobi\n        \"mobile\", // mobile Dish DBS Corporation\n//        \"mobily\", // mobily GreenTech Consultancy Company W.L.L.\n        \"moda\", // moda United TLD Holdco Ltd.\n        \"moe\", // moe Interlink Co., Ltd.\n        \"moi\", // moi Amazon Registry Services, Inc.\n        \"mom\", // mom Uniregistry, Corp.\n        \"monash\", // monash Monash University\n        \"money\", // money Outer McCook, LLC\n        \"monster\", // monster Monster Worldwide, Inc.\n//        \"montblanc\", // montblanc Richemont DNS Inc. (Not assigned)\n//        \"mopar\", // mopar FCA US LLC.\n        \"mormon\", // mormon IRI Domain Management, LLC (&quot;Applicant&quot;)\n        \"mortgage\", // mortgage United TLD Holdco, Ltd\n        \"moscow\", // moscow Foundation for Assistance for Internet Technologies and Infrastructure Development (FAITID)\n        \"moto\", // moto Motorola Trademark Holdings, LLC\n        \"motorcycles\", // motorcycles DERMotorcycles, LLC\n        \"mov\", // mov Charleston Road Registry Inc.\n        \"movie\", // movie New Frostbite, LLC\n//        \"movistar\", // movistar Telef\u00f3nica S.A.\n        \"msd\", // msd MSD Registry Holdings, Inc.\n        \"mtn\", // mtn MTN Dubai Limited\n//        \"mtpc\", // mtpc Mitsubishi Tanabe Pharma Corporation (Retired)\n        \"mtr\", // mtr MTR Corporation Limited\n        \"museum\", // museum Museum Domain Management Association\n        \"music\", // music DotMusic Limited\n        // \"mutual\", // mutual Northwestern Mutual MU TLD Registry, LLC\n//        \"mutuelle\", // mutuelle F\u00e9d\u00e9ration Nationale de la Mutualit\u00e9 Fran\u00e7aise (Retired)\n        \"nab\", // nab National Australia Bank Limited\n//        \"nadex\", // nadex Nadex Domains, Inc\n        \"nagoya\", // nagoya GMO Registry, Inc.\n        \"name\", // name VeriSign Information Services, Inc.\n//        \"nationwide\", // nationwide Nationwide Mutual Insurance Company\n        \"natura\", // natura NATURA COSM\u00c9TICOS S.A.\n        \"navy\", // navy United TLD Holdco Ltd.\n        \"nba\", // nba NBA REGISTRY, LLC\n        \"nec\", // nec NEC Corporation\n        \"net\", // net VeriSign Global Registry Services\n        \"netbank\", // netbank COMMONWEALTH BANK OF AUSTRALIA\n        \"netflix\", // netflix Netflix, Inc.\n        \"network\", // network Trixy Manor, LLC\n        \"neustar\", // neustar NeuStar, Inc.\n        \"new\", // new Charleston Road Registry Inc.\n//        \"newholland\", // newholland CNH Industrial N.V.\n        \"news\", // news United TLD Holdco Ltd.\n        \"next\", // next Next plc\n        \"nextdirect\", // nextdirect Next plc\n        \"nexus\", // nexus Charleston Road Registry Inc.\n        \"nfl\", // nfl NFL Reg Ops LLC\n        \"ngo\", // ngo Public Interest Registry\n        \"nhk\", // nhk Japan Broadcasting Corporation (NHK)\n        \"nico\", // nico DWANGO Co., Ltd.\n        \"nike\", // nike NIKE, Inc.\n        \"nikon\", // nikon NIKON CORPORATION\n        \"ninja\", // ninja United TLD Holdco Ltd.\n        \"nissan\", // nissan NISSAN MOTOR CO., LTD.\n        \"nissay\", // nissay Nippon Life Insurance Company\n        \"nokia\", // nokia Nokia Corporation\n        // \"northwesternmutual\", // northwesternmutual Northwestern Mutual Registry, LLC\n        \"norton\", // norton Symantec Corporation\n        \"now\", // now Amazon Registry Services, Inc.\n        \"nowruz\", // nowruz Asia Green IT System Bilgisayar San. ve Tic. Ltd. Sti.\n        \"nowtv\", // nowtv Starbucks (HK) Limited\n        \"nra\", // nra NRA Holdings Company, INC.\n        \"nrw\", // nrw Minds + Machines GmbH\n        \"ntt\", // ntt NIPPON TELEGRAPH AND TELEPHONE CORPORATION\n        \"nyc\", // nyc The City of New York by and through the New York City Department of Information Technology &amp; Telecommunications\n        \"obi\", // obi OBI Group Holding SE &amp; Co. KGaA\n        \"observer\", // observer Top Level Spectrum, Inc.\n//        \"off\", // off Johnson Shareholdings, Inc.\n        \"office\", // office Microsoft Corporation\n        \"okinawa\", // okinawa BusinessRalliart inc.\n        \"olayan\", // olayan Crescent Holding GmbH\n        \"olayangroup\", // olayangroup Crescent Holding GmbH\n        // \"oldnavy\", // oldnavy The Gap, Inc.\n        \"ollo\", // ollo Dish DBS Corporation\n        \"omega\", // omega The Swatch Group Ltd\n        \"one\", // one One.com A/S\n        \"ong\", // ong Public Interest Registry\n        \"onl\", // onl I-REGISTRY Ltd., Niederlassung Deutschland\n        \"online\", // online DotOnline Inc.\n//        \"onyourside\", // onyourside Nationwide Mutual Insurance Company\n        \"ooo\", // ooo INFIBEAM INCORPORATION LIMITED\n        \"open\", // open American Express Travel Related Services Company, Inc.\n        \"oracle\", // oracle Oracle Corporation\n        \"orange\", // orange Orange Brand Services Limited\n        \"org\", // org Public Interest Registry (PIR)\n        \"organic\", // organic Afilias Limited\n//        \"orientexpress\", // orientexpress Orient Express (retired 2017-04-11)\n        \"origins\", // origins The Est\u00e9e Lauder Companies Inc.\n        \"osaka\", // osaka Interlink Co., Ltd.\n        \"otsuka\", // otsuka Otsuka Holdings Co., Ltd.\n        \"ott\", // ott Dish DBS Corporation\n        \"ovh\", // ovh OVH SAS\n        \"page\", // page Charleston Road Registry Inc.\n//        \"pamperedchef\", // pamperedchef The Pampered Chef, Ltd. (Not assigned)\n        \"panasonic\", // panasonic Panasonic Corporation\n//        \"panerai\", // panerai Richemont DNS Inc.\n        \"paris\", // paris City of Paris\n        \"pars\", // pars Asia Green IT System Bilgisayar San. ve Tic. Ltd. Sti.\n        \"partners\", // partners Magic Glen, LLC\n        \"parts\", // parts Sea Goodbye, LLC\n        \"party\", // party Blue Sky Registry Limited\n        // \"passagens\", // passagens Travel Reservations SRL\n        \"pay\", // pay Amazon Registry Services, Inc.\n        \"pccw\", // pccw PCCW Enterprises Limited\n        \"pet\", // pet Afilias plc\n        \"pfizer\", // pfizer Pfizer Inc.\n        \"pharmacy\", // pharmacy National Association of Boards of Pharmacy\n        \"phd\", // phd Charleston Road Registry Inc.\n        \"philips\", // philips Koninklijke Philips N.V.\n        \"phone\", // phone Dish DBS Corporation\n        \"photo\", // photo Uniregistry, Corp.\n        \"photography\", // photography Sugar Glen, LLC\n        \"photos\", // photos Sea Corner, LLC\n        \"physio\", // physio PhysBiz Pty Ltd\n//        \"piaget\", // piaget Richemont DNS Inc.\n        \"pics\", // pics Uniregistry, Corp.\n        \"pictet\", // pictet Pictet Europe S.A.\n        \"pictures\", // pictures Foggy Sky, LLC\n        \"pid\", // pid Top Level Spectrum, Inc.\n        \"pin\", // pin Amazon Registry Services, Inc.\n        \"ping\", // ping Ping Registry Provider, Inc.\n        \"pink\", // pink Afilias Limited\n        \"pioneer\", // pioneer Pioneer Corporation\n        \"pizza\", // pizza Foggy Moon, LLC\n        \"place\", // place Snow Galley, LLC\n        \"play\", // play Charleston Road Registry Inc.\n        \"playstation\", // playstation Sony Computer Entertainment Inc.\n        \"plumbing\", // plumbing Spring Tigers, LLC\n        \"plus\", // plus Sugar Mill, LLC\n        \"pnc\", // pnc PNC Domain Co., LLC\n        \"pohl\", // pohl Deutsche Verm\u00f6gensberatung Aktiengesellschaft DVAG\n        \"poker\", // poker Afilias Domains No. 5 Limited\n        \"politie\", // politie Politie Nederland\n        \"porn\", // porn ICM Registry PN LLC\n        \"post\", // post Universal Postal Union\n        \"pramerica\", // pramerica Prudential Financial, Inc.\n        \"praxi\", // praxi Praxi S.p.A.\n        \"press\", // press DotPress Inc.\n        \"prime\", // prime Amazon Registry Services, Inc.\n        \"pro\", // pro Registry Services Corporation dba RegistryPro\n        \"prod\", // prod Charleston Road Registry Inc.\n        \"productions\", // productions Magic Birch, LLC\n        \"prof\", // prof Charleston Road Registry Inc.\n        \"progressive\", // progressive Progressive Casualty Insurance Company\n        \"promo\", // promo Afilias plc\n        \"properties\", // properties Big Pass, LLC\n        \"property\", // property Uniregistry, Corp.\n        \"protection\", // protection XYZ.COM LLC\n        \"pru\", // pru Prudential Financial, Inc.\n        \"prudential\", // prudential Prudential Financial, Inc.\n        \"pub\", // pub United TLD Holdco Ltd.\n        \"pwc\", // pwc PricewaterhouseCoopers LLP\n        \"qpon\", // qpon dotCOOL, Inc.\n        \"quebec\", // quebec PointQu\u00e9bec Inc\n        \"quest\", // quest Quest ION Limited\n//        \"qvc\", // qvc QVC, Inc.\n        \"racing\", // racing Premier Registry Limited\n        \"radio\", // radio European Broadcasting Union (EBU)\n//        \"raid\", // raid Johnson Shareholdings, Inc.\n        \"read\", // read Amazon Registry Services, Inc.\n        \"realestate\", // realestate dotRealEstate LLC\n        \"realtor\", // realtor Real Estate Domains LLC\n        \"realty\", // realty Fegistry, LLC\n        \"recipes\", // recipes Grand Island, LLC\n        \"red\", // red Afilias Limited\n        \"redstone\", // redstone Redstone Haute Couture Co., Ltd.\n        \"redumbrella\", // redumbrella Travelers TLD, LLC\n        \"rehab\", // rehab United TLD Holdco Ltd.\n        \"reise\", // reise Foggy Way, LLC\n        \"reisen\", // reisen New Cypress, LLC\n        \"reit\", // reit National Association of Real Estate Investment Trusts, Inc.\n        \"reliance\", // reliance Reliance Industries Limited\n        \"ren\", // ren Beijing Qianxiang Wangjing Technology Development Co., Ltd.\n        \"rent\", // rent XYZ.COM LLC\n        \"rentals\", // rentals Big Hollow,LLC\n        \"repair\", // repair Lone Sunset, LLC\n        \"report\", // report Binky Glen, LLC\n        \"republican\", // republican United TLD Holdco Ltd.\n        \"rest\", // rest Punto 2012 Sociedad Anonima Promotora de Inversion de Capital Variable\n        \"restaurant\", // restaurant Snow Avenue, LLC\n        \"review\", // review dot Review Limited\n        \"reviews\", // reviews United TLD Holdco, Ltd.\n        \"rexroth\", // rexroth Robert Bosch GMBH\n        \"rich\", // rich I-REGISTRY Ltd., Niederlassung Deutschland\n        \"richardli\", // richardli Pacific Century Asset Management (HK) Limited\n        \"ricoh\", // ricoh Ricoh Company, Ltd.\n        // \"rightathome\", // rightathome Johnson Shareholdings, Inc. (retired 2020-07-31)\n        \"ril\", // ril Reliance Industries Limited\n        \"rio\", // rio Empresa Municipal de Inform\u00e1tica SA - IPLANRIO\n        \"rip\", // rip United TLD Holdco Ltd.\n//        \"rmit\", // rmit Royal Melbourne Institute of Technology\n        // \"rocher\", // rocher Ferrero Trading Lux S.A.\n        \"rocks\", // rocks United TLD Holdco, LTD.\n        \"rodeo\", // rodeo Top Level Domain Holdings Limited\n        \"rogers\", // rogers Rogers Communications Canada Inc.\n        \"room\", // room Amazon Registry Services, Inc.\n        \"rsvp\", // rsvp Charleston Road Registry Inc.\n        \"rugby\", // rugby World Rugby Strategic Developments Limited\n        \"ruhr\", // ruhr regiodot GmbH &amp; Co. KG\n        \"run\", // run Snow Park, LLC\n        \"rwe\", // rwe RWE AG\n        \"ryukyu\", // ryukyu BusinessRalliart inc.\n        \"saarland\", // saarland dotSaarland GmbH\n        \"safe\", // safe Amazon Registry Services, Inc.\n        \"safety\", // safety Safety Registry Services, LLC.\n        \"sakura\", // sakura SAKURA Internet Inc.\n        \"sale\", // sale United TLD Holdco, Ltd\n        \"salon\", // salon Outer Orchard, LLC\n        \"samsclub\", // samsclub Wal-Mart Stores, Inc.\n        \"samsung\", // samsung SAMSUNG SDS CO., LTD\n        \"sandvik\", // sandvik Sandvik AB\n        \"sandvikcoromant\", // sandvikcoromant Sandvik AB\n        \"sanofi\", // sanofi Sanofi\n        \"sap\", // sap SAP AG\n//        \"sapo\", // sapo PT Comunicacoes S.A.\n        \"sarl\", // sarl Delta Orchard, LLC\n        \"sas\", // sas Research IP LLC\n        \"save\", // save Amazon Registry Services, Inc.\n        \"saxo\", // saxo Saxo Bank A/S\n        \"sbi\", // sbi STATE BANK OF INDIA\n        \"sbs\", // sbs SPECIAL BROADCASTING SERVICE CORPORATION\n        // \"sca\", // sca SVENSKA CELLULOSA AKTIEBOLAGET SCA (publ)\n        \"scb\", // scb The Siam Commercial Bank Public Company Limited (&quot;SCB&quot;)\n        \"schaeffler\", // schaeffler Schaeffler Technologies AG &amp; Co. KG\n        \"schmidt\", // schmidt SALM S.A.S.\n        \"scholarships\", // scholarships Scholarships.com, LLC\n        \"school\", // school Little Galley, LLC\n        \"schule\", // schule Outer Moon, LLC\n        \"schwarz\", // schwarz Schwarz Domains und Services GmbH &amp; Co. KG\n        \"science\", // science dot Science Limited\n//        \"scjohnson\", // scjohnson Johnson Shareholdings, Inc.\n        // \"scor\", // scor SCOR SE (not assigned as at Version 2020062100)\n        \"scot\", // scot Dot Scot Registry Limited\n        \"search\", // search Charleston Road Registry Inc.\n        \"seat\", // seat SEAT, S.A. (Sociedad Unipersonal)\n        \"secure\", // secure Amazon Registry Services, Inc.\n        \"security\", // security XYZ.COM LLC\n        \"seek\", // seek Seek Limited\n        \"select\", // select iSelect Ltd\n        \"sener\", // sener Sener Ingenier\u00eda y Sistemas, S.A.\n        \"services\", // services Fox Castle, LLC\n//        \"ses\", // ses SES\n        \"seven\", // seven Seven West Media Ltd\n        \"sew\", // sew SEW-EURODRIVE GmbH &amp; Co KG\n        \"sex\", // sex ICM Registry SX LLC\n        \"sexy\", // sexy Uniregistry, Corp.\n        \"sfr\", // sfr Societe Francaise du Radiotelephone - SFR\n        \"shangrila\", // shangrila Shangri\u2010La International Hotel Management Limited\n        \"sharp\", // sharp Sharp Corporation\n        \"shaw\", // shaw Shaw Cablesystems G.P.\n        \"shell\", // shell Shell Information Technology International Inc\n        \"shia\", // shia Asia Green IT System Bilgisayar San. ve Tic. Ltd. Sti.\n        \"shiksha\", // shiksha Afilias Limited\n        \"shoes\", // shoes Binky Galley, LLC\n        \"shop\", // shop GMO Registry, Inc.\n        \"shopping\", // shopping Over Keep, LLC\n        \"shouji\", // shouji QIHOO 360 TECHNOLOGY CO. LTD.\n        \"show\", // show Snow Beach, LLC\n        // \"showtime\", // showtime CBS Domains Inc.\n//        \"shriram\", // shriram Shriram Capital Ltd.\n        \"silk\", // silk Amazon Registry Services, Inc.\n        \"sina\", // sina Sina Corporation\n        \"singles\", // singles Fern Madison, LLC\n        \"site\", // site DotSite Inc.\n        \"ski\", // ski STARTING DOT LIMITED\n        \"skin\", // skin L&#39;Or\u00e9al\n        \"sky\", // sky Sky International AG\n        \"skype\", // skype Microsoft Corporation\n        \"sling\", // sling Hughes Satellite Systems Corporation\n        \"smart\", // smart Smart Communications, Inc. (SMART)\n        \"smile\", // smile Amazon Registry Services, Inc.\n        \"sncf\", // sncf SNCF (Soci\u00e9t\u00e9 Nationale des Chemins de fer Francais)\n        \"soccer\", // soccer Foggy Shadow, LLC\n        \"social\", // social United TLD Holdco Ltd.\n        \"softbank\", // softbank SoftBank Group Corp.\n        \"software\", // software United TLD Holdco, Ltd\n        \"sohu\", // sohu Sohu.com Limited\n        \"solar\", // solar Ruby Town, LLC\n        \"solutions\", // solutions Silver Cover, LLC\n        \"song\", // song Amazon Registry Services, Inc.\n        \"sony\", // sony Sony Corporation\n        \"soy\", // soy Charleston Road Registry Inc.\n        \"spa\", // spa Asia Spa and Wellness Promotion Council Limited\n        \"space\", // space DotSpace Inc.\n//        \"spiegel\", // spiegel SPIEGEL-Verlag Rudolf Augstein GmbH &amp; Co. KG\n        \"sport\", // sport Global Association of International Sports Federations (GAISF)\n        \"spot\", // spot Amazon Registry Services, Inc.\n//        \"spreadbetting\", // spreadbetting DOTSPREADBETTING REGISTRY LTD\n        \"srl\", // srl InterNetX Corp.\n//        \"srt\", // srt FCA US LLC.\n        \"stada\", // stada STADA Arzneimittel AG\n        \"staples\", // staples Staples, Inc.\n        \"star\", // star Star India Private Limited\n//        \"starhub\", // starhub StarHub Limited\n        \"statebank\", // statebank STATE BANK OF INDIA\n        \"statefarm\", // statefarm State Farm Mutual Automobile Insurance Company\n//        \"statoil\", // statoil Statoil ASA\n        \"stc\", // stc Saudi Telecom Company\n        \"stcgroup\", // stcgroup Saudi Telecom Company\n        \"stockholm\", // stockholm Stockholms kommun\n        \"storage\", // storage Self Storage Company LLC\n        \"store\", // store DotStore Inc.\n        \"stream\", // stream dot Stream Limited\n        \"studio\", // studio United TLD Holdco Ltd.\n        \"study\", // study OPEN UNIVERSITIES AUSTRALIA PTY LTD\n        \"style\", // style Binky Moon, LLC\n        \"sucks\", // sucks Vox Populi Registry Ltd.\n        \"supplies\", // supplies Atomic Fields, LLC\n        \"supply\", // supply Half Falls, LLC\n        \"support\", // support Grand Orchard, LLC\n        \"surf\", // surf Top Level Domain Holdings Limited\n        \"surgery\", // surgery Tin Avenue, LLC\n        \"suzuki\", // suzuki SUZUKI MOTOR CORPORATION\n        \"swatch\", // swatch The Swatch Group Ltd\n//        \"swiftcover\", // swiftcover Swiftcover Insurance Services Limited\n        \"swiss\", // swiss Swiss Confederation\n        \"sydney\", // sydney State of New South Wales, Department of Premier and Cabinet\n//        \"symantec\", // symantec Symantec Corporation [Not assigned as of Jul 25]\n        \"systems\", // systems Dash Cypress, LLC\n        \"tab\", // tab Tabcorp Holdings Limited\n        \"taipei\", // taipei Taipei City Government\n        \"talk\", // talk Amazon Registry Services, Inc.\n        \"taobao\", // taobao Alibaba Group Holding Limited\n        \"target\", // target Target Domain Holdings, LLC\n        \"tatamotors\", // tatamotors Tata Motors Ltd\n        \"tatar\", // tatar LLC \"Coordination Center of Regional Domain of Tatarstan Republic\"\n        \"tattoo\", // tattoo Uniregistry, Corp.\n        \"tax\", // tax Storm Orchard, LLC\n        \"taxi\", // taxi Pine Falls, LLC\n        \"tci\", // tci Asia Green IT System Bilgisayar San. ve Tic. Ltd. Sti.\n        \"tdk\", // tdk TDK Corporation\n        \"team\", // team Atomic Lake, LLC\n        \"tech\", // tech Dot Tech LLC\n        \"technology\", // technology Auburn Falls, LLC\n        \"tel\", // tel Telnic Ltd.\n//        \"telecity\", // telecity TelecityGroup International Limited\n//        \"telefonica\", // telefonica Telef\u00f3nica S.A.\n        \"temasek\", // temasek Temasek Holdings (Private) Limited\n        \"tennis\", // tennis Cotton Bloom, LLC\n        \"teva\", // teva Teva Pharmaceutical Industries Limited\n        \"thd\", // thd Homer TLC, Inc.\n        \"theater\", // theater Blue Tigers, LLC\n        \"theatre\", // theatre XYZ.COM LLC\n        \"tiaa\", // tiaa Teachers Insurance and Annuity Association of America\n        \"tickets\", // tickets Accent Media Limited\n        \"tienda\", // tienda Victor Manor, LLC\n        // \"tiffany\", // tiffany Tiffany and Company\n        \"tips\", // tips Corn Willow, LLC\n        \"tires\", // tires Dog Edge, LLC\n        \"tirol\", // tirol punkt Tirol GmbH\n        \"tjmaxx\", // tjmaxx The TJX Companies, Inc.\n        \"tjx\", // tjx The TJX Companies, Inc.\n        \"tkmaxx\", // tkmaxx The TJX Companies, Inc.\n        \"tmall\", // tmall Alibaba Group Holding Limited\n        \"today\", // today Pearl Woods, LLC\n        \"tokyo\", // tokyo GMO Registry, Inc.\n        \"tools\", // tools Pioneer North, LLC\n        \"top\", // top Jiangsu Bangning Science &amp; Technology Co.,Ltd.\n        \"toray\", // toray Toray Industries, Inc.\n        \"toshiba\", // toshiba TOSHIBA Corporation\n        \"total\", // total Total SA\n        \"tours\", // tours Sugar Station, LLC\n        \"town\", // town Koko Moon, LLC\n        \"toyota\", // toyota TOYOTA MOTOR CORPORATION\n        \"toys\", // toys Pioneer Orchard, LLC\n        \"trade\", // trade Elite Registry Limited\n        \"trading\", // trading DOTTRADING REGISTRY LTD\n        \"training\", // training Wild Willow, LLC\n        \"travel\", // travel Tralliance Registry Management Company, LLC.\n        // \"travelchannel\", // travelchannel Lifestyle Domain Holdings, Inc.\n        \"travelers\", // travelers Travelers TLD, LLC\n        \"travelersinsurance\", // travelersinsurance Travelers TLD, LLC\n        \"trust\", // trust Artemis Internet Inc\n        \"trv\", // trv Travelers TLD, LLC\n        \"tube\", // tube Latin American Telecom LLC\n        \"tui\", // tui TUI AG\n        \"tunes\", // tunes Amazon Registry Services, Inc.\n        \"tushu\", // tushu Amazon Registry Services, Inc.\n        \"tvs\", // tvs T V SUNDRAM IYENGAR  &amp; SONS PRIVATE LIMITED\n        \"ubank\", // ubank National Australia Bank Limited\n        \"ubs\", // ubs UBS AG\n//        \"uconnect\", // uconnect FCA US LLC.\n        \"unicom\", // unicom China United Network Communications Corporation Limited\n        \"university\", // university Little Station, LLC\n        \"uno\", // uno Dot Latin LLC\n        \"uol\", // uol UBN INTERNET LTDA.\n        \"ups\", // ups UPS Market Driver, Inc.\n        \"vacations\", // vacations Atomic Tigers, LLC\n        \"vana\", // vana Lifestyle Domain Holdings, Inc.\n        \"vanguard\", // vanguard The Vanguard Group, Inc.\n        \"vegas\", // vegas Dot Vegas, Inc.\n        \"ventures\", // ventures Binky Lake, LLC\n        \"verisign\", // verisign VeriSign, Inc.\n        \"versicherung\", // versicherung dotversicherung-registry GmbH\n        \"vet\", // vet United TLD Holdco, Ltd\n        \"viajes\", // viajes Black Madison, LLC\n        \"video\", // video United TLD Holdco, Ltd\n        \"vig\", // vig VIENNA INSURANCE GROUP AG Wiener Versicherung Gruppe\n        \"viking\", // viking Viking River Cruises (Bermuda) Ltd.\n        \"villas\", // villas New Sky, LLC\n        \"vin\", // vin Holly Shadow, LLC\n        \"vip\", // vip Minds + Machines Group Limited\n        \"virgin\", // virgin Virgin Enterprises Limited\n        \"visa\", // visa Visa Worldwide Pte. Limited\n        \"vision\", // vision Koko Station, LLC\n//        \"vista\", // vista Vistaprint Limited\n//        \"vistaprint\", // vistaprint Vistaprint Limited\n        \"viva\", // viva Saudi Telecom Company\n        \"vivo\", // vivo Telefonica Brasil S.A.\n        \"vlaanderen\", // vlaanderen DNS.be vzw\n        \"vodka\", // vodka Top Level Domain Holdings Limited\n        // \"volkswagen\", // volkswagen Volkswagen Group of America Inc.\n        \"volvo\", // volvo Volvo Holding Sverige Aktiebolag\n        \"vote\", // vote Monolith Registry LLC\n        \"voting\", // voting Valuetainment Corp.\n        \"voto\", // voto Monolith Registry LLC\n        \"voyage\", // voyage Ruby House, LLC\n        // \"vuelos\", // vuelos Travel Reservations SRL\n        \"wales\", // wales Nominet UK\n        \"walmart\", // walmart Wal-Mart Stores, Inc.\n        \"walter\", // walter Sandvik AB\n        \"wang\", // wang Zodiac Registry Limited\n        \"wanggou\", // wanggou Amazon Registry Services, Inc.\n//        \"warman\", // warman Weir Group IP Limited\n        \"watch\", // watch Sand Shadow, LLC\n        \"watches\", // watches Richemont DNS Inc.\n        \"weather\", // weather The Weather Channel, LLC\n        \"weatherchannel\", // weatherchannel The Weather Channel, LLC\n        \"webcam\", // webcam dot Webcam Limited\n        \"weber\", // weber Saint-Gobain Weber SA\n        \"website\", // website DotWebsite Inc.\n        \"wed\", // wed Atgron, Inc.\n        \"wedding\", // wedding Top Level Domain Holdings Limited\n        \"weibo\", // weibo Sina Corporation\n        \"weir\", // weir Weir Group IP Limited\n        \"whoswho\", // whoswho Who&#39;s Who Registry\n        \"wien\", // wien punkt.wien GmbH\n        \"wiki\", // wiki Top Level Design, LLC\n        \"williamhill\", // williamhill William Hill Organization Limited\n        \"win\", // win First Registry Limited\n        \"windows\", // windows Microsoft Corporation\n        \"wine\", // wine June Station, LLC\n        \"winners\", // winners The TJX Companies, Inc.\n        \"wme\", // wme William Morris Endeavor Entertainment, LLC\n        \"wolterskluwer\", // wolterskluwer Wolters Kluwer N.V.\n        \"woodside\", // woodside Woodside Petroleum Limited\n        \"work\", // work Top Level Domain Holdings Limited\n        \"works\", // works Little Dynamite, LLC\n        \"world\", // world Bitter Fields, LLC\n        \"wow\", // wow Amazon Registry Services, Inc.\n        \"wtc\", // wtc World Trade Centers Association, Inc.\n        \"wtf\", // wtf Hidden Way, LLC\n        \"xbox\", // xbox Microsoft Corporation\n        \"xerox\", // xerox Xerox DNHC LLC\n        // \"xfinity\", // xfinity Comcast IP Holdings I, LLC\n        \"xihuan\", // xihuan QIHOO 360 TECHNOLOGY CO. LTD.\n        \"xin\", // xin Elegant Leader Limited\n        \"xn--11b4c3d\", // \u0915\u0949\u092e VeriSign Sarl\n        \"xn--1ck2e1b\", // \u30bb\u30fc\u30eb Amazon Registry Services, Inc.\n        \"xn--1qqw23a\", // \u4f5b\u5c71 Guangzhou YU Wei Information Technology Co., Ltd.\n        \"xn--30rr7y\", // \u6148\u5584 Excellent First Limited\n        \"xn--3bst00m\", // \u96c6\u56e2 Eagle Horizon Limited\n        \"xn--3ds443g\", // \u5728\u7ebf TLD REGISTRY LIMITED\n//        \"xn--3oq18vl8pn36a\", // \u5927\u4f17\u6c7d\u8f66 Volkswagen (China) Investment Co., Ltd.\n        \"xn--3pxu8k\", // \u70b9\u770b VeriSign Sarl\n        \"xn--42c2d9a\", // \u0e04\u0e2d\u0e21 VeriSign Sarl\n        \"xn--45q11c\", // \u516b\u5366 Zodiac Scorpio Limited\n        \"xn--4gbrim\", // \u0645\u0648\u0642\u0639 Suhub Electronic Establishment\n        \"xn--55qw42g\", // \u516c\u76ca China Organizational Name Administration Center\n        \"xn--55qx5d\", // \u516c\u53f8 Computer Network Information Center of Chinese Academy of Sciences \uff08China Internet Network Information Center\uff09\n        \"xn--5su34j936bgsg\", // \u9999\u683c\u91cc\u62c9 Shangri\u2010La International Hotel Management Limited\n        \"xn--5tzm5g\", // \u7f51\u7ad9 Global Website TLD Asia Limited\n        \"xn--6frz82g\", // \u79fb\u52a8 Afilias Limited\n        \"xn--6qq986b3xl\", // \u6211\u7231\u4f60 Tycoon Treasure Limited\n        \"xn--80adxhks\", // \u043c\u043e\u0441\u043a\u0432\u0430 Foundation for Assistance for Internet Technologies and Infrastructure Development (FAITID)\n        \"xn--80aqecdr1a\", // \u043a\u0430\u0442\u043e\u043b\u0438\u043a Pontificium Consilium de Comunicationibus Socialibus (PCCS) (Pontifical Council for Social Communication)\n        \"xn--80asehdb\", // \u043e\u043d\u043b\u0430\u0439\u043d CORE Association\n        \"xn--80aswg\", // \u0441\u0430\u0439\u0442 CORE Association\n        \"xn--8y0a063a\", // \u8054\u901a China United Network Communications Corporation Limited\n        \"xn--90ae\", // \u0431\u0433 Imena.BG Plc (NAMES.BG Plc)\n        \"xn--9dbq2a\", // \u05e7\u05d5\u05dd VeriSign Sarl\n        \"xn--9et52u\", // \u65f6\u5c1a RISE VICTORY LIMITED\n        \"xn--9krt00a\", // \u5fae\u535a Sina Corporation\n        \"xn--b4w605ferd\", // \u6de1\u9a6c\u9521 Temasek Holdings (Private) Limited\n        \"xn--bck1b9a5dre4c\", // \u30d5\u30a1\u30c3\u30b7\u30e7\u30f3 Amazon Registry Services, Inc.\n        \"xn--c1avg\", // \u043e\u0440\u0433 Public Interest Registry\n        \"xn--c2br7g\", // \u0928\u0947\u091f VeriSign Sarl\n        \"xn--cck2b3b\", // \u30b9\u30c8\u30a2 Amazon Registry Services, Inc.\n        \"xn--cckwcxetd\", // \u30a2\u30de\u30be\u30f3 Amazon Registry Services, Inc.\n        \"xn--cg4bki\", // \uc0bc\uc131 SAMSUNG SDS CO., LTD\n        \"xn--czr694b\", // \u5546\u6807 HU YI GLOBAL INFORMATION RESOURCES(HOLDING) COMPANY.HONGKONG LIMITED\n        \"xn--czrs0t\", // \u5546\u5e97 Wild Island, LLC\n        \"xn--czru2d\", // \u5546\u57ce Zodiac Aquarius Limited\n        \"xn--d1acj3b\", // \u0434\u0435\u0442\u0438 The Foundation for Network Initiatives \u201cThe Smart Internet\u201d\n        \"xn--eckvdtc9d\", // \u30dd\u30a4\u30f3\u30c8 Amazon Registry Services, Inc.\n        \"xn--efvy88h\", // \u65b0\u95fb Xinhua News Agency Guangdong Branch \u65b0\u534e\u901a\u8baf\u793e\u5e7f\u4e1c\u5206\u793e\n//        \"xn--estv75g\", // \u5de5\u884c Industrial and Commercial Bank of China Limited\n        \"xn--fct429k\", // \u5bb6\u96fb Amazon Registry Services, Inc.\n        \"xn--fhbei\", // \u0643\u0648\u0645 VeriSign Sarl\n        \"xn--fiq228c5hs\", // \u4e2d\u6587\u7f51 TLD REGISTRY LIMITED\n        \"xn--fiq64b\", // \u4e2d\u4fe1 CITIC Group Corporation\n        \"xn--fjq720a\", // \u5a31\u4e50 Will Bloom, LLC\n        \"xn--flw351e\", // \u8c37\u6b4c Charleston Road Registry Inc.\n        \"xn--fzys8d69uvgm\", // \u96fb\u8a0a\u76c8\u79d1 PCCW Enterprises Limited\n        \"xn--g2xx48c\", // \u8d2d\u7269 Minds + Machines Group Limited\n        \"xn--gckr3f0f\", // \u30af\u30e9\u30a6\u30c9 Amazon Registry Services, Inc.\n        \"xn--gk3at1e\", // \u901a\u8ca9 Amazon Registry Services, Inc.\n        \"xn--hxt814e\", // \u7f51\u5e97 Zodiac Libra Limited\n        \"xn--i1b6b1a6a2e\", // \u0938\u0902\u0917\u0920\u0928 Public Interest Registry\n        \"xn--imr513n\", // \u9910\u5385 HU YI GLOBAL INFORMATION RESOURCES (HOLDING) COMPANY. HONGKONG LIMITED\n        \"xn--io0a7i\", // \u7f51\u7edc Computer Network Information Center of Chinese Academy of Sciences \uff08China Internet Network Information Center\uff09\n        \"xn--j1aef\", // \u043a\u043e\u043c VeriSign Sarl\n        \"xn--jlq480n2rg\", // \u4e9a\u9a6c\u900a Amazon Registry Services, Inc.\n//        \"xn--jlq61u9w7b\", // \u8bfa\u57fa\u4e9a Nokia Corporation\n        \"xn--jvr189m\", // \u98df\u54c1 Amazon Registry Services, Inc.\n        \"xn--kcrx77d1x4a\", // \u98de\u5229\u6d66 Koninklijke Philips N.V.\n//        \"xn--kpu716f\", // \u624b\u8868 Richemont DNS Inc. [Not assigned as of Jul 25]\n        \"xn--kput3i\", // \u624b\u673a Beijing RITT-Net Technology Development Co., Ltd\n        \"xn--mgba3a3ejt\", // \u0627\u0631\u0627\u0645\u0643\u0648 Aramco Services Company\n        \"xn--mgba7c0bbn0a\", // \u0627\u0644\u0639\u0644\u064a\u0627\u0646 Crescent Holding GmbH\n        // \"xn--mgbaakc7dvf\", // \u0627\u062a\u0635\u0627\u0644\u0627\u062a Emirates Telecommunications Corporation (trading as Etisalat)\n        \"xn--mgbab2bd\", // \u0628\u0627\u0632\u0627\u0631 CORE Association\n//        \"xn--mgbb9fbpob\", // \u0645\u0648\u0628\u0627\u064a\u0644\u064a GreenTech Consultancy Company W.L.L.\n        \"xn--mgbca7dzdo\", // \u0627\u0628\u0648\u0638\u0628\u064a Abu Dhabi Systems and Information Centre\n        \"xn--mgbi4ecexp\", // \u0643\u0627\u062b\u0648\u0644\u064a\u0643 Pontificium Consilium de Comunicationibus Socialibus (PCCS) (Pontifical Council for Social Communication)\n        \"xn--mgbt3dhd\", // \u0647\u0645\u0631\u0627\u0647 Asia Green IT System Bilgisayar San. ve Tic. Ltd. Sti.\n        \"xn--mk1bu44c\", // \ub2f7\ucef4 VeriSign Sarl\n        \"xn--mxtq1m\", // \u653f\u5e9c Net-Chinese Co., Ltd.\n        \"xn--ngbc5azd\", // \u0634\u0628\u0643\u0629 International Domain Registry Pty. Ltd.\n        \"xn--ngbe9e0a\", // \u0628\u064a\u062a\u0643 Kuwait Finance House\n        \"xn--ngbrx\", // \u0639\u0631\u0628 League of Arab States\n        \"xn--nqv7f\", // \u673a\u6784 Public Interest Registry\n        \"xn--nqv7fs00ema\", // \u7ec4\u7ec7\u673a\u6784 Public Interest Registry\n        \"xn--nyqy26a\", // \u5065\u5eb7 Stable Tone Limited\n        \"xn--otu796d\", // \u62db\u8058 Dot Trademark TLD Holding Company Limited\n        \"xn--p1acf\", // \u0440\u0443\u0441 Rusnames Limited\n//        \"xn--pbt977c\", // \u73e0\u5b9d Richemont DNS Inc. [Not assigned as of Jul 25]\n        \"xn--pssy2u\", // \u5927\u62ff VeriSign Sarl\n        \"xn--q9jyb4c\", // \u307f\u3093\u306a Charleston Road Registry Inc.\n        \"xn--qcka1pmc\", // \u30b0\u30fc\u30b0\u30eb Charleston Road Registry Inc.\n        \"xn--rhqv96g\", // \u4e16\u754c Stable Tone Limited\n        \"xn--rovu88b\", // \u66f8\u7c4d Amazon EU S.\u00e0 r.l.\n        \"xn--ses554g\", // \u7f51\u5740 KNET Co., Ltd\n        \"xn--t60b56a\", // \ub2f7\ub137 VeriSign Sarl\n        \"xn--tckwe\", // \u30b3\u30e0 VeriSign Sarl\n        \"xn--tiq49xqyj\", // \u5929\u4e3b\u6559 Pontificium Consilium de Comunicationibus Socialibus (PCCS) (Pontifical Council for Social Communication)\n        \"xn--unup4y\", // \u6e38\u620f Spring Fields, LLC\n        \"xn--vermgensberater-ctb\", // VERM\u00f6GENSBERATER Deutsche Verm\u00f6gensberatung Aktiengesellschaft DVAG\n        \"xn--vermgensberatung-pwb\", // VERM\u00f6GENSBERATUNG Deutsche Verm\u00f6gensberatung Aktiengesellschaft DVAG\n        \"xn--vhquv\", // \u4f01\u4e1a Dash McCook, LLC\n        \"xn--vuq861b\", // \u4fe1\u606f Beijing Tele-info Network Technology Co., Ltd.\n        \"xn--w4r85el8fhu5dnra\", // \u5609\u91cc\u5927\u9152\u5e97 Kerry Trading Co. Limited\n        \"xn--w4rs40l\", // \u5609\u91cc Kerry Trading Co. Limited\n        \"xn--xhq521b\", // \u5e7f\u4e1c Guangzhou YU Wei Information Technology Co., Ltd.\n        \"xn--zfr164b\", // \u653f\u52a1 China Organizational Name Administration Center\n//        \"xperia\", // xperia Sony Mobile Communications AB\n        \"xxx\", // xxx ICM Registry LLC\n        \"xyz\", // xyz XYZ.COM LLC\n        \"yachts\", // yachts DERYachts, LLC\n        \"yahoo\", // yahoo Yahoo! Domain Services Inc.\n        \"yamaxun\", // yamaxun Amazon Registry Services, Inc.\n        \"yandex\", // yandex YANDEX, LLC\n        \"yodobashi\", // yodobashi YODOBASHI CAMERA CO.,LTD.\n        \"yoga\", // yoga Top Level Domain Holdings Limited\n        \"yokohama\", // yokohama GMO Registry, Inc.\n        \"you\", // you Amazon Registry Services, Inc.\n        \"youtube\", // youtube Charleston Road Registry Inc.\n        \"yun\", // yun QIHOO 360 TECHNOLOGY CO. LTD.\n        \"zappos\", // zappos Amazon Registry Services, Inc.\n        \"zara\", // zara Industria de Dise\u00f1o Textil, S.A. (INDITEX, S.A.)\n        \"zero\", // zero Amazon Registry Services, Inc.\n        \"zip\", // zip Charleston Road Registry Inc.\n//        \"zippo\", // zippo Zadco Company\n        \"zone\", // zone Outer Falls, LLC\n        \"zuerich\", // zuerich Kanton Z\u00fcrich (Canton of Zurich)\n};\n\n    // WARNING: this array MUST be sorted, otherwise it cannot be searched reliably using binary search\n    private static final String[] COUNTRY_CODE_TLDS = {\n        // Taken from Version 2024040200, Last Updated Tue Apr  2 07:07:02 2024 UTC\n        \"ac\",                 // Ascension Island\n        \"ad\",                 // Andorra\n        \"ae\",                 // United Arab Emirates\n        \"af\",                 // Afghanistan\n        \"ag\",                 // Antigua and Barbuda\n        \"ai\",                 // Anguilla\n        \"al\",                 // Albania\n        \"am\",                 // Armenia\n//        \"an\",                 // Netherlands Antilles (retired)\n        \"ao\",                 // Angola\n        \"aq\",                 // Antarctica\n        \"ar\",                 // Argentina\n        \"as\",                 // American Samoa\n        \"at\",                 // Austria\n        \"au\",                 // Australia (includes Ashmore and Cartier Islands and Coral Sea Islands)\n        \"aw\",                 // Aruba\n        \"ax\",                 // \u00c5land\n        \"az\",                 // Azerbaijan\n        \"ba\",                 // Bosnia and Herzegovina\n        \"bb\",                 // Barbados\n        \"bd\",                 // Bangladesh\n        \"be\",                 // Belgium\n        \"bf\",                 // Burkina Faso\n        \"bg\",                 // Bulgaria\n        \"bh\",                 // Bahrain\n        \"bi\",                 // Burundi\n        \"bj\",                 // Benin\n        \"bm\",                 // Bermuda\n        \"bn\",                 // Brunei Darussalam\n        \"bo\",                 // Bolivia\n        \"br\",                 // Brazil\n        \"bs\",                 // Bahamas\n        \"bt\",                 // Bhutan\n        \"bv\",                 // Bouvet Island\n        \"bw\",                 // Botswana\n        \"by\",                 // Belarus\n        \"bz\",                 // Belize\n        \"ca\",                 // Canada\n        \"cc\",                 // Cocos (Keeling) Islands\n        \"cd\",                 // Democratic Republic of the Congo (formerly Zaire)\n        \"cf\",                 // Central African Republic\n        \"cg\",                 // Republic of the Congo\n        \"ch\",                 // Switzerland\n        \"ci\",                 // C\u00f4te d'Ivoire\n        \"ck\",                 // Cook Islands\n        \"cl\",                 // Chile\n        \"cm\",                 // Cameroon\n        \"cn\",                 // China, mainland\n        \"co\",                 // Colombia\n        \"cr\",                 // Costa Rica\n        \"cu\",                 // Cuba\n        \"cv\",                 // Cape Verde\n        \"cw\",                 // Cura\u00e7ao\n        \"cx\",                 // Christmas Island\n        \"cy\",                 // Cyprus\n        \"cz\",                 // Czech Republic\n        \"de\",                 // Germany\n        \"dj\",                 // Djibouti\n        \"dk\",                 // Denmark\n        \"dm\",                 // Dominica\n        \"do\",                 // Dominican Republic\n        \"dz\",                 // Algeria\n        \"ec\",                 // Ecuador\n        \"ee\",                 // Estonia\n        \"eg\",                 // Egypt\n        \"er\",                 // Eritrea\n        \"es\",                 // Spain\n        \"et\",                 // Ethiopia\n        \"eu\",                 // European Union\n        \"fi\",                 // Finland\n        \"fj\",                 // Fiji\n        \"fk\",                 // Falkland Islands\n        \"fm\",                 // Federated States of Micronesia\n        \"fo\",                 // Faroe Islands\n        \"fr\",                 // France\n        \"ga\",                 // Gabon\n        \"gb\",                 // Great Britain (United Kingdom)\n        \"gd\",                 // Grenada\n        \"ge\",                 // Georgia\n        \"gf\",                 // French Guiana\n        \"gg\",                 // Guernsey\n        \"gh\",                 // Ghana\n        \"gi\",                 // Gibraltar\n        \"gl\",                 // Greenland\n        \"gm\",                 // The Gambia\n        \"gn\",                 // Guinea\n        \"gp\",                 // Guadeloupe\n        \"gq\",                 // Equatorial Guinea\n        \"gr\",                 // Greece\n        \"gs\",                 // South Georgia and the South Sandwich Islands\n        \"gt\",                 // Guatemala\n        \"gu\",                 // Guam\n        \"gw\",                 // Guinea-Bissau\n        \"gy\",                 // Guyana\n        \"hk\",                 // Hong Kong\n        \"hm\",                 // Heard Island and McDonald Islands\n        \"hn\",                 // Honduras\n        \"hr\",                 // Croatia (Hrvatska)\n        \"ht\",                 // Haiti\n        \"hu\",                 // Hungary\n        \"id\",                 // Indonesia\n        \"ie\",                 // Ireland (\u00c9ire)\n        \"il\",                 // Israel\n        \"im\",                 // Isle of Man\n        \"in\",                 // India\n        \"io\",                 // British Indian Ocean Territory\n        \"iq\",                 // Iraq\n        \"ir\",                 // Iran\n        \"is\",                 // Iceland\n        \"it\",                 // Italy\n        \"je\",                 // Jersey\n        \"jm\",                 // Jamaica\n        \"jo\",                 // Jordan\n        \"jp\",                 // Japan\n        \"ke\",                 // Kenya\n        \"kg\",                 // Kyrgyzstan\n        \"kh\",                 // Cambodia (Khmer)\n        \"ki\",                 // Kiribati\n        \"km\",                 // Comoros\n        \"kn\",                 // Saint Kitts and Nevis\n        \"kp\",                 // North Korea\n        \"kr\",                 // South Korea\n        \"kw\",                 // Kuwait\n        \"ky\",                 // Cayman Islands\n        \"kz\",                 // Kazakhstan\n        \"la\",                 // Laos (currently being marketed as the official domain for Los Angeles)\n        \"lb\",                 // Lebanon\n        \"lc\",                 // Saint Lucia\n        \"li\",                 // Liechtenstein\n        \"lk\",                 // Sri Lanka\n        \"lr\",                 // Liberia\n        \"ls\",                 // Lesotho\n        \"lt\",                 // Lithuania\n        \"lu\",                 // Luxembourg\n        \"lv\",                 // Latvia\n        \"ly\",                 // Libya\n        \"ma\",                 // Morocco\n        \"mc\",                 // Monaco\n        \"md\",                 // Moldova\n        \"me\",                 // Montenegro\n        \"mg\",                 // Madagascar\n        \"mh\",                 // Marshall Islands\n        \"mk\",                 // Republic of Macedonia\n        \"ml\",                 // Mali\n        \"mm\",                 // Myanmar\n        \"mn\",                 // Mongolia\n        \"mo\",                 // Macau\n        \"mp\",                 // Northern Mariana Islands\n        \"mq\",                 // Martinique\n        \"mr\",                 // Mauritania\n        \"ms\",                 // Montserrat\n        \"mt\",                 // Malta\n        \"mu\",                 // Mauritius\n        \"mv\",                 // Maldives\n        \"mw\",                 // Malawi\n        \"mx\",                 // Mexico\n        \"my\",                 // Malaysia\n        \"mz\",                 // Mozambique\n        \"na\",                 // Namibia\n        \"nc\",                 // New Caledonia\n        \"ne\",                 // Niger\n        \"nf\",                 // Norfolk Island\n        \"ng\",                 // Nigeria\n        \"ni\",                 // Nicaragua\n        \"nl\",                 // Netherlands\n        \"no\",                 // Norway\n        \"np\",                 // Nepal\n        \"nr\",                 // Nauru\n        \"nu\",                 // Niue\n        \"nz\",                 // New Zealand\n        \"om\",                 // Oman\n        \"pa\",                 // Panama\n        \"pe\",                 // Peru\n        \"pf\",                 // French Polynesia With Clipperton Island\n        \"pg\",                 // Papua New Guinea\n        \"ph\",                 // Philippines\n        \"pk\",                 // Pakistan\n        \"pl\",                 // Poland\n        \"pm\",                 // Saint-Pierre and Miquelon\n        \"pn\",                 // Pitcairn Islands\n        \"pr\",                 // Puerto Rico\n        \"ps\",                 // Palestinian territories (PA-controlled West Bank and Gaza Strip)\n        \"pt\",                 // Portugal\n        \"pw\",                 // Palau\n        \"py\",                 // Paraguay\n        \"qa\",                 // Qatar\n        \"re\",                 // R\u00e9union\n        \"ro\",                 // Romania\n        \"rs\",                 // Serbia\n        \"ru\",                 // Russia\n        \"rw\",                 // Rwanda\n        \"sa\",                 // Saudi Arabia\n        \"sb\",                 // Solomon Islands\n        \"sc\",                 // Seychelles\n        \"sd\",                 // Sudan\n        \"se\",                 // Sweden\n        \"sg\",                 // Singapore\n        \"sh\",                 // Saint Helena\n        \"si\",                 // Slovenia\n        \"sj\",                 // Svalbard and Jan Mayen Islands Not in use (Norwegian dependencies; see .no)\n        \"sk\",                 // Slovakia\n        \"sl\",                 // Sierra Leone\n        \"sm\",                 // San Marino\n        \"sn\",                 // Senegal\n        \"so\",                 // Somalia\n        \"sr\",                 // Suriname\n        \"ss\",                 // ss National Communication Authority (NCA)\n        \"st\",                 // S\u00e3o Tom\u00e9 and Pr\u00edncipe\n        \"su\",                 // Soviet Union (deprecated)\n        \"sv\",                 // El Salvador\n        \"sx\",                 // Sint Maarten\n        \"sy\",                 // Syria\n        \"sz\",                 // Swaziland\n        \"tc\",                 // Turks and Caicos Islands\n        \"td\",                 // Chad\n        \"tf\",                 // French Southern and Antarctic Lands\n        \"tg\",                 // Togo\n        \"th\",                 // Thailand\n        \"tj\",                 // Tajikistan\n        \"tk\",                 // Tokelau\n        \"tl\",                 // East Timor (deprecated old code)\n        \"tm\",                 // Turkmenistan\n        \"tn\",                 // Tunisia\n        \"to\",                 // Tonga\n//        \"tp\",                 // East Timor (Retired)\n        \"tr\",                 // Turkey\n        \"tt\",                 // Trinidad and Tobago\n        \"tv\",                 // Tuvalu\n        \"tw\",                 // Taiwan, Republic of China\n        \"tz\",                 // Tanzania\n        \"ua\",                 // Ukraine\n        \"ug\",                 // Uganda\n        \"uk\",                 // United Kingdom\n        \"us\",                 // United States of America\n        \"uy\",                 // Uruguay\n        \"uz\",                 // Uzbekistan\n        \"va\",                 // Vatican City State\n        \"vc\",                 // Saint Vincent and the Grenadines\n        \"ve\",                 // Venezuela\n        \"vg\",                 // British Virgin Islands\n        \"vi\",                 // U.S. Virgin Islands\n        \"vn\",                 // Vietnam\n        \"vu\",                 // Vanuatu\n        \"wf\",                 // Wallis and Futuna\n        \"ws\",                 // Samoa (formerly Western Samoa)\n        \"xn--2scrj9c\", // \u0cad\u0cbe\u0cb0\u0ca4 National Internet eXchange of India\n        \"xn--3e0b707e\", // \ud55c\uad6d KISA (Korea Internet &amp; Security Agency)\n        \"xn--3hcrj9c\", // \u0b2d\u0b3e\u0b30\u0b24 National Internet eXchange of India\n        \"xn--45br5cyl\", // \u09ad\u09be\u09f0\u09a4 National Internet eXchange of India\n        \"xn--45brj9c\", // \u09ad\u09be\u09b0\u09a4 National Internet Exchange of India\n        \"xn--4dbrk0ce\", // \u05d9\u05e9\u05e8\u05d0\u05dc The Israel Internet Association (RA)\n        \"xn--54b7fta0cc\", // \u09ac\u09be\u0982\u09b2\u09be Posts and Telecommunications Division\n        \"xn--80ao21a\", // \u049b\u0430\u0437 Association of IT Companies of Kazakhstan\n        \"xn--90a3ac\", // \u0441\u0440\u0431 Serbian National Internet Domain Registry (RNIDS)\n        \"xn--90ais\", // ??? Reliable Software Inc.\n        \"xn--clchc0ea0b2g2a9gcd\", // \u0b9a\u0bbf\u0b99\u0bcd\u0b95\u0baa\u0bcd\u0baa\u0bc2\u0bb0\u0bcd Singapore Network Information Centre (SGNIC) Pte Ltd\n        \"xn--d1alf\", // \u043c\u043a\u0434 Macedonian Academic Research Network Skopje\n        \"xn--e1a4c\", // \u0435\u044e EURid vzw/asbl\n        \"xn--fiqs8s\", // \u4e2d\u56fd China Internet Network Information Center\n        \"xn--fiqz9s\", // \u4e2d\u570b China Internet Network Information Center\n        \"xn--fpcrj9c3d\", // \u0c2d\u0c3e\u0c30\u0c24\u0c4d National Internet Exchange of India\n        \"xn--fzc2c9e2c\", // \u0dbd\u0d82\u0d9a\u0dcf LK Domain Registry\n        \"xn--gecrj9c\", // \u0aad\u0abe\u0ab0\u0aa4 National Internet Exchange of India\n        \"xn--h2breg3eve\", // \u092d\u093e\u0930\u0924\u092e\u094d National Internet eXchange of India\n        \"xn--h2brj9c\", // \u092d\u093e\u0930\u0924 National Internet Exchange of India\n        \"xn--h2brj9c8c\", // \u092d\u093e\u0930\u094b\u0924 National Internet eXchange of India\n        \"xn--j1amh\", // \u0443\u043a\u0440 Ukrainian Network Information Centre (UANIC), Inc.\n        \"xn--j6w193g\", // \u9999\u6e2f Hong Kong Internet Registration Corporation Ltd.\n        \"xn--kprw13d\", // \u53f0\u6e7e Taiwan Network Information Center (TWNIC)\n        \"xn--kpry57d\", // \u53f0\u7063 Taiwan Network Information Center (TWNIC)\n        \"xn--l1acc\", // \u043c\u043e\u043d Datacom Co.,Ltd\n        \"xn--lgbbat1ad8j\", // \u0627\u0644\u062c\u0632\u0627\u0626\u0631 CERIST\n        \"xn--mgb9awbf\", // \u0639\u0645\u0627\u0646 Telecommunications Regulatory Authority (TRA)\n        \"xn--mgba3a4f16a\", // \u0627\u06cc\u0631\u0627\u0646 Institute for Research in Fundamental Sciences (IPM)\n        \"xn--mgbaam7a8h\", // \u0627\u0645\u0627\u0631\u0627\u062a Telecommunications Regulatory Authority (TRA)\n        \"xn--mgbah1a3hjkrd\", // \u0645\u0648\u0631\u064a\u062a\u0627\u0646\u064a\u0627 Universit\u00e9 de Nouakchott Al Aasriya\n        \"xn--mgbai9azgqp6j\", // \u067e\u0627\u06a9\u0633\u062a\u0627\u0646 National Telecommunication Corporation\n        \"xn--mgbayh7gpa\", // \u0627\u0644\u0627\u0631\u062f\u0646 National Information Technology Center (NITC)\n        \"xn--mgbbh1a\", // \u0628\u0627\u0631\u062a National Internet eXchange of India\n        \"xn--mgbbh1a71e\", // \u0628\u06be\u0627\u0631\u062a National Internet Exchange of India\n        \"xn--mgbc0a9azcg\", // \u0627\u0644\u0645\u063a\u0631\u0628 Agence Nationale de R\u00e9glementation des T\u00e9l\u00e9communications (ANRT)\n        \"xn--mgbcpq6gpa1a\", // \u0627\u0644\u0628\u062d\u0631\u064a\u0646 Telecommunications Regulatory Authority (TRA)\n        \"xn--mgberp4a5d4ar\", // \u0627\u0644\u0633\u0639\u0648\u062f\u064a\u0629 Communications and Information Technology Commission\n        \"xn--mgbgu82a\", // \u0680\u0627\u0631\u062a National Internet eXchange of India\n        \"xn--mgbpl2fh\", // ????? Sudan Internet Society\n        \"xn--mgbtx2b\", // \u0639\u0631\u0627\u0642 Communications and Media Commission (CMC)\n        \"xn--mgbx4cd0ab\", // \u0645\u0644\u064a\u0633\u064a\u0627 MYNIC Berhad\n        \"xn--mix891f\", // \u6fb3\u9580 Bureau of Telecommunications Regulation (DSRT)\n        \"xn--node\", // \u10d2\u10d4 Information Technologies Development Center (ITDC)\n        \"xn--o3cw4h\", // \u0e44\u0e17\u0e22 Thai Network Information Center Foundation\n        \"xn--ogbpf8fl\", // \u0633\u0648\u0631\u064a\u0629 National Agency for Network Services (NANS)\n        \"xn--p1ai\", // \u0440\u0444 Coordination Center for TLD RU\n        \"xn--pgbs0dh\", // \u062a\u0648\u0646\u0633 Agence Tunisienne d&#39;Internet\n        \"xn--q7ce6a\", // \u0ea5\u0eb2\u0ea7 Lao National Internet Center (LANIC)\n        \"xn--qxa6a\", // \u03b5\u03c5 EURid vzw/asbl\n        \"xn--qxam\", // \u03b5\u03bb ICS-FORTH GR\n        \"xn--rvc1e0am3e\", // \u0d2d\u0d3e\u0d30\u0d24\u0d02 National Internet eXchange of India\n        \"xn--s9brj9c\", // \u0a2d\u0a3e\u0a30\u0a24 National Internet Exchange of India\n        \"xn--wgbh1c\", // \u0645\u0635\u0631 National Telecommunication Regulatory Authority - NTRA\n        \"xn--wgbl6a\", // \u0642\u0637\u0631 Communications Regulatory Authority\n        \"xn--xkc2al3hye2a\", // \u0b87\u0bb2\u0b99\u0bcd\u0b95\u0bc8 LK Domain Registry\n        \"xn--xkc2dl3a5ee0h\", // \u0b87\u0ba8\u0bcd\u0ba4\u0bbf\u0baf\u0bbe National Internet Exchange of India\n        \"xn--y9a3aq\", // ??? Internet Society\n        \"xn--yfro4i67o\", // \u65b0\u52a0\u5761 Singapore Network Information Centre (SGNIC) Pte Ltd\n        \"xn--ygbi2ammx\", // \u0641\u0644\u0633\u0637\u064a\u0646 Ministry of Telecom &amp; Information Technology (MTIT)\n        \"ye\",                 // Yemen\n        \"yt\",                 // Mayotte\n        \"za\",                 // South Africa\n        \"zm\",                 // Zambia\n        \"zw\",                 // Zimbabwe\n    };\n\n    // WARNING: this array MUST be sorted, otherwise it cannot be searched reliably using binary search\n    private static final String[] LOCAL_TLDS = {\n       \"localdomain\",         // Also widely used as localhost.localdomain\n       \"localhost\",           // RFC2606 defined\n    };\n    /*\n     * This field is used to detect whether the getInstance has been called.\n     * After this, the method updateTLDOverride is not allowed to be called.\n     * This field does not need to be volatile since it is only accessed from\n     * synchronized methods.\n     */\n    private static boolean inUse;\n    /*\n     * These arrays are mutable.\n     * They can only be updated by the updateTLDOverride method, and readers must first get an instance\n     * using the getInstance methods which are all (now) synchronized.\n     * The only other access is via getTLDEntries which is now synchronized.\n     */\n    // WARNING: this array MUST be sorted, otherwise it cannot be searched reliably using binary search\n    private static String[] countryCodeTLDsPlus = EMPTY_STRING_ARRAY;\n    // WARNING: this array MUST be sorted, otherwise it cannot be searched reliably using binary search\n    private static String[] genericTLDsPlus = EMPTY_STRING_ARRAY;\n    // WARNING: this array MUST be sorted, otherwise it cannot be searched reliably using binary search\n    private static String[] countryCodeTLDsMinus = EMPTY_STRING_ARRAY;\n    // WARNING: this array MUST be sorted, otherwise it cannot be searched reliably using binary search\n    private static String[] genericTLDsMinus = EMPTY_STRING_ARRAY;\n\n    // N.B. The constructors are deliberately private to avoid possible problems with unsafe publication.\n    // It is vital that the static override arrays are not mutable once they have been used in an instance\n    // The arrays could be copied into the instance variables, however if the static array were changed it could\n    // result in different settings for the shared default instances\n\n    // WARNING: this array MUST be sorted, otherwise it cannot be searched reliably using binary search\n    private static String[] localTLDsMinus = EMPTY_STRING_ARRAY;\n\n    // WARNING: this array MUST be sorted, otherwise it cannot be searched reliably using binary search\n    private static String[] localTLDsPlus = EMPTY_STRING_ARRAY;\n\n    /**\n     * Check if a sorted array contains the specified key\n     *\n     * @param sortedArray the array to search\n     * @param key the key to find\n     * @return {@code true} if the array contains the key\n     */\n    private static boolean arrayContains(final String[] sortedArray, final String key) {\n        return Arrays.binarySearch(sortedArray, key) >= 0;\n    }\n\n    /**\n     * Returns the singleton instance of this validator. It\n     *  will not consider local addresses as valid.\n     * @return the singleton instance of this validator\n     */\n    public static synchronized DomainValidator getInstance() {\n        inUse = true;\n        return LazyHolder.DOMAIN_VALIDATOR;\n    }\n\n    /**\n     * Returns the singleton instance of this validator,\n     *  with local validation as required.\n     * @param allowLocal Should local addresses be considered valid?\n     * @return the singleton instance of this validator\n     */\n    public static synchronized DomainValidator getInstance(final boolean allowLocal) {\n        inUse = true;\n        if (allowLocal) {\n            return LazyHolder.DOMAIN_VALIDATOR_WITH_LOCAL;\n        }\n        return LazyHolder.DOMAIN_VALIDATOR;\n    }\n\n    /**\n     * Returns a new instance of this validator.\n     * The user can provide a list of {@link Item} entries which can\n     * be used to override the generic and country code lists.\n     * Note that any such entries override values provided by the\n     * {@link #updateTLDOverride(ArrayType, String[])} method\n     * If an entry for a particular type is not provided, then\n     * the class override (if any) is retained.\n     *\n     * @param allowLocal Should local addresses be considered valid?\n     * @param items   array of {@link Item} entries\n     * @return an instance of this validator\n     * @since 1.7\n     */\n    public static synchronized DomainValidator getInstance(final boolean allowLocal, final List<Item> items) {\n        inUse = true;\n        return new DomainValidator(allowLocal, items);\n    }\n\n    /**\n     * Gets a copy of a class level internal array.\n     * @param table the array type (any of the enum values)\n     * @return a copy of the array\n     * @throws IllegalArgumentException if the table type is unexpected (should not happen)\n     * @since 1.5.1\n     */\n    public static synchronized String[] getTLDEntries(final ArrayType table) {\n        final String[] array;\n        switch (table) {\n        case COUNTRY_CODE_MINUS:\n            array = countryCodeTLDsMinus;\n            break;\n        case COUNTRY_CODE_PLUS:\n            array = countryCodeTLDsPlus;\n            break;\n        case GENERIC_MINUS:\n            array = genericTLDsMinus;\n            break;\n        case GENERIC_PLUS:\n            array = genericTLDsPlus;\n            break;\n        case LOCAL_MINUS:\n            array = localTLDsMinus;\n            break;\n        case LOCAL_PLUS:\n            array = localTLDsPlus;\n            break;\n        case GENERIC_RO:\n            array = GENERIC_TLDS;\n            break;\n        case COUNTRY_CODE_RO:\n            array = COUNTRY_CODE_TLDS;\n            break;\n        case INFRASTRUCTURE_RO:\n            array = INFRASTRUCTURE_TLDS;\n            break;\n        case LOCAL_RO:\n            array = LOCAL_TLDS;\n            break;\n        default:\n            throw new IllegalArgumentException(UNEXPECTED_ENUM_VALUE + table);\n        }\n        return Arrays.copyOf(array, array.length); // clone the array\n    }\n\n    /*\n     * Check if input contains only ASCII\n     * Treats null as all ASCII\n     */\n    private static boolean isOnlyASCII(final String input) {\n        if (input == null) {\n            return true;\n        }\n        for (int i = 0; i < input.length(); i++) {\n            if (input.charAt(i) > 0x7F) { // CHECKSTYLE IGNORE MagicNumber\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Converts potentially Unicode input to punycode.\n     * If conversion fails, returns the original input.\n     *\n     * @param input the string to convert, not null\n     * @return converted input, or original input if conversion fails\n     */\n    // Needed by UrlValidator\n    static String unicodeToASCII(final String input) {\n        if (isOnlyASCII(input)) { // skip possibly expensive processing\n            return input;\n        }\n        try {\n            final String ascii = IDN.toASCII(input);\n            if (IDNBUGHOLDER.IDN_TOASCII_PRESERVES_TRAILING_DOTS) {\n                return ascii;\n            }\n            final int length = input.length();\n            if (length == 0) { // check there is a last character\n                return input;\n            }\n            // RFC3490 3.1. 1)\n            // Whenever dots are used as label separators, the following\n            // characters MUST be recognized as dots: U+002E (full stop), U+3002\n            // (ideographic full stop), U+FF0E (fullwidth full stop), U+FF61\n            // (halfwidth ideographic full stop).\n            final char lastChar = input.charAt(length - 1); // fetch original last char\n            switch (lastChar) {\n            case '\\u002E': // \".\" full stop\n            case '\\u3002': // ideographic full stop\n            case '\\uFF0E': // fullwidth full stop\n            case '\\uFF61': // halfwidth ideographic full stop\n                return ascii + \".\"; // restore the missing stop\n            default:\n                return ascii;\n            }\n        } catch (final IllegalArgumentException e) { // input is not valid\n            return input;\n        }\n    }\n\n    /**\n     * Update one of the TLD override arrays.\n     * This must only be done at program startup, before any instances are accessed using getInstance.\n     * <p>\n     * For example:\n     * <p>\n     * {@code DomainValidator.updateTLDOverride(ArrayType.GENERIC_PLUS, \"apache\")}\n     * <p>\n     * To clear an override array, provide an empty array.\n     *\n     * @param table the table to update, see {@link DomainValidator.ArrayType}\n     * Must be one of the following\n     * <ul>\n     * <li>COUNTRY_CODE_MINUS</li>\n     * <li>COUNTRY_CODE_PLUS</li>\n     * <li>GENERIC_MINUS</li>\n     * <li>GENERIC_PLUS</li>\n     * <li>LOCAL_MINUS</li>\n     * <li>LOCAL_PLUS</li>\n     * </ul>\n     * @param tlds the array of TLDs, must not be null\n     * @throws IllegalStateException if the method is called after getInstance\n     * @throws IllegalArgumentException if one of the read-only tables is requested\n     * @since 1.5.0\n     */\n    public static synchronized void updateTLDOverride(final ArrayType table, final String... tlds) {\n        if (inUse) {\n            throw new IllegalStateException(\"Can only invoke this method before calling getInstance\");\n        }\n        final String[] copy = new String[tlds.length];\n        // Comparisons are always done with lower-case entries\n        for (int i = 0; i < tlds.length; i++) {\n            copy[i] = tlds[i].toLowerCase(Locale.ENGLISH);\n        }\n        Arrays.sort(copy);\n        switch (table) {\n        case COUNTRY_CODE_MINUS:\n            countryCodeTLDsMinus = copy;\n            break;\n        case COUNTRY_CODE_PLUS:\n            countryCodeTLDsPlus = copy;\n            break;\n        case GENERIC_MINUS:\n            genericTLDsMinus = copy;\n            break;\n        case GENERIC_PLUS:\n            genericTLDsPlus = copy;\n            break;\n        case LOCAL_MINUS:\n            localTLDsMinus = copy;\n            break;\n        case LOCAL_PLUS:\n            localTLDsPlus = copy;\n            break;\n        case COUNTRY_CODE_RO:\n        case GENERIC_RO:\n        case INFRASTRUCTURE_RO:\n        case LOCAL_RO:\n            throw new IllegalArgumentException(\"Cannot update the table: \" + table);\n        default:\n            throw new IllegalArgumentException(UNEXPECTED_ENUM_VALUE + table);\n        }\n    }\n\n    /** Whether to allow local overrides. */\n    private final boolean allowLocal;\n\n    // TLDs defined by IANA\n    // Authoritative and comprehensive list at:\n    // https://data.iana.org/TLD/tlds-alpha-by-domain.txt\n\n    // Note that the above list is in UPPER case.\n    // The code currently converts strings to lower case (as per the tables below)\n\n    // IANA also provide an HTML list at http://www.iana.org/domains/root/db\n    // Note that this contains several country code entries which are NOT in\n    // the text file. These all have the \"Not assigned\" in the \"Sponsoring Organisation\" column\n    // For example (as of 2015-01-02):\n    // .bl  country-code    Not assigned\n    // .um  country-code    Not assigned\n\n    /**\n     * RegexValidator for matching domains.\n     */\n    private final RegexValidator domainRegex =\n            new RegexValidator(DOMAIN_NAME_REGEX);\n\n    /**\n     * RegexValidator for matching a local hostname\n     */\n    // RFC1123 sec 2.1 allows hostnames to start with a digit\n    private final RegexValidator hostnameRegex =\n            new RegexValidator(DOMAIN_LABEL_REGEX);\n\n    /** Local override. */\n    final String[] myCountryCodeTLDsMinus;\n\n    /** Local override. */\n    final String[] myCountryCodeTLDsPlus;\n\n    // Additional arrays to supplement or override the built in ones.\n    // The PLUS arrays are valid keys, the MINUS arrays are invalid keys\n\n    /** Local override. */\n    final String[] myGenericTLDsPlus;\n\n    /** Local override. */\n    final String[] myGenericTLDsMinus;\n\n    /** Local override. */\n    final String[] myLocalTLDsPlus;\n\n    /** Local override. */\n    final String[] myLocalTLDsMinus;\n\n    /*\n     * It is vital that instances are immutable. This is because the default instances are shared.\n     */\n\n    /**\n     * Private constructor.\n     */\n    private DomainValidator(final boolean allowLocal) {\n        this.allowLocal = allowLocal;\n        // link to class overrides\n        myCountryCodeTLDsMinus = countryCodeTLDsMinus;\n        myCountryCodeTLDsPlus = countryCodeTLDsPlus;\n        myGenericTLDsPlus = genericTLDsPlus;\n        myGenericTLDsMinus = genericTLDsMinus;\n        myLocalTLDsPlus = localTLDsPlus;\n        myLocalTLDsMinus = localTLDsMinus;\n    }\n\n    /**\n     * Private constructor, allowing local overrides\n     * @since 1.7\n    */\n    private DomainValidator(final boolean allowLocal, final List<Item> items) {\n        this.allowLocal = allowLocal;\n\n        // default to class overrides\n        String[] ccMinus = countryCodeTLDsMinus;\n        String[] ccPlus = countryCodeTLDsPlus;\n        String[] genMinus = genericTLDsMinus;\n        String[] genPlus = genericTLDsPlus;\n        String[] localMinus = localTLDsMinus;\n        String[] localPlus = localTLDsPlus;\n\n        // apply the instance overrides\n        for (final Item item : items) {\n            final String[] copy = new String[item.values.length];\n            // Comparisons are always done with lower-case entries\n            for (int i = 0; i < item.values.length; i++) {\n                copy[i] = item.values[i].toLowerCase(Locale.ENGLISH);\n            }\n            Arrays.sort(copy);\n            switch (item.type) {\n            case COUNTRY_CODE_MINUS: {\n                ccMinus = copy;\n                break;\n            }\n            case COUNTRY_CODE_PLUS: {\n                ccPlus = copy;\n                break;\n            }\n            case GENERIC_MINUS: {\n                genMinus = copy;\n                break;\n            }\n            case GENERIC_PLUS: {\n                genPlus = copy;\n                break;\n            }\n            case LOCAL_MINUS: {\n                localMinus = copy;\n                break;\n            }\n            case LOCAL_PLUS: {\n                localPlus = copy;\n                break;\n            }\n            default:\n                break;\n            }\n        }\n\n        // init the instance overrides\n        myCountryCodeTLDsMinus = ccMinus;\n        myCountryCodeTLDsPlus = ccPlus;\n        myGenericTLDsMinus = genMinus;\n        myGenericTLDsPlus = genPlus;\n        myLocalTLDsMinus = localMinus;\n        myLocalTLDsPlus = localPlus;\n    }\n\n    private String chompLeadingDot(final String str) {\n        if (str.startsWith(\".\")) {\n            return str.substring(1);\n        }\n        return str;\n    }\n\n    /**\n     * Gets a copy of an instance level internal array.\n     * @param table the array type (any of the enum values)\n     * @return a copy of the array\n     * @throws IllegalArgumentException if the table type is unexpected, e.g. GENERIC_RO\n     * @since 1.7\n     */\n    public String[] getOverrides(final ArrayType table) {\n        final String[] array;\n        switch (table) {\n        case COUNTRY_CODE_MINUS:\n            array = myCountryCodeTLDsMinus;\n            break;\n        case COUNTRY_CODE_PLUS:\n            array = myCountryCodeTLDsPlus;\n            break;\n        case GENERIC_MINUS:\n            array = myGenericTLDsMinus;\n            break;\n        case GENERIC_PLUS:\n            array = myGenericTLDsPlus;\n            break;\n        case LOCAL_MINUS:\n            array = myLocalTLDsMinus;\n            break;\n        case LOCAL_PLUS:\n            array = myLocalTLDsPlus;\n            break;\n        default:\n            throw new IllegalArgumentException(UNEXPECTED_ENUM_VALUE + table);\n        }\n        return Arrays.copyOf(array, array.length); // clone the array\n    }\n\n    /**\n     * Does this instance allow local addresses?\n     *\n     * @return true if local addresses are allowed.\n     * @since 1.7\n     */\n    public boolean isAllowLocal() {\n        return allowLocal;\n    }\n\n    /**\n     * Returns true if the specified {@link String} parses\n     * as a valid domain name with a recognized top-level domain.\n     * The parsing is case-insensitive.\n     * @param domain the parameter to check for domain name syntax\n     * @return true if the parameter is a valid domain name\n     */\n    public boolean isValid(String domain) {\n        if (domain == null) {\n            return false;\n        }\n        domain = unicodeToASCII(domain);\n        // hosts must be equally reachable via punycode and Unicode\n        // Unicode is never shorter than punycode, so check punycode\n        // if domain did not convert, then it will be caught by ASCII\n        // checks in the regexes below\n        if (domain.length() > MAX_DOMAIN_LENGTH) {\n            return false;\n        }\n        final String[] groups = domainRegex.match(domain);\n        if (groups != null && groups.length > 0) {\n            return isValidTld(groups[0]);\n        }\n        return allowLocal && hostnameRegex.isValid(domain);\n    }\n\n    /**\n     * Returns true if the specified {@link String} matches any\n     * IANA-defined country code top-level domain. Leading dots are\n     * ignored if present. The search is case-insensitive.\n     * @param ccTld the parameter to check for country code TLD status, not null\n     * @return true if the parameter is a country code TLD\n     */\n    public boolean isValidCountryCodeTld(final String ccTld) {\n        final String key = chompLeadingDot(unicodeToASCII(ccTld).toLowerCase(Locale.ENGLISH));\n        return (arrayContains(COUNTRY_CODE_TLDS, key) || arrayContains(myCountryCodeTLDsPlus, key)) && !arrayContains(myCountryCodeTLDsMinus, key);\n    }\n\n    // package protected for unit test access\n    // must agree with isValid() above\n    final boolean isValidDomainSyntax(String domain) {\n        if (domain == null) {\n            return false;\n        }\n        domain = unicodeToASCII(domain);\n        // hosts must be equally reachable via punycode and Unicode\n        // Unicode is never shorter than punycode, so check punycode\n        // if domain did not convert, then it will be caught by ASCII\n        // checks in the regexes below\n        if (domain.length() > MAX_DOMAIN_LENGTH) {\n            return false;\n        }\n        final String[] groups = domainRegex.match(domain);\n        return groups != null && groups.length > 0 || hostnameRegex.isValid(domain);\n    }\n    /**\n     * Returns true if the specified {@link String} matches any\n     * IANA-defined generic top-level domain. Leading dots are ignored\n     * if present. The search is case-insensitive.\n     * @param gTld the parameter to check for generic TLD status, not null\n     * @return true if the parameter is a generic TLD\n     */\n    public boolean isValidGenericTld(final String gTld) {\n        final String key = chompLeadingDot(unicodeToASCII(gTld).toLowerCase(Locale.ENGLISH));\n        return (arrayContains(GENERIC_TLDS, key) || arrayContains(myGenericTLDsPlus, key)) && !arrayContains(myGenericTLDsMinus, key);\n    }\n\n    /**\n     * Returns true if the specified {@link String} matches any\n     * IANA-defined infrastructure top-level domain. Leading dots are\n     * ignored if present. The search is case-insensitive.\n     * @param iTld the parameter to check for infrastructure TLD status, not null\n     * @return true if the parameter is an infrastructure TLD\n     */\n    public boolean isValidInfrastructureTld(final String iTld) {\n        final String key = chompLeadingDot(unicodeToASCII(iTld).toLowerCase(Locale.ENGLISH));\n        return arrayContains(INFRASTRUCTURE_TLDS, key);\n    }\n\n    /**\n     * Returns true if the specified {@link String} matches any\n     * widely used \"local\" domains (localhost or localdomain). Leading dots are\n     * ignored if present. The search is case-insensitive.\n     * @param lTld the parameter to check for local TLD status, not null\n     * @return true if the parameter is an local TLD\n     */\n    public boolean isValidLocalTld(final String lTld) {\n        final String key = chompLeadingDot(unicodeToASCII(lTld).toLowerCase(Locale.ENGLISH));\n        return (arrayContains(LOCAL_TLDS, key) || arrayContains(myLocalTLDsPlus, key))\n                && !arrayContains(myLocalTLDsMinus, key);\n    }\n\n    /**\n     * Returns true if the specified {@link String} matches any\n     * IANA-defined top-level domain. Leading dots are ignored if present.\n     * The search is case-insensitive.\n     * <p>\n     * If allowLocal is true, the TLD is checked using {@link #isValidLocalTld(String)}.\n     * The TLD is then checked against {@link #isValidInfrastructureTld(String)},\n     * {@link #isValidGenericTld(String)} and {@link #isValidCountryCodeTld(String)}\n     * @param tld the parameter to check for TLD status, not null\n     * @return true if the parameter is a TLD\n     */\n    public boolean isValidTld(final String tld) {\n        if (allowLocal && isValidLocalTld(tld)) {\n            return true;\n        }\n        return isValidInfrastructureTld(tld)\n                || isValidGenericTld(tld)\n                || isValidCountryCodeTld(tld);\n    }\n}", "super_interfaces": ["Serializable"], "fields": [{"attribute_expression": "private static final int MAX_DOMAIN_LENGTH = 253;", "docstring": " Maximum allowable length ({@value}) of a domain name", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "MAX_DOMAIN_LENGTH = 253", "syntax_pass": true}, {"attribute_expression": "private static final String[] EMPTY_STRING_ARRAY = {};", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String[]", "name": "EMPTY_STRING_ARRAY = {}", "syntax_pass": true}, {"attribute_expression": "private static final long serialVersionUID = -4407125112880174009L;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "serialVersionUID = -4407125112880174009L", "syntax_pass": true}, {"attribute_expression": "private static final String DOMAIN_LABEL_REGEX = \"\\\\p{Alnum}(?>[\\\\p{Alnum}-]{0,61}\\\\p{Alnum})?\";", "docstring": " Max 63 characters", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "DOMAIN_LABEL_REGEX = \"\\\\p{Alnum}(?>[\\\\p{Alnum}-]{0,61}\\\\p{Alnum})?\"", "syntax_pass": true}, {"attribute_expression": "private static final String TOP_LABEL_REGEX = \"\\\\p{Alpha}(?>[\\\\p{Alnum}-]{0,61}\\\\p{Alnum})?\";", "docstring": " Max 63 characters", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "TOP_LABEL_REGEX = \"\\\\p{Alpha}(?>[\\\\p{Alnum}-]{0,61}\\\\p{Alnum})?\"", "syntax_pass": true}, {"attribute_expression": "private static final String DOMAIN_NAME_REGEX =\n            \"^(?:\" + DOMAIN_LABEL_REGEX + \"\\\\.)+\" + \"(\" + TOP_LABEL_REGEX + \")\\\\.?$\";", "docstring": " RFC1123 sec 2.1 allows hostnames to start with a digit", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "DOMAIN_NAME_REGEX =\n            \"^(?:\" + DOMAIN_LABEL_REGEX + \"\\\\.)+\" + \"(\" + TOP_LABEL_REGEX + \")\\\\.?$\"", "syntax_pass": true}, {"attribute_expression": "private static final String UNEXPECTED_ENUM_VALUE = \"Unexpected enum value: \";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "UNEXPECTED_ENUM_VALUE = \"Unexpected enum value: \"", "syntax_pass": true}, {"attribute_expression": "private static final String[] INFRASTRUCTURE_TLDS = {\n        \"arpa\",               // internet infrastructure\n    };", "docstring": " WARNING: this array MUST be sorted, otherwise it cannot be searched reliably using binary search", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String[]", "name": "INFRASTRUCTURE_TLDS = {\n        \"arpa\",               // internet infrastructure\n    }", "syntax_pass": true}, {"attribute_expression": "private static final String[] GENERIC_TLDS = {\n        // Taken from Version 2024040200, Last Updated Tue Apr  2 07:07:02 2024 UTC\n        \"aaa\", // aaa American Automobile Association, Inc.\n        \"aarp\", // aarp AARP\n        // \"abarth\", // abarth Fiat Chrysler Automobiles N.V.\n        \"abb\", // abb ABB Ltd\n        \"abbott\", // abbott Abbott Laboratories, Inc.\n        \"abbvie\", // abbvie AbbVie Inc.\n        \"abc\", // abc Disney Enterprises, Inc.\n        \"able\", // able Able Inc.\n        \"abogado\", // abogado Top Level Domain Holdings Limited\n        \"abudhabi\", // abudhabi Abu Dhabi Systems and Information Centre\n        \"academy\", // academy Half Oaks, LLC\n        \"accenture\", // accenture Accenture plc\n        \"accountant\", // accountant dot Accountant Limited\n        \"accountants\", // accountants Knob Town, LLC\n        \"aco\", // aco ACO Severin Ahlmann GmbH &amp; Co. KG\n//        \"active\", // active The Active Network, Inc\n        \"actor\", // actor United TLD Holdco Ltd.\n//        \"adac\", // adac Allgemeiner Deutscher Automobil-Club e.V. (ADAC)\n        \"ads\", // ads Charleston Road Registry Inc.\n        \"adult\", // adult ICM Registry AD LLC\n        \"aeg\", // aeg Aktiebolaget Electrolux\n        \"aero\", // aero Societe Internationale de Telecommunications Aeronautique (SITA INC USA)\n        \"aetna\", // aetna Aetna Life Insurance Company\n//        \"afamilycompany\", // afamilycompany Johnson Shareholdings, Inc.\n        \"afl\", // afl Australian Football League\n        \"africa\", // africa ZA Central Registry NPC trading as Registry.Africa\n        \"agakhan\", // agakhan Fondation Aga Khan (Aga Khan Foundation)\n        \"agency\", // agency Steel Falls, LLC\n        \"aig\", // aig American International Group, Inc.\n//        \"aigo\", // aigo aigo Digital Technology Co,Ltd. [Not assigned as of Jul 25]\n        \"airbus\", // airbus Airbus S.A.S.\n        \"airforce\", // airforce United TLD Holdco Ltd.\n        \"airtel\", // airtel Bharti Airtel Limited\n        \"akdn\", // akdn Fondation Aga Khan (Aga Khan Foundation)\n        // \"alfaromeo\", // alfaromeo Fiat Chrysler Automobiles N.V.\n        \"alibaba\", // alibaba Alibaba Group Holding Limited\n        \"alipay\", // alipay Alibaba Group Holding Limited\n        \"allfinanz\", // allfinanz Allfinanz Deutsche Verm\u00f6gensberatung Aktiengesellschaft\n        \"allstate\", // allstate Allstate Fire and Casualty Insurance Company\n        \"ally\", // ally Ally Financial Inc.\n        \"alsace\", // alsace REGION D ALSACE\n        \"alstom\", // alstom ALSTOM\n        \"amazon\", // amazon Amazon Registry Services, Inc.\n        \"americanexpress\", // americanexpress American Express Travel Related Services Company, Inc.\n        \"americanfamily\", // americanfamily AmFam, Inc.\n        \"amex\", // amex American Express Travel Related Services Company, Inc.\n        \"amfam\", // amfam AmFam, Inc.\n        \"amica\", // amica Amica Mutual Insurance Company\n        \"amsterdam\", // amsterdam Gemeente Amsterdam\n        \"analytics\", // analytics Campus IP LLC\n        \"android\", // android Charleston Road Registry Inc.\n        \"anquan\", // anquan QIHOO 360 TECHNOLOGY CO. LTD.\n        \"anz\", // anz Australia and New Zealand Banking Group Limited\n        \"aol\", // aol AOL Inc.\n        \"apartments\", // apartments June Maple, LLC\n        \"app\", // app Charleston Road Registry Inc.\n        \"apple\", // apple Apple Inc.\n        \"aquarelle\", // aquarelle Aquarelle.com\n        \"arab\", // arab League of Arab States\n        \"aramco\", // aramco Aramco Services Company\n        \"archi\", // archi STARTING DOT LIMITED\n        \"army\", // army United TLD Holdco Ltd.\n        \"art\", // art UK Creative Ideas Limited\n        \"arte\", // arte Association Relative \u00e0 la T\u00e9l\u00e9vision Europ\u00e9enne G.E.I.E.\n        \"asda\", // asda Wal-Mart Stores, Inc.\n        \"asia\", // asia DotAsia Organisation Ltd.\n        \"associates\", // associates Baxter Hill, LLC\n        \"athleta\", // athleta The Gap, Inc.\n        \"attorney\", // attorney United TLD Holdco, Ltd\n        \"auction\", // auction United TLD HoldCo, Ltd.\n        \"audi\", // audi AUDI Aktiengesellschaft\n        \"audible\", // audible Amazon Registry Services, Inc.\n        \"audio\", // audio Uniregistry, Corp.\n        \"auspost\", // auspost Australian Postal Corporation\n        \"author\", // author Amazon Registry Services, Inc.\n        \"auto\", // auto Uniregistry, Corp.\n        \"autos\", // autos DERAutos, LLC\n        // \"avianca\", // avianca Aerovias del Continente Americano S.A. Avianca\n        \"aws\", // aws Amazon Registry Services, Inc.\n        \"axa\", // axa AXA SA\n        \"azure\", // azure Microsoft Corporation\n        \"baby\", // baby Johnson &amp; Johnson Services, Inc.\n        \"baidu\", // baidu Baidu, Inc.\n        \"banamex\", // banamex Citigroup Inc.\n        // \"bananarepublic\", // bananarepublic The Gap, Inc.\n        \"band\", // band United TLD Holdco, Ltd\n        \"bank\", // bank fTLD Registry Services, LLC\n        \"bar\", // bar Punto 2012 Sociedad Anonima Promotora de Inversion de Capital Variable\n        \"barcelona\", // barcelona Municipi de Barcelona\n        \"barclaycard\", // barclaycard Barclays Bank PLC\n        \"barclays\", // barclays Barclays Bank PLC\n        \"barefoot\", // barefoot Gallo Vineyards, Inc.\n        \"bargains\", // bargains Half Hallow, LLC\n        \"baseball\", // baseball MLB Advanced Media DH, LLC\n        \"basketball\", // basketball F\u00e9d\u00e9ration Internationale de Basketball (FIBA)\n        \"bauhaus\", // bauhaus Werkhaus GmbH\n        \"bayern\", // bayern Bayern Connect GmbH\n        \"bbc\", // bbc British Broadcasting Corporation\n        \"bbt\", // bbt BB&amp;T Corporation\n        \"bbva\", // bbva BANCO BILBAO VIZCAYA ARGENTARIA, S.A.\n        \"bcg\", // bcg The Boston Consulting Group, Inc.\n        \"bcn\", // bcn Municipi de Barcelona\n        \"beats\", // beats Beats Electronics, LLC\n        \"beauty\", // beauty L&#39;Or\u00e9al\n        \"beer\", // beer Top Level Domain Holdings Limited\n        \"bentley\", // bentley Bentley Motors Limited\n        \"berlin\", // berlin dotBERLIN GmbH &amp; Co. KG\n        \"best\", // best BestTLD Pty Ltd\n        \"bestbuy\", // bestbuy BBY Solutions, Inc.\n        \"bet\", // bet Afilias plc\n        \"bharti\", // bharti Bharti Enterprises (Holding) Private Limited\n        \"bible\", // bible American Bible Society\n        \"bid\", // bid dot Bid Limited\n        \"bike\", // bike Grand Hollow, LLC\n        \"bing\", // bing Microsoft Corporation\n        \"bingo\", // bingo Sand Cedar, LLC\n        \"bio\", // bio STARTING DOT LIMITED\n        \"biz\", // biz Neustar, Inc.\n        \"black\", // black Afilias Limited\n        \"blackfriday\", // blackfriday Uniregistry, Corp.\n//        \"blanco\", // blanco BLANCO GmbH + Co KG\n        \"blockbuster\", // blockbuster Dish DBS Corporation\n        \"blog\", // blog Knock Knock WHOIS There, LLC\n        \"bloomberg\", // bloomberg Bloomberg IP Holdings LLC\n        \"blue\", // blue Afilias Limited\n        \"bms\", // bms Bristol-Myers Squibb Company\n        \"bmw\", // bmw Bayerische Motoren Werke Aktiengesellschaft\n//        \"bnl\", // bnl Banca Nazionale del Lavoro\n        \"bnpparibas\", // bnpparibas BNP Paribas\n        \"boats\", // boats DERBoats, LLC\n        \"boehringer\", // boehringer Boehringer Ingelheim International GmbH\n        \"bofa\", // bofa NMS Services, Inc.\n        \"bom\", // bom N\u00facleo de Informa\u00e7\u00e3o e Coordena\u00e7\u00e3o do Ponto BR - NIC.br\n        \"bond\", // bond Bond University Limited\n        \"boo\", // boo Charleston Road Registry Inc.\n        \"book\", // book Amazon Registry Services, Inc.\n        \"booking\", // booking Booking.com B.V.\n//        \"boots\", // boots THE BOOTS COMPANY PLC\n        \"bosch\", // bosch Robert Bosch GMBH\n        \"bostik\", // bostik Bostik SA\n        \"boston\", // boston Boston TLD Management, LLC\n        \"bot\", // bot Amazon Registry Services, Inc.\n        \"boutique\", // boutique Over Galley, LLC\n        \"box\", // box NS1 Limited\n        \"bradesco\", // bradesco Banco Bradesco S.A.\n        \"bridgestone\", // bridgestone Bridgestone Corporation\n        \"broadway\", // broadway Celebrate Broadway, Inc.\n        \"broker\", // broker DOTBROKER REGISTRY LTD\n        \"brother\", // brother Brother Industries, Ltd.\n        \"brussels\", // brussels DNS.be vzw\n//        \"budapest\", // budapest Top Level Domain Holdings Limited\n//        \"bugatti\", // bugatti Bugatti International SA\n        \"build\", // build Plan Bee LLC\n        \"builders\", // builders Atomic Madison, LLC\n        \"business\", // business Spring Cross, LLC\n        \"buy\", // buy Amazon Registry Services, INC\n        \"buzz\", // buzz DOTSTRATEGY CO.\n        \"bzh\", // bzh Association www.bzh\n        \"cab\", // cab Half Sunset, LLC\n        \"cafe\", // cafe Pioneer Canyon, LLC\n        \"cal\", // cal Charleston Road Registry Inc.\n        \"call\", // call Amazon Registry Services, Inc.\n        \"calvinklein\", // calvinklein PVH gTLD Holdings LLC\n        \"cam\", // cam AC Webconnecting Holding B.V.\n        \"camera\", // camera Atomic Maple, LLC\n        \"camp\", // camp Delta Dynamite, LLC\n//        \"cancerresearch\", // cancerresearch Australian Cancer Research Foundation\n        \"canon\", // canon Canon Inc.\n        \"capetown\", // capetown ZA Central Registry NPC trading as ZA Central Registry\n        \"capital\", // capital Delta Mill, LLC\n        \"capitalone\", // capitalone Capital One Financial Corporation\n        \"car\", // car Cars Registry Limited\n        \"caravan\", // caravan Caravan International, Inc.\n        \"cards\", // cards Foggy Hollow, LLC\n        \"care\", // care Goose Cross, LLC\n        \"career\", // career dotCareer LLC\n        \"careers\", // careers Wild Corner, LLC\n        \"cars\", // cars Uniregistry, Corp.\n//        \"cartier\", // cartier Richemont DNS Inc.\n        \"casa\", // casa Top Level Domain Holdings Limited\n        \"case\", // case CNH Industrial N.V.\n//        \"caseih\", // caseih CNH Industrial N.V.\n        \"cash\", // cash Delta Lake, LLC\n        \"casino\", // casino Binky Sky, LLC\n        \"cat\", // cat Fundacio puntCAT\n        \"catering\", // catering New Falls. LLC\n        \"catholic\", // catholic Pontificium Consilium de Comunicationibus Socialibus (PCCS) (Pontifical Council for Social Communication)\n        \"cba\", // cba COMMONWEALTH BANK OF AUSTRALIA\n        \"cbn\", // cbn The Christian Broadcasting Network, Inc.\n        \"cbre\", // cbre CBRE, Inc.\n        // \"cbs\", // cbs CBS Domains Inc.\n//        \"ceb\", // ceb The Corporate Executive Board Company\n        \"center\", // center Tin Mill, LLC\n        \"ceo\", // ceo CEOTLD Pty Ltd\n        \"cern\", // cern European Organization for Nuclear Research (&quot;CERN&quot;)\n        \"cfa\", // cfa CFA Institute\n        \"cfd\", // cfd DOTCFD REGISTRY LTD\n        \"chanel\", // chanel Chanel International B.V.\n        \"channel\", // channel Charleston Road Registry Inc.\n        \"charity\", // charity Corn Lake, LLC\n        \"chase\", // chase JPMorgan Chase &amp; Co.\n        \"chat\", // chat Sand Fields, LLC\n        \"cheap\", // cheap Sand Cover, LLC\n        \"chintai\", // chintai CHINTAI Corporation\n//        \"chloe\", // chloe Richemont DNS Inc. (Not assigned)\n        \"christmas\", // christmas Uniregistry, Corp.\n        \"chrome\", // chrome Charleston Road Registry Inc.\n//        \"chrysler\", // chrysler FCA US LLC.\n        \"church\", // church Holly Fileds, LLC\n        \"cipriani\", // cipriani Hotel Cipriani Srl\n        \"circle\", // circle Amazon Registry Services, Inc.\n        \"cisco\", // cisco Cisco Technology, Inc.\n        \"citadel\", // citadel Citadel Domain LLC\n        \"citi\", // citi Citigroup Inc.\n        \"citic\", // citic CITIC Group Corporation\n        \"city\", // city Snow Sky, LLC\n        // \"cityeats\", // cityeats Lifestyle Domain Holdings, Inc.\n        \"claims\", // claims Black Corner, LLC\n        \"cleaning\", // cleaning Fox Shadow, LLC\n        \"click\", // click Uniregistry, Corp.\n        \"clinic\", // clinic Goose Park, LLC\n        \"clinique\", // clinique The Est\u00e9e Lauder Companies Inc.\n        \"clothing\", // clothing Steel Lake, LLC\n        \"cloud\", // cloud ARUBA S.p.A.\n        \"club\", // club .CLUB DOMAINS, LLC\n        \"clubmed\", // clubmed Club M\u00e9diterran\u00e9e S.A.\n        \"coach\", // coach Koko Island, LLC\n        \"codes\", // codes Puff Willow, LLC\n        \"coffee\", // coffee Trixy Cover, LLC\n        \"college\", // college XYZ.COM LLC\n        \"cologne\", // cologne NetCologne Gesellschaft f\u00fcr Telekommunikation mbH\n        \"com\", // com VeriSign Global Registry Services\n        // \"comcast\", // comcast Comcast IP Holdings I, LLC\n        \"commbank\", // commbank COMMONWEALTH BANK OF AUSTRALIA\n        \"community\", // community Fox Orchard, LLC\n        \"company\", // company Silver Avenue, LLC\n        \"compare\", // compare iSelect Ltd\n        \"computer\", // computer Pine Mill, LLC\n        \"comsec\", // comsec VeriSign, Inc.\n        \"condos\", // condos Pine House, LLC\n        \"construction\", // construction Fox Dynamite, LLC\n        \"consulting\", // consulting United TLD Holdco, LTD.\n        \"contact\", // contact Top Level Spectrum, Inc.\n        \"contractors\", // contractors Magic Woods, LLC\n        \"cooking\", // cooking Top Level Domain Holdings Limited\n        // \"cookingchannel\", // cookingchannel Lifestyle Domain Holdings, Inc.\n        \"cool\", // cool Koko Lake, LLC\n        \"coop\", // coop DotCooperation LLC\n        \"corsica\", // corsica Collectivit\u00e9 Territoriale de Corse\n        \"country\", // country Top Level Domain Holdings Limited\n        \"coupon\", // coupon Amazon Registry Services, Inc.\n        \"coupons\", // coupons Black Island, LLC\n        \"courses\", // courses OPEN UNIVERSITIES AUSTRALIA PTY LTD\n        \"cpa\", // cpa American Institute of Certified Public Accountants\n        \"credit\", // credit Snow Shadow, LLC\n        \"creditcard\", // creditcard Binky Frostbite, LLC\n        \"creditunion\", // creditunion CUNA Performance Resources, LLC\n        \"cricket\", // cricket dot Cricket Limited\n        \"crown\", // crown Crown Equipment Corporation\n        \"crs\", // crs Federated Co-operatives Limited\n        \"cruise\", // cruise Viking River Cruises (Bermuda) Ltd.\n        \"cruises\", // cruises Spring Way, LLC\n//        \"csc\", // csc Alliance-One Services, Inc.\n        \"cuisinella\", // cuisinella SALM S.A.S.\n        \"cymru\", // cymru Nominet UK\n        \"cyou\", // cyou Beijing Gamease Age Digital Technology Co., Ltd.\n        \"dabur\", // dabur Dabur India Limited\n        \"dad\", // dad Charleston Road Registry Inc.\n        \"dance\", // dance United TLD Holdco Ltd.\n        \"data\", // data Dish DBS Corporation\n        \"date\", // date dot Date Limited\n        \"dating\", // dating Pine Fest, LLC\n        \"datsun\", // datsun NISSAN MOTOR CO., LTD.\n        \"day\", // day Charleston Road Registry Inc.\n        \"dclk\", // dclk Charleston Road Registry Inc.\n        \"dds\", // dds Minds + Machines Group Limited\n        \"deal\", // deal Amazon Registry Services, Inc.\n        \"dealer\", // dealer Dealer Dot Com, Inc.\n        \"deals\", // deals Sand Sunset, LLC\n        \"degree\", // degree United TLD Holdco, Ltd\n        \"delivery\", // delivery Steel Station, LLC\n        \"dell\", // dell Dell Inc.\n        \"deloitte\", // deloitte Deloitte Touche Tohmatsu\n        \"delta\", // delta Delta Air Lines, Inc.\n        \"democrat\", // democrat United TLD Holdco Ltd.\n        \"dental\", // dental Tin Birch, LLC\n        \"dentist\", // dentist United TLD Holdco, Ltd\n        \"desi\", // desi Desi Networks LLC\n        \"design\", // design Top Level Design, LLC\n        \"dev\", // dev Charleston Road Registry Inc.\n        \"dhl\", // dhl Deutsche Post AG\n        \"diamonds\", // diamonds John Edge, LLC\n        \"diet\", // diet Uniregistry, Corp.\n        \"digital\", // digital Dash Park, LLC\n        \"direct\", // direct Half Trail, LLC\n        \"directory\", // directory Extra Madison, LLC\n        \"discount\", // discount Holly Hill, LLC\n        \"discover\", // discover Discover Financial Services\n        \"dish\", // dish Dish DBS Corporation\n        \"diy\", // diy Lifestyle Domain Holdings, Inc.\n        \"dnp\", // dnp Dai Nippon Printing Co., Ltd.\n        \"docs\", // docs Charleston Road Registry Inc.\n        \"doctor\", // doctor Brice Trail, LLC\n//        \"dodge\", // dodge FCA US LLC.\n        \"dog\", // dog Koko Mill, LLC\n//        \"doha\", // doha Communications Regulatory Authority (CRA)\n        \"domains\", // domains Sugar Cross, LLC\n//            \"doosan\", // doosan Doosan Corporation (retired)\n        \"dot\", // dot Dish DBS Corporation\n        \"download\", // download dot Support Limited\n        \"drive\", // drive Charleston Road Registry Inc.\n        \"dtv\", // dtv Dish DBS Corporation\n        \"dubai\", // dubai Dubai Smart Government Department\n//        \"duck\", // duck Johnson Shareholdings, Inc.\n        \"dunlop\", // dunlop The Goodyear Tire &amp; Rubber Company\n//        \"duns\", // duns The Dun &amp; Bradstreet Corporation\n        \"dupont\", // dupont E. I. du Pont de Nemours and Company\n        \"durban\", // durban ZA Central Registry NPC trading as ZA Central Registry\n        \"dvag\", // dvag Deutsche Verm\u00f6gensberatung Aktiengesellschaft DVAG\n        \"dvr\", // dvr Hughes Satellite Systems Corporation\n        \"earth\", // earth Interlink Co., Ltd.\n        \"eat\", // eat Charleston Road Registry Inc.\n        \"eco\", // eco Big Room Inc.\n        \"edeka\", // edeka EDEKA Verband kaufm\u00e4nnischer Genossenschaften e.V.\n        \"edu\", // edu EDUCAUSE\n        \"education\", // education Brice Way, LLC\n        \"email\", // email Spring Madison, LLC\n        \"emerck\", // emerck Merck KGaA\n        \"energy\", // energy Binky Birch, LLC\n        \"engineer\", // engineer United TLD Holdco Ltd.\n        \"engineering\", // engineering Romeo Canyon\n        \"enterprises\", // enterprises Snow Oaks, LLC\n//        \"epost\", // epost Deutsche Post AG\n        \"epson\", // epson Seiko Epson Corporation\n        \"equipment\", // equipment Corn Station, LLC\n        \"ericsson\", // ericsson Telefonaktiebolaget L M Ericsson\n        \"erni\", // erni ERNI Group Holding AG\n        \"esq\", // esq Charleston Road Registry Inc.\n        \"estate\", // estate Trixy Park, LLC\n        // \"esurance\", // esurance Esurance Insurance Company (not assigned as at Version 2020062100)\n        // \"etisalat\", // etisalat Emirates Telecommunic\n        \"eurovision\", // eurovision European Broadcasting Union (EBU)\n        \"eus\", // eus Puntueus Fundazioa\n        \"events\", // events Pioneer Maple, LLC\n//        \"everbank\", // everbank EverBank\n        \"exchange\", // exchange Spring Falls, LLC\n        \"expert\", // expert Magic Pass, LLC\n        \"exposed\", // exposed Victor Beach, LLC\n        \"express\", // express Sea Sunset, LLC\n        \"extraspace\", // extraspace Extra Space Storage LLC\n        \"fage\", // fage Fage International S.A.\n        \"fail\", // fail Atomic Pipe, LLC\n        \"fairwinds\", // fairwinds FairWinds Partners, LLC\n        \"faith\", // faith dot Faith Limited\n        \"family\", // family United TLD Holdco Ltd.\n        \"fan\", // fan Asiamix Digital Ltd\n        \"fans\", // fans Asiamix Digital Limited\n        \"farm\", // farm Just Maple, LLC\n        \"farmers\", // farmers Farmers Insurance Exchange\n        \"fashion\", // fashion Top Level Domain Holdings Limited\n        \"fast\", // fast Amazon Registry Services, Inc.\n        \"fedex\", // fedex Federal Express Corporation\n        \"feedback\", // feedback Top Level Spectrum, Inc.\n        \"ferrari\", // ferrari Fiat Chrysler Automobiles N.V.\n        \"ferrero\", // ferrero Ferrero Trading Lux S.A.\n        // \"fiat\", // fiat Fiat Chrysler Automobiles N.V.\n        \"fidelity\", // fidelity Fidelity Brokerage Services LLC\n        \"fido\", // fido Rogers Communications Canada Inc.\n        \"film\", // film Motion Picture Domain Registry Pty Ltd\n        \"final\", // final N\u00facleo de Informa\u00e7\u00e3o e Coordena\u00e7\u00e3o do Ponto BR - NIC.br\n        \"finance\", // finance Cotton Cypress, LLC\n        \"financial\", // financial Just Cover, LLC\n        \"fire\", // fire Amazon Registry Services, Inc.\n        \"firestone\", // firestone Bridgestone Corporation\n        \"firmdale\", // firmdale Firmdale Holdings Limited\n        \"fish\", // fish Fox Woods, LLC\n        \"fishing\", // fishing Top Level Domain Holdings Limited\n        \"fit\", // fit Minds + Machines Group Limited\n        \"fitness\", // fitness Brice Orchard, LLC\n        \"flickr\", // flickr Yahoo! Domain Services Inc.\n        \"flights\", // flights Fox Station, LLC\n        \"flir\", // flir FLIR Systems, Inc.\n        \"florist\", // florist Half Cypress, LLC\n        \"flowers\", // flowers Uniregistry, Corp.\n//        \"flsmidth\", // flsmidth FLSmidth A/S retired 2016-07-22\n        \"fly\", // fly Charleston Road Registry Inc.\n        \"foo\", // foo Charleston Road Registry Inc.\n        \"food\", // food Lifestyle Domain Holdings, Inc.\n        // \"foodnetwork\", // foodnetwork Lifestyle Domain Holdings, Inc.\n        \"football\", // football Foggy Farms, LLC\n        \"ford\", // ford Ford Motor Company\n        \"forex\", // forex DOTFOREX REGISTRY LTD\n        \"forsale\", // forsale United TLD Holdco, LLC\n        \"forum\", // forum Fegistry, LLC\n        \"foundation\", // foundation John Dale, LLC\n        \"fox\", // fox FOX Registry, LLC\n        \"free\", // free Amazon Registry Services, Inc.\n        \"fresenius\", // fresenius Fresenius Immobilien-Verwaltungs-GmbH\n        \"frl\", // frl FRLregistry B.V.\n        \"frogans\", // frogans OP3FT\n        // \"frontdoor\", // frontdoor Lifestyle Domain Holdings, Inc.\n        \"frontier\", // frontier Frontier Communications Corporation\n        \"ftr\", // ftr Frontier Communications Corporation\n        \"fujitsu\", // fujitsu Fujitsu Limited\n//        \"fujixerox\", // fujixerox Xerox DNHC LLC\n        \"fun\", // fun DotSpace, Inc.\n        \"fund\", // fund John Castle, LLC\n        \"furniture\", // furniture Lone Fields, LLC\n        \"futbol\", // futbol United TLD Holdco, Ltd.\n        \"fyi\", // fyi Silver Tigers, LLC\n        \"gal\", // gal Asociaci\u00f3n puntoGAL\n        \"gallery\", // gallery Sugar House, LLC\n        \"gallo\", // gallo Gallo Vineyards, Inc.\n        \"gallup\", // gallup Gallup, Inc.\n        \"game\", // game Uniregistry, Corp.\n        \"games\", // games United TLD Holdco Ltd.\n        \"gap\", // gap The Gap, Inc.\n        \"garden\", // garden Top Level Domain Holdings Limited\n        \"gay\", // gay Top Level Design, LLC\n        \"gbiz\", // gbiz Charleston Road Registry Inc.\n        \"gdn\", // gdn Joint Stock Company \"Navigation-information systems\"\n        \"gea\", // gea GEA Group Aktiengesellschaft\n        \"gent\", // gent COMBELL GROUP NV/SA\n        \"genting\", // genting Resorts World Inc. Pte. Ltd.\n        \"george\", // george Wal-Mart Stores, Inc.\n        \"ggee\", // ggee GMO Internet, Inc.\n        \"gift\", // gift Uniregistry, Corp.\n        \"gifts\", // gifts Goose Sky, LLC\n        \"gives\", // gives United TLD Holdco Ltd.\n        \"giving\", // giving Giving Limited\n//        \"glade\", // glade Johnson Shareholdings, Inc.\n        \"glass\", // glass Black Cover, LLC\n        \"gle\", // gle Charleston Road Registry Inc.\n        \"global\", // global Dot Global Domain Registry Limited\n        \"globo\", // globo Globo Comunica\u00e7\u00e3o e Participa\u00e7\u00f5es S.A\n        \"gmail\", // gmail Charleston Road Registry Inc.\n        \"gmbh\", // gmbh Extra Dynamite, LLC\n        \"gmo\", // gmo GMO Internet, Inc.\n        \"gmx\", // gmx 1&amp;1 Mail &amp; Media GmbH\n        \"godaddy\", // godaddy Go Daddy East, LLC\n        \"gold\", // gold June Edge, LLC\n        \"goldpoint\", // goldpoint YODOBASHI CAMERA CO.,LTD.\n        \"golf\", // golf Lone Falls, LLC\n        \"goo\", // goo NTT Resonant Inc.\n//        \"goodhands\", // goodhands Allstate Fire and Casualty Insurance Company\n        \"goodyear\", // goodyear The Goodyear Tire &amp; Rubber Company\n        \"goog\", // goog Charleston Road Registry Inc.\n        \"google\", // google Charleston Road Registry Inc.\n        \"gop\", // gop Republican State Leadership Committee, Inc.\n        \"got\", // got Amazon Registry Services, Inc.\n        \"gov\", // gov General Services Administration Attn: QTDC, 2E08 (.gov Domain Registration)\n        \"grainger\", // grainger Grainger Registry Services, LLC\n        \"graphics\", // graphics Over Madison, LLC\n        \"gratis\", // gratis Pioneer Tigers, LLC\n        \"green\", // green Afilias Limited\n        \"gripe\", // gripe Corn Sunset, LLC\n        \"grocery\", // grocery Wal-Mart Stores, Inc.\n        \"group\", // group Romeo Town, LLC\n        // \"guardian\", // guardian The Guardian Life Insurance Company of America\n        \"gucci\", // gucci Guccio Gucci S.p.a.\n        \"guge\", // guge Charleston Road Registry Inc.\n        \"guide\", // guide Snow Moon, LLC\n        \"guitars\", // guitars Uniregistry, Corp.\n        \"guru\", // guru Pioneer Cypress, LLC\n        \"hair\", // hair L&#39;Oreal\n        \"hamburg\", // hamburg Hamburg Top-Level-Domain GmbH\n        \"hangout\", // hangout Charleston Road Registry Inc.\n        \"haus\", // haus United TLD Holdco, LTD.\n        \"hbo\", // hbo HBO Registry Services, Inc.\n        \"hdfc\", // hdfc HOUSING DEVELOPMENT FINANCE CORPORATION LIMITED\n        \"hdfcbank\", // hdfcbank HDFC Bank Limited\n        \"health\", // health DotHealth, LLC\n        \"healthcare\", // healthcare Silver Glen, LLC\n        \"help\", // help Uniregistry, Corp.\n        \"helsinki\", // helsinki City of Helsinki\n        \"here\", // here Charleston Road Registry Inc.\n        \"hermes\", // hermes Hermes International\n        // \"hgtv\", // hgtv Lifestyle Domain Holdings, Inc.\n        \"hiphop\", // hiphop Uniregistry, Corp.\n        \"hisamitsu\", // hisamitsu Hisamitsu Pharmaceutical Co.,Inc.\n        \"hitachi\", // hitachi Hitachi, Ltd.\n        \"hiv\", // hiv dotHIV gemeinnuetziger e.V.\n        \"hkt\", // hkt PCCW-HKT DataCom Services Limited\n        \"hockey\", // hockey Half Willow, LLC\n        \"holdings\", // holdings John Madison, LLC\n        \"holiday\", // holiday Goose Woods, LLC\n        \"homedepot\", // homedepot Homer TLC, Inc.\n        \"homegoods\", // homegoods The TJX Companies, Inc.\n        \"homes\", // homes DERHomes, LLC\n        \"homesense\", // homesense The TJX Companies, Inc.\n        \"honda\", // honda Honda Motor Co., Ltd.\n//        \"honeywell\", // honeywell Honeywell GTLD LLC\n        \"horse\", // horse Top Level Domain Holdings Limited\n        \"hospital\", // hospital Ruby Pike, LLC\n        \"host\", // host DotHost Inc.\n        \"hosting\", // hosting Uniregistry, Corp.\n        \"hot\", // hot Amazon Registry Services, Inc.\n        // \"hoteles\", // hoteles Travel Reservations SRL\n        \"hotels\", // hotels Booking.com B.V.\n        \"hotmail\", // hotmail Microsoft Corporation\n        \"house\", // house Sugar Park, LLC\n        \"how\", // how Charleston Road Registry Inc.\n        \"hsbc\", // hsbc HSBC Holdings PLC\n//        \"htc\", // htc HTC corporation (Not assigned)\n        \"hughes\", // hughes Hughes Satellite Systems Corporation\n        \"hyatt\", // hyatt Hyatt GTLD, L.L.C.\n        \"hyundai\", // hyundai Hyundai Motor Company\n        \"ibm\", // ibm International Business Machines Corporation\n        \"icbc\", // icbc Industrial and Commercial Bank of China Limited\n        \"ice\", // ice IntercontinentalExchange, Inc.\n        \"icu\", // icu One.com A/S\n        \"ieee\", // ieee IEEE Global LLC\n        \"ifm\", // ifm ifm electronic gmbh\n//        \"iinet\", // iinet Connect West Pty. Ltd. (Retired)\n        \"ikano\", // ikano Ikano S.A.\n        \"imamat\", // imamat Fondation Aga Khan (Aga Khan Foundation)\n        \"imdb\", // imdb Amazon Registry Services, Inc.\n        \"immo\", // immo Auburn Bloom, LLC\n        \"immobilien\", // immobilien United TLD Holdco Ltd.\n        \"inc\", // inc Intercap Holdings Inc.\n        \"industries\", // industries Outer House, LLC\n        \"infiniti\", // infiniti NISSAN MOTOR CO., LTD.\n        \"info\", // info Afilias Limited\n        \"ing\", // ing Charleston Road Registry Inc.\n        \"ink\", // ink Top Level Design, LLC\n        \"institute\", // institute Outer Maple, LLC\n        \"insurance\", // insurance fTLD Registry Services LLC\n        \"insure\", // insure Pioneer Willow, LLC\n        \"int\", // int Internet Assigned Numbers Authority\n//        \"intel\", // intel Intel Corporation\n        \"international\", // international Wild Way, LLC\n        \"intuit\", // intuit Intuit Administrative Services, Inc.\n        \"investments\", // investments Holly Glen, LLC\n        \"ipiranga\", // ipiranga Ipiranga Produtos de Petroleo S.A.\n        \"irish\", // irish Dot-Irish LLC\n//        \"iselect\", // iselect iSelect Ltd\n        \"ismaili\", // ismaili Fondation Aga Khan (Aga Khan Foundation)\n        \"ist\", // ist Istanbul Metropolitan Municipality\n        \"istanbul\", // istanbul Istanbul Metropolitan Municipality / Medya A.S.\n        \"itau\", // itau Itau Unibanco Holding S.A.\n        \"itv\", // itv ITV Services Limited\n//        \"iveco\", // iveco CNH Industrial N.V.\n//        \"iwc\", // iwc Richemont DNS Inc.\n        \"jaguar\", // jaguar Jaguar Land Rover Ltd\n        \"java\", // java Oracle Corporation\n        \"jcb\", // jcb JCB Co., Ltd.\n//        \"jcp\", // jcp JCP Media, Inc.\n        \"jeep\", // jeep FCA US LLC.\n        \"jetzt\", // jetzt New TLD Company AB\n        \"jewelry\", // jewelry Wild Bloom, LLC\n        \"jio\", // jio Affinity Names, Inc.\n//        \"jlc\", // jlc Richemont DNS Inc.\n        \"jll\", // jll Jones Lang LaSalle Incorporated\n        \"jmp\", // jmp Matrix IP LLC\n        \"jnj\", // jnj Johnson &amp; Johnson Services, Inc.\n        \"jobs\", // jobs Employ Media LLC\n        \"joburg\", // joburg ZA Central Registry NPC trading as ZA Central Registry\n        \"jot\", // jot Amazon Registry Services, Inc.\n        \"joy\", // joy Amazon Registry Services, Inc.\n        \"jpmorgan\", // jpmorgan JPMorgan Chase &amp; Co.\n        \"jprs\", // jprs Japan Registry Services Co., Ltd.\n        \"juegos\", // juegos Uniregistry, Corp.\n        \"juniper\", // juniper JUNIPER NETWORKS, INC.\n        \"kaufen\", // kaufen United TLD Holdco Ltd.\n        \"kddi\", // kddi KDDI CORPORATION\n        \"kerryhotels\", // kerryhotels Kerry Trading Co. Limited\n        \"kerrylogistics\", // kerrylogistics Kerry Trading Co. Limited\n        \"kerryproperties\", // kerryproperties Kerry Trading Co. Limited\n        \"kfh\", // kfh Kuwait Finance House\n        \"kia\", // kia KIA MOTORS CORPORATION\n        \"kids\", // kids DotKids Foundation Limited\n        \"kim\", // kim Afilias Limited\n        // \"kinder\", // kinder Ferrero Trading Lux S.A.\n        \"kindle\", // kindle Amazon Registry Services, Inc.\n        \"kitchen\", // kitchen Just Goodbye, LLC\n        \"kiwi\", // kiwi DOT KIWI LIMITED\n        \"koeln\", // koeln NetCologne Gesellschaft f\u00fcr Telekommunikation mbH\n        \"komatsu\", // komatsu Komatsu Ltd.\n        \"kosher\", // kosher Kosher Marketing Assets LLC\n        \"kpmg\", // kpmg KPMG International Cooperative (KPMG International Genossenschaft)\n        \"kpn\", // kpn Koninklijke KPN N.V.\n        \"krd\", // krd KRG Department of Information Technology\n        \"kred\", // kred KredTLD Pty Ltd\n        \"kuokgroup\", // kuokgroup Kerry Trading Co. Limited\n        \"kyoto\", // kyoto Academic Institution: Kyoto Jyoho Gakuen\n        \"lacaixa\", // lacaixa CAIXA D&#39;ESTALVIS I PENSIONS DE BARCELONA\n//        \"ladbrokes\", // ladbrokes LADBROKES INTERNATIONAL PLC\n        \"lamborghini\", // lamborghini Automobili Lamborghini S.p.A.\n        \"lamer\", // lamer The Est\u00e9e Lauder Companies Inc.\n        \"lancaster\", // lancaster LANCASTER\n        // \"lancia\", // lancia Fiat Chrysler Automobiles N.V.\n//        \"lancome\", // lancome L&#39;Or\u00e9al\n        \"land\", // land Pine Moon, LLC\n        \"landrover\", // landrover Jaguar Land Rover Ltd\n        \"lanxess\", // lanxess LANXESS Corporation\n        \"lasalle\", // lasalle Jones Lang LaSalle Incorporated\n        \"lat\", // lat ECOM-LAC Federaci\u00f3n de Latinoam\u00e9rica y el Caribe para Internet y el Comercio Electr\u00f3nico\n        \"latino\", // latino Dish DBS Corporation\n        \"latrobe\", // latrobe La Trobe University\n        \"law\", // law Minds + Machines Group Limited\n        \"lawyer\", // lawyer United TLD Holdco, Ltd\n        \"lds\", // lds IRI Domain Management, LLC\n        \"lease\", // lease Victor Trail, LLC\n        \"leclerc\", // leclerc A.C.D. LEC Association des Centres Distributeurs Edouard Leclerc\n        \"lefrak\", // lefrak LeFrak Organization, Inc.\n        \"legal\", // legal Blue Falls, LLC\n        \"lego\", // lego LEGO Juris A/S\n        \"lexus\", // lexus TOYOTA MOTOR CORPORATION\n        \"lgbt\", // lgbt Afilias Limited\n//        \"liaison\", // liaison Liaison Technologies, Incorporated\n        \"lidl\", // lidl Schwarz Domains und Services GmbH &amp; Co. KG\n        \"life\", // life Trixy Oaks, LLC\n        \"lifeinsurance\", // lifeinsurance American Council of Life Insurers\n        \"lifestyle\", // lifestyle Lifestyle Domain Holdings, Inc.\n        \"lighting\", // lighting John McCook, LLC\n        \"like\", // like Amazon Registry Services, Inc.\n        \"lilly\", // lilly Eli Lilly and Company\n        \"limited\", // limited Big Fest, LLC\n        \"limo\", // limo Hidden Frostbite, LLC\n        \"lincoln\", // lincoln Ford Motor Company\n        // \"linde\", // linde Linde Aktiengesellschaft\n        \"link\", // link Uniregistry, Corp.\n        \"lipsy\", // lipsy Lipsy Ltd\n        \"live\", // live United TLD Holdco Ltd.\n        \"living\", // living Lifestyle Domain Holdings, Inc.\n//        \"lixil\", // lixil LIXIL Group Corporation\n        \"llc\", // llc Afilias plc\n        \"llp\", // llp Dot Registry LLC\n        \"loan\", // loan dot Loan Limited\n        \"loans\", // loans June Woods, LLC\n        \"locker\", // locker Dish DBS Corporation\n        \"locus\", // locus Locus Analytics LLC\n//        \"loft\", // loft Annco, Inc.\n        \"lol\", // lol Uniregistry, Corp.\n        \"london\", // london Dot London Domains Limited\n        \"lotte\", // lotte Lotte Holdings Co., Ltd.\n        \"lotto\", // lotto Afilias Limited\n        \"love\", // love Merchant Law Group LLP\n        \"lpl\", // lpl LPL Holdings, Inc.\n        \"lplfinancial\", // lplfinancial LPL Holdings, Inc.\n        \"ltd\", // ltd Over Corner, LLC\n        \"ltda\", // ltda InterNetX Corp.\n        \"lundbeck\", // lundbeck H. Lundbeck A/S\n//        \"lupin\", // lupin LUPIN LIMITED\n        \"luxe\", // luxe Top Level Domain Holdings Limited\n        \"luxury\", // luxury Luxury Partners LLC\n        // \"macys\", // macys Macys, Inc.\n        \"madrid\", // madrid Comunidad de Madrid\n        \"maif\", // maif Mutuelle Assurance Instituteur France (MAIF)\n        \"maison\", // maison Victor Frostbite, LLC\n        \"makeup\", // makeup L&#39;Or\u00e9al\n        \"man\", // man MAN SE\n        \"management\", // management John Goodbye, LLC\n        \"mango\", // mango PUNTO FA S.L.\n        \"map\", // map Charleston Road Registry Inc.\n        \"market\", // market Unitied TLD Holdco, Ltd\n        \"marketing\", // marketing Fern Pass, LLC\n        \"markets\", // markets DOTMARKETS REGISTRY LTD\n        \"marriott\", // marriott Marriott Worldwide Corporation\n        \"marshalls\", // marshalls The TJX Companies, Inc.\n        // \"maserati\", // maserati Fiat Chrysler Automobiles N.V.\n        \"mattel\", // mattel Mattel Sites, Inc.\n        \"mba\", // mba Lone Hollow, LLC\n//        \"mcd\", // mcd McDonald\u2019s Corporation (Not assigned)\n//        \"mcdonalds\", // mcdonalds McDonald\u2019s Corporation (Not assigned)\n        \"mckinsey\", // mckinsey McKinsey Holdings, Inc.\n        \"med\", // med Medistry LLC\n        \"media\", // media Grand Glen, LLC\n        \"meet\", // meet Afilias Limited\n        \"melbourne\", // melbourne The Crown in right of the State of Victoria, represented by its Department of State Development, Business and Innovation\n        \"meme\", // meme Charleston Road Registry Inc.\n        \"memorial\", // memorial Dog Beach, LLC\n        \"men\", // men Exclusive Registry Limited\n        \"menu\", // menu Wedding TLD2, LLC\n//        \"meo\", // meo PT Comunicacoes S.A.\n        \"merckmsd\", // merckmsd MSD Registry Holdings, Inc.\n//        \"metlife\", // metlife MetLife Services and Solutions, LLC\n        \"miami\", // miami Top Level Domain Holdings Limited\n        \"microsoft\", // microsoft Microsoft Corporation\n        \"mil\", // mil DoD Network Information Center\n        \"mini\", // mini Bayerische Motoren Werke Aktiengesellschaft\n        \"mint\", // mint Intuit Administrative Services, Inc.\n        \"mit\", // mit Massachusetts Institute of Technology\n        \"mitsubishi\", // mitsubishi Mitsubishi Corporation\n        \"mlb\", // mlb MLB Advanced Media DH, LLC\n        \"mls\", // mls The Canadian Real Estate Association\n        \"mma\", // mma MMA IARD\n        \"mobi\", // mobi Afilias Technologies Limited dba dotMobi\n        \"mobile\", // mobile Dish DBS Corporation\n//        \"mobily\", // mobily GreenTech Consultancy Company W.L.L.\n        \"moda\", // moda United TLD Holdco Ltd.\n        \"moe\", // moe Interlink Co., Ltd.\n        \"moi\", // moi Amazon Registry Services, Inc.\n        \"mom\", // mom Uniregistry, Corp.\n        \"monash\", // monash Monash University\n        \"money\", // money Outer McCook, LLC\n        \"monster\", // monster Monster Worldwide, Inc.\n//        \"montblanc\", // montblanc Richemont DNS Inc. (Not assigned)\n//        \"mopar\", // mopar FCA US LLC.\n        \"mormon\", // mormon IRI Domain Management, LLC (&quot;Applicant&quot;)\n        \"mortgage\", // mortgage United TLD Holdco, Ltd\n        \"moscow\", // moscow Foundation for Assistance for Internet Technologies and Infrastructure Development (FAITID)\n        \"moto\", // moto Motorola Trademark Holdings, LLC\n        \"motorcycles\", // motorcycles DERMotorcycles, LLC\n        \"mov\", // mov Charleston Road Registry Inc.\n        \"movie\", // movie New Frostbite, LLC\n//        \"movistar\", // movistar Telef\u00f3nica S.A.\n        \"msd\", // msd MSD Registry Holdings, Inc.\n        \"mtn\", // mtn MTN Dubai Limited\n//        \"mtpc\", // mtpc Mitsubishi Tanabe Pharma Corporation (Retired)\n        \"mtr\", // mtr MTR Corporation Limited\n        \"museum\", // museum Museum Domain Management Association\n        \"music\", // music DotMusic Limited\n        // \"mutual\", // mutual Northwestern Mutual MU TLD Registry, LLC\n//        \"mutuelle\", // mutuelle F\u00e9d\u00e9ration Nationale de la Mutualit\u00e9 Fran\u00e7aise (Retired)\n        \"nab\", // nab National Australia Bank Limited\n//        \"nadex\", // nadex Nadex Domains, Inc\n        \"nagoya\", // nagoya GMO Registry, Inc.\n        \"name\", // name VeriSign Information Services, Inc.\n//        \"nationwide\", // nationwide Nationwide Mutual Insurance Company\n        \"natura\", // natura NATURA COSM\u00c9TICOS S.A.\n        \"navy\", // navy United TLD Holdco Ltd.\n        \"nba\", // nba NBA REGISTRY, LLC\n        \"nec\", // nec NEC Corporation\n        \"net\", // net VeriSign Global Registry Services\n        \"netbank\", // netbank COMMONWEALTH BANK OF AUSTRALIA\n        \"netflix\", // netflix Netflix, Inc.\n        \"network\", // network Trixy Manor, LLC\n        \"neustar\", // neustar NeuStar, Inc.\n        \"new\", // new Charleston Road Registry Inc.\n//        \"newholland\", // newholland CNH Industrial N.V.\n        \"news\", // news United TLD Holdco Ltd.\n        \"next\", // next Next plc\n        \"nextdirect\", // nextdirect Next plc\n        \"nexus\", // nexus Charleston Road Registry Inc.\n        \"nfl\", // nfl NFL Reg Ops LLC\n        \"ngo\", // ngo Public Interest Registry\n        \"nhk\", // nhk Japan Broadcasting Corporation (NHK)\n        \"nico\", // nico DWANGO Co., Ltd.\n        \"nike\", // nike NIKE, Inc.\n        \"nikon\", // nikon NIKON CORPORATION\n        \"ninja\", // ninja United TLD Holdco Ltd.\n        \"nissan\", // nissan NISSAN MOTOR CO., LTD.\n        \"nissay\", // nissay Nippon Life Insurance Company\n        \"nokia\", // nokia Nokia Corporation\n        // \"northwesternmutual\", // northwesternmutual Northwestern Mutual Registry, LLC\n        \"norton\", // norton Symantec Corporation\n        \"now\", // now Amazon Registry Services, Inc.\n        \"nowruz\", // nowruz Asia Green IT System Bilgisayar San. ve Tic. Ltd. Sti.\n        \"nowtv\", // nowtv Starbucks (HK) Limited\n        \"nra\", // nra NRA Holdings Company, INC.\n        \"nrw\", // nrw Minds + Machines GmbH\n        \"ntt\", // ntt NIPPON TELEGRAPH AND TELEPHONE CORPORATION\n        \"nyc\", // nyc The City of New York by and through the New York City Department of Information Technology &amp; Telecommunications\n        \"obi\", // obi OBI Group Holding SE &amp; Co. KGaA\n        \"observer\", // observer Top Level Spectrum, Inc.\n//        \"off\", // off Johnson Shareholdings, Inc.\n        \"office\", // office Microsoft Corporation\n        \"okinawa\", // okinawa BusinessRalliart inc.\n        \"olayan\", // olayan Crescent Holding GmbH\n        \"olayangroup\", // olayangroup Crescent Holding GmbH\n        // \"oldnavy\", // oldnavy The Gap, Inc.\n        \"ollo\", // ollo Dish DBS Corporation\n        \"omega\", // omega The Swatch Group Ltd\n        \"one\", // one One.com A/S\n        \"ong\", // ong Public Interest Registry\n        \"onl\", // onl I-REGISTRY Ltd., Niederlassung Deutschland\n        \"online\", // online DotOnline Inc.\n//        \"onyourside\", // onyourside Nationwide Mutual Insurance Company\n        \"ooo\", // ooo INFIBEAM INCORPORATION LIMITED\n        \"open\", // open American Express Travel Related Services Company, Inc.\n        \"oracle\", // oracle Oracle Corporation\n        \"orange\", // orange Orange Brand Services Limited\n        \"org\", // org Public Interest Registry (PIR)\n        \"organic\", // organic Afilias Limited\n//        \"orientexpress\", // orientexpress Orient Express (retired 2017-04-11)\n        \"origins\", // origins The Est\u00e9e Lauder Companies Inc.\n        \"osaka\", // osaka Interlink Co., Ltd.\n        \"otsuka\", // otsuka Otsuka Holdings Co., Ltd.\n        \"ott\", // ott Dish DBS Corporation\n        \"ovh\", // ovh OVH SAS\n        \"page\", // page Charleston Road Registry Inc.\n//        \"pamperedchef\", // pamperedchef The Pampered Chef, Ltd. (Not assigned)\n        \"panasonic\", // panasonic Panasonic Corporation\n//        \"panerai\", // panerai Richemont DNS Inc.\n        \"paris\", // paris City of Paris\n        \"pars\", // pars Asia Green IT System Bilgisayar San. ve Tic. Ltd. Sti.\n        \"partners\", // partners Magic Glen, LLC\n        \"parts\", // parts Sea Goodbye, LLC\n        \"party\", // party Blue Sky Registry Limited\n        // \"passagens\", // passagens Travel Reservations SRL\n        \"pay\", // pay Amazon Registry Services, Inc.\n        \"pccw\", // pccw PCCW Enterprises Limited\n        \"pet\", // pet Afilias plc\n        \"pfizer\", // pfizer Pfizer Inc.\n        \"pharmacy\", // pharmacy National Association of Boards of Pharmacy\n        \"phd\", // phd Charleston Road Registry Inc.\n        \"philips\", // philips Koninklijke Philips N.V.\n        \"phone\", // phone Dish DBS Corporation\n        \"photo\", // photo Uniregistry, Corp.\n        \"photography\", // photography Sugar Glen, LLC\n        \"photos\", // photos Sea Corner, LLC\n        \"physio\", // physio PhysBiz Pty Ltd\n//        \"piaget\", // piaget Richemont DNS Inc.\n        \"pics\", // pics Uniregistry, Corp.\n        \"pictet\", // pictet Pictet Europe S.A.\n        \"pictures\", // pictures Foggy Sky, LLC\n        \"pid\", // pid Top Level Spectrum, Inc.\n        \"pin\", // pin Amazon Registry Services, Inc.\n        \"ping\", // ping Ping Registry Provider, Inc.\n        \"pink\", // pink Afilias Limited\n        \"pioneer\", // pioneer Pioneer Corporation\n        \"pizza\", // pizza Foggy Moon, LLC\n        \"place\", // place Snow Galley, LLC\n        \"play\", // play Charleston Road Registry Inc.\n        \"playstation\", // playstation Sony Computer Entertainment Inc.\n        \"plumbing\", // plumbing Spring Tigers, LLC\n        \"plus\", // plus Sugar Mill, LLC\n        \"pnc\", // pnc PNC Domain Co., LLC\n        \"pohl\", // pohl Deutsche Verm\u00f6gensberatung Aktiengesellschaft DVAG\n        \"poker\", // poker Afilias Domains No. 5 Limited\n        \"politie\", // politie Politie Nederland\n        \"porn\", // porn ICM Registry PN LLC\n        \"post\", // post Universal Postal Union\n        \"pramerica\", // pramerica Prudential Financial, Inc.\n        \"praxi\", // praxi Praxi S.p.A.\n        \"press\", // press DotPress Inc.\n        \"prime\", // prime Amazon Registry Services, Inc.\n        \"pro\", // pro Registry Services Corporation dba RegistryPro\n        \"prod\", // prod Charleston Road Registry Inc.\n        \"productions\", // productions Magic Birch, LLC\n        \"prof\", // prof Charleston Road Registry Inc.\n        \"progressive\", // progressive Progressive Casualty Insurance Company\n        \"promo\", // promo Afilias plc\n        \"properties\", // properties Big Pass, LLC\n        \"property\", // property Uniregistry, Corp.\n        \"protection\", // protection XYZ.COM LLC\n        \"pru\", // pru Prudential Financial, Inc.\n        \"prudential\", // prudential Prudential Financial, Inc.\n        \"pub\", // pub United TLD Holdco Ltd.\n        \"pwc\", // pwc PricewaterhouseCoopers LLP\n        \"qpon\", // qpon dotCOOL, Inc.\n        \"quebec\", // quebec PointQu\u00e9bec Inc\n        \"quest\", // quest Quest ION Limited\n//        \"qvc\", // qvc QVC, Inc.\n        \"racing\", // racing Premier Registry Limited\n        \"radio\", // radio European Broadcasting Union (EBU)\n//        \"raid\", // raid Johnson Shareholdings, Inc.\n        \"read\", // read Amazon Registry Services, Inc.\n        \"realestate\", // realestate dotRealEstate LLC\n        \"realtor\", // realtor Real Estate Domains LLC\n        \"realty\", // realty Fegistry, LLC\n        \"recipes\", // recipes Grand Island, LLC\n        \"red\", // red Afilias Limited\n        \"redstone\", // redstone Redstone Haute Couture Co., Ltd.\n        \"redumbrella\", // redumbrella Travelers TLD, LLC\n        \"rehab\", // rehab United TLD Holdco Ltd.\n        \"reise\", // reise Foggy Way, LLC\n        \"reisen\", // reisen New Cypress, LLC\n        \"reit\", // reit National Association of Real Estate Investment Trusts, Inc.\n        \"reliance\", // reliance Reliance Industries Limited\n        \"ren\", // ren Beijing Qianxiang Wangjing Technology Development Co., Ltd.\n        \"rent\", // rent XYZ.COM LLC\n        \"rentals\", // rentals Big Hollow,LLC\n        \"repair\", // repair Lone Sunset, LLC\n        \"report\", // report Binky Glen, LLC\n        \"republican\", // republican United TLD Holdco Ltd.\n        \"rest\", // rest Punto 2012 Sociedad Anonima Promotora de Inversion de Capital Variable\n        \"restaurant\", // restaurant Snow Avenue, LLC\n        \"review\", // review dot Review Limited\n        \"reviews\", // reviews United TLD Holdco, Ltd.\n        \"rexroth\", // rexroth Robert Bosch GMBH\n        \"rich\", // rich I-REGISTRY Ltd., Niederlassung Deutschland\n        \"richardli\", // richardli Pacific Century Asset Management (HK) Limited\n        \"ricoh\", // ricoh Ricoh Company, Ltd.\n        // \"rightathome\", // rightathome Johnson Shareholdings, Inc. (retired 2020-07-31)\n        \"ril\", // ril Reliance Industries Limited\n        \"rio\", // rio Empresa Municipal de Inform\u00e1tica SA - IPLANRIO\n        \"rip\", // rip United TLD Holdco Ltd.\n//        \"rmit\", // rmit Royal Melbourne Institute of Technology\n        // \"rocher\", // rocher Ferrero Trading Lux S.A.\n        \"rocks\", // rocks United TLD Holdco, LTD.\n        \"rodeo\", // rodeo Top Level Domain Holdings Limited\n        \"rogers\", // rogers Rogers Communications Canada Inc.\n        \"room\", // room Amazon Registry Services, Inc.\n        \"rsvp\", // rsvp Charleston Road Registry Inc.\n        \"rugby\", // rugby World Rugby Strategic Developments Limited\n        \"ruhr\", // ruhr regiodot GmbH &amp; Co. KG\n        \"run\", // run Snow Park, LLC\n        \"rwe\", // rwe RWE AG\n        \"ryukyu\", // ryukyu BusinessRalliart inc.\n        \"saarland\", // saarland dotSaarland GmbH\n        \"safe\", // safe Amazon Registry Services, Inc.\n        \"safety\", // safety Safety Registry Services, LLC.\n        \"sakura\", // sakura SAKURA Internet Inc.\n        \"sale\", // sale United TLD Holdco, Ltd\n        \"salon\", // salon Outer Orchard, LLC\n        \"samsclub\", // samsclub Wal-Mart Stores, Inc.\n        \"samsung\", // samsung SAMSUNG SDS CO., LTD\n        \"sandvik\", // sandvik Sandvik AB\n        \"sandvikcoromant\", // sandvikcoromant Sandvik AB\n        \"sanofi\", // sanofi Sanofi\n        \"sap\", // sap SAP AG\n//        \"sapo\", // sapo PT Comunicacoes S.A.\n        \"sarl\", // sarl Delta Orchard, LLC\n        \"sas\", // sas Research IP LLC\n        \"save\", // save Amazon Registry Services, Inc.\n        \"saxo\", // saxo Saxo Bank A/S\n        \"sbi\", // sbi STATE BANK OF INDIA\n        \"sbs\", // sbs SPECIAL BROADCASTING SERVICE CORPORATION\n        // \"sca\", // sca SVENSKA CELLULOSA AKTIEBOLAGET SCA (publ)\n        \"scb\", // scb The Siam Commercial Bank Public Company Limited (&quot;SCB&quot;)\n        \"schaeffler\", // schaeffler Schaeffler Technologies AG &amp; Co. KG\n        \"schmidt\", // schmidt SALM S.A.S.\n        \"scholarships\", // scholarships Scholarships.com, LLC\n        \"school\", // school Little Galley, LLC\n        \"schule\", // schule Outer Moon, LLC\n        \"schwarz\", // schwarz Schwarz Domains und Services GmbH &amp; Co. KG\n        \"science\", // science dot Science Limited\n//        \"scjohnson\", // scjohnson Johnson Shareholdings, Inc.\n        // \"scor\", // scor SCOR SE (not assigned as at Version 2020062100)\n        \"scot\", // scot Dot Scot Registry Limited\n        \"search\", // search Charleston Road Registry Inc.\n        \"seat\", // seat SEAT, S.A. (Sociedad Unipersonal)\n        \"secure\", // secure Amazon Registry Services, Inc.\n        \"security\", // security XYZ.COM LLC\n        \"seek\", // seek Seek Limited\n        \"select\", // select iSelect Ltd\n        \"sener\", // sener Sener Ingenier\u00eda y Sistemas, S.A.\n        \"services\", // services Fox Castle, LLC\n//        \"ses\", // ses SES\n        \"seven\", // seven Seven West Media Ltd\n        \"sew\", // sew SEW-EURODRIVE GmbH &amp; Co KG\n        \"sex\", // sex ICM Registry SX LLC\n        \"sexy\", // sexy Uniregistry, Corp.\n        \"sfr\", // sfr Societe Francaise du Radiotelephone - SFR\n        \"shangrila\", // shangrila Shangri\u2010La International Hotel Management Limited\n        \"sharp\", // sharp Sharp Corporation\n        \"shaw\", // shaw Shaw Cablesystems G.P.\n        \"shell\", // shell Shell Information Technology International Inc\n        \"shia\", // shia Asia Green IT System Bilgisayar San. ve Tic. Ltd. Sti.\n        \"shiksha\", // shiksha Afilias Limited\n        \"shoes\", // shoes Binky Galley, LLC\n        \"shop\", // shop GMO Registry, Inc.\n        \"shopping\", // shopping Over Keep, LLC\n        \"shouji\", // shouji QIHOO 360 TECHNOLOGY CO. LTD.\n        \"show\", // show Snow Beach, LLC\n        // \"showtime\", // showtime CBS Domains Inc.\n//        \"shriram\", // shriram Shriram Capital Ltd.\n        \"silk\", // silk Amazon Registry Services, Inc.\n        \"sina\", // sina Sina Corporation\n        \"singles\", // singles Fern Madison, LLC\n        \"site\", // site DotSite Inc.\n        \"ski\", // ski STARTING DOT LIMITED\n        \"skin\", // skin L&#39;Or\u00e9al\n        \"sky\", // sky Sky International AG\n        \"skype\", // skype Microsoft Corporation\n        \"sling\", // sling Hughes Satellite Systems Corporation\n        \"smart\", // smart Smart Communications, Inc. (SMART)\n        \"smile\", // smile Amazon Registry Services, Inc.\n        \"sncf\", // sncf SNCF (Soci\u00e9t\u00e9 Nationale des Chemins de fer Francais)\n        \"soccer\", // soccer Foggy Shadow, LLC\n        \"social\", // social United TLD Holdco Ltd.\n        \"softbank\", // softbank SoftBank Group Corp.\n        \"software\", // software United TLD Holdco, Ltd\n        \"sohu\", // sohu Sohu.com Limited\n        \"solar\", // solar Ruby Town, LLC\n        \"solutions\", // solutions Silver Cover, LLC\n        \"song\", // song Amazon Registry Services, Inc.\n        \"sony\", // sony Sony Corporation\n        \"soy\", // soy Charleston Road Registry Inc.\n        \"spa\", // spa Asia Spa and Wellness Promotion Council Limited\n        \"space\", // space DotSpace Inc.\n//        \"spiegel\", // spiegel SPIEGEL-Verlag Rudolf Augstein GmbH &amp; Co. KG\n        \"sport\", // sport Global Association of International Sports Federations (GAISF)\n        \"spot\", // spot Amazon Registry Services, Inc.\n//        \"spreadbetting\", // spreadbetting DOTSPREADBETTING REGISTRY LTD\n        \"srl\", // srl InterNetX Corp.\n//        \"srt\", // srt FCA US LLC.\n        \"stada\", // stada STADA Arzneimittel AG\n        \"staples\", // staples Staples, Inc.\n        \"star\", // star Star India Private Limited\n//        \"starhub\", // starhub StarHub Limited\n        \"statebank\", // statebank STATE BANK OF INDIA\n        \"statefarm\", // statefarm State Farm Mutual Automobile Insurance Company\n//        \"statoil\", // statoil Statoil ASA\n        \"stc\", // stc Saudi Telecom Company\n        \"stcgroup\", // stcgroup Saudi Telecom Company\n        \"stockholm\", // stockholm Stockholms kommun\n        \"storage\", // storage Self Storage Company LLC\n        \"store\", // store DotStore Inc.\n        \"stream\", // stream dot Stream Limited\n        \"studio\", // studio United TLD Holdco Ltd.\n        \"study\", // study OPEN UNIVERSITIES AUSTRALIA PTY LTD\n        \"style\", // style Binky Moon, LLC\n        \"sucks\", // sucks Vox Populi Registry Ltd.\n        \"supplies\", // supplies Atomic Fields, LLC\n        \"supply\", // supply Half Falls, LLC\n        \"support\", // support Grand Orchard, LLC\n        \"surf\", // surf Top Level Domain Holdings Limited\n        \"surgery\", // surgery Tin Avenue, LLC\n        \"suzuki\", // suzuki SUZUKI MOTOR CORPORATION\n        \"swatch\", // swatch The Swatch Group Ltd\n//        \"swiftcover\", // swiftcover Swiftcover Insurance Services Limited\n        \"swiss\", // swiss Swiss Confederation\n        \"sydney\", // sydney State of New South Wales, Department of Premier and Cabinet\n//        \"symantec\", // symantec Symantec Corporation [Not assigned as of Jul 25]\n        \"systems\", // systems Dash Cypress, LLC\n        \"tab\", // tab Tabcorp Holdings Limited\n        \"taipei\", // taipei Taipei City Government\n        \"talk\", // talk Amazon Registry Services, Inc.\n        \"taobao\", // taobao Alibaba Group Holding Limited\n        \"target\", // target Target Domain Holdings, LLC\n        \"tatamotors\", // tatamotors Tata Motors Ltd\n        \"tatar\", // tatar LLC \"Coordination Center of Regional Domain of Tatarstan Republic\"\n        \"tattoo\", // tattoo Uniregistry, Corp.\n        \"tax\", // tax Storm Orchard, LLC\n        \"taxi\", // taxi Pine Falls, LLC\n        \"tci\", // tci Asia Green IT System Bilgisayar San. ve Tic. Ltd. Sti.\n        \"tdk\", // tdk TDK Corporation\n        \"team\", // team Atomic Lake, LLC\n        \"tech\", // tech Dot Tech LLC\n        \"technology\", // technology Auburn Falls, LLC\n        \"tel\", // tel Telnic Ltd.\n//        \"telecity\", // telecity TelecityGroup International Limited\n//        \"telefonica\", // telefonica Telef\u00f3nica S.A.\n        \"temasek\", // temasek Temasek Holdings (Private) Limited\n        \"tennis\", // tennis Cotton Bloom, LLC\n        \"teva\", // teva Teva Pharmaceutical Industries Limited\n        \"thd\", // thd Homer TLC, Inc.\n        \"theater\", // theater Blue Tigers, LLC\n        \"theatre\", // theatre XYZ.COM LLC\n        \"tiaa\", // tiaa Teachers Insurance and Annuity Association of America\n        \"tickets\", // tickets Accent Media Limited\n        \"tienda\", // tienda Victor Manor, LLC\n        // \"tiffany\", // tiffany Tiffany and Company\n        \"tips\", // tips Corn Willow, LLC\n        \"tires\", // tires Dog Edge, LLC\n        \"tirol\", // tirol punkt Tirol GmbH\n        \"tjmaxx\", // tjmaxx The TJX Companies, Inc.\n        \"tjx\", // tjx The TJX Companies, Inc.\n        \"tkmaxx\", // tkmaxx The TJX Companies, Inc.\n        \"tmall\", // tmall Alibaba Group Holding Limited\n        \"today\", // today Pearl Woods, LLC\n        \"tokyo\", // tokyo GMO Registry, Inc.\n        \"tools\", // tools Pioneer North, LLC\n        \"top\", // top Jiangsu Bangning Science &amp; Technology Co.,Ltd.\n        \"toray\", // toray Toray Industries, Inc.\n        \"toshiba\", // toshiba TOSHIBA Corporation\n        \"total\", // total Total SA\n        \"tours\", // tours Sugar Station, LLC\n        \"town\", // town Koko Moon, LLC\n        \"toyota\", // toyota TOYOTA MOTOR CORPORATION\n        \"toys\", // toys Pioneer Orchard, LLC\n        \"trade\", // trade Elite Registry Limited\n        \"trading\", // trading DOTTRADING REGISTRY LTD\n        \"training\", // training Wild Willow, LLC\n        \"travel\", // travel Tralliance Registry Management Company, LLC.\n        // \"travelchannel\", // travelchannel Lifestyle Domain Holdings, Inc.\n        \"travelers\", // travelers Travelers TLD, LLC\n        \"travelersinsurance\", // travelersinsurance Travelers TLD, LLC\n        \"trust\", // trust Artemis Internet Inc\n        \"trv\", // trv Travelers TLD, LLC\n        \"tube\", // tube Latin American Telecom LLC\n        \"tui\", // tui TUI AG\n        \"tunes\", // tunes Amazon Registry Services, Inc.\n        \"tushu\", // tushu Amazon Registry Services, Inc.\n        \"tvs\", // tvs T V SUNDRAM IYENGAR  &amp; SONS PRIVATE LIMITED\n        \"ubank\", // ubank National Australia Bank Limited\n        \"ubs\", // ubs UBS AG\n//        \"uconnect\", // uconnect FCA US LLC.\n        \"unicom\", // unicom China United Network Communications Corporation Limited\n        \"university\", // university Little Station, LLC\n        \"uno\", // uno Dot Latin LLC\n        \"uol\", // uol UBN INTERNET LTDA.\n        \"ups\", // ups UPS Market Driver, Inc.\n        \"vacations\", // vacations Atomic Tigers, LLC\n        \"vana\", // vana Lifestyle Domain Holdings, Inc.\n        \"vanguard\", // vanguard The Vanguard Group, Inc.\n        \"vegas\", // vegas Dot Vegas, Inc.\n        \"ventures\", // ventures Binky Lake, LLC\n        \"verisign\", // verisign VeriSign, Inc.\n        \"versicherung\", // versicherung dotversicherung-registry GmbH\n        \"vet\", // vet United TLD Holdco, Ltd\n        \"viajes\", // viajes Black Madison, LLC\n        \"video\", // video United TLD Holdco, Ltd\n        \"vig\", // vig VIENNA INSURANCE GROUP AG Wiener Versicherung Gruppe\n        \"viking\", // viking Viking River Cruises (Bermuda) Ltd.\n        \"villas\", // villas New Sky, LLC\n        \"vin\", // vin Holly Shadow, LLC\n        \"vip\", // vip Minds + Machines Group Limited\n        \"virgin\", // virgin Virgin Enterprises Limited\n        \"visa\", // visa Visa Worldwide Pte. Limited\n        \"vision\", // vision Koko Station, LLC\n//        \"vista\", // vista Vistaprint Limited\n//        \"vistaprint\", // vistaprint Vistaprint Limited\n        \"viva\", // viva Saudi Telecom Company\n        \"vivo\", // vivo Telefonica Brasil S.A.\n        \"vlaanderen\", // vlaanderen DNS.be vzw\n        \"vodka\", // vodka Top Level Domain Holdings Limited\n        // \"volkswagen\", // volkswagen Volkswagen Group of America Inc.\n        \"volvo\", // volvo Volvo Holding Sverige Aktiebolag\n        \"vote\", // vote Monolith Registry LLC\n        \"voting\", // voting Valuetainment Corp.\n        \"voto\", // voto Monolith Registry LLC\n        \"voyage\", // voyage Ruby House, LLC\n        // \"vuelos\", // vuelos Travel Reservations SRL\n        \"wales\", // wales Nominet UK\n        \"walmart\", // walmart Wal-Mart Stores, Inc.\n        \"walter\", // walter Sandvik AB\n        \"wang\", // wang Zodiac Registry Limited\n        \"wanggou\", // wanggou Amazon Registry Services, Inc.\n//        \"warman\", // warman Weir Group IP Limited\n        \"watch\", // watch Sand Shadow, LLC\n        \"watches\", // watches Richemont DNS Inc.\n        \"weather\", // weather The Weather Channel, LLC\n        \"weatherchannel\", // weatherchannel The Weather Channel, LLC\n        \"webcam\", // webcam dot Webcam Limited\n        \"weber\", // weber Saint-Gobain Weber SA\n        \"website\", // website DotWebsite Inc.\n        \"wed\", // wed Atgron, Inc.\n        \"wedding\", // wedding Top Level Domain Holdings Limited\n        \"weibo\", // weibo Sina Corporation\n        \"weir\", // weir Weir Group IP Limited\n        \"whoswho\", // whoswho Who&#39;s Who Registry\n        \"wien\", // wien punkt.wien GmbH\n        \"wiki\", // wiki Top Level Design, LLC\n        \"williamhill\", // williamhill William Hill Organization Limited\n        \"win\", // win First Registry Limited\n        \"windows\", // windows Microsoft Corporation\n        \"wine\", // wine June Station, LLC\n        \"winners\", // winners The TJX Companies, Inc.\n        \"wme\", // wme William Morris Endeavor Entertainment, LLC\n        \"wolterskluwer\", // wolterskluwer Wolters Kluwer N.V.\n        \"woodside\", // woodside Woodside Petroleum Limited\n        \"work\", // work Top Level Domain Holdings Limited\n        \"works\", // works Little Dynamite, LLC\n        \"world\", // world Bitter Fields, LLC\n        \"wow\", // wow Amazon Registry Services, Inc.\n        \"wtc\", // wtc World Trade Centers Association, Inc.\n        \"wtf\", // wtf Hidden Way, LLC\n        \"xbox\", // xbox Microsoft Corporation\n        \"xerox\", // xerox Xerox DNHC LLC\n        // \"xfinity\", // xfinity Comcast IP Holdings I, LLC\n        \"xihuan\", // xihuan QIHOO 360 TECHNOLOGY CO. LTD.\n        \"xin\", // xin Elegant Leader Limited\n        \"xn--11b4c3d\", // \u0915\u0949\u092e VeriSign Sarl\n        \"xn--1ck2e1b\", // \u30bb\u30fc\u30eb Amazon Registry Services, Inc.\n        \"xn--1qqw23a\", // \u4f5b\u5c71 Guangzhou YU Wei Information Technology Co., Ltd.\n        \"xn--30rr7y\", // \u6148\u5584 Excellent First Limited\n        \"xn--3bst00m\", // \u96c6\u56e2 Eagle Horizon Limited\n        \"xn--3ds443g\", // \u5728\u7ebf TLD REGISTRY LIMITED\n//        \"xn--3oq18vl8pn36a\", // \u5927\u4f17\u6c7d\u8f66 Volkswagen (China) Investment Co., Ltd.\n        \"xn--3pxu8k\", // \u70b9\u770b VeriSign Sarl\n        \"xn--42c2d9a\", // \u0e04\u0e2d\u0e21 VeriSign Sarl\n        \"xn--45q11c\", // \u516b\u5366 Zodiac Scorpio Limited\n        \"xn--4gbrim\", // \u0645\u0648\u0642\u0639 Suhub Electronic Establishment\n        \"xn--55qw42g\", // \u516c\u76ca China Organizational Name Administration Center\n        \"xn--55qx5d\", // \u516c\u53f8 Computer Network Information Center of Chinese Academy of Sciences \uff08China Internet Network Information Center\uff09\n        \"xn--5su34j936bgsg\", // \u9999\u683c\u91cc\u62c9 Shangri\u2010La International Hotel Management Limited\n        \"xn--5tzm5g\", // \u7f51\u7ad9 Global Website TLD Asia Limited\n        \"xn--6frz82g\", // \u79fb\u52a8 Afilias Limited\n        \"xn--6qq986b3xl\", // \u6211\u7231\u4f60 Tycoon Treasure Limited\n        \"xn--80adxhks\", // \u043c\u043e\u0441\u043a\u0432\u0430 Foundation for Assistance for Internet Technologies and Infrastructure Development (FAITID)\n        \"xn--80aqecdr1a\", // \u043a\u0430\u0442\u043e\u043b\u0438\u043a Pontificium Consilium de Comunicationibus Socialibus (PCCS) (Pontifical Council for Social Communication)\n        \"xn--80asehdb\", // \u043e\u043d\u043b\u0430\u0439\u043d CORE Association\n        \"xn--80aswg\", // \u0441\u0430\u0439\u0442 CORE Association\n        \"xn--8y0a063a\", // \u8054\u901a China United Network Communications Corporation Limited\n        \"xn--90ae\", // \u0431\u0433 Imena.BG Plc (NAMES.BG Plc)\n        \"xn--9dbq2a\", // \u05e7\u05d5\u05dd VeriSign Sarl\n        \"xn--9et52u\", // \u65f6\u5c1a RISE VICTORY LIMITED\n        \"xn--9krt00a\", // \u5fae\u535a Sina Corporation\n        \"xn--b4w605ferd\", // \u6de1\u9a6c\u9521 Temasek Holdings (Private) Limited\n        \"xn--bck1b9a5dre4c\", // \u30d5\u30a1\u30c3\u30b7\u30e7\u30f3 Amazon Registry Services, Inc.\n        \"xn--c1avg\", // \u043e\u0440\u0433 Public Interest Registry\n        \"xn--c2br7g\", // \u0928\u0947\u091f VeriSign Sarl\n        \"xn--cck2b3b\", // \u30b9\u30c8\u30a2 Amazon Registry Services, Inc.\n        \"xn--cckwcxetd\", // \u30a2\u30de\u30be\u30f3 Amazon Registry Services, Inc.\n        \"xn--cg4bki\", // \uc0bc\uc131 SAMSUNG SDS CO., LTD\n        \"xn--czr694b\", // \u5546\u6807 HU YI GLOBAL INFORMATION RESOURCES(HOLDING) COMPANY.HONGKONG LIMITED\n        \"xn--czrs0t\", // \u5546\u5e97 Wild Island, LLC\n        \"xn--czru2d\", // \u5546\u57ce Zodiac Aquarius Limited\n        \"xn--d1acj3b\", // \u0434\u0435\u0442\u0438 The Foundation for Network Initiatives \u201cThe Smart Internet\u201d\n        \"xn--eckvdtc9d\", // \u30dd\u30a4\u30f3\u30c8 Amazon Registry Services, Inc.\n        \"xn--efvy88h\", // \u65b0\u95fb Xinhua News Agency Guangdong Branch \u65b0\u534e\u901a\u8baf\u793e\u5e7f\u4e1c\u5206\u793e\n//        \"xn--estv75g\", // \u5de5\u884c Industrial and Commercial Bank of China Limited\n        \"xn--fct429k\", // \u5bb6\u96fb Amazon Registry Services, Inc.\n        \"xn--fhbei\", // \u0643\u0648\u0645 VeriSign Sarl\n        \"xn--fiq228c5hs\", // \u4e2d\u6587\u7f51 TLD REGISTRY LIMITED\n        \"xn--fiq64b\", // \u4e2d\u4fe1 CITIC Group Corporation\n        \"xn--fjq720a\", // \u5a31\u4e50 Will Bloom, LLC\n        \"xn--flw351e\", // \u8c37\u6b4c Charleston Road Registry Inc.\n        \"xn--fzys8d69uvgm\", // \u96fb\u8a0a\u76c8\u79d1 PCCW Enterprises Limited\n        \"xn--g2xx48c\", // \u8d2d\u7269 Minds + Machines Group Limited\n        \"xn--gckr3f0f\", // \u30af\u30e9\u30a6\u30c9 Amazon Registry Services, Inc.\n        \"xn--gk3at1e\", // \u901a\u8ca9 Amazon Registry Services, Inc.\n        \"xn--hxt814e\", // \u7f51\u5e97 Zodiac Libra Limited\n        \"xn--i1b6b1a6a2e\", // \u0938\u0902\u0917\u0920\u0928 Public Interest Registry\n        \"xn--imr513n\", // \u9910\u5385 HU YI GLOBAL INFORMATION RESOURCES (HOLDING) COMPANY. HONGKONG LIMITED\n        \"xn--io0a7i\", // \u7f51\u7edc Computer Network Information Center of Chinese Academy of Sciences \uff08China Internet Network Information Center\uff09\n        \"xn--j1aef\", // \u043a\u043e\u043c VeriSign Sarl\n        \"xn--jlq480n2rg\", // \u4e9a\u9a6c\u900a Amazon Registry Services, Inc.\n//        \"xn--jlq61u9w7b\", // \u8bfa\u57fa\u4e9a Nokia Corporation\n        \"xn--jvr189m\", // \u98df\u54c1 Amazon Registry Services, Inc.\n        \"xn--kcrx77d1x4a\", // \u98de\u5229\u6d66 Koninklijke Philips N.V.\n//        \"xn--kpu716f\", // \u624b\u8868 Richemont DNS Inc. [Not assigned as of Jul 25]\n        \"xn--kput3i\", // \u624b\u673a Beijing RITT-Net Technology Development Co., Ltd\n        \"xn--mgba3a3ejt\", // \u0627\u0631\u0627\u0645\u0643\u0648 Aramco Services Company\n        \"xn--mgba7c0bbn0a\", // \u0627\u0644\u0639\u0644\u064a\u0627\u0646 Crescent Holding GmbH\n        // \"xn--mgbaakc7dvf\", // \u0627\u062a\u0635\u0627\u0644\u0627\u062a Emirates Telecommunications Corporation (trading as Etisalat)\n        \"xn--mgbab2bd\", // \u0628\u0627\u0632\u0627\u0631 CORE Association\n//        \"xn--mgbb9fbpob\", // \u0645\u0648\u0628\u0627\u064a\u0644\u064a GreenTech Consultancy Company W.L.L.\n        \"xn--mgbca7dzdo\", // \u0627\u0628\u0648\u0638\u0628\u064a Abu Dhabi Systems and Information Centre\n        \"xn--mgbi4ecexp\", // \u0643\u0627\u062b\u0648\u0644\u064a\u0643 Pontificium Consilium de Comunicationibus Socialibus (PCCS) (Pontifical Council for Social Communication)\n        \"xn--mgbt3dhd\", // \u0647\u0645\u0631\u0627\u0647 Asia Green IT System Bilgisayar San. ve Tic. Ltd. Sti.\n        \"xn--mk1bu44c\", // \ub2f7\ucef4 VeriSign Sarl\n        \"xn--mxtq1m\", // \u653f\u5e9c Net-Chinese Co., Ltd.\n        \"xn--ngbc5azd\", // \u0634\u0628\u0643\u0629 International Domain Registry Pty. Ltd.\n        \"xn--ngbe9e0a\", // \u0628\u064a\u062a\u0643 Kuwait Finance House\n        \"xn--ngbrx\", // \u0639\u0631\u0628 League of Arab States\n        \"xn--nqv7f\", // \u673a\u6784 Public Interest Registry\n        \"xn--nqv7fs00ema\", // \u7ec4\u7ec7\u673a\u6784 Public Interest Registry\n        \"xn--nyqy26a\", // \u5065\u5eb7 Stable Tone Limited\n        \"xn--otu796d\", // \u62db\u8058 Dot Trademark TLD Holding Company Limited\n        \"xn--p1acf\", // \u0440\u0443\u0441 Rusnames Limited\n//        \"xn--pbt977c\", // \u73e0\u5b9d Richemont DNS Inc. [Not assigned as of Jul 25]\n        \"xn--pssy2u\", // \u5927\u62ff VeriSign Sarl\n        \"xn--q9jyb4c\", // \u307f\u3093\u306a Charleston Road Registry Inc.\n        \"xn--qcka1pmc\", // \u30b0\u30fc\u30b0\u30eb Charleston Road Registry Inc.\n        \"xn--rhqv96g\", // \u4e16\u754c Stable Tone Limited\n        \"xn--rovu88b\", // \u66f8\u7c4d Amazon EU S.\u00e0 r.l.\n        \"xn--ses554g\", // \u7f51\u5740 KNET Co., Ltd\n        \"xn--t60b56a\", // \ub2f7\ub137 VeriSign Sarl\n        \"xn--tckwe\", // \u30b3\u30e0 VeriSign Sarl\n        \"xn--tiq49xqyj\", // \u5929\u4e3b\u6559 Pontificium Consilium de Comunicationibus Socialibus (PCCS) (Pontifical Council for Social Communication)\n        \"xn--unup4y\", // \u6e38\u620f Spring Fields, LLC\n        \"xn--vermgensberater-ctb\", // VERM\u00f6GENSBERATER Deutsche Verm\u00f6gensberatung Aktiengesellschaft DVAG\n        \"xn--vermgensberatung-pwb\", // VERM\u00f6GENSBERATUNG Deutsche Verm\u00f6gensberatung Aktiengesellschaft DVAG\n        \"xn--vhquv\", // \u4f01\u4e1a Dash McCook, LLC\n        \"xn--vuq861b\", // \u4fe1\u606f Beijing Tele-info Network Technology Co., Ltd.\n        \"xn--w4r85el8fhu5dnra\", // \u5609\u91cc\u5927\u9152\u5e97 Kerry Trading Co. Limited\n        \"xn--w4rs40l\", // \u5609\u91cc Kerry Trading Co. Limited\n        \"xn--xhq521b\", // \u5e7f\u4e1c Guangzhou YU Wei Information Technology Co., Ltd.\n        \"xn--zfr164b\", // \u653f\u52a1 China Organizational Name Administration Center\n//        \"xperia\", // xperia Sony Mobile Communications AB\n        \"xxx\", // xxx ICM Registry LLC\n        \"xyz\", // xyz XYZ.COM LLC\n        \"yachts\", // yachts DERYachts, LLC\n        \"yahoo\", // yahoo Yahoo! Domain Services Inc.\n        \"yamaxun\", // yamaxun Amazon Registry Services, Inc.\n        \"yandex\", // yandex YANDEX, LLC\n        \"yodobashi\", // yodobashi YODOBASHI CAMERA CO.,LTD.\n        \"yoga\", // yoga Top Level Domain Holdings Limited\n        \"yokohama\", // yokohama GMO Registry, Inc.\n        \"you\", // you Amazon Registry Services, Inc.\n        \"youtube\", // youtube Charleston Road Registry Inc.\n        \"yun\", // yun QIHOO 360 TECHNOLOGY CO. LTD.\n        \"zappos\", // zappos Amazon Registry Services, Inc.\n        \"zara\", // zara Industria de Dise\u00f1o Textil, S.A. (INDITEX, S.A.)\n        \"zero\", // zero Amazon Registry Services, Inc.\n        \"zip\", // zip Charleston Road Registry Inc.\n//        \"zippo\", // zippo Zadco Company\n        \"zone\", // zone Outer Falls, LLC\n        \"zuerich\", // zuerich Kanton Z\u00fcrich (Canton of Zurich)\n};", "docstring": " WARNING: this array MUST be sorted, otherwise it cannot be searched reliably using binary search", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String[]", "name": "GENERIC_TLDS = {\n        // Taken from Version 2024040200, Last Updated Tue Apr  2 07:07:02 2024 UTC\n        \"aaa\", // aaa American Automobile Association, Inc.\n        \"aarp\", // aarp AARP\n        // \"abarth\", // abarth Fiat Chrysler Automobiles N.V.\n        \"abb\", // abb ABB Ltd\n        \"abbott\", // abbott Abbott Laboratories, Inc.\n        \"abbvie\", // abbvie AbbVie Inc.\n        \"abc\", // abc Disney Enterprises, Inc.\n        \"able\", // able Able Inc.\n        \"abogado\", // abogado Top Level Domain Holdings Limited\n        \"abudhabi\", // abudhabi Abu Dhabi Systems and Information Centre\n        \"academy\", // academy Half Oaks, LLC\n        \"accenture\", // accenture Accenture plc\n        \"accountant\", // accountant dot Accountant Limited\n        \"accountants\", // accountants Knob Town, LLC\n        \"aco\", // aco ACO Severin Ahlmann GmbH &amp; Co. KG\n//        \"active\", // active The Active Network, Inc\n        \"actor\", // actor United TLD Holdco Ltd.\n//        \"adac\", // adac Allgemeiner Deutscher Automobil-Club e.V. (ADAC)\n        \"ads\", // ads Charleston Road Registry Inc.\n        \"adult\", // adult ICM Registry AD LLC\n        \"aeg\", // aeg Aktiebolaget Electrolux\n        \"aero\", // aero Societe Internationale de Telecommunications Aeronautique (SITA INC USA)\n        \"aetna\", // aetna Aetna Life Insurance Company\n//        \"afamilycompany\", // afamilycompany Johnson Shareholdings, Inc.\n        \"afl\", // afl Australian Football League\n        \"africa\", // africa ZA Central Registry NPC trading as Registry.Africa\n        \"agakhan\", // agakhan Fondation Aga Khan (Aga Khan Foundation)\n        \"agency\", // agency Steel Falls, LLC\n        \"aig\", // aig American International Group, Inc.\n//        \"aigo\", // aigo aigo Digital Technology Co,Ltd. [Not assigned as of Jul 25]\n        \"airbus\", // airbus Airbus S.A.S.\n        \"airforce\", // airforce United TLD Holdco Ltd.\n        \"airtel\", // airtel Bharti Airtel Limited\n        \"akdn\", // akdn Fondation Aga Khan (Aga Khan Foundation)\n        // \"alfaromeo\", // alfaromeo Fiat Chrysler Automobiles N.V.\n        \"alibaba\", // alibaba Alibaba Group Holding Limited\n        \"alipay\", // alipay Alibaba Group Holding Limited\n        \"allfinanz\", // allfinanz Allfinanz Deutsche Verm\u00f6gensberatung Aktiengesellschaft\n        \"allstate\", // allstate Allstate Fire and Casualty Insurance Company\n        \"ally\", // ally Ally Financial Inc.\n        \"alsace\", // alsace REGION D ALSACE\n        \"alstom\", // alstom ALSTOM\n        \"amazon\", // amazon Amazon Registry Services, Inc.\n        \"americanexpress\", // americanexpress American Express Travel Related Services Company, Inc.\n        \"americanfamily\", // americanfamily AmFam, Inc.\n        \"amex\", // amex American Express Travel Related Services Company, Inc.\n        \"amfam\", // amfam AmFam, Inc.\n        \"amica\", // amica Amica Mutual Insurance Company\n        \"amsterdam\", // amsterdam Gemeente Amsterdam\n        \"analytics\", // analytics Campus IP LLC\n        \"android\", // android Charleston Road Registry Inc.\n        \"anquan\", // anquan QIHOO 360 TECHNOLOGY CO. LTD.\n        \"anz\", // anz Australia and New Zealand Banking Group Limited\n        \"aol\", // aol AOL Inc.\n        \"apartments\", // apartments June Maple, LLC\n        \"app\", // app Charleston Road Registry Inc.\n        \"apple\", // apple Apple Inc.\n        \"aquarelle\", // aquarelle Aquarelle.com\n        \"arab\", // arab League of Arab States\n        \"aramco\", // aramco Aramco Services Company\n        \"archi\", // archi STARTING DOT LIMITED\n        \"army\", // army United TLD Holdco Ltd.\n        \"art\", // art UK Creative Ideas Limited\n        \"arte\", // arte Association Relative \u00e0 la T\u00e9l\u00e9vision Europ\u00e9enne G.E.I.E.\n        \"asda\", // asda Wal-Mart Stores, Inc.\n        \"asia\", // asia DotAsia Organisation Ltd.\n        \"associates\", // associates Baxter Hill, LLC\n        \"athleta\", // athleta The Gap, Inc.\n        \"attorney\", // attorney United TLD Holdco, Ltd\n        \"auction\", // auction United TLD HoldCo, Ltd.\n        \"audi\", // audi AUDI Aktiengesellschaft\n        \"audible\", // audible Amazon Registry Services, Inc.\n        \"audio\", // audio Uniregistry, Corp.\n        \"auspost\", // auspost Australian Postal Corporation\n        \"author\", // author Amazon Registry Services, Inc.\n        \"auto\", // auto Uniregistry, Corp.\n        \"autos\", // autos DERAutos, LLC\n        // \"avianca\", // avianca Aerovias del Continente Americano S.A. Avianca\n        \"aws\", // aws Amazon Registry Services, Inc.\n        \"axa\", // axa AXA SA\n        \"azure\", // azure Microsoft Corporation\n        \"baby\", // baby Johnson &amp; Johnson Services, Inc.\n        \"baidu\", // baidu Baidu, Inc.\n        \"banamex\", // banamex Citigroup Inc.\n        // \"bananarepublic\", // bananarepublic The Gap, Inc.\n        \"band\", // band United TLD Holdco, Ltd\n        \"bank\", // bank fTLD Registry Services, LLC\n        \"bar\", // bar Punto 2012 Sociedad Anonima Promotora de Inversion de Capital Variable\n        \"barcelona\", // barcelona Municipi de Barcelona\n        \"barclaycard\", // barclaycard Barclays Bank PLC\n        \"barclays\", // barclays Barclays Bank PLC\n        \"barefoot\", // barefoot Gallo Vineyards, Inc.\n        \"bargains\", // bargains Half Hallow, LLC\n        \"baseball\", // baseball MLB Advanced Media DH, LLC\n        \"basketball\", // basketball F\u00e9d\u00e9ration Internationale de Basketball (FIBA)\n        \"bauhaus\", // bauhaus Werkhaus GmbH\n        \"bayern\", // bayern Bayern Connect GmbH\n        \"bbc\", // bbc British Broadcasting Corporation\n        \"bbt\", // bbt BB&amp;T Corporation\n        \"bbva\", // bbva BANCO BILBAO VIZCAYA ARGENTARIA, S.A.\n        \"bcg\", // bcg The Boston Consulting Group, Inc.\n        \"bcn\", // bcn Municipi de Barcelona\n        \"beats\", // beats Beats Electronics, LLC\n        \"beauty\", // beauty L&#39;Or\u00e9al\n        \"beer\", // beer Top Level Domain Holdings Limited\n        \"bentley\", // bentley Bentley Motors Limited\n        \"berlin\", // berlin dotBERLIN GmbH &amp; Co. KG\n        \"best\", // best BestTLD Pty Ltd\n        \"bestbuy\", // bestbuy BBY Solutions, Inc.\n        \"bet\", // bet Afilias plc\n        \"bharti\", // bharti Bharti Enterprises (Holding) Private Limited\n        \"bible\", // bible American Bible Society\n        \"bid\", // bid dot Bid Limited\n        \"bike\", // bike Grand Hollow, LLC\n        \"bing\", // bing Microsoft Corporation\n        \"bingo\", // bingo Sand Cedar, LLC\n        \"bio\", // bio STARTING DOT LIMITED\n        \"biz\", // biz Neustar, Inc.\n        \"black\", // black Afilias Limited\n        \"blackfriday\", // blackfriday Uniregistry, Corp.\n//        \"blanco\", // blanco BLANCO GmbH + Co KG\n        \"blockbuster\", // blockbuster Dish DBS Corporation\n        \"blog\", // blog Knock Knock WHOIS There, LLC\n        \"bloomberg\", // bloomberg Bloomberg IP Holdings LLC\n        \"blue\", // blue Afilias Limited\n        \"bms\", // bms Bristol-Myers Squibb Company\n        \"bmw\", // bmw Bayerische Motoren Werke Aktiengesellschaft\n//        \"bnl\", // bnl Banca Nazionale del Lavoro\n        \"bnpparibas\", // bnpparibas BNP Paribas\n        \"boats\", // boats DERBoats, LLC\n        \"boehringer\", // boehringer Boehringer Ingelheim International GmbH\n        \"bofa\", // bofa NMS Services, Inc.\n        \"bom\", // bom N\u00facleo de Informa\u00e7\u00e3o e Coordena\u00e7\u00e3o do Ponto BR - NIC.br\n        \"bond\", // bond Bond University Limited\n        \"boo\", // boo Charleston Road Registry Inc.\n        \"book\", // book Amazon Registry Services, Inc.\n        \"booking\", // booking Booking.com B.V.\n//        \"boots\", // boots THE BOOTS COMPANY PLC\n        \"bosch\", // bosch Robert Bosch GMBH\n        \"bostik\", // bostik Bostik SA\n        \"boston\", // boston Boston TLD Management, LLC\n        \"bot\", // bot Amazon Registry Services, Inc.\n        \"boutique\", // boutique Over Galley, LLC\n        \"box\", // box NS1 Limited\n        \"bradesco\", // bradesco Banco Bradesco S.A.\n        \"bridgestone\", // bridgestone Bridgestone Corporation\n        \"broadway\", // broadway Celebrate Broadway, Inc.\n        \"broker\", // broker DOTBROKER REGISTRY LTD\n        \"brother\", // brother Brother Industries, Ltd.\n        \"brussels\", // brussels DNS.be vzw\n//        \"budapest\", // budapest Top Level Domain Holdings Limited\n//        \"bugatti\", // bugatti Bugatti International SA\n        \"build\", // build Plan Bee LLC\n        \"builders\", // builders Atomic Madison, LLC\n        \"business\", // business Spring Cross, LLC\n        \"buy\", // buy Amazon Registry Services, INC\n        \"buzz\", // buzz DOTSTRATEGY CO.\n        \"bzh\", // bzh Association www.bzh\n        \"cab\", // cab Half Sunset, LLC\n        \"cafe\", // cafe Pioneer Canyon, LLC\n        \"cal\", // cal Charleston Road Registry Inc.\n        \"call\", // call Amazon Registry Services, Inc.\n        \"calvinklein\", // calvinklein PVH gTLD Holdings LLC\n        \"cam\", // cam AC Webconnecting Holding B.V.\n        \"camera\", // camera Atomic Maple, LLC\n        \"camp\", // camp Delta Dynamite, LLC\n//        \"cancerresearch\", // cancerresearch Australian Cancer Research Foundation\n        \"canon\", // canon Canon Inc.\n        \"capetown\", // capetown ZA Central Registry NPC trading as ZA Central Registry\n        \"capital\", // capital Delta Mill, LLC\n        \"capitalone\", // capitalone Capital One Financial Corporation\n        \"car\", // car Cars Registry Limited\n        \"caravan\", // caravan Caravan International, Inc.\n        \"cards\", // cards Foggy Hollow, LLC\n        \"care\", // care Goose Cross, LLC\n        \"career\", // career dotCareer LLC\n        \"careers\", // careers Wild Corner, LLC\n        \"cars\", // cars Uniregistry, Corp.\n//        \"cartier\", // cartier Richemont DNS Inc.\n        \"casa\", // casa Top Level Domain Holdings Limited\n        \"case\", // case CNH Industrial N.V.\n//        \"caseih\", // caseih CNH Industrial N.V.\n        \"cash\", // cash Delta Lake, LLC\n        \"casino\", // casino Binky Sky, LLC\n        \"cat\", // cat Fundacio puntCAT\n        \"catering\", // catering New Falls. LLC\n        \"catholic\", // catholic Pontificium Consilium de Comunicationibus Socialibus (PCCS) (Pontifical Council for Social Communication)\n        \"cba\", // cba COMMONWEALTH BANK OF AUSTRALIA\n        \"cbn\", // cbn The Christian Broadcasting Network, Inc.\n        \"cbre\", // cbre CBRE, Inc.\n        // \"cbs\", // cbs CBS Domains Inc.\n//        \"ceb\", // ceb The Corporate Executive Board Company\n        \"center\", // center Tin Mill, LLC\n        \"ceo\", // ceo CEOTLD Pty Ltd\n        \"cern\", // cern European Organization for Nuclear Research (&quot;CERN&quot;)\n        \"cfa\", // cfa CFA Institute\n        \"cfd\", // cfd DOTCFD REGISTRY LTD\n        \"chanel\", // chanel Chanel International B.V.\n        \"channel\", // channel Charleston Road Registry Inc.\n        \"charity\", // charity Corn Lake, LLC\n        \"chase\", // chase JPMorgan Chase &amp; Co.\n        \"chat\", // chat Sand Fields, LLC\n        \"cheap\", // cheap Sand Cover, LLC\n        \"chintai\", // chintai CHINTAI Corporation\n//        \"chloe\", // chloe Richemont DNS Inc. (Not assigned)\n        \"christmas\", // christmas Uniregistry, Corp.\n        \"chrome\", // chrome Charleston Road Registry Inc.\n//        \"chrysler\", // chrysler FCA US LLC.\n        \"church\", // church Holly Fileds, LLC\n        \"cipriani\", // cipriani Hotel Cipriani Srl\n        \"circle\", // circle Amazon Registry Services, Inc.\n        \"cisco\", // cisco Cisco Technology, Inc.\n        \"citadel\", // citadel Citadel Domain LLC\n        \"citi\", // citi Citigroup Inc.\n        \"citic\", // citic CITIC Group Corporation\n        \"city\", // city Snow Sky, LLC\n        // \"cityeats\", // cityeats Lifestyle Domain Holdings, Inc.\n        \"claims\", // claims Black Corner, LLC\n        \"cleaning\", // cleaning Fox Shadow, LLC\n        \"click\", // click Uniregistry, Corp.\n        \"clinic\", // clinic Goose Park, LLC\n        \"clinique\", // clinique The Est\u00e9e Lauder Companies Inc.\n        \"clothing\", // clothing Steel Lake, LLC\n        \"cloud\", // cloud ARUBA S.p.A.\n        \"club\", // club .CLUB DOMAINS, LLC\n        \"clubmed\", // clubmed Club M\u00e9diterran\u00e9e S.A.\n        \"coach\", // coach Koko Island, LLC\n        \"codes\", // codes Puff Willow, LLC\n        \"coffee\", // coffee Trixy Cover, LLC\n        \"college\", // college XYZ.COM LLC\n        \"cologne\", // cologne NetCologne Gesellschaft f\u00fcr Telekommunikation mbH\n        \"com\", // com VeriSign Global Registry Services\n        // \"comcast\", // comcast Comcast IP Holdings I, LLC\n        \"commbank\", // commbank COMMONWEALTH BANK OF AUSTRALIA\n        \"community\", // community Fox Orchard, LLC\n        \"company\", // company Silver Avenue, LLC\n        \"compare\", // compare iSelect Ltd\n        \"computer\", // computer Pine Mill, LLC\n        \"comsec\", // comsec VeriSign, Inc.\n        \"condos\", // condos Pine House, LLC\n        \"construction\", // construction Fox Dynamite, LLC\n        \"consulting\", // consulting United TLD Holdco, LTD.\n        \"contact\", // contact Top Level Spectrum, Inc.\n        \"contractors\", // contractors Magic Woods, LLC\n        \"cooking\", // cooking Top Level Domain Holdings Limited\n        // \"cookingchannel\", // cookingchannel Lifestyle Domain Holdings, Inc.\n        \"cool\", // cool Koko Lake, LLC\n        \"coop\", // coop DotCooperation LLC\n        \"corsica\", // corsica Collectivit\u00e9 Territoriale de Corse\n        \"country\", // country Top Level Domain Holdings Limited\n        \"coupon\", // coupon Amazon Registry Services, Inc.\n        \"coupons\", // coupons Black Island, LLC\n        \"courses\", // courses OPEN UNIVERSITIES AUSTRALIA PTY LTD\n        \"cpa\", // cpa American Institute of Certified Public Accountants\n        \"credit\", // credit Snow Shadow, LLC\n        \"creditcard\", // creditcard Binky Frostbite, LLC\n        \"creditunion\", // creditunion CUNA Performance Resources, LLC\n        \"cricket\", // cricket dot Cricket Limited\n        \"crown\", // crown Crown Equipment Corporation\n        \"crs\", // crs Federated Co-operatives Limited\n        \"cruise\", // cruise Viking River Cruises (Bermuda) Ltd.\n        \"cruises\", // cruises Spring Way, LLC\n//        \"csc\", // csc Alliance-One Services, Inc.\n        \"cuisinella\", // cuisinella SALM S.A.S.\n        \"cymru\", // cymru Nominet UK\n        \"cyou\", // cyou Beijing Gamease Age Digital Technology Co., Ltd.\n        \"dabur\", // dabur Dabur India Limited\n        \"dad\", // dad Charleston Road Registry Inc.\n        \"dance\", // dance United TLD Holdco Ltd.\n        \"data\", // data Dish DBS Corporation\n        \"date\", // date dot Date Limited\n        \"dating\", // dating Pine Fest, LLC\n        \"datsun\", // datsun NISSAN MOTOR CO., LTD.\n        \"day\", // day Charleston Road Registry Inc.\n        \"dclk\", // dclk Charleston Road Registry Inc.\n        \"dds\", // dds Minds + Machines Group Limited\n        \"deal\", // deal Amazon Registry Services, Inc.\n        \"dealer\", // dealer Dealer Dot Com, Inc.\n        \"deals\", // deals Sand Sunset, LLC\n        \"degree\", // degree United TLD Holdco, Ltd\n        \"delivery\", // delivery Steel Station, LLC\n        \"dell\", // dell Dell Inc.\n        \"deloitte\", // deloitte Deloitte Touche Tohmatsu\n        \"delta\", // delta Delta Air Lines, Inc.\n        \"democrat\", // democrat United TLD Holdco Ltd.\n        \"dental\", // dental Tin Birch, LLC\n        \"dentist\", // dentist United TLD Holdco, Ltd\n        \"desi\", // desi Desi Networks LLC\n        \"design\", // design Top Level Design, LLC\n        \"dev\", // dev Charleston Road Registry Inc.\n        \"dhl\", // dhl Deutsche Post AG\n        \"diamonds\", // diamonds John Edge, LLC\n        \"diet\", // diet Uniregistry, Corp.\n        \"digital\", // digital Dash Park, LLC\n        \"direct\", // direct Half Trail, LLC\n        \"directory\", // directory Extra Madison, LLC\n        \"discount\", // discount Holly Hill, LLC\n        \"discover\", // discover Discover Financial Services\n        \"dish\", // dish Dish DBS Corporation\n        \"diy\", // diy Lifestyle Domain Holdings, Inc.\n        \"dnp\", // dnp Dai Nippon Printing Co., Ltd.\n        \"docs\", // docs Charleston Road Registry Inc.\n        \"doctor\", // doctor Brice Trail, LLC\n//        \"dodge\", // dodge FCA US LLC.\n        \"dog\", // dog Koko Mill, LLC\n//        \"doha\", // doha Communications Regulatory Authority (CRA)\n        \"domains\", // domains Sugar Cross, LLC\n//            \"doosan\", // doosan Doosan Corporation (retired)\n        \"dot\", // dot Dish DBS Corporation\n        \"download\", // download dot Support Limited\n        \"drive\", // drive Charleston Road Registry Inc.\n        \"dtv\", // dtv Dish DBS Corporation\n        \"dubai\", // dubai Dubai Smart Government Department\n//        \"duck\", // duck Johnson Shareholdings, Inc.\n        \"dunlop\", // dunlop The Goodyear Tire &amp; Rubber Company\n//        \"duns\", // duns The Dun &amp; Bradstreet Corporation\n        \"dupont\", // dupont E. I. du Pont de Nemours and Company\n        \"durban\", // durban ZA Central Registry NPC trading as ZA Central Registry\n        \"dvag\", // dvag Deutsche Verm\u00f6gensberatung Aktiengesellschaft DVAG\n        \"dvr\", // dvr Hughes Satellite Systems Corporation\n        \"earth\", // earth Interlink Co., Ltd.\n        \"eat\", // eat Charleston Road Registry Inc.\n        \"eco\", // eco Big Room Inc.\n        \"edeka\", // edeka EDEKA Verband kaufm\u00e4nnischer Genossenschaften e.V.\n        \"edu\", // edu EDUCAUSE\n        \"education\", // education Brice Way, LLC\n        \"email\", // email Spring Madison, LLC\n        \"emerck\", // emerck Merck KGaA\n        \"energy\", // energy Binky Birch, LLC\n        \"engineer\", // engineer United TLD Holdco Ltd.\n        \"engineering\", // engineering Romeo Canyon\n        \"enterprises\", // enterprises Snow Oaks, LLC\n//        \"epost\", // epost Deutsche Post AG\n        \"epson\", // epson Seiko Epson Corporation\n        \"equipment\", // equipment Corn Station, LLC\n        \"ericsson\", // ericsson Telefonaktiebolaget L M Ericsson\n        \"erni\", // erni ERNI Group Holding AG\n        \"esq\", // esq Charleston Road Registry Inc.\n        \"estate\", // estate Trixy Park, LLC\n        // \"esurance\", // esurance Esurance Insurance Company (not assigned as at Version 2020062100)\n        // \"etisalat\", // etisalat Emirates Telecommunic\n        \"eurovision\", // eurovision European Broadcasting Union (EBU)\n        \"eus\", // eus Puntueus Fundazioa\n        \"events\", // events Pioneer Maple, LLC\n//        \"everbank\", // everbank EverBank\n        \"exchange\", // exchange Spring Falls, LLC\n        \"expert\", // expert Magic Pass, LLC\n        \"exposed\", // exposed Victor Beach, LLC\n        \"express\", // express Sea Sunset, LLC\n        \"extraspace\", // extraspace Extra Space Storage LLC\n        \"fage\", // fage Fage International S.A.\n        \"fail\", // fail Atomic Pipe, LLC\n        \"fairwinds\", // fairwinds FairWinds Partners, LLC\n        \"faith\", // faith dot Faith Limited\n        \"family\", // family United TLD Holdco Ltd.\n        \"fan\", // fan Asiamix Digital Ltd\n        \"fans\", // fans Asiamix Digital Limited\n        \"farm\", // farm Just Maple, LLC\n        \"farmers\", // farmers Farmers Insurance Exchange\n        \"fashion\", // fashion Top Level Domain Holdings Limited\n        \"fast\", // fast Amazon Registry Services, Inc.\n        \"fedex\", // fedex Federal Express Corporation\n        \"feedback\", // feedback Top Level Spectrum, Inc.\n        \"ferrari\", // ferrari Fiat Chrysler Automobiles N.V.\n        \"ferrero\", // ferrero Ferrero Trading Lux S.A.\n        // \"fiat\", // fiat Fiat Chrysler Automobiles N.V.\n        \"fidelity\", // fidelity Fidelity Brokerage Services LLC\n        \"fido\", // fido Rogers Communications Canada Inc.\n        \"film\", // film Motion Picture Domain Registry Pty Ltd\n        \"final\", // final N\u00facleo de Informa\u00e7\u00e3o e Coordena\u00e7\u00e3o do Ponto BR - NIC.br\n        \"finance\", // finance Cotton Cypress, LLC\n        \"financial\", // financial Just Cover, LLC\n        \"fire\", // fire Amazon Registry Services, Inc.\n        \"firestone\", // firestone Bridgestone Corporation\n        \"firmdale\", // firmdale Firmdale Holdings Limited\n        \"fish\", // fish Fox Woods, LLC\n        \"fishing\", // fishing Top Level Domain Holdings Limited\n        \"fit\", // fit Minds + Machines Group Limited\n        \"fitness\", // fitness Brice Orchard, LLC\n        \"flickr\", // flickr Yahoo! Domain Services Inc.\n        \"flights\", // flights Fox Station, LLC\n        \"flir\", // flir FLIR Systems, Inc.\n        \"florist\", // florist Half Cypress, LLC\n        \"flowers\", // flowers Uniregistry, Corp.\n//        \"flsmidth\", // flsmidth FLSmidth A/S retired 2016-07-22\n        \"fly\", // fly Charleston Road Registry Inc.\n        \"foo\", // foo Charleston Road Registry Inc.\n        \"food\", // food Lifestyle Domain Holdings, Inc.\n        // \"foodnetwork\", // foodnetwork Lifestyle Domain Holdings, Inc.\n        \"football\", // football Foggy Farms, LLC\n        \"ford\", // ford Ford Motor Company\n        \"forex\", // forex DOTFOREX REGISTRY LTD\n        \"forsale\", // forsale United TLD Holdco, LLC\n        \"forum\", // forum Fegistry, LLC\n        \"foundation\", // foundation John Dale, LLC\n        \"fox\", // fox FOX Registry, LLC\n        \"free\", // free Amazon Registry Services, Inc.\n        \"fresenius\", // fresenius Fresenius Immobilien-Verwaltungs-GmbH\n        \"frl\", // frl FRLregistry B.V.\n        \"frogans\", // frogans OP3FT\n        // \"frontdoor\", // frontdoor Lifestyle Domain Holdings, Inc.\n        \"frontier\", // frontier Frontier Communications Corporation\n        \"ftr\", // ftr Frontier Communications Corporation\n        \"fujitsu\", // fujitsu Fujitsu Limited\n//        \"fujixerox\", // fujixerox Xerox DNHC LLC\n        \"fun\", // fun DotSpace, Inc.\n        \"fund\", // fund John Castle, LLC\n        \"furniture\", // furniture Lone Fields, LLC\n        \"futbol\", // futbol United TLD Holdco, Ltd.\n        \"fyi\", // fyi Silver Tigers, LLC\n        \"gal\", // gal Asociaci\u00f3n puntoGAL\n        \"gallery\", // gallery Sugar House, LLC\n        \"gallo\", // gallo Gallo Vineyards, Inc.\n        \"gallup\", // gallup Gallup, Inc.\n        \"game\", // game Uniregistry, Corp.\n        \"games\", // games United TLD Holdco Ltd.\n        \"gap\", // gap The Gap, Inc.\n        \"garden\", // garden Top Level Domain Holdings Limited\n        \"gay\", // gay Top Level Design, LLC\n        \"gbiz\", // gbiz Charleston Road Registry Inc.\n        \"gdn\", // gdn Joint Stock Company \"Navigation-information systems\"\n        \"gea\", // gea GEA Group Aktiengesellschaft\n        \"gent\", // gent COMBELL GROUP NV/SA\n        \"genting\", // genting Resorts World Inc. Pte. Ltd.\n        \"george\", // george Wal-Mart Stores, Inc.\n        \"ggee\", // ggee GMO Internet, Inc.\n        \"gift\", // gift Uniregistry, Corp.\n        \"gifts\", // gifts Goose Sky, LLC\n        \"gives\", // gives United TLD Holdco Ltd.\n        \"giving\", // giving Giving Limited\n//        \"glade\", // glade Johnson Shareholdings, Inc.\n        \"glass\", // glass Black Cover, LLC\n        \"gle\", // gle Charleston Road Registry Inc.\n        \"global\", // global Dot Global Domain Registry Limited\n        \"globo\", // globo Globo Comunica\u00e7\u00e3o e Participa\u00e7\u00f5es S.A\n        \"gmail\", // gmail Charleston Road Registry Inc.\n        \"gmbh\", // gmbh Extra Dynamite, LLC\n        \"gmo\", // gmo GMO Internet, Inc.\n        \"gmx\", // gmx 1&amp;1 Mail &amp; Media GmbH\n        \"godaddy\", // godaddy Go Daddy East, LLC\n        \"gold\", // gold June Edge, LLC\n        \"goldpoint\", // goldpoint YODOBASHI CAMERA CO.,LTD.\n        \"golf\", // golf Lone Falls, LLC\n        \"goo\", // goo NTT Resonant Inc.\n//        \"goodhands\", // goodhands Allstate Fire and Casualty Insurance Company\n        \"goodyear\", // goodyear The Goodyear Tire &amp; Rubber Company\n        \"goog\", // goog Charleston Road Registry Inc.\n        \"google\", // google Charleston Road Registry Inc.\n        \"gop\", // gop Republican State Leadership Committee, Inc.\n        \"got\", // got Amazon Registry Services, Inc.\n        \"gov\", // gov General Services Administration Attn: QTDC, 2E08 (.gov Domain Registration)\n        \"grainger\", // grainger Grainger Registry Services, LLC\n        \"graphics\", // graphics Over Madison, LLC\n        \"gratis\", // gratis Pioneer Tigers, LLC\n        \"green\", // green Afilias Limited\n        \"gripe\", // gripe Corn Sunset, LLC\n        \"grocery\", // grocery Wal-Mart Stores, Inc.\n        \"group\", // group Romeo Town, LLC\n        // \"guardian\", // guardian The Guardian Life Insurance Company of America\n        \"gucci\", // gucci Guccio Gucci S.p.a.\n        \"guge\", // guge Charleston Road Registry Inc.\n        \"guide\", // guide Snow Moon, LLC\n        \"guitars\", // guitars Uniregistry, Corp.\n        \"guru\", // guru Pioneer Cypress, LLC\n        \"hair\", // hair L&#39;Oreal\n        \"hamburg\", // hamburg Hamburg Top-Level-Domain GmbH\n        \"hangout\", // hangout Charleston Road Registry Inc.\n        \"haus\", // haus United TLD Holdco, LTD.\n        \"hbo\", // hbo HBO Registry Services, Inc.\n        \"hdfc\", // hdfc HOUSING DEVELOPMENT FINANCE CORPORATION LIMITED\n        \"hdfcbank\", // hdfcbank HDFC Bank Limited\n        \"health\", // health DotHealth, LLC\n        \"healthcare\", // healthcare Silver Glen, LLC\n        \"help\", // help Uniregistry, Corp.\n        \"helsinki\", // helsinki City of Helsinki\n        \"here\", // here Charleston Road Registry Inc.\n        \"hermes\", // hermes Hermes International\n        // \"hgtv\", // hgtv Lifestyle Domain Holdings, Inc.\n        \"hiphop\", // hiphop Uniregistry, Corp.\n        \"hisamitsu\", // hisamitsu Hisamitsu Pharmaceutical Co.,Inc.\n        \"hitachi\", // hitachi Hitachi, Ltd.\n        \"hiv\", // hiv dotHIV gemeinnuetziger e.V.\n        \"hkt\", // hkt PCCW-HKT DataCom Services Limited\n        \"hockey\", // hockey Half Willow, LLC\n        \"holdings\", // holdings John Madison, LLC\n        \"holiday\", // holiday Goose Woods, LLC\n        \"homedepot\", // homedepot Homer TLC, Inc.\n        \"homegoods\", // homegoods The TJX Companies, Inc.\n        \"homes\", // homes DERHomes, LLC\n        \"homesense\", // homesense The TJX Companies, Inc.\n        \"honda\", // honda Honda Motor Co., Ltd.\n//        \"honeywell\", // honeywell Honeywell GTLD LLC\n        \"horse\", // horse Top Level Domain Holdings Limited\n        \"hospital\", // hospital Ruby Pike, LLC\n        \"host\", // host DotHost Inc.\n        \"hosting\", // hosting Uniregistry, Corp.\n        \"hot\", // hot Amazon Registry Services, Inc.\n        // \"hoteles\", // hoteles Travel Reservations SRL\n        \"hotels\", // hotels Booking.com B.V.\n        \"hotmail\", // hotmail Microsoft Corporation\n        \"house\", // house Sugar Park, LLC\n        \"how\", // how Charleston Road Registry Inc.\n        \"hsbc\", // hsbc HSBC Holdings PLC\n//        \"htc\", // htc HTC corporation (Not assigned)\n        \"hughes\", // hughes Hughes Satellite Systems Corporation\n        \"hyatt\", // hyatt Hyatt GTLD, L.L.C.\n        \"hyundai\", // hyundai Hyundai Motor Company\n        \"ibm\", // ibm International Business Machines Corporation\n        \"icbc\", // icbc Industrial and Commercial Bank of China Limited\n        \"ice\", // ice IntercontinentalExchange, Inc.\n        \"icu\", // icu One.com A/S\n        \"ieee\", // ieee IEEE Global LLC\n        \"ifm\", // ifm ifm electronic gmbh\n//        \"iinet\", // iinet Connect West Pty. Ltd. (Retired)\n        \"ikano\", // ikano Ikano S.A.\n        \"imamat\", // imamat Fondation Aga Khan (Aga Khan Foundation)\n        \"imdb\", // imdb Amazon Registry Services, Inc.\n        \"immo\", // immo Auburn Bloom, LLC\n        \"immobilien\", // immobilien United TLD Holdco Ltd.\n        \"inc\", // inc Intercap Holdings Inc.\n        \"industries\", // industries Outer House, LLC\n        \"infiniti\", // infiniti NISSAN MOTOR CO., LTD.\n        \"info\", // info Afilias Limited\n        \"ing\", // ing Charleston Road Registry Inc.\n        \"ink\", // ink Top Level Design, LLC\n        \"institute\", // institute Outer Maple, LLC\n        \"insurance\", // insurance fTLD Registry Services LLC\n        \"insure\", // insure Pioneer Willow, LLC\n        \"int\", // int Internet Assigned Numbers Authority\n//        \"intel\", // intel Intel Corporation\n        \"international\", // international Wild Way, LLC\n        \"intuit\", // intuit Intuit Administrative Services, Inc.\n        \"investments\", // investments Holly Glen, LLC\n        \"ipiranga\", // ipiranga Ipiranga Produtos de Petroleo S.A.\n        \"irish\", // irish Dot-Irish LLC\n//        \"iselect\", // iselect iSelect Ltd\n        \"ismaili\", // ismaili Fondation Aga Khan (Aga Khan Foundation)\n        \"ist\", // ist Istanbul Metropolitan Municipality\n        \"istanbul\", // istanbul Istanbul Metropolitan Municipality / Medya A.S.\n        \"itau\", // itau Itau Unibanco Holding S.A.\n        \"itv\", // itv ITV Services Limited\n//        \"iveco\", // iveco CNH Industrial N.V.\n//        \"iwc\", // iwc Richemont DNS Inc.\n        \"jaguar\", // jaguar Jaguar Land Rover Ltd\n        \"java\", // java Oracle Corporation\n        \"jcb\", // jcb JCB Co., Ltd.\n//        \"jcp\", // jcp JCP Media, Inc.\n        \"jeep\", // jeep FCA US LLC.\n        \"jetzt\", // jetzt New TLD Company AB\n        \"jewelry\", // jewelry Wild Bloom, LLC\n        \"jio\", // jio Affinity Names, Inc.\n//        \"jlc\", // jlc Richemont DNS Inc.\n        \"jll\", // jll Jones Lang LaSalle Incorporated\n        \"jmp\", // jmp Matrix IP LLC\n        \"jnj\", // jnj Johnson &amp; Johnson Services, Inc.\n        \"jobs\", // jobs Employ Media LLC\n        \"joburg\", // joburg ZA Central Registry NPC trading as ZA Central Registry\n        \"jot\", // jot Amazon Registry Services, Inc.\n        \"joy\", // joy Amazon Registry Services, Inc.\n        \"jpmorgan\", // jpmorgan JPMorgan Chase &amp; Co.\n        \"jprs\", // jprs Japan Registry Services Co., Ltd.\n        \"juegos\", // juegos Uniregistry, Corp.\n        \"juniper\", // juniper JUNIPER NETWORKS, INC.\n        \"kaufen\", // kaufen United TLD Holdco Ltd.\n        \"kddi\", // kddi KDDI CORPORATION\n        \"kerryhotels\", // kerryhotels Kerry Trading Co. Limited\n        \"kerrylogistics\", // kerrylogistics Kerry Trading Co. Limited\n        \"kerryproperties\", // kerryproperties Kerry Trading Co. Limited\n        \"kfh\", // kfh Kuwait Finance House\n        \"kia\", // kia KIA MOTORS CORPORATION\n        \"kids\", // kids DotKids Foundation Limited\n        \"kim\", // kim Afilias Limited\n        // \"kinder\", // kinder Ferrero Trading Lux S.A.\n        \"kindle\", // kindle Amazon Registry Services, Inc.\n        \"kitchen\", // kitchen Just Goodbye, LLC\n        \"kiwi\", // kiwi DOT KIWI LIMITED\n        \"koeln\", // koeln NetCologne Gesellschaft f\u00fcr Telekommunikation mbH\n        \"komatsu\", // komatsu Komatsu Ltd.\n        \"kosher\", // kosher Kosher Marketing Assets LLC\n        \"kpmg\", // kpmg KPMG International Cooperative (KPMG International Genossenschaft)\n        \"kpn\", // kpn Koninklijke KPN N.V.\n        \"krd\", // krd KRG Department of Information Technology\n        \"kred\", // kred KredTLD Pty Ltd\n        \"kuokgroup\", // kuokgroup Kerry Trading Co. Limited\n        \"kyoto\", // kyoto Academic Institution: Kyoto Jyoho Gakuen\n        \"lacaixa\", // lacaixa CAIXA D&#39;ESTALVIS I PENSIONS DE BARCELONA\n//        \"ladbrokes\", // ladbrokes LADBROKES INTERNATIONAL PLC\n        \"lamborghini\", // lamborghini Automobili Lamborghini S.p.A.\n        \"lamer\", // lamer The Est\u00e9e Lauder Companies Inc.\n        \"lancaster\", // lancaster LANCASTER\n        // \"lancia\", // lancia Fiat Chrysler Automobiles N.V.\n//        \"lancome\", // lancome L&#39;Or\u00e9al\n        \"land\", // land Pine Moon, LLC\n        \"landrover\", // landrover Jaguar Land Rover Ltd\n        \"lanxess\", // lanxess LANXESS Corporation\n        \"lasalle\", // lasalle Jones Lang LaSalle Incorporated\n        \"lat\", // lat ECOM-LAC Federaci\u00f3n de Latinoam\u00e9rica y el Caribe para Internet y el Comercio Electr\u00f3nico\n        \"latino\", // latino Dish DBS Corporation\n        \"latrobe\", // latrobe La Trobe University\n        \"law\", // law Minds + Machines Group Limited\n        \"lawyer\", // lawyer United TLD Holdco, Ltd\n        \"lds\", // lds IRI Domain Management, LLC\n        \"lease\", // lease Victor Trail, LLC\n        \"leclerc\", // leclerc A.C.D. LEC Association des Centres Distributeurs Edouard Leclerc\n        \"lefrak\", // lefrak LeFrak Organization, Inc.\n        \"legal\", // legal Blue Falls, LLC\n        \"lego\", // lego LEGO Juris A/S\n        \"lexus\", // lexus TOYOTA MOTOR CORPORATION\n        \"lgbt\", // lgbt Afilias Limited\n//        \"liaison\", // liaison Liaison Technologies, Incorporated\n        \"lidl\", // lidl Schwarz Domains und Services GmbH &amp; Co. KG\n        \"life\", // life Trixy Oaks, LLC\n        \"lifeinsurance\", // lifeinsurance American Council of Life Insurers\n        \"lifestyle\", // lifestyle Lifestyle Domain Holdings, Inc.\n        \"lighting\", // lighting John McCook, LLC\n        \"like\", // like Amazon Registry Services, Inc.\n        \"lilly\", // lilly Eli Lilly and Company\n        \"limited\", // limited Big Fest, LLC\n        \"limo\", // limo Hidden Frostbite, LLC\n        \"lincoln\", // lincoln Ford Motor Company\n        // \"linde\", // linde Linde Aktiengesellschaft\n        \"link\", // link Uniregistry, Corp.\n        \"lipsy\", // lipsy Lipsy Ltd\n        \"live\", // live United TLD Holdco Ltd.\n        \"living\", // living Lifestyle Domain Holdings, Inc.\n//        \"lixil\", // lixil LIXIL Group Corporation\n        \"llc\", // llc Afilias plc\n        \"llp\", // llp Dot Registry LLC\n        \"loan\", // loan dot Loan Limited\n        \"loans\", // loans June Woods, LLC\n        \"locker\", // locker Dish DBS Corporation\n        \"locus\", // locus Locus Analytics LLC\n//        \"loft\", // loft Annco, Inc.\n        \"lol\", // lol Uniregistry, Corp.\n        \"london\", // london Dot London Domains Limited\n        \"lotte\", // lotte Lotte Holdings Co., Ltd.\n        \"lotto\", // lotto Afilias Limited\n        \"love\", // love Merchant Law Group LLP\n        \"lpl\", // lpl LPL Holdings, Inc.\n        \"lplfinancial\", // lplfinancial LPL Holdings, Inc.\n        \"ltd\", // ltd Over Corner, LLC\n        \"ltda\", // ltda InterNetX Corp.\n        \"lundbeck\", // lundbeck H. Lundbeck A/S\n//        \"lupin\", // lupin LUPIN LIMITED\n        \"luxe\", // luxe Top Level Domain Holdings Limited\n        \"luxury\", // luxury Luxury Partners LLC\n        // \"macys\", // macys Macys, Inc.\n        \"madrid\", // madrid Comunidad de Madrid\n        \"maif\", // maif Mutuelle Assurance Instituteur France (MAIF)\n        \"maison\", // maison Victor Frostbite, LLC\n        \"makeup\", // makeup L&#39;Or\u00e9al\n        \"man\", // man MAN SE\n        \"management\", // management John Goodbye, LLC\n        \"mango\", // mango PUNTO FA S.L.\n        \"map\", // map Charleston Road Registry Inc.\n        \"market\", // market Unitied TLD Holdco, Ltd\n        \"marketing\", // marketing Fern Pass, LLC\n        \"markets\", // markets DOTMARKETS REGISTRY LTD\n        \"marriott\", // marriott Marriott Worldwide Corporation\n        \"marshalls\", // marshalls The TJX Companies, Inc.\n        // \"maserati\", // maserati Fiat Chrysler Automobiles N.V.\n        \"mattel\", // mattel Mattel Sites, Inc.\n        \"mba\", // mba Lone Hollow, LLC\n//        \"mcd\", // mcd McDonald\u2019s Corporation (Not assigned)\n//        \"mcdonalds\", // mcdonalds McDonald\u2019s Corporation (Not assigned)\n        \"mckinsey\", // mckinsey McKinsey Holdings, Inc.\n        \"med\", // med Medistry LLC\n        \"media\", // media Grand Glen, LLC\n        \"meet\", // meet Afilias Limited\n        \"melbourne\", // melbourne The Crown in right of the State of Victoria, represented by its Department of State Development, Business and Innovation\n        \"meme\", // meme Charleston Road Registry Inc.\n        \"memorial\", // memorial Dog Beach, LLC\n        \"men\", // men Exclusive Registry Limited\n        \"menu\", // menu Wedding TLD2, LLC\n//        \"meo\", // meo PT Comunicacoes S.A.\n        \"merckmsd\", // merckmsd MSD Registry Holdings, Inc.\n//        \"metlife\", // metlife MetLife Services and Solutions, LLC\n        \"miami\", // miami Top Level Domain Holdings Limited\n        \"microsoft\", // microsoft Microsoft Corporation\n        \"mil\", // mil DoD Network Information Center\n        \"mini\", // mini Bayerische Motoren Werke Aktiengesellschaft\n        \"mint\", // mint Intuit Administrative Services, Inc.\n        \"mit\", // mit Massachusetts Institute of Technology\n        \"mitsubishi\", // mitsubishi Mitsubishi Corporation\n        \"mlb\", // mlb MLB Advanced Media DH, LLC\n        \"mls\", // mls The Canadian Real Estate Association\n        \"mma\", // mma MMA IARD\n        \"mobi\", // mobi Afilias Technologies Limited dba dotMobi\n        \"mobile\", // mobile Dish DBS Corporation\n//        \"mobily\", // mobily GreenTech Consultancy Company W.L.L.\n        \"moda\", // moda United TLD Holdco Ltd.\n        \"moe\", // moe Interlink Co., Ltd.\n        \"moi\", // moi Amazon Registry Services, Inc.\n        \"mom\", // mom Uniregistry, Corp.\n        \"monash\", // monash Monash University\n        \"money\", // money Outer McCook, LLC\n        \"monster\", // monster Monster Worldwide, Inc.\n//        \"montblanc\", // montblanc Richemont DNS Inc. (Not assigned)\n//        \"mopar\", // mopar FCA US LLC.\n        \"mormon\", // mormon IRI Domain Management, LLC (&quot;Applicant&quot;)\n        \"mortgage\", // mortgage United TLD Holdco, Ltd\n        \"moscow\", // moscow Foundation for Assistance for Internet Technologies and Infrastructure Development (FAITID)\n        \"moto\", // moto Motorola Trademark Holdings, LLC\n        \"motorcycles\", // motorcycles DERMotorcycles, LLC\n        \"mov\", // mov Charleston Road Registry Inc.\n        \"movie\", // movie New Frostbite, LLC\n//        \"movistar\", // movistar Telef\u00f3nica S.A.\n        \"msd\", // msd MSD Registry Holdings, Inc.\n        \"mtn\", // mtn MTN Dubai Limited\n//        \"mtpc\", // mtpc Mitsubishi Tanabe Pharma Corporation (Retired)\n        \"mtr\", // mtr MTR Corporation Limited\n        \"museum\", // museum Museum Domain Management Association\n        \"music\", // music DotMusic Limited\n        // \"mutual\", // mutual Northwestern Mutual MU TLD Registry, LLC\n//        \"mutuelle\", // mutuelle F\u00e9d\u00e9ration Nationale de la Mutualit\u00e9 Fran\u00e7aise (Retired)\n        \"nab\", // nab National Australia Bank Limited\n//        \"nadex\", // nadex Nadex Domains, Inc\n        \"nagoya\", // nagoya GMO Registry, Inc.\n        \"name\", // name VeriSign Information Services, Inc.\n//        \"nationwide\", // nationwide Nationwide Mutual Insurance Company\n        \"natura\", // natura NATURA COSM\u00c9TICOS S.A.\n        \"navy\", // navy United TLD Holdco Ltd.\n        \"nba\", // nba NBA REGISTRY, LLC\n        \"nec\", // nec NEC Corporation\n        \"net\", // net VeriSign Global Registry Services\n        \"netbank\", // netbank COMMONWEALTH BANK OF AUSTRALIA\n        \"netflix\", // netflix Netflix, Inc.\n        \"network\", // network Trixy Manor, LLC\n        \"neustar\", // neustar NeuStar, Inc.\n        \"new\", // new Charleston Road Registry Inc.\n//        \"newholland\", // newholland CNH Industrial N.V.\n        \"news\", // news United TLD Holdco Ltd.\n        \"next\", // next Next plc\n        \"nextdirect\", // nextdirect Next plc\n        \"nexus\", // nexus Charleston Road Registry Inc.\n        \"nfl\", // nfl NFL Reg Ops LLC\n        \"ngo\", // ngo Public Interest Registry\n        \"nhk\", // nhk Japan Broadcasting Corporation (NHK)\n        \"nico\", // nico DWANGO Co., Ltd.\n        \"nike\", // nike NIKE, Inc.\n        \"nikon\", // nikon NIKON CORPORATION\n        \"ninja\", // ninja United TLD Holdco Ltd.\n        \"nissan\", // nissan NISSAN MOTOR CO., LTD.\n        \"nissay\", // nissay Nippon Life Insurance Company\n        \"nokia\", // nokia Nokia Corporation\n        // \"northwesternmutual\", // northwesternmutual Northwestern Mutual Registry, LLC\n        \"norton\", // norton Symantec Corporation\n        \"now\", // now Amazon Registry Services, Inc.\n        \"nowruz\", // nowruz Asia Green IT System Bilgisayar San. ve Tic. Ltd. Sti.\n        \"nowtv\", // nowtv Starbucks (HK) Limited\n        \"nra\", // nra NRA Holdings Company, INC.\n        \"nrw\", // nrw Minds + Machines GmbH\n        \"ntt\", // ntt NIPPON TELEGRAPH AND TELEPHONE CORPORATION\n        \"nyc\", // nyc The City of New York by and through the New York City Department of Information Technology &amp; Telecommunications\n        \"obi\", // obi OBI Group Holding SE &amp; Co. KGaA\n        \"observer\", // observer Top Level Spectrum, Inc.\n//        \"off\", // off Johnson Shareholdings, Inc.\n        \"office\", // office Microsoft Corporation\n        \"okinawa\", // okinawa BusinessRalliart inc.\n        \"olayan\", // olayan Crescent Holding GmbH\n        \"olayangroup\", // olayangroup Crescent Holding GmbH\n        // \"oldnavy\", // oldnavy The Gap, Inc.\n        \"ollo\", // ollo Dish DBS Corporation\n        \"omega\", // omega The Swatch Group Ltd\n        \"one\", // one One.com A/S\n        \"ong\", // ong Public Interest Registry\n        \"onl\", // onl I-REGISTRY Ltd., Niederlassung Deutschland\n        \"online\", // online DotOnline Inc.\n//        \"onyourside\", // onyourside Nationwide Mutual Insurance Company\n        \"ooo\", // ooo INFIBEAM INCORPORATION LIMITED\n        \"open\", // open American Express Travel Related Services Company, Inc.\n        \"oracle\", // oracle Oracle Corporation\n        \"orange\", // orange Orange Brand Services Limited\n        \"org\", // org Public Interest Registry (PIR)\n        \"organic\", // organic Afilias Limited\n//        \"orientexpress\", // orientexpress Orient Express (retired 2017-04-11)\n        \"origins\", // origins The Est\u00e9e Lauder Companies Inc.\n        \"osaka\", // osaka Interlink Co., Ltd.\n        \"otsuka\", // otsuka Otsuka Holdings Co., Ltd.\n        \"ott\", // ott Dish DBS Corporation\n        \"ovh\", // ovh OVH SAS\n        \"page\", // page Charleston Road Registry Inc.\n//        \"pamperedchef\", // pamperedchef The Pampered Chef, Ltd. (Not assigned)\n        \"panasonic\", // panasonic Panasonic Corporation\n//        \"panerai\", // panerai Richemont DNS Inc.\n        \"paris\", // paris City of Paris\n        \"pars\", // pars Asia Green IT System Bilgisayar San. ve Tic. Ltd. Sti.\n        \"partners\", // partners Magic Glen, LLC\n        \"parts\", // parts Sea Goodbye, LLC\n        \"party\", // party Blue Sky Registry Limited\n        // \"passagens\", // passagens Travel Reservations SRL\n        \"pay\", // pay Amazon Registry Services, Inc.\n        \"pccw\", // pccw PCCW Enterprises Limited\n        \"pet\", // pet Afilias plc\n        \"pfizer\", // pfizer Pfizer Inc.\n        \"pharmacy\", // pharmacy National Association of Boards of Pharmacy\n        \"phd\", // phd Charleston Road Registry Inc.\n        \"philips\", // philips Koninklijke Philips N.V.\n        \"phone\", // phone Dish DBS Corporation\n        \"photo\", // photo Uniregistry, Corp.\n        \"photography\", // photography Sugar Glen, LLC\n        \"photos\", // photos Sea Corner, LLC\n        \"physio\", // physio PhysBiz Pty Ltd\n//        \"piaget\", // piaget Richemont DNS Inc.\n        \"pics\", // pics Uniregistry, Corp.\n        \"pictet\", // pictet Pictet Europe S.A.\n        \"pictures\", // pictures Foggy Sky, LLC\n        \"pid\", // pid Top Level Spectrum, Inc.\n        \"pin\", // pin Amazon Registry Services, Inc.\n        \"ping\", // ping Ping Registry Provider, Inc.\n        \"pink\", // pink Afilias Limited\n        \"pioneer\", // pioneer Pioneer Corporation\n        \"pizza\", // pizza Foggy Moon, LLC\n        \"place\", // place Snow Galley, LLC\n        \"play\", // play Charleston Road Registry Inc.\n        \"playstation\", // playstation Sony Computer Entertainment Inc.\n        \"plumbing\", // plumbing Spring Tigers, LLC\n        \"plus\", // plus Sugar Mill, LLC\n        \"pnc\", // pnc PNC Domain Co., LLC\n        \"pohl\", // pohl Deutsche Verm\u00f6gensberatung Aktiengesellschaft DVAG\n        \"poker\", // poker Afilias Domains No. 5 Limited\n        \"politie\", // politie Politie Nederland\n        \"porn\", // porn ICM Registry PN LLC\n        \"post\", // post Universal Postal Union\n        \"pramerica\", // pramerica Prudential Financial, Inc.\n        \"praxi\", // praxi Praxi S.p.A.\n        \"press\", // press DotPress Inc.\n        \"prime\", // prime Amazon Registry Services, Inc.\n        \"pro\", // pro Registry Services Corporation dba RegistryPro\n        \"prod\", // prod Charleston Road Registry Inc.\n        \"productions\", // productions Magic Birch, LLC\n        \"prof\", // prof Charleston Road Registry Inc.\n        \"progressive\", // progressive Progressive Casualty Insurance Company\n        \"promo\", // promo Afilias plc\n        \"properties\", // properties Big Pass, LLC\n        \"property\", // property Uniregistry, Corp.\n        \"protection\", // protection XYZ.COM LLC\n        \"pru\", // pru Prudential Financial, Inc.\n        \"prudential\", // prudential Prudential Financial, Inc.\n        \"pub\", // pub United TLD Holdco Ltd.\n        \"pwc\", // pwc PricewaterhouseCoopers LLP\n        \"qpon\", // qpon dotCOOL, Inc.\n        \"quebec\", // quebec PointQu\u00e9bec Inc\n        \"quest\", // quest Quest ION Limited\n//        \"qvc\", // qvc QVC, Inc.\n        \"racing\", // racing Premier Registry Limited\n        \"radio\", // radio European Broadcasting Union (EBU)\n//        \"raid\", // raid Johnson Shareholdings, Inc.\n        \"read\", // read Amazon Registry Services, Inc.\n        \"realestate\", // realestate dotRealEstate LLC\n        \"realtor\", // realtor Real Estate Domains LLC\n        \"realty\", // realty Fegistry, LLC\n        \"recipes\", // recipes Grand Island, LLC\n        \"red\", // red Afilias Limited\n        \"redstone\", // redstone Redstone Haute Couture Co., Ltd.\n        \"redumbrella\", // redumbrella Travelers TLD, LLC\n        \"rehab\", // rehab United TLD Holdco Ltd.\n        \"reise\", // reise Foggy Way, LLC\n        \"reisen\", // reisen New Cypress, LLC\n        \"reit\", // reit National Association of Real Estate Investment Trusts, Inc.\n        \"reliance\", // reliance Reliance Industries Limited\n        \"ren\", // ren Beijing Qianxiang Wangjing Technology Development Co., Ltd.\n        \"rent\", // rent XYZ.COM LLC\n        \"rentals\", // rentals Big Hollow,LLC\n        \"repair\", // repair Lone Sunset, LLC\n        \"report\", // report Binky Glen, LLC\n        \"republican\", // republican United TLD Holdco Ltd.\n        \"rest\", // rest Punto 2012 Sociedad Anonima Promotora de Inversion de Capital Variable\n        \"restaurant\", // restaurant Snow Avenue, LLC\n        \"review\", // review dot Review Limited\n        \"reviews\", // reviews United TLD Holdco, Ltd.\n        \"rexroth\", // rexroth Robert Bosch GMBH\n        \"rich\", // rich I-REGISTRY Ltd., Niederlassung Deutschland\n        \"richardli\", // richardli Pacific Century Asset Management (HK) Limited\n        \"ricoh\", // ricoh Ricoh Company, Ltd.\n        // \"rightathome\", // rightathome Johnson Shareholdings, Inc. (retired 2020-07-31)\n        \"ril\", // ril Reliance Industries Limited\n        \"rio\", // rio Empresa Municipal de Inform\u00e1tica SA - IPLANRIO\n        \"rip\", // rip United TLD Holdco Ltd.\n//        \"rmit\", // rmit Royal Melbourne Institute of Technology\n        // \"rocher\", // rocher Ferrero Trading Lux S.A.\n        \"rocks\", // rocks United TLD Holdco, LTD.\n        \"rodeo\", // rodeo Top Level Domain Holdings Limited\n        \"rogers\", // rogers Rogers Communications Canada Inc.\n        \"room\", // room Amazon Registry Services, Inc.\n        \"rsvp\", // rsvp Charleston Road Registry Inc.\n        \"rugby\", // rugby World Rugby Strategic Developments Limited\n        \"ruhr\", // ruhr regiodot GmbH &amp; Co. KG\n        \"run\", // run Snow Park, LLC\n        \"rwe\", // rwe RWE AG\n        \"ryukyu\", // ryukyu BusinessRalliart inc.\n        \"saarland\", // saarland dotSaarland GmbH\n        \"safe\", // safe Amazon Registry Services, Inc.\n        \"safety\", // safety Safety Registry Services, LLC.\n        \"sakura\", // sakura SAKURA Internet Inc.\n        \"sale\", // sale United TLD Holdco, Ltd\n        \"salon\", // salon Outer Orchard, LLC\n        \"samsclub\", // samsclub Wal-Mart Stores, Inc.\n        \"samsung\", // samsung SAMSUNG SDS CO., LTD\n        \"sandvik\", // sandvik Sandvik AB\n        \"sandvikcoromant\", // sandvikcoromant Sandvik AB\n        \"sanofi\", // sanofi Sanofi\n        \"sap\", // sap SAP AG\n//        \"sapo\", // sapo PT Comunicacoes S.A.\n        \"sarl\", // sarl Delta Orchard, LLC\n        \"sas\", // sas Research IP LLC\n        \"save\", // save Amazon Registry Services, Inc.\n        \"saxo\", // saxo Saxo Bank A/S\n        \"sbi\", // sbi STATE BANK OF INDIA\n        \"sbs\", // sbs SPECIAL BROADCASTING SERVICE CORPORATION\n        // \"sca\", // sca SVENSKA CELLULOSA AKTIEBOLAGET SCA (publ)\n        \"scb\", // scb The Siam Commercial Bank Public Company Limited (&quot;SCB&quot;)\n        \"schaeffler\", // schaeffler Schaeffler Technologies AG &amp; Co. KG\n        \"schmidt\", // schmidt SALM S.A.S.\n        \"scholarships\", // scholarships Scholarships.com, LLC\n        \"school\", // school Little Galley, LLC\n        \"schule\", // schule Outer Moon, LLC\n        \"schwarz\", // schwarz Schwarz Domains und Services GmbH &amp; Co. KG\n        \"science\", // science dot Science Limited\n//        \"scjohnson\", // scjohnson Johnson Shareholdings, Inc.\n        // \"scor\", // scor SCOR SE (not assigned as at Version 2020062100)\n        \"scot\", // scot Dot Scot Registry Limited\n        \"search\", // search Charleston Road Registry Inc.\n        \"seat\", // seat SEAT, S.A. (Sociedad Unipersonal)\n        \"secure\", // secure Amazon Registry Services, Inc.\n        \"security\", // security XYZ.COM LLC\n        \"seek\", // seek Seek Limited\n        \"select\", // select iSelect Ltd\n        \"sener\", // sener Sener Ingenier\u00eda y Sistemas, S.A.\n        \"services\", // services Fox Castle, LLC\n//        \"ses\", // ses SES\n        \"seven\", // seven Seven West Media Ltd\n        \"sew\", // sew SEW-EURODRIVE GmbH &amp; Co KG\n        \"sex\", // sex ICM Registry SX LLC\n        \"sexy\", // sexy Uniregistry, Corp.\n        \"sfr\", // sfr Societe Francaise du Radiotelephone - SFR\n        \"shangrila\", // shangrila Shangri\u2010La International Hotel Management Limited\n        \"sharp\", // sharp Sharp Corporation\n        \"shaw\", // shaw Shaw Cablesystems G.P.\n        \"shell\", // shell Shell Information Technology International Inc\n        \"shia\", // shia Asia Green IT System Bilgisayar San. ve Tic. Ltd. Sti.\n        \"shiksha\", // shiksha Afilias Limited\n        \"shoes\", // shoes Binky Galley, LLC\n        \"shop\", // shop GMO Registry, Inc.\n        \"shopping\", // shopping Over Keep, LLC\n        \"shouji\", // shouji QIHOO 360 TECHNOLOGY CO. LTD.\n        \"show\", // show Snow Beach, LLC\n        // \"showtime\", // showtime CBS Domains Inc.\n//        \"shriram\", // shriram Shriram Capital Ltd.\n        \"silk\", // silk Amazon Registry Services, Inc.\n        \"sina\", // sina Sina Corporation\n        \"singles\", // singles Fern Madison, LLC\n        \"site\", // site DotSite Inc.\n        \"ski\", // ski STARTING DOT LIMITED\n        \"skin\", // skin L&#39;Or\u00e9al\n        \"sky\", // sky Sky International AG\n        \"skype\", // skype Microsoft Corporation\n        \"sling\", // sling Hughes Satellite Systems Corporation\n        \"smart\", // smart Smart Communications, Inc. (SMART)\n        \"smile\", // smile Amazon Registry Services, Inc.\n        \"sncf\", // sncf SNCF (Soci\u00e9t\u00e9 Nationale des Chemins de fer Francais)\n        \"soccer\", // soccer Foggy Shadow, LLC\n        \"social\", // social United TLD Holdco Ltd.\n        \"softbank\", // softbank SoftBank Group Corp.\n        \"software\", // software United TLD Holdco, Ltd\n        \"sohu\", // sohu Sohu.com Limited\n        \"solar\", // solar Ruby Town, LLC\n        \"solutions\", // solutions Silver Cover, LLC\n        \"song\", // song Amazon Registry Services, Inc.\n        \"sony\", // sony Sony Corporation\n        \"soy\", // soy Charleston Road Registry Inc.\n        \"spa\", // spa Asia Spa and Wellness Promotion Council Limited\n        \"space\", // space DotSpace Inc.\n//        \"spiegel\", // spiegel SPIEGEL-Verlag Rudolf Augstein GmbH &amp; Co. KG\n        \"sport\", // sport Global Association of International Sports Federations (GAISF)\n        \"spot\", // spot Amazon Registry Services, Inc.\n//        \"spreadbetting\", // spreadbetting DOTSPREADBETTING REGISTRY LTD\n        \"srl\", // srl InterNetX Corp.\n//        \"srt\", // srt FCA US LLC.\n        \"stada\", // stada STADA Arzneimittel AG\n        \"staples\", // staples Staples, Inc.\n        \"star\", // star Star India Private Limited\n//        \"starhub\", // starhub StarHub Limited\n        \"statebank\", // statebank STATE BANK OF INDIA\n        \"statefarm\", // statefarm State Farm Mutual Automobile Insurance Company\n//        \"statoil\", // statoil Statoil ASA\n        \"stc\", // stc Saudi Telecom Company\n        \"stcgroup\", // stcgroup Saudi Telecom Company\n        \"stockholm\", // stockholm Stockholms kommun\n        \"storage\", // storage Self Storage Company LLC\n        \"store\", // store DotStore Inc.\n        \"stream\", // stream dot Stream Limited\n        \"studio\", // studio United TLD Holdco Ltd.\n        \"study\", // study OPEN UNIVERSITIES AUSTRALIA PTY LTD\n        \"style\", // style Binky Moon, LLC\n        \"sucks\", // sucks Vox Populi Registry Ltd.\n        \"supplies\", // supplies Atomic Fields, LLC\n        \"supply\", // supply Half Falls, LLC\n        \"support\", // support Grand Orchard, LLC\n        \"surf\", // surf Top Level Domain Holdings Limited\n        \"surgery\", // surgery Tin Avenue, LLC\n        \"suzuki\", // suzuki SUZUKI MOTOR CORPORATION\n        \"swatch\", // swatch The Swatch Group Ltd\n//        \"swiftcover\", // swiftcover Swiftcover Insurance Services Limited\n        \"swiss\", // swiss Swiss Confederation\n        \"sydney\", // sydney State of New South Wales, Department of Premier and Cabinet\n//        \"symantec\", // symantec Symantec Corporation [Not assigned as of Jul 25]\n        \"systems\", // systems Dash Cypress, LLC\n        \"tab\", // tab Tabcorp Holdings Limited\n        \"taipei\", // taipei Taipei City Government\n        \"talk\", // talk Amazon Registry Services, Inc.\n        \"taobao\", // taobao Alibaba Group Holding Limited\n        \"target\", // target Target Domain Holdings, LLC\n        \"tatamotors\", // tatamotors Tata Motors Ltd\n        \"tatar\", // tatar LLC \"Coordination Center of Regional Domain of Tatarstan Republic\"\n        \"tattoo\", // tattoo Uniregistry, Corp.\n        \"tax\", // tax Storm Orchard, LLC\n        \"taxi\", // taxi Pine Falls, LLC\n        \"tci\", // tci Asia Green IT System Bilgisayar San. ve Tic. Ltd. Sti.\n        \"tdk\", // tdk TDK Corporation\n        \"team\", // team Atomic Lake, LLC\n        \"tech\", // tech Dot Tech LLC\n        \"technology\", // technology Auburn Falls, LLC\n        \"tel\", // tel Telnic Ltd.\n//        \"telecity\", // telecity TelecityGroup International Limited\n//        \"telefonica\", // telefonica Telef\u00f3nica S.A.\n        \"temasek\", // temasek Temasek Holdings (Private) Limited\n        \"tennis\", // tennis Cotton Bloom, LLC\n        \"teva\", // teva Teva Pharmaceutical Industries Limited\n        \"thd\", // thd Homer TLC, Inc.\n        \"theater\", // theater Blue Tigers, LLC\n        \"theatre\", // theatre XYZ.COM LLC\n        \"tiaa\", // tiaa Teachers Insurance and Annuity Association of America\n        \"tickets\", // tickets Accent Media Limited\n        \"tienda\", // tienda Victor Manor, LLC\n        // \"tiffany\", // tiffany Tiffany and Company\n        \"tips\", // tips Corn Willow, LLC\n        \"tires\", // tires Dog Edge, LLC\n        \"tirol\", // tirol punkt Tirol GmbH\n        \"tjmaxx\", // tjmaxx The TJX Companies, Inc.\n        \"tjx\", // tjx The TJX Companies, Inc.\n        \"tkmaxx\", // tkmaxx The TJX Companies, Inc.\n        \"tmall\", // tmall Alibaba Group Holding Limited\n        \"today\", // today Pearl Woods, LLC\n        \"tokyo\", // tokyo GMO Registry, Inc.\n        \"tools\", // tools Pioneer North, LLC\n        \"top\", // top Jiangsu Bangning Science &amp; Technology Co.,Ltd.\n        \"toray\", // toray Toray Industries, Inc.\n        \"toshiba\", // toshiba TOSHIBA Corporation\n        \"total\", // total Total SA\n        \"tours\", // tours Sugar Station, LLC\n        \"town\", // town Koko Moon, LLC\n        \"toyota\", // toyota TOYOTA MOTOR CORPORATION\n        \"toys\", // toys Pioneer Orchard, LLC\n        \"trade\", // trade Elite Registry Limited\n        \"trading\", // trading DOTTRADING REGISTRY LTD\n        \"training\", // training Wild Willow, LLC\n        \"travel\", // travel Tralliance Registry Management Company, LLC.\n        // \"travelchannel\", // travelchannel Lifestyle Domain Holdings, Inc.\n        \"travelers\", // travelers Travelers TLD, LLC\n        \"travelersinsurance\", // travelersinsurance Travelers TLD, LLC\n        \"trust\", // trust Artemis Internet Inc\n        \"trv\", // trv Travelers TLD, LLC\n        \"tube\", // tube Latin American Telecom LLC\n        \"tui\", // tui TUI AG\n        \"tunes\", // tunes Amazon Registry Services, Inc.\n        \"tushu\", // tushu Amazon Registry Services, Inc.\n        \"tvs\", // tvs T V SUNDRAM IYENGAR  &amp; SONS PRIVATE LIMITED\n        \"ubank\", // ubank National Australia Bank Limited\n        \"ubs\", // ubs UBS AG\n//        \"uconnect\", // uconnect FCA US LLC.\n        \"unicom\", // unicom China United Network Communications Corporation Limited\n        \"university\", // university Little Station, LLC\n        \"uno\", // uno Dot Latin LLC\n        \"uol\", // uol UBN INTERNET LTDA.\n        \"ups\", // ups UPS Market Driver, Inc.\n        \"vacations\", // vacations Atomic Tigers, LLC\n        \"vana\", // vana Lifestyle Domain Holdings, Inc.\n        \"vanguard\", // vanguard The Vanguard Group, Inc.\n        \"vegas\", // vegas Dot Vegas, Inc.\n        \"ventures\", // ventures Binky Lake, LLC\n        \"verisign\", // verisign VeriSign, Inc.\n        \"versicherung\", // versicherung dotversicherung-registry GmbH\n        \"vet\", // vet United TLD Holdco, Ltd\n        \"viajes\", // viajes Black Madison, LLC\n        \"video\", // video United TLD Holdco, Ltd\n        \"vig\", // vig VIENNA INSURANCE GROUP AG Wiener Versicherung Gruppe\n        \"viking\", // viking Viking River Cruises (Bermuda) Ltd.\n        \"villas\", // villas New Sky, LLC\n        \"vin\", // vin Holly Shadow, LLC\n        \"vip\", // vip Minds + Machines Group Limited\n        \"virgin\", // virgin Virgin Enterprises Limited\n        \"visa\", // visa Visa Worldwide Pte. Limited\n        \"vision\", // vision Koko Station, LLC\n//        \"vista\", // vista Vistaprint Limited\n//        \"vistaprint\", // vistaprint Vistaprint Limited\n        \"viva\", // viva Saudi Telecom Company\n        \"vivo\", // vivo Telefonica Brasil S.A.\n        \"vlaanderen\", // vlaanderen DNS.be vzw\n        \"vodka\", // vodka Top Level Domain Holdings Limited\n        // \"volkswagen\", // volkswagen Volkswagen Group of America Inc.\n        \"volvo\", // volvo Volvo Holding Sverige Aktiebolag\n        \"vote\", // vote Monolith Registry LLC\n        \"voting\", // voting Valuetainment Corp.\n        \"voto\", // voto Monolith Registry LLC\n        \"voyage\", // voyage Ruby House, LLC\n        // \"vuelos\", // vuelos Travel Reservations SRL\n        \"wales\", // wales Nominet UK\n        \"walmart\", // walmart Wal-Mart Stores, Inc.\n        \"walter\", // walter Sandvik AB\n        \"wang\", // wang Zodiac Registry Limited\n        \"wanggou\", // wanggou Amazon Registry Services, Inc.\n//        \"warman\", // warman Weir Group IP Limited\n        \"watch\", // watch Sand Shadow, LLC\n        \"watches\", // watches Richemont DNS Inc.\n        \"weather\", // weather The Weather Channel, LLC\n        \"weatherchannel\", // weatherchannel The Weather Channel, LLC\n        \"webcam\", // webcam dot Webcam Limited\n        \"weber\", // weber Saint-Gobain Weber SA\n        \"website\", // website DotWebsite Inc.\n        \"wed\", // wed Atgron, Inc.\n        \"wedding\", // wedding Top Level Domain Holdings Limited\n        \"weibo\", // weibo Sina Corporation\n        \"weir\", // weir Weir Group IP Limited\n        \"whoswho\", // whoswho Who&#39;s Who Registry\n        \"wien\", // wien punkt.wien GmbH\n        \"wiki\", // wiki Top Level Design, LLC\n        \"williamhill\", // williamhill William Hill Organization Limited\n        \"win\", // win First Registry Limited\n        \"windows\", // windows Microsoft Corporation\n        \"wine\", // wine June Station, LLC\n        \"winners\", // winners The TJX Companies, Inc.\n        \"wme\", // wme William Morris Endeavor Entertainment, LLC\n        \"wolterskluwer\", // wolterskluwer Wolters Kluwer N.V.\n        \"woodside\", // woodside Woodside Petroleum Limited\n        \"work\", // work Top Level Domain Holdings Limited\n        \"works\", // works Little Dynamite, LLC\n        \"world\", // world Bitter Fields, LLC\n        \"wow\", // wow Amazon Registry Services, Inc.\n        \"wtc\", // wtc World Trade Centers Association, Inc.\n        \"wtf\", // wtf Hidden Way, LLC\n        \"xbox\", // xbox Microsoft Corporation\n        \"xerox\", // xerox Xerox DNHC LLC\n        // \"xfinity\", // xfinity Comcast IP Holdings I, LLC\n        \"xihuan\", // xihuan QIHOO 360 TECHNOLOGY CO. LTD.\n        \"xin\", // xin Elegant Leader Limited\n        \"xn--11b4c3d\", // \u0915\u0949\u092e VeriSign Sarl\n        \"xn--1ck2e1b\", // \u30bb\u30fc\u30eb Amazon Registry Services, Inc.\n        \"xn--1qqw23a\", // \u4f5b\u5c71 Guangzhou YU Wei Information Technology Co., Ltd.\n        \"xn--30rr7y\", // \u6148\u5584 Excellent First Limited\n        \"xn--3bst00m\", // \u96c6\u56e2 Eagle Horizon Limited\n        \"xn--3ds443g\", // \u5728\u7ebf TLD REGISTRY LIMITED\n//        \"xn--3oq18vl8pn36a\", // \u5927\u4f17\u6c7d\u8f66 Volkswagen (China) Investment Co., Ltd.\n        \"xn--3pxu8k\", // \u70b9\u770b VeriSign Sarl\n        \"xn--42c2d9a\", // \u0e04\u0e2d\u0e21 VeriSign Sarl\n        \"xn--45q11c\", // \u516b\u5366 Zodiac Scorpio Limited\n        \"xn--4gbrim\", // \u0645\u0648\u0642\u0639 Suhub Electronic Establishment\n        \"xn--55qw42g\", // \u516c\u76ca China Organizational Name Administration Center\n        \"xn--55qx5d\", // \u516c\u53f8 Computer Network Information Center of Chinese Academy of Sciences \uff08China Internet Network Information Center\uff09\n        \"xn--5su34j936bgsg\", // \u9999\u683c\u91cc\u62c9 Shangri\u2010La International Hotel Management Limited\n        \"xn--5tzm5g\", // \u7f51\u7ad9 Global Website TLD Asia Limited\n        \"xn--6frz82g\", // \u79fb\u52a8 Afilias Limited\n        \"xn--6qq986b3xl\", // \u6211\u7231\u4f60 Tycoon Treasure Limited\n        \"xn--80adxhks\", // \u043c\u043e\u0441\u043a\u0432\u0430 Foundation for Assistance for Internet Technologies and Infrastructure Development (FAITID)\n        \"xn--80aqecdr1a\", // \u043a\u0430\u0442\u043e\u043b\u0438\u043a Pontificium Consilium de Comunicationibus Socialibus (PCCS) (Pontifical Council for Social Communication)\n        \"xn--80asehdb\", // \u043e\u043d\u043b\u0430\u0439\u043d CORE Association\n        \"xn--80aswg\", // \u0441\u0430\u0439\u0442 CORE Association\n        \"xn--8y0a063a\", // \u8054\u901a China United Network Communications Corporation Limited\n        \"xn--90ae\", // \u0431\u0433 Imena.BG Plc (NAMES.BG Plc)\n        \"xn--9dbq2a\", // \u05e7\u05d5\u05dd VeriSign Sarl\n        \"xn--9et52u\", // \u65f6\u5c1a RISE VICTORY LIMITED\n        \"xn--9krt00a\", // \u5fae\u535a Sina Corporation\n        \"xn--b4w605ferd\", // \u6de1\u9a6c\u9521 Temasek Holdings (Private) Limited\n        \"xn--bck1b9a5dre4c\", // \u30d5\u30a1\u30c3\u30b7\u30e7\u30f3 Amazon Registry Services, Inc.\n        \"xn--c1avg\", // \u043e\u0440\u0433 Public Interest Registry\n        \"xn--c2br7g\", // \u0928\u0947\u091f VeriSign Sarl\n        \"xn--cck2b3b\", // \u30b9\u30c8\u30a2 Amazon Registry Services, Inc.\n        \"xn--cckwcxetd\", // \u30a2\u30de\u30be\u30f3 Amazon Registry Services, Inc.\n        \"xn--cg4bki\", // \uc0bc\uc131 SAMSUNG SDS CO., LTD\n        \"xn--czr694b\", // \u5546\u6807 HU YI GLOBAL INFORMATION RESOURCES(HOLDING) COMPANY.HONGKONG LIMITED\n        \"xn--czrs0t\", // \u5546\u5e97 Wild Island, LLC\n        \"xn--czru2d\", // \u5546\u57ce Zodiac Aquarius Limited\n        \"xn--d1acj3b\", // \u0434\u0435\u0442\u0438 The Foundation for Network Initiatives \u201cThe Smart Internet\u201d\n        \"xn--eckvdtc9d\", // \u30dd\u30a4\u30f3\u30c8 Amazon Registry Services, Inc.\n        \"xn--efvy88h\", // \u65b0\u95fb Xinhua News Agency Guangdong Branch \u65b0\u534e\u901a\u8baf\u793e\u5e7f\u4e1c\u5206\u793e\n//        \"xn--estv75g\", // \u5de5\u884c Industrial and Commercial Bank of China Limited\n        \"xn--fct429k\", // \u5bb6\u96fb Amazon Registry Services, Inc.\n        \"xn--fhbei\", // \u0643\u0648\u0645 VeriSign Sarl\n        \"xn--fiq228c5hs\", // \u4e2d\u6587\u7f51 TLD REGISTRY LIMITED\n        \"xn--fiq64b\", // \u4e2d\u4fe1 CITIC Group Corporation\n        \"xn--fjq720a\", // \u5a31\u4e50 Will Bloom, LLC\n        \"xn--flw351e\", // \u8c37\u6b4c Charleston Road Registry Inc.\n        \"xn--fzys8d69uvgm\", // \u96fb\u8a0a\u76c8\u79d1 PCCW Enterprises Limited\n        \"xn--g2xx48c\", // \u8d2d\u7269 Minds + Machines Group Limited\n        \"xn--gckr3f0f\", // \u30af\u30e9\u30a6\u30c9 Amazon Registry Services, Inc.\n        \"xn--gk3at1e\", // \u901a\u8ca9 Amazon Registry Services, Inc.\n        \"xn--hxt814e\", // \u7f51\u5e97 Zodiac Libra Limited\n        \"xn--i1b6b1a6a2e\", // \u0938\u0902\u0917\u0920\u0928 Public Interest Registry\n        \"xn--imr513n\", // \u9910\u5385 HU YI GLOBAL INFORMATION RESOURCES (HOLDING) COMPANY. HONGKONG LIMITED\n        \"xn--io0a7i\", // \u7f51\u7edc Computer Network Information Center of Chinese Academy of Sciences \uff08China Internet Network Information Center\uff09\n        \"xn--j1aef\", // \u043a\u043e\u043c VeriSign Sarl\n        \"xn--jlq480n2rg\", // \u4e9a\u9a6c\u900a Amazon Registry Services, Inc.\n//        \"xn--jlq61u9w7b\", // \u8bfa\u57fa\u4e9a Nokia Corporation\n        \"xn--jvr189m\", // \u98df\u54c1 Amazon Registry Services, Inc.\n        \"xn--kcrx77d1x4a\", // \u98de\u5229\u6d66 Koninklijke Philips N.V.\n//        \"xn--kpu716f\", // \u624b\u8868 Richemont DNS Inc. [Not assigned as of Jul 25]\n        \"xn--kput3i\", // \u624b\u673a Beijing RITT-Net Technology Development Co., Ltd\n        \"xn--mgba3a3ejt\", // \u0627\u0631\u0627\u0645\u0643\u0648 Aramco Services Company\n        \"xn--mgba7c0bbn0a\", // \u0627\u0644\u0639\u0644\u064a\u0627\u0646 Crescent Holding GmbH\n        // \"xn--mgbaakc7dvf\", // \u0627\u062a\u0635\u0627\u0644\u0627\u062a Emirates Telecommunications Corporation (trading as Etisalat)\n        \"xn--mgbab2bd\", // \u0628\u0627\u0632\u0627\u0631 CORE Association\n//        \"xn--mgbb9fbpob\", // \u0645\u0648\u0628\u0627\u064a\u0644\u064a GreenTech Consultancy Company W.L.L.\n        \"xn--mgbca7dzdo\", // \u0627\u0628\u0648\u0638\u0628\u064a Abu Dhabi Systems and Information Centre\n        \"xn--mgbi4ecexp\", // \u0643\u0627\u062b\u0648\u0644\u064a\u0643 Pontificium Consilium de Comunicationibus Socialibus (PCCS) (Pontifical Council for Social Communication)\n        \"xn--mgbt3dhd\", // \u0647\u0645\u0631\u0627\u0647 Asia Green IT System Bilgisayar San. ve Tic. Ltd. Sti.\n        \"xn--mk1bu44c\", // \ub2f7\ucef4 VeriSign Sarl\n        \"xn--mxtq1m\", // \u653f\u5e9c Net-Chinese Co., Ltd.\n        \"xn--ngbc5azd\", // \u0634\u0628\u0643\u0629 International Domain Registry Pty. Ltd.\n        \"xn--ngbe9e0a\", // \u0628\u064a\u062a\u0643 Kuwait Finance House\n        \"xn--ngbrx\", // \u0639\u0631\u0628 League of Arab States\n        \"xn--nqv7f\", // \u673a\u6784 Public Interest Registry\n        \"xn--nqv7fs00ema\", // \u7ec4\u7ec7\u673a\u6784 Public Interest Registry\n        \"xn--nyqy26a\", // \u5065\u5eb7 Stable Tone Limited\n        \"xn--otu796d\", // \u62db\u8058 Dot Trademark TLD Holding Company Limited\n        \"xn--p1acf\", // \u0440\u0443\u0441 Rusnames Limited\n//        \"xn--pbt977c\", // \u73e0\u5b9d Richemont DNS Inc. [Not assigned as of Jul 25]\n        \"xn--pssy2u\", // \u5927\u62ff VeriSign Sarl\n        \"xn--q9jyb4c\", // \u307f\u3093\u306a Charleston Road Registry Inc.\n        \"xn--qcka1pmc\", // \u30b0\u30fc\u30b0\u30eb Charleston Road Registry Inc.\n        \"xn--rhqv96g\", // \u4e16\u754c Stable Tone Limited\n        \"xn--rovu88b\", // \u66f8\u7c4d Amazon EU S.\u00e0 r.l.\n        \"xn--ses554g\", // \u7f51\u5740 KNET Co., Ltd\n        \"xn--t60b56a\", // \ub2f7\ub137 VeriSign Sarl\n        \"xn--tckwe\", // \u30b3\u30e0 VeriSign Sarl\n        \"xn--tiq49xqyj\", // \u5929\u4e3b\u6559 Pontificium Consilium de Comunicationibus Socialibus (PCCS) (Pontifical Council for Social Communication)\n        \"xn--unup4y\", // \u6e38\u620f Spring Fields, LLC\n        \"xn--vermgensberater-ctb\", // VERM\u00f6GENSBERATER Deutsche Verm\u00f6gensberatung Aktiengesellschaft DVAG\n        \"xn--vermgensberatung-pwb\", // VERM\u00f6GENSBERATUNG Deutsche Verm\u00f6gensberatung Aktiengesellschaft DVAG\n        \"xn--vhquv\", // \u4f01\u4e1a Dash McCook, LLC\n        \"xn--vuq861b\", // \u4fe1\u606f Beijing Tele-info Network Technology Co., Ltd.\n        \"xn--w4r85el8fhu5dnra\", // \u5609\u91cc\u5927\u9152\u5e97 Kerry Trading Co. Limited\n        \"xn--w4rs40l\", // \u5609\u91cc Kerry Trading Co. Limited\n        \"xn--xhq521b\", // \u5e7f\u4e1c Guangzhou YU Wei Information Technology Co., Ltd.\n        \"xn--zfr164b\", // \u653f\u52a1 China Organizational Name Administration Center\n//        \"xperia\", // xperia Sony Mobile Communications AB\n        \"xxx\", // xxx ICM Registry LLC\n        \"xyz\", // xyz XYZ.COM LLC\n        \"yachts\", // yachts DERYachts, LLC\n        \"yahoo\", // yahoo Yahoo! Domain Services Inc.\n        \"yamaxun\", // yamaxun Amazon Registry Services, Inc.\n        \"yandex\", // yandex YANDEX, LLC\n        \"yodobashi\", // yodobashi YODOBASHI CAMERA CO.,LTD.\n        \"yoga\", // yoga Top Level Domain Holdings Limited\n        \"yokohama\", // yokohama GMO Registry, Inc.\n        \"you\", // you Amazon Registry Services, Inc.\n        \"youtube\", // youtube Charleston Road Registry Inc.\n        \"yun\", // yun QIHOO 360 TECHNOLOGY CO. LTD.\n        \"zappos\", // zappos Amazon Registry Services, Inc.\n        \"zara\", // zara Industria de Dise\u00f1o Textil, S.A. (INDITEX, S.A.)\n        \"zero\", // zero Amazon Registry Services, Inc.\n        \"zip\", // zip Charleston Road Registry Inc.\n//        \"zippo\", // zippo Zadco Company\n        \"zone\", // zone Outer Falls, LLC\n        \"zuerich\", // zuerich Kanton Z\u00fcrich (Canton of Zurich)\n}", "syntax_pass": true}, {"attribute_expression": "private static final String[] COUNTRY_CODE_TLDS = {\n        // Taken from Version 2024040200, Last Updated Tue Apr  2 07:07:02 2024 UTC\n        \"ac\",                 // Ascension Island\n        \"ad\",                 // Andorra\n        \"ae\",                 // United Arab Emirates\n        \"af\",                 // Afghanistan\n        \"ag\",                 // Antigua and Barbuda\n        \"ai\",                 // Anguilla\n        \"al\",                 // Albania\n        \"am\",                 // Armenia\n//        \"an\",                 // Netherlands Antilles (retired)\n        \"ao\",                 // Angola\n        \"aq\",                 // Antarctica\n        \"ar\",                 // Argentina\n        \"as\",                 // American Samoa\n        \"at\",                 // Austria\n        \"au\",                 // Australia (includes Ashmore and Cartier Islands and Coral Sea Islands)\n        \"aw\",                 // Aruba\n        \"ax\",                 // \u00c5land\n        \"az\",                 // Azerbaijan\n        \"ba\",                 // Bosnia and Herzegovina\n        \"bb\",                 // Barbados\n        \"bd\",                 // Bangladesh\n        \"be\",                 // Belgium\n        \"bf\",                 // Burkina Faso\n        \"bg\",                 // Bulgaria\n        \"bh\",                 // Bahrain\n        \"bi\",                 // Burundi\n        \"bj\",                 // Benin\n        \"bm\",                 // Bermuda\n        \"bn\",                 // Brunei Darussalam\n        \"bo\",                 // Bolivia\n        \"br\",                 // Brazil\n        \"bs\",                 // Bahamas\n        \"bt\",                 // Bhutan\n        \"bv\",                 // Bouvet Island\n        \"bw\",                 // Botswana\n        \"by\",                 // Belarus\n        \"bz\",                 // Belize\n        \"ca\",                 // Canada\n        \"cc\",                 // Cocos (Keeling) Islands\n        \"cd\",                 // Democratic Republic of the Congo (formerly Zaire)\n        \"cf\",                 // Central African Republic\n        \"cg\",                 // Republic of the Congo\n        \"ch\",                 // Switzerland\n        \"ci\",                 // C\u00f4te d'Ivoire\n        \"ck\",                 // Cook Islands\n        \"cl\",                 // Chile\n        \"cm\",                 // Cameroon\n        \"cn\",                 // China, mainland\n        \"co\",                 // Colombia\n        \"cr\",                 // Costa Rica\n        \"cu\",                 // Cuba\n        \"cv\",                 // Cape Verde\n        \"cw\",                 // Cura\u00e7ao\n        \"cx\",                 // Christmas Island\n        \"cy\",                 // Cyprus\n        \"cz\",                 // Czech Republic\n        \"de\",                 // Germany\n        \"dj\",                 // Djibouti\n        \"dk\",                 // Denmark\n        \"dm\",                 // Dominica\n        \"do\",                 // Dominican Republic\n        \"dz\",                 // Algeria\n        \"ec\",                 // Ecuador\n        \"ee\",                 // Estonia\n        \"eg\",                 // Egypt\n        \"er\",                 // Eritrea\n        \"es\",                 // Spain\n        \"et\",                 // Ethiopia\n        \"eu\",                 // European Union\n        \"fi\",                 // Finland\n        \"fj\",                 // Fiji\n        \"fk\",                 // Falkland Islands\n        \"fm\",                 // Federated States of Micronesia\n        \"fo\",                 // Faroe Islands\n        \"fr\",                 // France\n        \"ga\",                 // Gabon\n        \"gb\",                 // Great Britain (United Kingdom)\n        \"gd\",                 // Grenada\n        \"ge\",                 // Georgia\n        \"gf\",                 // French Guiana\n        \"gg\",                 // Guernsey\n        \"gh\",                 // Ghana\n        \"gi\",                 // Gibraltar\n        \"gl\",                 // Greenland\n        \"gm\",                 // The Gambia\n        \"gn\",                 // Guinea\n        \"gp\",                 // Guadeloupe\n        \"gq\",                 // Equatorial Guinea\n        \"gr\",                 // Greece\n        \"gs\",                 // South Georgia and the South Sandwich Islands\n        \"gt\",                 // Guatemala\n        \"gu\",                 // Guam\n        \"gw\",                 // Guinea-Bissau\n        \"gy\",                 // Guyana\n        \"hk\",                 // Hong Kong\n        \"hm\",                 // Heard Island and McDonald Islands\n        \"hn\",                 // Honduras\n        \"hr\",                 // Croatia (Hrvatska)\n        \"ht\",                 // Haiti\n        \"hu\",                 // Hungary\n        \"id\",                 // Indonesia\n        \"ie\",                 // Ireland (\u00c9ire)\n        \"il\",                 // Israel\n        \"im\",                 // Isle of Man\n        \"in\",                 // India\n        \"io\",                 // British Indian Ocean Territory\n        \"iq\",                 // Iraq\n        \"ir\",                 // Iran\n        \"is\",                 // Iceland\n        \"it\",                 // Italy\n        \"je\",                 // Jersey\n        \"jm\",                 // Jamaica\n        \"jo\",                 // Jordan\n        \"jp\",                 // Japan\n        \"ke\",                 // Kenya\n        \"kg\",                 // Kyrgyzstan\n        \"kh\",                 // Cambodia (Khmer)\n        \"ki\",                 // Kiribati\n        \"km\",                 // Comoros\n        \"kn\",                 // Saint Kitts and Nevis\n        \"kp\",                 // North Korea\n        \"kr\",                 // South Korea\n        \"kw\",                 // Kuwait\n        \"ky\",                 // Cayman Islands\n        \"kz\",                 // Kazakhstan\n        \"la\",                 // Laos (currently being marketed as the official domain for Los Angeles)\n        \"lb\",                 // Lebanon\n        \"lc\",                 // Saint Lucia\n        \"li\",                 // Liechtenstein\n        \"lk\",                 // Sri Lanka\n        \"lr\",                 // Liberia\n        \"ls\",                 // Lesotho\n        \"lt\",                 // Lithuania\n        \"lu\",                 // Luxembourg\n        \"lv\",                 // Latvia\n        \"ly\",                 // Libya\n        \"ma\",                 // Morocco\n        \"mc\",                 // Monaco\n        \"md\",                 // Moldova\n        \"me\",                 // Montenegro\n        \"mg\",                 // Madagascar\n        \"mh\",                 // Marshall Islands\n        \"mk\",                 // Republic of Macedonia\n        \"ml\",                 // Mali\n        \"mm\",                 // Myanmar\n        \"mn\",                 // Mongolia\n        \"mo\",                 // Macau\n        \"mp\",                 // Northern Mariana Islands\n        \"mq\",                 // Martinique\n        \"mr\",                 // Mauritania\n        \"ms\",                 // Montserrat\n        \"mt\",                 // Malta\n        \"mu\",                 // Mauritius\n        \"mv\",                 // Maldives\n        \"mw\",                 // Malawi\n        \"mx\",                 // Mexico\n        \"my\",                 // Malaysia\n        \"mz\",                 // Mozambique\n        \"na\",                 // Namibia\n        \"nc\",                 // New Caledonia\n        \"ne\",                 // Niger\n        \"nf\",                 // Norfolk Island\n        \"ng\",                 // Nigeria\n        \"ni\",                 // Nicaragua\n        \"nl\",                 // Netherlands\n        \"no\",                 // Norway\n        \"np\",                 // Nepal\n        \"nr\",                 // Nauru\n        \"nu\",                 // Niue\n        \"nz\",                 // New Zealand\n        \"om\",                 // Oman\n        \"pa\",                 // Panama\n        \"pe\",                 // Peru\n        \"pf\",                 // French Polynesia With Clipperton Island\n        \"pg\",                 // Papua New Guinea\n        \"ph\",                 // Philippines\n        \"pk\",                 // Pakistan\n        \"pl\",                 // Poland\n        \"pm\",                 // Saint-Pierre and Miquelon\n        \"pn\",                 // Pitcairn Islands\n        \"pr\",                 // Puerto Rico\n        \"ps\",                 // Palestinian territories (PA-controlled West Bank and Gaza Strip)\n        \"pt\",                 // Portugal\n        \"pw\",                 // Palau\n        \"py\",                 // Paraguay\n        \"qa\",                 // Qatar\n        \"re\",                 // R\u00e9union\n        \"ro\",                 // Romania\n        \"rs\",                 // Serbia\n        \"ru\",                 // Russia\n        \"rw\",                 // Rwanda\n        \"sa\",                 // Saudi Arabia\n        \"sb\",                 // Solomon Islands\n        \"sc\",                 // Seychelles\n        \"sd\",                 // Sudan\n        \"se\",                 // Sweden\n        \"sg\",                 // Singapore\n        \"sh\",                 // Saint Helena\n        \"si\",                 // Slovenia\n        \"sj\",                 // Svalbard and Jan Mayen Islands Not in use (Norwegian dependencies; see .no)\n        \"sk\",                 // Slovakia\n        \"sl\",                 // Sierra Leone\n        \"sm\",                 // San Marino\n        \"sn\",                 // Senegal\n        \"so\",                 // Somalia\n        \"sr\",                 // Suriname\n        \"ss\",                 // ss National Communication Authority (NCA)\n        \"st\",                 // S\u00e3o Tom\u00e9 and Pr\u00edncipe\n        \"su\",                 // Soviet Union (deprecated)\n        \"sv\",                 // El Salvador\n        \"sx\",                 // Sint Maarten\n        \"sy\",                 // Syria\n        \"sz\",                 // Swaziland\n        \"tc\",                 // Turks and Caicos Islands\n        \"td\",                 // Chad\n        \"tf\",                 // French Southern and Antarctic Lands\n        \"tg\",                 // Togo\n        \"th\",                 // Thailand\n        \"tj\",                 // Tajikistan\n        \"tk\",                 // Tokelau\n        \"tl\",                 // East Timor (deprecated old code)\n        \"tm\",                 // Turkmenistan\n        \"tn\",                 // Tunisia\n        \"to\",                 // Tonga\n//        \"tp\",                 // East Timor (Retired)\n        \"tr\",                 // Turkey\n        \"tt\",                 // Trinidad and Tobago\n        \"tv\",                 // Tuvalu\n        \"tw\",                 // Taiwan, Republic of China\n        \"tz\",                 // Tanzania\n        \"ua\",                 // Ukraine\n        \"ug\",                 // Uganda\n        \"uk\",                 // United Kingdom\n        \"us\",                 // United States of America\n        \"uy\",                 // Uruguay\n        \"uz\",                 // Uzbekistan\n        \"va\",                 // Vatican City State\n        \"vc\",                 // Saint Vincent and the Grenadines\n        \"ve\",                 // Venezuela\n        \"vg\",                 // British Virgin Islands\n        \"vi\",                 // U.S. Virgin Islands\n        \"vn\",                 // Vietnam\n        \"vu\",                 // Vanuatu\n        \"wf\",                 // Wallis and Futuna\n        \"ws\",                 // Samoa (formerly Western Samoa)\n        \"xn--2scrj9c\", // \u0cad\u0cbe\u0cb0\u0ca4 National Internet eXchange of India\n        \"xn--3e0b707e\", // \ud55c\uad6d KISA (Korea Internet &amp; Security Agency)\n        \"xn--3hcrj9c\", // \u0b2d\u0b3e\u0b30\u0b24 National Internet eXchange of India\n        \"xn--45br5cyl\", // \u09ad\u09be\u09f0\u09a4 National Internet eXchange of India\n        \"xn--45brj9c\", // \u09ad\u09be\u09b0\u09a4 National Internet Exchange of India\n        \"xn--4dbrk0ce\", // \u05d9\u05e9\u05e8\u05d0\u05dc The Israel Internet Association (RA)\n        \"xn--54b7fta0cc\", // \u09ac\u09be\u0982\u09b2\u09be Posts and Telecommunications Division\n        \"xn--80ao21a\", // \u049b\u0430\u0437 Association of IT Companies of Kazakhstan\n        \"xn--90a3ac\", // \u0441\u0440\u0431 Serbian National Internet Domain Registry (RNIDS)\n        \"xn--90ais\", // ??? Reliable Software Inc.\n        \"xn--clchc0ea0b2g2a9gcd\", // \u0b9a\u0bbf\u0b99\u0bcd\u0b95\u0baa\u0bcd\u0baa\u0bc2\u0bb0\u0bcd Singapore Network Information Centre (SGNIC) Pte Ltd\n        \"xn--d1alf\", // \u043c\u043a\u0434 Macedonian Academic Research Network Skopje\n        \"xn--e1a4c\", // \u0435\u044e EURid vzw/asbl\n        \"xn--fiqs8s\", // \u4e2d\u56fd China Internet Network Information Center\n        \"xn--fiqz9s\", // \u4e2d\u570b China Internet Network Information Center\n        \"xn--fpcrj9c3d\", // \u0c2d\u0c3e\u0c30\u0c24\u0c4d National Internet Exchange of India\n        \"xn--fzc2c9e2c\", // \u0dbd\u0d82\u0d9a\u0dcf LK Domain Registry\n        \"xn--gecrj9c\", // \u0aad\u0abe\u0ab0\u0aa4 National Internet Exchange of India\n        \"xn--h2breg3eve\", // \u092d\u093e\u0930\u0924\u092e\u094d National Internet eXchange of India\n        \"xn--h2brj9c\", // \u092d\u093e\u0930\u0924 National Internet Exchange of India\n        \"xn--h2brj9c8c\", // \u092d\u093e\u0930\u094b\u0924 National Internet eXchange of India\n        \"xn--j1amh\", // \u0443\u043a\u0440 Ukrainian Network Information Centre (UANIC), Inc.\n        \"xn--j6w193g\", // \u9999\u6e2f Hong Kong Internet Registration Corporation Ltd.\n        \"xn--kprw13d\", // \u53f0\u6e7e Taiwan Network Information Center (TWNIC)\n        \"xn--kpry57d\", // \u53f0\u7063 Taiwan Network Information Center (TWNIC)\n        \"xn--l1acc\", // \u043c\u043e\u043d Datacom Co.,Ltd\n        \"xn--lgbbat1ad8j\", // \u0627\u0644\u062c\u0632\u0627\u0626\u0631 CERIST\n        \"xn--mgb9awbf\", // \u0639\u0645\u0627\u0646 Telecommunications Regulatory Authority (TRA)\n        \"xn--mgba3a4f16a\", // \u0627\u06cc\u0631\u0627\u0646 Institute for Research in Fundamental Sciences (IPM)\n        \"xn--mgbaam7a8h\", // \u0627\u0645\u0627\u0631\u0627\u062a Telecommunications Regulatory Authority (TRA)\n        \"xn--mgbah1a3hjkrd\", // \u0645\u0648\u0631\u064a\u062a\u0627\u0646\u064a\u0627 Universit\u00e9 de Nouakchott Al Aasriya\n        \"xn--mgbai9azgqp6j\", // \u067e\u0627\u06a9\u0633\u062a\u0627\u0646 National Telecommunication Corporation\n        \"xn--mgbayh7gpa\", // \u0627\u0644\u0627\u0631\u062f\u0646 National Information Technology Center (NITC)\n        \"xn--mgbbh1a\", // \u0628\u0627\u0631\u062a National Internet eXchange of India\n        \"xn--mgbbh1a71e\", // \u0628\u06be\u0627\u0631\u062a National Internet Exchange of India\n        \"xn--mgbc0a9azcg\", // \u0627\u0644\u0645\u063a\u0631\u0628 Agence Nationale de R\u00e9glementation des T\u00e9l\u00e9communications (ANRT)\n        \"xn--mgbcpq6gpa1a\", // \u0627\u0644\u0628\u062d\u0631\u064a\u0646 Telecommunications Regulatory Authority (TRA)\n        \"xn--mgberp4a5d4ar\", // \u0627\u0644\u0633\u0639\u0648\u062f\u064a\u0629 Communications and Information Technology Commission\n        \"xn--mgbgu82a\", // \u0680\u0627\u0631\u062a National Internet eXchange of India\n        \"xn--mgbpl2fh\", // ????? Sudan Internet Society\n        \"xn--mgbtx2b\", // \u0639\u0631\u0627\u0642 Communications and Media Commission (CMC)\n        \"xn--mgbx4cd0ab\", // \u0645\u0644\u064a\u0633\u064a\u0627 MYNIC Berhad\n        \"xn--mix891f\", // \u6fb3\u9580 Bureau of Telecommunications Regulation (DSRT)\n        \"xn--node\", // \u10d2\u10d4 Information Technologies Development Center (ITDC)\n        \"xn--o3cw4h\", // \u0e44\u0e17\u0e22 Thai Network Information Center Foundation\n        \"xn--ogbpf8fl\", // \u0633\u0648\u0631\u064a\u0629 National Agency for Network Services (NANS)\n        \"xn--p1ai\", // \u0440\u0444 Coordination Center for TLD RU\n        \"xn--pgbs0dh\", // \u062a\u0648\u0646\u0633 Agence Tunisienne d&#39;Internet\n        \"xn--q7ce6a\", // \u0ea5\u0eb2\u0ea7 Lao National Internet Center (LANIC)\n        \"xn--qxa6a\", // \u03b5\u03c5 EURid vzw/asbl\n        \"xn--qxam\", // \u03b5\u03bb ICS-FORTH GR\n        \"xn--rvc1e0am3e\", // \u0d2d\u0d3e\u0d30\u0d24\u0d02 National Internet eXchange of India\n        \"xn--s9brj9c\", // \u0a2d\u0a3e\u0a30\u0a24 National Internet Exchange of India\n        \"xn--wgbh1c\", // \u0645\u0635\u0631 National Telecommunication Regulatory Authority - NTRA\n        \"xn--wgbl6a\", // \u0642\u0637\u0631 Communications Regulatory Authority\n        \"xn--xkc2al3hye2a\", // \u0b87\u0bb2\u0b99\u0bcd\u0b95\u0bc8 LK Domain Registry\n        \"xn--xkc2dl3a5ee0h\", // \u0b87\u0ba8\u0bcd\u0ba4\u0bbf\u0baf\u0bbe National Internet Exchange of India\n        \"xn--y9a3aq\", // ??? Internet Society\n        \"xn--yfro4i67o\", // \u65b0\u52a0\u5761 Singapore Network Information Centre (SGNIC) Pte Ltd\n        \"xn--ygbi2ammx\", // \u0641\u0644\u0633\u0637\u064a\u0646 Ministry of Telecom &amp; Information Technology (MTIT)\n        \"ye\",                 // Yemen\n        \"yt\",                 // Mayotte\n        \"za\",                 // South Africa\n        \"zm\",                 // Zambia\n        \"zw\",                 // Zimbabwe\n    };", "docstring": " WARNING: this array MUST be sorted, otherwise it cannot be searched reliably using binary search", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String[]", "name": "COUNTRY_CODE_TLDS = {\n        // Taken from Version 2024040200, Last Updated Tue Apr  2 07:07:02 2024 UTC\n        \"ac\",                 // Ascension Island\n        \"ad\",                 // Andorra\n        \"ae\",                 // United Arab Emirates\n        \"af\",                 // Afghanistan\n        \"ag\",                 // Antigua and Barbuda\n        \"ai\",                 // Anguilla\n        \"al\",                 // Albania\n        \"am\",                 // Armenia\n//        \"an\",                 // Netherlands Antilles (retired)\n        \"ao\",                 // Angola\n        \"aq\",                 // Antarctica\n        \"ar\",                 // Argentina\n        \"as\",                 // American Samoa\n        \"at\",                 // Austria\n        \"au\",                 // Australia (includes Ashmore and Cartier Islands and Coral Sea Islands)\n        \"aw\",                 // Aruba\n        \"ax\",                 // \u00c5land\n        \"az\",                 // Azerbaijan\n        \"ba\",                 // Bosnia and Herzegovina\n        \"bb\",                 // Barbados\n        \"bd\",                 // Bangladesh\n        \"be\",                 // Belgium\n        \"bf\",                 // Burkina Faso\n        \"bg\",                 // Bulgaria\n        \"bh\",                 // Bahrain\n        \"bi\",                 // Burundi\n        \"bj\",                 // Benin\n        \"bm\",                 // Bermuda\n        \"bn\",                 // Brunei Darussalam\n        \"bo\",                 // Bolivia\n        \"br\",                 // Brazil\n        \"bs\",                 // Bahamas\n        \"bt\",                 // Bhutan\n        \"bv\",                 // Bouvet Island\n        \"bw\",                 // Botswana\n        \"by\",                 // Belarus\n        \"bz\",                 // Belize\n        \"ca\",                 // Canada\n        \"cc\",                 // Cocos (Keeling) Islands\n        \"cd\",                 // Democratic Republic of the Congo (formerly Zaire)\n        \"cf\",                 // Central African Republic\n        \"cg\",                 // Republic of the Congo\n        \"ch\",                 // Switzerland\n        \"ci\",                 // C\u00f4te d'Ivoire\n        \"ck\",                 // Cook Islands\n        \"cl\",                 // Chile\n        \"cm\",                 // Cameroon\n        \"cn\",                 // China, mainland\n        \"co\",                 // Colombia\n        \"cr\",                 // Costa Rica\n        \"cu\",                 // Cuba\n        \"cv\",                 // Cape Verde\n        \"cw\",                 // Cura\u00e7ao\n        \"cx\",                 // Christmas Island\n        \"cy\",                 // Cyprus\n        \"cz\",                 // Czech Republic\n        \"de\",                 // Germany\n        \"dj\",                 // Djibouti\n        \"dk\",                 // Denmark\n        \"dm\",                 // Dominica\n        \"do\",                 // Dominican Republic\n        \"dz\",                 // Algeria\n        \"ec\",                 // Ecuador\n        \"ee\",                 // Estonia\n        \"eg\",                 // Egypt\n        \"er\",                 // Eritrea\n        \"es\",                 // Spain\n        \"et\",                 // Ethiopia\n        \"eu\",                 // European Union\n        \"fi\",                 // Finland\n        \"fj\",                 // Fiji\n        \"fk\",                 // Falkland Islands\n        \"fm\",                 // Federated States of Micronesia\n        \"fo\",                 // Faroe Islands\n        \"fr\",                 // France\n        \"ga\",                 // Gabon\n        \"gb\",                 // Great Britain (United Kingdom)\n        \"gd\",                 // Grenada\n        \"ge\",                 // Georgia\n        \"gf\",                 // French Guiana\n        \"gg\",                 // Guernsey\n        \"gh\",                 // Ghana\n        \"gi\",                 // Gibraltar\n        \"gl\",                 // Greenland\n        \"gm\",                 // The Gambia\n        \"gn\",                 // Guinea\n        \"gp\",                 // Guadeloupe\n        \"gq\",                 // Equatorial Guinea\n        \"gr\",                 // Greece\n        \"gs\",                 // South Georgia and the South Sandwich Islands\n        \"gt\",                 // Guatemala\n        \"gu\",                 // Guam\n        \"gw\",                 // Guinea-Bissau\n        \"gy\",                 // Guyana\n        \"hk\",                 // Hong Kong\n        \"hm\",                 // Heard Island and McDonald Islands\n        \"hn\",                 // Honduras\n        \"hr\",                 // Croatia (Hrvatska)\n        \"ht\",                 // Haiti\n        \"hu\",                 // Hungary\n        \"id\",                 // Indonesia\n        \"ie\",                 // Ireland (\u00c9ire)\n        \"il\",                 // Israel\n        \"im\",                 // Isle of Man\n        \"in\",                 // India\n        \"io\",                 // British Indian Ocean Territory\n        \"iq\",                 // Iraq\n        \"ir\",                 // Iran\n        \"is\",                 // Iceland\n        \"it\",                 // Italy\n        \"je\",                 // Jersey\n        \"jm\",                 // Jamaica\n        \"jo\",                 // Jordan\n        \"jp\",                 // Japan\n        \"ke\",                 // Kenya\n        \"kg\",                 // Kyrgyzstan\n        \"kh\",                 // Cambodia (Khmer)\n        \"ki\",                 // Kiribati\n        \"km\",                 // Comoros\n        \"kn\",                 // Saint Kitts and Nevis\n        \"kp\",                 // North Korea\n        \"kr\",                 // South Korea\n        \"kw\",                 // Kuwait\n        \"ky\",                 // Cayman Islands\n        \"kz\",                 // Kazakhstan\n        \"la\",                 // Laos (currently being marketed as the official domain for Los Angeles)\n        \"lb\",                 // Lebanon\n        \"lc\",                 // Saint Lucia\n        \"li\",                 // Liechtenstein\n        \"lk\",                 // Sri Lanka\n        \"lr\",                 // Liberia\n        \"ls\",                 // Lesotho\n        \"lt\",                 // Lithuania\n        \"lu\",                 // Luxembourg\n        \"lv\",                 // Latvia\n        \"ly\",                 // Libya\n        \"ma\",                 // Morocco\n        \"mc\",                 // Monaco\n        \"md\",                 // Moldova\n        \"me\",                 // Montenegro\n        \"mg\",                 // Madagascar\n        \"mh\",                 // Marshall Islands\n        \"mk\",                 // Republic of Macedonia\n        \"ml\",                 // Mali\n        \"mm\",                 // Myanmar\n        \"mn\",                 // Mongolia\n        \"mo\",                 // Macau\n        \"mp\",                 // Northern Mariana Islands\n        \"mq\",                 // Martinique\n        \"mr\",                 // Mauritania\n        \"ms\",                 // Montserrat\n        \"mt\",                 // Malta\n        \"mu\",                 // Mauritius\n        \"mv\",                 // Maldives\n        \"mw\",                 // Malawi\n        \"mx\",                 // Mexico\n        \"my\",                 // Malaysia\n        \"mz\",                 // Mozambique\n        \"na\",                 // Namibia\n        \"nc\",                 // New Caledonia\n        \"ne\",                 // Niger\n        \"nf\",                 // Norfolk Island\n        \"ng\",                 // Nigeria\n        \"ni\",                 // Nicaragua\n        \"nl\",                 // Netherlands\n        \"no\",                 // Norway\n        \"np\",                 // Nepal\n        \"nr\",                 // Nauru\n        \"nu\",                 // Niue\n        \"nz\",                 // New Zealand\n        \"om\",                 // Oman\n        \"pa\",                 // Panama\n        \"pe\",                 // Peru\n        \"pf\",                 // French Polynesia With Clipperton Island\n        \"pg\",                 // Papua New Guinea\n        \"ph\",                 // Philippines\n        \"pk\",                 // Pakistan\n        \"pl\",                 // Poland\n        \"pm\",                 // Saint-Pierre and Miquelon\n        \"pn\",                 // Pitcairn Islands\n        \"pr\",                 // Puerto Rico\n        \"ps\",                 // Palestinian territories (PA-controlled West Bank and Gaza Strip)\n        \"pt\",                 // Portugal\n        \"pw\",                 // Palau\n        \"py\",                 // Paraguay\n        \"qa\",                 // Qatar\n        \"re\",                 // R\u00e9union\n        \"ro\",                 // Romania\n        \"rs\",                 // Serbia\n        \"ru\",                 // Russia\n        \"rw\",                 // Rwanda\n        \"sa\",                 // Saudi Arabia\n        \"sb\",                 // Solomon Islands\n        \"sc\",                 // Seychelles\n        \"sd\",                 // Sudan\n        \"se\",                 // Sweden\n        \"sg\",                 // Singapore\n        \"sh\",                 // Saint Helena\n        \"si\",                 // Slovenia\n        \"sj\",                 // Svalbard and Jan Mayen Islands Not in use (Norwegian dependencies; see .no)\n        \"sk\",                 // Slovakia\n        \"sl\",                 // Sierra Leone\n        \"sm\",                 // San Marino\n        \"sn\",                 // Senegal\n        \"so\",                 // Somalia\n        \"sr\",                 // Suriname\n        \"ss\",                 // ss National Communication Authority (NCA)\n        \"st\",                 // S\u00e3o Tom\u00e9 and Pr\u00edncipe\n        \"su\",                 // Soviet Union (deprecated)\n        \"sv\",                 // El Salvador\n        \"sx\",                 // Sint Maarten\n        \"sy\",                 // Syria\n        \"sz\",                 // Swaziland\n        \"tc\",                 // Turks and Caicos Islands\n        \"td\",                 // Chad\n        \"tf\",                 // French Southern and Antarctic Lands\n        \"tg\",                 // Togo\n        \"th\",                 // Thailand\n        \"tj\",                 // Tajikistan\n        \"tk\",                 // Tokelau\n        \"tl\",                 // East Timor (deprecated old code)\n        \"tm\",                 // Turkmenistan\n        \"tn\",                 // Tunisia\n        \"to\",                 // Tonga\n//        \"tp\",                 // East Timor (Retired)\n        \"tr\",                 // Turkey\n        \"tt\",                 // Trinidad and Tobago\n        \"tv\",                 // Tuvalu\n        \"tw\",                 // Taiwan, Republic of China\n        \"tz\",                 // Tanzania\n        \"ua\",                 // Ukraine\n        \"ug\",                 // Uganda\n        \"uk\",                 // United Kingdom\n        \"us\",                 // United States of America\n        \"uy\",                 // Uruguay\n        \"uz\",                 // Uzbekistan\n        \"va\",                 // Vatican City State\n        \"vc\",                 // Saint Vincent and the Grenadines\n        \"ve\",                 // Venezuela\n        \"vg\",                 // British Virgin Islands\n        \"vi\",                 // U.S. Virgin Islands\n        \"vn\",                 // Vietnam\n        \"vu\",                 // Vanuatu\n        \"wf\",                 // Wallis and Futuna\n        \"ws\",                 // Samoa (formerly Western Samoa)\n        \"xn--2scrj9c\", // \u0cad\u0cbe\u0cb0\u0ca4 National Internet eXchange of India\n        \"xn--3e0b707e\", // \ud55c\uad6d KISA (Korea Internet &amp; Security Agency)\n        \"xn--3hcrj9c\", // \u0b2d\u0b3e\u0b30\u0b24 National Internet eXchange of India\n        \"xn--45br5cyl\", // \u09ad\u09be\u09f0\u09a4 National Internet eXchange of India\n        \"xn--45brj9c\", // \u09ad\u09be\u09b0\u09a4 National Internet Exchange of India\n        \"xn--4dbrk0ce\", // \u05d9\u05e9\u05e8\u05d0\u05dc The Israel Internet Association (RA)\n        \"xn--54b7fta0cc\", // \u09ac\u09be\u0982\u09b2\u09be Posts and Telecommunications Division\n        \"xn--80ao21a\", // \u049b\u0430\u0437 Association of IT Companies of Kazakhstan\n        \"xn--90a3ac\", // \u0441\u0440\u0431 Serbian National Internet Domain Registry (RNIDS)\n        \"xn--90ais\", // ??? Reliable Software Inc.\n        \"xn--clchc0ea0b2g2a9gcd\", // \u0b9a\u0bbf\u0b99\u0bcd\u0b95\u0baa\u0bcd\u0baa\u0bc2\u0bb0\u0bcd Singapore Network Information Centre (SGNIC) Pte Ltd\n        \"xn--d1alf\", // \u043c\u043a\u0434 Macedonian Academic Research Network Skopje\n        \"xn--e1a4c\", // \u0435\u044e EURid vzw/asbl\n        \"xn--fiqs8s\", // \u4e2d\u56fd China Internet Network Information Center\n        \"xn--fiqz9s\", // \u4e2d\u570b China Internet Network Information Center\n        \"xn--fpcrj9c3d\", // \u0c2d\u0c3e\u0c30\u0c24\u0c4d National Internet Exchange of India\n        \"xn--fzc2c9e2c\", // \u0dbd\u0d82\u0d9a\u0dcf LK Domain Registry\n        \"xn--gecrj9c\", // \u0aad\u0abe\u0ab0\u0aa4 National Internet Exchange of India\n        \"xn--h2breg3eve\", // \u092d\u093e\u0930\u0924\u092e\u094d National Internet eXchange of India\n        \"xn--h2brj9c\", // \u092d\u093e\u0930\u0924 National Internet Exchange of India\n        \"xn--h2brj9c8c\", // \u092d\u093e\u0930\u094b\u0924 National Internet eXchange of India\n        \"xn--j1amh\", // \u0443\u043a\u0440 Ukrainian Network Information Centre (UANIC), Inc.\n        \"xn--j6w193g\", // \u9999\u6e2f Hong Kong Internet Registration Corporation Ltd.\n        \"xn--kprw13d\", // \u53f0\u6e7e Taiwan Network Information Center (TWNIC)\n        \"xn--kpry57d\", // \u53f0\u7063 Taiwan Network Information Center (TWNIC)\n        \"xn--l1acc\", // \u043c\u043e\u043d Datacom Co.,Ltd\n        \"xn--lgbbat1ad8j\", // \u0627\u0644\u062c\u0632\u0627\u0626\u0631 CERIST\n        \"xn--mgb9awbf\", // \u0639\u0645\u0627\u0646 Telecommunications Regulatory Authority (TRA)\n        \"xn--mgba3a4f16a\", // \u0627\u06cc\u0631\u0627\u0646 Institute for Research in Fundamental Sciences (IPM)\n        \"xn--mgbaam7a8h\", // \u0627\u0645\u0627\u0631\u0627\u062a Telecommunications Regulatory Authority (TRA)\n        \"xn--mgbah1a3hjkrd\", // \u0645\u0648\u0631\u064a\u062a\u0627\u0646\u064a\u0627 Universit\u00e9 de Nouakchott Al Aasriya\n        \"xn--mgbai9azgqp6j\", // \u067e\u0627\u06a9\u0633\u062a\u0627\u0646 National Telecommunication Corporation\n        \"xn--mgbayh7gpa\", // \u0627\u0644\u0627\u0631\u062f\u0646 National Information Technology Center (NITC)\n        \"xn--mgbbh1a\", // \u0628\u0627\u0631\u062a National Internet eXchange of India\n        \"xn--mgbbh1a71e\", // \u0628\u06be\u0627\u0631\u062a National Internet Exchange of India\n        \"xn--mgbc0a9azcg\", // \u0627\u0644\u0645\u063a\u0631\u0628 Agence Nationale de R\u00e9glementation des T\u00e9l\u00e9communications (ANRT)\n        \"xn--mgbcpq6gpa1a\", // \u0627\u0644\u0628\u062d\u0631\u064a\u0646 Telecommunications Regulatory Authority (TRA)\n        \"xn--mgberp4a5d4ar\", // \u0627\u0644\u0633\u0639\u0648\u062f\u064a\u0629 Communications and Information Technology Commission\n        \"xn--mgbgu82a\", // \u0680\u0627\u0631\u062a National Internet eXchange of India\n        \"xn--mgbpl2fh\", // ????? Sudan Internet Society\n        \"xn--mgbtx2b\", // \u0639\u0631\u0627\u0642 Communications and Media Commission (CMC)\n        \"xn--mgbx4cd0ab\", // \u0645\u0644\u064a\u0633\u064a\u0627 MYNIC Berhad\n        \"xn--mix891f\", // \u6fb3\u9580 Bureau of Telecommunications Regulation (DSRT)\n        \"xn--node\", // \u10d2\u10d4 Information Technologies Development Center (ITDC)\n        \"xn--o3cw4h\", // \u0e44\u0e17\u0e22 Thai Network Information Center Foundation\n        \"xn--ogbpf8fl\", // \u0633\u0648\u0631\u064a\u0629 National Agency for Network Services (NANS)\n        \"xn--p1ai\", // \u0440\u0444 Coordination Center for TLD RU\n        \"xn--pgbs0dh\", // \u062a\u0648\u0646\u0633 Agence Tunisienne d&#39;Internet\n        \"xn--q7ce6a\", // \u0ea5\u0eb2\u0ea7 Lao National Internet Center (LANIC)\n        \"xn--qxa6a\", // \u03b5\u03c5 EURid vzw/asbl\n        \"xn--qxam\", // \u03b5\u03bb ICS-FORTH GR\n        \"xn--rvc1e0am3e\", // \u0d2d\u0d3e\u0d30\u0d24\u0d02 National Internet eXchange of India\n        \"xn--s9brj9c\", // \u0a2d\u0a3e\u0a30\u0a24 National Internet Exchange of India\n        \"xn--wgbh1c\", // \u0645\u0635\u0631 National Telecommunication Regulatory Authority - NTRA\n        \"xn--wgbl6a\", // \u0642\u0637\u0631 Communications Regulatory Authority\n        \"xn--xkc2al3hye2a\", // \u0b87\u0bb2\u0b99\u0bcd\u0b95\u0bc8 LK Domain Registry\n        \"xn--xkc2dl3a5ee0h\", // \u0b87\u0ba8\u0bcd\u0ba4\u0bbf\u0baf\u0bbe National Internet Exchange of India\n        \"xn--y9a3aq\", // ??? Internet Society\n        \"xn--yfro4i67o\", // \u65b0\u52a0\u5761 Singapore Network Information Centre (SGNIC) Pte Ltd\n        \"xn--ygbi2ammx\", // \u0641\u0644\u0633\u0637\u064a\u0646 Ministry of Telecom &amp; Information Technology (MTIT)\n        \"ye\",                 // Yemen\n        \"yt\",                 // Mayotte\n        \"za\",                 // South Africa\n        \"zm\",                 // Zambia\n        \"zw\",                 // Zimbabwe\n    }", "syntax_pass": true}, {"attribute_expression": "private static final String[] LOCAL_TLDS = {\n       \"localdomain\",         // Also widely used as localhost.localdomain\n       \"localhost\",           // RFC2606 defined\n    };", "docstring": " WARNING: this array MUST be sorted, otherwise it cannot be searched reliably using binary search", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String[]", "name": "LOCAL_TLDS = {\n       \"localdomain\",         // Also widely used as localhost.localdomain\n       \"localhost\",           // RFC2606 defined\n    }", "syntax_pass": true}, {"attribute_expression": "private static boolean inUse;", "docstring": "\nThis field is used to detect whether the getInstance has been called.\nAfter this, the method updateTLDOverride is not allowed to be called.\nThis field does not need to be volatile since it is only accessed from\nsynchronized methods.\n", "modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "type": "boolean", "name": "inUse", "syntax_pass": true}, {"attribute_expression": "private static String[] countryCodeTLDsPlus = EMPTY_STRING_ARRAY;", "docstring": " WARNING: this array MUST be sorted, otherwise it cannot be searched reliably using binary search", "modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "type": "String[]", "name": "countryCodeTLDsPlus = EMPTY_STRING_ARRAY", "syntax_pass": true}, {"attribute_expression": "private static String[] genericTLDsPlus = EMPTY_STRING_ARRAY;", "docstring": " WARNING: this array MUST be sorted, otherwise it cannot be searched reliably using binary search", "modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "type": "String[]", "name": "genericTLDsPlus = EMPTY_STRING_ARRAY", "syntax_pass": true}, {"attribute_expression": "private static String[] countryCodeTLDsMinus = EMPTY_STRING_ARRAY;", "docstring": " WARNING: this array MUST be sorted, otherwise it cannot be searched reliably using binary search", "modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "type": "String[]", "name": "countryCodeTLDsMinus = EMPTY_STRING_ARRAY", "syntax_pass": true}, {"attribute_expression": "private static String[] genericTLDsMinus = EMPTY_STRING_ARRAY;", "docstring": " WARNING: this array MUST be sorted, otherwise it cannot be searched reliably using binary search", "modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "type": "String[]", "name": "genericTLDsMinus = EMPTY_STRING_ARRAY", "syntax_pass": true}, {"attribute_expression": "private static String[] localTLDsMinus = EMPTY_STRING_ARRAY;", "docstring": " WARNING: this array MUST be sorted, otherwise it cannot be searched reliably using binary search", "modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "type": "String[]", "name": "localTLDsMinus = EMPTY_STRING_ARRAY", "syntax_pass": true}, {"attribute_expression": "private static String[] localTLDsPlus = EMPTY_STRING_ARRAY;", "docstring": " WARNING: this array MUST be sorted, otherwise it cannot be searched reliably using binary search", "modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "type": "String[]", "name": "localTLDsPlus = EMPTY_STRING_ARRAY", "syntax_pass": true}, {"attribute_expression": "private final boolean allowLocal;", "docstring": " Whether to allow local overrides.", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "boolean", "name": "allowLocal", "syntax_pass": true}, {"attribute_expression": "private final RegexValidator domainRegex =\n            new RegexValidator(DOMAIN_NAME_REGEX);", "docstring": "\nRegexValidator for matching domains.\n", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "RegexValidator", "name": "domainRegex =\n            new RegexValidator(DOMAIN_NAME_REGEX)", "syntax_pass": true}, {"attribute_expression": "private final RegexValidator hostnameRegex =\n            new RegexValidator(DOMAIN_LABEL_REGEX);", "docstring": " RFC1123 sec 2.1 allows hostnames to start with a digit", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "RegexValidator", "name": "hostnameRegex =\n            new RegexValidator(DOMAIN_LABEL_REGEX)", "syntax_pass": true}, {"attribute_expression": "final String[] myCountryCodeTLDsMinus;", "docstring": " Local override.", "modifiers": "final", "marker_annotations": [], "non_marker_annotations": ["final"], "comments": [], "type": "String[]", "name": "myCountryCodeTLDsMinus", "syntax_pass": true}, {"attribute_expression": "final String[] myCountryCodeTLDsPlus;", "docstring": " Local override.", "modifiers": "final", "marker_annotations": [], "non_marker_annotations": ["final"], "comments": [], "type": "String[]", "name": "myCountryCodeTLDsPlus", "syntax_pass": true}, {"attribute_expression": "final String[] myGenericTLDsPlus;", "docstring": " Local override.", "modifiers": "final", "marker_annotations": [], "non_marker_annotations": ["final"], "comments": [], "type": "String[]", "name": "myGenericTLDsPlus", "syntax_pass": true}, {"attribute_expression": "final String[] myGenericTLDsMinus;", "docstring": " Local override.", "modifiers": "final", "marker_annotations": [], "non_marker_annotations": ["final"], "comments": [], "type": "String[]", "name": "myGenericTLDsMinus", "syntax_pass": true}, {"attribute_expression": "final String[] myLocalTLDsPlus;", "docstring": " Local override.", "modifiers": "final", "marker_annotations": [], "non_marker_annotations": ["final"], "comments": [], "type": "String[]", "name": "myLocalTLDsPlus", "syntax_pass": true}, {"attribute_expression": "final String[] myLocalTLDsMinus;", "docstring": " Local override.", "modifiers": "final", "marker_annotations": [], "non_marker_annotations": ["final"], "comments": [], "type": "String[]", "name": "myLocalTLDsMinus", "syntax_pass": true}]}, {"uris": "src/main/java/org/apache/commons/validator/routines/CurrencyValidator.java.CurrencyValidator", "name": "CurrencyValidator", "file_path": "src/main/java/org/apache/commons/validator/routines/CurrencyValidator.java", "superclasses": "BigDecimalValidator", "methods": ["[BigDecimalValidator]getInstance()", "[]CurrencyValidator()", "[]CurrencyValidator(boolean,boolean)", "[Object]parse(String,Format)"], "method_uris": ["src/main/java/org/apache/commons/validator/routines/CurrencyValidator.java.CurrencyValidator.[BigDecimalValidator]getInstance()", "src/main/java/org/apache/commons/validator/routines/CurrencyValidator.java.CurrencyValidator.[]CurrencyValidator()", "src/main/java/org/apache/commons/validator/routines/CurrencyValidator.java.CurrencyValidator.[]CurrencyValidator(boolean,boolean)", "src/main/java/org/apache/commons/validator/routines/CurrencyValidator.java.CurrencyValidator.[Object]parse(String,Format)"], "overrides": null, "attributes": [], "class_docstring": "\n<p><b>Currency Validation</b> and Conversion routines ({@code java.math.BigDecimal}).</p>\n\n<p>This is one implementation of a currency validator that has the following features:</p>\n   <ul>\n      <li>It is <em>lenient</em> about the presence of the <em>currency symbol</em></li>\n      <li>It converts the currency to a {@code java.math.BigDecimal}</li>\n   </ul>\n\n<p>However any of the <em>number</em> validators can be used for <em>currency</em> validation.\n   For example, if you wanted a <em>currency</em> validator that converts to a\n   {@code java.lang.Integer} then you can simply instantiate an\n   {@code IntegerValidator} with the appropriate <em>format type</em>:</p>\n\n   <p>{@code ... = new IntegerValidator(false, IntegerValidator.CURRENCY_FORMAT);}</p>\n\n<p>Pick the appropriate validator, depending on the type (e.g Float, Double, Integer, Long etc)\n   you want the currency converted to. One thing to note - only the CurrencyValidator\n   implements <em>lenient</em> behavior regarding the currency symbol.</p>\n\n@since 1.3.0\n", "original_string": "public class CurrencyValidator extends BigDecimalValidator {\n\n    private static final long serialVersionUID = -4201640771171486514L;\n\n    private static final CurrencyValidator VALIDATOR = new CurrencyValidator();\n\n    /** DecimalFormat's currency symbol */\n    private static final char CURRENCY_SYMBOL = '\\u00A4';\n\n    /**\n     * Gets the singleton instance of this validator.\n     * @return A singleton instance of the CurrencyValidator.\n     */\n    public static BigDecimalValidator getInstance() {\n        return VALIDATOR;\n    }\n\n    /**\n     * Constructs a <em>strict</em> instance.\n     */\n    public CurrencyValidator() {\n        this(true, true);\n    }\n\n    /**\n     * Constructs an instance with the specified strict setting.\n     *\n     * @param strict {@code true} if strict\n     *        {@code Format} parsing should be used.\n     * @param allowFractions {@code true} if fractions are\n     *        allowed or {@code false} if integers only.\n     */\n    public CurrencyValidator(final boolean strict, final boolean allowFractions) {\n        super(strict, CURRENCY_FORMAT, allowFractions);\n    }\n\n    /**\n     * <p>Parse the value with the specified {@code Format}.</p>\n     *\n     * <p>This implementation is lenient whether the currency symbol\n     *    is present or not. The default {@code NumberFormat}\n     *    behavior is for the parsing to \"fail\" if the currency\n     *    symbol is missing. This method re-parses with a format\n     *    without the currency symbol if it fails initially.</p>\n     *\n     * @param value The value to be parsed.\n     * @param formatter The Format to parse the value with.\n     * @return The parsed value if valid or {@code null} if invalid.\n     */\n    @Override\n    protected Object parse(final String value, final Format formatter) {\n\n        // Initial parse of the value\n        Object parsedValue = super.parse(value, formatter);\n        if (parsedValue != null || !(formatter instanceof DecimalFormat)) {\n            return parsedValue;\n        }\n\n        // Re-parse using a pattern without the currency symbol\n        final DecimalFormat decimalFormat = (DecimalFormat) formatter;\n        final String pattern = decimalFormat.toPattern();\n        if (pattern.indexOf(CURRENCY_SYMBOL) >= 0) {\n            final StringBuilder buffer = new StringBuilder(pattern.length());\n            for (int i = 0; i < pattern.length(); i++) {\n                if (pattern.charAt(i) != CURRENCY_SYMBOL) {\n                    buffer.append(pattern.charAt(i));\n                }\n            }\n            decimalFormat.applyPattern(buffer.toString());\n            parsedValue = super.parse(value, decimalFormat);\n        }\n        return parsedValue;\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final long serialVersionUID = -4201640771171486514L;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "serialVersionUID = -4201640771171486514L", "syntax_pass": true}, {"attribute_expression": "private static final CurrencyValidator VALIDATOR = new CurrencyValidator();", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "CurrencyValidator", "name": "VALIDATOR = new CurrencyValidator()", "syntax_pass": true}, {"attribute_expression": "private static final char CURRENCY_SYMBOL = '\\u00A4';", "docstring": " DecimalFormat's currency symbol", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "char", "name": "CURRENCY_SYMBOL = '\\u00A4'", "syntax_pass": true}]}, {"uris": "src/main/java/org/apache/commons/validator/routines/DateValidator.java.DateValidator", "name": "DateValidator", "file_path": "src/main/java/org/apache/commons/validator/routines/DateValidator.java", "superclasses": "AbstractCalendarValidator", "methods": ["[DateValidator]getInstance()", "[]DateValidator()", "[]DateValidator(boolean,int)", "[int]compareDates(Date,Date,TimeZone)", "[int]compareMonths(Date,Date,TimeZone)", "[int]compareQuarters(Date,Date,TimeZone)", "[int]compareQuarters(Date,Date,TimeZone,int)", "[int]compareWeeks(Date,Date,TimeZone)", "[int]compareYears(Date,Date,TimeZone)", "[Calendar]getCalendar(Date,TimeZone)", "[Object]processParsedValue(Object,Format)", "[Date]validate(String)", "[Date]validate(String,Locale)", "[Date]validate(String,Locale,TimeZone)", "[Date]validate(String,String)", "[Date]validate(String,String,Locale)", "[Date]validate(String,String,Locale,TimeZone)", "[Date]validate(String,String,TimeZone)", "[Date]validate(String,TimeZone)"], "method_uris": ["src/main/java/org/apache/commons/validator/routines/DateValidator.java.DateValidator.[DateValidator]getInstance()", "src/main/java/org/apache/commons/validator/routines/DateValidator.java.DateValidator.[]DateValidator()", "src/main/java/org/apache/commons/validator/routines/DateValidator.java.DateValidator.[]DateValidator(boolean,int)", "src/main/java/org/apache/commons/validator/routines/DateValidator.java.DateValidator.[int]compareDates(Date,Date,TimeZone)", "src/main/java/org/apache/commons/validator/routines/DateValidator.java.DateValidator.[int]compareMonths(Date,Date,TimeZone)", "src/main/java/org/apache/commons/validator/routines/DateValidator.java.DateValidator.[int]compareQuarters(Date,Date,TimeZone)", "src/main/java/org/apache/commons/validator/routines/DateValidator.java.DateValidator.[int]compareQuarters(Date,Date,TimeZone,int)", "src/main/java/org/apache/commons/validator/routines/DateValidator.java.DateValidator.[int]compareWeeks(Date,Date,TimeZone)", "src/main/java/org/apache/commons/validator/routines/DateValidator.java.DateValidator.[int]compareYears(Date,Date,TimeZone)", "src/main/java/org/apache/commons/validator/routines/DateValidator.java.DateValidator.[Calendar]getCalendar(Date,TimeZone)", "src/main/java/org/apache/commons/validator/routines/DateValidator.java.DateValidator.[Object]processParsedValue(Object,Format)", "src/main/java/org/apache/commons/validator/routines/DateValidator.java.DateValidator.[Date]validate(String)", "src/main/java/org/apache/commons/validator/routines/DateValidator.java.DateValidator.[Date]validate(String,Locale)", "src/main/java/org/apache/commons/validator/routines/DateValidator.java.DateValidator.[Date]validate(String,Locale,TimeZone)", "src/main/java/org/apache/commons/validator/routines/DateValidator.java.DateValidator.[Date]validate(String,String)", "src/main/java/org/apache/commons/validator/routines/DateValidator.java.DateValidator.[Date]validate(String,String,Locale)", "src/main/java/org/apache/commons/validator/routines/DateValidator.java.DateValidator.[Date]validate(String,String,Locale,TimeZone)", "src/main/java/org/apache/commons/validator/routines/DateValidator.java.DateValidator.[Date]validate(String,String,TimeZone)", "src/main/java/org/apache/commons/validator/routines/DateValidator.java.DateValidator.[Date]validate(String,TimeZone)"], "overrides": null, "attributes": [], "class_docstring": "\n<p><b>Date Validation</b> and Conversion routines ({@code java.util.Date}).</p>\n\n<p>This validator provides a number of methods for validating/converting\n   a {@link String} date value to a {@code java.util.Date} using\n   {@link DateFormat} to parse either:</p>\n   <ul>\n      <li>using the default format for the default {@link Locale}</li>\n      <li>using a specified pattern with the default {@link Locale}</li>\n      <li>using the default format for a specified {@link Locale}</li>\n      <li>using a specified pattern with a specified {@link Locale}</li>\n   </ul>\n\n<p>For each of the above mechanisms, conversion method (i.e the\n   {@code validate} methods) implementations are provided which\n   either use the default {@code TimeZone} or allow the\n   {@code TimeZone} to be specified.</p>\n\n<p>Use one of the {@code isValid()} methods to just validate or\n   one of the {@code validate()} methods to validate and receive a\n   <em>converted</em> {@code Date} value.</p>\n\n<p>Implementations of the {@code validate()} method are provided\n   to create {@code Date} objects for different <em>time zones</em>\n   if the system default is not appropriate.</p>\n\n<p>Once a value has been successfully converted the following\n   methods can be used to perform various date comparison checks:</p>\n   <ul>\n      <li>{@code compareDates()} compares the day, month and\n          year of two dates, returning 0, -1 or +1 indicating\n          whether the first date is equal, before or after the second.</li>\n      <li>{@code compareWeeks()} compares the week and\n          year of two dates, returning 0, -1 or +1 indicating\n          whether the first week is equal, before or after the second.</li>\n      <li>{@code compareMonths()} compares the month and\n          year of two dates, returning 0, -1 or +1 indicating\n          whether the first month is equal, before or after the second.</li>\n      <li>{@code compareQuarters()} compares the quarter and\n          year of two dates, returning 0, -1 or +1 indicating\n          whether the first quarter is equal, before or after the second.</li>\n      <li>{@code compareYears()} compares the\n          year of two dates, returning 0, -1 or +1 indicating\n          whether the first year is equal, before or after the second.</li>\n   </ul>\n\n<p>So that the same mechanism used for parsing an <em>input</em> value\n   for validation can be used to format <em>output</em>, corresponding\n   {@code format()} methods are also provided. That is you can\n   format either:</p>\n   <ul>\n      <li>using a specified pattern</li>\n      <li>using the format for a specified {@link Locale}</li>\n      <li>using the format for the <em>default</em> {@link Locale}</li>\n   </ul>\n\n@since 1.3.0\n", "original_string": "public class DateValidator extends AbstractCalendarValidator {\n\n    private static final long serialVersionUID = -3966328400469953190L;\n\n    private static final DateValidator VALIDATOR = new DateValidator();\n\n    /**\n     * Gets the singleton instance of this validator.\n     * @return A singleton instance of the DateValidator.\n     */\n    public static DateValidator getInstance() {\n        return VALIDATOR;\n    }\n\n    /**\n     * Constructs a <em>strict</em> instance with <em>short</em>\n     * date style.\n     */\n    public DateValidator() {\n        this(true, DateFormat.SHORT);\n    }\n\n    /**\n     * Constructs an instance with the specified <em>strict</em>\n     * and <em>date style</em> parameters.\n     *\n     * @param strict {@code true} if strict\n     *        {@code Format} parsing should be used.\n     * @param dateStyle the date style to use for Locale validation.\n     */\n    public DateValidator(final boolean strict, final int dateStyle) {\n        super(strict, dateStyle, -1);\n    }\n\n    /**\n     * <p>Compare Dates (day, month and year - not time).</p>\n     *\n     * @param value The {@link Calendar} value to check.\n     * @param compare The {@link Calendar} to compare the value to.\n     * @param timeZone The Time Zone used to compare the dates, system default if null.\n     * @return Zero if the dates are equal, -1 if first\n     * date is less than the seconds and +1 if the first\n     * date is greater than.\n     */\n    public int compareDates(final Date value, final Date compare, final TimeZone timeZone) {\n        final Calendar calendarValue = getCalendar(value, timeZone);\n        final Calendar calendarCompare = getCalendar(compare, timeZone);\n        return compare(calendarValue, calendarCompare, Calendar.DATE);\n    }\n\n    /**\n     * <p>Compare Months (month and year).</p>\n     *\n     * @param value The {@code Date} value to check.\n     * @param compare The {@code Date} to compare the value to.\n     * @param timeZone The Time Zone used to compare the dates, system default if null.\n     * @return Zero if the months are equal, -1 if first\n     * parameter's month is less than the seconds and +1 if the first\n     * parameter's month is greater than.\n     */\n    public int compareMonths(final Date value, final Date compare, final TimeZone timeZone) {\n        final Calendar calendarValue = getCalendar(value, timeZone);\n        final Calendar calendarCompare = getCalendar(compare, timeZone);\n        return compare(calendarValue, calendarCompare, Calendar.MONTH);\n    }\n\n    /**\n     * <p>Compare Quarters (quarter and year).</p>\n     *\n     * @param value The {@code Date} value to check.\n     * @param compare The {@code Date} to compare the value to.\n     * @param timeZone The Time Zone used to compare the dates, system default if null.\n     * @return Zero if the months are equal, -1 if first\n     * parameter's quarter is less than the seconds and +1 if the first\n     * parameter's quarter is greater than.\n     */\n    public int compareQuarters(final Date value, final Date compare, final TimeZone timeZone) {\n        return compareQuarters(value, compare, timeZone, 1);\n    }\n\n    /**\n     * <p>Compare Quarters (quarter and year).</p>\n     *\n     * @param value The {@code Date} value to check.\n     * @param compare The {@code Date} to compare the value to.\n     * @param timeZone The Time Zone used to compare the dates, system default if null.\n     * @param monthOfFirstQuarter The  month that the first quarter starts.\n     * @return Zero if the quarters are equal, -1 if first\n     * parameter's quarter is less than the seconds and +1 if the first\n     * parameter's quarter is greater than.\n     */\n    public int compareQuarters(final Date value, final Date compare, final TimeZone timeZone, final int monthOfFirstQuarter) {\n        final Calendar calendarValue = getCalendar(value, timeZone);\n        final Calendar calendarCompare = getCalendar(compare, timeZone);\n        return super.compareQuarters(calendarValue, calendarCompare, monthOfFirstQuarter);\n    }\n\n    /**\n     * <p>Compare Weeks (week and year).</p>\n     *\n     * @param value The {@code Date} value to check.\n     * @param compare The {@code Date} to compare the value to.\n     * @param timeZone The Time Zone used to compare the dates, system default if null.\n     * @return Zero if the weeks are equal, -1 if first\n     * parameter's week is less than the seconds and +1 if the first\n     * parameter's week is greater than.\n     */\n    public int compareWeeks(final Date value, final Date compare, final TimeZone timeZone) {\n        final Calendar calendarValue = getCalendar(value, timeZone);\n        final Calendar calendarCompare = getCalendar(compare, timeZone);\n        return compare(calendarValue, calendarCompare, Calendar.WEEK_OF_YEAR);\n    }\n\n    /**\n     * <p>Compare Years.</p>\n     *\n     * @param value The {@code Date} value to check.\n     * @param compare The {@code Date} to compare the value to.\n     * @param timeZone The Time Zone used to compare the dates, system default if null.\n     * @return Zero if the years are equal, -1 if first\n     * parameter's year is less than the seconds and +1 if the first\n     * parameter's year is greater than.\n     */\n    public int compareYears(final Date value, final Date compare, final TimeZone timeZone) {\n        final Calendar calendarValue = getCalendar(value, timeZone);\n        final Calendar calendarCompare = getCalendar(compare, timeZone);\n        return compare(calendarValue, calendarCompare, Calendar.YEAR);\n    }\n\n    /**\n     * <p>Convert a {@code Date} to a {@link Calendar}.</p>\n     *\n     * @param value The date value to be converted.\n     * @return The converted {@link Calendar}.\n     */\n    private Calendar getCalendar(final Date value, final TimeZone timeZone) {\n        Calendar calendar;\n        if (timeZone != null) {\n            calendar = Calendar.getInstance(timeZone);\n        } else {\n            calendar = Calendar.getInstance();\n        }\n        calendar.setTime(value);\n        return calendar;\n\n    }\n\n    /**\n     * <p>Returns the parsed {@code Date} unchanged.</p>\n     *\n     * @param value The parsed {@code Date} object created.\n     * @param formatter The Format used to parse the value with.\n     * @return The parsed value converted to a {@link Calendar}.\n     */\n    @Override\n    protected Object processParsedValue(final Object value, final Format formatter) {\n        return value;\n    }\n\n    /**\n     * <p>Validate/convert a {@code Date} using the default\n     *    {@link Locale} and {@code TimeZone}.\n     *\n     * @param value The value validation is being performed on.\n     * @return The parsed {@code Date} if valid or {@code null}\n     *  if invalid.\n     */\n    public Date validate(final String value) {\n        return (Date) parse(value, (String) null, (Locale) null, (TimeZone) null);\n    }\n\n    /**\n     * <p>Validate/convert a {@code Date} using the specified\n     *    {@link Locale} and default {@code TimeZone}.\n     *\n     * @param value The value validation is being performed on.\n     * @param locale The locale to use for the date format, system default if null.\n     * @return The parsed {@code Date} if valid or {@code null} if invalid.\n     */\n    public Date validate(final String value, final Locale locale) {\n        return (Date) parse(value, (String) null, locale, (TimeZone) null);\n    }\n\n    /**\n     * <p>Validate/convert a {@code Date} using the specified\n     *    {@link Locale} and {@code TimeZone}.\n     *\n     * @param value The value validation is being performed on.\n     * @param locale The locale to use for the date format, system default if null.\n     * @param timeZone The Time Zone used to parse the date, system default if null.\n     * @return The parsed {@code Date} if valid or {@code null} if invalid.\n     */\n    public Date validate(final String value, final Locale locale, final TimeZone timeZone) {\n        return (Date) parse(value, (String) null, locale, timeZone);\n    }\n\n    /**\n     * <p>Validate/convert a {@code Date} using the specified\n     *    <em>pattern</em> and default {@code TimeZone}.\n     *\n     * @param value The value validation is being performed on.\n     * @param pattern The pattern used to validate the value against, or the\n     *        default for the {@link Locale} if {@code null}.\n     * @return The parsed {@code Date} if valid or {@code null} if invalid.\n     */\n    public Date validate(final String value, final String pattern) {\n        return (Date) parse(value, pattern, (Locale) null, (TimeZone) null);\n    }\n\n    /**\n     * <p>Validate/convert a {@code Date} using the specified pattern\n     *    and {@link Locale} and the default {@code TimeZone}.\n     *\n     * @param value The value validation is being performed on.\n     * @param pattern The pattern used to validate the value against, or the\n     *        default for the {@link Locale} if {@code null}.\n     * @param locale The locale to use for the date format, system default if null.\n     * @return The parsed {@code Date} if valid or {@code null} if invalid.\n     */\n    public Date validate(final String value, final String pattern, final Locale locale) {\n        return (Date) parse(value, pattern, locale, (TimeZone) null);\n    }\n\n    /**\n     * <p>Validate/convert a {@code Date} using the specified\n     *    pattern, and {@link Locale} and {@code TimeZone}.\n     *\n     * @param value The value validation is being performed on.\n     * @param pattern The pattern used to validate the value against, or the\n     *        default for the {@link Locale} if {@code null}.\n     * @param locale The locale to use for the date format, system default if null.\n     * @param timeZone The Time Zone used to parse the date, system default if null.\n     * @return The parsed {@code Date} if valid or {@code null} if invalid.\n     */\n    public Date validate(final String value, final String pattern, final Locale locale, final TimeZone timeZone) {\n        return (Date) parse(value, pattern, locale, timeZone);\n    }\n\n    /**\n     * <p>Validate/convert a {@code Date} using the specified\n     *    <em>pattern</em> and {@code TimeZone}.\n     *\n     * @param value The value validation is being performed on.\n     * @param pattern The pattern used to validate the value against, or the\n     *        default for the {@link Locale} if {@code null}.\n     * @param timeZone The Time Zone used to parse the date, system default if null.\n     * @return The parsed {@code Date} if valid or {@code null} if invalid.\n     */\n    public Date validate(final String value, final String pattern, final TimeZone timeZone) {\n        return (Date) parse(value, pattern, (Locale) null, timeZone);\n    }\n\n    /**\n     * <p>Validate/convert a {@code Date} using the specified\n     *    {@code TimeZone} and default {@link Locale}.\n     *\n     * @param value The value validation is being performed on.\n     * @param timeZone The Time Zone used to parse the date, system default if null.\n     * @return The parsed {@code Date} if valid or {@code null} if invalid.\n     */\n    public Date validate(final String value, final TimeZone timeZone) {\n        return (Date) parse(value, (String) null, (Locale) null, timeZone);\n    }\n\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final long serialVersionUID = -3966328400469953190L;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "serialVersionUID = -3966328400469953190L", "syntax_pass": true}, {"attribute_expression": "private static final DateValidator VALIDATOR = new DateValidator();", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "DateValidator", "name": "VALIDATOR = new DateValidator()", "syntax_pass": true}]}, {"uris": "src/main/java/org/apache/commons/validator/routines/RegexValidator.java.RegexValidator", "name": "RegexValidator", "file_path": "src/main/java/org/apache/commons/validator/routines/RegexValidator.java", "superclasses": "", "methods": ["[int]toCompileFlags(boolean)", "[]RegexValidator(int)", "[]RegexValidator(List<String>)", "[]RegexValidator(String)", "[]RegexValidator()", "[]RegexValidator(String,boolean)", "[]RegexValidator(String[],boolean)", "[Pattern[]]getPatterns()", "[boolean]isValid(String)", "[String[]]match(String)", "[String]toString()", "[String]validate(String)"], "method_uris": ["src/main/java/org/apache/commons/validator/routines/RegexValidator.java.RegexValidator.[int]toCompileFlags(boolean)", "src/main/java/org/apache/commons/validator/routines/RegexValidator.java.RegexValidator.[]RegexValidator(int)", "src/main/java/org/apache/commons/validator/routines/RegexValidator.java.RegexValidator.[]RegexValidator(List<String>)", "src/main/java/org/apache/commons/validator/routines/RegexValidator.java.RegexValidator.[]RegexValidator(String)", "src/main/java/org/apache/commons/validator/routines/RegexValidator.java.RegexValidator.[]RegexValidator()", "src/main/java/org/apache/commons/validator/routines/RegexValidator.java.RegexValidator.[]RegexValidator(String,boolean)", "src/main/java/org/apache/commons/validator/routines/RegexValidator.java.RegexValidator.[]RegexValidator(String[],boolean)", "src/main/java/org/apache/commons/validator/routines/RegexValidator.java.RegexValidator.[Pattern[]]getPatterns()", "src/main/java/org/apache/commons/validator/routines/RegexValidator.java.RegexValidator.[boolean]isValid(String)", "src/main/java/org/apache/commons/validator/routines/RegexValidator.java.RegexValidator.[String[]]match(String)", "src/main/java/org/apache/commons/validator/routines/RegexValidator.java.RegexValidator.[String]toString()", "src/main/java/org/apache/commons/validator/routines/RegexValidator.java.RegexValidator.[String]validate(String)"], "overrides": null, "attributes": [], "class_docstring": "\n<b>Regular Expression</b> validation (using the JRE's regular expression support).\n<p>\nConstructs the validator either for a single regular expression or a set (array) of regular expressions. By default validation is <em>case sensitive</em> but\nconstructors are provided to allow <em>case in-sensitive</em> validation. For example to create a validator which does <em>case in-sensitive</em> validation\nfor a set of regular expressions:\n</p>\n\n<pre>\n<code>\nString[] regexs = new String[] {...};\nRegexValidator validator = new RegexValidator(regexs, false);\n</code>\n</pre>\n\n<ul>\n<li>Validate {@code true} or {@code false}:</li>\n<li>\n<ul>\n<li>{@code boolean valid = validator.isValid(value);}</li>\n</ul>\n</li>\n<li>Validate returning an aggregated String of the matched groups:</li>\n<li>\n<ul>\n<li>{@code String result = validator.validate(value);}</li>\n</ul>\n</li>\n<li>Validate returning the matched groups:</li>\n<li>\n<ul>\n<li>{@code String[] result = validator.match(value);}</li>\n</ul>\n</li>\n</ul>\n\n<b>Note that patterns are matched against the entire input.</b>\n\n<p>\nCached instances pre-compile and re-use {@link Pattern}(s) - which according to the {@link Pattern} API are safe to use in a multi-threaded environment.\n</p>\n\n@since 1.4\n", "original_string": "public class RegexValidator implements Serializable {\n\n    private static final long serialVersionUID = -8832409930574867162L;\n\n    private static final int CASE_SENSITIVE = 0;\n\n    private static int toCompileFlags(final boolean caseSensitive) {\n        return caseSensitive ? CASE_SENSITIVE : Pattern.CASE_INSENSITIVE;\n    }\n\n    /**\n     * Compiled RE patterns from constructors.\n     */\n    private final Pattern[] patterns;\n\n    /**\n     * Constructs a new instance that matches any one of the set of regular expressions with the specified case sensitivity.\n     *\n     * @param regexs The set of regular expressions this validator will validate against\n     * @param flags  See {@link Pattern#compile(String, int)}. sensitive</i>, otherwise matching is <em>case in-sensitive</em>\n     */\n    private RegexValidator(final int flags, final String... regexs) {\n        if (regexs == null || regexs.length == 0) {\n            throw new IllegalArgumentException(\"Regular expressions are missing\");\n        }\n        patterns = new Pattern[regexs.length];\n        for (int i = 0; i < regexs.length; i++) {\n            final String regex = regexs[i];\n            if (regex == null || regex.isEmpty()) {\n                throw new IllegalArgumentException(\"Regular expression[\" + i + \"] is missing\");\n            }\n            patterns[i] = Pattern.compile(regex, flags);\n        }\n    }\n\n    /**\n     * Constructs a new <em>case sensitive</em> instance that matches any one in the list of regular expressions.\n     *\n     * @param regexs The set of regular expressions this validator will validate against\n     */\n    RegexValidator(final List<String> regexs) {\n        this(CASE_SENSITIVE, regexs.toArray(new String[] {}));\n    }\n\n    /**\n     * Constructs a new <em>case sensitive</em> instance for a single regular expression.\n     *\n     * @param regex The regular expression this validator will validate against\n     */\n    public RegexValidator(final String regex) {\n        this(CASE_SENSITIVE, regex);\n    }\n\n    /**\n     * Constructs a new <em>case sensitive</em> instance that matches any one in the array of regular expressions.\n     *\n     * @param regexs The set of regular expressions this validator will validate against\n     */\n    public RegexValidator(final String... regexs) {\n        this(CASE_SENSITIVE, regexs);\n    }\n\n    /**\n     * Constructs a new instance for a single regular expression with the specified case sensitivity.\n     *\n     * @param regex         The regular expression this validator will validate against\n     * @param caseSensitive when {@code true} matching is <i>case sensitive</i>, otherwise matching is <em>case in-sensitive</em>\n     */\n    public RegexValidator(final String regex, final boolean caseSensitive) {\n        this(toCompileFlags(caseSensitive), regex);\n    }\n\n    /**\n     * Constructs a new instance that matches any one of the set of regular expressions with the specified case sensitivity.\n     *\n     * @param regexs        The set of regular expressions this validator will validate against\n     * @param caseSensitive when {@code true} matching is <i>case sensitive</i>, otherwise matching is <em>case in-sensitive</em>\n     */\n    public RegexValidator(final String[] regexs, final boolean caseSensitive) {\n        this(toCompileFlags(caseSensitive), regexs);\n    }\n\n    /**\n     * Gets a copy of the Patterns.\n     *\n     * @return a copy of the Patterns.\n     * @since 1.8\n     */\n    public Pattern[] getPatterns() {\n        return patterns.clone();\n    }\n\n    /**\n     * Validates a value against the set of regular expressions.\n     *\n     * @param value The value to validate.\n     * @return {@code true} if the value is valid otherwise {@code false}.\n     */\n    public boolean isValid(final String value) {\n        if (value == null) {\n            return false;\n        }\n        for (final Pattern pattern : patterns) {\n            if (pattern.matcher(value).matches()) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Validates a value against the set of regular expressions returning the array of matched groups.\n     *\n     * @param value The value to validate.\n     * @return String array of the <em>groups</em> matched if valid or {@code null} if invalid\n     */\n    public String[] match(final String value) {\n        if (value == null) {\n            return null;\n        }\n        for (final Pattern pattern : patterns) {\n            final Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {\n                final int count = matcher.groupCount();\n                final String[] groups = new String[count];\n                for (int j = 0; j < count; j++) {\n                    groups[j] = matcher.group(j + 1);\n                }\n                return groups;\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Provides a String representation of this validator.\n     *\n     * @return A String representation of this validator.\n     */\n    @Override\n    public String toString() {\n        final StringBuilder buffer = new StringBuilder();\n        buffer.append(\"RegexValidator{\");\n        for (int i = 0; i < patterns.length; i++) {\n            if (i > 0) {\n                buffer.append(\",\");\n            }\n            buffer.append(patterns[i].pattern());\n        }\n        buffer.append(\"}\");\n        return buffer.toString();\n    }\n\n    /**\n     * Validates a value against the set of regular expressions returning a String value of the aggregated groups.\n     *\n     * @param value The value to validate.\n     * @return Aggregated String value comprised of the <em>groups</em> matched if valid or {@code null} if invalid\n     */\n    public String validate(final String value) {\n        if (value == null) {\n            return null;\n        }\n        for (final Pattern pattern : patterns) {\n            final Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {\n                final int count = matcher.groupCount();\n                if (count == 1) {\n                    return matcher.group(1);\n                }\n                final StringBuilder buffer = new StringBuilder();\n                for (int j = 0; j < count; j++) {\n                    final String component = matcher.group(j + 1);\n                    if (component != null) {\n                        buffer.append(component);\n                    }\n                }\n                return buffer.toString();\n            }\n        }\n        return null;\n    }\n\n}", "super_interfaces": ["Serializable"], "fields": [{"attribute_expression": "private static final long serialVersionUID = -8832409930574867162L;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "serialVersionUID = -8832409930574867162L", "syntax_pass": true}, {"attribute_expression": "private static final int CASE_SENSITIVE = 0;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "CASE_SENSITIVE = 0", "syntax_pass": true}, {"attribute_expression": "private final Pattern[] patterns;", "docstring": "\nCompiled RE patterns from constructors.\n", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Pattern[]", "name": "patterns", "syntax_pass": true}]}, {"uris": "src/main/java/org/apache/commons/validator/routines/CodeValidator.java.CodeValidator", "name": "CodeValidator", "file_path": "src/main/java/org/apache/commons/validator/routines/CodeValidator.java", "superclasses": "", "methods": ["[]CodeValidator(RegexValidator,CheckDigit)", "[]CodeValidator(RegexValidator,int,CheckDigit)", "[]CodeValidator(RegexValidator,int,int,CheckDigit)", "[]CodeValidator(String,CheckDigit)", "[]CodeValidator(String,int,CheckDigit)", "[]CodeValidator(String,int,int,CheckDigit)", "[CheckDigit]getCheckDigit()", "[int]getMaxLength()", "[int]getMinLength()", "[RegexValidator]getRegexValidator()", "[boolean]isValid(String)", "[Object]validate(String)"], "method_uris": ["src/main/java/org/apache/commons/validator/routines/CodeValidator.java.CodeValidator.[]CodeValidator(RegexValidator,CheckDigit)", "src/main/java/org/apache/commons/validator/routines/CodeValidator.java.CodeValidator.[]CodeValidator(RegexValidator,int,CheckDigit)", "src/main/java/org/apache/commons/validator/routines/CodeValidator.java.CodeValidator.[]CodeValidator(RegexValidator,int,int,CheckDigit)", "src/main/java/org/apache/commons/validator/routines/CodeValidator.java.CodeValidator.[]CodeValidator(String,CheckDigit)", "src/main/java/org/apache/commons/validator/routines/CodeValidator.java.CodeValidator.[]CodeValidator(String,int,CheckDigit)", "src/main/java/org/apache/commons/validator/routines/CodeValidator.java.CodeValidator.[]CodeValidator(String,int,int,CheckDigit)", "src/main/java/org/apache/commons/validator/routines/CodeValidator.java.CodeValidator.[CheckDigit]getCheckDigit()", "src/main/java/org/apache/commons/validator/routines/CodeValidator.java.CodeValidator.[int]getMaxLength()", "src/main/java/org/apache/commons/validator/routines/CodeValidator.java.CodeValidator.[int]getMinLength()", "src/main/java/org/apache/commons/validator/routines/CodeValidator.java.CodeValidator.[RegexValidator]getRegexValidator()", "src/main/java/org/apache/commons/validator/routines/CodeValidator.java.CodeValidator.[boolean]isValid(String)", "src/main/java/org/apache/commons/validator/routines/CodeValidator.java.CodeValidator.[Object]validate(String)"], "overrides": null, "attributes": [], "class_docstring": "\nGeneric <b>Code Validation</b> providing format, minimum/maximum\nlength and {@link CheckDigit} validations.\n<p>\nPerforms the following validations on a code:\n<ul>\n  <li>if the code is null, return null/false as appropriate</li>\n  <li>trim the input. If the resulting code is empty, return null/false as appropriate</li>\n  <li>Check the <em>format</em> of the code using a <em>regular expression.</em> (if specified)</li>\n  <li>Check the <em>minimum</em> and <em>maximum</em> length  (if specified) of the <em>parsed</em> code\n     (i.e. parsed by the <em>regular expression</em>).</li>\n  <li>Performs {@link CheckDigit} validation on the parsed code (if specified).</li>\n  <li>The {@link #validate(String)} method returns the trimmed, parsed input (or null if validation failed)</li>\n</ul>\n<p>\n<b>Note</b>\nThe {@link #isValid(String)} method will return true if the input passes validation.\nSince this includes trimming as well as potentially dropping parts of the input,\nit is possible for a String to pass validation\nbut fail the checkdigit test if passed directly to it (the check digit routines generally don't trim input\nnor do they generally check the format/length).\nTo be sure that you are passing valid input to a method use {@link #validate(String)} as follows:\n<pre>\nObject valid = validator.validate(input);\nif (valid != null) {\n   some_method(valid.toString());\n}\n</pre>\n<p>\nConfigure the validator with the appropriate regular expression, minimum/maximum length\nand {@link CheckDigit} validator and then call one of the two validation\nmethods provided:</p>\n   <ul>\n      <li>{@code boolean isValid(code)}</li>\n      <li>{@code String validate(code)}</li>\n   </ul>\n<p>\nCodes often include <em>format</em> characters - such as hyphens - to make them\nmore easily human readable. These can be removed prior to length and check digit\nvalidation by  specifying them as a <em>non-capturing</em> group in the regular\nexpression (i.e. use the {@code (?:   )} notation).\n<br>\nOr just avoid using parentheses except for the parts you want to capture\n\n@since 1.4\n", "original_string": "public final class CodeValidator implements Serializable {\n\n    private static final long serialVersionUID = 446960910870938233L;\n\n    /** The format regular expression validator. */\n    private final RegexValidator regexValidator;\n\n    /** The minimum length of the code. */\n    private final int minLength;\n\n    /** The maximum length of the code. */\n    private final int maxLength;\n\n    /** The check digit validation routine. */\n    private final CheckDigit checkdigit;\n\n    /**\n     * Constructs a code validator with a specified regular expression,\n     * validator and {@link CheckDigit} validation.\n     *\n     * @param regexValidator The format regular expression validator\n     * @param checkdigit The check digit validation routine.\n     */\n    public CodeValidator(final RegexValidator regexValidator, final CheckDigit checkdigit) {\n        this(regexValidator, -1, -1, checkdigit);\n    }\n\n    /**\n     * Constructs a code validator with a specified regular expression,\n     * validator, length and {@link CheckDigit} validation.\n     *\n     * @param regexValidator The format regular expression validator\n     * @param length The length of the code\n     *  (sets the mimimum/maximum to the same value)\n     * @param checkdigit The check digit validation routine\n     */\n    public CodeValidator(final RegexValidator regexValidator, final int length, final CheckDigit checkdigit) {\n        this(regexValidator, length, length, checkdigit);\n    }\n\n    /**\n     * Constructs a code validator with a specified regular expression\n     * validator, minimum/maximum length and {@link CheckDigit} validation.\n     *\n     * @param regexValidator The format regular expression validator\n     * @param minLength The minimum length of the code\n     * @param maxLength The maximum length of the code\n     * @param checkdigit The check digit validation routine\n     */\n    public CodeValidator(final RegexValidator regexValidator, final int minLength, final int maxLength,\n            final CheckDigit checkdigit) {\n        this.regexValidator = regexValidator;\n        this.minLength = minLength;\n        this.maxLength = maxLength;\n        this.checkdigit = checkdigit;\n    }\n\n    /**\n     * Constructs a code validator with a specified regular\n     * expression and {@link CheckDigit}.\n     * The RegexValidator validator is created to be case-sensitive\n     *\n     * @param regex The format regular expression\n     * @param checkdigit The check digit validation routine\n     */\n    public CodeValidator(final String regex, final CheckDigit checkdigit) {\n        this(regex, -1, -1, checkdigit);\n    }\n\n    /**\n     * Constructs a code validator with a specified regular\n     * expression, length and {@link CheckDigit}.\n     * The RegexValidator validator is created to be case-sensitive\n     *\n     * @param regex The format regular expression.\n     * @param length The length of the code\n     *  (sets the mimimum/maximum to the same)\n     * @param checkdigit The check digit validation routine\n     */\n    public CodeValidator(final String regex, final int length, final CheckDigit checkdigit) {\n        this(regex, length, length, checkdigit);\n    }\n\n    /**\n     * Constructs a code validator with a specified regular\n     * expression, minimum/maximum length and {@link CheckDigit} validation.\n     * The RegexValidator validator is created to be case-sensitive\n     *\n     * @param regex The regular expression\n     * @param minLength The minimum length of the code\n     * @param maxLength The maximum length of the code\n     * @param checkdigit The check digit validation routine\n     */\n    public CodeValidator(final String regex, final int minLength, final int maxLength,\n            final CheckDigit checkdigit) {\n        this.regexValidator = GenericValidator.isBlankOrNull(regex) ? null : new RegexValidator(regex);\n        this.minLength = minLength;\n        this.maxLength = maxLength;\n        this.checkdigit = checkdigit;\n    }\n\n    /**\n     * Gets the check digit validation routine.\n     * <p>\n     * <b>N.B.</b> Optional, if not set no Check Digit\n     * validation will be performed on the code.\n     *\n     * @return The check digit validation routine\n     */\n    public CheckDigit getCheckDigit() {\n        return checkdigit;\n    }\n\n    /**\n     * Gets the maximum length of the code.\n     * <p>\n     * <b>N.B.</b> Optional, if less than zero the\n     * maximum length will not be checked.\n     *\n     * @return The maximum length of the code or\n     * {@code -1} if the code has no maximum length\n     */\n    public int getMaxLength() {\n        return maxLength;\n    }\n\n    /**\n     * Gets the minimum length of the code.\n     * <p>\n     * <b>N.B.</b> Optional, if less than zero the\n     * minimum length will not be checked.\n     *\n     * @return The minimum length of the code or\n     * {@code -1} if the code has no minimum length\n     */\n    public int getMinLength() {\n        return minLength;\n    }\n\n    /**\n     * Gets the <em>regular expression</em> validator.\n     * <p>\n     * <b>N.B.</b> Optional, if not set no regular\n     * expression validation will be performed on the code.\n     *\n     * @return The regular expression validator\n     */\n    public RegexValidator getRegexValidator() {\n        return regexValidator;\n    }\n\n    /**\n     * Validate the code returning either {@code true}\n     * or {@code false}.\n     * <p>\n     * This calls {@link #validate(String)} and returns false\n     * if the return value is null, true otherwise.\n     * <p>\n     * Note that {@link #validate(String)} trims the input\n     * and if there is a {@link RegexValidator} it may also\n     * change the input as part of the validation.\n     *\n     * @param input The code to validate\n     * @return {@code true} if valid, otherwise\n     * {@code false}\n     */\n    public boolean isValid(final String input) {\n        return validate(input) != null;\n    }\n\n    /**\n     * Validate the code returning either the valid code or\n     * {@code null} if invalid.\n     * <p>\n     * Note that this method trims the input\n     * and if there is a {@link RegexValidator} it may also\n     * change the input as part of the validation.\n     *\n     * @param input The code to validate\n     * @return The code if valid, otherwise {@code null}\n     * if invalid\n     */\n    public Object validate(final String input) {\n        if (input == null) {\n            return null;\n        }\n        String code = input.trim();\n        if (code.isEmpty()) {\n            return null;\n        }\n        // validate/reformat using regular expression\n        if (regexValidator != null) {\n            code = regexValidator.validate(code);\n            if (code == null) {\n                return null;\n            }\n        }\n        // check the length (must be done after validate as that can change the code)\n        if (minLength >= 0 && code.length() < minLength ||\n            maxLength >= 0 && code.length() > maxLength) {\n            return null;\n        }\n        // validate the check digit\n        if (checkdigit != null && !checkdigit.isValid(code)) {\n            return null;\n        }\n        return code;\n    }\n\n}", "super_interfaces": ["Serializable"], "fields": [{"attribute_expression": "private static final long serialVersionUID = 446960910870938233L;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "serialVersionUID = 446960910870938233L", "syntax_pass": true}, {"attribute_expression": "private final RegexValidator regexValidator;", "docstring": " The format regular expression validator.", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "RegexValidator", "name": "regexValidator", "syntax_pass": true}, {"attribute_expression": "private final int minLength;", "docstring": " The minimum length of the code.", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "minLength", "syntax_pass": true}, {"attribute_expression": "private final int maxLength;", "docstring": " The maximum length of the code.", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "maxLength", "syntax_pass": true}, {"attribute_expression": "private final CheckDigit checkdigit;", "docstring": " The check digit validation routine.", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "CheckDigit", "name": "checkdigit", "syntax_pass": true}]}, {"uris": "src/main/java/org/apache/commons/validator/routines/LongValidator.java.LongValidator", "name": "LongValidator", "file_path": "src/main/java/org/apache/commons/validator/routines/LongValidator.java", "superclasses": "AbstractNumberValidator", "methods": ["[LongValidator]getInstance()", "[]LongValidator()", "[]LongValidator(boolean,int)", "[boolean]isInRange(long,long,long)", "[boolean]isInRange(Long,long,long)", "[boolean]maxValue(long,long)", "[boolean]maxValue(Long,long)", "[boolean]minValue(long,long)", "[boolean]minValue(Long,long)", "[Object]processParsedValue(Object,Format)", "[Long]validate(String)", "[Long]validate(String,Locale)", "[Long]validate(String,String)", "[Long]validate(String,String,Locale)"], "method_uris": ["src/main/java/org/apache/commons/validator/routines/LongValidator.java.LongValidator.[LongValidator]getInstance()", "src/main/java/org/apache/commons/validator/routines/LongValidator.java.LongValidator.[]LongValidator()", "src/main/java/org/apache/commons/validator/routines/LongValidator.java.LongValidator.[]LongValidator(boolean,int)", "src/main/java/org/apache/commons/validator/routines/LongValidator.java.LongValidator.[boolean]isInRange(long,long,long)", "src/main/java/org/apache/commons/validator/routines/LongValidator.java.LongValidator.[boolean]isInRange(Long,long,long)", "src/main/java/org/apache/commons/validator/routines/LongValidator.java.LongValidator.[boolean]maxValue(long,long)", "src/main/java/org/apache/commons/validator/routines/LongValidator.java.LongValidator.[boolean]maxValue(Long,long)", "src/main/java/org/apache/commons/validator/routines/LongValidator.java.LongValidator.[boolean]minValue(long,long)", "src/main/java/org/apache/commons/validator/routines/LongValidator.java.LongValidator.[boolean]minValue(Long,long)", "src/main/java/org/apache/commons/validator/routines/LongValidator.java.LongValidator.[Object]processParsedValue(Object,Format)", "src/main/java/org/apache/commons/validator/routines/LongValidator.java.LongValidator.[Long]validate(String)", "src/main/java/org/apache/commons/validator/routines/LongValidator.java.LongValidator.[Long]validate(String,Locale)", "src/main/java/org/apache/commons/validator/routines/LongValidator.java.LongValidator.[Long]validate(String,String)", "src/main/java/org/apache/commons/validator/routines/LongValidator.java.LongValidator.[Long]validate(String,String,Locale)"], "overrides": null, "attributes": [], "class_docstring": "\n<p><b>Long Validation</b> and Conversion routines ({@code java.lang.Long}).</p>\n\n<p>This validator provides a number of methods for\n   validating/converting a {@link String} value to\n   a {@code Long} using {@link NumberFormat}\n   to parse either:</p>\n   <ul>\n      <li>using the default format for the default {@link Locale}</li>\n      <li>using a specified pattern with the default {@link Locale}</li>\n      <li>using the default format for a specified {@link Locale}</li>\n      <li>using a specified pattern with a specified {@link Locale}</li>\n   </ul>\n\n<p>Use one of the {@code isValid()} methods to just validate or\n   one of the {@code validate()} methods to validate and receive a\n   <em>converted</em> {@code Long} value.</p>\n\n<p>Once a value has been successfully converted the following\n   methods can be used to perform minimum, maximum and range checks:</p>\n   <ul>\n      <li>{@code minValue()} checks whether the value is greater\n          than or equal to a specified minimum.</li>\n      <li>{@code maxValue()} checks whether the value is less\n          than or equal to a specified maximum.</li>\n      <li>{@code isInRange()} checks whether the value is within\n          a specified range of values.</li>\n   </ul>\n\n<p>So that the same mechanism used for parsing an <em>input</em> value\n   for validation can be used to format <em>output</em>, corresponding\n   {@code format()} methods are also provided. That is you can\n   format either:</p>\n   <ul>\n      <li>using a specified pattern</li>\n      <li>using the format for a specified {@link Locale}</li>\n      <li>using the format for the <em>default</em> {@link Locale}</li>\n   </ul>\n\n@since 1.3.0\n", "original_string": "public class LongValidator extends AbstractNumberValidator {\n\n    private static final long serialVersionUID = -5117231731027866098L;\n\n    private static final LongValidator VALIDATOR = new LongValidator();\n\n    /**\n     * Gets the singleton instance of this validator.\n     * @return A singleton instance of the LongValidator.\n     */\n    public static LongValidator getInstance() {\n        return VALIDATOR;\n    }\n\n    /**\n     * Constructs a <em>strict</em> instance.\n     */\n    public LongValidator() {\n        this(true, STANDARD_FORMAT);\n    }\n\n    /**\n     * <p>Construct an instance with the specified strict setting\n     *    and format type.</p>\n     *\n     * <p>The {@code formatType} specified what type of\n     *    {@code NumberFormat} is created - valid types\n     *    are:</p>\n     *    <ul>\n     *       <li>AbstractNumberValidator.STANDARD_FORMAT -to create\n     *           <em>standard</em> number formats (the default).</li>\n     *       <li>AbstractNumberValidator.CURRENCY_FORMAT -to create\n     *           <em>currency</em> number formats.</li>\n     *       <li>AbstractNumberValidator.PERCENT_FORMAT -to create\n     *           <em>percent</em> number formats (the default).</li>\n     *    </ul>\n     *\n     * @param strict {@code true} if strict\n     *        {@code Format} parsing should be used.\n     * @param formatType The {@code NumberFormat} type to\n     *        create for validation, default is STANDARD_FORMAT.\n     */\n    public LongValidator(final boolean strict, final int formatType) {\n        super(strict, formatType, false);\n    }\n\n    /**\n     * Check if the value is within a specified range.\n     *\n     * @param value The {@code Number} value to check.\n     * @param min The minimum value of the range.\n     * @param max The maximum value of the range.\n     * @return {@code true} if the value is within the\n     *         specified range.\n     */\n    public boolean isInRange(final long value, final long min, final long max) {\n        return value >= min && value <= max;\n    }\n\n    /**\n     * Check if the value is within a specified range.\n     *\n     * @param value The {@code Number} value to check.\n     * @param min The minimum value of the range.\n     * @param max The maximum value of the range.\n     * @return {@code true} if the value is within the\n     *         specified range.\n     */\n    public boolean isInRange(final Long value, final long min, final long max) {\n        return isInRange(value.longValue(), min, max);\n    }\n\n    /**\n     * Check if the value is less than or equal to a maximum.\n     *\n     * @param value The value validation is being performed on.\n     * @param max The maximum value.\n     * @return {@code true} if the value is less than\n     *         or equal to the maximum.\n     */\n    public boolean maxValue(final long value, final long max) {\n        return value <= max;\n    }\n\n    /**\n     * Check if the value is less than or equal to a maximum.\n     *\n     * @param value The value validation is being performed on.\n     * @param max The maximum value.\n     * @return {@code true} if the value is less than\n     *         or equal to the maximum.\n     */\n    public boolean maxValue(final Long value, final long max) {\n        return maxValue(value.longValue(), max);\n    }\n\n    /**\n     * Check if the value is greater than or equal to a minimum.\n     *\n     * @param value The value validation is being performed on.\n     * @param min The minimum value.\n     * @return {@code true} if the value is greater than\n     *         or equal to the minimum.\n     */\n    public boolean minValue(final long value, final long min) {\n        return value >= min;\n    }\n\n    /**\n     * Check if the value is greater than or equal to a minimum.\n     *\n     * @param value The value validation is being performed on.\n     * @param min The minimum value.\n     * @return {@code true} if the value is greater than\n     *         or equal to the minimum.\n     */\n    public boolean minValue(final Long value, final long min) {\n        return minValue(value.longValue(), min);\n    }\n\n    /**\n     * Convert the parsed value to a {@code Long}.\n     *\n     * @param value The parsed {@code Number} object created.\n     * @param formatter The Format used to parse the value with.\n     * @return The parsed {@code Number} converted to a\n     *         {@code Long}.\n     */\n    @Override\n    protected Object processParsedValue(final Object value, final Format formatter) {\n\n        // Parsed value will be Long if it fits in a long and is not fractional\n        if (value instanceof Long) {\n            return value;\n        }\n        return null;\n\n    }\n\n    /**\n     * <p>Validate/convert a {@code Long} using the default\n     *    {@link Locale}.\n     *\n     * @param value The value validation is being performed on.\n     * @return The parsed {@code Long} if valid or {@code null}\n     *  if invalid.\n     */\n    public Long validate(final String value) {\n        return (Long) parse(value, (String) null, (Locale) null);\n    }\n\n    /**\n     * <p>Validate/convert a {@code Long} using the\n     *    specified {@link Locale}.\n     *\n     * @param value The value validation is being performed on.\n     * @param locale The locale to use for the number format, system default if null.\n     * @return The parsed {@code Long} if valid or {@code null} if invalid.\n     */\n    public Long validate(final String value, final Locale locale) {\n        return (Long) parse(value, (String) null, locale);\n    }\n\n    /**\n     * <p>Validate/convert a {@code Long} using the\n     *    specified <em>pattern</em>.\n     *\n     * @param value The value validation is being performed on.\n     * @param pattern The pattern used to validate the value against.\n     * @return The parsed {@code Long} if valid or {@code null} if invalid.\n     */\n    public Long validate(final String value, final String pattern) {\n        return (Long) parse(value, pattern, (Locale) null);\n    }\n\n    /**\n     * <p>Validate/convert a {@code Long} using the\n     *    specified pattern and/ or {@link Locale}.\n     *\n     * @param value The value validation is being performed on.\n     * @param pattern The pattern used to validate the value against, or the\n     *        default for the {@link Locale} if {@code null}.\n     * @param locale The locale to use for the date format, system default if null.\n     * @return The parsed {@code Long} if valid or {@code null} if invalid.\n     */\n    public Long validate(final String value, final String pattern, final Locale locale) {\n        return (Long) parse(value, pattern, locale);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final long serialVersionUID = -5117231731027866098L;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "serialVersionUID = -5117231731027866098L", "syntax_pass": true}, {"attribute_expression": "private static final LongValidator VALIDATOR = new LongValidator();", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "LongValidator", "name": "VALIDATOR = new LongValidator()", "syntax_pass": true}]}, {"uris": "src/main/java/org/apache/commons/validator/routines/IntegerValidator.java.IntegerValidator", "name": "IntegerValidator", "file_path": "src/main/java/org/apache/commons/validator/routines/IntegerValidator.java", "superclasses": "AbstractNumberValidator", "methods": ["[IntegerValidator]getInstance()", "[]IntegerValidator()", "[]IntegerValidator(boolean,int)", "[boolean]isInRange(int,int,int)", "[boolean]isInRange(Integer,int,int)", "[boolean]maxValue(int,int)", "[boolean]maxValue(Integer,int)", "[boolean]minValue(int,int)", "[boolean]minValue(Integer,int)", "[Object]processParsedValue(Object,Format)", "[Integer]validate(String)", "[Integer]validate(String,Locale)", "[Integer]validate(String,String)", "[Integer]validate(String,String,Locale)"], "method_uris": ["src/main/java/org/apache/commons/validator/routines/IntegerValidator.java.IntegerValidator.[IntegerValidator]getInstance()", "src/main/java/org/apache/commons/validator/routines/IntegerValidator.java.IntegerValidator.[]IntegerValidator()", "src/main/java/org/apache/commons/validator/routines/IntegerValidator.java.IntegerValidator.[]IntegerValidator(boolean,int)", "src/main/java/org/apache/commons/validator/routines/IntegerValidator.java.IntegerValidator.[boolean]isInRange(int,int,int)", "src/main/java/org/apache/commons/validator/routines/IntegerValidator.java.IntegerValidator.[boolean]isInRange(Integer,int,int)", "src/main/java/org/apache/commons/validator/routines/IntegerValidator.java.IntegerValidator.[boolean]maxValue(int,int)", "src/main/java/org/apache/commons/validator/routines/IntegerValidator.java.IntegerValidator.[boolean]maxValue(Integer,int)", "src/main/java/org/apache/commons/validator/routines/IntegerValidator.java.IntegerValidator.[boolean]minValue(int,int)", "src/main/java/org/apache/commons/validator/routines/IntegerValidator.java.IntegerValidator.[boolean]minValue(Integer,int)", "src/main/java/org/apache/commons/validator/routines/IntegerValidator.java.IntegerValidator.[Object]processParsedValue(Object,Format)", "src/main/java/org/apache/commons/validator/routines/IntegerValidator.java.IntegerValidator.[Integer]validate(String)", "src/main/java/org/apache/commons/validator/routines/IntegerValidator.java.IntegerValidator.[Integer]validate(String,Locale)", "src/main/java/org/apache/commons/validator/routines/IntegerValidator.java.IntegerValidator.[Integer]validate(String,String)", "src/main/java/org/apache/commons/validator/routines/IntegerValidator.java.IntegerValidator.[Integer]validate(String,String,Locale)"], "overrides": null, "attributes": [], "class_docstring": "\n<p><b>Integer Validation</b> and Conversion routines ({@code java.lang.Integer}).</p>\n\n<p>This validator provides a number of methods for\n   validating/converting a {@link String} value to\n   a {@code Integer} using {@link NumberFormat}\n   to parse either:</p>\n   <ul>\n      <li>using the default format for the default {@link Locale}</li>\n      <li>using a specified pattern with the default {@link Locale}</li>\n      <li>using the default format for a specified {@link Locale}</li>\n      <li>using a specified pattern with a specified {@link Locale}</li>\n   </ul>\n\n<p>Use one of the {@code isValid()} methods to just validate or\n   one of the {@code validate()} methods to validate and receive a\n   <em>converted</em> {@code Integer} value.</p>\n\n<p>Once a value has been successfully converted the following\n   methods can be used to perform minimum, maximum and range checks:</p>\n   <ul>\n      <li>{@code minValue()} checks whether the value is greater\n          than or equal to a specified minimum.</li>\n      <li>{@code maxValue()} checks whether the value is less\n          than or equal to a specified maximum.</li>\n      <li>{@code isInRange()} checks whether the value is within\n          a specified range of values.</li>\n   </ul>\n\n<p>So that the same mechanism used for parsing an <em>input</em> value\n   for validation can be used to format <em>output</em>, corresponding\n   {@code format()} methods are also provided. That is you can\n   format either:</p>\n   <ul>\n      <li>using the default format for the default {@link Locale}</li>\n      <li>using a specified pattern with the default {@link Locale}</li>\n      <li>using the default format for a specified {@link Locale}</li>\n      <li>using a specified pattern with a specified {@link Locale}</li>\n   </ul>\n\n@since 1.3.0\n", "original_string": "public class IntegerValidator extends AbstractNumberValidator {\n\n    private static final long serialVersionUID = 422081746310306596L;\n\n    private static final IntegerValidator VALIDATOR = new IntegerValidator();\n\n    /**\n     * Gets the singleton instance of this validator.\n     * @return A singleton instance of the IntegerValidator.\n     */\n    public static IntegerValidator getInstance() {\n        return VALIDATOR;\n    }\n\n    /**\n     * Constructs a <em>strict</em> instance.\n     */\n    public IntegerValidator() {\n        this(true, STANDARD_FORMAT);\n    }\n\n    /**\n     * <p>Construct an instance with the specified strict setting\n     *    and format type.</p>\n     *\n     * <p>The {@code formatType} specified what type of\n     *    {@code NumberFormat} is created - valid types\n     *    are:</p>\n     *    <ul>\n     *       <li>AbstractNumberValidator.STANDARD_FORMAT -to create\n     *           <em>standard</em> number formats (the default).</li>\n     *       <li>AbstractNumberValidator.CURRENCY_FORMAT -to create\n     *           <em>currency</em> number formats.</li>\n     *       <li>AbstractNumberValidator.PERCENT_FORMAT -to create\n     *           <em>percent</em> number formats (the default).</li>\n     *    </ul>\n     *\n     * @param strict {@code true} if strict\n     *        {@code Format} parsing should be used.\n     * @param formatType The {@code NumberFormat} type to\n     *        create for validation, default is STANDARD_FORMAT.\n     */\n    public IntegerValidator(final boolean strict, final int formatType) {\n        super(strict, formatType, false);\n    }\n\n    /**\n     * Check if the value is within a specified range.\n     *\n     * @param value The {@code Number} value to check.\n     * @param min The minimum value of the range.\n     * @param max The maximum value of the range.\n     * @return {@code true} if the value is within the\n     *         specified range.\n     */\n    public boolean isInRange(final int value, final int min, final int max) {\n        return value >= min && value <= max;\n    }\n\n    /**\n     * Check if the value is within a specified range.\n     *\n     * @param value The {@code Number} value to check.\n     * @param min The minimum value of the range.\n     * @param max The maximum value of the range.\n     * @return {@code true} if the value is within the\n     *         specified range.\n     */\n    public boolean isInRange(final Integer value, final int min, final int max) {\n        return isInRange(value.intValue(), min, max);\n    }\n\n    /**\n     * Check if the value is less than or equal to a maximum.\n     *\n     * @param value The value validation is being performed on.\n     * @param max The maximum value.\n     * @return {@code true} if the value is less than\n     *         or equal to the maximum.\n     */\n    public boolean maxValue(final int value, final int max) {\n        return value <= max;\n    }\n\n    /**\n     * Check if the value is less than or equal to a maximum.\n     *\n     * @param value The value validation is being performed on.\n     * @param max The maximum value.\n     * @return {@code true} if the value is less than\n     *         or equal to the maximum.\n     */\n    public boolean maxValue(final Integer value, final int max) {\n        return maxValue(value.intValue(), max);\n    }\n\n    /**\n     * Check if the value is greater than or equal to a minimum.\n     *\n     * @param value The value validation is being performed on.\n     * @param min The minimum value.\n     * @return {@code true} if the value is greater than\n     *         or equal to the minimum.\n     */\n    public boolean minValue(final int value, final int min) {\n        return value >= min;\n    }\n\n    /**\n     * Check if the value is greater than or equal to a minimum.\n     *\n     * @param value The value validation is being performed on.\n     * @param min The minimum value.\n     * @return {@code true} if the value is greater than\n     *         or equal to the minimum.\n     */\n    public boolean minValue(final Integer value, final int min) {\n        return minValue(value.intValue(), min);\n    }\n\n    /**\n     * <p>Perform further validation and convert the {@code Number} to\n     * an {@code Integer}.</p>\n     *\n     * @param value The parsed {@code Number} object created.\n     * @param formatter The Format used to parse the value with.\n     * @return The parsed {@code Number} converted to an\n     *   {@code Integer} if valid or {@code null} if invalid.\n     */\n    @Override\n    protected Object processParsedValue(final Object value, final Format formatter) {\n\n        // Parsed value will be Long if it fits in a long and is not fractional\n        if (value instanceof Long) {\n            final long longValue = ((Long) value).longValue();\n            if (longValue >= Integer.MIN_VALUE &&\n                longValue <= Integer.MAX_VALUE) {\n                return Integer.valueOf((int) longValue);\n            }\n        }\n        return null;\n    }\n\n    /**\n     * <p>Validate/convert an {@code Integer} using the default\n     *    {@link Locale}.\n     *\n     * @param value The value validation is being performed on.\n     * @return The parsed {@code Integer} if valid or {@code null}\n     *  if invalid.\n     */\n    public Integer validate(final String value) {\n        return (Integer) parse(value, (String) null, (Locale) null);\n    }\n\n    /**\n     * <p>Validate/convert an {@code Integer} using the\n     *    specified {@link Locale}.\n     *\n     * @param value The value validation is being performed on.\n     * @param locale The locale to use for the number format, system default if null.\n     * @return The parsed {@code Integer} if valid or {@code null} if invalid.\n     */\n    public Integer validate(final String value, final Locale locale) {\n        return (Integer) parse(value, (String) null, locale);\n    }\n\n    /**\n     * <p>Validate/convert an {@code Integer} using the\n     *    specified <em>pattern</em>.\n     *\n     * @param value The value validation is being performed on.\n     * @param pattern The pattern used to validate the value against.\n     * @return The parsed {@code Integer} if valid or {@code null} if invalid.\n     */\n    public Integer validate(final String value, final String pattern) {\n        return (Integer) parse(value, pattern, (Locale) null);\n    }\n\n    /**\n     * <p>Validate/convert a {@code Integer} using the\n     *    specified pattern and/ or {@link Locale}.\n     *\n     * @param value The value validation is being performed on.\n     * @param pattern The pattern used to validate the value against, or the\n     *        default for the {@link Locale} if {@code null}.\n     * @param locale The locale to use for the date format, system default if null.\n     * @return The parsed {@code Integer} if valid or {@code null} if invalid.\n     */\n    public Integer validate(final String value, final String pattern, final Locale locale) {\n        return (Integer) parse(value, pattern, locale);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final long serialVersionUID = 422081746310306596L;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "serialVersionUID = 422081746310306596L", "syntax_pass": true}, {"attribute_expression": "private static final IntegerValidator VALIDATOR = new IntegerValidator();", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "IntegerValidator", "name": "VALIDATOR = new IntegerValidator()", "syntax_pass": true}]}, {"uris": "src/main/java/org/apache/commons/validator/routines/InetAddressValidator.java.InetAddressValidator", "name": "InetAddressValidator", "file_path": "src/main/java/org/apache/commons/validator/routines/InetAddressValidator.java", "superclasses": "", "methods": ["[InetAddressValidator]getInstance()", "[boolean]isValid(String)", "[boolean]isValidInet4Address(String)", "[boolean]isValidInet6Address(String)"], "method_uris": ["src/main/java/org/apache/commons/validator/routines/InetAddressValidator.java.InetAddressValidator.[InetAddressValidator]getInstance()", "src/main/java/org/apache/commons/validator/routines/InetAddressValidator.java.InetAddressValidator.[boolean]isValid(String)", "src/main/java/org/apache/commons/validator/routines/InetAddressValidator.java.InetAddressValidator.[boolean]isValidInet4Address(String)", "src/main/java/org/apache/commons/validator/routines/InetAddressValidator.java.InetAddressValidator.[boolean]isValidInet6Address(String)"], "overrides": null, "attributes": [], "class_docstring": "\n<p><b>InetAddress</b> validation and conversion routines ({@code java.net.InetAddress}).</p>\n\n<p>This class provides methods to validate a candidate IP address.\n\n<p>\nThis class is a Singleton; you can retrieve the instance via the {@link #getInstance()} method.\n</p>\n\n@since 1.4\n", "original_string": "public class InetAddressValidator implements Serializable {\n\n    private static final int MAX_BYTE = 128;\n\n    private static final int IPV4_MAX_OCTET_VALUE = 255;\n\n    private static final int MAX_UNSIGNED_SHORT = 0xffff;\n\n    private static final int BASE_16 = 16;\n\n    private static final long serialVersionUID = -919201640201914789L;\n\n    private static final String IPV4_REGEX = \"^(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})$\";\n\n    // Max number of hex groups (separated by :) in an IPV6 address\n    private static final int IPV6_MAX_HEX_GROUPS = 8;\n\n    // Max hex digits in each IPv6 group\n    private static final int IPV6_MAX_HEX_DIGITS_PER_GROUP = 4;\n\n    /**\n     * Singleton instance of this class.\n     */\n    private static final InetAddressValidator VALIDATOR = new InetAddressValidator();\n\n    private static final Pattern DIGITS_PATTERN = Pattern.compile(\"\\\\d{1,3}\");\n\n    private static final Pattern ID_CHECK_PATTERN = Pattern.compile(\"[^\\\\s/%]+\");\n\n    /** IPv4 RegexValidator */\n    private final static RegexValidator IPV4_VALIDATOR = new RegexValidator(IPV4_REGEX);\n\n    /**\n     * Returns the singleton instance of this validator.\n     *\n     * @return the singleton instance of this validator\n     */\n    public static InetAddressValidator getInstance() {\n        return VALIDATOR;\n    }\n\n    /**\n     * Checks if the specified string is a valid IPv4 or IPv6 address.\n     *\n     * @param inetAddress the string to validate\n     * @return true if the string validates as an IP address\n     */\n    public boolean isValid(final String inetAddress) {\n        return isValidInet4Address(inetAddress) || isValidInet6Address(inetAddress);\n    }\n\n    /**\n     * Validates an IPv4 address. Returns true if valid.\n     *\n     * @param inet4Address the IPv4 address to validate\n     * @return true if the argument contains a valid IPv4 address\n     */\n    public boolean isValidInet4Address(final String inet4Address) {\n        // verify that address conforms to generic IPv4 format\n        final String[] groups = IPV4_VALIDATOR.match(inet4Address);\n        if (groups == null) {\n            return false;\n        }\n        // verify that address subgroups are legal\n        for (final String ipSegment : groups) {\n            if (GenericValidator.isBlankOrNull(ipSegment)) {\n                return false;\n            }\n            int iIpSegment = 0;\n            try {\n                iIpSegment = Integer.parseInt(ipSegment);\n            } catch (final NumberFormatException e) {\n                return false;\n            }\n            if (iIpSegment > IPV4_MAX_OCTET_VALUE) {\n                return false;\n            }\n            if (ipSegment.length() > 1 && ipSegment.startsWith(\"0\")) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Validates an IPv6 address. Returns true if valid.\n     *\n     * @param inet6Address the IPv6 address to validate\n     * @return true if the argument contains a valid IPv6 address\n     *\n     * @since 1.4.1\n     */\n    public boolean isValidInet6Address(String inet6Address) {\n        String[] parts;\n        // remove prefix size. This will appear after the zone id (if any)\n        parts = inet6Address.split(\"/\", -1);\n        if (parts.length > 2) {\n            return false; // can only have one prefix specifier\n        }\n        if (parts.length == 2) {\n            if (!DIGITS_PATTERN.matcher(parts[1]).matches()) {\n                return false; // not a valid number\n            }\n            final int bits = Integer.parseInt(parts[1]); // cannot fail because of RE check\n            if (bits < 0 || bits > MAX_BYTE) {\n                return false; // out of range\n            }\n        }\n        // remove zone-id\n        parts = parts[0].split(\"%\", -1);\n        if (parts.length > 2) {\n            return false;\n        }\n        // The id syntax is implementation independent, but it presumably cannot allow:\n        // whitespace, '/' or '%'\n        if (parts.length == 2 && !ID_CHECK_PATTERN.matcher(parts[1]).matches()) {\n            return false; // invalid id\n        }\n        inet6Address = parts[0];\n        final boolean containsCompressedZeroes = inet6Address.contains(\"::\");\n        if (containsCompressedZeroes && inet6Address.indexOf(\"::\") != inet6Address.lastIndexOf(\"::\")) {\n            return false;\n        }\n        final boolean startsWithCompressed = inet6Address.startsWith(\"::\");\n        final boolean endsWithCompressed = inet6Address.endsWith(\"::\");\n        final boolean endsWithSep = inet6Address.endsWith(\":\");\n        if (inet6Address.startsWith(\":\") && !startsWithCompressed || endsWithSep && !endsWithCompressed) {\n            return false;\n        }\n        String[] octets = inet6Address.split(\":\");\n        if (containsCompressedZeroes) {\n            final List<String> octetList = new ArrayList<>(Arrays.asList(octets));\n            if (endsWithCompressed) {\n                // String.split() drops ending empty segments\n                octetList.add(\"\");\n            } else if (startsWithCompressed && !octetList.isEmpty()) {\n                octetList.remove(0);\n            }\n            octets = octetList.toArray(new String[0]);\n        }\n        if (octets.length > IPV6_MAX_HEX_GROUPS) {\n            return false;\n        }\n        int validOctets = 0;\n        int emptyOctets = 0; // consecutive empty chunks\n        for (int index = 0; index < octets.length; index++) {\n            final String octet = octets[index];\n            if (GenericValidator.isBlankOrNull(octet)) {\n                emptyOctets++;\n                if (emptyOctets > 1) {\n                    return false;\n                }\n            } else {\n                emptyOctets = 0;\n                // Is last chunk an IPv4 address?\n                if (index == octets.length - 1 && octet.contains(\".\")) {\n                    if (!isValidInet4Address(octet)) {\n                        return false;\n                    }\n                    validOctets += 2;\n                    continue;\n                }\n                if (octet.length() > IPV6_MAX_HEX_DIGITS_PER_GROUP) {\n                    return false;\n                }\n                int octetInt = 0;\n                try {\n                    octetInt = Integer.parseInt(octet, BASE_16);\n                } catch (final NumberFormatException e) {\n                    return false;\n                }\n                if (octetInt < 0 || octetInt > MAX_UNSIGNED_SHORT) {\n                    return false;\n                }\n            }\n            validOctets++;\n        }\n        if (validOctets > IPV6_MAX_HEX_GROUPS || validOctets < IPV6_MAX_HEX_GROUPS && !containsCompressedZeroes) {\n            return false;\n        }\n        return true;\n    }\n}", "super_interfaces": ["Serializable"], "fields": [{"attribute_expression": "private static final int MAX_BYTE = 128;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "MAX_BYTE = 128", "syntax_pass": true}, {"attribute_expression": "private static final int IPV4_MAX_OCTET_VALUE = 255;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "IPV4_MAX_OCTET_VALUE = 255", "syntax_pass": true}, {"attribute_expression": "private static final int MAX_UNSIGNED_SHORT = 0xffff;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "MAX_UNSIGNED_SHORT = 0xffff", "syntax_pass": true}, {"attribute_expression": "private static final int BASE_16 = 16;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "BASE_16 = 16", "syntax_pass": true}, {"attribute_expression": "private static final long serialVersionUID = -919201640201914789L;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "serialVersionUID = -919201640201914789L", "syntax_pass": true}, {"attribute_expression": "private static final String IPV4_REGEX = \"^(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})$\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "IPV4_REGEX = \"^(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})$\"", "syntax_pass": true}, {"attribute_expression": "private static final int IPV6_MAX_HEX_GROUPS = 8;", "docstring": " Max number of hex groups (separated by :) in an IPV6 address", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "IPV6_MAX_HEX_GROUPS = 8", "syntax_pass": true}, {"attribute_expression": "private static final int IPV6_MAX_HEX_DIGITS_PER_GROUP = 4;", "docstring": " Max hex digits in each IPv6 group", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "IPV6_MAX_HEX_DIGITS_PER_GROUP = 4", "syntax_pass": true}, {"attribute_expression": "private static final InetAddressValidator VALIDATOR = new InetAddressValidator();", "docstring": "\nSingleton instance of this class.\n", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "InetAddressValidator", "name": "VALIDATOR = new InetAddressValidator()", "syntax_pass": true}, {"attribute_expression": "private static final Pattern DIGITS_PATTERN = Pattern.compile(\"\\\\d{1,3}\");", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "Pattern", "name": "DIGITS_PATTERN = Pattern.compile(\"\\\\d{1,3}\")", "syntax_pass": true}, {"attribute_expression": "private static final Pattern ID_CHECK_PATTERN = Pattern.compile(\"[^\\\\s/%]+\");", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "Pattern", "name": "ID_CHECK_PATTERN = Pattern.compile(\"[^\\\\s/%]+\")", "syntax_pass": true}, {"attribute_expression": "private final static RegexValidator IPV4_VALIDATOR = new RegexValidator(IPV4_REGEX);", "docstring": " IPv4 RegexValidator", "modifiers": "private final static", "marker_annotations": [], "non_marker_annotations": ["private", "final", "static"], "comments": [], "type": "RegexValidator", "name": "IPV4_VALIDATOR = new RegexValidator(IPV4_REGEX)", "syntax_pass": true}]}, {"uris": "src/main/java/org/apache/commons/validator/routines/PercentValidator.java.PercentValidator", "name": "PercentValidator", "file_path": "src/main/java/org/apache/commons/validator/routines/PercentValidator.java", "superclasses": "BigDecimalValidator", "methods": ["[BigDecimalValidator]getInstance()", "[]PercentValidator()", "[]PercentValidator(boolean)", "[Object]parse(String,Format)"], "method_uris": ["src/main/java/org/apache/commons/validator/routines/PercentValidator.java.PercentValidator.[BigDecimalValidator]getInstance()", "src/main/java/org/apache/commons/validator/routines/PercentValidator.java.PercentValidator.[]PercentValidator()", "src/main/java/org/apache/commons/validator/routines/PercentValidator.java.PercentValidator.[]PercentValidator(boolean)", "src/main/java/org/apache/commons/validator/routines/PercentValidator.java.PercentValidator.[Object]parse(String,Format)"], "overrides": null, "attributes": [], "class_docstring": "\n<p><b>Percentage Validation</b> and Conversion routines ({@code java.math.BigDecimal}).</p>\n\n<p>This is one implementation of a percent validator that has the following features:</p>\n   <ul>\n      <li>It is <em>lenient</em> about the presence of the <em>percent symbol</em></li>\n      <li>It converts the percent to a {@code java.math.BigDecimal}</li>\n   </ul>\n\n<p>However any of the <em>number</em> validators can be used for <em>percent</em> validation.\n   For example, if you wanted a <em>percent</em> validator that converts to a\n   {@code java.lang.Float} then you can simply instantiate an\n   {@code FloatValidator} with the appropriate <em>format type</em>:</p>\n\n   <p>{@code ... = new FloatValidator(false, FloatValidator.PERCENT_FORMAT);}</p>\n\n<p>Pick the appropriate validator, depending on the type (i.e Float, Double or BigDecimal)\n   you want the percent converted to. Please note, it makes no sense to use\n   one of the validators that doesn't handle fractions (i.e. byte, short, integer, long\n   and BigInteger) since percentages are converted to fractions (i.e {@code 50%} is\n   converted to {@code 0.5}).</p>\n\n@since 1.3.0\n", "original_string": "public class PercentValidator extends BigDecimalValidator {\n\n    private static final long serialVersionUID = -3508241924961535772L;\n\n    private static final PercentValidator VALIDATOR = new PercentValidator();\n\n    /** DecimalFormat's percent (thousand multiplier) symbol */\n    private static final char PERCENT_SYMBOL = '%';\n\n    private static final BigDecimal POINT_ZERO_ONE = new BigDecimal(\"0.01\");\n\n    /**\n     * Gets the singleton instance of this validator.\n     * @return A singleton instance of the PercentValidator.\n     */\n    public static BigDecimalValidator getInstance() {\n        return VALIDATOR;\n    }\n\n    /**\n     * Constructs a <em>strict</em> instance.\n     */\n    public PercentValidator() {\n        this(true);\n    }\n\n    /**\n     * Constructs an instance with the specified strict setting.\n     *\n     * @param strict {@code true} if strict\n     *        {@code Format} parsing should be used.\n     */\n    public PercentValidator(final boolean strict) {\n        super(strict, PERCENT_FORMAT, true);\n    }\n\n    /**\n     * <p>Parse the value with the specified {@code Format}.</p>\n     *\n     * <p>This implementation is lenient whether the currency symbol\n     *    is present or not. The default {@code NumberFormat}\n     *    behavior is for the parsing to \"fail\" if the currency\n     *    symbol is missing. This method re-parses with a format\n     *    without the currency symbol if it fails initially.</p>\n     *\n     * @param value The value to be parsed.\n     * @param formatter The Format to parse the value with.\n     * @return The parsed value if valid or {@code null} if invalid.\n     */\n    @Override\n    protected Object parse(final String value, final Format formatter) {\n\n        // Initial parse of the value\n        BigDecimal parsedValue = (BigDecimal) super.parse(value, formatter);\n        if (parsedValue != null || !(formatter instanceof DecimalFormat)) {\n            return parsedValue;\n        }\n\n        // Re-parse using a pattern without the percent symbol\n        final DecimalFormat decimalFormat = (DecimalFormat) formatter;\n        final String pattern = decimalFormat.toPattern();\n        if (pattern.indexOf(PERCENT_SYMBOL) >= 0) {\n            final StringBuilder buffer = new StringBuilder(pattern.length());\n            for (int i = 0; i < pattern.length(); i++) {\n                if (pattern.charAt(i) != PERCENT_SYMBOL) {\n                    buffer.append(pattern.charAt(i));\n                }\n            }\n            decimalFormat.applyPattern(buffer.toString());\n            parsedValue = (BigDecimal) super.parse(value, decimalFormat);\n\n            // If parsed OK, divide by 100 to get percent\n            if (parsedValue != null) {\n                parsedValue = parsedValue.multiply(POINT_ZERO_ONE);\n            }\n\n        }\n        return parsedValue;\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final long serialVersionUID = -3508241924961535772L;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "serialVersionUID = -3508241924961535772L", "syntax_pass": true}, {"attribute_expression": "private static final PercentValidator VALIDATOR = new PercentValidator();", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "PercentValidator", "name": "VALIDATOR = new PercentValidator()", "syntax_pass": true}, {"attribute_expression": "private static final char PERCENT_SYMBOL = '%';", "docstring": " DecimalFormat's percent (thousand multiplier) symbol", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "char", "name": "PERCENT_SYMBOL = '%'", "syntax_pass": true}, {"attribute_expression": "private static final BigDecimal POINT_ZERO_ONE = new BigDecimal(\"0.01\");", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "BigDecimal", "name": "POINT_ZERO_ONE = new BigDecimal(\"0.01\")", "syntax_pass": true}]}, {"uris": "src/main/java/org/apache/commons/validator/routines/UrlValidator.java.UrlValidator", "name": "UrlValidator", "file_path": "src/main/java/org/apache/commons/validator/routines/UrlValidator.java", "superclasses": "", "methods": ["[UrlValidator]getInstance()", "[boolean]isOn(long,long)", "[]UrlValidator()", "[]UrlValidator(long)", "[]UrlValidator(RegexValidator,long)", "[]UrlValidator(String[])", "[]UrlValidator(String[],long)", "[]UrlValidator(String[],RegexValidator,long)", "[]UrlValidator(String[],RegexValidator,long,DomainValidator)", "[int]countToken(String,String)", "[boolean]isOff(long)", "[boolean]isOn(long)", "[boolean]isValid(String)", "[boolean]isValidAuthority(String)", "[boolean]isValidFragment(String)", "[boolean]isValidPath(String)", "[boolean]isValidQuery(String)", "[boolean]isValidScheme(String)"], "method_uris": ["src/main/java/org/apache/commons/validator/routines/UrlValidator.java.UrlValidator.[UrlValidator]getInstance()", "src/main/java/org/apache/commons/validator/routines/UrlValidator.java.UrlValidator.[boolean]isOn(long,long)", "src/main/java/org/apache/commons/validator/routines/UrlValidator.java.UrlValidator.[]UrlValidator()", "src/main/java/org/apache/commons/validator/routines/UrlValidator.java.UrlValidator.[]UrlValidator(long)", "src/main/java/org/apache/commons/validator/routines/UrlValidator.java.UrlValidator.[]UrlValidator(RegexValidator,long)", "src/main/java/org/apache/commons/validator/routines/UrlValidator.java.UrlValidator.[]UrlValidator(String[])", "src/main/java/org/apache/commons/validator/routines/UrlValidator.java.UrlValidator.[]UrlValidator(String[],long)", "src/main/java/org/apache/commons/validator/routines/UrlValidator.java.UrlValidator.[]UrlValidator(String[],RegexValidator,long)", "src/main/java/org/apache/commons/validator/routines/UrlValidator.java.UrlValidator.[]UrlValidator(String[],RegexValidator,long,DomainValidator)", "src/main/java/org/apache/commons/validator/routines/UrlValidator.java.UrlValidator.[int]countToken(String,String)", "src/main/java/org/apache/commons/validator/routines/UrlValidator.java.UrlValidator.[boolean]isOff(long)", "src/main/java/org/apache/commons/validator/routines/UrlValidator.java.UrlValidator.[boolean]isOn(long)", "src/main/java/org/apache/commons/validator/routines/UrlValidator.java.UrlValidator.[boolean]isValid(String)", "src/main/java/org/apache/commons/validator/routines/UrlValidator.java.UrlValidator.[boolean]isValidAuthority(String)", "src/main/java/org/apache/commons/validator/routines/UrlValidator.java.UrlValidator.[boolean]isValidFragment(String)", "src/main/java/org/apache/commons/validator/routines/UrlValidator.java.UrlValidator.[boolean]isValidPath(String)", "src/main/java/org/apache/commons/validator/routines/UrlValidator.java.UrlValidator.[boolean]isValidQuery(String)", "src/main/java/org/apache/commons/validator/routines/UrlValidator.java.UrlValidator.[boolean]isValidScheme(String)"], "overrides": null, "attributes": [], "class_docstring": "\n<p><b>URL Validation</b> routines.</p>\nBehavior of validation is modified by passing in options:\n<ul>\n<li>ALLOW_2_SLASHES - [FALSE]  Allows double '/' characters in the path\ncomponent.</li>\n<li>NO_FRAGMENT- [FALSE]  By default fragments are allowed, if this option is\nincluded then fragments are flagged as illegal.</li>\n<li>ALLOW_ALL_SCHEMES - [FALSE] By default only http, https, and ftp are\nconsidered valid schemes.  Enabling this option will let any scheme pass validation.</li>\n</ul>\n\n<p>Originally based in on php script by Debbie Dyer, validation.php v1.2b, Date: 03/07/02,\nhttps://javascript.internet.com. However, this validation now bears little resemblance\nto the php original.</p>\n<pre>\n  Example of usage:\n  Construct a UrlValidator with valid schemes of \"http\", and \"https\".\n\n   String[] schemes = {\"http\",\"https\"}.\n   UrlValidator urlValidator = new UrlValidator(schemes);\n   if (urlValidator.isValid(\"ftp://foo.bar.com/\")) {\n      System.out.println(\"URL is valid\");\n   } else {\n      System.out.println(\"URL is invalid\");\n   }\n\n   prints \"URL is invalid\"\n  If instead the default constructor is used.\n\n   UrlValidator urlValidator = new UrlValidator();\n   if (urlValidator.isValid(\"ftp://foo.bar.com/\")) {\n      System.out.println(\"URL is valid\");\n   } else {\n      System.out.println(\"URL is invalid\");\n   }\n\n  prints out \"URL is valid\"\n </pre>\n\n@see\n<a href=\"http://www.ietf.org/rfc/rfc2396.txt\">\n Uniform Resource Identifiers (URI): Generic Syntax\n</a>\n\n@since 1.4\n", "original_string": "public class UrlValidator implements Serializable {\n\n    private static final long serialVersionUID = 7557161713937335013L;\n\n    private static final int MAX_UNSIGNED_16_BIT_INT = 0xFFFF; // port max\n\n    /**\n     * Allows all validly formatted schemes to pass validation instead of\n     * supplying a set of valid schemes.\n     */\n    public static final long ALLOW_ALL_SCHEMES = 1 << 0;\n\n    /**\n     * Allow two slashes in the path component of the URL.\n     */\n    public static final long ALLOW_2_SLASHES = 1 << 1;\n\n    /**\n     * Enabling this options disallows any URL fragments.\n     */\n    public static final long NO_FRAGMENTS = 1 << 2;\n\n    /**\n     * Allow local URLs, such as https://localhost/ or https://machine/ .\n     * This enables a broad-brush check, for complex local machine name\n     *  validation requirements you should create your validator with\n     *  a {@link RegexValidator} instead ({@link #UrlValidator(RegexValidator, long)})\n     */\n    public static final long ALLOW_LOCAL_URLS = 1 << 3; // CHECKSTYLE IGNORE MagicNumber\n\n    /**\n     * Protocol scheme (e.g. http, ftp, https).\n     */\n    private static final String SCHEME_REGEX = \"^\\\\p{Alpha}[\\\\p{Alnum}\\\\+\\\\-\\\\.]*\";\n    private static final Pattern SCHEME_PATTERN = Pattern.compile(SCHEME_REGEX);\n\n    // Drop numeric, and  \"+-.\" for now\n    // TODO does not allow for optional userinfo.\n    // Validation of character set is done by isValidAuthority\n    private static final String AUTHORITY_CHARS_REGEX = \"\\\\p{Alnum}\\\\-\\\\.\"; // allows for IPV4 but not IPV6\n    // Allow for IPv4 mapped addresses: ::FFF:123.123.123.123\n    private static final String IPV6_REGEX = \"::FFFF:(?:\\\\d{1,3}\\\\.){3}\\\\d{1,3}|[0-9a-fA-F:]+\"; // do this as separate match because : could cause ambiguity with port prefix\n\n    // userinfo    = *( unreserved / pct-encoded / sub-delims / \":\" )\n    // unreserved    = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\n    // sub-delims    = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\" / \"*\" / \"+\" / \",\" / \";\" / \"=\"\n    // We assume that password has the same valid chars as user info\n    private static final String USERINFO_CHARS_REGEX = \"[a-zA-Z0-9%-._~!$&'()*+,;=]\";\n\n    // since neither ':' nor '@' are allowed chars, we don't need to use non-greedy matching\n    private static final String USERINFO_FIELD_REGEX =\n            USERINFO_CHARS_REGEX + \"+\" + // At least one character for the name\n            \"(?::\" + USERINFO_CHARS_REGEX + \"*)?@\"; // colon and password may be absent\n\n    private static final String AUTHORITY_REGEX =\n            \"(?:\\\\[(\" + IPV6_REGEX + \")\\\\]|(?:(?:\" + USERINFO_FIELD_REGEX + \")?([\" + AUTHORITY_CHARS_REGEX + \"]*)))(?::(\\\\d*))?(.*)?\";\n    //             1                                 e.g. user:pass@           2                                       3       4\n    private static final Pattern AUTHORITY_PATTERN = Pattern.compile(AUTHORITY_REGEX);\n\n    private static final int PARSE_AUTHORITY_IPV6 = 1;\n\n    private static final int PARSE_AUTHORITY_HOST_IP = 2; // excludes userinfo, if present\n\n    private static final int PARSE_AUTHORITY_PORT = 3; // excludes leading colon\n\n    /**\n     * Should always be empty. The code currently allows spaces.\n     */\n    private static final int PARSE_AUTHORITY_EXTRA = 4;\n\n    private static final String PATH_REGEX = \"^(/[-\\\\w:@&?=+,.!/~*'%$_;\\\\(\\\\)]*)?$\";\n    private static final Pattern PATH_PATTERN = Pattern.compile(PATH_REGEX);\n\n    private static final String QUERY_REGEX = \"^(\\\\S*)$\";\n    private static final Pattern QUERY_PATTERN = Pattern.compile(QUERY_REGEX);\n\n    /**\n     * If no schemes are provided, default to this set.\n     */\n    private static final String[] DEFAULT_SCHEMES = {\"http\", \"https\", \"ftp\"}; // Must be lower-case\n\n    /**\n     * Singleton instance of this class with default schemes and options.\n     */\n    private static final UrlValidator DEFAULT_URL_VALIDATOR = new UrlValidator();\n\n    /**\n     * Returns the singleton instance of this class with default schemes and options.\n     * @return singleton instance with default schemes and options\n     */\n    public static UrlValidator getInstance() {\n        return DEFAULT_URL_VALIDATOR;\n    }\n\n    /**\n     * Tests whether the given flag is on.  If the flag is not a power of 2\n     * (e.g. 3) this tests whether the combination of flags is on.\n     *\n     * @param flag Flag value to check.\n     * @param options what to check\n     *\n     * @return whether the specified flag value is on.\n     */\n    private static boolean isOn(final long flag, final long options) {\n        return (options & flag) > 0;\n    }\n\n    /**\n     * Holds the set of current validation options.\n     */\n    private final long options;\n\n    /**\n     * The set of schemes that are allowed to be in a URL.\n     */\n    private final Set<String> allowedSchemes; // Must be lower-case\n\n    /**\n     * Regular expressions used to manually validate authorities if IANA\n     * domain name validation isn't desired.\n     */\n    private final RegexValidator authorityValidator;\n\n    /**\n     * The domain validator.\n     */\n    private final DomainValidator domainValidator;\n\n    /**\n     * Constructs a new instance with default properties.\n     */\n    public UrlValidator() {\n        this(null);\n    }\n\n    /**\n     * Constructs a new instance with the given validation options.\n     * @param options The options should be set using the public constants declared in\n     * this class.  To set multiple options you simply add them together.  For example,\n     * ALLOW_2_SLASHES + NO_FRAGMENTS enables both of those options.\n     */\n    public UrlValidator(final long options) {\n        this(null, null, options);\n    }\n\n    /**\n     * Constructs a new instance with the given validation options.\n     * @param authorityValidator Regular expression validator used to validate the authority part\n     * This allows the user to override the standard set of domains.\n     * @param options Validation options. Set using the public constants of this class.\n     * To set multiple options, simply add them together:\n     * <p>{@code ALLOW_2_SLASHES + NO_FRAGMENTS}</p>\n     * enables both of those options.\n     */\n    public UrlValidator(final RegexValidator authorityValidator, final long options) {\n        this(null, authorityValidator, options);\n    }\n\n    /**\n     * Behavior of validation is modified by passing in several strings options:\n     * @param schemes Pass in one or more URL schemes to consider valid, passing in\n     *        a null will default to \"http,https,ftp\" being valid.\n     *        If a non-null schemes is specified then all valid schemes must\n     *        be specified. Setting the ALLOW_ALL_SCHEMES option will\n     *        ignore the contents of schemes.\n     */\n    public UrlValidator(final String[] schemes) {\n        this(schemes, 0L);\n    }\n\n    /**\n     * Behavior of validation is modified by passing in options:\n     * @param schemes The set of valid schemes. Ignored if the ALLOW_ALL_SCHEMES option is set.\n     * @param options The options should be set using the public constants declared in\n     * this class.  To set multiple options you simply add them together.  For example,\n     * ALLOW_2_SLASHES + NO_FRAGMENTS enables both of those options.\n     */\n    public UrlValidator(final String[] schemes, final long options) {\n        this(schemes, null, options);\n    }\n\n    /**\n     * Customizable constructor. Validation behavior is modified by passing in options.\n     * @param schemes the set of valid schemes. Ignored if the ALLOW_ALL_SCHEMES option is set.\n     * @param authorityValidator Regular expression validator used to validate the authority part\n     * @param options Validation options. Set using the public constants of this class.\n     * To set multiple options, simply add them together:\n     * <p>{@code ALLOW_2_SLASHES + NO_FRAGMENTS}</p>\n     * enables both of those options.\n     */\n    public UrlValidator(final String[] schemes, final RegexValidator authorityValidator, final long options) {\n        this(schemes, authorityValidator, options, DomainValidator.getInstance(isOn(ALLOW_LOCAL_URLS, options)));\n    }\n\n    /**\n     * Customizable constructor. Validation behavior is modified by passing in options.\n     * @param schemes the set of valid schemes. Ignored if the ALLOW_ALL_SCHEMES option is set.\n     * @param authorityValidator Regular expression validator used to validate the authority part\n     * @param options Validation options. Set using the public constants of this class.\n     * To set multiple options, simply add them together:\n     * <p>{@code ALLOW_2_SLASHES + NO_FRAGMENTS}</p>\n     * enables both of those options.\n     * @param domainValidator the DomainValidator to use; must agree with ALLOW_LOCAL_URLS setting\n     * @since 1.7\n     */\n    public UrlValidator(String[] schemes, final RegexValidator authorityValidator, final long options, final DomainValidator domainValidator) {\n        this.options = options;\n        if (domainValidator == null) {\n            throw new IllegalArgumentException(\"DomainValidator must not be null\");\n        }\n        if (domainValidator.isAllowLocal() != (options & ALLOW_LOCAL_URLS) > 0) {\n            throw new IllegalArgumentException(\"DomainValidator disagrees with ALLOW_LOCAL_URLS setting\");\n        }\n        this.domainValidator = domainValidator;\n\n        if (isOn(ALLOW_ALL_SCHEMES)) {\n            allowedSchemes = Collections.emptySet();\n        } else {\n            if (schemes == null) {\n                schemes = DEFAULT_SCHEMES;\n            }\n            allowedSchemes = new HashSet<>(schemes.length);\n            for (final String scheme : schemes) {\n                allowedSchemes.add(scheme.toLowerCase(Locale.ENGLISH));\n            }\n        }\n\n        this.authorityValidator = authorityValidator;\n    }\n\n    /**\n     * Returns the number of times the token appears in the target.\n     * @param token Token value to be counted.\n     * @param target Target value to count tokens in.\n     * @return the number of tokens.\n     */\n    protected int countToken(final String token, final String target) {\n        int tokenIndex = 0;\n        int count = 0;\n        while (tokenIndex != -1) {\n            tokenIndex = target.indexOf(token, tokenIndex);\n            if (tokenIndex > -1) {\n                tokenIndex++;\n                count++;\n            }\n        }\n        return count;\n    }\n\n    /**\n     * Tests whether the given flag is off.  If the flag is not a power of 2\n     * (ie. 3) this tests whether the combination of flags is off.\n     *\n     * @param flag Flag value to check.\n     *\n     * @return whether the specified flag value is off.\n     */\n    private boolean isOff(final long flag) {\n        return (options & flag) == 0;\n    }\n\n    /**\n     * Tests whether the given flag is on.  If the flag is not a power of 2\n     * (ie. 3) this tests whether the combination of flags is on.\n     *\n     * @param flag Flag value to check.\n     *\n     * @return whether the specified flag value is on.\n     */\n    private boolean isOn(final long flag) {\n        return (options & flag) > 0;\n    }\n\n    /**\n     * <p>Checks if a field has a valid URL address.</p>\n     *\n     * Note that the method calls #isValidAuthority()\n     * which checks that the domain is valid.\n     *\n     * @param value The value validation is being performed on.  A {@code null}\n     * value is considered invalid.\n     * @return true if the URL is valid.\n     */\n    public boolean isValid(final String value) {\n        if (value == null) {\n            return false;\n        }\n\n        URI uri; // ensure value is a valid URI\n        try {\n            uri = new URI(value);\n        } catch (final URISyntaxException e) {\n            return false;\n        }\n        // OK, perform additional validation\n\n        final String scheme = uri.getScheme();\n        if (!isValidScheme(scheme)) {\n            return false;\n        }\n\n        final String authority = uri.getRawAuthority();\n        if (\"file\".equals(scheme) && GenericValidator.isBlankOrNull(authority)) { // Special case - file: allows an empty authority\n            return true; // this is a local file - nothing more to do here\n        }\n        if (\"file\".equals(scheme) && authority != null && authority.contains(\":\")) {\n            return false;\n        }\n        // Validate the authority\n        if (!isValidAuthority(authority)) {\n            return false;\n        }\n\n        if (!isValidPath(uri.getRawPath())) {\n            return false;\n        }\n\n        if (!isValidQuery(uri.getRawQuery())) {\n            return false;\n        }\n\n        if (!isValidFragment(uri.getRawFragment())) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Returns true if the authority is properly formatted.  An authority is the combination\n     * of hostname and port.  A {@code null} authority value is considered invalid.\n     * Note: this implementation validates the domain unless a RegexValidator was provided.\n     * If a RegexValidator was supplied and it matches, then the authority is regarded\n     * as valid with no further checks, otherwise the method checks against the\n     * AUTHORITY_PATTERN and the DomainValidator (ALLOW_LOCAL_URLS)\n     * @param authority Authority value to validate, alllows IDN\n     * @return true if authority (hostname and port) is valid.\n     */\n    protected boolean isValidAuthority(final String authority) {\n        if (authority == null) {\n            return false;\n        }\n\n        // check manual authority validation if specified\n        if (authorityValidator != null && authorityValidator.isValid(authority)) {\n            return true;\n        }\n        // convert to ASCII if possible\n        final String authorityASCII = DomainValidator.unicodeToASCII(authority);\n\n        final Matcher authorityMatcher = AUTHORITY_PATTERN.matcher(authorityASCII);\n        if (!authorityMatcher.matches()) {\n            return false;\n        }\n\n        // We have to process IPV6 separately because that is parsed in a different group\n        final String ipv6 = authorityMatcher.group(PARSE_AUTHORITY_IPV6);\n        if (ipv6 != null) {\n            final InetAddressValidator inetAddressValidator = InetAddressValidator.getInstance();\n            if (!inetAddressValidator.isValidInet6Address(ipv6)) {\n                return false;\n            }\n        } else {\n            final String hostLocation = authorityMatcher.group(PARSE_AUTHORITY_HOST_IP);\n            // check if authority is hostname or IP address:\n            // try a hostname first since that's much more likely\n            if (!domainValidator.isValid(hostLocation)) {\n                // try an IPv4 address\n                final InetAddressValidator inetAddressValidator = InetAddressValidator.getInstance();\n                if (!inetAddressValidator.isValidInet4Address(hostLocation)) {\n                    // isn't IPv4, so the URL is invalid\n                    return false;\n                }\n            }\n            final String port = authorityMatcher.group(PARSE_AUTHORITY_PORT);\n            if (!GenericValidator.isBlankOrNull(port)) {\n                try {\n                    final int iPort = Integer.parseInt(port);\n                    if (iPort < 0 || iPort > MAX_UNSIGNED_16_BIT_INT) {\n                        return false;\n                    }\n                } catch (final NumberFormatException nfe) {\n                    return false; // this can happen for big numbers\n                }\n            }\n        }\n\n        final String extra = authorityMatcher.group(PARSE_AUTHORITY_EXTRA);\n        if (extra != null && !extra.trim().isEmpty()) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Returns true if the given fragment is null or fragments are allowed.\n     * @param fragment Fragment value to validate.\n     * @return true if fragment is valid.\n     */\n    protected boolean isValidFragment(final String fragment) {\n        if (fragment == null) {\n            return true;\n        }\n\n        return isOff(NO_FRAGMENTS);\n    }\n\n    /**\n     * Returns true if the path is valid.  A {@code null} value is considered invalid.\n     * @param path Path value to validate.\n     * @return true if path is valid.\n     */\n    protected boolean isValidPath(final String path) {\n        if (path == null) {\n            return false;\n        }\n\n        if (!PATH_PATTERN.matcher(path).matches()) {\n            return false;\n        }\n\n        try {\n            // Don't omit host otherwise leading path may be taken as host if it starts with //\n            final URI uri = new URI(null, \"localhost\", path, null);\n            final String norm = uri.normalize().getPath();\n            if (norm.startsWith(\"/../\") // Trying to go via the parent dir\n                    || norm.equals(\"/..\")) { // Trying to go to the parent dir\n                return false;\n            }\n        } catch (final URISyntaxException e) {\n            return false;\n        }\n\n        final int slash2Count = countToken(\"//\", path);\n        if (isOff(ALLOW_2_SLASHES) && slash2Count > 0) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Returns true if the query is null or it's a properly formatted query string.\n     * @param query Query value to validate.\n     * @return true if query is valid.\n     */\n    protected boolean isValidQuery(final String query) {\n        if (query == null) {\n            return true;\n        }\n        return QUERY_PATTERN.matcher(query).matches();\n    }\n\n    /**\n     * Validate scheme. If schemes[] was initialized to a non null,\n     * then only those schemes are allowed.\n     * Otherwise the default schemes are \"http\", \"https\", \"ftp\".\n     * Matching is case-blind.\n     * @param scheme The scheme to validate.  A {@code null} value is considered\n     * invalid.\n     * @return true if valid.\n     */\n    protected boolean isValidScheme(final String scheme) {\n        if (scheme == null) {\n            return false;\n        }\n\n        if (!SCHEME_PATTERN.matcher(scheme).matches()) {\n            return false;\n        }\n\n        if (isOff(ALLOW_ALL_SCHEMES) && !allowedSchemes.contains(scheme.toLowerCase(Locale.ENGLISH))) {\n            return false;\n        }\n\n        return true;\n    }\n\n}", "super_interfaces": ["Serializable"], "fields": [{"attribute_expression": "private static final long serialVersionUID = 7557161713937335013L;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "serialVersionUID = 7557161713937335013L", "syntax_pass": true}, {"attribute_expression": "private static final int MAX_UNSIGNED_16_BIT_INT = 0xFFFF;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "MAX_UNSIGNED_16_BIT_INT = 0xFFFF", "syntax_pass": true}, {"attribute_expression": "public static final long ALLOW_ALL_SCHEMES = 1 << 0;", "docstring": "\nAllows all validly formatted schemes to pass validation instead of\nsupplying a set of valid schemes.\n", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "long", "name": "ALLOW_ALL_SCHEMES = 1 << 0", "syntax_pass": true}, {"attribute_expression": "public static final long ALLOW_2_SLASHES = 1 << 1;", "docstring": "\nAllow two slashes in the path component of the URL.\n", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "long", "name": "ALLOW_2_SLASHES = 1 << 1", "syntax_pass": true}, {"attribute_expression": "public static final long NO_FRAGMENTS = 1 << 2;", "docstring": "\nEnabling this options disallows any URL fragments.\n", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "long", "name": "NO_FRAGMENTS = 1 << 2", "syntax_pass": true}, {"attribute_expression": "public static final long ALLOW_LOCAL_URLS = 1 << 3;", "docstring": "\nAllow local URLs, such as https://localhost/ or https://machine/ .\nThis enables a broad-brush check, for complex local machine name\n validation requirements you should create your validator with\n a {@link RegexValidator} instead ({@link #UrlValidator(RegexValidator, long)})\n", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "long", "name": "ALLOW_LOCAL_URLS = 1 << 3", "syntax_pass": true}, {"attribute_expression": "private static final String SCHEME_REGEX = \"^\\\\p{Alpha}[\\\\p{Alnum}\\\\+\\\\-\\\\.]*\";", "docstring": "\nProtocol scheme (e.g. http, ftp, https).\n", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "SCHEME_REGEX = \"^\\\\p{Alpha}[\\\\p{Alnum}\\\\+\\\\-\\\\.]*\"", "syntax_pass": true}, {"attribute_expression": "private static final Pattern SCHEME_PATTERN = Pattern.compile(SCHEME_REGEX);", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "Pattern", "name": "SCHEME_PATTERN = Pattern.compile(SCHEME_REGEX)", "syntax_pass": true}, {"attribute_expression": "private static final String AUTHORITY_CHARS_REGEX = \"\\\\p{Alnum}\\\\-\\\\.\";", "docstring": " Validation of character set is done by isValidAuthority", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "AUTHORITY_CHARS_REGEX = \"\\\\p{Alnum}\\\\-\\\\.\"", "syntax_pass": true}, {"attribute_expression": "private static final String IPV6_REGEX = \"::FFFF:(?:\\\\d{1,3}\\\\.){3}\\\\d{1,3}|[0-9a-fA-F:]+\";", "docstring": " Allow for IPv4 mapped addresses: ::FFF:123.123.123.123", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "IPV6_REGEX = \"::FFFF:(?:\\\\d{1,3}\\\\.){3}\\\\d{1,3}|[0-9a-fA-F:]+\"", "syntax_pass": true}, {"attribute_expression": "private static final String USERINFO_CHARS_REGEX = \"[a-zA-Z0-9%-._~!$&'()*+,;=]\";", "docstring": " We assume that password has the same valid chars as user info", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "USERINFO_CHARS_REGEX = \"[a-zA-Z0-9%-._~!$&'()*+,;=]\"", "syntax_pass": true}, {"attribute_expression": "private static final String USERINFO_FIELD_REGEX =\n            USERINFO_CHARS_REGEX + \"+\" + // At least one character for the name\n            \"(?::\" + USERINFO_CHARS_REGEX + \"*)?@\";", "docstring": " since neither ':' nor '@' are allowed chars, we don't need to use non-greedy matching", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "USERINFO_FIELD_REGEX =\n            USERINFO_CHARS_REGEX + \"+\" + // At least one character for the name\n            \"(?::\" + USERINFO_CHARS_REGEX + \"*)?@\"", "syntax_pass": true}, {"attribute_expression": "private static final String AUTHORITY_REGEX =\n            \"(?:\\\\[(\" + IPV6_REGEX + \")\\\\]|(?:(?:\" + USERINFO_FIELD_REGEX + \")?([\" + AUTHORITY_CHARS_REGEX + \"]*)))(?::(\\\\d*))?(.*)?\";", "docstring": " colon and password may be absent", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "AUTHORITY_REGEX =\n            \"(?:\\\\[(\" + IPV6_REGEX + \")\\\\]|(?:(?:\" + USERINFO_FIELD_REGEX + \")?([\" + AUTHORITY_CHARS_REGEX + \"]*)))(?::(\\\\d*))?(.*)?\"", "syntax_pass": true}, {"attribute_expression": "private static final Pattern AUTHORITY_PATTERN = Pattern.compile(AUTHORITY_REGEX);", "docstring": "             1                                 e.g. user:pass@           2                                       3       4", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "Pattern", "name": "AUTHORITY_PATTERN = Pattern.compile(AUTHORITY_REGEX)", "syntax_pass": true}, {"attribute_expression": "private static final int PARSE_AUTHORITY_IPV6 = 1;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "PARSE_AUTHORITY_IPV6 = 1", "syntax_pass": true}, {"attribute_expression": "private static final int PARSE_AUTHORITY_HOST_IP = 2;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "PARSE_AUTHORITY_HOST_IP = 2", "syntax_pass": true}, {"attribute_expression": "private static final int PARSE_AUTHORITY_PORT = 3;", "docstring": " excludes userinfo, if present", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "PARSE_AUTHORITY_PORT = 3", "syntax_pass": true}, {"attribute_expression": "private static final int PARSE_AUTHORITY_EXTRA = 4;", "docstring": "\nShould always be empty. The code currently allows spaces.\n", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "PARSE_AUTHORITY_EXTRA = 4", "syntax_pass": true}, {"attribute_expression": "private static final String PATH_REGEX = \"^(/[-\\\\w:@&?=+,.!/~*'%$_;\\\\(\\\\)]*)?$\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "PATH_REGEX = \"^(/[-\\\\w:@&?=+,.!/~*'%$_;\\\\(\\\\)]*)?$\"", "syntax_pass": true}, {"attribute_expression": "private static final Pattern PATH_PATTERN = Pattern.compile(PATH_REGEX);", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "Pattern", "name": "PATH_PATTERN = Pattern.compile(PATH_REGEX)", "syntax_pass": true}, {"attribute_expression": "private static final String QUERY_REGEX = \"^(\\\\S*)$\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "QUERY_REGEX = \"^(\\\\S*)$\"", "syntax_pass": true}, {"attribute_expression": "private static final Pattern QUERY_PATTERN = Pattern.compile(QUERY_REGEX);", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "Pattern", "name": "QUERY_PATTERN = Pattern.compile(QUERY_REGEX)", "syntax_pass": true}, {"attribute_expression": "private static final String[] DEFAULT_SCHEMES = {\"http\", \"https\", \"ftp\"};", "docstring": "\nIf no schemes are provided, default to this set.\n", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String[]", "name": "DEFAULT_SCHEMES = {\"http\", \"https\", \"ftp\"}", "syntax_pass": true}, {"attribute_expression": "private static final UrlValidator DEFAULT_URL_VALIDATOR = new UrlValidator();", "docstring": "\nSingleton instance of this class with default schemes and options.\n", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "UrlValidator", "name": "DEFAULT_URL_VALIDATOR = new UrlValidator()", "syntax_pass": true}, {"attribute_expression": "private final long options;", "docstring": "\nHolds the set of current validation options.\n", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "long", "name": "options", "syntax_pass": true}, {"attribute_expression": "private final Set<String> allowedSchemes;", "docstring": "\nThe set of schemes that are allowed to be in a URL.\n", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Set<String>", "name": "allowedSchemes", "syntax_pass": true}, {"attribute_expression": "private final RegexValidator authorityValidator;", "docstring": "\nRegular expressions used to manually validate authorities if IANA\ndomain name validation isn't desired.\n", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "RegexValidator", "name": "authorityValidator", "syntax_pass": true}, {"attribute_expression": "private final DomainValidator domainValidator;", "docstring": "\nThe domain validator.\n", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "DomainValidator", "name": "domainValidator", "syntax_pass": true}]}, {"uris": "src/main/java/org/apache/commons/validator/routines/EmailValidator.java.EmailValidator", "name": "EmailValidator", "file_path": "src/main/java/org/apache/commons/validator/routines/EmailValidator.java", "superclasses": "", "methods": ["[EmailValidator]getInstance()", "[EmailValidator]getInstance(boolean)", "[EmailValidator]getInstance(boolean,boolean)", "[]EmailValidator(boolean)", "[]EmailValidator(boolean,boolean)", "[]EmailValidator(boolean,boolean,DomainValidator)", "[boolean]isValid(String)", "[boolean]isValidDomain(String)", "[boolean]isValidUser(String)"], "method_uris": ["src/main/java/org/apache/commons/validator/routines/EmailValidator.java.EmailValidator.[EmailValidator]getInstance()", "src/main/java/org/apache/commons/validator/routines/EmailValidator.java.EmailValidator.[EmailValidator]getInstance(boolean)", "src/main/java/org/apache/commons/validator/routines/EmailValidator.java.EmailValidator.[EmailValidator]getInstance(boolean,boolean)", "src/main/java/org/apache/commons/validator/routines/EmailValidator.java.EmailValidator.[]EmailValidator(boolean)", "src/main/java/org/apache/commons/validator/routines/EmailValidator.java.EmailValidator.[]EmailValidator(boolean,boolean)", "src/main/java/org/apache/commons/validator/routines/EmailValidator.java.EmailValidator.[]EmailValidator(boolean,boolean,DomainValidator)", "src/main/java/org/apache/commons/validator/routines/EmailValidator.java.EmailValidator.[boolean]isValid(String)", "src/main/java/org/apache/commons/validator/routines/EmailValidator.java.EmailValidator.[boolean]isValidDomain(String)", "src/main/java/org/apache/commons/validator/routines/EmailValidator.java.EmailValidator.[boolean]isValidUser(String)"], "overrides": null, "attributes": [], "class_docstring": "\n<p>Perform email validations.</p>\n<p>\nBased on a script by <a href=\"mailto:stamhankar@hotmail.com\">Sandeep V. Tamhankar</a>\nhttps://javascript.internet.com\n</p>\n<p>\nThis implementation is not guaranteed to catch all possible errors in an email address.\n</p>.\n\n@since 1.4\n", "original_string": "public class EmailValidator implements Serializable {\n\n    private static final long serialVersionUID = 1705927040799295880L;\n\n    private static final String SPECIAL_CHARS = \"\\\\p{Cntrl}\\\\(\\\\)<>@,;:'\\\\\\\\\\\\\\\"\\\\.\\\\[\\\\]\";\n    private static final String VALID_CHARS = \"(\\\\\\\\.)|[^\\\\s\" + SPECIAL_CHARS + \"]\";\n    private static final String QUOTED_USER = \"(\\\"(\\\\\\\\\\\"|[^\\\"])*\\\")\";\n    private static final String WORD = \"((\" + VALID_CHARS + \"|')+|\" + QUOTED_USER + \")\";\n\n    private static final String EMAIL_REGEX = \"^(.+)@(\\\\S+)$\";\n    private static final String IP_DOMAIN_REGEX = \"^\\\\[(.*)\\\\]$\";\n    private static final String USER_REGEX = \"^\" + WORD + \"(\\\\.\" + WORD + \")*$\";\n\n    private static final Pattern EMAIL_PATTERN = Pattern.compile(EMAIL_REGEX);\n    private static final Pattern IP_DOMAIN_PATTERN = Pattern.compile(IP_DOMAIN_REGEX);\n    private static final Pattern USER_PATTERN = Pattern.compile(USER_REGEX);\n\n    private static final int MAX_USERNAME_LEN = 64;\n\n    /**\n     * Singleton instance of this class, which\n     *  doesn't consider local addresses as valid.\n     */\n    private static final EmailValidator EMAIL_VALIDATOR = new EmailValidator(false, false);\n\n    /**\n     * Singleton instance of this class, which\n     *  doesn't consider local addresses as valid.\n     */\n    private static final EmailValidator EMAIL_VALIDATOR_WITH_TLD = new EmailValidator(false, true);\n\n    /**\n     * Singleton instance of this class, which does\n     *  consider local addresses valid.\n     */\n    private static final EmailValidator EMAIL_VALIDATOR_WITH_LOCAL = new EmailValidator(true, false);\n\n    /**\n     * Singleton instance of this class, which does\n     *  consider local addresses valid.\n     */\n    private static final EmailValidator EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD = new EmailValidator(true, true);\n\n    /**\n     * Returns the Singleton instance of this validator.\n     *\n     * @return singleton instance of this validator.\n     */\n    public static EmailValidator getInstance() {\n        return EMAIL_VALIDATOR;\n    }\n\n    /**\n     * Returns the Singleton instance of this validator,\n     *  with local validation as required.\n     *\n     * @param allowLocal Should local addresses be considered valid?\n     * @return singleton instance of this validator\n     */\n    public static EmailValidator getInstance(final boolean allowLocal) {\n        return getInstance(allowLocal, false);\n    }\n\n    /**\n     * Returns the Singleton instance of this validator, with local validation as required.\n     *\n     * @param allowLocal Should local addresses be considered valid?\n     * @param allowTld   Should TLDs be allowed?\n     * @return singleton instance of this validator\n     */\n    public static EmailValidator getInstance(final boolean allowLocal, final boolean allowTld) {\n        if (allowLocal) {\n            if (allowTld) {\n                return EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD;\n            }\n            return EMAIL_VALIDATOR_WITH_LOCAL;\n        }\n        if (allowTld) {\n            return EMAIL_VALIDATOR_WITH_TLD;\n        }\n        return EMAIL_VALIDATOR;\n    }\n\n    /**\n     * Whether to allow TLDs.\n     */\n    private final boolean allowTld;\n\n    /**\n     * The domain validator.\n     */\n    private final DomainValidator domainValidator;\n\n    /**\n     * Protected constructor for subclasses to use.\n     *\n     * @param allowLocal Should local addresses be considered valid?\n     */\n    protected EmailValidator(final boolean allowLocal) {\n        this(allowLocal, false);\n    }\n\n    /**\n     * Protected constructor for subclasses to use.\n     *\n     * @param allowLocal Should local addresses be considered valid?\n     * @param allowTld Should TLDs be allowed?\n     */\n    protected EmailValidator(final boolean allowLocal, final boolean allowTld) {\n        this.allowTld = allowTld;\n        this.domainValidator = DomainValidator.getInstance(allowLocal);\n    }\n\n    /**\n     * constructor for creating instances with the specified domainValidator\n     *\n     * @param allowLocal Should local addresses be considered valid?\n     * @param allowTld Should TLDs be allowed?\n     * @param domainValidator allow override of the DomainValidator.\n     * The instance must have the same allowLocal setting.\n     * @since 1.7\n     */\n    public EmailValidator(final boolean allowLocal, final boolean allowTld, final DomainValidator domainValidator) {\n        this.allowTld = allowTld;\n        if (domainValidator == null) {\n            throw new IllegalArgumentException(\"DomainValidator cannot be null\");\n        }\n        if (domainValidator.isAllowLocal() != allowLocal) {\n            throw new IllegalArgumentException(\"DomainValidator must agree with allowLocal setting\");\n        }\n        this.domainValidator = domainValidator;\n    }\n\n    /**\n     * <p>Checks if a field has a valid e-mail address.</p>\n     *\n     * @param email The value validation is being performed on.  A {@code null}\n     *              value is considered invalid.\n     * @return true if the email address is valid.\n     */\n    public boolean isValid(final String email) {\n        if (email == null) {\n            return false;\n        }\n        if (email.endsWith(\".\")) { // check this first - it's cheap!\n            return false;\n        }\n        // Check the whole email address structure\n        final Matcher emailMatcher = EMAIL_PATTERN.matcher(email);\n        if (!emailMatcher.matches()) {\n            return false;\n        }\n        if (!isValidUser(emailMatcher.group(1))) {\n            return false;\n        }\n        if (!isValidDomain(emailMatcher.group(2))) {\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Returns true if the domain component of an email address is valid.\n     *\n     * @param domain being validated, may be in IDN format\n     * @return true if the email address's domain is valid.\n     */\n    protected boolean isValidDomain(final String domain) {\n        // see if domain is an IP address in brackets\n        final Matcher ipDomainMatcher = IP_DOMAIN_PATTERN.matcher(domain);\n\n        if (ipDomainMatcher.matches()) {\n            final InetAddressValidator inetAddressValidator =\n                    InetAddressValidator.getInstance();\n            return inetAddressValidator.isValid(ipDomainMatcher.group(1));\n        }\n        // Domain is symbolic name\n        if (allowTld) {\n            return domainValidator.isValid(domain) || !domain.startsWith(\".\") && domainValidator.isValidTld(domain);\n        }\n        return domainValidator.isValid(domain);\n    }\n\n    /**\n     * Returns true if the user component of an email address is valid.\n     *\n     * @param user being validated\n     * @return true if the user name is valid.\n     */\n    protected boolean isValidUser(final String user) {\n\n        if (user == null || user.length() > MAX_USERNAME_LEN) {\n            return false;\n        }\n\n        return USER_PATTERN.matcher(user).matches();\n    }\n\n}", "super_interfaces": ["Serializable"], "fields": [{"attribute_expression": "private static final long serialVersionUID = 1705927040799295880L;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "serialVersionUID = 1705927040799295880L", "syntax_pass": true}, {"attribute_expression": "private static final String SPECIAL_CHARS = \"\\\\p{Cntrl}\\\\(\\\\)<>@,;:'\\\\\\\\\\\\\\\"\\\\.\\\\[\\\\]\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "SPECIAL_CHARS = \"\\\\p{Cntrl}\\\\(\\\\)<>@,;:'\\\\\\\\\\\\\\\"\\\\.\\\\[\\\\]\"", "syntax_pass": true}, {"attribute_expression": "private static final String VALID_CHARS = \"(\\\\\\\\.)|[^\\\\s\" + SPECIAL_CHARS + \"]\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "VALID_CHARS = \"(\\\\\\\\.)|[^\\\\s\" + SPECIAL_CHARS + \"]\"", "syntax_pass": true}, {"attribute_expression": "private static final String QUOTED_USER = \"(\\\"(\\\\\\\\\\\"|[^\\\"])*\\\")\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "QUOTED_USER = \"(\\\"(\\\\\\\\\\\"|[^\\\"])*\\\")\"", "syntax_pass": true}, {"attribute_expression": "private static final String WORD = \"((\" + VALID_CHARS + \"|')+|\" + QUOTED_USER + \")\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "WORD = \"((\" + VALID_CHARS + \"|')+|\" + QUOTED_USER + \")\"", "syntax_pass": true}, {"attribute_expression": "private static final String EMAIL_REGEX = \"^(.+)@(\\\\S+)$\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "EMAIL_REGEX = \"^(.+)@(\\\\S+)$\"", "syntax_pass": true}, {"attribute_expression": "private static final String IP_DOMAIN_REGEX = \"^\\\\[(.*)\\\\]$\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "IP_DOMAIN_REGEX = \"^\\\\[(.*)\\\\]$\"", "syntax_pass": true}, {"attribute_expression": "private static final String USER_REGEX = \"^\" + WORD + \"(\\\\.\" + WORD + \")*$\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "USER_REGEX = \"^\" + WORD + \"(\\\\.\" + WORD + \")*$\"", "syntax_pass": true}, {"attribute_expression": "private static final Pattern EMAIL_PATTERN = Pattern.compile(EMAIL_REGEX);", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "Pattern", "name": "EMAIL_PATTERN = Pattern.compile(EMAIL_REGEX)", "syntax_pass": true}, {"attribute_expression": "private static final Pattern IP_DOMAIN_PATTERN = Pattern.compile(IP_DOMAIN_REGEX);", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "Pattern", "name": "IP_DOMAIN_PATTERN = Pattern.compile(IP_DOMAIN_REGEX)", "syntax_pass": true}, {"attribute_expression": "private static final Pattern USER_PATTERN = Pattern.compile(USER_REGEX);", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "Pattern", "name": "USER_PATTERN = Pattern.compile(USER_REGEX)", "syntax_pass": true}, {"attribute_expression": "private static final int MAX_USERNAME_LEN = 64;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "MAX_USERNAME_LEN = 64", "syntax_pass": true}, {"attribute_expression": "private static final EmailValidator EMAIL_VALIDATOR = new EmailValidator(false, false);", "docstring": "\nSingleton instance of this class, which\n doesn't consider local addresses as valid.\n", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "EmailValidator", "name": "EMAIL_VALIDATOR = new EmailValidator(false, false)", "syntax_pass": true}, {"attribute_expression": "private static final EmailValidator EMAIL_VALIDATOR_WITH_TLD = new EmailValidator(false, true);", "docstring": "\nSingleton instance of this class, which\n doesn't consider local addresses as valid.\n", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "EmailValidator", "name": "EMAIL_VALIDATOR_WITH_TLD = new EmailValidator(false, true)", "syntax_pass": true}, {"attribute_expression": "private static final EmailValidator EMAIL_VALIDATOR_WITH_LOCAL = new EmailValidator(true, false);", "docstring": "\nSingleton instance of this class, which does\n consider local addresses valid.\n", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "EmailValidator", "name": "EMAIL_VALIDATOR_WITH_LOCAL = new EmailValidator(true, false)", "syntax_pass": true}, {"attribute_expression": "private static final EmailValidator EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD = new EmailValidator(true, true);", "docstring": "\nSingleton instance of this class, which does\n consider local addresses valid.\n", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "EmailValidator", "name": "EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD = new EmailValidator(true, true)", "syntax_pass": true}, {"attribute_expression": "private final boolean allowTld;", "docstring": "\nWhether to allow TLDs.\n", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "boolean", "name": "allowTld", "syntax_pass": true}, {"attribute_expression": "private final DomainValidator domainValidator;", "docstring": "\nThe domain validator.\n", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "DomainValidator", "name": "domainValidator", "syntax_pass": true}]}, {"uris": "src/main/java/org/apache/commons/validator/routines/BigIntegerValidator.java.BigIntegerValidator", "name": "BigIntegerValidator", "file_path": "src/main/java/org/apache/commons/validator/routines/BigIntegerValidator.java", "superclasses": "AbstractNumberValidator", "methods": ["[BigIntegerValidator]getInstance()", "[]BigIntegerValidator()", "[]BigIntegerValidator(boolean,int)", "[boolean]isInRange(BigInteger,long,long)", "[boolean]maxValue(BigInteger,long)", "[boolean]minValue(BigInteger,long)", "[Object]processParsedValue(Object,Format)", "[BigInteger]validate(String)", "[BigInteger]validate(String,Locale)", "[BigInteger]validate(String,String)", "[BigInteger]validate(String,String,Locale)"], "method_uris": ["src/main/java/org/apache/commons/validator/routines/BigIntegerValidator.java.BigIntegerValidator.[BigIntegerValidator]getInstance()", "src/main/java/org/apache/commons/validator/routines/BigIntegerValidator.java.BigIntegerValidator.[]BigIntegerValidator()", "src/main/java/org/apache/commons/validator/routines/BigIntegerValidator.java.BigIntegerValidator.[]BigIntegerValidator(boolean,int)", "src/main/java/org/apache/commons/validator/routines/BigIntegerValidator.java.BigIntegerValidator.[boolean]isInRange(BigInteger,long,long)", "src/main/java/org/apache/commons/validator/routines/BigIntegerValidator.java.BigIntegerValidator.[boolean]maxValue(BigInteger,long)", "src/main/java/org/apache/commons/validator/routines/BigIntegerValidator.java.BigIntegerValidator.[boolean]minValue(BigInteger,long)", "src/main/java/org/apache/commons/validator/routines/BigIntegerValidator.java.BigIntegerValidator.[Object]processParsedValue(Object,Format)", "src/main/java/org/apache/commons/validator/routines/BigIntegerValidator.java.BigIntegerValidator.[BigInteger]validate(String)", "src/main/java/org/apache/commons/validator/routines/BigIntegerValidator.java.BigIntegerValidator.[BigInteger]validate(String,Locale)", "src/main/java/org/apache/commons/validator/routines/BigIntegerValidator.java.BigIntegerValidator.[BigInteger]validate(String,String)", "src/main/java/org/apache/commons/validator/routines/BigIntegerValidator.java.BigIntegerValidator.[BigInteger]validate(String,String,Locale)"], "overrides": null, "attributes": [], "class_docstring": "\n<p><b>BigInteger Validation</b> and Conversion routines ({@code java.math.BigInteger}).</p>\n\n<p>This validator provides a number of methods for\n   validating/converting a {@link String} value to\n   a {@code BigInteger} using {@link NumberFormat}\n   to parse either:</p>\n   <ul>\n      <li>using the default format for the default {@link Locale}</li>\n      <li>using a specified pattern with the default {@link Locale}</li>\n      <li>using the default format for a specified {@link Locale}</li>\n      <li>using a specified pattern with a specified {@link Locale}</li>\n   </ul>\n\n<p>Use one of the {@code isValid()} methods to just validate or\n   one of the {@code validate()} methods to validate and receive a\n   <em>converted</em> {@code BigInteger} value.</p>\n\n<p>Once a value has been successfully converted the following\n   methods can be used to perform minimum, maximum and range checks:</p>\n   <ul>\n      <li>{@code minValue()} checks whether the value is greater\n          than or equal to a specified minimum.</li>\n      <li>{@code maxValue()} checks whether the value is less\n          than or equal to a specified maximum.</li>\n      <li>{@code isInRange()} checks whether the value is within\n          a specified range of values.</li>\n   </ul>\n\n<p>So that the same mechanism used for parsing an <em>input</em> value\n   for validation can be used to format <em>output</em>, corresponding\n   {@code format()} methods are also provided. That is you can\n   format either:</p>\n   <ul>\n      <li>using the default format for the default {@link Locale}</li>\n      <li>using a specified pattern with the default {@link Locale}</li>\n      <li>using the default format for a specified {@link Locale}</li>\n      <li>using a specified pattern with a specified {@link Locale}</li>\n   </ul>\n\n@since 1.3.0\n", "original_string": "public class BigIntegerValidator extends AbstractNumberValidator {\n\n    private static final long serialVersionUID = 6713144356347139988L;\n\n    private static final BigIntegerValidator VALIDATOR = new BigIntegerValidator();\n\n    /**\n     * Gets the singleton instance of this validator.\n     * @return A singleton instance of the BigIntegerValidator.\n     */\n    public static BigIntegerValidator getInstance() {\n        return VALIDATOR;\n    }\n\n    /**\n     * Constructs a <em>strict</em> instance.\n     */\n    public BigIntegerValidator() {\n        this(true, STANDARD_FORMAT);\n    }\n\n    /**\n     * <p>Construct an instance with the specified strict setting\n     *    and format type.</p>\n     *\n     * <p>The {@code formatType} specified what type of\n     *    {@code NumberFormat} is created - valid types\n     *    are:</p>\n     *    <ul>\n     *       <li>AbstractNumberValidator.STANDARD_FORMAT -to create\n     *           <em>standard</em> number formats (the default).</li>\n     *       <li>AbstractNumberValidator.CURRENCY_FORMAT -to create\n     *           <em>currency</em> number formats.</li>\n     *       <li>AbstractNumberValidator.PERCENT_FORMAT -to create\n     *           <em>percent</em> number formats (the default).</li>\n     *    </ul>\n     *\n     * @param strict {@code true} if strict\n     *        {@code Format} parsing should be used.\n     * @param formatType The {@code NumberFormat} type to\n     *        create for validation, default is STANDARD_FORMAT.\n     */\n    public BigIntegerValidator(final boolean strict, final int formatType) {\n        super(strict, formatType, false);\n    }\n\n    /**\n     * Check if the value is within a specified range.\n     *\n     * @param value The {@code Number} value to check.\n     * @param min The minimum value of the range.\n     * @param max The maximum value of the range.\n     * @return {@code true} if the value is within the\n     *         specified range.\n     */\n    public boolean isInRange(final BigInteger value, final long min, final long max) {\n        return value.longValue() >= min && value.longValue() <= max;\n    }\n\n    /**\n     * Check if the value is less than or equal to a maximum.\n     *\n     * @param value The value validation is being performed on.\n     * @param max The maximum value.\n     * @return {@code true} if the value is less than\n     *         or equal to the maximum.\n     */\n    public boolean maxValue(final BigInteger value, final long max) {\n        return value.longValue() <= max;\n    }\n\n    /**\n     * Check if the value is greater than or equal to a minimum.\n     *\n     * @param value The value validation is being performed on.\n     * @param min The minimum value.\n     * @return {@code true} if the value is greater than\n     *         or equal to the minimum.\n     */\n    public boolean minValue(final BigInteger value, final long min) {\n        return value.longValue() >= min;\n    }\n\n    /**\n     * Convert the parsed value to a {@code BigInteger}.\n     *\n     * @param value The parsed {@code Number} object created.\n     * @param formatter The Format used to parse the value with.\n     * @return The parsed {@code Number} converted to a\n     *         {@code BigInteger}.\n     */\n    @Override\n    protected Object processParsedValue(final Object value, final Format formatter) {\n        return BigInteger.valueOf(((Number) value).longValue());\n    }\n\n    /**\n     * <p>Validate/convert a {@code BigInteger} using the default\n     *    {@link Locale}.\n     *\n     * @param value The value validation is being performed on.\n     * @return The parsed {@code BigInteger} if valid or {@code null}\n     *  if invalid.\n     */\n    public BigInteger validate(final String value) {\n        return (BigInteger) parse(value, (String) null, (Locale) null);\n    }\n\n    /**\n     * <p>Validate/convert a {@code BigInteger} using the\n     *    specified {@link Locale}.\n     *\n     * @param value The value validation is being performed on.\n     * @param locale The locale to use for the number format, system default if null.\n     * @return The parsed {@code BigInteger} if valid or {@code null} if invalid.\n     */\n    public BigInteger validate(final String value, final Locale locale) {\n        return (BigInteger) parse(value, (String) null, locale);\n    }\n\n    /**\n     * <p>Validate/convert a {@code BigInteger} using the\n     *    specified <em>pattern</em>.\n     *\n     * @param value The value validation is being performed on.\n     * @param pattern The pattern used to validate the value against.\n     * @return The parsed {@code BigInteger} if valid or {@code null} if invalid.\n     */\n    public BigInteger validate(final String value, final String pattern) {\n        return (BigInteger) parse(value, pattern, (Locale) null);\n    }\n\n    /**\n     * <p>Validate/convert a {@code BigInteger} using the\n     *    specified pattern and/ or {@link Locale}.\n     *\n     * @param value The value validation is being performed on.\n     * @param pattern The pattern used to validate the value against, or the\n     *        default for the {@link Locale} if {@code null}.\n     * @param locale The locale to use for the date format, system default if null.\n     * @return The parsed {@code BigInteger} if valid or {@code null} if invalid.\n     */\n    public BigInteger validate(final String value, final String pattern, final Locale locale) {\n        return (BigInteger) parse(value, pattern, locale);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final long serialVersionUID = 6713144356347139988L;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "serialVersionUID = 6713144356347139988L", "syntax_pass": true}, {"attribute_expression": "private static final BigIntegerValidator VALIDATOR = new BigIntegerValidator();", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "BigIntegerValidator", "name": "VALIDATOR = new BigIntegerValidator()", "syntax_pass": true}]}, {"uris": "src/main/java/org/apache/commons/validator/routines/ISSNValidator.java.ISSNValidator", "name": "ISSNValidator", "file_path": "src/main/java/org/apache/commons/validator/routines/ISSNValidator.java", "superclasses": "", "methods": ["[ISSNValidator]getInstance()", "[String]convertToEAN13(String,String)", "[String]extractFromEAN13(String)", "[boolean]isValid(String)", "[Object]validate(String)", "[Object]validateEan(String)"], "method_uris": ["src/main/java/org/apache/commons/validator/routines/ISSNValidator.java.ISSNValidator.[ISSNValidator]getInstance()", "src/main/java/org/apache/commons/validator/routines/ISSNValidator.java.ISSNValidator.[String]convertToEAN13(String,String)", "src/main/java/org/apache/commons/validator/routines/ISSNValidator.java.ISSNValidator.[String]extractFromEAN13(String)", "src/main/java/org/apache/commons/validator/routines/ISSNValidator.java.ISSNValidator.[boolean]isValid(String)", "src/main/java/org/apache/commons/validator/routines/ISSNValidator.java.ISSNValidator.[Object]validate(String)", "src/main/java/org/apache/commons/validator/routines/ISSNValidator.java.ISSNValidator.[Object]validateEan(String)"], "overrides": null, "attributes": [], "class_docstring": "\nInternational Standard Serial Number (ISSN)\nis an eight-digit serial number used to\nuniquely identify a serial publication.\n<pre>\nThe format is:\n\nISSN dddd-dddC\nwhere:\nd = decimal digit (0-9)\nC = checksum (0-9 or X)\n\nThe checksum is formed by adding the first 7 digits multiplied by\nthe position in the entire number (counting from the right).\n\nFor example, abcd-efg would be 8a + 7b + 6c + 5d + 4e +3f +2g.\nThe check digit is modulus 11, where the value 10 is represented by 'X'\nFor example:\nISSN 0317-8471\nISSN 1050-124X\n\nThis class strips off the 'ISSN ' prefix if it is present before passing\nthe remainder to the checksum routine.\n\n</pre>\n<p>\nNote: the {@link #isValid(String)} and {@link #validate(String)} methods strip off any leading\nor trailing spaces before doing the validation.\nTo ensure that only a valid code (without 'ISSN ' prefix) is passed to a method,\nuse the following code:\n</p>\n<pre>\nObject valid = validator.validate(input);\nif (valid != null) {\n   some_method(valid.toString());\n}\n</pre>\n@since 1.5.0\n", "original_string": "public class ISSNValidator implements Serializable {\n\n    private static final long serialVersionUID = 4319515687976420405L;\n\n    private static final String ISSN_REGEX = \"(?:ISSN )?(\\\\d{4})-(\\\\d{3}[0-9X])$\"; // We don't include the '-' in the code, so it is 8 chars\n\n    private static final int ISSN_LEN = 8;\n\n    private static final String ISSN_PREFIX = \"977\";\n\n    private static final String EAN_ISSN_REGEX = \"^(977)(?:(\\\\d{10}))$\";\n\n    private static final int EAN_ISSN_LEN = 13;\n\n    private static final CodeValidator VALIDATOR = new CodeValidator(ISSN_REGEX, ISSN_LEN, ISSNCheckDigit.ISSN_CHECK_DIGIT);\n\n    private static final CodeValidator EAN_VALIDATOR = new CodeValidator(EAN_ISSN_REGEX, EAN_ISSN_LEN, EAN13CheckDigit.EAN13_CHECK_DIGIT);\n\n    /** ISSN Code Validator. */\n    private static final ISSNValidator ISSN_VALIDATOR = new ISSNValidator();\n\n    /**\n     * Gets the singleton instance of the ISSN validator.\n     *\n     * @return A singleton instance of the ISSN validator.\n     */\n    public static ISSNValidator getInstance() {\n        return ISSN_VALIDATOR;\n    }\n\n    /**\n     * Converts an ISSN code to an EAN-13 code.\n     * <p>\n     * This method requires a valid ISSN code.\n     * It may contain a leading 'ISSN ' prefix,\n     * as the input is passed through the {@link #validate(String)}\n     * method.\n     * </p>\n     *\n     * @param issn The ISSN code to convert\n     * @param suffix the two digit suffix, e.g. \"00\"\n     * @return A converted EAN-13 code or {@code null}\n     * if the input ISSN code is not valid\n     */\n    public String convertToEAN13(final String issn, final String suffix) {\n        if (suffix == null || !suffix.matches(\"\\\\d\\\\d\")) {\n            throw new IllegalArgumentException(\"Suffix must be two digits: '\" + suffix + \"'\");\n        }\n        final Object result = validate(issn);\n        if (result == null) {\n            return null;\n        }\n        // Calculate the new EAN-13 code\n        final String input = result.toString();\n        String ean13 = ISSN_PREFIX + input.substring(0, input.length() - 1) + suffix;\n        try {\n            final String checkDigit = EAN13CheckDigit.EAN13_CHECK_DIGIT.calculate(ean13);\n            ean13 += checkDigit;\n            return ean13;\n        } catch (final CheckDigitException e) { // Should not happen\n            throw new IllegalArgumentException(\"Check digit error for '\" + ean13 + \"' - \" + e.getMessage());\n        }\n    }\n\n    /**\n     * Extracts an ISSN code from an ISSN-EAN-13 code.\n     * <p>\n     * This method requires a valid ISSN-EAN-13 code with NO formatting\n     * characters.\n     * That is a 13 digit EAN-13 code with the '977' prefix.\n     * </p>\n     *\n     * @param ean13 The ISSN code to convert\n     * @return A valid ISSN code or {@code null}\n     * if the input ISSN EAN-13 code is not valid\n     * @since 1.7\n     */\n    public String extractFromEAN13(final String ean13) {\n        String input = ean13.trim();\n        if (input.length() != EAN_ISSN_LEN ) {\n            throw new IllegalArgumentException(\"Invalid length \" + input.length() + \" for '\" + input + \"'\");\n        }\n        if (!input.startsWith(ISSN_PREFIX)) {\n            throw new IllegalArgumentException(\"Prefix must be \" + ISSN_PREFIX + \" to contain an ISSN: '\" + ean13 + \"'\");\n        }\n        final Object result = validateEan(input);\n        if (result == null) {\n            return null;\n        }\n        // Calculate the ISSN code\n        input = result.toString();\n        try {\n            //CHECKSTYLE:OFF: MagicNumber\n            final String issnBase = input.substring(3, 10); // TODO: how to derive these\n            //CHECKSTYLE:ON: MagicNumber\n            final String checkDigit = ISSNCheckDigit.ISSN_CHECK_DIGIT.calculate(issnBase);\n            return issnBase + checkDigit;\n        } catch (final CheckDigitException e) { // Should not happen\n            throw new IllegalArgumentException(\"Check digit error for '\" + ean13 + \"' - \" + e.getMessage());\n        }\n    }\n\n    /**\n     * Tests whether the code is a valid ISSN code after any transformation\n     * by the validate routine.\n     *\n     * @param code The code to validate.\n     * @return {@code true} if a valid ISSN\n     * code, otherwise {@code false}.\n     */\n    public boolean isValid(final String code) {\n        return VALIDATOR.isValid(code);\n    }\n\n    /**\n     * Checks the code is valid ISSN code.\n     * <p>\n     * If valid, this method returns the ISSN code with\n     * the 'ISSN ' prefix removed (if it was present)\n     * </p>\n     *\n     * @param code The code to validate.\n     * @return A valid ISSN code if valid, otherwise {@code null}.\n     */\n    public Object validate(final String code) {\n        return VALIDATOR.validate(code);\n    }\n\n    /**\n     * Checks the code is a valid EAN code.\n     * <p>\n     * If valid, this method returns the EAN code\n     * </p>\n     *\n     * @param code The code to validate.\n     * @return A valid EAN code if valid, otherwise {@code null}.\n     * @since 1.7\n     */\n    public Object validateEan(final String code) {\n        return EAN_VALIDATOR.validate(code);\n    }\n}", "super_interfaces": ["Serializable"], "fields": [{"attribute_expression": "private static final long serialVersionUID = 4319515687976420405L;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "serialVersionUID = 4319515687976420405L", "syntax_pass": true}, {"attribute_expression": "private static final String ISSN_REGEX = \"(?:ISSN )?(\\\\d{4})-(\\\\d{3}[0-9X])$\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "ISSN_REGEX = \"(?:ISSN )?(\\\\d{4})-(\\\\d{3}[0-9X])$\"", "syntax_pass": true}, {"attribute_expression": "private static final int ISSN_LEN = 8;", "docstring": " We don't include the '-' in the code, so it is 8 chars", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "ISSN_LEN = 8", "syntax_pass": true}, {"attribute_expression": "private static final String ISSN_PREFIX = \"977\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "ISSN_PREFIX = \"977\"", "syntax_pass": true}, {"attribute_expression": "private static final String EAN_ISSN_REGEX = \"^(977)(?:(\\\\d{10}))$\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "EAN_ISSN_REGEX = \"^(977)(?:(\\\\d{10}))$\"", "syntax_pass": true}, {"attribute_expression": "private static final int EAN_ISSN_LEN = 13;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "EAN_ISSN_LEN = 13", "syntax_pass": true}, {"attribute_expression": "private static final CodeValidator VALIDATOR = new CodeValidator(ISSN_REGEX, ISSN_LEN, ISSNCheckDigit.ISSN_CHECK_DIGIT);", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "CodeValidator", "name": "VALIDATOR = new CodeValidator(ISSN_REGEX, ISSN_LEN, ISSNCheckDigit.ISSN_CHECK_DIGIT)", "syntax_pass": true}, {"attribute_expression": "private static final CodeValidator EAN_VALIDATOR = new CodeValidator(EAN_ISSN_REGEX, EAN_ISSN_LEN, EAN13CheckDigit.EAN13_CHECK_DIGIT);", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "CodeValidator", "name": "EAN_VALIDATOR = new CodeValidator(EAN_ISSN_REGEX, EAN_ISSN_LEN, EAN13CheckDigit.EAN13_CHECK_DIGIT)", "syntax_pass": true}, {"attribute_expression": "private static final ISSNValidator ISSN_VALIDATOR = new ISSNValidator();", "docstring": " ISSN Code Validator.", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "ISSNValidator", "name": "ISSN_VALIDATOR = new ISSNValidator()", "syntax_pass": true}]}, {"uris": "src/main/java/org/apache/commons/validator/routines/ByteValidator.java.ByteValidator", "name": "ByteValidator", "file_path": "src/main/java/org/apache/commons/validator/routines/ByteValidator.java", "superclasses": "AbstractNumberValidator", "methods": ["[ByteValidator]getInstance()", "[]ByteValidator()", "[]ByteValidator(boolean,int)", "[boolean]isInRange(byte,byte,byte)", "[boolean]isInRange(Byte,byte,byte)", "[boolean]maxValue(byte,byte)", "[boolean]maxValue(Byte,byte)", "[boolean]minValue(byte,byte)", "[boolean]minValue(Byte,byte)", "[Object]processParsedValue(Object,Format)", "[Byte]validate(String)", "[Byte]validate(String,Locale)", "[Byte]validate(String,String)", "[Byte]validate(String,String,Locale)"], "method_uris": ["src/main/java/org/apache/commons/validator/routines/ByteValidator.java.ByteValidator.[ByteValidator]getInstance()", "src/main/java/org/apache/commons/validator/routines/ByteValidator.java.ByteValidator.[]ByteValidator()", "src/main/java/org/apache/commons/validator/routines/ByteValidator.java.ByteValidator.[]ByteValidator(boolean,int)", "src/main/java/org/apache/commons/validator/routines/ByteValidator.java.ByteValidator.[boolean]isInRange(byte,byte,byte)", "src/main/java/org/apache/commons/validator/routines/ByteValidator.java.ByteValidator.[boolean]isInRange(Byte,byte,byte)", "src/main/java/org/apache/commons/validator/routines/ByteValidator.java.ByteValidator.[boolean]maxValue(byte,byte)", "src/main/java/org/apache/commons/validator/routines/ByteValidator.java.ByteValidator.[boolean]maxValue(Byte,byte)", "src/main/java/org/apache/commons/validator/routines/ByteValidator.java.ByteValidator.[boolean]minValue(byte,byte)", "src/main/java/org/apache/commons/validator/routines/ByteValidator.java.ByteValidator.[boolean]minValue(Byte,byte)", "src/main/java/org/apache/commons/validator/routines/ByteValidator.java.ByteValidator.[Object]processParsedValue(Object,Format)", "src/main/java/org/apache/commons/validator/routines/ByteValidator.java.ByteValidator.[Byte]validate(String)", "src/main/java/org/apache/commons/validator/routines/ByteValidator.java.ByteValidator.[Byte]validate(String,Locale)", "src/main/java/org/apache/commons/validator/routines/ByteValidator.java.ByteValidator.[Byte]validate(String,String)", "src/main/java/org/apache/commons/validator/routines/ByteValidator.java.ByteValidator.[Byte]validate(String,String,Locale)"], "overrides": null, "attributes": [], "class_docstring": "\n<p><b>Byte Validation</b> and Conversion routines ({@code java.lang.Byte}).</p>\n\n<p>This validator provides a number of methods for\n   validating/converting a {@link String} value to\n   a {@code Byte} using {@link NumberFormat}\n   to parse either:</p>\n   <ul>\n      <li>using the default format for the default {@link Locale}</li>\n      <li>using a specified pattern with the default {@link Locale}</li>\n      <li>using the default format for a specified {@link Locale}</li>\n      <li>using a specified pattern with a specified {@link Locale}</li>\n   </ul>\n\n<p>Use one of the {@code isValid()} methods to just validate or\n   one of the {@code validate()} methods to validate and receive a\n   <em>converted</em> {@code Byte} value.</p>\n\n<p>Once a value has been successfully converted the following\n   methods can be used to perform minimum, maximum and range checks:</p>\n   <ul>\n      <li>{@code minValue()} checks whether the value is greater\n          than or equal to a specified minimum.</li>\n      <li>{@code maxValue()} checks whether the value is less\n          than or equal to a specified maximum.</li>\n      <li>{@code isInRange()} checks whether the value is within\n          a specified range of values.</li>\n   </ul>\n\n<p>So that the same mechanism used for parsing an <em>input</em> value\n   for validation can be used to format <em>output</em>, corresponding\n   {@code format()} methods are also provided. That is you can\n   format either:</p>\n   <ul>\n      <li>using the default format for the default {@link Locale}</li>\n      <li>using a specified pattern with the default {@link Locale}</li>\n      <li>using the default format for a specified {@link Locale}</li>\n      <li>using a specified pattern with a specified {@link Locale}</li>\n   </ul>\n\n@since 1.3.0\n", "original_string": "public class ByteValidator extends AbstractNumberValidator {\n\n    private static final long serialVersionUID = 7001640945881854649L;\n\n    private static final ByteValidator VALIDATOR = new ByteValidator();\n\n    /**\n     * Gets the singleton instance of this validator.\n     * @return A singleton instance of the ByteValidator.\n     */\n    public static ByteValidator getInstance() {\n        return VALIDATOR;\n    }\n\n    /**\n     * Constructs a <em>strict</em> instance.\n     */\n    public ByteValidator() {\n        this(true, STANDARD_FORMAT);\n    }\n\n    /**\n     * <p>Construct an instance with the specified strict setting\n     *    and format type.</p>\n     *\n     * <p>The {@code formatType} specified what type of\n     *    {@code NumberFormat} is created - valid types\n     *    are:</p>\n     *    <ul>\n     *       <li>AbstractNumberValidator.STANDARD_FORMAT -to create\n     *           <em>standard</em> number formats (the default).</li>\n     *       <li>AbstractNumberValidator.CURRENCY_FORMAT -to create\n     *           <em>currency</em> number formats.</li>\n     *       <li>AbstractNumberValidator.PERCENT_FORMAT -to create\n     *           <em>percent</em> number formats (the default).</li>\n     *    </ul>\n     *\n     * @param strict {@code true} if strict\n     *        {@code Format} parsing should be used.\n     * @param formatType The {@code NumberFormat} type to\n     *        create for validation, default is STANDARD_FORMAT.\n     */\n    public ByteValidator(final boolean strict, final int formatType) {\n        super(strict, formatType, false);\n    }\n\n    /**\n     * Check if the value is within a specified range.\n     *\n     * @param value The {@code Number} value to check.\n     * @param min The minimum value of the range.\n     * @param max The maximum value of the range.\n     * @return {@code true} if the value is within the\n     *         specified range.\n     */\n    public boolean isInRange(final byte value, final byte min, final byte max) {\n        return value >= min && value <= max;\n    }\n\n    /**\n     * Check if the value is within a specified range.\n     *\n     * @param value The {@code Number} value to check.\n     * @param min The minimum value of the range.\n     * @param max The maximum value of the range.\n     * @return {@code true} if the value is within the\n     *         specified range.\n     */\n    public boolean isInRange(final Byte value, final byte min, final byte max) {\n        return isInRange(value.byteValue(), min, max);\n    }\n\n    /**\n     * Check if the value is less than or equal to a maximum.\n     *\n     * @param value The value validation is being performed on.\n     * @param max The maximum value.\n     * @return {@code true} if the value is less than\n     *         or equal to the maximum.\n     */\n    public boolean maxValue(final byte value, final byte max) {\n        return value <= max;\n    }\n\n    /**\n     * Check if the value is less than or equal to a maximum.\n     *\n     * @param value The value validation is being performed on.\n     * @param max The maximum value.\n     * @return {@code true} if the value is less than\n     *         or equal to the maximum.\n     */\n    public boolean maxValue(final Byte value, final byte max) {\n        return maxValue(value.byteValue(), max);\n    }\n\n    /**\n     * Check if the value is greater than or equal to a minimum.\n     *\n     * @param value The value validation is being performed on.\n     * @param min The minimum value.\n     * @return {@code true} if the value is greater than\n     *         or equal to the minimum.\n     */\n    public boolean minValue(final byte value, final byte min) {\n        return value >= min;\n    }\n\n    /**\n     * Check if the value is greater than or equal to a minimum.\n     *\n     * @param value The value validation is being performed on.\n     * @param min The minimum value.\n     * @return {@code true} if the value is greater than\n     *         or equal to the minimum.\n     */\n    public boolean minValue(final Byte value, final byte min) {\n        return minValue(value.byteValue(), min);\n    }\n\n    /**\n     * <p>Perform further validation and convert the {@code Number} to\n     * a {@code Byte}.</p>\n     *\n     * @param value The parsed {@code Number} object created.\n     * @param formatter The Format used to parse the value with.\n     * @return The parsed {@code Number} converted to a\n     *   {@code Byte} if valid or {@code null} if invalid.\n     */\n    @Override\n    protected Object processParsedValue(final Object value, final Format formatter) {\n\n        // Parsed value will be Long if it fits in a long and is not fractional\n        if (value instanceof Long) {\n            final long longValue = ((Long) value).longValue();\n            if (longValue >= Byte.MIN_VALUE &&\n                longValue <= Byte.MAX_VALUE) {\n                return Byte.valueOf((byte) longValue);\n            }\n        }\n        return null;\n    }\n\n    /**\n     * <p>Validate/convert a {@code Byte} using the default\n     *    {@link Locale}.\n     *\n     * @param value The value validation is being performed on.\n     * @return The parsed {@code Byte} if valid or {@code null}\n     *  if invalid.\n     */\n    public Byte validate(final String value) {\n        return (Byte) parse(value, (String) null, (Locale) null);\n    }\n\n    /**\n     * <p>Validate/convert a {@code Byte} using the\n     *    specified {@link Locale}.\n     *\n     * @param value The value validation is being performed on.\n     * @param locale The locale to use for the number format, system default if null.\n     * @return The parsed {@code Byte} if valid or {@code null} if invalid.\n     */\n    public Byte validate(final String value, final Locale locale) {\n        return (Byte) parse(value, (String) null, locale);\n    }\n\n    /**\n     * <p>Validate/convert a {@code Byte} using the\n     *    specified <em>pattern</em>.\n     *\n     * @param value The value validation is being performed on.\n     * @param pattern The pattern used to validate the value against.\n     * @return The parsed {@code Byte} if valid or {@code null} if invalid.\n     */\n    public Byte validate(final String value, final String pattern) {\n        return (Byte) parse(value, pattern, (Locale) null);\n    }\n\n    /**\n     * <p>Validate/convert a {@code Byte} using the\n     *    specified pattern and/ or {@link Locale}.\n     *\n     * @param value The value validation is being performed on.\n     * @param pattern The pattern used to validate the value against, or the\n     *        default for the {@link Locale} if {@code null}.\n     * @param locale The locale to use for the date format, system default if null.\n     * @return The parsed {@code Byte} if valid or {@code null} if invalid.\n     */\n    public Byte validate(final String value, final String pattern, final Locale locale) {\n        return (Byte) parse(value, pattern, locale);\n    }\n\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final long serialVersionUID = 7001640945881854649L;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "serialVersionUID = 7001640945881854649L", "syntax_pass": true}, {"attribute_expression": "private static final ByteValidator VALIDATOR = new ByteValidator();", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "ByteValidator", "name": "VALIDATOR = new ByteValidator()", "syntax_pass": true}]}, {"uris": "src/main/java/org/apache/commons/validator/routines/DoubleValidator.java.DoubleValidator", "name": "DoubleValidator", "file_path": "src/main/java/org/apache/commons/validator/routines/DoubleValidator.java", "superclasses": "AbstractNumberValidator", "methods": ["[DoubleValidator]getInstance()", "[]DoubleValidator()", "[]DoubleValidator(boolean,int)", "[boolean]isInRange(double,double,double)", "[boolean]isInRange(Double,double,double)", "[boolean]maxValue(double,double)", "[boolean]maxValue(Double,double)", "[boolean]minValue(double,double)", "[boolean]minValue(Double,double)", "[Object]processParsedValue(Object,Format)", "[Double]validate(String)", "[Double]validate(String,Locale)", "[Double]validate(String,String)", "[Double]validate(String,String,Locale)"], "method_uris": ["src/main/java/org/apache/commons/validator/routines/DoubleValidator.java.DoubleValidator.[DoubleValidator]getInstance()", "src/main/java/org/apache/commons/validator/routines/DoubleValidator.java.DoubleValidator.[]DoubleValidator()", "src/main/java/org/apache/commons/validator/routines/DoubleValidator.java.DoubleValidator.[]DoubleValidator(boolean,int)", "src/main/java/org/apache/commons/validator/routines/DoubleValidator.java.DoubleValidator.[boolean]isInRange(double,double,double)", "src/main/java/org/apache/commons/validator/routines/DoubleValidator.java.DoubleValidator.[boolean]isInRange(Double,double,double)", "src/main/java/org/apache/commons/validator/routines/DoubleValidator.java.DoubleValidator.[boolean]maxValue(double,double)", "src/main/java/org/apache/commons/validator/routines/DoubleValidator.java.DoubleValidator.[boolean]maxValue(Double,double)", "src/main/java/org/apache/commons/validator/routines/DoubleValidator.java.DoubleValidator.[boolean]minValue(double,double)", "src/main/java/org/apache/commons/validator/routines/DoubleValidator.java.DoubleValidator.[boolean]minValue(Double,double)", "src/main/java/org/apache/commons/validator/routines/DoubleValidator.java.DoubleValidator.[Object]processParsedValue(Object,Format)", "src/main/java/org/apache/commons/validator/routines/DoubleValidator.java.DoubleValidator.[Double]validate(String)", "src/main/java/org/apache/commons/validator/routines/DoubleValidator.java.DoubleValidator.[Double]validate(String,Locale)", "src/main/java/org/apache/commons/validator/routines/DoubleValidator.java.DoubleValidator.[Double]validate(String,String)", "src/main/java/org/apache/commons/validator/routines/DoubleValidator.java.DoubleValidator.[Double]validate(String,String,Locale)"], "overrides": null, "attributes": [], "class_docstring": "\n<p><b>Double Validation</b> and Conversion routines ({@code java.lang.Double}).</p>\n\n<p>This validator provides a number of methods for\n   validating/converting a {@link String} value to\n   a {@code Double} using {@link NumberFormat}\n   to parse either:</p>\n   <ul>\n      <li>using the default format for the default {@link Locale}</li>\n      <li>using a specified pattern with the default {@link Locale}</li>\n      <li>using the default format for a specified {@link Locale}</li>\n      <li>using a specified pattern with a specified {@link Locale}</li>\n   </ul>\n\n<p>Use one of the {@code isValid()} methods to just validate or\n   one of the {@code validate()} methods to validate and receive a\n   <em>converted</em> {@code Double} value.</p>\n\n<p>Once a value has been successfully converted the following\n   methods can be used to perform minimum, maximum and range checks:</p>\n   <ul>\n      <li>{@code minValue()} checks whether the value is greater\n          than or equal to a specified minimum.</li>\n      <li>{@code maxValue()} checks whether the value is less\n          than or equal to a specified maximum.</li>\n      <li>{@code isInRange()} checks whether the value is within\n          a specified range of values.</li>\n   </ul>\n\n<p>So that the same mechanism used for parsing an <em>input</em> value\n   for validation can be used to format <em>output</em>, corresponding\n   {@code format()} methods are also provided. That is you can\n   format either:</p>\n   <ul>\n      <li>using the default format for the default {@link Locale}</li>\n      <li>using a specified pattern with the default {@link Locale}</li>\n      <li>using the default format for a specified {@link Locale}</li>\n      <li>using a specified pattern with a specified {@link Locale}</li>\n   </ul>\n\n@since 1.3.0\n", "original_string": "public class DoubleValidator extends AbstractNumberValidator {\n\n    private static final long serialVersionUID = 5867946581318211330L;\n\n    private static final DoubleValidator VALIDATOR = new DoubleValidator();\n\n    /**\n     * Gets the singleton instance of this validator.\n     * @return A singleton instance of the DoubleValidator.\n     */\n    public static DoubleValidator getInstance() {\n        return VALIDATOR;\n    }\n\n    /**\n     * Constructs a <em>strict</em> instance.\n     */\n    public DoubleValidator() {\n        this(true, STANDARD_FORMAT);\n    }\n\n    /**\n     * <p>Construct an instance with the specified strict setting\n     *    and format type.</p>\n     *\n     * <p>The {@code formatType} specified what type of\n     *    {@code NumberFormat} is created - valid types\n     *    are:</p>\n     *    <ul>\n     *       <li>AbstractNumberValidator.STANDARD_FORMAT -to create\n     *           <em>standard</em> number formats (the default).</li>\n     *       <li>AbstractNumberValidator.CURRENCY_FORMAT -to create\n     *           <em>currency</em> number formats.</li>\n     *       <li>AbstractNumberValidator.PERCENT_FORMAT -to create\n     *           <em>percent</em> number formats (the default).</li>\n     *    </ul>\n     *\n     * @param strict {@code true} if strict\n     *        {@code Format} parsing should be used.\n     * @param formatType The {@code NumberFormat} type to\n     *        create for validation, default is STANDARD_FORMAT.\n     */\n    public DoubleValidator(final boolean strict, final int formatType) {\n        super(strict, formatType, true);\n    }\n\n    /**\n     * Check if the value is within a specified range.\n     *\n     * @param value The {@code Number} value to check.\n     * @param min The minimum value of the range.\n     * @param max The maximum value of the range.\n     * @return {@code true} if the value is within the\n     *         specified range.\n     */\n    public boolean isInRange(final double value, final double min, final double max) {\n        return value >= min && value <= max;\n    }\n\n    /**\n     * Check if the value is within a specified range.\n     *\n     * @param value The {@code Number} value to check.\n     * @param min The minimum value of the range.\n     * @param max The maximum value of the range.\n     * @return {@code true} if the value is within the\n     *         specified range.\n     */\n    public boolean isInRange(final Double value, final double min, final double max) {\n        return isInRange(value.doubleValue(), min, max);\n    }\n\n    /**\n     * Check if the value is less than or equal to a maximum.\n     *\n     * @param value The value validation is being performed on.\n     * @param max The maximum value.\n     * @return {@code true} if the value is less than\n     *         or equal to the maximum.\n     */\n    public boolean maxValue(final double value, final double max) {\n        return value <= max;\n    }\n\n    /**\n     * Check if the value is less than or equal to a maximum.\n     *\n     * @param value The value validation is being performed on.\n     * @param max The maximum value.\n     * @return {@code true} if the value is less than\n     *         or equal to the maximum.\n     */\n    public boolean maxValue(final Double value, final double max) {\n        return maxValue(value.doubleValue(), max);\n    }\n\n    /**\n     * Check if the value is greater than or equal to a minimum.\n     *\n     * @param value The value validation is being performed on.\n     * @param min The minimum value.\n     * @return {@code true} if the value is greater than\n     *         or equal to the minimum.\n     */\n    public boolean minValue(final double value, final double min) {\n        return value >= min;\n    }\n\n    /**\n     * Check if the value is greater than or equal to a minimum.\n     *\n     * @param value The value validation is being performed on.\n     * @param min The minimum value.\n     * @return {@code true} if the value is greater than\n     *         or equal to the minimum.\n     */\n    public boolean minValue(final Double value, final double min) {\n        return minValue(value.doubleValue(), min);\n    }\n\n    /**\n     * Convert the parsed value to a {@code Double}.\n     *\n     * @param value The parsed {@code Number} object created.\n     * @param formatter The Format used to parse the value with.\n     * @return The validated/converted {@code Double} value if valid\n     * or {@code null} if invalid.\n     */\n    @Override\n    protected Object processParsedValue(final Object value, final Format formatter) {\n        if (value instanceof Double) {\n            return value;\n        }\n        return Double.valueOf(((Number) value).doubleValue());\n\n    }\n\n    /**\n     * <p>Validate/convert a {@code Double} using the default\n     *    {@link Locale}.\n     *\n     * @param value The value validation is being performed on.\n     * @return The parsed {@code Double} if valid or {@code null}\n     *  if invalid.\n     */\n    public Double validate(final String value) {\n        return (Double) parse(value, (String) null, (Locale) null);\n    }\n\n    /**\n     * <p>Validate/convert a {@code Double} using the\n     *    specified {@link Locale}.\n     *\n     * @param value The value validation is being performed on.\n     * @param locale The locale to use for the number format, system default if null.\n     * @return The parsed {@code Double} if valid or {@code null} if invalid.\n     */\n    public Double validate(final String value, final Locale locale) {\n        return (Double) parse(value, (String) null, locale);\n    }\n\n    /**\n     * <p>Validate/convert a {@code Double} using the\n     *    specified <em>pattern</em>.\n     *\n     * @param value The value validation is being performed on.\n     * @param pattern The pattern used to validate the value against.\n     * @return The parsed {@code BigDecimal} if valid or {@code null} if invalid.\n     */\n    public Double validate(final String value, final String pattern) {\n        return (Double) parse(value, pattern, (Locale) null);\n    }\n\n    /**\n     * <p>Validate/convert a {@code Double} using the\n     *    specified pattern and/ or {@link Locale}.\n     *\n     * @param value The value validation is being performed on.\n     * @param pattern The pattern used to validate the value against, or the\n     *        default for the {@link Locale} if {@code null}.\n     * @param locale The locale to use for the date format, system default if null.\n     * @return The parsed {@code Double} if valid or {@code null} if invalid.\n     */\n    public Double validate(final String value, final String pattern, final Locale locale) {\n        return (Double) parse(value, pattern, locale);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final long serialVersionUID = 5867946581318211330L;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "serialVersionUID = 5867946581318211330L", "syntax_pass": true}, {"attribute_expression": "private static final DoubleValidator VALIDATOR = new DoubleValidator();", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "DoubleValidator", "name": "VALIDATOR = new DoubleValidator()", "syntax_pass": true}]}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/CUSIPCheckDigit.java.CUSIPCheckDigit", "name": "CUSIPCheckDigit", "file_path": "src/main/java/org/apache/commons/validator/routines/checkdigit/CUSIPCheckDigit.java", "superclasses": "ModulusCheckDigit", "methods": ["[]CUSIPCheckDigit()", "[int]toInt(char,int,int)", "[int]weightedValue(int,int,int)"], "method_uris": ["src/main/java/org/apache/commons/validator/routines/checkdigit/CUSIPCheckDigit.java.CUSIPCheckDigit.[]CUSIPCheckDigit()", "src/main/java/org/apache/commons/validator/routines/checkdigit/CUSIPCheckDigit.java.CUSIPCheckDigit.[int]toInt(char,int,int)", "src/main/java/org/apache/commons/validator/routines/checkdigit/CUSIPCheckDigit.java.CUSIPCheckDigit.[int]weightedValue(int,int,int)"], "overrides": null, "attributes": [], "class_docstring": "\nModulus 10 <b>CUSIP</b> (North American Securities) Check Digit calculation/validation.\n\n<p>\nCUSIP Numbers are 9 character alphanumeric codes used\nto identify North American Securities.\n</p>\n\n<p>\nCheck digit calculation uses the <em>Modulus 10 Double Add Double</em> technique\nwith every second digit being weighted by 2. Alphabetic characters are\nconverted to numbers by their position in the alphabet starting with A being 10.\nWeighted numbers greater than ten are treated as two separate numbers.\n</p>\n\n<p>\nSee <a href=\"https://en.wikipedia.org/wiki/CUSIP\">Wikipedia - CUSIP</a>\nfor more details.\n</p>\n\n@since 1.4\n", "original_string": "public final class CUSIPCheckDigit extends ModulusCheckDigit {\n\n    private static final long serialVersionUID = 666941918490152456L;\n\n    /** Singleton CUSIP Check Digit instance */\n    public static final CheckDigit CUSIP_CHECK_DIGIT = new CUSIPCheckDigit();\n\n    /** Weighting given to digits depending on their right position */\n    private static final int[] POSITION_WEIGHT = {2, 1};\n\n    /**\n     * Constructs a CUSIP Identifier Check Digit routine.\n     */\n    public CUSIPCheckDigit() {\n    }\n\n    /**\n     * Convert a character at a specified position to an integer value.\n     *\n     * @param character The character to convert\n     * @param leftPos The position of the character in the code, counting from left to right\n     * @param rightPos The position of the character in the code, counting from right to left\n     * @return The integer value of the character\n     * @throws CheckDigitException if the character is not alphanumeric\n     */\n    @Override\n    protected int toInt(final char character, final int leftPos, final int rightPos)\n            throws CheckDigitException {\n        final int charValue = Character.getNumericValue(character);\n        // the final character is only allowed to reach 9\n        final int charMax = rightPos == 1 ? 9 : 35;  // CHECKSTYLE IGNORE MagicNumber\n        if (charValue < 0 || charValue > charMax) {\n            throw new CheckDigitException(\"Invalid Character[\" +\n                    leftPos + \",\" + rightPos + \"] = '\" + charValue + \"' out of range 0 to \" + charMax);\n        }\n        return charValue;\n    }\n\n    /**\n     * <p>Calculates the <em>weighted</em> value of a character in the\n     * code at a specified position.</p>\n     *\n     * <p>For CUSIP (from right to left) <b>odd</b> digits are weighted\n     * with a factor of <b>one</b> and <b>even</b> digits with a factor\n     * of <b>two</b>. Weighted values &gt; 9, have 9 subtracted</p>\n     *\n     * @param charValue The numeric value of the character.\n     * @param leftPos The position of the character in the code, counting from left to right\n     * @param rightPos The position of the character in the code, counting from right to left\n     * @return The weighted value of the character.\n     */\n    @Override\n    protected int weightedValue(final int charValue, final int leftPos, final int rightPos) {\n        final int weight = POSITION_WEIGHT[rightPos % 2];\n        final int weightedValue = charValue * weight;\n        return sumDigits(weightedValue);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final long serialVersionUID = 666941918490152456L;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "serialVersionUID = 666941918490152456L", "syntax_pass": true}, {"attribute_expression": "public static final CheckDigit CUSIP_CHECK_DIGIT = new CUSIPCheckDigit();", "docstring": " Singleton CUSIP Check Digit instance", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "CheckDigit", "name": "CUSIP_CHECK_DIGIT = new CUSIPCheckDigit()", "syntax_pass": true}, {"attribute_expression": "private static final int[] POSITION_WEIGHT = {2, 1};", "docstring": " Weighting given to digits depending on their right position", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int[]", "name": "POSITION_WEIGHT = {2, 1}", "syntax_pass": true}]}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/EAN13CheckDigit.java.EAN13CheckDigit", "name": "EAN13CheckDigit", "file_path": "src/main/java/org/apache/commons/validator/routines/checkdigit/EAN13CheckDigit.java", "superclasses": "ModulusCheckDigit", "methods": ["[]EAN13CheckDigit()", "[int]weightedValue(int,int,int)"], "method_uris": ["src/main/java/org/apache/commons/validator/routines/checkdigit/EAN13CheckDigit.java.EAN13CheckDigit.[]EAN13CheckDigit()", "src/main/java/org/apache/commons/validator/routines/checkdigit/EAN13CheckDigit.java.EAN13CheckDigit.[int]weightedValue(int,int,int)"], "overrides": null, "attributes": [], "class_docstring": "\nModulus 10 <b>EAN-13</b> / <b>UPC</b> / <b>ISBN-13</b> Check Digit\ncalculation/validation.\n<p>\nCheck digit calculation is based on <em>modulus 10</em> with digits in\nan <em>odd</em> position (from right to left) being weighted 1 and <em>even</em>\nposition digits being weighted 3.\n<p>\nFor further information see:\n<ul>\n  <li>EAN-13 - see\n      <a href=\"https://en.wikipedia.org/wiki/European_Article_Number\">Wikipedia -\n      European Article Number</a>.</li>\n  <li>UPC - see\n      <a href=\"https://en.wikipedia.org/wiki/Universal_Product_Code\">Wikipedia -\n      Universal Product Code</a>.</li>\n  <li>ISBN-13 - see\n      <a href=\"https://en.wikipedia.org/wiki/ISBN\">Wikipedia - International\n      Standard Book Number (ISBN)</a>.</li>\n</ul>\n\n@since 1.4\n", "original_string": "public final class EAN13CheckDigit extends ModulusCheckDigit {\n\n    private static final long serialVersionUID = 1726347093230424107L;\n\n    /** Singleton EAN-13 Check Digit instance */\n    public static final CheckDigit EAN13_CHECK_DIGIT = new EAN13CheckDigit();\n\n    /** Weighting given to digits depending on their right position */\n    private static final int[] POSITION_WEIGHT = {3, 1};\n\n    /**\n     * Constructs a modulus 10 Check Digit routine for EAN/UPC.\n     */\n    public EAN13CheckDigit() {\n    }\n\n    /**\n     * <p>Calculates the <em>weighted</em> value of a character in the\n     * code at a specified position.</p>\n     *\n     * <p>For EAN-13 (from right to left) <b>odd</b> digits are weighted\n     * with a factor of <b>one</b> and <b>even</b> digits with a factor\n     * of <b>three</b>.</p>\n     *\n     * @param charValue The numeric value of the character.\n     * @param leftPos The position of the character in the code, counting from left to right\n     * @param rightPos The positionof the character in the code, counting from right to left\n     * @return The weighted value of the character.\n     */\n    @Override\n    protected int weightedValue(final int charValue, final int leftPos, final int rightPos) {\n        return charValue * POSITION_WEIGHT[rightPos % 2];\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final long serialVersionUID = 1726347093230424107L;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "serialVersionUID = 1726347093230424107L", "syntax_pass": true}, {"attribute_expression": "public static final CheckDigit EAN13_CHECK_DIGIT = new EAN13CheckDigit();", "docstring": " Singleton EAN-13 Check Digit instance", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "CheckDigit", "name": "EAN13_CHECK_DIGIT = new EAN13CheckDigit()", "syntax_pass": true}, {"attribute_expression": "private static final int[] POSITION_WEIGHT = {3, 1};", "docstring": " Weighting given to digits depending on their right position", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int[]", "name": "POSITION_WEIGHT = {3, 1}", "syntax_pass": true}]}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/ISBNCheckDigit.java.ISBNCheckDigit", "name": "ISBNCheckDigit", "file_path": "src/main/java/org/apache/commons/validator/routines/checkdigit/ISBNCheckDigit.java", "superclasses": "AbstractCheckDigit", "methods": ["[String]calculate(String)", "[boolean]isValid(String)"], "method_uris": ["src/main/java/org/apache/commons/validator/routines/checkdigit/ISBNCheckDigit.java.ISBNCheckDigit.[String]calculate(String)", "src/main/java/org/apache/commons/validator/routines/checkdigit/ISBNCheckDigit.java.ISBNCheckDigit.[boolean]isValid(String)"], "overrides": null, "attributes": [], "class_docstring": "\nCombined <b>ISBN-10</b> / <b>ISBN-13</b> Check Digit calculation/validation.\n<p>\nThis implementation validates/calculates ISBN check digits\nbased on the length of the code passed to it - delegating\neither to the {@link ISBNCheckDigit#ISBN10_CHECK_DIGIT} or the\n{@link ISBNCheckDigit#ISBN13_CHECK_DIGIT} routines to perform the actual\nvalidation/calculation.\n<p>\n<b>N.B.</b> From 1st January 2007 the book industry will start to use a new 13 digit\nISBN number (rather than this 10 digit ISBN number) which uses the EAN-13 / UPC\nstandard.\n\n@since 1.4\n", "original_string": "public final class ISBNCheckDigit extends AbstractCheckDigit implements Serializable {\n\n    private static final long serialVersionUID = 1391849166205184558L;\n\n    /** Singleton ISBN-10 Check Digit instance */\n    public static final CheckDigit ISBN10_CHECK_DIGIT = ISBN10CheckDigit.ISBN10_CHECK_DIGIT;\n\n    /** Singleton ISBN-13 Check Digit instance */\n    public static final CheckDigit ISBN13_CHECK_DIGIT = EAN13CheckDigit.EAN13_CHECK_DIGIT;\n\n    /** Singleton combined ISBN-10 / ISBN-13 Check Digit instance */\n    public static final CheckDigit ISBN_CHECK_DIGIT = new ISBNCheckDigit();\n\n    /**\n     * Calculate an ISBN-10 or ISBN-13 check digit, depending\n     * on the length of the code.\n     * <p>\n     * If the length of the code is 9, it is treated as an ISBN-10\n     * code or if the length of the code is 12, it is treated as an ISBN-13\n     * code.\n     *\n     * @param code The ISBN code to validate (should have a length of\n     * 9 or 12)\n     * @return The ISBN-10 check digit if the length is 9 or an ISBN-13\n     * check digit if the length is 12.\n     * @throws CheckDigitException if the code is missing, or an invalid\n     * length (i.e. not 9 or 12) or if there is an error calculating the\n     * check digit.\n     */\n    @Override\n    public String calculate(final String code) throws CheckDigitException {\n        if (GenericValidator.isBlankOrNull(code)) {\n            throw new CheckDigitException(\"ISBN Code is missing\");\n        }\n        if (code.length() == 9) { // CHECKSTYLE IGNORE MagicNumber\n            return ISBN10_CHECK_DIGIT.calculate(code);\n        }\n        if (code.length() == 12) { // CHECKSTYLE IGNORE MagicNumber\n            return ISBN13_CHECK_DIGIT.calculate(code);\n        }\n        throw new CheckDigitException(\"Invalid ISBN Length = \" + code.length());\n    }\n\n    /**\n     * <p>Validate an ISBN-10 or ISBN-13 check digit, depending\n     * on the length of the code.</p>\n     * <p>\n     * If the length of the code is 10, it is treated as an ISBN-10\n     * code or ff the length of the code is 13, it is treated as an ISBN-13\n     * code.\n     *\n     * @param code The ISBN code to validate (should have a length of\n     * 10 or 13)\n     * @return {@code true} if the code has a length of 10 and is\n     * a valid ISBN-10 check digit or the code has a length of 13 and is\n     * a valid ISBN-13 check digit - otherwise {@code false}.\n     */\n    @Override\n    public boolean isValid(final String code) {\n        if (code == null) {\n            return false;\n        }\n        if (code.length() == 10) { // CHECKSTYLE IGNORE MagicNumber\n            return ISBN10_CHECK_DIGIT.isValid(code);\n        }\n        if (code.length() == 13) { // CHECKSTYLE IGNORE MagicNumber\n            return ISBN13_CHECK_DIGIT.isValid(code);\n        }\n        return false;\n    }\n\n}", "super_interfaces": ["Serializable"], "fields": [{"attribute_expression": "private static final long serialVersionUID = 1391849166205184558L;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "serialVersionUID = 1391849166205184558L", "syntax_pass": true}, {"attribute_expression": "public static final CheckDigit ISBN10_CHECK_DIGIT = ISBN10CheckDigit.ISBN10_CHECK_DIGIT;", "docstring": " Singleton ISBN-10 Check Digit instance", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "CheckDigit", "name": "ISBN10_CHECK_DIGIT = ISBN10CheckDigit.ISBN10_CHECK_DIGIT", "syntax_pass": true}, {"attribute_expression": "public static final CheckDigit ISBN13_CHECK_DIGIT = EAN13CheckDigit.EAN13_CHECK_DIGIT;", "docstring": " Singleton ISBN-13 Check Digit instance", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "CheckDigit", "name": "ISBN13_CHECK_DIGIT = EAN13CheckDigit.EAN13_CHECK_DIGIT", "syntax_pass": true}, {"attribute_expression": "public static final CheckDigit ISBN_CHECK_DIGIT = new ISBNCheckDigit();", "docstring": " Singleton combined ISBN-10 / ISBN-13 Check Digit instance", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "CheckDigit", "name": "ISBN_CHECK_DIGIT = new ISBNCheckDigit()", "syntax_pass": true}]}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/ECNumberCheckDigit.java.ECNumberCheckDigit", "name": "ECNumberCheckDigit", "file_path": "src/main/java/org/apache/commons/validator/routines/checkdigit/ECNumberCheckDigit.java", "superclasses": "ModulusCheckDigit", "methods": ["[CheckDigit]getInstance()", "[]ECNumberCheckDigit()", "[String]calculate(String)", "[boolean]isValid(String)", "[int]weightedValue(int,int,int)"], "method_uris": ["src/main/java/org/apache/commons/validator/routines/checkdigit/ECNumberCheckDigit.java.ECNumberCheckDigit.[CheckDigit]getInstance()", "src/main/java/org/apache/commons/validator/routines/checkdigit/ECNumberCheckDigit.java.ECNumberCheckDigit.[]ECNumberCheckDigit()", "src/main/java/org/apache/commons/validator/routines/checkdigit/ECNumberCheckDigit.java.ECNumberCheckDigit.[String]calculate(String)", "src/main/java/org/apache/commons/validator/routines/checkdigit/ECNumberCheckDigit.java.ECNumberCheckDigit.[boolean]isValid(String)", "src/main/java/org/apache/commons/validator/routines/checkdigit/ECNumberCheckDigit.java.ECNumberCheckDigit.[int]weightedValue(int,int,int)"], "overrides": null, "attributes": [], "class_docstring": "\nModulus 11 <b>EC number</b> Check Digit calculation/validation.\n\n<p>\nThe European Community number (EC number) is a unique seven-digit identifier\nthat is assigned to chemical substances.\nFor example, the EC number of arsenic is 231-148-6:\n</p>\n\n<p>\nCheck digit calculation is based on <em>modulus 11</em> with digits being weighted\nbased on their position (from left to right).\n</p>\n\n<p>\nFor further information see\n <a href=\"https://en.wikipedia.org/wiki/European_Community_number\">Wikipedia - EC number</a>.\n</p>\n\n@since 1.9.0\n", "original_string": "public final class ECNumberCheckDigit extends ModulusCheckDigit {\n\n    private static final long serialVersionUID = 7265356024784308367L;\n\n    /** Singleton Check Digit instance */\n    private static final ECNumberCheckDigit INSTANCE = new ECNumberCheckDigit();\n\n    /**\n     * EC number consists of 3 groups of numbers separated dashes (-).\n     * Example: dexamethasone is 200-003-9\n     */\n    private static final String GROUP = \"(\\\\d{3})\";\n\n    private static final String DASH = \"(?:\\\\-)\";\n    static final String EC_REGEX = \"^(?:\" + GROUP + DASH + GROUP + DASH + \"(\\\\d))$\";\n    private static final int EC_LEN = 7;\n\n    static final CodeValidator REGEX_VALIDATOR = new CodeValidator(EC_REGEX, EC_LEN, null);\n    /**\n     * Gets the singleton instance of this validator.\n     * @return A singleton instance of the EC Number validator.\n     */\n    public static CheckDigit getInstance() {\n        return INSTANCE;\n    }\n\n    /**\n     * Constructs a modulus 11 Check Digit routine.\n     */\n    private ECNumberCheckDigit() {\n        super(MODULUS_11);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public String calculate(final String code) throws CheckDigitException {\n        if (GenericValidator.isBlankOrNull(code)) {\n            throw new CheckDigitException(\"Code is missing\");\n        }\n        final int modulusResult = INSTANCE.calculateModulus(code, false);\n        return toCheckDigit(modulusResult);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public boolean isValid(final String code) {\n        if (GenericValidator.isBlankOrNull(code)) {\n            return false;\n        }\n        final Object cde = REGEX_VALIDATOR.validate(code);\n        if (!(cde instanceof String)) {\n            return false;\n        }\n        try {\n            final int modulusResult = INSTANCE.calculateModulus((String) cde, true);\n            return modulusResult == Character.getNumericValue(code.charAt(code.length() - 1));\n        } catch (final CheckDigitException ex) {\n            return false;\n        }\n    }\n\n    /**\n     * Calculates the <em>weighted</em> value of a character in the\n     * code at a specified position.\n     *\n     * <p>For EC number digits are weighted by their position from left to right.</p>\n     *\n     * @param charValue The numeric value of the character.\n     * @param leftPos The position of the character in the code, counting from left to right\n     * @param rightPos The positionof the character in the code, counting from right to left\n     * @return The weighted value of the character.\n     */\n    @Override\n    protected int weightedValue(final int charValue, final int leftPos, final int rightPos) {\n        return leftPos >= EC_LEN ? 0 : charValue * leftPos;\n    }\n\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final long serialVersionUID = 7265356024784308367L;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "serialVersionUID = 7265356024784308367L", "syntax_pass": true}, {"attribute_expression": "private static final ECNumberCheckDigit INSTANCE = new ECNumberCheckDigit();", "docstring": " Singleton Check Digit instance", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "ECNumberCheckDigit", "name": "INSTANCE = new ECNumberCheckDigit()", "syntax_pass": true}, {"attribute_expression": "private static final String GROUP = \"(\\\\d{3})\";", "docstring": "\nEC number consists of 3 groups of numbers separated dashes (-).\nExample: dexamethasone is 200-003-9\n", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "GROUP = \"(\\\\d{3})\"", "syntax_pass": true}, {"attribute_expression": "private static final String DASH = \"(?:\\\\-)\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "DASH = \"(?:\\\\-)\"", "syntax_pass": true}, {"attribute_expression": "static final String EC_REGEX = \"^(?:\" + GROUP + DASH + GROUP + DASH + \"(\\\\d))$\";", "docstring": "", "modifiers": "static final", "marker_annotations": [], "non_marker_annotations": ["static", "final"], "comments": [], "type": "String", "name": "EC_REGEX = \"^(?:\" + GROUP + DASH + GROUP + DASH + \"(\\\\d))$\"", "syntax_pass": true}, {"attribute_expression": "private static final int EC_LEN = 7;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "EC_LEN = 7", "syntax_pass": true}, {"attribute_expression": "static final CodeValidator REGEX_VALIDATOR = new CodeValidator(EC_REGEX, EC_LEN, null);", "docstring": "", "modifiers": "static final", "marker_annotations": [], "non_marker_annotations": ["static", "final"], "comments": [], "type": "CodeValidator", "name": "REGEX_VALIDATOR = new CodeValidator(EC_REGEX, EC_LEN, null)", "syntax_pass": true}]}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/SedolCheckDigit.java.SedolCheckDigit", "name": "SedolCheckDigit", "file_path": "src/main/java/org/apache/commons/validator/routines/checkdigit/SedolCheckDigit.java", "superclasses": "ModulusCheckDigit", "methods": ["[]SedolCheckDigit()", "[int]calculateModulus(String,boolean)", "[int]toInt(char,int,int)", "[int]weightedValue(int,int,int)"], "method_uris": ["src/main/java/org/apache/commons/validator/routines/checkdigit/SedolCheckDigit.java.SedolCheckDigit.[]SedolCheckDigit()", "src/main/java/org/apache/commons/validator/routines/checkdigit/SedolCheckDigit.java.SedolCheckDigit.[int]calculateModulus(String,boolean)", "src/main/java/org/apache/commons/validator/routines/checkdigit/SedolCheckDigit.java.SedolCheckDigit.[int]toInt(char,int,int)", "src/main/java/org/apache/commons/validator/routines/checkdigit/SedolCheckDigit.java.SedolCheckDigit.[int]weightedValue(int,int,int)"], "overrides": null, "attributes": [], "class_docstring": "\nModulus 10 <b>SEDOL</b> (UK Securities) Check Digit calculation/validation.\n\n<p>\nSEDOL Numbers are 7 character alphanumeric codes used\nto identify UK Securities (SEDOL stands for Stock Exchange Daily Official List).\n</p>\n<p>\nCheck digit calculation is based on <em>modulus 10</em> with digits being weighted\nbased on their position, from left to right, as follows:\n</p>\n<pre>{@code\n     position:  1  2  3  4  5  6  7\n    weighting:  1  3  1  7  3  9  1\n}</pre>\n<p>\nSee <a href=\"https://en.wikipedia.org/wiki/SEDOL\">Wikipedia - SEDOL</a>\nfor more details.\n</p>\n\n@since 1.4\n", "original_string": "public final class SedolCheckDigit extends ModulusCheckDigit {\n\n    private static final long serialVersionUID = -8976881621148878443L;\n\n    private static final int MAX_ALPHANUMERIC_VALUE = 35; // Character.getNumericValue('Z')\n\n    /** Singleton SEDOL check digit instance */\n    public static final CheckDigit SEDOL_CHECK_DIGIT = new SedolCheckDigit();\n\n    /** Weighting given to digits depending on their right position */\n    private static final int[] POSITION_WEIGHT = {1, 3, 1, 7, 3, 9, 1};\n\n    /**\n     * Constructs a modulus 10 Check Digit routine for ISBN-10.\n     */\n    public SedolCheckDigit() {\n    }\n\n    /**\n     * Calculate the modulus for an SEDOL code.\n     *\n     * @param code The code to calculate the modulus for.\n     * @param includesCheckDigit Whether the code includes the Check Digit or not.\n     * @return The modulus value\n     * @throws CheckDigitException if an error occurs calculating the modulus\n     * for the specified code\n     */\n    @Override\n    protected int calculateModulus(final String code, final boolean includesCheckDigit) throws CheckDigitException {\n        if (code.length() > POSITION_WEIGHT.length) {\n            throw new CheckDigitException(\"Invalid Code Length = \" + code.length());\n        }\n        return super.calculateModulus(code, includesCheckDigit);\n    }\n\n    /**\n     * Convert a character at a specified position to an integer value.\n     *\n     * @param character The character to convert\n     * @param leftPos The position of the character in the code, counting from left to right\n     * @param rightPos The positionof the character in the code, counting from right to left\n     * @return The integer value of the character\n     * @throws CheckDigitException if character is not alphanumeric\n     */\n    @Override\n    protected int toInt(final char character, final int leftPos, final int rightPos) throws CheckDigitException {\n        final int charValue = Character.getNumericValue(character);\n        // the check digit is only allowed to reach 9\n        final int charMax = rightPos == 1 ? 9 : MAX_ALPHANUMERIC_VALUE; // CHECKSTYLE IGNORE MagicNumber\n        if (charValue < 0 || charValue > charMax) {\n            throw new CheckDigitException(\"Invalid Character[\" + leftPos + \",\" + rightPos + \"] = '\" + charValue + \"' out of range 0 to \" + charMax);\n        }\n        return charValue;\n    }\n\n    /**\n     * Calculates the <em>weighted</em> value of a character in the\n     * code at a specified position.\n     *\n     * @param charValue The numeric value of the character.\n     * @param leftPos The position of the character in the code, counting from left to right\n     * @param rightPos The positionof the character in the code, counting from right to left\n     * @return The weighted value of the character.\n     */\n    @Override\n    protected int weightedValue(final int charValue, final int leftPos, final int rightPos) {\n        return charValue * POSITION_WEIGHT[leftPos - 1];\n    }\n\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final long serialVersionUID = -8976881621148878443L;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "serialVersionUID = -8976881621148878443L", "syntax_pass": true}, {"attribute_expression": "private static final int MAX_ALPHANUMERIC_VALUE = 35;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "MAX_ALPHANUMERIC_VALUE = 35", "syntax_pass": true}, {"attribute_expression": "public static final CheckDigit SEDOL_CHECK_DIGIT = new SedolCheckDigit();", "docstring": " Singleton SEDOL check digit instance", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "CheckDigit", "name": "SEDOL_CHECK_DIGIT = new SedolCheckDigit()", "syntax_pass": true}, {"attribute_expression": "private static final int[] POSITION_WEIGHT = {1, 3, 1, 7, 3, 9, 1};", "docstring": " Weighting given to digits depending on their right position", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int[]", "name": "POSITION_WEIGHT = {1, 3, 1, 7, 3, 9, 1}", "syntax_pass": true}]}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/ISINCheckDigit.java.ISINCheckDigit", "name": "ISINCheckDigit", "file_path": "src/main/java/org/apache/commons/validator/routines/checkdigit/ISINCheckDigit.java", "superclasses": "ModulusCheckDigit", "methods": ["[]ISINCheckDigit()", "[int]calculateModulus(String,boolean)", "[int]weightedValue(int,int,int)"], "method_uris": ["src/main/java/org/apache/commons/validator/routines/checkdigit/ISINCheckDigit.java.ISINCheckDigit.[]ISINCheckDigit()", "src/main/java/org/apache/commons/validator/routines/checkdigit/ISINCheckDigit.java.ISINCheckDigit.[int]calculateModulus(String,boolean)", "src/main/java/org/apache/commons/validator/routines/checkdigit/ISINCheckDigit.java.ISINCheckDigit.[int]weightedValue(int,int,int)"], "overrides": null, "attributes": [], "class_docstring": "\nModulus 10 <b>ISIN</b> (International Securities Identifying Number) Check Digit calculation/validation.\n\n<p>\nISIN Numbers are 12 character alphanumeric codes used\nto identify Securities.\n</p>\n\n<p>\nCheck digit calculation uses the <em>Modulus 10 Double Add Double</em> technique\nwith every second digit being weighted by 2. Alphabetic characters are\nconverted to numbers by their position in the alphabet starting with A being 10.\nWeighted numbers greater than ten are treated as two separate numbers.\n</p>\n\n<p>\nSee <a href=\"https://en.wikipedia.org/wiki/ISIN\">Wikipedia - ISIN</a>\nfor more details.\n</p>\n\n@since 1.4\n", "original_string": "public final class ISINCheckDigit extends ModulusCheckDigit {\n\n    private static final long serialVersionUID = -1239211208101323599L;\n\n    private static final int MAX_ALPHANUMERIC_VALUE = 35; // Character.getNumericValue('Z')\n\n    /** Singleton ISIN Check Digit instance */\n    public static final CheckDigit ISIN_CHECK_DIGIT = new ISINCheckDigit();\n\n    /** Weighting given to digits depending on their right position */\n    private static final int[] POSITION_WEIGHT = {2, 1};\n\n    /**\n     * Constructs an ISIN Identifier Check Digit routine.\n     */\n    public ISINCheckDigit() {\n    }\n\n    /**\n     * Calculate the modulus for an ISIN code.\n     *\n     * @param code The code to calculate the modulus for.\n     * @param includesCheckDigit Whether the code includes the Check Digit or not.\n     * @return The modulus value\n     * @throws CheckDigitException if an error occurs calculating the modulus\n     * for the specified code\n     */\n    @Override\n    protected int calculateModulus(final String code, final boolean includesCheckDigit) throws CheckDigitException {\n        final StringBuilder transformed = new StringBuilder(code.length() * 2); // CHECKSTYLE IGNORE MagicNumber\n        if (includesCheckDigit) {\n            final char checkDigit = code.charAt(code.length() - 1); // fetch the last character\n            if (!Character.isDigit(checkDigit)) {\n                throw new CheckDigitException(\"Invalid checkdigit[\" + checkDigit + \"] in \" + code);\n            }\n        }\n        for (int i = 0; i < code.length(); i++) {\n            final int charValue = Character.getNumericValue(code.charAt(i));\n            if (charValue < 0 || charValue > MAX_ALPHANUMERIC_VALUE) {\n                throw new CheckDigitException(\"Invalid Character[\" + (i + 1) + \"] = '\" + charValue + \"'\");\n            }\n            // this converts alphanumerics to two digits\n            // so there is no need to overload toInt()\n            transformed.append(charValue);\n        }\n        return super.calculateModulus(transformed.toString(), includesCheckDigit);\n    }\n\n    /**\n     * <p>Calculates the <em>weighted</em> value of a character in the\n     * code at a specified position.</p>\n     *\n     * <p>For ISIN (from right to left) <b>odd</b> digits are weighted\n     * with a factor of <b>one</b> and <b>even</b> digits with a factor\n     * of <b>two</b>. Weighted values are reduced to their digital root</p>\n     *\n     * @param charValue The numeric value of the character.\n     * @param leftPos  The position of the character in the code, counting from left to right\n     * @param rightPos The position of the character in the code, counting from right to left\n     * @return The weighted value of the character.\n     */\n    @Override\n    protected int weightedValue(final int charValue, final int leftPos, final int rightPos) {\n        final int weight = POSITION_WEIGHT[rightPos % 2]; // CHECKSTYLE IGNORE MagicNumber\n        final int weightedValue = charValue * weight;\n        return sumDigits(weightedValue);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final long serialVersionUID = -1239211208101323599L;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "serialVersionUID = -1239211208101323599L", "syntax_pass": true}, {"attribute_expression": "private static final int MAX_ALPHANUMERIC_VALUE = 35;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "MAX_ALPHANUMERIC_VALUE = 35", "syntax_pass": true}, {"attribute_expression": "public static final CheckDigit ISIN_CHECK_DIGIT = new ISINCheckDigit();", "docstring": " Singleton ISIN Check Digit instance", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "CheckDigit", "name": "ISIN_CHECK_DIGIT = new ISINCheckDigit()", "syntax_pass": true}, {"attribute_expression": "private static final int[] POSITION_WEIGHT = {2, 1};", "docstring": " Weighting given to digits depending on their right position", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int[]", "name": "POSITION_WEIGHT = {2, 1}", "syntax_pass": true}]}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/LuhnCheckDigit.java.LuhnCheckDigit", "name": "LuhnCheckDigit", "file_path": "src/main/java/org/apache/commons/validator/routines/checkdigit/LuhnCheckDigit.java", "superclasses": "ModulusCheckDigit", "methods": ["[]LuhnCheckDigit()", "[int]weightedValue(int,int,int)"], "method_uris": ["src/main/java/org/apache/commons/validator/routines/checkdigit/LuhnCheckDigit.java.LuhnCheckDigit.[]LuhnCheckDigit()", "src/main/java/org/apache/commons/validator/routines/checkdigit/LuhnCheckDigit.java.LuhnCheckDigit.[int]weightedValue(int,int,int)"], "overrides": null, "attributes": [], "class_docstring": "\nModulus 10 <b>Luhn</b> Check Digit calculation/validation.\n\nLuhn check digits are used, for example, by:\n<ul>\n   <li><a href=\"https://en.wikipedia.org/wiki/Credit_card\">Credit Card Numbers</a></li>\n   <li><a href=\"https://en.wikipedia.org/wiki/IMEI\">IMEI Numbers</a> - International\n       Mobile Equipment Identity Numbers</li>\n</ul>\nCheck digit calculation is based on <em>modulus 10</em> with digits in\nan <em>odd</em> position (from right to left) being weighted 1 and <em>even</em>\nposition digits being weighted 2 (weighted values greater than 9 have 9 subtracted).\n\n<p>\nSee <a href=\"https://en.wikipedia.org/wiki/Luhn_algorithm\">Wikipedia</a>\nfor more details.\n</p>\n\n@since 1.4\n", "original_string": "public final class LuhnCheckDigit extends ModulusCheckDigit {\n\n    private static final long serialVersionUID = -2976900113942875999L;\n\n    /** Singleton Luhn Check Digit instance */\n    public static final CheckDigit LUHN_CHECK_DIGIT = new LuhnCheckDigit();\n\n    /** Weighting given to digits depending on their right position */\n    private static final int[] POSITION_WEIGHT = {2, 1};\n\n    /**\n     * Constructs a modulus 10 Luhn Check Digit routine.\n     */\n    public LuhnCheckDigit() {\n    }\n\n    /**\n     * <p>Calculates the <em>weighted</em> value of a character in the\n     * code at a specified position.</p>\n     *\n     * <p>For Luhn (from right to left) <b>odd</b> digits are weighted\n     * with a factor of <b>one</b> and <b>even</b> digits with a factor\n     * of <b>two</b>. Weighted values &gt; 9, have 9 subtracted</p>\n     *\n     * @param charValue The numeric value of the character.\n     * @param leftPos The position of the character in the code, counting from left to right\n     * @param rightPos The position of the character in the code, counting from right to left\n     * @return The weighted value of the character.\n     */\n    @Override\n    protected int weightedValue(final int charValue, final int leftPos, final int rightPos) {\n        final int weight = POSITION_WEIGHT[rightPos % 2]; // CHECKSTYLE IGNORE MagicNumber\n        final int weightedValue = charValue * weight;\n        return weightedValue > 9 ? weightedValue - 9 : weightedValue; // CHECKSTYLE IGNORE MagicNumber\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final long serialVersionUID = -2976900113942875999L;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "serialVersionUID = -2976900113942875999L", "syntax_pass": true}, {"attribute_expression": "public static final CheckDigit LUHN_CHECK_DIGIT = new LuhnCheckDigit();", "docstring": " Singleton Luhn Check Digit instance", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "CheckDigit", "name": "LUHN_CHECK_DIGIT = new LuhnCheckDigit()", "syntax_pass": true}, {"attribute_expression": "private static final int[] POSITION_WEIGHT = {2, 1};", "docstring": " Weighting given to digits depending on their right position", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int[]", "name": "POSITION_WEIGHT = {2, 1}", "syntax_pass": true}]}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/CASNumberCheckDigit.java.CASNumberCheckDigit", "name": "CASNumberCheckDigit", "file_path": "src/main/java/org/apache/commons/validator/routines/checkdigit/CASNumberCheckDigit.java", "superclasses": "ModulusCheckDigit", "methods": ["[CheckDigit]getInstance()", "[]CASNumberCheckDigit()", "[String]calculate(String)", "[boolean]isValid(String)", "[int]weightedValue(int,int,int)"], "method_uris": ["src/main/java/org/apache/commons/validator/routines/checkdigit/CASNumberCheckDigit.java.CASNumberCheckDigit.[CheckDigit]getInstance()", "src/main/java/org/apache/commons/validator/routines/checkdigit/CASNumberCheckDigit.java.CASNumberCheckDigit.[]CASNumberCheckDigit()", "src/main/java/org/apache/commons/validator/routines/checkdigit/CASNumberCheckDigit.java.CASNumberCheckDigit.[String]calculate(String)", "src/main/java/org/apache/commons/validator/routines/checkdigit/CASNumberCheckDigit.java.CASNumberCheckDigit.[boolean]isValid(String)", "src/main/java/org/apache/commons/validator/routines/checkdigit/CASNumberCheckDigit.java.CASNumberCheckDigit.[int]weightedValue(int,int,int)"], "overrides": null, "attributes": [], "class_docstring": "\nModulus 10 <b>CAS Registry Number</b> (or <b>Chemical Abstracts Service</b> (CAS RN)) Check Digit\ncalculation/validation.\n\n<p>\nCAS Numbers are unique identification numbers used\nto identify chemical substance described in the open scientific literature.\n</p>\n\n<p>\nCheck digit calculation is based on <em>modulus 10</em> with digits being weighted\nbased on their position (from right to left).\n</p>\n\n<p>\nThe check digit is found by taking the last digit times 1, the preceding digit times 2,\nthe preceding digit times 3 etc., adding all these up and computing the sum modulo 10.\nFor example, the CAS number of water is {@code 7732-18-5}:\nthe checksum 5 is calculated as (8\u00d71 + 1\u00d72 + 2\u00d73 + 3\u00d74 + 7\u00d75 + 7\u00d76) = 105; 105 mod 10 = 5.\n</p>\n\n<p>\nFor further information see\n <a href=\"https://en.wikipedia.org/wiki/CAS_Registry_Number\">Wikipedia - CAS Registry Number</a>.\n</p>\n\n@since 1.9.0\n", "original_string": "public final class CASNumberCheckDigit extends ModulusCheckDigit {\n\n    private static final long serialVersionUID = -5387334603220786657L;\n\n    /** Singleton Check Digit instance */\n    private static final CASNumberCheckDigit INSTANCE = new CASNumberCheckDigit();\n\n    /**\n     * CAS number consists of 3 groups of numbers separated dashes (-).\n     * First group has 2 to 7 digits.\n     * Example: water is 7732-18-5\n     */\n    private static final String GROUP1 = \"(\\\\d{2,7})\";\n\n    private static final String DASH = \"(?:\\\\-)\";\n    static final String CAS_REGEX = \"^(?:\" + GROUP1 + DASH + \"(\\\\d{2})\" + DASH + \"(\\\\d))$\";\n    private static final int CAS_MIN_LEN = 4; // 9-99-9 LEN without SEP\n\n    /** maximum capacity of 1,000,000,000 == 9999999-99-9*/\n    private static final int CAS_MAX_LEN = 10;\n    static final CodeValidator REGEX_VALIDATOR = new CodeValidator(CAS_REGEX, CAS_MIN_LEN, CAS_MAX_LEN, null);\n    /** Weighting given to digits depending on their right position */\n    private static final int[] POSITION_WEIGHT = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };\n\n    /**\n     * Gets the singleton instance of this validator.\n     * @return A singleton instance of the CAS Number validator.\n     */\n    public static CheckDigit getInstance() {\n        return INSTANCE;\n    }\n\n    /**\n     * Constructs a modulus 10 Check Digit routine for CAS Numbers.\n     */\n    private CASNumberCheckDigit() {\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public String calculate(final String code) throws CheckDigitException {\n        if (GenericValidator.isBlankOrNull(code)) {\n            throw new CheckDigitException(\"Code is missing\");\n        }\n        final int modulusResult = INSTANCE.calculateModulus(code, false);\n        return toCheckDigit(modulusResult);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public boolean isValid(final String code) {\n        if (GenericValidator.isBlankOrNull(code)) {\n            return false;\n        }\n        final Object cde = REGEX_VALIDATOR.validate(code);\n        if (!(cde instanceof String)) {\n            return false;\n        }\n        try {\n            final int modulusResult = INSTANCE.calculateModulus((String) cde, true);\n            return modulusResult == Character.getNumericValue(code.charAt(code.length() - 1));\n        } catch (final CheckDigitException ex) {\n            return false;\n        }\n    }\n\n    /**\n     * Calculates the <em>weighted</em> value of a character in the code at a specified position.\n     * <p>\n     * CAS numbers are weighted in the following manner:\n     * </p>\n     * <pre>{@code\n     *    right position: 1  2  3  4  5  6  7  8  9 10\n     *            weight: 1  2  3  4  5  6  7  8  9  0\n     * }</pre>\n     *\n     * @param charValue The numeric value of the character.\n     * @param leftPos The position of the character in the code, counting from left to right\n     * @param rightPos The positionof the character in the code, counting from right to left\n     * @return The weighted value of the character.\n     */\n    @Override\n    protected int weightedValue(final int charValue, final int leftPos, final int rightPos) {\n        final int weight = POSITION_WEIGHT[(rightPos - 1) % MODULUS_10];\n        return charValue * weight;\n    }\n\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final long serialVersionUID = -5387334603220786657L;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "serialVersionUID = -5387334603220786657L", "syntax_pass": true}, {"attribute_expression": "private static final CASNumberCheckDigit INSTANCE = new CASNumberCheckDigit();", "docstring": " Singleton Check Digit instance", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "CASNumberCheckDigit", "name": "INSTANCE = new CASNumberCheckDigit()", "syntax_pass": true}, {"attribute_expression": "private static final String GROUP1 = \"(\\\\d{2,7})\";", "docstring": "\nCAS number consists of 3 groups of numbers separated dashes (-).\nFirst group has 2 to 7 digits.\nExample: water is 7732-18-5\n", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "GROUP1 = \"(\\\\d{2,7})\"", "syntax_pass": true}, {"attribute_expression": "private static final String DASH = \"(?:\\\\-)\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "DASH = \"(?:\\\\-)\"", "syntax_pass": true}, {"attribute_expression": "static final String CAS_REGEX = \"^(?:\" + GROUP1 + DASH + \"(\\\\d{2})\" + DASH + \"(\\\\d))$\";", "docstring": "", "modifiers": "static final", "marker_annotations": [], "non_marker_annotations": ["static", "final"], "comments": [], "type": "String", "name": "CAS_REGEX = \"^(?:\" + GROUP1 + DASH + \"(\\\\d{2})\" + DASH + \"(\\\\d))$\"", "syntax_pass": true}, {"attribute_expression": "private static final int CAS_MIN_LEN = 4;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "CAS_MIN_LEN = 4", "syntax_pass": true}, {"attribute_expression": "private static final int CAS_MAX_LEN = 10;", "docstring": " maximum capacity of 1,000,000,000 == 9999999-99-9", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "CAS_MAX_LEN = 10", "syntax_pass": true}, {"attribute_expression": "static final CodeValidator REGEX_VALIDATOR = new CodeValidator(CAS_REGEX, CAS_MIN_LEN, CAS_MAX_LEN, null);", "docstring": "", "modifiers": "static final", "marker_annotations": [], "non_marker_annotations": ["static", "final"], "comments": [], "type": "CodeValidator", "name": "REGEX_VALIDATOR = new CodeValidator(CAS_REGEX, CAS_MIN_LEN, CAS_MAX_LEN, null)", "syntax_pass": true}, {"attribute_expression": "private static final int[] POSITION_WEIGHT = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };", "docstring": " Weighting given to digits depending on their right position", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int[]", "name": "POSITION_WEIGHT = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }", "syntax_pass": true}]}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/ABANumberCheckDigit.java.ABANumberCheckDigit", "name": "ABANumberCheckDigit", "file_path": "src/main/java/org/apache/commons/validator/routines/checkdigit/ABANumberCheckDigit.java", "superclasses": "ModulusCheckDigit", "methods": ["[]ABANumberCheckDigit()", "[int]weightedValue(int,int,int)"], "method_uris": ["src/main/java/org/apache/commons/validator/routines/checkdigit/ABANumberCheckDigit.java.ABANumberCheckDigit.[]ABANumberCheckDigit()", "src/main/java/org/apache/commons/validator/routines/checkdigit/ABANumberCheckDigit.java.ABANumberCheckDigit.[int]weightedValue(int,int,int)"], "overrides": null, "attributes": [], "class_docstring": "\nModulus 10 <b>ABA Number</b> (or <b>Routing Transit Number</b> (RTN)) Check Digit\ncalculation/validation.\n\n<p>\nABA Numbers (or Routing Transit Numbers) are a nine digit numeric code used\nto identify American financial institutions for things such as checks or deposits\n(ABA stands for the American Bankers Association).\n</p>\n\nCheck digit calculation is based on <em>modulus 10</em> with digits being weighted\nbased on their position (from right to left) as follows:\n\n<ul>\n  <li>Digits 1, 4 and &amp; 7 are weighted 1</li>\n  <li>Digits 2, 5 and &amp; 8 are weighted 7</li>\n  <li>Digits 3, 6 and &amp; 9 are weighted 3</li>\n</ul>\n\n<p>\nFor further information see\n <a href=\"https://en.wikipedia.org/wiki/Routing_transit_number\">Wikipedia -\n Routing transit number</a>.\n</p>\n\n@since 1.4\n", "original_string": "public final class ABANumberCheckDigit extends ModulusCheckDigit {\n\n    private static final long serialVersionUID = -8255937433810380145L;\n\n    /** Singleton Routing Transit Number Check Digit instance */\n    public static final CheckDigit ABAN_CHECK_DIGIT = new ABANumberCheckDigit();\n\n    /** Weighting given to digits depending on their right position */\n    private static final int[] POSITION_WEIGHT = {3, 1, 7};\n\n    /**\n     * Constructs a modulus 10 Check Digit routine for ABA Numbers.\n     */\n    public ABANumberCheckDigit() {\n    }\n\n    /**\n     * Calculates the <em>weighted</em> value of a character in the\n     * code at a specified position.\n     * <p>\n     * ABA Routing numbers are weighted in the following manner:\n     * <pre>{@code\n     *     left position: 1  2  3  4  5  6  7  8  9\n     *            weight: 3  7  1  3  7  1  3  7  1\n     * }</pre>\n     *\n     * @param charValue The numeric value of the character.\n     * @param leftPos The position of the character in the code, counting from left to right\n     * @param rightPos The positionof the character in the code, counting from right to left\n     * @return The weighted value of the character.\n     */\n    @Override\n    protected int weightedValue(final int charValue, final int leftPos, final int rightPos) {\n        final int weight = POSITION_WEIGHT[rightPos % 3]; // CHECKSTYLE IGNORE MagicNumber\n        return charValue * weight;\n    }\n\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final long serialVersionUID = -8255937433810380145L;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "serialVersionUID = -8255937433810380145L", "syntax_pass": true}, {"attribute_expression": "public static final CheckDigit ABAN_CHECK_DIGIT = new ABANumberCheckDigit();", "docstring": " Singleton Routing Transit Number Check Digit instance", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "CheckDigit", "name": "ABAN_CHECK_DIGIT = new ABANumberCheckDigit()", "syntax_pass": true}, {"attribute_expression": "private static final int[] POSITION_WEIGHT = {3, 1, 7};", "docstring": " Weighting given to digits depending on their right position", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int[]", "name": "POSITION_WEIGHT = {3, 1, 7}", "syntax_pass": true}]}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/ISBN10CheckDigit.java.ISBN10CheckDigit", "name": "ISBN10CheckDigit", "file_path": "src/main/java/org/apache/commons/validator/routines/checkdigit/ISBN10CheckDigit.java", "superclasses": "ModulusCheckDigit", "methods": ["[]ISBN10CheckDigit()", "[String]toCheckDigit(int)", "[int]toInt(char,int,int)", "[int]weightedValue(int,int,int)"], "method_uris": ["src/main/java/org/apache/commons/validator/routines/checkdigit/ISBN10CheckDigit.java.ISBN10CheckDigit.[]ISBN10CheckDigit()", "src/main/java/org/apache/commons/validator/routines/checkdigit/ISBN10CheckDigit.java.ISBN10CheckDigit.[String]toCheckDigit(int)", "src/main/java/org/apache/commons/validator/routines/checkdigit/ISBN10CheckDigit.java.ISBN10CheckDigit.[int]toInt(char,int,int)", "src/main/java/org/apache/commons/validator/routines/checkdigit/ISBN10CheckDigit.java.ISBN10CheckDigit.[int]weightedValue(int,int,int)"], "overrides": null, "attributes": [], "class_docstring": "\nModulus 11 <b>ISBN-10</b> Check Digit calculation/validation.\n<p>\nISBN-10 Numbers are a numeric code except for the last (check) digit\nwhich can have a value of \"X\".\n<p>\nCheck digit calculation is based on <em>modulus 11</em> with digits being weighted\nbased by their position, from right to left  with the first digit being weighted\n1, the second 2 and so on. If the check digit is calculated as \"10\" it is converted\nto \"X\".\n<p>\n<b>N.B.</b> From 1st January 2007 the book industry will start to use a new 13 digit\nISBN number (rather than this 10 digit ISBN number) which uses the EAN-13 / UPC\n(see {@link EAN13CheckDigit}) standard.\n<p>\nFor further information see:\n<ul>\n  <li><a href=\"https://en.wikipedia.org/wiki/ISBN\">Wikipedia - International\n      Standard Book Number (ISBN)</a>.</li>\n  <li><a href=\"http://www.isbn.org/standards/home/isbn/transition.asp\">ISBN-13\n      Transition details</a>.</li>\n</ul>\n\n@since 1.4\n", "original_string": "public final class ISBN10CheckDigit extends ModulusCheckDigit {\n\n    private static final long serialVersionUID = 8000855044504864964L;\n\n    /** Singleton ISBN-10 Check Digit instance */\n    public static final CheckDigit ISBN10_CHECK_DIGIT = new ISBN10CheckDigit();\n\n    /**\n     * Constructs a modulus 11 Check Digit routine for ISBN-10.\n     */\n    public ISBN10CheckDigit() {\n        super(MODULUS_11);\n    }\n\n    /**\n     * <p>Convert an integer value to a character at a specified position.</p>\n     *\n     * <p>Value '10' for position 1 (check digit) converted to 'X'.</p>\n     *\n     * @param charValue The integer value of the character.\n     * @return The converted character.\n     * @throws CheckDigitException if an error occurs.\n     */\n    @Override\n    protected String toCheckDigit(final int charValue)\n            throws CheckDigitException {\n        if (charValue == 10) {  // CHECKSTYLE IGNORE MagicNumber\n            return \"X\";\n        }\n        return super.toCheckDigit(charValue);\n    }\n\n    /**\n     * <p>Convert a character at a specified position to an\n     * integer value.</p>\n     *\n     * <p>Character 'X' check digit converted to 10.</p>\n     *\n     * @param character The character to convert.\n     * @param leftPos The position of the character in the code, counting from left to right\n     * @param rightPos The position of the character in the code, counting from right to left\n     * @return The integer value of the character.\n     * @throws CheckDigitException if an error occurs.\n     */\n    @Override\n    protected int toInt(final char character, final int leftPos, final int rightPos)\n            throws CheckDigitException {\n        if (rightPos == 1 && character == 'X') {\n            return 10;  // CHECKSTYLE IGNORE MagicNumber\n        }\n        return super.toInt(character, leftPos, rightPos);\n    }\n\n    /**\n     * Calculates the <em>weighted</em> value of a character in the\n     * code at a specified position.\n     *\n     * <p>For ISBN-10 (from right to left) digits are weighted\n     * by their position.</p>\n     *\n     * @param charValue The numeric value of the character.\n     * @param leftPos The position of the character in the code, counting from left to right\n     * @param rightPos The positionof the character in the code, counting from right to left\n     * @return The weighted value of the character.\n     */\n    @Override\n    protected int weightedValue(final int charValue, final int leftPos, final int rightPos) {\n        return charValue * rightPos;\n    }\n\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final long serialVersionUID = 8000855044504864964L;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "serialVersionUID = 8000855044504864964L", "syntax_pass": true}, {"attribute_expression": "public static final CheckDigit ISBN10_CHECK_DIGIT = new ISBN10CheckDigit();", "docstring": " Singleton ISBN-10 Check Digit instance", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "CheckDigit", "name": "ISBN10_CHECK_DIGIT = new ISBN10CheckDigit()", "syntax_pass": true}]}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/CheckDigitException.java.CheckDigitException", "name": "CheckDigitException", "file_path": "src/main/java/org/apache/commons/validator/routines/checkdigit/CheckDigitException.java", "superclasses": "Exception", "methods": ["[]CheckDigitException()", "[]CheckDigitException(String)", "[]CheckDigitException(String,Throwable)"], "method_uris": ["src/main/java/org/apache/commons/validator/routines/checkdigit/CheckDigitException.java.CheckDigitException.[]CheckDigitException()", "src/main/java/org/apache/commons/validator/routines/checkdigit/CheckDigitException.java.CheckDigitException.[]CheckDigitException(String)", "src/main/java/org/apache/commons/validator/routines/checkdigit/CheckDigitException.java.CheckDigitException.[]CheckDigitException(String,Throwable)"], "overrides": null, "attributes": [], "class_docstring": "\nCheck Digit calculation/validation error.\n\n@since 1.4\n", "original_string": "public class CheckDigitException extends Exception {\n\n    private static final long serialVersionUID = -3519894732624685477L;\n\n    /**\n     * Constructs an Exception with no message.\n     */\n    public CheckDigitException() {\n    }\n\n    /**\n     * Constructs an Exception with a message.\n     *\n     * @param msg The error message.\n     */\n    public CheckDigitException(final String msg) {\n        super(msg);\n    }\n\n    /**\n     * Constructs an Exception with a message and\n     * the underlying cause.\n     *\n     * @param msg The error message.\n     * @param cause The underlying cause of the error\n     */\n    public CheckDigitException(final String msg, final Throwable cause) {\n        super(msg, cause);\n    }\n\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final long serialVersionUID = -3519894732624685477L;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "serialVersionUID = -3519894732624685477L", "syntax_pass": true}]}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/IBANCheckDigit.java.IBANCheckDigit", "name": "IBANCheckDigit", "file_path": "src/main/java/org/apache/commons/validator/routines/checkdigit/IBANCheckDigit.java", "superclasses": "AbstractCheckDigit", "methods": ["[]IBANCheckDigit()", "[String]calculate(String)", "[int]calculateModulus(String)", "[boolean]isValid(String)"], "method_uris": ["src/main/java/org/apache/commons/validator/routines/checkdigit/IBANCheckDigit.java.IBANCheckDigit.[]IBANCheckDigit()", "src/main/java/org/apache/commons/validator/routines/checkdigit/IBANCheckDigit.java.IBANCheckDigit.[String]calculate(String)", "src/main/java/org/apache/commons/validator/routines/checkdigit/IBANCheckDigit.java.IBANCheckDigit.[int]calculateModulus(String)", "src/main/java/org/apache/commons/validator/routines/checkdigit/IBANCheckDigit.java.IBANCheckDigit.[boolean]isValid(String)"], "overrides": null, "attributes": [], "class_docstring": "\n<b>IBAN</b> (International Bank Account Number) Check Digit calculation/validation.\n<p>\nThis routine is based on the ISO 7064 Mod 97,10 check digit calculation routine.\n<p>\nThe two check digit characters in a IBAN number are the third and fourth characters\nin the code. For <em>check digit</em> calculation/validation the first four characters are moved\nto the end of the code.\n So {@code CCDDnnnnnnn} becomes {@code nnnnnnnCCDD} (where\n {@code CC} is the country code and {@code DD} is the check digit). For\n check digit calculation the check digit value should be set to zero (i.e.\n {@code CC00nnnnnnn} in this example.\n<p>\nNote: the class does not check the format of the IBAN number, only the check digits.\n<p>\nFor further information see\n <a href=\"https://en.wikipedia.org/wiki/International_Bank_Account_Number\">Wikipedia -\n IBAN number</a>.\n\n@since 1.4\n", "original_string": "public final class IBANCheckDigit extends AbstractCheckDigit implements Serializable {\n\n    private static final int MIN_CODE_LEN = 5;\n\n    private static final long serialVersionUID = -3600191725934382801L;\n\n    private static final int MAX_ALPHANUMERIC_VALUE = 35; // Character.getNumericValue('Z')\n\n    /** Singleton IBAN Number Check Digit instance */\n    public static final CheckDigit IBAN_CHECK_DIGIT = new IBANCheckDigit();\n\n    private static final long MAX = 999999999;\n\n    private static final long MODULUS = 97;\n\n    /**\n     * Constructs Check Digit routine for IBAN Numbers.\n     */\n    public IBANCheckDigit() {\n    }\n\n    /**\n     * Calculate the <em>Check Digit</em> for an IBAN code.\n     * <p>\n     * <b>Note:</b> The check digit is the third and fourth\n     * characters and is set to the value \"{@code 00}\".\n     *\n     * @param code The code to calculate the Check Digit for\n     * @return The calculated Check Digit as 2 numeric decimal characters, e.g. \"42\"\n     * @throws CheckDigitException if an error occurs calculating\n     * the check digit for the specified code\n     */\n    @Override\n    public String calculate(String code) throws CheckDigitException {\n        if (code == null || code.length() < MIN_CODE_LEN) {\n            throw new CheckDigitException(\"Invalid Code length=\" + (code == null ? 0 : code.length()));\n        }\n        code = code.substring(0, 2) + \"00\" + code.substring(4); // CHECKSTYLE IGNORE MagicNumber\n        final int modulusResult = calculateModulus(code);\n        final int charValue = 98 - modulusResult; // CHECKSTYLE IGNORE MagicNumber\n        final String checkDigit = Integer.toString(charValue);\n        return charValue > 9 ? checkDigit : \"0\" + checkDigit; // CHECKSTYLE IGNORE MagicNumber\n    }\n\n    /**\n     * Calculate the modulus for a code.\n     *\n     * @param code The code to calculate the modulus for.\n     * @return The modulus value\n     * @throws CheckDigitException if an error occurs calculating the modulus\n     * for the specified code\n     */\n    private int calculateModulus(final String code) throws CheckDigitException {\n        final String reformattedCode = code.substring(4) + code.substring(0, 4); // CHECKSTYLE IGNORE MagicNumber\n        long total = 0;\n        for (int i = 0; i < reformattedCode.length(); i++) {\n            final int charValue = Character.getNumericValue(reformattedCode.charAt(i));\n            if (charValue < 0 || charValue > MAX_ALPHANUMERIC_VALUE) {\n                throw new CheckDigitException(\"Invalid Character[\" + i + \"] = '\" + charValue + \"'\");\n            }\n            total = (charValue > 9 ? total * 100 : total * 10) + charValue; // CHECKSTYLE IGNORE MagicNumber\n            if (total > MAX) {\n                total %= MODULUS;\n            }\n        }\n        return (int) (total % MODULUS);\n    }\n\n    /**\n     * Validate the check digit of an IBAN code.\n     *\n     * @param code The code to validate\n     * @return {@code true} if the check digit is valid, otherwise\n     * {@code false}\n     */\n    @Override\n    public boolean isValid(final String code) {\n        if (code == null || code.length() < MIN_CODE_LEN) {\n            return false;\n        }\n        final String check = code.substring(2, 4); // CHECKSTYLE IGNORE MagicNumber\n        if (\"00\".equals(check) || \"01\".equals(check) || \"99\".equals(check)) {\n            return false;\n        }\n        try {\n            return calculateModulus(code) == 1;\n        } catch (final CheckDigitException ex) {\n            return false;\n        }\n    }\n\n}", "super_interfaces": ["Serializable"], "fields": [{"attribute_expression": "private static final int MIN_CODE_LEN = 5;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "MIN_CODE_LEN = 5", "syntax_pass": true}, {"attribute_expression": "private static final long serialVersionUID = -3600191725934382801L;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "serialVersionUID = -3600191725934382801L", "syntax_pass": true}, {"attribute_expression": "private static final int MAX_ALPHANUMERIC_VALUE = 35;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "MAX_ALPHANUMERIC_VALUE = 35", "syntax_pass": true}, {"attribute_expression": "public static final CheckDigit IBAN_CHECK_DIGIT = new IBANCheckDigit();", "docstring": " Singleton IBAN Number Check Digit instance", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "CheckDigit", "name": "IBAN_CHECK_DIGIT = new IBANCheckDigit()", "syntax_pass": true}, {"attribute_expression": "private static final long MAX = 999999999;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "MAX = 999999999", "syntax_pass": true}, {"attribute_expression": "private static final long MODULUS = 97;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "MODULUS = 97", "syntax_pass": true}]}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/ModulusTenCheckDigit.java.ModulusTenCheckDigit", "name": "ModulusTenCheckDigit", "file_path": "src/main/java/org/apache/commons/validator/routines/checkdigit/ModulusTenCheckDigit.java", "superclasses": "ModulusCheckDigit", "methods": ["[]ModulusTenCheckDigit(int[])", "[]ModulusTenCheckDigit(int[],boolean)", "[]ModulusTenCheckDigit(int[],boolean,boolean)", "[boolean]isValid(String)", "[int]toInt(char,int,int)", "[String]toString()", "[int]weightedValue(int,int,int)"], "method_uris": ["src/main/java/org/apache/commons/validator/routines/checkdigit/ModulusTenCheckDigit.java.ModulusTenCheckDigit.[]ModulusTenCheckDigit(int[])", "src/main/java/org/apache/commons/validator/routines/checkdigit/ModulusTenCheckDigit.java.ModulusTenCheckDigit.[]ModulusTenCheckDigit(int[],boolean)", "src/main/java/org/apache/commons/validator/routines/checkdigit/ModulusTenCheckDigit.java.ModulusTenCheckDigit.[]ModulusTenCheckDigit(int[],boolean,boolean)", "src/main/java/org/apache/commons/validator/routines/checkdigit/ModulusTenCheckDigit.java.ModulusTenCheckDigit.[boolean]isValid(String)", "src/main/java/org/apache/commons/validator/routines/checkdigit/ModulusTenCheckDigit.java.ModulusTenCheckDigit.[int]toInt(char,int,int)", "src/main/java/org/apache/commons/validator/routines/checkdigit/ModulusTenCheckDigit.java.ModulusTenCheckDigit.[String]toString()", "src/main/java/org/apache/commons/validator/routines/checkdigit/ModulusTenCheckDigit.java.ModulusTenCheckDigit.[int]weightedValue(int,int,int)"], "overrides": null, "attributes": [], "class_docstring": "\nGeneral Modulus 10 Check Digit calculation/validation.\n\n<h2>How it Works</h2>\n<p>\nThis implementation calculates/validates the check digit in the following\nway:\n<ul>\n<li>Converting each character to an integer value using\n{@code Character.getNumericValue(char)} - negative integer values from\nthat method are invalid.</li>\n<li>Calculating a <em>weighted value</em> by multiplying the character's\ninteger value by a <em>weighting factor</em>. The <em>weighting factor</em> is\nselected from the configured {@code postitionWeight} array based on its\nposition. The {@code postitionWeight} values are used either\nleft-to-right (when {@code useRightPos=false}) or right-to-left (when\n{@code useRightPos=true}).</li>\n<li>If {@code sumWeightedDigits=true}, the <em>weighted value</em> is\nre-calculated by summing its digits.</li>\n<li>The <em>weighted values</em> of each character are totalled.</li>\n<li>The total modulo 10 will be zero for a code with a valid Check Digit.</li>\n</ul>\n<h2>Limitations</h2>\n<p>\nThis implementation has the following limitations:\n<ul>\n<li>It assumes the last character in the code is the Check Digit and\nvalidates that it is a numeric character.</li>\n<li>The only limitation on valid characters are those that\n{@code Character.getNumericValue(char)} returns a positive value. If,\nfor example, the code should only contain numbers, this implementation does\nnot check that.</li>\n<li>There are no checks on code length.</li>\n</ul>\n<p>\n<b>Note:</b> This implementation can be combined with the\n{@link CodeValidator} in order to ensure the length and characters are valid.\n\n<h2>Example Usage</h2>\n<p>\nThis implementation was added after a number of Modulus 10 routines and these\nare shown re-implemented using this routine below:\n\n<p>\n<b>ABA Number</b> Check Digit Routine (equivalent of\n{@link ABANumberCheckDigit}). Weighting factors are {@code [1, 7, 3]}\napplied from right to left.\n\n<pre>\nCheckDigit routine = new ModulusTenCheckDigit(new int[] { 1, 7, 3 }, true);\n</pre>\n\n<p>\n<b>CUSIP</b> Check Digit Routine (equivalent of {@link CUSIPCheckDigit}).\nWeighting factors are {@code [1, 2]} applied from right to left and the\ndigits of the <em>weighted value</em> are summed.\n\n<pre>\nCheckDigit routine = new ModulusTenCheckDigit(new int[] { 1, 2 }, true, true);\n</pre>\n\n<p>\n<b>EAN-13 / UPC</b> Check Digit Routine (equivalent of\n{@link EAN13CheckDigit}). Weighting factors are {@code [1, 3]} applied\nfrom right to left.\n\n<pre>\nCheckDigit routine = new ModulusTenCheckDigit(new int[] { 1, 3 }, true);\n</pre>\n\n<p>\n<b>Luhn</b> Check Digit Routine (equivalent of {@link LuhnCheckDigit}).\nWeighting factors are {@code [1, 2]} applied from right to left and the\ndigits of the <em>weighted value</em> are summed.\n\n<pre>\nCheckDigit routine = new ModulusTenCheckDigit(new int[] { 1, 2 }, true, true);\n</pre>\n\n<p>\n<b>SEDOL</b> Check Digit Routine (equivalent of {@link SedolCheckDigit}).\nWeighting factors are {@code [1, 3, 1, 7, 3, 9, 1]} applied from left to\nright.\n\n<pre>\nCheckDigit routine = new ModulusTenCheckDigit(new int[] { 1, 3, 1, 7, 3, 9, 1 });\n</pre>\n\n@since 1.6\n", "original_string": "public final class ModulusTenCheckDigit extends ModulusCheckDigit {\n\n    private static final long serialVersionUID = -3752929983453368497L;\n\n    /**\n     * The weighted values to apply based on the character position\n     */\n    private final int[] postitionWeight;\n\n    /**\n     * {@code true} if use positionWeights from right to left\n     */\n    private final boolean useRightPos;\n\n    /**\n     * {@code true} if sum the digits of the weighted value\n     */\n    private final boolean sumWeightedDigits;\n\n    /**\n     * Constructs a modulus 10 Check Digit routine with the specified weighting\n     * from left to right.\n     *\n     * @param postitionWeight the weighted values to apply based on the\n     *            character position\n     */\n    public ModulusTenCheckDigit(final int[] postitionWeight) {\n        this(postitionWeight, false, false);\n    }\n\n    /**\n     * Constructs a modulus 10 Check Digit routine with the specified weighting,\n     * indicating whether its from the left or right.\n     *\n     * @param postitionWeight the weighted values to apply based on the\n     *            character position\n     * @param useRightPos {@code true} if use positionWeights from right to\n     *            left\n     */\n    public ModulusTenCheckDigit(final int[] postitionWeight, final boolean useRightPos) {\n        this(postitionWeight, useRightPos, false);\n    }\n\n    /**\n     * Constructs a modulus 10 Check Digit routine with the specified weighting,\n     * indicating whether its from the left or right and whether the weighted\n     * digits should be summed.\n     *\n     * @param postitionWeight the weighted values to apply based on the\n     *            character position\n     * @param useRightPos {@code true} if use positionWeights from right to\n     *            left\n     * @param sumWeightedDigits {@code true} if sum the digits of the\n     *            weighted value\n     */\n    public ModulusTenCheckDigit(final int[] postitionWeight, final boolean useRightPos, final boolean sumWeightedDigits) {\n        this.postitionWeight = Arrays.copyOf(postitionWeight, postitionWeight.length);\n        this.useRightPos = useRightPos;\n        this.sumWeightedDigits = sumWeightedDigits;\n    }\n\n    /**\n     * Validate a modulus check digit for a code.\n     * <p>\n     * Note: assumes last digit is the check digit\n     *\n     * @param code The code to validate\n     * @return {@code true} if the check digit is valid, otherwise\n     *         {@code false}\n     */\n    @Override\n    public boolean isValid(final String code) {\n        if (GenericValidator.isBlankOrNull(code)) {\n            return false;\n        }\n        if (!Character.isDigit(code.charAt(code.length() - 1))) {\n            return false;\n        }\n        return super.isValid(code);\n    }\n\n    /**\n     * Convert a character at a specified position to an integer value.\n     * <p>\n     * <b>Note:</b> this implementation only handlers values that\n     * Character.getNumericValue(char) returns a non-negative number.\n     *\n     * @param character The character to convert\n     * @param leftPos The position of the character in the code, counting from\n     *            left to right (for identifying the position in the string)\n     * @param rightPos The position of the character in the code, counting from\n     *            right to left (not used here)\n     * @return The integer value of the character\n     * @throws CheckDigitException if Character.getNumericValue(char) returns a\n     *             negative number\n     */\n    @Override\n    protected int toInt(final char character, final int leftPos, final int rightPos) throws CheckDigitException {\n        final int num = Character.getNumericValue(character);\n        if (num < 0) {\n            throw new CheckDigitException(\"Invalid Character[\" + leftPos + \"] = '\" + character + \"'\");\n        }\n        return num;\n    }\n\n    /**\n     * Return a string representation of this implementation.\n     *\n     * @return a string representation\n     */\n    @Override\n    public String toString() {\n        return getClass().getSimpleName() + \"[postitionWeight=\" + Arrays.toString(postitionWeight) + \", useRightPos=\"\n                + useRightPos + \", sumWeightedDigits=\" + sumWeightedDigits + \"]\";\n    }\n\n    /**\n     * Calculates the <em>weighted</em> value of a character in the code at a\n     * specified position.\n     *\n     * @param charValue The numeric value of the character.\n     * @param leftPos The position of the character in the code, counting from\n     *            left to right\n     * @param rightPos The position of the character in the code, counting from\n     *            right to left\n     * @return The weighted value of the character.\n     */\n    @Override\n    protected int weightedValue(final int charValue, final int leftPos, final int rightPos) {\n        final int pos = useRightPos ? rightPos : leftPos;\n        final int weight = postitionWeight[(pos - 1) % postitionWeight.length];\n        int weightedValue = charValue * weight;\n        if (sumWeightedDigits) {\n            weightedValue = sumDigits(weightedValue);\n        }\n        return weightedValue;\n    }\n\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final long serialVersionUID = -3752929983453368497L;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "serialVersionUID = -3752929983453368497L", "syntax_pass": true}, {"attribute_expression": "private final int[] postitionWeight;", "docstring": "\nThe weighted values to apply based on the character position\n", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int[]", "name": "postitionWeight", "syntax_pass": true}, {"attribute_expression": "private final boolean useRightPos;", "docstring": "\n{@code true} if use positionWeights from right to left\n", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "boolean", "name": "useRightPos", "syntax_pass": true}, {"attribute_expression": "private final boolean sumWeightedDigits;", "docstring": "\n{@code true} if sum the digits of the weighted value\n", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "boolean", "name": "sumWeightedDigits", "syntax_pass": true}]}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/ISSNCheckDigit.java.ISSNCheckDigit", "name": "ISSNCheckDigit", "file_path": "src/main/java/org/apache/commons/validator/routines/checkdigit/ISSNCheckDigit.java", "superclasses": "ModulusCheckDigit", "methods": ["[]ISSNCheckDigit()", "[String]toCheckDigit(int)", "[int]toInt(char,int,int)", "[int]weightedValue(int,int,int)"], "method_uris": ["src/main/java/org/apache/commons/validator/routines/checkdigit/ISSNCheckDigit.java.ISSNCheckDigit.[]ISSNCheckDigit()", "src/main/java/org/apache/commons/validator/routines/checkdigit/ISSNCheckDigit.java.ISSNCheckDigit.[String]toCheckDigit(int)", "src/main/java/org/apache/commons/validator/routines/checkdigit/ISSNCheckDigit.java.ISSNCheckDigit.[int]toInt(char,int,int)", "src/main/java/org/apache/commons/validator/routines/checkdigit/ISSNCheckDigit.java.ISSNCheckDigit.[int]weightedValue(int,int,int)"], "overrides": null, "attributes": [], "class_docstring": "\nInternational Standard Serial Number (ISSN)\nis an eight-digit serial number used to\nuniquely identify a serial publication.\n<pre>\nThe format is:\n\nISSN dddd-dddC\nwhere:\nd = decimal digit (0-9)\nC = checksum (0-9 or X)\n\nThe checksum is formed by adding the first 7 digits multiplied by\nthe position in the entire number (counting from the right).\nFor example, abcd-efg would be 8a + 7b + 6c + 5d + 4e +3f +2g.\nThe check digit is modulus 11, where the value 10 is represented by 'X'\nFor example:\nISSN 0317-8471\nISSN 1050-124X\n</pre>\n<p>\n<b>Note:</b> This class expects the input to be numeric only,\nwith all formatting removed.\nFor example:\n<pre>\n03178471\n1050124X\n</pre>\n@since 1.5.0\n", "original_string": "public final class ISSNCheckDigit extends ModulusCheckDigit {\n\n    private static final long serialVersionUID = 1L;\n\n    /** Singleton ISSN Check Digit instance */\n    public static final CheckDigit ISSN_CHECK_DIGIT = new ISSNCheckDigit();\n\n    /**\n     * Creates the instance using a checkdigit modulus of 11.\n     */\n    public ISSNCheckDigit() {\n        super(MODULUS_11);\n    }\n\n    @Override\n    protected String toCheckDigit(final int charValue) throws CheckDigitException {\n        if (charValue == 10) { // CHECKSTYLE IGNORE MagicNumber\n            return \"X\";\n        }\n        return super.toCheckDigit(charValue);\n    }\n\n    @Override\n    protected int toInt(final char character, final int leftPos, final int rightPos)\n            throws CheckDigitException {\n        if (rightPos == 1 && character == 'X') {\n            return 10; // CHECKSTYLE IGNORE MagicNumber\n        }\n        return super.toInt(character, leftPos, rightPos);\n    }\n\n    @Override\n    protected int weightedValue(final int charValue, final int leftPos, final int rightPos) throws CheckDigitException {\n        return charValue * (9 - leftPos); // CHECKSTYLE IGNORE MagicNumber\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final long serialVersionUID = 1L;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "serialVersionUID = 1L", "syntax_pass": true}, {"attribute_expression": "public static final CheckDigit ISSN_CHECK_DIGIT = new ISSNCheckDigit();", "docstring": " Singleton ISSN Check Digit instance", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "CheckDigit", "name": "ISSN_CHECK_DIGIT = new ISSNCheckDigit()", "syntax_pass": true}]}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/VerhoeffCheckDigit.java.VerhoeffCheckDigit", "name": "VerhoeffCheckDigit", "file_path": "src/main/java/org/apache/commons/validator/routines/checkdigit/VerhoeffCheckDigit.java", "superclasses": "AbstractCheckDigit", "methods": ["[String]calculate(String)", "[int]calculateChecksum(String,boolean)", "[boolean]isValid(String)"], "method_uris": ["src/main/java/org/apache/commons/validator/routines/checkdigit/VerhoeffCheckDigit.java.VerhoeffCheckDigit.[String]calculate(String)", "src/main/java/org/apache/commons/validator/routines/checkdigit/VerhoeffCheckDigit.java.VerhoeffCheckDigit.[int]calculateChecksum(String,boolean)", "src/main/java/org/apache/commons/validator/routines/checkdigit/VerhoeffCheckDigit.java.VerhoeffCheckDigit.[boolean]isValid(String)"], "overrides": null, "attributes": [], "class_docstring": "\n<b>Verhoeff</b> (Dihedral) Check Digit calculation/validation.\n<p>\nCheck digit calculation for numeric codes using a\n<a href=\"https://en.wikipedia.org/wiki/Dihedral_group\">Dihedral Group</a>\nof order 10.\n<p>\nSee <a href=\"https://en.wikipedia.org/wiki/Verhoeff_algorithm\">Wikipedia\n - Verhoeff algorithm</a> for more details.\n\n@since 1.4\n", "original_string": "public final class VerhoeffCheckDigit extends AbstractCheckDigit implements Serializable {\n\n    private static final long serialVersionUID = 4138993995483695178L;\n\n    /** Singleton Verhoeff Check Digit instance */\n    public static final CheckDigit VERHOEFF_CHECK_DIGIT = new VerhoeffCheckDigit();\n\n    /** D - multiplication table */\n    private static final int[][] D_TABLE = {\n        {0, 1, 2, 3, 4, 5, 6, 7, 8, 9},\n        {1, 2, 3, 4, 0, 6, 7, 8, 9, 5},\n        {2, 3, 4, 0, 1, 7, 8, 9, 5, 6},\n        {3, 4, 0, 1, 2, 8, 9, 5, 6, 7},\n        {4, 0, 1, 2, 3, 9, 5, 6, 7, 8},\n        {5, 9, 8, 7, 6, 0, 4, 3, 2, 1},\n        {6, 5, 9, 8, 7, 1, 0, 4, 3, 2},\n        {7, 6, 5, 9, 8, 2, 1, 0, 4, 3},\n        {8, 7, 6, 5, 9, 3, 2, 1, 0, 4},\n        {9, 8, 7, 6, 5, 4, 3, 2, 1, 0}};\n\n    /** P - permutation table */\n    private static final int[][] P_TABLE = {\n        {0, 1, 2, 3, 4, 5, 6, 7, 8, 9},\n        {1, 5, 7, 6, 2, 8, 3, 0, 9, 4},\n        {5, 8, 0, 3, 7, 9, 6, 1, 4, 2},\n        {8, 9, 1, 6, 0, 4, 3, 5, 2, 7},\n        {9, 4, 5, 3, 1, 2, 6, 8, 7, 0},\n        {4, 2, 8, 6, 5, 7, 3, 9, 0, 1},\n        {2, 7, 9, 3, 8, 0, 6, 4, 1, 5},\n        {7, 0, 4, 6, 9, 1, 3, 2, 5, 8}};\n\n    /** Inverse table */\n    private static final int[] INV_TABLE = {0, 4, 3, 2, 1, 5, 6, 7, 8, 9};\n\n    /**\n     * Calculate a Verhoeff <em>Check Digit</em> for a code.\n     *\n     * @param code The code to calculate the Check Digit for\n     * @return The calculated Check Digit\n     * @throws CheckDigitException if an error occurs calculating\n     * the check digit for the specified code\n     */\n    @Override\n    public String calculate(final String code) throws CheckDigitException {\n        if (GenericValidator.isBlankOrNull(code)) {\n            throw new CheckDigitException(\"Code is missing\");\n        }\n        final int checksum = calculateChecksum(code, false);\n        return Integer.toString(INV_TABLE[checksum]);\n    }\n\n    /**\n     * Calculate the checksum.\n     *\n     * @param code The code to calculate the checksum for.\n     * @param includesCheckDigit Whether the code includes the Check Digit or not.\n     * @return The checksum value\n     * @throws CheckDigitException if the code contains an invalid character (i.e. not numeric)\n     */\n    private int calculateChecksum(final String code, final boolean includesCheckDigit) throws CheckDigitException {\n        int checksum = 0;\n        for (int i = 0; i < code.length(); i++) {\n            final int idx = code.length() - (i + 1);\n            final int num = Character.getNumericValue(code.charAt(idx));\n            if (num < 0 || num > 9) { // CHECKSTYLE IGNORE MagicNumber\n                throw new CheckDigitException(\"Invalid Character[\" +\n                        i + \"] = '\" + (int) code.charAt(idx) + \"'\");\n            }\n            final int pos = includesCheckDigit ? i : i + 1;\n            checksum = D_TABLE[checksum][P_TABLE[pos % 8][num]]; // CHECKSTYLE IGNORE MagicNumber\n        }\n        return checksum;\n    }\n\n    /**\n     * Validate the Verhoeff <em>Check Digit</em> for a code.\n     *\n     * @param code The code to validate\n     * @return {@code true} if the check digit is valid,\n     * otherwise {@code false}\n     */\n    @Override\n    public boolean isValid(final String code) {\n        if (GenericValidator.isBlankOrNull(code)) {\n            return false;\n        }\n        try {\n            return calculateChecksum(code, true) == 0;\n        } catch (final CheckDigitException e) {\n            return false;\n        }\n    }\n\n}", "super_interfaces": ["Serializable"], "fields": [{"attribute_expression": "private static final long serialVersionUID = 4138993995483695178L;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "serialVersionUID = 4138993995483695178L", "syntax_pass": true}, {"attribute_expression": "public static final CheckDigit VERHOEFF_CHECK_DIGIT = new VerhoeffCheckDigit();", "docstring": " Singleton Verhoeff Check Digit instance", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "CheckDigit", "name": "VERHOEFF_CHECK_DIGIT = new VerhoeffCheckDigit()", "syntax_pass": true}, {"attribute_expression": "private static final int[][] D_TABLE = {\n        {0, 1, 2, 3, 4, 5, 6, 7, 8, 9},\n        {1, 2, 3, 4, 0, 6, 7, 8, 9, 5},\n        {2, 3, 4, 0, 1, 7, 8, 9, 5, 6},\n        {3, 4, 0, 1, 2, 8, 9, 5, 6, 7},\n        {4, 0, 1, 2, 3, 9, 5, 6, 7, 8},\n        {5, 9, 8, 7, 6, 0, 4, 3, 2, 1},\n        {6, 5, 9, 8, 7, 1, 0, 4, 3, 2},\n        {7, 6, 5, 9, 8, 2, 1, 0, 4, 3},\n        {8, 7, 6, 5, 9, 3, 2, 1, 0, 4},\n        {9, 8, 7, 6, 5, 4, 3, 2, 1, 0}};", "docstring": " D - multiplication table", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int[][]", "name": "D_TABLE = {\n        {0, 1, 2, 3, 4, 5, 6, 7, 8, 9},\n        {1, 2, 3, 4, 0, 6, 7, 8, 9, 5},\n        {2, 3, 4, 0, 1, 7, 8, 9, 5, 6},\n        {3, 4, 0, 1, 2, 8, 9, 5, 6, 7},\n        {4, 0, 1, 2, 3, 9, 5, 6, 7, 8},\n        {5, 9, 8, 7, 6, 0, 4, 3, 2, 1},\n        {6, 5, 9, 8, 7, 1, 0, 4, 3, 2},\n        {7, 6, 5, 9, 8, 2, 1, 0, 4, 3},\n        {8, 7, 6, 5, 9, 3, 2, 1, 0, 4},\n        {9, 8, 7, 6, 5, 4, 3, 2, 1, 0}}", "syntax_pass": true}, {"attribute_expression": "private static final int[][] P_TABLE = {\n        {0, 1, 2, 3, 4, 5, 6, 7, 8, 9},\n        {1, 5, 7, 6, 2, 8, 3, 0, 9, 4},\n        {5, 8, 0, 3, 7, 9, 6, 1, 4, 2},\n        {8, 9, 1, 6, 0, 4, 3, 5, 2, 7},\n        {9, 4, 5, 3, 1, 2, 6, 8, 7, 0},\n        {4, 2, 8, 6, 5, 7, 3, 9, 0, 1},\n        {2, 7, 9, 3, 8, 0, 6, 4, 1, 5},\n        {7, 0, 4, 6, 9, 1, 3, 2, 5, 8}};", "docstring": " P - permutation table", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int[][]", "name": "P_TABLE = {\n        {0, 1, 2, 3, 4, 5, 6, 7, 8, 9},\n        {1, 5, 7, 6, 2, 8, 3, 0, 9, 4},\n        {5, 8, 0, 3, 7, 9, 6, 1, 4, 2},\n        {8, 9, 1, 6, 0, 4, 3, 5, 2, 7},\n        {9, 4, 5, 3, 1, 2, 6, 8, 7, 0},\n        {4, 2, 8, 6, 5, 7, 3, 9, 0, 1},\n        {2, 7, 9, 3, 8, 0, 6, 4, 1, 5},\n        {7, 0, 4, 6, 9, 1, 3, 2, 5, 8}}", "syntax_pass": true}, {"attribute_expression": "private static final int[] INV_TABLE = {0, 4, 3, 2, 1, 5, 6, 7, 8, 9};", "docstring": " Inverse table", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int[]", "name": "INV_TABLE = {0, 4, 3, 2, 1, 5, 6, 7, 8, 9}", "syntax_pass": true}]}, {"uris": "src/main/java/org/apache/commons/validator/util/Flags.java.Flags", "name": "Flags", "file_path": "src/main/java/org/apache/commons/validator/util/Flags.java", "superclasses": "", "methods": ["[]Flags()", "[]Flags(long)", "[void]clear()", "[Object]clone()", "[boolean]equals(Object)", "[long]getFlags()", "[int]hashCode()", "[boolean]isOff(long)", "[boolean]isOn(long)", "[String]toString()", "[void]turnOff(long)", "[void]turnOffAll()", "[void]turnOn(long)", "[void]turnOnAll()"], "method_uris": ["src/main/java/org/apache/commons/validator/util/Flags.java.Flags.[]Flags()", "src/main/java/org/apache/commons/validator/util/Flags.java.Flags.[]Flags(long)", "src/main/java/org/apache/commons/validator/util/Flags.java.Flags.[void]clear()", "src/main/java/org/apache/commons/validator/util/Flags.java.Flags.[Object]clone()", "src/main/java/org/apache/commons/validator/util/Flags.java.Flags.[boolean]equals(Object)", "src/main/java/org/apache/commons/validator/util/Flags.java.Flags.[long]getFlags()", "src/main/java/org/apache/commons/validator/util/Flags.java.Flags.[int]hashCode()", "src/main/java/org/apache/commons/validator/util/Flags.java.Flags.[boolean]isOff(long)", "src/main/java/org/apache/commons/validator/util/Flags.java.Flags.[boolean]isOn(long)", "src/main/java/org/apache/commons/validator/util/Flags.java.Flags.[String]toString()", "src/main/java/org/apache/commons/validator/util/Flags.java.Flags.[void]turnOff(long)", "src/main/java/org/apache/commons/validator/util/Flags.java.Flags.[void]turnOffAll()", "src/main/java/org/apache/commons/validator/util/Flags.java.Flags.[void]turnOn(long)", "src/main/java/org/apache/commons/validator/util/Flags.java.Flags.[void]turnOnAll()"], "overrides": null, "attributes": [], "class_docstring": "\nRepresents a collection of 64 boolean (on/off) flags.  Individual flags\nare represented by powers of 2.  For example,<br>\nFlag 1 = 1<br>\nFlag 2 = 2<br>\nFlag 3 = 4<br>\nFlag 4 = 8<br><br>\nor using shift operator to make numbering easier:<br>\nFlag 1 = 1 &lt;&lt; 0<br>\nFlag 2 = 1 &lt;&lt; 1<br>\nFlag 3 = 1 &lt;&lt; 2<br>\nFlag 4 = 1 &lt;&lt; 3<br>\n\n<p>\nThere cannot be a flag with a value of 3 because that represents Flag 1\nand Flag 2 both being on/true.\n</p>\n", "original_string": "public class Flags implements Serializable, Cloneable {\n\n    private static final long serialVersionUID = 8481587558770237995L;\n\n    /**\n     * Represents the current flag state.\n     */\n    private long flags;\n\n    /**\n     * Create a new Flags object.\n     */\n    public Flags() {\n    }\n\n    /**\n     * Initialize a new Flags object with the given flags.\n     *\n     * @param flags collection of boolean flags to represent.\n     */\n    public Flags(final long flags) {\n        this.flags = flags;\n    }\n\n    /**\n     * Turn off all flags.  This is a synonym for {@code turnOffAll()}.\n     * @since 1.1.1\n     */\n    public void clear() {\n        flags = 0;\n    }\n\n    /**\n     * Clone this Flags object.\n     *\n     * @return a copy of this object.\n     * @see Object#clone()\n     */\n    @Override\n    public Object clone() {\n        try {\n            return super.clone();\n        } catch (final CloneNotSupportedException e) {\n            throw new UnsupportedOperationException(\"Couldn't clone Flags object.\", e);\n        }\n    }\n\n    /**\n     * Tests if two Flags objects are in the same state.\n     * @param obj object being tested\n     * @see Object#equals(Object)\n     *\n     * @return whether the objects are equal.\n     */\n    @Override\n    public boolean equals(final Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (!(obj instanceof Flags)) {\n            return false;\n        }\n        final Flags other = (Flags) obj;\n        return flags == other.flags;\n    }\n\n    /**\n     * Returns the current flags.\n     *\n     * @return collection of boolean flags represented.\n     */\n    public long getFlags() {\n        return flags;\n    }\n\n    /**\n     * The hash code is based on the current state of the flags.\n     * @see Object#hashCode()\n     *\n     * @return the hash code for this object.\n     */\n    @Override\n    public int hashCode() {\n        return (int) flags;\n    }\n\n    /**\n     * Tests whether the given flag is off.  If the flag is not a power of 2\n     * (ie. 3) this tests whether the combination of flags is off.\n     *\n     * @param flag Flag value to check.\n     *\n     * @return whether the specified flag value is off.\n     */\n    public boolean isOff(final long flag) {\n        return (flags & flag) == 0;\n    }\n\n    /**\n     * Tests whether the given flag is on.  If the flag is not a power of 2\n     * (ie. 3) this tests whether the combination of flags is on.\n     *\n     * @param flag Flag value to check.\n     *\n     * @return whether the specified flag value is on.\n     */\n    public boolean isOn(final long flag) {\n        return (flags & flag) == flag;\n    }\n\n    /**\n     * Returns a 64 length String with the first flag on the right and the\n     * 64th flag on the left.  A 1 indicates the flag is on, a 0 means it's\n     * off.\n     *\n     * @return string representation of this object.\n     */\n    @Override\n    public String toString() {\n        final StringBuilder bin = new StringBuilder(Long.toBinaryString(flags));\n        for (int i = 64 - bin.length(); i > 0; i--) { // CHECKSTYLE IGNORE MagicNumber\n            bin.insert(0, \"0\");\n        }\n        return bin.toString();\n    }\n\n    /**\n     * Turns off the given flag.  If the flag is not a power of 2 (ie. 3) this\n     * turns off multiple flags.\n     *\n     * @param flag Flag value to turn off.\n     */\n    public void turnOff(final long flag) {\n        flags &= ~flag;\n    }\n\n    /**\n     * Turn off all flags.\n     */\n    public void turnOffAll() {\n        flags = 0;\n    }\n\n    /**\n     * Turns on the given flag.  If the flag is not a power of 2 (ie. 3) this\n     * turns on multiple flags.\n     *\n     * @param flag Flag value to turn on.\n     */\n    public void turnOn(final long flag) {\n        flags |= flag;\n    }\n\n    /**\n     * Turn on all 64 flags.\n     */\n    public void turnOnAll() {\n        flags = 0xFFFFFFFFFFFFFFFFL;\n    }\n\n}", "super_interfaces": ["Serializable", "Cloneable"], "fields": [{"attribute_expression": "private static final long serialVersionUID = 8481587558770237995L;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "serialVersionUID = 8481587558770237995L", "syntax_pass": true}, {"attribute_expression": "private long flags;", "docstring": "\nRepresents the current flag state.\n", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "long", "name": "flags", "syntax_pass": true}]}, {"uris": "src/main/java/org/apache/commons/validator/util/ValidatorUtils.java.ValidatorUtils", "name": "ValidatorUtils", "file_path": "src/main/java/org/apache/commons/validator/util/ValidatorUtils.java", "superclasses": "", "methods": ["[FastHashMap]copyFastHashMap(FastHashMap)", "[Map<String, Object>]copyMap(Map<String, Object>)", "[String]getValueAsString(Object,String)", "[String]replace(String,String,String)"], "method_uris": ["src/main/java/org/apache/commons/validator/util/ValidatorUtils.java.ValidatorUtils.[FastHashMap]copyFastHashMap(FastHashMap)", "src/main/java/org/apache/commons/validator/util/ValidatorUtils.java.ValidatorUtils.[Map<String, Object>]copyMap(Map<String, Object>)", "src/main/java/org/apache/commons/validator/util/ValidatorUtils.java.ValidatorUtils.[String]getValueAsString(Object,String)", "src/main/java/org/apache/commons/validator/util/ValidatorUtils.java.ValidatorUtils.[String]replace(String,String,String)"], "overrides": null, "attributes": [], "class_docstring": "\nBasic utility methods.\n<p>\nThe use of FastHashMap is deprecated and will be replaced in a future\nrelease.\n</p>\n", "original_string": "public class ValidatorUtils {\n\n    private static final Log LOG = LogFactory.getLog(ValidatorUtils.class);\n\n    /**\n     * Makes a deep copy of a {@code FastHashMap} if the values\n     * are {@code Msg}, {@code Arg},\n     * or {@code Var}.  Otherwise it is a shallow copy.\n     *\n     * @param fastHashMap {@code FastHashMap} to copy.\n     * @return FastHashMap A copy of the {@code FastHashMap} that was\n     * passed in.\n     * @deprecated This method is not part of Validator's public API.  Validator\n     * will use it internally until FastHashMap references are removed.  Use\n     * copyMap() instead.\n     */\n    @Deprecated\n    public static FastHashMap copyFastHashMap(final FastHashMap fastHashMap) {\n        final FastHashMap results = new FastHashMap();\n        @SuppressWarnings(\"unchecked\") // FastHashMap is not generic\n        final Iterator<Entry<String, ?>> iterator = fastHashMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            final Entry<String, ?> entry = iterator.next();\n            final String key = entry.getKey();\n            final Object value = entry.getValue();\n            if (value instanceof Msg) {\n                results.put(key, ((Msg) value).clone());\n            } else if (value instanceof Arg) {\n                results.put(key, ((Arg) value).clone());\n            } else if (value instanceof Var) {\n                results.put(key, ((Var) value).clone());\n            } else {\n                results.put(key, value);\n            }\n        }\n        results.setFast(true);\n        return results;\n    }\n\n    /**\n     * Makes a deep copy of a {@link Map} if the values are\n     * {@code Msg}, {@code Arg}, or {@code Var}.  Otherwise,\n     * it is a shallow copy.\n     *\n     * @param map The source Map to copy.\n     *\n     * @return A copy of the {@link Map} that was passed in.\n     */\n    public static Map<String, Object> copyMap(final Map<String, Object> map) {\n        final Map<String, Object> results = new HashMap<>(map.size());\n        map.forEach((key, value) -> {\n            if (value instanceof Msg) {\n                results.put(key, ((Msg) value).clone());\n            } else if (value instanceof Arg) {\n                results.put(key, ((Arg) value).clone());\n            } else if (value instanceof Var) {\n                results.put(key, ((Var) value).clone());\n            } else {\n                results.put(key, value);\n            }\n        });\n        return results;\n    }\n\n    /**\n     * Convenience method for getting a value from a bean property as a\n     * {@link String}.  If the property is a {@code String[]} or\n     * {@link Collection} and it is empty, an empty {@link String}\n     * \"\" is returned.  Otherwise, property.toString() is returned.  This method\n     * may return {@code null} if there was an error retrieving the\n     * property.\n     *\n     * @param bean The bean object.\n     * @param property The name of the property to access.\n     *\n     * @return The value of the property.\n     */\n    public static String getValueAsString(final Object bean, final String property) {\n        Object value = null;\n\n        try {\n            value = PropertyUtils.getProperty(bean, property);\n\n        } catch (final ReflectiveOperationException e) {\n            LOG.error(e.getMessage(), e);\n        }\n\n        if (value == null) {\n            return null;\n        }\n\n        if (value instanceof String[]) {\n            return ((String[]) value).length > 0 ? value.toString() : \"\";\n\n        }\n        if (value instanceof Collection) {\n            return ((Collection<?>) value).isEmpty() ? \"\" : value.toString();\n\n        }\n        return value.toString();\n\n    }\n\n    /**\n     * <p>Replace part of a {@link String} with another value.</p>\n     *\n     * @param value {@link String} to perform the replacement on.\n     * @param key The name of the constant.\n     * @param replaceValue The value of the constant.\n     *\n     * @return The modified value.\n     */\n    public static String replace(final String value, final String key, final String replaceValue) {\n        if (value == null || key == null || replaceValue == null) {\n            return value;\n        }\n        return value.replace(key, replaceValue);\n    }\n\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final Log LOG = LogFactory.getLog(ValidatorUtils.class);", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "Log", "name": "LOG = LogFactory.getLog(ValidatorUtils.class)", "syntax_pass": true}]}]