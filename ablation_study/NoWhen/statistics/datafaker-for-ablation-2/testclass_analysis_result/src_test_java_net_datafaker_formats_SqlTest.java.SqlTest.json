{"file_path": "src/test/java/net/datafaker/formats/SqlTest.java", "testclass_name": "SqlTest", "dependencies": ["package net.datafaker.formats;", "import net.datafaker.Faker;", "import net.datafaker.providers.base.BaseFaker;", "import net.datafaker.sequence.FakeSequence;", "import net.datafaker.transformations.Field;", "import net.datafaker.transformations.Schema;", "import net.datafaker.transformations.sql.SqlDialect;", "import net.datafaker.transformations.sql.SqlTransformer;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.Arguments;", "import org.junit.jupiter.params.provider.MethodSource;", "import java.util.List;", "import java.util.Map;", "import java.util.Random;", "import java.util.Set;", "import java.util.TreeMap;", "import java.util.function.Supplier;", "import java.util.stream.Collectors;", "import java.util.stream.Stream;", "import static net.datafaker.transformations.Field.compositeField;", "import static net.datafaker.transformations.Field.field;", "import static net.datafaker.transformations.Transformer.LINE_SEPARATOR;", "import static org.assertj.core.api.Assertions.assertThat;", "import static org.assertj.core.api.Assertions.assertThatThrownBy;", "import static org.junit.jupiter.params.provider.Arguments.of;"], "name": "SqlTest", "description": "Test suite for generating SQL statements using SqlTransformer with various configurations and dialects.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "generateFromFakeSequenceSeparated", "primary_tested": ["SqlTransformer.generate(FakeSequence,Schema)"], "external_dependencies": {"modules": ["BaseFaker", "Schema", "SqlTransformer", "FakeSequence"]}, "category": "unit", "description": "Tests the generation of SQL statements from a FakeSequence in separated mode."}, {"name": "generateFromFakeSequenceBatch", "primary_tested": ["SqlTransformer.generate(FakeSequence,Schema)"], "external_dependencies": {"modules": ["BaseFaker", "Schema", "SqlTransformer", "FakeSequence"]}, "category": "unit", "description": "Tests the generation of SQL statements from a FakeSequence in batch mode."}, {"name": "generateFromEmptySchema", "primary_tested": ["SqlTransformer.generate(FakeSequence,Schema)"], "external_dependencies": {"modules": ["BaseFaker", "Schema", "SqlTransformer", "FakeSequence"]}, "category": "unit", "description": "Tests the generation of SQL statements from an empty schema."}, {"name": "generateFromInfiniteFakeSequenceBatch", "primary_tested": ["SqlTransformer.generate(FakeSequence,Schema)"], "external_dependencies": {"modules": ["BaseFaker", "Schema", "SqlTransformer", "FakeSequence"]}, "category": "unit", "description": "Tests the generation of SQL statements from an infinite FakeSequence in batch mode, expecting an exception."}, {"name": "testGenerateFromSchemaWithLimitSeparatedStatements", "primary_tested": ["SqlTransformer.generate(Schema,int)"], "external_dependencies": {"modules": ["BaseFaker", "Schema", "SqlTransformer"]}, "category": "unit", "description": "Tests the generation of SQL statements from a schema with a limit in separated mode."}, {"name": "testGenerateFromSchemaWithLimitBatchModeStatements", "primary_tested": ["SqlTransformer.generate(Schema,int)"], "external_dependencies": {"modules": ["BaseFaker", "Schema", "SqlTransformer"]}, "category": "unit", "description": "Tests the generation of SQL statements from a schema with a limit in batch mode."}, {"name": "testForceQuotedWithSqlIdentifiers", "primary_tested": ["SqlTransformer.generate(Schema,int)"], "external_dependencies": {"modules": ["BaseFaker", "Schema", "SqlTransformer"]}, "category": "unit", "description": "Tests the generation of SQL statements with forced quoted identifiers."}, {"name": "simpleSqlTestForSqlTransformer", "primary_tested": ["SqlTransformer.generate(Schema,int)"], "external_dependencies": {"modules": ["Schema", "SqlTransformer"]}, "category": "unit", "description": "Tests the generation of simple SQL statements for SqlTransformer with various schemas."}, {"name": "simpleSqlTestForSqlTransformerOracle", "primary_tested": ["SqlTransformer.generate(Schema,int)"], "external_dependencies": {"modules": ["Schema", "SqlTransformer"]}, "category": "unit", "description": "Tests the generation of simple SQL statements for SqlTransformer with Oracle dialect."}, {"name": "simpleSqlTestForSqlTransformerPostgres", "primary_tested": ["SqlTransformer.generate(Schema,int)"], "external_dependencies": {"modules": ["Schema", "SqlTransformer"]}, "category": "unit", "description": "Tests the generation of simple SQL statements for SqlTransformer with Postgres dialect."}, {"name": "simpleSqlTestForSqlTransformerMSSQL", "primary_tested": ["SqlTransformer.generate(Schema,int)"], "external_dependencies": {"modules": ["Schema", "SqlTransformer"]}, "category": "unit", "description": "Tests the generation of simple SQL statements for SqlTransformer with MSSQL dialect."}, {"name": "simpleSqlTestForSqlTransformerMySQL", "primary_tested": ["SqlTransformer.generate(Schema,int)"], "external_dependencies": {"modules": ["Schema", "SqlTransformer"]}, "category": "unit", "description": "Tests the generation of simple SQL statements for SqlTransformer with MySQL dialect."}, {"name": "batchSqlTestForSqlTransformerPostgres", "primary_tested": ["SqlTransformer.generate(Schema,int)"], "external_dependencies": {"modules": ["Faker", "Schema", "SqlTransformer"]}, "category": "unit", "description": "Tests the generation of batch SQL statements for SqlTransformer with Postgres dialect."}, {"name": "sqlKeywordCaseCheck", "primary_tested": ["SqlTransformer.generate(Schema,int)"], "external_dependencies": {"modules": ["Faker", "Schema", "SqlTransformer"]}, "category": "unit", "description": "Tests the generation of SQL statements with lowercase keywords for SqlTransformer with Postgres dialect."}, {"name": "sqlKeywordCapitalCaseCheck", "primary_tested": ["SqlTransformer.generate(Schema,int)"], "external_dependencies": {"modules": ["Faker", "Schema", "SqlTransformer"]}, "category": "unit", "description": "Tests the generation of SQL statements with capital case keywords for SqlTransformer with Postgres dialect."}, {"name": "batchSqlTestForSqlTransformerOracle", "primary_tested": ["SqlTransformer.generate(Schema,int)"], "external_dependencies": {"modules": ["Faker", "Schema", "SqlTransformer"]}, "category": "unit", "description": "Tests the generation of batch SQL statements for SqlTransformer with Oracle dialect."}, {"name": "batchSizeSqlTestForSqlTransformerOracle", "primary_tested": ["SqlTransformer.generate(Schema,int)"], "external_dependencies": {"modules": ["Faker", "Schema", "SqlTransformer"]}, "category": "unit", "description": "Tests the generation of batch SQL statements with a specific batch size for SqlTransformer with Oracle dialect."}, {"name": "batchSizeSqlTestForSqlTransformerPostgres", "primary_tested": ["SqlTransformer.generate(Schema,int)"], "external_dependencies": {"modules": ["Faker", "Schema", "SqlTransformer"]}, "category": "unit", "description": "Tests the generation of batch SQL statements with a specific batch size for SqlTransformer with Postgres dialect."}, {"name": "arrayAndMultisetSqlTestForSqlTransformerCalcite", "primary_tested": ["SqlTransformer.generate(Schema,int)"], "external_dependencies": {"modules": ["Schema", "SqlTransformer"]}, "category": "unit", "description": "Tests the generation of SQL statements with arrays and multisets for SqlTransformer with Calcite dialect."}, {"name": "batchTestForSqlTransformerSparkSql", "primary_tested": ["SqlTransformer.generate(Schema,int)"], "external_dependencies": {"modules": ["Faker", "Schema", "SqlTransformer"]}, "category": "unit", "description": "Tests the generation of batch SQL statements for SqlTransformer with SparkSQL dialect."}, {"name": "simpleSqlTestForSqlTransformerSparkSql", "primary_tested": ["SqlTransformer.generate(Schema,int)"], "external_dependencies": {"modules": ["Schema", "SqlTransformer"]}, "category": "unit", "description": "Tests the generation of simple SQL statements for SqlTransformer with SparkSQL dialect."}, {"name": "simpleStreamTestForSqlTransformerSparkSql", "primary_tested": ["SqlTransformer.generateStream(Schema,int)"], "external_dependencies": {"modules": ["Schema", "SqlTransformer"]}, "category": "unit", "description": "Tests the generation of SQL statements as a stream for SqlTransformer with SparkSQL dialect."}, {"name": "testSqlBatch", "primary_tested": ["SqlTransformer.generateStream(Schema,int)"], "external_dependencies": {"modules": ["BaseFaker", "Schema", "SqlTransformer"]}, "category": "unit", "description": "Tests the generation of SQL statements in batch mode for SqlTransformer."}]}